
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 2d 00 20 59 c1 00 00 3d 17 01 00 2d c1 00 00     .-. Y...=...-...
  10:	2d c1 00 00 2d c1 00 00 2d c1 00 00 00 00 00 00     -...-...-.......
	...
  2c:	39 be 00 00 2d c1 00 00 00 00 00 00 e5 bd 00 00     9...-...........
  3c:	2d c1 00 00                                         -...

00000040 <_irq_vector_table>:
  40:	e9 be 00 00 d7 21 01 00 e9 be 00 00 e9 be 00 00     .....!..........
  50:	e9 be 00 00 e9 be 00 00 e9 be 00 00 e9 be 00 00     ................
  60:	85 21 01 00 e9 be 00 00 e9 be 00 00 bd 21 01 00     .!...........!..
  70:	e9 be 00 00 e9 be 00 00 e9 be 00 00 e9 be 00 00     ................
  80:	e9 be 00 00 e9 be 00 00 e9 be 00 00 e9 be 00 00     ................
  90:	e9 be 00 00 e9 be 00 00 e9 be 00 00 e9 be 00 00     ................
  a0:	e9 be 00 00 e9 be 00 00 e9 be 00 00 e9 be 00 00     ................
  b0:	e9 be 00 00 e9 be 00 00                             ........

Disassembly of section text:

000000b8 <__aeabi_drsub>:
      b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      bc:	e002      	b.n	c4 <__adddf3>
      be:	bf00      	nop

000000c0 <__aeabi_dsub>:
      c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000c4 <__adddf3>:
      c4:	b530      	push	{r4, r5, lr}
      c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
      ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
      ce:	ea94 0f05 	teq	r4, r5
      d2:	bf08      	it	eq
      d4:	ea90 0f02 	teqeq	r0, r2
      d8:	bf1f      	itttt	ne
      da:	ea54 0c00 	orrsne.w	ip, r4, r0
      de:	ea55 0c02 	orrsne.w	ip, r5, r2
      e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
      e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
      ea:	f000 80e2 	beq.w	2b2 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xbe>
      ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
      f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
      f6:	bfb8      	it	lt
      f8:	426d      	neglt	r5, r5
      fa:	dd0c      	ble.n	116 <CONFIG_IDLE_STACK_SIZE+0x16>
      fc:	442c      	add	r4, r5
      fe:	ea80 0202 	eor.w	r2, r0, r2
     102:	ea81 0303 	eor.w	r3, r1, r3
     106:	ea82 0000 	eor.w	r0, r2, r0
     10a:	ea83 0101 	eor.w	r1, r3, r1
     10e:	ea80 0202 	eor.w	r2, r0, r2
     112:	ea81 0303 	eor.w	r3, r1, r3
     116:	2d36      	cmp	r5, #54	; 0x36
     118:	bf88      	it	hi
     11a:	bd30      	pophi	{r4, r5, pc}
     11c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     120:	ea4f 3101 	mov.w	r1, r1, lsl #12
     124:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     128:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     12c:	d002      	beq.n	134 <CONFIG_IDLE_STACK_SIZE+0x34>
     12e:	4240      	negs	r0, r0
     130:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     134:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     138:	ea4f 3303 	mov.w	r3, r3, lsl #12
     13c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     140:	d002      	beq.n	148 <CONFIG_IDLE_STACK_SIZE+0x48>
     142:	4252      	negs	r2, r2
     144:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     148:	ea94 0f05 	teq	r4, r5
     14c:	f000 80a7 	beq.w	29e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xaa>
     150:	f1a4 0401 	sub.w	r4, r4, #1
     154:	f1d5 0e20 	rsbs	lr, r5, #32
     158:	db0d      	blt.n	176 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x9>
     15a:	fa02 fc0e 	lsl.w	ip, r2, lr
     15e:	fa22 f205 	lsr.w	r2, r2, r5
     162:	1880      	adds	r0, r0, r2
     164:	f141 0100 	adc.w	r1, r1, #0
     168:	fa03 f20e 	lsl.w	r2, r3, lr
     16c:	1880      	adds	r0, r0, r2
     16e:	fa43 f305 	asr.w	r3, r3, r5
     172:	4159      	adcs	r1, r3
     174:	e00e      	b.n	194 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x27>
     176:	f1a5 0520 	sub.w	r5, r5, #32
     17a:	f10e 0e20 	add.w	lr, lr, #32
     17e:	2a01      	cmp	r2, #1
     180:	fa03 fc0e 	lsl.w	ip, r3, lr
     184:	bf28      	it	cs
     186:	f04c 0c02 	orrcs.w	ip, ip, #2
     18a:	fa43 f305 	asr.w	r3, r3, r5
     18e:	18c0      	adds	r0, r0, r3
     190:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     194:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     198:	d507      	bpl.n	1aa <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3d>
     19a:	f04f 0e00 	mov.w	lr, #0
     19e:	f1dc 0c00 	rsbs	ip, ip, #0
     1a2:	eb7e 0000 	sbcs.w	r0, lr, r0
     1a6:	eb6e 0101 	sbc.w	r1, lr, r1
     1aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1ae:	d31b      	bcc.n	1e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7b>
     1b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1b4:	d30c      	bcc.n	1d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x63>
     1b6:	0849      	lsrs	r1, r1, #1
     1b8:	ea5f 0030 	movs.w	r0, r0, rrx
     1bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1c0:	f104 0401 	add.w	r4, r4, #1
     1c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1cc:	f080 809a 	bcs.w	304 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x110>
     1d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1d4:	bf08      	it	eq
     1d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     1da:	f150 0000 	adcs.w	r0, r0, #0
     1de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     1e2:	ea41 0105 	orr.w	r1, r1, r5
     1e6:	bd30      	pop	{r4, r5, pc}
     1e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     1ec:	4140      	adcs	r0, r0
     1ee:	eb41 0101 	adc.w	r1, r1, r1
     1f2:	3c01      	subs	r4, #1
     1f4:	bf28      	it	cs
     1f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     1fa:	d2e9      	bcs.n	1d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x63>
     1fc:	f091 0f00 	teq	r1, #0
     200:	bf04      	itt	eq
     202:	4601      	moveq	r1, r0
     204:	2000      	moveq	r0, #0
     206:	fab1 f381 	clz	r3, r1
     20a:	bf08      	it	eq
     20c:	3320      	addeq	r3, #32
     20e:	f1a3 030b 	sub.w	r3, r3, #11
     212:	f1b3 0220 	subs.w	r2, r3, #32
     216:	da0c      	bge.n	232 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x3e>
     218:	320c      	adds	r2, #12
     21a:	dd08      	ble.n	22e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x3a>
     21c:	f102 0c14 	add.w	ip, r2, #20
     220:	f1c2 020c 	rsb	r2, r2, #12
     224:	fa01 f00c 	lsl.w	r0, r1, ip
     228:	fa21 f102 	lsr.w	r1, r1, r2
     22c:	e00c      	b.n	248 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x54>
     22e:	f102 0214 	add.w	r2, r2, #20
     232:	bfd8      	it	le
     234:	f1c2 0c20 	rsble	ip, r2, #32
     238:	fa01 f102 	lsl.w	r1, r1, r2
     23c:	fa20 fc0c 	lsr.w	ip, r0, ip
     240:	bfdc      	itt	le
     242:	ea41 010c 	orrle.w	r1, r1, ip
     246:	4090      	lslle	r0, r2
     248:	1ae4      	subs	r4, r4, r3
     24a:	bfa2      	ittt	ge
     24c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     250:	4329      	orrge	r1, r5
     252:	bd30      	popge	{r4, r5, pc}
     254:	ea6f 0404 	mvn.w	r4, r4
     258:	3c1f      	subs	r4, #31
     25a:	da1c      	bge.n	296 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xa2>
     25c:	340c      	adds	r4, #12
     25e:	dc0e      	bgt.n	27e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8a>
     260:	f104 0414 	add.w	r4, r4, #20
     264:	f1c4 0220 	rsb	r2, r4, #32
     268:	fa20 f004 	lsr.w	r0, r0, r4
     26c:	fa01 f302 	lsl.w	r3, r1, r2
     270:	ea40 0003 	orr.w	r0, r0, r3
     274:	fa21 f304 	lsr.w	r3, r1, r4
     278:	ea45 0103 	orr.w	r1, r5, r3
     27c:	bd30      	pop	{r4, r5, pc}
     27e:	f1c4 040c 	rsb	r4, r4, #12
     282:	f1c4 0220 	rsb	r2, r4, #32
     286:	fa20 f002 	lsr.w	r0, r0, r2
     28a:	fa01 f304 	lsl.w	r3, r1, r4
     28e:	ea40 0003 	orr.w	r0, r0, r3
     292:	4629      	mov	r1, r5
     294:	bd30      	pop	{r4, r5, pc}
     296:	fa21 f004 	lsr.w	r0, r1, r4
     29a:	4629      	mov	r1, r5
     29c:	bd30      	pop	{r4, r5, pc}
     29e:	f094 0f00 	teq	r4, #0
     2a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2a6:	bf06      	itte	eq
     2a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2ac:	3401      	addeq	r4, #1
     2ae:	3d01      	subne	r5, #1
     2b0:	e74e      	b.n	150 <CONFIG_IDLE_STACK_SIZE+0x50>
     2b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2b6:	bf18      	it	ne
     2b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2bc:	d029      	beq.n	312 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x11e>
     2be:	ea94 0f05 	teq	r4, r5
     2c2:	bf08      	it	eq
     2c4:	ea90 0f02 	teqeq	r0, r2
     2c8:	d005      	beq.n	2d6 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xe2>
     2ca:	ea54 0c00 	orrs.w	ip, r4, r0
     2ce:	bf04      	itt	eq
     2d0:	4619      	moveq	r1, r3
     2d2:	4610      	moveq	r0, r2
     2d4:	bd30      	pop	{r4, r5, pc}
     2d6:	ea91 0f03 	teq	r1, r3
     2da:	bf1e      	ittt	ne
     2dc:	2100      	movne	r1, #0
     2de:	2000      	movne	r0, #0
     2e0:	bd30      	popne	{r4, r5, pc}
     2e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     2e6:	d105      	bne.n	2f4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x100>
     2e8:	0040      	lsls	r0, r0, #1
     2ea:	4149      	adcs	r1, r1
     2ec:	bf28      	it	cs
     2ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     2f2:	bd30      	pop	{r4, r5, pc}
     2f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     2f8:	bf3c      	itt	cc
     2fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     2fe:	bd30      	popcc	{r4, r5, pc}
     300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     304:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     308:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     30c:	f04f 0000 	mov.w	r0, #0
     310:	bd30      	pop	{r4, r5, pc}
     312:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     316:	bf1a      	itte	ne
     318:	4619      	movne	r1, r3
     31a:	4610      	movne	r0, r2
     31c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     320:	bf1c      	itt	ne
     322:	460b      	movne	r3, r1
     324:	4602      	movne	r2, r0
     326:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     32a:	bf06      	itte	eq
     32c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     330:	ea91 0f03 	teqeq	r1, r3
     334:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     338:	bd30      	pop	{r4, r5, pc}
     33a:	bf00      	nop

0000033c <__aeabi_ui2d>:
     33c:	f090 0f00 	teq	r0, #0
     340:	bf04      	itt	eq
     342:	2100      	moveq	r1, #0
     344:	4770      	bxeq	lr
     346:	b530      	push	{r4, r5, lr}
     348:	f44f 6480 	mov.w	r4, #1024	; 0x400
     34c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     350:	f04f 0500 	mov.w	r5, #0
     354:	f04f 0100 	mov.w	r1, #0
     358:	e750      	b.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
     35a:	bf00      	nop

0000035c <__aeabi_i2d>:
     35c:	f090 0f00 	teq	r0, #0
     360:	bf04      	itt	eq
     362:	2100      	moveq	r1, #0
     364:	4770      	bxeq	lr
     366:	b530      	push	{r4, r5, lr}
     368:	f44f 6480 	mov.w	r4, #1024	; 0x400
     36c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     370:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     374:	bf48      	it	mi
     376:	4240      	negmi	r0, r0
     378:	f04f 0100 	mov.w	r1, #0
     37c:	e73e      	b.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
     37e:	bf00      	nop

00000380 <__aeabi_f2d>:
     380:	0042      	lsls	r2, r0, #1
     382:	ea4f 01e2 	mov.w	r1, r2, asr #3
     386:	ea4f 0131 	mov.w	r1, r1, rrx
     38a:	ea4f 7002 	mov.w	r0, r2, lsl #28
     38e:	bf1f      	itttt	ne
     390:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     394:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     398:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     39c:	4770      	bxne	lr
     39e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3a2:	bf08      	it	eq
     3a4:	4770      	bxeq	lr
     3a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3aa:	bf04      	itt	eq
     3ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3b0:	4770      	bxeq	lr
     3b2:	b530      	push	{r4, r5, lr}
     3b4:	f44f 7460 	mov.w	r4, #896	; 0x380
     3b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3c0:	e71c      	b.n	1fc <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8>
     3c2:	bf00      	nop

000003c4 <__aeabi_ul2d>:
     3c4:	ea50 0201 	orrs.w	r2, r0, r1
     3c8:	bf08      	it	eq
     3ca:	4770      	bxeq	lr
     3cc:	b530      	push	{r4, r5, lr}
     3ce:	f04f 0500 	mov.w	r5, #0
     3d2:	e00a      	b.n	3ea <__aeabi_l2d+0x16>

000003d4 <__aeabi_l2d>:
     3d4:	ea50 0201 	orrs.w	r2, r0, r1
     3d8:	bf08      	it	eq
     3da:	4770      	bxeq	lr
     3dc:	b530      	push	{r4, r5, lr}
     3de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     3e2:	d502      	bpl.n	3ea <__aeabi_l2d+0x16>
     3e4:	4240      	negs	r0, r0
     3e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     3ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     3f6:	f43f aed8 	beq.w	1aa <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3d>
     3fa:	f04f 0203 	mov.w	r2, #3
     3fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     402:	bf18      	it	ne
     404:	3203      	addne	r2, #3
     406:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     40a:	bf18      	it	ne
     40c:	3203      	addne	r2, #3
     40e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     412:	f1c2 0320 	rsb	r3, r2, #32
     416:	fa00 fc03 	lsl.w	ip, r0, r3
     41a:	fa20 f002 	lsr.w	r0, r0, r2
     41e:	fa01 fe03 	lsl.w	lr, r1, r3
     422:	ea40 000e 	orr.w	r0, r0, lr
     426:	fa21 f102 	lsr.w	r1, r1, r2
     42a:	4414      	add	r4, r2
     42c:	e6bd      	b.n	1aa <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3d>
     42e:	bf00      	nop

00000430 <__aeabi_dmul>:
     430:	b570      	push	{r4, r5, r6, lr}
     432:	f04f 0cff 	mov.w	ip, #255	; 0xff
     436:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     43a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     43e:	bf1d      	ittte	ne
     440:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     444:	ea94 0f0c 	teqne	r4, ip
     448:	ea95 0f0c 	teqne	r5, ip
     44c:	f000 f8de 	bleq	60c <CONFIG_BT_HCI_TX_STACK_SIZE+0xc>
     450:	442c      	add	r4, r5
     452:	ea81 0603 	eor.w	r6, r1, r3
     456:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     45a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     45e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     462:	bf18      	it	ne
     464:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     46c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     470:	d038      	beq.n	4e4 <__data_size+0x64>
     472:	fba0 ce02 	umull	ip, lr, r0, r2
     476:	f04f 0500 	mov.w	r5, #0
     47a:	fbe1 e502 	umlal	lr, r5, r1, r2
     47e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     482:	fbe0 e503 	umlal	lr, r5, r0, r3
     486:	f04f 0600 	mov.w	r6, #0
     48a:	fbe1 5603 	umlal	r5, r6, r1, r3
     48e:	f09c 0f00 	teq	ip, #0
     492:	bf18      	it	ne
     494:	f04e 0e01 	orrne.w	lr, lr, #1
     498:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     49c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4a4:	d204      	bcs.n	4b0 <__data_size+0x30>
     4a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4aa:	416d      	adcs	r5, r5
     4ac:	eb46 0606 	adc.w	r6, r6, r6
     4b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4c8:	bf88      	it	hi
     4ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4ce:	d81e      	bhi.n	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
     4d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4d4:	bf08      	it	eq
     4d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     4da:	f150 0000 	adcs.w	r0, r0, #0
     4de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     4e2:	bd70      	pop	{r4, r5, r6, pc}
     4e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     4e8:	ea46 0101 	orr.w	r1, r6, r1
     4ec:	ea40 0002 	orr.w	r0, r0, r2
     4f0:	ea81 0103 	eor.w	r1, r1, r3
     4f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     4f8:	bfc2      	ittt	gt
     4fa:	ebd4 050c 	rsbsgt	r5, r4, ip
     4fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     502:	bd70      	popgt	{r4, r5, r6, pc}
     504:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     508:	f04f 0e00 	mov.w	lr, #0
     50c:	3c01      	subs	r4, #1
     50e:	f300 80ab 	bgt.w	668 <CONFIG_BT_HCI_TX_STACK_SIZE+0x68>
     512:	f114 0f36 	cmn.w	r4, #54	; 0x36
     516:	bfde      	ittt	le
     518:	2000      	movle	r0, #0
     51a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     51e:	bd70      	pople	{r4, r5, r6, pc}
     520:	f1c4 0400 	rsb	r4, r4, #0
     524:	3c20      	subs	r4, #32
     526:	da35      	bge.n	594 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xac>
     528:	340c      	adds	r4, #12
     52a:	dc1b      	bgt.n	564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>
     52c:	f104 0414 	add.w	r4, r4, #20
     530:	f1c4 0520 	rsb	r5, r4, #32
     534:	fa00 f305 	lsl.w	r3, r0, r5
     538:	fa20 f004 	lsr.w	r0, r0, r4
     53c:	fa01 f205 	lsl.w	r2, r1, r5
     540:	ea40 0002 	orr.w	r0, r0, r2
     544:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     54c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     550:	fa21 f604 	lsr.w	r6, r1, r4
     554:	eb42 0106 	adc.w	r1, r2, r6
     558:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     55c:	bf08      	it	eq
     55e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     562:	bd70      	pop	{r4, r5, r6, pc}
     564:	f1c4 040c 	rsb	r4, r4, #12
     568:	f1c4 0520 	rsb	r5, r4, #32
     56c:	fa00 f304 	lsl.w	r3, r0, r4
     570:	fa20 f005 	lsr.w	r0, r0, r5
     574:	fa01 f204 	lsl.w	r2, r1, r4
     578:	ea40 0002 	orr.w	r0, r0, r2
     57c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     580:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     584:	f141 0100 	adc.w	r1, r1, #0
     588:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     58c:	bf08      	it	eq
     58e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     592:	bd70      	pop	{r4, r5, r6, pc}
     594:	f1c4 0520 	rsb	r5, r4, #32
     598:	fa00 f205 	lsl.w	r2, r0, r5
     59c:	ea4e 0e02 	orr.w	lr, lr, r2
     5a0:	fa20 f304 	lsr.w	r3, r0, r4
     5a4:	fa01 f205 	lsl.w	r2, r1, r5
     5a8:	ea43 0302 	orr.w	r3, r3, r2
     5ac:	fa21 f004 	lsr.w	r0, r1, r4
     5b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5b4:	fa21 f204 	lsr.w	r2, r1, r4
     5b8:	ea20 0002 	bic.w	r0, r0, r2
     5bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5c4:	bf08      	it	eq
     5c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f094 0f00 	teq	r4, #0
     5d0:	d10f      	bne.n	5f2 <CONFIG_BT_COMPANY_ID+0x1>
     5d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5d6:	0040      	lsls	r0, r0, #1
     5d8:	eb41 0101 	adc.w	r1, r1, r1
     5dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     5e0:	bf08      	it	eq
     5e2:	3c01      	subeq	r4, #1
     5e4:	d0f7      	beq.n	5d6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xee>
     5e6:	ea41 0106 	orr.w	r1, r1, r6
     5ea:	f095 0f00 	teq	r5, #0
     5ee:	bf18      	it	ne
     5f0:	4770      	bxne	lr
     5f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     5f6:	0052      	lsls	r2, r2, #1
     5f8:	eb43 0303 	adc.w	r3, r3, r3
     5fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     600:	bf08      	it	eq
     602:	3d01      	subeq	r5, #1
     604:	d0f7      	beq.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     606:	ea43 0306 	orr.w	r3, r3, r6
     60a:	4770      	bx	lr
     60c:	ea94 0f0c 	teq	r4, ip
     610:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     614:	bf18      	it	ne
     616:	ea95 0f0c 	teqne	r5, ip
     61a:	d00c      	beq.n	636 <CONFIG_BT_HCI_TX_STACK_SIZE+0x36>
     61c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     620:	bf18      	it	ne
     622:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     626:	d1d1      	bne.n	5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>
     628:	ea81 0103 	eor.w	r1, r1, r3
     62c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     630:	f04f 0000 	mov.w	r0, #0
     634:	bd70      	pop	{r4, r5, r6, pc}
     636:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     63a:	bf06      	itte	eq
     63c:	4610      	moveq	r0, r2
     63e:	4619      	moveq	r1, r3
     640:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     644:	d019      	beq.n	67a <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     646:	ea94 0f0c 	teq	r4, ip
     64a:	d102      	bne.n	652 <CONFIG_BT_HCI_TX_STACK_SIZE+0x52>
     64c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     650:	d113      	bne.n	67a <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     652:	ea95 0f0c 	teq	r5, ip
     656:	d105      	bne.n	664 <CONFIG_BT_HCI_TX_STACK_SIZE+0x64>
     658:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     65c:	bf1c      	itt	ne
     65e:	4610      	movne	r0, r2
     660:	4619      	movne	r1, r3
     662:	d10a      	bne.n	67a <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     664:	ea81 0103 	eor.w	r1, r1, r3
     668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     66c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     670:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     674:	f04f 0000 	mov.w	r0, #0
     678:	bd70      	pop	{r4, r5, r6, pc}
     67a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     67e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     682:	bd70      	pop	{r4, r5, r6, pc}

00000684 <__aeabi_ddiv>:
     684:	b570      	push	{r4, r5, r6, lr}
     686:	f04f 0cff 	mov.w	ip, #255	; 0xff
     68a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     68e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     692:	bf1d      	ittte	ne
     694:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     698:	ea94 0f0c 	teqne	r4, ip
     69c:	ea95 0f0c 	teqne	r5, ip
     6a0:	f000 f8a7 	bleq	7f2 <__aeabi_ddiv+0x16e>
     6a4:	eba4 0405 	sub.w	r4, r4, r5
     6a8:	ea81 0e03 	eor.w	lr, r1, r3
     6ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6b4:	f000 8088 	beq.w	7c8 <__aeabi_ddiv+0x144>
     6b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
     6d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     6dc:	429d      	cmp	r5, r3
     6de:	bf08      	it	eq
     6e0:	4296      	cmpeq	r6, r2
     6e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     6e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
     6ea:	d202      	bcs.n	6f2 <__aeabi_ddiv+0x6e>
     6ec:	085b      	lsrs	r3, r3, #1
     6ee:	ea4f 0232 	mov.w	r2, r2, rrx
     6f2:	1ab6      	subs	r6, r6, r2
     6f4:	eb65 0503 	sbc.w	r5, r5, r3
     6f8:	085b      	lsrs	r3, r3, #1
     6fa:	ea4f 0232 	mov.w	r2, r2, rrx
     6fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     702:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     706:	ebb6 0e02 	subs.w	lr, r6, r2
     70a:	eb75 0e03 	sbcs.w	lr, r5, r3
     70e:	bf22      	ittt	cs
     710:	1ab6      	subcs	r6, r6, r2
     712:	4675      	movcs	r5, lr
     714:	ea40 000c 	orrcs.w	r0, r0, ip
     718:	085b      	lsrs	r3, r3, #1
     71a:	ea4f 0232 	mov.w	r2, r2, rrx
     71e:	ebb6 0e02 	subs.w	lr, r6, r2
     722:	eb75 0e03 	sbcs.w	lr, r5, r3
     726:	bf22      	ittt	cs
     728:	1ab6      	subcs	r6, r6, r2
     72a:	4675      	movcs	r5, lr
     72c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     730:	085b      	lsrs	r3, r3, #1
     732:	ea4f 0232 	mov.w	r2, r2, rrx
     736:	ebb6 0e02 	subs.w	lr, r6, r2
     73a:	eb75 0e03 	sbcs.w	lr, r5, r3
     73e:	bf22      	ittt	cs
     740:	1ab6      	subcs	r6, r6, r2
     742:	4675      	movcs	r5, lr
     744:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     748:	085b      	lsrs	r3, r3, #1
     74a:	ea4f 0232 	mov.w	r2, r2, rrx
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     760:	ea55 0e06 	orrs.w	lr, r5, r6
     764:	d018      	beq.n	798 <__aeabi_ddiv+0x114>
     766:	ea4f 1505 	mov.w	r5, r5, lsl #4
     76a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     76e:	ea4f 1606 	mov.w	r6, r6, lsl #4
     772:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     776:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     77a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     77e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     782:	d1c0      	bne.n	706 <__aeabi_ddiv+0x82>
     784:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     788:	d10b      	bne.n	7a2 <__aeabi_ddiv+0x11e>
     78a:	ea41 0100 	orr.w	r1, r1, r0
     78e:	f04f 0000 	mov.w	r0, #0
     792:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     796:	e7b6      	b.n	706 <__aeabi_ddiv+0x82>
     798:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     79c:	bf04      	itt	eq
     79e:	4301      	orreq	r1, r0
     7a0:	2000      	moveq	r0, #0
     7a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7a6:	bf88      	it	hi
     7a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7ac:	f63f aeaf 	bhi.w	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
     7b0:	ebb5 0c03 	subs.w	ip, r5, r3
     7b4:	bf04      	itt	eq
     7b6:	ebb6 0c02 	subseq.w	ip, r6, r2
     7ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7be:	f150 0000 	adcs.w	r0, r0, #0
     7c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7c6:	bd70      	pop	{r4, r5, r6, pc}
     7c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7d4:	bfc2      	ittt	gt
     7d6:	ebd4 050c 	rsbsgt	r5, r4, ip
     7da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     7de:	bd70      	popgt	{r4, r5, r6, pc}
     7e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     7e4:	f04f 0e00 	mov.w	lr, #0
     7e8:	3c01      	subs	r4, #1
     7ea:	e690      	b.n	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
     7ec:	ea45 0e06 	orr.w	lr, r5, r6
     7f0:	e68d      	b.n	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
     7f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     7f6:	ea94 0f0c 	teq	r4, ip
     7fa:	bf08      	it	eq
     7fc:	ea95 0f0c 	teqeq	r5, ip
     800:	f43f af3b 	beq.w	67a <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     804:	ea94 0f0c 	teq	r4, ip
     808:	d10a      	bne.n	820 <CONFIG_ISR_STACK_SIZE+0x20>
     80a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     80e:	f47f af34 	bne.w	67a <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     812:	ea95 0f0c 	teq	r5, ip
     816:	f47f af25 	bne.w	664 <CONFIG_BT_HCI_TX_STACK_SIZE+0x64>
     81a:	4610      	mov	r0, r2
     81c:	4619      	mov	r1, r3
     81e:	e72c      	b.n	67a <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     820:	ea95 0f0c 	teq	r5, ip
     824:	d106      	bne.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
     826:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     82a:	f43f aefd 	beq.w	628 <CONFIG_BT_HCI_TX_STACK_SIZE+0x28>
     82e:	4610      	mov	r0, r2
     830:	4619      	mov	r1, r3
     832:	e722      	b.n	67a <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     838:	bf18      	it	ne
     83a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     83e:	f47f aec5 	bne.w	5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>
     842:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     846:	f47f af0d 	bne.w	664 <CONFIG_BT_HCI_TX_STACK_SIZE+0x64>
     84a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     84e:	f47f aeeb 	bne.w	628 <CONFIG_BT_HCI_TX_STACK_SIZE+0x28>
     852:	e712      	b.n	67a <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>

00000854 <__aeabi_d2uiz>:
     854:	004a      	lsls	r2, r1, #1
     856:	d211      	bcs.n	87c <__aeabi_d2uiz+0x28>
     858:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     85c:	d211      	bcs.n	882 <__aeabi_d2uiz+0x2e>
     85e:	d50d      	bpl.n	87c <__aeabi_d2uiz+0x28>
     860:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     864:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     868:	d40e      	bmi.n	888 <__aeabi_d2uiz+0x34>
     86a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     86e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     872:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     876:	fa23 f002 	lsr.w	r0, r3, r2
     87a:	4770      	bx	lr
     87c:	f04f 0000 	mov.w	r0, #0
     880:	4770      	bx	lr
     882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     886:	d102      	bne.n	88e <__aeabi_d2uiz+0x3a>
     888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     88c:	4770      	bx	lr
     88e:	f04f 0000 	mov.w	r0, #0
     892:	4770      	bx	lr

00000894 <__aeabi_uldivmod>:
     894:	b953      	cbnz	r3, 8ac <__aeabi_uldivmod+0x18>
     896:	b94a      	cbnz	r2, 8ac <__aeabi_uldivmod+0x18>
     898:	2900      	cmp	r1, #0
     89a:	bf08      	it	eq
     89c:	2800      	cmpeq	r0, #0
     89e:	bf1c      	itt	ne
     8a0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     8a4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     8a8:	f000 b80c 	b.w	8c4 <__aeabi_idiv0>
     8ac:	f1ad 0c08 	sub.w	ip, sp, #8
     8b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     8b4:	f007 fb28 	bl	7f08 <__udivmoddi4>
     8b8:	f8dd e004 	ldr.w	lr, [sp, #4]
     8bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8c0:	b004      	add	sp, #16
     8c2:	4770      	bx	lr

000008c4 <__aeabi_idiv0>:
     8c4:	4770      	bx	lr
     8c6:	bf00      	nop

000008c8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
     8c8:	4801      	ldr	r0, [pc, #4]	; (8d0 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
     8ca:	7800      	ldrb	r0, [r0, #0]
     8cc:	4770      	bx	lr
     8ce:	0000      	.short	0x0000
     8d0:	20000028 	.word	0x20000028

000008d4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     8d4:	b570      	push	{r4, r5, r6, lr}
     8d6:	4c17      	ldr	r4, [pc, #92]	; (934 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
     8d8:	7860      	ldrb	r0, [r4, #1]
     8da:	2800      	cmp	r0, #0
     8dc:	d123      	bne.n	926 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
     8de:	2001      	movs	r0, #1
     8e0:	7060      	strb	r0, [r4, #1]
     8e2:	f007 fdb0 	bl	8446 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     8e6:	f06f 0527 	mvn.w	r5, #39	; 0x27
     8ea:	b928      	cbnz	r0, 8f8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     8ec:	f007 fde1 	bl	84b2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     8f0:	b910      	cbnz	r0, 8f8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     8f2:	f007 fde8 	bl	84c6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     8f6:	b120      	cbz	r0, 902 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
     8f8:	480f      	ldr	r0, [pc, #60]	; (938 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
     8fa:	6060      	str	r0, [r4, #4]
     8fc:	70a5      	strb	r5, [r4, #2]
     8fe:	2008      	movs	r0, #8
     900:	e010      	b.n	924 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
     902:	f007 fd75 	bl	83f0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     906:	b940      	cbnz	r0, 91a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     908:	f007 fd7c 	bl	8404 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     90c:	b928      	cbnz	r0, 91a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     90e:	f007 fd90 	bl	8432 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     912:	b910      	cbnz	r0, 91a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     914:	f007 fda1 	bl	845a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     918:	b130      	cbz	r0, 928 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
     91a:	4807      	ldr	r0, [pc, #28]	; (938 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
     91c:	3031      	adds	r0, #49	; 0x31
     91e:	6060      	str	r0, [r4, #4]
     920:	70a5      	strb	r5, [r4, #2]
     922:	2004      	movs	r0, #4
     924:	70e0      	strb	r0, [r4, #3]
     926:	bd70      	pop	{r4, r5, r6, pc}
     928:	f44f 718f 	mov.w	r1, #286	; 0x11e
     92c:	2074      	movs	r0, #116	; 0x74
     92e:	f003 fa83 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     932:	0000      	.short	0x0000
     934:	20000028 	.word	0x20000028
     938:	0000ab74 	.word	0x0000ab74

0000093c <mpsl_tx_power_radio_supported_power_adjust>:
     93c:	4908      	ldr	r1, [pc, #32]	; (960 <mpsl_tx_power_radio_supported_power_adjust+0x24>)
     93e:	f991 2003 	ldrsb.w	r2, [r1, #3]
     942:	4290      	cmp	r0, r2
     944:	da03      	bge.n	94e <mpsl_tx_power_radio_supported_power_adjust+0x12>
     946:	f991 2002 	ldrsb.w	r2, [r1, #2]
     94a:	4290      	cmp	r0, r2
     94c:	dc01      	bgt.n	952 <mpsl_tx_power_radio_supported_power_adjust+0x16>
     94e:	4610      	mov	r0, r2
     950:	4770      	bx	lr
     952:	6849      	ldr	r1, [r1, #4]
     954:	1a80      	subs	r0, r0, r2
     956:	5c08      	ldrb	r0, [r1, r0]
     958:	4902      	ldr	r1, [pc, #8]	; (964 <mpsl_tx_power_radio_supported_power_adjust+0x28>)
     95a:	5608      	ldrsb	r0, [r1, r0]
     95c:	4770      	bx	lr
     95e:	0000      	.short	0x0000
     960:	20000028 	.word	0x20000028
     964:	0000ab66 	.word	0x0000ab66

00000968 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
     968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     96c:	461c      	mov	r4, r3
     96e:	4690      	mov	r8, r2
     970:	460d      	mov	r5, r1
     972:	4606      	mov	r6, r0
     974:	f06f 0715 	mvn.w	r7, #21
     978:	2804      	cmp	r0, #4
     97a:	d804      	bhi.n	986 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     97c:	b11c      	cbz	r4, 986 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     97e:	f007 fc1b 	bl	81b8 <strlen+0x10>
     982:	42a8      	cmp	r0, r5
     984:	d802      	bhi.n	98c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
     986:	4638      	mov	r0, r7
     988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     98c:	4805      	ldr	r0, [pc, #20]	; (9a4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
     98e:	4642      	mov	r2, r8
     990:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     994:	b118      	cbz	r0, 99e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     996:	5740      	ldrsb	r0, [r0, r5]
     998:	4282      	cmp	r2, r0
     99a:	dd00      	ble.n	99e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     99c:	4602      	mov	r2, r0
     99e:	7022      	strb	r2, [r4, #0]
     9a0:	2000      	movs	r0, #0
     9a2:	e7f1      	b.n	988 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
     9a4:	200006a8 	.word	0x200006a8

000009a8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     9a8:	4801      	ldr	r0, [pc, #4]	; (9b0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     9aa:	7800      	ldrb	r0, [r0, #0]
     9ac:	4770      	bx	lr
     9ae:	0000      	.short	0x0000
     9b0:	20000030 	.word	0x20000030

000009b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     9b4:	4905      	ldr	r1, [pc, #20]	; (9cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     9b6:	780a      	ldrb	r2, [r1, #0]
     9b8:	4290      	cmp	r0, r2
     9ba:	d301      	bcc.n	9c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     9bc:	2000      	movs	r0, #0
     9be:	4770      	bx	lr
     9c0:	6849      	ldr	r1, [r1, #4]
     9c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     9c6:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     9ca:	4770      	bx	lr
     9cc:	20000030 	.word	0x20000030

000009d0 <MPSL_IRQ_RADIO_Handler>:
     9d0:	490e      	ldr	r1, [pc, #56]	; (a0c <MPSL_IRQ_RADIO_Handler+0x3c>)
     9d2:	b510      	push	{r4, lr}
     9d4:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     9d8:	2820      	cmp	r0, #32
     9da:	d012      	beq.n	a02 <MPSL_IRQ_RADIO_Handler+0x32>
     9dc:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     9e0:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
     9e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     9e8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
     9ec:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
     9f0:	6840      	ldr	r0, [r0, #4]
     9f2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     9f6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
     9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     9fe:	2104      	movs	r1, #4
     a00:	4710      	bx	r2
     a02:	f640 01bc 	movw	r1, #2236	; 0x8bc
     a06:	2070      	movs	r0, #112	; 0x70
     a08:	f003 fa16 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a0c:	20000abc 	.word	0x20000abc
     a10:	b570      	push	{r4, r5, r6, lr}
     a12:	4605      	mov	r5, r0
     a14:	2a20      	cmp	r2, #32
     a16:	d028      	beq.n	a6a <MPSL_IRQ_RADIO_Handler+0x9a>
     a18:	4819      	ldr	r0, [pc, #100]	; (a80 <MPSL_IRQ_RADIO_Handler+0xb0>)
     a1a:	4c1a      	ldr	r4, [pc, #104]	; (a84 <MPSL_IRQ_RADIO_Handler+0xb4>)
     a1c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     a20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     a24:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     a28:	4423      	add	r3, r4
     a2a:	2920      	cmp	r1, #32
     a2c:	d022      	beq.n	a74 <MPSL_IRQ_RADIO_Handler+0xa4>
     a2e:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     a32:	7840      	ldrb	r0, [r0, #1]
     a34:	784c      	ldrb	r4, [r1, #1]
     a36:	7048      	strb	r0, [r1, #1]
     a38:	4620      	mov	r0, r4
     a3a:	4601      	mov	r1, r0
     a3c:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     a40:	4291      	cmp	r1, r2
     a42:	7005      	strb	r5, [r0, #0]
     a44:	7840      	ldrb	r0, [r0, #1]
     a46:	d1f8      	bne.n	a3a <MPSL_IRQ_RADIO_Handler+0x6a>
     a48:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     a4c:	2a20      	cmp	r2, #32
     a4e:	bf1a      	itte	ne
     a50:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     a54:	7054      	strbne	r4, [r2, #1]
     a56:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     a5a:	2220      	movs	r2, #32
     a5c:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     a60:	f88c 2001 	strb.w	r2, [ip, #1]
     a64:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     a68:	bd70      	pop	{r4, r5, r6, pc}
     a6a:	f44f 7126 	mov.w	r1, #664	; 0x298
     a6e:	2070      	movs	r0, #112	; 0x70
     a70:	f003 f9e2 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a74:	f893 4020 	ldrb.w	r4, [r3, #32]
     a78:	7840      	ldrb	r0, [r0, #1]
     a7a:	f883 0020 	strb.w	r0, [r3, #32]
     a7e:	e7db      	b.n	a38 <MPSL_IRQ_RADIO_Handler+0x68>
     a80:	20000a3c 	.word	0x20000a3c
     a84:	20000abc 	.word	0x20000abc
     a88:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a8c:	b08d      	sub	sp, #52	; 0x34
     a8e:	4615      	mov	r5, r2
     a90:	460c      	mov	r4, r1
     a92:	f002 f94b 	bl	2d2c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     a96:	4428      	add	r0, r5
     a98:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a9c:	9008      	str	r0, [sp, #32]
     a9e:	6821      	ldr	r1, [r4, #0]
     aa0:	1a08      	subs	r0, r1, r0
     aa2:	0200      	lsls	r0, r0, #8
     aa4:	17c1      	asrs	r1, r0, #31
     aa6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     aaa:	1200      	asrs	r0, r0, #8
     aac:	2800      	cmp	r0, #0
     aae:	f300 80f0 	bgt.w	c92 <MPSL_IRQ_RADIO_Handler+0x2c2>
     ab2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
     ab6:	48cd      	ldr	r0, [pc, #820]	; (dec <MPSL_IRQ_RADIO_Handler+0x41c>)
     ab8:	eb08 0148 	add.w	r1, r8, r8, lsl #1
     abc:	4408      	add	r0, r1
     abe:	9009      	str	r0, [sp, #36]	; 0x24
     ac0:	f890 5020 	ldrb.w	r5, [r0, #32]
     ac4:	2020      	movs	r0, #32
     ac6:	4eca      	ldr	r6, [pc, #808]	; (df0 <MPSL_IRQ_RADIO_Handler+0x420>)
     ac8:	f10d 0a18 	add.w	sl, sp, #24
     acc:	f10d 091c 	add.w	r9, sp, #28
     ad0:	f88d 0018 	strb.w	r0, [sp, #24]
     ad4:	2d20      	cmp	r5, #32
     ad6:	bf1c      	itt	ne
     ad8:	48c6      	ldrne	r0, [pc, #792]	; (df4 <MPSL_IRQ_RADIO_Handler+0x424>)
     ada:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     ade:	d038      	beq.n	b52 <MPSL_IRQ_RADIO_Handler+0x182>
     ae0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     ae4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     ae8:	f100 0108 	add.w	r1, r0, #8
     aec:	68c0      	ldr	r0, [r0, #12]
     aee:	6827      	ldr	r7, [r4, #0]
     af0:	1a38      	subs	r0, r7, r0
     af2:	0200      	lsls	r0, r0, #8
     af4:	17c2      	asrs	r2, r0, #31
     af6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     afa:	1200      	asrs	r0, r0, #8
     afc:	d429      	bmi.n	b52 <MPSL_IRQ_RADIO_Handler+0x182>
     afe:	89e0      	ldrh	r0, [r4, #14]
     b00:	b300      	cbz	r0, b44 <MPSL_IRQ_RADIO_Handler+0x174>
     b02:	89c8      	ldrh	r0, [r1, #14]
     b04:	b9f0      	cbnz	r0, b44 <MPSL_IRQ_RADIO_Handler+0x174>
     b06:	6808      	ldr	r0, [r1, #0]
     b08:	9003      	str	r0, [sp, #12]
     b0a:	f003 f809 	bl	3b20 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     b0e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     b12:	bf08      	it	eq
     b14:	200d      	moveq	r0, #13
     b16:	d00b      	beq.n	b30 <MPSL_IRQ_RADIO_Handler+0x160>
     b18:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     b1c:	3856      	subs	r0, #86	; 0x56
     b1e:	bf08      	it	eq
     b20:	201c      	moveq	r0, #28
     b22:	d005      	beq.n	b30 <MPSL_IRQ_RADIO_Handler+0x160>
     b24:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     b28:	389f      	subs	r0, #159	; 0x9f
     b2a:	bf14      	ite	ne
     b2c:	2000      	movne	r0, #0
     b2e:	2032      	moveq	r0, #50	; 0x32
     b30:	1c41      	adds	r1, r0, #1
     b32:	9803      	ldr	r0, [sp, #12]
     b34:	1a38      	subs	r0, r7, r0
     b36:	0200      	lsls	r0, r0, #8
     b38:	17c2      	asrs	r2, r0, #31
     b3a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     b3e:	1200      	asrs	r0, r0, #8
     b40:	4288      	cmp	r0, r1
     b42:	db06      	blt.n	b52 <MPSL_IRQ_RADIO_Handler+0x182>
     b44:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     b48:	f88a 5000 	strb.w	r5, [sl]
     b4c:	7845      	ldrb	r5, [r0, #1]
     b4e:	2d20      	cmp	r5, #32
     b50:	d1c6      	bne.n	ae0 <MPSL_IRQ_RADIO_Handler+0x110>
     b52:	f89a 0000 	ldrb.w	r0, [sl]
     b56:	f889 0000 	strb.w	r0, [r9]
     b5a:	2d20      	cmp	r5, #32
     b5c:	bf1c      	itt	ne
     b5e:	48a5      	ldrne	r0, [pc, #660]	; (df4 <MPSL_IRQ_RADIO_Handler+0x424>)
     b60:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     b64:	f000 813e 	beq.w	de4 <MPSL_IRQ_RADIO_Handler+0x414>
     b68:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     b6c:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     b70:	6861      	ldr	r1, [r4, #4]
     b72:	f8d7 8008 	ldr.w	r8, [r7, #8]
     b76:	f107 0008 	add.w	r0, r7, #8
     b7a:	eba8 0101 	sub.w	r1, r8, r1
     b7e:	0209      	lsls	r1, r1, #8
     b80:	17ca      	asrs	r2, r1, #31
     b82:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     b86:	1209      	asrs	r1, r1, #8
     b88:	d427      	bmi.n	bda <MPSL_IRQ_RADIO_Handler+0x20a>
     b8a:	89c0      	ldrh	r0, [r0, #14]
     b8c:	2800      	cmp	r0, #0
     b8e:	f000 8129 	beq.w	de4 <MPSL_IRQ_RADIO_Handler+0x414>
     b92:	89e0      	ldrh	r0, [r4, #14]
     b94:	2800      	cmp	r0, #0
     b96:	f040 8125 	bne.w	de4 <MPSL_IRQ_RADIO_Handler+0x414>
     b9a:	f8d4 a000 	ldr.w	sl, [r4]
     b9e:	f002 ffbf 	bl	3b20 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     ba2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     ba6:	bf08      	it	eq
     ba8:	200d      	moveq	r0, #13
     baa:	d00b      	beq.n	bc4 <MPSL_IRQ_RADIO_Handler+0x1f4>
     bac:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     bb0:	3856      	subs	r0, #86	; 0x56
     bb2:	bf08      	it	eq
     bb4:	201c      	moveq	r0, #28
     bb6:	d005      	beq.n	bc4 <MPSL_IRQ_RADIO_Handler+0x1f4>
     bb8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     bbc:	389f      	subs	r0, #159	; 0x9f
     bbe:	bf14      	ite	ne
     bc0:	2000      	movne	r0, #0
     bc2:	2032      	moveq	r0, #50	; 0x32
     bc4:	1c41      	adds	r1, r0, #1
     bc6:	eba8 000a 	sub.w	r0, r8, sl
     bca:	0200      	lsls	r0, r0, #8
     bcc:	17c2      	asrs	r2, r0, #31
     bce:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     bd2:	1200      	asrs	r0, r0, #8
     bd4:	4288      	cmp	r0, r1
     bd6:	f280 8105 	bge.w	de4 <MPSL_IRQ_RADIO_Handler+0x414>
     bda:	f889 5000 	strb.w	r5, [r9]
     bde:	7e38      	ldrb	r0, [r7, #24]
     be0:	7c21      	ldrb	r1, [r4, #16]
     be2:	4288      	cmp	r0, r1
     be4:	d906      	bls.n	bf4 <MPSL_IRQ_RADIO_Handler+0x224>
     be6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     bea:	7845      	ldrb	r5, [r0, #1]
     bec:	2d20      	cmp	r5, #32
     bee:	d1bb      	bne.n	b68 <MPSL_IRQ_RADIO_Handler+0x198>
     bf0:	f000 b8f8 	b.w	de4 <MPSL_IRQ_RADIO_Handler+0x414>
     bf4:	f89d 001c 	ldrb.w	r0, [sp, #28]
     bf8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     bfc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     c00:	8ac1      	ldrh	r1, [r0, #22]
     c02:	68c5      	ldr	r5, [r0, #12]
     c04:	bbe1      	cbnz	r1, c80 <MPSL_IRQ_RADIO_Handler+0x2b0>
     c06:	89e1      	ldrh	r1, [r4, #14]
     c08:	b3d1      	cbz	r1, c80 <MPSL_IRQ_RADIO_Handler+0x2b0>
     c0a:	6887      	ldr	r7, [r0, #8]
     c0c:	f002 ff88 	bl	3b20 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     c10:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     c14:	bf08      	it	eq
     c16:	200d      	moveq	r0, #13
     c18:	d00b      	beq.n	c32 <MPSL_IRQ_RADIO_Handler+0x262>
     c1a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     c1e:	3856      	subs	r0, #86	; 0x56
     c20:	bf08      	it	eq
     c22:	201c      	moveq	r0, #28
     c24:	d005      	beq.n	c32 <MPSL_IRQ_RADIO_Handler+0x262>
     c26:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     c2a:	389f      	subs	r0, #159	; 0x9f
     c2c:	bf14      	ite	ne
     c2e:	2000      	movne	r0, #0
     c30:	2032      	moveq	r0, #50	; 0x32
     c32:	1c41      	adds	r1, r0, #1
     c34:	1be8      	subs	r0, r5, r7
     c36:	0200      	lsls	r0, r0, #8
     c38:	17c2      	asrs	r2, r0, #31
     c3a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     c3e:	1200      	asrs	r0, r0, #8
     c40:	4288      	cmp	r0, r1
     c42:	da1d      	bge.n	c80 <MPSL_IRQ_RADIO_Handler+0x2b0>
     c44:	f002 ff6c 	bl	3b20 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     c48:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     c4c:	bf08      	it	eq
     c4e:	200d      	moveq	r0, #13
     c50:	d00b      	beq.n	c6a <MPSL_IRQ_RADIO_Handler+0x29a>
     c52:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     c56:	3856      	subs	r0, #86	; 0x56
     c58:	bf08      	it	eq
     c5a:	201c      	moveq	r0, #28
     c5c:	d005      	beq.n	c6a <MPSL_IRQ_RADIO_Handler+0x29a>
     c5e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     c62:	389f      	subs	r0, #159	; 0x9f
     c64:	bf14      	ite	ne
     c66:	2000      	movne	r0, #0
     c68:	2032      	moveq	r0, #50	; 0x32
     c6a:	f89d 101c 	ldrb.w	r1, [sp, #28]
     c6e:	1c40      	adds	r0, r0, #1
     c70:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     c74:	eb06 0181 	add.w	r1, r6, r1, lsl #2
     c78:	6889      	ldr	r1, [r1, #8]
     c7a:	4408      	add	r0, r1
     c7c:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
     c80:	9808      	ldr	r0, [sp, #32]
     c82:	1a28      	subs	r0, r5, r0
     c84:	0200      	lsls	r0, r0, #8
     c86:	17c1      	asrs	r1, r0, #31
     c88:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     c8c:	1200      	asrs	r0, r0, #8
     c8e:	2800      	cmp	r0, #0
     c90:	dd03      	ble.n	c9a <MPSL_IRQ_RADIO_Handler+0x2ca>
     c92:	b011      	add	sp, #68	; 0x44
     c94:	2000      	movs	r0, #0
     c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c9a:	6820      	ldr	r0, [r4, #0]
     c9c:	42a8      	cmp	r0, r5
     c9e:	d902      	bls.n	ca6 <MPSL_IRQ_RADIO_Handler+0x2d6>
     ca0:	68a1      	ldr	r1, [r4, #8]
     ca2:	1c49      	adds	r1, r1, #1
     ca4:	60a1      	str	r1, [r4, #8]
     ca6:	6861      	ldr	r1, [r4, #4]
     ca8:	f10d 0a18 	add.w	sl, sp, #24
     cac:	1a08      	subs	r0, r1, r0
     cae:	4428      	add	r0, r5
     cb0:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
     cb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     cb8:	e9c4 1000 	strd	r1, r0, [r4]
     cbc:	9810      	ldr	r0, [sp, #64]	; 0x40
     cbe:	900b      	str	r0, [sp, #44]	; 0x2c
     cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
     cc2:	f10d 081c 	add.w	r8, sp, #28
     cc6:	f890 5020 	ldrb.w	r5, [r0, #32]
     cca:	2020      	movs	r0, #32
     ccc:	f88d 0018 	strb.w	r0, [sp, #24]
     cd0:	2d20      	cmp	r5, #32
     cd2:	d03c      	beq.n	d4e <MPSL_IRQ_RADIO_Handler+0x37e>
     cd4:	4947      	ldr	r1, [pc, #284]	; (df4 <MPSL_IRQ_RADIO_Handler+0x424>)
     cd6:	980b      	ldr	r0, [sp, #44]	; 0x2c
     cd8:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
     cdc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     ce0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     ce4:	f100 0108 	add.w	r1, r0, #8
     ce8:	68c0      	ldr	r0, [r0, #12]
     cea:	6827      	ldr	r7, [r4, #0]
     cec:	1a38      	subs	r0, r7, r0
     cee:	0200      	lsls	r0, r0, #8
     cf0:	17c2      	asrs	r2, r0, #31
     cf2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     cf6:	1200      	asrs	r0, r0, #8
     cf8:	d429      	bmi.n	d4e <MPSL_IRQ_RADIO_Handler+0x37e>
     cfa:	89e0      	ldrh	r0, [r4, #14]
     cfc:	b300      	cbz	r0, d40 <MPSL_IRQ_RADIO_Handler+0x370>
     cfe:	89c8      	ldrh	r0, [r1, #14]
     d00:	b9f0      	cbnz	r0, d40 <MPSL_IRQ_RADIO_Handler+0x370>
     d02:	f8d1 9000 	ldr.w	r9, [r1]
     d06:	f002 ff0b 	bl	3b20 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     d0a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     d0e:	bf08      	it	eq
     d10:	200d      	moveq	r0, #13
     d12:	d00b      	beq.n	d2c <MPSL_IRQ_RADIO_Handler+0x35c>
     d14:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     d18:	3856      	subs	r0, #86	; 0x56
     d1a:	bf08      	it	eq
     d1c:	201c      	moveq	r0, #28
     d1e:	d005      	beq.n	d2c <MPSL_IRQ_RADIO_Handler+0x35c>
     d20:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     d24:	389f      	subs	r0, #159	; 0x9f
     d26:	bf14      	ite	ne
     d28:	2000      	movne	r0, #0
     d2a:	2032      	moveq	r0, #50	; 0x32
     d2c:	1c41      	adds	r1, r0, #1
     d2e:	eba7 0009 	sub.w	r0, r7, r9
     d32:	0200      	lsls	r0, r0, #8
     d34:	17c2      	asrs	r2, r0, #31
     d36:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d3a:	1200      	asrs	r0, r0, #8
     d3c:	4288      	cmp	r0, r1
     d3e:	db06      	blt.n	d4e <MPSL_IRQ_RADIO_Handler+0x37e>
     d40:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     d44:	f88a 5000 	strb.w	r5, [sl]
     d48:	7845      	ldrb	r5, [r0, #1]
     d4a:	2d20      	cmp	r5, #32
     d4c:	d1c6      	bne.n	cdc <MPSL_IRQ_RADIO_Handler+0x30c>
     d4e:	f89a 0000 	ldrb.w	r0, [sl]
     d52:	f888 0000 	strb.w	r0, [r8]
     d56:	980b      	ldr	r0, [sp, #44]	; 0x2c
     d58:	2d20      	cmp	r5, #32
     d5a:	bf1c      	itt	ne
     d5c:	4925      	ldrne	r1, [pc, #148]	; (df4 <MPSL_IRQ_RADIO_Handler+0x424>)
     d5e:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
     d62:	d03f      	beq.n	de4 <MPSL_IRQ_RADIO_Handler+0x414>
     d64:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     d68:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     d6c:	6860      	ldr	r0, [r4, #4]
     d6e:	f8d7 9008 	ldr.w	r9, [r7, #8]
     d72:	f107 0108 	add.w	r1, r7, #8
     d76:	eba9 0000 	sub.w	r0, r9, r0
     d7a:	0200      	lsls	r0, r0, #8
     d7c:	17c2      	asrs	r2, r0, #31
     d7e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d82:	1200      	asrs	r0, r0, #8
     d84:	d422      	bmi.n	dcc <MPSL_IRQ_RADIO_Handler+0x3fc>
     d86:	89c8      	ldrh	r0, [r1, #14]
     d88:	b360      	cbz	r0, de4 <MPSL_IRQ_RADIO_Handler+0x414>
     d8a:	89e0      	ldrh	r0, [r4, #14]
     d8c:	bb50      	cbnz	r0, de4 <MPSL_IRQ_RADIO_Handler+0x414>
     d8e:	f8d4 a000 	ldr.w	sl, [r4]
     d92:	f002 fec5 	bl	3b20 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     d96:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     d9a:	bf08      	it	eq
     d9c:	200d      	moveq	r0, #13
     d9e:	d00b      	beq.n	db8 <MPSL_IRQ_RADIO_Handler+0x3e8>
     da0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     da4:	3856      	subs	r0, #86	; 0x56
     da6:	bf08      	it	eq
     da8:	201c      	moveq	r0, #28
     daa:	d005      	beq.n	db8 <MPSL_IRQ_RADIO_Handler+0x3e8>
     dac:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     db0:	389f      	subs	r0, #159	; 0x9f
     db2:	bf14      	ite	ne
     db4:	2000      	movne	r0, #0
     db6:	2032      	moveq	r0, #50	; 0x32
     db8:	1c41      	adds	r1, r0, #1
     dba:	eba9 000a 	sub.w	r0, r9, sl
     dbe:	0200      	lsls	r0, r0, #8
     dc0:	17c2      	asrs	r2, r0, #31
     dc2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     dc6:	1200      	asrs	r0, r0, #8
     dc8:	4288      	cmp	r0, r1
     dca:	da0b      	bge.n	de4 <MPSL_IRQ_RADIO_Handler+0x414>
     dcc:	f888 5000 	strb.w	r5, [r8]
     dd0:	7e38      	ldrb	r0, [r7, #24]
     dd2:	7c21      	ldrb	r1, [r4, #16]
     dd4:	4288      	cmp	r0, r1
     dd6:	f67f af0d 	bls.w	bf4 <MPSL_IRQ_RADIO_Handler+0x224>
     dda:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     dde:	7845      	ldrb	r5, [r0, #1]
     de0:	2d20      	cmp	r5, #32
     de2:	d1bf      	bne.n	d64 <MPSL_IRQ_RADIO_Handler+0x394>
     de4:	b011      	add	sp, #68	; 0x44
     de6:	2001      	movs	r0, #1
     de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dec:	20000abc 	.word	0x20000abc
     df0:	200006bc 	.word	0x200006bc
     df4:	20000a3c 	.word	0x20000a3c
     df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dfc:	460f      	mov	r7, r1
     dfe:	4606      	mov	r6, r0
     e00:	eb01 0047 	add.w	r0, r1, r7, lsl #1
     e04:	494b      	ldr	r1, [pc, #300]	; (f34 <MPSL_IRQ_RADIO_Handler+0x564>)
     e06:	4699      	mov	r9, r3
     e08:	4408      	add	r0, r1
     e0a:	4692      	mov	sl, r2
     e0c:	f890 4020 	ldrb.w	r4, [r0, #32]
     e10:	2020      	movs	r0, #32
     e12:	7010      	strb	r0, [r2, #0]
     e14:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
     e18:	2c20      	cmp	r4, #32
     e1a:	bf1c      	itt	ne
     e1c:	4846      	ldrne	r0, [pc, #280]	; (f38 <MPSL_IRQ_RADIO_Handler+0x568>)
     e1e:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     e22:	d038      	beq.n	e96 <MPSL_IRQ_RADIO_Handler+0x4c6>
     e24:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     e28:	eb08 0080 	add.w	r0, r8, r0, lsl #2
     e2c:	f100 0108 	add.w	r1, r0, #8
     e30:	68c0      	ldr	r0, [r0, #12]
     e32:	6835      	ldr	r5, [r6, #0]
     e34:	1a28      	subs	r0, r5, r0
     e36:	0200      	lsls	r0, r0, #8
     e38:	17c2      	asrs	r2, r0, #31
     e3a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e3e:	1200      	asrs	r0, r0, #8
     e40:	d429      	bmi.n	e96 <MPSL_IRQ_RADIO_Handler+0x4c6>
     e42:	89f0      	ldrh	r0, [r6, #14]
     e44:	b300      	cbz	r0, e88 <MPSL_IRQ_RADIO_Handler+0x4b8>
     e46:	89c8      	ldrh	r0, [r1, #14]
     e48:	b9f0      	cbnz	r0, e88 <MPSL_IRQ_RADIO_Handler+0x4b8>
     e4a:	6808      	ldr	r0, [r1, #0]
     e4c:	9000      	str	r0, [sp, #0]
     e4e:	f002 fe67 	bl	3b20 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     e52:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     e56:	bf08      	it	eq
     e58:	200d      	moveq	r0, #13
     e5a:	d00b      	beq.n	e74 <MPSL_IRQ_RADIO_Handler+0x4a4>
     e5c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     e60:	3856      	subs	r0, #86	; 0x56
     e62:	bf08      	it	eq
     e64:	201c      	moveq	r0, #28
     e66:	d005      	beq.n	e74 <MPSL_IRQ_RADIO_Handler+0x4a4>
     e68:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     e6c:	389f      	subs	r0, #159	; 0x9f
     e6e:	bf14      	ite	ne
     e70:	2000      	movne	r0, #0
     e72:	2032      	moveq	r0, #50	; 0x32
     e74:	1c41      	adds	r1, r0, #1
     e76:	9800      	ldr	r0, [sp, #0]
     e78:	1a28      	subs	r0, r5, r0
     e7a:	0200      	lsls	r0, r0, #8
     e7c:	17c2      	asrs	r2, r0, #31
     e7e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e82:	1200      	asrs	r0, r0, #8
     e84:	4288      	cmp	r0, r1
     e86:	db06      	blt.n	e96 <MPSL_IRQ_RADIO_Handler+0x4c6>
     e88:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
     e8c:	f88a 4000 	strb.w	r4, [sl]
     e90:	7844      	ldrb	r4, [r0, #1]
     e92:	2c20      	cmp	r4, #32
     e94:	d1c6      	bne.n	e24 <MPSL_IRQ_RADIO_Handler+0x454>
     e96:	f89a 0000 	ldrb.w	r0, [sl]
     e9a:	f889 0000 	strb.w	r0, [r9]
     e9e:	2c20      	cmp	r4, #32
     ea0:	bf1c      	itt	ne
     ea2:	4825      	ldrne	r0, [pc, #148]	; (f38 <MPSL_IRQ_RADIO_Handler+0x568>)
     ea4:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
     ea8:	d040      	beq.n	f2c <MPSL_IRQ_RADIO_Handler+0x55c>
     eaa:	bf00      	nop
     eac:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     eb0:	eb08 0780 	add.w	r7, r8, r0, lsl #2
     eb4:	6870      	ldr	r0, [r6, #4]
     eb6:	68bd      	ldr	r5, [r7, #8]
     eb8:	f107 0108 	add.w	r1, r7, #8
     ebc:	1a28      	subs	r0, r5, r0
     ebe:	0200      	lsls	r0, r0, #8
     ec0:	17c2      	asrs	r2, r0, #31
     ec2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     ec6:	1200      	asrs	r0, r0, #8
     ec8:	d422      	bmi.n	f10 <MPSL_IRQ_RADIO_Handler+0x540>
     eca:	89c8      	ldrh	r0, [r1, #14]
     ecc:	b370      	cbz	r0, f2c <MPSL_IRQ_RADIO_Handler+0x55c>
     ece:	89f0      	ldrh	r0, [r6, #14]
     ed0:	bb60      	cbnz	r0, f2c <MPSL_IRQ_RADIO_Handler+0x55c>
     ed2:	f8d6 b000 	ldr.w	fp, [r6]
     ed6:	f002 fe23 	bl	3b20 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     eda:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     ede:	bf08      	it	eq
     ee0:	200d      	moveq	r0, #13
     ee2:	d00b      	beq.n	efc <MPSL_IRQ_RADIO_Handler+0x52c>
     ee4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     ee8:	3856      	subs	r0, #86	; 0x56
     eea:	bf08      	it	eq
     eec:	201c      	moveq	r0, #28
     eee:	d005      	beq.n	efc <MPSL_IRQ_RADIO_Handler+0x52c>
     ef0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     ef4:	389f      	subs	r0, #159	; 0x9f
     ef6:	bf14      	ite	ne
     ef8:	2000      	movne	r0, #0
     efa:	2032      	moveq	r0, #50	; 0x32
     efc:	1c41      	adds	r1, r0, #1
     efe:	eba5 000b 	sub.w	r0, r5, fp
     f02:	0200      	lsls	r0, r0, #8
     f04:	17c2      	asrs	r2, r0, #31
     f06:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     f0a:	1200      	asrs	r0, r0, #8
     f0c:	4288      	cmp	r0, r1
     f0e:	da0d      	bge.n	f2c <MPSL_IRQ_RADIO_Handler+0x55c>
     f10:	f889 4000 	strb.w	r4, [r9]
     f14:	7e38      	ldrb	r0, [r7, #24]
     f16:	7c31      	ldrb	r1, [r6, #16]
     f18:	4288      	cmp	r0, r1
     f1a:	d802      	bhi.n	f22 <MPSL_IRQ_RADIO_Handler+0x552>
     f1c:	2000      	movs	r0, #0
     f1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f22:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
     f26:	7844      	ldrb	r4, [r0, #1]
     f28:	2c20      	cmp	r4, #32
     f2a:	d1bf      	bne.n	eac <MPSL_IRQ_RADIO_Handler+0x4dc>
     f2c:	2001      	movs	r0, #1
     f2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f32:	0000      	.short	0x0000
     f34:	20000abc 	.word	0x20000abc
     f38:	20000a3c 	.word	0x20000a3c
     f3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f40:	b098      	sub	sp, #96	; 0x60
     f42:	4615      	mov	r5, r2
     f44:	468b      	mov	fp, r1
     f46:	f002 f99f 	bl	3288 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     f4a:	4604      	mov	r4, r0
     f4c:	f002 fc1a 	bl	3784 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     f50:	4606      	mov	r6, r0
     f52:	f1bb 0f01 	cmp.w	fp, #1
     f56:	bf18      	it	ne
     f58:	f1bb 0f02 	cmpne.w	fp, #2
     f5c:	d005      	beq.n	f6a <MPSL_IRQ_RADIO_Handler+0x59a>
     f5e:	f640 1192 	movw	r1, #2450	; 0x992
     f62:	f04f 0070 	mov.w	r0, #112	; 0x70
     f66:	f002 ff67 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f6a:	49ff      	ldr	r1, [pc, #1020]	; (1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>)
     f6c:	2001      	movs	r0, #1
     f6e:	6008      	str	r0, [r1, #0]
     f70:	49fe      	ldr	r1, [pc, #1016]	; (136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>)
     f72:	6889      	ldr	r1, [r1, #8]
     f74:	6008      	str	r0, [r1, #0]
     f76:	2000      	movs	r0, #0
     f78:	f88d 0056 	strb.w	r0, [sp, #86]	; 0x56
     f7c:	900e      	str	r0, [sp, #56]	; 0x38
     f7e:	1e40      	subs	r0, r0, #1
     f80:	900f      	str	r0, [sp, #60]	; 0x3c
     f82:	49fb      	ldr	r1, [pc, #1004]	; (1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>)
     f84:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     f88:	eb01 0180 	add.w	r1, r1, r0, lsl #2
     f8c:	e9d1 0c02 	ldrd	r0, ip, [r1, #8]
     f90:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     f94:	e9cd 0c10 	strd	r0, ip, [sp, #64]	; 0x40
     f98:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
     f9c:	6989      	ldr	r1, [r1, #24]
     f9e:	9114      	str	r1, [sp, #80]	; 0x50
     fa0:	f007 f941 	bl	8226 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     fa4:	4601      	mov	r1, r0
     fa6:	f8bd 804e 	ldrh.w	r8, [sp, #78]	; 0x4e
     faa:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     fae:	4bf1      	ldr	r3, [pc, #964]	; (1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>)
     fb0:	4440      	add	r0, r8
     fb2:	1c42      	adds	r2, r0, #1
     fb4:	1888      	adds	r0, r1, r2
     fb6:	4299      	cmp	r1, r3
     fb8:	d84f      	bhi.n	105a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
     fba:	4def      	ldr	r5, [pc, #956]	; (1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>)
     fbc:	42aa      	cmp	r2, r5
     fbe:	dc53      	bgt.n	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
     fc0:	4269      	negs	r1, r5
     fc2:	428a      	cmp	r2, r1
     fc4:	db58      	blt.n	1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
     fc6:	1c59      	adds	r1, r3, #1
     fc8:	4281      	cmp	r1, r0
     fca:	bfdc      	itt	le
     fcc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     fd0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     fd4:	dd05      	ble.n	fe2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x42>
     fd6:	2800      	cmp	r0, #0
     fd8:	bfbc      	itt	lt
     fda:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     fde:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     fe2:	900c      	str	r0, [sp, #48]	; 0x30
     fe4:	48e5      	ldr	r0, [pc, #916]	; (137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>)
     fe6:	f1b8 0f00 	cmp.w	r8, #0
     fea:	8b80      	ldrh	r0, [r0, #28]
     fec:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
     ff0:	bf04      	itt	eq
     ff2:	2000      	moveq	r0, #0
     ff4:	900b      	streq	r0, [sp, #44]	; 0x2c
     ff6:	d00b      	beq.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
     ff8:	2001      	movs	r0, #1
     ffa:	900b      	str	r0, [sp, #44]	; 0x2c
     ffc:	48df      	ldr	r0, [pc, #892]	; (137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>)
     ffe:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    1002:	b928      	cbnz	r0, 1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    1004:	f002 fea0 	bl	3d48 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1008:	2800      	cmp	r0, #0
    100a:	bf08      	it	eq
    100c:	2701      	moveq	r7, #1
    100e:	d000      	beq.n	1012 <CONFIG_FPROTECT_BLOCK_SIZE+0x12>
    1010:	2700      	movs	r7, #0
    1012:	f002 fd85 	bl	3b20 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1016:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    101a:	bf08      	it	eq
    101c:	200d      	moveq	r0, #13
    101e:	d00b      	beq.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
    1020:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1024:	3856      	subs	r0, #86	; 0x56
    1026:	bf08      	it	eq
    1028:	201c      	moveq	r0, #28
    102a:	d005      	beq.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
    102c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1030:	389f      	subs	r0, #159	; 0x9f
    1032:	bf14      	ite	ne
    1034:	2000      	movne	r0, #0
    1036:	2032      	moveq	r0, #50	; 0x32
    1038:	f04f 0900 	mov.w	r9, #0
    103c:	46ca      	mov	sl, r9
    103e:	9009      	str	r0, [sp, #36]	; 0x24
    1040:	4546      	cmp	r6, r8
    1042:	d937      	bls.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
    1044:	990c      	ldr	r1, [sp, #48]	; 0x30
    1046:	f8df 932c 	ldr.w	r9, [pc, #812]	; 1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>
    104a:	ea6f 0c06 	mvn.w	ip, r6
    104e:	466b      	mov	r3, sp
    1050:	aa16      	add	r2, sp, #88	; 0x58
    1052:	eb01 000c 	add.w	r0, r1, ip
    1056:	4549      	cmp	r1, r9
    1058:	d904      	bls.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
    105a:	f240 519e 	movw	r1, #1438	; 0x59e
    105e:	2070      	movs	r0, #112	; 0x70
    1060:	f002 feea 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1064:	45ac      	cmp	ip, r5
    1066:	dd04      	ble.n	1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
    1068:	f240 519f 	movw	r1, #1439	; 0x59f
    106c:	2070      	movs	r0, #112	; 0x70
    106e:	f002 fee3 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1072:	49c3      	ldr	r1, [pc, #780]	; (1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>)
    1074:	458c      	cmp	ip, r1
    1076:	da04      	bge.n	1082 <CONFIG_FPROTECT_BLOCK_SIZE+0x82>
    1078:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    107c:	2070      	movs	r0, #112	; 0x70
    107e:	f002 fedb 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1082:	49c0      	ldr	r1, [pc, #768]	; (1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>)
    1084:	4281      	cmp	r1, r0
    1086:	bfdc      	itt	le
    1088:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    108c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1090:	dd05      	ble.n	109e <CONFIG_FPROTECT_BLOCK_SIZE+0x9e>
    1092:	2800      	cmp	r0, #0
    1094:	bfbc      	itt	lt
    1096:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    109a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    109e:	4619      	mov	r1, r3
    10a0:	f001 fe60 	bl	2d64 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    10a4:	9800      	ldr	r0, [sp, #0]
    10a6:	9910      	ldr	r1, [sp, #64]	; 0x40
    10a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    10ac:	9000      	str	r0, [sp, #0]
    10ae:	1a08      	subs	r0, r1, r0
    10b0:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    10b4:	2f00      	cmp	r7, #0
    10b6:	bf18      	it	ne
    10b8:	f8dd a024 	ldrne.w	sl, [sp, #36]	; 0x24
    10bc:	d105      	bne.n	10ca <CONFIG_FPROTECT_BLOCK_SIZE+0xca>
    10be:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    10c2:	2800      	cmp	r0, #0
    10c4:	bf18      	it	ne
    10c6:	f04f 0a02 	movne.w	sl, #2
    10ca:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    10ce:	d008      	beq.n	10e2 <CONFIG_FPROTECT_BLOCK_SIZE+0xe2>
    10d0:	9810      	ldr	r0, [sp, #64]	; 0x40
    10d2:	1b00      	subs	r0, r0, r4
    10d4:	0200      	lsls	r0, r0, #8
    10d6:	17c1      	asrs	r1, r0, #31
    10d8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    10dc:	1200      	asrs	r0, r0, #8
    10de:	2801      	cmp	r0, #1
    10e0:	da02      	bge.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    10e2:	2003      	movs	r0, #3
    10e4:	9d18      	ldr	r5, [sp, #96]	; 0x60
    10e6:	e00d      	b.n	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    10e8:	b157      	cbz	r7, 1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
    10ea:	48a4      	ldr	r0, [pc, #656]	; (137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>)
    10ec:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    10f0:	b130      	cbz	r0, 1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
    10f2:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    10f6:	f110 0a00 	adds.w	sl, r0, #0
    10fa:	bf18      	it	ne
    10fc:	f04f 0a02 	movne.w	sl, #2
    1100:	4625      	mov	r5, r4
    1102:	2000      	movs	r0, #0
    1104:	4482      	add	sl, r0
    1106:	9810      	ldr	r0, [sp, #64]	; 0x40
    1108:	eba0 0009 	sub.w	r0, r0, r9
    110c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1110:	1e50      	subs	r0, r2, #1
    1112:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1116:	1b41      	subs	r1, r0, r5
    1118:	0209      	lsls	r1, r1, #8
    111a:	17cb      	asrs	r3, r1, #31
    111c:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    1120:	1209      	asrs	r1, r1, #8
    1122:	4551      	cmp	r1, sl
    1124:	db04      	blt.n	1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>
    1126:	f1b9 0f00 	cmp.w	r9, #0
    112a:	bf18      	it	ne
    112c:	9210      	strne	r2, [sp, #64]	; 0x40
    112e:	e02d      	b.n	118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
    1130:	f1b9 0f00 	cmp.w	r9, #0
    1134:	d005      	beq.n	1142 <CONFIG_FPROTECT_BLOCK_SIZE+0x142>
    1136:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
    113a:	b920      	cbnz	r0, 1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
    113c:	f002 fb18 	bl	3770 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    1140:	b108      	cbz	r0, 1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
    1142:	b9af      	cbnz	r7, 1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    1144:	e00c      	b.n	1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
    1146:	b92f      	cbnz	r7, 1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>
    1148:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    114c:	2800      	cmp	r0, #0
    114e:	bf18      	it	ne
    1150:	f1aa 0a02 	subne.w	sl, sl, #2
    1154:	f04f 0900 	mov.w	r9, #0
    1158:	f88d 9054 	strb.w	r9, [sp, #84]	; 0x54
    115c:	464e      	mov	r6, r9
    115e:	e007      	b.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    1160:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    1164:	b120      	cbz	r0, 1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    1166:	2000      	movs	r0, #0
    1168:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    116c:	f1aa 0a02 	sub.w	sl, sl, #2
    1170:	9810      	ldr	r0, [sp, #64]	; 0x40
    1172:	eba0 0009 	sub.w	r0, r0, r9
    1176:	1e40      	subs	r0, r0, #1
    1178:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    117c:	1b41      	subs	r1, r0, r5
    117e:	0209      	lsls	r1, r1, #8
    1180:	17ca      	asrs	r2, r1, #31
    1182:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1186:	1209      	asrs	r1, r1, #8
    1188:	4551      	cmp	r1, sl
    118a:	db7c      	blt.n	1286 <CONFIG_FPROTECT_BLOCK_SIZE+0x286>
    118c:	970a      	str	r7, [sp, #40]	; 0x28
    118e:	4605      	mov	r5, r0
    1190:	f04f 0900 	mov.w	r9, #0
    1194:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    1196:	f001 ff4f 	bl	3038 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    119a:	1a28      	subs	r0, r5, r0
    119c:	0200      	lsls	r0, r0, #8
    119e:	17c1      	asrs	r1, r0, #31
    11a0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    11a4:	ea4f 2a20 	mov.w	sl, r0, asr #8
    11a8:	f002 fcba 	bl	3b20 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    11ac:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    11b0:	bf08      	it	eq
    11b2:	200d      	moveq	r0, #13
    11b4:	d00b      	beq.n	11ce <CONFIG_FPROTECT_BLOCK_SIZE+0x1ce>
    11b6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    11ba:	3856      	subs	r0, #86	; 0x56
    11bc:	bf08      	it	eq
    11be:	201c      	moveq	r0, #28
    11c0:	d005      	beq.n	11ce <CONFIG_FPROTECT_BLOCK_SIZE+0x1ce>
    11c2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    11c6:	389f      	subs	r0, #159	; 0x9f
    11c8:	bf14      	ite	ne
    11ca:	2000      	movne	r0, #0
    11cc:	2032      	moveq	r0, #50	; 0x32
    11ce:	300b      	adds	r0, #11
    11d0:	4582      	cmp	sl, r0
    11d2:	da20      	bge.n	1216 <CONFIG_FPROTECT_BLOCK_SIZE+0x216>
    11d4:	f1bb 0f01 	cmp.w	fp, #1
    11d8:	d002      	beq.n	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
    11da:	980a      	ldr	r0, [sp, #40]	; 0x28
    11dc:	b140      	cbz	r0, 11f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f0>
    11de:	e012      	b.n	1206 <CONFIG_FPROTECT_BLOCK_SIZE+0x206>
    11e0:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    11e4:	d11c      	bne.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    11e6:	f640 1113 	movw	r1, #2323	; 0x913
    11ea:	2070      	movs	r0, #112	; 0x70
    11ec:	f002 fe24 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11f0:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    11f4:	d007      	beq.n	1206 <CONFIG_FPROTECT_BLOCK_SIZE+0x206>
    11f6:	1b60      	subs	r0, r4, r5
    11f8:	0200      	lsls	r0, r0, #8
    11fa:	17c1      	asrs	r1, r0, #31
    11fc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1200:	1200      	asrs	r0, r0, #8
    1202:	2804      	cmp	r0, #4
    1204:	dd04      	ble.n	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    1206:	462c      	mov	r4, r5
    1208:	4620      	mov	r0, r4
    120a:	f001 ff3b 	bl	3084 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    120e:	e007      	b.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    1210:	2800      	cmp	r0, #0
    1212:	dc64      	bgt.n	12de <CONFIG_FPROTECT_BLOCK_SIZE+0x2de>
    1214:	e004      	b.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    1216:	462c      	mov	r4, r5
    1218:	4620      	mov	r0, r4
    121a:	f001 ff33 	bl	3084 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    121e:	46b9      	mov	r9, r7
    1220:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1224:	d056      	beq.n	12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>
    1226:	9810      	ldr	r0, [sp, #64]	; 0x40
    1228:	9a11      	ldr	r2, [sp, #68]	; 0x44
    122a:	1b00      	subs	r0, r0, r4
    122c:	1b12      	subs	r2, r2, r4
    122e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1232:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1236:	2801      	cmp	r0, #1
    1238:	d351      	bcc.n	12de <CONFIG_FPROTECT_BLOCK_SIZE+0x2de>
    123a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    123e:	bf98      	it	ls
    1240:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1244:	d84b      	bhi.n	12de <CONFIG_FPROTECT_BLOCK_SIZE+0x2de>
    1246:	4620      	mov	r0, r4
    1248:	f006 ffed 	bl	8226 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    124c:	990c      	ldr	r1, [sp, #48]	; 0x30
    124e:	4a4a      	ldr	r2, [pc, #296]	; (1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>)
    1250:	1a0d      	subs	r5, r1, r0
    1252:	f04f 0a00 	mov.w	sl, #0
    1256:	1aaa      	subs	r2, r5, r2
    1258:	f17a 0200 	sbcs.w	r2, sl, #0
    125c:	d318      	bcc.n	1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>
    125e:	4b46      	ldr	r3, [pc, #280]	; (1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>)
    1260:	1a42      	subs	r2, r0, r1
    1262:	1ad3      	subs	r3, r2, r3
    1264:	f17a 0300 	sbcs.w	r3, sl, #0
    1268:	d312      	bcc.n	1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>
    126a:	4b42      	ldr	r3, [pc, #264]	; (1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>)
    126c:	42ab      	cmp	r3, r5
    126e:	bf3e      	ittt	cc
    1270:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    1274:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    1278:	1845      	addcc	r5, r0, r1
    127a:	d309      	bcc.n	1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>
    127c:	4293      	cmp	r3, r2
    127e:	d232      	bcs.n	12e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e6>
    1280:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    1284:	e000      	b.n	1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
    1286:	e02a      	b.n	12de <CONFIG_FPROTECT_BLOCK_SIZE+0x2de>
    1288:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    128c:	4408      	add	r0, r1
    128e:	4245      	negs	r5, r0
    1290:	4f3a      	ldr	r7, [pc, #232]	; (137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>)
    1292:	7fb8      	ldrb	r0, [r7, #30]
    1294:	b360      	cbz	r0, 12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>
    1296:	bf00      	nop
    1298:	f1bb 0f01 	cmp.w	fp, #1
    129c:	d005      	beq.n	12aa <CONFIG_FPROTECT_BLOCK_SIZE+0x2aa>
    129e:	2002      	movs	r0, #2
    12a0:	f002 f92c 	bl	34fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12a4:	2001      	movs	r0, #1
    12a6:	f002 f929 	bl	34fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12aa:	45b0      	cmp	r8, r6
    12ac:	d22c      	bcs.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
    12ae:	eba5 0106 	sub.w	r1, r5, r6
    12b2:	f04f 0002 	mov.w	r0, #2
    12b6:	f002 f86b 	bl	3390 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    12ba:	b390      	cbz	r0, 1322 <CONFIG_FPROTECT_BLOCK_SIZE+0x322>
    12bc:	f1b8 0f00 	cmp.w	r8, #0
    12c0:	bf1c      	itt	ne
    12c2:	eba5 0108 	subne.w	r1, r5, r8
    12c6:	2001      	movne	r0, #1
    12c8:	d034      	beq.n	1334 <CONFIG_FPROTECT_BLOCK_SIZE+0x334>
    12ca:	bf00      	nop
    12cc:	f002 f860 	bl	3390 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    12d0:	b338      	cbz	r0, 1322 <CONFIG_FPROTECT_BLOCK_SIZE+0x322>
    12d2:	e02f      	b.n	1334 <CONFIG_FPROTECT_BLOCK_SIZE+0x334>
    12d4:	f640 2126 	movw	r1, #2598	; 0xa26
    12d8:	2070      	movs	r0, #112	; 0x70
    12da:	f002 fdad 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12de:	b01b      	add	sp, #108	; 0x6c
    12e0:	2000      	movs	r0, #0
    12e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12e6:	f640 21fa 	movw	r1, #2810	; 0xafa
    12ea:	2070      	movs	r0, #112	; 0x70
    12ec:	f002 fda4 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12f0:	45b0      	cmp	r8, r6
    12f2:	bf34      	ite	cc
    12f4:	4630      	movcc	r0, r6
    12f6:	4640      	movcs	r0, r8
    12f8:	301e      	adds	r0, #30
    12fa:	42a8      	cmp	r0, r5
    12fc:	dbcc      	blt.n	1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>
    12fe:	f640 213a 	movw	r1, #2618	; 0xa3a
    1302:	2070      	movs	r0, #112	; 0x70
    1304:	f002 fd98 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1308:	d90c      	bls.n	1324 <CONFIG_FPROTECT_BLOCK_SIZE+0x324>
    130a:	eba5 0108 	sub.w	r1, r5, r8
    130e:	2001      	movs	r0, #1
    1310:	f002 f83e 	bl	3390 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1314:	b128      	cbz	r0, 1322 <CONFIG_FPROTECT_BLOCK_SIZE+0x322>
    1316:	2e00      	cmp	r6, #0
    1318:	bf1c      	itt	ne
    131a:	1ba9      	subne	r1, r5, r6
    131c:	2002      	movne	r0, #2
    131e:	d009      	beq.n	1334 <CONFIG_FPROTECT_BLOCK_SIZE+0x334>
    1320:	e7d4      	b.n	12cc <CONFIG_FPROTECT_BLOCK_SIZE+0x2cc>
    1322:	e041      	b.n	13a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a8>
    1324:	ea56 0008 	orrs.w	r0, r6, r8
    1328:	d004      	beq.n	1334 <CONFIG_FPROTECT_BLOCK_SIZE+0x334>
    132a:	f640 1176 	movw	r1, #2422	; 0x976
    132e:	2070      	movs	r0, #112	; 0x70
    1330:	f002 fd82 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1334:	4629      	mov	r1, r5
    1336:	2000      	movs	r0, #0
    1338:	f002 f82a 	bl	3390 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    133c:	b3a0      	cbz	r0, 13a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a8>
    133e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1340:	2601      	movs	r6, #1
    1342:	2800      	cmp	r0, #0
    1344:	bf04      	itt	eq
    1346:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    134a:	2800      	cmpeq	r0, #0
    134c:	d002      	beq.n	1354 <CONFIG_FPROTECT_BLOCK_SIZE+0x354>
    134e:	f1b9 0f00 	cmp.w	r9, #0
    1352:	d034      	beq.n	13be <CONFIG_FPROTECT_BLOCK_SIZE+0x3be>
    1354:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    1358:	b118      	cbz	r0, 1362 <CONFIG_FPROTECT_BLOCK_SIZE+0x362>
    135a:	f002 fbe7 	bl	3b2c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    135e:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    1362:	f1b9 0f00 	cmp.w	r9, #0
    1366:	e00f      	b.n	1388 <CONFIG_FPROTECT_BLOCK_SIZE+0x388>
    1368:	40000508 	.word	0x40000508
    136c:	20000038 	.word	0x20000038
    1370:	200006bc 	.word	0x200006bc
    1374:	1e847fff 	.word	0x1e847fff
    1378:	0f424000 	.word	0x0f424000
    137c:	20000abc 	.word	0x20000abc
    1380:	f0bdc000 	.word	0xf0bdc000
    1384:	1e848000 	.word	0x1e848000
    1388:	d01c      	beq.n	13c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c4>
    138a:	9809      	ldr	r0, [sp, #36]	; 0x24
    138c:	1a20      	subs	r0, r4, r0
    138e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1392:	2005      	movs	r0, #5
    1394:	f001 fffc 	bl	3390 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1398:	b360      	cbz	r0, 13f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f4>
    139a:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    139e:	2800      	cmp	r0, #0
    13a0:	bf08      	it	eq
    13a2:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    13a6:	e015      	b.n	13d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d4>
    13a8:	e7ff      	b.n	13aa <CONFIG_FPROTECT_BLOCK_SIZE+0x3aa>
    13aa:	2002      	movs	r0, #2
    13ac:	f002 f8a6 	bl	34fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13b0:	2001      	movs	r0, #1
    13b2:	f002 f8a3 	bl	34fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13b6:	b01b      	add	sp, #108	; 0x6c
    13b8:	2000      	movs	r0, #0
    13ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13be:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    13c2:	b190      	cbz	r0, 13ea <CONFIG_FPROTECT_BLOCK_SIZE+0x3ea>
    13c4:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    13c8:	b120      	cbz	r0, 13d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d4>
    13ca:	2005      	movs	r0, #5
    13cc:	f002 f896 	bl	34fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13d0:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    13d4:	eba5 0008 	sub.w	r0, r5, r8
    13d8:	f1a0 0119 	sub.w	r1, r0, #25
    13dc:	2900      	cmp	r1, #0
    13de:	dc0e      	bgt.n	13fe <CONFIG_FPROTECT_BLOCK_SIZE+0x3fe>
    13e0:	f640 2163 	movw	r1, #2659	; 0xa63
    13e4:	2070      	movs	r0, #112	; 0x70
    13e6:	f002 fd27 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13ea:	f002 fbbb 	bl	3b64 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    13ee:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    13f2:	e7b6      	b.n	1362 <CONFIG_FPROTECT_BLOCK_SIZE+0x362>
    13f4:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    13f8:	2070      	movs	r0, #112	; 0x70
    13fa:	f002 fd1d 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13fe:	2003      	movs	r0, #3
    1400:	f001 ffc6 	bl	3390 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1404:	b1c0      	cbz	r0, 1438 <CONFIG_FPROTECT_BLOCK_SIZE+0x438>
    1406:	480f      	ldr	r0, [pc, #60]	; (1444 <CONFIG_FPROTECT_BLOCK_SIZE+0x444>)
    1408:	6880      	ldr	r0, [r0, #8]
    140a:	f8c0 a000 	str.w	sl, [r0]
    140e:	480e      	ldr	r0, [pc, #56]	; (1448 <CONFIG_FPROTECT_BLOCK_SIZE+0x448>)
    1410:	f8c0 a000 	str.w	sl, [r0]
    1414:	ac0e      	add	r4, sp, #56	; 0x38
    1416:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    141a:	6038      	str	r0, [r7, #0]
    141c:	6079      	str	r1, [r7, #4]
    141e:	60ba      	str	r2, [r7, #8]
    1420:	60fb      	str	r3, [r7, #12]
    1422:	ac12      	add	r4, sp, #72	; 0x48
    1424:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    1428:	6138      	str	r0, [r7, #16]
    142a:	6179      	str	r1, [r7, #20]
    142c:	61ba      	str	r2, [r7, #24]
    142e:	61fb      	str	r3, [r7, #28]
    1430:	b01b      	add	sp, #108	; 0x6c
    1432:	2001      	movs	r0, #1
    1434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1438:	f640 216b 	movw	r1, #2667	; 0xa6b
    143c:	2070      	movs	r0, #112	; 0x70
    143e:	f002 fcfb 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1442:	0000      	.short	0x0000
    1444:	20000038 	.word	0x20000038
    1448:	40000508 	.word	0x40000508
    144c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1450:	4614      	mov	r4, r2
    1452:	460d      	mov	r5, r1
    1454:	f04f 0a00 	mov.w	sl, #0
    1458:	890a      	ldrh	r2, [r1, #8]
    145a:	4651      	mov	r1, sl
    145c:	f362 411f 	bfi	r1, r2, #16, #16
    1460:	7aaa      	ldrb	r2, [r5, #10]
    1462:	46d1      	mov	r9, sl
    1464:	f362 0907 	bfi	r9, r2, #0, #8
    1468:	7aea      	ldrb	r2, [r5, #11]
    146a:	4606      	mov	r6, r0
    146c:	f362 290f 	bfi	r9, r2, #8, #8
    1470:	782a      	ldrb	r2, [r5, #0]
    1472:	b083      	sub	sp, #12
    1474:	6840      	ldr	r0, [r0, #4]
    1476:	f8c4 a000 	str.w	sl, [r4]
    147a:	f362 4917 	bfi	r9, r2, #16, #8
    147e:	f8c4 a004 	str.w	sl, [r4, #4]
    1482:	f8c4 9010 	str.w	r9, [r4, #16]
    1486:	e9c4 0102 	strd	r0, r1, [r4, #8]
    148a:	4f9d      	ldr	r7, [pc, #628]	; (1700 <CONFIG_FPROTECT_BLOCK_SIZE+0x700>)
    148c:	6870      	ldr	r0, [r6, #4]
    148e:	fba0 8907 	umull	r8, r9, r0, r7
    1492:	6830      	ldr	r0, [r6, #0]
    1494:	f006 fec7 	bl	8226 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1498:	eb10 0108 	adds.w	r1, r0, r8
    149c:	eb4a 0209 	adc.w	r2, sl, r9
    14a0:	7828      	ldrb	r0, [r5, #0]
    14a2:	ea4f 0967 	mov.w	r9, r7, asr #1
    14a6:	f1c9 0b00 	rsb	fp, r9, #0
    14aa:	b170      	cbz	r0, 14ca <CONFIG_FPROTECT_BLOCK_SIZE+0x4ca>
    14ac:	89e0      	ldrh	r0, [r4, #14]
    14ae:	f894 8011 	ldrb.w	r8, [r4, #17]
    14b2:	43c0      	mvns	r0, r0
    14b4:	f8d5 a004 	ldr.w	sl, [r5, #4]
    14b8:	f104 020c 	add.w	r2, r4, #12
    14bc:	4548      	cmp	r0, r9
    14be:	dd7c      	ble.n	15ba <CONFIG_FPROTECT_BLOCK_SIZE+0x5ba>
    14c0:	f240 519f 	movw	r1, #1439	; 0x59f
    14c4:	2070      	movs	r0, #112	; 0x70
    14c6:	f002 fcb7 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14ca:	f8df c238 	ldr.w	ip, [pc, #568]	; 1704 <CONFIG_FPROTECT_BLOCK_SIZE+0x704>
    14ce:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    14d2:	eb11 0a0c 	adds.w	sl, r1, ip
    14d6:	f142 0c00 	adc.w	ip, r2, #0
    14da:	ebb0 0a0a 	subs.w	sl, r0, sl
    14de:	eb73 0c0c 	sbcs.w	ip, r3, ip
    14e2:	d272      	bcs.n	15ca <CONFIG_FPROTECT_BLOCK_SIZE+0x5ca>
    14e4:	1a41      	subs	r1, r0, r1
    14e6:	eb73 0102 	sbcs.w	r1, r3, r2
    14ea:	d36e      	bcc.n	15ca <CONFIG_FPROTECT_BLOCK_SIZE+0x5ca>
    14ec:	ebb0 0608 	subs.w	r6, r0, r8
    14f0:	42b7      	cmp	r7, r6
    14f2:	d82b      	bhi.n	154c <CONFIG_FPROTECT_BLOCK_SIZE+0x54c>
    14f4:	89e0      	ldrh	r0, [r4, #14]
    14f6:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    14fa:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    14fe:	43c1      	mvns	r1, r0
    1500:	4a81      	ldr	r2, [pc, #516]	; (1708 <CONFIG_FPROTECT_BLOCK_SIZE+0x708>)
    1502:	eb08 0001 	add.w	r0, r8, r1
    1506:	4542      	cmp	r2, r8
    1508:	d32b      	bcc.n	1562 <CONFIG_FPROTECT_BLOCK_SIZE+0x562>
    150a:	4549      	cmp	r1, r9
    150c:	dcd8      	bgt.n	14c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c0>
    150e:	4559      	cmp	r1, fp
    1510:	db66      	blt.n	15e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5e0>
    1512:	4287      	cmp	r7, r0
    1514:	bfdc      	itt	le
    1516:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    151a:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    151e:	dd05      	ble.n	152c <CONFIG_FPROTECT_BLOCK_SIZE+0x52c>
    1520:	2800      	cmp	r0, #0
    1522:	bfbc      	itt	lt
    1524:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1528:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    152c:	466a      	mov	r2, sp
    152e:	a901      	add	r1, sp, #4
    1530:	f001 fc18 	bl	2d64 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1534:	89e0      	ldrh	r0, [r4, #14]
    1536:	f89d 1000 	ldrb.w	r1, [sp]
    153a:	1a30      	subs	r0, r6, r0
    153c:	1a40      	subs	r0, r0, r1
    153e:	1e40      	subs	r0, r0, #1
    1540:	42b8      	cmp	r0, r7
    1542:	d302      	bcc.n	154a <CONFIG_FPROTECT_BLOCK_SIZE+0x54a>
    1544:	68a0      	ldr	r0, [r4, #8]
    1546:	1c40      	adds	r0, r0, #1
    1548:	60a0      	str	r0, [r4, #8]
    154a:	4646      	mov	r6, r8
    154c:	89e0      	ldrh	r0, [r4, #14]
    154e:	4b6e      	ldr	r3, [pc, #440]	; (1708 <CONFIG_FPROTECT_BLOCK_SIZE+0x708>)
    1550:	43c1      	mvns	r1, r0
    1552:	686d      	ldr	r5, [r5, #4]
    1554:	f894 8011 	ldrb.w	r8, [r4, #17]
    1558:	1870      	adds	r0, r6, r1
    155a:	f104 020c 	add.w	r2, r4, #12
    155e:	429e      	cmp	r6, r3
    1560:	d904      	bls.n	156c <CONFIG_FPROTECT_BLOCK_SIZE+0x56c>
    1562:	f240 519e 	movw	r1, #1438	; 0x59e
    1566:	2070      	movs	r0, #112	; 0x70
    1568:	f002 fc66 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    156c:	4549      	cmp	r1, r9
    156e:	dca7      	bgt.n	14c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c0>
    1570:	4559      	cmp	r1, fp
    1572:	db35      	blt.n	15e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5e0>
    1574:	4287      	cmp	r7, r0
    1576:	bfdc      	itt	le
    1578:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    157c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1580:	dd05      	ble.n	158e <CONFIG_FPROTECT_BLOCK_SIZE+0x58e>
    1582:	2800      	cmp	r0, #0
    1584:	bfbc      	itt	lt
    1586:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    158a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    158e:	4621      	mov	r1, r4
    1590:	f001 fbe8 	bl	2d64 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1594:	6820      	ldr	r0, [r4, #0]
    1596:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    159a:	1970      	adds	r0, r6, r5
    159c:	1c40      	adds	r0, r0, #1
    159e:	6021      	str	r1, [r4, #0]
    15a0:	f1b8 0f00 	cmp.w	r8, #0
    15a4:	bf08      	it	eq
    15a6:	307a      	addeq	r0, #122	; 0x7a
    15a8:	d004      	beq.n	15b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b4>
    15aa:	f1b8 0f01 	cmp.w	r8, #1
    15ae:	bf08      	it	eq
    15b0:	3048      	addeq	r0, #72	; 0x48
    15b2:	d13a      	bne.n	162a <CONFIG_FPROTECT_BLOCK_SIZE+0x62a>
    15b4:	f001 fbba 	bl	2d2c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    15b8:	e001      	b.n	15be <CONFIG_FPROTECT_BLOCK_SIZE+0x5be>
    15ba:	e00e      	b.n	15da <CONFIG_FPROTECT_BLOCK_SIZE+0x5da>
    15bc:	e005      	b.n	15ca <CONFIG_FPROTECT_BLOCK_SIZE+0x5ca>
    15be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15c2:	6060      	str	r0, [r4, #4]
    15c4:	b007      	add	sp, #28
    15c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15ca:	6830      	ldr	r0, [r6, #0]
    15cc:	1e40      	subs	r0, r0, #1
    15ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15d2:	6020      	str	r0, [r4, #0]
    15d4:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    15d8:	e7f3      	b.n	15c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c2>
    15da:	4601      	mov	r1, r0
    15dc:	4558      	cmp	r0, fp
    15de:	da04      	bge.n	15ea <CONFIG_FPROTECT_BLOCK_SIZE+0x5ea>
    15e0:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    15e4:	2070      	movs	r0, #112	; 0x70
    15e6:	f002 fc27 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15ea:	4287      	cmp	r7, r0
    15ec:	bfdc      	itt	le
    15ee:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    15f2:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    15f6:	dd05      	ble.n	1604 <CONFIG_FPROTECT_BLOCK_SIZE+0x604>
    15f8:	2800      	cmp	r0, #0
    15fa:	bfbc      	itt	lt
    15fc:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1600:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1604:	4621      	mov	r1, r4
    1606:	f001 fbad 	bl	2d64 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    160a:	6820      	ldr	r0, [r4, #0]
    160c:	f1b8 0f00 	cmp.w	r8, #0
    1610:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1614:	f10a 0001 	add.w	r0, sl, #1
    1618:	6021      	str	r1, [r4, #0]
    161a:	bf08      	it	eq
    161c:	307a      	addeq	r0, #122	; 0x7a
    161e:	d009      	beq.n	1634 <CONFIG_FPROTECT_BLOCK_SIZE+0x634>
    1620:	f1b8 0f01 	cmp.w	r8, #1
    1624:	bf08      	it	eq
    1626:	3048      	addeq	r0, #72	; 0x48
    1628:	d004      	beq.n	1634 <CONFIG_FPROTECT_BLOCK_SIZE+0x634>
    162a:	f240 6139 	movw	r1, #1593	; 0x639
    162e:	2070      	movs	r0, #112	; 0x70
    1630:	f002 fc02 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1634:	f001 fb7a 	bl	2d2c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1638:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    163c:	6061      	str	r1, [r4, #4]
    163e:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    1642:	aa01      	add	r2, sp, #4
    1644:	4669      	mov	r1, sp
    1646:	4648      	mov	r0, r9
    1648:	6837      	ldr	r7, [r6, #0]
    164a:	f001 fb8b 	bl	2d64 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    164e:	f002 f899 	bl	3784 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1652:	f001 fb6b 	bl	2d2c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1656:	4680      	mov	r8, r0
    1658:	482c      	ldr	r0, [pc, #176]	; (170c <CONFIG_FPROTECT_BLOCK_SIZE+0x70c>)
    165a:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    165e:	2920      	cmp	r1, #32
    1660:	d02a      	beq.n	16b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b8>
    1662:	68c0      	ldr	r0, [r0, #12]
    1664:	1d40      	adds	r0, r0, #5
    1666:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    166a:	bf00      	nop
    166c:	e9d4 2100 	ldrd	r2, r1, [r4]
    1670:	1a89      	subs	r1, r1, r2
    1672:	4401      	add	r1, r0
    1674:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1678:	e9c4 0100 	strd	r0, r1, [r4]
    167c:	6831      	ldr	r1, [r6, #0]
    167e:	4281      	cmp	r1, r0
    1680:	d902      	bls.n	1688 <CONFIG_FPROTECT_BLOCK_SIZE+0x688>
    1682:	68a0      	ldr	r0, [r4, #8]
    1684:	1c40      	adds	r0, r0, #1
    1686:	60a0      	str	r0, [r4, #8]
    1688:	6832      	ldr	r2, [r6, #0]
    168a:	6928      	ldr	r0, [r5, #16]
    168c:	4621      	mov	r1, r4
    168e:	9b06      	ldr	r3, [sp, #24]
    1690:	f7ff f9fa 	bl	a88 <MPSL_IRQ_RADIO_Handler+0xb8>
    1694:	2800      	cmp	r0, #0
    1696:	bf1c      	itt	ne
    1698:	b007      	addne	sp, #28
    169a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    169e:	e9d4 1000 	ldrd	r1, r0, [r4]
    16a2:	1a40      	subs	r0, r0, r1
    16a4:	6831      	ldr	r1, [r6, #0]
    16a6:	6021      	str	r1, [r4, #0]
    16a8:	6831      	ldr	r1, [r6, #0]
    16aa:	4408      	add	r0, r1
    16ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16b0:	6060      	str	r0, [r4, #4]
    16b2:	b007      	add	sp, #28
    16b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16b8:	3709      	adds	r7, #9
    16ba:	f1b9 0f00 	cmp.w	r9, #0
    16be:	d016      	beq.n	16ee <CONFIG_FPROTECT_BLOCK_SIZE+0x6ee>
    16c0:	f002 fb42 	bl	3d48 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16c4:	b998      	cbnz	r0, 16ee <CONFIG_FPROTECT_BLOCK_SIZE+0x6ee>
    16c6:	f002 fa2b 	bl	3b20 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    16ca:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    16ce:	bf08      	it	eq
    16d0:	200d      	moveq	r0, #13
    16d2:	d00b      	beq.n	16ec <CONFIG_FPROTECT_BLOCK_SIZE+0x6ec>
    16d4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    16d8:	3856      	subs	r0, #86	; 0x56
    16da:	bf08      	it	eq
    16dc:	201c      	moveq	r0, #28
    16de:	d005      	beq.n	16ec <CONFIG_FPROTECT_BLOCK_SIZE+0x6ec>
    16e0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    16e4:	389f      	subs	r0, #159	; 0x9f
    16e6:	bf14      	ite	ne
    16e8:	2000      	movne	r0, #0
    16ea:	2032      	moveq	r0, #50	; 0x32
    16ec:	4407      	add	r7, r0
    16ee:	9800      	ldr	r0, [sp, #0]
    16f0:	4580      	cmp	r8, r0
    16f2:	bf84      	itt	hi
    16f4:	eba8 0000 	subhi.w	r0, r8, r0
    16f8:	4407      	addhi	r7, r0
    16fa:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    16fe:	e7b5      	b.n	166c <CONFIG_FPROTECT_BLOCK_SIZE+0x66c>
    1700:	1e848000 	.word	0x1e848000
    1704:	0f424000 	.word	0x0f424000
    1708:	1e847fff 	.word	0x1e847fff
    170c:	20000abc 	.word	0x20000abc
    1710:	b570      	push	{r4, r5, r6, lr}
    1712:	4d1e      	ldr	r5, [pc, #120]	; (178c <CONFIG_FPROTECT_BLOCK_SIZE+0x78c>)
    1714:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1718:	2820      	cmp	r0, #32
    171a:	bf18      	it	ne
    171c:	bd70      	popne	{r4, r5, r6, pc}
    171e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1722:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1726:	4428      	add	r0, r5
    1728:	f890 4020 	ldrb.w	r4, [r0, #32]
    172c:	2c20      	cmp	r4, #32
    172e:	d027      	beq.n	1780 <CONFIG_FPROTECT_BLOCK_SIZE+0x780>
    1730:	4b17      	ldr	r3, [pc, #92]	; (1790 <CONFIG_FPROTECT_BLOCK_SIZE+0x790>)
    1732:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    1736:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    173a:	7849      	ldrb	r1, [r1, #1]
    173c:	f880 1020 	strb.w	r1, [r0, #32]
    1740:	20ff      	movs	r0, #255	; 0xff
    1742:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    1746:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    174a:	4621      	mov	r1, r4
    174c:	2002      	movs	r0, #2
    174e:	f000 f891 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
    1752:	2000      	movs	r0, #0
    1754:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    1758:	77a8      	strb	r0, [r5, #30]
    175a:	490e      	ldr	r1, [pc, #56]	; (1794 <CONFIG_FPROTECT_BLOCK_SIZE+0x794>)
    175c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1760:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1764:	7e00      	ldrb	r0, [r0, #24]
    1766:	2800      	cmp	r0, #0
    1768:	bf08      	it	eq
    176a:	f002 fccf 	bleq	410c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    176e:	2000      	movs	r0, #0
    1770:	4909      	ldr	r1, [pc, #36]	; (1798 <CONFIG_FPROTECT_BLOCK_SIZE+0x798>)
    1772:	6849      	ldr	r1, [r1, #4]
    1774:	2900      	cmp	r1, #0
    1776:	bf08      	it	eq
    1778:	bd70      	popeq	{r4, r5, r6, pc}
    177a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    177e:	4708      	bx	r1
    1780:	f240 3132 	movw	r1, #818	; 0x332
    1784:	2070      	movs	r0, #112	; 0x70
    1786:	f002 fb57 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    178a:	0000      	.short	0x0000
    178c:	20000abc 	.word	0x20000abc
    1790:	20000a3c 	.word	0x20000a3c
    1794:	200006bc 	.word	0x200006bc
    1798:	20000038 	.word	0x20000038
    179c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    17a0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1864 <CONFIG_FPROTECT_BLOCK_SIZE+0x864>
    17a4:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    17a8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    17ac:	4440      	add	r0, r8
    17ae:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    17b2:	2c20      	cmp	r4, #32
    17b4:	bf08      	it	eq
    17b6:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    17ba:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1868 <CONFIG_FPROTECT_BLOCK_SIZE+0x868>
    17be:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 186c <CONFIG_FPROTECT_BLOCK_SIZE+0x86c>
    17c2:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    17c6:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    17ca:	2607      	movs	r6, #7
    17cc:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    17d0:	2801      	cmp	r0, #1
    17d2:	d00e      	beq.n	17f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x7f2>
    17d4:	2804      	cmp	r0, #4
    17d6:	bf08      	it	eq
    17d8:	2602      	moveq	r6, #2
    17da:	d00a      	beq.n	17f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x7f2>
    17dc:	2805      	cmp	r0, #5
    17de:	bf0c      	ite	eq
    17e0:	2603      	moveq	r6, #3
    17e2:	2806      	cmpne	r0, #6
    17e4:	d005      	beq.n	17f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x7f2>
    17e6:	f640 01dd 	movw	r1, #2269	; 0x8dd
    17ea:	f04f 0070 	mov.w	r0, #112	; 0x70
    17ee:	f002 fb23 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17f2:	f1bb 0f00 	cmp.w	fp, #0
    17f6:	bf18      	it	ne
    17f8:	f3af 8000 	nopne.w
    17fc:	f3ef 8010 	mrs	r0, PRIMASK
    1800:	b672      	cpsid	i
    1802:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1806:	784a      	ldrb	r2, [r1, #1]
    1808:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    180c:	4441      	add	r1, r8
    180e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1812:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1816:	42a2      	cmp	r2, r4
    1818:	bf04      	itt	eq
    181a:	2220      	moveq	r2, #32
    181c:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1820:	b1c0      	cbz	r0, 1854 <CONFIG_FPROTECT_BLOCK_SIZE+0x854>
    1822:	462a      	mov	r2, r5
    1824:	4621      	mov	r1, r4
    1826:	2001      	movs	r0, #1
    1828:	f000 f824 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
    182c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1830:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    1834:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    1838:	6840      	ldr	r0, [r0, #4]
    183a:	4631      	mov	r1, r6
    183c:	4790      	blx	r2
    183e:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1842:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1846:	4440      	add	r0, r8
    1848:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    184c:	2c20      	cmp	r4, #32
    184e:	d1ba      	bne.n	17c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x7c6>
    1850:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1854:	4806      	ldr	r0, [pc, #24]	; (1870 <CONFIG_FPROTECT_BLOCK_SIZE+0x870>)
    1856:	2800      	cmp	r0, #0
    1858:	bf18      	it	ne
    185a:	f3af 8000 	nopne.w
    185e:	b662      	cpsie	i
    1860:	e7df      	b.n	1822 <CONFIG_FPROTECT_BLOCK_SIZE+0x822>
    1862:	0000      	.short	0x0000
    1864:	20000abc 	.word	0x20000abc
    1868:	00000000 	.word	0x00000000
    186c:	20000a3c 	.word	0x20000a3c
    1870:	00000000 	.word	0x00000000
    1874:	f8df c058 	ldr.w	ip, [pc, #88]	; 18d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x8d0>
    1878:	b510      	push	{r4, lr}
    187a:	2300      	movs	r3, #0
    187c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1880:	2807      	cmp	r0, #7
    1882:	d21f      	bcs.n	18c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x8c4>
    1884:	e8df f000 	tbb	[pc, r0]
    1888:	05050505 	.word	0x05050505
    188c:	00040404 	.word	0x00040404
    1890:	2301      	movs	r3, #1
    1892:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1896:	2b00      	cmp	r3, #0
    1898:	bf08      	it	eq
    189a:	bd10      	popeq	{r4, pc}
    189c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    18a0:	480c      	ldr	r0, [pc, #48]	; (18d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x8d4>)
    18a2:	4402      	add	r2, r0
    18a4:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    18a8:	2820      	cmp	r0, #32
    18aa:	bf0e      	itee	eq
    18ac:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    18b0:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    18b4:	7041      	strbne	r1, [r0, #1]
    18b6:	2020      	movs	r0, #32
    18b8:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    18bc:	7058      	strb	r0, [r3, #1]
    18be:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    18c2:	bd10      	pop	{r4, pc}
    18c4:	f240 216e 	movw	r1, #622	; 0x26e
    18c8:	2070      	movs	r0, #112	; 0x70
    18ca:	f002 fab5 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ce:	0000      	.short	0x0000
    18d0:	20000a3c 	.word	0x20000a3c
    18d4:	20000abc 	.word	0x20000abc
    18d8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    18dc:	460f      	mov	r7, r1
    18de:	4680      	mov	r8, r0
    18e0:	f8df a158 	ldr.w	sl, [pc, #344]	; 1a3c <CONFIG_FPROTECT_BLOCK_SIZE+0xa3c>
    18e4:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    18e8:	4450      	add	r0, sl
    18ea:	f1b8 0f01 	cmp.w	r8, #1
    18ee:	f890 4020 	ldrb.w	r4, [r0, #32]
    18f2:	4625      	mov	r5, r4
    18f4:	bf18      	it	ne
    18f6:	f1b8 0f02 	cmpne.w	r8, #2
    18fa:	d005      	beq.n	1908 <CONFIG_FPROTECT_BLOCK_SIZE+0x908>
    18fc:	f640 21a1 	movw	r1, #2721	; 0xaa1
    1900:	f04f 0070 	mov.w	r0, #112	; 0x70
    1904:	f002 fa98 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1908:	f04f 0b00 	mov.w	fp, #0
    190c:	2d20      	cmp	r5, #32
    190e:	d042      	beq.n	1996 <CONFIG_FPROTECT_BLOCK_SIZE+0x996>
    1910:	f89a 001e 	ldrb.w	r0, [sl, #30]
    1914:	2600      	movs	r6, #0
    1916:	2800      	cmp	r0, #0
    1918:	bf08      	it	eq
    191a:	2602      	moveq	r6, #2
    191c:	f001 fb8c 	bl	3038 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1920:	f8df c11c 	ldr.w	ip, [pc, #284]	; 1a40 <CONFIG_FPROTECT_BLOCK_SIZE+0xa40>
    1924:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1928:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    192c:	688a      	ldr	r2, [r1, #8]
    192e:	68c9      	ldr	r1, [r1, #12]
    1930:	1a12      	subs	r2, r2, r0
    1932:	1a09      	subs	r1, r1, r0
    1934:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1938:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    193c:	4296      	cmp	r6, r2
    193e:	bf99      	ittee	ls
    1940:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1944:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1948:	4a3e      	ldrhi	r2, [pc, #248]	; (1a44 <CONFIG_FPROTECT_BLOCK_SIZE+0xa44>)
    194a:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    194e:	d920      	bls.n	1992 <CONFIG_FPROTECT_BLOCK_SIZE+0x992>
    1950:	4622      	mov	r2, r4
    1952:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    1956:	784c      	ldrb	r4, [r1, #1]
    1958:	2c20      	cmp	r4, #32
    195a:	d012      	beq.n	1982 <CONFIG_FPROTECT_BLOCK_SIZE+0x982>
    195c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1960:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    1964:	688b      	ldr	r3, [r1, #8]
    1966:	68c9      	ldr	r1, [r1, #12]
    1968:	1a1b      	subs	r3, r3, r0
    196a:	1a09      	subs	r1, r1, r0
    196c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1970:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1974:	429e      	cmp	r6, r3
    1976:	bf9c      	itt	ls
    1978:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    197c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1980:	d8e6      	bhi.n	1950 <CONFIG_FPROTECT_BLOCK_SIZE+0x950>
    1982:	2a20      	cmp	r2, #32
    1984:	d005      	beq.n	1992 <CONFIG_FPROTECT_BLOCK_SIZE+0x992>
    1986:	463b      	mov	r3, r7
    1988:	2120      	movs	r1, #32
    198a:	2004      	movs	r0, #4
    198c:	f7ff f840 	bl	a10 <MPSL_IRQ_RADIO_Handler+0x40>
    1990:	4604      	mov	r4, r0
    1992:	42ac      	cmp	r4, r5
    1994:	d116      	bne.n	19c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x9c4>
    1996:	482c      	ldr	r0, [pc, #176]	; (1a48 <CONFIG_FPROTECT_BLOCK_SIZE+0xa48>)
    1998:	2800      	cmp	r0, #0
    199a:	bf18      	it	ne
    199c:	f3af 8000 	nopne.w
    19a0:	f001 fb4a 	bl	3038 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    19a4:	4603      	mov	r3, r0
    19a6:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    19aa:	2820      	cmp	r0, #32
    19ac:	d00d      	beq.n	19ca <CONFIG_FPROTECT_BLOCK_SIZE+0x9ca>
    19ae:	f8da 0008 	ldr.w	r0, [sl, #8]
    19b2:	1c99      	adds	r1, r3, #2
    19b4:	1a08      	subs	r0, r1, r0
    19b6:	0200      	lsls	r0, r0, #8
    19b8:	17c1      	asrs	r1, r0, #31
    19ba:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    19be:	1200      	asrs	r0, r0, #8
    19c0:	2800      	cmp	r0, #0
    19c2:	dd02      	ble.n	19ca <CONFIG_FPROTECT_BLOCK_SIZE+0x9ca>
    19c4:	2000      	movs	r0, #0
    19c6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    19ca:	2d20      	cmp	r5, #32
    19cc:	d014      	beq.n	19f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x9f8>
    19ce:	462a      	mov	r2, r5
    19d0:	4641      	mov	r1, r8
    19d2:	4618      	mov	r0, r3
    19d4:	f7ff fab2 	bl	f3c <MPSL_IRQ_RADIO_Handler+0x56c>
    19d8:	2800      	cmp	r0, #0
    19da:	bf1e      	ittt	ne
    19dc:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    19e0:	2002      	movne	r0, #2
    19e2:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    19e6:	463b      	mov	r3, r7
    19e8:	462a      	mov	r2, r5
    19ea:	2120      	movs	r1, #32
    19ec:	2004      	movs	r0, #4
    19ee:	f7ff f80f 	bl	a10 <MPSL_IRQ_RADIO_Handler+0x40>
    19f2:	2000      	movs	r0, #0
    19f4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    19f8:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    19fc:	b118      	cbz	r0, 1a06 <CONFIG_FPROTECT_BLOCK_SIZE+0xa06>
    19fe:	f002 f895 	bl	3b2c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1a02:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    1a06:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    1a0a:	b120      	cbz	r0, 1a16 <CONFIG_FPROTECT_BLOCK_SIZE+0xa16>
    1a0c:	2005      	movs	r0, #5
    1a0e:	f001 fd75 	bl	34fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a12:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    1a16:	2004      	movs	r0, #4
    1a18:	f001 fd70 	bl	34fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a1c:	f001 fdde 	bl	35dc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1a20:	2020      	movs	r0, #32
    1a22:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    1a26:	4809      	ldr	r0, [pc, #36]	; (1a4c <CONFIG_FPROTECT_BLOCK_SIZE+0xa4c>)
    1a28:	6880      	ldr	r0, [r0, #8]
    1a2a:	f8c0 b000 	str.w	fp, [r0]
    1a2e:	4808      	ldr	r0, [pc, #32]	; (1a50 <CONFIG_FPROTECT_BLOCK_SIZE+0xa50>)
    1a30:	f8c0 b000 	str.w	fp, [r0]
    1a34:	2001      	movs	r0, #1
    1a36:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1a3a:	0000      	.short	0x0000
    1a3c:	20000abc 	.word	0x20000abc
    1a40:	200006bc 	.word	0x200006bc
    1a44:	20000a3c 	.word	0x20000a3c
    1a48:	00000000 	.word	0x00000000
    1a4c:	20000038 	.word	0x20000038
    1a50:	40000508 	.word	0x40000508

00001a54 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a58:	4e69      	ldr	r6, [pc, #420]	; (1c00 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1a5a:	4607      	mov	r7, r0
    1a5c:	b08d      	sub	sp, #52	; 0x34
    1a5e:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1a62:	4688      	mov	r8, r1
    1a64:	2820      	cmp	r0, #32
    1a66:	d055      	beq.n	1b14 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    1a68:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1a6c:	f106 0408 	add.w	r4, r6, #8
    1a70:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1a74:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    1a78:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    1a7c:	2020      	movs	r0, #32
    1a7e:	f88d 0020 	strb.w	r0, [sp, #32]
    1a82:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    1a86:	aa0a      	add	r2, sp, #40	; 0x28
    1a88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1a8c:	4430      	add	r0, r6
    1a8e:	a909      	add	r1, sp, #36	; 0x24
    1a90:	f890 5020 	ldrb.w	r5, [r0, #32]
    1a94:	68f0      	ldr	r0, [r6, #12]
    1a96:	9002      	str	r0, [sp, #8]
    1a98:	6830      	ldr	r0, [r6, #0]
    1a9a:	4438      	add	r0, r7
    1a9c:	f001 f962 	bl	2d64 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1aa0:	f8da 000c 	ldr.w	r0, [sl, #12]
    1aa4:	9909      	ldr	r1, [sp, #36]	; 0x24
    1aa6:	2f65      	cmp	r7, #101	; 0x65
    1aa8:	4408      	add	r0, r1
    1aaa:	d338      	bcc.n	1b1e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1aac:	4a55      	ldr	r2, [pc, #340]	; (1c04 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    1aae:	2100      	movs	r1, #0
    1ab0:	1bd2      	subs	r2, r2, r7
    1ab2:	eb71 0201 	sbcs.w	r2, r1, r1
    1ab6:	d332      	bcc.n	1b1e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1ab8:	6822      	ldr	r2, [r4, #0]
    1aba:	1a82      	subs	r2, r0, r2
    1abc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1ac0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1ac4:	d82b      	bhi.n	1b1e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1ac6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1aca:	6060      	str	r0, [r4, #4]
    1acc:	4630      	mov	r0, r6
    1ace:	f884 8010 	strb.w	r8, [r4, #16]
    1ad2:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1ad6:	f10d 0a20 	add.w	sl, sp, #32
    1ada:	2d20      	cmp	r5, #32
    1adc:	bf1c      	itt	ne
    1ade:	494a      	ldrne	r1, [pc, #296]	; (1c08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    1ae0:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1ae4:	d050      	beq.n	1b88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1ae6:	bf00      	nop
    1ae8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1aec:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1af0:	6861      	ldr	r1, [r4, #4]
    1af2:	f8d8 6008 	ldr.w	r6, [r8, #8]
    1af6:	f108 0008 	add.w	r0, r8, #8
    1afa:	1a71      	subs	r1, r6, r1
    1afc:	0209      	lsls	r1, r1, #8
    1afe:	17ca      	asrs	r2, r1, #31
    1b00:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1b04:	1209      	asrs	r1, r1, #8
    1b06:	d42d      	bmi.n	1b64 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    1b08:	89c0      	ldrh	r0, [r0, #14]
    1b0a:	2800      	cmp	r0, #0
    1b0c:	d03c      	beq.n	1b88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1b0e:	89e0      	ldrh	r0, [r4, #14]
    1b10:	b148      	cbz	r0, 1b26 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    1b12:	e039      	b.n	1b88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1b14:	f640 3168 	movw	r1, #2920	; 0xb68
    1b18:	2070      	movs	r0, #112	; 0x70
    1b1a:	f002 f98d 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b1e:	b00d      	add	sp, #52	; 0x34
    1b20:	2001      	movs	r0, #1
    1b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b26:	6820      	ldr	r0, [r4, #0]
    1b28:	900c      	str	r0, [sp, #48]	; 0x30
    1b2a:	f001 fff9 	bl	3b20 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1b2e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1b32:	bf08      	it	eq
    1b34:	200d      	moveq	r0, #13
    1b36:	d00b      	beq.n	1b50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1b38:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1b3c:	3856      	subs	r0, #86	; 0x56
    1b3e:	bf08      	it	eq
    1b40:	201c      	moveq	r0, #28
    1b42:	d005      	beq.n	1b50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1b44:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1b48:	389f      	subs	r0, #159	; 0x9f
    1b4a:	bf14      	ite	ne
    1b4c:	2000      	movne	r0, #0
    1b4e:	2032      	moveq	r0, #50	; 0x32
    1b50:	1c41      	adds	r1, r0, #1
    1b52:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b54:	1a30      	subs	r0, r6, r0
    1b56:	0200      	lsls	r0, r0, #8
    1b58:	17c2      	asrs	r2, r0, #31
    1b5a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1b5e:	1200      	asrs	r0, r0, #8
    1b60:	4288      	cmp	r0, r1
    1b62:	da11      	bge.n	1b88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1b64:	f88a 5000 	strb.w	r5, [sl]
    1b68:	f898 1018 	ldrb.w	r1, [r8, #24]
    1b6c:	7c20      	ldrb	r0, [r4, #16]
    1b6e:	4281      	cmp	r1, r0
    1b70:	d805      	bhi.n	1b7e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    1b72:	9802      	ldr	r0, [sp, #8]
    1b74:	6060      	str	r0, [r4, #4]
    1b76:	b00d      	add	sp, #52	; 0x34
    1b78:	2002      	movs	r0, #2
    1b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b7e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1b82:	7845      	ldrb	r5, [r0, #1]
    1b84:	2d20      	cmp	r5, #32
    1b86:	d1af      	bne.n	1ae8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    1b88:	2005      	movs	r0, #5
    1b8a:	f001 fcb7 	bl	34fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1b8e:	4c1c      	ldr	r4, [pc, #112]	; (1c00 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b94:	6060      	str	r0, [r4, #4]
    1b96:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    1b9a:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1b9e:	2120      	movs	r1, #32
    1ba0:	2a20      	cmp	r2, #32
    1ba2:	d003      	beq.n	1bac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    1ba4:	2005      	movs	r0, #5
    1ba6:	f7fe ff33 	bl	a10 <MPSL_IRQ_RADIO_Handler+0x40>
    1baa:	e004      	b.n	1bb6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    1bac:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    1bb0:	4420      	add	r0, r4
    1bb2:	f890 0020 	ldrb.w	r0, [r0, #32]
    1bb6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    1bba:	4913      	ldr	r1, [pc, #76]	; (1c08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    1bbc:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1bc0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    1bc4:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1bc8:	7048      	strb	r0, [r1, #1]
    1bca:	6820      	ldr	r0, [r4, #0]
    1bcc:	4438      	add	r0, r7
    1bce:	6020      	str	r0, [r4, #0]
    1bd0:	20ff      	movs	r0, #255	; 0xff
    1bd2:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    1bd6:	7e60      	ldrb	r0, [r4, #25]
    1bd8:	2801      	cmp	r0, #1
    1bda:	d105      	bne.n	1be8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    1bdc:	68e0      	ldr	r0, [r4, #12]
    1bde:	1e40      	subs	r0, r0, #1
    1be0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1be4:	f001 faee 	bl	31c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1be8:	f89d 0020 	ldrb.w	r0, [sp, #32]
    1bec:	2820      	cmp	r0, #32
    1bee:	d003      	beq.n	1bf8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    1bf0:	4806      	ldr	r0, [pc, #24]	; (1c0c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    1bf2:	7840      	ldrb	r0, [r0, #1]
    1bf4:	f002 f9f4 	bl	3fe0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1bf8:	b00d      	add	sp, #52	; 0x34
    1bfa:	2000      	movs	r0, #0
    1bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c00:	20000abc 	.word	0x20000abc
    1c04:	0f424000 	.word	0x0f424000
    1c08:	20000a3c 	.word	0x20000a3c
    1c0c:	20000038 	.word	0x20000038

00001c10 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c12:	4d6b      	ldr	r5, [pc, #428]	; (1dc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x74>)
    1c14:	4a6b      	ldr	r2, [pc, #428]	; (1dc4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x78>)
    1c16:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    1c1a:	2601      	movs	r6, #1
    1c1c:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    1c20:	2808      	cmp	r0, #8
    1c22:	d27c      	bcs.n	1d1e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    1c24:	e8df f000 	tbb	[pc, r0]
    1c28:	a9977004 	.word	0xa9977004
    1c2c:	b3ae41c7 	.word	0xb3ae41c7
    1c30:	b919      	cbnz	r1, 1c3a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1c32:	f001 ff97 	bl	3b64 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1c36:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1c3a:	8ae0      	ldrh	r0, [r4, #22]
    1c3c:	b110      	cbz	r0, 1c44 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1c3e:	f002 f883 	bl	3d48 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1c42:	b180      	cbz	r0, 1c66 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    1c44:	f7ff fd64 	bl	1710 <CONFIG_FPROTECT_BLOCK_SIZE+0x710>
    1c48:	20ff      	movs	r0, #255	; 0xff
    1c4a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    1c4e:	6861      	ldr	r1, [r4, #4]
    1c50:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    1c54:	d003      	beq.n	1c5e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    1c56:	2005      	movs	r0, #5
    1c58:	f001 fb9a 	bl	3390 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1c5c:	b140      	cbz	r0, 1c70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    1c5e:	7e60      	ldrb	r0, [r4, #25]
    1c60:	2801      	cmp	r0, #1
    1c62:	d110      	bne.n	1c86 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    1c64:	e009      	b.n	1c7a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    1c66:	f640 0169 	movw	r1, #2153	; 0x869
    1c6a:	2070      	movs	r0, #112	; 0x70
    1c6c:	f002 f8e4 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c70:	f640 016e 	movw	r1, #2158	; 0x86e
    1c74:	2070      	movs	r0, #112	; 0x70
    1c76:	f002 f8df 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c7a:	68e0      	ldr	r0, [r4, #12]
    1c7c:	1e40      	subs	r0, r0, #1
    1c7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c82:	f001 fa9f 	bl	31c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1c86:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1c8a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1c8e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1c92:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1c96:	6840      	ldr	r0, [r0, #4]
    1c98:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1c9c:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1ca0:	b001      	add	sp, #4
    1ca2:	2101      	movs	r1, #1
    1ca4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1ca8:	4710      	bx	r2
    1caa:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1cae:	b140      	cbz	r0, 1cc2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    1cb0:	b919      	cbnz	r1, 1cba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    1cb2:	f001 ff57 	bl	3b64 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1cb6:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1cba:	2000      	movs	r0, #0
    1cbc:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1cc2:	f7ff fd25 	bl	1710 <CONFIG_FPROTECT_BLOCK_SIZE+0x710>
    1cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1cca:	6060      	str	r0, [r4, #4]
    1ccc:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    1cd0:	f88d 0000 	strb.w	r0, [sp]
    1cd4:	f89d 0000 	ldrb.w	r0, [sp]
    1cd8:	b188      	cbz	r0, 1cfe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    1cda:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1cde:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1ce2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1ce6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1cea:	6840      	ldr	r0, [r0, #4]
    1cec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1cf0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1cf4:	b001      	add	sp, #4
    1cf6:	2106      	movs	r1, #6
    1cf8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1cfc:	4710      	bx	r2
    1cfe:	f640 0185 	movw	r1, #2181	; 0x885
    1d02:	2070      	movs	r0, #112	; 0x70
    1d04:	f002 f898 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d08:	f7ff fd02 	bl	1710 <CONFIG_FPROTECT_BLOCK_SIZE+0x710>
    1d0c:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    1d10:	f002 f81a 	bl	3d48 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1d14:	b120      	cbz	r0, 1d20 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    1d16:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    1d1a:	b130      	cbz	r0, 1d2a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    1d1c:	e009      	b.n	1d32 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    1d1e:	e04a      	b.n	1db6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6a>
    1d20:	f640 0193 	movw	r1, #2195	; 0x893
    1d24:	2070      	movs	r0, #112	; 0x70
    1d26:	f002 f887 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d2a:	f001 ff1b 	bl	3b64 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1d2e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1d32:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1d36:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1d3a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1d3e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1d42:	6840      	ldr	r0, [r0, #4]
    1d44:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1d48:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1d4c:	b001      	add	sp, #4
    1d4e:	2100      	movs	r1, #0
    1d50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1d54:	4710      	bx	r2
    1d56:	f001 fcf7 	bl	3748 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    1d5a:	8ae0      	ldrh	r0, [r4, #22]
    1d5c:	b110      	cbz	r0, 1d64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18>
    1d5e:	f001 fff3 	bl	3d48 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1d62:	b128      	cbz	r0, 1d70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24>
    1d64:	f001 fd04 	bl	3770 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    1d68:	2800      	cmp	r0, #0
    1d6a:	bf18      	it	ne
    1d6c:	7766      	strbne	r6, [r4, #29]
    1d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d70:	f640 019d 	movw	r1, #2205	; 0x89d
    1d74:	2070      	movs	r0, #112	; 0x70
    1d76:	f002 f85f 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d7a:	4813      	ldr	r0, [pc, #76]	; (1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>)
    1d7c:	6006      	str	r6, [r0, #0]
    1d7e:	6890      	ldr	r0, [r2, #8]
    1d80:	6006      	str	r6, [r0, #0]
    1d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d84:	7810      	ldrb	r0, [r2, #0]
    1d86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1d8a:	f002 b929 	b.w	3fe0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1d8e:	f7ff fcbf 	bl	1710 <CONFIG_FPROTECT_BLOCK_SIZE+0x710>
    1d92:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1d96:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1d9a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1d9e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1da2:	6840      	ldr	r0, [r0, #4]
    1da4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1da8:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1dac:	b001      	add	sp, #4
    1dae:	2105      	movs	r1, #5
    1db0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1db4:	4710      	bx	r2
    1db6:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    1dba:	2070      	movs	r0, #112	; 0x70
    1dbc:	f002 f83c 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1dc0:	200006bc 	.word	0x200006bc
    1dc4:	20000038 	.word	0x20000038
    1dc8:	40000508 	.word	0x40000508

00001dcc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1dcc:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dd0:	4682      	mov	sl, r0
    1dd2:	48ef      	ldr	r0, [pc, #956]	; (2190 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    1dd4:	b095      	sub	sp, #84	; 0x54
    1dd6:	6800      	ldr	r0, [r0, #0]
    1dd8:	4dee      	ldr	r5, [pc, #952]	; (2194 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    1dda:	05c0      	lsls	r0, r0, #23
    1ddc:	0dc0      	lsrs	r0, r0, #23
    1dde:	d00e      	beq.n	1dfe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1de0:	3810      	subs	r0, #16
    1de2:	b240      	sxtb	r0, r0
    1de4:	2800      	cmp	r0, #0
    1de6:	bfb8      	it	lt
    1de8:	f000 000f 	andlt.w	r0, r0, #15
    1dec:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1df0:	bfac      	ite	ge
    1df2:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1df6:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1dfa:	0940      	lsrs	r0, r0, #5
    1dfc:	d00d      	beq.n	1e1a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1dfe:	9816      	ldr	r0, [sp, #88]	; 0x58
    1e00:	f04f 0b00 	mov.w	fp, #0
    1e04:	7800      	ldrb	r0, [r0, #0]
    1e06:	2800      	cmp	r0, #0
    1e08:	bf18      	it	ne
    1e0a:	2801      	cmpne	r0, #1
    1e0c:	d018      	beq.n	1e40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1e0e:	f240 713b 	movw	r1, #1851	; 0x73b
    1e12:	f04f 0070 	mov.w	r0, #112	; 0x70
    1e16:	f002 f80f 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e1a:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1e1e:	f04f 0b01 	mov.w	fp, #1
    1e22:	2820      	cmp	r0, #32
    1e24:	d007      	beq.n	1e36 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1e26:	9816      	ldr	r0, [sp, #88]	; 0x58
    1e28:	7800      	ldrb	r0, [r0, #0]
    1e2a:	b148      	cbz	r0, 1e40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1e2c:	f240 7137 	movw	r1, #1847	; 0x737
    1e30:	2070      	movs	r0, #112	; 0x70
    1e32:	f002 f801 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e36:	f240 7134 	movw	r1, #1844	; 0x734
    1e3a:	2070      	movs	r0, #112	; 0x70
    1e3c:	f001 fffc 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e40:	4cd5      	ldr	r4, [pc, #852]	; (2198 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    1e42:	b124      	cbz	r4, 1e4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1e44:	2100      	movs	r1, #0
    1e46:	f240 703e 	movw	r0, #1854	; 0x73e
    1e4a:	f3af 8000 	nop.w
    1e4e:	2000      	movs	r0, #0
    1e50:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    1e54:	49d1      	ldr	r1, [pc, #836]	; (219c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    1e56:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    1e5a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1e5e:	f04f 0901 	mov.w	r9, #1
    1e62:	9000      	str	r0, [sp, #0]
    1e64:	b124      	cbz	r4, 1e70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    1e66:	2100      	movs	r1, #0
    1e68:	f240 7049 	movw	r0, #1865	; 0x749
    1e6c:	f3af 8000 	nop.w
    1e70:	f1b9 0f00 	cmp.w	r9, #0
    1e74:	d00a      	beq.n	1e8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    1e76:	bf00      	nop
    1e78:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    1e7c:	f04f 0800 	mov.w	r8, #0
    1e80:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    1e84:	f1bb 0f00 	cmp.w	fp, #0
    1e88:	d007      	beq.n	1e9a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    1e8a:	e038      	b.n	1efe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    1e8c:	48c4      	ldr	r0, [pc, #784]	; (21a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    1e8e:	2800      	cmp	r0, #0
    1e90:	bf18      	it	ne
    1e92:	f3af 8000 	nopne.w
    1e96:	b662      	cpsie	i
    1e98:	e7ee      	b.n	1e78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    1e9a:	4637      	mov	r7, r6
    1e9c:	2001      	movs	r0, #1
    1e9e:	ea20 0607 	bic.w	r6, r0, r7
    1ea2:	48c0      	ldr	r0, [pc, #768]	; (21a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    1ea4:	2240      	movs	r2, #64	; 0x40
    1ea6:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1eaa:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1eae:	f006 fb14 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1eb2:	b124      	cbz	r4, 1ebe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    1eb4:	2100      	movs	r1, #0
    1eb6:	f240 505e 	movw	r0, #1374	; 0x55e
    1eba:	f3af 8000 	nop.w
    1ebe:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    1ec2:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1ec6:	4429      	add	r1, r5
    1ec8:	4428      	add	r0, r5
    1eca:	8c0a      	ldrh	r2, [r1, #32]
    1ecc:	8402      	strh	r2, [r0, #32]
    1ece:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    1ed2:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    1ed6:	b124      	cbz	r4, 1ee2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    1ed8:	2100      	movs	r1, #0
    1eda:	f240 5062 	movw	r0, #1378	; 0x562
    1ede:	f3af 8000 	nop.w
    1ee2:	b124      	cbz	r4, 1eee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    1ee4:	2100      	movs	r1, #0
    1ee6:	f240 7053 	movw	r0, #1875	; 0x753
    1eea:	f3af 8000 	nop.w
    1eee:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1ef2:	f88d 0008 	strb.w	r0, [sp, #8]
    1ef6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1efa:	2800      	cmp	r0, #0
    1efc:	d1b2      	bne.n	1e64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1efe:	b124      	cbz	r4, 1f0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    1f00:	2100      	movs	r1, #0
    1f02:	f240 705d 	movw	r0, #1885	; 0x75d
    1f06:	f3af 8000 	nop.w
    1f0a:	a802      	add	r0, sp, #8
    1f0c:	f001 f89a 	bl	3044 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    1f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1f14:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    1f18:	4633      	mov	r3, r6
    1f1a:	aa09      	add	r2, sp, #36	; 0x24
    1f1c:	a80e      	add	r0, sp, #56	; 0x38
    1f1e:	9916      	ldr	r1, [sp, #88]	; 0x58
    1f20:	f7ff fa94 	bl	144c <CONFIG_FPROTECT_BLOCK_SIZE+0x44c>
    1f24:	b124      	cbz	r4, 1f30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    1f26:	2100      	movs	r1, #0
    1f28:	f240 7064 	movw	r0, #1892	; 0x764
    1f2c:	f3af 8000 	nop.w
    1f30:	4a9c      	ldr	r2, [pc, #624]	; (21a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    1f32:	990e      	ldr	r1, [sp, #56]	; 0x38
    1f34:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    1f38:	a809      	add	r0, sp, #36	; 0x24
    1f3a:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    1f3e:	2a01      	cmp	r2, #1
    1f40:	bf18      	it	ne
    1f42:	2a02      	cmpne	r2, #2
    1f44:	d138      	bne.n	1fb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    1f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1f4a:	eba2 0201 	sub.w	r2, r2, r1
    1f4e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1f52:	eba3 0101 	sub.w	r1, r3, r1
    1f56:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    1f5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1f5e:	2a02      	cmp	r2, #2
    1f60:	d364      	bcc.n	202c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    1f62:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1f66:	bf98      	it	ls
    1f68:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1f6c:	d85e      	bhi.n	202c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    1f6e:	f04f 0801 	mov.w	r8, #1
    1f72:	ab14      	add	r3, sp, #80	; 0x50
    1f74:	aa13      	add	r2, sp, #76	; 0x4c
    1f76:	4631      	mov	r1, r6
    1f78:	f7fe ff3e 	bl	df8 <MPSL_IRQ_RADIO_Handler+0x428>
    1f7c:	2800      	cmp	r0, #0
    1f7e:	d05d      	beq.n	203c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    1f80:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1f84:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    1f88:	4633      	mov	r3, r6
    1f8a:	428a      	cmp	r2, r1
    1f8c:	d05a      	beq.n	2044 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    1f8e:	2005      	movs	r0, #5
    1f90:	f7fe fd3e 	bl	a10 <MPSL_IRQ_RADIO_Handler+0x40>
    1f94:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    1f98:	7048      	strb	r0, [r1, #1]
    1f9a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1f9e:	2820      	cmp	r0, #32
    1fa0:	bf1c      	itt	ne
    1fa2:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1fa6:	f880 a001 	strbne.w	sl, [r0, #1]
    1faa:	d057      	beq.n	205c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    1fac:	4632      	mov	r2, r6
    1fae:	4651      	mov	r1, sl
    1fb0:	f05f 0003 	movs.w	r0, #3
    1fb4:	f7ff fc5e 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
    1fb8:	b124      	cbz	r4, 1fc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    1fba:	2100      	movs	r1, #0
    1fbc:	f240 7069 	movw	r0, #1897	; 0x769
    1fc0:	f3af 8000 	nop.w
    1fc4:	4878      	ldr	r0, [pc, #480]	; (21a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    1fc6:	2800      	cmp	r0, #0
    1fc8:	bf18      	it	ne
    1fca:	f3af 8000 	nopne.w
    1fce:	f3ef 8910 	mrs	r9, PRIMASK
    1fd2:	b672      	cpsid	i
    1fd4:	b124      	cbz	r4, 1fe0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    1fd6:	2100      	movs	r1, #0
    1fd8:	f240 706f 	movw	r0, #1903	; 0x76f
    1fdc:	f3af 8000 	nop.w
    1fe0:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1fe4:	f88d 0008 	strb.w	r0, [sp, #8]
    1fe8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1fec:	2800      	cmp	r0, #0
    1fee:	f47f af39 	bne.w	1e64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1ff2:	b124      	cbz	r4, 1ffe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    1ff4:	2100      	movs	r1, #0
    1ff6:	f240 7077 	movw	r0, #1911	; 0x777
    1ffa:	f3af 8000 	nop.w
    1ffe:	af09      	add	r7, sp, #36	; 0x24
    2000:	9800      	ldr	r0, [sp, #0]
    2002:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    2006:	f100 0708 	add.w	r7, r0, #8
    200a:	f1b8 0f00 	cmp.w	r8, #0
    200e:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    2012:	990d      	ldr	r1, [sp, #52]	; 0x34
    2014:	6181      	str	r1, [r0, #24]
    2016:	d051      	beq.n	20bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    2018:	b124      	cbz	r4, 2024 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    201a:	2100      	movs	r1, #0
    201c:	f240 7084 	movw	r0, #1924	; 0x784
    2020:	f3af 8000 	nop.w
    2024:	f1bb 0f00 	cmp.w	fp, #0
    2028:	d139      	bne.n	209e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    202a:	e01f      	b.n	206c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    202c:	4632      	mov	r2, r6
    202e:	4651      	mov	r1, sl
    2030:	2004      	movs	r0, #4
    2032:	f7ff fc1f 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
    2036:	f04f 0801 	mov.w	r8, #1
    203a:	e7bd      	b.n	1fb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    203c:	4632      	mov	r2, r6
    203e:	4651      	mov	r1, sl
    2040:	2004      	movs	r0, #4
    2042:	e7b7      	b.n	1fb4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    2044:	2920      	cmp	r1, #32
    2046:	bf19      	ittee	ne
    2048:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    204c:	7840      	ldrbne	r0, [r0, #1]
    204e:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    2052:	4428      	addeq	r0, r5
    2054:	bf08      	it	eq
    2056:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    205a:	e79b      	b.n	1f94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    205c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    2060:	4429      	add	r1, r5
    2062:	f881 a020 	strb.w	sl, [r1, #32]
    2066:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    206a:	e79f      	b.n	1fac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    206c:	9811      	ldr	r0, [sp, #68]	; 0x44
    206e:	f010 0fff 	tst.w	r0, #255	; 0xff
    2072:	d014      	beq.n	209e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    2074:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2078:	2820      	cmp	r0, #32
    207a:	d110      	bne.n	209e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    207c:	b124      	cbz	r4, 2088 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    207e:	2100      	movs	r1, #0
    2080:	f240 7089 	movw	r0, #1929	; 0x789
    2084:	f3af 8000 	nop.w
    2088:	4631      	mov	r1, r6
    208a:	2002      	movs	r0, #2
    208c:	f7ff fc24 	bl	18d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8d8>
    2090:	9010      	str	r0, [sp, #64]	; 0x40
    2092:	b920      	cbnz	r0, 209e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    2094:	9816      	ldr	r0, [sp, #88]	; 0x58
    2096:	7800      	ldrb	r0, [r0, #0]
    2098:	b1e8      	cbz	r0, 20d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
    209a:	2801      	cmp	r0, #1
    209c:	d02a      	beq.n	20f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    209e:	b124      	cbz	r4, 20aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    20a0:	2100      	movs	r1, #0
    20a2:	f240 70a6 	movw	r0, #1958	; 0x7a6
    20a6:	f3af 8000 	nop.w
    20aa:	20ff      	movs	r0, #255	; 0xff
    20ac:	f1bb 0f00 	cmp.w	fp, #0
    20b0:	bf18      	it	ne
    20b2:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    20b6:	d026      	beq.n	2106 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33a>
    20b8:	f04f 0801 	mov.w	r8, #1
    20bc:	b124      	cbz	r4, 20c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    20be:	2100      	movs	r1, #0
    20c0:	f240 70b7 	movw	r0, #1975	; 0x7b7
    20c4:	f3af 8000 	nop.w
    20c8:	9810      	ldr	r0, [sp, #64]	; 0x40
    20ca:	4e38      	ldr	r6, [pc, #224]	; (21ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    20cc:	2802      	cmp	r0, #2
    20ce:	d023      	beq.n	2118 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    20d0:	2801      	cmp	r0, #1
    20d2:	d029      	beq.n	2128 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    20d4:	e02d      	b.n	2132 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    20d6:	b124      	cbz	r4, 20e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x316>
    20d8:	2100      	movs	r1, #0
    20da:	f240 7091 	movw	r0, #1937	; 0x791
    20de:	f3af 8000 	nop.w
    20e2:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    20e6:	4651      	mov	r1, sl
    20e8:	2004      	movs	r0, #4
    20ea:	f7ff fbc3 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
    20ee:	f04f 0801 	mov.w	r8, #1
    20f2:	e7e3      	b.n	20bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    20f4:	2c00      	cmp	r4, #0
    20f6:	f43f aeb5 	beq.w	1e64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    20fa:	2100      	movs	r1, #0
    20fc:	f240 709c 	movw	r0, #1948	; 0x79c
    2100:	f3af 8000 	nop.w
    2104:	e6ae      	b.n	1e64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2106:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    210a:	2101      	movs	r1, #1
    210c:	4391      	bics	r1, r2
    210e:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    2112:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    2116:	e7cf      	b.n	20b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
    2118:	68a8      	ldr	r0, [r5, #8]
    211a:	990e      	ldr	r1, [sp, #56]	; 0x38
    211c:	1a40      	subs	r0, r0, r1
    211e:	f006 f882 	bl	8226 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2122:	6871      	ldr	r1, [r6, #4]
    2124:	b921      	cbnz	r1, 2130 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    2126:	e004      	b.n	2132 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    2128:	6871      	ldr	r1, [r6, #4]
    212a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    212e:	b101      	cbz	r1, 2132 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    2130:	4788      	blx	r1
    2132:	f1b9 0f00 	cmp.w	r9, #0
    2136:	d024      	beq.n	2182 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b6>
    2138:	b124      	cbz	r4, 2144 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    213a:	2100      	movs	r1, #0
    213c:	f240 70c7 	movw	r0, #1991	; 0x7c7
    2140:	f3af 8000 	nop.w
    2144:	f1b8 0f00 	cmp.w	r8, #0
    2148:	d011      	beq.n	216e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    214a:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    214e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2152:	4428      	add	r0, r5
    2154:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2158:	2820      	cmp	r0, #32
    215a:	d008      	beq.n	216e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    215c:	b124      	cbz	r4, 2168 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>
    215e:	2100      	movs	r1, #0
    2160:	f240 70ce 	movw	r0, #1998	; 0x7ce
    2164:	f3af 8000 	nop.w
    2168:	7870      	ldrb	r0, [r6, #1]
    216a:	f001 ff39 	bl	3fe0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    216e:	b124      	cbz	r4, 217a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    2170:	2100      	movs	r1, #0
    2172:	f240 70d3 	movw	r0, #2003	; 0x7d3
    2176:	f3af 8000 	nop.w
    217a:	b017      	add	sp, #92	; 0x5c
    217c:	4640      	mov	r0, r8
    217e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2182:	4807      	ldr	r0, [pc, #28]	; (21a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    2184:	2800      	cmp	r0, #0
    2186:	bf18      	it	ne
    2188:	f3af 8000 	nopne.w
    218c:	b662      	cpsie	i
    218e:	e7d3      	b.n	2138 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>
    2190:	e000ed04 	.word	0xe000ed04
    2194:	20000abc 	.word	0x20000abc
    2198:	00000000 	.word	0x00000000
    219c:	200006bc 	.word	0x200006bc
    21a0:	00000000 	.word	0x00000000
    21a4:	20000a3c 	.word	0x20000a3c
    21a8:	00000000 	.word	0x00000000
    21ac:	20000038 	.word	0x20000038

000021b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    21b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21b4:	4606      	mov	r6, r0
    21b6:	7800      	ldrb	r0, [r0, #0]
    21b8:	b08d      	sub	sp, #52	; 0x34
    21ba:	b118      	cbz	r0, 21c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    21bc:	b00d      	add	sp, #52	; 0x34
    21be:	2000      	movs	r0, #0
    21c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21c4:	488c      	ldr	r0, [pc, #560]	; (23f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    21c6:	6800      	ldr	r0, [r0, #0]
    21c8:	05c0      	lsls	r0, r0, #23
    21ca:	0dc0      	lsrs	r0, r0, #23
    21cc:	d00e      	beq.n	21ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    21ce:	3810      	subs	r0, #16
    21d0:	b240      	sxtb	r0, r0
    21d2:	2800      	cmp	r0, #0
    21d4:	bfb8      	it	lt
    21d6:	f000 000f 	andlt.w	r0, r0, #15
    21da:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    21de:	bfac      	ite	ge
    21e0:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    21e4:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    21e8:	0940      	lsrs	r0, r0, #5
    21ea:	d0e7      	beq.n	21bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    21ec:	4d83      	ldr	r5, [pc, #524]	; (23fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    21ee:	4c84      	ldr	r4, [pc, #528]	; (2400 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    21f0:	f04f 0b01 	mov.w	fp, #1
    21f4:	2700      	movs	r7, #0
    21f6:	b125      	cbz	r5, 2202 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    21f8:	2100      	movs	r1, #0
    21fa:	f240 50e5 	movw	r0, #1509	; 0x5e5
    21fe:	f3af 8000 	nop.w
    2202:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
    2206:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    220a:	f04f 0900 	mov.w	r9, #0
    220e:	b125      	cbz	r5, 221a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    2210:	2100      	movs	r1, #0
    2212:	f240 50ea 	movw	r0, #1514	; 0x5ea
    2216:	f3af 8000 	nop.w
    221a:	487a      	ldr	r0, [pc, #488]	; (2404 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    221c:	ea2b 080a 	bic.w	r8, fp, sl
    2220:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    2224:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    2228:	2240      	movs	r2, #64	; 0x40
    222a:	f006 f956 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    222e:	b125      	cbz	r5, 223a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    2230:	2100      	movs	r1, #0
    2232:	f240 505e 	movw	r0, #1374	; 0x55e
    2236:	f3af 8000 	nop.w
    223a:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    223e:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    2242:	4421      	add	r1, r4
    2244:	4420      	add	r0, r4
    2246:	8c0a      	ldrh	r2, [r1, #32]
    2248:	8402      	strh	r2, [r0, #32]
    224a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    224e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    2252:	b125      	cbz	r5, 225e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    2254:	2100      	movs	r1, #0
    2256:	f240 5062 	movw	r0, #1378	; 0x562
    225a:	f3af 8000 	nop.w
    225e:	b125      	cbz	r5, 226a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    2260:	2100      	movs	r1, #0
    2262:	f240 50ef 	movw	r0, #1519	; 0x5ef
    2266:	f3af 8000 	nop.w
    226a:	a808      	add	r0, sp, #32
    226c:	f000 feea 	bl	3044 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2270:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    2274:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    2278:	4643      	mov	r3, r8
    227a:	466a      	mov	r2, sp
    227c:	4631      	mov	r1, r6
    227e:	a80a      	add	r0, sp, #40	; 0x28
    2280:	f7ff f8e4 	bl	144c <CONFIG_FPROTECT_BLOCK_SIZE+0x44c>
    2284:	b125      	cbz	r5, 2290 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    2286:	2100      	movs	r1, #0
    2288:	f240 50f5 	movw	r0, #1525	; 0x5f5
    228c:	f3af 8000 	nop.w
    2290:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2294:	2820      	cmp	r0, #32
    2296:	d01a      	beq.n	22ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    2298:	68e0      	ldr	r0, [r4, #12]
    229a:	9900      	ldr	r1, [sp, #0]
    229c:	1a09      	subs	r1, r1, r0
    229e:	0209      	lsls	r1, r1, #8
    22a0:	17ca      	asrs	r2, r1, #31
    22a2:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    22a6:	1209      	asrs	r1, r1, #8
    22a8:	d511      	bpl.n	22ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    22aa:	9900      	ldr	r1, [sp, #0]
    22ac:	4281      	cmp	r1, r0
    22ae:	d902      	bls.n	22b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    22b0:	9902      	ldr	r1, [sp, #8]
    22b2:	1c49      	adds	r1, r1, #1
    22b4:	9102      	str	r1, [sp, #8]
    22b6:	e9dd 2100 	ldrd	r2, r1, [sp]
    22ba:	1a89      	subs	r1, r1, r2
    22bc:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    22c0:	4408      	add	r0, r1
    22c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    22c6:	e9cd 2000 	strd	r2, r0, [sp]
    22ca:	f04f 0901 	mov.w	r9, #1
    22ce:	b125      	cbz	r5, 22da <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    22d0:	2100      	movs	r1, #0
    22d2:	f240 50ff 	movw	r0, #1535	; 0x5ff
    22d6:	f3af 8000 	nop.w
    22da:	9900      	ldr	r1, [sp, #0]
    22dc:	980a      	ldr	r0, [sp, #40]	; 0x28
    22de:	9a01      	ldr	r2, [sp, #4]
    22e0:	1a09      	subs	r1, r1, r0
    22e2:	1a10      	subs	r0, r2, r0
    22e4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    22e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    22ec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    22f0:	bf98      	it	ls
    22f2:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    22f6:	d809      	bhi.n	230c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    22f8:	4643      	mov	r3, r8
    22fa:	4669      	mov	r1, sp
    22fc:	4842      	ldr	r0, [pc, #264]	; (2408 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    22fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2300:	f7fe fbc2 	bl	a88 <MPSL_IRQ_RADIO_Handler+0xb8>
    2304:	ea59 0000 	orrs.w	r0, r9, r0
    2308:	d129      	bne.n	235e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    230a:	e042      	b.n	2392 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    230c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    230e:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    2312:	9002      	str	r0, [sp, #8]
    2314:	aa09      	add	r2, sp, #36	; 0x24
    2316:	a907      	add	r1, sp, #28
    2318:	4650      	mov	r0, sl
    231a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    231e:	f000 fd21 	bl	2d64 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2322:	f001 fa2f 	bl	3784 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    2326:	f000 fd01 	bl	2d2c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    232a:	4681      	mov	r9, r0
    232c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2330:	2820      	cmp	r0, #32
    2332:	d03b      	beq.n	23ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    2334:	68e0      	ldr	r0, [r4, #12]
    2336:	1d40      	adds	r0, r0, #5
    2338:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    233c:	9900      	ldr	r1, [sp, #0]
    233e:	4281      	cmp	r1, r0
    2340:	d902      	bls.n	2348 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    2342:	9902      	ldr	r1, [sp, #8]
    2344:	1c49      	adds	r1, r1, #1
    2346:	9102      	str	r1, [sp, #8]
    2348:	e9dd 2100 	ldrd	r2, r1, [sp]
    234c:	1a89      	subs	r1, r1, r2
    234e:	9000      	str	r0, [sp, #0]
    2350:	4408      	add	r0, r1
    2352:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2356:	9001      	str	r0, [sp, #4]
    2358:	201f      	movs	r0, #31
    235a:	f88d 000c 	strb.w	r0, [sp, #12]
    235e:	9800      	ldr	r0, [sp, #0]
    2360:	f005 ff61 	bl	8226 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2364:	1c41      	adds	r1, r0, #1
    2366:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    236a:	f89d 200c 	ldrb.w	r2, [sp, #12]
    236e:	4410      	add	r0, r2
    2370:	4408      	add	r0, r1
    2372:	e9c6 0704 	strd	r0, r7, [r6, #16]
    2376:	b125      	cbz	r5, 2382 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    2378:	2100      	movs	r1, #0
    237a:	f240 601a 	movw	r0, #1562	; 0x61a
    237e:	f3af 8000 	nop.w
    2382:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    2386:	4a21      	ldr	r2, [pc, #132]	; (240c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    2388:	9b02      	ldr	r3, [sp, #8]
    238a:	fbe3 1002 	umlal	r1, r0, r3, r2
    238e:	e9c6 1004 	strd	r1, r0, [r6, #16]
    2392:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2396:	f88d 0014 	strb.w	r0, [sp, #20]
    239a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    239e:	2800      	cmp	r0, #0
    23a0:	f47f af29 	bne.w	21f6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    23a4:	b00d      	add	sp, #52	; 0x34
    23a6:	2001      	movs	r0, #1
    23a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23ac:	f108 0809 	add.w	r8, r8, #9
    23b0:	f1ba 0f00 	cmp.w	sl, #0
    23b4:	d016      	beq.n	23e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    23b6:	f001 fcc7 	bl	3d48 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    23ba:	b998      	cbnz	r0, 23e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    23bc:	f001 fbb0 	bl	3b20 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    23c0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    23c4:	bf08      	it	eq
    23c6:	200d      	moveq	r0, #13
    23c8:	d00b      	beq.n	23e2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    23ca:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    23ce:	3856      	subs	r0, #86	; 0x56
    23d0:	bf08      	it	eq
    23d2:	201c      	moveq	r0, #28
    23d4:	d005      	beq.n	23e2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    23d6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    23da:	389f      	subs	r0, #159	; 0x9f
    23dc:	bf14      	ite	ne
    23de:	4638      	movne	r0, r7
    23e0:	2032      	moveq	r0, #50	; 0x32
    23e2:	4480      	add	r8, r0
    23e4:	9807      	ldr	r0, [sp, #28]
    23e6:	4581      	cmp	r9, r0
    23e8:	bf84      	itt	hi
    23ea:	eba9 0000 	subhi.w	r0, r9, r0
    23ee:	4480      	addhi	r8, r0
    23f0:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    23f4:	e7a2      	b.n	233c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    23f6:	0000      	.short	0x0000
    23f8:	e000ed04 	.word	0xe000ed04
    23fc:	00000000 	.word	0x00000000
    2400:	20000abc 	.word	0x20000abc
    2404:	20000a3c 	.word	0x20000a3c
    2408:	0f424000 	.word	0x0f424000
    240c:	1e848000 	.word	0x1e848000

00002410 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2410:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2414:	4d92      	ldr	r5, [pc, #584]	; (2660 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    2416:	b08c      	sub	sp, #48	; 0x30
    2418:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    241c:	2000      	movs	r0, #0
    241e:	9008      	str	r0, [sp, #32]
    2420:	9006      	str	r0, [sp, #24]
    2422:	2001      	movs	r0, #1
    2424:	4c8f      	ldr	r4, [pc, #572]	; (2664 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    2426:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    242a:	f04f 0800 	mov.w	r8, #0
    242e:	4607      	mov	r7, r0
    2430:	9007      	str	r0, [sp, #28]
    2432:	b124      	cbz	r4, 243e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    2434:	2100      	movs	r1, #0
    2436:	f240 70e4 	movw	r0, #2020	; 0x7e4
    243a:	f3af 8000 	nop.w
    243e:	9807      	ldr	r0, [sp, #28]
    2440:	2800      	cmp	r0, #0
    2442:	d03c      	beq.n	24be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    2444:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    2448:	b124      	cbz	r4, 2454 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    244a:	2100      	movs	r1, #0
    244c:	f240 70e9 	movw	r0, #2025	; 0x7e9
    2450:	f3af 8000 	nop.w
    2454:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    2458:	2240      	movs	r2, #64	; 0x40
    245a:	ea27 060a 	bic.w	r6, r7, sl
    245e:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    2462:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    2466:	4683      	mov	fp, r0
    2468:	f006 f837 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    246c:	b124      	cbz	r4, 2478 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    246e:	2100      	movs	r1, #0
    2470:	f240 505e 	movw	r0, #1374	; 0x55e
    2474:	f3af 8000 	nop.w
    2478:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    247c:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    2480:	4428      	add	r0, r5
    2482:	4429      	add	r1, r5
    2484:	9000      	str	r0, [sp, #0]
    2486:	8c0a      	ldrh	r2, [r1, #32]
    2488:	8402      	strh	r2, [r0, #32]
    248a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    248e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    2492:	b124      	cbz	r4, 249e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    2494:	2100      	movs	r1, #0
    2496:	f240 5062 	movw	r0, #1378	; 0x562
    249a:	f3af 8000 	nop.w
    249e:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    24a2:	f88d 0008 	strb.w	r0, [sp, #8]
    24a6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    24aa:	b178      	cbz	r0, 24cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    24ac:	2c00      	cmp	r4, #0
    24ae:	bf1c      	itt	ne
    24b0:	2100      	movne	r1, #0
    24b2:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    24b6:	d0bc      	beq.n	2432 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    24b8:	f3af 8000 	nop.w
    24bc:	e7b9      	b.n	2432 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    24be:	486a      	ldr	r0, [pc, #424]	; (2668 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    24c0:	2800      	cmp	r0, #0
    24c2:	bf18      	it	ne
    24c4:	f3af 8000 	nopne.w
    24c8:	b662      	cpsie	i
    24ca:	e7bb      	b.n	2444 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    24cc:	b124      	cbz	r4, 24d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    24ce:	2100      	movs	r1, #0
    24d0:	f240 70f3 	movw	r0, #2035	; 0x7f3
    24d4:	f3af 8000 	nop.w
    24d8:	980c      	ldr	r0, [sp, #48]	; 0x30
    24da:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    24de:	2803      	cmp	r0, #3
    24e0:	d17e      	bne.n	25e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    24e2:	9a00      	ldr	r2, [sp, #0]
    24e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    24e6:	f892 0020 	ldrb.w	r0, [r2, #32]
    24ea:	4288      	cmp	r0, r1
    24ec:	bf14      	ite	ne
    24ee:	f04f 0a00 	movne.w	sl, #0
    24f2:	f04f 0a01 	moveq.w	sl, #1
    24f6:	f102 0c20 	add.w	ip, r2, #32
    24fa:	4683      	mov	fp, r0
    24fc:	2220      	movs	r2, #32
    24fe:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    2502:	e003      	b.n	250c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    2504:	4602      	mov	r2, r0
    2506:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    250a:	7840      	ldrb	r0, [r0, #1]
    250c:	4288      	cmp	r0, r1
    250e:	d002      	beq.n	2516 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    2510:	2820      	cmp	r0, #32
    2512:	d00a      	beq.n	252a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    2514:	e7f6      	b.n	2504 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    2516:	2820      	cmp	r0, #32
    2518:	d007      	beq.n	252a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    251a:	4583      	cmp	fp, r0
    251c:	d107      	bne.n	252e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    251e:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    2522:	7840      	ldrb	r0, [r0, #1]
    2524:	f88c 0000 	strb.w	r0, [ip]
    2528:	e007      	b.n	253a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    252a:	4640      	mov	r0, r8
    252c:	e00c      	b.n	2548 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    252e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2532:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2536:	7840      	ldrb	r0, [r0, #1]
    2538:	7048      	strb	r0, [r1, #1]
    253a:	b124      	cbz	r4, 2546 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    253c:	2100      	movs	r1, #0
    253e:	f240 40c9 	movw	r0, #1225	; 0x4c9
    2542:	f3af 8000 	nop.w
    2546:	4638      	mov	r0, r7
    2548:	46c3      	mov	fp, r8
    254a:	ea10 0f0a 	tst.w	r0, sl
    254e:	bf18      	it	ne
    2550:	46bb      	movne	fp, r7
    2552:	2800      	cmp	r0, #0
    2554:	d04e      	beq.n	25f4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    2556:	b124      	cbz	r4, 2562 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    2558:	2100      	movs	r1, #0
    255a:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    255e:	f3af 8000 	nop.w
    2562:	4632      	mov	r2, r6
    2564:	2001      	movs	r0, #1
    2566:	990c      	ldr	r1, [sp, #48]	; 0x30
    2568:	f7ff f984 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
    256c:	b124      	cbz	r4, 2578 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    256e:	2100      	movs	r1, #0
    2570:	f640 0001 	movw	r0, #2049	; 0x801
    2574:	f3af 8000 	nop.w
    2578:	483c      	ldr	r0, [pc, #240]	; (266c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    257a:	2800      	cmp	r0, #0
    257c:	bf18      	it	ne
    257e:	f3af 8000 	nopne.w
    2582:	f3ef 8010 	mrs	r0, PRIMASK
    2586:	b672      	cpsid	i
    2588:	9007      	str	r0, [sp, #28]
    258a:	b124      	cbz	r4, 2596 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    258c:	2100      	movs	r1, #0
    258e:	f640 0006 	movw	r0, #2054	; 0x806
    2592:	f3af 8000 	nop.w
    2596:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    259a:	f88d 0008 	strb.w	r0, [sp, #8]
    259e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    25a2:	b138      	cbz	r0, 25b4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    25a4:	2c00      	cmp	r4, #0
    25a6:	bf1c      	itt	ne
    25a8:	2100      	movne	r1, #0
    25aa:	f640 000a 	movwne	r0, #2058	; 0x80a
    25ae:	f43f af40 	beq.w	2432 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    25b2:	e781      	b.n	24b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    25b4:	f1bb 0f00 	cmp.w	fp, #0
    25b8:	d009      	beq.n	25ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    25ba:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    25be:	2820      	cmp	r0, #32
    25c0:	d105      	bne.n	25ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    25c2:	4631      	mov	r1, r6
    25c4:	2002      	movs	r0, #2
    25c6:	f7ff f987 	bl	18d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8d8>
    25ca:	9006      	str	r0, [sp, #24]
    25cc:	b1f8      	cbz	r0, 260e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    25ce:	b124      	cbz	r4, 25da <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    25d0:	2100      	movs	r1, #0
    25d2:	f640 001e 	movw	r0, #2078	; 0x81e
    25d6:	f3af 8000 	nop.w
    25da:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    25de:	e000      	b.n	25e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    25e0:	e008      	b.n	25f4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    25e2:	ea27 0000 	bic.w	r0, r7, r0
    25e6:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    25ea:	20ff      	movs	r0, #255	; 0xff
    25ec:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    25f0:	2001      	movs	r0, #1
    25f2:	9008      	str	r0, [sp, #32]
    25f4:	b124      	cbz	r4, 2600 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    25f6:	2100      	movs	r1, #0
    25f8:	f640 0027 	movw	r0, #2087	; 0x827
    25fc:	f3af 8000 	nop.w
    2600:	9806      	ldr	r0, [sp, #24]
    2602:	4e1b      	ldr	r6, [pc, #108]	; (2670 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    2604:	2802      	cmp	r0, #2
    2606:	d009      	beq.n	261c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    2608:	2801      	cmp	r0, #1
    260a:	d010      	beq.n	262e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    260c:	e014      	b.n	2638 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    260e:	b19c      	cbz	r4, 2638 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2610:	2100      	movs	r1, #0
    2612:	f640 0019 	movw	r0, #2073	; 0x819
    2616:	f3af 8000 	nop.w
    261a:	e7ec      	b.n	25f6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    261c:	f000 fd0c 	bl	3038 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2620:	68a9      	ldr	r1, [r5, #8]
    2622:	1a08      	subs	r0, r1, r0
    2624:	f005 fdff 	bl	8226 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2628:	6871      	ldr	r1, [r6, #4]
    262a:	b921      	cbnz	r1, 2636 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    262c:	e004      	b.n	2638 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    262e:	6871      	ldr	r1, [r6, #4]
    2630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2634:	b101      	cbz	r1, 2638 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2636:	4788      	blx	r1
    2638:	9807      	ldr	r0, [sp, #28]
    263a:	b148      	cbz	r0, 2650 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    263c:	b124      	cbz	r4, 2648 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    263e:	2100      	movs	r1, #0
    2640:	f640 003c 	movw	r0, #2108	; 0x83c
    2644:	f3af 8000 	nop.w
    2648:	9808      	ldr	r0, [sp, #32]
    264a:	b00d      	add	sp, #52	; 0x34
    264c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2650:	4805      	ldr	r0, [pc, #20]	; (2668 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    2652:	2800      	cmp	r0, #0
    2654:	bf18      	it	ne
    2656:	f3af 8000 	nopne.w
    265a:	b662      	cpsie	i
    265c:	e7ee      	b.n	263c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    265e:	0000      	.short	0x0000
    2660:	20000abc 	.word	0x20000abc
	...
    2670:	20000038 	.word	0x20000038

00002674 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2674:	b510      	push	{r4, lr}
    2676:	2820      	cmp	r0, #32
    2678:	d211      	bcs.n	269e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    267a:	490e      	ldr	r1, [pc, #56]	; (26b4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    267c:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2680:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2684:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2688:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    268c:	b13b      	cbz	r3, 269e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    268e:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2692:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    2696:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    269a:	2a01      	cmp	r2, #1
    269c:	d001      	beq.n	26a2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    269e:	2000      	movs	r0, #0
    26a0:	bd10      	pop	{r4, pc}
    26a2:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    26a6:	4601      	mov	r1, r0
    26a8:	2000      	movs	r0, #0
    26aa:	f7ff f8e3 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
    26ae:	2001      	movs	r0, #1
    26b0:	bd10      	pop	{r4, pc}
    26b2:	0000      	.short	0x0000
    26b4:	20000abc 	.word	0x20000abc

000026b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    26b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26bc:	4e86      	ldr	r6, [pc, #536]	; (28d8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    26be:	4680      	mov	r8, r0
    26c0:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    26c4:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    26c8:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    26cc:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    26d0:	2800      	cmp	r0, #0
    26d2:	d071      	beq.n	27b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    26d4:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    26d8:	4d80      	ldr	r5, [pc, #512]	; (28dc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    26da:	b125      	cbz	r5, 26e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    26dc:	2100      	movs	r1, #0
    26de:	f640 30ae 	movw	r0, #2990	; 0xbae
    26e2:	f3af 8000 	nop.w
    26e6:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    26ea:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    26ee:	2801      	cmp	r0, #1
    26f0:	d018      	beq.n	2724 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    26f2:	b2c0      	uxtb	r0, r0
    26f4:	2804      	cmp	r0, #4
    26f6:	bf1c      	itt	ne
    26f8:	2805      	cmpne	r0, #5
    26fa:	2806      	cmpne	r0, #6
    26fc:	d061      	beq.n	27c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    26fe:	b12d      	cbz	r5, 270c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2700:	f04f 0100 	mov.w	r1, #0
    2704:	f640 30ba 	movw	r0, #3002	; 0xbba
    2708:	f3af 8000 	nop.w
    270c:	f001 fcce 	bl	40ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2710:	b125      	cbz	r5, 271c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2712:	2100      	movs	r1, #0
    2714:	f640 30be 	movw	r0, #3006	; 0xbbe
    2718:	f3af 8000 	nop.w
    271c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2720:	2801      	cmp	r0, #1
    2722:	d1e6      	bne.n	26f2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2724:	2401      	movs	r4, #1
    2726:	b125      	cbz	r5, 2732 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2728:	2100      	movs	r1, #0
    272a:	f640 30c5 	movw	r0, #3013	; 0xbc5
    272e:	f3af 8000 	nop.w
    2732:	2c00      	cmp	r4, #0
    2734:	d04b      	beq.n	27ce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    2736:	2000      	movs	r0, #0
    2738:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    273c:	b125      	cbz	r5, 2748 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    273e:	2100      	movs	r1, #0
    2740:	f640 30ca 	movw	r0, #3018	; 0xbca
    2744:	f3af 8000 	nop.w
    2748:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    274c:	2001      	movs	r0, #1
    274e:	ea20 090b 	bic.w	r9, r0, fp
    2752:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2756:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    275a:	2240      	movs	r2, #64	; 0x40
    275c:	f005 febd 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2760:	b125      	cbz	r5, 276c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    2762:	2100      	movs	r1, #0
    2764:	f240 505e 	movw	r0, #1374	; 0x55e
    2768:	f3af 8000 	nop.w
    276c:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    2770:	eb00 0a06 	add.w	sl, r0, r6
    2774:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    2778:	4430      	add	r0, r6
    277a:	8c01      	ldrh	r1, [r0, #32]
    277c:	f8aa 1020 	strh.w	r1, [sl, #32]
    2780:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    2784:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    2788:	b125      	cbz	r5, 2794 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    278a:	2100      	movs	r1, #0
    278c:	f240 5062 	movw	r0, #1378	; 0x562
    2790:	f3af 8000 	nop.w
    2794:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2798:	f88d 0000 	strb.w	r0, [sp]
    279c:	f89d 0000 	ldrb.w	r0, [sp]
    27a0:	b1e0      	cbz	r0, 27dc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    27a2:	2d00      	cmp	r5, #0
    27a4:	bf1c      	itt	ne
    27a6:	2100      	movne	r1, #0
    27a8:	f44f 603d 	movne.w	r0, #3024	; 0xbd0
    27ac:	d0bb      	beq.n	2726 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    27ae:	bf00      	nop
    27b0:	f3af 8000 	nop.w
    27b4:	e7b7      	b.n	2726 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    27b6:	e7ff      	b.n	27b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    27b8:	f640 31a5 	movw	r1, #2981	; 0xba5
    27bc:	2070      	movs	r0, #112	; 0x70
    27be:	f001 fb3b 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27c2:	464a      	mov	r2, r9
    27c4:	4641      	mov	r1, r8
    27c6:	2001      	movs	r0, #1
    27c8:	f7ff f854 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
    27cc:	e7a0      	b.n	2710 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    27ce:	4844      	ldr	r0, [pc, #272]	; (28e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    27d0:	2800      	cmp	r0, #0
    27d2:	bf18      	it	ne
    27d4:	f3af 8000 	nopne.w
    27d8:	b662      	cpsie	i
    27da:	e7ac      	b.n	2736 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    27dc:	b125      	cbz	r5, 27e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    27de:	2100      	movs	r1, #0
    27e0:	f640 30d4 	movw	r0, #3028	; 0xbd4
    27e4:	f3af 8000 	nop.w
    27e8:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    27ec:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    27f0:	4640      	mov	r0, r8
    27f2:	461c      	mov	r4, r3
    27f4:	f04f 0b20 	mov.w	fp, #32
    27f8:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    27fc:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2800:	e004      	b.n	280c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    2802:	46a3      	mov	fp, r4
    2804:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2808:	f89c 4001 	ldrb.w	r4, [ip, #1]
    280c:	4284      	cmp	r4, r0
    280e:	d002      	beq.n	2816 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    2810:	2c20      	cmp	r4, #32
    2812:	d02b      	beq.n	286c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    2814:	e7f5      	b.n	2802 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    2816:	2c20      	cmp	r4, #32
    2818:	d028      	beq.n	286c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    281a:	42a3      	cmp	r3, r4
    281c:	d104      	bne.n	2828 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    281e:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    2822:	7840      	ldrb	r0, [r0, #1]
    2824:	7008      	strb	r0, [r1, #0]
    2826:	e005      	b.n	2834 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    2828:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    282c:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2830:	7840      	ldrb	r0, [r0, #1]
    2832:	7048      	strb	r0, [r1, #1]
    2834:	f1ba 0f00 	cmp.w	sl, #0
    2838:	d011      	beq.n	285e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    283a:	b125      	cbz	r5, 2846 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    283c:	2100      	movs	r1, #0
    283e:	f240 40c1 	movw	r0, #1217	; 0x4c1
    2842:	f3af 8000 	nop.w
    2846:	f89a 0000 	ldrb.w	r0, [sl]
    284a:	42a0      	cmp	r0, r4
    284c:	d107      	bne.n	285e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    284e:	b125      	cbz	r5, 285a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    2850:	2100      	movs	r1, #0
    2852:	f240 40c4 	movw	r0, #1220	; 0x4c4
    2856:	f3af 8000 	nop.w
    285a:	f88a b000 	strb.w	fp, [sl]
    285e:	b15d      	cbz	r5, 2878 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2860:	2100      	movs	r1, #0
    2862:	f240 40c9 	movw	r0, #1225	; 0x4c9
    2866:	f3af 8000 	nop.w
    286a:	e000      	b.n	286e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    286c:	b125      	cbz	r5, 2878 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    286e:	2100      	movs	r1, #0
    2870:	f640 30d8 	movw	r0, #3032	; 0xbd8
    2874:	f3af 8000 	nop.w
    2878:	481a      	ldr	r0, [pc, #104]	; (28e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    287a:	2800      	cmp	r0, #0
    287c:	bf18      	it	ne
    287e:	f3af 8000 	nopne.w
    2882:	f3ef 8410 	mrs	r4, PRIMASK
    2886:	b672      	cpsid	i
    2888:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    288c:	f88d 0000 	strb.w	r0, [sp]
    2890:	f89d 0000 	ldrb.w	r0, [sp]
    2894:	b138      	cbz	r0, 28a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    2896:	2d00      	cmp	r5, #0
    2898:	bf1c      	itt	ne
    289a:	2100      	movne	r1, #0
    289c:	f640 30de 	movwne	r0, #3038	; 0xbde
    28a0:	f43f af41 	beq.w	2726 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    28a4:	e784      	b.n	27b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    28a6:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    28aa:	20ff      	movs	r0, #255	; 0xff
    28ac:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    28b0:	b154      	cbz	r4, 28c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    28b2:	2d00      	cmp	r5, #0
    28b4:	bf08      	it	eq
    28b6:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28ba:	2100      	movs	r1, #0
    28bc:	f640 30eb 	movw	r0, #3051	; 0xbeb
    28c0:	f3af 8000 	nop.w
    28c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28c8:	4805      	ldr	r0, [pc, #20]	; (28e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    28ca:	2800      	cmp	r0, #0
    28cc:	bf18      	it	ne
    28ce:	f3af 8000 	nopne.w
    28d2:	b662      	cpsie	i
    28d4:	e7ed      	b.n	28b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    28d6:	0000      	.short	0x0000
    28d8:	20000abc 	.word	0x20000abc
	...

000028e8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    28e8:	b570      	push	{r4, r5, r6, lr}
    28ea:	460d      	mov	r5, r1
    28ec:	4606      	mov	r6, r0
    28ee:	f001 fa19 	bl	3d24 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    28f2:	480f      	ldr	r0, [pc, #60]	; (2930 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    28f4:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    28f8:	2400      	movs	r4, #0
    28fa:	3880      	subs	r0, #128	; 0x80
    28fc:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2900:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2904:	b129      	cbz	r1, 2912 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2906:	1c61      	adds	r1, r4, #1
    2908:	b2cc      	uxtb	r4, r1
    290a:	2c20      	cmp	r4, #32
    290c:	d3f8      	bcc.n	2900 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    290e:	2020      	movs	r0, #32
    2910:	bd70      	pop	{r4, r5, r6, pc}
    2912:	4808      	ldr	r0, [pc, #32]	; (2934 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2914:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    2918:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    291c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2920:	4621      	mov	r1, r4
    2922:	6045      	str	r5, [r0, #4]
    2924:	2001      	movs	r0, #1
    2926:	f7fe ffa5 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
    292a:	4620      	mov	r0, r4
    292c:	bd70      	pop	{r4, r5, r6, pc}
    292e:	0000      	.short	0x0000
    2930:	20000abc 	.word	0x20000abc
    2934:	200006bc 	.word	0x200006bc

00002938 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    293c:	b083      	sub	sp, #12
    293e:	f000 fb7b 	bl	3038 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2942:	4605      	mov	r5, r0
    2944:	f000 fe4a 	bl	35dc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2948:	4c84      	ldr	r4, [pc, #528]	; (2b5c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    294a:	6860      	ldr	r0, [r4, #4]
    294c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2950:	bf1c      	itt	ne
    2952:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    2956:	6060      	strne	r0, [r4, #4]
    2958:	7fa0      	ldrb	r0, [r4, #30]
    295a:	f8df 9204 	ldr.w	r9, [pc, #516]	; 2b60 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    295e:	b990      	cbnz	r0, 2986 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    2960:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    2964:	1a40      	subs	r0, r0, r1
    2966:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    296a:	f44f 710c 	mov.w	r1, #560	; 0x230
    296e:	f005 fc85 	bl	827c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2972:	68e1      	ldr	r1, [r4, #12]
    2974:	4408      	add	r0, r1
    2976:	1a28      	subs	r0, r5, r0
    2978:	0200      	lsls	r0, r0, #8
    297a:	17c1      	asrs	r1, r0, #31
    297c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2980:	1200      	asrs	r0, r0, #8
    2982:	0fc0      	lsrs	r0, r0, #31
    2984:	d012      	beq.n	29ac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    2986:	7e60      	ldrb	r0, [r4, #25]
    2988:	b320      	cbz	r0, 29d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    298a:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    298e:	f88d 0000 	strb.w	r0, [sp]
    2992:	f89d 0000 	ldrb.w	r0, [sp]
    2996:	b1e8      	cbz	r0, 29d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    2998:	f000 fc7c 	bl	3294 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    299c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    29a0:	b1f0      	cbz	r0, 29e0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    29a2:	f240 31f5 	movw	r1, #1013	; 0x3f5
    29a6:	2070      	movs	r0, #112	; 0x70
    29a8:	f001 fa46 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29ac:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    29b0:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    29b4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    29b8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    29bc:	6840      	ldr	r0, [r0, #4]
    29be:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    29c2:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    29c6:	2108      	movs	r1, #8
    29c8:	4790      	blx	r2
    29ca:	f240 31dd 	movw	r1, #989	; 0x3dd
    29ce:	2070      	movs	r0, #112	; 0x70
    29d0:	f001 fa32 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29d4:	1ce8      	adds	r0, r5, #3
    29d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    29da:	f000 fb53 	bl	3084 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    29de:	e7dd      	b.n	299c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    29e0:	2001      	movs	r0, #1
    29e2:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    29e6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    29ea:	2820      	cmp	r0, #32
    29ec:	d021      	beq.n	2a32 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    29ee:	f894 802d 	ldrb.w	r8, [r4, #45]	; 0x2d
    29f2:	2020      	movs	r0, #32
    29f4:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    29f8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    29fc:	2000      	movs	r0, #0
    29fe:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    2a02:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2a06:	6020      	str	r0, [r4, #0]
    2a08:	f000 fec2 	bl	3790 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    2a0c:	7720      	strb	r0, [r4, #28]
    2a0e:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    2a12:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2a16:	1907      	adds	r7, r0, r4
    2a18:	f897 0020 	ldrb.w	r0, [r7, #32]
    2a1c:	2820      	cmp	r0, #32
    2a1e:	d058      	beq.n	2ad2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2a20:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a24:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    2a28:	f899 001a 	ldrb.w	r0, [r9, #26]
    2a2c:	2801      	cmp	r0, #1
    2a2e:	d005      	beq.n	2a3c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    2a30:	e04f      	b.n	2ad2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2a32:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    2a36:	2070      	movs	r0, #112	; 0x70
    2a38:	f001 f9fe 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a3c:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    2a40:	aa01      	add	r2, sp, #4
    2a42:	4669      	mov	r1, sp
    2a44:	4658      	mov	r0, fp
    2a46:	f000 f98d 	bl	2d64 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2a4a:	f000 fe9b 	bl	3784 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    2a4e:	f000 f96d 	bl	2d2c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2a52:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2a56:	2820      	cmp	r0, #32
    2a58:	d004      	beq.n	2a64 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    2a5a:	68e0      	ldr	r0, [r4, #12]
    2a5c:	1d40      	adds	r0, r0, #5
    2a5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a62:	e01d      	b.n	2aa0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    2a64:	f105 0a09 	add.w	sl, r5, #9
    2a68:	f1bb 0f00 	cmp.w	fp, #0
    2a6c:	d016      	beq.n	2a9c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    2a6e:	f001 f96b 	bl	3d48 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2a72:	b998      	cbnz	r0, 2a9c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    2a74:	f001 f854 	bl	3b20 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2a78:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2a7c:	bf08      	it	eq
    2a7e:	200d      	moveq	r0, #13
    2a80:	d00b      	beq.n	2a9a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    2a82:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2a86:	3856      	subs	r0, #86	; 0x56
    2a88:	bf08      	it	eq
    2a8a:	201c      	moveq	r0, #28
    2a8c:	d005      	beq.n	2a9a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    2a8e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2a92:	389f      	subs	r0, #159	; 0x9f
    2a94:	bf14      	ite	ne
    2a96:	2000      	movne	r0, #0
    2a98:	2032      	moveq	r0, #50	; 0x32
    2a9a:	4482      	add	sl, r0
    2a9c:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    2aa0:	f8d9 2008 	ldr.w	r2, [r9, #8]
    2aa4:	1a81      	subs	r1, r0, r2
    2aa6:	0209      	lsls	r1, r1, #8
    2aa8:	17cb      	asrs	r3, r1, #31
    2aaa:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    2aae:	1209      	asrs	r1, r1, #8
    2ab0:	2900      	cmp	r1, #0
    2ab2:	dc0e      	bgt.n	2ad2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2ab4:	f109 0308 	add.w	r3, r9, #8
    2ab8:	4282      	cmp	r2, r0
    2aba:	d202      	bcs.n	2ac2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    2abc:	6899      	ldr	r1, [r3, #8]
    2abe:	1e49      	subs	r1, r1, #1
    2ac0:	6099      	str	r1, [r3, #8]
    2ac2:	e9d3 2100 	ldrd	r2, r1, [r3]
    2ac6:	1a89      	subs	r1, r1, r2
    2ac8:	6018      	str	r0, [r3, #0]
    2aca:	4408      	add	r0, r1
    2acc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ad0:	6058      	str	r0, [r3, #4]
    2ad2:	4631      	mov	r1, r6
    2ad4:	2001      	movs	r0, #1
    2ad6:	f7fe feff 	bl	18d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8d8>
    2ada:	ea5f 0900 	movs.w	r9, r0
    2ade:	d0f8      	beq.n	2ad2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2ae0:	4820      	ldr	r0, [pc, #128]	; (2b64 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    2ae2:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2ae6:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2aea:	2802      	cmp	r0, #2
    2aec:	d104      	bne.n	2af8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    2aee:	4632      	mov	r2, r6
    2af0:	4641      	mov	r1, r8
    2af2:	2006      	movs	r0, #6
    2af4:	f7fe febe 	bl	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
    2af8:	20ff      	movs	r0, #255	; 0xff
    2afa:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2afe:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    2b02:	4e19      	ldr	r6, [pc, #100]	; (2b68 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    2b04:	2820      	cmp	r0, #32
    2b06:	bf1c      	itt	ne
    2b08:	7870      	ldrbne	r0, [r6, #1]
    2b0a:	f001 fa69 	blne	3fe0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2b0e:	7f20      	ldrb	r0, [r4, #28]
    2b10:	b120      	cbz	r0, 2b1c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    2b12:	f000 fe19 	bl	3748 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2b16:	2000      	movs	r0, #0
    2b18:	7720      	strb	r0, [r4, #28]
    2b1a:	7760      	strb	r0, [r4, #29]
    2b1c:	f1b9 0f02 	cmp.w	r9, #2
    2b20:	d011      	beq.n	2b46 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    2b22:	f1b9 0f01 	cmp.w	r9, #1
    2b26:	bf1c      	itt	ne
    2b28:	b003      	addne	sp, #12
    2b2a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2b32:	6871      	ldr	r1, [r6, #4]
    2b34:	2900      	cmp	r1, #0
    2b36:	bf04      	itt	eq
    2b38:	b003      	addeq	sp, #12
    2b3a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b3e:	b003      	add	sp, #12
    2b40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b44:	4708      	bx	r1
    2b46:	68a0      	ldr	r0, [r4, #8]
    2b48:	1b40      	subs	r0, r0, r5
    2b4a:	f005 fb6c 	bl	8226 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2b4e:	6871      	ldr	r1, [r6, #4]
    2b50:	2900      	cmp	r1, #0
    2b52:	d1f4      	bne.n	2b3e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    2b54:	b003      	add	sp, #12
    2b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b5a:	0000      	.short	0x0000
    2b5c:	20000abc 	.word	0x20000abc
    2b60:	200006bc 	.word	0x200006bc
    2b64:	20000a3c 	.word	0x20000a3c
    2b68:	20000038 	.word	0x20000038

00002b6c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2b6c:	b570      	push	{r4, r5, r6, lr}
    2b6e:	4c42      	ldr	r4, [pc, #264]	; (2c78 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    2b70:	4605      	mov	r5, r0
    2b72:	b082      	sub	sp, #8
    2b74:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2b78:	2820      	cmp	r0, #32
    2b7a:	d008      	beq.n	2b8e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    2b7c:	6860      	ldr	r0, [r4, #4]
    2b7e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2b82:	d009      	beq.n	2b98 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    2b84:	f640 21d9 	movw	r1, #2777	; 0xad9
    2b88:	2070      	movs	r0, #112	; 0x70
    2b8a:	f001 f955 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b8e:	f640 21d8 	movw	r1, #2776	; 0xad8
    2b92:	2070      	movs	r0, #112	; 0x70
    2b94:	f001 f950 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b98:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2b9c:	4937      	ldr	r1, [pc, #220]	; (2c7c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    2b9e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2ba2:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    2ba6:	68b0      	ldr	r0, [r6, #8]
    2ba8:	f005 fb3d 	bl	8226 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2bac:	4602      	mov	r2, r0
    2bae:	8af0      	ldrh	r0, [r6, #22]
    2bb0:	7d31      	ldrb	r1, [r6, #20]
    2bb2:	4b33      	ldr	r3, [pc, #204]	; (2c80 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    2bb4:	4408      	add	r0, r1
    2bb6:	1c40      	adds	r0, r0, #1
    2bb8:	1811      	adds	r1, r2, r0
    2bba:	429a      	cmp	r2, r3
    2bbc:	d817      	bhi.n	2bee <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    2bbe:	4a31      	ldr	r2, [pc, #196]	; (2c84 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    2bc0:	4290      	cmp	r0, r2
    2bc2:	dc1b      	bgt.n	2bfc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    2bc4:	f1c2 0c00 	rsb	ip, r2, #0
    2bc8:	4560      	cmp	r0, ip
    2bca:	db1e      	blt.n	2c0a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    2bcc:	0056      	lsls	r6, r2, #1
    2bce:	428e      	cmp	r6, r1
    2bd0:	bfdc      	itt	le
    2bd2:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2bd6:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2bda:	dd05      	ble.n	2be8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2bdc:	2900      	cmp	r1, #0
    2bde:	bfbc      	itt	lt
    2be0:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2be4:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2be8:	1948      	adds	r0, r1, r5
    2bea:	4299      	cmp	r1, r3
    2bec:	d904      	bls.n	2bf8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    2bee:	f240 519e 	movw	r1, #1438	; 0x59e
    2bf2:	2070      	movs	r0, #112	; 0x70
    2bf4:	f001 f920 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bf8:	4295      	cmp	r5, r2
    2bfa:	dd04      	ble.n	2c06 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    2bfc:	f240 519f 	movw	r1, #1439	; 0x59f
    2c00:	2070      	movs	r0, #112	; 0x70
    2c02:	f001 f919 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c06:	4565      	cmp	r5, ip
    2c08:	da04      	bge.n	2c14 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    2c0a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    2c0e:	2070      	movs	r0, #112	; 0x70
    2c10:	f001 f912 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c14:	4286      	cmp	r6, r0
    2c16:	bfdc      	itt	le
    2c18:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2c1c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2c20:	dd05      	ble.n	2c2e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    2c22:	2800      	cmp	r0, #0
    2c24:	bfbc      	itt	lt
    2c26:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2c2a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2c2e:	aa01      	add	r2, sp, #4
    2c30:	4669      	mov	r1, sp
    2c32:	f000 f897 	bl	2d64 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2c36:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2c3a:	280f      	cmp	r0, #15
    2c3c:	bf8c      	ite	hi
    2c3e:	2001      	movhi	r0, #1
    2c40:	2000      	movls	r0, #0
    2c42:	9900      	ldr	r1, [sp, #0]
    2c44:	4408      	add	r0, r1
    2c46:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2c4a:	6061      	str	r1, [r4, #4]
    2c4c:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2c50:	f88d 0000 	strb.w	r0, [sp]
    2c54:	f89d 0000 	ldrb.w	r0, [sp]
    2c58:	2800      	cmp	r0, #0
    2c5a:	bf04      	itt	eq
    2c5c:	b002      	addeq	sp, #8
    2c5e:	bd70      	popeq	{r4, r5, r6, pc}
    2c60:	2005      	movs	r0, #5
    2c62:	f000 fb95 	bl	3390 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2c66:	2800      	cmp	r0, #0
    2c68:	bf1c      	itt	ne
    2c6a:	b002      	addne	sp, #8
    2c6c:	bd70      	popne	{r4, r5, r6, pc}
    2c6e:	f44f 612e 	mov.w	r1, #2784	; 0xae0
    2c72:	2070      	movs	r0, #112	; 0x70
    2c74:	f001 f8e0 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c78:	20000abc 	.word	0x20000abc
    2c7c:	200006bc 	.word	0x200006bc
    2c80:	1e847fff 	.word	0x1e847fff
    2c84:	0f424000 	.word	0x0f424000

00002c88 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2c88:	b570      	push	{r4, r5, r6, lr}
    2c8a:	4c1c      	ldr	r4, [pc, #112]	; (2cfc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    2c8c:	2120      	movs	r1, #32
    2c8e:	f884 1020 	strb.w	r1, [r4, #32]
    2c92:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2c96:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2c9a:	2000      	movs	r0, #0
    2c9c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2ca0:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    2ca4:	1e42      	subs	r2, r0, #1
    2ca6:	e9c4 0200 	strd	r0, r2, [r4]
    2caa:	77a0      	strb	r0, [r4, #30]
    2cac:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    2cb0:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2cb4:	7720      	strb	r0, [r4, #28]
    2cb6:	7760      	strb	r0, [r4, #29]
    2cb8:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    2cbc:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    2cc0:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2cc4:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2cc8:	2210      	movs	r2, #16
    2cca:	7088      	strb	r0, [r1, #2]
    2ccc:	f801 0f04 	strb.w	r0, [r1, #4]!
    2cd0:	1e52      	subs	r2, r2, #1
    2cd2:	d1fa      	bne.n	2cca <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    2cd4:	f000 fd66 	bl	37a4 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    2cd8:	4d09      	ldr	r5, [pc, #36]	; (2d00 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    2cda:	2601      	movs	r6, #1
    2cdc:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2ce0:	20ff      	movs	r0, #255	; 0xff
    2ce2:	7028      	strb	r0, [r5, #0]
    2ce4:	4807      	ldr	r0, [pc, #28]	; (2d04 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2ce6:	f001 f95d 	bl	3fa4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2cea:	7068      	strb	r0, [r5, #1]
    2cec:	f001 f9c8 	bl	4080 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2cf0:	60a8      	str	r0, [r5, #8]
    2cf2:	f000 fce1 	bl	36b8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2cf6:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    2cfa:	bd70      	pop	{r4, r5, r6, pc}
    2cfc:	20000abc 	.word	0x20000abc
    2d00:	20000038 	.word	0x20000038
    2d04:	0000179d 	.word	0x0000179d

00002d08 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    2d08:	b500      	push	{lr}
    2d0a:	b083      	sub	sp, #12
    2d0c:	4668      	mov	r0, sp
    2d0e:	f000 f999 	bl	3044 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2d12:	9800      	ldr	r0, [sp, #0]
    2d14:	f005 fa87 	bl	8226 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2d18:	9a01      	ldr	r2, [sp, #4]
    2d1a:	4b03      	ldr	r3, [pc, #12]	; (2d28 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    2d1c:	2100      	movs	r1, #0
    2d1e:	fbe2 0103 	umlal	r0, r1, r2, r3
    2d22:	b003      	add	sp, #12
    2d24:	bd00      	pop	{pc}
    2d26:	0000      	.short	0x0000
    2d28:	1e848000 	.word	0x1e848000

00002d2c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2d2c:	0b41      	lsrs	r1, r0, #13
    2d2e:	f248 6237 	movw	r2, #34359	; 0x8637
    2d32:	4351      	muls	r1, r2
    2d34:	0c0a      	lsrs	r2, r1, #16
    2d36:	4b09      	ldr	r3, [pc, #36]	; (2d5c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2d38:	0251      	lsls	r1, r2, #9
    2d3a:	fb02 0203 	mla	r2, r2, r3, r0
    2d3e:	4808      	ldr	r0, [pc, #32]	; (2d60 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2d40:	4350      	muls	r0, r2
    2d42:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    2d46:	306e      	adds	r0, #110	; 0x6e
    2d48:	0d40      	lsrs	r0, r0, #21
    2d4a:	425b      	negs	r3, r3
    2d4c:	fb10 f303 	smulbb	r3, r0, r3
    2d50:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2d54:	bf88      	it	hi
    2d56:	1c49      	addhi	r1, r1, #1
    2d58:	4408      	add	r0, r1
    2d5a:	4770      	bx	lr
    2d5c:	ffffc2f7 	.word	0xffffc2f7
    2d60:	00010c6f 	.word	0x00010c6f

00002d64 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2d64:	0b43      	lsrs	r3, r0, #13
    2d66:	f248 6c37 	movw	ip, #34359	; 0x8637
    2d6a:	fb03 f30c 	mul.w	r3, r3, ip
    2d6e:	b430      	push	{r4, r5}
    2d70:	0c1b      	lsrs	r3, r3, #16
    2d72:	f8df c044 	ldr.w	ip, [pc, #68]	; 2db8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    2d76:	025c      	lsls	r4, r3, #9
    2d78:	fb03 030c 	mla	r3, r3, ip, r0
    2d7c:	480f      	ldr	r0, [pc, #60]	; (2dbc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2d7e:	4358      	muls	r0, r3
    2d80:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2d84:	eb04 000c 	add.w	r0, r4, ip
    2d88:	f643 5409 	movw	r4, #15625	; 0x3d09
    2d8c:	fb1c f404 	smulbb	r4, ip, r4
    2d90:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2d94:	f643 5508 	movw	r5, #15624	; 0x3d08
    2d98:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2d9c:	442c      	add	r4, r5
    2d9e:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2da2:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2da6:	bf84      	itt	hi
    2da8:	f04f 0c00 	movhi.w	ip, #0
    2dac:	1c40      	addhi	r0, r0, #1
    2dae:	6008      	str	r0, [r1, #0]
    2db0:	f882 c000 	strb.w	ip, [r2]
    2db4:	bc30      	pop	{r4, r5}
    2db6:	4770      	bx	lr
    2db8:	ffffc2f7 	.word	0xffffc2f7
    2dbc:	00010c6f 	.word	0x00010c6f

00002dc0 <MPSL_IRQ_RTC0_Handler>:
    2dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2dc4:	4d3b      	ldr	r5, [pc, #236]	; (2eb4 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2dc6:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2dca:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 2eb8 <MPSL_IRQ_RTC0_Handler+0xf8>
    2dce:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2dd2:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2dd6:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2dda:	f04f 0400 	mov.w	r4, #0
    2dde:	d019      	beq.n	2e14 <MPSL_IRQ_RTC0_Handler+0x54>
    2de0:	4836      	ldr	r0, [pc, #216]	; (2ebc <MPSL_IRQ_RTC0_Handler+0xfc>)
    2de2:	6800      	ldr	r0, [r0, #0]
    2de4:	b1b0      	cbz	r0, 2e14 <MPSL_IRQ_RTC0_Handler+0x54>
    2de6:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    2dea:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2dee:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    2df2:	f8d8 1000 	ldr.w	r1, [r8]
    2df6:	1a40      	subs	r0, r0, r1
    2df8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2dfc:	2802      	cmp	r0, #2
    2dfe:	d302      	bcc.n	2e06 <MPSL_IRQ_RTC0_Handler+0x46>
    2e00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2e04:	d906      	bls.n	2e14 <MPSL_IRQ_RTC0_Handler+0x54>
    2e06:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2e0a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2e0e:	2004      	movs	r0, #4
    2e10:	f7fe fefe 	bl	1c10 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2e14:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2e18:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2e1c:	d01a      	beq.n	2e54 <MPSL_IRQ_RTC0_Handler+0x94>
    2e1e:	4828      	ldr	r0, [pc, #160]	; (2ec0 <MPSL_IRQ_RTC0_Handler+0x100>)
    2e20:	6800      	ldr	r0, [r0, #0]
    2e22:	b1b8      	cbz	r0, 2e54 <MPSL_IRQ_RTC0_Handler+0x94>
    2e24:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    2e28:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2e2c:	4825      	ldr	r0, [pc, #148]	; (2ec4 <MPSL_IRQ_RTC0_Handler+0x104>)
    2e2e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2e32:	f8d8 1000 	ldr.w	r1, [r8]
    2e36:	1a40      	subs	r0, r0, r1
    2e38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2e3c:	2802      	cmp	r0, #2
    2e3e:	d302      	bcc.n	2e46 <MPSL_IRQ_RTC0_Handler+0x86>
    2e40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2e44:	d906      	bls.n	2e54 <MPSL_IRQ_RTC0_Handler+0x94>
    2e46:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2e4a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2e4e:	2005      	movs	r0, #5
    2e50:	f7fe fede 	bl	1c10 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2e54:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2e58:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2e5c:	d01a      	beq.n	2e94 <MPSL_IRQ_RTC0_Handler+0xd4>
    2e5e:	481a      	ldr	r0, [pc, #104]	; (2ec8 <MPSL_IRQ_RTC0_Handler+0x108>)
    2e60:	6800      	ldr	r0, [r0, #0]
    2e62:	b1b8      	cbz	r0, 2e94 <MPSL_IRQ_RTC0_Handler+0xd4>
    2e64:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    2e68:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2e6c:	4817      	ldr	r0, [pc, #92]	; (2ecc <MPSL_IRQ_RTC0_Handler+0x10c>)
    2e6e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2e72:	f8d8 1000 	ldr.w	r1, [r8]
    2e76:	1a40      	subs	r0, r0, r1
    2e78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2e7c:	2802      	cmp	r0, #2
    2e7e:	d302      	bcc.n	2e86 <MPSL_IRQ_RTC0_Handler+0xc6>
    2e80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2e84:	d906      	bls.n	2e94 <MPSL_IRQ_RTC0_Handler+0xd4>
    2e86:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2e8a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2e8e:	2006      	movs	r0, #6
    2e90:	f7fe febe 	bl	1c10 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2e94:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    2e98:	2800      	cmp	r0, #0
    2e9a:	bf08      	it	eq
    2e9c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ea0:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    2ea4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2ea8:	4809      	ldr	r0, [pc, #36]	; (2ed0 <MPSL_IRQ_RTC0_Handler+0x110>)
    2eaa:	68c1      	ldr	r1, [r0, #12]
    2eac:	1c49      	adds	r1, r1, #1
    2eae:	60c1      	str	r1, [r0, #12]
    2eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2eb4:	4000b000 	.word	0x4000b000
    2eb8:	4000b504 	.word	0x4000b504
    2ebc:	4000b140 	.word	0x4000b140
    2ec0:	4000b144 	.word	0x4000b144
    2ec4:	4000b004 	.word	0x4000b004
    2ec8:	4000b148 	.word	0x4000b148
    2ecc:	4000b008 	.word	0x4000b008
    2ed0:	20000044 	.word	0x20000044

00002ed4 <MPSL_IRQ_TIMER0_Handler>:
    2ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ed8:	4d38      	ldr	r5, [pc, #224]	; (2fbc <MPSL_IRQ_TIMER0_Handler+0xe8>)
    2eda:	7828      	ldrb	r0, [r5, #0]
    2edc:	2804      	cmp	r0, #4
    2ede:	d068      	beq.n	2fb2 <MPSL_IRQ_TIMER0_Handler+0xde>
    2ee0:	1ca8      	adds	r0, r5, #2
    2ee2:	2201      	movs	r2, #1
    2ee4:	7801      	ldrb	r1, [r0, #0]
    2ee6:	b159      	cbz	r1, 2f00 <MPSL_IRQ_TIMER0_Handler+0x2c>
    2ee8:	2901      	cmp	r1, #1
    2eea:	bf08      	it	eq
    2eec:	706a      	strbeq	r2, [r5, #1]
    2eee:	d002      	beq.n	2ef6 <MPSL_IRQ_TIMER0_Handler+0x22>
    2ef0:	7869      	ldrb	r1, [r5, #1]
    2ef2:	2900      	cmp	r1, #0
    2ef4:	d058      	beq.n	2fa8 <MPSL_IRQ_TIMER0_Handler+0xd4>
    2ef6:	2102      	movs	r1, #2
    2ef8:	7001      	strb	r1, [r0, #0]
    2efa:	7840      	ldrb	r0, [r0, #1]
    2efc:	f000 fafe 	bl	34fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2f00:	4c2f      	ldr	r4, [pc, #188]	; (2fc0 <MPSL_IRQ_TIMER0_Handler+0xec>)
    2f02:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2f06:	f04f 0800 	mov.w	r8, #0
    2f0a:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    2f0e:	f44f 7780 	mov.w	r7, #256	; 0x100
    2f12:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    2f16:	d00a      	beq.n	2f2e <MPSL_IRQ_TIMER0_Handler+0x5a>
    2f18:	482a      	ldr	r0, [pc, #168]	; (2fc4 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2f1a:	6800      	ldr	r0, [r0, #0]
    2f1c:	b138      	cbz	r0, 2f2e <MPSL_IRQ_TIMER0_Handler+0x5a>
    2f1e:	2003      	movs	r0, #3
    2f20:	f000 faec 	bl	34fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2f24:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2f28:	2003      	movs	r0, #3
    2f2a:	f7fe fe71 	bl	1c10 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f2e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2f32:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2f36:	d00a      	beq.n	2f4e <MPSL_IRQ_TIMER0_Handler+0x7a>
    2f38:	4823      	ldr	r0, [pc, #140]	; (2fc8 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    2f3a:	6800      	ldr	r0, [r0, #0]
    2f3c:	b138      	cbz	r0, 2f4e <MPSL_IRQ_TIMER0_Handler+0x7a>
    2f3e:	2002      	movs	r0, #2
    2f40:	f000 fadc 	bl	34fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2f44:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2f48:	2002      	movs	r0, #2
    2f4a:	f7fe fe61 	bl	1c10 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f4e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2f52:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2f56:	d00a      	beq.n	2f6e <MPSL_IRQ_TIMER0_Handler+0x9a>
    2f58:	481c      	ldr	r0, [pc, #112]	; (2fcc <MPSL_IRQ_TIMER0_Handler+0xf8>)
    2f5a:	6800      	ldr	r0, [r0, #0]
    2f5c:	b138      	cbz	r0, 2f6e <MPSL_IRQ_TIMER0_Handler+0x9a>
    2f5e:	2001      	movs	r0, #1
    2f60:	f000 facc 	bl	34fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2f64:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2f68:	2001      	movs	r0, #1
    2f6a:	f7fe fe51 	bl	1c10 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f6e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2f72:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2f76:	bf08      	it	eq
    2f78:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f7c:	4814      	ldr	r0, [pc, #80]	; (2fd0 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    2f7e:	6800      	ldr	r0, [r0, #0]
    2f80:	2800      	cmp	r0, #0
    2f82:	bf08      	it	eq
    2f84:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f88:	2000      	movs	r0, #0
    2f8a:	f000 fab7 	bl	34fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2f8e:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2f92:	2004      	movs	r0, #4
    2f94:	7028      	strb	r0, [r5, #0]
    2f96:	f8c5 8004 	str.w	r8, [r5, #4]
    2f9a:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    2f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2fa2:	2000      	movs	r0, #0
    2fa4:	f7fe be34 	b.w	1c10 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2fa8:	f240 41a3 	movw	r1, #1187	; 0x4a3
    2fac:	206c      	movs	r0, #108	; 0x6c
    2fae:	f000 ff43 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2fb6:	2007      	movs	r0, #7
    2fb8:	f7fe be2a 	b.w	1c10 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2fbc:	20000044 	.word	0x20000044
    2fc0:	40008000 	.word	0x40008000
    2fc4:	4000814c 	.word	0x4000814c
    2fc8:	40008148 	.word	0x40008148
    2fcc:	40008144 	.word	0x40008144
    2fd0:	40008140 	.word	0x40008140
    2fd4:	2201      	movs	r2, #1
    2fd6:	0211      	lsls	r1, r2, #8
    2fd8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2fdc:	2000      	movs	r0, #0
    2fde:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2fe2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    2fe6:	f3bf 8f4f 	dsb	sy
    2fea:	f3bf 8f6f 	isb	sy
    2fee:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    2ff2:	490e      	ldr	r1, [pc, #56]	; (302c <MPSL_IRQ_TIMER0_Handler+0x158>)
    2ff4:	f841 2f04 	str.w	r2, [r1, #4]!
    2ff8:	1e43      	subs	r3, r0, #1
    2ffa:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    2ffe:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    3002:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    3006:	4b0a      	ldr	r3, [pc, #40]	; (3030 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    3008:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    300c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3010:	1d1b      	adds	r3, r3, #4
    3012:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3016:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    301a:	1d1b      	adds	r3, r3, #4
    301c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3020:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3024:	60ca      	str	r2, [r1, #12]
    3026:	4903      	ldr	r1, [pc, #12]	; (3034 <MPSL_IRQ_TIMER0_Handler+0x160>)
    3028:	7048      	strb	r0, [r1, #1]
    302a:	4770      	bx	lr
    302c:	40008000 	.word	0x40008000
    3030:	40008004 	.word	0x40008004
    3034:	20000044 	.word	0x20000044

00003038 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3038:	4801      	ldr	r0, [pc, #4]	; (3040 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    303a:	6800      	ldr	r0, [r0, #0]
    303c:	4770      	bx	lr
    303e:	0000      	.short	0x0000
    3040:	4000b504 	.word	0x4000b504

00003044 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    3044:	b430      	push	{r4, r5}
    3046:	f3ef 8c10 	mrs	ip, PRIMASK
    304a:	b672      	cpsid	i
    304c:	2500      	movs	r5, #0
    304e:	4b0b      	ldr	r3, [pc, #44]	; (307c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    3050:	4a0b      	ldr	r2, [pc, #44]	; (3080 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    3052:	bf00      	nop
    3054:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    3058:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    305c:	b12c      	cbz	r4, 306a <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    305e:	68d1      	ldr	r1, [r2, #12]
    3060:	1c49      	adds	r1, r1, #1
    3062:	60d1      	str	r1, [r2, #12]
    3064:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    3068:	e7f4      	b.n	3054 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    306a:	68d2      	ldr	r2, [r2, #12]
    306c:	f1bc 0f00 	cmp.w	ip, #0
    3070:	d100      	bne.n	3074 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    3072:	b662      	cpsie	i
    3074:	e9c0 1200 	strd	r1, r2, [r0]
    3078:	bc30      	pop	{r4, r5}
    307a:	4770      	bx	lr
    307c:	4000b000 	.word	0x4000b000
    3080:	20000044 	.word	0x20000044

00003084 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    3084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3088:	4e46      	ldr	r6, [pc, #280]	; (31a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    308a:	4605      	mov	r5, r0
    308c:	1eb7      	subs	r7, r6, #2
    308e:	7833      	ldrb	r3, [r6, #0]
    3090:	68b9      	ldr	r1, [r7, #8]
    3092:	2b01      	cmp	r3, #1
    3094:	bf04      	itt	eq
    3096:	42a9      	cmpeq	r1, r5
    3098:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    309c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    30a0:	4a41      	ldr	r2, [pc, #260]	; (31a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    30a2:	6010      	str	r0, [r2, #0]
    30a4:	4a42      	ldr	r2, [pc, #264]	; (31b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    30a6:	4841      	ldr	r0, [pc, #260]	; (31ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    30a8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    30ac:	f102 0c04 	add.w	ip, r2, #4
    30b0:	f04f 0400 	mov.w	r4, #0
    30b4:	2b00      	cmp	r3, #0
    30b6:	d062      	beq.n	317e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    30b8:	483e      	ldr	r0, [pc, #248]	; (31b4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    30ba:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    30be:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    30c2:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    30c6:	bf00      	nop
    30c8:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    30cc:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    30d0:	f04f 0801 	mov.w	r8, #1
    30d4:	2800      	cmp	r0, #0
    30d6:	bf01      	itttt	eq
    30d8:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    30dc:	2800      	cmpeq	r0, #0
    30de:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    30e2:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    30e6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    30ea:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    30ee:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    30f2:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    30f6:	4830      	ldr	r0, [pc, #192]	; (31b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    30f8:	f8d0 c000 	ldr.w	ip, [r0]
    30fc:	eba5 0c0c 	sub.w	ip, r5, ip
    3100:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    3104:	f1bc 0f02 	cmp.w	ip, #2
    3108:	d344      	bcc.n	3194 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    310a:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    310e:	d841      	bhi.n	3194 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    3110:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    3114:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    3118:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    311c:	b12b      	cbz	r3, 312a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    311e:	6802      	ldr	r2, [r0, #0]
    3120:	1a8a      	subs	r2, r1, r2
    3122:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3126:	2a02      	cmp	r2, #2
    3128:	d3f9      	bcc.n	311e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    312a:	f8c7 8004 	str.w	r8, [r7, #4]
    312e:	703c      	strb	r4, [r7, #0]
    3130:	f7ff ff50 	bl	2fd4 <MPSL_IRQ_TIMER0_Handler+0x100>
    3134:	4821      	ldr	r0, [pc, #132]	; (31bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    3136:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    313a:	f364 0101 	bfi	r1, r4, #0, #2
    313e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    3142:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    3146:	2102      	movs	r1, #2
    3148:	f361 0201 	bfi	r2, r1, #0, #2
    314c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    3150:	2104      	movs	r1, #4
    3152:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    3156:	f8c0 800c 	str.w	r8, [r0, #12]
    315a:	6879      	ldr	r1, [r7, #4]
    315c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3160:	1580      	asrs	r0, r0, #22
    3162:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    3166:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    316a:	4915      	ldr	r1, [pc, #84]	; (31c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    316c:	05c0      	lsls	r0, r0, #23
    316e:	6008      	str	r0, [r1, #0]
    3170:	2004      	movs	r0, #4
    3172:	60bd      	str	r5, [r7, #8]
    3174:	7070      	strb	r0, [r6, #1]
    3176:	f886 8000 	strb.w	r8, [r6]
    317a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    317e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    3182:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    3186:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    318a:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    318e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3192:	e799      	b.n	30c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    3194:	2000      	movs	r0, #0
    3196:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    319a:	f240 2197 	movw	r1, #663	; 0x297
    319e:	206c      	movs	r0, #108	; 0x6c
    31a0:	f000 fe4a 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31a4:	20000046 	.word	0x20000046
    31a8:	4001f508 	.word	0x4001f508
    31ac:	fffbfffd 	.word	0xfffbfffd
    31b0:	4000b000 	.word	0x4000b000
    31b4:	fffafffd 	.word	0xfffafffd
    31b8:	4000b504 	.word	0x4000b504
    31bc:	40008000 	.word	0x40008000
    31c0:	4001f504 	.word	0x4001f504

000031c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    31c4:	b570      	push	{r4, r5, r6, lr}
    31c6:	4c2a      	ldr	r4, [pc, #168]	; (3270 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    31c8:	68a1      	ldr	r1, [r4, #8]
    31ca:	4281      	cmp	r1, r0
    31cc:	bf14      	ite	ne
    31ce:	2201      	movne	r2, #1
    31d0:	2200      	moveq	r2, #0
    31d2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 3274 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    31d6:	f89c 5000 	ldrb.w	r5, [ip]
    31da:	2d02      	cmp	r5, #2
    31dc:	d002      	beq.n	31e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    31de:	2a00      	cmp	r2, #0
    31e0:	d034      	beq.n	324c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    31e2:	e002      	b.n	31ea <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    31e4:	2a00      	cmp	r2, #0
    31e6:	bf08      	it	eq
    31e8:	bd70      	popeq	{r4, r5, r6, pc}
    31ea:	7862      	ldrb	r2, [r4, #1]
    31ec:	b39a      	cbz	r2, 3256 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    31ee:	4b22      	ldr	r3, [pc, #136]	; (3278 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    31f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    31f4:	601a      	str	r2, [r3, #0]
    31f6:	4b21      	ldr	r3, [pc, #132]	; (327c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    31f8:	1392      	asrs	r2, r2, #14
    31fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    31fe:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    3202:	2200      	movs	r2, #0
    3204:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    3208:	4a1d      	ldr	r2, [pc, #116]	; (3280 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    320a:	6816      	ldr	r6, [r2, #0]
    320c:	1b86      	subs	r6, r0, r6
    320e:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    3212:	2e02      	cmp	r6, #2
    3214:	d324      	bcc.n	3260 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3216:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    321a:	d821      	bhi.n	3260 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    321c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3220:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    3224:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    3228:	b12d      	cbz	r5, 3236 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    322a:	6813      	ldr	r3, [r2, #0]
    322c:	1acb      	subs	r3, r1, r3
    322e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3232:	2b02      	cmp	r3, #2
    3234:	d3f9      	bcc.n	322a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    3236:	4b13      	ldr	r3, [pc, #76]	; (3284 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3238:	2102      	movs	r1, #2
    323a:	074a      	lsls	r2, r1, #29
    323c:	601a      	str	r2, [r3, #0]
    323e:	60a0      	str	r0, [r4, #8]
    3240:	2004      	movs	r0, #4
    3242:	f88c 0001 	strb.w	r0, [ip, #1]
    3246:	f88c 1000 	strb.w	r1, [ip]
    324a:	bd70      	pop	{r4, r5, r6, pc}
    324c:	f240 21a5 	movw	r1, #677	; 0x2a5
    3250:	206c      	movs	r0, #108	; 0x6c
    3252:	f000 fdf1 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3256:	f240 21a9 	movw	r1, #681	; 0x2a9
    325a:	206c      	movs	r0, #108	; 0x6c
    325c:	f000 fdec 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3260:	2000      	movs	r0, #0
    3262:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3266:	f240 21b5 	movw	r1, #693	; 0x2b5
    326a:	206c      	movs	r0, #108	; 0x6c
    326c:	f000 fde4 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3270:	20000044 	.word	0x20000044
    3274:	20000046 	.word	0x20000046
    3278:	4001f508 	.word	0x4001f508
    327c:	4000b000 	.word	0x4000b000
    3280:	4000b504 	.word	0x4000b504
    3284:	4001f504 	.word	0x4001f504

00003288 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3288:	4801      	ldr	r0, [pc, #4]	; (3290 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    328a:	6880      	ldr	r0, [r0, #8]
    328c:	4770      	bx	lr
    328e:	0000      	.short	0x0000
    3290:	20000044 	.word	0x20000044

00003294 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3298:	4836      	ldr	r0, [pc, #216]	; (3374 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    329a:	4a35      	ldr	r2, [pc, #212]	; (3370 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    329c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    32a0:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 3378 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    32a4:	1d03      	adds	r3, r0, #4
    32a6:	2100      	movs	r1, #0
    32a8:	f89c 4000 	ldrb.w	r4, [ip]
    32ac:	b184      	cbz	r4, 32d0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    32ae:	4a33      	ldr	r2, [pc, #204]	; (337c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    32b0:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    32b4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    32b8:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    32bc:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    32c0:	2301      	movs	r3, #1
    32c2:	2a00      	cmp	r2, #0
    32c4:	bf04      	itt	eq
    32c6:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    32ca:	2800      	cmpeq	r0, #0
    32cc:	d111      	bne.n	32f2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    32ce:	e00a      	b.n	32e6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    32d0:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    32d4:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    32d8:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    32dc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    32e0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    32e4:	e7ea      	b.n	32bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    32e6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    32ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
    32ee:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    32f2:	2c02      	cmp	r4, #2
    32f4:	d004      	beq.n	3300 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    32f6:	f240 21c1 	movw	r1, #705	; 0x2c1
    32fa:	206c      	movs	r0, #108	; 0x6c
    32fc:	f000 fd9c 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3300:	4e1f      	ldr	r6, [pc, #124]	; (3380 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3302:	6830      	ldr	r0, [r6, #0]
    3304:	4c1f      	ldr	r4, [pc, #124]	; (3384 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3306:	1cc0      	adds	r0, r0, #3
    3308:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    330c:	68a2      	ldr	r2, [r4, #8]
    330e:	4d1e      	ldr	r5, [pc, #120]	; (3388 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    3310:	4290      	cmp	r0, r2
    3312:	d00b      	beq.n	332c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3314:	6837      	ldr	r7, [r6, #0]
    3316:	1bd7      	subs	r7, r2, r7
    3318:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    331c:	2f04      	cmp	r7, #4
    331e:	d305      	bcc.n	332c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3320:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    3324:	d802      	bhi.n	332c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3326:	f7ff fead 	bl	3084 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    332a:	e01b      	b.n	3364 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    332c:	6830      	ldr	r0, [r6, #0]
    332e:	1a10      	subs	r0, r2, r0
    3330:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3334:	2802      	cmp	r0, #2
    3336:	d313      	bcc.n	3360 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    3338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    333c:	d810      	bhi.n	3360 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    333e:	4a13      	ldr	r2, [pc, #76]	; (338c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    3340:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3344:	6010      	str	r0, [r2, #0]
    3346:	6063      	str	r3, [r4, #4]
    3348:	7021      	strb	r1, [r4, #0]
    334a:	606b      	str	r3, [r5, #4]
    334c:	60eb      	str	r3, [r5, #12]
    334e:	0040      	lsls	r0, r0, #1
    3350:	1f11      	subs	r1, r2, #4
    3352:	6008      	str	r0, [r1, #0]
    3354:	2004      	movs	r0, #4
    3356:	f88c 0001 	strb.w	r0, [ip, #1]
    335a:	f88c 3000 	strb.w	r3, [ip]
    335e:	e001      	b.n	3364 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    3360:	6063      	str	r3, [r4, #4]
    3362:	7021      	strb	r1, [r4, #0]
    3364:	6860      	ldr	r0, [r4, #4]
    3366:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    336a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    336e:	0000      	.short	0x0000
    3370:	fffbfffd 	.word	0xfffbfffd
    3374:	4000b000 	.word	0x4000b000
    3378:	20000046 	.word	0x20000046
    337c:	fffafffd 	.word	0xfffafffd
    3380:	4000b504 	.word	0x4000b504
    3384:	20000044 	.word	0x20000044
    3388:	40008000 	.word	0x40008000
    338c:	4001f508 	.word	0x4001f508

00003390 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3394:	4a54      	ldr	r2, [pc, #336]	; (34e8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    3396:	2500      	movs	r5, #0
    3398:	2401      	movs	r4, #1
    339a:	f892 c000 	ldrb.w	ip, [r2]
    339e:	7853      	ldrb	r3, [r2, #1]
    33a0:	f44f 76a0 	mov.w	r6, #320	; 0x140
    33a4:	2807      	cmp	r0, #7
    33a6:	d27d      	bcs.n	34a4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    33a8:	e8df f000 	tbb	[pc, r0]
    33ac:	04040404 	.word	0x04040404
    33b0:	00585858 	.word	0x00585858
    33b4:	4a4d      	ldr	r2, [pc, #308]	; (34ec <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    33b6:	6897      	ldr	r7, [r2, #8]
    33b8:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    33bc:	bf04      	itt	eq
    33be:	7852      	ldrbeq	r2, [r2, #1]
    33c0:	2a00      	cmpeq	r2, #0
    33c2:	d003      	beq.n	33cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    33c4:	f1bc 0f02 	cmp.w	ip, #2
    33c8:	d005      	beq.n	33d6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    33ca:	e026      	b.n	341a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    33cc:	f240 3151 	movw	r1, #849	; 0x351
    33d0:	206c      	movs	r0, #108	; 0x6c
    33d2:	f000 fd31 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33d6:	1f1a      	subs	r2, r3, #4
    33d8:	b2d2      	uxtb	r2, r2
    33da:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    33de:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    33e2:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    33e6:	2200      	movs	r2, #0
    33e8:	f1bc 0f01 	cmp.w	ip, #1
    33ec:	d003      	beq.n	33f6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    33ee:	f1bc 0f02 	cmp.w	ip, #2
    33f2:	d008      	beq.n	3406 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    33f4:	e00e      	b.n	3414 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    33f6:	2b04      	cmp	r3, #4
    33f8:	bf24      	itt	cs
    33fa:	6837      	ldrcs	r7, [r6, #0]
    33fc:	2f00      	cmpcs	r7, #0
    33fe:	bf08      	it	eq
    3400:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    3404:	e006      	b.n	3414 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3406:	2b04      	cmp	r3, #4
    3408:	bf24      	itt	cs
    340a:	6837      	ldrcs	r7, [r6, #0]
    340c:	2f00      	cmpcs	r7, #0
    340e:	bf08      	it	eq
    3410:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    3414:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    3418:	d1e5      	bne.n	33e6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    341a:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 34f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    341e:	f100 0210 	add.w	r2, r0, #16
    3422:	fa04 f202 	lsl.w	r2, r4, r2
    3426:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    342a:	f04f 0340 	mov.w	r3, #64	; 0x40
    342e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3432:	b2db      	uxtb	r3, r3
    3434:	4463      	add	r3, ip
    3436:	601c      	str	r4, [r3, #0]
    3438:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    343c:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    3440:	eba1 0303 	sub.w	r3, r1, r3
    3444:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3448:	2b03      	cmp	r3, #3
    344a:	bf26      	itte	cs
    344c:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    3450:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    3454:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    3458:	d237      	bcs.n	34ca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    345a:	e03c      	b.n	34d6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    345c:	f1bc 0f00 	cmp.w	ip, #0
    3460:	d006      	beq.n	3470 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3462:	4283      	cmp	r3, r0
    3464:	d104      	bne.n	3470 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3466:	f240 3171 	movw	r1, #881	; 0x371
    346a:	206c      	movs	r0, #108	; 0x6c
    346c:	f000 fce4 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3470:	1f02      	subs	r2, r0, #4
    3472:	b2d3      	uxtb	r3, r2
    3474:	2b03      	cmp	r3, #3
    3476:	d304      	bcc.n	3482 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    3478:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    347c:	206c      	movs	r0, #108	; 0x6c
    347e:	f000 fcdb 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3482:	f8df c070 	ldr.w	ip, [pc, #112]	; 34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    3486:	f103 0210 	add.w	r2, r3, #16
    348a:	fa04 f202 	lsl.w	r2, r4, r2
    348e:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    3492:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    3496:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    349a:	f84c 5003 	str.w	r5, [ip, r3]
    349e:	4b16      	ldr	r3, [pc, #88]	; (34f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    34a0:	681b      	ldr	r3, [r3, #0]
    34a2:	e000      	b.n	34a6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    34a4:	e01a      	b.n	34dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    34a6:	1f00      	subs	r0, r0, #4
    34a8:	1acb      	subs	r3, r1, r3
    34aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    34ae:	b2c0      	uxtb	r0, r0
    34b0:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    34b4:	2b02      	cmp	r3, #2
    34b6:	d30b      	bcc.n	34d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    34b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    34bc:	d808      	bhi.n	34d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    34be:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    34c2:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    34c6:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    34ca:	2001      	movs	r0, #1
    34cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34d0:	2100      	movs	r1, #0
    34d2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    34d6:	2000      	movs	r0, #0
    34d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34dc:	f240 3175 	movw	r1, #885	; 0x375
    34e0:	206c      	movs	r0, #108	; 0x6c
    34e2:	f000 fca9 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34e6:	0000      	.short	0x0000
    34e8:	20000046 	.word	0x20000046
    34ec:	20000044 	.word	0x20000044
    34f0:	40008000 	.word	0x40008000
    34f4:	4000b000 	.word	0x4000b000
    34f8:	4000b504 	.word	0x4000b504

000034fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    34fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3500:	2601      	movs	r6, #1
    3502:	2700      	movs	r7, #0
    3504:	f44f 78a0 	mov.w	r8, #320	; 0x140
    3508:	2807      	cmp	r0, #7
    350a:	d251      	bcs.n	35b0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    350c:	e8df f000 	tbb	[pc, r0]
    3510:	04040404 	.word	0x04040404
    3514:	00191919 	.word	0x00191919
    3518:	f100 0110 	add.w	r1, r0, #16
    351c:	fa06 f201 	lsl.w	r2, r6, r1
    3520:	4926      	ldr	r1, [pc, #152]	; (35bc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3522:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3526:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    352a:	2200      	movs	r2, #0
    352c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3530:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    3534:	508f      	str	r7, [r1, r2]
    3536:	4922      	ldr	r1, [pc, #136]	; (35c0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3538:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    353c:	9000      	str	r0, [sp, #0]
    353e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3542:	4d20      	ldr	r5, [pc, #128]	; (35c4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3544:	1f01      	subs	r1, r0, #4
    3546:	b2cc      	uxtb	r4, r1
    3548:	7829      	ldrb	r1, [r5, #0]
    354a:	b179      	cbz	r1, 356c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    354c:	786a      	ldrb	r2, [r5, #1]
    354e:	4282      	cmp	r2, r0
    3550:	d10c      	bne.n	356c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3552:	4a1d      	ldr	r2, [pc, #116]	; (35c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3554:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3558:	6010      	str	r0, [r2, #0]
    355a:	2901      	cmp	r1, #1
    355c:	bf08      	it	eq
    355e:	f7ff fd39 	bleq	2fd4 <MPSL_IRQ_TIMER0_Handler+0x100>
    3562:	702f      	strb	r7, [r5, #0]
    3564:	4919      	ldr	r1, [pc, #100]	; (35cc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    3566:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    356a:	6088      	str	r0, [r1, #8]
    356c:	4918      	ldr	r1, [pc, #96]	; (35d0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    356e:	f104 0010 	add.w	r0, r4, #16
    3572:	fa06 f000 	lsl.w	r0, r6, r0
    3576:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    357a:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    357e:	00a0      	lsls	r0, r4, #2
    3580:	4408      	add	r0, r1
    3582:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3586:	4a13      	ldr	r2, [pc, #76]	; (35d4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3588:	6812      	ldr	r2, [r2, #0]
    358a:	1a80      	subs	r0, r0, r2
    358c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3590:	2802      	cmp	r0, #2
    3592:	d307      	bcc.n	35a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    3594:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    3598:	2000      	movs	r0, #0
    359a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    359e:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    35a2:	500f      	str	r7, [r1, r0]
    35a4:	480c      	ldr	r0, [pc, #48]	; (35d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    35a6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    35aa:	9000      	str	r0, [sp, #0]
    35ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    35b0:	f240 31f9 	movw	r1, #1017	; 0x3f9
    35b4:	206c      	movs	r0, #108	; 0x6c
    35b6:	f000 fc3f 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35ba:	0000      	.short	0x0000
    35bc:	40008000 	.word	0x40008000
    35c0:	40008140 	.word	0x40008140
    35c4:	20000046 	.word	0x20000046
    35c8:	4001f508 	.word	0x4001f508
    35cc:	20000044 	.word	0x20000044
    35d0:	4000b000 	.word	0x4000b000
    35d4:	4000b504 	.word	0x4000b504
    35d8:	4000b140 	.word	0x4000b140

000035dc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    35dc:	4825      	ldr	r0, [pc, #148]	; (3674 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    35de:	4a24      	ldr	r2, [pc, #144]	; (3670 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    35e0:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    35e4:	4924      	ldr	r1, [pc, #144]	; (3678 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    35e6:	1d03      	adds	r3, r0, #4
    35e8:	f891 c000 	ldrb.w	ip, [r1]
    35ec:	2100      	movs	r1, #0
    35ee:	f1bc 0f00 	cmp.w	ip, #0
    35f2:	d010      	beq.n	3616 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    35f4:	4a21      	ldr	r2, [pc, #132]	; (367c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    35f6:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    35fa:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    35fe:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3602:	bf00      	nop
    3604:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    3608:	2a00      	cmp	r2, #0
    360a:	bf04      	itt	eq
    360c:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    3610:	2800      	cmpeq	r0, #0
    3612:	d111      	bne.n	3638 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    3614:	e00a      	b.n	362c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3616:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    361a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    361e:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3622:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3626:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    362a:	e7eb      	b.n	3604 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    362c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3630:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3634:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    3638:	4811      	ldr	r0, [pc, #68]	; (3680 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    363a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    363e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3642:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3646:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    364a:	f100 0204 	add.w	r2, r0, #4
    364e:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3652:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3656:	f102 0204 	add.w	r2, r2, #4
    365a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    365e:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    3662:	f102 0204 	add.w	r2, r2, #4
    3666:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    366a:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    366e:	4770      	bx	lr
    3670:	fffbfffd 	.word	0xfffbfffd
    3674:	4000b000 	.word	0x4000b000
    3678:	20000046 	.word	0x20000046
    367c:	fffafffd 	.word	0xfffafffd
    3680:	40008000 	.word	0x40008000

00003684 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    3684:	b510      	push	{r4, lr}
    3686:	2807      	cmp	r0, #7
    3688:	d20d      	bcs.n	36a6 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    368a:	e8df f000 	tbb	[pc, r0]
    368e:	0404      	.short	0x0404
    3690:	06060404 	.word	0x06060404
    3694:	0006      	.short	0x0006
    3696:	4906      	ldr	r1, [pc, #24]	; (36b0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    3698:	e002      	b.n	36a0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    369a:	1f00      	subs	r0, r0, #4
    369c:	4905      	ldr	r1, [pc, #20]	; (36b4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    369e:	b2c0      	uxtb	r0, r0
    36a0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    36a4:	bd10      	pop	{r4, pc}
    36a6:	f240 3199 	movw	r1, #921	; 0x399
    36aa:	206c      	movs	r0, #108	; 0x6c
    36ac:	f000 fbc4 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36b0:	40008140 	.word	0x40008140
    36b4:	4000b140 	.word	0x4000b140

000036b8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    36b8:	b570      	push	{r4, r5, r6, lr}
    36ba:	481f      	ldr	r0, [pc, #124]	; (3738 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    36bc:	2400      	movs	r4, #0
    36be:	2104      	movs	r1, #4
    36c0:	7004      	strb	r4, [r0, #0]
    36c2:	1e80      	subs	r0, r0, #2
    36c4:	7001      	strb	r1, [r0, #0]
    36c6:	0589      	lsls	r1, r1, #22
    36c8:	60c4      	str	r4, [r0, #12]
    36ca:	6081      	str	r1, [r0, #8]
    36cc:	f7ff fc82 	bl	2fd4 <MPSL_IRQ_TIMER0_Handler+0x100>
    36d0:	2501      	movs	r5, #1
    36d2:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    36d6:	02eb      	lsls	r3, r5, #11
    36d8:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    36dc:	f3bf 8f4f 	dsb	sy
    36e0:	f3bf 8f6f 	isb	sy
    36e4:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    36e8:	4814      	ldr	r0, [pc, #80]	; (373c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    36ea:	6045      	str	r5, [r0, #4]
    36ec:	6085      	str	r5, [r0, #8]
    36ee:	4914      	ldr	r1, [pc, #80]	; (3740 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    36f0:	680a      	ldr	r2, [r1, #0]
    36f2:	2a00      	cmp	r2, #0
    36f4:	d1fc      	bne.n	36f0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    36f6:	1e51      	subs	r1, r2, #1
    36f8:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    36fc:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3700:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3704:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3708:	490e      	ldr	r1, [pc, #56]	; (3744 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    370a:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    370e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3712:	1d09      	adds	r1, r1, #4
    3714:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3718:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    371c:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    3720:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    3724:	6005      	str	r5, [r0, #0]
    3726:	f44f 7182 	mov.w	r1, #260	; 0x104
    372a:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    372e:	2102      	movs	r1, #2
    3730:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    3734:	bd70      	pop	{r4, r5, r6, pc}
    3736:	0000      	.short	0x0000
    3738:	20000046 	.word	0x20000046
    373c:	4000b000 	.word	0x4000b000
    3740:	4000b504 	.word	0x4000b504
    3744:	4000b004 	.word	0x4000b004

00003748 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    3748:	4808      	ldr	r0, [pc, #32]	; (376c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    374a:	f990 0000 	ldrsb.w	r0, [r0]
    374e:	2800      	cmp	r0, #0
    3750:	bfb8      	it	lt
    3752:	4770      	bxlt	lr
    3754:	f000 011f 	and.w	r1, r0, #31
    3758:	2201      	movs	r2, #1
    375a:	fa02 f101 	lsl.w	r1, r2, r1
    375e:	0940      	lsrs	r0, r0, #5
    3760:	0080      	lsls	r0, r0, #2
    3762:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3766:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    376a:	4770      	bx	lr
    376c:	20000178 	.word	0x20000178

00003770 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    3770:	4803      	ldr	r0, [pc, #12]	; (3780 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    3772:	7800      	ldrb	r0, [r0, #0]
    3774:	2803      	cmp	r0, #3
    3776:	bf0c      	ite	eq
    3778:	2001      	moveq	r0, #1
    377a:	2000      	movne	r0, #0
    377c:	4770      	bx	lr
    377e:	0000      	.short	0x0000
    3780:	20000168 	.word	0x20000168

00003784 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    3784:	4801      	ldr	r0, [pc, #4]	; (378c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    3786:	8840      	ldrh	r0, [r0, #2]
    3788:	4770      	bx	lr
    378a:	0000      	.short	0x0000
    378c:	20000168 	.word	0x20000168

00003790 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    3790:	4803      	ldr	r0, [pc, #12]	; (37a0 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    3792:	7800      	ldrb	r0, [r0, #0]
    3794:	2802      	cmp	r0, #2
    3796:	bf16      	itet	ne
    3798:	2803      	cmpne	r0, #3
    379a:	2001      	moveq	r0, #1
    379c:	2000      	movne	r0, #0
    379e:	4770      	bx	lr
    37a0:	20000168 	.word	0x20000168

000037a4 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    37a4:	4802      	ldr	r0, [pc, #8]	; (37b0 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    37a6:	2100      	movs	r1, #0
    37a8:	7001      	strb	r1, [r0, #0]
    37aa:	8041      	strh	r1, [r0, #2]
    37ac:	4770      	bx	lr
    37ae:	0000      	.short	0x0000
    37b0:	20000168 	.word	0x20000168

000037b4 <MPSL_IRQ_CLOCK_Handler>:
    37b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37b8:	4c16      	ldr	r4, [pc, #88]	; (3814 <MPSL_IRQ_CLOCK_Handler+0x60>)
    37ba:	7a60      	ldrb	r0, [r4, #9]
    37bc:	2800      	cmp	r0, #0
    37be:	d027      	beq.n	3810 <MPSL_IRQ_CLOCK_Handler+0x5c>
    37c0:	f44f 7180 	mov.w	r1, #256	; 0x100
    37c4:	058d      	lsls	r5, r1, #22
    37c6:	4628      	mov	r0, r5
    37c8:	f004 fd7c 	bl	82c4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    37cc:	4680      	mov	r8, r0
    37ce:	f44f 7182 	mov.w	r1, #260	; 0x104
    37d2:	4628      	mov	r0, r5
    37d4:	f004 fd76 	bl	82c4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    37d8:	2600      	movs	r6, #0
    37da:	4607      	mov	r7, r0
    37dc:	f1b8 0f00 	cmp.w	r8, #0
    37e0:	d009      	beq.n	37f6 <MPSL_IRQ_CLOCK_Handler+0x42>
    37e2:	2001      	movs	r0, #1
    37e4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    37e8:	7920      	ldrb	r0, [r4, #4]
    37ea:	b120      	cbz	r0, 37f6 <MPSL_IRQ_CLOCK_Handler+0x42>
    37ec:	7126      	strb	r6, [r4, #4]
    37ee:	69e0      	ldr	r0, [r4, #28]
    37f0:	b108      	cbz	r0, 37f6 <MPSL_IRQ_CLOCK_Handler+0x42>
    37f2:	4780      	blx	r0
    37f4:	61e6      	str	r6, [r4, #28]
    37f6:	b137      	cbz	r7, 3806 <MPSL_IRQ_CLOCK_Handler+0x52>
    37f8:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    37fc:	2002      	movs	r0, #2
    37fe:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3802:	f000 fa4d 	bl	3ca0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3806:	4640      	mov	r0, r8
    3808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    380c:	f000 b858 	b.w	38c0 <MPSL_IRQ_CLOCK_Handler+0x10c>
    3810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3814:	20000054 	.word	0x20000054
    3818:	b510      	push	{r4, lr}
    381a:	f004 fdfd 	bl	8418 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    381e:	b930      	cbnz	r0, 382e <MPSL_IRQ_CLOCK_Handler+0x7a>
    3820:	f004 fe1b 	bl	845a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3824:	b918      	cbnz	r0, 382e <MPSL_IRQ_CLOCK_Handler+0x7a>
    3826:	f004 fe4e 	bl	84c6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    382a:	2800      	cmp	r0, #0
    382c:	d002      	beq.n	3834 <MPSL_IRQ_CLOCK_Handler+0x80>
    382e:	4902      	ldr	r1, [pc, #8]	; (3838 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3830:	2002      	movs	r0, #2
    3832:	6008      	str	r0, [r1, #0]
    3834:	bd10      	pop	{r4, pc}
    3836:	0000      	.short	0x0000
    3838:	40000c34 	.word	0x40000c34
    383c:	b570      	push	{r4, r5, r6, lr}
    383e:	f000 f991 	bl	3b64 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3842:	f000 fa81 	bl	3d48 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3846:	4c09      	ldr	r4, [pc, #36]	; (386c <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3848:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    384c:	b130      	cbz	r0, 385c <MPSL_IRQ_CLOCK_Handler+0xa8>
    384e:	f7ff ffe3 	bl	3818 <MPSL_IRQ_CLOCK_Handler+0x64>
    3852:	2001      	movs	r0, #1
    3854:	6128      	str	r0, [r5, #16]
    3856:	2004      	movs	r0, #4
    3858:	72a0      	strb	r0, [r4, #10]
    385a:	e004      	b.n	3866 <MPSL_IRQ_CLOCK_Handler+0xb2>
    385c:	2003      	movs	r0, #3
    385e:	72a0      	strb	r0, [r4, #10]
    3860:	2001      	movs	r0, #1
    3862:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3866:	2000      	movs	r0, #0
    3868:	71e0      	strb	r0, [r4, #7]
    386a:	bd70      	pop	{r4, r5, r6, pc}
    386c:	20000054 	.word	0x20000054
    3870:	b570      	push	{r4, r5, r6, lr}
    3872:	4c12      	ldr	r4, [pc, #72]	; (38bc <MPSL_IRQ_CLOCK_Handler+0x108>)
    3874:	79a0      	ldrb	r0, [r4, #6]
    3876:	b1e0      	cbz	r0, 38b2 <MPSL_IRQ_CLOCK_Handler+0xfe>
    3878:	79e1      	ldrb	r1, [r4, #7]
    387a:	1e40      	subs	r0, r0, #1
    387c:	4281      	cmp	r1, r0
    387e:	da18      	bge.n	38b2 <MPSL_IRQ_CLOCK_Handler+0xfe>
    3880:	f000 fa62 	bl	3d48 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3884:	4605      	mov	r5, r0
    3886:	f000 fb4b 	bl	3f20 <mpsl_temperature_get>
    388a:	79a1      	ldrb	r1, [r4, #6]
    388c:	2901      	cmp	r1, #1
    388e:	d902      	bls.n	3896 <MPSL_IRQ_CLOCK_Handler+0xe2>
    3890:	79e1      	ldrb	r1, [r4, #7]
    3892:	1c49      	adds	r1, r1, #1
    3894:	71e1      	strb	r1, [r4, #7]
    3896:	b10d      	cbz	r5, 389c <MPSL_IRQ_CLOCK_Handler+0xe8>
    3898:	6961      	ldr	r1, [r4, #20]
    389a:	e000      	b.n	389e <MPSL_IRQ_CLOCK_Handler+0xea>
    389c:	6921      	ldr	r1, [r4, #16]
    389e:	1a41      	subs	r1, r0, r1
    38a0:	2902      	cmp	r1, #2
    38a2:	da02      	bge.n	38aa <MPSL_IRQ_CLOCK_Handler+0xf6>
    38a4:	f111 0f02 	cmn.w	r1, #2
    38a8:	dc07      	bgt.n	38ba <MPSL_IRQ_CLOCK_Handler+0x106>
    38aa:	b10d      	cbz	r5, 38b0 <MPSL_IRQ_CLOCK_Handler+0xfc>
    38ac:	6160      	str	r0, [r4, #20]
    38ae:	e000      	b.n	38b2 <MPSL_IRQ_CLOCK_Handler+0xfe>
    38b0:	6120      	str	r0, [r4, #16]
    38b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    38b6:	f7ff bfc1 	b.w	383c <MPSL_IRQ_CLOCK_Handler+0x88>
    38ba:	bd70      	pop	{r4, r5, r6, pc}
    38bc:	20000054 	.word	0x20000054
    38c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    38c4:	4606      	mov	r6, r0
    38c6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    38ca:	f44f 7186 	mov.w	r1, #268	; 0x10c
    38ce:	4628      	mov	r0, r5
    38d0:	f004 fcf8 	bl	82c4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    38d4:	4680      	mov	r8, r0
    38d6:	f44f 7188 	mov.w	r1, #272	; 0x110
    38da:	4628      	mov	r0, r5
    38dc:	f004 fcf2 	bl	82c4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    38e0:	4c27      	ldr	r4, [pc, #156]	; (3980 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    38e2:	4682      	mov	sl, r0
    38e4:	7827      	ldrb	r7, [r4, #0]
    38e6:	f104 0008 	add.w	r0, r4, #8
    38ea:	f004 fd5f 	bl	83ac <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    38ee:	b110      	cbz	r0, 38f6 <MPSL_IRQ_CLOCK_Handler+0x142>
    38f0:	f240 11b9 	movw	r1, #441	; 0x1b9
    38f4:	e016      	b.n	3924 <MPSL_IRQ_CLOCK_Handler+0x170>
    38f6:	f04f 0901 	mov.w	r9, #1
    38fa:	b146      	cbz	r6, 390e <MPSL_IRQ_CLOCK_Handler+0x15a>
    38fc:	7aa0      	ldrb	r0, [r4, #10]
    38fe:	2803      	cmp	r0, #3
    3900:	d105      	bne.n	390e <MPSL_IRQ_CLOCK_Handler+0x15a>
    3902:	2004      	movs	r0, #4
    3904:	72a0      	strb	r0, [r4, #10]
    3906:	f7ff ff87 	bl	3818 <MPSL_IRQ_CLOCK_Handler+0x64>
    390a:	f8c5 9010 	str.w	r9, [r5, #16]
    390e:	2600      	movs	r6, #0
    3910:	f1b8 0f00 	cmp.w	r8, #0
    3914:	d018      	beq.n	3948 <MPSL_IRQ_CLOCK_Handler+0x194>
    3916:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    391a:	7aa0      	ldrb	r0, [r4, #10]
    391c:	2804      	cmp	r0, #4
    391e:	d004      	beq.n	392a <MPSL_IRQ_CLOCK_Handler+0x176>
    3920:	f240 11cb 	movw	r1, #459	; 0x1cb
    3924:	206d      	movs	r0, #109	; 0x6d
    3926:	f000 fa87 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    392a:	f004 fd75 	bl	8418 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    392e:	b928      	cbnz	r0, 393c <MPSL_IRQ_CLOCK_Handler+0x188>
    3930:	f004 fd93 	bl	845a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3934:	b910      	cbnz	r0, 393c <MPSL_IRQ_CLOCK_Handler+0x188>
    3936:	f004 fdc6 	bl	84c6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    393a:	b108      	cbz	r0, 3940 <MPSL_IRQ_CLOCK_Handler+0x18c>
    393c:	4811      	ldr	r0, [pc, #68]	; (3984 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    393e:	6006      	str	r6, [r0, #0]
    3940:	2002      	movs	r0, #2
    3942:	72a0      	strb	r0, [r4, #10]
    3944:	f000 f8f2 	bl	3b2c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3948:	f1ba 0f00 	cmp.w	sl, #0
    394c:	d008      	beq.n	3960 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    394e:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3952:	7aa0      	ldrb	r0, [r4, #10]
    3954:	2802      	cmp	r0, #2
    3956:	d101      	bne.n	395c <MPSL_IRQ_CLOCK_Handler+0x1a8>
    3958:	f7ff ff8a 	bl	3870 <MPSL_IRQ_CLOCK_Handler+0xbc>
    395c:	f8c5 9014 	str.w	r9, [r5, #20]
    3960:	b13f      	cbz	r7, 3972 <MPSL_IRQ_CLOCK_Handler+0x1be>
    3962:	7026      	strb	r6, [r4, #0]
    3964:	7aa0      	ldrb	r0, [r4, #10]
    3966:	2802      	cmp	r0, #2
    3968:	d101      	bne.n	396e <MPSL_IRQ_CLOCK_Handler+0x1ba>
    396a:	f7ff ff67 	bl	383c <MPSL_IRQ_CLOCK_Handler+0x88>
    396e:	f000 f8dd 	bl	3b2c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3972:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3976:	4802      	ldr	r0, [pc, #8]	; (3980 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    3978:	3008      	adds	r0, #8
    397a:	f004 bd2e 	b.w	83da <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    397e:	0000      	.short	0x0000
    3980:	20000054 	.word	0x20000054
    3984:	40000c34 	.word	0x40000c34
    3988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    398c:	4c5f      	ldr	r4, [pc, #380]	; (3b0c <MPSL_IRQ_CLOCK_Handler+0x358>)
    398e:	2700      	movs	r7, #0
    3990:	4606      	mov	r6, r0
    3992:	61a7      	str	r7, [r4, #24]
    3994:	7842      	ldrb	r2, [r0, #1]
    3996:	7881      	ldrb	r1, [r0, #2]
    3998:	7800      	ldrb	r0, [r0, #0]
    399a:	72e0      	strb	r0, [r4, #11]
    399c:	7162      	strb	r2, [r4, #5]
    399e:	71a1      	strb	r1, [r4, #6]
    39a0:	71e7      	strb	r7, [r4, #7]
    39a2:	f04f 0801 	mov.w	r8, #1
    39a6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    39aa:	2805      	cmp	r0, #5
    39ac:	d225      	bcs.n	39fa <MPSL_IRQ_CLOCK_Handler+0x246>
    39ae:	e8df f000 	tbb	[pc, r0]
    39b2:	0310      	.short	0x0310
    39b4:	00222006 	.word	0x00222006
    39b8:	f8c4 8018 	str.w	r8, [r4, #24]
    39bc:	e009      	b.n	39d2 <MPSL_IRQ_CLOCK_Handler+0x21e>
    39be:	f000 f8d1 	bl	3b64 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    39c2:	2101      	movs	r1, #1
    39c4:	4628      	mov	r0, r5
    39c6:	f004 fc82 	bl	82ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    39ca:	2800      	cmp	r0, #0
    39cc:	d0f9      	beq.n	39c2 <MPSL_IRQ_CLOCK_Handler+0x20e>
    39ce:	2002      	movs	r0, #2
    39d0:	61a0      	str	r0, [r4, #24]
    39d2:	f004 fca8 	bl	8326 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    39d6:	b1b0      	cbz	r0, 3a06 <MPSL_IRQ_CLOCK_Handler+0x252>
    39d8:	f000 f9d0 	bl	3d7c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    39dc:	7e21      	ldrb	r1, [r4, #24]
    39de:	f001 0103 	and.w	r1, r1, #3
    39e2:	4288      	cmp	r0, r1
    39e4:	d10f      	bne.n	3a06 <MPSL_IRQ_CLOCK_Handler+0x252>
    39e6:	79b0      	ldrb	r0, [r6, #6]
    39e8:	b150      	cbz	r0, 3a00 <MPSL_IRQ_CLOCK_Handler+0x24c>
    39ea:	2002      	movs	r0, #2
    39ec:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    39f0:	e070      	b.n	3ad4 <MPSL_IRQ_CLOCK_Handler+0x320>
    39f2:	4847      	ldr	r0, [pc, #284]	; (3b10 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    39f4:	e7ec      	b.n	39d0 <MPSL_IRQ_CLOCK_Handler+0x21c>
    39f6:	4847      	ldr	r0, [pc, #284]	; (3b14 <MPSL_IRQ_CLOCK_Handler+0x360>)
    39f8:	e7ea      	b.n	39d0 <MPSL_IRQ_CLOCK_Handler+0x21c>
    39fa:	f240 313a 	movw	r1, #826	; 0x33a
    39fe:	e04d      	b.n	3a9c <MPSL_IRQ_CLOCK_Handler+0x2e8>
    3a00:	f000 f990 	bl	3d24 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3a04:	e066      	b.n	3ad4 <MPSL_IRQ_CLOCK_Handler+0x320>
    3a06:	f8c5 800c 	str.w	r8, [r5, #12]
    3a0a:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3a0e:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3a12:	69a0      	ldr	r0, [r4, #24]
    3a14:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3a18:	f004 fcea 	bl	83f0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3a1c:	b940      	cbnz	r0, 3a30 <MPSL_IRQ_CLOCK_Handler+0x27c>
    3a1e:	f004 fcf1 	bl	8404 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3a22:	b928      	cbnz	r0, 3a30 <MPSL_IRQ_CLOCK_Handler+0x27c>
    3a24:	f004 fd05 	bl	8432 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3a28:	b910      	cbnz	r0, 3a30 <MPSL_IRQ_CLOCK_Handler+0x27c>
    3a2a:	f004 fd16 	bl	845a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a2e:	b138      	cbz	r0, 3a40 <MPSL_IRQ_CLOCK_Handler+0x28c>
    3a30:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3a34:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    3a38:	4937      	ldr	r1, [pc, #220]	; (3b18 <MPSL_IRQ_CLOCK_Handler+0x364>)
    3a3a:	f3c0 3042 	ubfx	r0, r0, #13, #3
    3a3e:	6008      	str	r0, [r1, #0]
    3a40:	f004 fcd6 	bl	83f0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3a44:	b940      	cbnz	r0, 3a58 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    3a46:	f004 fcdd 	bl	8404 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3a4a:	b928      	cbnz	r0, 3a58 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    3a4c:	f004 fcf1 	bl	8432 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3a50:	b910      	cbnz	r0, 3a58 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    3a52:	f004 fd02 	bl	845a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a56:	b118      	cbz	r0, 3a60 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    3a58:	492f      	ldr	r1, [pc, #188]	; (3b18 <MPSL_IRQ_CLOCK_Handler+0x364>)
    3a5a:	3110      	adds	r1, #16
    3a5c:	f8c1 8000 	str.w	r8, [r1]
    3a60:	f8c5 8008 	str.w	r8, [r5, #8]
    3a64:	2002      	movs	r0, #2
    3a66:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3a6a:	79b0      	ldrb	r0, [r6, #6]
    3a6c:	bb90      	cbnz	r0, 3ad4 <MPSL_IRQ_CLOCK_Handler+0x320>
    3a6e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3a72:	f010 0f02 	tst.w	r0, #2
    3a76:	d00f      	beq.n	3a98 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3a78:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 3b1c <MPSL_IRQ_CLOCK_Handler+0x368>
    3a7c:	f8d9 1000 	ldr.w	r1, [r9]
    3a80:	43c9      	mvns	r1, r1
    3a82:	f341 1100 	sbfx	r1, r1, #4, #1
    3a86:	f101 0801 	add.w	r8, r1, #1
    3a8a:	f8d9 1000 	ldr.w	r1, [r9]
    3a8e:	f041 0110 	orr.w	r1, r1, #16
    3a92:	f8c9 1000 	str.w	r1, [r9]
    3a96:	e007      	b.n	3aa8 <MPSL_IRQ_CLOCK_Handler+0x2f4>
    3a98:	f240 21fb 	movw	r1, #763	; 0x2fb
    3a9c:	206d      	movs	r0, #109	; 0x6d
    3a9e:	f000 f9cb 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3aa2:	bf00      	nop
    3aa4:	f000 fb02 	bl	40ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3aa8:	4651      	mov	r1, sl
    3aaa:	4628      	mov	r0, r5
    3aac:	f004 fc0a 	bl	82c4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3ab0:	2800      	cmp	r0, #0
    3ab2:	d0f7      	beq.n	3aa4 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3ab4:	f000 f936 	bl	3d24 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3ab8:	f1b8 0f00 	cmp.w	r8, #0
    3abc:	d105      	bne.n	3aca <MPSL_IRQ_CLOCK_Handler+0x316>
    3abe:	f8d9 1000 	ldr.w	r1, [r9]
    3ac2:	f021 0110 	bic.w	r1, r1, #16
    3ac6:	f8c9 1000 	str.w	r1, [r9]
    3aca:	2002      	movs	r0, #2
    3acc:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3ad0:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3ad4:	79a0      	ldrb	r0, [r4, #6]
    3ad6:	b170      	cbz	r0, 3af6 <MPSL_IRQ_CLOCK_Handler+0x342>
    3ad8:	7830      	ldrb	r0, [r6, #0]
    3ada:	b960      	cbnz	r0, 3af6 <MPSL_IRQ_CLOCK_Handler+0x342>
    3adc:	f000 f934 	bl	3d48 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3ae0:	4606      	mov	r6, r0
    3ae2:	f000 fa1d 	bl	3f20 <mpsl_temperature_get>
    3ae6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3aea:	b116      	cbz	r6, 3af2 <MPSL_IRQ_CLOCK_Handler+0x33e>
    3aec:	e9c4 1004 	strd	r1, r0, [r4, #16]
    3af0:	e001      	b.n	3af6 <MPSL_IRQ_CLOCK_Handler+0x342>
    3af2:	e9c4 0104 	strd	r0, r1, [r4, #16]
    3af6:	2101      	movs	r1, #1
    3af8:	4628      	mov	r0, r5
    3afa:	f004 fbe8 	bl	82ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3afe:	b108      	cbz	r0, 3b04 <MPSL_IRQ_CLOCK_Handler+0x350>
    3b00:	f000 f91c 	bl	3d3c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3b04:	72a7      	strb	r7, [r4, #10]
    3b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b0a:	0000      	.short	0x0000
    3b0c:	20000054 	.word	0x20000054
    3b10:	00020001 	.word	0x00020001
    3b14:	00030001 	.word	0x00030001
    3b18:	4000053c 	.word	0x4000053c
    3b1c:	e000ed10 	.word	0xe000ed10

00003b20 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    3b20:	4801      	ldr	r0, [pc, #4]	; (3b28 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    3b22:	89c0      	ldrh	r0, [r0, #14]
    3b24:	4770      	bx	lr
    3b26:	0000      	.short	0x0000
    3b28:	20000054 	.word	0x20000054

00003b2c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3b2c:	b510      	push	{r4, lr}
    3b2e:	f3ef 8410 	mrs	r4, PRIMASK
    3b32:	b672      	cpsid	i
    3b34:	480a      	ldr	r0, [pc, #40]	; (3b60 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3b36:	7841      	ldrb	r1, [r0, #1]
    3b38:	b129      	cbz	r1, 3b46 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3b3a:	7841      	ldrb	r1, [r0, #1]
    3b3c:	1e49      	subs	r1, r1, #1
    3b3e:	7041      	strb	r1, [r0, #1]
    3b40:	7841      	ldrb	r1, [r0, #1]
    3b42:	b129      	cbz	r1, 3b50 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3b44:	e008      	b.n	3b58 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3b46:	f44f 718e 	mov.w	r1, #284	; 0x11c
    3b4a:	206d      	movs	r0, #109	; 0x6d
    3b4c:	f000 f974 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b50:	7880      	ldrb	r0, [r0, #2]
    3b52:	b908      	cbnz	r0, 3b58 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3b54:	f000 f906 	bl	3d64 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3b58:	2c00      	cmp	r4, #0
    3b5a:	d100      	bne.n	3b5e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3b5c:	b662      	cpsie	i
    3b5e:	bd10      	pop	{r4, pc}
    3b60:	20000054 	.word	0x20000054

00003b64 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3b64:	b510      	push	{r4, lr}
    3b66:	f3ef 8410 	mrs	r4, PRIMASK
    3b6a:	b672      	cpsid	i
    3b6c:	4806      	ldr	r0, [pc, #24]	; (3b88 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3b6e:	7841      	ldrb	r1, [r0, #1]
    3b70:	1c49      	adds	r1, r1, #1
    3b72:	7041      	strb	r1, [r0, #1]
    3b74:	7840      	ldrb	r0, [r0, #1]
    3b76:	2801      	cmp	r0, #1
    3b78:	d101      	bne.n	3b7e <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3b7a:	f004 fbbf 	bl	82fc <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3b7e:	2c00      	cmp	r4, #0
    3b80:	d100      	bne.n	3b84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3b82:	b662      	cpsie	i
    3b84:	bd10      	pop	{r4, pc}
    3b86:	0000      	.short	0x0000
    3b88:	20000054 	.word	0x20000054

00003b8c <mpsl_clock_hfclk_release>:
    3b8c:	4805      	ldr	r0, [pc, #20]	; (3ba4 <mpsl_clock_hfclk_release+0x18>)
    3b8e:	b510      	push	{r4, lr}
    3b90:	78c1      	ldrb	r1, [r0, #3]
    3b92:	b121      	cbz	r1, 3b9e <mpsl_clock_hfclk_release+0x12>
    3b94:	2100      	movs	r1, #0
    3b96:	7101      	strb	r1, [r0, #4]
    3b98:	70c1      	strb	r1, [r0, #3]
    3b9a:	f7ff ffc7 	bl	3b2c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3b9e:	2000      	movs	r0, #0
    3ba0:	bd10      	pop	{r4, pc}
    3ba2:	0000      	.short	0x0000
    3ba4:	20000054 	.word	0x20000054

00003ba8 <mpsl_clock_hfclk_request>:
    3ba8:	b570      	push	{r4, r5, r6, lr}
    3baa:	4c0c      	ldr	r4, [pc, #48]	; (3bdc <mpsl_clock_hfclk_request+0x34>)
    3bac:	78e1      	ldrb	r1, [r4, #3]
    3bae:	b961      	cbnz	r1, 3bca <mpsl_clock_hfclk_request+0x22>
    3bb0:	2501      	movs	r5, #1
    3bb2:	70e5      	strb	r5, [r4, #3]
    3bb4:	61e0      	str	r0, [r4, #28]
    3bb6:	f7ff ffd5 	bl	3b64 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3bba:	f000 f8c5 	bl	3d48 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3bbe:	b130      	cbz	r0, 3bce <mpsl_clock_hfclk_request+0x26>
    3bc0:	69e0      	ldr	r0, [r4, #28]
    3bc2:	b110      	cbz	r0, 3bca <mpsl_clock_hfclk_request+0x22>
    3bc4:	4780      	blx	r0
    3bc6:	2000      	movs	r0, #0
    3bc8:	61e0      	str	r0, [r4, #28]
    3bca:	2000      	movs	r0, #0
    3bcc:	bd70      	pop	{r4, r5, r6, pc}
    3bce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3bd2:	7125      	strb	r5, [r4, #4]
    3bd4:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3bd8:	e7f7      	b.n	3bca <mpsl_clock_hfclk_request+0x22>
    3bda:	0000      	.short	0x0000
    3bdc:	20000054 	.word	0x20000054

00003be0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3be4:	0005      	movs	r5, r0
    3be6:	f06f 0015 	mvn.w	r0, #21
    3bea:	d03f      	beq.n	3c6c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3bec:	7829      	ldrb	r1, [r5, #0]
    3bee:	2904      	cmp	r1, #4
    3bf0:	d83c      	bhi.n	3c6c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3bf2:	2900      	cmp	r1, #0
    3bf4:	7869      	ldrb	r1, [r5, #1]
    3bf6:	d03b      	beq.n	3c70 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    3bf8:	2900      	cmp	r1, #0
    3bfa:	d137      	bne.n	3c6c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3bfc:	78a9      	ldrb	r1, [r5, #2]
    3bfe:	2900      	cmp	r1, #0
    3c00:	d134      	bne.n	3c6c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3c02:	2000      	movs	r0, #0
    3c04:	f004 fb29 	bl	825a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    3c08:	2000      	movs	r0, #0
    3c0a:	f004 fb19 	bl	8240 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    3c0e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3c12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3c16:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3c1a:	2600      	movs	r6, #0
    3c1c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3c20:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3c24:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3c28:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3c2c:	4c14      	ldr	r4, [pc, #80]	; (3c80 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3c2e:	7066      	strb	r6, [r4, #1]
    3c30:	88a8      	ldrh	r0, [r5, #4]
    3c32:	81a0      	strh	r0, [r4, #12]
    3c34:	f004 fb59 	bl	82ea <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3c38:	2701      	movs	r7, #1
    3c3a:	b108      	cbz	r0, 3c40 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3c3c:	70e7      	strb	r7, [r4, #3]
    3c3e:	7067      	strb	r7, [r4, #1]
    3c40:	2101      	movs	r1, #1
    3c42:	4640      	mov	r0, r8
    3c44:	f004 fb43 	bl	82ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3c48:	b108      	cbz	r0, 3c4e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3c4a:	f000 f877 	bl	3d3c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3c4e:	f240 50f5 	movw	r0, #1525	; 0x5f5
    3c52:	81e0      	strh	r0, [r4, #14]
    3c54:	4628      	mov	r0, r5
    3c56:	f7ff fe97 	bl	3988 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    3c5a:	7267      	strb	r7, [r4, #9]
    3c5c:	2000      	movs	r0, #0
    3c5e:	f004 faef 	bl	8240 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    3c62:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3c66:	4630      	mov	r0, r6
    3c68:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    3c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c70:	2900      	cmp	r1, #0
    3c72:	d0fb      	beq.n	3c6c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3c74:	2920      	cmp	r1, #32
    3c76:	d8f9      	bhi.n	3c6c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3c78:	78a9      	ldrb	r1, [r5, #2]
    3c7a:	2921      	cmp	r1, #33	; 0x21
    3c7c:	d9c1      	bls.n	3c02 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3c7e:	e7f5      	b.n	3c6c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3c80:	20000054 	.word	0x20000054

00003c84 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3c84:	4801      	ldr	r0, [pc, #4]	; (3c8c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3c86:	8980      	ldrh	r0, [r0, #12]
    3c88:	4770      	bx	lr
    3c8a:	0000      	.short	0x0000
    3c8c:	20000054 	.word	0x20000054

00003c90 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3c90:	4802      	ldr	r0, [pc, #8]	; (3c9c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3c92:	7a80      	ldrb	r0, [r0, #10]
    3c94:	2800      	cmp	r0, #0
    3c96:	d000      	beq.n	3c9a <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3c98:	2001      	movs	r0, #1
    3c9a:	4770      	bx	lr
    3c9c:	20000054 	.word	0x20000054

00003ca0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ca2:	4d1f      	ldr	r5, [pc, #124]	; (3d20 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3ca4:	7ae8      	ldrb	r0, [r5, #11]
    3ca6:	2800      	cmp	r0, #0
    3ca8:	d10f      	bne.n	3cca <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3caa:	7e28      	ldrb	r0, [r5, #24]
    3cac:	f000 0003 	and.w	r0, r0, #3
    3cb0:	f004 fb29 	bl	8306 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3cb4:	2800      	cmp	r0, #0
    3cb6:	d008      	beq.n	3cca <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3cb8:	f3ef 8110 	mrs	r1, PRIMASK
    3cbc:	b672      	cpsid	i
    3cbe:	f7ff ffe7 	bl	3c90 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3cc2:	b118      	cbz	r0, 3ccc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3cc4:	2900      	cmp	r1, #0
    3cc6:	d100      	bne.n	3cca <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3cc8:	b662      	cpsie	i
    3cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ccc:	2601      	movs	r6, #1
    3cce:	72ae      	strb	r6, [r5, #10]
    3cd0:	b901      	cbnz	r1, 3cd4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3cd2:	b662      	cpsie	i
    3cd4:	2018      	movs	r0, #24
    3cd6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3cda:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3cde:	61a6      	str	r6, [r4, #24]
    3ce0:	f44f 7020 	mov.w	r0, #640	; 0x280
    3ce4:	f8ad 0000 	strh.w	r0, [sp]
    3ce8:	f8bd 0000 	ldrh.w	r0, [sp]
    3cec:	1e41      	subs	r1, r0, #1
    3cee:	f8ad 1000 	strh.w	r1, [sp]
    3cf2:	d2f9      	bcs.n	3ce8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3cf4:	2700      	movs	r7, #0
    3cf6:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3cfa:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3cfe:	4808      	ldr	r0, [pc, #32]	; (3d20 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3d00:	3008      	adds	r0, #8
    3d02:	f004 fb66 	bl	83d2 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3d06:	702f      	strb	r7, [r5, #0]
    3d08:	f7ff fd98 	bl	383c <MPSL_IRQ_CLOCK_Handler+0x88>
    3d0c:	6166      	str	r6, [r4, #20]
    3d0e:	7968      	ldrb	r0, [r5, #5]
    3d10:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3d14:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3d18:	2018      	movs	r0, #24
    3d1a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d20:	20000054 	.word	0x20000054

00003d24 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3d24:	b510      	push	{r4, lr}
    3d26:	4c04      	ldr	r4, [pc, #16]	; (3d38 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3d28:	7e20      	ldrb	r0, [r4, #24]
    3d2a:	f000 0003 	and.w	r0, r0, #3
    3d2e:	f004 faea 	bl	8306 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3d32:	2800      	cmp	r0, #0
    3d34:	d0f8      	beq.n	3d28 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3d36:	bd10      	pop	{r4, pc}
    3d38:	20000054 	.word	0x20000054

00003d3c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3d3c:	4901      	ldr	r1, [pc, #4]	; (3d44 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3d3e:	2001      	movs	r0, #1
    3d40:	7008      	strb	r0, [r1, #0]
    3d42:	4770      	bx	lr
    3d44:	20000179 	.word	0x20000179

00003d48 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3d48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3d4c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3d50:	b918      	cbnz	r0, 3d5a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    3d52:	4803      	ldr	r0, [pc, #12]	; (3d60 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3d54:	7800      	ldrb	r0, [r0, #0]
    3d56:	2800      	cmp	r0, #0
    3d58:	d000      	beq.n	3d5c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3d5a:	2001      	movs	r0, #1
    3d5c:	4770      	bx	lr
    3d5e:	0000      	.short	0x0000
    3d60:	20000179 	.word	0x20000179

00003d64 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3d64:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3d68:	2101      	movs	r1, #1
    3d6a:	6041      	str	r1, [r0, #4]
    3d6c:	2100      	movs	r1, #0
    3d6e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3d72:	4801      	ldr	r0, [pc, #4]	; (3d78 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3d74:	7001      	strb	r1, [r0, #0]
    3d76:	4770      	bx	lr
    3d78:	20000179 	.word	0x20000179

00003d7c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3d7c:	4802      	ldr	r0, [pc, #8]	; (3d88 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3d7e:	6800      	ldr	r0, [r0, #0]
    3d80:	f000 0003 	and.w	r0, r0, #3
    3d84:	4770      	bx	lr
    3d86:	0000      	.short	0x0000
    3d88:	4000041c 	.word	0x4000041c
    3d8c:	b510      	push	{r4, lr}
    3d8e:	b131      	cbz	r1, 3d9e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3d90:	2901      	cmp	r1, #1
    3d92:	d007      	beq.n	3da4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3d94:	f240 3102 	movw	r1, #770	; 0x302
    3d98:	a005      	add	r0, pc, #20	; (adr r0, 3db0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3d9a:	f000 f821 	bl	3de0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3d9e:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3da2:	e001      	b.n	3da8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3da4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3da8:	f000 0001 	and.w	r0, r0, #1
    3dac:	bd10      	pop	{r4, pc}
    3dae:	0000      	.short	0x0000
    3db0:	5f66726e 	.word	0x5f66726e
    3db4:	636f6c63 	.word	0x636f6c63
    3db8:	00682e6b 	.word	0x00682e6b
    3dbc:	f3bf 8f4f 	dsb	sy
    3dc0:	4805      	ldr	r0, [pc, #20]	; (3dd8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    3dc2:	6801      	ldr	r1, [r0, #0]
    3dc4:	4a05      	ldr	r2, [pc, #20]	; (3ddc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3dc6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3dca:	4311      	orrs	r1, r2
    3dcc:	6001      	str	r1, [r0, #0]
    3dce:	f3bf 8f4f 	dsb	sy
    3dd2:	bf00      	nop
    3dd4:	e7fd      	b.n	3dd2 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3dd6:	0000      	.short	0x0000
    3dd8:	e000ed0c 	.word	0xe000ed0c
    3ddc:	05fa0004 	.word	0x05fa0004

00003de0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3de0:	b672      	cpsid	i
    3de2:	4a03      	ldr	r2, [pc, #12]	; (3df0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3de4:	6852      	ldr	r2, [r2, #4]
    3de6:	b102      	cbz	r2, 3dea <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3de8:	4790      	blx	r2
    3dea:	f7ff ffe7 	bl	3dbc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3dee:	0000      	.short	0x0000
    3df0:	20000074 	.word	0x20000074
    3df4:	4806      	ldr	r0, [pc, #24]	; (3e10 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    3df6:	b510      	push	{r4, lr}
    3df8:	2100      	movs	r1, #0
    3dfa:	6001      	str	r1, [r0, #0]
    3dfc:	2101      	movs	r1, #1
    3dfe:	6001      	str	r1, [r0, #0]
    3e00:	4608      	mov	r0, r1
    3e02:	f004 faa7 	bl	8354 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e0a:	2001      	movs	r0, #1
    3e0c:	f004 ba95 	b.w	833a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3e10:	40001ffc 	.word	0x40001ffc
    3e14:	4807      	ldr	r0, [pc, #28]	; (3e34 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    3e16:	b510      	push	{r4, lr}
    3e18:	2101      	movs	r1, #1
    3e1a:	6041      	str	r1, [r0, #4]
    3e1c:	1e89      	subs	r1, r1, #2
    3e1e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3e22:	200c      	movs	r0, #12
    3e24:	f004 fa96 	bl	8354 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e2c:	200c      	movs	r0, #12
    3e2e:	f004 ba84 	b.w	833a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3e32:	0000      	.short	0x0000
    3e34:	4000c000 	.word	0x4000c000

00003e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3e38:	b50e      	push	{r1, r2, r3, lr}
    3e3a:	b672      	cpsid	i
    3e3c:	4a0f      	ldr	r2, [pc, #60]	; (3e7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3e3e:	6855      	ldr	r5, [r2, #4]
    3e40:	b1d5      	cbz	r5, 3e78 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    3e42:	2200      	movs	r2, #0
    3e44:	4603      	mov	r3, r0
    3e46:	466e      	mov	r6, sp
    3e48:	240a      	movs	r4, #10
    3e4a:	e003      	b.n	3e54 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    3e4c:	fbb0 f0f4 	udiv	r0, r0, r4
    3e50:	1c52      	adds	r2, r2, #1
    3e52:	b2d2      	uxtb	r2, r2
    3e54:	2800      	cmp	r0, #0
    3e56:	d1f9      	bne.n	3e4c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    3e58:	54b0      	strb	r0, [r6, r2]
    3e5a:	e009      	b.n	3e70 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3e5c:	fbb3 f0f4 	udiv	r0, r3, r4
    3e60:	fb04 3010 	mls	r0, r4, r0, r3
    3e64:	fbb3 f3f4 	udiv	r3, r3, r4
    3e68:	1e52      	subs	r2, r2, #1
    3e6a:	b2d2      	uxtb	r2, r2
    3e6c:	3030      	adds	r0, #48	; 0x30
    3e6e:	54b0      	strb	r0, [r6, r2]
    3e70:	2a00      	cmp	r2, #0
    3e72:	d1f3      	bne.n	3e5c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3e74:	4630      	mov	r0, r6
    3e76:	47a8      	blx	r5
    3e78:	f7ff ffa0 	bl	3dbc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3e7c:	20000074 	.word	0x20000074

00003e80 <mpsl_init>:
    3e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e84:	4c18      	ldr	r4, [pc, #96]	; (3ee8 <mpsl_init+0x68>)
    3e86:	4606      	mov	r6, r0
    3e88:	4617      	mov	r7, r2
    3e8a:	7860      	ldrb	r0, [r4, #1]
    3e8c:	460d      	mov	r5, r1
    3e8e:	b118      	cbz	r0, 3e98 <mpsl_init+0x18>
    3e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e98:	f7fc fd1c 	bl	8d4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    3e9c:	b906      	cbnz	r6, 3ea0 <mpsl_init+0x20>
    3e9e:	4e13      	ldr	r6, [pc, #76]	; (3eec <mpsl_init+0x6c>)
    3ea0:	6067      	str	r7, [r4, #4]
    3ea2:	7025      	strb	r5, [r4, #0]
    3ea4:	f7ff ffa6 	bl	3df4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    3ea8:	f7ff ffb4 	bl	3e14 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    3eac:	4630      	mov	r0, r6
    3eae:	f7ff fe97 	bl	3be0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3eb2:	0006      	movs	r6, r0
    3eb4:	d1ee      	bne.n	3e94 <mpsl_init+0x14>
    3eb6:	f7fe fee7 	bl	2c88 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3eba:	f7ff fef1 	bl	3ca0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3ebe:	f004 f98e 	bl	81de <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3ec2:	4628      	mov	r0, r5
    3ec4:	f004 fa39 	bl	833a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3ec8:	2001      	movs	r0, #1
    3eca:	2d00      	cmp	r5, #0
    3ecc:	db09      	blt.n	3ee2 <mpsl_init+0x62>
    3ece:	f005 011f 	and.w	r1, r5, #31
    3ed2:	fa00 f101 	lsl.w	r1, r0, r1
    3ed6:	096a      	lsrs	r2, r5, #5
    3ed8:	0092      	lsls	r2, r2, #2
    3eda:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3ede:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3ee2:	7060      	strb	r0, [r4, #1]
    3ee4:	4630      	mov	r0, r6
    3ee6:	e7d5      	b.n	3e94 <mpsl_init+0x14>
    3ee8:	20000074 	.word	0x20000074
    3eec:	00008376 	.word	0x00008376

00003ef0 <mpsl_is_initialized>:
    3ef0:	4801      	ldr	r0, [pc, #4]	; (3ef8 <mpsl_is_initialized+0x8>)
    3ef2:	7840      	ldrb	r0, [r0, #1]
    3ef4:	4770      	bx	lr
    3ef6:	0000      	.short	0x0000
    3ef8:	20000074 	.word	0x20000074

00003efc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3efc:	4807      	ldr	r0, [pc, #28]	; (3f1c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    3efe:	f990 0000 	ldrsb.w	r0, [r0]
    3f02:	2800      	cmp	r0, #0
    3f04:	db09      	blt.n	3f1a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3f06:	f000 021f 	and.w	r2, r0, #31
    3f0a:	2101      	movs	r1, #1
    3f0c:	4091      	lsls	r1, r2
    3f0e:	0940      	lsrs	r0, r0, #5
    3f10:	0080      	lsls	r0, r0, #2
    3f12:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3f16:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3f1a:	4770      	bx	lr
    3f1c:	20000074 	.word	0x20000074

00003f20 <mpsl_temperature_get>:
    3f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f24:	2601      	movs	r6, #1
    3f26:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3f2a:	0331      	lsls	r1, r6, #12
    3f2c:	f04f 0800 	mov.w	r8, #0
    3f30:	4640      	mov	r0, r8
    3f32:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    3f36:	f3bf 8f4f 	dsb	sy
    3f3a:	f3bf 8f6f 	isb	sy
    3f3e:	4c16      	ldr	r4, [pc, #88]	; (3f98 <mpsl_temperature_get+0x78>)
    3f40:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    3f44:	200c      	movs	r0, #12
    3f46:	f004 fa24 	bl	8392 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3f4a:	4d14      	ldr	r5, [pc, #80]	; (3f9c <mpsl_temperature_get+0x7c>)
    3f4c:	6828      	ldr	r0, [r5, #0]
    3f4e:	43c0      	mvns	r0, r0
    3f50:	f340 1700 	sbfx	r7, r0, #4, #1
    3f54:	6828      	ldr	r0, [r5, #0]
    3f56:	f040 0010 	orr.w	r0, r0, #16
    3f5a:	6028      	str	r0, [r5, #0]
    3f5c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3f60:	6026      	str	r6, [r4, #0]
    3f62:	1c7f      	adds	r7, r7, #1
    3f64:	e002      	b.n	3f6c <mpsl_temperature_get+0x4c>
    3f66:	bf00      	nop
    3f68:	f000 f8a0 	bl	40ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3f6c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3f70:	2800      	cmp	r0, #0
    3f72:	d0f9      	beq.n	3f68 <mpsl_temperature_get+0x48>
    3f74:	b91f      	cbnz	r7, 3f7e <mpsl_temperature_get+0x5e>
    3f76:	6828      	ldr	r0, [r5, #0]
    3f78:	f020 0010 	bic.w	r0, r0, #16
    3f7c:	6028      	str	r0, [r5, #0]
    3f7e:	4808      	ldr	r0, [pc, #32]	; (3fa0 <mpsl_temperature_get+0x80>)
    3f80:	6805      	ldr	r5, [r0, #0]
    3f82:	6066      	str	r6, [r4, #4]
    3f84:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3f88:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3f8c:	200c      	movs	r0, #12
    3f8e:	f004 fa00 	bl	8392 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3f92:	4628      	mov	r0, r5
    3f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f98:	4000c000 	.word	0x4000c000
    3f9c:	e000ed10 	.word	0xe000ed10
    3fa0:	4000c508 	.word	0x4000c508

00003fa4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3fa4:	b510      	push	{r4, lr}
    3fa6:	4602      	mov	r2, r0
    3fa8:	2005      	movs	r0, #5
    3faa:	490c      	ldr	r1, [pc, #48]	; (3fdc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3fac:	e004      	b.n	3fb8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    3fae:	bf00      	nop
    3fb0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3fb4:	791b      	ldrb	r3, [r3, #4]
    3fb6:	b133      	cbz	r3, 3fc6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3fb8:	1e40      	subs	r0, r0, #1
    3fba:	b2c0      	uxtb	r0, r0
    3fbc:	d2f8      	bcs.n	3fb0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    3fbe:	2148      	movs	r1, #72	; 0x48
    3fc0:	2069      	movs	r0, #105	; 0x69
    3fc2:	f7ff ff39 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3fc6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3fca:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    3fce:	2200      	movs	r2, #0
    3fd0:	714a      	strb	r2, [r1, #5]
    3fd2:	718a      	strb	r2, [r1, #6]
    3fd4:	2201      	movs	r2, #1
    3fd6:	710a      	strb	r2, [r1, #4]
    3fd8:	bd10      	pop	{r4, pc}
    3fda:	0000      	.short	0x0000
    3fdc:	20000aec 	.word	0x20000aec

00003fe0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3fe0:	b510      	push	{r4, lr}
    3fe2:	2805      	cmp	r0, #5
    3fe4:	d301      	bcc.n	3fea <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3fe6:	2158      	movs	r1, #88	; 0x58
    3fe8:	e006      	b.n	3ff8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3fea:	490a      	ldr	r1, [pc, #40]	; (4014 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3fec:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3ff0:	7901      	ldrb	r1, [r0, #4]
    3ff2:	2901      	cmp	r1, #1
    3ff4:	d003      	beq.n	3ffe <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3ff6:	2159      	movs	r1, #89	; 0x59
    3ff8:	2069      	movs	r0, #105	; 0x69
    3ffa:	f7ff ff1d 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ffe:	7941      	ldrb	r1, [r0, #5]
    4000:	7982      	ldrb	r2, [r0, #6]
    4002:	1c49      	adds	r1, r1, #1
    4004:	b2c9      	uxtb	r1, r1
    4006:	428a      	cmp	r2, r1
    4008:	d000      	beq.n	400c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    400a:	7141      	strb	r1, [r0, #5]
    400c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4010:	f7ff bf74 	b.w	3efc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4014:	20000aec 	.word	0x20000aec

00004018 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    4018:	b510      	push	{r4, lr}
    401a:	2805      	cmp	r0, #5
    401c:	d303      	bcc.n	4026 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    401e:	214f      	movs	r1, #79	; 0x4f
    4020:	2069      	movs	r0, #105	; 0x69
    4022:	f7ff ff09 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4026:	4a03      	ldr	r2, [pc, #12]	; (4034 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    4028:	2100      	movs	r1, #0
    402a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    402e:	7101      	strb	r1, [r0, #4]
    4030:	bd10      	pop	{r4, pc}
    4032:	0000      	.short	0x0000
    4034:	20000aec 	.word	0x20000aec

00004038 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4038:	b570      	push	{r4, r5, r6, lr}
    403a:	2505      	movs	r5, #5
    403c:	4e0e      	ldr	r6, [pc, #56]	; (4078 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    403e:	4c0f      	ldr	r4, [pc, #60]	; (407c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4040:	e016      	b.n	4070 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4042:	7821      	ldrb	r1, [r4, #0]
    4044:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4048:	7902      	ldrb	r2, [r0, #4]
    404a:	2a01      	cmp	r2, #1
    404c:	d108      	bne.n	4060 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    404e:	7942      	ldrb	r2, [r0, #5]
    4050:	7983      	ldrb	r3, [r0, #6]
    4052:	429a      	cmp	r2, r3
    4054:	d004      	beq.n	4060 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4056:	7942      	ldrb	r2, [r0, #5]
    4058:	7182      	strb	r2, [r0, #6]
    405a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    405e:	4780      	blx	r0
    4060:	7820      	ldrb	r0, [r4, #0]
    4062:	1c40      	adds	r0, r0, #1
    4064:	b2c0      	uxtb	r0, r0
    4066:	7020      	strb	r0, [r4, #0]
    4068:	2805      	cmp	r0, #5
    406a:	d301      	bcc.n	4070 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    406c:	2000      	movs	r0, #0
    406e:	7020      	strb	r0, [r4, #0]
    4070:	1e6d      	subs	r5, r5, #1
    4072:	b2ed      	uxtb	r5, r5
    4074:	d2e5      	bcs.n	4042 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    4076:	bd70      	pop	{r4, r5, r6, pc}
    4078:	20000aec 	.word	0x20000aec
    407c:	2000017a 	.word	0x2000017a

00004080 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    4080:	b500      	push	{lr}
    4082:	f004 f9b5 	bl	83f0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4086:	b940      	cbnz	r0, 409a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4088:	f004 f9bc 	bl	8404 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    408c:	b928      	cbnz	r0, 409a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    408e:	f004 f9d0 	bl	8432 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4092:	b910      	cbnz	r0, 409a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4094:	f004 f9e1 	bl	845a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4098:	b108      	cbz	r0, 409e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    409a:	4802      	ldr	r0, [pc, #8]	; (40a4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    409c:	bd00      	pop	{pc}
    409e:	4802      	ldr	r0, [pc, #8]	; (40a8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    40a0:	bd00      	pop	{pc}
    40a2:	0000      	.short	0x0000
    40a4:	4000050c 	.word	0x4000050c
    40a8:	4001e700 	.word	0x4001e700

000040ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    40ac:	b510      	push	{r4, lr}
    40ae:	f004 f9d4 	bl	845a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    40b2:	b330      	cbz	r0, 4102 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    40b4:	f3ef 8010 	mrs	r0, PRIMASK
    40b8:	b1c8      	cbz	r0, 40ee <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    40ba:	2100      	movs	r1, #0
    40bc:	b672      	cpsid	i
    40be:	4812      	ldr	r0, [pc, #72]	; (4108 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    40c0:	6802      	ldr	r2, [r0, #0]
    40c2:	6803      	ldr	r3, [r0, #0]
    40c4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    40c8:	f043 0310 	orr.w	r3, r3, #16
    40cc:	6003      	str	r3, [r0, #0]
    40ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    40d2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    40d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    40da:	431c      	orrs	r4, r3
    40dc:	d000      	beq.n	40e0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    40de:	bf40      	sev
    40e0:	bf20      	wfe
    40e2:	bf00      	nop
    40e4:	bf00      	nop
    40e6:	bf00      	nop
    40e8:	bf00      	nop
    40ea:	b112      	cbz	r2, 40f2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    40ec:	e005      	b.n	40fa <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    40ee:	2101      	movs	r1, #1
    40f0:	e7e4      	b.n	40bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    40f2:	6802      	ldr	r2, [r0, #0]
    40f4:	f022 0210 	bic.w	r2, r2, #16
    40f8:	6002      	str	r2, [r0, #0]
    40fa:	2900      	cmp	r1, #0
    40fc:	d000      	beq.n	4100 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    40fe:	b662      	cpsie	i
    4100:	bd10      	pop	{r4, pc}
    4102:	bf20      	wfe
    4104:	bd10      	pop	{r4, pc}
    4106:	0000      	.short	0x0000
    4108:	e000ed10 	.word	0xe000ed10

0000410c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    410c:	4901      	ldr	r1, [pc, #4]	; (4114 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    410e:	2001      	movs	r0, #1
    4110:	7088      	strb	r0, [r1, #2]
    4112:	4770      	bx	lr
    4114:	2000007c 	.word	0x2000007c

00004118 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4118:	000086a7 000086df 000086c9 000086b7     ................
    4128:	000086c3 000086b1 000086a5 000086a3     ................
    4138:	000086db 000086cf 000086bd 000086ab     ................
    4148:	0000869d 00008695 00008699 0000868f     ................

00004158 <mpsl_fem_disable>:
    4158:	4801      	ldr	r0, [pc, #4]	; (4160 <mpsl_fem_disable+0x8>)
    415a:	6800      	ldr	r0, [r0, #0]
    415c:	6800      	ldr	r0, [r0, #0]
    415e:	4700      	bx	r0
    4160:	20000090 	.word	0x20000090

00004164 <mpsl_fem_lna_configuration_clear>:
    4164:	4801      	ldr	r0, [pc, #4]	; (416c <mpsl_fem_lna_configuration_clear+0x8>)
    4166:	6800      	ldr	r0, [r0, #0]
    4168:	6940      	ldr	r0, [r0, #20]
    416a:	4700      	bx	r0
    416c:	20000090 	.word	0x20000090

00004170 <mpsl_fem_lna_configuration_set>:
    4170:	4a01      	ldr	r2, [pc, #4]	; (4178 <mpsl_fem_lna_configuration_set+0x8>)
    4172:	6812      	ldr	r2, [r2, #0]
    4174:	68d2      	ldr	r2, [r2, #12]
    4176:	4710      	bx	r2
    4178:	20000090 	.word	0x20000090

0000417c <mpsl_fem_lna_is_configured>:
    417c:	4901      	ldr	r1, [pc, #4]	; (4184 <mpsl_fem_lna_is_configured+0x8>)
    417e:	6809      	ldr	r1, [r1, #0]
    4180:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4182:	4708      	bx	r1
    4184:	20000090 	.word	0x20000090

00004188 <mpsl_fem_pa_configuration_clear>:
    4188:	4801      	ldr	r0, [pc, #4]	; (4190 <mpsl_fem_pa_configuration_clear+0x8>)
    418a:	6800      	ldr	r0, [r0, #0]
    418c:	6900      	ldr	r0, [r0, #16]
    418e:	4700      	bx	r0
    4190:	20000090 	.word	0x20000090

00004194 <mpsl_fem_pa_configuration_set>:
    4194:	4a01      	ldr	r2, [pc, #4]	; (419c <mpsl_fem_pa_configuration_set+0x8>)
    4196:	6812      	ldr	r2, [r2, #0]
    4198:	6892      	ldr	r2, [r2, #8]
    419a:	4710      	bx	r2
    419c:	20000090 	.word	0x20000090

000041a0 <mpsl_fem_pa_gain_set>:
    41a0:	4901      	ldr	r1, [pc, #4]	; (41a8 <mpsl_fem_pa_gain_set+0x8>)
    41a2:	6809      	ldr	r1, [r1, #0]
    41a4:	6a49      	ldr	r1, [r1, #36]	; 0x24
    41a6:	4708      	bx	r1
    41a8:	20000090 	.word	0x20000090

000041ac <mpsl_fem_pa_is_configured>:
    41ac:	4901      	ldr	r1, [pc, #4]	; (41b4 <mpsl_fem_pa_is_configured+0x8>)
    41ae:	6809      	ldr	r1, [r1, #0]
    41b0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    41b2:	4708      	bx	r1
    41b4:	20000090 	.word	0x20000090

000041b8 <mpsl_fem_tx_power_split>:
    41b8:	4b01      	ldr	r3, [pc, #4]	; (41c0 <mpsl_fem_tx_power_split+0x8>)
    41ba:	681b      	ldr	r3, [r3, #0]
    41bc:	685b      	ldr	r3, [r3, #4]
    41be:	4718      	bx	r3
    41c0:	20000090 	.word	0x20000090

000041c4 <mpsl_fem_device_config_254_apply_get>:
    41c4:	4801      	ldr	r0, [pc, #4]	; (41cc <mpsl_fem_device_config_254_apply_get+0x8>)
    41c6:	7800      	ldrb	r0, [r0, #0]
    41c8:	4770      	bx	lr
    41ca:	0000      	.short	0x0000
    41cc:	2000017b 	.word	0x2000017b
    41d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    41d2:	4c14      	ldr	r4, [pc, #80]	; (4224 <mpsl_fem_device_config_254_apply_get+0x60>)
    41d4:	7a20      	ldrb	r0, [r4, #8]
    41d6:	f88d 0001 	strb.w	r0, [sp, #1]
    41da:	79e0      	ldrb	r0, [r4, #7]
    41dc:	f88d 0000 	strb.w	r0, [sp]
    41e0:	79a0      	ldrb	r0, [r4, #6]
    41e2:	f8ad 0004 	strh.w	r0, [sp, #4]
    41e6:	7960      	ldrb	r0, [r4, #5]
    41e8:	f8ad 0002 	strh.w	r0, [sp, #2]
    41ec:	4668      	mov	r0, sp
    41ee:	f002 fba7 	bl	6940 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    41f2:	b108      	cbz	r0, 41f8 <mpsl_fem_device_config_254_apply_get+0x34>
    41f4:	2190      	movs	r1, #144	; 0x90
    41f6:	e010      	b.n	421a <mpsl_fem_device_config_254_apply_get+0x56>
    41f8:	68e0      	ldr	r0, [r4, #12]
    41fa:	9002      	str	r0, [sp, #8]
    41fc:	a802      	add	r0, sp, #8
    41fe:	f002 fbb5 	bl	696c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4202:	b108      	cbz	r0, 4208 <mpsl_fem_device_config_254_apply_get+0x44>
    4204:	2194      	movs	r1, #148	; 0x94
    4206:	e008      	b.n	421a <mpsl_fem_device_config_254_apply_get+0x56>
    4208:	4807      	ldr	r0, [pc, #28]	; (4228 <mpsl_fem_device_config_254_apply_get+0x64>)
    420a:	6800      	ldr	r0, [r0, #0]
    420c:	9003      	str	r0, [sp, #12]
    420e:	a803      	add	r0, sp, #12
    4210:	f006 f935 	bl	a47e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4214:	2800      	cmp	r0, #0
    4216:	d003      	beq.n	4220 <mpsl_fem_device_config_254_apply_get+0x5c>
    4218:	2198      	movs	r1, #152	; 0x98
    421a:	2003      	movs	r0, #3
    421c:	f000 f8ea 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4220:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4222:	0000      	.short	0x0000
    4224:	20000b14 	.word	0x20000b14
    4228:	0000447c 	.word	0x0000447c

0000422c <sdc_build_revision_get>:
    422c:	b510      	push	{r4, lr}
    422e:	b128      	cbz	r0, 423c <sdc_build_revision_get+0x10>
    4230:	2214      	movs	r2, #20
    4232:	4904      	ldr	r1, [pc, #16]	; (4244 <sdc_build_revision_get+0x18>)
    4234:	f004 f951 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4238:	2000      	movs	r0, #0
    423a:	bd10      	pop	{r4, pc}
    423c:	f06f 0015 	mvn.w	r0, #21
    4240:	bd10      	pop	{r4, pc}
    4242:	0000      	.short	0x0000
    4244:	000044a0 	.word	0x000044a0

00004248 <sdc_cfg_set>:
    4248:	b570      	push	{r4, r5, r6, lr}
    424a:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    424e:	bb90      	cbnz	r0, 42b6 <sdc_cfg_set+0x6e>
    4250:	4c24      	ldr	r4, [pc, #144]	; (42e4 <sdc_cfg_set+0x9c>)
    4252:	7860      	ldrb	r0, [r4, #1]
    4254:	b108      	cbz	r0, 425a <sdc_cfg_set+0x12>
    4256:	1198      	asrs	r0, r3, #6
    4258:	bd70      	pop	{r4, r5, r6, pc}
    425a:	b309      	cbz	r1, 42a0 <sdc_cfg_set+0x58>
    425c:	f06f 0515 	mvn.w	r5, #21
    4260:	b33a      	cbz	r2, 42b2 <sdc_cfg_set+0x6a>
    4262:	4821      	ldr	r0, [pc, #132]	; (42e8 <sdc_cfg_set+0xa0>)
    4264:	2908      	cmp	r1, #8
    4266:	d237      	bcs.n	42d8 <sdc_cfg_set+0x90>
    4268:	e8df f001 	tbb	[pc, r1]
    426c:	0a070436 	.word	0x0a070436
    4270:	291e1b18 	.word	0x291e1b18
    4274:	7811      	ldrb	r1, [r2, #0]
    4276:	7001      	strb	r1, [r0, #0]
    4278:	e023      	b.n	42c2 <sdc_cfg_set+0x7a>
    427a:	7811      	ldrb	r1, [r2, #0]
    427c:	7041      	strb	r1, [r0, #1]
    427e:	e020      	b.n	42c2 <sdc_cfg_set+0x7a>
    4280:	7891      	ldrb	r1, [r2, #2]
    4282:	b1b1      	cbz	r1, 42b2 <sdc_cfg_set+0x6a>
    4284:	78d1      	ldrb	r1, [r2, #3]
    4286:	b1a1      	cbz	r1, 42b2 <sdc_cfg_set+0x6a>
    4288:	7811      	ldrb	r1, [r2, #0]
    428a:	291b      	cmp	r1, #27
    428c:	d311      	bcc.n	42b2 <sdc_cfg_set+0x6a>
    428e:	7851      	ldrb	r1, [r2, #1]
    4290:	291b      	cmp	r1, #27
    4292:	d30e      	bcc.n	42b2 <sdc_cfg_set+0x6a>
    4294:	6811      	ldr	r1, [r2, #0]
    4296:	f8c0 1005 	str.w	r1, [r0, #5]
    429a:	e012      	b.n	42c2 <sdc_cfg_set+0x7a>
    429c:	6811      	ldr	r1, [r2, #0]
    429e:	60c1      	str	r1, [r0, #12]
    42a0:	e00f      	b.n	42c2 <sdc_cfg_set+0x7a>
    42a2:	7811      	ldrb	r1, [r2, #0]
    42a4:	7081      	strb	r1, [r0, #2]
    42a6:	e00c      	b.n	42c2 <sdc_cfg_set+0x7a>
    42a8:	78e1      	ldrb	r1, [r4, #3]
    42aa:	b129      	cbz	r1, 42b8 <sdc_cfg_set+0x70>
    42ac:	7811      	ldrb	r1, [r2, #0]
    42ae:	2902      	cmp	r1, #2
    42b0:	d202      	bcs.n	42b8 <sdc_cfg_set+0x70>
    42b2:	4628      	mov	r0, r5
    42b4:	bd70      	pop	{r4, r5, r6, pc}
    42b6:	e00f      	b.n	42d8 <sdc_cfg_set+0x90>
    42b8:	7811      	ldrb	r1, [r2, #0]
    42ba:	7401      	strb	r1, [r0, #16]
    42bc:	e001      	b.n	42c2 <sdc_cfg_set+0x7a>
    42be:	8811      	ldrh	r1, [r2, #0]
    42c0:	8241      	strh	r1, [r0, #18]
    42c2:	2201      	movs	r2, #1
    42c4:	4908      	ldr	r1, [pc, #32]	; (42e8 <sdc_cfg_set+0xa0>)
    42c6:	2000      	movs	r0, #0
    42c8:	f004 fa25 	bl	8716 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    42cc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    42d0:	db04      	blt.n	42dc <sdc_cfg_set+0x94>
    42d2:	f06f 000b 	mvn.w	r0, #11
    42d6:	e7ed      	b.n	42b4 <sdc_cfg_set+0x6c>
    42d8:	4618      	mov	r0, r3
    42da:	e7eb      	b.n	42b4 <sdc_cfg_set+0x6c>
    42dc:	2101      	movs	r1, #1
    42de:	70a1      	strb	r1, [r4, #2]
    42e0:	e7e8      	b.n	42b4 <sdc_cfg_set+0x6c>
    42e2:	0000      	.short	0x0000
    42e4:	20000094 	.word	0x20000094
    42e8:	20000b14 	.word	0x20000b14

000042ec <sdc_disable>:
    42ec:	b510      	push	{r4, lr}
    42ee:	4c07      	ldr	r4, [pc, #28]	; (430c <sdc_disable+0x20>)
    42f0:	7860      	ldrb	r0, [r4, #1]
    42f2:	b120      	cbz	r0, 42fe <sdc_disable+0x12>
    42f4:	f002 fd48 	bl	6d88 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    42f8:	7820      	ldrb	r0, [r4, #0]
    42fa:	f7ff fe8d 	bl	4018 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    42fe:	f000 fd29 	bl	4d54 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    4302:	f000 fe03 	bl	4f0c <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    4306:	2000      	movs	r0, #0
    4308:	7060      	strb	r0, [r4, #1]
    430a:	bd10      	pop	{r4, pc}
    430c:	20000094 	.word	0x20000094

00004310 <sdc_enable>:
    4310:	b570      	push	{r4, r5, r6, lr}
    4312:	460c      	mov	r4, r1
    4314:	0005      	movs	r5, r0
    4316:	d019      	beq.n	434c <sdc_enable+0x3c>
    4318:	b1c4      	cbz	r4, 434c <sdc_enable+0x3c>
    431a:	f000 f8e7 	bl	44ec <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    431e:	b1c0      	cbz	r0, 4352 <sdc_enable+0x42>
    4320:	4628      	mov	r0, r5
    4322:	f7ff fe3f 	bl	3fa4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4326:	4d0c      	ldr	r5, [pc, #48]	; (4358 <sdc_enable+0x48>)
    4328:	2200      	movs	r2, #0
    432a:	490c      	ldr	r1, [pc, #48]	; (435c <sdc_enable+0x4c>)
    432c:	7028      	strb	r0, [r5, #0]
    432e:	4620      	mov	r0, r4
    4330:	f004 f9f1 	bl	8716 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    4334:	f006 fbad 	bl	aa92 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4338:	2100      	movs	r1, #0
    433a:	7828      	ldrb	r0, [r5, #0]
    433c:	f002 fd14 	bl	6d68 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4340:	f7ff ff46 	bl	41d0 <mpsl_fem_device_config_254_apply_get+0xc>
    4344:	2001      	movs	r0, #1
    4346:	7068      	strb	r0, [r5, #1]
    4348:	2000      	movs	r0, #0
    434a:	bd70      	pop	{r4, r5, r6, pc}
    434c:	f06f 0015 	mvn.w	r0, #21
    4350:	bd70      	pop	{r4, r5, r6, pc}
    4352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4356:	bd70      	pop	{r4, r5, r6, pc}
    4358:	20000094 	.word	0x20000094
    435c:	20000b14 	.word	0x20000b14

00004360 <sdc_init>:
    4360:	b530      	push	{r4, r5, lr}
    4362:	b089      	sub	sp, #36	; 0x24
    4364:	0005      	movs	r5, r0
    4366:	d00c      	beq.n	4382 <sdc_init+0x22>
    4368:	f7ff fdc2 	bl	3ef0 <mpsl_is_initialized>
    436c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    4370:	b120      	cbz	r0, 437c <sdc_init+0x1c>
    4372:	f7ff fc87 	bl	3c84 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4376:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    437a:	d905      	bls.n	4388 <sdc_init+0x28>
    437c:	4620      	mov	r0, r4
    437e:	b009      	add	sp, #36	; 0x24
    4380:	bd30      	pop	{r4, r5, pc}
    4382:	f06f 0015 	mvn.w	r0, #21
    4386:	e7fa      	b.n	437e <sdc_init+0x1e>
    4388:	4c15      	ldr	r4, [pc, #84]	; (43e0 <sdc_init+0x80>)
    438a:	4816      	ldr	r0, [pc, #88]	; (43e4 <sdc_init+0x84>)
    438c:	6065      	str	r5, [r4, #4]
    438e:	f000 f9c3 	bl	4718 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4392:	2000      	movs	r0, #0
    4394:	7060      	strb	r0, [r4, #1]
    4396:	70a0      	strb	r0, [r4, #2]
    4398:	70e0      	strb	r0, [r4, #3]
    439a:	4601      	mov	r1, r0
    439c:	2220      	movs	r2, #32
    439e:	4668      	mov	r0, sp
    43a0:	f004 f915 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    43a4:	2220      	movs	r2, #32
    43a6:	4910      	ldr	r1, [pc, #64]	; (43e8 <sdc_init+0x88>)
    43a8:	4668      	mov	r0, sp
    43aa:	f004 f896 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    43ae:	2220      	movs	r2, #32
    43b0:	4669      	mov	r1, sp
    43b2:	480e      	ldr	r0, [pc, #56]	; (43ec <sdc_init+0x8c>)
    43b4:	f004 f891 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    43b8:	f3ef 8410 	mrs	r4, PRIMASK
    43bc:	b672      	cpsid	i
    43be:	f06f 000c 	mvn.w	r0, #12
    43c2:	f000 fcd5 	bl	4d70 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    43c6:	480a      	ldr	r0, [pc, #40]	; (43f0 <sdc_init+0x90>)
    43c8:	f000 fdac 	bl	4f24 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    43cc:	b118      	cbz	r0, 43d6 <sdc_init+0x76>
    43ce:	21ab      	movs	r1, #171	; 0xab
    43d0:	2003      	movs	r0, #3
    43d2:	f000 f80f 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43d6:	b904      	cbnz	r4, 43da <sdc_init+0x7a>
    43d8:	b662      	cpsie	i
    43da:	2000      	movs	r0, #0
    43dc:	e7cf      	b.n	437e <sdc_init+0x1e>
    43de:	0000      	.short	0x0000
    43e0:	20000094 	.word	0x20000094
    43e4:	000041d1 	.word	0x000041d1
    43e8:	00004480 	.word	0x00004480
    43ec:	20000b14 	.word	0x20000b14
    43f0:	00004519 	.word	0x00004519

000043f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    43f4:	b50e      	push	{r1, r2, r3, lr}
    43f6:	b672      	cpsid	i
    43f8:	4a15      	ldr	r2, [pc, #84]	; (4450 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    43fa:	6855      	ldr	r5, [r2, #4]
    43fc:	b1dd      	cbz	r5, 4436 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    43fe:	2200      	movs	r2, #0
    4400:	4603      	mov	r3, r0
    4402:	466e      	mov	r6, sp
    4404:	240a      	movs	r4, #10
    4406:	e003      	b.n	4410 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4408:	fbb0 f0f4 	udiv	r0, r0, r4
    440c:	1c52      	adds	r2, r2, #1
    440e:	b2d2      	uxtb	r2, r2
    4410:	2800      	cmp	r0, #0
    4412:	d1f9      	bne.n	4408 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4414:	54b0      	strb	r0, [r6, r2]
    4416:	e00a      	b.n	442e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    4418:	b2d8      	uxtb	r0, r3
    441a:	fbb0 f7f4 	udiv	r7, r0, r4
    441e:	fbb3 f3f4 	udiv	r3, r3, r4
    4422:	fb04 0017 	mls	r0, r4, r7, r0
    4426:	1e52      	subs	r2, r2, #1
    4428:	b2d2      	uxtb	r2, r2
    442a:	3030      	adds	r0, #48	; 0x30
    442c:	54b0      	strb	r0, [r6, r2]
    442e:	2a00      	cmp	r2, #0
    4430:	d1f2      	bne.n	4418 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4432:	4630      	mov	r0, r6
    4434:	47a8      	blx	r5
    4436:	f3bf 8f4f 	dsb	sy
    443a:	4806      	ldr	r0, [pc, #24]	; (4454 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    443c:	6801      	ldr	r1, [r0, #0]
    443e:	4a06      	ldr	r2, [pc, #24]	; (4458 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4440:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4444:	4311      	orrs	r1, r2
    4446:	6001      	str	r1, [r0, #0]
    4448:	f3bf 8f4f 	dsb	sy
    444c:	bf00      	nop
    444e:	e7fd      	b.n	444c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    4450:	20000094 	.word	0x20000094
    4454:	e000ed0c 	.word	0xe000ed0c
    4458:	05fa0004 	.word	0x05fa0004

0000445c <sdc_support_adv>:
    445c:	4806      	ldr	r0, [pc, #24]	; (4478 <sdc_support_adv+0x1c>)
    445e:	b510      	push	{r4, lr}
    4460:	7881      	ldrb	r1, [r0, #2]
    4462:	7840      	ldrb	r0, [r0, #1]
    4464:	4301      	orrs	r1, r0
    4466:	d002      	beq.n	446e <sdc_support_adv+0x12>
    4468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    446c:	bd10      	pop	{r4, pc}
    446e:	f002 fc99 	bl	6da4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    4472:	2000      	movs	r0, #0
    4474:	bd10      	pop	{r4, pc}
    4476:	0000      	.short	0x0000
    4478:	20000094 	.word	0x20000094
    447c:	00000001 	.word	0x00000001
    4480:	00010101 	.word	0x00010101
    4484:	031b1b00 	.word	0x031b1b00
    4488:	00000002 	.word	0x00000002
    448c:	00001d4c 	.word	0x00001d4c
    4490:	001f0003 	.word	0x001f0003
	...
    44a0:	2a41906d 	.word	0x2a41906d
    44a4:	17ade838 	.word	0x17ade838
    44a8:	3803a529 	.word	0x3803a529
    44ac:	85d72739 	.word	0x85d72739
    44b0:	e1d8851f 	.word	0xe1d8851f

000044b4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    44b4:	4a05      	ldr	r2, [pc, #20]	; (44cc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    44b6:	b510      	push	{r4, lr}
    44b8:	6852      	ldr	r2, [r2, #4]
    44ba:	b112      	cbz	r2, 44c2 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    44bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    44c0:	4710      	bx	r2
    44c2:	2192      	movs	r1, #146	; 0x92
    44c4:	2004      	movs	r0, #4
    44c6:	f7ff ff95 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44ca:	0000      	.short	0x0000
    44cc:	20000b34 	.word	0x20000b34

000044d0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    44d0:	4a05      	ldr	r2, [pc, #20]	; (44e8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    44d2:	b510      	push	{r4, lr}
    44d4:	6892      	ldr	r2, [r2, #8]
    44d6:	b112      	cbz	r2, 44de <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    44d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    44dc:	4710      	bx	r2
    44de:	2198      	movs	r1, #152	; 0x98
    44e0:	2004      	movs	r0, #4
    44e2:	f7ff ff87 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44e6:	0000      	.short	0x0000
    44e8:	20000b34 	.word	0x20000b34

000044ec <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    44ec:	4805      	ldr	r0, [pc, #20]	; (4504 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    44ee:	6801      	ldr	r1, [r0, #0]
    44f0:	b129      	cbz	r1, 44fe <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    44f2:	6841      	ldr	r1, [r0, #4]
    44f4:	b119      	cbz	r1, 44fe <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    44f6:	6880      	ldr	r0, [r0, #8]
    44f8:	b108      	cbz	r0, 44fe <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    44fa:	2001      	movs	r0, #1
    44fc:	4770      	bx	lr
    44fe:	2000      	movs	r0, #0
    4500:	4770      	bx	lr
    4502:	0000      	.short	0x0000
    4504:	20000b34 	.word	0x20000b34

00004508 <sdc_rand_source_register>:
    4508:	4902      	ldr	r1, [pc, #8]	; (4514 <sdc_rand_source_register+0xc>)
    450a:	c80d      	ldmia	r0, {r0, r2, r3}
    450c:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4510:	2000      	movs	r0, #0
    4512:	4770      	bx	lr
    4514:	20000b34 	.word	0x20000b34

00004518 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    451a:	4c12      	ldr	r4, [pc, #72]	; (4564 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    451c:	2600      	movs	r6, #0
    451e:	6825      	ldr	r5, [r4, #0]
    4520:	e011      	b.n	4546 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4522:	9800      	ldr	r0, [sp, #0]
    4524:	2802      	cmp	r0, #2
    4526:	d002      	beq.n	452e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4528:	2803      	cmp	r0, #3
    452a:	d10c      	bne.n	4546 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    452c:	e006      	b.n	453c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    452e:	6820      	ldr	r0, [r4, #0]
    4530:	b110      	cbz	r0, 4538 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4532:	2000      	movs	r0, #0
    4534:	6026      	str	r6, [r4, #0]
    4536:	e005      	b.n	4544 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4538:	2128      	movs	r1, #40	; 0x28
    453a:	e00c      	b.n	4556 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    453c:	6820      	ldr	r0, [r4, #0]
    453e:	b168      	cbz	r0, 455c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4540:	2001      	movs	r0, #1
    4542:	6026      	str	r6, [r4, #0]
    4544:	47a8      	blx	r5
    4546:	4668      	mov	r0, sp
    4548:	f000 fcb2 	bl	4eb0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    454c:	2800      	cmp	r0, #0
    454e:	d0e8      	beq.n	4522 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4550:	2805      	cmp	r0, #5
    4552:	d005      	beq.n	4560 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4554:	2135      	movs	r1, #53	; 0x35
    4556:	2004      	movs	r0, #4
    4558:	f7ff ff4c 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    455c:	212d      	movs	r1, #45	; 0x2d
    455e:	e7fa      	b.n	4556 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4562:	0000      	.short	0x0000
    4564:	2000009c 	.word	0x2000009c

00004568 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    4568:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    456c:	4c29      	ldr	r4, [pc, #164]	; (4614 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    456e:	4605      	mov	r5, r0
    4570:	1d00      	adds	r0, r0, #4
    4572:	f504 7782 	add.w	r7, r4, #260	; 0x104
    4576:	60a0      	str	r0, [r4, #8]
    4578:	7838      	ldrb	r0, [r7, #0]
    457a:	b158      	cbz	r0, 4594 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
    457c:	78ba      	ldrb	r2, [r7, #2]
    457e:	463c      	mov	r4, r7
    4580:	1c79      	adds	r1, r7, #1
    4582:	4628      	mov	r0, r5
    4584:	1c92      	adds	r2, r2, #2
    4586:	f003 ffa8 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    458a:	2000      	movs	r0, #0
    458c:	7020      	strb	r0, [r4, #0]
    458e:	2004      	movs	r0, #4
    4590:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    4594:	481f      	ldr	r0, [pc, #124]	; (4614 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    4596:	f000 ffd7 	bl	5548 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    459a:	4606      	mov	r6, r0
    459c:	2802      	cmp	r0, #2
    459e:	d002      	beq.n	45a6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x3e>
    45a0:	2e04      	cmp	r6, #4
    45a2:	d005      	beq.n	45b0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x48>
    45a4:	e026      	b.n	45f4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
    45a6:	491b      	ldr	r1, [pc, #108]	; (4614 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    45a8:	4628      	mov	r0, r5
    45aa:	f004 f910 	bl	87ce <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    45ae:	e021      	b.n	45f4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
    45b0:	7820      	ldrb	r0, [r4, #0]
    45b2:	2811      	cmp	r0, #17
    45b4:	d104      	bne.n	45c0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x58>
    45b6:	210a      	movs	r1, #10
    45b8:	203e      	movs	r0, #62	; 0x3e
    45ba:	f004 f8f4 	bl	87a6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xbe>
    45be:	b118      	cbz	r0, 45c8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x60>
    45c0:	7820      	ldrb	r0, [r4, #0]
    45c2:	2808      	cmp	r0, #8
    45c4:	d005      	beq.n	45d2 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6a>
    45c6:	e009      	b.n	45dc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x74>
    45c8:	4912      	ldr	r1, [pc, #72]	; (4614 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    45ca:	4628      	mov	r0, r5
    45cc:	f004 faf7 	bl	8bbe <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    45d0:	e00a      	b.n	45e8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x80>
    45d2:	2105      	movs	r1, #5
    45d4:	203e      	movs	r0, #62	; 0x3e
    45d6:	f004 f8e6 	bl	87a6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xbe>
    45da:	b168      	cbz	r0, 45f8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
    45dc:	490d      	ldr	r1, [pc, #52]	; (4614 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    45de:	4628      	mov	r0, r5
    45e0:	f004 f923 	bl	882a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    45e4:	2800      	cmp	r0, #0
    45e6:	d0c7      	beq.n	4578 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    45e8:	78a9      	ldrb	r1, [r5, #2]
    45ea:	7828      	ldrb	r0, [r5, #0]
    45ec:	f004 f8db 	bl	87a6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xbe>
    45f0:	2800      	cmp	r0, #0
    45f2:	d0c1      	beq.n	4578 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    45f4:	4630      	mov	r0, r6
    45f6:	e7cb      	b.n	4590 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    45f8:	88a0      	ldrh	r0, [r4, #4]
    45fa:	f8ad 0000 	strh.w	r0, [sp]
    45fe:	a901      	add	r1, sp, #4
    4600:	4668      	mov	r0, sp
    4602:	f004 fbf5 	bl	8df0 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    4606:	2800      	cmp	r0, #0
    4608:	d0b6      	beq.n	4578 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    460a:	21aa      	movs	r1, #170	; 0xaa
    460c:	2008      	movs	r0, #8
    460e:	f7ff fef1 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4612:	0000      	.short	0x0000
    4614:	20000b40 	.word	0x20000b40
    4618:	b570      	push	{r4, r5, r6, lr}
    461a:	780a      	ldrb	r2, [r1, #0]
    461c:	7082      	strb	r2, [r0, #2]
    461e:	b33a      	cbz	r2, 4670 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x108>
    4620:	2a01      	cmp	r2, #1
    4622:	d825      	bhi.n	4670 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x108>
    4624:	2313      	movs	r3, #19
    4626:	7003      	strb	r3, [r0, #0]
    4628:	2300      	movs	r3, #0
    462a:	e00a      	b.n	4642 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xda>
    462c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4630:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4634:	78a6      	ldrb	r6, [r4, #2]
    4636:	70ee      	strb	r6, [r5, #3]
    4638:	8864      	ldrh	r4, [r4, #2]
    463a:	0a24      	lsrs	r4, r4, #8
    463c:	1c5b      	adds	r3, r3, #1
    463e:	712c      	strb	r4, [r5, #4]
    4640:	b2db      	uxtb	r3, r3
    4642:	4293      	cmp	r3, r2
    4644:	d3f2      	bcc.n	462c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc4>
    4646:	2300      	movs	r3, #0
    4648:	e00b      	b.n	4662 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xfa>
    464a:	bf00      	nop
    464c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4650:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4654:	792e      	ldrb	r6, [r5, #4]
    4656:	7166      	strb	r6, [r4, #5]
    4658:	88ad      	ldrh	r5, [r5, #4]
    465a:	0a2d      	lsrs	r5, r5, #8
    465c:	1c5b      	adds	r3, r3, #1
    465e:	71a5      	strb	r5, [r4, #6]
    4660:	b2db      	uxtb	r3, r3
    4662:	4293      	cmp	r3, r2
    4664:	d3f2      	bcc.n	464c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe4>
    4666:	2101      	movs	r1, #1
    4668:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    466c:	b2c0      	uxtb	r0, r0
    466e:	bd70      	pop	{r4, r5, r6, pc}
    4670:	2000      	movs	r0, #0
    4672:	bd70      	pop	{r4, r5, r6, pc}

00004674 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4674:	2840      	cmp	r0, #64	; 0x40
    4676:	d203      	bcs.n	4680 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    4678:	1e40      	subs	r0, r0, #1
    467a:	b2c1      	uxtb	r1, r0
    467c:	4805      	ldr	r0, [pc, #20]	; (4694 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    467e:	e005      	b.n	468c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    4680:	28ff      	cmp	r0, #255	; 0xff
    4682:	d005      	beq.n	4690 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    4684:	3840      	subs	r0, #64	; 0x40
    4686:	b2c1      	uxtb	r1, r0
    4688:	4802      	ldr	r0, [pc, #8]	; (4694 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    468a:	3008      	adds	r0, #8
    468c:	f004 bac1 	b.w	8c12 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    4690:	2001      	movs	r0, #1
    4692:	4770      	bx	lr
    4694:	200000a0 	.word	0x200000a0

00004698 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4698:	1e40      	subs	r0, r0, #1
    469a:	b2c1      	uxtb	r1, r0
    469c:	4801      	ldr	r0, [pc, #4]	; (46a4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    469e:	f004 bab8 	b.w	8c12 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    46a2:	0000      	.short	0x0000
    46a4:	200000b0 	.word	0x200000b0

000046a8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    46a8:	4902      	ldr	r1, [pc, #8]	; (46b4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    46aa:	6802      	ldr	r2, [r0, #0]
    46ac:	610a      	str	r2, [r1, #16]
    46ae:	6840      	ldr	r0, [r0, #4]
    46b0:	6148      	str	r0, [r1, #20]
    46b2:	4770      	bx	lr
    46b4:	200000a0 	.word	0x200000a0

000046b8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    46b8:	4905      	ldr	r1, [pc, #20]	; (46d0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    46ba:	6802      	ldr	r2, [r0, #0]
    46bc:	600a      	str	r2, [r1, #0]
    46be:	6840      	ldr	r0, [r0, #4]
    46c0:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    46c4:	600a      	str	r2, [r1, #0]
    46c6:	4a03      	ldr	r2, [pc, #12]	; (46d4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    46c8:	4310      	orrs	r0, r2
    46ca:	6048      	str	r0, [r1, #4]
    46cc:	4770      	bx	lr
    46ce:	0000      	.short	0x0000
    46d0:	200000a0 	.word	0x200000a0
    46d4:	024007f8 	.word	0x024007f8

000046d8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    46d8:	4807      	ldr	r0, [pc, #28]	; (46f8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    46da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    46de:	2200      	movs	r2, #0
    46e0:	6001      	str	r1, [r0, #0]
    46e2:	0cc9      	lsrs	r1, r1, #19
    46e4:	6041      	str	r1, [r0, #4]
    46e6:	f100 0108 	add.w	r1, r0, #8
    46ea:	201f      	movs	r0, #31
    46ec:	600a      	str	r2, [r1, #0]
    46ee:	604a      	str	r2, [r1, #4]
    46f0:	3108      	adds	r1, #8
    46f2:	e9c1 0200 	strd	r0, r2, [r1]
    46f6:	4770      	bx	lr
    46f8:	200000a0 	.word	0x200000a0

000046fc <sdc_hci_cmd_cb_reset>:
    46fc:	b510      	push	{r4, lr}
    46fe:	f7ff ffeb 	bl	46d8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4702:	f005 ff8d 	bl	a620 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4706:	4604      	mov	r4, r0
    4708:	4802      	ldr	r0, [pc, #8]	; (4714 <sdc_hci_cmd_cb_reset+0x18>)
    470a:	6800      	ldr	r0, [r0, #0]
    470c:	b100      	cbz	r0, 4710 <sdc_hci_cmd_cb_reset+0x14>
    470e:	4780      	blx	r0
    4710:	4620      	mov	r0, r4
    4712:	bd10      	pop	{r4, pc}
    4714:	200000b8 	.word	0x200000b8

00004718 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4718:	4901      	ldr	r1, [pc, #4]	; (4720 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    471a:	6008      	str	r0, [r1, #0]
    471c:	4770      	bx	lr
    471e:	0000      	.short	0x0000
    4720:	200000b8 	.word	0x200000b8

00004724 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4724:	2102      	movs	r1, #2
    4726:	8001      	strh	r1, [r0, #0]
    4728:	8041      	strh	r1, [r0, #2]
    472a:	2100      	movs	r1, #0
    472c:	7101      	strb	r1, [r0, #4]
    472e:	216d      	movs	r1, #109	; 0x6d
    4730:	7141      	strb	r1, [r0, #5]
    4732:	f244 1190 	movw	r1, #16784	; 0x4190
    4736:	80c1      	strh	r1, [r0, #6]
    4738:	4901      	ldr	r1, [pc, #4]	; (4740 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    473a:	6081      	str	r1, [r0, #8]
    473c:	2000      	movs	r0, #0
    473e:	4770      	bx	lr
    4740:	ade8382a 	.word	0xade8382a

00004744 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4744:	b510      	push	{r4, lr}
    4746:	2802      	cmp	r0, #2
    4748:	d304      	bcc.n	4754 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    474a:	f44f 7101 	mov.w	r1, #516	; 0x204
    474e:	2017      	movs	r0, #23
    4750:	f7ff fe50 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4754:	4901      	ldr	r1, [pc, #4]	; (475c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4756:	5c08      	ldrb	r0, [r1, r0]
    4758:	bd10      	pop	{r4, pc}
    475a:	0000      	.short	0x0000
    475c:	20000d48 	.word	0x20000d48

00004760 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4762:	0005      	movs	r5, r0
    4764:	9500      	str	r5, [sp, #0]
    4766:	d00d      	beq.n	4784 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x24>
    4768:	2600      	movs	r6, #0
    476a:	7808      	ldrb	r0, [r1, #0]
    476c:	7849      	ldrb	r1, [r1, #1]
    476e:	4604      	mov	r4, r0
    4770:	42a1      	cmp	r1, r4
    4772:	d900      	bls.n	4776 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    4774:	460c      	mov	r4, r1
    4776:	07aa      	lsls	r2, r5, #30
    4778:	d006      	beq.n	4788 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    477a:	f240 11cb 	movw	r1, #459	; 0x1cb
    477e:	2017      	movs	r0, #23
    4780:	f7ff fe38 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4784:	2601      	movs	r6, #1
    4786:	e7f0      	b.n	476a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    4788:	4f12      	ldr	r7, [pc, #72]	; (47d4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    478a:	7038      	strb	r0, [r7, #0]
    478c:	7079      	strb	r1, [r7, #1]
    478e:	4631      	mov	r1, r6
    4790:	4668      	mov	r0, sp
    4792:	f000 f8d3 	bl	493c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    4796:	2100      	movs	r1, #0
    4798:	460b      	mov	r3, r1
    479a:	9800      	ldr	r0, [sp, #0]
    479c:	1cc0      	adds	r0, r0, #3
    479e:	f020 0003 	bic.w	r0, r0, #3
    47a2:	9000      	str	r0, [sp, #0]
    47a4:	b966      	cbnz	r6, 47c0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    47a6:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    47aa:	60d0      	str	r0, [r2, #12]
    47ac:	2000      	movs	r0, #0
    47ae:	e005      	b.n	47bc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>
    47b0:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    47b4:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    47b8:	1c40      	adds	r0, r0, #1
    47ba:	b2c0      	uxtb	r0, r0
    47bc:	42a0      	cmp	r0, r4
    47be:	d3f7      	bcc.n	47b0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    47c0:	9800      	ldr	r0, [sp, #0]
    47c2:	1c49      	adds	r1, r1, #1
    47c4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    47c8:	b2c9      	uxtb	r1, r1
    47ca:	9000      	str	r0, [sp, #0]
    47cc:	2902      	cmp	r1, #2
    47ce:	d3e4      	bcc.n	479a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    47d0:	1b40      	subs	r0, r0, r5
    47d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47d4:	20000d48 	.word	0x20000d48

000047d8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    47d8:	b570      	push	{r4, r5, r6, lr}
    47da:	4604      	mov	r4, r0
    47dc:	7985      	ldrb	r5, [r0, #6]
    47de:	f000 f8e9 	bl	49b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    47e2:	4a0c      	ldr	r2, [pc, #48]	; (4814 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
    47e4:	79e1      	ldrb	r1, [r4, #7]
    47e6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    47ea:	e00e      	b.n	480a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
    47ec:	68d3      	ldr	r3, [r2, #12]
    47ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    47f2:	b143      	cbz	r3, 4806 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
    47f4:	1c48      	adds	r0, r1, #1
    47f6:	71e0      	strb	r0, [r4, #7]
    47f8:	80a1      	strh	r1, [r4, #4]
    47fa:	68d0      	ldr	r0, [r2, #12]
    47fc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4800:	6020      	str	r0, [r4, #0]
    4802:	2000      	movs	r0, #0
    4804:	bd70      	pop	{r4, r5, r6, pc}
    4806:	1c49      	adds	r1, r1, #1
    4808:	b2c9      	uxtb	r1, r1
    480a:	4281      	cmp	r1, r0
    480c:	d3ee      	bcc.n	47ec <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
    480e:	71e1      	strb	r1, [r4, #7]
    4810:	2005      	movs	r0, #5
    4812:	bd70      	pop	{r4, r5, r6, pc}
    4814:	20000d48 	.word	0x20000d48

00004818 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4818:	b4f0      	push	{r4, r5, r6, r7}
    481a:	b121      	cbz	r1, 4826 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    481c:	2901      	cmp	r1, #1
    481e:	d002      	beq.n	4826 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4820:	bcf0      	pop	{r4, r5, r6, r7}
    4822:	2000      	movs	r0, #0
    4824:	4770      	bx	lr
    4826:	4a0f      	ldr	r2, [pc, #60]	; (4864 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    4828:	2500      	movs	r5, #0
    482a:	462b      	mov	r3, r5
    482c:	f64f 74ff 	movw	r4, #65535	; 0xffff
    4830:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    4834:	5c57      	ldrb	r7, [r2, r1]
    4836:	e00a      	b.n	484e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    4838:	195a      	adds	r2, r3, r5
    483a:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    483e:	b292      	uxth	r2, r2
    4840:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
    4844:	f1bc 0f00 	cmp.w	ip, #0
    4848:	d004      	beq.n	4854 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    484a:	1c5b      	adds	r3, r3, #1
    484c:	b29b      	uxth	r3, r3
    484e:	429f      	cmp	r7, r3
    4850:	d8f2      	bhi.n	4838 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    4852:	4622      	mov	r2, r4
    4854:	8002      	strh	r2, [r0, #0]
    4856:	4610      	mov	r0, r2
    4858:	42a2      	cmp	r2, r4
    485a:	d0e1      	beq.n	4820 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8>
    485c:	bcf0      	pop	{r4, r5, r6, r7}
    485e:	f000 b835 	b.w	48cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4862:	0000      	.short	0x0000
    4864:	20000d48 	.word	0x20000d48

00004868 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    486c:	4606      	mov	r6, r0
    486e:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4872:	460c      	mov	r4, r1
    4874:	f243 0702 	movw	r7, #12290	; 0x3002
    4878:	38ff      	subs	r0, #255	; 0xff
    487a:	d020      	beq.n	48be <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    487c:	2c02      	cmp	r4, #2
    487e:	d302      	bcc.n	4886 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4880:	2007      	movs	r0, #7
    4882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4886:	4630      	mov	r0, r6
    4888:	f000 f848 	bl	491c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    488c:	0005      	movs	r5, r0
    488e:	d016      	beq.n	48be <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4890:	480c      	ldr	r0, [pc, #48]	; (48c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4892:	4629      	mov	r1, r5
    4894:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4898:	4630      	mov	r0, r6
    489a:	4790      	blx	r2
    489c:	480a      	ldr	r0, [pc, #40]	; (48c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    489e:	2100      	movs	r1, #0
    48a0:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    48a4:	68f8      	ldr	r0, [r7, #12]
    48a6:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    48aa:	4620      	mov	r0, r4
    48ac:	f000 f878 	bl	49a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    48b0:	4602      	mov	r2, r0
    48b2:	4629      	mov	r1, r5
    48b4:	6878      	ldr	r0, [r7, #4]
    48b6:	f004 fb90 	bl	8fda <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    48ba:	2000      	movs	r0, #0
    48bc:	e7e1      	b.n	4882 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    48be:	4638      	mov	r0, r7
    48c0:	e7df      	b.n	4882 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    48c2:	0000      	.short	0x0000
    48c4:	000049cc 	.word	0x000049cc
    48c8:	20000d48 	.word	0x20000d48
    48cc:	b570      	push	{r4, r5, r6, lr}
    48ce:	460e      	mov	r6, r1
    48d0:	4605      	mov	r5, r0
    48d2:	f004 fbbc 	bl	904e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    48d6:	b158      	cbz	r0, 48f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    48d8:	480f      	ldr	r0, [pc, #60]	; (4918 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb0>)
    48da:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    48de:	68e0      	ldr	r0, [r4, #12]
    48e0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    48e4:	b138      	cbz	r0, 48f6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    48e6:	f240 118b 	movw	r1, #395	; 0x18b
    48ea:	2017      	movs	r0, #23
    48ec:	f7ff fd82 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48f0:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    48f4:	e7f9      	b.n	48ea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x82>
    48f6:	6860      	ldr	r0, [r4, #4]
    48f8:	2800      	cmp	r0, #0
    48fa:	d00b      	beq.n	4914 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    48fc:	4630      	mov	r0, r6
    48fe:	f000 f84f 	bl	49a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4902:	4601      	mov	r1, r0
    4904:	6860      	ldr	r0, [r4, #4]
    4906:	f004 fb10 	bl	8f2a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    490a:	2800      	cmp	r0, #0
    490c:	d002      	beq.n	4914 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    490e:	68e1      	ldr	r1, [r4, #12]
    4910:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
    4914:	bd70      	pop	{r4, r5, r6, pc}
    4916:	0000      	.short	0x0000
    4918:	20000d48 	.word	0x20000d48
    491c:	b570      	push	{r4, r5, r6, lr}
    491e:	460c      	mov	r4, r1
    4920:	4605      	mov	r5, r0
    4922:	f004 fb94 	bl	904e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    4926:	2800      	cmp	r0, #0
    4928:	d005      	beq.n	4936 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xce>
    492a:	4803      	ldr	r0, [pc, #12]	; (4938 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    492c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4930:	68c0      	ldr	r0, [r0, #12]
    4932:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4936:	bd70      	pop	{r4, r5, r6, pc}
    4938:	20000d48 	.word	0x20000d48
    493c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4940:	4e16      	ldr	r6, [pc, #88]	; (499c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>)
    4942:	4688      	mov	r8, r1
    4944:	4605      	mov	r5, r0
    4946:	2400      	movs	r4, #0
    4948:	6828      	ldr	r0, [r5, #0]
    494a:	1cc0      	adds	r0, r0, #3
    494c:	f020 0003 	bic.w	r0, r0, #3
    4950:	6028      	str	r0, [r5, #0]
    4952:	4620      	mov	r0, r4
    4954:	f000 f824 	bl	49a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4958:	5d31      	ldrb	r1, [r6, r4]
    495a:	4348      	muls	r0, r1
    495c:	f1b8 0f00 	cmp.w	r8, #0
    4960:	d001      	beq.n	4966 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfe>
    4962:	2200      	movs	r2, #0
    4964:	e000      	b.n	4968 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    4966:	682a      	ldr	r2, [r5, #0]
    4968:	4601      	mov	r1, r0
    496a:	9200      	str	r2, [sp, #0]
    496c:	b132      	cbz	r2, 497c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x114>
    496e:	2700      	movs	r7, #0
    4970:	ea4f 000d 	mov.w	r0, sp
    4974:	f004 fb0a 	bl	8f8c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4978:	b11f      	cbz	r7, 4982 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11a>
    497a:	e006      	b.n	498a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    497c:	2701      	movs	r7, #1
    497e:	2000      	movs	r0, #0
    4980:	e7f8      	b.n	4974 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    4982:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    4986:	9a00      	ldr	r2, [sp, #0]
    4988:	604a      	str	r2, [r1, #4]
    498a:	6829      	ldr	r1, [r5, #0]
    498c:	1c64      	adds	r4, r4, #1
    498e:	4408      	add	r0, r1
    4990:	b2e4      	uxtb	r4, r4
    4992:	6028      	str	r0, [r5, #0]
    4994:	2c02      	cmp	r4, #2
    4996:	d3d7      	bcc.n	4948 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    4998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    499c:	20000d48 	.word	0x20000d48
    49a0:	4903      	ldr	r1, [pc, #12]	; (49b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>)
    49a2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    49a6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    49aa:	1cc0      	adds	r0, r0, #3
    49ac:	4008      	ands	r0, r1
    49ae:	4770      	bx	lr
    49b0:	000049c8 	.word	0x000049c8
    49b4:	4903      	ldr	r1, [pc, #12]	; (49c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>)
    49b6:	7808      	ldrb	r0, [r1, #0]
    49b8:	7849      	ldrb	r1, [r1, #1]
    49ba:	4288      	cmp	r0, r1
    49bc:	d200      	bcs.n	49c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>
    49be:	4608      	mov	r0, r1
    49c0:	4770      	bx	lr
    49c2:	0000      	.short	0x0000
    49c4:	20000d48 	.word	0x20000d48
    49c8:	011802e8 	.word	0x011802e8
    49cc:	0000a015 	.word	0x0000a015
    49d0:	00009879 	.word	0x00009879

000049d4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    49d4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    49d8:	4c24      	ldr	r4, [pc, #144]	; (4a6c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    49da:	4606      	mov	r6, r0
    49dc:	b081      	sub	sp, #4
    49de:	6820      	ldr	r0, [r4, #0]
    49e0:	469a      	mov	sl, r3
    49e2:	4693      	mov	fp, r2
    49e4:	b158      	cbz	r0, 49fe <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    49e6:	7a01      	ldrb	r1, [r0, #8]
    49e8:	42b1      	cmp	r1, r6
    49ea:	d903      	bls.n	49f4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    49ec:	6840      	ldr	r0, [r0, #4]
    49ee:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    49f2:	b140      	cbz	r0, 4a06 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    49f4:	f243 0002 	movw	r0, #12290	; 0x3002
    49f8:	b005      	add	sp, #20
    49fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49fe:	21a5      	movs	r1, #165	; 0xa5
    4a00:	2018      	movs	r0, #24
    4a02:	f7ff fcf7 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a06:	4619      	mov	r1, r3
    4a08:	9802      	ldr	r0, [sp, #8]
    4a0a:	f004 fb43 	bl	9094 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    4a0e:	4680      	mov	r8, r0
    4a10:	4658      	mov	r0, fp
    4a12:	990e      	ldr	r1, [sp, #56]	; 0x38
    4a14:	f004 fb34 	bl	9080 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    4a18:	4605      	mov	r5, r0
    4a1a:	eb08 0005 	add.w	r0, r8, r5
    4a1e:	1d00      	adds	r0, r0, #4
    4a20:	b287      	uxth	r7, r0
    4a22:	6820      	ldr	r0, [r4, #0]
    4a24:	46a1      	mov	r9, r4
    4a26:	4639      	mov	r1, r7
    4a28:	6800      	ldr	r0, [r0, #0]
    4a2a:	f004 fa7e 	bl	8f2a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4a2e:	0004      	movs	r4, r0
    4a30:	d01a      	beq.n	4a68 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    4a32:	8067      	strh	r7, [r4, #2]
    4a34:	8025      	strh	r5, [r4, #0]
    4a36:	4629      	mov	r1, r5
    4a38:	1d20      	adds	r0, r4, #4
    4a3a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4a3c:	4607      	mov	r7, r0
    4a3e:	465a      	mov	r2, fp
    4a40:	2309      	movs	r3, #9
    4a42:	9500      	str	r5, [sp, #0]
    4a44:	f004 fa1e 	bl	8e84 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4a48:	8820      	ldrh	r0, [r4, #0]
    4a4a:	4641      	mov	r1, r8
    4a4c:	4438      	add	r0, r7
    4a4e:	230a      	movs	r3, #10
    4a50:	9a02      	ldr	r2, [sp, #8]
    4a52:	f8cd a000 	str.w	sl, [sp]
    4a56:	f004 fa15 	bl	8e84 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4a5a:	f8d9 0000 	ldr.w	r0, [r9]
    4a5e:	6840      	ldr	r0, [r0, #4]
    4a60:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    4a64:	2000      	movs	r0, #0
    4a66:	e7c7      	b.n	49f8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4a68:	2004      	movs	r0, #4
    4a6a:	e7c5      	b.n	49f8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4a6c:	200000bc 	.word	0x200000bc

00004a70 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4a70:	b570      	push	{r4, r5, r6, lr}
    4a72:	4c14      	ldr	r4, [pc, #80]	; (4ac4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4a74:	6823      	ldr	r3, [r4, #0]
    4a76:	b18b      	cbz	r3, 4a9c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4a78:	7a19      	ldrb	r1, [r3, #8]
    4a7a:	4281      	cmp	r1, r0
    4a7c:	d912      	bls.n	4aa4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4a7e:	685a      	ldr	r2, [r3, #4]
    4a80:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4a84:	b171      	cbz	r1, 4aa4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4a86:	2500      	movs	r5, #0
    4a88:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4a8c:	884a      	ldrh	r2, [r1, #2]
    4a8e:	6818      	ldr	r0, [r3, #0]
    4a90:	f004 faa3 	bl	8fda <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4a94:	6821      	ldr	r1, [r4, #0]
    4a96:	2000      	movs	r0, #0
    4a98:	7a0a      	ldrb	r2, [r1, #8]
    4a9a:	e00c      	b.n	4ab6 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4a9c:	21c6      	movs	r1, #198	; 0xc6
    4a9e:	2018      	movs	r0, #24
    4aa0:	f7ff fca8 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4aa4:	f243 0002 	movw	r0, #12290	; 0x3002
    4aa8:	bd70      	pop	{r4, r5, r6, pc}
    4aaa:	684b      	ldr	r3, [r1, #4]
    4aac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4ab0:	b933      	cbnz	r3, 4ac0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4ab2:	1c40      	adds	r0, r0, #1
    4ab4:	b2c0      	uxtb	r0, r0
    4ab6:	4282      	cmp	r2, r0
    4ab8:	d8f7      	bhi.n	4aaa <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4aba:	6808      	ldr	r0, [r1, #0]
    4abc:	f004 fa82 	bl	8fc4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4ac0:	2000      	movs	r0, #0
    4ac2:	bd70      	pop	{r4, r5, r6, pc}
    4ac4:	200000bc 	.word	0x200000bc

00004ac8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4acc:	460d      	mov	r5, r1
    4ace:	0004      	movs	r4, r0
    4ad0:	4690      	mov	r8, r2
    4ad2:	f04f 0600 	mov.w	r6, #0
    4ad6:	d006      	beq.n	4ae6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    4ad8:	2700      	movs	r7, #0
    4ada:	07a0      	lsls	r0, r4, #30
    4adc:	d005      	beq.n	4aea <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    4ade:	2186      	movs	r1, #134	; 0x86
    4ae0:	2018      	movs	r0, #24
    4ae2:	f7ff fc87 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ae6:	2701      	movs	r7, #1
    4ae8:	e7f7      	b.n	4ada <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4aea:	b1cd      	cbz	r5, 4b20 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    4aec:	4611      	mov	r1, r2
    4aee:	2000      	movs	r0, #0
    4af0:	f004 fa4c 	bl	8f8c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4af4:	300c      	adds	r0, #12
    4af6:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4afa:	b98f      	cbnz	r7, 4b20 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    4afc:	4f0a      	ldr	r7, [pc, #40]	; (4b28 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    4afe:	f104 000c 	add.w	r0, r4, #12
    4b02:	00aa      	lsls	r2, r5, #2
    4b04:	603c      	str	r4, [r7, #0]
    4b06:	7225      	strb	r5, [r4, #8]
    4b08:	6060      	str	r0, [r4, #4]
    4b0a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4b0e:	6020      	str	r0, [r4, #0]
    4b10:	2100      	movs	r1, #0
    4b12:	6860      	ldr	r0, [r4, #4]
    4b14:	f003 fd5b 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4b18:	4641      	mov	r1, r8
    4b1a:	6838      	ldr	r0, [r7, #0]
    4b1c:	f004 fa36 	bl	8f8c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4b20:	4630      	mov	r0, r6
    4b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b26:	0000      	.short	0x0000
    4b28:	200000bc 	.word	0x200000bc

00004b2c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4b2c:	4909      	ldr	r1, [pc, #36]	; (4b54 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4b2e:	b510      	push	{r4, lr}
    4b30:	4602      	mov	r2, r0
    4b32:	6809      	ldr	r1, [r1, #0]
    4b34:	2000      	movs	r0, #0
    4b36:	b149      	cbz	r1, 4b4c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4b38:	7a0b      	ldrb	r3, [r1, #8]
    4b3a:	4293      	cmp	r3, r2
    4b3c:	d905      	bls.n	4b4a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4b3e:	6849      	ldr	r1, [r1, #4]
    4b40:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4b44:	2900      	cmp	r1, #0
    4b46:	d000      	beq.n	4b4a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4b48:	1d08      	adds	r0, r1, #4
    4b4a:	bd10      	pop	{r4, pc}
    4b4c:	21ec      	movs	r1, #236	; 0xec
    4b4e:	2018      	movs	r0, #24
    4b50:	f7ff fc50 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b54:	200000bc 	.word	0x200000bc

00004b58 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4b58:	490a      	ldr	r1, [pc, #40]	; (4b84 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4b5a:	b510      	push	{r4, lr}
    4b5c:	4602      	mov	r2, r0
    4b5e:	6809      	ldr	r1, [r1, #0]
    4b60:	2000      	movs	r0, #0
    4b62:	b159      	cbz	r1, 4b7c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4b64:	7a0b      	ldrb	r3, [r1, #8]
    4b66:	4293      	cmp	r3, r2
    4b68:	d907      	bls.n	4b7a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4b6a:	6849      	ldr	r1, [r1, #4]
    4b6c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4b70:	2900      	cmp	r1, #0
    4b72:	d002      	beq.n	4b7a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4b74:	f831 0b04 	ldrh.w	r0, [r1], #4
    4b78:	4408      	add	r0, r1
    4b7a:	bd10      	pop	{r4, pc}
    4b7c:	21fa      	movs	r1, #250	; 0xfa
    4b7e:	2018      	movs	r0, #24
    4b80:	f7ff fc38 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b84:	200000bc 	.word	0x200000bc
    4b88:	b570      	push	{r4, r5, r6, lr}
    4b8a:	4b1e      	ldr	r3, [pc, #120]	; (4c04 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    4b8c:	6845      	ldr	r5, [r0, #4]
    4b8e:	4604      	mov	r4, r0
    4b90:	2200      	movs	r2, #0
    4b92:	b1a1      	cbz	r1, 4bbe <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    4b94:	2001      	movs	r0, #1
    4b96:	7060      	strb	r0, [r4, #1]
    4b98:	8858      	ldrh	r0, [r3, #2]
    4b9a:	0881      	lsrs	r1, r0, #2
    4b9c:	f05f 0000 	movs.w	r0, #0
    4ba0:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    4ba4:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    4ba8:	831a      	strh	r2, [r3, #24]
    4baa:	8419      	strh	r1, [r3, #32]
    4bac:	fb00 5301 	mla	r3, r0, r1, r5
    4bb0:	6073      	str	r3, [r6, #4]
    4bb2:	1823      	adds	r3, r4, r0
    4bb4:	1c40      	adds	r0, r0, #1
    4bb6:	751a      	strb	r2, [r3, #20]
    4bb8:	2804      	cmp	r0, #4
    4bba:	d3f1      	bcc.n	4ba0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    4bbc:	bd70      	pop	{r4, r5, r6, pc}
    4bbe:	7062      	strb	r2, [r4, #1]
    4bc0:	f05f 0000 	movs.w	r0, #0
    4bc4:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    4bc8:	830a      	strh	r2, [r1, #24]
    4bca:	840a      	strh	r2, [r1, #32]
    4bcc:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    4bd0:	604a      	str	r2, [r1, #4]
    4bd2:	1821      	adds	r1, r4, r0
    4bd4:	1c40      	adds	r0, r0, #1
    4bd6:	750a      	strb	r2, [r1, #20]
    4bd8:	2804      	cmp	r0, #4
    4bda:	d3f3      	bcc.n	4bc4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    4bdc:	8858      	ldrh	r0, [r3, #2]
    4bde:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    4be2:	d201      	bcs.n	4be8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    4be4:	0846      	lsrs	r6, r0, #1
    4be6:	e000      	b.n	4bea <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    4be8:	26ff      	movs	r6, #255	; 0xff
    4bea:	f004 fac7 	bl	917c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    4bee:	6065      	str	r5, [r4, #4]
    4bf0:	8420      	strh	r0, [r4, #32]
    4bf2:	1829      	adds	r1, r5, r0
    4bf4:	60a1      	str	r1, [r4, #8]
    4bf6:	8466      	strh	r6, [r4, #34]	; 0x22
    4bf8:	60e5      	str	r5, [r4, #12]
    4bfa:	84a0      	strh	r0, [r4, #36]	; 0x24
    4bfc:	6121      	str	r1, [r4, #16]
    4bfe:	84e6      	strh	r6, [r4, #38]	; 0x26
    4c00:	bd70      	pop	{r4, r5, r6, pc}
    4c02:	0000      	.short	0x0000
    4c04:	200000c0 	.word	0x200000c0

00004c08 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    4c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c0c:	b158      	cbz	r0, 4c26 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    4c0e:	2500      	movs	r5, #0
    4c10:	4411      	add	r1, r2
    4c12:	4e24      	ldr	r6, [pc, #144]	; (4ca4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    4c14:	b2cc      	uxtb	r4, r1
    4c16:	2700      	movs	r7, #0
    4c18:	7034      	strb	r4, [r6, #0]
    4c1a:	0781      	lsls	r1, r0, #30
    4c1c:	d005      	beq.n	4c2a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    4c1e:	214e      	movs	r1, #78	; 0x4e
    4c20:	2009      	movs	r0, #9
    4c22:	f7ff fbe7 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c26:	2501      	movs	r5, #1
    4c28:	e7f2      	b.n	4c10 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    4c2a:	2b1f      	cmp	r3, #31
    4c2c:	d804      	bhi.n	4c38 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    4c2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4c32:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    4c36:	e009      	b.n	4c4c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    4c38:	0059      	lsls	r1, r3, #1
    4c3a:	2bff      	cmp	r3, #255	; 0xff
    4c3c:	d90c      	bls.n	4c58 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    4c3e:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    4c42:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4c46:	d200      	bcs.n	4c4a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4c48:	4611      	mov	r1, r2
    4c4a:	b289      	uxth	r1, r1
    4c4c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    4c50:	1cc9      	adds	r1, r1, #3
    4c52:	4011      	ands	r1, r2
    4c54:	b135      	cbz	r5, 4c64 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    4c56:	e007      	b.n	4c68 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    4c58:	227c      	movs	r2, #124	; 0x7c
    4c5a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4c5e:	d3f4      	bcc.n	4c4a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4c60:	217c      	movs	r1, #124	; 0x7c
    4c62:	e7f2      	b.n	4c4a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4c64:	6070      	str	r0, [r6, #4]
    4c66:	8071      	strh	r1, [r6, #2]
    4c68:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    4c6c:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    4c70:	2200      	movs	r2, #0
    4c72:	6876      	ldr	r6, [r6, #4]
    4c74:	f04f 0c01 	mov.w	ip, #1
    4c78:	e00d      	b.n	4c96 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    4c7a:	b94d      	cbnz	r5, 4c90 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    4c7c:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    4c80:	eb00 0e03 	add.w	lr, r0, r3
    4c84:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    4c88:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    4c8c:	f8c7 e004 	str.w	lr, [r7, #4]
    4c90:	1c52      	adds	r2, r2, #1
    4c92:	440b      	add	r3, r1
    4c94:	b2d2      	uxtb	r2, r2
    4c96:	42a2      	cmp	r2, r4
    4c98:	d3ef      	bcc.n	4c7a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    4c9a:	1ddb      	adds	r3, r3, #7
    4c9c:	f023 0007 	bic.w	r0, r3, #7
    4ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ca4:	200000c0 	.word	0x200000c0

00004ca8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    4ca8:	b570      	push	{r4, r5, r6, lr}
    4caa:	4a10      	ldr	r2, [pc, #64]	; (4cec <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    4cac:	2000      	movs	r0, #0
    4cae:	6851      	ldr	r1, [r2, #4]
    4cb0:	7812      	ldrb	r2, [r2, #0]
    4cb2:	e014      	b.n	4cde <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    4cb4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4cb8:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    4cbc:	b16b      	cbz	r3, 4cda <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    4cbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4cc2:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    4cc6:	d00c      	beq.n	4ce2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    4cc8:	2500      	movs	r5, #0
    4cca:	70a5      	strb	r5, [r4, #2]
    4ccc:	2101      	movs	r1, #1
    4cce:	4620      	mov	r0, r4
    4cd0:	f7ff ff5a 	bl	4b88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    4cd4:	7025      	strb	r5, [r4, #0]
    4cd6:	4620      	mov	r0, r4
    4cd8:	bd70      	pop	{r4, r5, r6, pc}
    4cda:	1c40      	adds	r0, r0, #1
    4cdc:	b2c0      	uxtb	r0, r0
    4cde:	4290      	cmp	r0, r2
    4ce0:	d3e8      	bcc.n	4cb4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    4ce2:	21a9      	movs	r1, #169	; 0xa9
    4ce4:	2009      	movs	r0, #9
    4ce6:	f7ff fb85 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cea:	0000      	.short	0x0000
    4cec:	200000c0 	.word	0x200000c0

00004cf0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    4cf0:	4804      	ldr	r0, [pc, #16]	; (4d04 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    4cf2:	b510      	push	{r4, lr}
    4cf4:	8840      	ldrh	r0, [r0, #2]
    4cf6:	0884      	lsrs	r4, r0, #2
    4cf8:	f004 fa40 	bl	917c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    4cfc:	4284      	cmp	r4, r0
    4cfe:	d300      	bcc.n	4d02 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    4d00:	4620      	mov	r0, r4
    4d02:	bd10      	pop	{r4, pc}
    4d04:	200000c0 	.word	0x200000c0
    4d08:	b530      	push	{r4, r5, lr}
    4d0a:	490d      	ldr	r1, [pc, #52]	; (4d40 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    4d0c:	2001      	movs	r0, #1
    4d0e:	6048      	str	r0, [r1, #4]
    4d10:	1e82      	subs	r2, r0, #2
    4d12:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4d16:	490b      	ldr	r1, [pc, #44]	; (4d44 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    4d18:	6088      	str	r0, [r1, #8]
    4d1a:	2300      	movs	r3, #0
    4d1c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    4d20:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4d24:	4c08      	ldr	r4, [pc, #32]	; (4d48 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    4d26:	6023      	str	r3, [r4, #0]
    4d28:	1d25      	adds	r5, r4, #4
    4d2a:	6028      	str	r0, [r5, #0]
    4d2c:	6088      	str	r0, [r1, #8]
    4d2e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4d32:	6023      	str	r3, [r4, #0]
    4d34:	6028      	str	r0, [r5, #0]
    4d36:	4906      	ldr	r1, [pc, #24]	; (4d50 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    4d38:	4804      	ldr	r0, [pc, #16]	; (4d4c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    4d3a:	6008      	str	r0, [r1, #0]
    4d3c:	bd30      	pop	{r4, r5, pc}
    4d3e:	0000      	.short	0x0000
    4d40:	4000e000 	.word	0x4000e000
    4d44:	4000f000 	.word	0x4000f000
    4d48:	4000f500 	.word	0x4000f500
    4d4c:	3ff60000 	.word	0x3ff60000
    4d50:	4001f508 	.word	0x4001f508

00004d54 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    4d54:	b510      	push	{r4, lr}
    4d56:	f7ff ffd7 	bl	4d08 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    4d5a:	f004 fae2 	bl	9322 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    4d5e:	4903      	ldr	r1, [pc, #12]	; (4d6c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    4d60:	4801      	ldr	r0, [pc, #4]	; (4d68 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    4d62:	6008      	str	r0, [r1, #0]
    4d64:	bd10      	pop	{r4, pc}
    4d66:	0000      	.short	0x0000
    4d68:	3ff60000 	.word	0x3ff60000
    4d6c:	4001f508 	.word	0x4001f508

00004d70 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4d70:	b510      	push	{r4, lr}
    4d72:	4604      	mov	r4, r0
    4d74:	f7ff ffc8 	bl	4d08 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    4d78:	f004 fad3 	bl	9322 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    4d7c:	f000 f888 	bl	4e90 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4d80:	4905      	ldr	r1, [pc, #20]	; (4d98 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    4d82:	4804      	ldr	r0, [pc, #16]	; (4d94 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    4d84:	6008      	str	r0, [r1, #0]
    4d86:	4620      	mov	r0, r4
    4d88:	f000 f8b8 	bl	4efc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4d90:	f000 b8dc 	b.w	4f4c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4d94:	3ff60000 	.word	0x3ff60000
    4d98:	4001f508 	.word	0x4001f508
    4d9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4da0:	4682      	mov	sl, r0
    4da2:	4838      	ldr	r0, [pc, #224]	; (4e84 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    4da4:	f003 fb02 	bl	83ac <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4da8:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 4e84 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    4dac:	b128      	cbz	r0, 4dba <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    4dae:	2601      	movs	r6, #1
    4db0:	f10b 0001 	add.w	r0, fp, #1
    4db4:	21ff      	movs	r1, #255	; 0xff
    4db6:	7001      	strb	r1, [r0, #0]
    4db8:	e000      	b.n	4dbc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    4dba:	2600      	movs	r6, #0
    4dbc:	f44f 7580 	mov.w	r5, #256	; 0x100
    4dc0:	4c31      	ldr	r4, [pc, #196]	; (4e88 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    4dc2:	f04f 0800 	mov.w	r8, #0
    4dc6:	1d2f      	adds	r7, r5, #4
    4dc8:	2101      	movs	r1, #1
    4dca:	6061      	str	r1, [r4, #4]
    4dcc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4dd0:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4dd4:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    4dd8:	6021      	str	r1, [r4, #0]
    4dda:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 4e8c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    4dde:	e01c      	b.n	4e1a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4de0:	f8d9 0000 	ldr.w	r0, [r9]
    4de4:	06c0      	lsls	r0, r0, #27
    4de6:	d518      	bpl.n	4e1a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4de8:	200e      	movs	r0, #14
    4dea:	f004 faa9 	bl	9340 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    4dee:	f3ef 8010 	mrs	r0, PRIMASK
    4df2:	9000      	str	r0, [sp, #0]
    4df4:	b672      	cpsid	i
    4df6:	2103      	movs	r1, #3
    4df8:	4620      	mov	r0, r4
    4dfa:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    4dfe:	4629      	mov	r1, r5
    4e00:	f004 faab 	bl	935a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4e04:	b930      	cbnz	r0, 4e14 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    4e06:	4639      	mov	r1, r7
    4e08:	4620      	mov	r0, r4
    4e0a:	f004 faa6 	bl	935a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4e0e:	b908      	cbnz	r0, 4e14 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    4e10:	f7ff f94c 	bl	40ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4e14:	9800      	ldr	r0, [sp, #0]
    4e16:	b900      	cbnz	r0, 4e1a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4e18:	b662      	cpsie	i
    4e1a:	4629      	mov	r1, r5
    4e1c:	4620      	mov	r0, r4
    4e1e:	f004 fa9c 	bl	935a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4e22:	b928      	cbnz	r0, 4e30 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    4e24:	4639      	mov	r1, r7
    4e26:	4620      	mov	r0, r4
    4e28:	f004 fa97 	bl	935a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4e2c:	2800      	cmp	r0, #0
    4e2e:	d0d7      	beq.n	4de0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    4e30:	4639      	mov	r1, r7
    4e32:	4620      	mov	r0, r4
    4e34:	f004 fa91 	bl	935a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4e38:	2800      	cmp	r0, #0
    4e3a:	d1c5      	bne.n	4dc8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    4e3c:	bb06      	cbnz	r6, 4e80 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    4e3e:	f89b 1001 	ldrb.w	r1, [fp, #1]
    4e42:	f88d 1000 	strb.w	r1, [sp]
    4e46:	9900      	ldr	r1, [sp, #0]
    4e48:	9100      	str	r1, [sp, #0]
    4e4a:	f89d 1000 	ldrb.w	r1, [sp]
    4e4e:	b109      	cbz	r1, 4e54 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    4e50:	2501      	movs	r5, #1
    4e52:	e000      	b.n	4e56 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    4e54:	2500      	movs	r5, #0
    4e56:	f10b 0001 	add.w	r0, fp, #1
    4e5a:	f880 8000 	strb.w	r8, [r0]
    4e5e:	2003      	movs	r0, #3
    4e60:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4e64:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4e68:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4e6c:	200e      	movs	r0, #14
    4e6e:	f004 fa67 	bl	9340 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    4e72:	4804      	ldr	r0, [pc, #16]	; (4e84 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    4e74:	f003 fab1 	bl	83da <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4e78:	b115      	cbz	r5, 4e80 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    4e7a:	2011      	movs	r0, #17
    4e7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e80:	2000      	movs	r0, #0
    4e82:	e7fb      	b.n	4e7c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    4e84:	2000017c 	.word	0x2000017c
    4e88:	4000e000 	.word	0x4000e000
    4e8c:	e000ed10 	.word	0xe000ed10

00004e90 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4e90:	b510      	push	{r4, lr}
    4e92:	4806      	ldr	r0, [pc, #24]	; (4eac <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    4e94:	f003 fa9d 	bl	83d2 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4e98:	b118      	cbz	r0, 4ea2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    4e9a:	2127      	movs	r1, #39	; 0x27
    4e9c:	201d      	movs	r0, #29
    4e9e:	f7ff faa9 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ea2:	4802      	ldr	r0, [pc, #8]	; (4eac <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    4ea4:	2100      	movs	r1, #0
    4ea6:	7041      	strb	r1, [r0, #1]
    4ea8:	bd10      	pop	{r4, pc}
    4eaa:	0000      	.short	0x0000
    4eac:	2000017c 	.word	0x2000017c

00004eb0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4eb0:	b570      	push	{r4, r5, r6, lr}
    4eb2:	4911      	ldr	r1, [pc, #68]	; (4ef8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4eb4:	680a      	ldr	r2, [r1, #0]
    4eb6:	b1ea      	cbz	r2, 4ef4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4eb8:	2300      	movs	r3, #0
    4eba:	461d      	mov	r5, r3
    4ebc:	2401      	movs	r4, #1
    4ebe:	684a      	ldr	r2, [r1, #4]
    4ec0:	1c52      	adds	r2, r2, #1
    4ec2:	604a      	str	r2, [r1, #4]
    4ec4:	2a09      	cmp	r2, #9
    4ec6:	d300      	bcc.n	4eca <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4ec8:	604d      	str	r5, [r1, #4]
    4eca:	790e      	ldrb	r6, [r1, #4]
    4ecc:	fa04 f206 	lsl.w	r2, r4, r6
    4ed0:	680e      	ldr	r6, [r1, #0]
    4ed2:	4216      	tst	r6, r2
    4ed4:	d00b      	beq.n	4eee <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4ed6:	f3ef 8310 	mrs	r3, PRIMASK
    4eda:	b672      	cpsid	i
    4edc:	680c      	ldr	r4, [r1, #0]
    4ede:	4394      	bics	r4, r2
    4ee0:	600c      	str	r4, [r1, #0]
    4ee2:	b903      	cbnz	r3, 4ee6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4ee4:	b662      	cpsie	i
    4ee6:	6849      	ldr	r1, [r1, #4]
    4ee8:	6001      	str	r1, [r0, #0]
    4eea:	2000      	movs	r0, #0
    4eec:	bd70      	pop	{r4, r5, r6, pc}
    4eee:	1c5b      	adds	r3, r3, #1
    4ef0:	2b09      	cmp	r3, #9
    4ef2:	d3e4      	bcc.n	4ebe <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4ef4:	2005      	movs	r0, #5
    4ef6:	bd70      	pop	{r4, r5, r6, pc}
    4ef8:	200000c8 	.word	0x200000c8

00004efc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4efc:	4802      	ldr	r0, [pc, #8]	; (4f08 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    4efe:	2100      	movs	r1, #0
    4f00:	6001      	str	r1, [r0, #0]
    4f02:	6041      	str	r1, [r0, #4]
    4f04:	4770      	bx	lr
    4f06:	0000      	.short	0x0000
    4f08:	200000c8 	.word	0x200000c8

00004f0c <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    4f0c:	b510      	push	{r4, lr}
    4f0e:	4c04      	ldr	r4, [pc, #16]	; (4f20 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    4f10:	7820      	ldrb	r0, [r4, #0]
    4f12:	28ff      	cmp	r0, #255	; 0xff
    4f14:	d003      	beq.n	4f1e <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    4f16:	f7ff f87f 	bl	4018 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    4f1a:	20ff      	movs	r0, #255	; 0xff
    4f1c:	7020      	strb	r0, [r4, #0]
    4f1e:	bd10      	pop	{r4, pc}
    4f20:	20000000 	.word	0x20000000

00004f24 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4f24:	b510      	push	{r4, lr}
    4f26:	4c08      	ldr	r4, [pc, #32]	; (4f48 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4f28:	7861      	ldrb	r1, [r4, #1]
    4f2a:	b109      	cbz	r1, 4f30 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4f2c:	200f      	movs	r0, #15
    4f2e:	bd10      	pop	{r4, pc}
    4f30:	f7ff f838 	bl	3fa4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4f34:	7020      	strb	r0, [r4, #0]
    4f36:	28ff      	cmp	r0, #255	; 0xff
    4f38:	d001      	beq.n	4f3e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4f3a:	2000      	movs	r0, #0
    4f3c:	bd10      	pop	{r4, pc}
    4f3e:	2178      	movs	r1, #120	; 0x78
    4f40:	201f      	movs	r0, #31
    4f42:	f7ff fa57 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f46:	0000      	.short	0x0000
    4f48:	20000000 	.word	0x20000000

00004f4c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4f4c:	4901      	ldr	r1, [pc, #4]	; (4f54 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4f4e:	2000      	movs	r0, #0
    4f50:	7048      	strb	r0, [r1, #1]
    4f52:	4770      	bx	lr
    4f54:	20000000 	.word	0x20000000
    4f58:	4905      	ldr	r1, [pc, #20]	; (4f70 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x24>)
    4f5a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4f5c:	4282      	cmp	r2, r0
    4f5e:	d105      	bne.n	4f6c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x20>
    4f60:	2000      	movs	r0, #0
    4f62:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4f66:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4f6a:	8488      	strh	r0, [r1, #36]	; 0x24
    4f6c:	4770      	bx	lr
    4f6e:	0000      	.short	0x0000
    4f70:	20000df8 	.word	0x20000df8

00004f74 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4f74:	4a0a      	ldr	r2, [pc, #40]	; (4fa0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4f76:	b110      	cbz	r0, 4f7e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4f78:	2801      	cmp	r0, #1
    4f7a:	d007      	beq.n	4f8c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4f7c:	e00e      	b.n	4f9c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4f7e:	7850      	ldrb	r0, [r2, #1]
    4f80:	b160      	cbz	r0, 4f9c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4f82:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4f86:	6008      	str	r0, [r1, #0]
    4f88:	88d0      	ldrh	r0, [r2, #6]
    4f8a:	e004      	b.n	4f96 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4f8c:	7810      	ldrb	r0, [r2, #0]
    4f8e:	b128      	cbz	r0, 4f9c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4f90:	6890      	ldr	r0, [r2, #8]
    4f92:	6008      	str	r0, [r1, #0]
    4f94:	8990      	ldrh	r0, [r2, #12]
    4f96:	8088      	strh	r0, [r1, #4]
    4f98:	2001      	movs	r0, #1
    4f9a:	4770      	bx	lr
    4f9c:	2000      	movs	r0, #0
    4f9e:	4770      	bx	lr
    4fa0:	2000017e 	.word	0x2000017e

00004fa4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4fa4:	4a08      	ldr	r2, [pc, #32]	; (4fc8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4fa6:	2301      	movs	r3, #1
    4fa8:	b138      	cbz	r0, 4fba <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4faa:	2801      	cmp	r0, #1
    4fac:	d104      	bne.n	4fb8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4fae:	7013      	strb	r3, [r2, #0]
    4fb0:	6808      	ldr	r0, [r1, #0]
    4fb2:	6090      	str	r0, [r2, #8]
    4fb4:	8888      	ldrh	r0, [r1, #4]
    4fb6:	8190      	strh	r0, [r2, #12]
    4fb8:	4770      	bx	lr
    4fba:	7053      	strb	r3, [r2, #1]
    4fbc:	6808      	ldr	r0, [r1, #0]
    4fbe:	f8c2 0002 	str.w	r0, [r2, #2]
    4fc2:	8888      	ldrh	r0, [r1, #4]
    4fc4:	80d0      	strh	r0, [r2, #6]
    4fc6:	4770      	bx	lr
    4fc8:	2000017e 	.word	0x2000017e

00004fcc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4fcc:	4906      	ldr	r1, [pc, #24]	; (4fe8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4fce:	b110      	cbz	r0, 4fd6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4fd0:	2801      	cmp	r0, #1
    4fd2:	d002      	beq.n	4fda <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4fd4:	e005      	b.n	4fe2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4fd6:	7848      	ldrb	r0, [r1, #1]
    4fd8:	e000      	b.n	4fdc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4fda:	7808      	ldrb	r0, [r1, #0]
    4fdc:	b108      	cbz	r0, 4fe2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4fde:	2001      	movs	r0, #1
    4fe0:	4770      	bx	lr
    4fe2:	2000      	movs	r0, #0
    4fe4:	4770      	bx	lr
    4fe6:	0000      	.short	0x0000
    4fe8:	2000017e 	.word	0x2000017e

00004fec <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4fec:	4901      	ldr	r1, [pc, #4]	; (4ff4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4fee:	7708      	strb	r0, [r1, #28]
    4ff0:	4770      	bx	lr
    4ff2:	0000      	.short	0x0000
    4ff4:	20000682 	.word	0x20000682

00004ff8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    4ff8:	4800      	ldr	r0, [pc, #0]	; (4ffc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    4ffa:	4770      	bx	lr
    4ffc:	20000ff1 	.word	0x20000ff1

00005000 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5000:	4904      	ldr	r1, [pc, #16]	; (5014 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5002:	788a      	ldrb	r2, [r1, #2]
    5004:	4282      	cmp	r2, r0
    5006:	d903      	bls.n	5010 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5008:	4408      	add	r0, r1
    500a:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    500e:	4770      	bx	lr
    5010:	2000      	movs	r0, #0
    5012:	4770      	bx	lr
    5014:	20000e1e 	.word	0x20000e1e

00005018 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5018:	4904      	ldr	r1, [pc, #16]	; (502c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    501a:	788a      	ldrb	r2, [r1, #2]
    501c:	4282      	cmp	r2, r0
    501e:	d903      	bls.n	5028 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5020:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5024:	3083      	adds	r0, #131	; 0x83
    5026:	4770      	bx	lr
    5028:	2000      	movs	r0, #0
    502a:	4770      	bx	lr
    502c:	20000e1e 	.word	0x20000e1e

00005030 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5030:	4a05      	ldr	r2, [pc, #20]	; (5048 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5032:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5036:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    503a:	6802      	ldr	r2, [r0, #0]
    503c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5040:	8880      	ldrh	r0, [r0, #4]
    5042:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5046:	4770      	bx	lr
    5048:	20000e1e 	.word	0x20000e1e

0000504c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    504c:	4904      	ldr	r1, [pc, #16]	; (5060 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    504e:	788a      	ldrb	r2, [r1, #2]
    5050:	4282      	cmp	r2, r0
    5052:	d903      	bls.n	505c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5054:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5058:	1cc0      	adds	r0, r0, #3
    505a:	4770      	bx	lr
    505c:	2000      	movs	r0, #0
    505e:	4770      	bx	lr
    5060:	20000e1e 	.word	0x20000e1e

00005064 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5064:	b510      	push	{r4, lr}
    5066:	f240 12d3 	movw	r2, #467	; 0x1d3
    506a:	2100      	movs	r1, #0
    506c:	4808      	ldr	r0, [pc, #32]	; (5090 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    506e:	f003 faae 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5072:	2208      	movs	r2, #8
    5074:	21ff      	movs	r1, #255	; 0xff
    5076:	4807      	ldr	r0, [pc, #28]	; (5094 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5078:	f003 faa9 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    507c:	4805      	ldr	r0, [pc, #20]	; (5094 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    507e:	2100      	movs	r1, #0
    5080:	1f00      	subs	r0, r0, #4
    5082:	7001      	strb	r1, [r0, #0]
    5084:	7041      	strb	r1, [r0, #1]
    5086:	f44f 7161 	mov.w	r1, #900	; 0x384
    508a:	8041      	strh	r1, [r0, #2]
    508c:	bd10      	pop	{r4, pc}
    508e:	0000      	.short	0x0000
    5090:	20000e1e 	.word	0x20000e1e
    5094:	20000170 	.word	0x20000170

00005098 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5098:	4b0b      	ldr	r3, [pc, #44]	; (50c8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    509a:	b510      	push	{r4, lr}
    509c:	789c      	ldrb	r4, [r3, #2]
    509e:	4284      	cmp	r4, r0
    50a0:	d90f      	bls.n	50c2 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    50a2:	4418      	add	r0, r3
    50a4:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    50a8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    50ac:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    50b0:	700b      	strb	r3, [r1, #0]
    50b2:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    50b6:	6011      	str	r1, [r2, #0]
    50b8:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    50bc:	8090      	strh	r0, [r2, #4]
    50be:	2001      	movs	r0, #1
    50c0:	bd10      	pop	{r4, pc}
    50c2:	2000      	movs	r0, #0
    50c4:	bd10      	pop	{r4, pc}
    50c6:	0000      	.short	0x0000
    50c8:	20000e1e 	.word	0x20000e1e

000050cc <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    50cc:	4907      	ldr	r1, [pc, #28]	; (50ec <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    50ce:	788a      	ldrb	r2, [r1, #2]
    50d0:	4282      	cmp	r2, r0
    50d2:	d909      	bls.n	50e8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    50d4:	4408      	add	r0, r1
    50d6:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    50da:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    50de:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    50e2:	f000 0001 	and.w	r0, r0, #1
    50e6:	4770      	bx	lr
    50e8:	2000      	movs	r0, #0
    50ea:	4770      	bx	lr
    50ec:	20000e1e 	.word	0x20000e1e

000050f0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    50f0:	4801      	ldr	r0, [pc, #4]	; (50f8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    50f2:	8840      	ldrh	r0, [r0, #2]
    50f4:	4770      	bx	lr
    50f6:	0000      	.short	0x0000
    50f8:	2000016c 	.word	0x2000016c

000050fc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    50fc:	4905      	ldr	r1, [pc, #20]	; (5114 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    50fe:	788a      	ldrb	r2, [r1, #2]
    5100:	4282      	cmp	r2, r0
    5102:	d903      	bls.n	510c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    5104:	4408      	add	r0, r1
    5106:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    510a:	b108      	cbz	r0, 5110 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    510c:	2000      	movs	r0, #0
    510e:	4770      	bx	lr
    5110:	2001      	movs	r0, #1
    5112:	4770      	bx	lr
    5114:	20000e1e 	.word	0x20000e1e

00005118 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5118:	b570      	push	{r4, r5, r6, lr}
    511a:	460d      	mov	r5, r1
    511c:	4606      	mov	r6, r0
    511e:	f000 f8c1 	bl	52a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5122:	4c10      	ldr	r4, [pc, #64]	; (5164 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    5124:	2810      	cmp	r0, #16
    5126:	d007      	beq.n	5138 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5128:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    512c:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5130:	07c9      	lsls	r1, r1, #31
    5132:	d001      	beq.n	5138 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5134:	2001      	movs	r0, #1
    5136:	bd70      	pop	{r4, r5, r6, pc}
    5138:	7861      	ldrb	r1, [r4, #1]
    513a:	2908      	cmp	r1, #8
    513c:	d210      	bcs.n	5160 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    513e:	2810      	cmp	r0, #16
    5140:	d008      	beq.n	5154 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    5142:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    5146:	2101      	movs	r1, #1
    5148:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    514c:	7860      	ldrb	r0, [r4, #1]
    514e:	1c40      	adds	r0, r0, #1
    5150:	7060      	strb	r0, [r4, #1]
    5152:	e7ef      	b.n	5134 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    5154:	2201      	movs	r2, #1
    5156:	4629      	mov	r1, r5
    5158:	4630      	mov	r0, r6
    515a:	f000 f887 	bl	526c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    515e:	e7f5      	b.n	514c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5160:	2000      	movs	r0, #0
    5162:	bd70      	pop	{r4, r5, r6, pc}
    5164:	20000e1e 	.word	0x20000e1e

00005168 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5168:	b570      	push	{r4, r5, r6, lr}
    516a:	4d0b      	ldr	r5, [pc, #44]	; (5198 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    516c:	7828      	ldrb	r0, [r5, #0]
    516e:	1e40      	subs	r0, r0, #1
    5170:	b244      	sxtb	r4, r0
    5172:	e00a      	b.n	518a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5174:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5178:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    517c:	07c0      	lsls	r0, r0, #31
    517e:	d002      	beq.n	5186 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5180:	b2e0      	uxtb	r0, r4
    5182:	f000 f8ed 	bl	5360 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    5186:	1e64      	subs	r4, r4, #1
    5188:	b264      	sxtb	r4, r4
    518a:	2c00      	cmp	r4, #0
    518c:	daf2      	bge.n	5174 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    518e:	4903      	ldr	r1, [pc, #12]	; (519c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5190:	2000      	movs	r0, #0
    5192:	7048      	strb	r0, [r1, #1]
    5194:	bd70      	pop	{r4, r5, r6, pc}
    5196:	0000      	.short	0x0000
    5198:	20000e1e 	.word	0x20000e1e
    519c:	2000016c 	.word	0x2000016c

000051a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    51a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51a4:	2400      	movs	r4, #0
    51a6:	4625      	mov	r5, r4
    51a8:	4e18      	ldr	r6, [pc, #96]	; (520c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    51aa:	e029      	b.n	5200 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    51ac:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    51b0:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    51b4:	07c0      	lsls	r0, r0, #31
    51b6:	d021      	beq.n	51fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    51b8:	4628      	mov	r0, r5
    51ba:	f000 f843 	bl	5244 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    51be:	4603      	mov	r3, r0
    51c0:	f7ff ff44 	bl	504c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    51c4:	4601      	mov	r1, r0
    51c6:	2000      	movs	r0, #0
    51c8:	2b10      	cmp	r3, #16
    51ca:	d009      	beq.n	51e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    51cc:	18f2      	adds	r2, r6, r3
    51ce:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    51d2:	f1bc 0f01 	cmp.w	ip, #1
    51d6:	d002      	beq.n	51de <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    51d8:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    51dc:	b102      	cbz	r2, 51e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    51de:	2001      	movs	r0, #1
    51e0:	1e40      	subs	r0, r0, #1
    51e2:	4201      	tst	r1, r0
    51e4:	d10a      	bne.n	51fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    51e6:	480a      	ldr	r0, [pc, #40]	; (5210 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    51e8:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    51ec:	5503      	strb	r3, [r0, r4]
    51ee:	4620      	mov	r0, r4
    51f0:	1c64      	adds	r4, r4, #1
    51f2:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    51f6:	b2e4      	uxtb	r4, r4
    51f8:	f002 fb02 	bl	7800 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    51fc:	1c6d      	adds	r5, r5, #1
    51fe:	b2ed      	uxtb	r5, r5
    5200:	7830      	ldrb	r0, [r6, #0]
    5202:	42a8      	cmp	r0, r5
    5204:	d8d2      	bhi.n	51ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    520a:	0000      	.short	0x0000
    520c:	20000e1e 	.word	0x20000e1e
    5210:	20000170 	.word	0x20000170
    5214:	4602      	mov	r2, r0
    5216:	4809      	ldr	r0, [pc, #36]	; (523c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5218:	b510      	push	{r4, lr}
    521a:	7800      	ldrb	r0, [r0, #0]
    521c:	460b      	mov	r3, r1
    521e:	b158      	cbz	r0, 5238 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5220:	4807      	ldr	r0, [pc, #28]	; (5240 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5222:	7881      	ldrb	r1, [r0, #2]
    5224:	b141      	cbz	r1, 5238 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5226:	b10b      	cbz	r3, 522c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5228:	1cc0      	adds	r0, r0, #3
    522a:	e001      	b.n	5230 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    522c:	4804      	ldr	r0, [pc, #16]	; (5240 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    522e:	3083      	adds	r0, #131	; 0x83
    5230:	f001 fe0e 	bl	6e50 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5234:	2001      	movs	r0, #1
    5236:	bd10      	pop	{r4, pc}
    5238:	2000      	movs	r0, #0
    523a:	bd10      	pop	{r4, pc}
    523c:	2000016c 	.word	0x2000016c
    5240:	20000e1e 	.word	0x20000e1e
    5244:	4908      	ldr	r1, [pc, #32]	; (5268 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    5246:	b510      	push	{r4, lr}
    5248:	4603      	mov	r3, r0
    524a:	2000      	movs	r0, #0
    524c:	788a      	ldrb	r2, [r1, #2]
    524e:	e006      	b.n	525e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    5250:	180c      	adds	r4, r1, r0
    5252:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    5256:	429c      	cmp	r4, r3
    5258:	d004      	beq.n	5264 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    525a:	1c40      	adds	r0, r0, #1
    525c:	b2c0      	uxtb	r0, r0
    525e:	4282      	cmp	r2, r0
    5260:	d8f6      	bhi.n	5250 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    5262:	2010      	movs	r0, #16
    5264:	bd10      	pop	{r4, pc}
    5266:	0000      	.short	0x0000
    5268:	20000e1e 	.word	0x20000e1e
    526c:	b570      	push	{r4, r5, r6, lr}
    526e:	4b0c      	ldr	r3, [pc, #48]	; (52a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    5270:	4604      	mov	r4, r0
    5272:	7818      	ldrb	r0, [r3, #0]
    5274:	1c45      	adds	r5, r0, #1
    5276:	701d      	strb	r5, [r3, #0]
    5278:	2810      	cmp	r0, #16
    527a:	d303      	bcc.n	5284 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    527c:	2146      	movs	r1, #70	; 0x46
    527e:	2028      	movs	r0, #40	; 0x28
    5280:	f7ff f8b8 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5284:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5288:	680d      	ldr	r5, [r1, #0]
    528a:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    528e:	8889      	ldrh	r1, [r1, #4]
    5290:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5294:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5298:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    529c:	bd70      	pop	{r4, r5, r6, pc}
    529e:	0000      	.short	0x0000
    52a0:	20000e1e 	.word	0x20000e1e
    52a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    52a6:	4c1a      	ldr	r4, [pc, #104]	; (5310 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    52a8:	4603      	mov	r3, r0
    52aa:	2000      	movs	r0, #0
    52ac:	7825      	ldrb	r5, [r4, #0]
    52ae:	e02a      	b.n	5306 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    52b0:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    52b4:	780f      	ldrb	r7, [r1, #0]
    52b6:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    52ba:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    52be:	ea87 070c 	eor.w	r7, r7, ip
    52c2:	405e      	eors	r6, r3
    52c4:	443e      	add	r6, r7
    52c6:	784f      	ldrb	r7, [r1, #1]
    52c8:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    52cc:	ea87 070c 	eor.w	r7, r7, ip
    52d0:	443e      	add	r6, r7
    52d2:	788f      	ldrb	r7, [r1, #2]
    52d4:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    52d8:	ea87 070c 	eor.w	r7, r7, ip
    52dc:	443e      	add	r6, r7
    52de:	78cf      	ldrb	r7, [r1, #3]
    52e0:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    52e4:	ea87 070c 	eor.w	r7, r7, ip
    52e8:	443e      	add	r6, r7
    52ea:	790f      	ldrb	r7, [r1, #4]
    52ec:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    52f0:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    52f4:	ea87 070c 	eor.w	r7, r7, ip
    52f8:	443e      	add	r6, r7
    52fa:	794f      	ldrb	r7, [r1, #5]
    52fc:	4057      	eors	r7, r2
    52fe:	42f7      	cmn	r7, r6
    5300:	d004      	beq.n	530c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    5302:	1c40      	adds	r0, r0, #1
    5304:	b2c0      	uxtb	r0, r0
    5306:	4285      	cmp	r5, r0
    5308:	d8d2      	bhi.n	52b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    530a:	2010      	movs	r0, #16
    530c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    530e:	0000      	.short	0x0000
    5310:	20000e1e 	.word	0x20000e1e
    5314:	b570      	push	{r4, r5, r6, lr}
    5316:	4605      	mov	r5, r0
    5318:	f7ff ff94 	bl	5244 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    531c:	2810      	cmp	r0, #16
    531e:	d11c      	bne.n	535a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    5320:	4c0e      	ldr	r4, [pc, #56]	; (535c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    5322:	7820      	ldrb	r0, [r4, #0]
    5324:	1e40      	subs	r0, r0, #1
    5326:	b2c0      	uxtb	r0, r0
    5328:	7020      	strb	r0, [r4, #0]
    532a:	42a8      	cmp	r0, r5
    532c:	d015      	beq.n	535a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    532e:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5332:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5336:	f502 7080 	add.w	r0, r2, #256	; 0x100
    533a:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    533e:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5342:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5346:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    534a:	7820      	ldrb	r0, [r4, #0]
    534c:	f7ff ff7a 	bl	5244 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5350:	2810      	cmp	r0, #16
    5352:	d002      	beq.n	535a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    5354:	4420      	add	r0, r4
    5356:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    535a:	bd70      	pop	{r4, r5, r6, pc}
    535c:	20000e1e 	.word	0x20000e1e
    5360:	4905      	ldr	r1, [pc, #20]	; (5378 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    5362:	784a      	ldrb	r2, [r1, #1]
    5364:	1e52      	subs	r2, r2, #1
    5366:	704a      	strb	r2, [r1, #1]
    5368:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    536c:	2200      	movs	r2, #0
    536e:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5372:	f7ff bfcf 	b.w	5314 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    5376:	0000      	.short	0x0000
    5378:	20000e1e 	.word	0x20000e1e

0000537c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    537c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5380:	4604      	mov	r4, r0
    5382:	f100 0580 	add.w	r5, r0, #128	; 0x80
    5386:	f04f 0901 	mov.w	r9, #1
    538a:	b171      	cbz	r1, 53aa <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    538c:	f104 079e 	add.w	r7, r4, #158	; 0x9e
    5390:	1e7e      	subs	r6, r7, #1
    5392:	2901      	cmp	r1, #1
    5394:	d020      	beq.n	53d8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    5396:	2902      	cmp	r1, #2
    5398:	d045      	beq.n	5426 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xaa>
    539a:	2903      	cmp	r1, #3
    539c:	d11a      	bne.n	53d4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    539e:	4639      	mov	r1, r7
    53a0:	4630      	mov	r0, r6
    53a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    53a6:	f004 b92a 	b.w	95fe <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    53aa:	f44f 723a 	mov.w	r2, #744	; 0x2e8
    53ae:	2100      	movs	r1, #0
    53b0:	f003 f90d 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    53b4:	f885 901d 	strb.w	r9, [r5, #29]
    53b8:	4820      	ldr	r0, [pc, #128]	; (543c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    53ba:	6668      	str	r0, [r5, #100]	; 0x64
    53bc:	2007      	movs	r0, #7
    53be:	66a8      	str	r0, [r5, #104]	; 0x68
    53c0:	f814 0fe4 	ldrb.w	r0, [r4, #228]!
    53c4:	f020 0004 	bic.w	r0, r0, #4
    53c8:	7020      	strb	r0, [r4, #0]
    53ca:	20fe      	movs	r0, #254	; 0xfe
    53cc:	f885 009c 	strb.w	r0, [r5, #156]	; 0x9c
    53d0:	207f      	movs	r0, #127	; 0x7f
    53d2:	7468      	strb	r0, [r5, #17]
    53d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53d8:	f04f 0800 	mov.w	r8, #0
    53dc:	f8a4 8226 	strh.w	r8, [r4, #550]	; 0x226
    53e0:	f884 821b 	strb.w	r8, [r4, #539]	; 0x21b
    53e4:	6921      	ldr	r1, [r4, #16]
    53e6:	4816      	ldr	r0, [pc, #88]	; (5440 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>)
    53e8:	460a      	mov	r2, r1
    53ea:	4408      	add	r0, r1
    53ec:	fbb0 f0f1 	udiv	r0, r0, r1
    53f0:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    53f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    53f8:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    53fc:	8b63      	ldrh	r3, [r4, #26]
    53fe:	4628      	mov	r0, r5
    5400:	f000 f820 	bl	5444 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>
    5404:	4639      	mov	r1, r7
    5406:	4630      	mov	r0, r6
    5408:	f004 f8f9 	bl	95fe <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    540c:	f003 f841 	bl	8492 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5410:	b118      	cbz	r0, 541a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9e>
    5412:	6960      	ldr	r0, [r4, #20]
    5414:	f000 fa4e 	bl	58b4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    5418:	b110      	cbz	r0, 5420 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa4>
    541a:	f884 820c 	strb.w	r8, [r4, #524]	; 0x20c
    541e:	e7d9      	b.n	53d4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    5420:	f884 920c 	strb.w	r9, [r4, #524]	; 0x20c
    5424:	e7d6      	b.n	53d4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    5426:	6901      	ldr	r1, [r0, #16]
    5428:	f8b4 32ca 	ldrh.w	r3, [r4, #714]	; 0x2ca
    542c:	f8d4 22c4 	ldr.w	r2, [r4, #708]	; 0x2c4
    5430:	4628      	mov	r0, r5
    5432:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5436:	f000 b805 	b.w	5444 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>
    543a:	0000      	.short	0x0000
    543c:	3004492f 	.word	0x3004492f
    5440:	01c9c37f 	.word	0x01c9c37f
    5444:	b510      	push	{r4, lr}
    5446:	2400      	movs	r4, #0
    5448:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
    544c:	f830 4f48 	ldrh.w	r4, [r0, #72]!
    5450:	434c      	muls	r4, r1
    5452:	fbb4 f4f2 	udiv	r4, r4, r2
    5456:	f820 4910 	strh.w	r4, [r0], #-16
    545a:	f240 2471 	movw	r4, #625	; 0x271
    545e:	4363      	muls	r3, r4
    5460:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5464:	1e5b      	subs	r3, r3, #1
    5466:	fbb3 f3f2 	udiv	r3, r3, r2
    546a:	81c3      	strh	r3, [r0, #14]
    546c:	4b09      	ldr	r3, [pc, #36]	; (5494 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x118>)
    546e:	fbb3 f3f2 	udiv	r3, r3, r2
    5472:	1c5b      	adds	r3, r3, #1
    5474:	8283      	strh	r3, [r0, #20]
    5476:	8903      	ldrh	r3, [r0, #8]
    5478:	4363      	muls	r3, r4
    547a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    547e:	1e5b      	subs	r3, r3, #1
    5480:	fbb3 f3f2 	udiv	r3, r3, r2
    5484:	6043      	str	r3, [r0, #4]
    5486:	6803      	ldr	r3, [r0, #0]
    5488:	434b      	muls	r3, r1
    548a:	fbb3 f1f2 	udiv	r1, r3, r2
    548e:	6001      	str	r1, [r0, #0]
    5490:	bd10      	pop	{r4, pc}
    5492:	0000      	.short	0x0000
    5494:	02625a00 	.word	0x02625a00

00005498 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    5498:	4904      	ldr	r1, [pc, #16]	; (54ac <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    549a:	7c89      	ldrb	r1, [r1, #18]
    549c:	0749      	lsls	r1, r1, #29
    549e:	d400      	bmi.n	54a2 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    54a0:	b108      	cbz	r0, 54a6 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    54a2:	2000      	movs	r0, #0
    54a4:	4770      	bx	lr
    54a6:	2001      	movs	r0, #1
    54a8:	4770      	bx	lr
    54aa:	0000      	.short	0x0000
    54ac:	20000d5c 	.word	0x20000d5c

000054b0 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    54b0:	4803      	ldr	r0, [pc, #12]	; (54c0 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    54b2:	7c80      	ldrb	r0, [r0, #18]
    54b4:	0780      	lsls	r0, r0, #30
    54b6:	d401      	bmi.n	54bc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    54b8:	2001      	movs	r0, #1
    54ba:	4770      	bx	lr
    54bc:	2000      	movs	r0, #0
    54be:	4770      	bx	lr
    54c0:	20000d5c 	.word	0x20000d5c

000054c4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    54c4:	4803      	ldr	r0, [pc, #12]	; (54d4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    54c6:	7c80      	ldrb	r0, [r0, #18]
    54c8:	07c0      	lsls	r0, r0, #31
    54ca:	d001      	beq.n	54d0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    54cc:	2000      	movs	r0, #0
    54ce:	4770      	bx	lr
    54d0:	2001      	movs	r0, #1
    54d2:	4770      	bx	lr
    54d4:	20000d5c 	.word	0x20000d5c

000054d8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    54d8:	b538      	push	{r3, r4, r5, lr}
    54da:	b318      	cbz	r0, 5524 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x4c>
    54dc:	7a03      	ldrb	r3, [r0, #8]
    54de:	f88d 3000 	strb.w	r3, [sp]
    54e2:	9b00      	ldr	r3, [sp, #0]
    54e4:	9300      	str	r3, [sp, #0]
    54e6:	f89d 3000 	ldrb.w	r3, [sp]
    54ea:	2b00      	cmp	r3, #0
    54ec:	d126      	bne.n	553c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x64>
    54ee:	6041      	str	r1, [r0, #4]
    54f0:	f100 0108 	add.w	r1, r0, #8
    54f4:	700a      	strb	r2, [r1, #0]
    54f6:	f3ef 8210 	mrs	r2, PRIMASK
    54fa:	b672      	cpsid	i
    54fc:	4b10      	ldr	r3, [pc, #64]	; (5540 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x68>)
    54fe:	6003      	str	r3, [r0, #0]
    5500:	1f19      	subs	r1, r3, #4
    5502:	684c      	ldr	r4, [r1, #4]
    5504:	7a24      	ldrb	r4, [r4, #8]
    5506:	f88d 4000 	strb.w	r4, [sp]
    550a:	9c00      	ldr	r4, [sp, #0]
    550c:	9400      	str	r4, [sp, #0]
    550e:	f89d 5000 	ldrb.w	r5, [sp]
    5512:	2d01      	cmp	r5, #1
    5514:	d004      	beq.n	5520 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x48>
    5516:	680b      	ldr	r3, [r1, #0]
    5518:	6018      	str	r0, [r3, #0]
    551a:	6008      	str	r0, [r1, #0]
    551c:	b13a      	cbz	r2, 552e <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x56>
    551e:	e007      	b.n	5530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x58>
    5520:	600b      	str	r3, [r1, #0]
    5522:	e7f9      	b.n	5518 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x40>
    5524:	f44f 6192 	mov.w	r1, #1168	; 0x490
    5528:	2010      	movs	r0, #16
    552a:	f7fe ff63 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    552e:	b662      	cpsie	i
    5530:	4804      	ldr	r0, [pc, #16]	; (5544 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x6c>)
    5532:	7800      	ldrb	r0, [r0, #0]
    5534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5538:	f7fe bd52 	b.w	3fe0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    553c:	bd38      	pop	{r3, r4, r5, pc}
    553e:	0000      	.short	0x0000
    5540:	20000d8c 	.word	0x20000d8c
    5544:	2000018c 	.word	0x2000018c

00005548 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    5548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    554c:	4f47      	ldr	r7, [pc, #284]	; (566c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x124>)
    554e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 5670 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    5552:	4682      	mov	sl, r0
    5554:	2600      	movs	r6, #0
    5556:	6878      	ldr	r0, [r7, #4]
    5558:	7a00      	ldrb	r0, [r0, #8]
    555a:	f88d 0000 	strb.w	r0, [sp]
    555e:	9800      	ldr	r0, [sp, #0]
    5560:	9000      	str	r0, [sp, #0]
    5562:	f89d 1000 	ldrb.w	r1, [sp]
    5566:	2927      	cmp	r1, #39	; 0x27
    5568:	d106      	bne.n	5578 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>
    556a:	f899 1013 	ldrb.w	r1, [r9, #19]
    556e:	b119      	cbz	r1, 5578 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>
    5570:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    5574:	2800      	cmp	r0, #0
    5576:	d06c      	beq.n	5652 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    5578:	f88d 6000 	strb.w	r6, [sp]
    557c:	4668      	mov	r0, sp
    557e:	f000 f88b 	bl	5698 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x10>
    5582:	f89d 1000 	ldrb.w	r1, [sp]
    5586:	2900      	cmp	r1, #0
    5588:	d1f8      	bne.n	557c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    558a:	2800      	cmp	r0, #0
    558c:	d061      	beq.n	5652 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    558e:	4604      	mov	r4, r0
    5590:	7a00      	ldrb	r0, [r0, #8]
    5592:	f88d 0000 	strb.w	r0, [sp]
    5596:	9800      	ldr	r0, [sp, #0]
    5598:	9000      	str	r0, [sp, #0]
    559a:	f89d 5000 	ldrb.w	r5, [sp]
    559e:	1ea8      	subs	r0, r5, #2
    55a0:	2826      	cmp	r0, #38	; 0x26
    55a2:	d25d      	bcs.n	5660 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    55a4:	e8df f000 	tbb	[pc, r0]
    55a8:	1a5c2213 	.word	0x1a5c2213
    55ac:	3e22225c 	.word	0x3e22225c
    55b0:	22222222 	.word	0x22222222
    55b4:	5c1a5c22 	.word	0x5c1a5c22
    55b8:	5c1a2222 	.word	0x5c1a2222
    55bc:	225c5c5c 	.word	0x225c5c5c
    55c0:	1a225c5c 	.word	0x1a225c5c
    55c4:	435c2222 	.word	0x435c2222
    55c8:	2f5c5c1a 	.word	0x2f5c5c1a
    55cc:	4c34      	.short	0x4c34
    55ce:	6862      	ldr	r2, [r4, #4]
    55d0:	bb7a      	cbnz	r2, 5632 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    55d2:	f240 318a 	movw	r1, #906	; 0x38a
    55d6:	e040      	b.n	565a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    55d8:	7226      	strb	r6, [r4, #8]
    55da:	e044      	b.n	5666 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    55dc:	4825      	ldr	r0, [pc, #148]	; (5674 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12c>)
    55de:	6803      	ldr	r3, [r0, #0]
    55e0:	b11b      	cbz	r3, 55ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    55e2:	6860      	ldr	r0, [r4, #4]
    55e4:	462a      	mov	r2, r5
    55e6:	4651      	mov	r1, sl
    55e8:	4798      	blx	r3
    55ea:	e7f5      	b.n	55d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    55ec:	462a      	mov	r2, r5
    55ee:	4621      	mov	r1, r4
    55f0:	4650      	mov	r0, sl
    55f2:	f000 f879 	bl	56e8 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x60>
    55f6:	b110      	cbz	r0, 55fe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    55f8:	2d0d      	cmp	r5, #13
    55fa:	d034      	beq.n	5666 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    55fc:	e7ec      	b.n	55d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    55fe:	2d0d      	cmp	r5, #13
    5600:	d031      	beq.n	5666 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    5602:	7226      	strb	r6, [r4, #8]
    5604:	e7a7      	b.n	5556 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe>
    5606:	6862      	ldr	r2, [r4, #4]
    5608:	b99a      	cbnz	r2, 5632 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    560a:	f240 412b 	movw	r1, #1067	; 0x42b
    560e:	e024      	b.n	565a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    5610:	f88a 6001 	strb.w	r6, [sl, #1]
    5614:	2115      	movs	r1, #21
    5616:	f88a 1000 	strb.w	r1, [sl]
    561a:	f8d4 1009 	ldr.w	r1, [r4, #9]
    561e:	f8ca 1004 	str.w	r1, [sl, #4]
    5622:	e7d9      	b.n	55d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    5624:	6862      	ldr	r2, [r4, #4]
    5626:	b922      	cbnz	r2, 5632 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    5628:	f240 413d 	movw	r1, #1085	; 0x43d
    562c:	e015      	b.n	565a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    562e:	6862      	ldr	r2, [r4, #4]
    5630:	b11a      	cbz	r2, 563a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf2>
    5632:	4651      	mov	r1, sl
    5634:	4620      	mov	r0, r4
    5636:	4790      	blx	r2
    5638:	e7ce      	b.n	55d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    563a:	f240 4147 	movw	r1, #1095	; 0x447
    563e:	e00c      	b.n	565a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    5640:	480d      	ldr	r0, [pc, #52]	; (5678 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>)
    5642:	6802      	ldr	r2, [r0, #0]
    5644:	b122      	cbz	r2, 5650 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    5646:	6860      	ldr	r0, [r4, #4]
    5648:	b128      	cbz	r0, 5656 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    564a:	8800      	ldrh	r0, [r0, #0]
    564c:	4651      	mov	r1, sl
    564e:	4790      	blx	r2
    5650:	2002      	movs	r0, #2
    5652:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5656:	f44f 618a 	mov.w	r1, #1104	; 0x450
    565a:	2010      	movs	r0, #16
    565c:	f7fe feca 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5660:	f240 416b 	movw	r1, #1131	; 0x46b
    5664:	e7f9      	b.n	565a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    5666:	2004      	movs	r0, #4
    5668:	e7f3      	b.n	5652 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    566a:	0000      	.short	0x0000
    566c:	20000d88 	.word	0x20000d88
    5670:	20000d5c 	.word	0x20000d5c
    5674:	200000d0 	.word	0x200000d0
    5678:	200000d4 	.word	0x200000d4

0000567c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    567c:	4901      	ldr	r1, [pc, #4]	; (5684 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    567e:	7008      	strb	r0, [r1, #0]
    5680:	f000 b902 	b.w	5888 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x200>
    5684:	2000018c 	.word	0x2000018c

00005688 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    5688:	4902      	ldr	r1, [pc, #8]	; (5694 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    568a:	4801      	ldr	r0, [pc, #4]	; (5690 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    568c:	6008      	str	r0, [r1, #0]
    568e:	4770      	bx	lr
    5690:	000098f7 	.word	0x000098f7
    5694:	200000d0 	.word	0x200000d0
    5698:	b538      	push	{r3, r4, r5, lr}
    569a:	4602      	mov	r2, r0
    569c:	4b11      	ldr	r3, [pc, #68]	; (56e4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x5c>)
    569e:	2000      	movs	r0, #0
    56a0:	7010      	strb	r0, [r2, #0]
    56a2:	6858      	ldr	r0, [r3, #4]
    56a4:	7a01      	ldrb	r1, [r0, #8]
    56a6:	f88d 1000 	strb.w	r1, [sp]
    56aa:	9900      	ldr	r1, [sp, #0]
    56ac:	9100      	str	r1, [sp, #0]
    56ae:	f89d 5000 	ldrb.w	r5, [sp]
    56b2:	2401      	movs	r4, #1
    56b4:	2d01      	cmp	r5, #1
    56b6:	d006      	beq.n	56c6 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x3e>
    56b8:	f3ef 8110 	mrs	r1, PRIMASK
    56bc:	b672      	cpsid	i
    56be:	6805      	ldr	r5, [r0, #0]
    56c0:	605d      	str	r5, [r3, #4]
    56c2:	b111      	cbz	r1, 56ca <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x42>
    56c4:	e002      	b.n	56cc <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x44>
    56c6:	2000      	movs	r0, #0
    56c8:	bd38      	pop	{r3, r4, r5, pc}
    56ca:	b662      	cpsie	i
    56cc:	7a01      	ldrb	r1, [r0, #8]
    56ce:	f88d 1000 	strb.w	r1, [sp]
    56d2:	9900      	ldr	r1, [sp, #0]
    56d4:	9100      	str	r1, [sp, #0]
    56d6:	f89d 3000 	ldrb.w	r3, [sp]
    56da:	2b00      	cmp	r3, #0
    56dc:	d1f4      	bne.n	56c8 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x40>
    56de:	7014      	strb	r4, [r2, #0]
    56e0:	bd38      	pop	{r3, r4, r5, pc}
    56e2:	0000      	.short	0x0000
    56e4:	20000d88 	.word	0x20000d88
    56e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    56ec:	b086      	sub	sp, #24
    56ee:	000f      	movs	r7, r1
    56f0:	4604      	mov	r4, r0
    56f2:	4691      	mov	r9, r2
    56f4:	d013      	beq.n	571e <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x96>
    56f6:	6878      	ldr	r0, [r7, #4]
    56f8:	b188      	cbz	r0, 571e <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x96>
    56fa:	f100 0580 	add.w	r5, r0, #128	; 0x80
    56fe:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    5702:	8806      	ldrh	r6, [r0, #0]
    5704:	4610      	mov	r0, r2
    5706:	f04f 0800 	mov.w	r8, #0
    570a:	2a12      	cmp	r2, #18
    570c:	d078      	beq.n	5800 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x178>
    570e:	dc09      	bgt.n	5724 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x9c>
    5710:	f04f 0a01 	mov.w	sl, #1
    5714:	2803      	cmp	r0, #3
    5716:	d00a      	beq.n	572e <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xa6>
    5718:	2a0d      	cmp	r2, #13
    571a:	d170      	bne.n	57fe <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x176>
    571c:	e01a      	b.n	5754 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xcc>
    571e:	f240 210b 	movw	r1, #523	; 0x20b
    5722:	e0ac      	b.n	587e <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1f6>
    5724:	281e      	cmp	r0, #30
    5726:	d04c      	beq.n	57c2 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x13a>
    5728:	2a1f      	cmp	r2, #31
    572a:	d17f      	bne.n	582c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1a4>
    572c:	e026      	b.n	577c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xf4>
    572e:	2d00      	cmp	r5, #0
    5730:	d00f      	beq.n	5752 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xca>
    5732:	f884 8001 	strb.w	r8, [r4, #1]
    5736:	f884 a000 	strb.w	sl, [r4]
    573a:	f884 8004 	strb.w	r8, [r4, #4]
    573e:	f8a4 6005 	strh.w	r6, [r4, #5]
    5742:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
    5746:	71e0      	strb	r0, [r4, #7]
    5748:	f835 0f60 	ldrh.w	r0, [r5, #96]!
    574c:	8120      	strh	r0, [r4, #8]
    574e:	8868      	ldrh	r0, [r5, #2]
    5750:	8160      	strh	r0, [r4, #10]
    5752:	e075      	b.n	5840 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1b8>
    5754:	4630      	mov	r0, r6
    5756:	f7ff f9ff 	bl	4b58 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    575a:	b160      	cbz	r0, 5776 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xee>
    575c:	f884 8001 	strb.w	r8, [r4, #1]
    5760:	220d      	movs	r2, #13
    5762:	7022      	strb	r2, [r4, #0]
    5764:	80e6      	strh	r6, [r4, #6]
    5766:	f8a4 a008 	strh.w	sl, [r4, #8]
    576a:	4641      	mov	r1, r8
    576c:	f884 a004 	strb.w	sl, [r4, #4]
    5770:	f003 fbb1 	bl	8ed6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    5774:	e064      	b.n	5840 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1b8>
    5776:	f240 1153 	movw	r1, #339	; 0x153
    577a:	e080      	b.n	587e <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1f6>
    577c:	f7ff fea2 	bl	54c4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    5780:	b3e8      	cbz	r0, 57fe <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x176>
    5782:	f887 8008 	strb.w	r8, [r7, #8]
    5786:	4630      	mov	r0, r6
    5788:	f8ad 6000 	strh.w	r6, [sp]
    578c:	a902      	add	r1, sp, #8
    578e:	f003 fea3 	bl	94d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5792:	b110      	cbz	r0, 579a <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x112>
    5794:	f240 1125 	movw	r1, #293	; 0x125
    5798:	e071      	b.n	587e <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1f6>
    579a:	9803      	ldr	r0, [sp, #12]
    579c:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    57a0:	f88d 1002 	strb.w	r1, [sp, #2]
    57a4:	7841      	ldrb	r1, [r0, #1]
    57a6:	f88d 1003 	strb.w	r1, [sp, #3]
    57aa:	8840      	ldrh	r0, [r0, #2]
    57ac:	f8ad 0004 	strh.w	r0, [sp, #4]
    57b0:	2102      	movs	r1, #2
    57b2:	4668      	mov	r0, sp
    57b4:	f004 ff3b 	bl	a62e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    57b8:	2800      	cmp	r0, #0
    57ba:	d034      	beq.n	5826 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x19e>
    57bc:	f240 113b 	movw	r1, #315	; 0x13b
    57c0:	e05d      	b.n	587e <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1f6>
    57c2:	f7ff fe75 	bl	54b0 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    57c6:	b1d0      	cbz	r0, 57fe <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x176>
    57c8:	f887 8008 	strb.w	r8, [r7, #8]
    57cc:	a903      	add	r1, sp, #12
    57ce:	4630      	mov	r0, r6
    57d0:	f004 fe24 	bl	a41c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    57d4:	b110      	cbz	r0, 57dc <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x154>
    57d6:	f44f 71a1 	mov.w	r1, #322	; 0x142
    57da:	e050      	b.n	587e <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1f6>
    57dc:	f8ad 6000 	strh.w	r6, [sp]
    57e0:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    57e4:	f8ad 0002 	strh.w	r0, [sp, #2]
    57e8:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    57ec:	f8ad 0004 	strh.w	r0, [sp, #4]
    57f0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    57f4:	f8ad 0006 	strh.w	r0, [sp, #6]
    57f8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    57fc:	e001      	b.n	5802 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x17a>
    57fe:	e015      	b.n	582c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1a4>
    5800:	e009      	b.n	5816 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x18e>
    5802:	f8ad 0008 	strh.w	r0, [sp, #8]
    5806:	4668      	mov	r0, sp
    5808:	f004 fe41 	bl	a48e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    580c:	2800      	cmp	r0, #0
    580e:	d00a      	beq.n	5826 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x19e>
    5810:	f240 114b 	movw	r1, #331	; 0x14b
    5814:	e033      	b.n	587e <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1f6>
    5816:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    581a:	f000 0001 	and.w	r0, r0, #1
    581e:	f7ff fe3b 	bl	5498 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    5822:	b130      	cbz	r0, 5832 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1aa>
    5824:	2000      	movs	r0, #0
    5826:	b006      	add	sp, #24
    5828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    582c:	f1b9 0f0a 	cmp.w	r9, #10
    5830:	d008      	beq.n	5844 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1bc>
    5832:	4814      	ldr	r0, [pc, #80]	; (5884 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1fc>)
    5834:	6803      	ldr	r3, [r0, #0]
    5836:	b11b      	cbz	r3, 5840 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1b8>
    5838:	6878      	ldr	r0, [r7, #4]
    583a:	464a      	mov	r2, r9
    583c:	4621      	mov	r1, r4
    583e:	4798      	blx	r3
    5840:	2001      	movs	r0, #1
    5842:	e7f0      	b.n	5826 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x19e>
    5844:	4630      	mov	r0, r6
    5846:	f7ff f971 	bl	4b2c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    584a:	f003 fb13 	bl	8e74 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    584e:	b1a0      	cbz	r0, 587a <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1f2>
    5850:	4630      	mov	r0, r6
    5852:	f003 fd99 	bl	9388 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5856:	2100      	movs	r1, #0
    5858:	4630      	mov	r0, r6
    585a:	f7ff f805 	bl	4868 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    585e:	2d00      	cmp	r5, #0
    5860:	d0ee      	beq.n	5840 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1b8>
    5862:	f884 8001 	strb.w	r8, [r4, #1]
    5866:	210a      	movs	r1, #10
    5868:	7021      	strb	r1, [r4, #0]
    586a:	f884 8004 	strb.w	r8, [r4, #4]
    586e:	f8a4 6005 	strh.w	r6, [r4, #5]
    5872:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
    5876:	71e0      	strb	r0, [r4, #7]
    5878:	e7e2      	b.n	5840 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1b8>
    587a:	f44f 7113 	mov.w	r1, #588	; 0x24c
    587e:	2010      	movs	r0, #16
    5880:	f7fe fdb8 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5884:	200000d8 	.word	0x200000d8
    5888:	4809      	ldr	r0, [pc, #36]	; (58b0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x228>)
    588a:	b510      	push	{r4, lr}
    588c:	2100      	movs	r1, #0
    588e:	6141      	str	r1, [r0, #20]
    5890:	6181      	str	r1, [r0, #24]
    5892:	61c1      	str	r1, [r0, #28]
    5894:	6201      	str	r1, [r0, #32]
    5896:	2212      	movs	r2, #18
    5898:	f002 fe99 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    589c:	4804      	ldr	r0, [pc, #16]	; (58b0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x228>)
    589e:	3018      	adds	r0, #24
    58a0:	1f02      	subs	r2, r0, #4
    58a2:	1f01      	subs	r1, r0, #4
    58a4:	2301      	movs	r3, #1
    58a6:	6050      	str	r0, [r2, #4]
    58a8:	730b      	strb	r3, [r1, #12]
    58aa:	6010      	str	r0, [r2, #0]
    58ac:	bd10      	pop	{r4, pc}
    58ae:	0000      	.short	0x0000
    58b0:	20000d74 	.word	0x20000d74

000058b4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    58b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    58b6:	f06f 021f 	mvn.w	r2, #31
    58ba:	0c01      	lsrs	r1, r0, #16
    58bc:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    58c0:	251f      	movs	r5, #31
    58c2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    58c6:	3854      	subs	r0, #84	; 0x54
    58c8:	d00d      	beq.n	58e6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    58ca:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    58ce:	3855      	subs	r0, #85	; 0x55
    58d0:	d009      	beq.n	58e6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    58d2:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    58d6:	38aa      	subs	r0, #170	; 0xaa
    58d8:	d005      	beq.n	58e6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    58da:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    58de:	38aa      	subs	r0, #170	; 0xaa
    58e0:	d001      	beq.n	58e6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    58e2:	2001      	movs	r0, #1
    58e4:	e000      	b.n	58e8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    58e6:	2000      	movs	r0, #0
    58e8:	2200      	movs	r2, #0
    58ea:	4613      	mov	r3, r2
    58ec:	ea4f 0402 	mov.w	r4, r2
    58f0:	ea82 0701 	eor.w	r7, r2, r1
    58f4:	43ff      	mvns	r7, r7
    58f6:	431f      	orrs	r7, r3
    58f8:	1c7f      	adds	r7, r7, #1
    58fa:	d00f      	beq.n	591c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    58fc:	f006 0701 	and.w	r7, r6, #1
    5900:	0852      	lsrs	r2, r2, #1
    5902:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    5906:	f005 0701 	and.w	r7, r5, #1
    590a:	085b      	lsrs	r3, r3, #1
    590c:	0876      	lsrs	r6, r6, #1
    590e:	086d      	lsrs	r5, r5, #1
    5910:	1c64      	adds	r4, r4, #1
    5912:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    5916:	2c16      	cmp	r4, #22
    5918:	d3ea      	bcc.n	58f0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    591a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    591c:	2000      	movs	r0, #0
    591e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005920 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    5920:	b510      	push	{r4, lr}
    5922:	4804      	ldr	r0, [pc, #16]	; (5934 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    5924:	f003 ff3d 	bl	97a2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x16>
    5928:	4802      	ldr	r0, [pc, #8]	; (5934 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    592a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    592e:	3008      	adds	r0, #8
    5930:	f003 bf37 	b.w	97a2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x16>
    5934:	200000dc 	.word	0x200000dc

00005938 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    5938:	4801      	ldr	r0, [pc, #4]	; (5940 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    593a:	f000 b809 	b.w	5950 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    593e:	0000      	.short	0x0000
    5940:	200000dc 	.word	0x200000dc

00005944 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    5944:	4801      	ldr	r0, [pc, #4]	; (594c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    5946:	f000 b803 	b.w	5950 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    594a:	0000      	.short	0x0000
    594c:	200000e4 	.word	0x200000e4
    5950:	b510      	push	{r4, lr}
    5952:	e9d0 2100 	ldrd	r2, r1, [r0]
    5956:	4b09      	ldr	r3, [pc, #36]	; (597c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    5958:	4c09      	ldr	r4, [pc, #36]	; (5980 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    595a:	4353      	muls	r3, r2
    595c:	4354      	muls	r4, r2
    595e:	4051      	eors	r1, r2
    5960:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    5964:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    5968:	ea4f 41f1 	mov.w	r1, r1, ror #19
    596c:	e9c0 2100 	strd	r2, r1, [r0]
    5970:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    5974:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5978:	4618      	mov	r0, r3
    597a:	bd10      	pop	{r4, pc}
    597c:	c6ef3760 	.word	0xc6ef3760
    5980:	9e3779bb 	.word	0x9e3779bb

00005984 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    5984:	b570      	push	{r4, r5, r6, lr}
    5986:	4604      	mov	r4, r0
    5988:	7c00      	ldrb	r0, [r0, #16]
    598a:	b300      	cbz	r0, 59ce <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    598c:	2802      	cmp	r0, #2
    598e:	d01e      	beq.n	59ce <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    5990:	f05f 0001 	movs.w	r0, #1
    5994:	f104 0151 	add.w	r1, r4, #81	; 0x51
    5998:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    599c:	460d      	mov	r5, r1
    599e:	b1c0      	cbz	r0, 59d2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    59a0:	7de0      	ldrb	r0, [r4, #23]
    59a2:	b1f0      	cbz	r0, 59e2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    59a4:	f8d4 0011 	ldr.w	r0, [r4, #17]
    59a8:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    59ac:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    59b0:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    59b4:	7c20      	ldrb	r0, [r4, #16]
    59b6:	f003 ff26 	bl	9806 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x4a>
    59ba:	7620      	strb	r0, [r4, #24]
    59bc:	2008      	movs	r0, #8
    59be:	7660      	strb	r0, [r4, #25]
    59c0:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    59c4:	4629      	mov	r1, r5
    59c6:	f003 ff0a 	bl	97de <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x22>
    59ca:	b9a8      	cbnz	r0, 59f8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    59cc:	e00e      	b.n	59ec <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    59ce:	2000      	movs	r0, #0
    59d0:	e7e0      	b.n	5994 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    59d2:	2000      	movs	r0, #0
    59d4:	f7ff face 	bl	4f74 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    59d8:	2800      	cmp	r0, #0
    59da:	d1eb      	bne.n	59b4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    59dc:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
    59e0:	e001      	b.n	59e6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    59e2:	f240 41bc 	movw	r1, #1212	; 0x4bc
    59e6:	202d      	movs	r0, #45	; 0x2d
    59e8:	f7fe fd04 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59ec:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    59f0:	4629      	mov	r1, r5
    59f2:	f003 fefd 	bl	97f0 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x34>
    59f6:	b100      	cbz	r0, 59fa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    59f8:	2001      	movs	r0, #1
    59fa:	76a0      	strb	r0, [r4, #26]
    59fc:	7e20      	ldrb	r0, [r4, #24]
    59fe:	b130      	cbz	r0, 5a0e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    5a00:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    5a04:	f104 0158 	add.w	r1, r4, #88	; 0x58
    5a08:	f003 fd32 	bl	9470 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    5a0c:	7660      	strb	r0, [r4, #25]
    5a0e:	f7ff fb6f 	bl	50f0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    5a12:	490c      	ldr	r1, [pc, #48]	; (5a44 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    5a14:	fba0 2301 	umull	r2, r3, r0, r1
    5a18:	f104 0048 	add.w	r0, r4, #72	; 0x48
    5a1c:	f004 f8bd 	bl	9b9a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    5a20:	2100      	movs	r1, #0
    5a22:	4620      	mov	r0, r4
    5a24:	f004 f867 	bl	9af6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4e>
    5a28:	2000      	movs	r0, #0
    5a2a:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    5a2e:	78a0      	ldrb	r0, [r4, #2]
    5a30:	0740      	lsls	r0, r0, #29
    5a32:	d505      	bpl.n	5a40 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    5a34:	4620      	mov	r0, r4
    5a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5a3a:	2100      	movs	r1, #0
    5a3c:	f000 bd40 	b.w	64c0 <CONFIG_PM_SRAM_SIZE+0x4c0>
    5a40:	bd70      	pop	{r4, r5, r6, pc}
    5a42:	0000      	.short	0x0000
    5a44:	000f4240 	.word	0x000f4240

00005a48 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    5a48:	b530      	push	{r4, r5, lr}
    5a4a:	460c      	mov	r4, r1
    5a4c:	b08d      	sub	sp, #52	; 0x34
    5a4e:	4605      	mov	r5, r0
    5a50:	4601      	mov	r1, r0
    5a52:	2224      	movs	r2, #36	; 0x24
    5a54:	a802      	add	r0, sp, #8
    5a56:	f002 fd40 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a5a:	a80b      	add	r0, sp, #44	; 0x2c
    5a5c:	f004 f8fa 	bl	9c54 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    5a60:	7aa0      	ldrb	r0, [r4, #10]
    5a62:	f88d 0018 	strb.w	r0, [sp, #24]
    5a66:	7820      	ldrb	r0, [r4, #0]
    5a68:	f88d 0008 	strb.w	r0, [sp, #8]
    5a6c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    5a70:	f8ad 0000 	strh.w	r0, [sp]
    5a74:	f89d 0000 	ldrb.w	r0, [sp]
    5a78:	f000 0101 	and.w	r1, r0, #1
    5a7c:	f3c0 0240 	ubfx	r2, r0, #1, #1
    5a80:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    5a84:	f3c0 0280 	ubfx	r2, r0, #2, #1
    5a88:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    5a8c:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    5a90:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    5a94:	f3c0 1200 	ubfx	r2, r0, #4, #1
    5a98:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    5a9c:	f3c0 1240 	ubfx	r2, r0, #5, #1
    5aa0:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    5aa4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    5aa8:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    5aac:	f8ad 000a 	strh.w	r0, [sp, #10]
    5ab0:	7d20      	ldrb	r0, [r4, #20]
    5ab2:	2801      	cmp	r0, #1
    5ab4:	d006      	beq.n	5ac4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    5ab6:	2802      	cmp	r0, #2
    5ab8:	d004      	beq.n	5ac4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    5aba:	f240 21e2 	movw	r1, #738	; 0x2e2
    5abe:	2006      	movs	r0, #6
    5ac0:	f7fe fc98 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ac4:	f88d 000c 	strb.w	r0, [sp, #12]
    5ac8:	7a61      	ldrb	r1, [r4, #9]
    5aca:	a80b      	add	r0, sp, #44	; 0x2c
    5acc:	f004 f8a9 	bl	9c22 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    5ad0:	7d20      	ldrb	r0, [r4, #20]
    5ad2:	2101      	movs	r1, #1
    5ad4:	2802      	cmp	r0, #2
    5ad6:	d102      	bne.n	5ade <__kernel_ram_size+0xe>
    5ad8:	7d60      	ldrb	r0, [r4, #21]
    5ada:	1c40      	adds	r0, r0, #1
    5adc:	b2c1      	uxtb	r1, r0
    5ade:	7ea0      	ldrb	r0, [r4, #26]
    5ae0:	1c40      	adds	r0, r0, #1
    5ae2:	b2c2      	uxtb	r2, r0
    5ae4:	a80b      	add	r0, sp, #44	; 0x2c
    5ae6:	f004 f863 	bl	9bb0 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    5aea:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    5aee:	0700      	lsls	r0, r0, #28
    5af0:	d501      	bpl.n	5af6 <__kernel_ram_size+0x26>
    5af2:	2000      	movs	r0, #0
    5af4:	e020      	b.n	5b38 <__kernel_ram_size+0x68>
    5af6:	a80b      	add	r0, sp, #44	; 0x2c
    5af8:	f004 f86c 	bl	9bd4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    5afc:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    5b00:	2228      	movs	r2, #40	; 0x28
    5b02:	f000 fd39 	bl	6578 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    5b06:	f240 2171 	movw	r1, #625	; 0x271
    5b0a:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    5b0e:	fbb0 f0f1 	udiv	r0, r0, r1
    5b12:	4348      	muls	r0, r1
    5b14:	f8d4 1002 	ldr.w	r1, [r4, #2]
    5b18:	f240 2371 	movw	r3, #625	; 0x271
    5b1c:	0a0a      	lsrs	r2, r1, #8
    5b1e:	f240 2171 	movw	r1, #625	; 0x271
    5b22:	434a      	muls	r2, r1
    5b24:	f8d4 1005 	ldr.w	r1, [r4, #5]
    5b28:	0a09      	lsrs	r1, r1, #8
    5b2a:	4359      	muls	r1, r3
    5b2c:	4290      	cmp	r0, r2
    5b2e:	d801      	bhi.n	5b34 <__kernel_ram_size+0x64>
    5b30:	9204      	str	r2, [sp, #16]
    5b32:	e004      	b.n	5b3e <__kernel_ram_size+0x6e>
    5b34:	4288      	cmp	r0, r1
    5b36:	d801      	bhi.n	5b3c <__kernel_ram_size+0x6c>
    5b38:	9004      	str	r0, [sp, #16]
    5b3a:	e000      	b.n	5b3e <__kernel_ram_size+0x6e>
    5b3c:	9104      	str	r1, [sp, #16]
    5b3e:	7ca0      	ldrb	r0, [r4, #18]
    5b40:	f88d 0017 	strb.w	r0, [sp, #23]
    5b44:	7e20      	ldrb	r0, [r4, #24]
    5b46:	2801      	cmp	r0, #1
    5b48:	d000      	beq.n	5b4c <__kernel_ram_size+0x7c>
    5b4a:	2000      	movs	r0, #0
    5b4c:	f88d 0014 	strb.w	r0, [sp, #20]
    5b50:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5b52:	f003 fb21 	bl	9198 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    5b56:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5b58:	f003 fbc2 	bl	92e0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    5b5c:	2224      	movs	r2, #36	; 0x24
    5b5e:	a902      	add	r1, sp, #8
    5b60:	4628      	mov	r0, r5
    5b62:	f002 fcba 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5b66:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5b68:	62a8      	str	r0, [r5, #40]	; 0x28
    5b6a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    5b6e:	85a8      	strh	r0, [r5, #44]	; 0x2c
    5b70:	7ae0      	ldrb	r0, [r4, #11]
    5b72:	b168      	cbz	r0, 5b90 <__kernel_ram_size+0xc0>
    5b74:	2802      	cmp	r0, #2
    5b76:	d00b      	beq.n	5b90 <__kernel_ram_size+0xc0>
    5b78:	f05f 0001 	movs.w	r0, #1
    5b7c:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    5b80:	68e0      	ldr	r0, [r4, #12]
    5b82:	65a8      	str	r0, [r5, #88]	; 0x58
    5b84:	8a20      	ldrh	r0, [r4, #16]
    5b86:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    5b8a:	b00d      	add	sp, #52	; 0x34
    5b8c:	2000      	movs	r0, #0
    5b8e:	bd30      	pop	{r4, r5, pc}
    5b90:	2000      	movs	r0, #0
    5b92:	e7f3      	b.n	5b7c <__kernel_ram_size+0xac>

00005b94 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    5b94:	4a0a      	ldr	r2, [pc, #40]	; (5bc0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    5b96:	b510      	push	{r4, lr}
    5b98:	2100      	movs	r1, #0
    5b9a:	7011      	strb	r1, [r2, #0]
    5b9c:	4c09      	ldr	r4, [pc, #36]	; (5bc4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    5b9e:	6060      	str	r0, [r4, #4]
    5ba0:	f000 f822 	bl	5be8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    5ba4:	b110      	cbz	r0, 5bac <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    5ba6:	f44f 714b 	mov.w	r1, #812	; 0x32c
    5baa:	e004      	b.n	5bb6 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    5bac:	68a0      	ldr	r0, [r4, #8]
    5bae:	2800      	cmp	r0, #0
    5bb0:	d104      	bne.n	5bbc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    5bb2:	f240 312f 	movw	r1, #815	; 0x32f
    5bb6:	202d      	movs	r0, #45	; 0x2d
    5bb8:	f7fe fc1c 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bbc:	bd10      	pop	{r4, pc}
    5bbe:	0000      	.short	0x0000
    5bc0:	20000d98 	.word	0x20000d98
    5bc4:	200000ec 	.word	0x200000ec

00005bc8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    5bc8:	4902      	ldr	r1, [pc, #8]	; (5bd4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    5bca:	4801      	ldr	r0, [pc, #4]	; (5bd0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    5bcc:	6088      	str	r0, [r1, #8]
    5bce:	4770      	bx	lr
    5bd0:	00006560 	.word	0x00006560
    5bd4:	200000ec 	.word	0x200000ec

00005bd8 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    5bd8:	4902      	ldr	r1, [pc, #8]	; (5be4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    5bda:	6008      	str	r0, [r1, #0]
    5bdc:	6889      	ldr	r1, [r1, #8]
    5bde:	6809      	ldr	r1, [r1, #0]
    5be0:	4708      	bx	r1
    5be2:	0000      	.short	0x0000
    5be4:	200000ec 	.word	0x200000ec

00005be8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    5be8:	4808      	ldr	r0, [pc, #32]	; (5c0c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    5bea:	b510      	push	{r4, lr}
    5bec:	7800      	ldrb	r0, [r0, #0]
    5bee:	b110      	cbz	r0, 5bf6 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    5bf0:	240c      	movs	r4, #12
    5bf2:	4620      	mov	r0, r4
    5bf4:	bd10      	pop	{r4, pc}
    5bf6:	2400      	movs	r4, #0
    5bf8:	2218      	movs	r2, #24
    5bfa:	4621      	mov	r1, r4
    5bfc:	4803      	ldr	r0, [pc, #12]	; (5c0c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    5bfe:	f002 fce6 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5c02:	f001 fa1d 	bl	7040 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    5c06:	f001 f93b 	bl	6e80 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    5c0a:	e7f2      	b.n	5bf2 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    5c0c:	20000d98 	.word	0x20000d98

00005c10 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    5c10:	4904      	ldr	r1, [pc, #16]	; (5c24 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    5c12:	b510      	push	{r4, lr}
    5c14:	7809      	ldrb	r1, [r1, #0]
    5c16:	2901      	cmp	r1, #1
    5c18:	d101      	bne.n	5c1e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    5c1a:	f000 fb7d 	bl	6318 <CONFIG_PM_SRAM_SIZE+0x318>
    5c1e:	2000      	movs	r0, #0
    5c20:	bd10      	pop	{r4, pc}
    5c22:	0000      	.short	0x0000
    5c24:	20000d98 	.word	0x20000d98
    5c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c2c:	000f      	movs	r7, r1
    5c2e:	4604      	mov	r4, r0
    5c30:	d023      	beq.n	5c7a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x6a>
    5c32:	f104 0028 	add.w	r0, r4, #40	; 0x28
    5c36:	4605      	mov	r5, r0
    5c38:	f003 fff5 	bl	9c26 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    5c3c:	b9b0      	cbnz	r0, 5c6c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x5c>
    5c3e:	78a0      	ldrb	r0, [r4, #2]
    5c40:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5c44:	b350      	cbz	r0, 5c9c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x8c>
    5c46:	4628      	mov	r0, r5
    5c48:	f003 ffc4 	bl	9bd4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    5c4c:	4606      	mov	r6, r0
    5c4e:	4628      	mov	r0, r5
    5c50:	f003 ffe9 	bl	9c26 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    5c54:	1a30      	subs	r0, r6, r0
    5c56:	b2c0      	uxtb	r0, r0
    5c58:	f004 f83a 	bl	9cd0 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    5c5c:	4601      	mov	r1, r0
    5c5e:	4835      	ldr	r0, [pc, #212]	; (5d34 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x124>)
    5c60:	6842      	ldr	r2, [r0, #4]
    5c62:	4411      	add	r1, r2
    5c64:	6041      	str	r1, [r0, #4]
    5c66:	4628      	mov	r0, r5
    5c68:	f003 fffb 	bl	9c62 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    5c6c:	4628      	mov	r0, r5
    5c6e:	f003 ffbd 	bl	9bec <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    5c72:	4601      	mov	r1, r0
    5c74:	4620      	mov	r0, r4
    5c76:	f003 ff7a 	bl	9b6e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    5c7a:	4d2f      	ldr	r5, [pc, #188]	; (5d38 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x128>)
    5c7c:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    5c80:	2100      	movs	r1, #0
    5c82:	6868      	ldr	r0, [r5, #4]
    5c84:	8001      	strh	r1, [r0, #0]
    5c86:	f003 ff14 	bl	9ab2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    5c8a:	8860      	ldrh	r0, [r4, #2]
    5c8c:	2813      	cmp	r0, #19
    5c8e:	d013      	beq.n	5cb8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xa8>
    5c90:	dc09      	bgt.n	5ca6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x96>
    5c92:	2810      	cmp	r0, #16
    5c94:	d036      	beq.n	5d04 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xf4>
    5c96:	2812      	cmp	r0, #18
    5c98:	d109      	bne.n	5cae <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x9e>
    5c9a:	e031      	b.n	5d00 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xf0>
    5c9c:	4620      	mov	r0, r4
    5c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5ca2:	f000 bb39 	b.w	6318 <CONFIG_PM_SRAM_SIZE+0x318>
    5ca6:	2815      	cmp	r0, #21
    5ca8:	d00f      	beq.n	5cca <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xba>
    5caa:	281d      	cmp	r0, #29
    5cac:	d00d      	beq.n	5cca <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xba>
    5cae:	f240 6172 	movw	r1, #1650	; 0x672
    5cb2:	202d      	movs	r0, #45	; 0x2d
    5cb4:	f7fe fb9e 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cb8:	2100      	movs	r1, #0
    5cba:	6868      	ldr	r0, [r5, #4]
    5cbc:	f003 fcdd 	bl	967a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    5cc0:	2101      	movs	r1, #1
    5cc2:	6868      	ldr	r0, [r5, #4]
    5cc4:	f003 fef5 	bl	9ab2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    5cc8:	e020      	b.n	5d0c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xfc>
    5cca:	2101      	movs	r1, #1
    5ccc:	6868      	ldr	r0, [r5, #4]
    5cce:	f003 fcd4 	bl	967a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    5cd2:	2101      	movs	r1, #1
    5cd4:	6868      	ldr	r0, [r5, #4]
    5cd6:	f003 feec 	bl	9ab2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    5cda:	b136      	cbz	r6, 5cea <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xda>
    5cdc:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    5ce0:	6868      	ldr	r0, [r5, #4]
    5ce2:	f003 fce5 	bl	96b0 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    5ce6:	2101      	movs	r1, #1
    5ce8:	e006      	b.n	5cf8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe8>
    5cea:	f104 0158 	add.w	r1, r4, #88	; 0x58
    5cee:	6868      	ldr	r0, [r5, #4]
    5cf0:	f003 fcde 	bl	96b0 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    5cf4:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    5cf8:	6868      	ldr	r0, [r5, #4]
    5cfa:	f003 fcdf 	bl	96bc <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    5cfe:	e005      	b.n	5d0c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xfc>
    5d00:	2106      	movs	r1, #6
    5d02:	e000      	b.n	5d06 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xf6>
    5d04:	2102      	movs	r1, #2
    5d06:	6868      	ldr	r0, [r5, #4]
    5d08:	f003 fcb7 	bl	967a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    5d0c:	4620      	mov	r0, r4
    5d0e:	f000 fc05 	bl	651c <CONFIG_PM_SRAM_SIZE+0x51c>
    5d12:	8860      	ldrh	r0, [r4, #2]
    5d14:	281d      	cmp	r0, #29
    5d16:	d007      	beq.n	5d28 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x118>
    5d18:	2815      	cmp	r0, #21
    5d1a:	d005      	beq.n	5d28 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x118>
    5d1c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    5d20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    5d22:	6868      	ldr	r0, [r5, #4]
    5d24:	f003 fc99 	bl	965a <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    5d28:	4639      	mov	r1, r7
    5d2a:	4620      	mov	r0, r4
    5d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5d30:	f000 b9f0 	b.w	6114 <CONFIG_PM_SRAM_SIZE+0x114>
    5d34:	20000d98 	.word	0x20000d98
    5d38:	200000ec 	.word	0x200000ec
    5d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d40:	4d2e      	ldr	r5, [pc, #184]	; (5dfc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1ec>)
    5d42:	4607      	mov	r7, r0
    5d44:	7828      	ldrb	r0, [r5, #0]
    5d46:	2802      	cmp	r0, #2
    5d48:	d005      	beq.n	5d56 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x146>
    5d4a:	7828      	ldrb	r0, [r5, #0]
    5d4c:	2803      	cmp	r0, #3
    5d4e:	d002      	beq.n	5d56 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x146>
    5d50:	f640 5129 	movw	r1, #3369	; 0xd29
    5d54:	e028      	b.n	5da8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x198>
    5d56:	4c2a      	ldr	r4, [pc, #168]	; (5e00 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1f0>)
    5d58:	6820      	ldr	r0, [r4, #0]
    5d5a:	7b01      	ldrb	r1, [r0, #12]
    5d5c:	b109      	cbz	r1, 5d62 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x152>
    5d5e:	f003 ff11 	bl	9b84 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    5d62:	f8d4 c004 	ldr.w	ip, [r4, #4]
    5d66:	f04f 0800 	mov.w	r8, #0
    5d6a:	f89c 0000 	ldrb.w	r0, [ip]
    5d6e:	f000 060f 	and.w	r6, r0, #15
    5d72:	b33f      	cbz	r7, 5dc4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1b4>
    5d74:	6821      	ldr	r1, [r4, #0]
    5d76:	09c0      	lsrs	r0, r0, #7
    5d78:	f101 0351 	add.w	r3, r1, #81	; 0x51
    5d7c:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    5d80:	f10c 0109 	add.w	r1, ip, #9
    5d84:	f003 fb02 	bl	938c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    5d88:	b1e0      	cbz	r0, 5dc4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1b4>
    5d8a:	4641      	mov	r1, r8
    5d8c:	6860      	ldr	r0, [r4, #4]
    5d8e:	f003 fc54 	bl	963a <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    5d92:	b1b8      	cbz	r0, 5dc4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1b4>
    5d94:	782a      	ldrb	r2, [r5, #0]
    5d96:	6820      	ldr	r0, [r4, #0]
    5d98:	4631      	mov	r1, r6
    5d9a:	2a02      	cmp	r2, #2
    5d9c:	d007      	beq.n	5dae <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x19e>
    5d9e:	782a      	ldrb	r2, [r5, #0]
    5da0:	2a03      	cmp	r2, #3
    5da2:	d004      	beq.n	5dae <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x19e>
    5da4:	f640 5102 	movw	r1, #3330	; 0xd02
    5da8:	202d      	movs	r0, #45	; 0x2d
    5daa:	f7fe fb23 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5dae:	68a2      	ldr	r2, [r4, #8]
    5db0:	782b      	ldrb	r3, [r5, #0]
    5db2:	6952      	ldr	r2, [r2, #20]
    5db4:	f06f 0607 	mvn.w	r6, #7
    5db8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    5dbc:	58d2      	ldr	r2, [r2, r3]
    5dbe:	4790      	blx	r2
    5dc0:	4606      	mov	r6, r0
    5dc2:	e000      	b.n	5dc6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1b6>
    5dc4:	2601      	movs	r6, #1
    5dc6:	7ba8      	ldrb	r0, [r5, #14]
    5dc8:	b118      	cbz	r0, 5dd2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c2>
    5dca:	f001 f939 	bl	7040 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    5dce:	f001 f857 	bl	6e80 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    5dd2:	2e00      	cmp	r6, #0
    5dd4:	d00f      	beq.n	5df6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1e6>
    5dd6:	6820      	ldr	r0, [r4, #0]
    5dd8:	f003 ff90 	bl	9cfc <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    5ddc:	b130      	cbz	r0, 5dec <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1dc>
    5dde:	f001 f957 	bl	7090 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5de2:	68a0      	ldr	r0, [r4, #8]
    5de4:	6880      	ldr	r0, [r0, #8]
    5de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5dea:	4700      	bx	r0
    5dec:	6820      	ldr	r0, [r4, #0]
    5dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5df2:	f000 ba91 	b.w	6318 <CONFIG_PM_SRAM_SIZE+0x318>
    5df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dfa:	0000      	.short	0x0000
    5dfc:	20000d98 	.word	0x20000d98
    5e00:	200000ec 	.word	0x200000ec
    5e04:	b510      	push	{r4, lr}
    5e06:	2903      	cmp	r1, #3
    5e08:	d002      	beq.n	5e10 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x200>
    5e0a:	2905      	cmp	r1, #5
    5e0c:	d10a      	bne.n	5e24 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x214>
    5e0e:	e002      	b.n	5e16 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x206>
    5e10:	f000 fb1a 	bl	6448 <CONFIG_PM_SRAM_SIZE+0x448>
    5e14:	e003      	b.n	5e1e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x20e>
    5e16:	4904      	ldr	r1, [pc, #16]	; (5e28 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x218>)
    5e18:	6809      	ldr	r1, [r1, #0]
    5e1a:	b109      	cbz	r1, 5e20 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x210>
    5e1c:	4788      	blx	r1
    5e1e:	b108      	cbz	r0, 5e24 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x214>
    5e20:	2000      	movs	r0, #0
    5e22:	bd10      	pop	{r4, pc}
    5e24:	2001      	movs	r0, #1
    5e26:	bd10      	pop	{r4, pc}
    5e28:	200000f8 	.word	0x200000f8
    5e2c:	4a09      	ldr	r2, [pc, #36]	; (5e54 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x244>)
    5e2e:	0003      	movs	r3, r0
    5e30:	6810      	ldr	r0, [r2, #0]
    5e32:	d001      	beq.n	5e38 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x228>
    5e34:	f000 ba70 	b.w	6318 <CONFIG_PM_SRAM_SIZE+0x318>
    5e38:	2900      	cmp	r1, #0
    5e3a:	d009      	beq.n	5e50 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x240>
    5e3c:	6891      	ldr	r1, [r2, #8]
    5e3e:	4a06      	ldr	r2, [pc, #24]	; (5e58 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x248>)
    5e40:	6909      	ldr	r1, [r1, #16]
    5e42:	7812      	ldrb	r2, [r2, #0]
    5e44:	f06f 030f 	mvn.w	r3, #15
    5e48:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5e4c:	5889      	ldr	r1, [r1, r2]
    5e4e:	4708      	bx	r1
    5e50:	4770      	bx	lr
    5e52:	0000      	.short	0x0000
    5e54:	200000ec 	.word	0x200000ec
    5e58:	20000d98 	.word	0x20000d98
    5e5c:	b570      	push	{r4, r5, r6, lr}
    5e5e:	4604      	mov	r4, r0
    5e60:	8840      	ldrh	r0, [r0, #2]
    5e62:	2810      	cmp	r0, #16
    5e64:	d019      	beq.n	5e9a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x28a>
    5e66:	4d10      	ldr	r5, [pc, #64]	; (5ea8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x298>)
    5e68:	7ba8      	ldrb	r0, [r5, #14]
    5e6a:	b120      	cbz	r0, 5e76 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x266>
    5e6c:	f001 f828 	bl	6ec0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    5e70:	2040      	movs	r0, #64	; 0x40
    5e72:	f001 f8f3 	bl	705c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    5e76:	480d      	ldr	r0, [pc, #52]	; (5eac <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x29c>)
    5e78:	6840      	ldr	r0, [r0, #4]
    5e7a:	f001 fb2d 	bl	74d8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5e7e:	78a0      	ldrb	r0, [r4, #2]
    5e80:	0740      	lsls	r0, r0, #29
    5e82:	d404      	bmi.n	5e8e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x27e>
    5e84:	2100      	movs	r1, #0
    5e86:	7922      	ldrb	r2, [r4, #4]
    5e88:	4608      	mov	r0, r1
    5e8a:	f001 fb9d 	bl	75c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5e8e:	2000      	movs	r0, #0
    5e90:	f001 f9f4 	bl	727c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5e94:	2002      	movs	r0, #2
    5e96:	7028      	strb	r0, [r5, #0]
    5e98:	bd70      	pop	{r4, r5, r6, pc}
    5e9a:	4620      	mov	r0, r4
    5e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5ea0:	2101      	movs	r1, #1
    5ea2:	f7ff bec1 	b.w	5c28 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    5ea6:	0000      	.short	0x0000
    5ea8:	20000d98 	.word	0x20000d98
    5eac:	200000ec 	.word	0x200000ec
    5eb0:	b510      	push	{r4, lr}
    5eb2:	4c12      	ldr	r4, [pc, #72]	; (5efc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2ec>)
    5eb4:	6820      	ldr	r0, [r4, #0]
    5eb6:	f000 f825 	bl	5f04 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2f4>
    5eba:	6820      	ldr	r0, [r4, #0]
    5ebc:	f003 ff1e 	bl	9cfc <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    5ec0:	2800      	cmp	r0, #0
    5ec2:	6820      	ldr	r0, [r4, #0]
    5ec4:	d00b      	beq.n	5ede <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2ce>
    5ec6:	490e      	ldr	r1, [pc, #56]	; (5f00 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2f0>)
    5ec8:	780a      	ldrb	r2, [r1, #0]
    5eca:	2a02      	cmp	r2, #2
    5ecc:	d00b      	beq.n	5ee6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2d6>
    5ece:	780a      	ldrb	r2, [r1, #0]
    5ed0:	2a03      	cmp	r2, #3
    5ed2:	d008      	beq.n	5ee6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2d6>
    5ed4:	f640 4137 	movw	r1, #3127	; 0xc37
    5ed8:	202d      	movs	r0, #45	; 0x2d
    5eda:	f7fe fa8b 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5ee2:	f000 ba19 	b.w	6318 <CONFIG_PM_SRAM_SIZE+0x318>
    5ee6:	68a2      	ldr	r2, [r4, #8]
    5ee8:	7809      	ldrb	r1, [r1, #0]
    5eea:	68d2      	ldr	r2, [r2, #12]
    5eec:	f06f 0307 	mvn.w	r3, #7
    5ef0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5ef4:	5851      	ldr	r1, [r2, r1]
    5ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5efa:	4708      	bx	r1
    5efc:	200000ec 	.word	0x200000ec
    5f00:	20000d98 	.word	0x20000d98
    5f04:	b510      	push	{r4, lr}
    5f06:	7b01      	ldrb	r1, [r0, #12]
    5f08:	b109      	cbz	r1, 5f0e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2fe>
    5f0a:	f003 fe3b 	bl	9b84 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    5f0e:	4805      	ldr	r0, [pc, #20]	; (5f24 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x314>)
    5f10:	7b80      	ldrb	r0, [r0, #14]
    5f12:	2800      	cmp	r0, #0
    5f14:	d005      	beq.n	5f22 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x312>
    5f16:	f001 f893 	bl	7040 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    5f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5f1e:	f000 bfaf 	b.w	6e80 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    5f22:	bd10      	pop	{r4, pc}
    5f24:	20000d98 	.word	0x20000d98

00005f28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    5f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f2c:	4d5d      	ldr	r5, [pc, #372]	; (60a4 <CONFIG_PM_SRAM_SIZE+0xa4>)
    5f2e:	4604      	mov	r4, r0
    5f30:	b086      	sub	sp, #24
    5f32:	7828      	ldrb	r0, [r5, #0]
    5f34:	2800      	cmp	r0, #0
    5f36:	d14e      	bne.n	5fd6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    5f38:	7820      	ldrb	r0, [r4, #0]
    5f3a:	28ff      	cmp	r0, #255	; 0xff
    5f3c:	d04b      	beq.n	5fd6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    5f3e:	f04f 0800 	mov.w	r8, #0
    5f42:	f8a5 800c 	strh.w	r8, [r5, #12]
    5f46:	f8c5 8004 	str.w	r8, [r5, #4]
    5f4a:	f885 8001 	strb.w	r8, [r5, #1]
    5f4e:	f885 8002 	strb.w	r8, [r5, #2]
    5f52:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    5f56:	4b54      	ldr	r3, [pc, #336]	; (60a8 <CONFIG_PM_SRAM_SIZE+0xa8>)
    5f58:	4e54      	ldr	r6, [pc, #336]	; (60ac <CONFIG_PM_SRAM_SIZE+0xac>)
    5f5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5f5c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    5f60:	68b0      	ldr	r0, [r6, #8]
    5f62:	6840      	ldr	r0, [r0, #4]
    5f64:	9003      	str	r0, [sp, #12]
    5f66:	4668      	mov	r0, sp
    5f68:	f001 f980 	bl	726c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5f6c:	f001 fa0e 	bl	738c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5f70:	f001 fc76 	bl	7860 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    5f74:	f001 f864 	bl	7040 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    5f78:	f000 ff82 	bl	6e80 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    5f7c:	484c      	ldr	r0, [pc, #304]	; (60b0 <CONFIG_PM_SRAM_SIZE+0xb0>)
    5f7e:	f001 fb4d 	bl	761c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5f82:	484c      	ldr	r0, [pc, #304]	; (60b4 <CONFIG_PM_SRAM_SIZE+0xb4>)
    5f84:	f001 fb54 	bl	7630 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5f88:	f104 0028 	add.w	r0, r4, #40	; 0x28
    5f8c:	4607      	mov	r7, r0
    5f8e:	f003 fe68 	bl	9c62 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    5f92:	4638      	mov	r0, r7
    5f94:	f003 fe2a 	bl	9bec <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    5f98:	4601      	mov	r1, r0
    5f9a:	4620      	mov	r0, r4
    5f9c:	f003 fde7 	bl	9b6e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    5fa0:	f994 000e 	ldrsb.w	r0, [r4, #14]
    5fa4:	f001 fa76 	bl	7494 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5fa8:	7921      	ldrb	r1, [r4, #4]
    5faa:	2000      	movs	r0, #0
    5fac:	f001 f8fa 	bl	71a4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5fb0:	2101      	movs	r1, #1
    5fb2:	60a8      	str	r0, [r5, #8]
    5fb4:	b198      	cbz	r0, 5fde <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    5fb6:	f104 0138 	add.w	r1, r4, #56	; 0x38
    5fba:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5fbc:	f003 f95f 	bl	927e <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    5fc0:	4607      	mov	r7, r0
    5fc2:	f104 0140 	add.w	r1, r4, #64	; 0x40
    5fc6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5fc8:	f003 f95c 	bl	9284 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    5fcc:	b14f      	cbz	r7, 5fe2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    5fce:	f894 1020 	ldrb.w	r1, [r4, #32]
    5fd2:	b951      	cbnz	r1, 5fea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc2>
    5fd4:	e005      	b.n	5fe2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    5fd6:	200c      	movs	r0, #12
    5fd8:	b006      	add	sp, #24
    5fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fde:	7029      	strb	r1, [r5, #0]
    5fe0:	e05e      	b.n	60a0 <CONFIG_PM_SRAM_SIZE+0xa0>
    5fe2:	b120      	cbz	r0, 5fee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    5fe4:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    5fe8:	b108      	cbz	r0, 5fee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    5fea:	2701      	movs	r7, #1
    5fec:	e000      	b.n	5ff0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8>
    5fee:	2700      	movs	r7, #0
    5ff0:	7ea0      	ldrb	r0, [r4, #26]
    5ff2:	b920      	cbnz	r0, 5ffe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    5ff4:	7e20      	ldrb	r0, [r4, #24]
    5ff6:	b910      	cbnz	r0, 5ffe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    5ff8:	78a0      	ldrb	r0, [r4, #2]
    5ffa:	0740      	lsls	r0, r0, #29
    5ffc:	d523      	bpl.n	6046 <CONFIG_PM_SRAM_SIZE+0x46>
    5ffe:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    6002:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6006:	4050      	eors	r0, r2
    6008:	ea70 0101 	orns	r1, r0, r1
    600c:	d006      	beq.n	601c <CONFIG_PM_SRAM_SIZE+0x1c>
    600e:	f7fc fe7b 	bl	2d08 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    6012:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    6016:	1a80      	subs	r0, r0, r2
    6018:	4199      	sbcs	r1, r3
    601a:	d200      	bcs.n	601e <CONFIG_PM_SRAM_SIZE+0x1e>
    601c:	b19f      	cbz	r7, 6046 <CONFIG_PM_SRAM_SIZE+0x46>
    601e:	f7ff f867 	bl	50f0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    6022:	4925      	ldr	r1, [pc, #148]	; (60b8 <CONFIG_PM_SRAM_SIZE+0xb8>)
    6024:	fba0 2301 	umull	r2, r3, r0, r1
    6028:	f104 0048 	add.w	r0, r4, #72	; 0x48
    602c:	f003 fdb5 	bl	9b9a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    6030:	2101      	movs	r1, #1
    6032:	4620      	mov	r0, r4
    6034:	f003 fd5f 	bl	9af6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4e>
    6038:	78a0      	ldrb	r0, [r4, #2]
    603a:	0740      	lsls	r0, r0, #29
    603c:	d503      	bpl.n	6046 <CONFIG_PM_SRAM_SIZE+0x46>
    603e:	2101      	movs	r1, #1
    6040:	4620      	mov	r0, r4
    6042:	f000 fa3d 	bl	64c0 <CONFIG_PM_SRAM_SIZE+0x4c0>
    6046:	f7ff f8ab 	bl	51a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    604a:	6870      	ldr	r0, [r6, #4]
    604c:	1cc0      	adds	r0, r0, #3
    604e:	f003 fa02 	bl	9456 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    6052:	73a8      	strb	r0, [r5, #14]
    6054:	78a0      	ldrb	r0, [r4, #2]
    6056:	07c0      	lsls	r0, r0, #31
    6058:	d022      	beq.n	60a0 <CONFIG_PM_SRAM_SIZE+0xa0>
    605a:	f8cd 8010 	str.w	r8, [sp, #16]
    605e:	20ff      	movs	r0, #255	; 0xff
    6060:	f8cd 8014 	str.w	r8, [sp, #20]
    6064:	73e8      	strb	r0, [r5, #15]
    6066:	69e6      	ldr	r6, [r4, #28]
    6068:	f106 070a 	add.w	r7, r6, #10
    606c:	e013      	b.n	6096 <CONFIG_PM_SRAM_SIZE+0x96>
    606e:	9c04      	ldr	r4, [sp, #16]
    6070:	42b4      	cmp	r4, r6
    6072:	d010      	beq.n	6096 <CONFIG_PM_SRAM_SIZE+0x96>
    6074:	7a72      	ldrb	r2, [r6, #9]
    6076:	7a60      	ldrb	r0, [r4, #9]
    6078:	463b      	mov	r3, r7
    607a:	f104 010a 	add.w	r1, r4, #10
    607e:	f003 f985 	bl	938c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    6082:	b140      	cbz	r0, 6096 <CONFIG_PM_SRAM_SIZE+0x96>
    6084:	78a0      	ldrb	r0, [r4, #2]
    6086:	73e8      	strb	r0, [r5, #15]
    6088:	f8d4 0003 	ldr.w	r0, [r4, #3]
    608c:	6128      	str	r0, [r5, #16]
    608e:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    6092:	82a8      	strh	r0, [r5, #20]
    6094:	e004      	b.n	60a0 <CONFIG_PM_SRAM_SIZE+0xa0>
    6096:	a804      	add	r0, sp, #16
    6098:	f7fe fb9e 	bl	47d8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    609c:	2800      	cmp	r0, #0
    609e:	d0e6      	beq.n	606e <CONFIG_PM_SRAM_SIZE+0x6e>
    60a0:	2000      	movs	r0, #0
    60a2:	e799      	b.n	5fd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb0>
    60a4:	20000d98 	.word	0x20000d98
    60a8:	00006540 	.word	0x00006540
    60ac:	200000ec 	.word	0x200000ec
    60b0:	8e89bed6 	.word	0x8e89bed6
    60b4:	00555555 	.word	0x00555555
    60b8:	000f4240 	.word	0x000f4240
    60bc:	b510      	push	{r4, lr}
    60be:	4604      	mov	r4, r0
    60c0:	f7ff ff32 	bl	5f28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    60c4:	2800      	cmp	r0, #0
    60c6:	d108      	bne.n	60da <CONFIG_PM_SRAM_SIZE+0xda>
    60c8:	4804      	ldr	r0, [pc, #16]	; (60dc <CONFIG_PM_SRAM_SIZE+0xdc>)
    60ca:	7800      	ldrb	r0, [r0, #0]
    60cc:	2801      	cmp	r0, #1
    60ce:	d003      	beq.n	60d8 <CONFIG_PM_SRAM_SIZE+0xd8>
    60d0:	2100      	movs	r1, #0
    60d2:	4620      	mov	r0, r4
    60d4:	f7ff fda8 	bl	5c28 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    60d8:	2000      	movs	r0, #0
    60da:	bd10      	pop	{r4, pc}
    60dc:	20000d98 	.word	0x20000d98
    60e0:	480a      	ldr	r0, [pc, #40]	; (610c <CONFIG_PM_SRAM_SIZE+0x10c>)
    60e2:	b510      	push	{r4, lr}
    60e4:	490a      	ldr	r1, [pc, #40]	; (6110 <CONFIG_PM_SRAM_SIZE+0x110>)
    60e6:	6804      	ldr	r4, [r0, #0]
    60e8:	7808      	ldrb	r0, [r1, #0]
    60ea:	2800      	cmp	r0, #0
    60ec:	d00d      	beq.n	610a <CONFIG_PM_SRAM_SIZE+0x10a>
    60ee:	7808      	ldrb	r0, [r1, #0]
    60f0:	2802      	cmp	r0, #2
    60f2:	d002      	beq.n	60fa <CONFIG_PM_SRAM_SIZE+0xfa>
    60f4:	7808      	ldrb	r0, [r1, #0]
    60f6:	2803      	cmp	r0, #3
    60f8:	d102      	bne.n	6100 <CONFIG_PM_SRAM_SIZE+0x100>
    60fa:	4620      	mov	r0, r4
    60fc:	f7ff ff02 	bl	5f04 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2f4>
    6100:	4620      	mov	r0, r4
    6102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6106:	f000 b907 	b.w	6318 <CONFIG_PM_SRAM_SIZE+0x318>
    610a:	bd10      	pop	{r4, pc}
    610c:	200000ec 	.word	0x200000ec
    6110:	20000d98 	.word	0x20000d98
    6114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6118:	4604      	mov	r4, r0
    611a:	4827      	ldr	r0, [pc, #156]	; (61b8 <CONFIG_PM_SRAM_SIZE+0x1b8>)
    611c:	460d      	mov	r5, r1
    611e:	6840      	ldr	r0, [r0, #4]
    6120:	f001 f9da 	bl	74d8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6124:	4e25      	ldr	r6, [pc, #148]	; (61bc <CONFIG_PM_SRAM_SIZE+0x1bc>)
    6126:	2004      	movs	r0, #4
    6128:	7030      	strb	r0, [r6, #0]
    612a:	b325      	cbz	r5, 6176 <CONFIG_PM_SRAM_SIZE+0x176>
    612c:	8860      	ldrh	r0, [r4, #2]
    612e:	2810      	cmp	r0, #16
    6130:	d02a      	beq.n	6188 <CONFIG_PM_SRAM_SIZE+0x188>
    6132:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6136:	4680      	mov	r8, r0
    6138:	68b5      	ldr	r5, [r6, #8]
    613a:	f003 fd4b 	bl	9bd4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    613e:	4607      	mov	r7, r0
    6140:	4640      	mov	r0, r8
    6142:	f003 fd70 	bl	9c26 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6146:	1a38      	subs	r0, r7, r0
    6148:	1e40      	subs	r0, r0, #1
    614a:	b2c0      	uxtb	r0, r0
    614c:	8861      	ldrh	r1, [r4, #2]
    614e:	2228      	movs	r2, #40	; 0x28
    6150:	f000 fa32 	bl	65b8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    6154:	4405      	add	r5, r0
    6156:	78a0      	ldrb	r0, [r4, #2]
    6158:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    615c:	b130      	cbz	r0, 616c <CONFIG_PM_SRAM_SIZE+0x16c>
    615e:	6870      	ldr	r0, [r6, #4]
    6160:	4405      	add	r5, r0
    6162:	f003 fdb9 	bl	9cd8 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    6166:	4428      	add	r0, r5
    6168:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    616c:	7922      	ldrb	r2, [r4, #4]
    616e:	4629      	mov	r1, r5
    6170:	2000      	movs	r0, #0
    6172:	f001 f9c7 	bl	7504 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    6176:	8860      	ldrh	r0, [r4, #2]
    6178:	2813      	cmp	r0, #19
    617a:	d013      	beq.n	61a4 <CONFIG_PM_SRAM_SIZE+0x1a4>
    617c:	dc09      	bgt.n	6192 <CONFIG_PM_SRAM_SIZE+0x192>
    617e:	2810      	cmp	r0, #16
    6180:	d017      	beq.n	61b2 <CONFIG_PM_SRAM_SIZE+0x1b2>
    6182:	2812      	cmp	r0, #18
    6184:	d109      	bne.n	619a <CONFIG_PM_SRAM_SIZE+0x19a>
    6186:	e00d      	b.n	61a4 <CONFIG_PM_SRAM_SIZE+0x1a4>
    6188:	7921      	ldrb	r1, [r4, #4]
    618a:	2000      	movs	r0, #0
    618c:	f000 ffd0 	bl	7130 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6190:	e7f1      	b.n	6176 <CONFIG_PM_SRAM_SIZE+0x176>
    6192:	2815      	cmp	r0, #21
    6194:	d006      	beq.n	61a4 <CONFIG_PM_SRAM_SIZE+0x1a4>
    6196:	281d      	cmp	r0, #29
    6198:	d004      	beq.n	61a4 <CONFIG_PM_SRAM_SIZE+0x1a4>
    619a:	f640 51b8 	movw	r1, #3512	; 0xdb8
    619e:	202d      	movs	r0, #45	; 0x2d
    61a0:	f7fe f928 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61a4:	7922      	ldrb	r2, [r4, #4]
    61a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    61aa:	2101      	movs	r1, #1
    61ac:	2000      	movs	r0, #0
    61ae:	f001 ba0b 	b.w	75c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    61b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    61b6:	0000      	.short	0x0000
    61b8:	200000ec 	.word	0x200000ec
    61bc:	20000d98 	.word	0x20000d98
    61c0:	b510      	push	{r4, lr}
    61c2:	4604      	mov	r4, r0
    61c4:	7800      	ldrb	r0, [r0, #0]
    61c6:	460b      	mov	r3, r1
    61c8:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    61cc:	29ff      	cmp	r1, #255	; 0xff
    61ce:	d010      	beq.n	61f2 <CONFIG_PM_SRAM_SIZE+0x1f2>
    61d0:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    61d4:	1e51      	subs	r1, r2, #1
    61d6:	4618      	mov	r0, r3
    61d8:	f7fe ff5e 	bl	5098 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    61dc:	b130      	cbz	r0, 61ec <CONFIG_PM_SRAM_SIZE+0x1ec>
    61de:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    61e2:	f040 0002 	orr.w	r0, r0, #2
    61e6:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    61ea:	e011      	b.n	6210 <CONFIG_PM_SRAM_SIZE+0x210>
    61ec:	f241 0102 	movw	r1, #4098	; 0x1002
    61f0:	e021      	b.n	6236 <CONFIG_PM_SRAM_SIZE+0x236>
    61f2:	4812      	ldr	r0, [pc, #72]	; (623c <CONFIG_PM_SRAM_SIZE+0x23c>)
    61f4:	6840      	ldr	r0, [r0, #4]
    61f6:	7801      	ldrb	r1, [r0, #0]
    61f8:	f3c1 1180 	ubfx	r1, r1, #6, #1
    61fc:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    6200:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6204:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    6208:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    620c:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    6210:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    6214:	287f      	cmp	r0, #127	; 0x7f
    6216:	d00c      	beq.n	6232 <CONFIG_PM_SRAM_SIZE+0x232>
    6218:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    621c:	207f      	movs	r0, #127	; 0x7f
    621e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    6222:	4621      	mov	r1, r4
    6224:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    6228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    622c:	221d      	movs	r2, #29
    622e:	f7ff b953 	b.w	54d8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6232:	f640 616b 	movw	r1, #3691	; 0xe6b
    6236:	202d      	movs	r0, #45	; 0x2d
    6238:	f7fe f8dc 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    623c:	200000ec 	.word	0x200000ec
    6240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6244:	4690      	mov	r8, r2
    6246:	460e      	mov	r6, r1
    6248:	4604      	mov	r4, r0
    624a:	2903      	cmp	r1, #3
    624c:	d004      	beq.n	6258 <CONFIG_PM_SRAM_SIZE+0x258>
    624e:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    6252:	b108      	cbz	r0, 6258 <CONFIG_PM_SRAM_SIZE+0x258>
    6254:	2001      	movs	r0, #1
    6256:	e000      	b.n	625a <CONFIG_PM_SRAM_SIZE+0x25a>
    6258:	2000      	movs	r0, #0
    625a:	4681      	mov	r9, r0
    625c:	f000 ff0a 	bl	7074 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    6260:	4605      	mov	r5, r0
    6262:	2e03      	cmp	r6, #3
    6264:	d003      	beq.n	626e <CONFIG_PM_SRAM_SIZE+0x26e>
    6266:	2701      	movs	r7, #1
    6268:	2e05      	cmp	r6, #5
    626a:	d005      	beq.n	6278 <CONFIG_PM_SRAM_SIZE+0x278>
    626c:	e008      	b.n	6280 <CONFIG_PM_SRAM_SIZE+0x280>
    626e:	78a0      	ldrb	r0, [r4, #2]
    6270:	2702      	movs	r7, #2
    6272:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6276:	e001      	b.n	627c <CONFIG_PM_SRAM_SIZE+0x27c>
    6278:	78a0      	ldrb	r0, [r4, #2]
    627a:	07c0      	lsls	r0, r0, #31
    627c:	2800      	cmp	r0, #0
    627e:	d042      	beq.n	6306 <CONFIG_PM_SRAM_SIZE+0x306>
    6280:	f1b9 0f00 	cmp.w	r9, #0
    6284:	d13e      	bne.n	6304 <CONFIG_PM_SRAM_SIZE+0x304>
    6286:	4822      	ldr	r0, [pc, #136]	; (6310 <CONFIG_PM_SRAM_SIZE+0x310>)
    6288:	7b80      	ldrb	r0, [r0, #14]
    628a:	b140      	cbz	r0, 629e <CONFIG_PM_SRAM_SIZE+0x29e>
    628c:	f003 f8e6 	bl	945c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6290:	f888 0000 	strb.w	r0, [r8]
    6294:	28ff      	cmp	r0, #255	; 0xff
    6296:	d002      	beq.n	629e <CONFIG_PM_SRAM_SIZE+0x29e>
    6298:	f7fe ff18 	bl	50cc <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    629c:	4305      	orrs	r5, r0
    629e:	4e1d      	ldr	r6, [pc, #116]	; (6314 <CONFIG_PM_SRAM_SIZE+0x314>)
    62a0:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    62a4:	f104 0358 	add.w	r3, r4, #88	; 0x58
    62a8:	6871      	ldr	r1, [r6, #4]
    62aa:	f811 0b03 	ldrb.w	r0, [r1], #3
    62ae:	f3c0 1080 	ubfx	r0, r0, #6, #1
    62b2:	f003 f86b 	bl	938c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    62b6:	f898 1000 	ldrb.w	r1, [r8]
    62ba:	29ff      	cmp	r1, #255	; 0xff
    62bc:	d004      	beq.n	62c8 <CONFIG_PM_SRAM_SIZE+0x2c8>
    62be:	b990      	cbnz	r0, 62e6 <CONFIG_PM_SRAM_SIZE+0x2e6>
    62c0:	7e60      	ldrb	r0, [r4, #25]
    62c2:	4288      	cmp	r0, r1
    62c4:	d00f      	beq.n	62e6 <CONFIG_PM_SRAM_SIZE+0x2e6>
    62c6:	e008      	b.n	62da <CONFIG_PM_SRAM_SIZE+0x2da>
    62c8:	b138      	cbz	r0, 62da <CONFIG_PM_SRAM_SIZE+0x2da>
    62ca:	6871      	ldr	r1, [r6, #4]
    62cc:	f811 0b03 	ldrb.w	r0, [r1], #3
    62d0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    62d4:	f003 fbf6 	bl	9ac4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    62d8:	b128      	cbz	r0, 62e6 <CONFIG_PM_SRAM_SIZE+0x2e6>
    62da:	2000      	movs	r0, #0
    62dc:	78a1      	ldrb	r1, [r4, #2]
    62de:	0749      	lsls	r1, r1, #29
    62e0:	d503      	bpl.n	62ea <CONFIG_PM_SRAM_SIZE+0x2ea>
    62e2:	b990      	cbnz	r0, 630a <CONFIG_PM_SRAM_SIZE+0x30a>
    62e4:	e00e      	b.n	6304 <CONFIG_PM_SRAM_SIZE+0x304>
    62e6:	2001      	movs	r0, #1
    62e8:	e7f8      	b.n	62dc <CONFIG_PM_SRAM_SIZE+0x2dc>
    62ea:	b975      	cbnz	r5, 630a <CONFIG_PM_SRAM_SIZE+0x30a>
    62ec:	7be0      	ldrb	r0, [r4, #15]
    62ee:	b108      	cbz	r0, 62f4 <CONFIG_PM_SRAM_SIZE+0x2f4>
    62f0:	42b8      	cmp	r0, r7
    62f2:	d107      	bne.n	6304 <CONFIG_PM_SRAM_SIZE+0x304>
    62f4:	6871      	ldr	r1, [r6, #4]
    62f6:	f811 0b03 	ldrb.w	r0, [r1], #3
    62fa:	f3c0 1080 	ubfx	r0, r0, #6, #1
    62fe:	f003 fbe1 	bl	9ac4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    6302:	b110      	cbz	r0, 630a <CONFIG_PM_SRAM_SIZE+0x30a>
    6304:	2000      	movs	r0, #0
    6306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    630a:	2001      	movs	r0, #1
    630c:	e7fb      	b.n	6306 <CONFIG_PM_SRAM_SIZE+0x306>
    630e:	0000      	.short	0x0000
    6310:	20000d98 	.word	0x20000d98
    6314:	200000ec 	.word	0x200000ec
    6318:	b570      	push	{r4, r5, r6, lr}
    631a:	4604      	mov	r4, r0
    631c:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    631e:	4d10      	ldr	r5, [pc, #64]	; (6360 <CONFIG_PM_SRAM_SIZE+0x360>)
    6320:	1c40      	adds	r0, r0, #1
    6322:	8620      	strh	r0, [r4, #48]	; 0x30
    6324:	7ba8      	ldrb	r0, [r5, #14]
    6326:	2600      	movs	r6, #0
    6328:	b120      	cbz	r0, 6334 <CONFIG_PM_SRAM_SIZE+0x334>
    632a:	f000 fe89 	bl	7040 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    632e:	f000 fda7 	bl	6e80 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6332:	73ae      	strb	r6, [r5, #14]
    6334:	702e      	strb	r6, [r5, #0]
    6336:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    633a:	b108      	cbz	r0, 6340 <CONFIG_PM_SRAM_SIZE+0x340>
    633c:	2101      	movs	r1, #1
    633e:	e00a      	b.n	6356 <CONFIG_PM_SRAM_SIZE+0x356>
    6340:	7b60      	ldrb	r0, [r4, #13]
    6342:	b138      	cbz	r0, 6354 <CONFIG_PM_SRAM_SIZE+0x354>
    6344:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    6346:	4288      	cmp	r0, r1
    6348:	d804      	bhi.n	6354 <CONFIG_PM_SRAM_SIZE+0x354>
    634a:	2101      	movs	r1, #1
    634c:	4620      	mov	r0, r4
    634e:	f003 fce7 	bl	9d20 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6352:	bd70      	pop	{r4, r5, r6, pc}
    6354:	2100      	movs	r1, #0
    6356:	4620      	mov	r0, r4
    6358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    635c:	f003 bce0 	b.w	9d20 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6360:	20000d98 	.word	0x20000d98
    6364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6366:	4604      	mov	r4, r0
    6368:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
    636c:	4616      	mov	r6, r2
    636e:	460d      	mov	r5, r1
    6370:	f88d 0000 	strb.w	r0, [sp]
    6374:	9800      	ldr	r0, [sp, #0]
    6376:	9000      	str	r0, [sp, #0]
    6378:	f89d 0000 	ldrb.w	r0, [sp]
    637c:	b110      	cbz	r0, 6384 <CONFIG_PM_SRAM_SIZE+0x384>
    637e:	f640 416b 	movw	r1, #3179	; 0xc6b
    6382:	e055      	b.n	6430 <CONFIG_PM_SRAM_SIZE+0x430>
    6384:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
    6388:	2700      	movs	r7, #0
    638a:	8828      	ldrh	r0, [r5, #0]
    638c:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
    6390:	2b00      	cmp	r3, #0
    6392:	d14a      	bne.n	642a <CONFIG_PM_SRAM_SIZE+0x42a>
    6394:	6928      	ldr	r0, [r5, #16]
    6396:	f003 f8ac 	bl	94f2 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    639a:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    639e:	8b28      	ldrh	r0, [r5, #24]
    63a0:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    63a4:	8b68      	ldrh	r0, [r5, #26]
    63a6:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    63aa:	f895 020d 	ldrb.w	r0, [r5, #525]	; 0x20d
    63ae:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    63b2:	7e20      	ldrb	r0, [r4, #24]
    63b4:	f104 0151 	add.w	r1, r4, #81	; 0x51
    63b8:	460d      	mov	r5, r1
    63ba:	b120      	cbz	r0, 63c6 <CONFIG_PM_SRAM_SIZE+0x3c6>
    63bc:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    63c0:	f003 fa16 	bl	97f0 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x34>
    63c4:	b940      	cbnz	r0, 63d8 <CONFIG_PM_SRAM_SIZE+0x3d8>
    63c6:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    63ca:	b170      	cbz	r0, 63ea <CONFIG_PM_SRAM_SIZE+0x3ea>
    63cc:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    63d0:	4629      	mov	r1, r5
    63d2:	f003 fa04 	bl	97de <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x22>
    63d6:	b140      	cbz	r0, 63ea <CONFIG_PM_SRAM_SIZE+0x3ea>
    63d8:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    63dc:	f8c4 0082 	str.w	r0, [r4, #130]	; 0x82
    63e0:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    63e4:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    63e8:	e003      	b.n	63f2 <CONFIG_PM_SRAM_SIZE+0x3f2>
    63ea:	f8c4 7082 	str.w	r7, [r4, #130]	; 0x82
    63ee:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    63f2:	4814      	ldr	r0, [pc, #80]	; (6444 <CONFIG_PM_SRAM_SIZE+0x444>)
    63f4:	2eff      	cmp	r6, #255	; 0xff
    63f6:	6840      	ldr	r0, [r0, #4]
    63f8:	7801      	ldrb	r1, [r0, #0]
    63fa:	f3c1 1180 	ubfx	r1, r1, #6, #1
    63fe:	f884 107b 	strb.w	r1, [r4, #123]	; 0x7b
    6402:	f850 1f03 	ldr.w	r1, [r0, #3]!
    6406:	d016      	beq.n	6436 <CONFIG_PM_SRAM_SIZE+0x436>
    6408:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    640c:	8880      	ldrh	r0, [r0, #4]
    640e:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    6412:	f104 027c 	add.w	r2, r4, #124	; 0x7c
    6416:	1e51      	subs	r1, r2, #1
    6418:	4630      	mov	r0, r6
    641a:	f7fe fe3d 	bl	5098 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    641e:	b128      	cbz	r0, 642c <CONFIG_PM_SRAM_SIZE+0x42c>
    6420:	f814 0f7b 	ldrb.w	r0, [r4, #123]!
    6424:	f040 0002 	orr.w	r0, r0, #2
    6428:	7020      	strb	r0, [r4, #0]
    642a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    642c:	f640 418c 	movw	r1, #3212	; 0xc8c
    6430:	202d      	movs	r0, #45	; 0x2d
    6432:	f7fd ffdf 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6436:	f844 1f7c 	str.w	r1, [r4, #124]!
    643a:	8880      	ldrh	r0, [r0, #4]
    643c:	80a0      	strh	r0, [r4, #4]
    643e:	60e7      	str	r7, [r4, #12]
    6440:	8227      	strh	r7, [r4, #16]
    6442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6444:	200000ec 	.word	0x200000ec
    6448:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    644c:	4604      	mov	r4, r0
    644e:	20ff      	movs	r0, #255	; 0xff
    6450:	f88d 0000 	strb.w	r0, [sp]
    6454:	2501      	movs	r5, #1
    6456:	466a      	mov	r2, sp
    6458:	2103      	movs	r1, #3
    645a:	4620      	mov	r0, r4
    645c:	f7ff fef0 	bl	6240 <CONFIG_PM_SRAM_SIZE+0x240>
    6460:	b330      	cbz	r0, 64b0 <CONFIG_PM_SRAM_SIZE+0x4b0>
    6462:	7b20      	ldrb	r0, [r4, #12]
    6464:	2700      	movs	r7, #0
    6466:	b168      	cbz	r0, 6484 <CONFIG_PM_SRAM_SIZE+0x484>
    6468:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    646c:	f88d 0004 	strb.w	r0, [sp, #4]
    6470:	9801      	ldr	r0, [sp, #4]
    6472:	9001      	str	r0, [sp, #4]
    6474:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6478:	b920      	cbnz	r0, 6484 <CONFIG_PM_SRAM_SIZE+0x484>
    647a:	f89d 1000 	ldrb.w	r1, [sp]
    647e:	4620      	mov	r0, r4
    6480:	f7ff fe9e 	bl	61c0 <CONFIG_PM_SRAM_SIZE+0x1c0>
    6484:	4e0c      	ldr	r6, [pc, #48]	; (64b8 <CONFIG_PM_SRAM_SIZE+0x4b8>)
    6486:	2104      	movs	r1, #4
    6488:	6870      	ldr	r0, [r6, #4]
    648a:	8007      	strh	r7, [r0, #0]
    648c:	f003 f8f5 	bl	967a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    6490:	4620      	mov	r0, r4
    6492:	f000 f843 	bl	651c <CONFIG_PM_SRAM_SIZE+0x51c>
    6496:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    649a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    649c:	6870      	ldr	r0, [r6, #4]
    649e:	f003 f923 	bl	96e8 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    64a2:	4906      	ldr	r1, [pc, #24]	; (64bc <CONFIG_PM_SRAM_SIZE+0x4bc>)
    64a4:	2005      	movs	r0, #5
    64a6:	7008      	strb	r0, [r1, #0]
    64a8:	6870      	ldr	r0, [r6, #4]
    64aa:	f001 f815 	bl	74d8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    64ae:	e000      	b.n	64b2 <CONFIG_PM_SRAM_SIZE+0x4b2>
    64b0:	2500      	movs	r5, #0
    64b2:	4628      	mov	r0, r5
    64b4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    64b8:	200000ec 	.word	0x200000ec
    64bc:	20000d98 	.word	0x20000d98
    64c0:	b570      	push	{r4, r5, r6, lr}
    64c2:	4604      	mov	r4, r0
    64c4:	460e      	mov	r6, r1
    64c6:	7e40      	ldrb	r0, [r0, #25]
    64c8:	f7fe fdc0 	bl	504c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    64cc:	0005      	movs	r5, r0
    64ce:	d019      	beq.n	6504 <CONFIG_PM_SRAM_SIZE+0x504>
    64d0:	2110      	movs	r1, #16
    64d2:	f003 f885 	bl	95e0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    64d6:	2800      	cmp	r0, #0
    64d8:	d114      	bne.n	6504 <CONFIG_PM_SRAM_SIZE+0x504>
    64da:	2001      	movs	r0, #1
    64dc:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    64e0:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    64e4:	4632      	mov	r2, r6
    64e6:	460c      	mov	r4, r1
    64e8:	4628      	mov	r0, r5
    64ea:	f002 ff7f 	bl	93ec <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    64ee:	4621      	mov	r1, r4
    64f0:	4c05      	ldr	r4, [pc, #20]	; (6508 <CONFIG_PM_SRAM_SIZE+0x508>)
    64f2:	6860      	ldr	r0, [r4, #4]
    64f4:	f003 f8dc 	bl	96b0 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    64f8:	6860      	ldr	r0, [r4, #4]
    64fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    64fe:	2101      	movs	r1, #1
    6500:	f003 b8dc 	b.w	96bc <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    6504:	bd70      	pop	{r4, r5, r6, pc}
    6506:	0000      	.short	0x0000
    6508:	200000ec 	.word	0x200000ec
    650c:	4802      	ldr	r0, [pc, #8]	; (6518 <CONFIG_PM_SRAM_SIZE+0x518>)
    650e:	2101      	movs	r1, #1
    6510:	6800      	ldr	r0, [r0, #0]
    6512:	f7ff bb89 	b.w	5c28 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    6516:	0000      	.short	0x0000
    6518:	200000ec 	.word	0x200000ec
    651c:	b570      	push	{r4, r5, r6, lr}
    651e:	4d07      	ldr	r5, [pc, #28]	; (653c <CONFIG_PM_SRAM_SIZE+0x53c>)
    6520:	4604      	mov	r4, r0
    6522:	f100 0151 	add.w	r1, r0, #81	; 0x51
    6526:	6868      	ldr	r0, [r5, #4]
    6528:	f003 f8cf 	bl	96ca <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    652c:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    6530:	6868      	ldr	r0, [r5, #4]
    6532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6536:	f003 b8ce 	b.w	96d6 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    653a:	0000      	.short	0x0000
    653c:	200000ec 	.word	0x200000ec
    6540:	00005eb1 	.word	0x00005eb1
    6544:	00005d3d 	.word	0x00005d3d
    6548:	00005e2d 	.word	0x00005e2d
    654c:	00000000 	.word	0x00000000
    6550:	00005e05 	.word	0x00005e05
    6554:	00005e5d 	.word	0x00005e5d
    6558:	00009aeb 	.word	0x00009aeb
    655c:	00009af1 	.word	0x00009af1
    6560:	000060bd 	.word	0x000060bd
    6564:	000060e1 	.word	0x000060e1
    6568:	0000650d 	.word	0x0000650d
    656c:	0000655c 	.word	0x0000655c
    6570:	00006554 	.word	0x00006554
    6574:	00006550 	.word	0x00006550

00006578 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    6578:	b510      	push	{r4, lr}
    657a:	1e42      	subs	r2, r0, #1
    657c:	2a02      	cmp	r2, #2
    657e:	d901      	bls.n	6584 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    6580:	21ca      	movs	r1, #202	; 0xca
    6582:	e009      	b.n	6598 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    6584:	1e40      	subs	r0, r0, #1
    6586:	2910      	cmp	r1, #16
    6588:	d009      	beq.n	659e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    658a:	2912      	cmp	r1, #18
    658c:	d00c      	beq.n	65a8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    658e:	2913      	cmp	r1, #19
    6590:	d00a      	beq.n	65a8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    6592:	2915      	cmp	r1, #21
    6594:	d005      	beq.n	65a2 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    6596:	21d8      	movs	r1, #216	; 0xd8
    6598:	202f      	movs	r0, #47	; 0x2f
    659a:	f7fd ff2b 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    659e:	4905      	ldr	r1, [pc, #20]	; (65b4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    65a0:	e004      	b.n	65ac <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    65a2:	4904      	ldr	r1, [pc, #16]	; (65b4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    65a4:	1d89      	adds	r1, r1, #6
    65a6:	e001      	b.n	65ac <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    65a8:	4902      	ldr	r1, [pc, #8]	; (65b4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    65aa:	1f89      	subs	r1, r1, #6
    65ac:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    65b0:	bd10      	pop	{r4, pc}
    65b2:	0000      	.short	0x0000
    65b4:	00009cf0 	.word	0x00009cf0

000065b8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    65b8:	1e42      	subs	r2, r0, #1
    65ba:	b510      	push	{r4, lr}
    65bc:	b2d2      	uxtb	r2, r2
    65be:	2a01      	cmp	r2, #1
    65c0:	d903      	bls.n	65ca <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    65c2:	291d      	cmp	r1, #29
    65c4:	d001      	beq.n	65ca <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    65c6:	21ee      	movs	r1, #238	; 0xee
    65c8:	e00d      	b.n	65e6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    65ca:	2913      	cmp	r1, #19
    65cc:	d013      	beq.n	65f6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    65ce:	dc04      	bgt.n	65da <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    65d0:	2910      	cmp	r1, #16
    65d2:	d00b      	beq.n	65ec <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    65d4:	2912      	cmp	r1, #18
    65d6:	d104      	bne.n	65e2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    65d8:	e00d      	b.n	65f6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    65da:	2915      	cmp	r1, #21
    65dc:	d008      	beq.n	65f0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    65de:	291d      	cmp	r1, #29
    65e0:	d00e      	beq.n	6600 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    65e2:	f44f 7181 	mov.w	r1, #258	; 0x102
    65e6:	202f      	movs	r0, #47	; 0x2f
    65e8:	f7fd ff04 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65ec:	4807      	ldr	r0, [pc, #28]	; (660c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    65ee:	e004      	b.n	65fa <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    65f0:	4806      	ldr	r0, [pc, #24]	; (660c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    65f2:	3008      	adds	r0, #8
    65f4:	e001      	b.n	65fa <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    65f6:	4805      	ldr	r0, [pc, #20]	; (660c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    65f8:	1d00      	adds	r0, r0, #4
    65fa:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    65fe:	bd10      	pop	{r4, pc}
    6600:	f240 315a 	movw	r1, #858	; 0x35a
    6604:	fb10 f001 	smulbb	r0, r0, r1
    6608:	bd10      	pop	{r4, pc}
    660a:	0000      	.short	0x0000
    660c:	00009cde 	.word	0x00009cde

00006610 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    6610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6614:	4604      	mov	r4, r0
    6616:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    661a:	4616      	mov	r6, r2
    661c:	460d      	mov	r5, r1
    661e:	2800      	cmp	r0, #0
    6620:	d15e      	bne.n	66e0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    6622:	4621      	mov	r1, r4
    6624:	484c      	ldr	r0, [pc, #304]	; (6758 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x148>)
    6626:	f7fc f95f 	bl	28e8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    662a:	4607      	mov	r7, r0
    662c:	2820      	cmp	r0, #32
    662e:	d057      	beq.n	66e0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    6630:	2250      	movs	r2, #80	; 0x50
    6632:	2100      	movs	r1, #0
    6634:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    6638:	f001 ffc9 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    663c:	f884 70c8 	strb.w	r7, [r4, #200]	; 0xc8
    6640:	2701      	movs	r7, #1
    6642:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    6646:	f884 70e0 	strb.w	r7, [r4, #224]	; 0xe0
    664a:	b135      	cbz	r5, 665a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    664c:	f7ff f97a 	bl	5944 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    6650:	f000 0007 	and.w	r0, r0, #7
    6654:	1c40      	adds	r0, r0, #1
    6656:	f885 023c 	strb.w	r0, [r5, #572]	; 0x23c
    665a:	4620      	mov	r0, r4
    665c:	f003 fc19 	bl	9e92 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf8>
    6660:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    6664:	2002      	movs	r0, #2
    6666:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    666a:	f884 70f3 	strb.w	r7, [r4, #243]	; 0xf3
    666e:	2500      	movs	r5, #0
    6670:	46b8      	mov	r8, r7
    6672:	f804 5fe8 	strb.w	r5, [r4, #232]!
    6676:	f7fd fa53 	bl	3b20 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    667a:	4607      	mov	r7, r0
    667c:	f001 fdca 	bl	8214 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    6680:	8921      	ldrh	r1, [r4, #8]
    6682:	3ce8      	subs	r4, #232	; 0xe8
    6684:	4288      	cmp	r0, r1
    6686:	d800      	bhi.n	668a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    6688:	4608      	mov	r0, r1
    668a:	4438      	add	r0, r7
    668c:	30cc      	adds	r0, #204	; 0xcc
    668e:	b287      	uxth	r7, r0
    6690:	4620      	mov	r0, r4
    6692:	f003 f9c0 	bl	9a16 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6696:	b330      	cbz	r0, 66e6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    6698:	f004 f9e1 	bl	aa5e <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    669c:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    66a0:	b281      	uxth	r1, r0
    66a2:	4630      	mov	r0, r6
    66a4:	f001 fdea 	bl	827c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    66a8:	4430      	add	r0, r6
    66aa:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    66ae:	3490      	adds	r4, #144	; 0x90
    66b0:	f7fc fb2a 	bl	2d08 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    66b4:	19c0      	adds	r0, r0, r7
    66b6:	4169      	adcs	r1, r5
    66b8:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    66bc:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    66c0:	f824 5c6e 	strh.w	r5, [r4, #-110]
    66c4:	2001      	movs	r0, #1
    66c6:	f003 fb03 	bl	9cd0 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    66ca:	f500 7088 	add.w	r0, r0, #272	; 0x110
    66ce:	1a30      	subs	r0, r6, r0
    66d0:	6460      	str	r0, [r4, #68]	; 0x44
    66d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    66d6:	0841      	lsrs	r1, r0, #1
    66d8:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    66dc:	3c90      	subs	r4, #144	; 0x90
    66de:	e023      	b.n	6728 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    66e0:	200c      	movs	r0, #12
    66e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66e6:	2100      	movs	r1, #0
    66e8:	4620      	mov	r0, r4
    66ea:	f003 fb9f 	bl	9e2c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x92>
    66ee:	f8df 806c 	ldr.w	r8, [pc, #108]	; 675c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>
    66f2:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    66f6:	2000      	movs	r0, #0
    66f8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    66fc:	b139      	cbz	r1, 670e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xfe>
    66fe:	f7ff f921 	bl	5944 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    6702:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    6706:	fbb0 f2f1 	udiv	r2, r0, r1
    670a:	fb01 0012 	mls	r0, r1, r2, r0
    670e:	4407      	add	r7, r0
    6710:	f7fc fafa 	bl	2d08 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    6714:	19c0      	adds	r0, r0, r7
    6716:	4169      	adcs	r1, r5
    6718:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    671c:	b19e      	cbz	r6, 6746 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x136>
    671e:	1980      	adds	r0, r0, r6
    6720:	eb51 0105 	adcs.w	r1, r1, r5
    6724:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    6728:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    672c:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    6730:	f003 fbad 	bl	9e8e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf4>
    6734:	b158      	cbz	r0, 674e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13e>
    6736:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    673a:	2100      	movs	r1, #0
    673c:	4620      	mov	r0, r4
    673e:	f003 f99a 	bl	9a76 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    6742:	2000      	movs	r0, #0
    6744:	e7cd      	b.n	66e2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    6746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    674a:	0841      	lsrs	r1, r0, #1
    674c:	e7ea      	b.n	6724 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x114>
    674e:	f240 11e7 	movw	r1, #487	; 0x1e7
    6752:	2030      	movs	r0, #48	; 0x30
    6754:	f7fd fe4e 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6758:	00009f73 	.word	0x00009f73
    675c:	200000fc 	.word	0x200000fc

00006760 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    6760:	4901      	ldr	r1, [pc, #4]	; (6768 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    6762:	8088      	strh	r0, [r1, #4]
    6764:	4770      	bx	lr
    6766:	0000      	.short	0x0000
    6768:	200000fc 	.word	0x200000fc

0000676c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    676c:	4805      	ldr	r0, [pc, #20]	; (6784 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    676e:	2100      	movs	r1, #0
    6770:	7001      	strb	r1, [r0, #0]
    6772:	2201      	movs	r2, #1
    6774:	7082      	strb	r2, [r0, #2]
    6776:	7041      	strb	r1, [r0, #1]
    6778:	f242 7110 	movw	r1, #10000	; 0x2710
    677c:	8081      	strh	r1, [r0, #4]
    677e:	f000 b803 	b.w	6788 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    6782:	0000      	.short	0x0000
    6784:	200000fc 	.word	0x200000fc

00006788 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    6788:	b51c      	push	{r2, r3, r4, lr}
    678a:	4909      	ldr	r1, [pc, #36]	; (67b0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    678c:	e9d1 0100 	ldrd	r0, r1, [r1]
    6790:	e9cd 0100 	strd	r0, r1, [sp]
    6794:	e002      	b.n	679c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    6796:	9800      	ldr	r0, [sp, #0]
    6798:	f003 fad6 	bl	9d48 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    679c:	4668      	mov	r0, sp
    679e:	f7fe f81b 	bl	47d8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    67a2:	2800      	cmp	r0, #0
    67a4:	d0f7      	beq.n	6796 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    67a6:	f000 f81f 	bl	67e8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x28>
    67aa:	2000      	movs	r0, #0
    67ac:	bd1c      	pop	{r2, r3, r4, pc}
    67ae:	0000      	.short	0x0000
    67b0:	00006848 	.word	0x00006848

000067b4 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    67b4:	4901      	ldr	r1, [pc, #4]	; (67bc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    67b6:	7008      	strb	r0, [r1, #0]
    67b8:	4770      	bx	lr
    67ba:	0000      	.short	0x0000
    67bc:	200000fc 	.word	0x200000fc

000067c0 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    67c0:	4908      	ldr	r1, [pc, #32]	; (67e4 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    67c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    67c6:	fbb1 f1f2 	udiv	r1, r1, r2
    67ca:	b510      	push	{r4, lr}
    67cc:	f501 7125 	add.w	r1, r1, #660	; 0x294
    67d0:	f002 ffdc 	bl	978c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    67d4:	f640 0148 	movw	r1, #2120	; 0x848
    67d8:	4288      	cmp	r0, r1
    67da:	d300      	bcc.n	67de <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    67dc:	4608      	mov	r0, r1
    67de:	b280      	uxth	r0, r0
    67e0:	bd10      	pop	{r4, pc}
    67e2:	0000      	.short	0x0000
    67e4:	0001527d 	.word	0x0001527d
    67e8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    67ec:	4d15      	ldr	r5, [pc, #84]	; (6844 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x84>)
    67ee:	2001      	movs	r0, #1
    67f0:	7068      	strb	r0, [r5, #1]
    67f2:	2400      	movs	r4, #0
    67f4:	f64f 76ff 	movw	r6, #65535	; 0xffff
    67f8:	e00b      	b.n	6812 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x52>
    67fa:	2100      	movs	r1, #0
    67fc:	f002 fc1d 	bl	903a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6800:	0007      	movs	r7, r0
    6802:	d009      	beq.n	6818 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x58>
    6804:	f897 0294 	ldrb.w	r0, [r7, #660]	; 0x294
    6808:	f7fb ff56 	bl	26b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    680c:	4638      	mov	r0, r7
    680e:	f003 fba3 	bl	9f58 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1be>
    6812:	9400      	str	r4, [sp, #0]
    6814:	9401      	str	r4, [sp, #4]
    6816:	e00d      	b.n	6834 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x74>
    6818:	f240 111f 	movw	r1, #287	; 0x11f
    681c:	2030      	movs	r0, #48	; 0x30
    681e:	f7fd fde9 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6822:	9800      	ldr	r0, [sp, #0]
    6824:	b130      	cbz	r0, 6834 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x74>
    6826:	f890 124c 	ldrb.w	r1, [r0, #588]	; 0x24c
    682a:	b119      	cbz	r1, 6834 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x74>
    682c:	8800      	ldrh	r0, [r0, #0]
    682e:	42b0      	cmp	r0, r6
    6830:	d1e3      	bne.n	67fa <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x3a>
    6832:	e004      	b.n	683e <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x7e>
    6834:	4668      	mov	r0, sp
    6836:	f7fd ffcf 	bl	47d8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    683a:	2800      	cmp	r0, #0
    683c:	d0f1      	beq.n	6822 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x62>
    683e:	706c      	strb	r4, [r5, #1]
    6840:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6844:	200000fc 	.word	0x200000fc
    6848:	00000000 	.word	0x00000000
    684c:	00010000 	.word	0x00010000
    6850:	00000000 	.word	0x00000000
    6854:	00010000 	.word	0x00010000
    6858:	00000000 	.word	0x00000000
    685c:	00001e14 	.word	0x00001e14
    6860:	00001130 	.word	0x00001130
    6864:	00fa01f4 	.word	0x00fa01f4
    6868:	00640096 	.word	0x00640096
    686c:	0032004b 	.word	0x0032004b
    6870:	0014001e 	.word	0x0014001e
    6874:	0005000a 	.word	0x0005000a
    6878:	00010002 	.word	0x00010002

0000687c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    687c:	4903      	ldr	r1, [pc, #12]	; (688c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    687e:	884a      	ldrh	r2, [r1, #2]
    6880:	8002      	strh	r2, [r0, #0]
    6882:	7809      	ldrb	r1, [r1, #0]
    6884:	7081      	strb	r1, [r0, #2]
    6886:	2000      	movs	r0, #0
    6888:	4770      	bx	lr
    688a:	0000      	.short	0x0000
    688c:	20000d5c 	.word	0x20000d5c

00006890 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    6890:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6894:	460f      	mov	r7, r1
    6896:	4605      	mov	r5, r0
    6898:	7806      	ldrb	r6, [r0, #0]
    689a:	f003 ffa6 	bl	a7ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfc>
    689e:	2800      	cmp	r0, #0
    68a0:	d10a      	bne.n	68b8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    68a2:	4628      	mov	r0, r5
    68a4:	f003 ff7b 	bl	a79e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    68a8:	2800      	cmp	r0, #0
    68aa:	d105      	bne.n	68b8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    68ac:	2001      	movs	r0, #1
    68ae:	f7fd ff49 	bl	4744 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    68b2:	4286      	cmp	r6, r0
    68b4:	d302      	bcc.n	68bc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    68b6:	2007      	movs	r0, #7
    68b8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    68bc:	2101      	movs	r1, #1
    68be:	4630      	mov	r0, r6
    68c0:	f002 fbbb 	bl	903a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    68c4:	0004      	movs	r4, r0
    68c6:	d004      	beq.n	68d2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    68c8:	f003 fa67 	bl	9d9a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    68cc:	b168      	cbz	r0, 68ea <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    68ce:	200c      	movs	r0, #12
    68d0:	e7f2      	b.n	68b8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    68d2:	2101      	movs	r1, #1
    68d4:	4630      	mov	r0, r6
    68d6:	f002 fba6 	bl	9026 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    68da:	0004      	movs	r4, r0
    68dc:	d013      	beq.n	6906 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x76>
    68de:	4817      	ldr	r0, [pc, #92]	; (693c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xac>)
    68e0:	f990 1000 	ldrsb.w	r1, [r0]
    68e4:	4620      	mov	r0, r4
    68e6:	f002 ffcc 	bl	9882 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    68ea:	4620      	mov	r0, r4
    68ec:	f003 f89d 	bl	9a2a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    68f0:	7038      	strb	r0, [r7, #0]
    68f2:	74e8      	strb	r0, [r5, #19]
    68f4:	4629      	mov	r1, r5
    68f6:	4620      	mov	r0, r4
    68f8:	f7ff f8a6 	bl	5a48 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    68fc:	4606      	mov	r6, r0
    68fe:	7e68      	ldrb	r0, [r5, #25]
    6900:	b1d0      	cbz	r0, 6938 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    6902:	b12e      	cbz	r6, 6910 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x80>
    6904:	e018      	b.n	6938 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    6906:	f241 3162 	movw	r1, #4962	; 0x1362
    690a:	2039      	movs	r0, #57	; 0x39
    690c:	f7fd fd72 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6910:	2200      	movs	r2, #0
    6912:	4668      	mov	r0, sp
    6914:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6916:	f002 fc42 	bl	919e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    691a:	2200      	movs	r2, #0
    691c:	2101      	movs	r1, #1
    691e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6920:	f002 fcb3 	bl	928a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6924:	2204      	movs	r2, #4
    6926:	4668      	mov	r0, sp
    6928:	6b61      	ldr	r1, [r4, #52]	; 0x34
    692a:	f002 fc38 	bl	919e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    692e:	2200      	movs	r2, #0
    6930:	4611      	mov	r1, r2
    6932:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6934:	f002 fca9 	bl	928a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6938:	4630      	mov	r0, r6
    693a:	e7bd      	b.n	68b8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    693c:	20000118 	.word	0x20000118

00006940 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    6940:	7801      	ldrb	r1, [r0, #0]
    6942:	b171      	cbz	r1, 6962 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6944:	7841      	ldrb	r1, [r0, #1]
    6946:	b161      	cbz	r1, 6962 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6948:	8841      	ldrh	r1, [r0, #2]
    694a:	291b      	cmp	r1, #27
    694c:	d309      	bcc.n	6962 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    694e:	8881      	ldrh	r1, [r0, #4]
    6950:	291b      	cmp	r1, #27
    6952:	d306      	bcc.n	6962 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6954:	4904      	ldr	r1, [pc, #16]	; (6968 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    6956:	6802      	ldr	r2, [r0, #0]
    6958:	600a      	str	r2, [r1, #0]
    695a:	8880      	ldrh	r0, [r0, #4]
    695c:	8088      	strh	r0, [r1, #4]
    695e:	2000      	movs	r0, #0
    6960:	4770      	bx	lr
    6962:	2012      	movs	r0, #18
    6964:	4770      	bx	lr
    6966:	0000      	.short	0x0000
    6968:	20000d5c 	.word	0x20000d5c

0000696c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    696c:	6800      	ldr	r0, [r0, #0]
    696e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    6972:	4288      	cmp	r0, r1
    6974:	d303      	bcc.n	697e <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    6976:	4903      	ldr	r1, [pc, #12]	; (6984 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    6978:	6088      	str	r0, [r1, #8]
    697a:	2000      	movs	r0, #0
    697c:	4770      	bx	lr
    697e:	2012      	movs	r0, #18
    6980:	4770      	bx	lr
    6982:	0000      	.short	0x0000
    6984:	20000d5c 	.word	0x20000d5c

00006988 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    6988:	4a03      	ldr	r2, [pc, #12]	; (6998 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    698a:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    698e:	6001      	str	r1, [r0, #0]
    6990:	6042      	str	r2, [r0, #4]
    6992:	2000      	movs	r0, #0
    6994:	4770      	bx	lr
    6996:	0000      	.short	0x0000
    6998:	00006d40 	.word	0x00006d40
    699c:	b51c      	push	{r2, r3, r4, lr}
    699e:	4909      	ldr	r1, [pc, #36]	; (69c4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x3c>)
    69a0:	e9d1 0100 	ldrd	r0, r1, [r1]
    69a4:	e9cd 0100 	strd	r0, r1, [sp]
    69a8:	e005      	b.n	69b6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2e>
    69aa:	9800      	ldr	r0, [sp, #0]
    69ac:	f003 f9f5 	bl	9d9a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    69b0:	b108      	cbz	r0, 69b6 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2e>
    69b2:	2001      	movs	r0, #1
    69b4:	bd1c      	pop	{r2, r3, r4, pc}
    69b6:	4668      	mov	r0, sp
    69b8:	f7fd ff0e 	bl	47d8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    69bc:	2800      	cmp	r0, #0
    69be:	d0f4      	beq.n	69aa <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x22>
    69c0:	2000      	movs	r0, #0
    69c2:	bd1c      	pop	{r2, r3, r4, pc}
    69c4:	00006d40 	.word	0x00006d40
    69c8:	b510      	push	{r4, lr}
    69ca:	480d      	ldr	r0, [pc, #52]	; (6a00 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x78>)
    69cc:	2100      	movs	r1, #0
    69ce:	4b0d      	ldr	r3, [pc, #52]	; (6a04 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x7c>)
    69d0:	74c1      	strb	r1, [r0, #19]
    69d2:	8281      	strh	r1, [r0, #20]
    69d4:	221b      	movs	r2, #27
    69d6:	801a      	strh	r2, [r3, #0]
    69d8:	f44f 74a4 	mov.w	r4, #328	; 0x148
    69dc:	805c      	strh	r4, [r3, #2]
    69de:	809a      	strh	r2, [r3, #4]
    69e0:	80dc      	strh	r4, [r3, #6]
    69e2:	7381      	strb	r1, [r0, #14]
    69e4:	73c1      	strb	r1, [r0, #15]
    69e6:	2303      	movs	r3, #3
    69e8:	7003      	strb	r3, [r0, #0]
    69ea:	2302      	movs	r3, #2
    69ec:	7043      	strb	r3, [r0, #1]
    69ee:	8042      	strh	r2, [r0, #2]
    69f0:	8082      	strh	r2, [r0, #4]
    69f2:	f640 62a6 	movw	r2, #3750	; 0xea6
    69f6:	6082      	str	r2, [r0, #8]
    69f8:	7481      	strb	r1, [r0, #18]
    69fa:	7301      	strb	r1, [r0, #12]
    69fc:	bd10      	pop	{r4, pc}
    69fe:	0000      	.short	0x0000
    6a00:	20000d5c 	.word	0x20000d5c
    6a04:	20000120 	.word	0x20000120
    6a08:	b510      	push	{r4, lr}
    6a0a:	2101      	movs	r1, #1
    6a0c:	2000      	movs	r0, #0
    6a0e:	f002 fb14 	bl	903a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6a12:	0004      	movs	r4, r0
    6a14:	d10a      	bne.n	6a2c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xa4>
    6a16:	2101      	movs	r1, #1
    6a18:	f002 fb05 	bl	9026 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    6a1c:	0004      	movs	r4, r0
    6a1e:	d007      	beq.n	6a30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xa8>
    6a20:	4806      	ldr	r0, [pc, #24]	; (6a3c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xb4>)
    6a22:	f990 1000 	ldrsb.w	r1, [r0]
    6a26:	4620      	mov	r0, r4
    6a28:	f002 ff2b 	bl	9882 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    6a2c:	4620      	mov	r0, r4
    6a2e:	bd10      	pop	{r4, pc}
    6a30:	f240 2167 	movw	r1, #615	; 0x267
    6a34:	2039      	movs	r0, #57	; 0x39
    6a36:	f7fd fcdd 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a3a:	0000      	.short	0x0000
    6a3c:	20000118 	.word	0x20000118

00006a40 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    6a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6a44:	b087      	sub	sp, #28
    6a46:	460c      	mov	r4, r1
    6a48:	4680      	mov	r8, r0
    6a4a:	4605      	mov	r5, r0
    6a4c:	f002 fff0 	bl	9a30 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    6a50:	b198      	cbz	r0, 6a7a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    6a52:	4628      	mov	r0, r5
    6a54:	f002 ffdf 	bl	9a16 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6a58:	b130      	cbz	r0, 6a68 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    6a5a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    6a5e:	2012      	movs	r0, #18
    6a60:	2900      	cmp	r1, #0
    6a62:	d00b      	beq.n	6a7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6a64:	2980      	cmp	r1, #128	; 0x80
    6a66:	d809      	bhi.n	6a7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6a68:	4628      	mov	r0, r5
    6a6a:	f002 ffc3 	bl	99f4 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    6a6e:	b140      	cbz	r0, 6a82 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    6a70:	4640      	mov	r0, r8
    6a72:	f002 fed0 	bl	9816 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    6a76:	b130      	cbz	r0, 6a86 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    6a78:	e009      	b.n	6a8e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4e>
    6a7a:	2042      	movs	r0, #66	; 0x42
    6a7c:	b007      	add	sp, #28
    6a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6a82:	200c      	movs	r0, #12
    6a84:	e7fa      	b.n	6a7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6a86:	4640      	mov	r0, r8
    6a88:	f002 ffbf 	bl	9a0a <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    6a8c:	b3c8      	cbz	r0, 6b02 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    6a8e:	4640      	mov	r0, r8
    6a90:	f003 f983 	bl	9d9a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6a94:	2800      	cmp	r0, #0
    6a96:	d1f4      	bne.n	6a82 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    6a98:	4640      	mov	r0, r8
    6a9a:	f002 fed7 	bl	984c <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    6a9e:	2800      	cmp	r0, #0
    6aa0:	d1ef      	bne.n	6a82 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    6aa2:	4640      	mov	r0, r8
    6aa4:	f7fe ff6e 	bl	5984 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    6aa8:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6aac:	f242 7110 	movw	r1, #10000	; 0x2710
    6ab0:	fb00 f901 	mul.w	r9, r0, r1
    6ab4:	78e1      	ldrb	r1, [r4, #3]
    6ab6:	4640      	mov	r0, r8
    6ab8:	f002 ff93 	bl	99e2 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    6abc:	4640      	mov	r0, r8
    6abe:	f002 ffa6 	bl	9a0e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    6ac2:	b308      	cbz	r0, 6b08 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc8>
    6ac4:	2100      	movs	r1, #0
    6ac6:	a801      	add	r0, sp, #4
    6ac8:	f7fd fea6 	bl	4818 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    6acc:	0004      	movs	r4, r0
    6ace:	d07b      	beq.n	6bc8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    6ad0:	2100      	movs	r1, #0
    6ad2:	f7fe fc53 	bl	537c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    6ad6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    6ada:	8020      	strh	r0, [r4, #0]
    6adc:	4621      	mov	r1, r4
    6ade:	4640      	mov	r0, r8
    6ae0:	f002 ffbd 	bl	9a5e <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    6ae4:	f000 f984 	bl	6df0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6ae8:	0940      	lsrs	r0, r0, #5
    6aea:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    6aee:	07c0      	lsls	r0, r0, #31
    6af0:	4d41      	ldr	r5, [pc, #260]	; (6bf8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    6af2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6af6:	d011      	beq.n	6b1c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    6af8:	8869      	ldrh	r1, [r5, #2]
    6afa:	88aa      	ldrh	r2, [r5, #4]
    6afc:	84c1      	strh	r1, [r0, #38]	; 0x26
    6afe:	8502      	strh	r2, [r0, #40]	; 0x28
    6b00:	e00f      	b.n	6b22 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe2>
    6b02:	e7ff      	b.n	6b04 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    6b04:	2012      	movs	r0, #18
    6b06:	e7b9      	b.n	6a7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6b08:	464a      	mov	r2, r9
    6b0a:	2100      	movs	r1, #0
    6b0c:	4640      	mov	r0, r8
    6b0e:	f7ff fd7f 	bl	6610 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    6b12:	2800      	cmp	r0, #0
    6b14:	d0b2      	beq.n	6a7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6b16:	f241 51b5 	movw	r1, #5557	; 0x15b5
    6b1a:	e05f      	b.n	6bdc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    6b1c:	221b      	movs	r2, #27
    6b1e:	84c2      	strh	r2, [r0, #38]	; 0x26
    6b20:	8502      	strh	r2, [r0, #40]	; 0x28
    6b22:	f000 f965 	bl	6df0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6b26:	0788      	lsls	r0, r1, #30
    6b28:	f04f 0601 	mov.w	r6, #1
    6b2c:	d505      	bpl.n	6b3a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    6b2e:	f88d 6008 	strb.w	r6, [sp, #8]
    6b32:	a802      	add	r0, sp, #8
    6b34:	9403      	str	r4, [sp, #12]
    6b36:	f003 fa6f 	bl	a018 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    6b3a:	68a8      	ldr	r0, [r5, #8]
    6b3c:	62e0      	str	r0, [r4, #44]	; 0x2c
    6b3e:	f641 574c 	movw	r7, #7500	; 0x1d4c
    6b42:	4640      	mov	r0, r8
    6b44:	f002 ff6b 	bl	9a1e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    6b48:	b910      	cbnz	r0, 6b50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x110>
    6b4a:	4640      	mov	r0, r8
    6b4c:	f002 ff85 	bl	9a5a <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    6b50:	6127      	str	r7, [r4, #16]
    6b52:	8821      	ldrh	r1, [r4, #0]
    6b54:	f8ad 1008 	strh.w	r1, [sp, #8]
    6b58:	7ba9      	ldrb	r1, [r5, #14]
    6b5a:	f88d 100a 	strb.w	r1, [sp, #10]
    6b5e:	7be9      	ldrb	r1, [r5, #15]
    6b60:	f88d 100b 	strb.w	r1, [sp, #11]
    6b64:	8a29      	ldrh	r1, [r5, #16]
    6b66:	f8ad 100c 	strh.w	r1, [sp, #12]
    6b6a:	a905      	add	r1, sp, #20
    6b6c:	9100      	str	r1, [sp, #0]
    6b6e:	4630      	mov	r0, r6
    6b70:	ab04      	add	r3, sp, #16
    6b72:	aa02      	add	r2, sp, #8
    6b74:	4621      	mov	r1, r4
    6b76:	f003 fed3 	bl	a920 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x232>
    6b7a:	b140      	cbz	r0, 6b8e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    6b7c:	2100      	movs	r1, #0
    6b7e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    6b82:	f7fd fe71 	bl	4868 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6b86:	b1f0      	cbz	r0, 6bc6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    6b88:	f241 6117 	movw	r1, #5655	; 0x1617
    6b8c:	e026      	b.n	6bdc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    6b8e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    6b92:	f88d 0018 	strb.w	r0, [sp, #24]
    6b96:	f89d 0014 	ldrb.w	r0, [sp, #20]
    6b9a:	f88d 0019 	strb.w	r0, [sp, #25]
    6b9e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    6ba2:	f8ad 001a 	strh.w	r0, [sp, #26]
    6ba6:	a906      	add	r1, sp, #24
    6ba8:	4620      	mov	r0, r4
    6baa:	f002 fcd8 	bl	955e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    6bae:	7868      	ldrb	r0, [r5, #1]
    6bb0:	9000      	str	r0, [sp, #0]
    6bb2:	782b      	ldrb	r3, [r5, #0]
    6bb4:	88aa      	ldrh	r2, [r5, #4]
    6bb6:	8869      	ldrh	r1, [r5, #2]
    6bb8:	8820      	ldrh	r0, [r4, #0]
    6bba:	f7fd ff0b 	bl	49d4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    6bbe:	b128      	cbz	r0, 6bcc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18c>
    6bc0:	f241 6122 	movw	r1, #5666	; 0x1622
    6bc4:	e00a      	b.n	6bdc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    6bc6:	e7ff      	b.n	6bc8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    6bc8:	2009      	movs	r0, #9
    6bca:	e757      	b.n	6a7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6bcc:	464a      	mov	r2, r9
    6bce:	4621      	mov	r1, r4
    6bd0:	4640      	mov	r0, r8
    6bd2:	f7ff fd1d 	bl	6610 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    6bd6:	b120      	cbz	r0, 6be2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a2>
    6bd8:	f241 6124 	movw	r1, #5668	; 0x1624
    6bdc:	2039      	movs	r0, #57	; 0x39
    6bde:	f7fd fc09 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6be2:	4806      	ldr	r0, [pc, #24]	; (6bfc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    6be4:	6843      	ldr	r3, [r0, #4]
    6be6:	b123      	cbz	r3, 6bf2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b2>
    6be8:	2200      	movs	r2, #0
    6bea:	f504 7195 	add.w	r1, r4, #298	; 0x12a
    6bee:	4620      	mov	r0, r4
    6bf0:	4798      	blx	r3
    6bf2:	2000      	movs	r0, #0
    6bf4:	e742      	b.n	6a7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6bf6:	0000      	.short	0x0000
    6bf8:	20000d5c 	.word	0x20000d5c
    6bfc:	20000118 	.word	0x20000118
    6c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c04:	b088      	sub	sp, #32
    6c06:	4604      	mov	r4, r0
    6c08:	8800      	ldrh	r0, [r0, #0]
    6c0a:	a906      	add	r1, sp, #24
    6c0c:	f002 fc64 	bl	94d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6c10:	2800      	cmp	r0, #0
    6c12:	d147      	bne.n	6ca4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6c14:	9807      	ldr	r0, [sp, #28]
    6c16:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    6c1a:	f88d 1008 	strb.w	r1, [sp, #8]
    6c1e:	9902      	ldr	r1, [sp, #8]
    6c20:	9102      	str	r1, [sp, #8]
    6c22:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6c26:	3080      	adds	r0, #128	; 0x80
    6c28:	b101      	cbz	r1, 6c2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    6c2a:	2101      	movs	r1, #1
    6c2c:	f88d 100c 	strb.w	r1, [sp, #12]
    6c30:	7901      	ldrb	r1, [r0, #4]
    6c32:	f04f 0800 	mov.w	r8, #0
    6c36:	0689      	lsls	r1, r1, #26
    6c38:	d502      	bpl.n	6c40 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    6c3a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    6c3e:	b149      	cbz	r1, 6c54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x214>
    6c40:	f05f 0100 	movs.w	r1, #0
    6c44:	f88d 1004 	strb.w	r1, [sp, #4]
    6c48:	2105      	movs	r1, #5
    6c4a:	3064      	adds	r0, #100	; 0x64
    6c4c:	f003 fa50 	bl	a0f0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x74>
    6c50:	b110      	cbz	r0, 6c58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x218>
    6c52:	e004      	b.n	6c5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21e>
    6c54:	2101      	movs	r1, #1
    6c56:	e7f5      	b.n	6c44 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    6c58:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6c5c:	b308      	cbz	r0, 6ca2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    6c5e:	8921      	ldrh	r1, [r4, #8]
    6c60:	88e0      	ldrh	r0, [r4, #6]
    6c62:	f003 fe19 	bl	a898 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1aa>
    6c66:	2800      	cmp	r0, #0
    6c68:	d11c      	bne.n	6ca4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6c6a:	88a1      	ldrh	r1, [r4, #4]
    6c6c:	8860      	ldrh	r0, [r4, #2]
    6c6e:	f003 fe13 	bl	a898 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1aa>
    6c72:	2800      	cmp	r0, #0
    6c74:	d116      	bne.n	6ca4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6c76:	8921      	ldrh	r1, [r4, #8]
    6c78:	88e0      	ldrh	r0, [r4, #6]
    6c7a:	f003 fe03 	bl	a884 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x196>
    6c7e:	2800      	cmp	r0, #0
    6c80:	d110      	bne.n	6ca4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6c82:	88a1      	ldrh	r1, [r4, #4]
    6c84:	8860      	ldrh	r0, [r4, #2]
    6c86:	f003 fdfd 	bl	a884 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x196>
    6c8a:	0006      	movs	r6, r0
    6c8c:	d10a      	bne.n	6ca4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6c8e:	9807      	ldr	r0, [sp, #28]
    6c90:	f500 7595 	add.w	r5, r0, #298	; 0x12a
    6c94:	27ff      	movs	r7, #255	; 0xff
    6c96:	706f      	strb	r7, [r5, #1]
    6c98:	f89d 100c 	ldrb.w	r1, [sp, #12]
    6c9c:	b129      	cbz	r1, 6caa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26a>
    6c9e:	263a      	movs	r6, #58	; 0x3a
    6ca0:	e02e      	b.n	6d00 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c0>
    6ca2:	201a      	movs	r0, #26
    6ca4:	b008      	add	sp, #32
    6ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6caa:	4641      	mov	r1, r8
    6cac:	aa03      	add	r2, sp, #12
    6cae:	f003 fe01 	bl	a8b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c6>
    6cb2:	8861      	ldrh	r1, [r4, #2]
    6cb4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6cb8:	4281      	cmp	r1, r0
    6cba:	d200      	bcs.n	6cbe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    6cbc:	4608      	mov	r0, r1
    6cbe:	80e8      	strh	r0, [r5, #6]
    6cc0:	88a1      	ldrh	r1, [r4, #4]
    6cc2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6cc6:	4281      	cmp	r1, r0
    6cc8:	d200      	bcs.n	6ccc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    6cca:	4608      	mov	r0, r1
    6ccc:	8128      	strh	r0, [r5, #8]
    6cce:	88e2      	ldrh	r2, [r4, #6]
    6cd0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    6cd4:	428a      	cmp	r2, r1
    6cd6:	d200      	bcs.n	6cda <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29a>
    6cd8:	4611      	mov	r1, r2
    6cda:	8069      	strh	r1, [r5, #2]
    6cdc:	8922      	ldrh	r2, [r4, #8]
    6cde:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    6ce2:	428a      	cmp	r2, r1
    6ce4:	d200      	bcs.n	6ce8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a8>
    6ce6:	4611      	mov	r1, r2
    6ce8:	f640 0248 	movw	r2, #2120	; 0x848
    6cec:	80a9      	strh	r1, [r5, #4]
    6cee:	4291      	cmp	r1, r2
    6cf0:	d300      	bcc.n	6cf4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2b4>
    6cf2:	4611      	mov	r1, r2
    6cf4:	80a9      	strh	r1, [r5, #4]
    6cf6:	4290      	cmp	r0, r2
    6cf8:	d200      	bcs.n	6cfc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2bc>
    6cfa:	4602      	mov	r2, r0
    6cfc:	812a      	strh	r2, [r5, #8]
    6cfe:	702f      	strb	r7, [r5, #0]
    6d00:	f885 8001 	strb.w	r8, [r5, #1]
    6d04:	4630      	mov	r0, r6
    6d06:	e7cd      	b.n	6ca4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6d08:	b51c      	push	{r2, r3, r4, lr}
    6d0a:	490c      	ldr	r1, [pc, #48]	; (6d3c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2fc>)
    6d0c:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    6d10:	e9cd 0100 	strd	r0, r1, [sp]
    6d14:	e00a      	b.n	6d2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    6d16:	9c00      	ldr	r4, [sp, #0]
    6d18:	4620      	mov	r0, r4
    6d1a:	f003 f83e 	bl	9d9a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6d1e:	b128      	cbz	r0, 6d2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    6d20:	4620      	mov	r0, r4
    6d22:	f002 fec1 	bl	9aa8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    6d26:	b108      	cbz	r0, 6d2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    6d28:	2001      	movs	r0, #1
    6d2a:	bd1c      	pop	{r2, r3, r4, pc}
    6d2c:	4668      	mov	r0, sp
    6d2e:	f7fd fd53 	bl	47d8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6d32:	2800      	cmp	r0, #0
    6d34:	d0ef      	beq.n	6d16 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d6>
    6d36:	2000      	movs	r0, #0
    6d38:	bd1c      	pop	{r2, r3, r4, pc}
    6d3a:	0000      	.short	0x0000
    6d3c:	00006d40 	.word	0x00006d40
    6d40:	00000000 	.word	0x00000000
    6d44:	00010000 	.word	0x00010000
    6d48:	00000000 	.word	0x00000000
    6d4c:	00010000 	.word	0x00010000
    6d50:	0c11fa0c 	.word	0x0c11fa0c
    6d54:	11fa0059 	.word	0x11fa0059
    6d58:	00000000 	.word	0x00000000
    6d5c:	00010000 	.word	0x00010000
    6d60:	00000000 	.word	0x00000000
    6d64:	00010000 	.word	0x00010000

00006d68 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    6d68:	b510      	push	{r4, lr}
    6d6a:	f7fe fc87 	bl	567c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    6d6e:	4805      	ldr	r0, [pc, #20]	; (6d84 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    6d70:	6840      	ldr	r0, [r0, #4]
    6d72:	f003 fe6b 	bl	aa4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x35e>
    6d76:	f003 fc58 	bl	a62a <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    6d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6d7e:	f7fe bdcf 	b.w	5920 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    6d82:	0000      	.short	0x0000
    6d84:	20000128 	.word	0x20000128

00006d88 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    6d88:	b510      	push	{r4, lr}
    6d8a:	4c05      	ldr	r4, [pc, #20]	; (6da0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    6d8c:	68a0      	ldr	r0, [r4, #8]
    6d8e:	f003 fe5d 	bl	aa4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x35e>
    6d92:	68e0      	ldr	r0, [r4, #12]
    6d94:	f003 fe5a 	bl	aa4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x35e>
    6d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6d9c:	f003 bca7 	b.w	a6ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    6da0:	20000128 	.word	0x20000128

00006da4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    6da4:	b510      	push	{r4, lr}
    6da6:	4905      	ldr	r1, [pc, #20]	; (6dbc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    6da8:	4805      	ldr	r0, [pc, #20]	; (6dc0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    6daa:	f003 fe42 	bl	aa32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x344>
    6dae:	4804      	ldr	r0, [pc, #16]	; (6dc0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    6db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6db4:	4903      	ldr	r1, [pc, #12]	; (6dc4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    6db6:	1d00      	adds	r0, r0, #4
    6db8:	f003 be3b 	b.w	aa32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x344>
    6dbc:	20000138 	.word	0x20000138
    6dc0:	2000012c 	.word	0x2000012c
    6dc4:	20000140 	.word	0x20000140

00006dc8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    6dc8:	4801      	ldr	r0, [pc, #4]	; (6dd0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    6dca:	7800      	ldrb	r0, [r0, #0]
    6dcc:	4770      	bx	lr
    6dce:	0000      	.short	0x0000
    6dd0:	20000128 	.word	0x20000128
    6dd4:	b510      	push	{r4, lr}
    6dd6:	f7fe fef7 	bl	5bc8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    6dda:	f7ff fcc7 	bl	676c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    6dde:	4803      	ldr	r0, [pc, #12]	; (6dec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    6de0:	f7fe fed8 	bl	5b94 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    6de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6de8:	f7fe bc4e 	b.w	5688 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    6dec:	20001001 	.word	0x20001001

00006df0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    6df0:	4901      	ldr	r1, [pc, #4]	; (6df8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    6df2:	e9d1 0100 	ldrd	r0, r1, [r1]
    6df6:	4770      	bx	lr
    6df8:	20000020 	.word	0x20000020

00006dfc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    6dfc:	4806      	ldr	r0, [pc, #24]	; (6e18 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    6dfe:	8801      	ldrh	r1, [r0, #0]
    6e00:	7900      	ldrb	r0, [r0, #4]
    6e02:	0602      	lsls	r2, r0, #24
    6e04:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    6e08:	f000 0001 	and.w	r0, r0, #1
    6e0c:	1800      	adds	r0, r0, r0
    6e0e:	b2c0      	uxtb	r0, r0
    6e10:	f040 0001 	orr.w	r0, r0, #1
    6e14:	4770      	bx	lr
    6e16:	0000      	.short	0x0000
    6e18:	20000020 	.word	0x20000020

00006e1c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    6e1c:	b510      	push	{r4, lr}
    6e1e:	f7fc ff31 	bl	3c84 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    6e22:	2200      	movs	r2, #0
    6e24:	4b08      	ldr	r3, [pc, #32]	; (6e48 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    6e26:	4611      	mov	r1, r2
    6e28:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    6e2c:	4284      	cmp	r4, r0
    6e2e:	d303      	bcc.n	6e38 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    6e30:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6e34:	7882      	ldrb	r2, [r0, #2]
    6e36:	e003      	b.n	6e40 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    6e38:	1c49      	adds	r1, r1, #1
    6e3a:	b2c9      	uxtb	r1, r1
    6e3c:	290c      	cmp	r1, #12
    6e3e:	d3f3      	bcc.n	6e28 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    6e40:	4802      	ldr	r0, [pc, #8]	; (6e4c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    6e42:	7002      	strb	r2, [r0, #0]
    6e44:	bd10      	pop	{r4, pc}
    6e46:	0000      	.short	0x0000
    6e48:	0000aa62 	.word	0x0000aa62
    6e4c:	2000018d 	.word	0x2000018d

00006e50 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    6e50:	b570      	push	{r4, r5, r6, lr}
    6e52:	4605      	mov	r5, r0
    6e54:	4616      	mov	r6, r2
    6e56:	460c      	mov	r4, r1
    6e58:	2002      	movs	r0, #2
    6e5a:	f000 f8bd 	bl	6fd8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    6e5e:	4906      	ldr	r1, [pc, #24]	; (6e78 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    6e60:	2001      	movs	r0, #1
    6e62:	1ef6      	subs	r6, r6, #3
    6e64:	7008      	strb	r0, [r1, #0]
    6e66:	4805      	ldr	r0, [pc, #20]	; (6e7c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    6e68:	6006      	str	r6, [r0, #0]
    6e6a:	4804      	ldr	r0, [pc, #16]	; (6e7c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    6e6c:	3808      	subs	r0, #8
    6e6e:	6005      	str	r5, [r0, #0]
    6e70:	1f00      	subs	r0, r0, #4
    6e72:	6004      	str	r4, [r0, #0]
    6e74:	bd70      	pop	{r4, r5, r6, pc}
    6e76:	0000      	.short	0x0000
    6e78:	2000018e 	.word	0x2000018e
    6e7c:	4000f510 	.word	0x4000f510

00006e80 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    6e80:	b510      	push	{r4, lr}
    6e82:	4c0c      	ldr	r4, [pc, #48]	; (6eb4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    6e84:	7820      	ldrb	r0, [r4, #0]
    6e86:	b180      	cbz	r0, 6eaa <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    6e88:	490b      	ldr	r1, [pc, #44]	; (6eb8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    6e8a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    6e8e:	6008      	str	r0, [r1, #0]
    6e90:	f000 f86a 	bl	6f68 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    6e94:	2100      	movs	r1, #0
    6e96:	b120      	cbz	r0, 6ea2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    6e98:	2001      	movs	r0, #1
    6e9a:	7060      	strb	r0, [r4, #1]
    6e9c:	4807      	ldr	r0, [pc, #28]	; (6ebc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    6e9e:	6800      	ldr	r0, [r0, #0]
    6ea0:	e001      	b.n	6ea6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    6ea2:	7061      	strb	r1, [r4, #1]
    6ea4:	2010      	movs	r0, #16
    6ea6:	70a0      	strb	r0, [r4, #2]
    6ea8:	7021      	strb	r1, [r4, #0]
    6eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6eae:	2000      	movs	r0, #0
    6eb0:	f000 b892 	b.w	6fd8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    6eb4:	2000018e 	.word	0x2000018e
    6eb8:	4001f508 	.word	0x4001f508
    6ebc:	4000f400 	.word	0x4000f400

00006ec0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    6ec0:	b510      	push	{r4, lr}
    6ec2:	2002      	movs	r0, #2
    6ec4:	f000 f888 	bl	6fd8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    6ec8:	4904      	ldr	r1, [pc, #16]	; (6edc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    6eca:	2001      	movs	r0, #1
    6ecc:	7008      	strb	r0, [r1, #0]
    6ece:	f000 f859 	bl	6f84 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    6ed2:	4903      	ldr	r1, [pc, #12]	; (6ee0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    6ed4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    6ed8:	6008      	str	r0, [r1, #0]
    6eda:	bd10      	pop	{r4, pc}
    6edc:	2000018e 	.word	0x2000018e
    6ee0:	4001f504 	.word	0x4001f504

00006ee4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    6ee4:	4803      	ldr	r0, [pc, #12]	; (6ef4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    6ee6:	2100      	movs	r1, #0
    6ee8:	7001      	strb	r1, [r0, #0]
    6eea:	7041      	strb	r1, [r0, #1]
    6eec:	2110      	movs	r1, #16
    6eee:	7081      	strb	r1, [r0, #2]
    6ef0:	4770      	bx	lr
    6ef2:	0000      	.short	0x0000
    6ef4:	2000018e 	.word	0x2000018e

00006ef8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    6ef8:	4807      	ldr	r0, [pc, #28]	; (6f18 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    6efa:	b510      	push	{r4, lr}
    6efc:	7801      	ldrb	r1, [r0, #0]
    6efe:	b141      	cbz	r1, 6f12 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    6f00:	f000 f832 	bl	6f68 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    6f04:	b118      	cbz	r0, 6f0e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    6f06:	4805      	ldr	r0, [pc, #20]	; (6f1c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    6f08:	6800      	ldr	r0, [r0, #0]
    6f0a:	b2c0      	uxtb	r0, r0
    6f0c:	bd10      	pop	{r4, pc}
    6f0e:	2010      	movs	r0, #16
    6f10:	bd10      	pop	{r4, pc}
    6f12:	7880      	ldrb	r0, [r0, #2]
    6f14:	bd10      	pop	{r4, pc}
    6f16:	0000      	.short	0x0000
    6f18:	2000018e 	.word	0x2000018e
    6f1c:	4000f400 	.word	0x4000f400

00006f20 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    6f20:	4808      	ldr	r0, [pc, #32]	; (6f44 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    6f22:	b510      	push	{r4, lr}
    6f24:	7801      	ldrb	r1, [r0, #0]
    6f26:	b159      	cbz	r1, 6f40 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    6f28:	4807      	ldr	r0, [pc, #28]	; (6f48 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    6f2a:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    6f2e:	b128      	cbz	r0, 6f3c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    6f30:	f000 f80c 	bl	6f4c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    6f34:	2800      	cmp	r0, #0
    6f36:	d000      	beq.n	6f3a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    6f38:	2001      	movs	r0, #1
    6f3a:	bd10      	pop	{r4, pc}
    6f3c:	2002      	movs	r0, #2
    6f3e:	bd10      	pop	{r4, pc}
    6f40:	7840      	ldrb	r0, [r0, #1]
    6f42:	bd10      	pop	{r4, pc}
    6f44:	2000018e 	.word	0x2000018e
    6f48:	4000f000 	.word	0x4000f000
    6f4c:	4805      	ldr	r0, [pc, #20]	; (6f64 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    6f4e:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    6f52:	b111      	cbz	r1, 6f5a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    6f54:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    6f58:	b108      	cbz	r0, 6f5e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    6f5a:	2000      	movs	r0, #0
    6f5c:	4770      	bx	lr
    6f5e:	2001      	movs	r0, #1
    6f60:	4770      	bx	lr
    6f62:	0000      	.short	0x0000
    6f64:	4000f000 	.word	0x4000f000
    6f68:	4805      	ldr	r0, [pc, #20]	; (6f80 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    6f6a:	b510      	push	{r4, lr}
    6f6c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    6f70:	b120      	cbz	r0, 6f7c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    6f72:	f7ff ffeb 	bl	6f4c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    6f76:	b108      	cbz	r0, 6f7c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    6f78:	2001      	movs	r0, #1
    6f7a:	bd10      	pop	{r4, pc}
    6f7c:	2000      	movs	r0, #0
    6f7e:	bd10      	pop	{r4, pc}
    6f80:	4000f000 	.word	0x4000f000
    6f84:	4804      	ldr	r0, [pc, #16]	; (6f98 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    6f86:	2100      	movs	r1, #0
    6f88:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    6f8c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    6f90:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    6f94:	4770      	bx	lr
    6f96:	0000      	.short	0x0000
    6f98:	4000f000 	.word	0x4000f000

00006f9c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    6f9c:	b570      	push	{r4, r5, r6, lr}
    6f9e:	4d05      	ldr	r5, [pc, #20]	; (6fb4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    6fa0:	2400      	movs	r4, #0
    6fa2:	7828      	ldrb	r0, [r5, #0]
    6fa4:	b110      	cbz	r0, 6fac <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    6fa6:	f000 f80f 	bl	6fc8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>
    6faa:	702c      	strb	r4, [r5, #0]
    6fac:	706c      	strb	r4, [r5, #1]
    6fae:	70ac      	strb	r4, [r5, #2]
    6fb0:	bd70      	pop	{r4, r5, r6, pc}
    6fb2:	0000      	.short	0x0000
    6fb4:	20000191 	.word	0x20000191

00006fb8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    6fb8:	4802      	ldr	r0, [pc, #8]	; (6fc4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    6fba:	2100      	movs	r1, #0
    6fbc:	7001      	strb	r1, [r0, #0]
    6fbe:	7041      	strb	r1, [r0, #1]
    6fc0:	7081      	strb	r1, [r0, #2]
    6fc2:	4770      	bx	lr
    6fc4:	20000191 	.word	0x20000191
    6fc8:	4902      	ldr	r1, [pc, #8]	; (6fd4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x1c>)
    6fca:	4801      	ldr	r0, [pc, #4]	; (6fd0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x18>)
    6fcc:	6008      	str	r0, [r1, #0]
    6fce:	4770      	bx	lr
    6fd0:	02020000 	.word	0x02020000
    6fd4:	4001f508 	.word	0x4001f508

00006fd8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    6fd8:	b510      	push	{r4, lr}
    6fda:	4604      	mov	r4, r0
    6fdc:	f000 f820 	bl	7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>
    6fe0:	2c00      	cmp	r4, #0
    6fe2:	d00e      	beq.n	7002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    6fe4:	4a0b      	ldr	r2, [pc, #44]	; (7014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    6fe6:	480b      	ldr	r0, [pc, #44]	; (7014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    6fe8:	490b      	ldr	r1, [pc, #44]	; (7018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    6fea:	3214      	adds	r2, #20
    6fec:	2c01      	cmp	r4, #1
    6fee:	d005      	beq.n	6ffc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    6ff0:	2c02      	cmp	r4, #2
    6ff2:	d007      	beq.n	7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    6ff4:	2182      	movs	r1, #130	; 0x82
    6ff6:	203d      	movs	r0, #61	; 0x3d
    6ff8:	f7fd f9fc 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ffc:	2302      	movs	r3, #2
    6ffe:	6003      	str	r3, [r0, #0]
    7000:	6011      	str	r1, [r2, #0]
    7002:	bd10      	pop	{r4, pc}
    7004:	2303      	movs	r3, #3
    7006:	6003      	str	r3, [r0, #0]
    7008:	6011      	str	r1, [r2, #0]
    700a:	4904      	ldr	r1, [pc, #16]	; (701c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
    700c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7010:	6008      	str	r0, [r1, #0]
    7012:	bd10      	pop	{r4, pc}
    7014:	4000f500 	.word	0x4000f500
    7018:	20001103 	.word	0x20001103
    701c:	4001f504 	.word	0x4001f504
    7020:	4805      	ldr	r0, [pc, #20]	; (7038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    7022:	b510      	push	{r4, lr}
    7024:	2100      	movs	r1, #0
    7026:	6001      	str	r1, [r0, #0]
    7028:	6001      	str	r1, [r0, #0]
    702a:	f7ff ffb7 	bl	6f9c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    702e:	4903      	ldr	r1, [pc, #12]	; (703c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    7030:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7034:	6008      	str	r0, [r1, #0]
    7036:	bd10      	pop	{r4, pc}
    7038:	4000f500 	.word	0x4000f500
    703c:	4001f508 	.word	0x4001f508

00007040 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7040:	4805      	ldr	r0, [pc, #20]	; (7058 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7042:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7046:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    704a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    704e:	2100      	movs	r1, #0
    7050:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7054:	4770      	bx	lr
    7056:	0000      	.short	0x0000
    7058:	40001000 	.word	0x40001000

0000705c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    705c:	4904      	ldr	r1, [pc, #16]	; (7070 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    705e:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7062:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7066:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    706a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    706e:	4770      	bx	lr
    7070:	40001000 	.word	0x40001000

00007074 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    7074:	4801      	ldr	r0, [pc, #4]	; (707c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    7076:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    707a:	4770      	bx	lr
    707c:	20000dc0 	.word	0x20000dc0

00007080 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7080:	4902      	ldr	r1, [pc, #8]	; (708c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7082:	5c08      	ldrb	r0, [r1, r0]
    7084:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7088:	4770      	bx	lr
    708a:	0000      	.short	0x0000
    708c:	00007d06 	.word	0x00007d06

00007090 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7092:	4c24      	ldr	r4, [pc, #144]	; (7124 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7094:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7098:	f010 0f10 	tst.w	r0, #16
    709c:	d001      	beq.n	70a2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    709e:	2701      	movs	r7, #1
    70a0:	e000      	b.n	70a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    70a2:	2700      	movs	r7, #0
    70a4:	2010      	movs	r0, #16
    70a6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    70aa:	2002      	movs	r0, #2
    70ac:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    70b0:	481d      	ldr	r0, [pc, #116]	; (7128 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    70b2:	2500      	movs	r5, #0
    70b4:	491d      	ldr	r1, [pc, #116]	; (712c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    70b6:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    70ba:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    70be:	6008      	str	r0, [r1, #0]
    70c0:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    70c4:	f44f 7688 	mov.w	r6, #272	; 0x110
    70c8:	f010 0fff 	tst.w	r0, #255	; 0xff
    70cc:	d019      	beq.n	7102 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    70ce:	20ff      	movs	r0, #255	; 0xff
    70d0:	f88d 0000 	strb.w	r0, [sp]
    70d4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    70d8:	2001      	movs	r0, #1
    70da:	6120      	str	r0, [r4, #16]
    70dc:	e005      	b.n	70ea <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    70de:	bf00      	nop
    70e0:	f89d 0000 	ldrb.w	r0, [sp]
    70e4:	1e40      	subs	r0, r0, #1
    70e6:	f88d 0000 	strb.w	r0, [sp]
    70ea:	f89d 0000 	ldrb.w	r0, [sp]
    70ee:	b128      	cbz	r0, 70fc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    70f0:	4631      	mov	r1, r6
    70f2:	4620      	mov	r0, r4
    70f4:	f003 fd14 	bl	ab20 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    70f8:	2800      	cmp	r0, #0
    70fa:	d0f1      	beq.n	70e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    70fc:	f89d 0000 	ldrb.w	r0, [sp]
    7100:	b158      	cbz	r0, 711a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7102:	f000 fbf5 	bl	78f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    7106:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    710a:	f000 fd7d 	bl	7c08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    710e:	2f00      	cmp	r7, #0
    7110:	d002      	beq.n	7118 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7112:	2010      	movs	r0, #16
    7114:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    711a:	f640 018f 	movw	r1, #2191	; 0x88f
    711e:	203e      	movs	r0, #62	; 0x3e
    7120:	f7fd f968 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7124:	40001000 	.word	0x40001000
    7128:	20000dc0 	.word	0x20000dc0
    712c:	4001f508 	.word	0x4001f508

00007130 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7134:	4d18      	ldr	r5, [pc, #96]	; (7198 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7136:	4607      	mov	r7, r0
    7138:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    713c:	07c2      	lsls	r2, r0, #31
    713e:	d00f      	beq.n	7160 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7140:	4c16      	ldr	r4, [pc, #88]	; (719c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7142:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7146:	f042 0201 	orr.w	r2, r2, #1
    714a:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    714e:	f040 0002 	orr.w	r0, r0, #2
    7152:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    7156:	2601      	movs	r6, #1
    7158:	b13f      	cbz	r7, 716a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    715a:	2f01      	cmp	r7, #1
    715c:	d00b      	beq.n	7176 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    715e:	e010      	b.n	7182 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7160:	f240 717c 	movw	r1, #1916	; 0x77c
    7164:	203e      	movs	r0, #62	; 0x3e
    7166:	f7fd f945 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    716a:	4608      	mov	r0, r1
    716c:	f000 fda6 	bl	7cbc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    7170:	726e      	strb	r6, [r5, #9]
    7172:	6026      	str	r6, [r4, #0]
    7174:	e005      	b.n	7182 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7176:	4608      	mov	r0, r1
    7178:	f000 fd86 	bl	7c88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    717c:	2002      	movs	r0, #2
    717e:	7268      	strb	r0, [r5, #9]
    7180:	6066      	str	r6, [r4, #4]
    7182:	4807      	ldr	r0, [pc, #28]	; (71a0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7184:	64c6      	str	r6, [r0, #76]	; 0x4c
    7186:	4806      	ldr	r0, [pc, #24]	; (71a0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7188:	300c      	adds	r0, #12
    718a:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    718e:	4638      	mov	r0, r7
    7190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7194:	f000 bd0a 	b.w	7bac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    7198:	20000dc0 	.word	0x20000dc0
    719c:	40001000 	.word	0x40001000
    71a0:	40008000 	.word	0x40008000

000071a4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    71a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    71a8:	4c2c      	ldr	r4, [pc, #176]	; (725c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    71aa:	0006      	movs	r6, r0
    71ac:	4d2c      	ldr	r5, [pc, #176]	; (7260 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    71ae:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    71b2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7264 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    71b6:	f040 0002 	orr.w	r0, r0, #2
    71ba:	4689      	mov	r9, r1
    71bc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    71c0:	f04f 0700 	mov.w	r7, #0
    71c4:	d002      	beq.n	71cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    71c6:	2e01      	cmp	r6, #1
    71c8:	d020      	beq.n	720c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    71ca:	e036      	b.n	723a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    71cc:	4608      	mov	r0, r1
    71ce:	f000 fd75 	bl	7cbc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    71d2:	2001      	movs	r0, #1
    71d4:	7260      	strb	r0, [r4, #9]
    71d6:	79e0      	ldrb	r0, [r4, #7]
    71d8:	2801      	cmp	r0, #1
    71da:	d105      	bne.n	71e8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    71dc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    71e0:	f040 0008 	orr.w	r0, r0, #8
    71e4:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    71e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    71ea:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    71ee:	62a0      	str	r0, [r4, #40]	; 0x28
    71f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    71f4:	f8c8 0000 	str.w	r0, [r8]
    71f8:	491b      	ldr	r1, [pc, #108]	; (7268 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    71fa:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    71fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7202:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    7206:	fbb0 f7f1 	udiv	r7, r0, r1
    720a:	e016      	b.n	723a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    720c:	4608      	mov	r0, r1
    720e:	f000 fd3b 	bl	7c88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    7212:	2002      	movs	r0, #2
    7214:	7260      	strb	r0, [r4, #9]
    7216:	79e0      	ldrb	r0, [r4, #7]
    7218:	2801      	cmp	r0, #1
    721a:	d105      	bne.n	7228 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    721c:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7220:	f040 0004 	orr.w	r0, r0, #4
    7224:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7228:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    722a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    722e:	62a0      	str	r0, [r4, #40]	; 0x28
    7230:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    7234:	f8c8 0000 	str.w	r0, [r8]
    7238:	2729      	movs	r7, #41	; 0x29
    723a:	f000 fbc5 	bl	79c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    723e:	f000 ffe0 	bl	8202 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    7242:	b120      	cbz	r0, 724e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    7244:	f7ff ff24 	bl	7090 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7248:	2000      	movs	r0, #0
    724a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    724e:	2100      	movs	r1, #0
    7250:	4630      	mov	r0, r6
    7252:	f000 fcab 	bl	7bac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    7256:	4638      	mov	r0, r7
    7258:	e7f7      	b.n	724a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    725a:	0000      	.short	0x0000
    725c:	20000dc0 	.word	0x20000dc0
    7260:	40001000 	.word	0x40001000
    7264:	4001f504 	.word	0x4001f504
    7268:	00007d00 	.word	0x00007d00

0000726c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    726c:	b510      	push	{r4, lr}
    726e:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    7270:	4901      	ldr	r1, [pc, #4]	; (7278 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    7272:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    7276:	bd10      	pop	{r4, pc}
    7278:	20000db0 	.word	0x20000db0

0000727c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    727c:	b570      	push	{r4, r5, r6, lr}
    727e:	4c0f      	ldr	r4, [pc, #60]	; (72bc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    7280:	4603      	mov	r3, r0
    7282:	2002      	movs	r0, #2
    7284:	7320      	strb	r0, [r4, #12]
    7286:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    728a:	2096      	movs	r0, #150	; 0x96
    728c:	f894 1020 	ldrb.w	r1, [r4, #32]
    7290:	7d22      	ldrb	r2, [r4, #20]
    7292:	2d01      	cmp	r5, #1
    7294:	d00e      	beq.n	72b4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    7296:	f000 fd6f 	bl	7d78 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    729a:	6120      	str	r0, [r4, #16]
    729c:	4808      	ldr	r0, [pc, #32]	; (72c0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    729e:	2100      	movs	r1, #0
    72a0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    72a4:	6921      	ldr	r1, [r4, #16]
    72a6:	69e0      	ldr	r0, [r4, #28]
    72a8:	4408      	add	r0, r1
    72aa:	4905      	ldr	r1, [pc, #20]	; (72c0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    72ac:	1d09      	adds	r1, r1, #4
    72ae:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    72b2:	bd70      	pop	{r4, r5, r6, pc}
    72b4:	f000 fd7e 	bl	7db4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    72b8:	e7ef      	b.n	729a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    72ba:	0000      	.short	0x0000
    72bc:	20000dc0 	.word	0x20000dc0
    72c0:	40008000 	.word	0x40008000

000072c4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    72c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72c8:	2238      	movs	r2, #56	; 0x38
    72ca:	2100      	movs	r1, #0
    72cc:	4813      	ldr	r0, [pc, #76]	; (731c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    72ce:	f001 f97e 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    72d2:	f000 fc99 	bl	7c08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    72d6:	f001 f895 	bl	8404 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    72da:	4d11      	ldr	r5, [pc, #68]	; (7320 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    72dc:	4e10      	ldr	r6, [pc, #64]	; (7320 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    72de:	2400      	movs	r4, #0
    72e0:	4f0f      	ldr	r7, [pc, #60]	; (7320 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    72e2:	3508      	adds	r5, #8
    72e4:	3610      	adds	r6, #16
    72e6:	b928      	cbnz	r0, 72f4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    72e8:	f001 f8a3 	bl	8432 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    72ec:	b910      	cbnz	r0, 72f4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    72ee:	f001 f8aa 	bl	8446 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    72f2:	b108      	cbz	r0, 72f8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    72f4:	2224      	movs	r2, #36	; 0x24
    72f6:	e006      	b.n	7306 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    72f8:	f001 f8e5 	bl	84c6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    72fc:	b910      	cbnz	r0, 7304 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    72fe:	f001 f8d8 	bl	84b2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    7302:	b140      	cbz	r0, 7316 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    7304:	2240      	movs	r2, #64	; 0x40
    7306:	21ff      	movs	r1, #255	; 0xff
    7308:	4638      	mov	r0, r7
    730a:	f001 f960 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    730e:	602c      	str	r4, [r5, #0]
    7310:	6034      	str	r4, [r6, #0]
    7312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7316:	2238      	movs	r2, #56	; 0x38
    7318:	e7f5      	b.n	7306 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    731a:	0000      	.short	0x0000
    731c:	20000dc0 	.word	0x20000dc0
    7320:	40000e00 	.word	0x40000e00

00007324 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    7324:	b510      	push	{r4, lr}
    7326:	f000 fc23 	bl	7b70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    732a:	f7ff feb1 	bl	7090 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    732e:	f7fc ff13 	bl	4158 <mpsl_fem_disable>
    7332:	b130      	cbz	r0, 7342 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7334:	1c40      	adds	r0, r0, #1
    7336:	d004      	beq.n	7342 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7338:	f240 516d 	movw	r1, #1389	; 0x56d
    733c:	203e      	movs	r0, #62	; 0x3e
    733e:	f7fd f859 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7342:	480f      	ldr	r0, [pc, #60]	; (7380 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    7344:	4a0f      	ldr	r2, [pc, #60]	; (7384 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    7346:	6a81      	ldr	r1, [r0, #40]	; 0x28
    7348:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    734c:	6011      	str	r1, [r2, #0]
    734e:	2400      	movs	r4, #0
    7350:	6284      	str	r4, [r0, #40]	; 0x28
    7352:	7304      	strb	r4, [r0, #12]
    7354:	61c4      	str	r4, [r0, #28]
    7356:	6184      	str	r4, [r0, #24]
    7358:	f000 fc0a 	bl	7b70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    735c:	480a      	ldr	r0, [pc, #40]	; (7388 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    735e:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    7362:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    7366:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    736a:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    736e:	2001      	movs	r0, #1
    7370:	f003 fbc5 	bl	aafe <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7378:	2001      	movs	r0, #1
    737a:	f003 bbb3 	b.w	aae4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    737e:	0000      	.short	0x0000
    7380:	20000dc0 	.word	0x20000dc0
    7384:	4001f508 	.word	0x4001f508
    7388:	40008000 	.word	0x40008000

0000738c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    738c:	b570      	push	{r4, r5, r6, lr}
    738e:	2001      	movs	r0, #1
    7390:	f003 fbb5 	bl	aafe <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7394:	4c37      	ldr	r4, [pc, #220]	; (7474 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    7396:	2000      	movs	r0, #0
    7398:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    739c:	2001      	movs	r0, #1
    739e:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    73a2:	f001 f866 	bl	8472 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    73a6:	4d34      	ldr	r5, [pc, #208]	; (7478 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    73a8:	b118      	cbz	r0, 73b2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    73aa:	6828      	ldr	r0, [r5, #0]
    73ac:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    73b0:	6028      	str	r0, [r5, #0]
    73b2:	f001 f852 	bl	845a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    73b6:	b128      	cbz	r0, 73c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    73b8:	6828      	ldr	r0, [r5, #0]
    73ba:	4930      	ldr	r1, [pc, #192]	; (747c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    73bc:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    73c0:	4308      	orrs	r0, r1
    73c2:	6028      	str	r0, [r5, #0]
    73c4:	f001 f865 	bl	8492 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    73c8:	b138      	cbz	r0, 73da <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    73ca:	482b      	ldr	r0, [pc, #172]	; (7478 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    73cc:	1d00      	adds	r0, r0, #4
    73ce:	6801      	ldr	r1, [r0, #0]
    73d0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    73d4:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    73d8:	6001      	str	r1, [r0, #0]
    73da:	4927      	ldr	r1, [pc, #156]	; (7478 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    73dc:	4828      	ldr	r0, [pc, #160]	; (7480 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    73de:	313c      	adds	r1, #60	; 0x3c
    73e0:	6008      	str	r0, [r1, #0]
    73e2:	f7fc feef 	bl	41c4 <mpsl_fem_device_config_254_apply_get>
    73e6:	b140      	cbz	r0, 73fa <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    73e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    73ec:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    73f0:	1c41      	adds	r1, r0, #1
    73f2:	d002      	beq.n	73fa <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    73f4:	4920      	ldr	r1, [pc, #128]	; (7478 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    73f6:	3110      	adds	r1, #16
    73f8:	6008      	str	r0, [r1, #0]
    73fa:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    73fe:	6e00      	ldr	r0, [r0, #96]	; 0x60
    7400:	1c41      	adds	r1, r0, #1
    7402:	d004      	beq.n	740e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    7404:	491f      	ldr	r1, [pc, #124]	; (7484 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    7406:	680a      	ldr	r2, [r1, #0]
    7408:	f360 4217 	bfi	r2, r0, #16, #8
    740c:	600a      	str	r2, [r1, #0]
    740e:	f240 1103 	movw	r1, #259	; 0x103
    7412:	f240 605b 	movw	r0, #1627	; 0x65b
    7416:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    741a:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    741e:	2001      	movs	r0, #1
    7420:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    7424:	f000 f842 	bl	74ac <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    7428:	f240 2001 	movw	r0, #513	; 0x201
    742c:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    7430:	2002      	movs	r0, #2
    7432:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7436:	4914      	ldr	r1, [pc, #80]	; (7488 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    7438:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    743c:	6008      	str	r0, [r1, #0]
    743e:	4913      	ldr	r1, [pc, #76]	; (748c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    7440:	2000      	movs	r0, #0
    7442:	4d13      	ldr	r5, [pc, #76]	; (7490 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    7444:	8608      	strh	r0, [r1, #48]	; 0x30
    7446:	3110      	adds	r1, #16
    7448:	61c8      	str	r0, [r1, #28]
    744a:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    744e:	7028      	strb	r0, [r5, #0]
    7450:	2001      	movs	r0, #1
    7452:	f003 fb47 	bl	aae4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7456:	2010      	movs	r0, #16
    7458:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    745c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7460:	2002      	movs	r0, #2
    7462:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    7466:	6868      	ldr	r0, [r5, #4]
    7468:	2800      	cmp	r0, #0
    746a:	d002      	beq.n	7472 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    746c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7470:	4700      	bx	r0
    7472:	bd70      	pop	{r4, r5, r6, pc}
    7474:	40001000 	.word	0x40001000
    7478:	4000173c 	.word	0x4000173c
    747c:	80000096 	.word	0x80000096
    7480:	8900002c 	.word	0x8900002c
    7484:	4000158c 	.word	0x4000158c
    7488:	4001f504 	.word	0x4001f504
    748c:	20000db0 	.word	0x20000db0
    7490:	20000148 	.word	0x20000148

00007494 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    7494:	4901      	ldr	r1, [pc, #4]	; (749c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    7496:	7548      	strb	r0, [r1, #21]
    7498:	4770      	bx	lr
    749a:	0000      	.short	0x0000
    749c:	20000dc0 	.word	0x20000dc0

000074a0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    74a0:	4901      	ldr	r1, [pc, #4]	; (74a8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    74a2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    74a6:	4770      	bx	lr
    74a8:	00007d54 	.word	0x00007d54

000074ac <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    74ac:	4908      	ldr	r1, [pc, #32]	; (74d0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    74ae:	b510      	push	{r4, lr}
    74b0:	7508      	strb	r0, [r1, #20]
    74b2:	4908      	ldr	r1, [pc, #32]	; (74d4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    74b4:	2801      	cmp	r0, #1
    74b6:	d006      	beq.n	74c6 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    74b8:	2802      	cmp	r0, #2
    74ba:	d006      	beq.n	74ca <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    74bc:	f640 5169 	movw	r1, #3433	; 0xd69
    74c0:	203e      	movs	r0, #62	; 0x3e
    74c2:	f7fc ff97 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74c6:	2003      	movs	r0, #3
    74c8:	e000      	b.n	74cc <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    74ca:	2004      	movs	r0, #4
    74cc:	6008      	str	r0, [r1, #0]
    74ce:	bd10      	pop	{r4, pc}
    74d0:	20000dc0 	.word	0x20000dc0
    74d4:	40001510 	.word	0x40001510

000074d8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    74d8:	4905      	ldr	r1, [pc, #20]	; (74f0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    74da:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    74de:	4805      	ldr	r0, [pc, #20]	; (74f4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    74e0:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    74e4:	f041 0101 	orr.w	r1, r1, #1
    74e8:	7001      	strb	r1, [r0, #0]
    74ea:	f000 ba33 	b.w	7954 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    74ee:	0000      	.short	0x0000
    74f0:	40001000 	.word	0x40001000
    74f4:	20000dc0 	.word	0x20000dc0

000074f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    74f8:	4901      	ldr	r1, [pc, #4]	; (7500 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    74fa:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    74fe:	4770      	bx	lr
    7500:	00007d60 	.word	0x00007d60

00007504 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    7504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7508:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 75ac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>
    750c:	4d28      	ldr	r5, [pc, #160]	; (75b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xac>)
    750e:	460f      	mov	r7, r1
    7510:	0006      	movs	r6, r0
    7512:	4614      	mov	r4, r2
    7514:	f04f 0801 	mov.w	r8, #1
    7518:	d004      	beq.n	7524 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20>
    751a:	2e01      	cmp	r6, #1
    751c:	d010      	beq.n	7540 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3c>
    751e:	f640 0124 	movw	r1, #2084	; 0x824
    7522:	e039      	b.n	7598 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x94>
    7524:	4610      	mov	r0, r2
    7526:	f000 fbc9 	bl	7cbc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    752a:	4822      	ldr	r0, [pc, #136]	; (75b4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>)
    752c:	f885 8009 	strb.w	r8, [r5, #9]
    7530:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    7534:	4638      	mov	r0, r7
    7536:	f000 fb6f 	bl	7c18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    753a:	4604      	mov	r4, r0
    753c:	4648      	mov	r0, r9
    753e:	e00c      	b.n	755a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x56>
    7540:	4610      	mov	r0, r2
    7542:	f000 fba1 	bl	7c88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    7546:	2002      	movs	r0, #2
    7548:	7268      	strb	r0, [r5, #9]
    754a:	f649 71ba 	movw	r1, #40890	; 0x9fba
    754e:	4638      	mov	r0, r7
    7550:	f000 fb62 	bl	7c18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    7554:	4604      	mov	r4, r0
    7556:	4815      	ldr	r0, [pc, #84]	; (75ac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>)
    7558:	1d00      	adds	r0, r0, #4
    755a:	f000 fb1b 	bl	7b94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    755e:	4f16      	ldr	r7, [pc, #88]	; (75b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    7560:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
    7564:	4916      	ldr	r1, [pc, #88]	; (75c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>)
    7566:	4815      	ldr	r0, [pc, #84]	; (75bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>)
    7568:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    756c:	2010      	movs	r0, #16
    756e:	f8c9 0304 	str.w	r0, [r9, #772]	; 0x304
    7572:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    7574:	4913      	ldr	r1, [pc, #76]	; (75c4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc0>)
    7576:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    757a:	62a8      	str	r0, [r5, #40]	; 0x28
    757c:	0138      	lsls	r0, r7, #4
    757e:	6008      	str	r0, [r1, #0]
    7580:	f000 fa22 	bl	79c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    7584:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
    7588:	480b      	ldr	r0, [pc, #44]	; (75b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    758a:	300c      	adds	r0, #12
    758c:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    7590:	42a0      	cmp	r0, r4
    7592:	d304      	bcc.n	759e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9a>
    7594:	f640 013a 	movw	r1, #2106	; 0x83a
    7598:	203e      	movs	r0, #62	; 0x3e
    759a:	f7fc ff2b 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    759e:	4621      	mov	r1, r4
    75a0:	4630      	mov	r0, r6
    75a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    75a6:	f000 bb01 	b.w	7bac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    75aa:	0000      	.short	0x0000
    75ac:	40001000 	.word	0x40001000
    75b0:	20000dc0 	.word	0x20000dc0
    75b4:	00007d00 	.word	0x00007d00
    75b8:	40008000 	.word	0x40008000
    75bc:	40008140 	.word	0x40008140
    75c0:	4001f098 	.word	0x4001f098
    75c4:	4001f504 	.word	0x4001f504

000075c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    75c8:	4b0d      	ldr	r3, [pc, #52]	; (7600 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    75ca:	b510      	push	{r4, lr}
    75cc:	71d8      	strb	r0, [r3, #7]
    75ce:	729a      	strb	r2, [r3, #10]
    75d0:	b151      	cbz	r1, 75e8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    75d2:	2002      	movs	r0, #2
    75d4:	7218      	strb	r0, [r3, #8]
    75d6:	2801      	cmp	r0, #1
    75d8:	d008      	beq.n	75ec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    75da:	2802      	cmp	r0, #2
    75dc:	d00f      	beq.n	75fe <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    75de:	f640 2145 	movw	r1, #2629	; 0xa45
    75e2:	203e      	movs	r0, #62	; 0x3e
    75e4:	f7fc ff06 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75e8:	2001      	movs	r0, #1
    75ea:	e7f3      	b.n	75d4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    75ec:	7a58      	ldrb	r0, [r3, #9]
    75ee:	2802      	cmp	r0, #2
    75f0:	d105      	bne.n	75fe <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    75f2:	f000 f973 	bl	78dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    75f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    75fa:	f000 baa1 	b.w	7b40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    75fe:	bd10      	pop	{r4, pc}
    7600:	20000dc0 	.word	0x20000dc0

00007604 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    7604:	4904      	ldr	r1, [pc, #16]	; (7618 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    7606:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    760a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    760e:	4249      	negs	r1, r1
    7610:	7001      	strb	r1, [r0, #0]
    7612:	2001      	movs	r0, #1
    7614:	4770      	bx	lr
    7616:	0000      	.short	0x0000
    7618:	40001000 	.word	0x40001000

0000761c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    761c:	4903      	ldr	r1, [pc, #12]	; (762c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    761e:	0e02      	lsrs	r2, r0, #24
    7620:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    7624:	0200      	lsls	r0, r0, #8
    7626:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    762a:	4770      	bx	lr
    762c:	40001000 	.word	0x40001000

00007630 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    7630:	4901      	ldr	r1, [pc, #4]	; (7638 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    7632:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    7636:	4770      	bx	lr
    7638:	40001000 	.word	0x40001000

0000763c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    763c:	b510      	push	{r4, lr}
    763e:	2200      	movs	r2, #0
    7640:	2901      	cmp	r1, #1
    7642:	d006      	beq.n	7652 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    7644:	2902      	cmp	r1, #2
    7646:	d002      	beq.n	764e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    7648:	f240 21d9 	movw	r1, #729	; 0x2d9
    764c:	e014      	b.n	7678 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    764e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7652:	490b      	ldr	r1, [pc, #44]	; (7680 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    7654:	430a      	orrs	r2, r1
    7656:	490b      	ldr	r1, [pc, #44]	; (7684 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    7658:	600a      	str	r2, [r1, #0]
    765a:	490b      	ldr	r1, [pc, #44]	; (7688 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    765c:	4308      	orrs	r0, r1
    765e:	4909      	ldr	r1, [pc, #36]	; (7684 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    7660:	1d09      	adds	r1, r1, #4
    7662:	6008      	str	r0, [r1, #0]
    7664:	4809      	ldr	r0, [pc, #36]	; (768c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    7666:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    766a:	b2c0      	uxtb	r0, r0
    766c:	2803      	cmp	r0, #3
    766e:	d001      	beq.n	7674 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    7670:	280b      	cmp	r0, #11
    7672:	d104      	bne.n	767e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    7674:	f240 21f1 	movw	r1, #753	; 0x2f1
    7678:	203e      	movs	r0, #62	; 0x3e
    767a:	f7fc febb 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    767e:	bd10      	pop	{r4, pc}
    7680:	00100108 	.word	0x00100108
    7684:	40001514 	.word	0x40001514
    7688:	02030000 	.word	0x02030000
    768c:	40001000 	.word	0x40001000

00007690 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    7690:	4901      	ldr	r1, [pc, #4]	; (7698 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    7692:	7588      	strb	r0, [r1, #22]
    7694:	4770      	bx	lr
    7696:	0000      	.short	0x0000
    7698:	20000dc0 	.word	0x20000dc0

0000769c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    769c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    76a0:	4852      	ldr	r0, [pc, #328]	; (77ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    76a2:	f04f 0a01 	mov.w	sl, #1
    76a6:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    76aa:	4850      	ldr	r0, [pc, #320]	; (77ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    76ac:	300c      	adds	r0, #12
    76ae:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    76b2:	f000 fda4 	bl	81fe <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    76b6:	4c4e      	ldr	r4, [pc, #312]	; (77f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    76b8:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    76bc:	f000 f918 	bl	78f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    76c0:	494c      	ldr	r1, [pc, #304]	; (77f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    76c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    76c4:	6008      	str	r0, [r1, #0]
    76c6:	f8df 9130 	ldr.w	r9, [pc, #304]	; 77f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    76ca:	2000      	movs	r0, #0
    76cc:	62a0      	str	r0, [r4, #40]	; 0x28
    76ce:	f8d9 2200 	ldr.w	r2, [r9, #512]	; 0x200
    76d2:	f240 131d 	movw	r3, #285	; 0x11d
    76d6:	439a      	bics	r2, r3
    76d8:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    76dc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    76e0:	f000 f986 	bl	79f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    76e4:	4605      	mov	r5, r0
    76e6:	4841      	ldr	r0, [pc, #260]	; (77ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    76e8:	3008      	adds	r0, #8
    76ea:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    76ee:	4e3f      	ldr	r6, [pc, #252]	; (77ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    76f0:	61e0      	str	r0, [r4, #28]
    76f2:	1d36      	adds	r6, r6, #4
    76f4:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    76f8:	61a0      	str	r0, [r4, #24]
    76fa:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    76fe:	7d21      	ldrb	r1, [r4, #20]
    7700:	f884 1020 	strb.w	r1, [r4, #32]
    7704:	7a61      	ldrb	r1, [r4, #9]
    7706:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    770a:	46a0      	mov	r8, r4
    770c:	2400      	movs	r4, #0
    770e:	4639      	mov	r1, r7
    7710:	4628      	mov	r0, r5
    7712:	f000 f9e1 	bl	7ad8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    7716:	b910      	cbnz	r0, 771e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    7718:	f8c9 a010 	str.w	sl, [r9, #16]
    771c:	2401      	movs	r4, #1
    771e:	4f34      	ldr	r7, [pc, #208]	; (77f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    7720:	07e8      	lsls	r0, r5, #31
    7722:	f1a7 0710 	sub.w	r7, r7, #16
    7726:	d002      	beq.n	772e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    7728:	6838      	ldr	r0, [r7, #0]
    772a:	4780      	blx	r0
    772c:	e032      	b.n	7794 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    772e:	07a8      	lsls	r0, r5, #30
    7730:	d527      	bpl.n	7782 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    7732:	0768      	lsls	r0, r5, #29
    7734:	d41f      	bmi.n	7776 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    7736:	f000 feac 	bl	8492 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    773a:	b9e0      	cbnz	r0, 7776 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    773c:	f000 fe99 	bl	8472 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7740:	b9c8      	cbnz	r0, 7776 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    7742:	482e      	ldr	r0, [pc, #184]	; (77fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    7744:	6800      	ldr	r0, [r0, #0]
    7746:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    774a:	f3c0 5142 	ubfx	r1, r0, #21, #3
    774e:	f000 030f 	and.w	r3, r0, #15
    7752:	f3c0 1203 	ubfx	r2, r0, #4, #4
    7756:	f3c0 2003 	ubfx	r0, r0, #8, #4
    775a:	f1bc 0f00 	cmp.w	ip, #0
    775e:	d00a      	beq.n	7776 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    7760:	b10b      	cbz	r3, 7766 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    7762:	b102      	cbz	r2, 7766 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    7764:	b938      	cbnz	r0, 7776 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    7766:	4825      	ldr	r0, [pc, #148]	; (77fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    7768:	1d00      	adds	r0, r0, #4
    776a:	6800      	ldr	r0, [r0, #0]
    776c:	b118      	cbz	r0, 7776 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    776e:	2903      	cmp	r1, #3
    7770:	d201      	bcs.n	7776 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    7772:	f045 0504 	orr.w	r5, r5, #4
    7776:	f345 0080 	sbfx	r0, r5, #2, #1
    777a:	4621      	mov	r1, r4
    777c:	1c40      	adds	r0, r0, #1
    777e:	687a      	ldr	r2, [r7, #4]
    7780:	e007      	b.n	7792 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    7782:	f015 0f28 	tst.w	r5, #40	; 0x28
    7786:	d005      	beq.n	7794 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    7788:	f345 1140 	sbfx	r1, r5, #5, #1
    778c:	68ba      	ldr	r2, [r7, #8]
    778e:	4620      	mov	r0, r4
    7790:	1c49      	adds	r1, r1, #1
    7792:	4790      	blx	r2
    7794:	06e8      	lsls	r0, r5, #27
    7796:	d501      	bpl.n	779c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    7798:	68f8      	ldr	r0, [r7, #12]
    779a:	4780      	blx	r0
    779c:	f898 1009 	ldrb.w	r1, [r8, #9]
    77a0:	4640      	mov	r0, r8
    77a2:	2902      	cmp	r1, #2
    77a4:	d120      	bne.n	77e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    77a6:	7b01      	ldrb	r1, [r0, #12]
    77a8:	2900      	cmp	r1, #0
    77aa:	d01d      	beq.n	77e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    77ac:	2902      	cmp	r1, #2
    77ae:	d004      	beq.n	77ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11e>
    77b0:	2901      	cmp	r1, #1
    77b2:	d009      	beq.n	77c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12c>
    77b4:	f640 4148 	movw	r1, #3144	; 0xc48
    77b8:	e00d      	b.n	77d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    77ba:	69c1      	ldr	r1, [r0, #28]
    77bc:	f8d8 0010 	ldr.w	r0, [r8, #16]
    77c0:	4408      	add	r0, r1
    77c2:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    77c6:	e00b      	b.n	77e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    77c8:	6901      	ldr	r1, [r0, #16]
    77ca:	f8d8 001c 	ldr.w	r0, [r8, #28]
    77ce:	4281      	cmp	r1, r0
    77d0:	d804      	bhi.n	77dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    77d2:	f640 4149 	movw	r1, #3145	; 0xc49
    77d6:	203e      	movs	r0, #62	; 0x3e
    77d8:	f7fc fe0c 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77dc:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    77e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    77e4:	f000 b9b6 	b.w	7b54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    77e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77ec:	40008000 	.word	0x40008000
    77f0:	20000dc0 	.word	0x20000dc0
    77f4:	4001f508 	.word	0x4001f508
    77f8:	40001000 	.word	0x40001000
    77fc:	40001450 	.word	0x40001450

00007800 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    7800:	b570      	push	{r4, r5, r6, lr}
    7802:	4b16      	ldr	r3, [pc, #88]	; (785c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    7804:	888c      	ldrh	r4, [r1, #4]
    7806:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    780a:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    780e:	780c      	ldrb	r4, [r1, #0]
    7810:	f8d1 1001 	ldr.w	r1, [r1, #1]
    7814:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    7818:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    781c:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    7820:	2401      	movs	r4, #1
    7822:	4084      	lsls	r4, r0
    7824:	b2c9      	uxtb	r1, r1
    7826:	b2e5      	uxtb	r5, r4
    7828:	4329      	orrs	r1, r5
    782a:	b132      	cbz	r2, 783a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    782c:	2a01      	cmp	r2, #1
    782e:	d00a      	beq.n	7846 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    7830:	f240 51d4 	movw	r1, #1492	; 0x5d4
    7834:	203e      	movs	r0, #62	; 0x3e
    7836:	f7fc fddd 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    783a:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    783e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    7842:	43a0      	bics	r0, r4
    7844:	e004      	b.n	7850 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    7846:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    784a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    784e:	4328      	orrs	r0, r5
    7850:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    7854:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    7858:	bd70      	pop	{r4, r5, r6, pc}
    785a:	0000      	.short	0x0000
    785c:	40001000 	.word	0x40001000

00007860 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    7860:	4901      	ldr	r1, [pc, #4]	; (7868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    7862:	2001      	movs	r0, #1
    7864:	7008      	strb	r0, [r1, #0]
    7866:	4770      	bx	lr
    7868:	20000148 	.word	0x20000148
    786c:	480b      	ldr	r0, [pc, #44]	; (789c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    786e:	7d81      	ldrb	r1, [r0, #22]
    7870:	480b      	ldr	r0, [pc, #44]	; (78a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    7872:	5c40      	ldrb	r0, [r0, r1]
    7874:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7878:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    787c:	d204      	bcs.n	7888 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    787e:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    7882:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    7886:	e001      	b.n	788c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    7888:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    788c:	4a05      	ldr	r2, [pc, #20]	; (78a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    788e:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    7892:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    7896:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    789a:	4770      	bx	lr
    789c:	20000dc0 	.word	0x20000dc0
    78a0:	00007d06 	.word	0x00007d06
    78a4:	40001000 	.word	0x40001000
    78a8:	b508      	push	{r3, lr}
    78aa:	490b      	ldr	r1, [pc, #44]	; (78d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    78ac:	466b      	mov	r3, sp
    78ae:	f991 2015 	ldrsb.w	r2, [r1, #21]
    78b2:	7d89      	ldrb	r1, [r1, #22]
    78b4:	f000 faca 	bl	7e4c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    78b8:	f99d 0000 	ldrsb.w	r0, [sp]
    78bc:	f000 fa9a 	bl	7df4 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    78c0:	f10d 0001 	add.w	r0, sp, #1
    78c4:	f7fc fc6c 	bl	41a0 <mpsl_fem_pa_gain_set>
    78c8:	2800      	cmp	r0, #0
    78ca:	d004      	beq.n	78d6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    78cc:	f240 6115 	movw	r1, #1557	; 0x615
    78d0:	203e      	movs	r0, #62	; 0x3e
    78d2:	f7fc fd8f 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78d6:	bd08      	pop	{r3, pc}
    78d8:	20000dc0 	.word	0x20000dc0
    78dc:	4803      	ldr	r0, [pc, #12]	; (78ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    78de:	7a01      	ldrb	r1, [r0, #8]
    78e0:	2901      	cmp	r1, #1
    78e2:	d102      	bne.n	78ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    78e4:	7a80      	ldrb	r0, [r0, #10]
    78e6:	f7ff bfdf 	b.w	78a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    78ea:	4770      	bx	lr
    78ec:	20000dc0 	.word	0x20000dc0
    78f0:	480d      	ldr	r0, [pc, #52]	; (7928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    78f2:	b510      	push	{r4, lr}
    78f4:	7a40      	ldrb	r0, [r0, #9]
    78f6:	2801      	cmp	r0, #1
    78f8:	d00c      	beq.n	7914 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    78fa:	2802      	cmp	r0, #2
    78fc:	d113      	bne.n	7926 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    78fe:	f7fc fc31 	bl	4164 <mpsl_fem_lna_configuration_clear>
    7902:	2800      	cmp	r0, #0
    7904:	d00f      	beq.n	7926 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    7906:	1c40      	adds	r0, r0, #1
    7908:	d00d      	beq.n	7926 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    790a:	f640 01a6 	movw	r1, #2214	; 0x8a6
    790e:	203e      	movs	r0, #62	; 0x3e
    7910:	f7fc fd70 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7914:	f7fc fc38 	bl	4188 <mpsl_fem_pa_configuration_clear>
    7918:	2800      	cmp	r0, #0
    791a:	d004      	beq.n	7926 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    791c:	1c40      	adds	r0, r0, #1
    791e:	d002      	beq.n	7926 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    7920:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    7924:	e7f3      	b.n	790e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    7926:	bd10      	pop	{r4, pc}
    7928:	20000dc0 	.word	0x20000dc0
    792c:	4808      	ldr	r0, [pc, #32]	; (7950 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    792e:	2100      	movs	r1, #0
    7930:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7934:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    7938:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    793c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7940:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    7944:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    7948:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    794c:	4770      	bx	lr
    794e:	0000      	.short	0x0000
    7950:	40001000 	.word	0x40001000
    7954:	4818      	ldr	r0, [pc, #96]	; (79b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    7956:	b510      	push	{r4, lr}
    7958:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    795c:	07c1      	lsls	r1, r0, #31
    795e:	d029      	beq.n	79b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    7960:	0781      	lsls	r1, r0, #30
    7962:	d514      	bpl.n	798e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    7964:	4815      	ldr	r0, [pc, #84]	; (79bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    7966:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    796a:	f041 0101 	orr.w	r1, r1, #1
    796e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7972:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    7976:	b2c0      	uxtb	r0, r0
    7978:	280b      	cmp	r0, #11
    797a:	d005      	beq.n	7988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    797c:	280a      	cmp	r0, #10
    797e:	d003      	beq.n	7988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    7980:	2803      	cmp	r0, #3
    7982:	d001      	beq.n	7988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    7984:	2802      	cmp	r0, #2
    7986:	d115      	bne.n	79b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    7988:	f240 613e 	movw	r1, #1598	; 0x63e
    798c:	e00f      	b.n	79ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    798e:	0740      	lsls	r0, r0, #29
    7990:	d510      	bpl.n	79b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    7992:	480a      	ldr	r0, [pc, #40]	; (79bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    7994:	490a      	ldr	r1, [pc, #40]	; (79c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    7996:	3008      	adds	r0, #8
    7998:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    799c:	f44f 71a0 	mov.w	r1, #320	; 0x140
    79a0:	4808      	ldr	r0, [pc, #32]	; (79c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    79a2:	f003 f8c2 	bl	ab2a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    79a6:	2800      	cmp	r0, #0
    79a8:	d004      	beq.n	79b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    79aa:	f240 6146 	movw	r1, #1606	; 0x646
    79ae:	203e      	movs	r0, #62	; 0x3e
    79b0:	f7fc fd20 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79b4:	bd10      	pop	{r4, pc}
    79b6:	0000      	.short	0x0000
    79b8:	20000dc0 	.word	0x20000dc0
    79bc:	40001000 	.word	0x40001000
    79c0:	4001f098 	.word	0x4001f098
    79c4:	40008000 	.word	0x40008000
    79c8:	4808      	ldr	r0, [pc, #32]	; (79ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    79ca:	4601      	mov	r1, r0
    79cc:	79c2      	ldrb	r2, [r0, #7]
    79ce:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    79d2:	b112      	cbz	r2, 79da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    79d4:	2a01      	cmp	r2, #1
    79d6:	d003      	beq.n	79e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    79d8:	e006      	b.n	79e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    79da:	f041 0102 	orr.w	r1, r1, #2
    79de:	e001      	b.n	79e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    79e0:	f041 0104 	orr.w	r1, r1, #4
    79e4:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    79e8:	f7ff bfb4 	b.w	7954 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    79ec:	20000dc0 	.word	0x20000dc0
    79f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79f4:	4d34      	ldr	r5, [pc, #208]	; (7ac8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    79f6:	2400      	movs	r4, #0
    79f8:	7b28      	ldrb	r0, [r5, #12]
    79fa:	b138      	cbz	r0, 7a0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    79fc:	f44f 71a2 	mov.w	r1, #324	; 0x144
    7a00:	4832      	ldr	r0, [pc, #200]	; (7acc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    7a02:	f003 f892 	bl	ab2a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    7a06:	b108      	cbz	r0, 7a0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    7a08:	2601      	movs	r6, #1
    7a0a:	e000      	b.n	7a0e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    7a0c:	2600      	movs	r6, #0
    7a0e:	7a68      	ldrb	r0, [r5, #9]
    7a10:	4f2f      	ldr	r7, [pc, #188]	; (7ad0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    7a12:	f44f 7186 	mov.w	r1, #268	; 0x10c
    7a16:	2801      	cmp	r0, #1
    7a18:	d002      	beq.n	7a20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    7a1a:	2802      	cmp	r0, #2
    7a1c:	d006      	beq.n	7a2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    7a1e:	e016      	b.n	7a4e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    7a20:	4638      	mov	r0, r7
    7a22:	f003 f87d 	bl	ab20 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7a26:	b190      	cbz	r0, 7a4e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    7a28:	2408      	movs	r4, #8
    7a2a:	e010      	b.n	7a4e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    7a2c:	4638      	mov	r0, r7
    7a2e:	f003 f877 	bl	ab20 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7a32:	b100      	cbz	r0, 7a36 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    7a34:	2402      	movs	r4, #2
    7a36:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    7a3a:	43c0      	mvns	r0, r0
    7a3c:	f340 0000 	sbfx	r0, r0, #0, #1
    7a40:	1c40      	adds	r0, r0, #1
    7a42:	d101      	bne.n	7a48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    7a44:	f044 0404 	orr.w	r4, r4, #4
    7a48:	b10e      	cbz	r6, 7a4e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    7a4a:	f044 0401 	orr.w	r4, r4, #1
    7a4e:	f014 0f0b 	tst.w	r4, #11
    7a52:	d107      	bne.n	7a64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    7a54:	f44f 7188 	mov.w	r1, #272	; 0x110
    7a58:	4638      	mov	r0, r7
    7a5a:	f003 f861 	bl	ab20 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7a5e:	b108      	cbz	r0, 7a64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    7a60:	f044 0410 	orr.w	r4, r4, #16
    7a64:	481b      	ldr	r0, [pc, #108]	; (7ad4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    7a66:	7800      	ldrb	r0, [r0, #0]
    7a68:	b1f8      	cbz	r0, 7aaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    7a6a:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    7a6e:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    7a72:	d007      	beq.n	7a84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    7a74:	f44f 718a 	mov.w	r1, #276	; 0x114
    7a78:	4638      	mov	r0, r7
    7a7a:	f003 f851 	bl	ab20 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7a7e:	b108      	cbz	r0, 7a84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    7a80:	2001      	movs	r0, #1
    7a82:	e000      	b.n	7a86 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    7a84:	2000      	movs	r0, #0
    7a86:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    7a8a:	b13e      	cbz	r6, 7a9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    7a8c:	f44f 718c 	mov.w	r1, #280	; 0x118
    7a90:	4638      	mov	r0, r7
    7a92:	f003 f845 	bl	ab20 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7a96:	b108      	cbz	r0, 7a9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    7a98:	2001      	movs	r0, #1
    7a9a:	e000      	b.n	7a9e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    7a9c:	2000      	movs	r0, #0
    7a9e:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    7aa2:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    7aa6:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    7aaa:	f7ff ff3f 	bl	792c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    7aae:	06e0      	lsls	r0, r4, #27
    7ab0:	d506      	bpl.n	7ac0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    7ab2:	0720      	lsls	r0, r4, #28
    7ab4:	d404      	bmi.n	7ac0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    7ab6:	7a68      	ldrb	r0, [r5, #9]
    7ab8:	2801      	cmp	r0, #1
    7aba:	d101      	bne.n	7ac0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    7abc:	f044 0420 	orr.w	r4, r4, #32
    7ac0:	4620      	mov	r0, r4
    7ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ac6:	0000      	.short	0x0000
    7ac8:	20000dc0 	.word	0x20000dc0
    7acc:	40008000 	.word	0x40008000
    7ad0:	40001000 	.word	0x40001000
    7ad4:	20000148 	.word	0x20000148
    7ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7adc:	4c17      	ldr	r4, [pc, #92]	; (7b3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>)
    7ade:	460d      	mov	r5, r1
    7ae0:	7a21      	ldrb	r1, [r4, #8]
    7ae2:	b129      	cbz	r1, 7af0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    7ae4:	f010 0f11 	tst.w	r0, #17
    7ae8:	d007      	beq.n	7afa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    7aea:	f7ff fad1 	bl	7090 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7aee:	e023      	b.n	7b38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    7af0:	f000 f88a 	bl	7c08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    7af4:	2000      	movs	r0, #0
    7af6:	7320      	strb	r0, [r4, #12]
    7af8:	e01e      	b.n	7b38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    7afa:	2901      	cmp	r1, #1
    7afc:	d001      	beq.n	7b02 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    7afe:	2601      	movs	r6, #1
    7b00:	e000      	b.n	7b04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    7b02:	2600      	movs	r6, #0
    7b04:	79e0      	ldrb	r0, [r4, #7]
    7b06:	2801      	cmp	r0, #1
    7b08:	d00e      	beq.n	7b28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    7b0a:	2700      	movs	r7, #0
    7b0c:	f000 f87c 	bl	7c08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    7b10:	2196      	movs	r1, #150	; 0x96
    7b12:	4630      	mov	r0, r6
    7b14:	f000 f88e 	bl	7c34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d4>
    7b18:	4601      	mov	r1, r0
    7b1a:	b14f      	cbz	r7, 7b30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    7b1c:	353b      	adds	r5, #59	; 0x3b
    7b1e:	428d      	cmp	r5, r1
    7b20:	d904      	bls.n	7b2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    7b22:	2000      	movs	r0, #0
    7b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b28:	2701      	movs	r7, #1
    7b2a:	e7ef      	b.n	7b0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    7b2c:	2001      	movs	r0, #1
    7b2e:	71e0      	strb	r0, [r4, #7]
    7b30:	7aa2      	ldrb	r2, [r4, #10]
    7b32:	4630      	mov	r0, r6
    7b34:	f7ff fce6 	bl	7504 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7b38:	2001      	movs	r0, #1
    7b3a:	e7f3      	b.n	7b24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    7b3c:	20000dc0 	.word	0x20000dc0
    7b40:	4803      	ldr	r0, [pc, #12]	; (7b50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    7b42:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7b46:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    7b4a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7b4e:	4770      	bx	lr
    7b50:	40001000 	.word	0x40001000
    7b54:	4804      	ldr	r0, [pc, #16]	; (7b68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    7b56:	6a81      	ldr	r1, [r0, #40]	; 0x28
    7b58:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    7b5c:	6281      	str	r1, [r0, #40]	; 0x28
    7b5e:	4903      	ldr	r1, [pc, #12]	; (7b6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    7b60:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    7b64:	6008      	str	r0, [r1, #0]
    7b66:	4770      	bx	lr
    7b68:	20000dc0 	.word	0x20000dc0
    7b6c:	4001f504 	.word	0x4001f504
    7b70:	4a07      	ldr	r2, [pc, #28]	; (7b90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    7b72:	2000      	movs	r0, #0
    7b74:	3208      	adds	r2, #8
    7b76:	4906      	ldr	r1, [pc, #24]	; (7b90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    7b78:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7b7c:	1d0a      	adds	r2, r1, #4
    7b7e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7b82:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7b86:	4902      	ldr	r1, [pc, #8]	; (7b90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    7b88:	310c      	adds	r1, #12
    7b8a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7b8e:	4770      	bx	lr
    7b90:	40008000 	.word	0x40008000
    7b94:	4903      	ldr	r1, [pc, #12]	; (7ba4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x344>)
    7b96:	79c9      	ldrb	r1, [r1, #7]
    7b98:	2900      	cmp	r1, #0
    7b9a:	d102      	bne.n	7ba2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    7b9c:	4902      	ldr	r1, [pc, #8]	; (7ba8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x348>)
    7b9e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    7ba2:	4770      	bx	lr
    7ba4:	20000dc0 	.word	0x20000dc0
    7ba8:	4001f098 	.word	0x4001f098
    7bac:	b510      	push	{r4, lr}
    7bae:	4a14      	ldr	r2, [pc, #80]	; (7c00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    7bb0:	b120      	cbz	r0, 7bbc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    7bb2:	2801      	cmp	r0, #1
    7bb4:	d011      	beq.n	7bda <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37a>
    7bb6:	f44f 61ec 	mov.w	r1, #1888	; 0x760
    7bba:	e01c      	b.n	7bf6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    7bbc:	f101 0028 	add.w	r0, r1, #40	; 0x28
    7bc0:	e9c2 1002 	strd	r1, r0, [r2, #8]
    7bc4:	490f      	ldr	r1, [pc, #60]	; (7c04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    7bc6:	480e      	ldr	r0, [pc, #56]	; (7c00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    7bc8:	f7fc fae4 	bl	4194 <mpsl_fem_pa_configuration_set>
    7bcc:	2800      	cmp	r0, #0
    7bce:	d015      	beq.n	7bfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    7bd0:	1c40      	adds	r0, r0, #1
    7bd2:	d013      	beq.n	7bfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    7bd4:	f240 714f 	movw	r1, #1871	; 0x74f
    7bd8:	e00d      	b.n	7bf6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    7bda:	f101 0029 	add.w	r0, r1, #41	; 0x29
    7bde:	e9c2 1002 	strd	r1, r0, [r2, #8]
    7be2:	4908      	ldr	r1, [pc, #32]	; (7c04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    7be4:	4806      	ldr	r0, [pc, #24]	; (7c00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    7be6:	f7fc fac3 	bl	4170 <mpsl_fem_lna_configuration_set>
    7bea:	2800      	cmp	r0, #0
    7bec:	d006      	beq.n	7bfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    7bee:	1c40      	adds	r0, r0, #1
    7bf0:	d004      	beq.n	7bfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    7bf2:	f240 715c 	movw	r1, #1884	; 0x75c
    7bf6:	203e      	movs	r0, #62	; 0x3e
    7bf8:	f7fc fbfc 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bfc:	bd10      	pop	{r4, pc}
    7bfe:	0000      	.short	0x0000
    7c00:	20000150 	.word	0x20000150
    7c04:	00007d30 	.word	0x00007d30
    7c08:	4802      	ldr	r0, [pc, #8]	; (7c14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    7c0a:	2100      	movs	r1, #0
    7c0c:	71c1      	strb	r1, [r0, #7]
    7c0e:	7201      	strb	r1, [r0, #8]
    7c10:	7241      	strb	r1, [r0, #9]
    7c12:	4770      	bx	lr
    7c14:	20000dc0 	.word	0x20000dc0
    7c18:	4a05      	ldr	r2, [pc, #20]	; (7c30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d0>)
    7c1a:	79d2      	ldrb	r2, [r2, #7]
    7c1c:	2a01      	cmp	r2, #1
    7c1e:	d006      	beq.n	7c2e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ce>
    7c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7c24:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    7c28:	fbb1 f1f2 	udiv	r1, r1, r2
    7c2c:	1a40      	subs	r0, r0, r1
    7c2e:	4770      	bx	lr
    7c30:	20000dc0 	.word	0x20000dc0
    7c34:	b570      	push	{r4, r5, r6, lr}
    7c36:	4c13      	ldr	r4, [pc, #76]	; (7c84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x424>)
    7c38:	4603      	mov	r3, r0
    7c3a:	460d      	mov	r5, r1
    7c3c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    7c40:	2000      	movs	r0, #0
    7c42:	b15a      	cbz	r2, 7c5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fc>
    7c44:	4621      	mov	r1, r4
    7c46:	f891 1020 	ldrb.w	r1, [r1, #32]
    7c4a:	b163      	cbz	r3, 7c66 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    7c4c:	2b01      	cmp	r3, #1
    7c4e:	d111      	bne.n	7c74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>
    7c50:	2a01      	cmp	r2, #1
    7c52:	4628      	mov	r0, r5
    7c54:	d012      	beq.n	7c7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    7c56:	f002 ff6d 	bl	ab34 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    7c5a:	e009      	b.n	7c70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    7c5c:	f640 0153 	movw	r1, #2131	; 0x853
    7c60:	203e      	movs	r0, #62	; 0x3e
    7c62:	f7fc fbc7 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c66:	2a01      	cmp	r2, #1
    7c68:	4628      	mov	r0, r5
    7c6a:	d004      	beq.n	7c76 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x416>
    7c6c:	f002 ff70 	bl	ab50 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    7c70:	69e1      	ldr	r1, [r4, #28]
    7c72:	4408      	add	r0, r1
    7c74:	bd70      	pop	{r4, r5, r6, pc}
    7c76:	f000 f8d1 	bl	7e1c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    7c7a:	e7f9      	b.n	7c70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    7c7c:	f000 f8c0 	bl	7e00 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    7c80:	e7f6      	b.n	7c70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    7c82:	0000      	.short	0x0000
    7c84:	20000dc0 	.word	0x20000dc0
    7c88:	b510      	push	{r4, lr}
    7c8a:	f7ff fc0f 	bl	74ac <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    7c8e:	f7ff fded 	bl	786c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    7c92:	f7ff fe23 	bl	78dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    7c96:	f7ff ff53 	bl	7b40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    7c9a:	f000 fbfa 	bl	8492 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7c9e:	2800      	cmp	r0, #0
    7ca0:	d108      	bne.n	7cb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    7ca2:	f000 fbe6 	bl	8472 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7ca6:	2800      	cmp	r0, #0
    7ca8:	d104      	bne.n	7cb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    7caa:	4803      	ldr	r0, [pc, #12]	; (7cb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x458>)
    7cac:	6801      	ldr	r1, [r0, #0]
    7cae:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    7cb2:	6001      	str	r1, [r0, #0]
    7cb4:	bd10      	pop	{r4, pc}
    7cb6:	0000      	.short	0x0000
    7cb8:	40001568 	.word	0x40001568
    7cbc:	b510      	push	{r4, lr}
    7cbe:	4604      	mov	r4, r0
    7cc0:	f7ff fbf4 	bl	74ac <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    7cc4:	f7ff fdd2 	bl	786c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    7cc8:	4620      	mov	r0, r4
    7cca:	f7ff fded 	bl	78a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    7cce:	f000 fbe0 	bl	8492 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7cd2:	2800      	cmp	r0, #0
    7cd4:	d00d      	beq.n	7cf2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x492>
    7cd6:	4a09      	ldr	r2, [pc, #36]	; (7cfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49c>)
    7cd8:	6811      	ldr	r1, [r2, #0]
    7cda:	0650      	lsls	r0, r2, #25
    7cdc:	2c02      	cmp	r4, #2
    7cde:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    7ce2:	d007      	beq.n	7cf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    7ce4:	f3c0 2006 	ubfx	r0, r0, #8, #7
    7ce8:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    7cec:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    7cf0:	6010      	str	r0, [r2, #0]
    7cf2:	bd10      	pop	{r4, pc}
    7cf4:	f3c0 6006 	ubfx	r0, r0, #24, #7
    7cf8:	e7f6      	b.n	7ce8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    7cfa:	0000      	.short	0x0000
    7cfc:	40001588 	.word	0x40001588
    7d00:	a62c0000 	.word	0xa62c0000
    7d04:	0604a1e0 	.word	0x0604a1e0
    7d08:	0e0c0a08 	.word	0x0e0c0a08
    7d0c:	16141210 	.word	0x16141210
    7d10:	201e1c18 	.word	0x201e1c18
    7d14:	28262422 	.word	0x28262422
    7d18:	302e2c2a 	.word	0x302e2c2a
    7d1c:	38363432 	.word	0x38363432
    7d20:	403e3c3a 	.word	0x403e3c3a
    7d24:	48464442 	.word	0x48464442
    7d28:	024e4c4a 	.word	0x024e4c4a
    7d2c:	0000501a 	.word	0x0000501a
    7d30:	00000001 	.word	0x00000001
    7d34:	40001110 	.word	0x40001110
	...
    7d4c:	00001e14 	.word	0x00001e14
    7d50:	00001130 	.word	0x00001130
    7d54:	00000000 	.word	0x00000000
    7d58:	00000028 	.word	0x00000028
    7d5c:	00000018 	.word	0x00000018
    7d60:	00000000 	.word	0x00000000
    7d64:	00001e14 	.word	0x00001e14
    7d68:	00001130 	.word	0x00001130
    7d6c:	00000000 	.word	0x00000000
    7d70:	00001770 	.word	0x00001770
    7d74:	00000fa0 	.word	0x00000fa0

00007d78 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    7d78:	b570      	push	{r4, r5, r6, lr}
    7d7a:	4605      	mov	r5, r0
    7d7c:	4614      	mov	r4, r2
    7d7e:	4608      	mov	r0, r1
    7d80:	f7ff fbba 	bl	74f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7d84:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    7d88:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    7d8c:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    7d90:	4807      	ldr	r0, [pc, #28]	; (7db0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    7d92:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    7d96:	4408      	add	r0, r1
    7d98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7d9c:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    7da0:	fbb0 f5f1 	udiv	r5, r0, r1
    7da4:	4620      	mov	r0, r4
    7da6:	f7ff fb7b 	bl	74a0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7daa:	4428      	add	r0, r5
    7dac:	1d40      	adds	r0, r0, #5
    7dae:	bd70      	pop	{r4, r5, r6, pc}
    7db0:	00007e40 	.word	0x00007e40

00007db4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    7db4:	b570      	push	{r4, r5, r6, lr}
    7db6:	4d0e      	ldr	r5, [pc, #56]	; (7df0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    7db8:	461c      	mov	r4, r3
    7dba:	3d08      	subs	r5, #8
    7dbc:	4b0c      	ldr	r3, [pc, #48]	; (7df0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    7dbe:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    7dc2:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    7dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7dca:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    7dce:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    7dd2:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    7dd6:	4418      	add	r0, r3
    7dd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7ddc:	fbb0 f5f1 	udiv	r5, r0, r1
    7de0:	4610      	mov	r0, r2
    7de2:	f7ff fb5d 	bl	74a0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7de6:	4428      	add	r0, r5
    7de8:	4420      	add	r0, r4
    7dea:	1d40      	adds	r0, r0, #5
    7dec:	bd70      	pop	{r4, r5, r6, pc}
    7dee:	0000      	.short	0x0000
    7df0:	00007e40 	.word	0x00007e40

00007df4 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    7df4:	4901      	ldr	r1, [pc, #4]	; (7dfc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    7df6:	b2c0      	uxtb	r0, r0
    7df8:	6008      	str	r0, [r1, #0]
    7dfa:	4770      	bx	lr
    7dfc:	4000150c 	.word	0x4000150c

00007e00 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    7e00:	4a05      	ldr	r2, [pc, #20]	; (7e18 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    7e02:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    7e06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7e0a:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    7e0e:	fbb1 f1f2 	udiv	r1, r1, r2
    7e12:	4408      	add	r0, r1
    7e14:	1e80      	subs	r0, r0, #2
    7e16:	4770      	bx	lr
    7e18:	00007e38 	.word	0x00007e38

00007e1c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    7e1c:	4a05      	ldr	r2, [pc, #20]	; (7e34 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    7e1e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    7e22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7e26:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    7e2a:	fbb1 f1f2 	udiv	r1, r1, r2
    7e2e:	4408      	add	r0, r1
    7e30:	4770      	bx	lr
    7e32:	0000      	.short	0x0000
    7e34:	00007e38 	.word	0x00007e38
    7e38:	05dc0000 	.word	0x05dc0000
    7e3c:	000003e8 	.word	0x000003e8
    7e40:	00000000 	.word	0x00000000
    7e44:	00001e14 	.word	0x00001e14
    7e48:	00001130 	.word	0x00001130

00007e4c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    7e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7e50:	461e      	mov	r6, r3
    7e52:	4617      	mov	r7, r2
    7e54:	460c      	mov	r4, r1
    7e56:	4605      	mov	r5, r0
    7e58:	f7f8 fd36 	bl	8c8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    7e5c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 7f04 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    7e60:	4680      	mov	r8, r0
    7e62:	f899 0000 	ldrb.w	r0, [r9]
    7e66:	42a8      	cmp	r0, r5
    7e68:	d110      	bne.n	7e8c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    7e6a:	f899 1001 	ldrb.w	r1, [r9, #1]
    7e6e:	4648      	mov	r0, r9
    7e70:	42a1      	cmp	r1, r4
    7e72:	d10b      	bne.n	7e8c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    7e74:	f990 1002 	ldrsb.w	r1, [r0, #2]
    7e78:	42b9      	cmp	r1, r7
    7e7a:	d107      	bne.n	7e8c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    7e7c:	78c2      	ldrb	r2, [r0, #3]
    7e7e:	4542      	cmp	r2, r8
    7e80:	d104      	bne.n	7e8c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    7e82:	8881      	ldrh	r1, [r0, #4]
    7e84:	8031      	strh	r1, [r6, #0]
    7e86:	7980      	ldrb	r0, [r0, #6]
    7e88:	70b0      	strb	r0, [r6, #2]
    7e8a:	e036      	b.n	7efa <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xae>
    7e8c:	463a      	mov	r2, r7
    7e8e:	4621      	mov	r1, r4
    7e90:	2d01      	cmp	r5, #1
    7e92:	d009      	beq.n	7ea8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    7e94:	2d02      	cmp	r5, #2
    7e96:	d009      	beq.n	7eac <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    7e98:	2d04      	cmp	r5, #4
    7e9a:	d009      	beq.n	7eb0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    7e9c:	2d08      	cmp	r5, #8
    7e9e:	d009      	beq.n	7eb4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    7ea0:	f240 415a 	movw	r1, #1114	; 0x45a
    7ea4:	2006      	movs	r0, #6
    7ea6:	e00c      	b.n	7ec2 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    7ea8:	2000      	movs	r0, #0
    7eaa:	e004      	b.n	7eb6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    7eac:	2001      	movs	r0, #1
    7eae:	e002      	b.n	7eb6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    7eb0:	2003      	movs	r0, #3
    7eb2:	e000      	b.n	7eb6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    7eb4:	2002      	movs	r0, #2
    7eb6:	466b      	mov	r3, sp
    7eb8:	f7f8 fd56 	bl	968 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    7ebc:	b118      	cbz	r0, 7ec6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    7ebe:	213d      	movs	r1, #61	; 0x3d
    7ec0:	2075      	movs	r0, #117	; 0x75
    7ec2:	f7fc fa97 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ec6:	4620      	mov	r0, r4
    7ec8:	f7ff f8da 	bl	7080 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    7ecc:	4602      	mov	r2, r0
    7ece:	4631      	mov	r1, r6
    7ed0:	f99d 0000 	ldrsb.w	r0, [sp]
    7ed4:	f7fc f970 	bl	41b8 <mpsl_fem_tx_power_split>
    7ed8:	4601      	mov	r1, r0
    7eda:	f889 1007 	strb.w	r1, [r9, #7]
    7ede:	8831      	ldrh	r1, [r6, #0]
    7ee0:	f8a9 1004 	strh.w	r1, [r9, #4]
    7ee4:	78b1      	ldrb	r1, [r6, #2]
    7ee6:	f889 1006 	strb.w	r1, [r9, #6]
    7eea:	f889 5000 	strb.w	r5, [r9]
    7eee:	f889 4001 	strb.w	r4, [r9, #1]
    7ef2:	f889 7002 	strb.w	r7, [r9, #2]
    7ef6:	f889 8003 	strb.w	r8, [r9, #3]
    7efa:	f999 0007 	ldrsb.w	r0, [r9, #7]
    7efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7f02:	0000      	.short	0x0000
    7f04:	20000196 	.word	0x20000196

00007f08 <__udivmoddi4>:
    7f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f0c:	4686      	mov	lr, r0
    7f0e:	468c      	mov	ip, r1
    7f10:	4608      	mov	r0, r1
    7f12:	9e08      	ldr	r6, [sp, #32]
    7f14:	4615      	mov	r5, r2
    7f16:	4674      	mov	r4, lr
    7f18:	4619      	mov	r1, r3
    7f1a:	2b00      	cmp	r3, #0
    7f1c:	f040 80c2 	bne.w	80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>
    7f20:	4285      	cmp	r5, r0
    7f22:	fab2 f282 	clz	r2, r2
    7f26:	d945      	bls.n	7fb4 <__udivmoddi4+0xac>
    7f28:	b14a      	cbz	r2, 7f3e <__udivmoddi4+0x36>
    7f2a:	f1c2 0320 	rsb	r3, r2, #32
    7f2e:	fa00 fc02 	lsl.w	ip, r0, r2
    7f32:	fa2e f303 	lsr.w	r3, lr, r3
    7f36:	4095      	lsls	r5, r2
    7f38:	ea43 0c0c 	orr.w	ip, r3, ip
    7f3c:	4094      	lsls	r4, r2
    7f3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7f42:	b2a8      	uxth	r0, r5
    7f44:	fbbc f8fe 	udiv	r8, ip, lr
    7f48:	0c23      	lsrs	r3, r4, #16
    7f4a:	fb0e cc18 	mls	ip, lr, r8, ip
    7f4e:	fb08 f900 	mul.w	r9, r8, r0
    7f52:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    7f56:	4599      	cmp	r9, r3
    7f58:	d928      	bls.n	7fac <__udivmoddi4+0xa4>
    7f5a:	18eb      	adds	r3, r5, r3
    7f5c:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    7f60:	d204      	bcs.n	7f6c <__udivmoddi4+0x64>
    7f62:	4599      	cmp	r9, r3
    7f64:	d902      	bls.n	7f6c <__udivmoddi4+0x64>
    7f66:	f1a8 0702 	sub.w	r7, r8, #2
    7f6a:	442b      	add	r3, r5
    7f6c:	eba3 0309 	sub.w	r3, r3, r9
    7f70:	b2a4      	uxth	r4, r4
    7f72:	fbb3 fcfe 	udiv	ip, r3, lr
    7f76:	fb0e 331c 	mls	r3, lr, ip, r3
    7f7a:	fb0c f000 	mul.w	r0, ip, r0
    7f7e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    7f82:	42a0      	cmp	r0, r4
    7f84:	d914      	bls.n	7fb0 <__udivmoddi4+0xa8>
    7f86:	192c      	adds	r4, r5, r4
    7f88:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    7f8c:	d204      	bcs.n	7f98 <__udivmoddi4+0x90>
    7f8e:	42a0      	cmp	r0, r4
    7f90:	d902      	bls.n	7f98 <__udivmoddi4+0x90>
    7f92:	f1ac 0302 	sub.w	r3, ip, #2
    7f96:	442c      	add	r4, r5
    7f98:	1a24      	subs	r4, r4, r0
    7f9a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    7f9e:	b11e      	cbz	r6, 7fa8 <__udivmoddi4+0xa0>
    7fa0:	40d4      	lsrs	r4, r2
    7fa2:	2300      	movs	r3, #0
    7fa4:	6034      	str	r4, [r6, #0]
    7fa6:	6073      	str	r3, [r6, #4]
    7fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fac:	4647      	mov	r7, r8
    7fae:	e7dd      	b.n	7f6c <__udivmoddi4+0x64>
    7fb0:	4663      	mov	r3, ip
    7fb2:	e7f1      	b.n	7f98 <__udivmoddi4+0x90>
    7fb4:	bb92      	cbnz	r2, 801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>
    7fb6:	1b43      	subs	r3, r0, r5
    7fb8:	2101      	movs	r1, #1
    7fba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7fbe:	b2af      	uxth	r7, r5
    7fc0:	fbb3 fcfe 	udiv	ip, r3, lr
    7fc4:	0c20      	lsrs	r0, r4, #16
    7fc6:	fb0e 331c 	mls	r3, lr, ip, r3
    7fca:	fb0c f807 	mul.w	r8, ip, r7
    7fce:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    7fd2:	4598      	cmp	r8, r3
    7fd4:	d962      	bls.n	809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>
    7fd6:	18eb      	adds	r3, r5, r3
    7fd8:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    7fdc:	d204      	bcs.n	7fe8 <__udivmoddi4+0xe0>
    7fde:	4598      	cmp	r8, r3
    7fe0:	d902      	bls.n	7fe8 <__udivmoddi4+0xe0>
    7fe2:	f1ac 0002 	sub.w	r0, ip, #2
    7fe6:	442b      	add	r3, r5
    7fe8:	eba3 0308 	sub.w	r3, r3, r8
    7fec:	b2a4      	uxth	r4, r4
    7fee:	fbb3 fcfe 	udiv	ip, r3, lr
    7ff2:	fb0e 331c 	mls	r3, lr, ip, r3
    7ff6:	fb0c f707 	mul.w	r7, ip, r7
    7ffa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    7ffe:	42a7      	cmp	r7, r4
    8000:	d94e      	bls.n	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
    8002:	192c      	adds	r4, r5, r4
    8004:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    8008:	d204      	bcs.n	8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>
    800a:	42a7      	cmp	r7, r4
    800c:	d902      	bls.n	8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>
    800e:	f1ac 0302 	sub.w	r3, ip, #2
    8012:	442c      	add	r4, r5
    8014:	1be4      	subs	r4, r4, r7
    8016:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    801a:	e7c0      	b.n	7f9e <__udivmoddi4+0x96>
    801c:	f1c2 0320 	rsb	r3, r2, #32
    8020:	fa20 f103 	lsr.w	r1, r0, r3
    8024:	4095      	lsls	r5, r2
    8026:	4090      	lsls	r0, r2
    8028:	fa2e f303 	lsr.w	r3, lr, r3
    802c:	4303      	orrs	r3, r0
    802e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8032:	b2af      	uxth	r7, r5
    8034:	fbb1 fcfe 	udiv	ip, r1, lr
    8038:	fb0e 101c 	mls	r0, lr, ip, r1
    803c:	0c19      	lsrs	r1, r3, #16
    803e:	fb0c f807 	mul.w	r8, ip, r7
    8042:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8046:	4588      	cmp	r8, r1
    8048:	fa04 f402 	lsl.w	r4, r4, r2
    804c:	d922      	bls.n	8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>
    804e:	1869      	adds	r1, r5, r1
    8050:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    8054:	d204      	bcs.n	8060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60>
    8056:	4588      	cmp	r8, r1
    8058:	d902      	bls.n	8060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60>
    805a:	f1ac 0002 	sub.w	r0, ip, #2
    805e:	4429      	add	r1, r5
    8060:	eba1 0108 	sub.w	r1, r1, r8
    8064:	b29b      	uxth	r3, r3
    8066:	fbb1 fcfe 	udiv	ip, r1, lr
    806a:	fb0e 111c 	mls	r1, lr, ip, r1
    806e:	fb0c f707 	mul.w	r7, ip, r7
    8072:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    8076:	429f      	cmp	r7, r3
    8078:	d90e      	bls.n	8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>
    807a:	18eb      	adds	r3, r5, r3
    807c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    8080:	d204      	bcs.n	808c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c>
    8082:	429f      	cmp	r7, r3
    8084:	d902      	bls.n	808c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c>
    8086:	f1ac 0102 	sub.w	r1, ip, #2
    808a:	442b      	add	r3, r5
    808c:	1bdb      	subs	r3, r3, r7
    808e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8092:	e792      	b.n	7fba <__udivmoddi4+0xb2>
    8094:	4660      	mov	r0, ip
    8096:	e7e3      	b.n	8060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60>
    8098:	4661      	mov	r1, ip
    809a:	e7f7      	b.n	808c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c>
    809c:	4660      	mov	r0, ip
    809e:	e7a3      	b.n	7fe8 <__udivmoddi4+0xe0>
    80a0:	4663      	mov	r3, ip
    80a2:	e7b7      	b.n	8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>
    80a4:	4283      	cmp	r3, r0
    80a6:	d906      	bls.n	80b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb6>
    80a8:	b916      	cbnz	r6, 80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>
    80aa:	2100      	movs	r1, #0
    80ac:	4608      	mov	r0, r1
    80ae:	e77b      	b.n	7fa8 <__udivmoddi4+0xa0>
    80b0:	e9c6 e000 	strd	lr, r0, [r6]
    80b4:	e7f9      	b.n	80aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaa>
    80b6:	fab3 f783 	clz	r7, r3
    80ba:	b98f      	cbnz	r7, 80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>
    80bc:	4283      	cmp	r3, r0
    80be:	d301      	bcc.n	80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>
    80c0:	4572      	cmp	r2, lr
    80c2:	d808      	bhi.n	80d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd6>
    80c4:	ebbe 0402 	subs.w	r4, lr, r2
    80c8:	eb60 0303 	sbc.w	r3, r0, r3
    80cc:	2001      	movs	r0, #1
    80ce:	469c      	mov	ip, r3
    80d0:	b91e      	cbnz	r6, 80da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xda>
    80d2:	2100      	movs	r1, #0
    80d4:	e768      	b.n	7fa8 <__udivmoddi4+0xa0>
    80d6:	4638      	mov	r0, r7
    80d8:	e7fa      	b.n	80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>
    80da:	e9c6 4c00 	strd	r4, ip, [r6]
    80de:	e7f8      	b.n	80d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd2>
    80e0:	f1c7 0c20 	rsb	ip, r7, #32
    80e4:	40bb      	lsls	r3, r7
    80e6:	fa22 f40c 	lsr.w	r4, r2, ip
    80ea:	431c      	orrs	r4, r3
    80ec:	fa2e f10c 	lsr.w	r1, lr, ip
    80f0:	fa20 f30c 	lsr.w	r3, r0, ip
    80f4:	40b8      	lsls	r0, r7
    80f6:	4301      	orrs	r1, r0
    80f8:	ea4f 4914 	mov.w	r9, r4, lsr #16
    80fc:	fa0e f507 	lsl.w	r5, lr, r7
    8100:	fbb3 f8f9 	udiv	r8, r3, r9
    8104:	fa1f fe84 	uxth.w	lr, r4
    8108:	fb09 3018 	mls	r0, r9, r8, r3
    810c:	0c0b      	lsrs	r3, r1, #16
    810e:	fb08 fa0e 	mul.w	sl, r8, lr
    8112:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8116:	459a      	cmp	sl, r3
    8118:	fa02 f207 	lsl.w	r2, r2, r7
    811c:	d940      	bls.n	81a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a0>
    811e:	18e3      	adds	r3, r4, r3
    8120:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    8124:	d204      	bcs.n	8130 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x130>
    8126:	459a      	cmp	sl, r3
    8128:	d902      	bls.n	8130 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x130>
    812a:	f1a8 0002 	sub.w	r0, r8, #2
    812e:	4423      	add	r3, r4
    8130:	eba3 030a 	sub.w	r3, r3, sl
    8134:	b289      	uxth	r1, r1
    8136:	fbb3 f8f9 	udiv	r8, r3, r9
    813a:	fb09 3318 	mls	r3, r9, r8, r3
    813e:	fb08 fe0e 	mul.w	lr, r8, lr
    8142:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    8146:	458e      	cmp	lr, r1
    8148:	d92c      	bls.n	81a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a4>
    814a:	1861      	adds	r1, r4, r1
    814c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    8150:	d204      	bcs.n	815c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15c>
    8152:	458e      	cmp	lr, r1
    8154:	d902      	bls.n	815c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15c>
    8156:	f1a8 0302 	sub.w	r3, r8, #2
    815a:	4421      	add	r1, r4
    815c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8160:	fba0 9802 	umull	r9, r8, r0, r2
    8164:	eba1 010e 	sub.w	r1, r1, lr
    8168:	4541      	cmp	r1, r8
    816a:	46ce      	mov	lr, r9
    816c:	4643      	mov	r3, r8
    816e:	d302      	bcc.n	8176 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x176>
    8170:	d106      	bne.n	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
    8172:	454d      	cmp	r5, r9
    8174:	d204      	bcs.n	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
    8176:	ebb9 0e02 	subs.w	lr, r9, r2
    817a:	eb68 0304 	sbc.w	r3, r8, r4
    817e:	3801      	subs	r0, #1
    8180:	2e00      	cmp	r6, #0
    8182:	d0a6      	beq.n	80d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd2>
    8184:	ebb5 020e 	subs.w	r2, r5, lr
    8188:	eb61 0103 	sbc.w	r1, r1, r3
    818c:	fa01 fc0c 	lsl.w	ip, r1, ip
    8190:	fa22 f307 	lsr.w	r3, r2, r7
    8194:	ea4c 0303 	orr.w	r3, ip, r3
    8198:	40f9      	lsrs	r1, r7
    819a:	e9c6 3100 	strd	r3, r1, [r6]
    819e:	e798      	b.n	80d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd2>
    81a0:	4640      	mov	r0, r8
    81a2:	e7c5      	b.n	8130 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x130>
    81a4:	4643      	mov	r3, r8
    81a6:	e7d9      	b.n	815c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15c>

000081a8 <strlen>:
    81a8:	4603      	mov	r3, r0
    81aa:	f813 2b01 	ldrb.w	r2, [r3], #1
    81ae:	2a00      	cmp	r2, #0
    81b0:	d1fb      	bne.n	81aa <strlen+0x2>
    81b2:	1a18      	subs	r0, r3, r0
    81b4:	3801      	subs	r0, #1
    81b6:	4770      	bx	lr
    81b8:	2804      	cmp	r0, #4
    81ba:	d202      	bcs.n	81c2 <strlen+0x1a>
    81bc:	f04f 0028 	mov.w	r0, #40	; 0x28
    81c0:	4770      	bx	lr
    81c2:	d102      	bne.n	81ca <strlen+0x22>
    81c4:	f04f 0010 	mov.w	r0, #16
    81c8:	4770      	bx	lr
    81ca:	f04f 0000 	mov.w	r0, #0
    81ce:	4770      	bx	lr
    81d0:	2100      	movs	r1, #0
    81d2:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    81d6:	f800 1f24 	strb.w	r1, [r0, #36]!
    81da:	7041      	strb	r1, [r0, #1]
    81dc:	4770      	bx	lr

000081de <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    81de:	b570      	push	{r4, r5, r6, lr}
    81e0:	f7f8 fbe2 	bl	9a8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    81e4:	4605      	mov	r5, r0
    81e6:	2400      	movs	r4, #0
    81e8:	e006      	b.n	81f8 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    81ea:	4620      	mov	r0, r4
    81ec:	f7f8 fbe2 	bl	9b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    81f0:	f7ff ffee 	bl	81d0 <strlen+0x28>
    81f4:	1c64      	adds	r4, r4, #1
    81f6:	b2e4      	uxtb	r4, r4
    81f8:	42ac      	cmp	r4, r5
    81fa:	d3f6      	bcc.n	81ea <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    81fc:	bd70      	pop	{r4, r5, r6, pc}

000081fe <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    81fe:	f7fa bf1b 	b.w	3038 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00008202 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    8202:	b510      	push	{r4, lr}
    8204:	2000      	movs	r0, #0
    8206:	f7fb fa3d 	bl	3684 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    820a:	6800      	ldr	r0, [r0, #0]
    820c:	2800      	cmp	r0, #0
    820e:	bf18      	it	ne
    8210:	2001      	movne	r0, #1
    8212:	bd10      	pop	{r4, pc}

00008214 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    8214:	b510      	push	{r4, lr}
    8216:	f7fb fab5 	bl	3784 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    821a:	f7fa fd87 	bl	2d2c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    821e:	f000 f802 	bl	8226 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    8222:	b280      	uxth	r0, r0
    8224:	bd10      	pop	{r4, pc}

00008226 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    8226:	0a41      	lsrs	r1, r0, #9
    8228:	f643 5209 	movw	r2, #15625	; 0x3d09
    822c:	4351      	muls	r1, r2
    822e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    8232:	fb10 f002 	smulbb	r0, r0, r2
    8236:	f500 7080 	add.w	r0, r0, #256	; 0x100
    823a:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    823e:	4770      	bx	lr
    8240:	2800      	cmp	r0, #0
    8242:	db09      	blt.n	8258 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    8244:	f000 021f 	and.w	r2, r0, #31
    8248:	2101      	movs	r1, #1
    824a:	4091      	lsls	r1, r2
    824c:	0940      	lsrs	r0, r0, #5
    824e:	0080      	lsls	r0, r0, #2
    8250:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8254:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8258:	4770      	bx	lr
    825a:	2800      	cmp	r0, #0
    825c:	db0d      	blt.n	827a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    825e:	f000 021f 	and.w	r2, r0, #31
    8262:	2101      	movs	r1, #1
    8264:	4091      	lsls	r1, r2
    8266:	0940      	lsrs	r0, r0, #5
    8268:	0080      	lsls	r0, r0, #2
    826a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    826e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    8272:	f3bf 8f4f 	dsb	sy
    8276:	f3bf 8f6f 	isb	sy
    827a:	4770      	bx	lr

0000827c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    827c:	b570      	push	{r4, r5, r6, lr}
    827e:	4602      	mov	r2, r0
    8280:	2000      	movs	r0, #0
    8282:	2900      	cmp	r1, #0
    8284:	d01d      	beq.n	82c2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    8286:	fba2 0101 	umull	r0, r1, r2, r1
    828a:	0a40      	lsrs	r0, r0, #9
    828c:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    8290:	0a49      	lsrs	r1, r1, #9
    8292:	1c40      	adds	r0, r0, #1
    8294:	f141 0100 	adc.w	r1, r1, #0
    8298:	f240 72a1 	movw	r2, #1953	; 0x7a1
    829c:	1883      	adds	r3, r0, r2
    829e:	f141 0100 	adc.w	r1, r1, #0
    82a2:	1c5b      	adds	r3, r3, #1
    82a4:	f141 0400 	adc.w	r4, r1, #0
    82a8:	2100      	movs	r1, #0
    82aa:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    82ae:	41a1      	sbcs	r1, r4
    82b0:	d203      	bcs.n	82ba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    82b2:	2172      	movs	r1, #114	; 0x72
    82b4:	206d      	movs	r0, #109	; 0x6d
    82b6:	f7fb fdbf 	bl	3e38 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    82ba:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    82be:	fbb0 f0f2 	udiv	r0, r0, r2
    82c2:	bd70      	pop	{r4, r5, r6, pc}
    82c4:	5840      	ldr	r0, [r0, r1]
    82c6:	2800      	cmp	r0, #0
    82c8:	d000      	beq.n	82cc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    82ca:	2001      	movs	r0, #1
    82cc:	4770      	bx	lr
    82ce:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    82d2:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    82d6:	f002 0201 	and.w	r2, r2, #1
    82da:	03c0      	lsls	r0, r0, #15
    82dc:	d503      	bpl.n	82e6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    82de:	428a      	cmp	r2, r1
    82e0:	d101      	bne.n	82e6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    82e2:	2001      	movs	r0, #1
    82e4:	4770      	bx	lr
    82e6:	2000      	movs	r0, #0
    82e8:	4770      	bx	lr

000082ea <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    82ea:	b510      	push	{r4, lr}
    82ec:	2101      	movs	r1, #1
    82ee:	0788      	lsls	r0, r1, #30
    82f0:	f7fb fd4c 	bl	3d8c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    82f4:	2800      	cmp	r0, #0
    82f6:	d000      	beq.n	82fa <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    82f8:	2001      	movs	r0, #1
    82fa:	bd10      	pop	{r4, pc}

000082fc <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    82fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8300:	2101      	movs	r1, #1
    8302:	6001      	str	r1, [r0, #0]
    8304:	4770      	bx	lr

00008306 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    8306:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    830a:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    830e:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    8312:	f002 0203 	and.w	r2, r2, #3
    8316:	03c9      	lsls	r1, r1, #15
    8318:	d503      	bpl.n	8322 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    831a:	4282      	cmp	r2, r0
    831c:	d101      	bne.n	8322 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    831e:	2001      	movs	r0, #1
    8320:	4770      	bx	lr
    8322:	2000      	movs	r0, #0
    8324:	4770      	bx	lr

00008326 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    8326:	b510      	push	{r4, lr}
    8328:	2100      	movs	r1, #0
    832a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    832e:	f7fb fd2d 	bl	3d8c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    8332:	2800      	cmp	r0, #0
    8334:	d000      	beq.n	8338 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    8336:	2001      	movs	r0, #1
    8338:	bd10      	pop	{r4, pc}
    833a:	2800      	cmp	r0, #0
    833c:	db09      	blt.n	8352 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    833e:	f000 021f 	and.w	r2, r0, #31
    8342:	2101      	movs	r1, #1
    8344:	4091      	lsls	r1, r2
    8346:	0940      	lsrs	r0, r0, #5
    8348:	0080      	lsls	r0, r0, #2
    834a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    834e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8352:	4770      	bx	lr
    8354:	2800      	cmp	r0, #0
    8356:	db0d      	blt.n	8374 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    8358:	f000 021f 	and.w	r2, r0, #31
    835c:	2101      	movs	r1, #1
    835e:	4091      	lsls	r1, r2
    8360:	0940      	lsrs	r0, r0, #5
    8362:	0080      	lsls	r0, r0, #2
    8364:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8368:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    836c:	f3bf 8f4f 	dsb	sy
    8370:	f3bf 8f6f 	isb	sy
    8374:	4770      	bx	lr
    8376:	1000      	.short	0x1000
    8378:	00fa0002 	.word	0x00fa0002
    837c:	edb80000 	.word	0xedb80000
    8380:	0ef2aa4d 	.word	0x0ef2aa4d
    8384:	b5ea3202 	.word	0xb5ea3202
    8388:	d1502fde 	.word	0xd1502fde
    838c:	d2b55ab7 	.word	0xd2b55ab7
    8390:	41c7      	.short	0x41c7
    8392:	2800      	cmp	r0, #0
    8394:	db09      	blt.n	83aa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    8396:	f000 021f 	and.w	r2, r0, #31
    839a:	2101      	movs	r1, #1
    839c:	4091      	lsls	r1, r2
    839e:	0940      	lsrs	r0, r0, #5
    83a0:	0080      	lsls	r0, r0, #2
    83a2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    83a6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    83aa:	4770      	bx	lr

000083ac <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    83ac:	f3ef 8110 	mrs	r1, PRIMASK
    83b0:	b672      	cpsid	i
    83b2:	7802      	ldrb	r2, [r0, #0]
    83b4:	2a01      	cmp	r2, #1
    83b6:	d001      	beq.n	83bc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    83b8:	2201      	movs	r2, #1
    83ba:	e000      	b.n	83be <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    83bc:	2200      	movs	r2, #0
    83be:	2301      	movs	r3, #1
    83c0:	7003      	strb	r3, [r0, #0]
    83c2:	b901      	cbnz	r1, 83c6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    83c4:	b662      	cpsie	i
    83c6:	b10a      	cbz	r2, 83cc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    83c8:	2000      	movs	r0, #0
    83ca:	4770      	bx	lr
    83cc:	f06f 0022 	mvn.w	r0, #34	; 0x22
    83d0:	4770      	bx	lr

000083d2 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    83d2:	2100      	movs	r1, #0
    83d4:	7001      	strb	r1, [r0, #0]
    83d6:	4608      	mov	r0, r1
    83d8:	4770      	bx	lr

000083da <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    83da:	f3ef 8110 	mrs	r1, PRIMASK
    83de:	b672      	cpsid	i
    83e0:	2200      	movs	r2, #0
    83e2:	7002      	strb	r2, [r0, #0]
    83e4:	b901      	cbnz	r1, 83e8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    83e6:	b662      	cpsie	i
    83e8:	2000      	movs	r0, #0
    83ea:	4770      	bx	lr

000083ec <mpsl_low_priority_process>:
    83ec:	f7fb be24 	b.w	4038 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

000083f0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    83f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    83f4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    83f8:	280f      	cmp	r0, #15
    83fa:	d001      	beq.n	8400 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    83fc:	2000      	movs	r0, #0
    83fe:	4770      	bx	lr
    8400:	2001      	movs	r0, #1
    8402:	4770      	bx	lr

00008404 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    8404:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8408:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    840c:	280a      	cmp	r0, #10
    840e:	d001      	beq.n	8414 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    8410:	2000      	movs	r0, #0
    8412:	4770      	bx	lr
    8414:	2001      	movs	r0, #1
    8416:	4770      	bx	lr

00008418 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    8418:	b500      	push	{lr}
    841a:	f7ff fff3 	bl	8404 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    841e:	b120      	cbz	r0, 842a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    8420:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8424:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    8428:	b108      	cbz	r0, 842e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    842a:	2000      	movs	r0, #0
    842c:	bd00      	pop	{pc}
    842e:	2001      	movs	r0, #1
    8430:	bd00      	pop	{pc}

00008432 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    8432:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8436:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    843a:	280e      	cmp	r0, #14
    843c:	d001      	beq.n	8442 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    843e:	2000      	movs	r0, #0
    8440:	4770      	bx	lr
    8442:	2001      	movs	r0, #1
    8444:	4770      	bx	lr

00008446 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    8446:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    844a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    844e:	2810      	cmp	r0, #16
    8450:	d001      	beq.n	8456 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    8452:	2000      	movs	r0, #0
    8454:	4770      	bx	lr
    8456:	2001      	movs	r0, #1
    8458:	4770      	bx	lr

0000845a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    845a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    845e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    8462:	2806      	cmp	r0, #6
    8464:	d003      	beq.n	846e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    8466:	1c40      	adds	r0, r0, #1
    8468:	d001      	beq.n	846e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    846a:	2000      	movs	r0, #0
    846c:	4770      	bx	lr
    846e:	2001      	movs	r0, #1
    8470:	4770      	bx	lr

00008472 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    8472:	b500      	push	{lr}
    8474:	f7ff fff1 	bl	845a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8478:	b148      	cbz	r0, 848e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    847a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    847e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    8482:	2806      	cmp	r0, #6
    8484:	d303      	bcc.n	848e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    8486:	1c40      	adds	r0, r0, #1
    8488:	d001      	beq.n	848e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    848a:	2001      	movs	r0, #1
    848c:	bd00      	pop	{pc}
    848e:	2000      	movs	r0, #0
    8490:	bd00      	pop	{pc}

00008492 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    8492:	b500      	push	{lr}
    8494:	f7ff ffe1 	bl	845a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8498:	b138      	cbz	r0, 84aa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    849a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    849e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    84a2:	2806      	cmp	r0, #6
    84a4:	d303      	bcc.n	84ae <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    84a6:	1c40      	adds	r0, r0, #1
    84a8:	d001      	beq.n	84ae <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    84aa:	2000      	movs	r0, #0
    84ac:	bd00      	pop	{pc}
    84ae:	2001      	movs	r0, #1
    84b0:	bd00      	pop	{pc}

000084b2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    84b2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    84b6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    84ba:	280d      	cmp	r0, #13
    84bc:	d001      	beq.n	84c2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    84be:	2000      	movs	r0, #0
    84c0:	4770      	bx	lr
    84c2:	2001      	movs	r0, #1
    84c4:	4770      	bx	lr

000084c6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    84c6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    84ca:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    84ce:	2808      	cmp	r0, #8
    84d0:	d001      	beq.n	84d6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    84d2:	2000      	movs	r0, #0
    84d4:	4770      	bx	lr
    84d6:	2001      	movs	r0, #1
    84d8:	4770      	bx	lr

000084da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    84da:	b4f0      	push	{r4, r5, r6, r7}
    84dc:	ea80 0c01 	eor.w	ip, r0, r1
    84e0:	4603      	mov	r3, r0
    84e2:	f01c 0f03 	tst.w	ip, #3
    84e6:	d13c      	bne.n	8562 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    84e8:	f013 0f03 	tst.w	r3, #3
    84ec:	d00b      	beq.n	8506 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    84ee:	2a00      	cmp	r2, #0
    84f0:	bf04      	itt	eq
    84f2:	bcf0      	popeq	{r4, r5, r6, r7}
    84f4:	4770      	bxeq	lr
    84f6:	f811 cb01 	ldrb.w	ip, [r1], #1
    84fa:	f803 cb01 	strb.w	ip, [r3], #1
    84fe:	1e52      	subs	r2, r2, #1
    8500:	f013 0f03 	tst.w	r3, #3
    8504:	d1f3      	bne.n	84ee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    8506:	2a03      	cmp	r2, #3
    8508:	d94f      	bls.n	85aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    850a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    850e:	d24c      	bcs.n	85aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    8510:	f1c2 0c00 	rsb	ip, r2, #0
    8514:	ea4f 74ec 	mov.w	r4, ip, asr #31
    8518:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    851c:	ea4f 0cac 	mov.w	ip, ip, asr #2
    8520:	f1cc 0c00 	rsb	ip, ip, #0
    8524:	f1bc 0f00 	cmp.w	ip, #0
    8528:	dd1b      	ble.n	8562 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    852a:	1f0d      	subs	r5, r1, #4
    852c:	1f1c      	subs	r4, r3, #4
    852e:	f01c 0f01 	tst.w	ip, #1
    8532:	d003      	beq.n	853c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    8534:	f855 6f04 	ldr.w	r6, [r5, #4]!
    8538:	f844 6f04 	str.w	r6, [r4, #4]!
    853c:	ea5f 066c 	movs.w	r6, ip, asr #1
    8540:	d007      	beq.n	8552 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    8542:	686f      	ldr	r7, [r5, #4]
    8544:	6067      	str	r7, [r4, #4]
    8546:	f855 7f08 	ldr.w	r7, [r5, #8]!
    854a:	f844 7f08 	str.w	r7, [r4, #8]!
    854e:	1e76      	subs	r6, r6, #1
    8550:	d1f7      	bne.n	8542 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    8552:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    8556:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    855a:	f1cc 0c00 	rsb	ip, ip, #0
    855e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    8562:	2a00      	cmp	r2, #0
    8564:	bf04      	itt	eq
    8566:	bcf0      	popeq	{r4, r5, r6, r7}
    8568:	4770      	bxeq	lr
    856a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    856e:	d226      	bcs.n	85be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    8570:	2a00      	cmp	r2, #0
    8572:	bfdc      	itt	le
    8574:	bcf0      	pople	{r4, r5, r6, r7}
    8576:	4770      	bxle	lr
    8578:	1e49      	subs	r1, r1, #1
    857a:	1e5b      	subs	r3, r3, #1
    857c:	f012 0f01 	tst.w	r2, #1
    8580:	d003      	beq.n	858a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    8582:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    8586:	f803 cf01 	strb.w	ip, [r3, #1]!
    858a:	1052      	asrs	r2, r2, #1
    858c:	bf04      	itt	eq
    858e:	bcf0      	popeq	{r4, r5, r6, r7}
    8590:	4770      	bxeq	lr
    8592:	f891 c001 	ldrb.w	ip, [r1, #1]
    8596:	f883 c001 	strb.w	ip, [r3, #1]
    859a:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    859e:	f803 cf02 	strb.w	ip, [r3, #2]!
    85a2:	1e52      	subs	r2, r2, #1
    85a4:	d1f5      	bne.n	8592 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    85a6:	bcf0      	pop	{r4, r5, r6, r7}
    85a8:	4770      	bx	lr
    85aa:	2a04      	cmp	r2, #4
    85ac:	d3d9      	bcc.n	8562 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    85ae:	f851 cb04 	ldr.w	ip, [r1], #4
    85b2:	1f12      	subs	r2, r2, #4
    85b4:	f843 cb04 	str.w	ip, [r3], #4
    85b8:	2a04      	cmp	r2, #4
    85ba:	d2f8      	bcs.n	85ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    85bc:	e7d1      	b.n	8562 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    85be:	f811 cb01 	ldrb.w	ip, [r1], #1
    85c2:	f803 cb01 	strb.w	ip, [r3], #1
    85c6:	1e52      	subs	r2, r2, #1
    85c8:	d1f9      	bne.n	85be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    85ca:	bcf0      	pop	{r4, r5, r6, r7}
    85cc:	4770      	bx	lr

000085ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    85ce:	b470      	push	{r4, r5, r6}
    85d0:	4603      	mov	r3, r0
    85d2:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    85d6:	f010 0f03 	tst.w	r0, #3
    85da:	d009      	beq.n	85f0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    85dc:	2a00      	cmp	r2, #0
    85de:	bf04      	itt	eq
    85e0:	bc70      	popeq	{r4, r5, r6}
    85e2:	4770      	bxeq	lr
    85e4:	f803 cb01 	strb.w	ip, [r3], #1
    85e8:	1e52      	subs	r2, r2, #1
    85ea:	f013 0f03 	tst.w	r3, #3
    85ee:	d1f5      	bne.n	85dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    85f0:	b2c9      	uxtb	r1, r1
    85f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    85f6:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    85fa:	2a03      	cmp	r2, #3
    85fc:	d939      	bls.n	8672 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    85fe:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8602:	d236      	bcs.n	8672 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    8604:	4251      	negs	r1, r2
    8606:	17cc      	asrs	r4, r1, #31
    8608:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    860c:	1089      	asrs	r1, r1, #2
    860e:	424e      	negs	r6, r1
    8610:	2e00      	cmp	r6, #0
    8612:	dd11      	ble.n	8638 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    8614:	1f19      	subs	r1, r3, #4
    8616:	f016 0f01 	tst.w	r6, #1
    861a:	bf18      	it	ne
    861c:	f841 5f04 	strne.w	r5, [r1, #4]!
    8620:	1074      	asrs	r4, r6, #1
    8622:	d004      	beq.n	862e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    8624:	604d      	str	r5, [r1, #4]
    8626:	f841 5f08 	str.w	r5, [r1, #8]!
    862a:	1e64      	subs	r4, r4, #1
    862c:	d1fa      	bne.n	8624 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    862e:	4271      	negs	r1, r6
    8630:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    8634:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    8638:	2a00      	cmp	r2, #0
    863a:	bf04      	itt	eq
    863c:	bc70      	popeq	{r4, r5, r6}
    863e:	4770      	bxeq	lr
    8640:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8644:	d21d      	bcs.n	8682 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    8646:	2a00      	cmp	r2, #0
    8648:	bfdc      	itt	le
    864a:	bc70      	pople	{r4, r5, r6}
    864c:	4770      	bxle	lr
    864e:	1e59      	subs	r1, r3, #1
    8650:	f012 0f01 	tst.w	r2, #1
    8654:	bf18      	it	ne
    8656:	f801 cf01 	strbne.w	ip, [r1, #1]!
    865a:	1052      	asrs	r2, r2, #1
    865c:	bf04      	itt	eq
    865e:	bc70      	popeq	{r4, r5, r6}
    8660:	4770      	bxeq	lr
    8662:	f881 c001 	strb.w	ip, [r1, #1]
    8666:	f801 cf02 	strb.w	ip, [r1, #2]!
    866a:	1e52      	subs	r2, r2, #1
    866c:	d1f9      	bne.n	8662 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    866e:	bc70      	pop	{r4, r5, r6}
    8670:	4770      	bx	lr
    8672:	2a04      	cmp	r2, #4
    8674:	d3e0      	bcc.n	8638 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    8676:	1f12      	subs	r2, r2, #4
    8678:	f843 5b04 	str.w	r5, [r3], #4
    867c:	2a04      	cmp	r2, #4
    867e:	d2fa      	bcs.n	8676 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    8680:	e7da      	b.n	8638 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    8682:	f803 cb01 	strb.w	ip, [r3], #1
    8686:	1e52      	subs	r2, r2, #1
    8688:	d1fb      	bne.n	8682 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    868a:	bc70      	pop	{r4, r5, r6}
    868c:	4770      	bx	lr
    868e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8692:	4770      	bx	lr
    8694:	2000      	movs	r0, #0
    8696:	4770      	bx	lr
    8698:	2000      	movs	r0, #0
    869a:	4770      	bx	lr
    869c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    86a0:	4770      	bx	lr
    86a2:	4770      	bx	lr
    86a4:	4770      	bx	lr
    86a6:	2000      	movs	r0, #0
    86a8:	4770      	bx	lr
    86aa:	2100      	movs	r1, #0
    86ac:	7001      	strb	r1, [r0, #0]
    86ae:	4770      	bx	lr
    86b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    86b4:	4770      	bx	lr
    86b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    86ba:	4770      	bx	lr
    86bc:	2100      	movs	r1, #0
    86be:	7001      	strb	r1, [r0, #0]
    86c0:	4770      	bx	lr
    86c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    86c6:	4770      	bx	lr
    86c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    86cc:	4770      	bx	lr
    86ce:	7800      	ldrb	r0, [r0, #0]
    86d0:	2800      	cmp	r0, #0
    86d2:	d001      	beq.n	86d8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    86d4:	f06f 0015 	mvn.w	r0, #21
    86d8:	4770      	bx	lr
    86da:	2000      	movs	r0, #0
    86dc:	4770      	bx	lr
    86de:	2200      	movs	r2, #0
    86e0:	f000 b802 	b.w	86e8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

000086e4 <mpsl_fem_init>:
    86e4:	f7f8 b8f6 	b.w	8d4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

000086e8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    86e8:	b570      	push	{r4, r5, r6, lr}
    86ea:	4614      	mov	r4, r2
    86ec:	460d      	mov	r5, r1
    86ee:	1b00      	subs	r0, r0, r4
    86f0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    86f4:	4288      	cmp	r0, r1
    86f6:	da01      	bge.n	86fc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    86f8:	4608      	mov	r0, r1
    86fa:	e002      	b.n	8702 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    86fc:	287f      	cmp	r0, #127	; 0x7f
    86fe:	dd00      	ble.n	8702 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    8700:	207f      	movs	r0, #127	; 0x7f
    8702:	b240      	sxtb	r0, r0
    8704:	f7f8 f91a 	bl	93c <mpsl_tx_power_radio_supported_power_adjust>
    8708:	7028      	strb	r0, [r5, #0]
    870a:	706c      	strb	r4, [r5, #1]
    870c:	2100      	movs	r1, #0
    870e:	4420      	add	r0, r4
    8710:	70a9      	strb	r1, [r5, #2]
    8712:	b240      	sxtb	r0, r0
    8714:	bd70      	pop	{r4, r5, r6, pc}
    8716:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    871a:	460c      	mov	r4, r1
    871c:	4681      	mov	r9, r0
    871e:	7849      	ldrb	r1, [r1, #1]
    8720:	f100 0003 	add.w	r0, r0, #3
    8724:	f88d 1000 	strb.w	r1, [sp]
    8728:	f020 0003 	bic.w	r0, r0, #3
    872c:	78a1      	ldrb	r1, [r4, #2]
    872e:	0016      	movs	r6, r2
    8730:	4605      	mov	r5, r0
    8732:	f88d 1001 	strb.w	r1, [sp, #1]
    8736:	d000      	beq.n	873a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x52>
    8738:	2000      	movs	r0, #0
    873a:	4669      	mov	r1, sp
    873c:	f7fc f810 	bl	4760 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    8740:	4428      	add	r0, r5
    8742:	78a1      	ldrb	r1, [r4, #2]
    8744:	4605      	mov	r5, r0
    8746:	b131      	cbz	r1, 8756 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    8748:	8a63      	ldrh	r3, [r4, #18]
    874a:	78e2      	ldrb	r2, [r4, #3]
    874c:	b106      	cbz	r6, 8750 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x68>
    874e:	2000      	movs	r0, #0
    8750:	f7fc fa5a 	bl	4c08 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    8754:	4405      	add	r5, r0
    8756:	7820      	ldrb	r0, [r4, #0]
    8758:	7861      	ldrb	r1, [r4, #1]
    875a:	46b2      	mov	sl, r6
    875c:	2600      	movs	r6, #0
    875e:	4408      	add	r0, r1
    8760:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    8764:	4637      	mov	r7, r6
    8766:	e008      	b.n	877a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x92>
    8768:	7a23      	ldrb	r3, [r4, #8]
    876a:	79e2      	ldrb	r2, [r4, #7]
    876c:	79a1      	ldrb	r1, [r4, #6]
    876e:	7960      	ldrb	r0, [r4, #5]
    8770:	f000 fc77 	bl	9062 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    8774:	1c7f      	adds	r7, r7, #1
    8776:	4406      	add	r6, r0
    8778:	b2ff      	uxtb	r7, r7
    877a:	4547      	cmp	r7, r8
    877c:	d3f4      	bcc.n	8768 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x80>
    877e:	1ced      	adds	r5, r5, #3
    8780:	f025 0003 	bic.w	r0, r5, #3
    8784:	4604      	mov	r4, r0
    8786:	f1ba 0f00 	cmp.w	sl, #0
    878a:	d000      	beq.n	878e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa6>
    878c:	2000      	movs	r0, #0
    878e:	4632      	mov	r2, r6
    8790:	4641      	mov	r1, r8
    8792:	f7fc f999 	bl	4ac8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    8796:	4420      	add	r0, r4
    8798:	1dc0      	adds	r0, r0, #7
    879a:	f020 0007 	bic.w	r0, r0, #7
    879e:	eba0 0009 	sub.w	r0, r0, r9
    87a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87a6:	b570      	push	{r4, r5, r6, lr}
    87a8:	460c      	mov	r4, r1
    87aa:	4605      	mov	r5, r0
    87ac:	f7fb ff62 	bl	4674 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    87b0:	2800      	cmp	r0, #0
    87b2:	d002      	beq.n	87ba <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xd2>
    87b4:	2d3e      	cmp	r5, #62	; 0x3e
    87b6:	d001      	beq.n	87bc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xd4>
    87b8:	2001      	movs	r0, #1
    87ba:	bd70      	pop	{r4, r5, r6, pc}
    87bc:	2c12      	cmp	r4, #18
    87be:	d004      	beq.n	87ca <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xe2>
    87c0:	4620      	mov	r0, r4
    87c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    87c6:	f7fb bf67 	b.w	4698 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    87ca:	2000      	movs	r0, #0
    87cc:	bd70      	pop	{r4, r5, r6, pc}

000087ce <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    87ce:	b510      	push	{r4, lr}
    87d0:	460c      	mov	r4, r1
    87d2:	7809      	ldrb	r1, [r1, #0]
    87d4:	7001      	strb	r1, [r0, #0]
    87d6:	7841      	ldrb	r1, [r0, #1]
    87d8:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    87dc:	7041      	strb	r1, [r0, #1]
    87de:	8822      	ldrh	r2, [r4, #0]
    87e0:	f3c2 2203 	ubfx	r2, r2, #8, #4
    87e4:	4311      	orrs	r1, r2
    87e6:	7041      	strb	r1, [r0, #1]
    87e8:	78a2      	ldrb	r2, [r4, #2]
    87ea:	7082      	strb	r2, [r0, #2]
    87ec:	8862      	ldrh	r2, [r4, #2]
    87ee:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    87f2:	0a12      	lsrs	r2, r2, #8
    87f4:	70c2      	strb	r2, [r0, #3]
    87f6:	7041      	strb	r1, [r0, #1]
    87f8:	7922      	ldrb	r2, [r4, #4]
    87fa:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    87fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    8802:	7041      	strb	r1, [r0, #1]
    8804:	7962      	ldrb	r2, [r4, #5]
    8806:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    880a:	7041      	strb	r1, [r0, #1]
    880c:	68a1      	ldr	r1, [r4, #8]
    880e:	1d02      	adds	r2, r0, #4
    8810:	4291      	cmp	r1, r2
    8812:	d006      	beq.n	8822 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    8814:	8862      	ldrh	r2, [r4, #2]
    8816:	2afb      	cmp	r2, #251	; 0xfb
    8818:	d300      	bcc.n	881c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    881a:	22fb      	movs	r2, #251	; 0xfb
    881c:	1d00      	adds	r0, r0, #4
    881e:	f7ff fe5c 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8822:	78a0      	ldrb	r0, [r4, #2]
    8824:	1d00      	adds	r0, r0, #4
    8826:	b2c0      	uxtb	r0, r0
    8828:	bd10      	pop	{r4, pc}

0000882a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    882a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    882e:	4604      	mov	r4, r0
    8830:	f891 c000 	ldrb.w	ip, [r1]
    8834:	2000      	movs	r0, #0
    8836:	2513      	movs	r5, #19
    8838:	260c      	movs	r6, #12
    883a:	2705      	movs	r7, #5
    883c:	223e      	movs	r2, #62	; 0x3e
    883e:	23ff      	movs	r3, #255	; 0xff
    8840:	f1bc 0f1d 	cmp.w	ip, #29
    8844:	d27d      	bcs.n	8942 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    8846:	e8df f00c 	tbb	[pc, ip]
    884a:	0f7c      	.short	0x0f7c
    884c:	882e2826 	.word	0x882e2826
    8850:	d1bea492 	.word	0xd1bea492
    8854:	f5f7ded3 	.word	0xf5f7ded3
    8858:	547c7cf4 	.word	0x547c7cf4
    885c:	f0f1f2f3 	.word	0xf0f1f2f3
    8860:	ecedeeef 	.word	0xecedeeef
    8864:	00e9eaeb 	.word	0x00e9eaeb
    8868:	7026      	strb	r6, [r4, #0]
    886a:	7908      	ldrb	r0, [r1, #4]
    886c:	70a0      	strb	r0, [r4, #2]
    886e:	7948      	ldrb	r0, [r1, #5]
    8870:	70e0      	strb	r0, [r4, #3]
    8872:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    8876:	0a00      	lsrs	r0, r0, #8
    8878:	7120      	strb	r0, [r4, #4]
    887a:	79c8      	ldrb	r0, [r1, #7]
    887c:	7160      	strb	r0, [r4, #5]
    887e:	7a08      	ldrb	r0, [r1, #8]
    8880:	71a0      	strb	r0, [r4, #6]
    8882:	8908      	ldrh	r0, [r1, #8]
    8884:	0a00      	lsrs	r0, r0, #8
    8886:	71e0      	strb	r0, [r4, #7]
    8888:	7a88      	ldrb	r0, [r1, #10]
    888a:	7220      	strb	r0, [r4, #8]
    888c:	8948      	ldrh	r0, [r1, #10]
    888e:	0a00      	lsrs	r0, r0, #8
    8890:	7260      	strb	r0, [r4, #9]
    8892:	2008      	movs	r0, #8
    8894:	e190      	b.n	8bb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8896:	2010      	movs	r0, #16
    8898:	e000      	b.n	889c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x72>
    889a:	201a      	movs	r0, #26
    889c:	7020      	strb	r0, [r4, #0]
    889e:	7908      	ldrb	r0, [r1, #4]
    88a0:	70a0      	strb	r0, [r4, #2]
    88a2:	2001      	movs	r0, #1
    88a4:	e188      	b.n	8bb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    88a6:	7022      	strb	r2, [r4, #0]
    88a8:	2001      	movs	r0, #1
    88aa:	70a0      	strb	r0, [r4, #2]
    88ac:	7908      	ldrb	r0, [r1, #4]
    88ae:	70e0      	strb	r0, [r4, #3]
    88b0:	7988      	ldrb	r0, [r1, #6]
    88b2:	7120      	strb	r0, [r4, #4]
    88b4:	88c8      	ldrh	r0, [r1, #6]
    88b6:	0a00      	lsrs	r0, r0, #8
    88b8:	7160      	strb	r0, [r4, #5]
    88ba:	7a08      	ldrb	r0, [r1, #8]
    88bc:	71a0      	strb	r0, [r4, #6]
    88be:	7a48      	ldrb	r0, [r1, #9]
    88c0:	71e0      	strb	r0, [r4, #7]
    88c2:	f8d1 000a 	ldr.w	r0, [r1, #10]
    88c6:	60a0      	str	r0, [r4, #8]
    88c8:	89c8      	ldrh	r0, [r1, #14]
    88ca:	81a0      	strh	r0, [r4, #12]
    88cc:	7c08      	ldrb	r0, [r1, #16]
    88ce:	73a0      	strb	r0, [r4, #14]
    88d0:	8a08      	ldrh	r0, [r1, #16]
    88d2:	0a00      	lsrs	r0, r0, #8
    88d4:	73e0      	strb	r0, [r4, #15]
    88d6:	7c88      	ldrb	r0, [r1, #18]
    88d8:	7420      	strb	r0, [r4, #16]
    88da:	8a48      	ldrh	r0, [r1, #18]
    88dc:	0a00      	lsrs	r0, r0, #8
    88de:	7460      	strb	r0, [r4, #17]
    88e0:	7d08      	ldrb	r0, [r1, #20]
    88e2:	74a0      	strb	r0, [r4, #18]
    88e4:	8a88      	ldrh	r0, [r1, #20]
    88e6:	0a00      	lsrs	r0, r0, #8
    88e8:	74e0      	strb	r0, [r4, #19]
    88ea:	7d88      	ldrb	r0, [r1, #22]
    88ec:	7520      	strb	r0, [r4, #20]
    88ee:	4628      	mov	r0, r5
    88f0:	e162      	b.n	8bb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    88f2:	7022      	strb	r2, [r4, #0]
    88f4:	200a      	movs	r0, #10
    88f6:	70a0      	strb	r0, [r4, #2]
    88f8:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    88fc:	70e0      	strb	r0, [r4, #3]
    88fe:	7888      	ldrb	r0, [r1, #2]
    8900:	7120      	strb	r0, [r4, #4]
    8902:	8848      	ldrh	r0, [r1, #2]
    8904:	0a00      	lsrs	r0, r0, #8
    8906:	7160      	strb	r0, [r4, #5]
    8908:	7908      	ldrb	r0, [r1, #4]
    890a:	71a0      	strb	r0, [r4, #6]
    890c:	7948      	ldrb	r0, [r1, #5]
    890e:	71e0      	strb	r0, [r4, #7]
    8910:	f8d1 0006 	ldr.w	r0, [r1, #6]
    8914:	60a0      	str	r0, [r4, #8]
    8916:	8948      	ldrh	r0, [r1, #10]
    8918:	81a0      	strh	r0, [r4, #12]
    891a:	68c8      	ldr	r0, [r1, #12]
    891c:	f8c4 000e 	str.w	r0, [r4, #14]
    8920:	8a08      	ldrh	r0, [r1, #16]
    8922:	8260      	strh	r0, [r4, #18]
    8924:	f8d1 0012 	ldr.w	r0, [r1, #18]
    8928:	6160      	str	r0, [r4, #20]
    892a:	8ac8      	ldrh	r0, [r1, #22]
    892c:	8320      	strh	r0, [r4, #24]
    892e:	7e08      	ldrb	r0, [r1, #24]
    8930:	76a0      	strb	r0, [r4, #26]
    8932:	8b08      	ldrh	r0, [r1, #24]
    8934:	0a00      	lsrs	r0, r0, #8
    8936:	76e0      	strb	r0, [r4, #27]
    8938:	7e88      	ldrb	r0, [r1, #26]
    893a:	7720      	strb	r0, [r4, #28]
    893c:	8b48      	ldrh	r0, [r1, #26]
    893e:	0a00      	lsrs	r0, r0, #8
    8940:	e000      	b.n	8944 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11a>
    8942:	e09a      	b.n	8a7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    8944:	7760      	strb	r0, [r4, #29]
    8946:	7f08      	ldrb	r0, [r1, #28]
    8948:	77a0      	strb	r0, [r4, #30]
    894a:	8b88      	ldrh	r0, [r1, #28]
    894c:	0a00      	lsrs	r0, r0, #8
    894e:	77e0      	strb	r0, [r4, #31]
    8950:	7f88      	ldrb	r0, [r1, #30]
    8952:	f884 0020 	strb.w	r0, [r4, #32]
    8956:	201f      	movs	r0, #31
    8958:	e12e      	b.n	8bb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    895a:	7022      	strb	r2, [r4, #0]
    895c:	2014      	movs	r0, #20
    895e:	70a0      	strb	r0, [r4, #2]
    8960:	7908      	ldrb	r0, [r1, #4]
    8962:	70e0      	strb	r0, [r4, #3]
    8964:	8888      	ldrh	r0, [r1, #4]
    8966:	0a00      	lsrs	r0, r0, #8
    8968:	7120      	strb	r0, [r4, #4]
    896a:	7988      	ldrb	r0, [r1, #6]
    896c:	e0c2      	b.n	8af4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    896e:	7022      	strb	r2, [r4, #0]
    8970:	2004      	movs	r0, #4
    8972:	70a0      	strb	r0, [r4, #2]
    8974:	7908      	ldrb	r0, [r1, #4]
    8976:	70e0      	strb	r0, [r4, #3]
    8978:	7988      	ldrb	r0, [r1, #6]
    897a:	7120      	strb	r0, [r4, #4]
    897c:	88c8      	ldrh	r0, [r1, #6]
    897e:	0a00      	lsrs	r0, r0, #8
    8980:	7160      	strb	r0, [r4, #5]
    8982:	6888      	ldr	r0, [r1, #8]
    8984:	f8c4 0006 	str.w	r0, [r4, #6]
    8988:	68c8      	ldr	r0, [r1, #12]
    898a:	f8c4 000a 	str.w	r0, [r4, #10]
    898e:	200c      	movs	r0, #12
    8990:	e112      	b.n	8bb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8992:	7022      	strb	r2, [r4, #0]
    8994:	2003      	movs	r0, #3
    8996:	70a0      	strb	r0, [r4, #2]
    8998:	7908      	ldrb	r0, [r1, #4]
    899a:	70e0      	strb	r0, [r4, #3]
    899c:	7988      	ldrb	r0, [r1, #6]
    899e:	7120      	strb	r0, [r4, #4]
    89a0:	88c8      	ldrh	r0, [r1, #6]
    89a2:	0a00      	lsrs	r0, r0, #8
    89a4:	7160      	strb	r0, [r4, #5]
    89a6:	7a08      	ldrb	r0, [r1, #8]
    89a8:	71a0      	strb	r0, [r4, #6]
    89aa:	8908      	ldrh	r0, [r1, #8]
    89ac:	0a00      	lsrs	r0, r0, #8
    89ae:	71e0      	strb	r0, [r4, #7]
    89b0:	7a88      	ldrb	r0, [r1, #10]
    89b2:	7220      	strb	r0, [r4, #8]
    89b4:	8948      	ldrh	r0, [r1, #10]
    89b6:	0a00      	lsrs	r0, r0, #8
    89b8:	7260      	strb	r0, [r4, #9]
    89ba:	7b08      	ldrb	r0, [r1, #12]
    89bc:	72a0      	strb	r0, [r4, #10]
    89be:	8988      	ldrh	r0, [r1, #12]
    89c0:	0a00      	lsrs	r0, r0, #8
    89c2:	72e0      	strb	r0, [r4, #11]
    89c4:	e0d2      	b.n	8b6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x342>
    89c6:	7022      	strb	r2, [r4, #0]
    89c8:	70a7      	strb	r7, [r4, #2]
    89ca:	7908      	ldrb	r0, [r1, #4]
    89cc:	70e0      	strb	r0, [r4, #3]
    89ce:	8888      	ldrh	r0, [r1, #4]
    89d0:	0a00      	lsrs	r0, r0, #8
    89d2:	7120      	strb	r0, [r4, #4]
    89d4:	f8d1 0006 	ldr.w	r0, [r1, #6]
    89d8:	f8c4 0005 	str.w	r0, [r4, #5]
    89dc:	f8d1 000a 	ldr.w	r0, [r1, #10]
    89e0:	f8c4 0009 	str.w	r0, [r4, #9]
    89e4:	89c8      	ldrh	r0, [r1, #14]
    89e6:	f8a4 000d 	strh.w	r0, [r4, #13]
    89ea:	e0e4      	b.n	8bb6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38c>
    89ec:	2011      	movs	r0, #17
    89ee:	e047      	b.n	8a80 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x256>
    89f0:	7027      	strb	r7, [r4, #0]
    89f2:	7908      	ldrb	r0, [r1, #4]
    89f4:	70a0      	strb	r0, [r4, #2]
    89f6:	7948      	ldrb	r0, [r1, #5]
    89f8:	70e0      	strb	r0, [r4, #3]
    89fa:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    89fe:	0a00      	lsrs	r0, r0, #8
    8a00:	7120      	strb	r0, [r4, #4]
    8a02:	79c8      	ldrb	r0, [r1, #7]
    8a04:	e076      	b.n	8af4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    8a06:	2008      	movs	r0, #8
    8a08:	7020      	strb	r0, [r4, #0]
    8a0a:	7908      	ldrb	r0, [r1, #4]
    8a0c:	70a0      	strb	r0, [r4, #2]
    8a0e:	7988      	ldrb	r0, [r1, #6]
    8a10:	70e0      	strb	r0, [r4, #3]
    8a12:	88c8      	ldrh	r0, [r1, #6]
    8a14:	0a00      	lsrs	r0, r0, #8
    8a16:	7120      	strb	r0, [r4, #4]
    8a18:	7a08      	ldrb	r0, [r1, #8]
    8a1a:	e06b      	b.n	8af4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    8a1c:	e0b6      	b.n	8b8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x362>
    8a1e:	e08a      	b.n	8b36 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x30c>
    8a20:	e06b      	b.n	8afa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d0>
    8a22:	e096      	b.n	8b52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    8a24:	e0a4      	b.n	8b70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x346>
    8a26:	e05d      	b.n	8ae4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    8a28:	e045      	b.n	8ab6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x28c>
    8a2a:	e041      	b.n	8ab0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    8a2c:	e030      	b.n	8a90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x266>
    8a2e:	e011      	b.n	8a54 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22a>
    8a30:	e00d      	b.n	8a4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x224>
    8a32:	e024      	b.n	8a7e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x254>
    8a34:	e01b      	b.n	8a6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    8a36:	e7ff      	b.n	8a38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20e>
    8a38:	2030      	movs	r0, #48	; 0x30
    8a3a:	7020      	strb	r0, [r4, #0]
    8a3c:	7908      	ldrb	r0, [r1, #4]
    8a3e:	70a0      	strb	r0, [r4, #2]
    8a40:	7988      	ldrb	r0, [r1, #6]
    8a42:	70e0      	strb	r0, [r4, #3]
    8a44:	88c8      	ldrh	r0, [r1, #6]
    8a46:	0a00      	lsrs	r0, r0, #8
    8a48:	7120      	strb	r0, [r4, #4]
    8a4a:	2003      	movs	r0, #3
    8a4c:	e0b4      	b.n	8bb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8a4e:	7022      	strb	r2, [r4, #0]
    8a50:	2007      	movs	r0, #7
    8a52:	e054      	b.n	8afe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d4>
    8a54:	7022      	strb	r2, [r4, #0]
    8a56:	70a6      	strb	r6, [r4, #2]
    8a58:	7908      	ldrb	r0, [r1, #4]
    8a5a:	70e0      	strb	r0, [r4, #3]
    8a5c:	7988      	ldrb	r0, [r1, #6]
    8a5e:	7120      	strb	r0, [r4, #4]
    8a60:	88c8      	ldrh	r0, [r1, #6]
    8a62:	0a00      	lsrs	r0, r0, #8
    8a64:	7160      	strb	r0, [r4, #5]
    8a66:	7a08      	ldrb	r0, [r1, #8]
    8a68:	71a0      	strb	r0, [r4, #6]
    8a6a:	7a48      	ldrb	r0, [r1, #9]
    8a6c:	e01d      	b.n	8aaa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x280>
    8a6e:	4620      	mov	r0, r4
    8a70:	1d09      	adds	r1, r1, #4
    8a72:	f7fb fdd1 	bl	4618 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb0>
    8a76:	2800      	cmp	r0, #0
    8a78:	d109      	bne.n	8a8e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x264>
    8a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a7e:	2057      	movs	r0, #87	; 0x57
    8a80:	7020      	strb	r0, [r4, #0]
    8a82:	7908      	ldrb	r0, [r1, #4]
    8a84:	70a0      	strb	r0, [r4, #2]
    8a86:	8888      	ldrh	r0, [r1, #4]
    8a88:	0a00      	lsrs	r0, r0, #8
    8a8a:	70e0      	strb	r0, [r4, #3]
    8a8c:	2002      	movs	r0, #2
    8a8e:	e093      	b.n	8bb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8a90:	7022      	strb	r2, [r4, #0]
    8a92:	2012      	movs	r0, #18
    8a94:	70a0      	strb	r0, [r4, #2]
    8a96:	7908      	ldrb	r0, [r1, #4]
    8a98:	70e0      	strb	r0, [r4, #3]
    8a9a:	7948      	ldrb	r0, [r1, #5]
    8a9c:	7120      	strb	r0, [r4, #4]
    8a9e:	7988      	ldrb	r0, [r1, #6]
    8aa0:	7160      	strb	r0, [r4, #5]
    8aa2:	88c8      	ldrh	r0, [r1, #6]
    8aa4:	0a00      	lsrs	r0, r0, #8
    8aa6:	71a0      	strb	r0, [r4, #6]
    8aa8:	7a08      	ldrb	r0, [r1, #8]
    8aaa:	71e0      	strb	r0, [r4, #7]
    8aac:	2006      	movs	r0, #6
    8aae:	e083      	b.n	8bb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8ab0:	7022      	strb	r2, [r4, #0]
    8ab2:	2020      	movs	r0, #32
    8ab4:	e041      	b.n	8b3a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x310>
    8ab6:	7022      	strb	r2, [r4, #0]
    8ab8:	2021      	movs	r0, #33	; 0x21
    8aba:	70a0      	strb	r0, [r4, #2]
    8abc:	7908      	ldrb	r0, [r1, #4]
    8abe:	70e0      	strb	r0, [r4, #3]
    8ac0:	7948      	ldrb	r0, [r1, #5]
    8ac2:	7120      	strb	r0, [r4, #4]
    8ac4:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    8ac8:	0a00      	lsrs	r0, r0, #8
    8aca:	7160      	strb	r0, [r4, #5]
    8acc:	79c8      	ldrb	r0, [r1, #7]
    8ace:	71a0      	strb	r0, [r4, #6]
    8ad0:	7a08      	ldrb	r0, [r1, #8]
    8ad2:	71e0      	strb	r0, [r4, #7]
    8ad4:	7a48      	ldrb	r0, [r1, #9]
    8ad6:	7220      	strb	r0, [r4, #8]
    8ad8:	7a88      	ldrb	r0, [r1, #10]
    8ada:	7260      	strb	r0, [r4, #9]
    8adc:	7ac8      	ldrb	r0, [r1, #11]
    8ade:	72a0      	strb	r0, [r4, #10]
    8ae0:	2009      	movs	r0, #9
    8ae2:	e069      	b.n	8bb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8ae4:	7023      	strb	r3, [r4, #0]
    8ae6:	20a1      	movs	r0, #161	; 0xa1
    8ae8:	70a0      	strb	r0, [r4, #2]
    8aea:	7908      	ldrb	r0, [r1, #4]
    8aec:	70e0      	strb	r0, [r4, #3]
    8aee:	7948      	ldrb	r0, [r1, #5]
    8af0:	7120      	strb	r0, [r4, #4]
    8af2:	2000      	movs	r0, #0
    8af4:	7160      	strb	r0, [r4, #5]
    8af6:	2004      	movs	r0, #4
    8af8:	e05e      	b.n	8bb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8afa:	7023      	strb	r3, [r4, #0]
    8afc:	20a2      	movs	r0, #162	; 0xa2
    8afe:	70a0      	strb	r0, [r4, #2]
    8b00:	7908      	ldrb	r0, [r1, #4]
    8b02:	70e0      	strb	r0, [r4, #3]
    8b04:	8888      	ldrh	r0, [r1, #4]
    8b06:	0a00      	lsrs	r0, r0, #8
    8b08:	7120      	strb	r0, [r4, #4]
    8b0a:	7988      	ldrb	r0, [r1, #6]
    8b0c:	7160      	strb	r0, [r4, #5]
    8b0e:	88c8      	ldrh	r0, [r1, #6]
    8b10:	0a00      	lsrs	r0, r0, #8
    8b12:	71a0      	strb	r0, [r4, #6]
    8b14:	7a08      	ldrb	r0, [r1, #8]
    8b16:	71e0      	strb	r0, [r4, #7]
    8b18:	8908      	ldrh	r0, [r1, #8]
    8b1a:	0a00      	lsrs	r0, r0, #8
    8b1c:	7220      	strb	r0, [r4, #8]
    8b1e:	7a88      	ldrb	r0, [r1, #10]
    8b20:	7260      	strb	r0, [r4, #9]
    8b22:	8948      	ldrh	r0, [r1, #10]
    8b24:	0a00      	lsrs	r0, r0, #8
    8b26:	72a0      	strb	r0, [r4, #10]
    8b28:	7b08      	ldrb	r0, [r1, #12]
    8b2a:	72e0      	strb	r0, [r4, #11]
    8b2c:	8988      	ldrh	r0, [r1, #12]
    8b2e:	0a00      	lsrs	r0, r0, #8
    8b30:	7320      	strb	r0, [r4, #12]
    8b32:	200b      	movs	r0, #11
    8b34:	e040      	b.n	8bb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8b36:	7023      	strb	r3, [r4, #0]
    8b38:	20a3      	movs	r0, #163	; 0xa3
    8b3a:	70a0      	strb	r0, [r4, #2]
    8b3c:	7908      	ldrb	r0, [r1, #4]
    8b3e:	70e0      	strb	r0, [r4, #3]
    8b40:	8888      	ldrh	r0, [r1, #4]
    8b42:	0a00      	lsrs	r0, r0, #8
    8b44:	7120      	strb	r0, [r4, #4]
    8b46:	7988      	ldrb	r0, [r1, #6]
    8b48:	7160      	strb	r0, [r4, #5]
    8b4a:	79c8      	ldrb	r0, [r1, #7]
    8b4c:	71a0      	strb	r0, [r4, #6]
    8b4e:	2005      	movs	r0, #5
    8b50:	e032      	b.n	8bb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8b52:	7022      	strb	r2, [r4, #0]
    8b54:	70a5      	strb	r5, [r4, #2]
    8b56:	7908      	ldrb	r0, [r1, #4]
    8b58:	70e0      	strb	r0, [r4, #3]
    8b5a:	7948      	ldrb	r0, [r1, #5]
    8b5c:	7120      	strb	r0, [r4, #4]
    8b5e:	f8d1 0006 	ldr.w	r0, [r1, #6]
    8b62:	f8c4 0005 	str.w	r0, [r4, #5]
    8b66:	8948      	ldrh	r0, [r1, #10]
    8b68:	f8a4 0009 	strh.w	r0, [r4, #9]
    8b6c:	200a      	movs	r0, #10
    8b6e:	e023      	b.n	8bb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8b70:	7023      	strb	r3, [r4, #0]
    8b72:	20a4      	movs	r0, #164	; 0xa4
    8b74:	70a0      	strb	r0, [r4, #2]
    8b76:	7908      	ldrb	r0, [r1, #4]
    8b78:	70e0      	strb	r0, [r4, #3]
    8b7a:	8888      	ldrh	r0, [r1, #4]
    8b7c:	0a00      	lsrs	r0, r0, #8
    8b7e:	7120      	strb	r0, [r4, #4]
    8b80:	7988      	ldrb	r0, [r1, #6]
    8b82:	7160      	strb	r0, [r4, #5]
    8b84:	79c8      	ldrb	r0, [r1, #7]
    8b86:	71a0      	strb	r0, [r4, #6]
    8b88:	2007      	movs	r0, #7
    8b8a:	e015      	b.n	8bb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8b8c:	7023      	strb	r3, [r4, #0]
    8b8e:	2080      	movs	r0, #128	; 0x80
    8b90:	70a0      	strb	r0, [r4, #2]
    8b92:	888a      	ldrh	r2, [r1, #4]
    8b94:	f8a4 2003 	strh.w	r2, [r4, #3]
    8b98:	88ca      	ldrh	r2, [r1, #6]
    8b9a:	f8a4 2005 	strh.w	r2, [r4, #5]
    8b9e:	7a0a      	ldrb	r2, [r1, #8]
    8ba0:	71e2      	strb	r2, [r4, #7]
    8ba2:	894a      	ldrh	r2, [r1, #10]
    8ba4:	8122      	strh	r2, [r4, #8]
    8ba6:	898a      	ldrh	r2, [r1, #12]
    8ba8:	8162      	strh	r2, [r4, #10]
    8baa:	89ca      	ldrh	r2, [r1, #14]
    8bac:	81a2      	strh	r2, [r4, #12]
    8bae:	7c09      	ldrb	r1, [r1, #16]
    8bb0:	f001 0101 	and.w	r1, r1, #1
    8bb4:	73a1      	strb	r1, [r4, #14]
    8bb6:	200d      	movs	r0, #13
    8bb8:	7060      	strb	r0, [r4, #1]
    8bba:	1c80      	adds	r0, r0, #2
    8bbc:	e75d      	b.n	8a7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>

00008bbe <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    8bbe:	223e      	movs	r2, #62	; 0x3e
    8bc0:	7002      	strb	r2, [r0, #0]
    8bc2:	2201      	movs	r2, #1
    8bc4:	7082      	strb	r2, [r0, #2]
    8bc6:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    8bca:	70c2      	strb	r2, [r0, #3]
    8bcc:	788a      	ldrb	r2, [r1, #2]
    8bce:	7102      	strb	r2, [r0, #4]
    8bd0:	884a      	ldrh	r2, [r1, #2]
    8bd2:	0a12      	lsrs	r2, r2, #8
    8bd4:	7142      	strb	r2, [r0, #5]
    8bd6:	790a      	ldrb	r2, [r1, #4]
    8bd8:	7182      	strb	r2, [r0, #6]
    8bda:	794a      	ldrb	r2, [r1, #5]
    8bdc:	71c2      	strb	r2, [r0, #7]
    8bde:	f8d1 2006 	ldr.w	r2, [r1, #6]
    8be2:	6082      	str	r2, [r0, #8]
    8be4:	894a      	ldrh	r2, [r1, #10]
    8be6:	8182      	strh	r2, [r0, #12]
    8be8:	7e0a      	ldrb	r2, [r1, #24]
    8bea:	7382      	strb	r2, [r0, #14]
    8bec:	8b0a      	ldrh	r2, [r1, #24]
    8bee:	0a12      	lsrs	r2, r2, #8
    8bf0:	73c2      	strb	r2, [r0, #15]
    8bf2:	7e8a      	ldrb	r2, [r1, #26]
    8bf4:	7402      	strb	r2, [r0, #16]
    8bf6:	8b4a      	ldrh	r2, [r1, #26]
    8bf8:	0a12      	lsrs	r2, r2, #8
    8bfa:	7442      	strb	r2, [r0, #17]
    8bfc:	7f0a      	ldrb	r2, [r1, #28]
    8bfe:	7482      	strb	r2, [r0, #18]
    8c00:	8b8a      	ldrh	r2, [r1, #28]
    8c02:	0a12      	lsrs	r2, r2, #8
    8c04:	74c2      	strb	r2, [r0, #19]
    8c06:	7f89      	ldrb	r1, [r1, #30]
    8c08:	7501      	strb	r1, [r0, #20]
    8c0a:	2113      	movs	r1, #19
    8c0c:	7041      	strb	r1, [r0, #1]
    8c0e:	4608      	mov	r0, r1
    8c10:	4770      	bx	lr
    8c12:	094a      	lsrs	r2, r1, #5
    8c14:	f001 011f 	and.w	r1, r1, #31
    8c18:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    8c1c:	40c8      	lsrs	r0, r1
    8c1e:	f000 0001 	and.w	r0, r0, #1
    8c22:	4770      	bx	lr

00008c24 <sdc_hci_get>:
    8c24:	b510      	push	{r4, lr}
    8c26:	460c      	mov	r4, r1
    8c28:	b130      	cbz	r0, 8c38 <sdc_hci_get+0x14>
    8c2a:	b12c      	cbz	r4, 8c38 <sdc_hci_get+0x14>
    8c2c:	f7fb fc9c 	bl	4568 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    8c30:	b128      	cbz	r0, 8c3e <sdc_hci_get+0x1a>
    8c32:	7020      	strb	r0, [r4, #0]
    8c34:	2000      	movs	r0, #0
    8c36:	bd10      	pop	{r4, pc}
    8c38:	f06f 0015 	mvn.w	r0, #21
    8c3c:	bd10      	pop	{r4, pc}
    8c3e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    8c42:	bd10      	pop	{r4, pc}

00008c44 <sdc_hci_cmd_cb_set_event_mask>:
    8c44:	b510      	push	{r4, lr}
    8c46:	f7fb fd37 	bl	46b8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    8c4a:	2000      	movs	r0, #0
    8c4c:	bd10      	pop	{r4, pc}

00008c4e <sdc_hci_cmd_vs_conn_event_extend>:
    8c4e:	b508      	push	{r3, lr}
    8c50:	7800      	ldrb	r0, [r0, #0]
    8c52:	f88d 0000 	strb.w	r0, [sp]
    8c56:	4668      	mov	r0, sp
    8c58:	f001 fc11 	bl	a47e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    8c5c:	bd08      	pop	{r3, pc}

00008c5e <sdc_hci_cmd_vs_conn_update>:
    8c5e:	2001      	movs	r0, #1
    8c60:	4770      	bx	lr

00008c62 <sdc_hci_cmd_vs_event_length_set>:
    8c62:	f7fd be83 	b.w	696c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

00008c66 <sdc_hci_cmd_vs_llpm_mode_set>:
    8c66:	2001      	movs	r0, #1
    8c68:	4770      	bx	lr

00008c6a <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    8c6a:	7800      	ldrb	r0, [r0, #0]
    8c6c:	b100      	cbz	r0, 8c70 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    8c6e:	2001      	movs	r0, #1
    8c70:	f001 bbcf 	b.w	a412 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

00008c74 <sdc_hci_cmd_vs_set_adv_randomness>:
    8c74:	f001 bbe0 	b.w	a438 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

00008c78 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    8c78:	b510      	push	{r4, lr}
    8c7a:	4604      	mov	r4, r0
    8c7c:	f7fb f950 	bl	3f20 <mpsl_temperature_get>
    8c80:	17c1      	asrs	r1, r0, #31
    8c82:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    8c86:	1080      	asrs	r0, r0, #2
    8c88:	287f      	cmp	r0, #127	; 0x7f
    8c8a:	dd01      	ble.n	8c90 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    8c8c:	207f      	movs	r0, #127	; 0x7f
    8c8e:	e004      	b.n	8c9a <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    8c90:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    8c94:	4288      	cmp	r0, r1
    8c96:	da00      	bge.n	8c9a <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    8c98:	4608      	mov	r0, r1
    8c9a:	7020      	strb	r0, [r4, #0]
    8c9c:	2000      	movs	r0, #0
    8c9e:	bd10      	pop	{r4, pc}

00008ca0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    8ca0:	b570      	push	{r4, r5, r6, lr}
    8ca2:	4605      	mov	r5, r0
    8ca4:	2210      	movs	r2, #16
    8ca6:	2100      	movs	r1, #0
    8ca8:	f7ff fc91 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8cac:	2210      	movs	r2, #16
    8cae:	2100      	movs	r1, #0
    8cb0:	f105 0010 	add.w	r0, r5, #16
    8cb4:	f7ff fc8b 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8cb8:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    8cbc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    8cc0:	1c40      	adds	r0, r0, #1
    8cc2:	d10b      	bne.n	8cdc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    8cc4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    8cc8:	1c40      	adds	r0, r0, #1
    8cca:	d107      	bne.n	8cdc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    8ccc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    8cd0:	1c40      	adds	r0, r0, #1
    8cd2:	d103      	bne.n	8cdc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    8cd4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    8cd8:	1c40      	adds	r0, r0, #1
    8cda:	d00b      	beq.n	8cf4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    8cdc:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    8ce0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    8ce4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    8ce8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    8cec:	612a      	str	r2, [r5, #16]
    8cee:	6168      	str	r0, [r5, #20]
    8cf0:	61a9      	str	r1, [r5, #24]
    8cf2:	61eb      	str	r3, [r5, #28]
    8cf4:	2000      	movs	r0, #0
    8cf6:	f7fc f969 	bl	4fcc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    8cfa:	b918      	cbnz	r0, 8d04 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    8cfc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    8d00:	07c0      	lsls	r0, r0, #31
    8d02:	d118      	bne.n	8d36 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    8d04:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    8d08:	1c40      	adds	r0, r0, #1
    8d0a:	d10b      	bne.n	8d24 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    8d0c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    8d10:	1c40      	adds	r0, r0, #1
    8d12:	d107      	bne.n	8d24 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    8d14:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    8d18:	1c40      	adds	r0, r0, #1
    8d1a:	d103      	bne.n	8d24 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    8d1c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    8d20:	1c40      	adds	r0, r0, #1
    8d22:	d008      	beq.n	8d36 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    8d24:	f854 0f90 	ldr.w	r0, [r4, #144]!
    8d28:	6861      	ldr	r1, [r4, #4]
    8d2a:	68a2      	ldr	r2, [r4, #8]
    8d2c:	68e3      	ldr	r3, [r4, #12]
    8d2e:	6028      	str	r0, [r5, #0]
    8d30:	6069      	str	r1, [r5, #4]
    8d32:	60aa      	str	r2, [r5, #8]
    8d34:	60eb      	str	r3, [r5, #12]
    8d36:	2000      	movs	r0, #0
    8d38:	bd70      	pop	{r4, r5, r6, pc}

00008d3a <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    8d3a:	b538      	push	{r3, r4, r5, lr}
    8d3c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8d40:	4604      	mov	r4, r0
    8d42:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    8d46:	1c40      	adds	r0, r0, #1
    8d48:	d105      	bne.n	8d56 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    8d4a:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    8d4e:	43c0      	mvns	r0, r0
    8d50:	0400      	lsls	r0, r0, #16
    8d52:	0c00      	lsrs	r0, r0, #16
    8d54:	d03e      	beq.n	8dd4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    8d56:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    8d5a:	07c0      	lsls	r0, r0, #31
    8d5c:	d03a      	beq.n	8dd4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    8d5e:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    8d62:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    8d66:	f8ad 1000 	strh.w	r1, [sp]
    8d6a:	f8c4 0001 	str.w	r0, [r4, #1]
    8d6e:	f8bd 0000 	ldrh.w	r0, [sp]
    8d72:	f8a4 0005 	strh.w	r0, [r4, #5]
    8d76:	79a0      	ldrb	r0, [r4, #6]
    8d78:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    8d7c:	71a0      	strb	r0, [r4, #6]
    8d7e:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    8d82:	1c40      	adds	r0, r0, #1
    8d84:	d00f      	beq.n	8da6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    8d86:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    8d8a:	1c40      	adds	r0, r0, #1
    8d8c:	d00b      	beq.n	8da6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    8d8e:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    8d92:	1c40      	adds	r0, r0, #1
    8d94:	d007      	beq.n	8da6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    8d96:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    8d9a:	1c40      	adds	r0, r0, #1
    8d9c:	d003      	beq.n	8da6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    8d9e:	2000      	movs	r0, #0
    8da0:	f7fc f914 	bl	4fcc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    8da4:	b140      	cbz	r0, 8db8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    8da6:	2210      	movs	r2, #16
    8da8:	2100      	movs	r1, #0
    8daa:	1de0      	adds	r0, r4, #7
    8dac:	f7ff fc0f 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8db0:	2001      	movs	r0, #1
    8db2:	7020      	strb	r0, [r4, #0]
    8db4:	2000      	movs	r0, #0
    8db6:	bd38      	pop	{r3, r4, r5, pc}
    8db8:	f855 2f90 	ldr.w	r2, [r5, #144]!
    8dbc:	6869      	ldr	r1, [r5, #4]
    8dbe:	68a8      	ldr	r0, [r5, #8]
    8dc0:	68eb      	ldr	r3, [r5, #12]
    8dc2:	f8c4 2007 	str.w	r2, [r4, #7]
    8dc6:	f8c4 100b 	str.w	r1, [r4, #11]
    8dca:	f8c4 000f 	str.w	r0, [r4, #15]
    8dce:	f8c4 3013 	str.w	r3, [r4, #19]
    8dd2:	e7ed      	b.n	8db0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    8dd4:	2000      	movs	r0, #0
    8dd6:	e7ec      	b.n	8db2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

00008dd8 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    8dd8:	f001 bb43 	b.w	a462 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

00008ddc <sdc_hci_cmd_ip_read_bd_addr>:
    8ddc:	f001 bc14 	b.w	a608 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

00008de0 <sdc_hci_cmd_ip_read_local_version_information>:
    8de0:	f7fd bdd2 	b.w	6988 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

00008de4 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    8de4:	f001 b994 	b.w	a110 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

00008de8 <sdc_hci_cmd_le_clear_filter_accept_list>:
    8de8:	f001 b9a9 	b.w	a13e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

00008dec <sdc_hci_cmd_le_encrypt>:
    8dec:	f001 b9b1 	b.w	a152 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

00008df0 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    8df0:	8802      	ldrh	r2, [r0, #0]
    8df2:	800a      	strh	r2, [r1, #0]
    8df4:	f001 b9b6 	b.w	a164 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

00008df8 <sdc_hci_cmd_le_rand>:
    8df8:	f001 b9cd 	b.w	a196 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

00008dfc <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    8dfc:	f001 b9d1 	b.w	a1a2 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

00008e00 <sdc_hci_cmd_le_read_buffer_size>:
    8e00:	f7fd bd3c 	b.w	687c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

00008e04 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    8e04:	f001 b9df 	b.w	a1c6 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

00008e08 <sdc_hci_cmd_le_read_transmit_power>:
    8e08:	f001 b9d4 	b.w	a1b4 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

00008e0c <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    8e0c:	f001 b9df 	b.w	a1ce <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

00008e10 <sdc_hci_cmd_le_set_adv_data>:
    8e10:	f001 b9f2 	b.w	a1f8 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

00008e14 <sdc_hci_cmd_le_set_adv_enable>:
    8e14:	f001 ba05 	b.w	a222 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

00008e18 <sdc_hci_cmd_le_set_adv_params>:
    8e18:	f001 ba36 	b.w	a288 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

00008e1c <sdc_hci_cmd_le_set_data_related_address_changes>:
    8e1c:	f001 bac9 	b.w	a3b2 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

00008e20 <sdc_hci_cmd_le_set_event_mask>:
    8e20:	b510      	push	{r4, lr}
    8e22:	f7fb fc41 	bl	46a8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    8e26:	2000      	movs	r0, #0
    8e28:	bd10      	pop	{r4, pc}

00008e2a <sdc_hci_cmd_le_set_random_address>:
    8e2a:	f001 bacf 	b.w	a3cc <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

00008e2e <sdc_hci_cmd_le_set_scan_response_data>:
    8e2e:	f001 badb 	b.w	a3e8 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>
    8e32:	b570      	push	{r4, r5, r6, lr}
    8e34:	880b      	ldrh	r3, [r1, #0]
    8e36:	7cc4      	ldrb	r4, [r0, #19]
    8e38:	f100 0518 	add.w	r5, r0, #24
    8e3c:	f3c3 060e 	ubfx	r6, r3, #0, #15
    8e40:	8802      	ldrh	r2, [r0, #0]
    8e42:	4435      	add	r5, r6
    8e44:	1d64      	adds	r4, r4, #5
    8e46:	882d      	ldrh	r5, [r5, #0]
    8e48:	4422      	add	r2, r4
    8e4a:	b292      	uxth	r2, r2
    8e4c:	4425      	add	r5, r4
    8e4e:	1e54      	subs	r4, r2, #1
    8e50:	442c      	add	r4, r5
    8e52:	fb94 f4f2 	sdiv	r4, r4, r2
    8e56:	fb02 6204 	mla	r2, r2, r4, r6
    8e5a:	8840      	ldrh	r0, [r0, #2]
    8e5c:	b292      	uxth	r2, r2
    8e5e:	4290      	cmp	r0, r2
    8e60:	d903      	bls.n	8e6a <sdc_hci_cmd_le_set_scan_response_data+0x3c>
    8e62:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    8e66:	4310      	orrs	r0, r2
    8e68:	e002      	b.n	8e70 <sdc_hci_cmd_le_set_scan_response_data+0x42>
    8e6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    8e6e:	4398      	bics	r0, r3
    8e70:	8008      	strh	r0, [r1, #0]
    8e72:	bd70      	pop	{r4, r5, r6, pc}

00008e74 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    8e74:	8881      	ldrh	r1, [r0, #4]
    8e76:	88c0      	ldrh	r0, [r0, #6]
    8e78:	4288      	cmp	r0, r1
    8e7a:	d101      	bne.n	8e80 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    8e7c:	2001      	movs	r0, #1
    8e7e:	4770      	bx	lr
    8e80:	2000      	movs	r0, #0
    8e82:	4770      	bx	lr

00008e84 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    8e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e88:	461d      	mov	r5, r3
    8e8a:	4616      	mov	r6, r2
    8e8c:	9f06      	ldr	r7, [sp, #24]
    8e8e:	460b      	mov	r3, r1
    8e90:	4604      	mov	r4, r0
    8e92:	463a      	mov	r2, r7
    8e94:	4629      	mov	r1, r5
    8e96:	4630      	mov	r0, r6
    8e98:	f000 f839 	bl	8f0e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    8e9c:	4283      	cmp	r3, r0
    8e9e:	d201      	bcs.n	8ea4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    8ea0:	219f      	movs	r1, #159	; 0x9f
    8ea2:	e012      	b.n	8eca <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    8ea4:	07a0      	lsls	r0, r4, #30
    8ea6:	d001      	beq.n	8eac <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    8ea8:	21a0      	movs	r1, #160	; 0xa0
    8eaa:	e00e      	b.n	8eca <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    8eac:	2218      	movs	r2, #24
    8eae:	2100      	movs	r1, #0
    8eb0:	4620      	mov	r0, r4
    8eb2:	f7ff fb8c 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8eb6:	19a8      	adds	r0, r5, r6
    8eb8:	1d40      	adds	r0, r0, #5
    8eba:	4378      	muls	r0, r7
    8ebc:	b280      	uxth	r0, r0
    8ebe:	74e5      	strb	r5, [r4, #19]
    8ec0:	8060      	strh	r0, [r4, #2]
    8ec2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    8ec6:	d903      	bls.n	8ed0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    8ec8:	21a5      	movs	r1, #165	; 0xa5
    8eca:	2014      	movs	r0, #20
    8ecc:	f7fb fa92 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ed0:	8026      	strh	r6, [r4, #0]
    8ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008ed6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    8ed6:	b570      	push	{r4, r5, r6, lr}
    8ed8:	460b      	mov	r3, r1
    8eda:	4604      	mov	r4, r0
    8edc:	f100 0118 	add.w	r1, r0, #24
    8ee0:	8902      	ldrh	r2, [r0, #8]
    8ee2:	8880      	ldrh	r0, [r0, #4]
    8ee4:	f3c2 050e 	ubfx	r5, r2, #0, #15
    8ee8:	440d      	add	r5, r1
    8eea:	4282      	cmp	r2, r0
    8eec:	d101      	bne.n	8ef2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    8eee:	2000      	movs	r0, #0
    8ef0:	bd70      	pop	{r4, r5, r6, pc}
    8ef2:	b123      	cbz	r3, 8efe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    8ef4:	7ce2      	ldrb	r2, [r4, #19]
    8ef6:	1ca9      	adds	r1, r5, #2
    8ef8:	4618      	mov	r0, r3
    8efa:	f7ff faee 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8efe:	882d      	ldrh	r5, [r5, #0]
    8f00:	f104 0108 	add.w	r1, r4, #8
    8f04:	4620      	mov	r0, r4
    8f06:	f7ff ff94 	bl	8e32 <sdc_hci_cmd_le_set_scan_response_data+0x4>
    8f0a:	4628      	mov	r0, r5
    8f0c:	bd70      	pop	{r4, r5, r6, pc}

00008f0e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    8f0e:	4401      	add	r1, r0
    8f10:	1d49      	adds	r1, r1, #5
    8f12:	4351      	muls	r1, r2
    8f14:	b28a      	uxth	r2, r1
    8f16:	2100      	movs	r1, #0
    8f18:	2845      	cmp	r0, #69	; 0x45
    8f1a:	d202      	bcs.n	8f22 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    8f1c:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    8f20:	b281      	uxth	r1, r0
    8f22:	3218      	adds	r2, #24
    8f24:	1850      	adds	r0, r2, r1
    8f26:	b280      	uxth	r0, r0
    8f28:	4770      	bx	lr

00008f2a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    8f2a:	b570      	push	{r4, r5, r6, lr}
    8f2c:	2300      	movs	r3, #0
    8f2e:	f1a1 0208 	sub.w	r2, r1, #8
    8f32:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    8f36:	42a2      	cmp	r2, r4
    8f38:	d304      	bcc.n	8f44 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    8f3a:	f240 11cd 	movw	r1, #461	; 0x1cd
    8f3e:	2015      	movs	r0, #21
    8f40:	f7fb fa58 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f44:	6802      	ldr	r2, [r0, #0]
    8f46:	b90a      	cbnz	r2, 8f4c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    8f48:	e01e      	b.n	8f88 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    8f4a:	4610      	mov	r0, r2
    8f4c:	6802      	ldr	r2, [r0, #0]
    8f4e:	8893      	ldrh	r3, [r2, #4]
    8f50:	428b      	cmp	r3, r1
    8f52:	d002      	beq.n	8f5a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    8f54:	6813      	ldr	r3, [r2, #0]
    8f56:	2b00      	cmp	r3, #0
    8f58:	d1f7      	bne.n	8f4a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    8f5a:	8894      	ldrh	r4, [r2, #4]
    8f5c:	4613      	mov	r3, r2
    8f5e:	428c      	cmp	r4, r1
    8f60:	d101      	bne.n	8f66 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    8f62:	6811      	ldr	r1, [r2, #0]
    8f64:	e00d      	b.n	8f82 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    8f66:	f101 0508 	add.w	r5, r1, #8
    8f6a:	b2ae      	uxth	r6, r5
    8f6c:	2500      	movs	r5, #0
    8f6e:	42b4      	cmp	r4, r6
    8f70:	d309      	bcc.n	8f86 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    8f72:	1a64      	subs	r4, r4, r1
    8f74:	4411      	add	r1, r2
    8f76:	600d      	str	r5, [r1, #0]
    8f78:	808c      	strh	r4, [r1, #4]
    8f7a:	6802      	ldr	r2, [r0, #0]
    8f7c:	6812      	ldr	r2, [r2, #0]
    8f7e:	6002      	str	r2, [r0, #0]
    8f80:	600a      	str	r2, [r1, #0]
    8f82:	6001      	str	r1, [r0, #0]
    8f84:	e000      	b.n	8f88 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    8f86:	2300      	movs	r3, #0
    8f88:	4618      	mov	r0, r3
    8f8a:	bd70      	pop	{r4, r5, r6, pc}

00008f8c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    8f8c:	b510      	push	{r4, lr}
    8f8e:	000c      	movs	r4, r1
    8f90:	d004      	beq.n	8f9c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    8f92:	2c08      	cmp	r4, #8
    8f94:	d207      	bcs.n	8fa6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    8f96:	f240 1195 	movw	r1, #405	; 0x195
    8f9a:	e00a      	b.n	8fb2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    8f9c:	b108      	cbz	r0, 8fa2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    8f9e:	2100      	movs	r1, #0
    8fa0:	6001      	str	r1, [r0, #0]
    8fa2:	2000      	movs	r0, #0
    8fa4:	bd10      	pop	{r4, pc}
    8fa6:	b158      	cbz	r0, 8fc0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    8fa8:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    8fac:	d304      	bcc.n	8fb8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    8fae:	f240 11a7 	movw	r1, #423	; 0x1a7
    8fb2:	2015      	movs	r0, #21
    8fb4:	f7fb fa1e 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fb8:	b2a1      	uxth	r1, r4
    8fba:	6800      	ldr	r0, [r0, #0]
    8fbc:	f000 f814 	bl	8fe8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    8fc0:	1d20      	adds	r0, r4, #4
    8fc2:	bd10      	pop	{r4, pc}

00008fc4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    8fc4:	2100      	movs	r1, #0
    8fc6:	6802      	ldr	r2, [r0, #0]
    8fc8:	e003      	b.n	8fd2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    8fca:	8893      	ldrh	r3, [r2, #4]
    8fcc:	6812      	ldr	r2, [r2, #0]
    8fce:	4419      	add	r1, r3
    8fd0:	b289      	uxth	r1, r1
    8fd2:	2a00      	cmp	r2, #0
    8fd4:	d1f9      	bne.n	8fca <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    8fd6:	f000 b807 	b.w	8fe8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

00008fda <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    8fda:	2300      	movs	r3, #0
    8fdc:	600b      	str	r3, [r1, #0]
    8fde:	808a      	strh	r2, [r1, #4]
    8fe0:	6802      	ldr	r2, [r0, #0]
    8fe2:	600a      	str	r2, [r1, #0]
    8fe4:	6001      	str	r1, [r0, #0]
    8fe6:	4770      	bx	lr
    8fe8:	2300      	movs	r3, #0
    8fea:	6043      	str	r3, [r0, #4]
    8fec:	1d02      	adds	r2, r0, #4
    8fee:	8101      	strh	r1, [r0, #8]
    8ff0:	6002      	str	r2, [r0, #0]
    8ff2:	4770      	bx	lr

00008ff4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    8ff4:	b51c      	push	{r2, r3, r4, lr}
    8ff6:	4604      	mov	r4, r0
    8ff8:	2000      	movs	r0, #0
    8ffa:	9001      	str	r0, [sp, #4]
    8ffc:	9000      	str	r0, [sp, #0]
    8ffe:	f88d 4006 	strb.w	r4, [sp, #6]
    9002:	e00a      	b.n	901a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    9004:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    9008:	4621      	mov	r1, r4
    900a:	f7fb fc2d 	bl	4868 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    900e:	b120      	cbz	r0, 901a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    9010:	f240 21a5 	movw	r1, #677	; 0x2a5
    9014:	2017      	movs	r0, #23
    9016:	f7fb f9ed 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    901a:	4668      	mov	r0, sp
    901c:	f7fb fbdc 	bl	47d8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    9020:	2800      	cmp	r0, #0
    9022:	d0ef      	beq.n	9004 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    9024:	bd1c      	pop	{r2, r3, r4, pc}

00009026 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    9026:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    902a:	3aff      	subs	r2, #255	; 0xff
    902c:	d001      	beq.n	9032 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    902e:	2902      	cmp	r1, #2
    9030:	d301      	bcc.n	9036 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    9032:	2000      	movs	r0, #0
    9034:	4770      	bx	lr
    9036:	f7fb bc49 	b.w	48cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000903a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    903a:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    903e:	3aff      	subs	r2, #255	; 0xff
    9040:	d001      	beq.n	9046 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    9042:	2902      	cmp	r1, #2
    9044:	d301      	bcc.n	904a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    9046:	2000      	movs	r0, #0
    9048:	4770      	bx	lr
    904a:	f7fb bc67 	b.w	491c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    904e:	b510      	push	{r4, lr}
    9050:	4604      	mov	r4, r0
    9052:	f7fb fcaf 	bl	49b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    9056:	42a0      	cmp	r0, r4
    9058:	d901      	bls.n	905e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>
    905a:	2001      	movs	r0, #1
    905c:	bd10      	pop	{r4, pc}
    905e:	2000      	movs	r0, #0
    9060:	bd10      	pop	{r4, pc}

00009062 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    9062:	b570      	push	{r4, r5, r6, lr}
    9064:	460e      	mov	r6, r1
    9066:	461d      	mov	r5, r3
    9068:	4611      	mov	r1, r2
    906a:	f000 f813 	bl	9094 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    906e:	4604      	mov	r4, r0
    9070:	4629      	mov	r1, r5
    9072:	4630      	mov	r0, r6
    9074:	f000 f804 	bl	9080 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    9078:	4420      	add	r0, r4
    907a:	1d00      	adds	r0, r0, #4
    907c:	b280      	uxth	r0, r0
    907e:	bd70      	pop	{r4, r5, r6, pc}
    9080:	b510      	push	{r4, lr}
    9082:	460a      	mov	r2, r1
    9084:	2109      	movs	r1, #9
    9086:	f7ff ff42 	bl	8f0e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    908a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    908e:	1cc0      	adds	r0, r0, #3
    9090:	4008      	ands	r0, r1
    9092:	bd10      	pop	{r4, pc}
    9094:	b510      	push	{r4, lr}
    9096:	460a      	mov	r2, r1
    9098:	210a      	movs	r1, #10
    909a:	f7ff ff38 	bl	8f0e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    909e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    90a2:	1cc0      	adds	r0, r0, #3
    90a4:	4008      	ands	r0, r1
    90a6:	bd10      	pop	{r4, pc}
    90a8:	b109      	cbz	r1, 90ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    90aa:	2100      	movs	r1, #0
    90ac:	e000      	b.n	90b0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    90ae:	2102      	movs	r1, #2
    90b0:	1843      	adds	r3, r0, r1
    90b2:	7d1a      	ldrb	r2, [r3, #20]
    90b4:	2a02      	cmp	r2, #2
    90b6:	d008      	beq.n	90ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    90b8:	7d5b      	ldrb	r3, [r3, #21]
    90ba:	2b02      	cmp	r3, #2
    90bc:	d009      	beq.n	90d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    90be:	2a03      	cmp	r2, #3
    90c0:	d003      	beq.n	90ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    90c2:	2b03      	cmp	r3, #3
    90c4:	d005      	beq.n	90d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    90c6:	2000      	movs	r0, #0
    90c8:	4770      	bx	lr
    90ca:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    90ce:	8b00      	ldrh	r0, [r0, #24]
    90d0:	4770      	bx	lr
    90d2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    90d6:	8b40      	ldrh	r0, [r0, #26]
    90d8:	4770      	bx	lr
    90da:	b109      	cbz	r1, 90e0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    90dc:	2100      	movs	r1, #0
    90de:	e000      	b.n	90e2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    90e0:	2102      	movs	r1, #2
    90e2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    90e6:	8b01      	ldrh	r1, [r0, #24]
    90e8:	b911      	cbnz	r1, 90f0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    90ea:	8b40      	ldrh	r0, [r0, #26]
    90ec:	2800      	cmp	r0, #0
    90ee:	d000      	beq.n	90f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    90f0:	2001      	movs	r0, #1
    90f2:	4770      	bx	lr
    90f4:	b538      	push	{r3, r4, r5, lr}
    90f6:	7883      	ldrb	r3, [r0, #2]
    90f8:	f88d 3000 	strb.w	r3, [sp]
    90fc:	9b00      	ldr	r3, [sp, #0]
    90fe:	9300      	str	r3, [sp, #0]
    9100:	f89d 3000 	ldrb.w	r3, [sp]
    9104:	b95b      	cbnz	r3, 911e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    9106:	2400      	movs	r4, #0
    9108:	b10a      	cbz	r2, 910e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    910a:	2300      	movs	r3, #0
    910c:	e000      	b.n	9110 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    910e:	2302      	movs	r3, #2
    9110:	18c2      	adds	r2, r0, r3
    9112:	7d15      	ldrb	r5, [r2, #20]
    9114:	2d02      	cmp	r5, #2
    9116:	d004      	beq.n	9122 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    9118:	7d52      	ldrb	r2, [r2, #21]
    911a:	2a02      	cmp	r2, #2
    911c:	d004      	beq.n	9128 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    911e:	2000      	movs	r0, #0
    9120:	bd38      	pop	{r3, r4, r5, pc}
    9122:	461a      	mov	r2, r3
    9124:	1c5b      	adds	r3, r3, #1
    9126:	e000      	b.n	912a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    9128:	1c5a      	adds	r2, r3, #1
    912a:	b179      	cbz	r1, 914c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    912c:	18c5      	adds	r5, r0, r3
    912e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    9132:	752c      	strb	r4, [r5, #20]
    9134:	831c      	strh	r4, [r3, #24]
    9136:	2303      	movs	r3, #3
    9138:	1884      	adds	r4, r0, r2
    913a:	7523      	strb	r3, [r4, #20]
    913c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9140:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    9144:	685b      	ldr	r3, [r3, #4]
    9146:	600b      	str	r3, [r1, #0]
    9148:	8b00      	ldrh	r0, [r0, #24]
    914a:	8088      	strh	r0, [r1, #4]
    914c:	2001      	movs	r0, #1
    914e:	bd38      	pop	{r3, r4, r5, pc}
    9150:	b510      	push	{r4, lr}
    9152:	b109      	cbz	r1, 9158 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    9154:	2100      	movs	r1, #0
    9156:	e000      	b.n	915a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    9158:	2102      	movs	r1, #2
    915a:	1843      	adds	r3, r0, r1
    915c:	7d1c      	ldrb	r4, [r3, #20]
    915e:	4294      	cmp	r4, r2
    9160:	d103      	bne.n	916a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    9162:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    9166:	8b00      	ldrh	r0, [r0, #24]
    9168:	bd10      	pop	{r4, pc}
    916a:	7d5b      	ldrb	r3, [r3, #21]
    916c:	4293      	cmp	r3, r2
    916e:	d103      	bne.n	9178 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    9170:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    9174:	8b40      	ldrh	r0, [r0, #26]
    9176:	bd10      	pop	{r4, pc}
    9178:	2000      	movs	r0, #0
    917a:	bd10      	pop	{r4, pc}
    917c:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    9180:	d201      	bcs.n	9186 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    9182:	0841      	lsrs	r1, r0, #1
    9184:	e000      	b.n	9188 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    9186:	21ff      	movs	r1, #255	; 0xff
    9188:	1a40      	subs	r0, r0, r1
    918a:	f240 6172 	movw	r1, #1650	; 0x672
    918e:	4288      	cmp	r0, r1
    9190:	db00      	blt.n	9194 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    9192:	4608      	mov	r0, r1
    9194:	b280      	uxth	r0, r0
    9196:	4770      	bx	lr

00009198 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    9198:	2101      	movs	r1, #1
    919a:	f7ff bf85 	b.w	90a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000919e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    919e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    91a2:	4606      	mov	r6, r0
    91a4:	f342 0780 	sbfx	r7, r2, #2, #1
    91a8:	7848      	ldrb	r0, [r1, #1]
    91aa:	460c      	mov	r4, r1
    91ac:	f022 0504 	bic.w	r5, r2, #4
    91b0:	1c7f      	adds	r7, r7, #1
    91b2:	b100      	cbz	r0, 91b6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    91b4:	b90d      	cbnz	r5, 91ba <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    91b6:	4328      	orrs	r0, r5
    91b8:	d104      	bne.n	91c4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    91ba:	b145      	cbz	r5, 91ce <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    91bc:	2100      	movs	r1, #0
    91be:	4620      	mov	r0, r4
    91c0:	f7fb fce2 	bl	4b88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    91c4:	20ff      	movs	r0, #255	; 0xff
    91c6:	70a0      	strb	r0, [r4, #2]
    91c8:	b11f      	cbz	r7, 91d2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    91ca:	2000      	movs	r0, #0
    91cc:	e002      	b.n	91d4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    91ce:	2101      	movs	r1, #1
    91d0:	e7f5      	b.n	91be <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    91d2:	2002      	movs	r0, #2
    91d4:	1821      	adds	r1, r4, r0
    91d6:	7d09      	ldrb	r1, [r1, #20]
    91d8:	2903      	cmp	r1, #3
    91da:	d102      	bne.n	91e2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    91dc:	2d02      	cmp	r5, #2
    91de:	d000      	beq.n	91e2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    91e0:	1c40      	adds	r0, r0, #1
    91e2:	1822      	adds	r2, r4, r0
    91e4:	2101      	movs	r1, #1
    91e6:	7511      	strb	r1, [r2, #20]
    91e8:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    91ec:	2200      	movs	r2, #0
    91ee:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    91f2:	830a      	strh	r2, [r1, #24]
    91f4:	6840      	ldr	r0, [r0, #4]
    91f6:	70a2      	strb	r2, [r4, #2]
    91f8:	4631      	mov	r1, r6
    91fa:	f362 010f 	bfi	r1, r2, #0, #16
    91fe:	e9c6 0100 	strd	r0, r1, [r6]
    9202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009206 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    9206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    920a:	461e      	mov	r6, r3
    920c:	4613      	mov	r3, r2
    920e:	4604      	mov	r4, r0
    9210:	b109      	cbz	r1, 9216 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    9212:	2000      	movs	r0, #0
    9214:	e000      	b.n	9218 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    9216:	2002      	movs	r0, #2
    9218:	21ff      	movs	r1, #255	; 0xff
    921a:	70a1      	strb	r1, [r4, #2]
    921c:	1821      	adds	r1, r4, r0
    921e:	7d0a      	ldrb	r2, [r1, #20]
    9220:	2a01      	cmp	r2, #1
    9222:	d003      	beq.n	922c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    9224:	7d49      	ldrb	r1, [r1, #21]
    9226:	2901      	cmp	r1, #1
    9228:	d10c      	bne.n	9244 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    922a:	1c40      	adds	r0, r0, #1
    922c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    9230:	2700      	movs	r7, #0
    9232:	8b29      	ldrh	r1, [r5, #24]
    9234:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    9238:	198a      	adds	r2, r1, r6
    923a:	4562      	cmp	r2, ip
    923c:	d905      	bls.n	924a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    923e:	4420      	add	r0, r4
    9240:	832f      	strh	r7, [r5, #24]
    9242:	7507      	strb	r7, [r0, #20]
    9244:	2000      	movs	r0, #0
    9246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    924a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    924e:	4632      	mov	r2, r6
    9250:	6840      	ldr	r0, [r0, #4]
    9252:	4408      	add	r0, r1
    9254:	4619      	mov	r1, r3
    9256:	f7ff f940 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    925a:	8b28      	ldrh	r0, [r5, #24]
    925c:	4430      	add	r0, r6
    925e:	8328      	strh	r0, [r5, #24]
    9260:	70a7      	strb	r7, [r4, #2]
    9262:	2001      	movs	r0, #1
    9264:	e7ef      	b.n	9246 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

00009266 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    9266:	2202      	movs	r2, #2
    9268:	2100      	movs	r1, #0
    926a:	f7ff bf71 	b.w	9150 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000926e <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    926e:	b510      	push	{r4, lr}
    9270:	2101      	movs	r1, #1
    9272:	f7ff ff32 	bl	90da <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    9276:	2800      	cmp	r0, #0
    9278:	d000      	beq.n	927c <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    927a:	2001      	movs	r0, #1
    927c:	bd10      	pop	{r4, pc}

0000927e <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    927e:	2201      	movs	r2, #1
    9280:	f7ff bf38 	b.w	90f4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

00009284 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    9284:	2200      	movs	r2, #0
    9286:	f7ff bf35 	b.w	90f4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000928a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    928a:	b570      	push	{r4, r5, r6, lr}
    928c:	b109      	cbz	r1, 9292 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    928e:	2300      	movs	r3, #0
    9290:	e000      	b.n	9294 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    9292:	2302      	movs	r3, #2
    9294:	21ff      	movs	r1, #255	; 0xff
    9296:	7081      	strb	r1, [r0, #2]
    9298:	18c1      	adds	r1, r0, r3
    929a:	2402      	movs	r4, #2
    929c:	7d0d      	ldrb	r5, [r1, #20]
    929e:	2d01      	cmp	r5, #1
    92a0:	d007      	beq.n	92b2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    92a2:	7d4d      	ldrb	r5, [r1, #21]
    92a4:	2d01      	cmp	r5, #1
    92a6:	d009      	beq.n	92bc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    92a8:	f44f 718b 	mov.w	r1, #278	; 0x116
    92ac:	2009      	movs	r0, #9
    92ae:	f7fb f8a1 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92b2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    92b6:	831a      	strh	r2, [r3, #24]
    92b8:	750c      	strb	r4, [r1, #20]
    92ba:	e003      	b.n	92c4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    92bc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    92c0:	835a      	strh	r2, [r3, #26]
    92c2:	754c      	strb	r4, [r1, #21]
    92c4:	2100      	movs	r1, #0
    92c6:	7081      	strb	r1, [r0, #2]
    92c8:	bd70      	pop	{r4, r5, r6, pc}

000092ca <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    92ca:	2101      	movs	r1, #1
    92cc:	7001      	strb	r1, [r0, #0]
    92ce:	4770      	bx	lr

000092d0 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    92d0:	2201      	movs	r2, #1
    92d2:	4611      	mov	r1, r2
    92d4:	f7ff bf3c 	b.w	9150 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

000092d8 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    92d8:	2201      	movs	r2, #1
    92da:	2100      	movs	r1, #0
    92dc:	f7ff bf38 	b.w	9150 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

000092e0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    92e0:	2100      	movs	r1, #0
    92e2:	f7ff bee1 	b.w	90a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    92e6:	2800      	cmp	r0, #0
    92e8:	db09      	blt.n	92fe <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    92ea:	f000 021f 	and.w	r2, r0, #31
    92ee:	2101      	movs	r1, #1
    92f0:	4091      	lsls	r1, r2
    92f2:	0940      	lsrs	r0, r0, #5
    92f4:	0080      	lsls	r0, r0, #2
    92f6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    92fa:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    92fe:	4770      	bx	lr
    9300:	2800      	cmp	r0, #0
    9302:	db0d      	blt.n	9320 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    9304:	f000 021f 	and.w	r2, r0, #31
    9308:	2101      	movs	r1, #1
    930a:	4091      	lsls	r1, r2
    930c:	0940      	lsrs	r0, r0, #5
    930e:	0080      	lsls	r0, r0, #2
    9310:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9314:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9318:	f3bf 8f4f 	dsb	sy
    931c:	f3bf 8f6f 	isb	sy
    9320:	4770      	bx	lr
    9322:	b510      	push	{r4, lr}
    9324:	200e      	movs	r0, #14
    9326:	f7ff ffeb 	bl	9300 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    932a:	200e      	movs	r0, #14
    932c:	f7ff ffdb 	bl	92e6 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    9330:	200f      	movs	r0, #15
    9332:	f7ff ffe5 	bl	9300 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    9336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    933a:	200f      	movs	r0, #15
    933c:	f7ff bfd3 	b.w	92e6 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    9340:	2800      	cmp	r0, #0
    9342:	db09      	blt.n	9358 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    9344:	f000 021f 	and.w	r2, r0, #31
    9348:	2101      	movs	r1, #1
    934a:	4091      	lsls	r1, r2
    934c:	0940      	lsrs	r0, r0, #5
    934e:	0080      	lsls	r0, r0, #2
    9350:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9354:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9358:	4770      	bx	lr
    935a:	5840      	ldr	r0, [r0, r1]
    935c:	2800      	cmp	r0, #0
    935e:	d000      	beq.n	9362 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    9360:	2001      	movs	r0, #1
    9362:	4770      	bx	lr

00009364 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    9364:	b510      	push	{r4, lr}
    9366:	4604      	mov	r4, r0
    9368:	4620      	mov	r0, r4
    936a:	f7fb fd17 	bl	4d9c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    936e:	2811      	cmp	r0, #17
    9370:	d0fa      	beq.n	9368 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    9372:	bd10      	pop	{r4, pc}

00009374 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    9374:	b510      	push	{r4, lr}
    9376:	f7ff fff5 	bl	9364 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    937a:	2800      	cmp	r0, #0
    937c:	d003      	beq.n	9386 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    937e:	21a0      	movs	r1, #160	; 0xa0
    9380:	201d      	movs	r0, #29
    9382:	f7fb f837 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9386:	bd10      	pop	{r4, pc}

00009388 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    9388:	f7fb bde6 	b.w	4f58 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0xc>

0000938c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    938c:	b510      	push	{r4, lr}
    938e:	4050      	eors	r0, r2
    9390:	780a      	ldrb	r2, [r1, #0]
    9392:	781c      	ldrb	r4, [r3, #0]
    9394:	4062      	eors	r2, r4
    9396:	4410      	add	r0, r2
    9398:	784a      	ldrb	r2, [r1, #1]
    939a:	785c      	ldrb	r4, [r3, #1]
    939c:	4062      	eors	r2, r4
    939e:	4410      	add	r0, r2
    93a0:	788a      	ldrb	r2, [r1, #2]
    93a2:	789c      	ldrb	r4, [r3, #2]
    93a4:	4062      	eors	r2, r4
    93a6:	4410      	add	r0, r2
    93a8:	78ca      	ldrb	r2, [r1, #3]
    93aa:	78dc      	ldrb	r4, [r3, #3]
    93ac:	4062      	eors	r2, r4
    93ae:	4410      	add	r0, r2
    93b0:	790a      	ldrb	r2, [r1, #4]
    93b2:	791c      	ldrb	r4, [r3, #4]
    93b4:	7949      	ldrb	r1, [r1, #5]
    93b6:	4062      	eors	r2, r4
    93b8:	4410      	add	r0, r2
    93ba:	795a      	ldrb	r2, [r3, #5]
    93bc:	4051      	eors	r1, r2
    93be:	42c1      	cmn	r1, r0
    93c0:	d101      	bne.n	93c6 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    93c2:	2001      	movs	r0, #1
    93c4:	bd10      	pop	{r4, pc}
    93c6:	2000      	movs	r0, #0
    93c8:	bd10      	pop	{r4, pc}

000093ca <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    93ca:	b510      	push	{r4, lr}
    93cc:	2900      	cmp	r1, #0
    93ce:	4604      	mov	r4, r0
    93d0:	f04f 0106 	mov.w	r1, #6
    93d4:	d002      	beq.n	93dc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    93d6:	f7fb f86d 	bl	44b4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    93da:	e001      	b.n	93e0 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    93dc:	f7fb f878 	bl	44d0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    93e0:	7960      	ldrb	r0, [r4, #5]
    93e2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    93e6:	7160      	strb	r0, [r4, #5]
    93e8:	bd10      	pop	{r4, pc}

000093ea <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    93ea:	4770      	bx	lr

000093ec <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    93ec:	b530      	push	{r4, r5, lr}
    93ee:	460c      	mov	r4, r1
    93f0:	4605      	mov	r5, r0
    93f2:	b08d      	sub	sp, #52	; 0x34
    93f4:	f04f 0103 	mov.w	r1, #3
    93f8:	f104 0003 	add.w	r0, r4, #3
    93fc:	b112      	cbz	r2, 9404 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    93fe:	f7fb f859 	bl	44b4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9402:	e001      	b.n	9408 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    9404:	f7fb f864 	bl	44d0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    9408:	7960      	ldrb	r0, [r4, #5]
    940a:	220d      	movs	r2, #13
    940c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    9410:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    9414:	7160      	strb	r0, [r4, #5]
    9416:	2100      	movs	r1, #0
    9418:	a804      	add	r0, sp, #16
    941a:	f7ff f8d8 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    941e:	78e0      	ldrb	r0, [r4, #3]
    9420:	f88d 001f 	strb.w	r0, [sp, #31]
    9424:	7920      	ldrb	r0, [r4, #4]
    9426:	f88d 001e 	strb.w	r0, [sp, #30]
    942a:	7960      	ldrb	r0, [r4, #5]
    942c:	f88d 001d 	strb.w	r0, [sp, #29]
    9430:	2210      	movs	r2, #16
    9432:	4629      	mov	r1, r5
    9434:	4668      	mov	r0, sp
    9436:	f7ff f850 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    943a:	4668      	mov	r0, sp
    943c:	f7ff ff9a 	bl	9374 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    9440:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    9444:	7020      	strb	r0, [r4, #0]
    9446:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    944a:	7060      	strb	r0, [r4, #1]
    944c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9450:	70a0      	strb	r0, [r4, #2]
    9452:	b00d      	add	sp, #52	; 0x34
    9454:	bd30      	pop	{r4, r5, pc}

00009456 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    9456:	2101      	movs	r1, #1
    9458:	f7fb bedc 	b.w	5214 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000945c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    945c:	b510      	push	{r4, lr}
    945e:	f001 fb23 	bl	aaa8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    9462:	b118      	cbz	r0, 946c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    9464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9468:	f7fd bd46 	b.w	6ef8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    946c:	20ff      	movs	r0, #255	; 0xff
    946e:	bd10      	pop	{r4, pc}

00009470 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    9470:	b510      	push	{r4, lr}
    9472:	f7fb ff17 	bl	52a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    9476:	2810      	cmp	r0, #16
    9478:	d003      	beq.n	9482 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    947a:	f7fb fee3 	bl	5244 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    947e:	2810      	cmp	r0, #16
    9480:	d100      	bne.n	9484 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    9482:	2008      	movs	r0, #8
    9484:	bd10      	pop	{r4, pc}

00009486 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    9486:	b510      	push	{r4, lr}
    9488:	f7fb ff0c 	bl	52a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    948c:	2810      	cmp	r0, #16
    948e:	d003      	beq.n	9498 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    9490:	f7fb ff66 	bl	5360 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    9494:	2001      	movs	r0, #1
    9496:	bd10      	pop	{r4, pc}
    9498:	2000      	movs	r0, #0
    949a:	bd10      	pop	{r4, pc}

0000949c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    949c:	b570      	push	{r4, r5, r6, lr}
    949e:	460e      	mov	r6, r1
    94a0:	b08c      	sub	sp, #48	; 0x30
    94a2:	4614      	mov	r4, r2
    94a4:	4601      	mov	r1, r0
    94a6:	461d      	mov	r5, r3
    94a8:	2210      	movs	r2, #16
    94aa:	4668      	mov	r0, sp
    94ac:	f000 f88b 	bl	95c6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    94b0:	2210      	movs	r2, #16
    94b2:	4631      	mov	r1, r6
    94b4:	a804      	add	r0, sp, #16
    94b6:	f000 f886 	bl	95c6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    94ba:	4668      	mov	r0, sp
    94bc:	f7ff ff5a 	bl	9374 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    94c0:	a908      	add	r1, sp, #32
    94c2:	f04f 0210 	mov.w	r2, #16
    94c6:	4628      	mov	r0, r5
    94c8:	b11c      	cbz	r4, 94d2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    94ca:	f000 f87c 	bl	95c6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    94ce:	b00c      	add	sp, #48	; 0x30
    94d0:	bd70      	pop	{r4, r5, r6, pc}
    94d2:	f7ff f802 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    94d6:	e7fa      	b.n	94ce <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

000094d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    94d8:	b510      	push	{r4, lr}
    94da:	460c      	mov	r4, r1
    94dc:	2100      	movs	r1, #0
    94de:	f7ff fdac 	bl	903a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    94e2:	6060      	str	r0, [r4, #4]
    94e4:	b118      	cbz	r0, 94ee <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    94e6:	2001      	movs	r0, #1
    94e8:	7020      	strb	r0, [r4, #0]
    94ea:	2000      	movs	r0, #0
    94ec:	bd10      	pop	{r4, pc}
    94ee:	2002      	movs	r0, #2
    94f0:	bd10      	pop	{r4, pc}

000094f2 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    94f2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    94f6:	fbb0 f0f1 	udiv	r0, r0, r1
    94fa:	b280      	uxth	r0, r0
    94fc:	4770      	bx	lr

000094fe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    94fe:	f011 0f0c 	tst.w	r1, #12
    9502:	d018      	beq.n	9536 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    9504:	074a      	lsls	r2, r1, #29
    9506:	f44f 7116 	mov.w	r1, #600	; 0x258
    950a:	2a00      	cmp	r2, #0
    950c:	da02      	bge.n	9514 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    950e:	f04f 0210 	mov.w	r2, #16
    9512:	e001      	b.n	9518 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    9514:	f04f 0240 	mov.w	r2, #64	; 0x40
    9518:	da01      	bge.n	951e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    951a:	f04f 0196 	mov.w	r1, #150	; 0x96
    951e:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    9522:	eba0 0301 	sub.w	r3, r0, r1
    9526:	4288      	cmp	r0, r1
    9528:	d903      	bls.n	9532 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    952a:	fb93 f0f2 	sdiv	r0, r3, r2
    952e:	b280      	uxth	r0, r0
    9530:	4770      	bx	lr
    9532:	2000      	movs	r0, #0
    9534:	4770      	bx	lr
    9536:	2902      	cmp	r1, #2
    9538:	d008      	beq.n	954c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    953a:	2870      	cmp	r0, #112	; 0x70
    953c:	d9f9      	bls.n	9532 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    953e:	3870      	subs	r0, #112	; 0x70
    9540:	17c1      	asrs	r1, r0, #31
    9542:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    9546:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    954a:	4770      	bx	lr
    954c:	283c      	cmp	r0, #60	; 0x3c
    954e:	d9f0      	bls.n	9532 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    9550:	383c      	subs	r0, #60	; 0x3c
    9552:	17c1      	asrs	r1, r0, #31
    9554:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    9558:	f3c0 008f 	ubfx	r0, r0, #2, #16
    955c:	4770      	bx	lr

0000955e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    955e:	6809      	ldr	r1, [r1, #0]
    9560:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    9564:	4770      	bx	lr

00009566 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    9566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    956a:	4607      	mov	r7, r0
    956c:	460e      	mov	r6, r1
    956e:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    9572:	f7f8 fe1d 	bl	21b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    9576:	b198      	cbz	r0, 95a0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    9578:	b31e      	cbz	r6, 95c2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    957a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    957e:	1b40      	subs	r0, r0, r5
    9580:	2300      	movs	r3, #0
    9582:	eb61 0104 	sbc.w	r1, r1, r4
    9586:	461a      	mov	r2, r3
    9588:	1a1b      	subs	r3, r3, r0
    958a:	418a      	sbcs	r2, r1
    958c:	da19      	bge.n	95c2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    958e:	1c42      	adds	r2, r0, #1
    9590:	f171 0100 	sbcs.w	r1, r1, #0
    9594:	db07      	blt.n	95a6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    9596:	f240 2129 	movw	r1, #553	; 0x229
    959a:	2029      	movs	r0, #41	; 0x29
    959c:	f7fa ff2a 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95a0:	f240 211f 	movw	r1, #543	; 0x21f
    95a4:	e7f9      	b.n	959a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    95a6:	4430      	add	r0, r6
    95a8:	1e40      	subs	r0, r0, #1
    95aa:	fbb0 f1f6 	udiv	r1, r0, r6
    95ae:	fb01 f006 	mul.w	r0, r1, r6
    95b2:	1828      	adds	r0, r5, r0
    95b4:	f144 0400 	adc.w	r4, r4, #0
    95b8:	e9c7 0404 	strd	r0, r4, [r7, #16]
    95bc:	4608      	mov	r0, r1
    95be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    95c2:	2000      	movs	r0, #0
    95c4:	e7fb      	b.n	95be <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

000095c6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    95c6:	b530      	push	{r4, r5, lr}
    95c8:	4613      	mov	r3, r2
    95ca:	e006      	b.n	95da <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    95cc:	18cc      	adds	r4, r1, r3
    95ce:	1ad5      	subs	r5, r2, r3
    95d0:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    95d4:	1e5b      	subs	r3, r3, #1
    95d6:	5544      	strb	r4, [r0, r5]
    95d8:	b2db      	uxtb	r3, r3
    95da:	2b00      	cmp	r3, #0
    95dc:	d1f6      	bne.n	95cc <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    95de:	bd30      	pop	{r4, r5, pc}

000095e0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    95e0:	b510      	push	{r4, lr}
    95e2:	2300      	movs	r3, #0
    95e4:	461a      	mov	r2, r3
    95e6:	e003      	b.n	95f0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    95e8:	5c84      	ldrb	r4, [r0, r2]
    95ea:	4323      	orrs	r3, r4
    95ec:	1c52      	adds	r2, r2, #1
    95ee:	b2d2      	uxtb	r2, r2
    95f0:	428a      	cmp	r2, r1
    95f2:	d3f9      	bcc.n	95e8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    95f4:	b10b      	cbz	r3, 95fa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    95f6:	2000      	movs	r0, #0
    95f8:	bd10      	pop	{r4, pc}
    95fa:	2001      	movs	r0, #1
    95fc:	bd10      	pop	{r4, pc}

000095fe <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    95fe:	b570      	push	{r4, r5, r6, lr}
    9600:	4604      	mov	r4, r0
    9602:	1c40      	adds	r0, r0, #1
    9604:	4288      	cmp	r0, r1
    9606:	d004      	beq.n	9612 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    9608:	6808      	ldr	r0, [r1, #0]
    960a:	f8c4 0001 	str.w	r0, [r4, #1]
    960e:	7908      	ldrb	r0, [r1, #4]
    9610:	7160      	strb	r0, [r4, #5]
    9612:	7960      	ldrb	r0, [r4, #5]
    9614:	f000 001f 	and.w	r0, r0, #31
    9618:	7160      	strb	r0, [r4, #5]
    961a:	2000      	movs	r0, #0
    961c:	72e0      	strb	r0, [r4, #11]
    961e:	4605      	mov	r5, r0
    9620:	1966      	adds	r6, r4, r5
    9622:	7870      	ldrb	r0, [r6, #1]
    9624:	f000 f8ca 	bl	97bc <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    9628:	71b0      	strb	r0, [r6, #6]
    962a:	7ae1      	ldrb	r1, [r4, #11]
    962c:	1c6d      	adds	r5, r5, #1
    962e:	4408      	add	r0, r1
    9630:	b2ed      	uxtb	r5, r5
    9632:	72e0      	strb	r0, [r4, #11]
    9634:	2d05      	cmp	r5, #5
    9636:	d3f3      	bcc.n	9620 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    9638:	bd70      	pop	{r4, r5, r6, pc}

0000963a <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    963a:	7802      	ldrb	r2, [r0, #0]
    963c:	f002 020f 	and.w	r2, r2, #15
    9640:	2a03      	cmp	r2, #3
    9642:	d003      	beq.n	964c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    9644:	2a05      	cmp	r2, #5
    9646:	d104      	bne.n	9652 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    9648:	f000 b85f 	b.w	970a <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x22>
    964c:	7840      	ldrb	r0, [r0, #1]
    964e:	280c      	cmp	r0, #12
    9650:	d001      	beq.n	9656 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    9652:	2000      	movs	r0, #0
    9654:	4770      	bx	lr
    9656:	2001      	movs	r0, #1
    9658:	4770      	bx	lr

0000965a <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    965a:	b570      	push	{r4, r5, r6, lr}
    965c:	4614      	mov	r4, r2
    965e:	4605      	mov	r5, r0
    9660:	2a1f      	cmp	r2, #31
    9662:	d903      	bls.n	966c <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    9664:	21f1      	movs	r1, #241	; 0xf1
    9666:	202a      	movs	r0, #42	; 0x2a
    9668:	f7fa fec4 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    966c:	f105 0009 	add.w	r0, r5, #9
    9670:	f7fe ff33 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9674:	1da4      	adds	r4, r4, #6
    9676:	706c      	strb	r4, [r5, #1]
    9678:	bd70      	pop	{r4, r5, r6, pc}

0000967a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    967a:	b510      	push	{r4, lr}
    967c:	7802      	ldrb	r2, [r0, #0]
    967e:	f001 030f 	and.w	r3, r1, #15
    9682:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    9686:	431a      	orrs	r2, r3
    9688:	7002      	strb	r2, [r0, #0]
    968a:	2907      	cmp	r1, #7
    968c:	d20c      	bcs.n	96a8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    968e:	e8df f001 	tbb	[pc, r1]
    9692:	0604      	.short	0x0604
    9694:	08040604 	.word	0x08040604
    9698:	0004      	.short	0x0004
    969a:	2106      	movs	r1, #6
    969c:	e002      	b.n	96a4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    969e:	210c      	movs	r1, #12
    96a0:	e000      	b.n	96a4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    96a2:	2122      	movs	r1, #34	; 0x22
    96a4:	7041      	strb	r1, [r0, #1]
    96a6:	bd10      	pop	{r4, pc}
    96a8:	21ab      	movs	r1, #171	; 0xab
    96aa:	202a      	movs	r0, #42	; 0x2a
    96ac:	f7fa fea2 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000096b0 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    96b0:	680a      	ldr	r2, [r1, #0]
    96b2:	f840 2f09 	str.w	r2, [r0, #9]!
    96b6:	8889      	ldrh	r1, [r1, #4]
    96b8:	8081      	strh	r1, [r0, #4]
    96ba:	4770      	bx	lr

000096bc <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    96bc:	7802      	ldrb	r2, [r0, #0]
    96be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    96c2:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    96c6:	7002      	strb	r2, [r0, #0]
    96c8:	4770      	bx	lr

000096ca <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    96ca:	680a      	ldr	r2, [r1, #0]
    96cc:	f840 2f03 	str.w	r2, [r0, #3]!
    96d0:	8889      	ldrh	r1, [r1, #4]
    96d2:	8081      	strh	r1, [r0, #4]
    96d4:	4770      	bx	lr

000096d6 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    96d6:	7802      	ldrb	r2, [r0, #0]
    96d8:	2340      	movs	r3, #64	; 0x40
    96da:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    96de:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    96e2:	430a      	orrs	r2, r1
    96e4:	7002      	strb	r2, [r0, #0]
    96e6:	4770      	bx	lr

000096e8 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    96e8:	b570      	push	{r4, r5, r6, lr}
    96ea:	4614      	mov	r4, r2
    96ec:	4605      	mov	r5, r0
    96ee:	2a1f      	cmp	r2, #31
    96f0:	d904      	bls.n	96fc <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    96f2:	f240 1113 	movw	r1, #275	; 0x113
    96f6:	202a      	movs	r0, #42	; 0x2a
    96f8:	f7fa fe7c 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96fc:	f105 0009 	add.w	r0, r5, #9
    9700:	f7fe feeb 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9704:	1da4      	adds	r4, r4, #6
    9706:	706c      	strb	r4, [r5, #1]
    9708:	bd70      	pop	{r4, r5, r6, pc}
    970a:	b570      	push	{r4, r5, r6, lr}
    970c:	f8d0 201f 	ldr.w	r2, [r0, #31]
    9710:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    9714:	f012 0fff 	tst.w	r2, #255	; 0xff
    9718:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    971c:	d108      	bne.n	9730 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    971e:	f3c2 2407 	ubfx	r4, r2, #8, #8
    9722:	b92c      	cbnz	r4, 9730 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    9724:	f3c2 4407 	ubfx	r4, r2, #16, #8
    9728:	b914      	cbnz	r4, 9730 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    972a:	0e12      	lsrs	r2, r2, #24
    972c:	d100      	bne.n	9730 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    972e:	b34b      	cbz	r3, 9784 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9730:	7846      	ldrb	r6, [r0, #1]
    9732:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    9736:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    973a:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    973e:	7d83      	ldrb	r3, [r0, #22]
    9740:	2e22      	cmp	r6, #34	; 0x22
    9742:	d11f      	bne.n	9784 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9744:	b131      	cbz	r1, 9754 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x6c>
    9746:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    974a:	d903      	bls.n	9754 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x6c>
    974c:	f640 5107 	movw	r1, #3335	; 0xd07
    9750:	428a      	cmp	r2, r1
    9752:	d90b      	bls.n	976c <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x84>
    9754:	1f91      	subs	r1, r2, #6
    9756:	f640 467a 	movw	r6, #3194	; 0xc7a
    975a:	42b1      	cmp	r1, r6
    975c:	d812      	bhi.n	9784 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    975e:	b18b      	cbz	r3, 9784 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9760:	2b08      	cmp	r3, #8
    9762:	d80f      	bhi.n	9784 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9764:	4293      	cmp	r3, r2
    9766:	d20d      	bcs.n	9784 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9768:	4295      	cmp	r5, r2
    976a:	d80b      	bhi.n	9784 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    976c:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    9770:	d208      	bcs.n	9784 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9772:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    9776:	f640 4176 	movw	r1, #3190	; 0xc76
    977a:	380a      	subs	r0, #10
    977c:	4288      	cmp	r0, r1
    977e:	d801      	bhi.n	9784 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9780:	2001      	movs	r0, #1
    9782:	bd70      	pop	{r4, r5, r6, pc}
    9784:	2000      	movs	r0, #0
    9786:	bd70      	pop	{r4, r5, r6, pc}

00009788 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    9788:	f7fc b87e 	b.w	5888 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x200>

0000978c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    978c:	6800      	ldr	r0, [r0, #0]
    978e:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    9792:	4290      	cmp	r0, r2
    9794:	d903      	bls.n	979e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    9796:	1a40      	subs	r0, r0, r1
    9798:	389c      	subs	r0, #156	; 0x9c
    979a:	0840      	lsrs	r0, r0, #1
    979c:	4770      	bx	lr
    979e:	2000      	movs	r0, #0
    97a0:	4770      	bx	lr
    97a2:	b510      	push	{r4, lr}
    97a4:	4604      	mov	r4, r0
    97a6:	2108      	movs	r1, #8
    97a8:	4620      	mov	r0, r4
    97aa:	f7fa fe91 	bl	44d0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    97ae:	6820      	ldr	r0, [r4, #0]
    97b0:	2800      	cmp	r0, #0
    97b2:	d102      	bne.n	97ba <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x2e>
    97b4:	6860      	ldr	r0, [r4, #4]
    97b6:	2800      	cmp	r0, #0
    97b8:	d0f5      	beq.n	97a6 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x1a>
    97ba:	bd10      	pop	{r4, pc}

000097bc <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    97bc:	f000 0155 	and.w	r1, r0, #85	; 0x55
    97c0:	2255      	movs	r2, #85	; 0x55
    97c2:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    97c6:	4408      	add	r0, r1
    97c8:	f000 0133 	and.w	r1, r0, #51	; 0x33
    97cc:	2233      	movs	r2, #51	; 0x33
    97ce:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    97d2:	4408      	add	r0, r1
    97d4:	f000 010f 	and.w	r1, r0, #15
    97d8:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    97dc:	4770      	bx	lr
    97de:	2801      	cmp	r0, #1
    97e0:	d102      	bne.n	97e8 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x2c>
    97e2:	7948      	ldrb	r0, [r1, #5]
    97e4:	0980      	lsrs	r0, r0, #6
    97e6:	d001      	beq.n	97ec <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x30>
    97e8:	2000      	movs	r0, #0
    97ea:	4770      	bx	lr
    97ec:	2001      	movs	r0, #1
    97ee:	4770      	bx	lr
    97f0:	2801      	cmp	r0, #1
    97f2:	d106      	bne.n	9802 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x46>
    97f4:	7948      	ldrb	r0, [r1, #5]
    97f6:	2101      	movs	r1, #1
    97f8:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    97fc:	d101      	bne.n	9802 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x46>
    97fe:	2001      	movs	r0, #1
    9800:	4770      	bx	lr
    9802:	2000      	movs	r0, #0
    9804:	4770      	bx	lr
    9806:	2802      	cmp	r0, #2
    9808:	d003      	beq.n	9812 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x56>
    980a:	2803      	cmp	r0, #3
    980c:	d001      	beq.n	9812 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x56>
    980e:	2000      	movs	r0, #0
    9810:	4770      	bx	lr
    9812:	2001      	movs	r0, #1
    9814:	4770      	bx	lr

00009816 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    9816:	b510      	push	{r4, lr}
    9818:	4604      	mov	r4, r0
    981a:	7c00      	ldrb	r0, [r0, #16]
    981c:	f7ff fff3 	bl	9806 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x4a>
    9820:	b148      	cbz	r0, 9836 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    9822:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    9826:	f104 0158 	add.w	r1, r4, #88	; 0x58
    982a:	f7ff fe21 	bl	9470 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    982e:	2808      	cmp	r0, #8
    9830:	d001      	beq.n	9836 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    9832:	2001      	movs	r0, #1
    9834:	bd10      	pop	{r4, pc}
    9836:	7c20      	ldrb	r0, [r4, #16]
    9838:	b118      	cbz	r0, 9842 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    983a:	2802      	cmp	r0, #2
    983c:	d001      	beq.n	9842 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    983e:	7de0      	ldrb	r0, [r4, #23]
    9840:	bd10      	pop	{r4, pc}
    9842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9846:	2000      	movs	r0, #0
    9848:	f7fb bbc0 	b.w	4fcc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000984c <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    984c:	b508      	push	{r3, lr}
    984e:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    9852:	f88d 1000 	strb.w	r1, [sp]
    9856:	9900      	ldr	r1, [sp, #0]
    9858:	9100      	str	r1, [sp, #0]
    985a:	f89d 1000 	ldrb.w	r1, [sp]
    985e:	b109      	cbz	r1, 9864 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    9860:	2001      	movs	r0, #1
    9862:	bd08      	pop	{r3, pc}
    9864:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    9868:	f88d 0000 	strb.w	r0, [sp]
    986c:	9800      	ldr	r0, [sp, #0]
    986e:	9000      	str	r0, [sp, #0]
    9870:	f89d 0000 	ldrb.w	r0, [sp]
    9874:	2000      	movs	r0, #0
    9876:	bd08      	pop	{r3, pc}

00009878 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    9878:	20ff      	movs	r0, #255	; 0xff
    987a:	7008      	strb	r0, [r1, #0]
    987c:	6b48      	ldr	r0, [r1, #52]	; 0x34
    987e:	f7ff bd24 	b.w	92ca <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

00009882 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    9882:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9884:	460d      	mov	r5, r1
    9886:	4604      	mov	r4, r0
    9888:	f44f 728c 	mov.w	r2, #280	; 0x118
    988c:	2100      	movs	r1, #0
    988e:	f7fe fe9e 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9892:	20ff      	movs	r0, #255	; 0xff
    9894:	7020      	strb	r0, [r4, #0]
    9896:	207f      	movs	r0, #127	; 0x7f
    9898:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    989c:	2013      	movs	r0, #19
    989e:	8060      	strh	r0, [r4, #2]
    98a0:	f242 7010 	movw	r0, #10000	; 0x2710
    98a4:	8460      	strh	r0, [r4, #34]	; 0x22
    98a6:	f7fb f9ff 	bl	4ca8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    98aa:	4601      	mov	r1, r0
    98ac:	6360      	str	r0, [r4, #52]	; 0x34
    98ae:	2200      	movs	r2, #0
    98b0:	4668      	mov	r0, sp
    98b2:	f7ff fc74 	bl	919e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    98b6:	2200      	movs	r2, #0
    98b8:	2101      	movs	r1, #1
    98ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
    98bc:	f7ff fce5 	bl	928a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    98c0:	2204      	movs	r2, #4
    98c2:	4668      	mov	r0, sp
    98c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    98c6:	f7ff fc6a 	bl	919e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    98ca:	2200      	movs	r2, #0
    98cc:	4611      	mov	r1, r2
    98ce:	6b60      	ldr	r0, [r4, #52]	; 0x34
    98d0:	f7ff fcdb 	bl	928a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    98d4:	73a5      	strb	r5, [r4, #14]
    98d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    98da:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    98de:	f000 b9b9 	b.w	9c54 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

000098e2 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    98e2:	7880      	ldrb	r0, [r0, #2]
    98e4:	f3c0 0080 	ubfx	r0, r0, #2, #1
    98e8:	b108      	cbz	r0, 98ee <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    98ea:	2000      	movs	r0, #0
    98ec:	4770      	bx	lr
    98ee:	201f      	movs	r0, #31
    98f0:	4770      	bx	lr

000098f2 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    98f2:	f7fc bd11 	b.w	6318 <CONFIG_PM_SRAM_SIZE+0x318>

000098f6 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
    98f6:	b510      	push	{r4, lr}
    98f8:	2300      	movs	r3, #0
    98fa:	2a05      	cmp	r2, #5
    98fc:	d013      	beq.n	9926 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x30>
    98fe:	2a10      	cmp	r2, #16
    9900:	d018      	beq.n	9934 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3e>
    9902:	2a14      	cmp	r2, #20
    9904:	d038      	beq.n	9978 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x82>
    9906:	2a1d      	cmp	r2, #29
    9908:	d002      	beq.n	9910 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1a>
    990a:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    990e:	e056      	b.n	99be <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xc8>
    9910:	704b      	strb	r3, [r1, #1]
    9912:	2219      	movs	r2, #25
    9914:	700a      	strb	r2, [r1, #0]
    9916:	f850 2fbd 	ldr.w	r2, [r0, #189]!
    991a:	604a      	str	r2, [r1, #4]
    991c:	6842      	ldr	r2, [r0, #4]
    991e:	608a      	str	r2, [r1, #8]
    9920:	7a00      	ldrb	r0, [r0, #8]
    9922:	7308      	strb	r0, [r1, #12]
    9924:	bd10      	pop	{r4, pc}
    9926:	704b      	strb	r3, [r1, #1]
    9928:	2205      	movs	r2, #5
    992a:	700a      	strb	r2, [r1, #0]
    992c:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
    9930:	6048      	str	r0, [r1, #4]
    9932:	bd10      	pop	{r4, pc}
    9934:	460c      	mov	r4, r1
    9936:	704b      	strb	r3, [r1, #1]
    9938:	2111      	movs	r1, #17
    993a:	7021      	strb	r1, [r4, #0]
    993c:	f100 0176 	add.w	r1, r0, #118	; 0x76
    9940:	2220      	movs	r2, #32
    9942:	1d20      	adds	r0, r4, #4
    9944:	f7fe fdc9 	bl	84da <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9948:	2001      	movs	r0, #1
    994a:	7220      	strb	r0, [r4, #8]
    994c:	7920      	ldrb	r0, [r4, #4]
    994e:	2800      	cmp	r0, #0
    9950:	d0ef      	beq.n	9932 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    9952:	88e4      	ldrh	r4, [r4, #6]
    9954:	2100      	movs	r1, #0
    9956:	4620      	mov	r0, r4
    9958:	f7ff fb6f 	bl	903a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    995c:	2800      	cmp	r0, #0
    995e:	d0e8      	beq.n	9932 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    9960:	8800      	ldrh	r0, [r0, #0]
    9962:	f7ff fd11 	bl	9388 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    9966:	2100      	movs	r1, #0
    9968:	4620      	mov	r0, r4
    996a:	f7fa ff7d 	bl	4868 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    996e:	2800      	cmp	r0, #0
    9970:	d0df      	beq.n	9932 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    9972:	f240 216a 	movw	r1, #618	; 0x26a
    9976:	e022      	b.n	99be <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xc8>
    9978:	704b      	strb	r3, [r1, #1]
    997a:	2214      	movs	r2, #20
    997c:	700a      	strb	r2, [r1, #0]
    997e:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    9982:	604a      	str	r2, [r1, #4]
    9984:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    9988:	810a      	strh	r2, [r1, #8]
    998a:	790a      	ldrb	r2, [r1, #4]
    998c:	2a00      	cmp	r2, #0
    998e:	d0d0      	beq.n	9932 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    9990:	7880      	ldrb	r0, [r0, #2]
    9992:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    9996:	2800      	cmp	r0, #0
    9998:	d1cb      	bne.n	9932 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    999a:	88cc      	ldrh	r4, [r1, #6]
    999c:	2100      	movs	r1, #0
    999e:	4620      	mov	r0, r4
    99a0:	f7ff fb4b 	bl	903a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    99a4:	2800      	cmp	r0, #0
    99a6:	d0c4      	beq.n	9932 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    99a8:	8800      	ldrh	r0, [r0, #0]
    99aa:	f7ff fced 	bl	9388 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    99ae:	2100      	movs	r1, #0
    99b0:	4620      	mov	r0, r4
    99b2:	f7fa ff59 	bl	4868 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    99b6:	2800      	cmp	r0, #0
    99b8:	d0bb      	beq.n	9932 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    99ba:	f240 219a 	movw	r1, #666	; 0x29a
    99be:	202d      	movs	r0, #45	; 0x2d
    99c0:	f7fa fd18 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000099c4 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    99c4:	6880      	ldr	r0, [r0, #8]
    99c6:	4770      	bx	lr

000099c8 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    99c8:	2001      	movs	r0, #1
    99ca:	4770      	bx	lr

000099cc <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    99cc:	b510      	push	{r4, lr}
    99ce:	4604      	mov	r4, r0
    99d0:	3028      	adds	r0, #40	; 0x28
    99d2:	f000 f8ff 	bl	9bd4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    99d6:	8861      	ldrh	r1, [r4, #2]
    99d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    99dc:	2228      	movs	r2, #40	; 0x28
    99de:	f7fc bdcb 	b.w	6578 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

000099e2 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    99e2:	2200      	movs	r2, #0
    99e4:	8602      	strh	r2, [r0, #48]	; 0x30
    99e6:	8843      	ldrh	r3, [r0, #2]
    99e8:	2b1d      	cmp	r3, #29
    99ea:	d001      	beq.n	99f0 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    99ec:	7341      	strb	r1, [r0, #13]
    99ee:	4770      	bx	lr
    99f0:	7342      	strb	r2, [r0, #13]
    99f2:	4770      	bx	lr

000099f4 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    99f4:	b510      	push	{r4, lr}
    99f6:	2400      	movs	r4, #0
    99f8:	6b40      	ldr	r0, [r0, #52]	; 0x34
    99fa:	f7ff fc34 	bl	9266 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    99fe:	b100      	cbz	r0, 9a02 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    9a00:	2001      	movs	r0, #1
    9a02:	4384      	bics	r4, r0
    9a04:	f084 0001 	eor.w	r0, r4, #1
    9a08:	bd10      	pop	{r4, pc}

00009a0a <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    9a0a:	2000      	movs	r0, #0
    9a0c:	4770      	bx	lr

00009a0e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    9a0e:	7880      	ldrb	r0, [r0, #2]
    9a10:	f000 0001 	and.w	r0, r0, #1
    9a14:	4770      	bx	lr

00009a16 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    9a16:	7880      	ldrb	r0, [r0, #2]
    9a18:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    9a1c:	4770      	bx	lr

00009a1e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    9a1e:	2001      	movs	r0, #1
    9a20:	4770      	bx	lr

00009a22 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    9a22:	7880      	ldrb	r0, [r0, #2]
    9a24:	f3c0 0040 	ubfx	r0, r0, #1, #1
    9a28:	4770      	bx	lr

00009a2a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    9a2a:	f990 000e 	ldrsb.w	r0, [r0, #14]
    9a2e:	4770      	bx	lr

00009a30 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    9a30:	7800      	ldrb	r0, [r0, #0]
    9a32:	28ff      	cmp	r0, #255	; 0xff
    9a34:	d001      	beq.n	9a3a <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    9a36:	2001      	movs	r0, #1
    9a38:	4770      	bx	lr
    9a3a:	2000      	movs	r0, #0
    9a3c:	4770      	bx	lr

00009a3e <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    9a3e:	f800 1f20 	strb.w	r1, [r0, #32]!
    9a42:	7042      	strb	r2, [r0, #1]
    9a44:	4770      	bx	lr

00009a46 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    9a46:	680a      	ldr	r2, [r1, #0]
    9a48:	f840 2f11 	str.w	r2, [r0, #17]!
    9a4c:	8889      	ldrh	r1, [r1, #4]
    9a4e:	8081      	strh	r1, [r0, #4]
    9a50:	2101      	movs	r1, #1
    9a52:	7181      	strb	r1, [r0, #6]
    9a54:	4770      	bx	lr

00009a56 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    9a56:	7b00      	ldrb	r0, [r0, #12]
    9a58:	4770      	bx	lr

00009a5a <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    9a5a:	2001      	movs	r0, #1
    9a5c:	4770      	bx	lr

00009a5e <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    9a5e:	61c1      	str	r1, [r0, #28]
    9a60:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    9a64:	724a      	strb	r2, [r1, #9]
    9a66:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    9a6a:	f8c1 200a 	str.w	r2, [r1, #10]
    9a6e:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    9a72:	81c8      	strh	r0, [r1, #14]
    9a74:	4770      	bx	lr

00009a76 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    9a76:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    9a7a:	4770      	bx	lr

00009a7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    9a7c:	b510      	push	{r4, lr}
    9a7e:	4604      	mov	r4, r0
    9a80:	7880      	ldrb	r0, [r0, #2]
    9a82:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    9a86:	b158      	cbz	r0, 9aa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    9a88:	233c      	movs	r3, #60	; 0x3c
    9a8a:	22ff      	movs	r2, #255	; 0xff
    9a8c:	4620      	mov	r0, r4
    9a8e:	69e1      	ldr	r1, [r4, #28]
    9a90:	f7fc fc68 	bl	6364 <CONFIG_PM_SRAM_SIZE+0x364>
    9a94:	2210      	movs	r2, #16
    9a96:	4621      	mov	r1, r4
    9a98:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    9a9c:	f7fb fd1c 	bl	54d8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9aa0:	2001      	movs	r0, #1
    9aa2:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    9aa6:	bd10      	pop	{r4, pc}

00009aa8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    9aa8:	7bc0      	ldrb	r0, [r0, #15]
    9aaa:	2800      	cmp	r0, #0
    9aac:	d000      	beq.n	9ab0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    9aae:	2001      	movs	r0, #1
    9ab0:	4770      	bx	lr
    9ab2:	7802      	ldrb	r2, [r0, #0]
    9ab4:	2320      	movs	r3, #32
    9ab6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    9aba:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    9abe:	430a      	orrs	r2, r1
    9ac0:	7002      	strb	r2, [r0, #0]
    9ac2:	4770      	bx	lr
    9ac4:	b510      	push	{r4, lr}
    9ac6:	f7ff fcd3 	bl	9470 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    9aca:	4604      	mov	r4, r0
    9acc:	f7fb fb16 	bl	50fc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    9ad0:	b138      	cbz	r0, 9ae2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    9ad2:	4620      	mov	r0, r4
    9ad4:	f7fb faba 	bl	504c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    9ad8:	b118      	cbz	r0, 9ae2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    9ada:	2110      	movs	r1, #16
    9adc:	f7ff fd80 	bl	95e0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    9ae0:	b108      	cbz	r0, 9ae6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3e>
    9ae2:	2000      	movs	r0, #0
    9ae4:	bd10      	pop	{r4, pc}
    9ae6:	2001      	movs	r0, #1
    9ae8:	bd10      	pop	{r4, pc}
    9aea:	2101      	movs	r1, #1
    9aec:	f7fc b89c 	b.w	5c28 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    9af0:	2101      	movs	r1, #1
    9af2:	f7fc b899 	b.w	5c28 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    9af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9afa:	4604      	mov	r4, r0
    9afc:	460f      	mov	r7, r1
    9afe:	7e40      	ldrb	r0, [r0, #25]
    9b00:	f7fb fa8a 	bl	5018 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    9b04:	4606      	mov	r6, r0
    9b06:	7e20      	ldrb	r0, [r4, #24]
    9b08:	f104 0551 	add.w	r5, r4, #81	; 0x51
    9b0c:	b120      	cbz	r0, 9b18 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x70>
    9b0e:	b11e      	cbz	r6, 9b18 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x70>
    9b10:	7e60      	ldrb	r0, [r4, #25]
    9b12:	f7fb fa75 	bl	5000 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    9b16:	b1a0      	cbz	r0, 9b42 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x9a>
    9b18:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    9b1c:	2800      	cmp	r0, #0
    9b1e:	d024      	beq.n	9b6a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    9b20:	7ea0      	ldrb	r0, [r4, #26]
    9b22:	2800      	cmp	r0, #0
    9b24:	d021      	beq.n	9b6a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    9b26:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    9b2a:	4629      	mov	r1, r5
    9b2c:	f7ff fe60 	bl	97f0 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x34>
    9b30:	b1a8      	cbz	r0, 9b5e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb6>
    9b32:	f7fb fa61 	bl	4ff8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    9b36:	463a      	mov	r2, r7
    9b38:	4629      	mov	r1, r5
    9b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9b3e:	f7ff bc55 	b.w	93ec <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    9b42:	2001      	movs	r0, #1
    9b44:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    9b48:	463a      	mov	r2, r7
    9b4a:	4629      	mov	r1, r5
    9b4c:	4630      	mov	r0, r6
    9b4e:	f7ff fc4d 	bl	93ec <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    9b52:	7e61      	ldrb	r1, [r4, #25]
    9b54:	4628      	mov	r0, r5
    9b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9b5a:	f7fb ba69 	b.w	5030 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    9b5e:	4639      	mov	r1, r7
    9b60:	4628      	mov	r0, r5
    9b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9b66:	f7ff bc30 	b.w	93ca <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    9b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b6e:	b510      	push	{r4, lr}
    9b70:	4604      	mov	r4, r0
    9b72:	4608      	mov	r0, r1
    9b74:	f7fd fd8c 	bl	7690 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    9b78:	7921      	ldrb	r1, [r4, #4]
    9b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b7e:	2025      	movs	r0, #37	; 0x25
    9b80:	f7fd bd5c 	b.w	763c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    9b84:	b510      	push	{r4, lr}
    9b86:	4604      	mov	r4, r0
    9b88:	302e      	adds	r0, #46	; 0x2e
    9b8a:	f7fd fd3b 	bl	7604 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    9b8e:	2800      	cmp	r0, #0
    9b90:	d102      	bne.n	9b98 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf0>
    9b92:	207f      	movs	r0, #127	; 0x7f
    9b94:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    9b98:	bd10      	pop	{r4, pc}
    9b9a:	b570      	push	{r4, r5, r6, lr}
    9b9c:	4614      	mov	r4, r2
    9b9e:	461d      	mov	r5, r3
    9ba0:	4606      	mov	r6, r0
    9ba2:	f7f9 f8b1 	bl	2d08 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    9ba6:	1900      	adds	r0, r0, r4
    9ba8:	4169      	adcs	r1, r5
    9baa:	e9c6 0100 	strd	r0, r1, [r6]
    9bae:	bd70      	pop	{r4, r5, r6, pc}

00009bb0 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    9bb0:	b570      	push	{r4, r5, r6, lr}
    9bb2:	7001      	strb	r1, [r0, #0]
    9bb4:	7042      	strb	r2, [r0, #1]
    9bb6:	4614      	mov	r4, r2
    9bb8:	460d      	mov	r5, r1
    9bba:	7880      	ldrb	r0, [r0, #2]
    9bbc:	f000 f87f 	bl	9cbe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    9bc0:	fb10 f005 	smulbb	r0, r0, r5
    9bc4:	4360      	muls	r0, r4
    9bc6:	28ff      	cmp	r0, #255	; 0xff
    9bc8:	d303      	bcc.n	9bd2 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    9bca:	215c      	movs	r1, #92	; 0x5c
    9bcc:	202e      	movs	r0, #46	; 0x2e
    9bce:	f7fa fc11 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bd2:	bd70      	pop	{r4, r5, r6, pc}

00009bd4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    9bd4:	b510      	push	{r4, lr}
    9bd6:	4604      	mov	r4, r0
    9bd8:	7880      	ldrb	r0, [r0, #2]
    9bda:	f000 f870 	bl	9cbe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    9bde:	7861      	ldrb	r1, [r4, #1]
    9be0:	7822      	ldrb	r2, [r4, #0]
    9be2:	fb11 f102 	smulbb	r1, r1, r2
    9be6:	4348      	muls	r0, r1
    9be8:	b2c0      	uxtb	r0, r0
    9bea:	bd10      	pop	{r4, pc}

00009bec <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    9bec:	b510      	push	{r4, lr}
    9bee:	4604      	mov	r4, r0
    9bf0:	f000 f84d 	bl	9c8e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    9bf4:	7961      	ldrb	r1, [r4, #5]
    9bf6:	1c49      	adds	r1, r1, #1
    9bf8:	b2c9      	uxtb	r1, r1
    9bfa:	7161      	strb	r1, [r4, #5]
    9bfc:	7862      	ldrb	r2, [r4, #1]
    9bfe:	4291      	cmp	r1, r2
    9c00:	d10b      	bne.n	9c1a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    9c02:	2200      	movs	r2, #0
    9c04:	7162      	strb	r2, [r4, #5]
    9c06:	78e1      	ldrb	r1, [r4, #3]
    9c08:	4301      	orrs	r1, r0
    9c0a:	70e1      	strb	r1, [r4, #3]
    9c0c:	78a3      	ldrb	r3, [r4, #2]
    9c0e:	4299      	cmp	r1, r3
    9c10:	d103      	bne.n	9c1a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    9c12:	70e2      	strb	r2, [r4, #3]
    9c14:	7921      	ldrb	r1, [r4, #4]
    9c16:	1c49      	adds	r1, r1, #1
    9c18:	7121      	strb	r1, [r4, #4]
    9c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9c1e:	f000 b825 	b.w	9c6c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

00009c22 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    9c22:	7081      	strb	r1, [r0, #2]
    9c24:	4770      	bx	lr

00009c26 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    9c26:	b570      	push	{r4, r5, r6, lr}
    9c28:	4604      	mov	r4, r0
    9c2a:	7880      	ldrb	r0, [r0, #2]
    9c2c:	f000 f847 	bl	9cbe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    9c30:	7861      	ldrb	r1, [r4, #1]
    9c32:	fb11 f500 	smulbb	r5, r1, r0
    9c36:	78e0      	ldrb	r0, [r4, #3]
    9c38:	f000 f841 	bl	9cbe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    9c3c:	7861      	ldrb	r1, [r4, #1]
    9c3e:	7962      	ldrb	r2, [r4, #5]
    9c40:	fb10 2001 	smlabb	r0, r0, r1, r2
    9c44:	7821      	ldrb	r1, [r4, #0]
    9c46:	7922      	ldrb	r2, [r4, #4]
    9c48:	1a89      	subs	r1, r1, r2
    9c4a:	fb11 f105 	smulbb	r1, r1, r5
    9c4e:	1a08      	subs	r0, r1, r0
    9c50:	b2c0      	uxtb	r0, r0
    9c52:	bd70      	pop	{r4, r5, r6, pc}

00009c54 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    9c54:	2100      	movs	r1, #0
    9c56:	6001      	str	r1, [r0, #0]
    9c58:	8081      	strh	r1, [r0, #4]
    9c5a:	2101      	movs	r1, #1
    9c5c:	7041      	strb	r1, [r0, #1]
    9c5e:	7001      	strb	r1, [r0, #0]
    9c60:	4770      	bx	lr

00009c62 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    9c62:	2100      	movs	r1, #0
    9c64:	70c1      	strb	r1, [r0, #3]
    9c66:	7141      	strb	r1, [r0, #5]
    9c68:	7101      	strb	r1, [r0, #4]
    9c6a:	4770      	bx	lr
    9c6c:	b510      	push	{r4, lr}
    9c6e:	2801      	cmp	r0, #1
    9c70:	d007      	beq.n	9c82 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    9c72:	2802      	cmp	r0, #2
    9c74:	d007      	beq.n	9c86 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    9c76:	2804      	cmp	r0, #4
    9c78:	d007      	beq.n	9c8a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    9c7a:	2139      	movs	r1, #57	; 0x39
    9c7c:	202e      	movs	r0, #46	; 0x2e
    9c7e:	f7fa fbb9 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c82:	2025      	movs	r0, #37	; 0x25
    9c84:	bd10      	pop	{r4, pc}
    9c86:	2026      	movs	r0, #38	; 0x26
    9c88:	bd10      	pop	{r4, pc}
    9c8a:	2027      	movs	r0, #39	; 0x27
    9c8c:	bd10      	pop	{r4, pc}
    9c8e:	4601      	mov	r1, r0
    9c90:	2000      	movs	r0, #0
    9c92:	788a      	ldrb	r2, [r1, #2]
    9c94:	07d3      	lsls	r3, r2, #31
    9c96:	d002      	beq.n	9c9e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    9c98:	78cb      	ldrb	r3, [r1, #3]
    9c9a:	07db      	lsls	r3, r3, #31
    9c9c:	d006      	beq.n	9cac <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    9c9e:	0793      	lsls	r3, r2, #30
    9ca0:	d506      	bpl.n	9cb0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    9ca2:	78cb      	ldrb	r3, [r1, #3]
    9ca4:	079b      	lsls	r3, r3, #30
    9ca6:	d403      	bmi.n	9cb0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    9ca8:	2002      	movs	r0, #2
    9caa:	4770      	bx	lr
    9cac:	2001      	movs	r0, #1
    9cae:	4770      	bx	lr
    9cb0:	0752      	lsls	r2, r2, #29
    9cb2:	d5fc      	bpl.n	9cae <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    9cb4:	78c9      	ldrb	r1, [r1, #3]
    9cb6:	0749      	lsls	r1, r1, #29
    9cb8:	d4f9      	bmi.n	9cae <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    9cba:	2004      	movs	r0, #4
    9cbc:	4770      	bx	lr
    9cbe:	f3c0 0180 	ubfx	r1, r0, #2, #1
    9cc2:	f3c0 0240 	ubfx	r2, r0, #1, #1
    9cc6:	4411      	add	r1, r2
    9cc8:	f000 0001 	and.w	r0, r0, #1
    9ccc:	4408      	add	r0, r1
    9cce:	4770      	bx	lr

00009cd0 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    9cd0:	f240 315a 	movw	r1, #858	; 0x35a
    9cd4:	4348      	muls	r0, r1
    9cd6:	4770      	bx	lr

00009cd8 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    9cd8:	f240 20ef 	movw	r0, #751	; 0x2ef
    9cdc:	4770      	bx	lr
    9cde:	020e      	.short	0x020e
    9ce0:	0630041c 	.word	0x0630041c
    9ce4:	035a0c60 	.word	0x035a0c60
    9ce8:	05c506b4 	.word	0x05c506b4
    9cec:	12250bf5 	.word	0x12250bf5
    9cf0:	03b101a3 	.word	0x03b101a3
    9cf4:	02ef05bf 	.word	0x02ef05bf
    9cf8:	09a30649 	.word	0x09a30649

00009cfc <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    9cfc:	b510      	push	{r4, lr}
    9cfe:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    9d02:	b109      	cbz	r1, 9d08 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    9d04:	2000      	movs	r0, #0
    9d06:	bd10      	pop	{r4, pc}
    9d08:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    9d0c:	b131      	cbz	r1, 9d1c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    9d0e:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    9d12:	428a      	cmp	r2, r1
    9d14:	d902      	bls.n	9d1c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    9d16:	f7ff feb1 	bl	9a7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    9d1a:	e7f3      	b.n	9d04 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    9d1c:	2001      	movs	r0, #1
    9d1e:	bd10      	pop	{r4, pc}

00009d20 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    9d20:	b510      	push	{r4, lr}
    9d22:	b131      	cbz	r1, 9d32 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    9d24:	2901      	cmp	r1, #1
    9d26:	d008      	beq.n	9d3a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    9d28:	f240 717d 	movw	r1, #1917	; 0x77d
    9d2c:	2030      	movs	r0, #48	; 0x30
    9d2e:	f7fa fb61 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9d36:	f000 b8d3 	b.w	9ee0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x146>
    9d3a:	2100      	movs	r1, #0
    9d3c:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    9d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9d44:	f000 b89c 	b.w	9e80 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xe6>

00009d48 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    9d48:	b510      	push	{r4, lr}
    9d4a:	4604      	mov	r4, r0
    9d4c:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    9d50:	2800      	cmp	r0, #0
    9d52:	d019      	beq.n	9d88 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    9d54:	2001      	movs	r0, #1
    9d56:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    9d5a:	4601      	mov	r1, r0
    9d5c:	4620      	mov	r0, r4
    9d5e:	f7ff fe8a 	bl	9a76 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    9d62:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    9d66:	b170      	cbz	r0, 9d86 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    9d68:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    9d6c:	f7f8 fb50 	bl	2410 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    9d70:	7820      	ldrb	r0, [r4, #0]
    9d72:	f7f8 fca1 	bl	26b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    9d76:	f814 09c8 	ldrb.w	r0, [r4], #-200
    9d7a:	f7f8 fc7b 	bl	2674 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9d7e:	b120      	cbz	r0, 9d8a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    9d80:	2000      	movs	r0, #0
    9d82:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    9d86:	2000      	movs	r0, #0
    9d88:	bd10      	pop	{r4, pc}
    9d8a:	f44f 7101 	mov.w	r1, #516	; 0x204
    9d8e:	2030      	movs	r0, #48	; 0x30
    9d90:	f7fa fb30 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00009d94 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    9d94:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    9d98:	4770      	bx	lr

00009d9a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    9d9a:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    9d9e:	4770      	bx	lr
    9da0:	b570      	push	{r4, r5, r6, lr}
    9da2:	4604      	mov	r4, r0
    9da4:	f000 f875 	bl	9e92 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf8>
    9da8:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    9dac:	2000      	movs	r0, #0
    9dae:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
    9db2:	4601      	mov	r1, r0
    9db4:	2501      	movs	r5, #1
    9db6:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    9dba:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    9dbe:	4606      	mov	r6, r0
    9dc0:	f7ff fbd1 	bl	9566 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9dc4:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    9dc8:	1c40      	adds	r0, r0, #1
    9dca:	280a      	cmp	r0, #10
    9dcc:	d201      	bcs.n	9dd2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x38>
    9dce:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    9dd2:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    9dd6:	b138      	cbz	r0, 9de8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x4e>
    9dd8:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    9ddc:	1c40      	adds	r0, r0, #1
    9dde:	280a      	cmp	r0, #10
    9de0:	d302      	bcc.n	9de8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x4e>
    9de2:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
    9de6:	e002      	b.n	9dee <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x54>
    9de8:	2002      	movs	r0, #2
    9dea:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    9dee:	4620      	mov	r0, r4
    9df0:	f000 f822 	bl	9e38 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x9e>
    9df4:	b120      	cbz	r0, 9e00 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x66>
    9df6:	4620      	mov	r0, r4
    9df8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9dfc:	f000 b80d 	b.w	9e1a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x80>
    9e00:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    9e04:	4631      	mov	r1, r6
    9e06:	f000 f842 	bl	9e8e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf4>
    9e0a:	2800      	cmp	r0, #0
    9e0c:	d104      	bne.n	9e18 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x7e>
    9e0e:	f240 6191 	movw	r1, #1681	; 0x691
    9e12:	2030      	movs	r0, #48	; 0x30
    9e14:	f7fa faee 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e18:	bd70      	pop	{r4, r5, r6, pc}
    9e1a:	b510      	push	{r4, lr}
    9e1c:	4604      	mov	r4, r0
    9e1e:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    9e22:	f7f8 fc27 	bl	2674 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9e26:	2000      	movs	r0, #0
    9e28:	7620      	strb	r0, [r4, #24]
    9e2a:	bd10      	pop	{r4, pc}
    9e2c:	b510      	push	{r4, lr}
    9e2e:	f7ff fdcd 	bl	99cc <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    9e32:	f500 7088 	add.w	r0, r0, #272	; 0x110
    9e36:	bd10      	pop	{r4, pc}
    9e38:	b570      	push	{r4, r5, r6, lr}
    9e3a:	4605      	mov	r5, r0
    9e3c:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    9e40:	b108      	cbz	r0, 9e46 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xac>
    9e42:	2001      	movs	r0, #1
    9e44:	bd70      	pop	{r4, r5, r6, pc}
    9e46:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    9e4a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    9e4e:	4050      	eors	r0, r2
    9e50:	ea70 0101 	orns	r1, r0, r1
    9e54:	d012      	beq.n	9e7c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xe2>
    9e56:	2400      	movs	r4, #0
    9e58:	4621      	mov	r1, r4
    9e5a:	4628      	mov	r0, r5
    9e5c:	f7ff ffe6 	bl	9e2c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x92>
    9e60:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    9e64:	1840      	adds	r0, r0, r1
    9e66:	4154      	adcs	r4, r2
    9e68:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    9e6c:	3df8      	subs	r5, #248	; 0xf8
    9e6e:	1a10      	subs	r0, r2, r0
    9e70:	41a1      	sbcs	r1, r4
    9e72:	d503      	bpl.n	9e7c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xe2>
    9e74:	4628      	mov	r0, r5
    9e76:	f7ff fe01 	bl	9a7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    9e7a:	e7e2      	b.n	9e42 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xa8>
    9e7c:	2000      	movs	r0, #0
    9e7e:	bd70      	pop	{r4, r5, r6, pc}
    9e80:	b510      	push	{r4, lr}
    9e82:	f7fd fa4f 	bl	7324 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    9e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9e8a:	f7f8 bd55 	b.w	2938 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    9e8e:	f7f7 bf9d 	b.w	1dcc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    9e92:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9e94:	4604      	mov	r4, r0
    9e96:	f7ff fdc2 	bl	9a1e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    9e9a:	b1f8      	cbz	r0, 9edc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x142>
    9e9c:	4620      	mov	r0, r4
    9e9e:	f7ff fdb6 	bl	9a0e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    9ea2:	b918      	cbnz	r0, 9eac <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x112>
    9ea4:	4620      	mov	r0, r4
    9ea6:	f7ff fdbc 	bl	9a22 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    9eaa:	b140      	cbz	r0, 9ebe <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x124>
    9eac:	2462      	movs	r4, #98	; 0x62
    9eae:	4668      	mov	r0, sp
    9eb0:	f7fa f97c 	bl	41ac <mpsl_fem_pa_is_configured>
    9eb4:	f89d 0000 	ldrb.w	r0, [sp]
    9eb8:	b118      	cbz	r0, 9ec2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x128>
    9eba:	2501      	movs	r5, #1
    9ebc:	e002      	b.n	9ec4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x12a>
    9ebe:	245b      	movs	r4, #91	; 0x5b
    9ec0:	e7f5      	b.n	9eae <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x114>
    9ec2:	2500      	movs	r5, #0
    9ec4:	a801      	add	r0, sp, #4
    9ec6:	f7fa f959 	bl	417c <mpsl_fem_lna_is_configured>
    9eca:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9ece:	b100      	cbz	r0, 9ed2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x138>
    9ed0:	2001      	movs	r0, #1
    9ed2:	4305      	orrs	r5, r0
    9ed4:	d000      	beq.n	9ed8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x13e>
    9ed6:	340a      	adds	r4, #10
    9ed8:	4620      	mov	r0, r4
    9eda:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9edc:	2084      	movs	r0, #132	; 0x84
    9ede:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9ee0:	b570      	push	{r4, r5, r6, lr}
    9ee2:	4604      	mov	r4, r0
    9ee4:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9ee6:	2500      	movs	r5, #0
    9ee8:	b130      	cbz	r0, 9ef8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x15e>
    9eea:	f7fb fd25 	bl	5938 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    9eee:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    9ef0:	fbb0 f2f1 	udiv	r2, r0, r1
    9ef4:	fb01 0512 	mls	r5, r1, r2, r0
    9ef8:	4620      	mov	r0, r4
    9efa:	f7ff fd63 	bl	99c4 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    9efe:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    9f02:	4428      	add	r0, r5
    9f04:	34e8      	adds	r4, #232	; 0xe8
    9f06:	2500      	movs	r5, #0
    9f08:	1882      	adds	r2, r0, r2
    9f0a:	eb45 0001 	adc.w	r0, r5, r1
    9f0e:	e9c4 2004 	strd	r2, r0, [r4, #16]
    9f12:	f804 5b0b 	strb.w	r5, [r4], #11
    9f16:	2001      	movs	r0, #1
    9f18:	f804 0901 	strb.w	r0, [r4], #-1
    9f1c:	2002      	movs	r0, #2
    9f1e:	f804 09f2 	strb.w	r0, [r4], #-242
    9f22:	4620      	mov	r0, r4
    9f24:	f7ff ffb5 	bl	9e92 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf8>
    9f28:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    9f2c:	4620      	mov	r0, r4
    9f2e:	f7ff ff83 	bl	9e38 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x9e>
    9f32:	b930      	cbnz	r0, 9f42 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1a8>
    9f34:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    9f38:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    9f3c:	f7ff ffa7 	bl	9e8e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf4>
    9f40:	b128      	cbz	r0, 9f4e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1b4>
    9f42:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    9f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9f4a:	f7ff bf99 	b.w	9e80 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xe6>
    9f4e:	f240 61d7 	movw	r1, #1751	; 0x6d7
    9f52:	2030      	movs	r0, #48	; 0x30
    9f54:	f7fa fa4e 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f58:	b510      	push	{r4, lr}
    9f5a:	4604      	mov	r4, r0
    9f5c:	2000      	movs	r0, #0
    9f5e:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    9f62:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    9f66:	f7f8 fb85 	bl	2674 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9f6a:	2020      	movs	r0, #32
    9f6c:	f884 0294 	strb.w	r0, [r4, #660]	; 0x294
    9f70:	bd10      	pop	{r4, pc}
    9f72:	b570      	push	{r4, r5, r6, lr}
    9f74:	b140      	cbz	r0, 9f88 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1ee>
    9f76:	2909      	cmp	r1, #9
    9f78:	d249      	bcs.n	a00e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x274>
    9f7a:	e8df f001 	tbb	[pc, r1]
    9f7e:	1507      	.short	0x1507
    9f80:	48383c3c 	.word	0x48383c3c
    9f84:	0044402a 	.word	0x0044402a
    9f88:	21ca      	movs	r1, #202	; 0xca
    9f8a:	e03d      	b.n	a008 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x26e>
    9f8c:	4604      	mov	r4, r0
    9f8e:	f7fb fe23 	bl	5bd8 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    9f92:	b110      	cbz	r0, 9f9a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x200>
    9f94:	f44f 711d 	mov.w	r1, #628	; 0x274
    9f98:	e036      	b.n	a008 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x26e>
    9f9a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    9f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9fa2:	38ff      	subs	r0, #255	; 0xff
    9fa4:	f7f8 bde2 	b.w	2b6c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9fa8:	4605      	mov	r5, r0
    9faa:	f7ff fd34 	bl	9a16 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9fae:	b9b0      	cbnz	r0, 9fde <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x244>
    9fb0:	2100      	movs	r1, #0
    9fb2:	4628      	mov	r0, r5
    9fb4:	f7ff ff3a 	bl	9e2c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x92>
    9fb8:	4604      	mov	r4, r0
    9fba:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    9fbe:	42a0      	cmp	r0, r4
    9fc0:	d20b      	bcs.n	9fda <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x240>
    9fc2:	1a20      	subs	r0, r4, r0
    9fc4:	2103      	movs	r1, #3
    9fc6:	f7f7 fd45 	bl	1a54 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9fca:	b130      	cbz	r0, 9fda <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x240>
    9fcc:	4628      	mov	r0, r5
    9fce:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    9fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9fd6:	f7ff bc8c 	b.w	98f2 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    9fda:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    9fde:	4628      	mov	r0, r5
    9fe0:	f7fb fe16 	bl	5c10 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    9fe4:	2800      	cmp	r0, #0
    9fe6:	d014      	beq.n	a012 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x278>
    9fe8:	f240 21a7 	movw	r1, #679	; 0x2a7
    9fec:	e00c      	b.n	a008 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x26e>
    9fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9ff2:	f7fd bb53 	b.w	769c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    9ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9ffa:	f7ff bed1 	b.w	9da0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x6>
    9ffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a002:	f7ff bf0a 	b.w	9e1a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x80>
    a006:	21ea      	movs	r1, #234	; 0xea
    a008:	2030      	movs	r0, #48	; 0x30
    a00a:	f7fa f9f3 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a00e:	21ee      	movs	r1, #238	; 0xee
    a010:	e7fa      	b.n	a008 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x26e>
    a012:	bd70      	pop	{r4, r5, r6, pc}

0000a014 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    a014:	f7fa bd2c 	b.w	4a70 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000a018 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    a018:	b570      	push	{r4, r5, r6, lr}
    a01a:	6844      	ldr	r4, [r0, #4]
    a01c:	220f      	movs	r2, #15
    a01e:	f504 7594 	add.w	r5, r4, #296	; 0x128
    a022:	2100      	movs	r1, #0
    a024:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    a028:	f7fe fad1 	bl	85ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a02c:	2100      	movs	r1, #0
    a02e:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
    a032:	61a9      	str	r1, [r5, #24]
    a034:	4608      	mov	r0, r1
    a036:	217f      	movs	r1, #127	; 0x7f
    a038:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    a03c:	4422      	add	r2, r4
    a03e:	1c40      	adds	r0, r0, #1
    a040:	b2c0      	uxtb	r0, r0
    a042:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
    a046:	2802      	cmp	r0, #2
    a048:	d3f6      	bcc.n	a038 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x20>
    a04a:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    a04e:	4620      	mov	r0, r4
    a050:	f000 f814 	bl	a07c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    a054:	2000      	movs	r0, #0
    a056:	21ff      	movs	r1, #255	; 0xff
    a058:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    a05c:	4422      	add	r2, r4
    a05e:	1c40      	adds	r0, r0, #1
    a060:	f802 1f71 	strb.w	r1, [r2, #113]!
    a064:	b2c0      	uxtb	r0, r0
    a066:	7191      	strb	r1, [r2, #6]
    a068:	2802      	cmp	r0, #2
    a06a:	d3f5      	bcc.n	a058 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x40>
    a06c:	bd70      	pop	{r4, r5, r6, pc}

0000a06e <sym_54DHANNB5K66OT2I32HH4FUSWNFM6Y6UROTVO5I>:
    a06e:	207f      	movs	r0, #127	; 0x7f
    a070:	f000 b837 	b.w	a0e2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>

0000a074 <sym_ORQBLZC6MUX3FYLO7MAZX3V753VQRLBWB2XQIYI>:
    a074:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    a078:	f000 b833 	b.w	a0e2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>

0000a07c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    a07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a080:	460d      	mov	r5, r1
    a082:	4606      	mov	r6, r0
    a084:	f7ff fff3 	bl	a06e <sym_54DHANNB5K66OT2I32HH4FUSWNFM6Y6UROTVO5I>
    a088:	4607      	mov	r7, r0
    a08a:	f7ff fff3 	bl	a074 <sym_ORQBLZC6MUX3FYLO7MAZX3V753VQRLBWB2XQIYI>
    a08e:	2400      	movs	r4, #0
    a090:	4285      	cmp	r5, r0
    a092:	d100      	bne.n	a096 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    a094:	2401      	movs	r4, #1
    a096:	42bd      	cmp	r5, r7
    a098:	d101      	bne.n	a09e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    a09a:	f044 0402 	orr.w	r4, r4, #2
    a09e:	f000 f814 	bl	a0ca <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4e>
    a0a2:	2200      	movs	r2, #0
    a0a4:	4601      	mov	r1, r0
    a0a6:	2301      	movs	r3, #1
    a0a8:	fa03 f002 	lsl.w	r0, r3, r2
    a0ac:	4208      	tst	r0, r1
    a0ae:	d006      	beq.n	a0be <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x42>
    a0b0:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    a0b4:	4430      	add	r0, r6
    a0b6:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    a0ba:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    a0be:	1c52      	adds	r2, r2, #1
    a0c0:	b2d2      	uxtb	r2, r2
    a0c2:	2a02      	cmp	r2, #2
    a0c4:	d3f0      	bcc.n	a0a8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    a0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a0ca:	b510      	push	{r4, lr}
    a0cc:	f7fc fe90 	bl	6df0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a0d0:	0a00      	lsrs	r0, r0, #8
    a0d2:	2201      	movs	r2, #1
    a0d4:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    a0d8:	07c0      	lsls	r0, r0, #31
    a0da:	d000      	beq.n	a0de <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x62>
    a0dc:	2203      	movs	r2, #3
    a0de:	4610      	mov	r0, r2
    a0e0:	bd10      	pop	{r4, pc}
    a0e2:	b508      	push	{r3, lr}
    a0e4:	f640 1288 	movw	r2, #2440	; 0x988
    a0e8:	4669      	mov	r1, sp
    a0ea:	f7fa f865 	bl	41b8 <mpsl_fem_tx_power_split>
    a0ee:	bd08      	pop	{r3, pc}
    a0f0:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    a0f4:	f001 0107 	and.w	r1, r1, #7
    a0f8:	7800      	ldrb	r0, [r0, #0]
    a0fa:	40c8      	lsrs	r0, r1
    a0fc:	f000 0001 	and.w	r0, r0, #1
    a100:	4770      	bx	lr
    a102:	b118      	cbz	r0, a10c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x90>
    a104:	2802      	cmp	r0, #2
    a106:	d001      	beq.n	a10c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x90>
    a108:	2001      	movs	r0, #1
    a10a:	4770      	bx	lr
    a10c:	2000      	movs	r0, #0
    a10e:	4770      	bx	lr

0000a110 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    a110:	b510      	push	{r4, lr}
    a112:	4604      	mov	r4, r0
    a114:	f7fc fdf8 	bl	6d08 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    a118:	b108      	cbz	r0, a11e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    a11a:	200c      	movs	r0, #12
    a11c:	bd10      	pop	{r4, pc}
    a11e:	7820      	ldrb	r0, [r4, #0]
    a120:	b118      	cbz	r0, a12a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    a122:	2801      	cmp	r0, #1
    a124:	d001      	beq.n	a12a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    a126:	2012      	movs	r0, #18
    a128:	bd10      	pop	{r4, pc}
    a12a:	f7ff ffea 	bl	a102 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x86>
    a12e:	1c61      	adds	r1, r4, #1
    a130:	f7fa fff2 	bl	5118 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    a134:	b108      	cbz	r0, a13a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    a136:	2000      	movs	r0, #0
    a138:	bd10      	pop	{r4, pc}
    a13a:	2007      	movs	r0, #7
    a13c:	bd10      	pop	{r4, pc}

0000a13e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    a13e:	b510      	push	{r4, lr}
    a140:	f7fc fde2 	bl	6d08 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    a144:	b108      	cbz	r0, a14a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    a146:	200c      	movs	r0, #12
    a148:	bd10      	pop	{r4, pc}
    a14a:	f7fb f80d 	bl	5168 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    a14e:	2000      	movs	r0, #0
    a150:	bd10      	pop	{r4, pc}

0000a152 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    a152:	b510      	push	{r4, lr}
    a154:	460b      	mov	r3, r1
    a156:	2201      	movs	r2, #1
    a158:	f100 0110 	add.w	r1, r0, #16
    a15c:	f7ff f99e 	bl	949c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    a160:	2000      	movs	r0, #0
    a162:	bd10      	pop	{r4, pc}

0000a164 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    a164:	b510      	push	{r4, lr}
    a166:	8800      	ldrh	r0, [r0, #0]
    a168:	2100      	movs	r1, #0
    a16a:	f7fe ff66 	bl	903a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a16e:	b118      	cbz	r0, a178 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    a170:	f890 12a0 	ldrb.w	r1, [r0, #672]	; 0x2a0
    a174:	b111      	cbz	r1, a17c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    a176:	e007      	b.n	a188 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    a178:	2002      	movs	r0, #2
    a17a:	bd10      	pop	{r4, pc}
    a17c:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    a180:	2916      	cmp	r1, #22
    a182:	d003      	beq.n	a18c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    a184:	2917      	cmp	r1, #23
    a186:	d001      	beq.n	a18c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    a188:	200c      	movs	r0, #12
    a18a:	bd10      	pop	{r4, pc}
    a18c:	2102      	movs	r1, #2
    a18e:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
    a192:	2000      	movs	r0, #0
    a194:	bd10      	pop	{r4, pc}

0000a196 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    a196:	b510      	push	{r4, lr}
    a198:	2108      	movs	r1, #8
    a19a:	f7fa f999 	bl	44d0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    a19e:	2000      	movs	r0, #0
    a1a0:	bd10      	pop	{r4, pc}

0000a1a2 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    a1a2:	b510      	push	{r4, lr}
    a1a4:	4604      	mov	r4, r0
    a1a6:	f7fc fc2f 	bl	6a08 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    a1aa:	f7ff fc3e 	bl	9a2a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    a1ae:	7020      	strb	r0, [r4, #0]
    a1b0:	2000      	movs	r0, #0
    a1b2:	bd10      	pop	{r4, pc}

0000a1b4 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    a1b4:	b510      	push	{r4, lr}
    a1b6:	4604      	mov	r4, r0
    a1b8:	20d8      	movs	r0, #216	; 0xd8
    a1ba:	7020      	strb	r0, [r4, #0]
    a1bc:	f000 fbd0 	bl	a960 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x272>
    a1c0:	7060      	strb	r0, [r4, #1]
    a1c2:	2000      	movs	r0, #0
    a1c4:	bd10      	pop	{r4, pc}

0000a1c6 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    a1c6:	2108      	movs	r1, #8
    a1c8:	7001      	strb	r1, [r0, #0]
    a1ca:	2000      	movs	r0, #0
    a1cc:	4770      	bx	lr

0000a1ce <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    a1ce:	b510      	push	{r4, lr}
    a1d0:	4604      	mov	r4, r0
    a1d2:	f7fc fd99 	bl	6d08 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    a1d6:	b108      	cbz	r0, a1dc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    a1d8:	200c      	movs	r0, #12
    a1da:	bd10      	pop	{r4, pc}
    a1dc:	7820      	ldrb	r0, [r4, #0]
    a1de:	b108      	cbz	r0, a1e4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    a1e0:	2801      	cmp	r0, #1
    a1e2:	d107      	bne.n	a1f4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    a1e4:	f7ff ff8d 	bl	a102 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x86>
    a1e8:	1c61      	adds	r1, r4, #1
    a1ea:	f7ff f94c 	bl	9486 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    a1ee:	b108      	cbz	r0, a1f4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    a1f0:	2000      	movs	r0, #0
    a1f2:	bd10      	pop	{r4, pc}
    a1f4:	2012      	movs	r0, #18
    a1f6:	bd10      	pop	{r4, pc}

0000a1f8 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    a1f8:	b51c      	push	{r2, r3, r4, lr}
    a1fa:	4604      	mov	r4, r0
    a1fc:	f7fc fc04 	bl	6a08 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    a200:	2000      	movs	r0, #0
    a202:	f88d 0002 	strb.w	r0, [sp, #2]
    a206:	2103      	movs	r1, #3
    a208:	f88d 1001 	strb.w	r1, [sp, #1]
    a20c:	f814 1b01 	ldrb.w	r1, [r4], #1
    a210:	f88d 1003 	strb.w	r1, [sp, #3]
    a214:	f88d 0000 	strb.w	r0, [sp]
    a218:	4668      	mov	r0, sp
    a21a:	9401      	str	r4, [sp, #4]
    a21c:	f000 f939 	bl	a492 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    a220:	bd1c      	pop	{r2, r3, r4, pc}

0000a222 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    a222:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    a224:	4605      	mov	r5, r0
    a226:	f7fc fbef 	bl	6a08 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    a22a:	4606      	mov	r6, r0
    a22c:	7828      	ldrb	r0, [r5, #0]
    a22e:	2400      	movs	r4, #0
    a230:	b160      	cbz	r0, a24c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    a232:	f88d 4000 	strb.w	r4, [sp]
    a236:	2001      	movs	r0, #1
    a238:	f10d 0101 	add.w	r1, sp, #1
    a23c:	f7fa fe9a 	bl	4f74 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    a240:	b120      	cbz	r0, a24c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    a242:	4668      	mov	r0, sp
    a244:	f000 f897 	bl	a376 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    a248:	2800      	cmp	r0, #0
    a24a:	d112      	bne.n	a272 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    a24c:	f88d 400c 	strb.w	r4, [sp, #12]
    a250:	4630      	mov	r0, r6
    a252:	f7ff fbe0 	bl	9a16 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a256:	b118      	cbz	r0, a260 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    a258:	2080      	movs	r0, #128	; 0x80
    a25a:	f8ad 000d 	strh.w	r0, [sp, #13]
    a25e:	e001      	b.n	a264 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    a260:	f8ad 400d 	strh.w	r4, [sp, #13]
    a264:	f88d 400f 	strb.w	r4, [sp, #15]
    a268:	7828      	ldrb	r0, [r5, #0]
    a26a:	2801      	cmp	r0, #1
    a26c:	d003      	beq.n	a276 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    a26e:	b138      	cbz	r0, a280 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    a270:	2012      	movs	r0, #18
    a272:	b004      	add	sp, #16
    a274:	bd70      	pop	{r4, r5, r6, pc}
    a276:	a903      	add	r1, sp, #12
    a278:	4630      	mov	r0, r6
    a27a:	f7fc fbe1 	bl	6a40 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    a27e:	e7f8      	b.n	a272 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    a280:	4630      	mov	r0, r6
    a282:	f000 fb70 	bl	a966 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x278>
    a286:	e7f4      	b.n	a272 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000a288 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    a288:	b530      	push	{r4, r5, lr}
    a28a:	b08b      	sub	sp, #44	; 0x2c
    a28c:	4604      	mov	r4, r0
    a28e:	f7fc fbbb 	bl	6a08 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    a292:	4602      	mov	r2, r0
    a294:	7920      	ldrb	r0, [r4, #4]
    a296:	2804      	cmp	r0, #4
    a298:	d803      	bhi.n	a2a2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    a29a:	8860      	ldrh	r0, [r4, #2]
    a29c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    a2a0:	d902      	bls.n	a2a8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    a2a2:	2012      	movs	r0, #18
    a2a4:	b00b      	add	sp, #44	; 0x2c
    a2a6:	bd30      	pop	{r4, r5, pc}
    a2a8:	2500      	movs	r5, #0
    a2aa:	f88d 5004 	strb.w	r5, [sp, #4]
    a2ae:	7921      	ldrb	r1, [r4, #4]
    a2b0:	9500      	str	r5, [sp, #0]
    a2b2:	f89d 0000 	ldrb.w	r0, [sp]
    a2b6:	2905      	cmp	r1, #5
    a2b8:	f040 0010 	orr.w	r0, r0, #16
    a2bc:	f88d 0000 	strb.w	r0, [sp]
    a2c0:	d254      	bcs.n	a36c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    a2c2:	e8df f001 	tbb	[pc, r1]
    a2c6:	0803      	.short	0x0803
    a2c8:	000b1105 	.word	0x000b1105
    a2cc:	f040 0001 	orr.w	r0, r0, #1
    a2d0:	f040 0002 	orr.w	r0, r0, #2
    a2d4:	e006      	b.n	a2e4 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    a2d6:	f040 0009 	orr.w	r0, r0, #9
    a2da:	e001      	b.n	a2e0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    a2dc:	f040 0001 	orr.w	r0, r0, #1
    a2e0:	f040 0004 	orr.w	r0, r0, #4
    a2e4:	f88d 0000 	strb.w	r0, [sp]
    a2e8:	f8bd 0000 	ldrh.w	r0, [sp]
    a2ec:	9000      	str	r0, [sp, #0]
    a2ee:	f8bd 0000 	ldrh.w	r0, [sp]
    a2f2:	f8ad 0005 	strh.w	r0, [sp, #5]
    a2f6:	8821      	ldrh	r1, [r4, #0]
    a2f8:	f8dd 0006 	ldr.w	r0, [sp, #6]
    a2fc:	f361 201f 	bfi	r0, r1, #8, #24
    a300:	f8cd 0006 	str.w	r0, [sp, #6]
    a304:	8861      	ldrh	r1, [r4, #2]
    a306:	f8dd 0009 	ldr.w	r0, [sp, #9]
    a30a:	f361 201f 	bfi	r0, r1, #8, #24
    a30e:	f8cd 0009 	str.w	r0, [sp, #9]
    a312:	7b60      	ldrb	r0, [r4, #13]
    a314:	f88d 000d 	strb.w	r0, [sp, #13]
    a318:	7960      	ldrb	r0, [r4, #5]
    a31a:	f88d 000e 	strb.w	r0, [sp, #14]
    a31e:	79a0      	ldrb	r0, [r4, #6]
    a320:	f88d 000f 	strb.w	r0, [sp, #15]
    a324:	f8d4 0007 	ldr.w	r0, [r4, #7]
    a328:	9004      	str	r0, [sp, #16]
    a32a:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    a32e:	f8ad 0014 	strh.w	r0, [sp, #20]
    a332:	7ba0      	ldrb	r0, [r4, #14]
    a334:	f88d 0016 	strb.w	r0, [sp, #22]
    a338:	207f      	movs	r0, #127	; 0x7f
    a33a:	f88d 0017 	strb.w	r0, [sp, #23]
    a33e:	2001      	movs	r0, #1
    a340:	f88d 0018 	strb.w	r0, [sp, #24]
    a344:	f88d 5019 	strb.w	r5, [sp, #25]
    a348:	f88d 001a 	strb.w	r0, [sp, #26]
    a34c:	f88d 501b 	strb.w	r5, [sp, #27]
    a350:	4610      	mov	r0, r2
    a352:	f7ff fb80 	bl	9a56 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    a356:	f88d 001c 	strb.w	r0, [sp, #28]
    a35a:	f88d 501d 	strb.w	r5, [sp, #29]
    a35e:	f88d 501e 	strb.w	r5, [sp, #30]
    a362:	a909      	add	r1, sp, #36	; 0x24
    a364:	a801      	add	r0, sp, #4
    a366:	f7fc fa93 	bl	6890 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    a36a:	e79b      	b.n	a2a4 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    a36c:	f241 11d5 	movw	r1, #4565	; 0x11d5
    a370:	2039      	movs	r0, #57	; 0x39
    a372:	f7fa f83f 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000a376 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    a376:	b570      	push	{r4, r5, r6, lr}
    a378:	4604      	mov	r4, r0
    a37a:	7800      	ldrb	r0, [r0, #0]
    a37c:	2101      	movs	r1, #1
    a37e:	f7fe fe5c 	bl	903a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a382:	0005      	movs	r5, r0
    a384:	d007      	beq.n	a396 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    a386:	f7ff fd08 	bl	9d9a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a38a:	b160      	cbz	r0, a3a6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    a38c:	4628      	mov	r0, r5
    a38e:	f7ff fb48 	bl	9a22 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    a392:	b110      	cbz	r0, a39a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    a394:	e005      	b.n	a3a2 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    a396:	2042      	movs	r0, #66	; 0x42
    a398:	bd70      	pop	{r4, r5, r6, pc}
    a39a:	4628      	mov	r0, r5
    a39c:	f7ff fb37 	bl	9a0e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a3a0:	b108      	cbz	r0, a3a6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    a3a2:	200c      	movs	r0, #12
    a3a4:	bd70      	pop	{r4, r5, r6, pc}
    a3a6:	1c61      	adds	r1, r4, #1
    a3a8:	4628      	mov	r0, r5
    a3aa:	f7ff fb4c 	bl	9a46 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    a3ae:	2000      	movs	r0, #0
    a3b0:	bd70      	pop	{r4, r5, r6, pc}

0000a3b2 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    a3b2:	b510      	push	{r4, lr}
    a3b4:	4604      	mov	r4, r0
    a3b6:	f7fc fb27 	bl	6a08 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    a3ba:	7861      	ldrb	r1, [r4, #1]
    a3bc:	f3c1 0240 	ubfx	r2, r1, #1, #1
    a3c0:	f001 0101 	and.w	r1, r1, #1
    a3c4:	f7ff fb3b 	bl	9a3e <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    a3c8:	2000      	movs	r0, #0
    a3ca:	bd10      	pop	{r4, pc}

0000a3cc <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    a3cc:	b510      	push	{r4, lr}
    a3ce:	4604      	mov	r4, r0
    a3d0:	2001      	movs	r0, #1
    a3d2:	f000 f9ae 	bl	a732 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    a3d6:	b128      	cbz	r0, a3e4 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    a3d8:	4621      	mov	r1, r4
    a3da:	2001      	movs	r0, #1
    a3dc:	f7fa fde2 	bl	4fa4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    a3e0:	2000      	movs	r0, #0
    a3e2:	bd10      	pop	{r4, pc}
    a3e4:	200c      	movs	r0, #12
    a3e6:	bd10      	pop	{r4, pc}

0000a3e8 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    a3e8:	b51c      	push	{r2, r3, r4, lr}
    a3ea:	4604      	mov	r4, r0
    a3ec:	f7fc fb0c 	bl	6a08 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    a3f0:	2000      	movs	r0, #0
    a3f2:	f88d 0000 	strb.w	r0, [sp]
    a3f6:	f88d 0002 	strb.w	r0, [sp, #2]
    a3fa:	2003      	movs	r0, #3
    a3fc:	f88d 0001 	strb.w	r0, [sp, #1]
    a400:	f814 0b01 	ldrb.w	r0, [r4], #1
    a404:	f88d 0003 	strb.w	r0, [sp, #3]
    a408:	4668      	mov	r0, sp
    a40a:	9401      	str	r4, [sp, #4]
    a40c:	f000 f8aa 	bl	a564 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    a410:	bd1c      	pop	{r2, r3, r4, pc}

0000a412 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    a412:	b510      	push	{r4, lr}
    a414:	f7fa fdea 	bl	4fec <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    a418:	2000      	movs	r0, #0
    a41a:	bd10      	pop	{r4, pc}

0000a41c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    a41c:	b51c      	push	{r2, r3, r4, lr}
    a41e:	460c      	mov	r4, r1
    a420:	4669      	mov	r1, sp
    a422:	f7ff f859 	bl	94d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a426:	2800      	cmp	r0, #0
    a428:	d105      	bne.n	a436 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    a42a:	2100      	movs	r1, #0
    a42c:	4622      	mov	r2, r4
    a42e:	9801      	ldr	r0, [sp, #4]
    a430:	f000 fa40 	bl	a8b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c6>
    a434:	2000      	movs	r0, #0
    a436:	bd1c      	pop	{r2, r3, r4, pc}

0000a438 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    a438:	b510      	push	{r4, lr}
    a43a:	4604      	mov	r4, r0
    a43c:	7800      	ldrb	r0, [r0, #0]
    a43e:	28ff      	cmp	r0, #255	; 0xff
    a440:	d009      	beq.n	a456 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    a442:	2101      	movs	r1, #1
    a444:	f7fe fdf9 	bl	903a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a448:	b118      	cbz	r0, a452 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    a44a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a44e:	8441      	strh	r1, [r0, #34]	; 0x22
    a450:	e005      	b.n	a45e <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    a452:	2042      	movs	r0, #66	; 0x42
    a454:	bd10      	pop	{r4, pc}
    a456:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a45a:	f7fc f981 	bl	6760 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    a45e:	2000      	movs	r0, #0
    a460:	bd10      	pop	{r4, pc}

0000a462 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    a462:	b510      	push	{r4, lr}
    a464:	4604      	mov	r4, r0
    a466:	2000      	movs	r0, #0
    a468:	f000 f963 	bl	a732 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    a46c:	b128      	cbz	r0, a47a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    a46e:	4621      	mov	r1, r4
    a470:	2000      	movs	r0, #0
    a472:	f7fa fd97 	bl	4fa4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    a476:	2000      	movs	r0, #0
    a478:	bd10      	pop	{r4, pc}
    a47a:	200c      	movs	r0, #12
    a47c:	bd10      	pop	{r4, pc}

0000a47e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    a47e:	b510      	push	{r4, lr}
    a480:	7800      	ldrb	r0, [r0, #0]
    a482:	b100      	cbz	r0, a486 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    a484:	2001      	movs	r0, #1
    a486:	f7fc f995 	bl	67b4 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    a48a:	2000      	movs	r0, #0
    a48c:	bd10      	pop	{r4, pc}

0000a48e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    a48e:	f7fc bbb7 	b.w	6c00 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>

0000a492 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    a492:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a496:	4606      	mov	r6, r0
    a498:	7845      	ldrb	r5, [r0, #1]
    a49a:	7800      	ldrb	r0, [r0, #0]
    a49c:	2101      	movs	r1, #1
    a49e:	f7fe fdcc 	bl	903a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a4a2:	0004      	movs	r4, r0
    a4a4:	d01e      	beq.n	a4e4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    a4a6:	f7ff fa1c 	bl	98e2 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    a4aa:	78f1      	ldrb	r1, [r6, #3]
    a4ac:	4281      	cmp	r1, r0
    a4ae:	d800      	bhi.n	a4b2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    a4b0:	4608      	mov	r0, r1
    a4b2:	4607      	mov	r7, r0
    a4b4:	2d04      	cmp	r5, #4
    a4b6:	d018      	beq.n	a4ea <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    a4b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a4ba:	f7fe ff09 	bl	92d0 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    a4be:	4438      	add	r0, r7
    a4c0:	b281      	uxth	r1, r0
    a4c2:	4620      	mov	r0, r4
    a4c4:	2201      	movs	r2, #1
    a4c6:	f000 f946 	bl	a756 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x68>
    a4ca:	2800      	cmp	r0, #0
    a4cc:	d10b      	bne.n	a4e6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    a4ce:	2d03      	cmp	r5, #3
    a4d0:	d000      	beq.n	a4d4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    a4d2:	b1df      	cbz	r7, a50c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    a4d4:	4620      	mov	r0, r4
    a4d6:	f7ff faa2 	bl	9a1e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a4da:	7871      	ldrb	r1, [r6, #1]
    a4dc:	2903      	cmp	r1, #3
    a4de:	d010      	beq.n	a502 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    a4e0:	b9a0      	cbnz	r0, a50c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    a4e2:	e004      	b.n	a4ee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    a4e4:	2042      	movs	r0, #66	; 0x42
    a4e6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a4ea:	b97f      	cbnz	r7, a50c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    a4ec:	e7f2      	b.n	a4d4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    a4ee:	2904      	cmp	r1, #4
    a4f0:	d107      	bne.n	a502 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    a4f2:	4620      	mov	r0, r4
    a4f4:	f7ff fc51 	bl	9d9a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a4f8:	b140      	cbz	r0, a50c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    a4fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a4fc:	f7fe feb7 	bl	926e <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    a500:	b120      	cbz	r0, a50c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    a502:	2d01      	cmp	r5, #1
    a504:	d004      	beq.n	a510 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    a506:	2d03      	cmp	r5, #3
    a508:	d002      	beq.n	a510 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    a50a:	e00e      	b.n	a52a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    a50c:	2012      	movs	r0, #18
    a50e:	e7ea      	b.n	a4e6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    a510:	4620      	mov	r0, r4
    a512:	f7ff fa84 	bl	9a1e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a516:	b108      	cbz	r0, a51c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    a518:	2200      	movs	r2, #0
    a51a:	e002      	b.n	a522 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    a51c:	2d01      	cmp	r5, #1
    a51e:	d013      	beq.n	a548 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    a520:	2201      	movs	r2, #1
    a522:	4668      	mov	r0, sp
    a524:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a526:	f7fe fe3a 	bl	919e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    a52a:	2d04      	cmp	r5, #4
    a52c:	d018      	beq.n	a560 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    a52e:	6872      	ldr	r2, [r6, #4]
    a530:	463b      	mov	r3, r7
    a532:	2101      	movs	r1, #1
    a534:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a536:	f7fe fe66 	bl	9206 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    a53a:	b138      	cbz	r0, a54c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    a53c:	7870      	ldrb	r0, [r6, #1]
    a53e:	2802      	cmp	r0, #2
    a540:	d006      	beq.n	a550 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    a542:	2803      	cmp	r0, #3
    a544:	d004      	beq.n	a550 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    a546:	e00b      	b.n	a560 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    a548:	2202      	movs	r2, #2
    a54a:	e7ea      	b.n	a522 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    a54c:	2007      	movs	r0, #7
    a54e:	e7ca      	b.n	a4e6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    a550:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a552:	f7fe febd 	bl	92d0 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    a556:	4602      	mov	r2, r0
    a558:	2101      	movs	r1, #1
    a55a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a55c:	f7fe fe95 	bl	928a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    a560:	2000      	movs	r0, #0
    a562:	e7c0      	b.n	a4e6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000a564 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    a564:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a568:	4607      	mov	r7, r0
    a56a:	7845      	ldrb	r5, [r0, #1]
    a56c:	78c6      	ldrb	r6, [r0, #3]
    a56e:	7800      	ldrb	r0, [r0, #0]
    a570:	2101      	movs	r1, #1
    a572:	f7fe fd62 	bl	903a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a576:	0004      	movs	r4, r0
    a578:	d003      	beq.n	a582 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    a57a:	f7ff fa52 	bl	9a22 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    a57e:	b118      	cbz	r0, a588 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    a580:	e003      	b.n	a58a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    a582:	2042      	movs	r0, #66	; 0x42
    a584:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a588:	2600      	movs	r6, #0
    a58a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a58c:	f7fe fea4 	bl	92d8 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    a590:	4430      	add	r0, r6
    a592:	b281      	uxth	r1, r0
    a594:	4688      	mov	r8, r1
    a596:	4620      	mov	r0, r4
    a598:	2201      	movs	r2, #1
    a59a:	f000 f8dc 	bl	a756 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x68>
    a59e:	2800      	cmp	r0, #0
    a5a0:	d1f0      	bne.n	a584 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    a5a2:	2d04      	cmp	r5, #4
    a5a4:	d008      	beq.n	a5b8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    a5a6:	2d03      	cmp	r5, #3
    a5a8:	d00a      	beq.n	a5c0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    a5aa:	b12e      	cbz	r6, a5b8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    a5ac:	4620      	mov	r0, r4
    a5ae:	f7ff fbf4 	bl	9d9a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a5b2:	b118      	cbz	r0, a5bc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    a5b4:	200c      	movs	r0, #12
    a5b6:	e7e5      	b.n	a584 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    a5b8:	2012      	movs	r0, #18
    a5ba:	e7e3      	b.n	a584 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    a5bc:	2d01      	cmp	r5, #1
    a5be:	d10c      	bne.n	a5da <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    a5c0:	4620      	mov	r0, r4
    a5c2:	f7ff fa2c 	bl	9a1e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a5c6:	b108      	cbz	r0, a5cc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    a5c8:	2204      	movs	r2, #4
    a5ca:	e002      	b.n	a5d2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    a5cc:	2d01      	cmp	r5, #1
    a5ce:	d010      	beq.n	a5f2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    a5d0:	2205      	movs	r2, #5
    a5d2:	4668      	mov	r0, sp
    a5d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a5d6:	f7fe fde2 	bl	919e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    a5da:	687a      	ldr	r2, [r7, #4]
    a5dc:	4633      	mov	r3, r6
    a5de:	2100      	movs	r1, #0
    a5e0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a5e2:	f7fe fe10 	bl	9206 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    a5e6:	b130      	cbz	r0, a5f6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    a5e8:	2d02      	cmp	r5, #2
    a5ea:	d006      	beq.n	a5fa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    a5ec:	2d03      	cmp	r5, #3
    a5ee:	d004      	beq.n	a5fa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    a5f0:	e008      	b.n	a604 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    a5f2:	2206      	movs	r2, #6
    a5f4:	e7ed      	b.n	a5d2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    a5f6:	2007      	movs	r0, #7
    a5f8:	e7c4      	b.n	a584 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    a5fa:	4642      	mov	r2, r8
    a5fc:	2100      	movs	r1, #0
    a5fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a600:	f7fe fe43 	bl	928a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    a604:	2000      	movs	r0, #0
    a606:	e7bd      	b.n	a584 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000a608 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    a608:	b510      	push	{r4, lr}
    a60a:	4604      	mov	r4, r0
    a60c:	4601      	mov	r1, r0
    a60e:	2000      	movs	r0, #0
    a610:	f7fa fcb0 	bl	4f74 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    a614:	b910      	cbnz	r0, a61c <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    a616:	2000      	movs	r0, #0
    a618:	6020      	str	r0, [r4, #0]
    a61a:	80a0      	strh	r0, [r4, #4]
    a61c:	2000      	movs	r0, #0
    a61e:	bd10      	pop	{r4, pc}

0000a620 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    a620:	b510      	push	{r4, lr}
    a622:	f7fc fbb1 	bl	6d88 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    a626:	2000      	movs	r0, #0
    a628:	bd10      	pop	{r4, pc}

0000a62a <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    a62a:	f000 b860 	b.w	a6ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000a62e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    a62e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a632:	b086      	sub	sp, #24
    a634:	4689      	mov	r9, r1
    a636:	4607      	mov	r7, r0
    a638:	8800      	ldrh	r0, [r0, #0]
    a63a:	a901      	add	r1, sp, #4
    a63c:	f7fe ff4c 	bl	94d8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a640:	2800      	cmp	r0, #0
    a642:	d136      	bne.n	a6b2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    a644:	9802      	ldr	r0, [sp, #8]
    a646:	4601      	mov	r1, r0
    a648:	4688      	mov	r8, r1
    a64a:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    a64e:	f500 7494 	add.w	r4, r0, #296	; 0x128
    a652:	f88d 1000 	strb.w	r1, [sp]
    a656:	9900      	ldr	r1, [sp, #0]
    a658:	9100      	str	r1, [sp, #0]
    a65a:	f89d 1000 	ldrb.w	r1, [sp]
    a65e:	3080      	adds	r0, #128	; 0x80
    a660:	b109      	cbz	r1, a666 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
    a662:	2601      	movs	r6, #1
    a664:	e000      	b.n	a668 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
    a666:	2600      	movs	r6, #0
    a668:	7d81      	ldrb	r1, [r0, #22]
    a66a:	2923      	cmp	r1, #35	; 0x23
    a66c:	d100      	bne.n	a670 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    a66e:	b13e      	cbz	r6, a680 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
    a670:	2500      	movs	r5, #0
    a672:	3064      	adds	r0, #100	; 0x64
    a674:	2108      	movs	r1, #8
    a676:	4682      	mov	sl, r0
    a678:	f7ff fd3a 	bl	a0f0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x74>
    a67c:	b110      	cbz	r0, a684 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
    a67e:	e007      	b.n	a690 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    a680:	2501      	movs	r5, #1
    a682:	e7f6      	b.n	a672 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
    a684:	210b      	movs	r1, #11
    a686:	4650      	mov	r0, sl
    a688:	f7ff fd32 	bl	a0f0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x74>
    a68c:	b900      	cbnz	r0, a690 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    a68e:	b17d      	cbz	r5, a6b0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
    a690:	a804      	add	r0, sp, #16
    a692:	9000      	str	r0, [sp, #0]
    a694:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a698:	ab03      	add	r3, sp, #12
    a69a:	463a      	mov	r2, r7
    a69c:	4641      	mov	r1, r8
    a69e:	f000 f93f 	bl	a920 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x232>
    a6a2:	0005      	movs	r5, r0
    a6a4:	d105      	bne.n	a6b2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    a6a6:	340c      	adds	r4, #12
    a6a8:	20ff      	movs	r0, #255	; 0xff
    a6aa:	7060      	strb	r0, [r4, #1]
    a6ac:	b936      	cbnz	r6, a6bc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    a6ae:	e003      	b.n	a6b8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    a6b0:	201a      	movs	r0, #26
    a6b2:	b006      	add	sp, #24
    a6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a6b8:	7820      	ldrb	r0, [r4, #0]
    a6ba:	b108      	cbz	r0, a6c0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
    a6bc:	253a      	movs	r5, #58	; 0x3a
    a6be:	e012      	b.n	a6e6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
    a6c0:	f884 9000 	strb.w	r9, [r4]
    a6c4:	f89d 000c 	ldrb.w	r0, [sp, #12]
    a6c8:	70a0      	strb	r0, [r4, #2]
    a6ca:	f89d 1010 	ldrb.w	r1, [sp, #16]
    a6ce:	70e1      	strb	r1, [r4, #3]
    a6d0:	f88d 0000 	strb.w	r0, [sp]
    a6d4:	f88d 1001 	strb.w	r1, [sp, #1]
    a6d8:	88b8      	ldrh	r0, [r7, #4]
    a6da:	f8ad 0002 	strh.w	r0, [sp, #2]
    a6de:	4669      	mov	r1, sp
    a6e0:	4640      	mov	r0, r8
    a6e2:	f7fe ff3c 	bl	955e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a6e6:	2000      	movs	r0, #0
    a6e8:	7060      	strb	r0, [r4, #1]
    a6ea:	4628      	mov	r0, r5
    a6ec:	e7e1      	b.n	a6b2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

0000a6ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    a6ee:	b510      	push	{r4, lr}
    a6f0:	f7fe fe7b 	bl	93ea <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a6f4:	f7fa fcb6 	bl	5064 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a6f8:	f7fc fb90 	bl	6e1c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    a6fc:	f7ff f844 	bl	9788 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    a700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a704:	f7fc b960 	b.w	69c8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x40>
    a708:	f44f 71a4 	mov.w	r1, #328	; 0x148
    a70c:	4288      	cmp	r0, r1
    a70e:	d303      	bcc.n	a718 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a>
    a710:	f640 0148 	movw	r1, #2120	; 0x848
    a714:	4288      	cmp	r0, r1
    a716:	d300      	bcc.n	a71a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c>
    a718:	4608      	mov	r0, r1
    a71a:	b280      	uxth	r0, r0
    a71c:	4770      	bx	lr
    a71e:	07c1      	lsls	r1, r0, #31
    a720:	d001      	beq.n	a726 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
    a722:	2001      	movs	r0, #1
    a724:	4770      	bx	lr
    a726:	0780      	lsls	r0, r0, #30
    a728:	d501      	bpl.n	a72e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40>
    a72a:	2002      	movs	r0, #2
    a72c:	4770      	bx	lr
    a72e:	2000      	movs	r0, #0
    a730:	4770      	bx	lr
    a732:	b510      	push	{r4, lr}
    a734:	f7fc f932 	bl	699c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x14>
    a738:	b158      	cbz	r0, a752 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x64>
    a73a:	f7fc f965 	bl	6a08 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    a73e:	4604      	mov	r4, r0
    a740:	f7ff f96f 	bl	9a22 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    a744:	b918      	cbnz	r0, a74e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x60>
    a746:	4620      	mov	r0, r4
    a748:	f7ff f961 	bl	9a0e <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a74c:	b108      	cbz	r0, a752 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x64>
    a74e:	2000      	movs	r0, #0
    a750:	bd10      	pop	{r4, pc}
    a752:	2001      	movs	r0, #1
    a754:	bd10      	pop	{r4, pc}
    a756:	b570      	push	{r4, r5, r6, lr}
    a758:	460c      	mov	r4, r1
    a75a:	4605      	mov	r5, r0
    a75c:	b112      	cbz	r2, a764 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x76>
    a75e:	291f      	cmp	r1, #31
    a760:	d80c      	bhi.n	a77c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8e>
    a762:	e016      	b.n	a792 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    a764:	f7fa fac4 	bl	4cf0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    a768:	42a0      	cmp	r0, r4
    a76a:	d201      	bcs.n	a770 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    a76c:	2007      	movs	r0, #7
    a76e:	bd70      	pop	{r4, r5, r6, pc}
    a770:	4628      	mov	r0, r5
    a772:	f7ff f954 	bl	9a1e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a776:	b118      	cbz	r0, a780 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x92>
    a778:	2c1f      	cmp	r4, #31
    a77a:	d901      	bls.n	a780 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x92>
    a77c:	2012      	movs	r0, #18
    a77e:	bd70      	pop	{r4, r5, r6, pc}
    a780:	4628      	mov	r0, r5
    a782:	f7ff f955 	bl	9a30 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a786:	b130      	cbz	r0, a796 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
    a788:	4621      	mov	r1, r4
    a78a:	4628      	mov	r0, r5
    a78c:	f7ff f91c 	bl	99c8 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    a790:	b118      	cbz	r0, a79a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xac>
    a792:	2000      	movs	r0, #0
    a794:	bd70      	pop	{r4, r5, r6, pc}
    a796:	2042      	movs	r0, #66	; 0x42
    a798:	bd70      	pop	{r4, r5, r6, pc}
    a79a:	2045      	movs	r0, #69	; 0x45
    a79c:	bd70      	pop	{r4, r5, r6, pc}
    a79e:	b510      	push	{r4, lr}
    a7a0:	4604      	mov	r4, r0
    a7a2:	7840      	ldrb	r0, [r0, #1]
    a7a4:	06c1      	lsls	r1, r0, #27
    a7a6:	d51c      	bpl.n	a7e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    a7a8:	07c0      	lsls	r0, r0, #31
    a7aa:	d00b      	beq.n	a7c4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
    a7ac:	f7fc fb0c 	bl	6dc8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    a7b0:	b1b8      	cbz	r0, a7e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    a7b2:	7860      	ldrb	r0, [r4, #1]
    a7b4:	06c1      	lsls	r1, r0, #27
    a7b6:	d405      	bmi.n	a7c4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
    a7b8:	0700      	lsls	r0, r0, #28
    a7ba:	d503      	bpl.n	a7c4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
    a7bc:	7d20      	ldrb	r0, [r4, #20]
    a7be:	2802      	cmp	r0, #2
    a7c0:	d10f      	bne.n	a7e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    a7c2:	e010      	b.n	a7e6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf8>
    a7c4:	7d20      	ldrb	r0, [r4, #20]
    a7c6:	2802      	cmp	r0, #2
    a7c8:	d001      	beq.n	a7ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    a7ca:	7ea0      	ldrb	r0, [r4, #26]
    a7cc:	b948      	cbnz	r0, a7e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    a7ce:	7860      	ldrb	r0, [r4, #1]
    a7d0:	0700      	lsls	r0, r0, #28
    a7d2:	d408      	bmi.n	a7e6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf8>
    a7d4:	f8d4 0005 	ldr.w	r0, [r4, #5]
    a7d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    a7dc:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    a7e0:	d201      	bcs.n	a7e6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf8>
    a7e2:	2011      	movs	r0, #17
    a7e4:	bd10      	pop	{r4, pc}
    a7e6:	2000      	movs	r0, #0
    a7e8:	bd10      	pop	{r4, pc}
    a7ea:	b538      	push	{r3, r4, r5, lr}
    a7ec:	4604      	mov	r4, r0
    a7ee:	7800      	ldrb	r0, [r0, #0]
    a7f0:	28ef      	cmp	r0, #239	; 0xef
    a7f2:	d843      	bhi.n	a87c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a7f4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a7f8:	f8ad 0000 	strh.w	r0, [sp]
    a7fc:	9800      	ldr	r0, [sp, #0]
    a7fe:	f000 f8df 	bl	a9c0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2d2>
    a802:	b3a0      	cbz	r0, a86e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    a804:	7861      	ldrb	r1, [r4, #1]
    a806:	0708      	lsls	r0, r1, #28
    a808:	d40b      	bmi.n	a822 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x134>
    a80a:	f8d4 0002 	ldr.w	r0, [r4, #2]
    a80e:	f8d4 3005 	ldr.w	r3, [r4, #5]
    a812:	0a02      	lsrs	r2, r0, #8
    a814:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    a818:	d830      	bhi.n	a87c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a81a:	2220      	movs	r2, #32
    a81c:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    a820:	d82c      	bhi.n	a87c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a822:	7a60      	ldrb	r0, [r4, #9]
    a824:	b318      	cbz	r0, a86e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    a826:	2807      	cmp	r0, #7
    a828:	d828      	bhi.n	a87c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a82a:	7aa0      	ldrb	r0, [r4, #10]
    a82c:	b128      	cbz	r0, a83a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14c>
    a82e:	2801      	cmp	r0, #1
    a830:	d003      	beq.n	a83a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14c>
    a832:	2802      	cmp	r0, #2
    a834:	d001      	beq.n	a83a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14c>
    a836:	2803      	cmp	r0, #3
    a838:	d120      	bne.n	a87c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a83a:	074a      	lsls	r2, r1, #29
    a83c:	d403      	bmi.n	a846 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    a83e:	2802      	cmp	r0, #2
    a840:	d001      	beq.n	a846 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    a842:	2803      	cmp	r0, #3
    a844:	d105      	bne.n	a852 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x164>
    a846:	7ae0      	ldrb	r0, [r4, #11]
    a848:	b108      	cbz	r0, a84e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x160>
    a84a:	2801      	cmp	r0, #1
    a84c:	d116      	bne.n	a87c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a84e:	0748      	lsls	r0, r1, #29
    a850:	d407      	bmi.n	a862 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    a852:	7ca0      	ldrb	r0, [r4, #18]
    a854:	b128      	cbz	r0, a862 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    a856:	2801      	cmp	r0, #1
    a858:	d003      	beq.n	a862 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    a85a:	2802      	cmp	r0, #2
    a85c:	d001      	beq.n	a862 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    a85e:	2803      	cmp	r0, #3
    a860:	d10c      	bne.n	a87c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a862:	06c8      	lsls	r0, r1, #27
    a864:	7d20      	ldrb	r0, [r4, #20]
    a866:	d503      	bpl.n	a870 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x182>
    a868:	2801      	cmp	r0, #1
    a86a:	d107      	bne.n	a87c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a86c:	e002      	b.n	a874 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x186>
    a86e:	e005      	b.n	a87c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a870:	2802      	cmp	r0, #2
    a872:	d003      	beq.n	a87c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a874:	7e20      	ldrb	r0, [r4, #24]
    a876:	b118      	cbz	r0, a880 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x192>
    a878:	2801      	cmp	r0, #1
    a87a:	d001      	beq.n	a880 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x192>
    a87c:	2012      	movs	r0, #18
    a87e:	bd38      	pop	{r3, r4, r5, pc}
    a880:	2000      	movs	r0, #0
    a882:	bd38      	pop	{r3, r4, r5, pc}
    a884:	28fb      	cmp	r0, #251	; 0xfb
    a886:	d803      	bhi.n	a890 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a2>
    a888:	f640 0048 	movw	r0, #2120	; 0x848
    a88c:	4281      	cmp	r1, r0
    a88e:	d901      	bls.n	a894 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a6>
    a890:	2011      	movs	r0, #17
    a892:	4770      	bx	lr
    a894:	2000      	movs	r0, #0
    a896:	4770      	bx	lr
    a898:	381b      	subs	r0, #27
    a89a:	28e1      	cmp	r0, #225	; 0xe1
    a89c:	d206      	bcs.n	a8ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1be>
    a89e:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    a8a2:	d303      	bcc.n	a8ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1be>
    a8a4:	f244 2090 	movw	r0, #17040	; 0x4290
    a8a8:	4281      	cmp	r1, r0
    a8aa:	d901      	bls.n	a8b0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c2>
    a8ac:	2012      	movs	r0, #18
    a8ae:	4770      	bx	lr
    a8b0:	2000      	movs	r0, #0
    a8b2:	4770      	bx	lr
    a8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8b8:	4606      	mov	r6, r0
    a8ba:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    a8be:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    a8c2:	4615      	mov	r5, r2
    a8c4:	302c      	adds	r0, #44	; 0x2c
    a8c6:	f7fb ff7b 	bl	67c0 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
    a8ca:	4680      	mov	r8, r0
    a8cc:	2102      	movs	r1, #2
    a8ce:	f7fe fe16 	bl	94fe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    a8d2:	4287      	cmp	r7, r0
    a8d4:	d200      	bcs.n	a8d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ea>
    a8d6:	4638      	mov	r0, r7
    a8d8:	4607      	mov	r7, r0
    a8da:	2102      	movs	r1, #2
    a8dc:	4640      	mov	r0, r8
    a8de:	f7fe fe0e 	bl	94fe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    a8e2:	4284      	cmp	r4, r0
    a8e4:	d200      	bcs.n	a8e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fa>
    a8e6:	4620      	mov	r0, r4
    a8e8:	8831      	ldrh	r1, [r6, #0]
    a8ea:	8029      	strh	r1, [r5, #0]
    a8ec:	2f1b      	cmp	r7, #27
    a8ee:	d913      	bls.n	a918 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    a8f0:	2ffb      	cmp	r7, #251	; 0xfb
    a8f2:	d300      	bcc.n	a8f6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x208>
    a8f4:	27fb      	movs	r7, #251	; 0xfb
    a8f6:	806f      	strh	r7, [r5, #2]
    a8f8:	281b      	cmp	r0, #27
    a8fa:	d90f      	bls.n	a91c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22e>
    a8fc:	28fb      	cmp	r0, #251	; 0xfb
    a8fe:	d300      	bcc.n	a902 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x214>
    a900:	20fb      	movs	r0, #251	; 0xfb
    a902:	80e8      	strh	r0, [r5, #6]
    a904:	4640      	mov	r0, r8
    a906:	f7ff feff 	bl	a708 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
    a90a:	80a8      	strh	r0, [r5, #4]
    a90c:	4640      	mov	r0, r8
    a90e:	f7ff fefb 	bl	a708 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
    a912:	8128      	strh	r0, [r5, #8]
    a914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a918:	271b      	movs	r7, #27
    a91a:	e7ec      	b.n	a8f6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x208>
    a91c:	201b      	movs	r0, #27
    a91e:	e7f0      	b.n	a902 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x214>
    a920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a924:	7890      	ldrb	r0, [r2, #2]
    a926:	9e06      	ldr	r6, [sp, #24]
    a928:	461d      	mov	r5, r3
    a92a:	4614      	mov	r4, r2
    a92c:	b908      	cbnz	r0, a932 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x244>
    a92e:	f7fc fa65 	bl	6dfc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    a932:	78e4      	ldrb	r4, [r4, #3]
    a934:	4607      	mov	r7, r0
    a936:	b914      	cbnz	r4, a93e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x250>
    a938:	f7fc fa60 	bl	6dfc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    a93c:	4604      	mov	r4, r0
    a93e:	b16f      	cbz	r7, a95c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26e>
    a940:	b164      	cbz	r4, a95c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26e>
    a942:	4638      	mov	r0, r7
    a944:	f7ff feeb 	bl	a71e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
    a948:	4620      	mov	r0, r4
    a94a:	f7ff fee8 	bl	a71e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
    a94e:	b12f      	cbz	r7, a95c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26e>
    a950:	b124      	cbz	r4, a95c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26e>
    a952:	702f      	strb	r7, [r5, #0]
    a954:	7034      	strb	r4, [r6, #0]
    a956:	2000      	movs	r0, #0
    a958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a95c:	2009      	movs	r0, #9
    a95e:	e7fb      	b.n	a958 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26a>
    a960:	207f      	movs	r0, #127	; 0x7f
    a962:	f000 b826 	b.w	a9b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c4>
    a966:	b570      	push	{r4, r5, r6, lr}
    a968:	4605      	mov	r5, r0
    a96a:	f7ff f861 	bl	9a30 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a96e:	b170      	cbz	r0, a98e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a0>
    a970:	4628      	mov	r0, r5
    a972:	f7ff fa12 	bl	9d9a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a976:	2800      	cmp	r0, #0
    a978:	d008      	beq.n	a98c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x29e>
    a97a:	4628      	mov	r0, r5
    a97c:	f7ff fa0a 	bl	9d94 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
    a980:	4604      	mov	r4, r0
    a982:	4628      	mov	r0, r5
    a984:	f7ff f9e0 	bl	9d48 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    a988:	b118      	cbz	r0, a992 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
    a98a:	200c      	movs	r0, #12
    a98c:	bd70      	pop	{r4, r5, r6, pc}
    a98e:	2042      	movs	r0, #66	; 0x42
    a990:	bd70      	pop	{r4, r5, r6, pc}
    a992:	b164      	cbz	r4, a9ae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c0>
    a994:	8820      	ldrh	r0, [r4, #0]
    a996:	f7fe fcf7 	bl	9388 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    a99a:	8820      	ldrh	r0, [r4, #0]
    a99c:	2100      	movs	r1, #0
    a99e:	f7f9 ff63 	bl	4868 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a9a2:	b120      	cbz	r0, a9ae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c0>
    a9a4:	f241 6154 	movw	r1, #5716	; 0x1654
    a9a8:	2039      	movs	r0, #57	; 0x39
    a9aa:	f7f9 fd23 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9ae:	2000      	movs	r0, #0
    a9b0:	bd70      	pop	{r4, r5, r6, pc}
    a9b2:	b508      	push	{r3, lr}
    a9b4:	f640 1288 	movw	r2, #2440	; 0x988
    a9b8:	4669      	mov	r1, sp
    a9ba:	f7f9 fbfd 	bl	41b8 <mpsl_fem_tx_power_split>
    a9be:	bd08      	pop	{r3, pc}
    a9c0:	b2c0      	uxtb	r0, r0
    a9c2:	06c1      	lsls	r1, r0, #27
    a9c4:	d40c      	bmi.n	a9e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2f2>
    a9c6:	0681      	lsls	r1, r0, #26
    a9c8:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    a9cc:	d503      	bpl.n	a9d6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
    a9ce:	b9d1      	cbnz	r1, aa06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    a9d0:	0781      	lsls	r1, r0, #30
    a9d2:	d418      	bmi.n	aa06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    a9d4:	e001      	b.n	a9da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ec>
    a9d6:	2900      	cmp	r1, #0
    a9d8:	d1fa      	bne.n	a9d0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e2>
    a9da:	0700      	lsls	r0, r0, #28
    a9dc:	d413      	bmi.n	aa06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    a9de:	e010      	b.n	aa02 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x314>
    a9e0:	0641      	lsls	r1, r0, #25
    a9e2:	d410      	bmi.n	aa06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    a9e4:	0681      	lsls	r1, r0, #26
    a9e6:	d40e      	bmi.n	aa06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    a9e8:	07c1      	lsls	r1, r0, #31
    a9ea:	ea4f 7180 	mov.w	r1, r0, lsl #30
    a9ee:	d004      	beq.n	a9fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30c>
    a9f0:	2900      	cmp	r1, #0
    a9f2:	db02      	blt.n	a9fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30c>
    a9f4:	0740      	lsls	r0, r0, #29
    a9f6:	d404      	bmi.n	aa02 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x314>
    a9f8:	e005      	b.n	aa06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    a9fa:	0701      	lsls	r1, r0, #28
    a9fc:	d403      	bmi.n	aa06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    a9fe:	0740      	lsls	r0, r0, #29
    aa00:	d401      	bmi.n	aa06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    aa02:	2001      	movs	r0, #1
    aa04:	4770      	bx	lr
    aa06:	2000      	movs	r0, #0
    aa08:	4770      	bx	lr
    aa0a:	b510      	push	{r4, lr}
    aa0c:	f7fb febc 	bl	6788 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    aa10:	b110      	cbz	r0, aa18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x32a>
    aa12:	f240 110d 	movw	r1, #269	; 0x10d
    aa16:	e004      	b.n	aa22 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x334>
    aa18:	f7fb f8e6 	bl	5be8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    aa1c:	b120      	cbz	r0, aa28 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    aa1e:	f44f 7189 	mov.w	r1, #274	; 0x112
    aa22:	2001      	movs	r0, #1
    aa24:	f7f9 fce6 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aa2c:	2001      	movs	r0, #1
    aa2e:	f7fe bae1 	b.w	8ff4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    aa32:	6802      	ldr	r2, [r0, #0]
    aa34:	b912      	cbnz	r2, aa3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x34e>
    aa36:	6001      	str	r1, [r0, #0]
    aa38:	4770      	bx	lr
    aa3a:	4602      	mov	r2, r0
    aa3c:	6850      	ldr	r0, [r2, #4]
    aa3e:	b108      	cbz	r0, aa44 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x356>
    aa40:	428a      	cmp	r2, r1
    aa42:	d1fa      	bne.n	aa3a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x34c>
    aa44:	428a      	cmp	r2, r1
    aa46:	d0f7      	beq.n	aa38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x34a>
    aa48:	6051      	str	r1, [r2, #4]
    aa4a:	4770      	bx	lr
    aa4c:	b510      	push	{r4, lr}
    aa4e:	4604      	mov	r4, r0
    aa50:	e002      	b.n	aa58 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36a>
    aa52:	6820      	ldr	r0, [r4, #0]
    aa54:	4780      	blx	r0
    aa56:	6864      	ldr	r4, [r4, #4]
    aa58:	2c00      	cmp	r4, #0
    aa5a:	d1fa      	bne.n	aa52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x364>
    aa5c:	bd10      	pop	{r4, pc}

0000aa5e <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
    aa5e:	f7f9 b911 	b.w	3c84 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    aa62:	0001      	.short	0x0001
    aa64:	0002000b 	.word	0x0002000b
    aa68:	0005000a 	.word	0x0005000a
    aa6c:	000a0009 	.word	0x000a0009
    aa70:	00140008 	.word	0x00140008
    aa74:	001e0007 	.word	0x001e0007
    aa78:	00320006 	.word	0x00320006
    aa7c:	004b0005 	.word	0x004b0005
    aa80:	00640004 	.word	0x00640004
    aa84:	00960003 	.word	0x00960003
    aa88:	00fa0002 	.word	0x00fa0002
    aa8c:	01f40001 	.word	0x01f40001
	...

0000aa92 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    aa92:	b510      	push	{r4, lr}
    aa94:	f7fc fc16 	bl	72c4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    aa98:	f000 f818 	bl	aacc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    aa9c:	f7fc fa22 	bl	6ee4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    aaa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aaa4:	f7fc ba88 	b.w	6fb8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000aaa8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    aaa8:	b510      	push	{r4, lr}
    aaaa:	24c8      	movs	r4, #200	; 0xc8
    aaac:	1e64      	subs	r4, r4, #1
    aaae:	b2e4      	uxtb	r4, r4
    aab0:	f7fc fa36 	bl	6f20 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    aab4:	2802      	cmp	r0, #2
    aab6:	d003      	beq.n	aac0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    aab8:	2801      	cmp	r0, #1
    aaba:	d000      	beq.n	aabe <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    aabc:	2000      	movs	r0, #0
    aabe:	bd10      	pop	{r4, pc}
    aac0:	2c00      	cmp	r4, #0
    aac2:	d1f3      	bne.n	aaac <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    aac4:	21b1      	movs	r1, #177	; 0xb1
    aac6:	203b      	movs	r0, #59	; 0x3b
    aac8:	f7f9 fc94 	bl	43f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000aacc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    aacc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    aad0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    aad4:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    aad8:	f3bf 8f4f 	dsb	sy
    aadc:	f3bf 8f6f 	isb	sy
    aae0:	f7fc ba9e 	b.w	7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>
    aae4:	2800      	cmp	r0, #0
    aae6:	db09      	blt.n	aafc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    aae8:	f000 021f 	and.w	r2, r0, #31
    aaec:	2101      	movs	r1, #1
    aaee:	4091      	lsls	r1, r2
    aaf0:	0940      	lsrs	r0, r0, #5
    aaf2:	0080      	lsls	r0, r0, #2
    aaf4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    aaf8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    aafc:	4770      	bx	lr
    aafe:	2800      	cmp	r0, #0
    ab00:	db0d      	blt.n	ab1e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    ab02:	f000 021f 	and.w	r2, r0, #31
    ab06:	2101      	movs	r1, #1
    ab08:	4091      	lsls	r1, r2
    ab0a:	0940      	lsrs	r0, r0, #5
    ab0c:	0080      	lsls	r0, r0, #2
    ab0e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ab12:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    ab16:	f3bf 8f4f 	dsb	sy
    ab1a:	f3bf 8f6f 	isb	sy
    ab1e:	4770      	bx	lr
    ab20:	5840      	ldr	r0, [r0, r1]
    ab22:	2800      	cmp	r0, #0
    ab24:	d000      	beq.n	ab28 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
    ab26:	2001      	movs	r0, #1
    ab28:	4770      	bx	lr
    ab2a:	5840      	ldr	r0, [r0, r1]
    ab2c:	2800      	cmp	r0, #0
    ab2e:	d000      	beq.n	ab32 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
    ab30:	2001      	movs	r0, #1
    ab32:	4770      	bx	lr

0000ab34 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    ab34:	b510      	push	{r4, lr}
    ab36:	4604      	mov	r4, r0
    ab38:	4608      	mov	r0, r1
    ab3a:	f7fc fcdd 	bl	74f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ab3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ab42:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    ab46:	fbb0 f0f1 	udiv	r0, r0, r1
    ab4a:	1a20      	subs	r0, r4, r0
    ab4c:	1e80      	subs	r0, r0, #2
    ab4e:	bd10      	pop	{r4, pc}

0000ab50 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    ab50:	b510      	push	{r4, lr}
    ab52:	4604      	mov	r4, r0
    ab54:	4608      	mov	r0, r1
    ab56:	f7fc fccf 	bl	74f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ab5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ab5e:	fbb0 f0f1 	udiv	r0, r0, r1
    ab62:	1a20      	subs	r0, r4, r0
    ab64:	bd10      	pop	{r4, pc}
    ab66:	ecd8      	.short	0xecd8
    ab68:	fcf8f4f0 	.word	0xfcf8f4f0
    ab6c:	04030200 	.word	0x04030200
    ab70:	08070605 	.word	0x08070605
	...
    ab88:	01010101 	.word	0x01010101
    ab8c:	02020202 	.word	0x02020202
    ab90:	03030303 	.word	0x03030303
    ab94:	04040404 	.word	0x04040404
    ab98:	05050505 	.word	0x05050505
    ab9c:	08070606 	.word	0x08070606
    aba0:	0c0b0a09 	.word	0x0c0b0a09
    aba4:	0000000d 	.word	0x0000000d
	...
    abb8:	01010100 	.word	0x01010100
    abbc:	02020201 	.word	0x02020201
    abc0:	03030302 	.word	0x03030302
    abc4:	04040403 	.word	0x04040403
    abc8:	05050504 	.word	0x05050504
    abcc:	06060605 	.word	0x06060605
    abd0:	00000908 	.word	0x00000908
    abd4:	00000000 	.word	0x00000000

0000abd8 <snap_calibration>:
	}
}


int snap_calibration(uint8_t* max_snap_values)
{
    abd8:	b510      	push	{r4, lr}
    abda:	4604      	mov	r4, r0
	play_haptic_buzz_normal();
    abdc:	f000 f890 	bl	ad00 <play_haptic_buzz_normal>
	snap_measurement_cal(max_snap_values);
    abe0:	4620      	mov	r0, r4
    abe2:	f006 fa85 	bl	110f0 <snap_measurement_cal>
	k_msleep(1000);
    abe6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    abea:	f006 fa65 	bl	110b8 <k_msleep.isra.0>

	play_haptic_buzz_normal();
    abee:	f000 f887 	bl	ad00 <play_haptic_buzz_normal>
	snap_measurement_cal(max_snap_values);
    abf2:	4620      	mov	r0, r4
    abf4:	f006 fa7c 	bl	110f0 <snap_measurement_cal>
	k_msleep(1000);
    abf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    abfc:	f006 fa5c 	bl	110b8 <k_msleep.isra.0>

	play_haptic_buzz_normal();
    ac00:	f000 f87e 	bl	ad00 <play_haptic_buzz_normal>
	snap_measurement_cal(max_snap_values);
    ac04:	4620      	mov	r0, r4
    ac06:	f006 fa73 	bl	110f0 <snap_measurement_cal>
	k_msleep(1000);
    ac0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ac0e:	f006 fa53 	bl	110b8 <k_msleep.isra.0>

	max_snap_values[0] *= THRESH_FACTOR;	
    ac12:	7820      	ldrb	r0, [r4, #0]
    ac14:	f7f5 fba2 	bl	35c <__aeabi_i2d>
    ac18:	a315      	add	r3, pc, #84	; (adr r3, ac70 <snap_calibration+0x98>)
    ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    ac1e:	f7f5 fc07 	bl	430 <__aeabi_dmul>
    ac22:	f7f5 fe17 	bl	854 <__aeabi_d2uiz>
    ac26:	7020      	strb	r0, [r4, #0]
	max_snap_values[1] *= THRESH_FACTOR;
    ac28:	7860      	ldrb	r0, [r4, #1]
    ac2a:	f7f5 fb97 	bl	35c <__aeabi_i2d>
    ac2e:	a310      	add	r3, pc, #64	; (adr r3, ac70 <snap_calibration+0x98>)
    ac30:	e9d3 2300 	ldrd	r2, r3, [r3]
    ac34:	f7f5 fbfc 	bl	430 <__aeabi_dmul>
    ac38:	f7f5 fe0c 	bl	854 <__aeabi_d2uiz>
    ac3c:	7060      	strb	r0, [r4, #1]
	max_snap_values[2] *= THRESH_FACTOR;
    ac3e:	78a0      	ldrb	r0, [r4, #2]
    ac40:	f7f5 fb8c 	bl	35c <__aeabi_i2d>
    ac44:	a30a      	add	r3, pc, #40	; (adr r3, ac70 <snap_calibration+0x98>)
    ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
    ac4a:	f7f5 fbf1 	bl	430 <__aeabi_dmul>
    ac4e:	f7f5 fe01 	bl	854 <__aeabi_d2uiz>
    ac52:	70a0      	strb	r0, [r4, #2]

	int val=0;
	//wait for calibration process to start from user
	while (val != 1)
	{
		val = get_button_press();
    ac54:	f000 f8e6 	bl	ae24 <get_button_press>
	while (val != 1)
    ac58:	2801      	cmp	r0, #1
    ac5a:	d1fb      	bne.n	ac54 <snap_calibration+0x7c>
	}
	//wait two second to check if the button is being held
	k_msleep(2000);
    ac5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    ac60:	f006 fa2a 	bl	110b8 <k_msleep.isra.0>
	val = get_button_press();
    ac64:	f000 f8de 	bl	ae24 <get_button_press>
	if (val)
	{
		return 0;
	}
	return 1;
}
    ac68:	fab0 f080 	clz	r0, r0
    ac6c:	0940      	lsrs	r0, r0, #5
    ac6e:	bd10      	pop	{r4, pc}
    ac70:	33333333 	.word	0x33333333
    ac74:	3feb3333 	.word	0x3feb3333

0000ac78 <gpio_pin_toggle_dt.constprop.0.isra.0>:
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
    ac78:	4802      	ldr	r0, [pc, #8]	; (ac84 <gpio_pin_toggle_dt.constprop.0.isra.0+0xc>)
    ac7a:	6883      	ldr	r3, [r0, #8]
    ac7c:	2102      	movs	r1, #2
    ac7e:	695b      	ldr	r3, [r3, #20]
    ac80:	4718      	bx	r3
    ac82:	bf00      	nop
    ac84:	00012c34 	.word	0x00012c34

0000ac88 <spi_read_write>:
{
    ac88:	b510      	push	{r4, lr}
    ac8a:	b090      	sub	sp, #64	; 0x40
	uint8_t rx_dummy= 0x00;
    ac8c:	2300      	movs	r3, #0
    ac8e:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t rx_dummy2= 0x00;
    ac92:	f88d 300f 	strb.w	r3, [sp, #15]
	struct spi_buf tx_buffer[] = 
    ac96:	f10d 0307 	add.w	r3, sp, #7
    ac9a:	9308      	str	r3, [sp, #32]
    ac9c:	f10d 0206 	add.w	r2, sp, #6
    aca0:	2301      	movs	r3, #1
    aca2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	struct spi_buf rx_buffer[] = {
    aca6:	f10d 020e 	add.w	r2, sp, #14
    acaa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    acae:	f10d 020f 	add.w	r2, sp, #15
    acb2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	struct spi_buf tx_buffer[] = 
    acb6:	9309      	str	r3, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
    acb8:	ab08      	add	r3, sp, #32
    acba:	9304      	str	r3, [sp, #16]
	struct spi_buf_set rx = {
    acbc:	aa0c      	add	r2, sp, #48	; 0x30
	struct spi_buf_set tx = {
    acbe:	2302      	movs	r3, #2
	struct spi_buf_set rx = {
    acc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
    acc4:	f88d 0007 	strb.w	r0, [sp, #7]
	struct spi_buf_set tx = {
    acc8:	9305      	str	r3, [sp, #20]
{
    acca:	f88d 1006 	strb.w	r1, [sp, #6]
    gpio_pin_toggle_dt(&blue_led);
    acce:	f7ff ffd3 	bl	ac78 <gpio_pin_toggle_dt.constprop.0.isra.0>
	err = spi_transceive(spi_dev, &spi_cfg, &tx, &rx);
    acd2:	4b09      	ldr	r3, [pc, #36]	; (acf8 <spi_read_write+0x70>)
    acd4:	6818      	ldr	r0, [r3, #0]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    acd6:	6883      	ldr	r3, [r0, #8]
    acd8:	4908      	ldr	r1, [pc, #32]	; (acfc <spi_read_write+0x74>)
    acda:	681c      	ldr	r4, [r3, #0]
    acdc:	aa04      	add	r2, sp, #16
    acde:	ab06      	add	r3, sp, #24
    ace0:	47a0      	blx	r4
    gpio_pin_toggle_dt(&blue_led);
    ace2:	f7ff ffc9 	bl	ac78 <gpio_pin_toggle_dt.constprop.0.isra.0>
	uint16_t rx_receive = ((uint16_t)rx_dummy << 8) | rx_dummy2;
    ace6:	f89d 000e 	ldrb.w	r0, [sp, #14]
    acea:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    acee:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    acf2:	b010      	add	sp, #64	; 0x40
    acf4:	bd10      	pop	{r4, pc}
    acf6:	bf00      	nop
    acf8:	2000037c 	.word	0x2000037c
    acfc:	00012e18 	.word	0x00012e18

0000ad00 <play_haptic_buzz_normal>:
{
    ad00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(counter<last_sample) // playing the waveform
    ad02:	4c18      	ldr	r4, [pc, #96]	; (ad64 <play_haptic_buzz_normal+0x64>)
    ad04:	4f18      	ldr	r7, [pc, #96]	; (ad68 <play_haptic_buzz_normal+0x68>)
    ad06:	4d19      	ldr	r5, [pc, #100]	; (ad6c <play_haptic_buzz_normal+0x6c>)
{
    ad08:	2650      	movs	r6, #80	; 0x50
	drivingWaitFifoEmpty(); // wait until BOS1901 internal FIFO is empty before sending the waveform points.
    ad0a:	f006 f9e5 	bl	110d8 <drivingWaitFifoEmpty>
	spi_read_write(0x77, 0xE7);  // set SENSE = 0 to drive the output
    ad0e:	21e7      	movs	r1, #231	; 0xe7
    ad10:	2077      	movs	r0, #119	; 0x77
    ad12:	f7ff ffb9 	bl	ac88 <spi_read_write>
    if(counter<last_sample) // playing the waveform
    ad16:	6823      	ldr	r3, [r4, #0]
    ad18:	683a      	ldr	r2, [r7, #0]
    ad1a:	4293      	cmp	r3, r2
    ad1c:	da19      	bge.n	ad52 <play_haptic_buzz_normal+0x52>
		uint8_t reg1 = (uint8_t)((press_waveform[counter] & 0xFF00) >> 8);
    ad1e:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
        spi_read_write(reg1, reg2);// Timer expired: send a new point
    ad22:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
    ad26:	0a00      	lsrs	r0, r0, #8
    ad28:	f7ff ffae 	bl	ac88 <spi_read_write>
		counter++;
    ad2c:	6823      	ldr	r3, [r4, #0]
    ad2e:	3301      	adds	r3, #1
    ad30:	6023      	str	r3, [r4, #0]
		k_msleep(5);
    ad32:	2005      	movs	r0, #5
    ad34:	f006 f9c0 	bl	110b8 <k_msleep.isra.0>
	volatile uint16_t ignore = spi_read_write(0x56, 0x07); // disable output once trimming is done.
    ad38:	2107      	movs	r1, #7
    ad3a:	2056      	movs	r0, #86	; 0x56
    ad3c:	f7ff ffa4 	bl	ac88 <spi_read_write>
    ad40:	f8ad 0006 	strh.w	r0, [sp, #6]
		k_msleep(5);
    ad44:	2005      	movs	r0, #5
    ad46:	f006 f9b7 	bl	110b8 <k_msleep.isra.0>
	for (int a = 0; a < 80; a++)
    ad4a:	3e01      	subs	r6, #1
    ad4c:	d1dd      	bne.n	ad0a <play_haptic_buzz_normal+0xa>
}
    ad4e:	b003      	add	sp, #12
    ad50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint8_t reg1 = (uint8_t)((press_waveform[counter] & 0xFF00) >> 8);
    ad52:	8828      	ldrh	r0, [r5, #0]
        spi_read_write(reg1, reg2); // completing the waveform by playing the initial point again.
    ad54:	7829      	ldrb	r1, [r5, #0]
        counter = 0;// cleanup
    ad56:	2300      	movs	r3, #0
        spi_read_write(reg1, reg2); // completing the waveform by playing the initial point again.
    ad58:	0a00      	lsrs	r0, r0, #8
        counter = 0;// cleanup
    ad5a:	6023      	str	r3, [r4, #0]
        spi_read_write(reg1, reg2); // completing the waveform by playing the initial point again.
    ad5c:	f7ff ff94 	bl	ac88 <spi_read_write>
    ad60:	e7e7      	b.n	ad32 <play_haptic_buzz_normal+0x32>
    ad62:	bf00      	nop
    ad64:	20001518 	.word	0x20001518
    ad68:	20000378 	.word	0x20000378
    ad6c:	200016cc 	.word	0x200016cc

0000ad70 <set_ble_msg>:
{
    ad70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ble_msg[2] = vbat;
    ad74:	4c10      	ldr	r4, [pc, #64]	; (adb8 <set_ble_msg+0x48>)
{
    ad76:	b088      	sub	sp, #32
    ad78:	460f      	mov	r7, r1
    ad7a:	4616      	mov	r6, r2
    ad7c:	461d      	mov	r5, r3
    ad7e:	4680      	mov	r8, r0
    err = bt_le_adv_stop();
    ad80:	f002 fab6 	bl	d2f0 <bt_le_adv_stop>
    k_msleep(5);
    ad84:	2005      	movs	r0, #5
    ad86:	f006 f997 	bl	110b8 <k_msleep.isra.0>
    ble_msg[5] = fsr3;
    ad8a:	7165      	strb	r5, [r4, #5]
    err = bt_le_adv_start(BT_LE_ADV_NCONN_IDENTITY, ad, ARRAY_SIZE(ad),
    ad8c:	4d0b      	ldr	r5, [pc, #44]	; (adbc <set_ble_msg+0x4c>)
    ble_msg[2] = vbat;
    ad8e:	f884 8002 	strb.w	r8, [r4, #2]
    err = bt_le_adv_start(BT_LE_ADV_NCONN_IDENTITY, ad, ARRAY_SIZE(ad),
    ad92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ble_msg[3] = fsr1;
    ad94:	70e7      	strb	r7, [r4, #3]
    ble_msg[4] = fsr2;
    ad96:	7126      	strb	r6, [r4, #4]
    err = bt_le_adv_start(BT_LE_ADV_NCONN_IDENTITY, ad, ARRAY_SIZE(ad),
    ad98:	ac03      	add	r4, sp, #12
    ad9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ad9c:	682b      	ldr	r3, [r5, #0]
    ad9e:	6023      	str	r3, [r4, #0]
    ada0:	2301      	movs	r3, #1
    ada2:	9300      	str	r3, [sp, #0]
    ada4:	4906      	ldr	r1, [pc, #24]	; (adc0 <set_ble_msg+0x50>)
    ada6:	4b07      	ldr	r3, [pc, #28]	; (adc4 <set_ble_msg+0x54>)
    ada8:	2203      	movs	r2, #3
    adaa:	a803      	add	r0, sp, #12
    adac:	f002 fa6e 	bl	d28c <bt_le_adv_start>
}
    adb0:	b008      	add	sp, #32
    adb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    adb6:	bf00      	nop
    adb8:	20000477 	.word	0x20000477
    adbc:	00012dd0 	.word	0x00012dd0
    adc0:	00012e00 	.word	0x00012e00
    adc4:	00012df8 	.word	0x00012df8

0000adc8 <get_adc_readings>:
{
    adc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    adca:	b087      	sub	sp, #28
    adcc:	4604      	mov	r4, r0
	struct adc_sequence sequence = {
    adce:	2214      	movs	r2, #20
    add0:	2100      	movs	r1, #0
    add2:	a801      	add	r0, sp, #4
    add4:	f007 fec9 	bl	12b6a <memset>
    add8:	f10d 0302 	add.w	r3, sp, #2
    addc:	9303      	str	r3, [sp, #12]
    adde:	4d10      	ldr	r5, [pc, #64]	; (ae20 <get_adc_readings+0x58>)
    ade0:	2302      	movs	r3, #2
    ade2:	1e66      	subs	r6, r4, #1
    ade4:	9304      	str	r3, [sp, #16]
    for(uint8_t i = 0; i < ARRAY_SIZE(adc_channels); i++)
    ade6:	3403      	adds	r4, #3
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    ade8:	2701      	movs	r7, #1
	if (!spec->channel_cfg_dt_node_exists) {
    adea:	796b      	ldrb	r3, [r5, #5]
    adec:	b14b      	cbz	r3, ae02 <get_adc_readings+0x3a>
	seq->channels = BIT(spec->channel_id);
    adee:	792b      	ldrb	r3, [r5, #4]
    adf0:	fa07 f303 	lsl.w	r3, r7, r3
    adf4:	9302      	str	r3, [sp, #8]
	seq->resolution = spec->resolution;
    adf6:	7c2b      	ldrb	r3, [r5, #16]
    adf8:	f88d 3014 	strb.w	r3, [sp, #20]
	seq->oversampling = spec->oversampling;
    adfc:	7c6b      	ldrb	r3, [r5, #17]
    adfe:	f88d 3015 	strb.w	r3, [sp, #21]
        (void)adc_read(adc_channels[i].dev, &sequence);
    ae02:	f855 0b14 	ldr.w	r0, [r5], #20
	return api->read(dev, sequence);
    ae06:	6883      	ldr	r3, [r0, #8]
    ae08:	a901      	add	r1, sp, #4
    ae0a:	685b      	ldr	r3, [r3, #4]
    ae0c:	4798      	blx	r3
        array[i] = (uint8_t)buf; // 3.5V = 8192, 4V = <optimized out>
    ae0e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    ae12:	f806 3f01 	strb.w	r3, [r6, #1]!
    for(uint8_t i = 0; i < ARRAY_SIZE(adc_channels); i++)
    ae16:	42a6      	cmp	r6, r4
    ae18:	d1e7      	bne.n	adea <get_adc_readings+0x22>
}
    ae1a:	b007      	add	sp, #28
    ae1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae1e:	bf00      	nop
    ae20:	00012e3c 	.word	0x00012e3c

0000ae24 <get_button_press>:
{
    ae24:	b508      	push	{r3, lr}
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
    ae26:	210f      	movs	r1, #15
    ae28:	4802      	ldr	r0, [pc, #8]	; (ae34 <get_button_press+0x10>)
    ae2a:	f006 f91e 	bl	1106a <gpio_pin_get>
}
    ae2e:	b2c0      	uxtb	r0, r0
    ae30:	bd08      	pop	{r3, pc}
    ae32:	bf00      	nop
    ae34:	00012c34 	.word	0x00012c34

0000ae38 <get_fsr_detect>:
{
    ae38:	b508      	push	{r3, lr}
    ae3a:	2119      	movs	r1, #25
    ae3c:	4802      	ldr	r0, [pc, #8]	; (ae48 <get_fsr_detect+0x10>)
    ae3e:	f006 f914 	bl	1106a <gpio_pin_get>
}
    ae42:	b2c0      	uxtb	r0, r0
    ae44:	bd08      	pop	{r3, pc}
    ae46:	bf00      	nop
    ae48:	00012c34 	.word	0x00012c34

0000ae4c <state_machine_control>:
	return 1;
}


void state_machine_control(int* current_state, int* sample_num,  uint8_t* max_snap_values, uint8_t* adc_readings)
{
    ae4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//set the ble status to the state machine status
	int err = 0;
	ble_msg[7] = current_state;
    ae50:	4f0e      	ldr	r7, [pc, #56]	; (ae8c <state_machine_control+0x40>)
    ae52:	71f8      	strb	r0, [r7, #7]
{
    ae54:	461c      	mov	r4, r3
    ae56:	4616      	mov	r6, r2
    ae58:	4605      	mov	r5, r0

	//variable that is sent over when gesture calibration is conducted
	int gesture;

	//poll buttons and set BLE message to be it
	int button_press = get_button_press();
    ae5a:	f7ff ffe3 	bl	ae24 <get_button_press>
    ae5e:	4680      	mov	r8, r0
	int fsr_connect = get_fsr_detect();
    ae60:	f7ff ffea 	bl	ae38 <get_fsr_detect>
	ble_msg[6] = button_press;
    ae64:	f887 8006 	strb.w	r8, [r7, #6]
	ble_msg[8] = fsr_connect;
    ae68:	7238      	strb	r0, [r7, #8]

	//get the adc readings each interval
    get_adc_readings(adc_readings);
    ae6a:	4620      	mov	r0, r4
    ae6c:	f7ff ffac 	bl	adc8 <get_adc_readings>

	int gest_done = 0;

	switch (*current_state)
    ae70:	682b      	ldr	r3, [r5, #0]
    ae72:	2b01      	cmp	r3, #1
    ae74:	d102      	bne.n	ae7c <state_machine_control+0x30>
		break;
		
		case SNAP_CAL:
		{
			//run snap cal and change state only when 
			err = snap_calibration(max_snap_values);
    ae76:	4630      	mov	r0, r6
    ae78:	f7ff feae 	bl	abd8 <snap_calibration>
		{
			
		}
		break;		
	}
	set_ble_msg (adc_readings[0], adc_readings[1], adc_readings[2], adc_readings[3]);
    ae7c:	78e3      	ldrb	r3, [r4, #3]
    ae7e:	78a2      	ldrb	r2, [r4, #2]
    ae80:	7861      	ldrb	r1, [r4, #1]
    ae82:	7820      	ldrb	r0, [r4, #0]
}  
    ae84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	set_ble_msg (adc_readings[0], adc_readings[1], adc_readings[2], adc_readings[3]);
    ae88:	f7ff bf72 	b.w	ad70 <set_ble_msg>
    ae8c:	20000477 	.word	0x20000477

0000ae90 <main>:

// Before main executes, zephyr-the RTOS, automatically initializes the pin in/out and set's up the clock
void main(void)
{
    ae90:	b530      	push	{r4, r5, lr}
    ae92:	b087      	sub	sp, #28
    volatile int err;
    volatile uint8_t adc_readings[4] = {0, 0, 0, 0};
    ae94:	2300      	movs	r3, #0
	volatile uint8_t snap_max[4] = {0, 0, 0};
    k_msleep(1000);
    ae96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    volatile uint8_t adc_readings[4] = {0, 0, 0, 0};
    ae9a:	9302      	str	r3, [sp, #8]
	volatile uint8_t snap_max[4] = {0, 0, 0};
    ae9c:	9303      	str	r3, [sp, #12]
    k_msleep(1000);
    ae9e:	f006 f90b 	bl	110b8 <k_msleep.isra.0>

  	/* Initialize the Bluetooth Subsystem */
    // err = bt_enable(bt_ready); //causes reset if used in gdb

    /* Initialize button and gpio inputs*/
    err = gpio_pin_configure_dt(&ui_btn, GPIO_INPUT);
    aea2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    aea6:	4835      	ldr	r0, [pc, #212]	; (af7c <main+0xec>)
    aea8:	f006 f8c0 	bl	1102c <gpio_pin_configure_dt>
	err = gpio_pin_configure_dt(&fsr_det, GPIO_INPUT);
    aeac:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    err = gpio_pin_configure_dt(&ui_btn, GPIO_INPUT);
    aeb0:	9001      	str	r0, [sp, #4]
	err = gpio_pin_configure_dt(&fsr_det, GPIO_INPUT);
    aeb2:	4833      	ldr	r0, [pc, #204]	; (af80 <main+0xf0>)
    aeb4:	f006 f8ba 	bl	1102c <gpio_pin_configure_dt>
    aeb8:	9001      	str	r0, [sp, #4]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    aeba:	4c32      	ldr	r4, [pc, #200]	; (af84 <main+0xf4>)
    aebc:	210f      	movs	r1, #15
    aebe:	4620      	mov	r0, r4
    aec0:	f006 f8e7 	bl	11092 <z_impl_gpio_pin_interrupt_configure.constprop.0>
	err = gpio_pin_interrupt_configure_dt(&ui_btn, GPIO_INT_EDGE_TO_ACTIVE);
    aec4:	9001      	str	r0, [sp, #4]
    aec6:	2119      	movs	r1, #25
    aec8:	4620      	mov	r0, r4
    aeca:	f006 f8e2 	bl	11092 <z_impl_gpio_pin_interrupt_configure.constprop.0>
	err = gpio_pin_interrupt_configure_dt(&fsr_det, GPIO_INT_EDGE_TO_ACTIVE);

    // Initialization
    gpio_pin_configure_dt(&blue_led, GPIO_OUTPUT_ACTIVE); //need to rename to chip select
    aece:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
	err = gpio_pin_interrupt_configure_dt(&fsr_det, GPIO_INT_EDGE_TO_ACTIVE);
    aed2:	9001      	str	r0, [sp, #4]
    gpio_pin_configure_dt(&blue_led, GPIO_OUTPUT_ACTIVE); //need to rename to chip select
    aed4:	482c      	ldr	r0, [pc, #176]	; (af88 <main+0xf8>)
    aed6:	f006 f8a9 	bl	1102c <gpio_pin_configure_dt>
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    aeda:	6923      	ldr	r3, [r4, #16]
    aedc:	681b      	ldr	r3, [r3, #0]
    aede:	079b      	lsls	r3, r3, #30
	return api->port_clear_bits_raw(port, pins);
    aee0:	68a3      	ldr	r3, [r4, #8]
	return api->port_set_bits_raw(port, pins);
    aee2:	f04f 0102 	mov.w	r1, #2
	return api->port_clear_bits_raw(port, pins);
    aee6:	bf54      	ite	pl
    aee8:	691b      	ldrpl	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
    aeea:	68db      	ldrmi	r3, [r3, #12]
    aeec:	4620      	mov	r0, r4
    aeee:	4798      	blx	r3
    gpio_pin_set_dt(&blue_led, LED_ON);
	volatile uint16_t ignore = spi_read_write(0x00, 0x6E);
    aef0:	216e      	movs	r1, #110	; 0x6e
    aef2:	2000      	movs	r0, #0
    aef4:	f7ff fec8 	bl	ac88 <spi_read_write>
    aef8:	4c24      	ldr	r4, [pc, #144]	; (af8c <main+0xfc>)
    aefa:	f8ad 0002 	strh.w	r0, [sp, #2]
    aefe:	2500      	movs	r5, #0
	if (!spec->channel_cfg_dt_node_exists) {
    af00:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    af04:	b12b      	cbz	r3, af12 <main+0x82>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    af06:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
    af0a:	6883      	ldr	r3, [r0, #8]
    af0c:	4621      	mov	r1, r4
    af0e:	681b      	ldr	r3, [r3, #0]
    af10:	4798      	blx	r3

    for(uint8_t i = 0; i < ARRAY_SIZE(adc_channels); i++)
    af12:	3505      	adds	r5, #5
    af14:	2d14      	cmp	r5, #20
    af16:	f104 0414 	add.w	r4, r4, #20
    af1a:	d1f1      	bne.n	af00 <main+0x70>
        adc_channel_setup_dt(&adc_channels[i]);
    }

    // volatile int val;
    // volatile int val2;
	volatile int current_state = 0;
    af1c:	2300      	movs	r3, #0
    af1e:	481c      	ldr	r0, [pc, #112]	; (af90 <main+0x100>)
    af20:	9304      	str	r3, [sp, #16]
	int boolean_switch_sign = 0;
    af22:	461a      	mov	r2, r3
    for(volatile uint8_t i = 0; i < press_waveform_size; i++)
    af24:	f88d 3001 	strb.w	r3, [sp, #1]
			press_waveform[i] = utilsVolt2Amplitude(0);
    af28:	461c      	mov	r4, r3
			press_waveform[i] = utilsVolt2Amplitude(PRESS_SIGNAL_VOLTAGE);
    af2a:	25dc      	movs	r5, #220	; 0xdc
    for(volatile uint8_t i = 0; i < press_waveform_size; i++)
    af2c:	f89d 1001 	ldrb.w	r1, [sp, #1]
    af30:	2984      	cmp	r1, #132	; 0x84
    af32:	d90b      	bls.n	af4c <main+0xbc>

	/* SPI Initialization*/
	drivingCalculateWaveforms();
	// Begin main logic
	int num_gesture = 0;
    af34:	2300      	movs	r3, #0
    af36:	9305      	str	r3, [sp, #20]
    while(1){
		k_msleep(10);
    af38:	200a      	movs	r0, #10
    af3a:	f006 f8bd 	bl	110b8 <k_msleep.isra.0>
		// if (val == 1)
		// {
		// 	play_haptic_buzz_normal();
		// }
        // get_adc_readings(adc_readings);
		state_machine_control(&current_state, snap_max, adc_readings, &num_gesture);
    af3e:	ab05      	add	r3, sp, #20
    af40:	aa02      	add	r2, sp, #8
    af42:	a903      	add	r1, sp, #12
    af44:	a804      	add	r0, sp, #16
    af46:	f7ff ff81 	bl	ae4c <state_machine_control>
    while(1){
    af4a:	e7f5      	b.n	af38 <main+0xa8>
		if (boolean_switch_sign == 1)
    af4c:	2a01      	cmp	r2, #1
			press_waveform[i] = utilsVolt2Amplitude(PRESS_SIGNAL_VOLTAGE);
    af4e:	f89d 1001 	ldrb.w	r1, [sp, #1]
		if (boolean_switch_sign == 1)
    af52:	d10c      	bne.n	af6e <main+0xde>
			press_waveform[i] = utilsVolt2Amplitude(PRESS_SIGNAL_VOLTAGE);
    af54:	f820 5011 	strh.w	r5, [r0, r1, lsl #1]
			counter++;
    af58:	4611      	mov	r1, r2
    af5a:	1c5a      	adds	r2, r3, #1
    for(volatile uint8_t i = 0; i < press_waveform_size; i++)
    af5c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    af60:	3301      	adds	r3, #1
    af62:	b2db      	uxtb	r3, r3
    af64:	f88d 3001 	strb.w	r3, [sp, #1]
    af68:	4613      	mov	r3, r2
    af6a:	460a      	mov	r2, r1
    af6c:	e7de      	b.n	af2c <main+0x9c>
			press_waveform[i] = utilsVolt2Amplitude(0);
    af6e:	b2c9      	uxtb	r1, r1
		if (counter >= 2 && boolean_switch_sign == 0)
    af70:	2b01      	cmp	r3, #1
			press_waveform[i] = utilsVolt2Amplitude(0);
    af72:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
		if (counter >= 2 && boolean_switch_sign == 0)
    af76:	ddef      	ble.n	af58 <main+0xc8>
			boolean_switch_sign = 1;
    af78:	2101      	movs	r1, #1
    af7a:	e7ef      	b.n	af5c <main+0xcc>
    af7c:	00012e2c 	.word	0x00012e2c
    af80:	00012e24 	.word	0x00012e24
    af84:	00012c34 	.word	0x00012c34
    af88:	00012e34 	.word	0x00012e34
    af8c:	00012e42 	.word	0x00012e42
    af90:	200016cc 	.word	0x200016cc

0000af94 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    af94:	4b01      	ldr	r3, [pc, #4]	; (af9c <char_out+0x8>)
    af96:	681b      	ldr	r3, [r3, #0]
    af98:	4718      	bx	r3
    af9a:	bf00      	nop
    af9c:	20000380 	.word	0x20000380

0000afa0 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    afa0:	b507      	push	{r0, r1, r2, lr}
    afa2:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    afa4:	2100      	movs	r1, #0
    afa6:	4602      	mov	r2, r0
    afa8:	9100      	str	r1, [sp, #0]
    afaa:	4803      	ldr	r0, [pc, #12]	; (afb8 <vprintk+0x18>)
    afac:	f000 f976 	bl	b29c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    afb0:	b003      	add	sp, #12
    afb2:	f85d fb04 	ldr.w	pc, [sp], #4
    afb6:	bf00      	nop
    afb8:	0000af95 	.word	0x0000af95

0000afbc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    afbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    afc0:	8b85      	ldrh	r5, [r0, #28]
{
    afc2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    afc4:	0728      	lsls	r0, r5, #28
{
    afc6:	4690      	mov	r8, r2
	if (processing) {
    afc8:	d411      	bmi.n	afee <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    afca:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    afcc:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    afd0:	f040 80cd 	bne.w	b16e <process_event+0x1b2>
			evt = process_recheck(mgr);
    afd4:	4620      	mov	r0, r4
    afd6:	f006 fa93 	bl	11500 <process_recheck>
		}

		if (evt == EVT_NOP) {
    afda:	b178      	cbz	r0, affc <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    afdc:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    afde:	8ba1      	ldrh	r1, [r4, #28]
    afe0:	2804      	cmp	r0, #4
    afe2:	d811      	bhi.n	b008 <process_event+0x4c>
    afe4:	e8df f000 	tbb	[pc, r0]
    afe8:	856d10c3 	.word	0x856d10c3
    afec:	95          	.byte	0x95
    afed:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    afee:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    aff0:	bf0c      	ite	eq
    aff2:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    aff6:	f045 0520 	orrne.w	r5, r5, #32
    affa:	83a5      	strh	r5, [r4, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    affc:	f388 8811 	msr	BASEPRI, r8
    b000:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    b004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b008:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    b00c:	45aa      	cmp	sl, r5
    b00e:	f000 80a6 	beq.w	b15e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    b012:	2700      	movs	r7, #0
    b014:	46b9      	mov	r9, r7
    b016:	463e      	mov	r6, r7
    b018:	68a3      	ldr	r3, [r4, #8]
    b01a:	2b00      	cmp	r3, #0
    b01c:	f000 80bd 	beq.w	b19a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    b020:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    b024:	83a1      	strh	r1, [r4, #28]
    b026:	f388 8811 	msr	BASEPRI, r8
    b02a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    b02e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b030:	2900      	cmp	r1, #0
    b032:	f000 80bb 	beq.w	b1ac <process_event+0x1f0>
	return node->next;
    b036:	680d      	ldr	r5, [r1, #0]
    b038:	2900      	cmp	r1, #0
    b03a:	f000 80b7 	beq.w	b1ac <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    b03e:	f8d1 8004 	ldr.w	r8, [r1, #4]
    b042:	4633      	mov	r3, r6
    b044:	4652      	mov	r2, sl
    b046:	4620      	mov	r0, r4
    b048:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b04a:	2d00      	cmp	r5, #0
    b04c:	d076      	beq.n	b13c <process_event+0x180>
    b04e:	682b      	ldr	r3, [r5, #0]
    b050:	4629      	mov	r1, r5
    b052:	461d      	mov	r5, r3
    b054:	e7f0      	b.n	b038 <process_event+0x7c>
    b056:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    b05a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    b05c:	2a01      	cmp	r2, #1
    b05e:	d81b      	bhi.n	b098 <process_event+0xdc>
	list->head = NULL;
    b060:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b062:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    b066:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    b068:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b06a:	b289      	uxth	r1, r1
	list->tail = NULL;
    b06c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    b070:	d109      	bne.n	b086 <process_event+0xca>
    b072:	463b      	mov	r3, r7
    b074:	e003      	b.n	b07e <process_event+0xc2>
				mgr->refs += 1U;
    b076:	8be2      	ldrh	r2, [r4, #30]
    b078:	3201      	adds	r2, #1
    b07a:	83e2      	strh	r2, [r4, #30]
	return node->next;
    b07c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    b07e:	2b00      	cmp	r3, #0
    b080:	d1f9      	bne.n	b076 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b082:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    b086:	83a1      	strh	r1, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    b088:	4620      	mov	r0, r4
    b08a:	f006 fa39 	bl	11500 <process_recheck>
    b08e:	2800      	cmp	r0, #0
    b090:	d07b      	beq.n	b18a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b092:	f041 0120 	orr.w	r1, r1, #32
    b096:	e077      	b.n	b188 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    b098:	2b04      	cmp	r3, #4
    b09a:	d10a      	bne.n	b0b2 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b09c:	f021 0107 	bic.w	r1, r1, #7
    b0a0:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    b0a2:	83a1      	strh	r1, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    b0a4:	4620      	mov	r0, r4
    b0a6:	f006 fa2b 	bl	11500 <process_recheck>
    b0aa:	b110      	cbz	r0, b0b2 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b0ac:	f041 0120 	orr.w	r1, r1, #32
    b0b0:	83a1      	strh	r1, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b0b2:	8ba1      	ldrh	r1, [r4, #28]
    b0b4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    b0b8:	45aa      	cmp	sl, r5
    b0ba:	d050      	beq.n	b15e <process_event+0x1a2>
    b0bc:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    b0be:	46b9      	mov	r9, r7
    b0c0:	e7aa      	b.n	b018 <process_event+0x5c>
			transit = mgr->transitions->start;
    b0c2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b0c4:	f021 0107 	bic.w	r1, r1, #7
    b0c8:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    b0cc:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    b0ce:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    b0d2:	83a1      	strh	r1, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    b0d4:	d12d      	bne.n	b132 <process_event+0x176>
		    || (transit != NULL)) {
    b0d6:	f1b9 0f00 	cmp.w	r9, #0
    b0da:	d040      	beq.n	b15e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    b0dc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    b0e0:	83a1      	strh	r1, [r4, #28]
    b0e2:	f388 8811 	msr	BASEPRI, r8
    b0e6:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    b0ea:	493a      	ldr	r1, [pc, #232]	; (b1d4 <process_event+0x218>)
    b0ec:	4620      	mov	r0, r4
    b0ee:	47c8      	blx	r9
    b0f0:	e029      	b.n	b146 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b0f2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    b0f6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b0f8:	f041 0104 	orr.w	r1, r1, #4
    b0fc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    b0fe:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    b100:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    b104:	83a1      	strh	r1, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    b106:	d0e6      	beq.n	b0d6 <process_event+0x11a>
    b108:	2700      	movs	r7, #0
		res = 0;
    b10a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b10c:	f04f 0a04 	mov.w	sl, #4
    b110:	e782      	b.n	b018 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b112:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    b116:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b118:	f041 0105 	orr.w	r1, r1, #5
    b11c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    b11e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    b120:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    b124:	83a1      	strh	r1, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    b126:	d0d6      	beq.n	b0d6 <process_event+0x11a>
    b128:	2700      	movs	r7, #0
		res = 0;
    b12a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b12c:	f04f 0a05 	mov.w	sl, #5
    b130:	e772      	b.n	b018 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    b132:	2700      	movs	r7, #0
		res = 0;
    b134:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b136:	f04f 0a06 	mov.w	sl, #6
    b13a:	e76d      	b.n	b018 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b13c:	462b      	mov	r3, r5
    b13e:	e787      	b.n	b050 <process_event+0x94>
			if (transit != NULL) {
    b140:	f1b9 0f00 	cmp.w	r9, #0
    b144:	d1d1      	bne.n	b0ea <process_event+0x12e>
	__asm__ volatile(
    b146:	f04f 0340 	mov.w	r3, #64	; 0x40
    b14a:	f3ef 8811 	mrs	r8, BASEPRI
    b14e:	f383 8812 	msr	BASEPRI_MAX, r3
    b152:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    b156:	8ba3      	ldrh	r3, [r4, #28]
    b158:	f023 0308 	bic.w	r3, r3, #8
    b15c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    b15e:	8ba5      	ldrh	r5, [r4, #28]
    b160:	06ea      	lsls	r2, r5, #27
    b162:	d52e      	bpl.n	b1c2 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    b164:	f025 0310 	bic.w	r3, r5, #16
    b168:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    b16a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    b16e:	69a6      	ldr	r6, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b170:	8ba1      	ldrh	r1, [r4, #28]
	if (res < 0) {
    b172:	2e00      	cmp	r6, #0
    b174:	f6bf af6f 	bge.w	b056 <process_event+0x9a>
	list->head = NULL;
    b178:	2300      	movs	r3, #0
		*clients = mgr->clients;
    b17a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    b17c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b180:	f021 0107 	bic.w	r1, r1, #7
    b184:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b188:	83a1      	strh	r1, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b18a:	8ba1      	ldrh	r1, [r4, #28]
    b18c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    b190:	45aa      	cmp	sl, r5
    b192:	f04f 0900 	mov.w	r9, #0
    b196:	f47f af3f 	bne.w	b018 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    b19a:	2f00      	cmp	r7, #0
    b19c:	d09b      	beq.n	b0d6 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    b19e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    b1a2:	83a1      	strh	r1, [r4, #28]
	__asm__ volatile(
    b1a4:	f388 8811 	msr	BASEPRI, r8
    b1a8:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    b1ac:	2f00      	cmp	r7, #0
    b1ae:	d0c7      	beq.n	b140 <process_event+0x184>
	return node->next;
    b1b0:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    b1b2:	4639      	mov	r1, r7
    b1b4:	4633      	mov	r3, r6
    b1b6:	4652      	mov	r2, sl
    b1b8:	4620      	mov	r0, r4
    b1ba:	f006 f9cd 	bl	11558 <notify_one>
	list->head = node;
    b1be:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    b1c0:	e7f4      	b.n	b1ac <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    b1c2:	06ab      	lsls	r3, r5, #26
    b1c4:	f57f af1a 	bpl.w	affc <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    b1c8:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    b1cc:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    b1ce:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    b1d2:	e6ff      	b.n	afd4 <process_event+0x18>
    b1d4:	00011585 	.word	0x00011585

0000b1d8 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    b1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    b1da:	4e09      	ldr	r6, [pc, #36]	; (b200 <extract_decimal+0x28>)
    b1dc:	6801      	ldr	r1, [r0, #0]
{
    b1de:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    b1e0:	270a      	movs	r7, #10
	size_t val = 0;
    b1e2:	2000      	movs	r0, #0
    b1e4:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
    b1e6:	3101      	adds	r1, #1
    b1e8:	781c      	ldrb	r4, [r3, #0]
    b1ea:	5d35      	ldrb	r5, [r6, r4]
    b1ec:	076d      	lsls	r5, r5, #29
    b1ee:	d401      	bmi.n	b1f4 <extract_decimal+0x1c>
	}
	*str = sp;
    b1f0:	6013      	str	r3, [r2, #0]
	return val;
}
    b1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    b1f4:	fb07 4300 	mla	r3, r7, r0, r4
    b1f8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    b1fc:	e7f2      	b.n	b1e4 <extract_decimal+0xc>
    b1fe:	bf00      	nop
    b200:	000131ef 	.word	0x000131ef

0000b204 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    b204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b208:	4615      	mov	r5, r2
    b20a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    b20c:	78d3      	ldrb	r3, [r2, #3]
    b20e:	4a22      	ldr	r2, [pc, #136]	; (b298 <encode_uint+0x94>)
    b210:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
    b214:	2b6f      	cmp	r3, #111	; 0x6f
{
    b216:	4680      	mov	r8, r0
    b218:	460f      	mov	r7, r1
    b21a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    b21e:	d029      	beq.n	b274 <encode_uint+0x70>
    b220:	d824      	bhi.n	b26c <encode_uint+0x68>
		return 10;
    b222:	2b58      	cmp	r3, #88	; 0x58
    b224:	bf0c      	ite	eq
    b226:	2610      	moveq	r6, #16
    b228:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    b22a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    b22e:	4632      	mov	r2, r6
    b230:	2300      	movs	r3, #0
    b232:	4640      	mov	r0, r8
    b234:	4639      	mov	r1, r7
    b236:	f7f5 fb2d 	bl	894 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    b23a:	2a09      	cmp	r2, #9
    b23c:	b2d4      	uxtb	r4, r2
    b23e:	d81e      	bhi.n	b27e <encode_uint+0x7a>
    b240:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    b242:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b244:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    b246:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b24a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    b24e:	d301      	bcc.n	b254 <encode_uint+0x50>
    b250:	45d1      	cmp	r9, sl
    b252:	d811      	bhi.n	b278 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    b254:	782b      	ldrb	r3, [r5, #0]
    b256:	069b      	lsls	r3, r3, #26
    b258:	d505      	bpl.n	b266 <encode_uint+0x62>
		if (radix == 8) {
    b25a:	2e08      	cmp	r6, #8
    b25c:	d115      	bne.n	b28a <encode_uint+0x86>
			conv->altform_0 = true;
    b25e:	78ab      	ldrb	r3, [r5, #2]
    b260:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    b264:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    b266:	4648      	mov	r0, r9
    b268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    b26c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    b270:	2b70      	cmp	r3, #112	; 0x70
    b272:	e7d7      	b.n	b224 <encode_uint+0x20>
	switch (specifier) {
    b274:	2608      	movs	r6, #8
    b276:	e7d8      	b.n	b22a <encode_uint+0x26>
		value /= radix;
    b278:	4680      	mov	r8, r0
    b27a:	460f      	mov	r7, r1
    b27c:	e7d7      	b.n	b22e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b27e:	f1bb 0f01 	cmp.w	fp, #1
    b282:	bf0c      	ite	eq
    b284:	3437      	addeq	r4, #55	; 0x37
    b286:	3457      	addne	r4, #87	; 0x57
    b288:	e7db      	b.n	b242 <encode_uint+0x3e>
		} else if (radix == 16) {
    b28a:	2e10      	cmp	r6, #16
    b28c:	d1eb      	bne.n	b266 <encode_uint+0x62>
			conv->altform_0c = true;
    b28e:	78ab      	ldrb	r3, [r5, #2]
    b290:	f043 0310 	orr.w	r3, r3, #16
    b294:	e7e6      	b.n	b264 <encode_uint+0x60>
    b296:	bf00      	nop
    b298:	000131ef 	.word	0x000131ef

0000b29c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    b29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b2a0:	b097      	sub	sp, #92	; 0x5c
    b2a2:	4682      	mov	sl, r0
    b2a4:	9103      	str	r1, [sp, #12]
    b2a6:	4617      	mov	r7, r2
    b2a8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    b2aa:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    b2ac:	7838      	ldrb	r0, [r7, #0]
    b2ae:	b908      	cbnz	r0, b2b4 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    b2b0:	4628      	mov	r0, r5
    b2b2:	e34a      	b.n	b94a <z_cbvprintf_impl+0x6ae>
			OUTC(*fp++);
    b2b4:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    b2b6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    b2b8:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    b2ba:	d006      	beq.n	b2ca <z_cbvprintf_impl+0x2e>
			OUTC('%');
    b2bc:	9903      	ldr	r1, [sp, #12]
    b2be:	47d0      	blx	sl
    b2c0:	2800      	cmp	r0, #0
    b2c2:	f2c0 8342 	blt.w	b94a <z_cbvprintf_impl+0x6ae>
    b2c6:	3501      	adds	r5, #1
		if (bps == NULL) {
    b2c8:	e1f0      	b.n	b6ac <z_cbvprintf_impl+0x410>
		} state = {
    b2ca:	2218      	movs	r2, #24
    b2cc:	2100      	movs	r1, #0
    b2ce:	a810      	add	r0, sp, #64	; 0x40
    b2d0:	f007 fc4b 	bl	12b6a <memset>
	if (*sp == '%') {
    b2d4:	787b      	ldrb	r3, [r7, #1]
    b2d6:	2b25      	cmp	r3, #37	; 0x25
    b2d8:	f000 80a3 	beq.w	b422 <z_cbvprintf_impl+0x186>
    b2dc:	2300      	movs	r3, #0
    b2de:	1c79      	adds	r1, r7, #1
    b2e0:	4698      	mov	r8, r3
    b2e2:	469e      	mov	lr, r3
    b2e4:	469c      	mov	ip, r3
    b2e6:	4618      	mov	r0, r3
    b2e8:	460e      	mov	r6, r1
		switch (*sp) {
    b2ea:	f811 2b01 	ldrb.w	r2, [r1], #1
    b2ee:	2a2b      	cmp	r2, #43	; 0x2b
    b2f0:	f000 80c6 	beq.w	b480 <z_cbvprintf_impl+0x1e4>
    b2f4:	f200 80bd 	bhi.w	b472 <z_cbvprintf_impl+0x1d6>
    b2f8:	2a20      	cmp	r2, #32
    b2fa:	f000 80c4 	beq.w	b486 <z_cbvprintf_impl+0x1ea>
    b2fe:	2a23      	cmp	r2, #35	; 0x23
    b300:	f000 80c4 	beq.w	b48c <z_cbvprintf_impl+0x1f0>
    b304:	b12b      	cbz	r3, b312 <z_cbvprintf_impl+0x76>
    b306:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b30a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b30e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    b312:	f1b8 0f00 	cmp.w	r8, #0
    b316:	d005      	beq.n	b324 <z_cbvprintf_impl+0x88>
    b318:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b31c:	f043 0320 	orr.w	r3, r3, #32
    b320:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    b324:	f1be 0f00 	cmp.w	lr, #0
    b328:	d005      	beq.n	b336 <z_cbvprintf_impl+0x9a>
    b32a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b32e:	f043 0310 	orr.w	r3, r3, #16
    b332:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    b336:	f1bc 0f00 	cmp.w	ip, #0
    b33a:	d005      	beq.n	b348 <z_cbvprintf_impl+0xac>
    b33c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b340:	f043 0308 	orr.w	r3, r3, #8
    b344:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    b348:	b128      	cbz	r0, b356 <z_cbvprintf_impl+0xba>
    b34a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b34e:	f043 0304 	orr.w	r3, r3, #4
    b352:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    b356:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b35a:	f003 0144 	and.w	r1, r3, #68	; 0x44
    b35e:	2944      	cmp	r1, #68	; 0x44
    b360:	d103      	bne.n	b36a <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    b362:	f36f 1386 	bfc	r3, #6, #1
    b366:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    b36a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b36e:	9609      	str	r6, [sp, #36]	; 0x24
    b370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
    b374:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    b376:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    b37a:	f040 808c 	bne.w	b496 <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    b37e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    b382:	f043 0301 	orr.w	r3, r3, #1
    b386:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    b38a:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    b38c:	781a      	ldrb	r2, [r3, #0]
    b38e:	2a2e      	cmp	r2, #46	; 0x2e
    b390:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    b394:	bf0c      	ite	eq
    b396:	2101      	moveq	r1, #1
    b398:	2100      	movne	r1, #0
    b39a:	f361 0241 	bfi	r2, r1, #1, #1
    b39e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    b3a2:	d10c      	bne.n	b3be <z_cbvprintf_impl+0x122>
	++sp;
    b3a4:	1c5a      	adds	r2, r3, #1
    b3a6:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    b3a8:	785a      	ldrb	r2, [r3, #1]
    b3aa:	2a2a      	cmp	r2, #42	; 0x2a
    b3ac:	f040 8083 	bne.w	b4b6 <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    b3b0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    b3b4:	f042 0204 	orr.w	r2, r2, #4
    b3b8:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    b3bc:	3302      	adds	r3, #2
	switch (*sp) {
    b3be:	781a      	ldrb	r2, [r3, #0]
    b3c0:	2a6c      	cmp	r2, #108	; 0x6c
    b3c2:	f000 80a4 	beq.w	b50e <z_cbvprintf_impl+0x272>
    b3c6:	f200 8086 	bhi.w	b4d6 <z_cbvprintf_impl+0x23a>
    b3ca:	2a68      	cmp	r2, #104	; 0x68
    b3cc:	f000 808c 	beq.w	b4e8 <z_cbvprintf_impl+0x24c>
    b3d0:	2a6a      	cmp	r2, #106	; 0x6a
    b3d2:	f000 80a5 	beq.w	b520 <z_cbvprintf_impl+0x284>
    b3d6:	2a4c      	cmp	r2, #76	; 0x4c
    b3d8:	f000 80aa 	beq.w	b530 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    b3dc:	461a      	mov	r2, r3
    b3de:	f812 3b01 	ldrb.w	r3, [r2], #1
    b3e2:	9204      	str	r2, [sp, #16]
	switch (conv->specifier) {
    b3e4:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    b3e6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	conv->specifier = *sp++;
    b3ea:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    b3ee:	f200 8117 	bhi.w	b620 <z_cbvprintf_impl+0x384>
    b3f2:	2b6d      	cmp	r3, #109	; 0x6d
    b3f4:	f200 80a9 	bhi.w	b54a <z_cbvprintf_impl+0x2ae>
    b3f8:	2b69      	cmp	r3, #105	; 0x69
    b3fa:	f200 8111 	bhi.w	b620 <z_cbvprintf_impl+0x384>
    b3fe:	2b57      	cmp	r3, #87	; 0x57
    b400:	f200 80be 	bhi.w	b580 <z_cbvprintf_impl+0x2e4>
    b404:	2b41      	cmp	r3, #65	; 0x41
    b406:	d003      	beq.n	b410 <z_cbvprintf_impl+0x174>
    b408:	3b45      	subs	r3, #69	; 0x45
    b40a:	2b02      	cmp	r3, #2
    b40c:	f200 8108 	bhi.w	b620 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    b410:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    b414:	2204      	movs	r2, #4
    b416:	f362 0302 	bfi	r3, r2, #0, #3
    b41a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    b41e:	2301      	movs	r3, #1
			break;
    b420:	e0ca      	b.n	b5b8 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    b422:	1cba      	adds	r2, r7, #2
    b424:	9204      	str	r2, [sp, #16]
    b426:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    b42a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    b42e:	07da      	lsls	r2, r3, #31
    b430:	f140 80fd 	bpl.w	b62e <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    b434:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    b438:	f1b9 0f00 	cmp.w	r9, #0
    b43c:	da07      	bge.n	b44e <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    b43e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    b442:	f042 0204 	orr.w	r2, r2, #4
    b446:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    b44a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    b44e:	075e      	lsls	r6, r3, #29
    b450:	f140 80f6 	bpl.w	b640 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    b454:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    b458:	f1bb 0f00 	cmp.w	fp, #0
    b45c:	f280 80f5 	bge.w	b64a <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    b460:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    b464:	f36f 0341 	bfc	r3, #1, #1
    b468:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    b46c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    b470:	e0eb      	b.n	b64a <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    b472:	2a2d      	cmp	r2, #45	; 0x2d
    b474:	d00d      	beq.n	b492 <z_cbvprintf_impl+0x1f6>
    b476:	2a30      	cmp	r2, #48	; 0x30
    b478:	f47f af44 	bne.w	b304 <z_cbvprintf_impl+0x68>
    b47c:	2301      	movs	r3, #1
	} while (loop);
    b47e:	e733      	b.n	b2e8 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    b480:	f04f 0c01 	mov.w	ip, #1
    b484:	e730      	b.n	b2e8 <z_cbvprintf_impl+0x4c>
    b486:	f04f 0e01 	mov.w	lr, #1
    b48a:	e72d      	b.n	b2e8 <z_cbvprintf_impl+0x4c>
    b48c:	f04f 0801 	mov.w	r8, #1
    b490:	e72a      	b.n	b2e8 <z_cbvprintf_impl+0x4c>
    b492:	2001      	movs	r0, #1
    b494:	e728      	b.n	b2e8 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    b496:	a809      	add	r0, sp, #36	; 0x24
    b498:	f7ff fe9e 	bl	b1d8 <extract_decimal>
	if (sp != wp) {
    b49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b49e:	42b3      	cmp	r3, r6
    b4a0:	f43f af74 	beq.w	b38c <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    b4a4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    b4a8:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    b4aa:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    b4ac:	f360 0241 	bfi	r2, r0, #1, #1
    b4b0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    b4b4:	e76a      	b.n	b38c <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    b4b6:	a809      	add	r0, sp, #36	; 0x24
    b4b8:	f7ff fe8e 	bl	b1d8 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    b4bc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    b4c0:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    b4c2:	f3c3 0240 	ubfx	r2, r3, #1, #1
    b4c6:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    b4ca:	f362 0341 	bfi	r3, r2, #1, #1
    b4ce:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    b4d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b4d4:	e773      	b.n	b3be <z_cbvprintf_impl+0x122>
	switch (*sp) {
    b4d6:	2a74      	cmp	r2, #116	; 0x74
    b4d8:	d026      	beq.n	b528 <z_cbvprintf_impl+0x28c>
    b4da:	2a7a      	cmp	r2, #122	; 0x7a
    b4dc:	f47f af7e 	bne.w	b3dc <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    b4e0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    b4e4:	2106      	movs	r1, #6
    b4e6:	e00c      	b.n	b502 <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    b4e8:	785a      	ldrb	r2, [r3, #1]
    b4ea:	2a68      	cmp	r2, #104	; 0x68
    b4ec:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    b4f0:	d106      	bne.n	b500 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    b4f2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    b4f4:	f361 02c6 	bfi	r2, r1, #3, #4
    b4f8:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    b4fc:	3302      	adds	r3, #2
    b4fe:	e76d      	b.n	b3dc <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    b500:	2102      	movs	r1, #2
    b502:	f361 02c6 	bfi	r2, r1, #3, #4
    b506:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    b50a:	3301      	adds	r3, #1
    b50c:	e766      	b.n	b3dc <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    b50e:	785a      	ldrb	r2, [r3, #1]
    b510:	2a6c      	cmp	r2, #108	; 0x6c
    b512:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    b516:	d101      	bne.n	b51c <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    b518:	2104      	movs	r1, #4
    b51a:	e7eb      	b.n	b4f4 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    b51c:	2103      	movs	r1, #3
    b51e:	e7f0      	b.n	b502 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    b520:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    b524:	2105      	movs	r1, #5
    b526:	e7ec      	b.n	b502 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    b528:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    b52c:	2107      	movs	r1, #7
    b52e:	e7e8      	b.n	b502 <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    b530:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    b534:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    b538:	f022 0202 	bic.w	r2, r2, #2
    b53c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    b540:	f042 0202 	orr.w	r2, r2, #2
    b544:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    b548:	e7df      	b.n	b50a <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    b54a:	3b6e      	subs	r3, #110	; 0x6e
    b54c:	b2d9      	uxtb	r1, r3
    b54e:	2301      	movs	r3, #1
    b550:	408b      	lsls	r3, r1
    b552:	f240 4182 	movw	r1, #1154	; 0x482
    b556:	420b      	tst	r3, r1
    b558:	d138      	bne.n	b5cc <z_cbvprintf_impl+0x330>
    b55a:	f013 0f24 	tst.w	r3, #36	; 0x24
    b55e:	d152      	bne.n	b606 <z_cbvprintf_impl+0x36a>
    b560:	07d8      	lsls	r0, r3, #31
    b562:	d55d      	bpl.n	b620 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    b564:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    b568:	2103      	movs	r1, #3
    b56a:	f361 0302 	bfi	r3, r1, #0, #3
    b56e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    b572:	f002 0378 	and.w	r3, r2, #120	; 0x78
    b576:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    b57a:	424b      	negs	r3, r1
    b57c:	414b      	adcs	r3, r1
    b57e:	e01b      	b.n	b5b8 <z_cbvprintf_impl+0x31c>
	switch (conv->specifier) {
    b580:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    b584:	b2c9      	uxtb	r1, r1
    b586:	2001      	movs	r0, #1
    b588:	fa00 f101 	lsl.w	r1, r0, r1
    b58c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    b590:	f47f af3e 	bne.w	b410 <z_cbvprintf_impl+0x174>
    b594:	f640 0601 	movw	r6, #2049	; 0x801
    b598:	4231      	tst	r1, r6
    b59a:	d11d      	bne.n	b5d8 <z_cbvprintf_impl+0x33c>
    b59c:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    b5a0:	d03e      	beq.n	b620 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    b5a2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    b5a6:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    b5aa:	f002 0278 	and.w	r2, r2, #120	; 0x78
    b5ae:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    b5b0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    b5b4:	d034      	beq.n	b620 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    b5b6:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    b5b8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    b5bc:	f3c2 0140 	ubfx	r1, r2, #1, #1
    b5c0:	430b      	orrs	r3, r1
    b5c2:	f363 0241 	bfi	r2, r3, #1, #1
    b5c6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    b5ca:	e72e      	b.n	b42a <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    b5cc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    b5d0:	2102      	movs	r1, #2
    b5d2:	f361 0302 	bfi	r3, r1, #0, #3
    b5d6:	e7e8      	b.n	b5aa <z_cbvprintf_impl+0x30e>
    b5d8:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    b5dc:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    b5de:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    b5e2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    b5e6:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    b5e8:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    b5ec:	bf02      	ittt	eq
    b5ee:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    b5f2:	f041 0101 	orreq.w	r1, r1, #1
    b5f6:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    b5fa:	2b63      	cmp	r3, #99	; 0x63
    b5fc:	d1db      	bne.n	b5b6 <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    b5fe:	1e13      	subs	r3, r2, #0
    b600:	bf18      	it	ne
    b602:	2301      	movne	r3, #1
    b604:	e7d8      	b.n	b5b8 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    b606:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    b60a:	2103      	movs	r1, #3
    b60c:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    b610:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    b614:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    b618:	bf14      	ite	ne
    b61a:	2301      	movne	r3, #1
    b61c:	2300      	moveq	r3, #0
    b61e:	e7cb      	b.n	b5b8 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    b620:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b624:	f043 0301 	orr.w	r3, r3, #1
    b628:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    b62c:	e7c3      	b.n	b5b6 <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    b62e:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    b632:	2a00      	cmp	r2, #0
			width = conv->width_value;
    b634:	bfb4      	ite	lt
    b636:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
		int width = -1;
    b63a:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    b63e:	e706      	b.n	b44e <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    b640:	0798      	lsls	r0, r3, #30
    b642:	f57f af13 	bpl.w	b46c <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    b646:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
			= (enum length_mod_enum)conv->length_mod;
    b64a:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->pad0_value = 0;
    b64e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    b650:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    b654:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		enum specifier_cat_enum specifier_cat
    b658:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    b65c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    b65e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    b662:	d133      	bne.n	b6cc <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    b664:	1ecb      	subs	r3, r1, #3
    b666:	2b04      	cmp	r3, #4
    b668:	d804      	bhi.n	b674 <z_cbvprintf_impl+0x3d8>
    b66a:	e8df f003 	tbb	[pc, r3]
    b66e:	4621      	.short	0x4621
    b670:	2146      	.short	0x2146
    b672:	21          	.byte	0x21
    b673:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    b674:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    b676:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    b678:	ea4f 72e3 	mov.w	r2, r3, asr #31
    b67c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    b680:	d11c      	bne.n	b6bc <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    b682:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    b686:	17da      	asrs	r2, r3, #31
    b688:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    b68c:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    b68e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    b692:	f013 0603 	ands.w	r6, r3, #3
    b696:	d050      	beq.n	b73a <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    b698:	9b04      	ldr	r3, [sp, #16]
    b69a:	9903      	ldr	r1, [sp, #12]
    b69c:	463a      	mov	r2, r7
    b69e:	4650      	mov	r0, sl
    b6a0:	f006 f816 	bl	116d0 <outs>
    b6a4:	2800      	cmp	r0, #0
    b6a6:	f2c0 8150 	blt.w	b94a <z_cbvprintf_impl+0x6ae>
    b6aa:	4405      	add	r5, r0
			continue;
    b6ac:	9f04      	ldr	r7, [sp, #16]
    b6ae:	e5fd      	b.n	b2ac <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b6b0:	f854 3b04 	ldr.w	r3, [r4], #4
    b6b4:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    b6b6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    b6ba:	e7e8      	b.n	b68e <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    b6bc:	2902      	cmp	r1, #2
    b6be:	d1e5      	bne.n	b68c <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    b6c0:	b21a      	sxth	r2, r3
    b6c2:	f343 33c0 	sbfx	r3, r3, #15, #1
    b6c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    b6ca:	e7df      	b.n	b68c <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    b6cc:	2b02      	cmp	r3, #2
    b6ce:	d124      	bne.n	b71a <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    b6d0:	1ecb      	subs	r3, r1, #3
    b6d2:	2b04      	cmp	r3, #4
    b6d4:	d804      	bhi.n	b6e0 <z_cbvprintf_impl+0x444>
    b6d6:	e8df f003 	tbb	[pc, r3]
    b6da:	1018      	.short	0x1018
    b6dc:	1810      	.short	0x1810
    b6de:	18          	.byte	0x18
    b6df:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    b6e0:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    b6e2:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    b6e6:	f04f 0200 	mov.w	r2, #0
    b6ea:	d014      	beq.n	b716 <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    b6ec:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    b6ee:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    b6f2:	d1cc      	bne.n	b68e <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    b6f4:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    b6f6:	9310      	str	r3, [sp, #64]	; 0x40
    b6f8:	e7c9      	b.n	b68e <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    b6fa:	3407      	adds	r4, #7
    b6fc:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    b700:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    b704:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    b708:	e7c1      	b.n	b68e <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    b70a:	f854 3b04 	ldr.w	r3, [r4], #4
    b70e:	9310      	str	r3, [sp, #64]	; 0x40
    b710:	2300      	movs	r3, #0
    b712:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    b714:	e7bb      	b.n	b68e <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    b716:	b2db      	uxtb	r3, r3
    b718:	e7cd      	b.n	b6b6 <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    b71a:	2b04      	cmp	r3, #4
    b71c:	d108      	bne.n	b730 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    b71e:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    b720:	f024 0407 	bic.w	r4, r4, #7
    b724:	e9d4 2300 	ldrd	r2, r3, [r4]
    b728:	3408      	adds	r4, #8
    b72a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    b72e:	e7ae      	b.n	b68e <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    b730:	2b03      	cmp	r3, #3
    b732:	d1ac      	bne.n	b68e <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    b734:	f854 3b04 	ldr.w	r3, [r4], #4
    b738:	e7dd      	b.n	b6f6 <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    b73a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    b73e:	2878      	cmp	r0, #120	; 0x78
    b740:	d8b4      	bhi.n	b6ac <z_cbvprintf_impl+0x410>
    b742:	2862      	cmp	r0, #98	; 0x62
    b744:	d81c      	bhi.n	b780 <z_cbvprintf_impl+0x4e4>
    b746:	2825      	cmp	r0, #37	; 0x25
    b748:	f43f adb8 	beq.w	b2bc <z_cbvprintf_impl+0x20>
    b74c:	2858      	cmp	r0, #88	; 0x58
    b74e:	d1ad      	bne.n	b6ac <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    b750:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    b754:	9300      	str	r3, [sp, #0]
    b756:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b75a:	ab0a      	add	r3, sp, #40	; 0x28
    b75c:	aa12      	add	r2, sp, #72	; 0x48
    b75e:	f7ff fd51 	bl	b204 <encode_uint>
			if (precision >= 0) {
    b762:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    b766:	4607      	mov	r7, r0
			if (precision >= 0) {
    b768:	f280 8098 	bge.w	b89c <z_cbvprintf_impl+0x600>
		if (bps == NULL) {
    b76c:	2f00      	cmp	r7, #0
    b76e:	d09d      	beq.n	b6ac <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    b770:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    b774:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    b778:	2e00      	cmp	r6, #0
    b77a:	d04e      	beq.n	b81a <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    b77c:	3001      	adds	r0, #1
    b77e:	e04c      	b.n	b81a <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    b780:	3863      	subs	r0, #99	; 0x63
    b782:	2815      	cmp	r0, #21
    b784:	d892      	bhi.n	b6ac <z_cbvprintf_impl+0x410>
    b786:	a201      	add	r2, pc, #4	; (adr r2, b78c <z_cbvprintf_impl+0x4f0>)
    b788:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    b78c:	0000b80b 	.word	0x0000b80b
    b790:	0000b871 	.word	0x0000b871
    b794:	0000b6ad 	.word	0x0000b6ad
    b798:	0000b6ad 	.word	0x0000b6ad
    b79c:	0000b6ad 	.word	0x0000b6ad
    b7a0:	0000b6ad 	.word	0x0000b6ad
    b7a4:	0000b871 	.word	0x0000b871
    b7a8:	0000b6ad 	.word	0x0000b6ad
    b7ac:	0000b6ad 	.word	0x0000b6ad
    b7b0:	0000b6ad 	.word	0x0000b6ad
    b7b4:	0000b6ad 	.word	0x0000b6ad
    b7b8:	0000b8fb 	.word	0x0000b8fb
    b7bc:	0000b897 	.word	0x0000b897
    b7c0:	0000b8bd 	.word	0x0000b8bd
    b7c4:	0000b6ad 	.word	0x0000b6ad
    b7c8:	0000b6ad 	.word	0x0000b6ad
    b7cc:	0000b7e5 	.word	0x0000b7e5
    b7d0:	0000b6ad 	.word	0x0000b6ad
    b7d4:	0000b897 	.word	0x0000b897
    b7d8:	0000b6ad 	.word	0x0000b6ad
    b7dc:	0000b6ad 	.word	0x0000b6ad
    b7e0:	0000b897 	.word	0x0000b897
			if (precision >= 0) {
    b7e4:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    b7e8:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    b7ea:	db0a      	blt.n	b802 <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    b7ec:	4659      	mov	r1, fp
    b7ee:	4638      	mov	r0, r7
    b7f0:	f007 f9c3 	bl	12b7a <strnlen>
			bpe = bps + len;
    b7f4:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    b7f8:	2f00      	cmp	r7, #0
    b7fa:	f43f af57 	beq.w	b6ac <z_cbvprintf_impl+0x410>
		char sign = 0;
    b7fe:	2600      	movs	r6, #0
    b800:	e00b      	b.n	b81a <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    b802:	4638      	mov	r0, r7
    b804:	f7fc fcd0 	bl	81a8 <strlen>
    b808:	e7f4      	b.n	b7f4 <z_cbvprintf_impl+0x558>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b80a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b80c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    b810:	2600      	movs	r6, #0
			bpe = buf + 1;
    b812:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			bps = buf;
    b816:	af0a      	add	r7, sp, #40	; 0x28
		size_t nj_len = (bpe - bps);
    b818:	2001      	movs	r0, #1
		if (conv->altform_0c) {
    b81a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    b81e:	f013 0210 	ands.w	r2, r3, #16
    b822:	9205      	str	r2, [sp, #20]
    b824:	f000 8084 	beq.w	b930 <z_cbvprintf_impl+0x694>
			nj_len += 2U;
    b828:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    b82a:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    b82c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    b830:	bf48      	it	mi
    b832:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    b834:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    b836:	bf48      	it	mi
    b838:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    b83a:	f1b9 0f00 	cmp.w	r9, #0
    b83e:	f340 8091 	ble.w	b964 <z_cbvprintf_impl+0x6c8>
			if (!conv->flag_dash) {
    b842:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    b846:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    b84a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    b84e:	0750      	lsls	r0, r2, #29
    b850:	9306      	str	r3, [sp, #24]
    b852:	f100 8087 	bmi.w	b964 <z_cbvprintf_impl+0x6c8>
				if (conv->flag_zero) {
    b856:	0651      	lsls	r1, r2, #25
    b858:	d57a      	bpl.n	b950 <z_cbvprintf_impl+0x6b4>
					if (sign != 0) {
    b85a:	b13e      	cbz	r6, b86c <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    b85c:	9903      	ldr	r1, [sp, #12]
    b85e:	4630      	mov	r0, r6
    b860:	47d0      	blx	sl
    b862:	2800      	cmp	r0, #0
    b864:	db71      	blt.n	b94a <z_cbvprintf_impl+0x6ae>
    b866:	9b06      	ldr	r3, [sp, #24]
    b868:	3501      	adds	r5, #1
    b86a:	461e      	mov	r6, r3
					pad = '0';
    b86c:	2230      	movs	r2, #48	; 0x30
    b86e:	e070      	b.n	b952 <z_cbvprintf_impl+0x6b6>
			if (conv->flag_plus) {
    b870:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    b872:	bf5c      	itt	pl
    b874:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    b878:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    b87a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
				sign = '+';
    b87e:	bf48      	it	mi
    b880:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    b882:	2b00      	cmp	r3, #0
    b884:	f6bf af64 	bge.w	b750 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    b888:	4252      	negs	r2, r2
    b88a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b88e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
    b892:	262d      	movs	r6, #45	; 0x2d
    b894:	e75c      	b.n	b750 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    b896:	2600      	movs	r6, #0
    b898:	e75a      	b.n	b750 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    b89a:	2600      	movs	r6, #0
				conv->flag_zero = false;
    b89c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    b8a0:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    b8a4:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    b8a6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    b8aa:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    b8ac:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    b8b0:	f67f af5c 	bls.w	b76c <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    b8b4:	ebab 0303 	sub.w	r3, fp, r3
    b8b8:	9313      	str	r3, [sp, #76]	; 0x4c
    b8ba:	e757      	b.n	b76c <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    b8bc:	9810      	ldr	r0, [sp, #64]	; 0x40
    b8be:	b380      	cbz	r0, b922 <z_cbvprintf_impl+0x686>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b8c0:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    b8c4:	ab0a      	add	r3, sp, #40	; 0x28
    b8c6:	f8cd 8000 	str.w	r8, [sp]
    b8ca:	aa12      	add	r2, sp, #72	; 0x48
    b8cc:	2100      	movs	r1, #0
    b8ce:	f7ff fc99 	bl	b204 <encode_uint>
				conv->altform_0c = true;
    b8d2:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    b8d6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    b8da:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    b8de:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    b8e2:	f1bb 0f00 	cmp.w	fp, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b8e6:	4607      	mov	r7, r0
				conv->altform_0c = true;
    b8e8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    b8ec:	dad5      	bge.n	b89a <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    b8ee:	2800      	cmp	r0, #0
    b8f0:	f43f aedc 	beq.w	b6ac <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    b8f4:	eba8 0000 	sub.w	r0, r8, r0
    b8f8:	e781      	b.n	b7fe <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    b8fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    b8fc:	2907      	cmp	r1, #7
    b8fe:	f63f aed5 	bhi.w	b6ac <z_cbvprintf_impl+0x410>
    b902:	e8df f001 	tbb	[pc, r1]
    b906:	040c      	.short	0x040c
    b908:	08080c06 	.word	0x08080c06
    b90c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    b90e:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    b910:	e6cc      	b.n	b6ac <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    b912:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    b914:	e6ca      	b.n	b6ac <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    b916:	17ea      	asrs	r2, r5, #31
    b918:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    b91c:	e6c6      	b.n	b6ac <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    b91e:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    b920:	e6c4      	b.n	b6ac <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    b922:	f8df 80bc 	ldr.w	r8, [pc, #188]	; b9e0 <z_cbvprintf_impl+0x744>
		char sign = 0;
    b926:	4606      	mov	r6, r0
    b928:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    b92c:	2005      	movs	r0, #5
    b92e:	e774      	b.n	b81a <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    b930:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    b932:	bf48      	it	mi
    b934:	3001      	addmi	r0, #1
    b936:	e778      	b.n	b82a <z_cbvprintf_impl+0x58e>
    b938:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    b93a:	4610      	mov	r0, r2
    b93c:	9206      	str	r2, [sp, #24]
    b93e:	9903      	ldr	r1, [sp, #12]
    b940:	47d0      	blx	sl
    b942:	2800      	cmp	r0, #0
    b944:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b948:	da04      	bge.n	b954 <z_cbvprintf_impl+0x6b8>
#undef OUTS
#undef OUTC
}
    b94a:	b017      	add	sp, #92	; 0x5c
    b94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    b950:	2220      	movs	r2, #32
					pad = '0';
    b952:	464b      	mov	r3, r9
				while (width-- > 0) {
    b954:	4619      	mov	r1, r3
    b956:	2900      	cmp	r1, #0
    b958:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    b95c:	dcec      	bgt.n	b938 <z_cbvprintf_impl+0x69c>
    b95e:	444d      	add	r5, r9
    b960:	1a6d      	subs	r5, r5, r1
    b962:	4699      	mov	r9, r3
		if (sign != 0) {
    b964:	b12e      	cbz	r6, b972 <z_cbvprintf_impl+0x6d6>
			OUTC(sign);
    b966:	9903      	ldr	r1, [sp, #12]
    b968:	4630      	mov	r0, r6
    b96a:	47d0      	blx	sl
    b96c:	2800      	cmp	r0, #0
    b96e:	dbec      	blt.n	b94a <z_cbvprintf_impl+0x6ae>
    b970:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    b972:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    b976:	06da      	lsls	r2, r3, #27
    b978:	d401      	bmi.n	b97e <z_cbvprintf_impl+0x6e2>
    b97a:	071b      	lsls	r3, r3, #28
    b97c:	d505      	bpl.n	b98a <z_cbvprintf_impl+0x6ee>
				OUTC('0');
    b97e:	9903      	ldr	r1, [sp, #12]
    b980:	2030      	movs	r0, #48	; 0x30
    b982:	47d0      	blx	sl
    b984:	2800      	cmp	r0, #0
    b986:	dbe0      	blt.n	b94a <z_cbvprintf_impl+0x6ae>
    b988:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    b98a:	9b05      	ldr	r3, [sp, #20]
    b98c:	b133      	cbz	r3, b99c <z_cbvprintf_impl+0x700>
				OUTC(conv->specifier);
    b98e:	9903      	ldr	r1, [sp, #12]
    b990:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    b994:	47d0      	blx	sl
    b996:	2800      	cmp	r0, #0
    b998:	dbd7      	blt.n	b94a <z_cbvprintf_impl+0x6ae>
    b99a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    b99c:	44ab      	add	fp, r5
    b99e:	e005      	b.n	b9ac <z_cbvprintf_impl+0x710>
				OUTC('0');
    b9a0:	9903      	ldr	r1, [sp, #12]
    b9a2:	2030      	movs	r0, #48	; 0x30
    b9a4:	47d0      	blx	sl
    b9a6:	2800      	cmp	r0, #0
    b9a8:	dbcf      	blt.n	b94a <z_cbvprintf_impl+0x6ae>
    b9aa:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    b9ac:	ebab 0305 	sub.w	r3, fp, r5
    b9b0:	2b00      	cmp	r3, #0
    b9b2:	dcf5      	bgt.n	b9a0 <z_cbvprintf_impl+0x704>
			OUTS(bps, bpe);
    b9b4:	9903      	ldr	r1, [sp, #12]
    b9b6:	4643      	mov	r3, r8
    b9b8:	463a      	mov	r2, r7
    b9ba:	4650      	mov	r0, sl
    b9bc:	f005 fe88 	bl	116d0 <outs>
    b9c0:	2800      	cmp	r0, #0
    b9c2:	dbc2      	blt.n	b94a <z_cbvprintf_impl+0x6ae>
    b9c4:	4405      	add	r5, r0
		while (width > 0) {
    b9c6:	44a9      	add	r9, r5
    b9c8:	eba9 0305 	sub.w	r3, r9, r5
    b9cc:	2b00      	cmp	r3, #0
    b9ce:	f77f ae6d 	ble.w	b6ac <z_cbvprintf_impl+0x410>
			OUTC(' ');
    b9d2:	9903      	ldr	r1, [sp, #12]
    b9d4:	2020      	movs	r0, #32
    b9d6:	47d0      	blx	sl
    b9d8:	2800      	cmp	r0, #0
    b9da:	dbb6      	blt.n	b94a <z_cbvprintf_impl+0x6ae>
    b9dc:	3501      	adds	r5, #1
			--width;
    b9de:	e7f3      	b.n	b9c8 <z_cbvprintf_impl+0x72c>
    b9e0:	0001303f 	.word	0x0001303f

0000b9e4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    b9e4:	f003 bb46 	b.w	f074 <SystemInit>

0000b9e8 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
    b9e8:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __zephyr_init_array_start;
    b9ea:	4c04      	ldr	r4, [pc, #16]	; (b9fc <__do_init_array_aux+0x14>)
		func < __zephyr_init_array_end;
    b9ec:	4d04      	ldr	r5, [pc, #16]	; (ba00 <__do_init_array_aux+0x18>)
    b9ee:	42ac      	cmp	r4, r5
    b9f0:	d300      	bcc.n	b9f4 <__do_init_array_aux+0xc>
		func++) {
		(*func)();
	}
}
    b9f2:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
    b9f4:	f854 3b04 	ldr.w	r3, [r4], #4
    b9f8:	4798      	blx	r3
		func++) {
    b9fa:	e7f8      	b.n	b9ee <__do_init_array_aux+0x6>
    b9fc:	00012dd0 	.word	0x00012dd0
    ba00:	00012dd0 	.word	0x00012dd0

0000ba04 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
    ba04:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__ZEPHYR_CTOR_LIST__[0];
    ba06:	4c05      	ldr	r4, [pc, #20]	; (ba1c <__do_global_ctors_aux+0x18>)
    ba08:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
    ba0a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    ba0e:	b905      	cbnz	r5, ba12 <__do_global_ctors_aux+0xe>
		__ZEPHYR_CTOR_LIST__[nCtors--]();
	}
}
    ba10:	bd38      	pop	{r3, r4, r5, pc}
		__ZEPHYR_CTOR_LIST__[nCtors--]();
    ba12:	f854 3904 	ldr.w	r3, [r4], #-4
    ba16:	3d01      	subs	r5, #1
    ba18:	4798      	blx	r3
    ba1a:	e7f8      	b.n	ba0e <__do_global_ctors_aux+0xa>
    ba1c:	00012dc4 	.word	0x00012dc4

0000ba20 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    ba20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ba24:	4605      	mov	r5, r0
	__asm__ volatile(
    ba26:	f04f 0340 	mov.w	r3, #64	; 0x40
    ba2a:	f3ef 8611 	mrs	r6, BASEPRI
    ba2e:	f383 8812 	msr	BASEPRI_MAX, r3
    ba32:	f3bf 8f6f 	isb	sy
	return list->head;
    ba36:	4b0e      	ldr	r3, [pc, #56]	; (ba70 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    ba38:	4f0e      	ldr	r7, [pc, #56]	; (ba74 <pm_state_notify+0x54>)
    ba3a:	681c      	ldr	r4, [r3, #0]
    ba3c:	f8df 8038 	ldr.w	r8, [pc, #56]	; ba78 <pm_state_notify+0x58>
    ba40:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    ba44:	b92c      	cbnz	r4, ba52 <pm_state_notify+0x32>
	__asm__ volatile(
    ba46:	f386 8811 	msr	BASEPRI, r6
    ba4a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    ba4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    ba52:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    ba56:	2d00      	cmp	r5, #0
    ba58:	bf18      	it	ne
    ba5a:	4613      	movne	r3, r2
		if (callback) {
    ba5c:	b12b      	cbz	r3, ba6a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    ba5e:	f898 2014 	ldrb.w	r2, [r8, #20]
    ba62:	fb09 f202 	mul.w	r2, r9, r2
    ba66:	5cb8      	ldrb	r0, [r7, r2]
    ba68:	4798      	blx	r3
	return node->next;
    ba6a:	6824      	ldr	r4, [r4, #0]
    ba6c:	e7ea      	b.n	ba44 <pm_state_notify+0x24>
    ba6e:	bf00      	nop
    ba70:	20001534 	.word	0x20001534
    ba74:	20001528 	.word	0x20001528
    ba78:	2000168c 	.word	0x2000168c

0000ba7c <pm_system_resume>:

void pm_system_resume(void)
{
    ba7c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    ba7e:	4b19      	ldr	r3, [pc, #100]	; (bae4 <pm_system_resume+0x68>)
    ba80:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ba82:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    ba86:	f004 031f 	and.w	r3, r4, #31
    ba8a:	2201      	movs	r2, #1
    ba8c:	409a      	lsls	r2, r3
    ba8e:	4b16      	ldr	r3, [pc, #88]	; (bae8 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ba90:	0961      	lsrs	r1, r4, #5
    ba92:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    ba96:	43d0      	mvns	r0, r2
    ba98:	e853 1f00 	ldrex	r1, [r3]
    ba9c:	ea01 0500 	and.w	r5, r1, r0
    baa0:	e843 5600 	strex	r6, r5, [r3]
    baa4:	2e00      	cmp	r6, #0
    baa6:	d1f7      	bne.n	ba98 <pm_system_resume+0x1c>
    baa8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    baac:	420a      	tst	r2, r1
    baae:	d013      	beq.n	bad8 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    bab0:	4b0e      	ldr	r3, [pc, #56]	; (baec <pm_system_resume+0x70>)
    bab2:	4d0f      	ldr	r5, [pc, #60]	; (baf0 <pm_system_resume+0x74>)
    bab4:	b18b      	cbz	r3, bada <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    bab6:	230c      	movs	r3, #12
    bab8:	4363      	muls	r3, r4
    baba:	18ea      	adds	r2, r5, r3
    babc:	5ce8      	ldrb	r0, [r5, r3]
    babe:	7851      	ldrb	r1, [r2, #1]
    bac0:	f005 fe5f 	bl	11782 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    bac4:	2000      	movs	r0, #0
    bac6:	f7ff ffab 	bl	ba20 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    baca:	230c      	movs	r3, #12
    bacc:	435c      	muls	r4, r3
    bace:	192a      	adds	r2, r5, r4
    bad0:	2300      	movs	r3, #0
    bad2:	512b      	str	r3, [r5, r4]
    bad4:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    bad8:	bd70      	pop	{r4, r5, r6, pc}
    bada:	f383 8811 	msr	BASEPRI, r3
    bade:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    bae2:	e7ef      	b.n	bac4 <pm_system_resume+0x48>
    bae4:	2000168c 	.word	0x2000168c
    bae8:	2000153c 	.word	0x2000153c
    baec:	00011783 	.word	0x00011783
    baf0:	20001528 	.word	0x20001528

0000baf4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    baf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    baf8:	4b35      	ldr	r3, [pc, #212]	; (bbd0 <pm_system_suspend+0xdc>)
{
    bafa:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    bafc:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    bafe:	f04f 0340 	mov.w	r3, #64	; 0x40
    bb02:	f3ef 8811 	mrs	r8, BASEPRI
    bb06:	f383 8812 	msr	BASEPRI_MAX, r3
    bb0a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    bb0e:	240c      	movs	r4, #12
    bb10:	4b30      	ldr	r3, [pc, #192]	; (bbd4 <pm_system_suspend+0xe0>)
    bb12:	4e31      	ldr	r6, [pc, #196]	; (bbd8 <pm_system_suspend+0xe4>)
    bb14:	436c      	muls	r4, r5
    bb16:	191a      	adds	r2, r3, r4
    bb18:	5d19      	ldrb	r1, [r3, r4]
    bb1a:	2900      	cmp	r1, #0
    bb1c:	d04c      	beq.n	bbb8 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    bb1e:	ca07      	ldmia	r2, {r0, r1, r2}
    bb20:	eb06 0c04 	add.w	ip, r6, r4
    bb24:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    bb28:	2200      	movs	r2, #0
    bb2a:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    bb2c:	f388 8811 	msr	BASEPRI, r8
    bb30:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    bb34:	230c      	movs	r3, #12
    bb36:	436b      	muls	r3, r5
    bb38:	18f2      	adds	r2, r6, r3
    bb3a:	5cf0      	ldrb	r0, [r6, r3]
    bb3c:	2800      	cmp	r0, #0
    bb3e:	d039      	beq.n	bbb4 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    bb40:	1c7b      	adds	r3, r7, #1
    bb42:	d010      	beq.n	bb66 <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    bb44:	f8d2 c008 	ldr.w	ip, [r2, #8]
    bb48:	4c24      	ldr	r4, [pc, #144]	; (bbdc <pm_system_suspend+0xe8>)
    bb4a:	4a25      	ldr	r2, [pc, #148]	; (bbe0 <pm_system_suspend+0xec>)
    bb4c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    bb50:	2100      	movs	r1, #0
    bb52:	fbec 4100 	umlal	r4, r1, ip, r0
    bb56:	2300      	movs	r3, #0
    bb58:	4620      	mov	r0, r4
    bb5a:	f7f4 fe9b 	bl	894 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    bb5e:	2101      	movs	r1, #1
    bb60:	1a38      	subs	r0, r7, r0
    bb62:	f006 ff0f 	bl	12984 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    bb66:	f004 fe99 	bl	1089c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    bb6a:	2001      	movs	r0, #1
    bb6c:	f7ff ff58 	bl	ba20 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bb70:	f3bf 8f5b 	dmb	ish
    bb74:	4b1b      	ldr	r3, [pc, #108]	; (bbe4 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    bb76:	096a      	lsrs	r2, r5, #5
    bb78:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    bb7c:	f005 011f 	and.w	r1, r5, #31
    bb80:	2201      	movs	r2, #1
    bb82:	408a      	lsls	r2, r1
    bb84:	e853 0f00 	ldrex	r0, [r3]
    bb88:	4310      	orrs	r0, r2
    bb8a:	e843 0100 	strex	r1, r0, [r3]
    bb8e:	2900      	cmp	r1, #0
    bb90:	d1f8      	bne.n	bb84 <pm_system_suspend+0x90>
    bb92:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    bb96:	4b14      	ldr	r3, [pc, #80]	; (bbe8 <pm_system_suspend+0xf4>)
    bb98:	b13b      	cbz	r3, bbaa <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    bb9a:	230c      	movs	r3, #12
    bb9c:	fb03 f005 	mul.w	r0, r3, r5
    bba0:	1833      	adds	r3, r6, r0
    bba2:	5c30      	ldrb	r0, [r6, r0]
    bba4:	7859      	ldrb	r1, [r3, #1]
    bba6:	f005 fde0 	bl	1176a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    bbaa:	f7ff ff67 	bl	ba7c <pm_system_resume>
	k_sched_unlock();
    bbae:	f004 fe89 	bl	108c4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    bbb2:	2001      	movs	r0, #1
}
    bbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    bbb8:	4601      	mov	r1, r0
    bbba:	4628      	mov	r0, r5
    bbbc:	f000 f816 	bl	bbec <pm_policy_next_state>
		if (info != NULL) {
    bbc0:	2800      	cmp	r0, #0
    bbc2:	d0b3      	beq.n	bb2c <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    bbc4:	c807      	ldmia	r0, {r0, r1, r2}
    bbc6:	4434      	add	r4, r6
    bbc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    bbcc:	e7ae      	b.n	bb2c <pm_system_suspend+0x38>
    bbce:	bf00      	nop
    bbd0:	2000168c 	.word	0x2000168c
    bbd4:	2000151c 	.word	0x2000151c
    bbd8:	20001528 	.word	0x20001528
    bbdc:	000f423f 	.word	0x000f423f
    bbe0:	000f4240 	.word	0x000f4240
    bbe4:	2000153c 	.word	0x2000153c
    bbe8:	0001176b 	.word	0x0001176b

0000bbec <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    bbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bbf0:	b085      	sub	sp, #20
    bbf2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    bbf4:	a903      	add	r1, sp, #12
    bbf6:	f000 f843 	bl	bc80 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    bbfa:	4b1e      	ldr	r3, [pc, #120]	; (bc74 <pm_policy_next_state+0x88>)
    bbfc:	9d03      	ldr	r5, [sp, #12]
    bbfe:	f8d3 a000 	ldr.w	sl, [r3]
    bc02:	f8df 8074 	ldr.w	r8, [pc, #116]	; bc78 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    bc06:	1e43      	subs	r3, r0, #1
    bc08:	b21b      	sxth	r3, r3
    bc0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    bc0e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    bc10:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    bc14:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    bc18:	f04f 0b00 	mov.w	fp, #0
    bc1c:	b924      	cbnz	r4, bc28 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    bc1e:	46a1      	mov	r9, r4
}
    bc20:	4648      	mov	r0, r9
    bc22:	b005      	add	sp, #20
    bc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc28:	6868      	ldr	r0, [r5, #4]
    bc2a:	4a14      	ldr	r2, [pc, #80]	; (bc7c <pm_policy_next_state+0x90>)
    bc2c:	46c4      	mov	ip, r8
    bc2e:	4659      	mov	r1, fp
    bc30:	fbe0 c107 	umlal	ip, r1, r0, r7
    bc34:	2300      	movs	r3, #0
    bc36:	4660      	mov	r0, ip
    bc38:	f7f4 fe2c 	bl	894 <__aeabi_uldivmod>
    bc3c:	9001      	str	r0, [sp, #4]
    bc3e:	68a8      	ldr	r0, [r5, #8]
    bc40:	4a0e      	ldr	r2, [pc, #56]	; (bc7c <pm_policy_next_state+0x90>)
    bc42:	46c4      	mov	ip, r8
    bc44:	4659      	mov	r1, fp
    bc46:	fbe0 c107 	umlal	ip, r1, r0, r7
    bc4a:	2300      	movs	r3, #0
    bc4c:	4660      	mov	r0, ip
    bc4e:	f7f4 fe21 	bl	894 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    bc52:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    bc56:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    bc58:	d001      	beq.n	bc5e <pm_policy_next_state+0x72>
    bc5a:	4582      	cmp	sl, r0
    bc5c:	d905      	bls.n	bc6a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    bc5e:	1c73      	adds	r3, r6, #1
    bc60:	d0de      	beq.n	bc20 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    bc62:	9b01      	ldr	r3, [sp, #4]
    bc64:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    bc66:	42b0      	cmp	r0, r6
    bc68:	d9da      	bls.n	bc20 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    bc6a:	3c01      	subs	r4, #1
    bc6c:	b2a4      	uxth	r4, r4
    bc6e:	3d0c      	subs	r5, #12
    bc70:	e7d4      	b.n	bc1c <pm_policy_next_state+0x30>
    bc72:	bf00      	nop
    bc74:	20000384 	.word	0x20000384
    bc78:	000f423f 	.word	0x000f423f
    bc7c:	000f4240 	.word	0x000f4240

0000bc80 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    bc80:	b908      	cbnz	r0, bc86 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    bc82:	4b02      	ldr	r3, [pc, #8]	; (bc8c <pm_state_cpu_get_all+0xc>)
    bc84:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    bc86:	2000      	movs	r0, #0
    bc88:	4770      	bx	lr
    bc8a:	bf00      	nop
    bc8c:	00012e8c 	.word	0x00012e8c

0000bc90 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    bc90:	4901      	ldr	r1, [pc, #4]	; (bc98 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    bc92:	2210      	movs	r2, #16
	str	r2, [r1]
    bc94:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    bc96:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    bc98:	e000ed10 	.word	0xe000ed10

0000bc9c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    bc9c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    bc9e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    bca0:	f380 8811 	msr	BASEPRI, r0
	isb
    bca4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    bca8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    bcac:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    bcae:	b662      	cpsie	i
	isb
    bcb0:	f3bf 8f6f 	isb	sy

	bx	lr
    bcb4:	4770      	bx	lr
    bcb6:	bf00      	nop

0000bcb8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    bcb8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    bcba:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    bcbc:	f381 8811 	msr	BASEPRI, r1

	wfe
    bcc0:	bf20      	wfe

	msr	BASEPRI, r0
    bcc2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    bcc6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    bcc8:	4770      	bx	lr
    bcca:	bf00      	nop

0000bccc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    bccc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    bcce:	2800      	cmp	r0, #0
    bcd0:	db07      	blt.n	bce2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bcd2:	4a04      	ldr	r2, [pc, #16]	; (bce4 <arch_irq_enable+0x18>)
    bcd4:	0941      	lsrs	r1, r0, #5
    bcd6:	2301      	movs	r3, #1
    bcd8:	f000 001f 	and.w	r0, r0, #31
    bcdc:	4083      	lsls	r3, r0
    bcde:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    bce2:	4770      	bx	lr
    bce4:	e000e100 	.word	0xe000e100

0000bce8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    bce8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    bcea:	2800      	cmp	r0, #0
    bcec:	db0c      	blt.n	bd08 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bcee:	0943      	lsrs	r3, r0, #5
    bcf0:	4906      	ldr	r1, [pc, #24]	; (bd0c <arch_irq_disable+0x24>)
    bcf2:	f000 001f 	and.w	r0, r0, #31
    bcf6:	3320      	adds	r3, #32
    bcf8:	2201      	movs	r2, #1
    bcfa:	4082      	lsls	r2, r0
    bcfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    bd00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bd04:	f3bf 8f6f 	isb	sy
}
    bd08:	4770      	bx	lr
    bd0a:	bf00      	nop
    bd0c:	e000e100 	.word	0xe000e100

0000bd10 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    bd10:	4b05      	ldr	r3, [pc, #20]	; (bd28 <arch_irq_is_enabled+0x18>)
    bd12:	0942      	lsrs	r2, r0, #5
    bd14:	f000 001f 	and.w	r0, r0, #31
    bd18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    bd1c:	2301      	movs	r3, #1
    bd1e:	fa03 f000 	lsl.w	r0, r3, r0
}
    bd22:	4010      	ands	r0, r2
    bd24:	4770      	bx	lr
    bd26:	bf00      	nop
    bd28:	e000e100 	.word	0xe000e100

0000bd2c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    bd2c:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    bd2e:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
    bd30:	bf54      	ite	pl
    bd32:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    bd34:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    bd36:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bd38:	bfac      	ite	ge
    bd3a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bd3e:	4a07      	ldrlt	r2, [pc, #28]	; (bd5c <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bd40:	ea4f 1341 	mov.w	r3, r1, lsl #5
    bd44:	bfac      	ite	ge
    bd46:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bd4a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bd4e:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bd50:	bfb4      	ite	lt
    bd52:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bd54:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
    bd58:	4770      	bx	lr
    bd5a:	bf00      	nop
    bd5c:	e000ed14 	.word	0xe000ed14

0000bd60 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    bd60:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    bd62:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    bd64:	4b04      	ldr	r3, [pc, #16]	; (bd78 <_arch_isr_direct_pm+0x18>)
    bd66:	699a      	ldr	r2, [r3, #24]
    bd68:	b11a      	cbz	r2, bd72 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    bd6a:	2200      	movs	r2, #0
    bd6c:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    bd6e:	f006 fb3a 	bl	123e6 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    bd72:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    bd74:	bd08      	pop	{r3, pc}
    bd76:	bf00      	nop
    bd78:	2000168c 	.word	0x2000168c

0000bd7c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    bd7c:	bf30      	wfi
    b z_SysNmiOnReset
    bd7e:	f7ff bffd 	b.w	bd7c <z_SysNmiOnReset>
    bd82:	bf00      	nop

0000bd84 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    bd84:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    bd86:	4b08      	ldr	r3, [pc, #32]	; (bda8 <z_arm_prep_c+0x24>)
    bd88:	4a08      	ldr	r2, [pc, #32]	; (bdac <z_arm_prep_c+0x28>)
    bd8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    bd8e:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    bd90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bd94:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    bd98:	f003 ff46 	bl	fc28 <z_bss_zero>
	z_data_copy();
    bd9c:	f004 fece 	bl	10b3c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    bda0:	f000 f9ce 	bl	c140 <z_arm_interrupt_init>
	z_cstart();
    bda4:	f003 ff84 	bl	fcb0 <z_cstart>
    bda8:	00000000 	.word	0x00000000
    bdac:	e000ed00 	.word	0xe000ed00

0000bdb0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    bdb0:	4a09      	ldr	r2, [pc, #36]	; (bdd8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    bdb2:	490a      	ldr	r1, [pc, #40]	; (bddc <arch_swap+0x2c>)
	_current->arch.basepri = key;
    bdb4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    bdb6:	6809      	ldr	r1, [r1, #0]
    bdb8:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    bdba:	4909      	ldr	r1, [pc, #36]	; (bde0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    bdbc:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    bdbe:	684b      	ldr	r3, [r1, #4]
    bdc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    bdc4:	604b      	str	r3, [r1, #4]
    bdc6:	2300      	movs	r3, #0
    bdc8:	f383 8811 	msr	BASEPRI, r3
    bdcc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    bdd0:	6893      	ldr	r3, [r2, #8]
}
    bdd2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    bdd4:	4770      	bx	lr
    bdd6:	bf00      	nop
    bdd8:	2000168c 	.word	0x2000168c
    bddc:	00013018 	.word	0x00013018
    bde0:	e000ed00 	.word	0xe000ed00

0000bde4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    bde4:	4912      	ldr	r1, [pc, #72]	; (be30 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    bde6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    bde8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    bdec:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    bdee:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    bdf2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    bdf6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    bdf8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    bdfc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    be00:	4f0c      	ldr	r7, [pc, #48]	; (be34 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    be02:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    be06:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    be08:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    be0a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    be0c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    be0e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    be10:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    be12:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    be16:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    be18:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    be1a:	f000 fa2d 	bl	c278 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    be1e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    be22:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    be26:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    be2a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    be2e:	4770      	bx	lr
    ldr r1, =_kernel
    be30:	2000168c 	.word	0x2000168c
    ldr v4, =_SCS_ICSR
    be34:	e000ed04 	.word	0xe000ed04

0000be38 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    be38:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    be3c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    be3e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    be42:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    be46:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    be48:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    be4c:	2902      	cmp	r1, #2
    beq _oops
    be4e:	d0ff      	beq.n	be50 <_oops>

0000be50 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    be50:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    be52:	f005 fc6b 	bl	1172c <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    be56:	bd01      	pop	{r0, pc}

0000be58 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    be58:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    be5c:	9b00      	ldr	r3, [sp, #0]
    be5e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    be62:	490a      	ldr	r1, [pc, #40]	; (be8c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    be64:	9b01      	ldr	r3, [sp, #4]
    be66:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    be6a:	9b02      	ldr	r3, [sp, #8]
    be6c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    be70:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    be74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    be78:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    be7c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    be80:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    be82:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    be84:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    be86:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    be88:	4770      	bx	lr
    be8a:	bf00      	nop
    be8c:	00011163 	.word	0x00011163

0000be90 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    be90:	4a09      	ldr	r2, [pc, #36]	; (beb8 <z_check_thread_stack_fail+0x28>)
{
    be92:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    be94:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    be96:	b170      	cbz	r0, beb6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    be98:	f113 0f16 	cmn.w	r3, #22
    be9c:	6e80      	ldr	r0, [r0, #104]	; 0x68
    be9e:	d005      	beq.n	beac <z_check_thread_stack_fail+0x1c>
    bea0:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    bea4:	429a      	cmp	r2, r3
    bea6:	d805      	bhi.n	beb4 <z_check_thread_stack_fail+0x24>
    bea8:	4283      	cmp	r3, r0
    beaa:	d203      	bcs.n	beb4 <z_check_thread_stack_fail+0x24>
		return 0;
    beac:	4281      	cmp	r1, r0
    beae:	bf28      	it	cs
    beb0:	2000      	movcs	r0, #0
    beb2:	4770      	bx	lr
    beb4:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    beb6:	4770      	bx	lr
    beb8:	2000168c 	.word	0x2000168c

0000bebc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    bebc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    bebe:	4b09      	ldr	r3, [pc, #36]	; (bee4 <arch_switch_to_main_thread+0x28>)
    bec0:	6098      	str	r0, [r3, #8]
{
    bec2:	460d      	mov	r5, r1
    bec4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    bec6:	f000 f9d7 	bl	c278 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    beca:	4620      	mov	r0, r4
    becc:	f385 8809 	msr	PSP, r5
    bed0:	2100      	movs	r1, #0
    bed2:	b663      	cpsie	if
    bed4:	f381 8811 	msr	BASEPRI, r1
    bed8:	f3bf 8f6f 	isb	sy
    bedc:	2200      	movs	r2, #0
    bede:	2300      	movs	r3, #0
    bee0:	f005 f93f 	bl	11162 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    bee4:	2000168c 	.word	0x2000168c

0000bee8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    bee8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    beea:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    beec:	4a0b      	ldr	r2, [pc, #44]	; (bf1c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    beee:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    bef0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    bef2:	bf1e      	ittt	ne
	movne	r1, #0
    bef4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    bef6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    bef8:	f006 fa75 	blne	123e6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    befc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    befe:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    bf02:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    bf06:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    bf0a:	4905      	ldr	r1, [pc, #20]	; (bf20 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    bf0c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    bf0e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    bf10:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    bf12:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    bf16:	4903      	ldr	r1, [pc, #12]	; (bf24 <_isr_wrapper+0x3c>)
	bx r1
    bf18:	4708      	bx	r1
    bf1a:	0000      	.short	0x0000
	ldr r2, =_kernel
    bf1c:	2000168c 	.word	0x2000168c
	ldr r1, =_sw_isr_table
    bf20:	00012cac 	.word	0x00012cac
	ldr r1, =z_arm_int_exit
    bf24:	0000bf29 	.word	0x0000bf29

0000bf28 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    bf28:	4b04      	ldr	r3, [pc, #16]	; (bf3c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    bf2a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    bf2c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    bf2e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    bf30:	d003      	beq.n	bf3a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    bf32:	4903      	ldr	r1, [pc, #12]	; (bf40 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    bf34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    bf38:	600a      	str	r2, [r1, #0]

0000bf3a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    bf3a:	4770      	bx	lr
	ldr r3, =_kernel
    bf3c:	2000168c 	.word	0x2000168c
	ldr r1, =_SCS_ICSR
    bf40:	e000ed04 	.word	0xe000ed04

0000bf44 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    bf44:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    bf46:	4b18      	ldr	r3, [pc, #96]	; (bfa8 <mem_manage_fault+0x64>)
{
    bf48:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    bf4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    bf4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    bf4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bf50:	0792      	lsls	r2, r2, #30
{
    bf52:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    bf54:	d519      	bpl.n	bf8a <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    bf56:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    bf58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bf5a:	0615      	lsls	r5, r2, #24
    bf5c:	d515      	bpl.n	bf8a <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    bf5e:	b119      	cbz	r1, bf68 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    bf60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bf62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    bf66:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    bf68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    bf6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bf6c:	4d0e      	ldr	r5, [pc, #56]	; (bfa8 <mem_manage_fault+0x64>)
    bf6e:	f012 0f10 	tst.w	r2, #16
    bf72:	d10d      	bne.n	bf90 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    bf74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    bf76:	079a      	lsls	r2, r3, #30
    bf78:	d40a      	bmi.n	bf90 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    bf7a:	2000      	movs	r0, #0
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    bf7c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bf7e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    bf82:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    bf84:	2300      	movs	r3, #0
    bf86:	7023      	strb	r3, [r4, #0]

	return reason;
}
    bf88:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    bf8a:	f06f 0015 	mvn.w	r0, #21
    bf8e:	e7eb      	b.n	bf68 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    bf90:	686b      	ldr	r3, [r5, #4]
    bf92:	051b      	lsls	r3, r3, #20
    bf94:	d5f1      	bpl.n	bf7a <mem_manage_fault+0x36>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    bf96:	4631      	mov	r1, r6
    bf98:	f7ff ff7a 	bl	be90 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    bf9c:	2800      	cmp	r0, #0
    bf9e:	d0ec      	beq.n	bf7a <mem_manage_fault+0x36>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    bfa0:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    bfa4:	2002      	movs	r0, #2
    bfa6:	e7e9      	b.n	bf7c <mem_manage_fault+0x38>
    bfa8:	e000ed00 	.word	0xe000ed00

0000bfac <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    bfac:	4b0b      	ldr	r3, [pc, #44]	; (bfdc <bus_fault.constprop.0+0x30>)
    bfae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    bfb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    bfb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bfb4:	0592      	lsls	r2, r2, #22
    bfb6:	d508      	bpl.n	bfca <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    bfb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    bfba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bfbc:	0412      	lsls	r2, r2, #16
    bfbe:	d504      	bpl.n	bfca <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    bfc0:	b118      	cbz	r0, bfca <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    bfc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bfc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    bfc8:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    bfca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    bfcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    bfce:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    bfd0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    bfd2:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    bfd6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    bfd8:	7008      	strb	r0, [r1, #0]

	return reason;
}
    bfda:	4770      	bx	lr
    bfdc:	e000ed00 	.word	0xe000ed00

0000bfe0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    bfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    bfe2:	4b4d      	ldr	r3, [pc, #308]	; (c118 <z_arm_fault+0x138>)
    bfe4:	685b      	ldr	r3, [r3, #4]
{
    bfe6:	b08b      	sub	sp, #44	; 0x2c
    bfe8:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    bfea:	f3c3 0308 	ubfx	r3, r3, #0, #9
    bfee:	2500      	movs	r5, #0
    bff0:	f385 8811 	msr	BASEPRI, r5
    bff4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    bff8:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    bffc:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    c000:	d111      	bne.n	c026 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    c002:	f002 000c 	and.w	r0, r2, #12
    c006:	2808      	cmp	r0, #8
    c008:	d00d      	beq.n	c026 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    c00a:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    c00c:	bf4c      	ite	mi
    c00e:	460c      	movmi	r4, r1
			*nested_exc = true;
    c010:	2501      	movpl	r5, #1
	*recoverable = false;
    c012:	2200      	movs	r2, #0
	switch (fault) {
    c014:	3b03      	subs	r3, #3
	*recoverable = false;
    c016:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    c01a:	2b03      	cmp	r3, #3
    c01c:	d84d      	bhi.n	c0ba <z_arm_fault+0xda>
    c01e:	e8df f003 	tbb	[pc, r3]
    c022:	6b04      	.short	0x6b04
    c024:	736f      	.short	0x736f
		return NULL;
    c026:	462c      	mov	r4, r5
    c028:	e7f3      	b.n	c012 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    c02a:	4b3b      	ldr	r3, [pc, #236]	; (c118 <z_arm_fault+0x138>)
    c02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c02e:	0791      	lsls	r1, r2, #30
    c030:	d443      	bmi.n	c0ba <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    c032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c034:	2a00      	cmp	r2, #0
    c036:	db40      	blt.n	c0ba <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    c038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c03a:	0052      	lsls	r2, r2, #1
    c03c:	d53d      	bpl.n	c0ba <z_arm_fault+0xda>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    c03e:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    c040:	69a1      	ldr	r1, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    c042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    c046:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    c048:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c04c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    c050:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    c052:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    c056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    c05a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    c05c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c060:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    c064:	f64d 7202 	movw	r2, #57090	; 0xdf02
    c068:	4291      	cmp	r1, r2
    c06a:	d009      	beq.n	c080 <z_arm_fault+0xa0>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    c06c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c06e:	b2d2      	uxtb	r2, r2
    c070:	b142      	cbz	r2, c084 <z_arm_fault+0xa4>
			reason = mem_manage_fault(esf, 1, recoverable);
    c072:	f10d 0207 	add.w	r2, sp, #7
    c076:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    c078:	4620      	mov	r0, r4
    c07a:	f7ff ff63 	bl	bf44 <mem_manage_fault>
    c07e:	e00a      	b.n	c096 <z_arm_fault+0xb6>
			reason = esf->basic.r0;
    c080:	6823      	ldr	r3, [r4, #0]
    c082:	e01b      	b.n	c0bc <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    c084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c086:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    c08a:	d006      	beq.n	c09a <z_arm_fault+0xba>
			reason = bus_fault(esf, 1, recoverable);
    c08c:	f10d 0107 	add.w	r1, sp, #7
    c090:	2001      	movs	r0, #1
    c092:	f7ff ff8b 	bl	bfac <bus_fault.constprop.0>
    c096:	4603      	mov	r3, r0
    c098:	e010      	b.n	c0bc <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    c09a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c09c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    c0a0:	d30b      	bcc.n	c0ba <z_arm_fault+0xda>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    c0a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    c0a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    c0a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    c0a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    c0aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    c0ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    c0ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c0b0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    c0b4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    c0b8:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
    c0ba:	2300      	movs	r3, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    c0bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    c0c0:	b9c2      	cbnz	r2, c0f4 <z_arm_fault+0x114>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    c0c2:	ae02      	add	r6, sp, #8
    c0c4:	f104 0720 	add.w	r7, r4, #32
    c0c8:	6820      	ldr	r0, [r4, #0]
    c0ca:	6861      	ldr	r1, [r4, #4]
    c0cc:	4632      	mov	r2, r6
    c0ce:	c203      	stmia	r2!, {r0, r1}
    c0d0:	3408      	adds	r4, #8
    c0d2:	42bc      	cmp	r4, r7
    c0d4:	4616      	mov	r6, r2
    c0d6:	d1f7      	bne.n	c0c8 <z_arm_fault+0xe8>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    c0d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c0da:	b1bd      	cbz	r5, c10c <z_arm_fault+0x12c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    c0dc:	f3c2 0108 	ubfx	r1, r2, #0, #9
    c0e0:	b921      	cbnz	r1, c0ec <z_arm_fault+0x10c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    c0e2:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    c0e6:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    c0ea:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    c0ec:	a902      	add	r1, sp, #8
    c0ee:	4618      	mov	r0, r3
    c0f0:	f005 fb1a 	bl	11728 <z_arm_fatal_error>
}
    c0f4:	b00b      	add	sp, #44	; 0x2c
    c0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    c0f8:	f10d 0207 	add.w	r2, sp, #7
    c0fc:	2100      	movs	r1, #0
    c0fe:	e7bb      	b.n	c078 <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
    c100:	f10d 0107 	add.w	r1, sp, #7
    c104:	2000      	movs	r0, #0
    c106:	e7c4      	b.n	c092 <z_arm_fault+0xb2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    c108:	4b03      	ldr	r3, [pc, #12]	; (c118 <z_arm_fault+0x138>)
    c10a:	e7ca      	b.n	c0a2 <z_arm_fault+0xc2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    c10c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    c110:	f022 0201 	bic.w	r2, r2, #1
    c114:	e7e9      	b.n	c0ea <z_arm_fault+0x10a>
    c116:	bf00      	nop
    c118:	e000ed00 	.word	0xe000ed00

0000c11c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    c11c:	4a02      	ldr	r2, [pc, #8]	; (c128 <z_arm_fault_init+0xc>)
    c11e:	6953      	ldr	r3, [r2, #20]
    c120:	f043 0310 	orr.w	r3, r3, #16
    c124:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    c126:	4770      	bx	lr
    c128:	e000ed00 	.word	0xe000ed00

0000c12c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    c12c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    c130:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    c134:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    c136:	4672      	mov	r2, lr
	bl z_arm_fault
    c138:	f7ff ff52 	bl	bfe0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    c13c:	bd01      	pop	{r0, pc}
    c13e:	bf00      	nop

0000c140 <z_arm_interrupt_init>:
    c140:	4804      	ldr	r0, [pc, #16]	; (c154 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    c142:	2300      	movs	r3, #0
    c144:	2140      	movs	r1, #64	; 0x40
    c146:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    c148:	3301      	adds	r3, #1
    c14a:	2b1e      	cmp	r3, #30
    c14c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    c150:	d1f9      	bne.n	c146 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    c152:	4770      	bx	lr
    c154:	e000e100 	.word	0xe000e100

0000c158 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    c158:	2000      	movs	r0, #0
    msr CONTROL, r0
    c15a:	f380 8814 	msr	CONTROL, r0
    isb
    c15e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    c162:	f7ff fc3f 	bl	b9e4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    c166:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    c168:	490d      	ldr	r1, [pc, #52]	; (c1a0 <__start+0x48>)
    str r0, [r1]
    c16a:	6008      	str	r0, [r1, #0]
    dsb
    c16c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    c170:	480c      	ldr	r0, [pc, #48]	; (c1a4 <__start+0x4c>)
    msr msp, r0
    c172:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    c176:	f000 f82b 	bl	c1d0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    c17a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    c17c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    c180:	4809      	ldr	r0, [pc, #36]	; (c1a8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    c182:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    c186:	1840      	adds	r0, r0, r1
    msr PSP, r0
    c188:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    c18c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    c190:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    c192:	4308      	orrs	r0, r1
    msr CONTROL, r0
    c194:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    c198:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    c19c:	f7ff fdf2 	bl	bd84 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    c1a0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    c1a4:	20002d80 	.word	0x20002d80
    ldr r0, =z_interrupt_stacks
    c1a8:	20002000 	.word	0x20002000

0000c1ac <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    c1ac:	4907      	ldr	r1, [pc, #28]	; (c1cc <z_arm_clear_arm_mpu_config+0x20>)
    c1ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    c1b2:	2300      	movs	r3, #0
	int num_regions =
    c1b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    c1b8:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    c1ba:	4293      	cmp	r3, r2
    c1bc:	db00      	blt.n	c1c0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    c1be:	4770      	bx	lr
  MPU->RNR = rnr;
    c1c0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    c1c4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    c1c8:	3301      	adds	r3, #1
    c1ca:	e7f6      	b.n	c1ba <z_arm_clear_arm_mpu_config+0xe>
    c1cc:	e000ed00 	.word	0xe000ed00

0000c1d0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    c1d0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    c1d2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    c1d4:	2300      	movs	r3, #0
    c1d6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    c1da:	f7ff ffe7 	bl	c1ac <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    c1de:	4b14      	ldr	r3, [pc, #80]	; (c230 <z_arm_init_arch_hw_at_boot+0x60>)
    c1e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c1e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    c1e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    c1ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    c1f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    c1f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    c1f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    c1fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    c200:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    c204:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    c208:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    c20c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    c210:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    c214:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    c218:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    c21c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    c220:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    c224:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    c226:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c22a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    c22e:	bd08      	pop	{r3, pc}
    c230:	e000e100 	.word	0xe000e100

0000c234 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    c234:	4b08      	ldr	r3, [pc, #32]	; (c258 <z_impl_k_thread_abort+0x24>)
    c236:	689b      	ldr	r3, [r3, #8]
    c238:	4283      	cmp	r3, r0
    c23a:	d10b      	bne.n	c254 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c23c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    c240:	b143      	cbz	r3, c254 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    c242:	4b06      	ldr	r3, [pc, #24]	; (c25c <z_impl_k_thread_abort+0x28>)
    c244:	685a      	ldr	r2, [r3, #4]
    c246:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    c24a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    c24c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    c24e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    c252:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    c254:	f004 bc00 	b.w	10a58 <z_thread_abort>
    c258:	2000168c 	.word	0x2000168c
    c25c:	e000ed00 	.word	0xe000ed00

0000c260 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    c260:	4b02      	ldr	r3, [pc, #8]	; (c26c <z_arm_configure_static_mpu_regions+0xc>)
    c262:	4a03      	ldr	r2, [pc, #12]	; (c270 <z_arm_configure_static_mpu_regions+0x10>)
    c264:	4803      	ldr	r0, [pc, #12]	; (c274 <z_arm_configure_static_mpu_regions+0x14>)
    c266:	2101      	movs	r1, #1
    c268:	f000 b870 	b.w	c34c <arm_core_mpu_configure_static_mpu_regions>
    c26c:	20006000 	.word	0x20006000
    c270:	20000000 	.word	0x20000000
    c274:	00012e8c 	.word	0x00012e8c

0000c278 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    c278:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    c27a:	4b05      	ldr	r3, [pc, #20]	; (c290 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    c27c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    c27e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    c280:	4a04      	ldr	r2, [pc, #16]	; (c294 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    c282:	2140      	movs	r1, #64	; 0x40
    c284:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    c288:	4618      	mov	r0, r3
    c28a:	2101      	movs	r1, #1
    c28c:	f000 b868 	b.w	c360 <arm_core_mpu_configure_dynamic_mpu_regions>
    c290:	20001540 	.word	0x20001540
    c294:	150b0000 	.word	0x150b0000

0000c298 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    c298:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    c29a:	4e20      	ldr	r6, [pc, #128]	; (c31c <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    c29c:	2500      	movs	r5, #0
    c29e:	428d      	cmp	r5, r1
    c2a0:	da39      	bge.n	c316 <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    c2a2:	6844      	ldr	r4, [r0, #4]
    c2a4:	b374      	cbz	r4, c304 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    c2a6:	b153      	cbz	r3, c2be <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    c2a8:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    c2ac:	ea14 0f0c 	tst.w	r4, ip
    c2b0:	d12f      	bne.n	c312 <mpu_configure_regions+0x7a>
		&&
    c2b2:	2c1f      	cmp	r4, #31
    c2b4:	d92d      	bls.n	c312 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    c2b6:	6807      	ldr	r7, [r0, #0]
		&&
    c2b8:	ea1c 0f07 	tst.w	ip, r7
    c2bc:	d129      	bne.n	c312 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    c2be:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    c2c0:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    c2c2:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    c2c6:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    c2ca:	d91e      	bls.n	c30a <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    c2cc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    c2d0:	d81d      	bhi.n	c30e <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    c2d2:	3c01      	subs	r4, #1
    c2d4:	fab4 f484 	clz	r4, r4
    c2d8:	f1c4 041f 	rsb	r4, r4, #31
    c2dc:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    c2de:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    c2e2:	ea4c 0c04 	orr.w	ip, ip, r4
    c2e6:	d814      	bhi.n	c312 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c2e8:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    c2ec:	4314      	orrs	r4, r2
    c2ee:	f044 0410 	orr.w	r4, r4, #16
    c2f2:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c2f6:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    c2fa:	f04c 0401 	orr.w	r4, ip, #1
    c2fe:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    c302:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    c304:	3501      	adds	r5, #1
    c306:	300c      	adds	r0, #12
    c308:	e7c9      	b.n	c29e <mpu_configure_regions+0x6>
		return REGION_32B;
    c30a:	2408      	movs	r4, #8
    c30c:	e7e7      	b.n	c2de <mpu_configure_regions+0x46>
		return REGION_4G;
    c30e:	243e      	movs	r4, #62	; 0x3e
    c310:	e7e5      	b.n	c2de <mpu_configure_regions+0x46>
			return -EINVAL;
    c312:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    c316:	4610      	mov	r0, r2
    c318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c31a:	bf00      	nop
    c31c:	e000ed00 	.word	0xe000ed00

0000c320 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    c320:	4b04      	ldr	r3, [pc, #16]	; (c334 <arm_core_mpu_enable+0x14>)
    c322:	2205      	movs	r2, #5
    c324:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    c328:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c32c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    c330:	4770      	bx	lr
    c332:	bf00      	nop
    c334:	e000ed00 	.word	0xe000ed00

0000c338 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    c338:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    c33c:	4b02      	ldr	r3, [pc, #8]	; (c348 <arm_core_mpu_disable+0x10>)
    c33e:	2200      	movs	r2, #0
    c340:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c344:	4770      	bx	lr
    c346:	bf00      	nop
    c348:	e000ed00 	.word	0xe000ed00

0000c34c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    c34c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    c34e:	4c03      	ldr	r4, [pc, #12]	; (c35c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    c350:	2301      	movs	r3, #1
    c352:	7822      	ldrb	r2, [r4, #0]
    c354:	f7ff ffa0 	bl	c298 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    c358:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    c35a:	bd10      	pop	{r4, pc}
    c35c:	200018cc 	.word	0x200018cc

0000c360 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    c360:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    c362:	4a09      	ldr	r2, [pc, #36]	; (c388 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    c364:	2300      	movs	r3, #0
    c366:	7812      	ldrb	r2, [r2, #0]
    c368:	f7ff ff96 	bl	c298 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    c36c:	f110 0f16 	cmn.w	r0, #22
    c370:	d002      	beq.n	c378 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    c372:	4a06      	ldr	r2, [pc, #24]	; (c38c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    c374:	2807      	cmp	r0, #7
    c376:	dd00      	ble.n	c37a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    c378:	bd08      	pop	{r3, pc}
    c37a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    c37e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    c382:	3001      	adds	r0, #1
    c384:	e7f6      	b.n	c374 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    c386:	bf00      	nop
    c388:	200018cc 	.word	0x200018cc
    c38c:	e000ed00 	.word	0xe000ed00

0000c390 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    c390:	4914      	ldr	r1, [pc, #80]	; (c3e4 <z_arm_mpu_init+0x54>)
    c392:	6808      	ldr	r0, [r1, #0]
    c394:	2808      	cmp	r0, #8
{
    c396:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    c398:	d821      	bhi.n	c3de <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    c39a:	f7ff ffcd 	bl	c338 <arm_core_mpu_disable>
    c39e:	4c12      	ldr	r4, [pc, #72]	; (c3e8 <z_arm_mpu_init+0x58>)
    c3a0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c3a2:	2200      	movs	r2, #0
    c3a4:	4290      	cmp	r0, r2
    c3a6:	f101 010c 	add.w	r1, r1, #12
    c3aa:	d105      	bne.n	c3b8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    c3ac:	4b0f      	ldr	r3, [pc, #60]	; (c3ec <z_arm_mpu_init+0x5c>)
    c3ae:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    c3b0:	f7ff ffb6 	bl	c320 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    c3b4:	2000      	movs	r0, #0
}
    c3b6:	bd10      	pop	{r4, pc}
    c3b8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c3bc:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    c3c0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    c3c4:	4313      	orrs	r3, r2
    c3c6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c3ca:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    c3ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
    c3d2:	f043 0301 	orr.w	r3, r3, #1
    c3d6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c3da:	3201      	adds	r2, #1
    c3dc:	e7e2      	b.n	c3a4 <z_arm_mpu_init+0x14>
		return -1;
    c3de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c3e2:	e7e8      	b.n	c3b6 <z_arm_mpu_init+0x26>
    c3e4:	00012e98 	.word	0x00012e98
    c3e8:	e000ed00 	.word	0xe000ed00
    c3ec:	200018cc 	.word	0x200018cc

0000c3f0 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    c3f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c3f4:	b2c0      	uxtb	r0, r0
    c3f6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    c3fa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c3fe:	4905      	ldr	r1, [pc, #20]	; (c414 <sys_arch_reboot+0x24>)
    c400:	4b05      	ldr	r3, [pc, #20]	; (c418 <sys_arch_reboot+0x28>)
    c402:	68ca      	ldr	r2, [r1, #12]
    c404:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    c408:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c40a:	60cb      	str	r3, [r1, #12]
    c40c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    c410:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    c412:	e7fd      	b.n	c410 <sys_arch_reboot+0x20>
    c414:	e000ed00 	.word	0xe000ed00
    c418:	05fa0004 	.word	0x05fa0004

0000c41c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    c41c:	b120      	cbz	r0, c428 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    c41e:	4b03      	ldr	r3, [pc, #12]	; (c42c <arch_busy_wait+0x10>)
    c420:	0180      	lsls	r0, r0, #6
    c422:	f043 0301 	orr.w	r3, r3, #1
    c426:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    c428:	4770      	bx	lr
    c42a:	bf00      	nop
    c42c:	00012df0 	.word	0x00012df0

0000c430 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    c430:	b538      	push	{r3, r4, r5, lr}
    c432:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    c434:	4805      	ldr	r0, [pc, #20]	; (c44c <bt_buf_get_rx+0x1c>)
    c436:	f005 fb5e 	bl	11af6 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    c43a:	4604      	mov	r4, r0
    c43c:	b120      	cbz	r0, c448 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    c43e:	2100      	movs	r1, #0
    c440:	3008      	adds	r0, #8
    c442:	f005 fb5d 	bl	11b00 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    c446:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    c448:	4620      	mov	r0, r4
    c44a:	bd38      	pop	{r3, r4, r5, pc}
    c44c:	20000500 	.word	0x20000500

0000c450 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    c450:	b510      	push	{r4, lr}
    c452:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    c454:	490a      	ldr	r1, [pc, #40]	; (c480 <bt_buf_get_cmd_complete+0x30>)
{
    c456:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    c458:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    c45c:	b920      	cbnz	r0, c468 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    c45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c462:	2001      	movs	r0, #1
    c464:	f7ff bfe4 	b.w	c430 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    c468:	f005 fba5 	bl	11bb6 <net_buf_ref>
    c46c:	2301      	movs	r3, #1
		buf->len = 0U;
    c46e:	2100      	movs	r1, #0
    c470:	7503      	strb	r3, [r0, #20]
    c472:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    c474:	4604      	mov	r4, r0
    c476:	3008      	adds	r0, #8
    c478:	f005 fb42 	bl	11b00 <net_buf_simple_reserve>
}
    c47c:	4620      	mov	r0, r4
    c47e:	bd10      	pop	{r4, pc}
    c480:	200001a0 	.word	0x200001a0

0000c484 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    c484:	b570      	push	{r4, r5, r6, lr}
    c486:	4605      	mov	r5, r0
	switch (evt) {
    c488:	3d0e      	subs	r5, #14
    c48a:	2d01      	cmp	r5, #1
{
    c48c:	460c      	mov	r4, r1
    c48e:	4610      	mov	r0, r2
    c490:	4619      	mov	r1, r3
	switch (evt) {
    c492:	d803      	bhi.n	c49c <bt_buf_get_evt+0x18>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    c494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    c498:	f7ff bfda 	b.w	c450 <bt_buf_get_cmd_complete>
		if (discardable) {
    c49c:	b164      	cbz	r4, c4b8 <bt_buf_get_evt+0x34>
	return net_buf_alloc_fixed(pool, timeout);
    c49e:	4809      	ldr	r0, [pc, #36]	; (c4c4 <bt_buf_get_evt+0x40>)
    c4a0:	f005 fb29 	bl	11af6 <net_buf_alloc_fixed>
			if (buf) {
    c4a4:	4604      	mov	r4, r0
    c4a6:	b128      	cbz	r0, c4b4 <bt_buf_get_evt+0x30>
	net_buf_simple_reserve(&buf->b, reserve);
    c4a8:	2100      	movs	r1, #0
    c4aa:	3008      	adds	r0, #8
    c4ac:	f005 fb28 	bl	11b00 <net_buf_simple_reserve>
    c4b0:	2301      	movs	r3, #1
    c4b2:	7523      	strb	r3, [r4, #20]
}
    c4b4:	4620      	mov	r0, r4
    c4b6:	bd70      	pop	{r4, r5, r6, pc}
    c4b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c4bc:	2001      	movs	r0, #1
    c4be:	f7ff bfb7 	b.w	c430 <bt_buf_get_rx>
    c4c2:	bf00      	nop
    c4c4:	200004a0 	.word	0x200004a0

0000c4c8 <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
    c4c8:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    c4ca:	2101      	movs	r1, #1
    c4cc:	4604      	mov	r4, r0
    c4ce:	3008      	adds	r0, #8
    c4d0:	f005 fb8c 	bl	11bec <net_buf_simple_pull_mem>
	err = handle_event_common(event, buf, handlers, num_handlers);
    c4d4:	4621      	mov	r1, r4
    c4d6:	4a03      	ldr	r2, [pc, #12]	; (c4e4 <hci_le_meta_event+0x1c>)
    c4d8:	7800      	ldrb	r0, [r0, #0]
	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
}
    c4da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
    c4de:	2300      	movs	r3, #0
    c4e0:	f005 b968 	b.w	117b4 <handle_event_common.isra.0>
    c4e4:	00012f00 	.word	0x00012f00

0000c4e8 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    c4e8:	b538      	push	{r3, r4, r5, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    c4ea:	4822      	ldr	r0, [pc, #136]	; (c574 <rx_work_handler+0x8c>)
    c4ec:	f005 fb2a 	bl	11b44 <net_buf_slist_get>
	if (!buf) {
    c4f0:	4604      	mov	r4, r0
    c4f2:	2800      	cmp	r0, #0
    c4f4:	d03c      	beq.n	c570 <rx_work_handler+0x88>
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
    c4f6:	7d03      	ldrb	r3, [r0, #20]
    c4f8:	2b01      	cmp	r3, #1
    c4fa:	d12d      	bne.n	c558 <rx_work_handler+0x70>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    c4fc:	8983      	ldrh	r3, [r0, #12]
    c4fe:	2b01      	cmp	r3, #1
    c500:	d80c      	bhi.n	c51c <rx_work_handler+0x34>
    c502:	4a1d      	ldr	r2, [pc, #116]	; (c578 <rx_work_handler+0x90>)
    c504:	491d      	ldr	r1, [pc, #116]	; (c57c <rx_work_handler+0x94>)
    c506:	481e      	ldr	r0, [pc, #120]	; (c580 <rx_work_handler+0x98>)
    c508:	f44f 6316 	mov.w	r3, #2400	; 0x960
    c50c:	f005 f8f7 	bl	116fe <assert_print>
    c510:	4040      	eors	r0, r0
    c512:	f380 8811 	msr	BASEPRI, r0
    c516:	f04f 0003 	mov.w	r0, #3
    c51a:	df02      	svc	2
    c51c:	2102      	movs	r1, #2
    c51e:	f104 0008 	add.w	r0, r4, #8
    c522:	f005 fb63 	bl	11bec <net_buf_simple_pull_mem>
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    c526:	7803      	ldrb	r3, [r0, #0]
    c528:	3b0e      	subs	r3, #14
    c52a:	2b01      	cmp	r3, #1
    c52c:	4605      	mov	r5, r0
    c52e:	d80c      	bhi.n	c54a <rx_work_handler+0x62>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    c530:	4a11      	ldr	r2, [pc, #68]	; (c578 <rx_work_handler+0x90>)
    c532:	4914      	ldr	r1, [pc, #80]	; (c584 <rx_work_handler+0x9c>)
    c534:	4812      	ldr	r0, [pc, #72]	; (c580 <rx_work_handler+0x98>)
    c536:	f640 1364 	movw	r3, #2404	; 0x964
    c53a:	f005 f8e0 	bl	116fe <assert_print>
    c53e:	4040      	eors	r0, r0
    c540:	f380 8811 	msr	BASEPRI, r0
    c544:	f04f 0003 	mov.w	r0, #3
    c548:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
    c54a:	7828      	ldrb	r0, [r5, #0]
    c54c:	4a0e      	ldr	r2, [pc, #56]	; (c588 <rx_work_handler+0xa0>)
    c54e:	2303      	movs	r3, #3
    c550:	4621      	mov	r1, r4
    c552:	f005 f92f 	bl	117b4 <handle_event_common.isra.0>
	net_buf_unref(buf);
    c556:	4620      	mov	r0, r4
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
    c558:	f000 ffae 	bl	d4b8 <net_buf_unref>
	return list->head;
    c55c:	4b0b      	ldr	r3, [pc, #44]	; (c58c <rx_work_handler+0xa4>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    c55e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
    c562:	b12b      	cbz	r3, c570 <rx_work_handler+0x88>
#endif
		if (err < 0) {
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
    c564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    c568:	4909      	ldr	r1, [pc, #36]	; (c590 <rx_work_handler+0xa8>)
    c56a:	480a      	ldr	r0, [pc, #40]	; (c594 <rx_work_handler+0xac>)
    c56c:	f006 b8a7 	b.w	126be <k_work_submit_to_queue>
}
    c570:	bd38      	pop	{r3, r4, r5, pc}
    c572:	bf00      	nop
    c574:	2000029c 	.word	0x2000029c
    c578:	00013062 	.word	0x00013062
    c57c:	00013096 	.word	0x00013096
    c580:	000130af 	.word	0x000130af
    c584:	000130cc 	.word	0x000130cc
    c588:	00012ee8 	.word	0x00012ee8
    c58c:	200001a0 	.word	0x200001a0
    c590:	20000388 	.word	0x20000388
    c594:	20001210 	.word	0x20001210

0000c598 <hci_cmd_done>:
{
    c598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c59a:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    c59c:	7990      	ldrb	r0, [r2, #6]
{
    c59e:	460e      	mov	r6, r1
    c5a0:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    c5a2:	f000 fec1 	bl	d328 <net_buf_pool_get>
    c5a6:	4b30      	ldr	r3, [pc, #192]	; (c668 <hci_cmd_done+0xd0>)
    c5a8:	4283      	cmp	r3, r0
    c5aa:	d15b      	bne.n	c664 <hci_cmd_done+0xcc>
	if (cmd(buf)->opcode != opcode) {
    c5ac:	4620      	mov	r0, r4
    c5ae:	f000 fec3 	bl	d338 <net_buf_id>
    c5b2:	4d2e      	ldr	r5, [pc, #184]	; (c66c <hci_cmd_done+0xd4>)
    c5b4:	230c      	movs	r3, #12
    c5b6:	fb03 5000 	mla	r0, r3, r0, r5
    c5ba:	8843      	ldrh	r3, [r0, #2]
    c5bc:	42bb      	cmp	r3, r7
    c5be:	d151      	bne.n	c664 <hci_cmd_done+0xcc>
	if (bt_dev.sent_cmd) {
    c5c0:	4f2b      	ldr	r7, [pc, #172]	; (c670 <hci_cmd_done+0xd8>)
    c5c2:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
    c5c6:	b120      	cbz	r0, c5d2 <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
    c5c8:	f000 ff76 	bl	d4b8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    c5cc:	2300      	movs	r3, #0
    c5ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	if (cmd(buf)->state && !status) {
    c5d2:	4620      	mov	r0, r4
    c5d4:	f000 feb0 	bl	d338 <net_buf_id>
    c5d8:	270c      	movs	r7, #12
    c5da:	fb07 5000 	mla	r0, r7, r0, r5
    c5de:	6843      	ldr	r3, [r0, #4]
    c5e0:	b1e3      	cbz	r3, c61c <hci_cmd_done+0x84>
    c5e2:	b9de      	cbnz	r6, c61c <hci_cmd_done+0x84>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    c5e4:	4620      	mov	r0, r4
    c5e6:	f000 fea7 	bl	d338 <net_buf_id>
    c5ea:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    c5ee:	2201      	movs	r2, #1
    c5f0:	6840      	ldr	r0, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    c5f2:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
    c5f6:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    c5f8:	f001 071f 	and.w	r7, r1, #31
    c5fc:	40ba      	lsls	r2, r7
	if (val) {
    c5fe:	0949      	lsrs	r1, r1, #5
    c600:	b318      	cbz	r0, c64a <hci_cmd_done+0xb2>
    c602:	f3bf 8f5b 	dmb	ish
    c606:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c60a:	e853 0f00 	ldrex	r0, [r3]
    c60e:	4310      	orrs	r0, r2
    c610:	e843 0100 	strex	r1, r0, [r3]
    c614:	2900      	cmp	r1, #0
    c616:	d1f8      	bne.n	c60a <hci_cmd_done+0x72>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c618:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
    c61c:	4620      	mov	r0, r4
    c61e:	f000 fe8b 	bl	d338 <net_buf_id>
    c622:	270c      	movs	r7, #12
    c624:	fb07 5000 	mla	r0, r7, r0, r5
    c628:	6883      	ldr	r3, [r0, #8]
    c62a:	b1db      	cbz	r3, c664 <hci_cmd_done+0xcc>
		cmd(buf)->status = status;
    c62c:	4620      	mov	r0, r4
    c62e:	f000 fe83 	bl	d338 <net_buf_id>
    c632:	4378      	muls	r0, r7
    c634:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    c636:	4620      	mov	r0, r4
    c638:	f000 fe7e 	bl	d338 <net_buf_id>
    c63c:	fb07 5500 	mla	r5, r7, r0, r5
    c640:	68a8      	ldr	r0, [r5, #8]
}
    c642:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    c646:	f003 bd6f 	b.w	10128 <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c64a:	43d2      	mvns	r2, r2
    c64c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c650:	f3bf 8f5b 	dmb	ish
    c654:	e853 0f00 	ldrex	r0, [r3]
    c658:	4010      	ands	r0, r2
    c65a:	e843 0100 	strex	r1, r0, [r3]
    c65e:	2900      	cmp	r1, #0
    c660:	d0da      	beq.n	c618 <hci_cmd_done+0x80>
    c662:	e7f7      	b.n	c654 <hci_cmd_done+0xbc>
    c664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c666:	bf00      	nop
    c668:	200004d0 	.word	0x200004d0
    c66c:	2000154c 	.word	0x2000154c
    c670:	200001a0 	.word	0x200001a0

0000c674 <hci_cmd_status>:
{
    c674:	b538      	push	{r3, r4, r5, lr}
    c676:	2104      	movs	r1, #4
    c678:	4604      	mov	r4, r0
    c67a:	3008      	adds	r0, #8
    c67c:	f005 fab6 	bl	11bec <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    c680:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    c682:	7801      	ldrb	r1, [r0, #0]
    c684:	8840      	ldrh	r0, [r0, #2]
    c686:	4622      	mov	r2, r4
    c688:	f7ff ff86 	bl	c598 <hci_cmd_done>
	if (ncmd) {
    c68c:	b125      	cbz	r5, c698 <hci_cmd_status+0x24>
    c68e:	4803      	ldr	r0, [pc, #12]	; (c69c <hci_cmd_status+0x28>)
}
    c690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c694:	f003 bd48 	b.w	10128 <z_impl_k_sem_give>
    c698:	bd38      	pop	{r3, r4, r5, pc}
    c69a:	bf00      	nop
    c69c:	20000280 	.word	0x20000280

0000c6a0 <hci_cmd_complete>:
{
    c6a0:	b538      	push	{r3, r4, r5, lr}
    c6a2:	2103      	movs	r1, #3
    c6a4:	4604      	mov	r4, r0
    c6a6:	3008      	adds	r0, #8
    c6a8:	f005 faa0 	bl	11bec <net_buf_simple_pull_mem>
	status = buf->data[0];
    c6ac:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    c6ae:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    c6b0:	7819      	ldrb	r1, [r3, #0]
    c6b2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    c6b6:	4622      	mov	r2, r4
    c6b8:	f7ff ff6e 	bl	c598 <hci_cmd_done>
	if (ncmd) {
    c6bc:	b125      	cbz	r5, c6c8 <hci_cmd_complete+0x28>
    c6be:	4803      	ldr	r0, [pc, #12]	; (c6cc <hci_cmd_complete+0x2c>)
}
    c6c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c6c4:	f003 bd30 	b.w	10128 <z_impl_k_sem_give>
    c6c8:	bd38      	pop	{r3, r4, r5, pc}
    c6ca:	bf00      	nop
    c6cc:	20000280 	.word	0x20000280

0000c6d0 <bt_hci_cmd_state_set_init>:
{
    c6d0:	b510      	push	{r4, lr}
	state->bit = bit;
    c6d2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    c6d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c6da:	720b      	strb	r3, [r1, #8]
{
    c6dc:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    c6de:	f000 fe2b 	bl	d338 <net_buf_id>
    c6e2:	4b03      	ldr	r3, [pc, #12]	; (c6f0 <bt_hci_cmd_state_set_init+0x20>)
    c6e4:	220c      	movs	r2, #12
    c6e6:	fb02 3300 	mla	r3, r2, r0, r3
    c6ea:	605c      	str	r4, [r3, #4]
}
    c6ec:	bd10      	pop	{r4, pc}
    c6ee:	bf00      	nop
    c6f0:	2000154c 	.word	0x2000154c

0000c6f4 <bt_hci_cmd_create>:
{
    c6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    c6f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c6fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c700:	4606      	mov	r6, r0
    c702:	4817      	ldr	r0, [pc, #92]	; (c760 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    c704:	4d17      	ldr	r5, [pc, #92]	; (c764 <bt_hci_cmd_create+0x70>)
{
    c706:	460f      	mov	r7, r1
    c708:	f005 f9f5 	bl	11af6 <net_buf_alloc_fixed>
    c70c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    c70e:	f100 0a08 	add.w	sl, r0, #8
    c712:	2100      	movs	r1, #0
    c714:	f04f 0800 	mov.w	r8, #0
    c718:	4650      	mov	r0, sl
    c71a:	f005 f9f1 	bl	11b00 <net_buf_simple_reserve>
    c71e:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    c722:	4620      	mov	r0, r4
    c724:	f000 fe08 	bl	d338 <net_buf_id>
    c728:	f04f 090c 	mov.w	r9, #12
    c72c:	fb09 5000 	mla	r0, r9, r0, r5
    c730:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    c732:	4620      	mov	r0, r4
    c734:	f000 fe00 	bl	d338 <net_buf_id>
    c738:	fb09 5000 	mla	r0, r9, r0, r5
    c73c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    c740:	4620      	mov	r0, r4
    c742:	f000 fdf9 	bl	d338 <net_buf_id>
    c746:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    c74a:	2103      	movs	r1, #3
    c74c:	f8c5 8004 	str.w	r8, [r5, #4]
    c750:	4650      	mov	r0, sl
    c752:	f005 fa34 	bl	11bbe <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    c756:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    c758:	7087      	strb	r7, [r0, #2]
}
    c75a:	4620      	mov	r0, r4
    c75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c760:	200004d0 	.word	0x200004d0
    c764:	2000154c 	.word	0x2000154c

0000c768 <bt_hci_cmd_send_sync>:
{
    c768:	b5f0      	push	{r4, r5, r6, r7, lr}
    c76a:	4615      	mov	r5, r2
    c76c:	b087      	sub	sp, #28
	if (!buf) {
    c76e:	460c      	mov	r4, r1
    c770:	b921      	cbnz	r1, c77c <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    c772:	f7ff ffbf 	bl	c6f4 <bt_hci_cmd_create>
		if (!buf) {
    c776:	4604      	mov	r4, r0
    c778:	2800      	cmp	r0, #0
    c77a:	d047      	beq.n	c80c <bt_hci_cmd_send_sync+0xa4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    c77c:	2201      	movs	r2, #1
    c77e:	2100      	movs	r1, #0
    c780:	4668      	mov	r0, sp
    c782:	f005 fefd 	bl	12580 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    c786:	4620      	mov	r0, r4
    c788:	f000 fdd6 	bl	d338 <net_buf_id>
    c78c:	4f21      	ldr	r7, [pc, #132]	; (c814 <bt_hci_cmd_send_sync+0xac>)
    c78e:	230c      	movs	r3, #12
    c790:	fb03 7000 	mla	r0, r3, r0, r7
    c794:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    c798:	4620      	mov	r0, r4
    c79a:	f005 fa0c 	bl	11bb6 <net_buf_ref>
    c79e:	4601      	mov	r1, r0
    c7a0:	481d      	ldr	r0, [pc, #116]	; (c818 <bt_hci_cmd_send_sync+0xb0>)
    c7a2:	f005 f9fb 	bl	11b9c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    c7a6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    c7aa:	2300      	movs	r3, #0
    c7ac:	4668      	mov	r0, sp
    c7ae:	f003 fce1 	bl	10174 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    c7b2:	4606      	mov	r6, r0
    c7b4:	b180      	cbz	r0, c7d8 <bt_hci_cmd_send_sync+0x70>
    c7b6:	4a19      	ldr	r2, [pc, #100]	; (c81c <bt_hci_cmd_send_sync+0xb4>)
    c7b8:	4919      	ldr	r1, [pc, #100]	; (c820 <bt_hci_cmd_send_sync+0xb8>)
    c7ba:	481a      	ldr	r0, [pc, #104]	; (c824 <bt_hci_cmd_send_sync+0xbc>)
    c7bc:	f240 1349 	movw	r3, #329	; 0x149
    c7c0:	f004 ff9d 	bl	116fe <assert_print>
    c7c4:	4818      	ldr	r0, [pc, #96]	; (c828 <bt_hci_cmd_send_sync+0xc0>)
    c7c6:	4631      	mov	r1, r6
    c7c8:	f004 ff99 	bl	116fe <assert_print>
    c7cc:	4040      	eors	r0, r0
    c7ce:	f380 8811 	msr	BASEPRI, r0
    c7d2:	f04f 0003 	mov.w	r0, #3
    c7d6:	df02      	svc	2
	status = cmd(buf)->status;
    c7d8:	4620      	mov	r0, r4
    c7da:	f000 fdad 	bl	d338 <net_buf_id>
    c7de:	230c      	movs	r3, #12
    c7e0:	4358      	muls	r0, r3
    c7e2:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
    c7e4:	b156      	cbz	r6, c7fc <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
    c7e6:	4620      	mov	r0, r4
    c7e8:	f000 fe66 	bl	d4b8 <net_buf_unref>
			return -ECONNREFUSED;
    c7ec:	2e09      	cmp	r6, #9
    c7ee:	bf14      	ite	ne
    c7f0:	f06f 0004 	mvnne.w	r0, #4
    c7f4:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    c7f8:	b007      	add	sp, #28
    c7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    c7fc:	b115      	cbz	r5, c804 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
    c7fe:	602c      	str	r4, [r5, #0]
	return 0;
    c800:	2000      	movs	r0, #0
    c802:	e7f9      	b.n	c7f8 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
    c804:	4620      	mov	r0, r4
    c806:	f000 fe57 	bl	d4b8 <net_buf_unref>
    c80a:	e7f9      	b.n	c800 <bt_hci_cmd_send_sync+0x98>
			return -ENOBUFS;
    c80c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    c810:	e7f2      	b.n	c7f8 <bt_hci_cmd_send_sync+0x90>
    c812:	bf00      	nop
    c814:	2000154c 	.word	0x2000154c
    c818:	200002a4 	.word	0x200002a4
    c81c:	00013062 	.word	0x00013062
    c820:	000130fa 	.word	0x000130fa
    c824:	000130af 	.word	0x000130af
    c828:	00013103 	.word	0x00013103

0000c82c <hci_init>:
{
    c82c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    c82e:	4d9a      	ldr	r5, [pc, #616]	; (ca98 <hci_init+0x26c>)
    c830:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    c834:	6899      	ldr	r1, [r3, #8]
    c836:	f011 0101 	ands.w	r1, r1, #1
    c83a:	d121      	bne.n	c880 <hci_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    c83c:	aa01      	add	r2, sp, #4
    c83e:	f640 4003 	movw	r0, #3075	; 0xc03
    c842:	f7ff ff91 	bl	c768 <bt_hci_cmd_send_sync>
		if (err) {
    c846:	4604      	mov	r4, r0
    c848:	2800      	cmp	r0, #0
    c84a:	d167      	bne.n	c91c <hci_init+0xf0>
		hci_reset_complete(rsp);
    c84c:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
    c84e:	6883      	ldr	r3, [r0, #8]
	if (status) {
    c850:	781b      	ldrb	r3, [r3, #0]
    c852:	b99b      	cbnz	r3, c87c <hci_init+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c854:	f3bf 8f5b 	dmb	ish
    c858:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    c85c:	f3bf 8f5b 	dmb	ish
    c860:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c864:	f003 0309 	and.w	r3, r3, #9
    c868:	f3bf 8f5b 	dmb	ish
    c86c:	e852 1f00 	ldrex	r1, [r2]
    c870:	e842 3400 	strex	r4, r3, [r2]
    c874:	2c00      	cmp	r4, #0
    c876:	d1f9      	bne.n	c86c <hci_init+0x40>
    c878:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    c87c:	f000 fe1c 	bl	d4b8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    c880:	aa01      	add	r2, sp, #4
    c882:	2100      	movs	r1, #0
    c884:	f241 0003 	movw	r0, #4099	; 0x1003
    c888:	f7ff ff6e 	bl	c768 <bt_hci_cmd_send_sync>
	if (err) {
    c88c:	4604      	mov	r4, r0
    c88e:	2800      	cmp	r0, #0
    c890:	d144      	bne.n	c91c <hci_init+0xf0>
	read_local_features_complete(rsp);
    c892:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    c894:	4e81      	ldr	r6, [pc, #516]	; (ca9c <hci_init+0x270>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    c896:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    c898:	f8d2 0001 	ldr.w	r0, [r2, #1]
    c89c:	f8d2 1005 	ldr.w	r1, [r2, #5]
    c8a0:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    c8a2:	4618      	mov	r0, r3
    c8a4:	f000 fe08 	bl	d4b8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    c8a8:	4621      	mov	r1, r4
    c8aa:	aa01      	add	r2, sp, #4
    c8ac:	f241 0001 	movw	r0, #4097	; 0x1001
    c8b0:	f7ff ff5a 	bl	c768 <bt_hci_cmd_send_sync>
	if (err) {
    c8b4:	4604      	mov	r4, r0
    c8b6:	bb88      	cbnz	r0, c91c <hci_init+0xf0>
	read_local_ver_complete(rsp);
    c8b8:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    c8ba:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    c8bc:	785a      	ldrb	r2, [r3, #1]
    c8be:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    c8c2:	885a      	ldrh	r2, [r3, #2]
    c8c4:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    c8c8:	791a      	ldrb	r2, [r3, #4]
    c8ca:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    c8ce:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    c8d2:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    c8d6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    c8da:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    c8de:	f000 fdeb 	bl	d4b8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    c8e2:	4621      	mov	r1, r4
    c8e4:	aa01      	add	r2, sp, #4
    c8e6:	f241 0002 	movw	r0, #4098	; 0x1002
    c8ea:	f7ff ff3d 	bl	c768 <bt_hci_cmd_send_sync>
	if (err) {
    c8ee:	4604      	mov	r4, r0
    c8f0:	b9a0      	cbnz	r0, c91c <hci_init+0xf0>
	read_supported_commands_complete(rsp);
    c8f2:	9f01      	ldr	r7, [sp, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    c8f4:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    c8f6:	1c53      	adds	r3, r2, #1
    c8f8:	3241      	adds	r2, #65	; 0x41
    c8fa:	6818      	ldr	r0, [r3, #0]
    c8fc:	6859      	ldr	r1, [r3, #4]
    c8fe:	4634      	mov	r4, r6
    c900:	c403      	stmia	r4!, {r0, r1}
    c902:	3308      	adds	r3, #8
    c904:	4293      	cmp	r3, r2
    c906:	4626      	mov	r6, r4
    c908:	d1f7      	bne.n	c8fa <hci_init+0xce>
	net_buf_unref(rsp);
    c90a:	4638      	mov	r0, r7
    c90c:	f000 fdd4 	bl	d4b8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    c910:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    c914:	0658      	lsls	r0, r3, #25
    c916:	d404      	bmi.n	c922 <hci_init+0xf6>
		return -ENODEV;
    c918:	f06f 0412 	mvn.w	r4, #18
}
    c91c:	4620      	mov	r0, r4
    c91e:	b003      	add	sp, #12
    c920:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    c922:	aa01      	add	r2, sp, #4
    c924:	2100      	movs	r1, #0
    c926:	f242 0003 	movw	r0, #8195	; 0x2003
    c92a:	f7ff ff1d 	bl	c768 <bt_hci_cmd_send_sync>
	if (err) {
    c92e:	4604      	mov	r4, r0
    c930:	2800      	cmp	r0, #0
    c932:	d1f3      	bne.n	c91c <hci_init+0xf0>
	read_le_features_complete(rsp);
    c934:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    c936:	4b5a      	ldr	r3, [pc, #360]	; (caa0 <hci_init+0x274>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    c938:	6891      	ldr	r1, [r2, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    c93a:	f8d1 0001 	ldr.w	r0, [r1, #1]
    c93e:	f8d1 1005 	ldr.w	r1, [r1, #5]
    c942:	c303      	stmia	r3!, {r0, r1}
	net_buf_unref(rsp);
    c944:	4610      	mov	r0, r2
    c946:	f000 fdb7 	bl	d4b8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    c94a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    c94e:	0699      	lsls	r1, r3, #26
    c950:	d418      	bmi.n	c984 <hci_init+0x158>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    c952:	2102      	movs	r1, #2
    c954:	f640 406d 	movw	r0, #3181	; 0xc6d
    c958:	f7ff fecc 	bl	c6f4 <bt_hci_cmd_create>
		if (!buf) {
    c95c:	4606      	mov	r6, r0
    c95e:	2800      	cmp	r0, #0
    c960:	f000 8097 	beq.w	ca92 <hci_init+0x266>
    c964:	2102      	movs	r1, #2
    c966:	3008      	adds	r0, #8
    c968:	f005 f929 	bl	11bbe <net_buf_simple_add>
		cp_le->le = 0x01;
    c96c:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    c96e:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    c970:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    c972:	4622      	mov	r2, r4
    c974:	4631      	mov	r1, r6
    c976:	f640 406d 	movw	r0, #3181	; 0xc6d
    c97a:	f7ff fef5 	bl	c768 <bt_hci_cmd_send_sync>
		if (err) {
    c97e:	4604      	mov	r4, r0
    c980:	2800      	cmp	r0, #0
    c982:	d1cb      	bne.n	c91c <hci_init+0xf0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    c984:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    c988:	071a      	lsls	r2, r3, #28
    c98a:	d512      	bpl.n	c9b2 <hci_init+0x186>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    c98c:	aa01      	add	r2, sp, #4
    c98e:	2100      	movs	r1, #0
    c990:	f242 001c 	movw	r0, #8220	; 0x201c
    c994:	f7ff fee8 	bl	c768 <bt_hci_cmd_send_sync>
		if (err) {
    c998:	4604      	mov	r4, r0
    c99a:	2800      	cmp	r0, #0
    c99c:	d1be      	bne.n	c91c <hci_init+0xf0>
		le_read_supp_states_complete(rsp);
    c99e:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c9a0:	6883      	ldr	r3, [r0, #8]
    c9a2:	f8d3 2001 	ldr.w	r2, [r3, #1]
    c9a6:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    c9aa:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    c9ae:	f000 fd83 	bl	d4b8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    c9b2:	2108      	movs	r1, #8
    c9b4:	f242 0001 	movw	r0, #8193	; 0x2001
    c9b8:	f7ff fe9c 	bl	c6f4 <bt_hci_cmd_create>
	if (!buf) {
    c9bc:	4604      	mov	r4, r0
    c9be:	2800      	cmp	r0, #0
    c9c0:	d067      	beq.n	ca92 <hci_init+0x266>
    c9c2:	2108      	movs	r1, #8
    c9c4:	4408      	add	r0, r1
    c9c6:	f005 f8fa 	bl	11bbe <net_buf_simple_add>
	dst[0] = val;
    c9ca:	2702      	movs	r7, #2
	dst[1] = val >> 8;
    c9cc:	2200      	movs	r2, #0
	dst[0] = val;
    c9ce:	7007      	strb	r7, [r0, #0]
	dst[1] = val >> 8;
    c9d0:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    c9d2:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    c9d4:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    c9d6:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    c9d8:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    c9da:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    c9dc:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    c9de:	4621      	mov	r1, r4
    c9e0:	f242 0001 	movw	r0, #8193	; 0x2001
    c9e4:	f7ff fec0 	bl	c768 <bt_hci_cmd_send_sync>
	if (err) {
    c9e8:	4604      	mov	r4, r0
    c9ea:	2800      	cmp	r0, #0
    c9ec:	d196      	bne.n	c91c <hci_init+0xf0>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    c9ee:	2108      	movs	r1, #8
    c9f0:	f640 4001 	movw	r0, #3073	; 0xc01
    c9f4:	f7ff fe7e 	bl	c6f4 <bt_hci_cmd_create>
	if (!buf) {
    c9f8:	4606      	mov	r6, r0
    c9fa:	2800      	cmp	r0, #0
    c9fc:	d049      	beq.n	ca92 <hci_init+0x266>
    c9fe:	2108      	movs	r1, #8
    ca00:	4408      	add	r0, r1
    ca02:	f005 f8dc 	bl	11bbe <net_buf_simple_add>
    ca06:	2380      	movs	r3, #128	; 0x80
    ca08:	7043      	strb	r3, [r0, #1]
    ca0a:	2320      	movs	r3, #32
	dst[0] = val;
    ca0c:	7004      	strb	r4, [r0, #0]
    ca0e:	7084      	strb	r4, [r0, #2]
    ca10:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    ca12:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    ca14:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    ca16:	70c7      	strb	r7, [r0, #3]
    ca18:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    ca1a:	4622      	mov	r2, r4
    ca1c:	4631      	mov	r1, r6
    ca1e:	f640 4001 	movw	r0, #3073	; 0xc01
    ca22:	f7ff fea1 	bl	c768 <bt_hci_cmd_send_sync>
	if (err) {
    ca26:	4604      	mov	r4, r0
    ca28:	2800      	cmp	r0, #0
    ca2a:	f47f af77 	bne.w	c91c <hci_init+0xf0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    ca2e:	4601      	mov	r1, r0
    ca30:	aa01      	add	r2, sp, #4
    ca32:	f64f 4001 	movw	r0, #64513	; 0xfc01
    ca36:	f7ff fe97 	bl	c768 <bt_hci_cmd_send_sync>
	if (err) {
    ca3a:	4604      	mov	r4, r0
    ca3c:	bb20      	cbnz	r0, ca88 <hci_init+0x25c>
	net_buf_unref(rsp);
    ca3e:	9801      	ldr	r0, [sp, #4]
    ca40:	f000 fd3a 	bl	d4b8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    ca44:	4621      	mov	r1, r4
    ca46:	aa01      	add	r2, sp, #4
    ca48:	f64f 4002 	movw	r0, #64514	; 0xfc02
    ca4c:	f7ff fe8c 	bl	c768 <bt_hci_cmd_send_sync>
	if (err) {
    ca50:	4604      	mov	r4, r0
    ca52:	b9c8      	cbnz	r0, ca88 <hci_init+0x25c>
	rp.cmds = (void *)rsp->data;
    ca54:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    ca56:	6883      	ldr	r3, [r0, #8]
    ca58:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    ca5c:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    ca60:	f000 fd2a 	bl	d4b8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    ca64:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    ca68:	075b      	lsls	r3, r3, #29
    ca6a:	d50d      	bpl.n	ca88 <hci_init+0x25c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    ca6c:	aa01      	add	r2, sp, #4
    ca6e:	4621      	mov	r1, r4
    ca70:	f64f 4003 	movw	r0, #64515	; 0xfc03
    ca74:	f7ff fe78 	bl	c768 <bt_hci_cmd_send_sync>
		if (err) {
    ca78:	b930      	cbnz	r0, ca88 <hci_init+0x25c>
		rp.feat = (void *)rsp->data;
    ca7a:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    ca7c:	6883      	ldr	r3, [r0, #8]
    ca7e:	785b      	ldrb	r3, [r3, #1]
    ca80:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    ca84:	f000 fd18 	bl	d4b8 <net_buf_unref>
}
    ca88:	b003      	add	sp, #12
    ca8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	err = bt_id_init();
    ca8e:	f000 baa7 	b.w	cfe0 <bt_id_init>
		return -ENOBUFS;
    ca92:	f06f 0468 	mvn.w	r4, #104	; 0x68
    ca96:	e741      	b.n	c91c <hci_init+0xf0>
    ca98:	200001a0 	.word	0x200001a0
    ca9c:	20000210 	.word	0x20000210
    caa0:	20000270 	.word	0x20000270

0000caa4 <bt_hci_le_rand>:
{
    caa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    caa6:	4b14      	ldr	r3, [pc, #80]	; (caf8 <bt_hci_le_rand+0x54>)
    caa8:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
    caac:	2b00      	cmp	r3, #0
{
    caae:	4605      	mov	r5, r0
    cab0:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    cab2:	da1d      	bge.n	caf0 <bt_hci_le_rand+0x4c>
	while (len > 0) {
    cab4:	b914      	cbnz	r4, cabc <bt_hci_le_rand+0x18>
	return 0;
    cab6:	4620      	mov	r0, r4
}
    cab8:	b003      	add	sp, #12
    caba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    cabc:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    cabe:	aa01      	add	r2, sp, #4
    cac0:	f04f 0100 	mov.w	r1, #0
    cac4:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
    cac8:	4626      	mov	r6, r4
    caca:	bf28      	it	cs
    cacc:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    cace:	f7ff fe4b 	bl	c768 <bt_hci_cmd_send_sync>
		if (err) {
    cad2:	2800      	cmp	r0, #0
    cad4:	d1f0      	bne.n	cab8 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    cad6:	9f01      	ldr	r7, [sp, #4]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    cad8:	68b9      	ldr	r1, [r7, #8]
    cada:	4632      	mov	r2, r6
    cadc:	3101      	adds	r1, #1
    cade:	4628      	mov	r0, r5
    cae0:	f006 f835 	bl	12b4e <memcpy>
		net_buf_unref(rsp);
    cae4:	4638      	mov	r0, r7
    cae6:	f000 fce7 	bl	d4b8 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    caea:	4435      	add	r5, r6
		len -= count;
    caec:	1ba4      	subs	r4, r4, r6
    caee:	e7e1      	b.n	cab4 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    caf0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    caf4:	e7e0      	b.n	cab8 <bt_hci_le_rand+0x14>
    caf6:	bf00      	nop
    caf8:	200001a0 	.word	0x200001a0

0000cafc <hci_event_prio>:
{
    cafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb00:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    cb02:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    cb06:	4630      	mov	r0, r6
    cb08:	f005 f878 	bl	11bfc <net_buf_simple_headroom>
	state->len = buf->len;
    cb0c:	89a7      	ldrh	r7, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    cb0e:	2f01      	cmp	r7, #1
	state->offset = net_buf_simple_headroom(buf);
    cb10:	4605      	mov	r5, r0
    cb12:	d80c      	bhi.n	cb2e <hci_event_prio+0x32>
    cb14:	4a20      	ldr	r2, [pc, #128]	; (cb98 <hci_event_prio+0x9c>)
    cb16:	4921      	ldr	r1, [pc, #132]	; (cb9c <hci_event_prio+0xa0>)
    cb18:	4821      	ldr	r0, [pc, #132]	; (cba0 <hci_event_prio+0xa4>)
    cb1a:	f640 5377 	movw	r3, #3447	; 0xd77
    cb1e:	f004 fdee 	bl	116fe <assert_print>
    cb22:	4040      	eors	r0, r0
    cb24:	f380 8811 	msr	BASEPRI, r0
    cb28:	f04f 0003 	mov.w	r0, #3
    cb2c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    cb2e:	4630      	mov	r0, r6
    cb30:	2102      	movs	r1, #2
    cb32:	f005 f85b 	bl	11bec <net_buf_simple_pull_mem>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    cb36:	7803      	ldrb	r3, [r0, #0]
    cb38:	2b05      	cmp	r3, #5
    cb3a:	4606      	mov	r6, r0
    cb3c:	d021      	beq.n	cb82 <hci_event_prio+0x86>
    cb3e:	3b0e      	subs	r3, #14
    cb40:	2b01      	cmp	r3, #1
    cb42:	d921      	bls.n	cb88 <hci_event_prio+0x8c>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    cb44:	4a14      	ldr	r2, [pc, #80]	; (cb98 <hci_event_prio+0x9c>)
    cb46:	4917      	ldr	r1, [pc, #92]	; (cba4 <hci_event_prio+0xa8>)
    cb48:	4815      	ldr	r0, [pc, #84]	; (cba0 <hci_event_prio+0xa4>)
    cb4a:	f640 537b 	movw	r3, #3451	; 0xd7b
    cb4e:	f004 fdd6 	bl	116fe <assert_print>
    cb52:	4040      	eors	r0, r0
    cb54:	f380 8811 	msr	BASEPRI, r0
    cb58:	f04f 0003 	mov.w	r0, #3
    cb5c:	df02      	svc	2
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
    cb5e:	f04f 0802 	mov.w	r8, #2
	err = handle_event_common(event, buf, handlers, num_handlers);
    cb62:	4a11      	ldr	r2, [pc, #68]	; (cba8 <hci_event_prio+0xac>)
    cb64:	7830      	ldrb	r0, [r6, #0]
    cb66:	2302      	movs	r3, #2
    cb68:	4621      	mov	r1, r4
    cb6a:	f004 fe23 	bl	117b4 <handle_event_common.isra.0>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    cb6e:	f018 0f02 	tst.w	r8, #2
    cb72:	d00c      	beq.n	cb8e <hci_event_prio+0x92>
	buf->data = buf->__buf + state->offset;
    cb74:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    cb76:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    cb78:	fa13 f585 	uxtah	r5, r3, r5
    cb7c:	60a5      	str	r5, [r4, #8]
}
    cb7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
    cb82:	f04f 0803 	mov.w	r8, #3
    cb86:	e7ec      	b.n	cb62 <hci_event_prio+0x66>
	switch (evt) {
    cb88:	f04f 0801 	mov.w	r8, #1
    cb8c:	e7e9      	b.n	cb62 <hci_event_prio+0x66>
		net_buf_unref(buf);
    cb8e:	4620      	mov	r0, r4
}
    cb90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    cb94:	f000 bc90 	b.w	d4b8 <net_buf_unref>
    cb98:	00013062 	.word	0x00013062
    cb9c:	00013096 	.word	0x00013096
    cba0:	000130af 	.word	0x000130af
    cba4:	00013123 	.word	0x00013123
    cba8:	00012ed8 	.word	0x00012ed8

0000cbac <bt_recv>:
{
    cbac:	b510      	push	{r4, lr}
	switch (bt_buf_get_type(buf)) {
    cbae:	7d03      	ldrb	r3, [r0, #20]
    cbb0:	2b01      	cmp	r3, #1
{
    cbb2:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    cbb4:	d115      	bne.n	cbe2 <bt_recv+0x36>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    cbb6:	6883      	ldr	r3, [r0, #8]
    cbb8:	781b      	ldrb	r3, [r3, #0]
    cbba:	2b05      	cmp	r3, #5
    cbbc:	d006      	beq.n	cbcc <bt_recv+0x20>
    cbbe:	3b0e      	subs	r3, #14
    cbc0:	2b01      	cmp	r3, #1
    cbc2:	d805      	bhi.n	cbd0 <bt_recv+0x24>
			hci_event_prio(buf);
    cbc4:	f7ff ff9a 	bl	cafc <hci_event_prio>
		return 0;
    cbc8:	2000      	movs	r0, #0
}
    cbca:	bd10      	pop	{r4, pc}
			hci_event_prio(buf);
    cbcc:	f7ff ff96 	bl	cafc <hci_event_prio>
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    cbd0:	4621      	mov	r1, r4
    cbd2:	4806      	ldr	r0, [pc, #24]	; (cbec <bt_recv+0x40>)
    cbd4:	f004 ff98 	bl	11b08 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    cbd8:	4905      	ldr	r1, [pc, #20]	; (cbf0 <bt_recv+0x44>)
    cbda:	4806      	ldr	r0, [pc, #24]	; (cbf4 <bt_recv+0x48>)
    cbdc:	f005 fd6f 	bl	126be <k_work_submit_to_queue>
}
    cbe0:	e7f2      	b.n	cbc8 <bt_recv+0x1c>
		net_buf_unref(buf);
    cbe2:	f000 fc69 	bl	d4b8 <net_buf_unref>
		return -EINVAL;
    cbe6:	f06f 0015 	mvn.w	r0, #21
    cbea:	e7ee      	b.n	cbca <bt_recv+0x1e>
    cbec:	2000029c 	.word	0x2000029c
    cbf0:	20000388 	.word	0x20000388
    cbf4:	20001210 	.word	0x20001210

0000cbf8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    cbf8:	4a08      	ldr	r2, [pc, #32]	; (cc1c <bt_hci_driver_register+0x24>)
{
    cbfa:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    cbfc:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    cc00:	b930      	cbnz	r0, cc10 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    cc02:	68d9      	ldr	r1, [r3, #12]
    cc04:	b139      	cbz	r1, cc16 <bt_hci_driver_register+0x1e>
    cc06:	6959      	ldr	r1, [r3, #20]
    cc08:	b129      	cbz	r1, cc16 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    cc0a:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	return 0;
    cc0e:	4770      	bx	lr
		return -EALREADY;
    cc10:	f06f 0077 	mvn.w	r0, #119	; 0x77
    cc14:	4770      	bx	lr
		return -EINVAL;
    cc16:	f06f 0015 	mvn.w	r0, #21
}
    cc1a:	4770      	bx	lr
    cc1c:	200001a0 	.word	0x200001a0

0000cc20 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cc20:	4b06      	ldr	r3, [pc, #24]	; (cc3c <bt_finalize_init+0x1c>)
    cc22:	f3bf 8f5b 	dmb	ish
    cc26:	e853 1f00 	ldrex	r1, [r3]
    cc2a:	f041 0104 	orr.w	r1, r1, #4
    cc2e:	e843 1200 	strex	r2, r1, [r3]
    cc32:	2a00      	cmp	r2, #0
    cc34:	d1f7      	bne.n	cc26 <bt_finalize_init+0x6>
    cc36:	f3bf 8f5b 	dmb	ish
}
    cc3a:	4770      	bx	lr
    cc3c:	2000026c 	.word	0x2000026c

0000cc40 <init_work>:
{
    cc40:	b510      	push	{r4, lr}
	err = hci_init();
    cc42:	f7ff fdf3 	bl	c82c <hci_init>
	if (err) {
    cc46:	b908      	cbnz	r0, cc4c <init_work+0xc>
	bt_finalize_init();
    cc48:	f7ff ffea 	bl	cc20 <bt_finalize_init>
	if (ready_cb) {
    cc4c:	4b03      	ldr	r3, [pc, #12]	; (cc5c <init_work+0x1c>)
    cc4e:	681b      	ldr	r3, [r3, #0]
    cc50:	b113      	cbz	r3, cc58 <init_work+0x18>
}
    cc52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    cc56:	4718      	bx	r3
}
    cc58:	bd10      	pop	{r4, pc}
    cc5a:	bf00      	nop
    cc5c:	20001564 	.word	0x20001564

0000cc60 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cc60:	4b04      	ldr	r3, [pc, #16]	; (cc74 <bt_is_ready+0x14>)
    cc62:	f3bf 8f5b 	dmb	ish
    cc66:	6818      	ldr	r0, [r3, #0]
    cc68:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    cc6c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    cc70:	4770      	bx	lr
    cc72:	bf00      	nop
    cc74:	2000026c 	.word	0x2000026c

0000cc78 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    cc78:	4800      	ldr	r0, [pc, #0]	; (cc7c <bt_get_name+0x4>)
    cc7a:	4770      	bx	lr
    cc7c:	00013034 	.word	0x00013034

0000cc80 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    cc82:	4f0a      	ldr	r7, [pc, #40]	; (ccac <id_find+0x2c>)
{
    cc84:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    cc86:	2500      	movs	r5, #0
    cc88:	79fb      	ldrb	r3, [r7, #7]
    cc8a:	b2ec      	uxtb	r4, r5
    cc8c:	42a3      	cmp	r3, r4
    cc8e:	d802      	bhi.n	cc96 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    cc90:	f06f 0001 	mvn.w	r0, #1
    cc94:	e009      	b.n	ccaa <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    cc96:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    cc9a:	4439      	add	r1, r7
    cc9c:	4630      	mov	r0, r6
    cc9e:	f004 fda0 	bl	117e2 <bt_addr_le_eq>
    cca2:	3501      	adds	r5, #1
    cca4:	2800      	cmp	r0, #0
    cca6:	d0ef      	beq.n	cc88 <id_find+0x8>
    cca8:	4620      	mov	r0, r4
}
    ccaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ccac:	200001a0 	.word	0x200001a0

0000ccb0 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    ccb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ccb2:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    ccb4:	460d      	mov	r5, r1
    ccb6:	b171      	cbz	r1, ccd6 <id_create.constprop.0+0x26>
    ccb8:	4912      	ldr	r1, [pc, #72]	; (cd04 <id_create.constprop.0+0x54>)
    ccba:	4628      	mov	r0, r5
    ccbc:	f004 fd91 	bl	117e2 <bt_addr_le_eq>
    ccc0:	b948      	cbnz	r0, ccd6 <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    ccc2:	4811      	ldr	r0, [pc, #68]	; (cd08 <id_create.constprop.0+0x58>)
    ccc4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    ccc8:	4629      	mov	r1, r5
    ccca:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    cccc:	f004 fd96 	bl	117fc <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    ccd0:	2000      	movs	r0, #0
}
    ccd2:	b003      	add	sp, #12
    ccd4:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    ccd6:	4668      	mov	r0, sp
    ccd8:	f004 fd59 	bl	1178e <bt_addr_le_create_static>
			if (err) {
    ccdc:	2800      	cmp	r0, #0
    ccde:	d1f8      	bne.n	ccd2 <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
    cce0:	4668      	mov	r0, sp
    cce2:	f7ff ffcd 	bl	cc80 <id_find>
    cce6:	2800      	cmp	r0, #0
    cce8:	daf5      	bge.n	ccd6 <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    ccea:	4b07      	ldr	r3, [pc, #28]	; (cd08 <id_create.constprop.0+0x58>)
    ccec:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    ccf0:	4418      	add	r0, r3
    ccf2:	4669      	mov	r1, sp
    ccf4:	f004 fd82 	bl	117fc <bt_addr_le_copy>
		if (addr) {
    ccf8:	2d00      	cmp	r5, #0
    ccfa:	d0e9      	beq.n	ccd0 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    ccfc:	4601      	mov	r1, r0
    ccfe:	4628      	mov	r0, r5
    cd00:	e7e4      	b.n	cccc <id_create.constprop.0+0x1c>
    cd02:	bf00      	nop
    cd04:	0001304f 	.word	0x0001304f
    cd08:	200001a0 	.word	0x200001a0

0000cd0c <set_random_address>:
{
    cd0c:	b538      	push	{r3, r4, r5, lr}
 *
 *  @return negative value if @a a < @a b, 0 if @a a == @a b, else positive
 */
static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    cd0e:	4912      	ldr	r1, [pc, #72]	; (cd58 <set_random_address+0x4c>)
    cd10:	2206      	movs	r2, #6
    cd12:	4605      	mov	r5, r0
    cd14:	f005 ff0b 	bl	12b2e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    cd18:	b1c8      	cbz	r0, cd4e <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    cd1a:	2106      	movs	r1, #6
    cd1c:	f242 0005 	movw	r0, #8197	; 0x2005
    cd20:	f7ff fce8 	bl	c6f4 <bt_hci_cmd_create>
	if (!buf) {
    cd24:	4604      	mov	r4, r0
    cd26:	b1a0      	cbz	r0, cd52 <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    cd28:	2206      	movs	r2, #6
    cd2a:	4629      	mov	r1, r5
    cd2c:	3008      	adds	r0, #8
    cd2e:	f004 ff4c 	bl	11bca <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    cd32:	2200      	movs	r2, #0
    cd34:	4621      	mov	r1, r4
    cd36:	f242 0005 	movw	r0, #8197	; 0x2005
    cd3a:	f7ff fd15 	bl	c768 <bt_hci_cmd_send_sync>
	if (err) {
    cd3e:	b938      	cbnz	r0, cd50 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    cd40:	4805      	ldr	r0, [pc, #20]	; (cd58 <set_random_address+0x4c>)
    cd42:	4629      	mov	r1, r5
    cd44:	f004 fd55 	bl	117f2 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    cd48:	2301      	movs	r3, #1
    cd4a:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
    cd4e:	2000      	movs	r0, #0
}
    cd50:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    cd52:	f06f 0068 	mvn.w	r0, #104	; 0x68
    cd56:	e7fb      	b.n	cd50 <set_random_address+0x44>
    cd58:	20000201 	.word	0x20000201

0000cd5c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    cd5c:	b570      	push	{r4, r5, r6, lr}
    cd5e:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    cd60:	4604      	mov	r4, r0
    cd62:	b918      	cbnz	r0, cd6c <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    cd64:	b1bd      	cbz	r5, cd96 <bt_id_create+0x3a>
			return -EINVAL;
    cd66:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    cd6a:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    cd6c:	491c      	ldr	r1, [pc, #112]	; (cde0 <bt_id_create+0x84>)
    cd6e:	f004 fd38 	bl	117e2 <bt_addr_le_eq>
    cd72:	2800      	cmp	r0, #0
    cd74:	d1f6      	bne.n	cd64 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    cd76:	7823      	ldrb	r3, [r4, #0]
    cd78:	2b01      	cmp	r3, #1
    cd7a:	d1f4      	bne.n	cd66 <bt_id_create+0xa>
    cd7c:	79a3      	ldrb	r3, [r4, #6]
    cd7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cd82:	2bc0      	cmp	r3, #192	; 0xc0
    cd84:	d1ef      	bne.n	cd66 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    cd86:	4620      	mov	r0, r4
    cd88:	f7ff ff7a 	bl	cc80 <id_find>
    cd8c:	2800      	cmp	r0, #0
    cd8e:	dbe9      	blt.n	cd64 <bt_id_create+0x8>
			return -EALREADY;
    cd90:	f06f 0077 	mvn.w	r0, #119	; 0x77
    cd94:	e7e9      	b.n	cd6a <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    cd96:	4d13      	ldr	r5, [pc, #76]	; (cde4 <bt_id_create+0x88>)
    cd98:	79eb      	ldrb	r3, [r5, #7]
    cd9a:	2b01      	cmp	r3, #1
    cd9c:	d01c      	beq.n	cdd8 <bt_id_create+0x7c>
    cd9e:	f3bf 8f5b 	dmb	ish
    cda2:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    cda6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    cdaa:	07db      	lsls	r3, r3, #31
    cdac:	d50b      	bpl.n	cdc6 <bt_id_create+0x6a>
	new_id = bt_dev.id_count;
    cdae:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    cdb0:	4621      	mov	r1, r4
    cdb2:	4630      	mov	r0, r6
    cdb4:	f7ff ff7c 	bl	ccb0 <id_create.constprop.0>
	if (err) {
    cdb8:	2800      	cmp	r0, #0
    cdba:	d1d6      	bne.n	cd6a <bt_id_create+0xe>
		bt_dev.id_count++;
    cdbc:	79eb      	ldrb	r3, [r5, #7]
    cdbe:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
    cdc0:	4630      	mov	r0, r6
		bt_dev.id_count++;
    cdc2:	71eb      	strb	r3, [r5, #7]
	return new_id;
    cdc4:	e7d1      	b.n	cd6a <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    cdc6:	2c00      	cmp	r4, #0
    cdc8:	d0cd      	beq.n	cd66 <bt_id_create+0xa>
    cdca:	4905      	ldr	r1, [pc, #20]	; (cde0 <bt_id_create+0x84>)
    cdcc:	4620      	mov	r0, r4
    cdce:	f004 fd08 	bl	117e2 <bt_addr_le_eq>
    cdd2:	2800      	cmp	r0, #0
    cdd4:	d0eb      	beq.n	cdae <bt_id_create+0x52>
    cdd6:	e7c6      	b.n	cd66 <bt_id_create+0xa>
		return -ENOMEM;
    cdd8:	f06f 000b 	mvn.w	r0, #11
    cddc:	e7c5      	b.n	cd6a <bt_id_create+0xe>
    cdde:	bf00      	nop
    cde0:	0001304f 	.word	0x0001304f
    cde4:	200001a0 	.word	0x200001a0

0000cde8 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    cde8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    cdea:	4604      	mov	r4, r0
    cdec:	b198      	cbz	r0, ce16 <bt_id_read_public_addr+0x2e>
		BT_WARN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    cdee:	aa01      	add	r2, sp, #4
    cdf0:	2100      	movs	r1, #0
    cdf2:	f241 0009 	movw	r0, #4105	; 0x1009
    cdf6:	f7ff fcb7 	bl	c768 <bt_hci_cmd_send_sync>
	if (err) {
    cdfa:	4606      	mov	r6, r0
    cdfc:	b958      	cbnz	r0, ce16 <bt_id_read_public_addr+0x2e>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    cdfe:	9b01      	ldr	r3, [sp, #4]
    ce00:	490f      	ldr	r1, [pc, #60]	; (ce40 <bt_id_read_public_addr+0x58>)

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    ce02:	689d      	ldr	r5, [r3, #8]
    ce04:	3501      	adds	r5, #1
    ce06:	2206      	movs	r2, #6
    ce08:	4628      	mov	r0, r5
    ce0a:	f005 fe90 	bl	12b2e <memcmp>
    ce0e:	b928      	cbnz	r0, ce1c <bt_id_read_public_addr+0x34>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
    ce10:	9801      	ldr	r0, [sp, #4]
    ce12:	f000 fb51 	bl	d4b8 <net_buf_unref>
		return 0U;
    ce16:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    ce18:	b002      	add	sp, #8
    ce1a:	bd70      	pop	{r4, r5, r6, pc}
    ce1c:	4909      	ldr	r1, [pc, #36]	; (ce44 <bt_id_read_public_addr+0x5c>)
    ce1e:	2206      	movs	r2, #6
    ce20:	4628      	mov	r0, r5
    ce22:	f005 fe84 	bl	12b2e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    ce26:	2800      	cmp	r0, #0
    ce28:	d0f2      	beq.n	ce10 <bt_id_read_public_addr+0x28>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    ce2a:	4629      	mov	r1, r5
    ce2c:	1c60      	adds	r0, r4, #1
    ce2e:	f004 fce0 	bl	117f2 <bt_addr_copy>
	net_buf_unref(rsp);
    ce32:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    ce34:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    ce36:	f000 fb3f 	bl	d4b8 <net_buf_unref>
	return 1U;
    ce3a:	2001      	movs	r0, #1
    ce3c:	e7ec      	b.n	ce18 <bt_id_read_public_addr+0x30>
    ce3e:	bf00      	nop
    ce40:	0001305c 	.word	0x0001305c
    ce44:	00013056 	.word	0x00013056

0000ce48 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    ce48:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    ce4a:	4668      	mov	r0, sp
    ce4c:	f7ff ffcc 	bl	cde8 <bt_id_read_public_addr>
    ce50:	4b04      	ldr	r3, [pc, #16]	; (ce64 <bt_setup_public_id_addr+0x1c>)
    ce52:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    ce54:	b118      	cbz	r0, ce5e <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    ce56:	4669      	mov	r1, sp
    ce58:	2000      	movs	r0, #0
    ce5a:	f7ff ff29 	bl	ccb0 <id_create.constprop.0>
}
    ce5e:	b003      	add	sp, #12
    ce60:	f85d fb04 	ldr.w	pc, [sp], #4
    ce64:	200001a0 	.word	0x200001a0

0000ce68 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    ce68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    ce6a:	4b18      	ldr	r3, [pc, #96]	; (cecc <bt_read_static_addr+0x64>)
    ce6c:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    ce70:	07db      	lsls	r3, r3, #31
{
    ce72:	4605      	mov	r5, r0
    ce74:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    ce76:	d403      	bmi.n	ce80 <bt_read_static_addr+0x18>
		BT_WARN("Read Static Addresses command not available");
		return 0;
    ce78:	2400      	movs	r4, #0
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    ce7a:	4620      	mov	r0, r4
    ce7c:	b003      	add	sp, #12
    ce7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    ce80:	aa01      	add	r2, sp, #4
    ce82:	2100      	movs	r1, #0
    ce84:	f64f 4009 	movw	r0, #64521	; 0xfc09
    ce88:	f7ff fc6e 	bl	c768 <bt_hci_cmd_send_sync>
	if (err) {
    ce8c:	4603      	mov	r3, r0
    ce8e:	2800      	cmp	r0, #0
    ce90:	d1f2      	bne.n	ce78 <bt_read_static_addr+0x10>
	rp = (void *)rsp->data;
    ce92:	9801      	ldr	r0, [sp, #4]
    ce94:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
    ce96:	7854      	ldrb	r4, [r2, #1]
    ce98:	42b4      	cmp	r4, r6
    ce9a:	bf28      	it	cs
    ce9c:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
    ce9e:	3202      	adds	r2, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    cea0:	2716      	movs	r7, #22
	for (i = 0; i < cnt; i++) {
    cea2:	429c      	cmp	r4, r3
    cea4:	dc02      	bgt.n	ceac <bt_read_static_addr+0x44>
	net_buf_unref(rsp);
    cea6:	f000 fb07 	bl	d4b8 <net_buf_unref>
	if (!cnt) {
    ceaa:	e7e6      	b.n	ce7a <bt_read_static_addr+0x12>
    ceac:	4611      	mov	r1, r2
    ceae:	fb07 5603 	mla	r6, r7, r3, r5
    ceb2:	f102 0c14 	add.w	ip, r2, #20
    ceb6:	f851 eb04 	ldr.w	lr, [r1], #4
    ceba:	f846 eb04 	str.w	lr, [r6], #4
    cebe:	4561      	cmp	r1, ip
    cec0:	d1f9      	bne.n	ceb6 <bt_read_static_addr+0x4e>
    cec2:	8809      	ldrh	r1, [r1, #0]
    cec4:	8031      	strh	r1, [r6, #0]
	for (i = 0; i < cnt; i++) {
    cec6:	3301      	adds	r3, #1
    cec8:	3216      	adds	r2, #22
    ceca:	e7ea      	b.n	cea2 <bt_read_static_addr+0x3a>
    cecc:	200001a0 	.word	0x200001a0

0000ced0 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    ced0:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    ced2:	4d15      	ldr	r5, [pc, #84]	; (cf28 <bt_setup_random_id_addr+0x58>)
    ced4:	79ec      	ldrb	r4, [r5, #7]
{
    ced6:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
    ced8:	b92c      	cbnz	r4, cee6 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    ceda:	2101      	movs	r1, #1
    cedc:	a802      	add	r0, sp, #8
    cede:	f7ff ffc3 	bl	ce68 <bt_read_static_addr>
    cee2:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    cee4:	b9c0      	cbnz	r0, cf18 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    cee6:	2100      	movs	r1, #0
    cee8:	4608      	mov	r0, r1
}
    ceea:	b008      	add	sp, #32
    ceec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
    cef0:	f7ff bf34 	b.w	cd5c <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    cef4:	ab02      	add	r3, sp, #8
    cef6:	fb06 3102 	mla	r1, r6, r2, r3
    cefa:	f10d 0001 	add.w	r0, sp, #1
    cefe:	f004 fc78 	bl	117f2 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    cf02:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    cf04:	4669      	mov	r1, sp
    cf06:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
    cf08:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    cf0c:	f7ff fed0 	bl	ccb0 <id_create.constprop.0>
				if (err) {
    cf10:	3401      	adds	r4, #1
    cf12:	b110      	cbz	r0, cf1a <bt_setup_random_id_addr+0x4a>
}
    cf14:	b008      	add	sp, #32
    cf16:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    cf18:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    cf1a:	79eb      	ldrb	r3, [r5, #7]
    cf1c:	b2e2      	uxtb	r2, r4
    cf1e:	4293      	cmp	r3, r2
    cf20:	d8e8      	bhi.n	cef4 <bt_setup_random_id_addr+0x24>
			return 0;
    cf22:	2000      	movs	r0, #0
    cf24:	e7f6      	b.n	cf14 <bt_setup_random_id_addr+0x44>
    cf26:	bf00      	nop
    cf28:	200001a0 	.word	0x200001a0

0000cf2c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    cf2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf30:	4690      	mov	r8, r2
    cf32:	460e      	mov	r6, r1
    cf34:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
    cf36:	4602      	mov	r2, r0
    cf38:	2800      	cmp	r0, #0
    cf3a:	d04b      	beq.n	cfd4 <bt_id_set_adv_own_addr+0xa8>
    cf3c:	2b00      	cmp	r3, #0
    cf3e:	d049      	beq.n	cfd4 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    cf40:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
    cf42:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    cf44:	d531      	bpl.n	cfaa <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    cf46:	4f25      	ldr	r7, [pc, #148]	; (cfdc <bt_id_set_adv_own_addr+0xb0>)
    cf48:	f1b8 0f00 	cmp.w	r8, #0
    cf4c:	d013      	beq.n	cf76 <bt_id_set_adv_own_addr+0x4a>
    cf4e:	0688      	lsls	r0, r1, #26
    cf50:	d40a      	bmi.n	cf68 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    cf52:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    cf56:	5cfb      	ldrb	r3, [r7, r3]
    cf58:	2b01      	cmp	r3, #1
    cf5a:	d015      	beq.n	cf88 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    cf5c:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    cf5e:	06b2      	lsls	r2, r6, #26
    cf60:	d50f      	bpl.n	cf82 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    cf62:	f043 0302 	orr.w	r3, r3, #2
    cf66:	e00b      	b.n	cf80 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    cf68:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
    cf6c:	0659      	lsls	r1, r3, #25
    cf6e:	d4f0      	bmi.n	cf52 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
    cf70:	f06f 0085 	mvn.w	r0, #133	; 0x85
    cf74:	e006      	b.n	cf84 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    cf76:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    cf7a:	5cfb      	ldrb	r3, [r7, r3]
    cf7c:	2b01      	cmp	r3, #1
    cf7e:	d003      	beq.n	cf88 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
    cf80:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    cf82:	2000      	movs	r0, #0
}
    cf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    cf88:	2107      	movs	r1, #7
    cf8a:	fb01 7104 	mla	r1, r1, r4, r7
    cf8e:	3101      	adds	r1, #1
    cf90:	4610      	mov	r0, r2
    cf92:	f004 fc3a 	bl	1180a <bt_id_set_adv_random_addr>
				if (err) {
    cf96:	2800      	cmp	r0, #0
    cf98:	d1f4      	bne.n	cf84 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
    cf9a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    cf9e:	5d3b      	ldrb	r3, [r7, r4]
    cfa0:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    cfa2:	f1b8 0f00 	cmp.w	r8, #0
    cfa6:	d0ec      	beq.n	cf82 <bt_id_set_adv_own_addr+0x56>
    cfa8:	e7d9      	b.n	cf5e <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    cfaa:	074b      	lsls	r3, r1, #29
    cfac:	d50e      	bpl.n	cfcc <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    cfae:	4e0b      	ldr	r6, [pc, #44]	; (cfdc <bt_id_set_adv_own_addr+0xb0>)
    cfb0:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    cfb4:	5df3      	ldrb	r3, [r6, r7]
    cfb6:	2b01      	cmp	r3, #1
    cfb8:	d1e2      	bne.n	cf80 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    cfba:	2107      	movs	r1, #7
    cfbc:	fb11 3104 	smlabb	r1, r1, r4, r3
    cfc0:	4431      	add	r1, r6
    cfc2:	f004 fc22 	bl	1180a <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
    cfc6:	5df3      	ldrb	r3, [r6, r7]
    cfc8:	702b      	strb	r3, [r5, #0]
		if (err) {
    cfca:	e7db      	b.n	cf84 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
    cfcc:	f004 fc25 	bl	1181a <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    cfd0:	2301      	movs	r3, #1
    cfd2:	e7f9      	b.n	cfc8 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
    cfd4:	f06f 0015 	mvn.w	r0, #21
    cfd8:	e7d4      	b.n	cf84 <bt_id_set_adv_own_addr+0x58>
    cfda:	bf00      	nop
    cfdc:	200001a0 	.word	0x200001a0

0000cfe0 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    cfe0:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    cfe2:	4c0a      	ldr	r4, [pc, #40]	; (d00c <bt_id_init+0x2c>)
    cfe4:	79e3      	ldrb	r3, [r4, #7]
    cfe6:	b10b      	cbz	r3, cfec <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    cfe8:	2000      	movs	r0, #0
}
    cfea:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
    cfec:	f7ff ff2c 	bl	ce48 <bt_setup_public_id_addr>
		if (err) {
    cff0:	2800      	cmp	r0, #0
    cff2:	d1fa      	bne.n	cfea <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    cff4:	79e3      	ldrb	r3, [r4, #7]
    cff6:	2b00      	cmp	r3, #0
    cff8:	d1f6      	bne.n	cfe8 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    cffa:	f7ff ff69 	bl	ced0 <bt_setup_random_id_addr>
		if (err) {
    cffe:	2800      	cmp	r0, #0
    d000:	d1f3      	bne.n	cfea <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    d002:	1c60      	adds	r0, r4, #1
}
    d004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
    d008:	f7ff be80 	b.w	cd0c <set_random_address>
    d00c:	200001a0 	.word	0x200001a0

0000d010 <valid_adv_param>:

	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
    d010:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    d012:	6843      	ldr	r3, [r0, #4]
{
    d014:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    d016:	0558      	lsls	r0, r3, #21
    d018:	d501      	bpl.n	d01e <valid_adv_param+0xe>
		return false;
    d01a:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    d01c:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    d01e:	6922      	ldr	r2, [r4, #16]
    d020:	b10a      	cbz	r2, d026 <valid_adv_param+0x16>
    d022:	07d9      	lsls	r1, r3, #31
    d024:	d5f9      	bpl.n	d01a <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    d026:	4d19      	ldr	r5, [pc, #100]	; (d08c <valid_adv_param+0x7c>)
    d028:	7820      	ldrb	r0, [r4, #0]
    d02a:	79eb      	ldrb	r3, [r5, #7]
    d02c:	4283      	cmp	r3, r0
    d02e:	d9f4      	bls.n	d01a <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    d030:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 *
 *  @sa bt_addr_le_eq
 */
static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    d034:	4916      	ldr	r1, [pc, #88]	; (d090 <valid_adv_param+0x80>)
    d036:	2207      	movs	r2, #7
    d038:	4428      	add	r0, r5
    d03a:	f005 fd78 	bl	12b2e <memcmp>
	if (param->id >= bt_dev.id_count ||
    d03e:	2800      	cmp	r0, #0
    d040:	d0eb      	beq.n	d01a <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    d042:	6860      	ldr	r0, [r4, #4]
    d044:	07c2      	lsls	r2, r0, #31
    d046:	d406      	bmi.n	d056 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    d048:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    d04c:	2b08      	cmp	r3, #8
    d04e:	d802      	bhi.n	d056 <valid_adv_param+0x46>
    d050:	68a3      	ldr	r3, [r4, #8]
    d052:	2b9f      	cmp	r3, #159	; 0x9f
    d054:	d9e1      	bls.n	d01a <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    d056:	f010 0f30 	tst.w	r0, #48	; 0x30
    d05a:	d002      	beq.n	d062 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    d05c:	6923      	ldr	r3, [r4, #16]
    d05e:	2b00      	cmp	r3, #0
    d060:	d0db      	beq.n	d01a <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    d062:	06c3      	lsls	r3, r0, #27
    d064:	d401      	bmi.n	d06a <valid_adv_param+0x5a>
    d066:	6923      	ldr	r3, [r4, #16]
    d068:	b943      	cbnz	r3, d07c <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
    d06a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    d06e:	429a      	cmp	r2, r3
    d070:	d8d3      	bhi.n	d01a <valid_adv_param+0xa>
    d072:	2a1f      	cmp	r2, #31
    d074:	d9d1      	bls.n	d01a <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    d076:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    d07a:	d8ce      	bhi.n	d01a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    d07c:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    d080:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    d084:	bf18      	it	ne
    d086:	2001      	movne	r0, #1
    d088:	e7c8      	b.n	d01c <valid_adv_param+0xc>
    d08a:	bf00      	nop
    d08c:	200001a0 	.word	0x200001a0
    d090:	0001304f 	.word	0x0001304f

0000d094 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    d094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    d098:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
    d09c:	b08b      	sub	sp, #44	; 0x2c
	bool dir_adv = (param->peer != NULL), scannable = false;
    d09e:	f1ba 0500 	subs.w	r5, sl, #0
{
    d0a2:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d0a4:	4876      	ldr	r0, [pc, #472]	; (d280 <bt_le_adv_start_legacy+0x1ec>)
    d0a6:	9305      	str	r3, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
    d0a8:	bf18      	it	ne
    d0aa:	2501      	movne	r5, #1
    d0ac:	f004 fbdf 	bl	1186e <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    d0b0:	0740      	lsls	r0, r0, #29
{
    d0b2:	460c      	mov	r4, r1
    d0b4:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    d0b6:	f140 80da 	bpl.w	d26e <bt_le_adv_start_legacy+0x1da>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    d0ba:	4608      	mov	r0, r1
    d0bc:	f7ff ffa8 	bl	d010 <valid_adv_param>
    d0c0:	b928      	cbnz	r0, d0ce <bt_le_adv_start_legacy+0x3a>
		return -EINVAL;
    d0c2:	f06f 0515 	mvn.w	r5, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    d0c6:	4628      	mov	r0, r5
    d0c8:	b00b      	add	sp, #44	; 0x2c
    d0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    d0ce:	4620      	mov	r0, r4
    d0d0:	f004 fbba 	bl	11848 <bt_id_adv_random_addr_check>
    d0d4:	4681      	mov	r9, r0
    d0d6:	2800      	cmp	r0, #0
    d0d8:	d0f3      	beq.n	d0c2 <bt_le_adv_start_legacy+0x2e>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    d0da:	f106 0810 	add.w	r8, r6, #16
    d0de:	4640      	mov	r0, r8
    d0e0:	f004 fbc5 	bl	1186e <atomic_get>
    d0e4:	0601      	lsls	r1, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    d0e6:	f3c0 13c0 	ubfx	r3, r0, #7, #1
    d0ea:	f100 80c3 	bmi.w	d274 <bt_le_adv_start_legacy+0x1e0>
	(void)memset(&set_param, 0, sizeof(set_param));
    d0ee:	e9cd 3307 	strd	r3, r3, [sp, #28]
    d0f2:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    d0f6:	68a3      	ldr	r3, [r4, #8]
    d0f8:	f8ad 3018 	strh.w	r3, [sp, #24]
	set_param.channel_map  = get_adv_channel_map(param->options);
    d0fc:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    d0fe:	68e3      	ldr	r3, [r4, #12]
    d100:	f8ad 301a 	strh.w	r3, [sp, #26]
	set_param.channel_map  = get_adv_channel_map(param->options);
    d104:	f004 fba4 	bl	11850 <get_adv_channel_map>
	if (adv->id != param->id) {
    d108:	7832      	ldrb	r2, [r6, #0]
    d10a:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    d10c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
	if (adv->id != param->id) {
    d110:	429a      	cmp	r2, r3
    d112:	d004      	beq.n	d11e <bt_le_adv_start_legacy+0x8a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d114:	485a      	ldr	r0, [pc, #360]	; (d280 <bt_le_adv_start_legacy+0x1ec>)
    d116:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    d11a:	f004 fbae 	bl	1187a <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    d11e:	4a59      	ldr	r2, [pc, #356]	; (d284 <bt_le_adv_start_legacy+0x1f0>)
	adv->id = param->id;
    d120:	7823      	ldrb	r3, [r4, #0]
    d122:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    d124:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    d128:	6861      	ldr	r1, [r4, #4]
    d12a:	462a      	mov	r2, r5
    d12c:	f10d 031d 	add.w	r3, sp, #29
    d130:	4630      	mov	r0, r6
    d132:	f7ff fefb 	bl	cf2c <bt_id_set_adv_own_addr>
	if (err) {
    d136:	4605      	mov	r5, r0
    d138:	2800      	cmp	r0, #0
    d13a:	d1c4      	bne.n	d0c6 <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    d13c:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    d140:	f1ba 0f00 	cmp.w	sl, #0
    d144:	d013      	beq.n	d16e <bt_le_adv_start_legacy+0xda>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    d146:	6921      	ldr	r1, [r4, #16]
    d148:	f004 fba6 	bl	11898 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
    d14c:	4620      	mov	r0, r4
    d14e:	f004 fc97 	bl	11a80 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    d152:	6863      	ldr	r3, [r4, #4]
    d154:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
    d156:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    d158:	d416      	bmi.n	d188 <bt_le_adv_start_legacy+0xf4>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    d15a:	0598      	lsls	r0, r3, #22
    d15c:	d403      	bmi.n	d166 <bt_le_adv_start_legacy+0xd2>
    d15e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d160:	b90b      	cbnz	r3, d166 <bt_le_adv_start_legacy+0xd2>
    d162:	2f02      	cmp	r7, #2
    d164:	d13e      	bne.n	d1e4 <bt_le_adv_start_legacy+0x150>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    d166:	2302      	movs	r3, #2
    d168:	f88d 301c 	strb.w	r3, [sp, #28]
    d16c:	e019      	b.n	d1a2 <bt_le_adv_start_legacy+0x10e>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    d16e:	4946      	ldr	r1, [pc, #280]	; (d288 <bt_le_adv_start_legacy+0x1f4>)
    d170:	f004 fb92 	bl	11898 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
    d174:	4620      	mov	r0, r4
    d176:	f004 fc83 	bl	11a80 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    d17a:	6863      	ldr	r3, [r4, #4]
    d17c:	07dd      	lsls	r5, r3, #31
	name_type = get_adv_name_type_param(param);
    d17e:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    d180:	d5eb      	bpl.n	d15a <bt_le_adv_start_legacy+0xc6>
			set_param.type = BT_HCI_ADV_IND;
    d182:	f88d a01c 	strb.w	sl, [sp, #28]
    d186:	e00c      	b.n	d1a2 <bt_le_adv_start_legacy+0x10e>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
    d188:	f013 0f10 	tst.w	r3, #16
    d18c:	bf0c      	ite	eq
    d18e:	2301      	moveq	r3, #1
    d190:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    d192:	6921      	ldr	r1, [r4, #16]
    d194:	f88d 301c 	strb.w	r3, [sp, #28]
    d198:	f10d 001e 	add.w	r0, sp, #30
    d19c:	f004 fb7c 	bl	11898 <bt_addr_le_copy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    d1a0:	46a9      	mov	r9, r5
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    d1a2:	210f      	movs	r1, #15
    d1a4:	f242 0006 	movw	r0, #8198	; 0x2006
    d1a8:	f7ff faa4 	bl	c6f4 <bt_hci_cmd_create>
	if (!buf) {
    d1ac:	4605      	mov	r5, r0
    d1ae:	2800      	cmp	r0, #0
    d1b0:	d063      	beq.n	d27a <bt_le_adv_start_legacy+0x1e6>
    d1b2:	220f      	movs	r2, #15
    d1b4:	a906      	add	r1, sp, #24
    d1b6:	3008      	adds	r0, #8
    d1b8:	f004 fd07 	bl	11bca <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    d1bc:	4629      	mov	r1, r5
    d1be:	2200      	movs	r2, #0
    d1c0:	f242 0006 	movw	r0, #8198	; 0x2006
    d1c4:	f7ff fad0 	bl	c768 <bt_hci_cmd_send_sync>
	if (err) {
    d1c8:	4605      	mov	r5, r0
    d1ca:	2800      	cmp	r0, #0
    d1cc:	f47f af7b 	bne.w	d0c6 <bt_le_adv_start_legacy+0x32>
	if (!dir_adv) {
    d1d0:	f1ba 0f00 	cmp.w	sl, #0
    d1d4:	d00c      	beq.n	d1f0 <bt_le_adv_start_legacy+0x15c>
	return bt_le_adv_set_enable_legacy(adv, enable);
    d1d6:	2101      	movs	r1, #1
    d1d8:	4630      	mov	r0, r6
    d1da:	f004 fc61 	bl	11aa0 <bt_le_adv_set_enable_legacy>
	if (err) {
    d1de:	b1f0      	cbz	r0, d21e <bt_le_adv_start_legacy+0x18a>
    d1e0:	4605      	mov	r5, r0
    d1e2:	e770      	b.n	d0c6 <bt_le_adv_start_legacy+0x32>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    d1e4:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    d1e6:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    d1ea:	f88d 301c 	strb.w	r3, [sp, #28]
    d1ee:	e7d8      	b.n	d1a2 <bt_le_adv_start_legacy+0x10e>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    d1f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d1f2:	9300      	str	r3, [sp, #0]
    d1f4:	e9cd 9701 	strd	r9, r7, [sp, #4]
    d1f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d1fa:	9a05      	ldr	r2, [sp, #20]
    d1fc:	4659      	mov	r1, fp
    d1fe:	4630      	mov	r0, r6
    d200:	f004 fbc7 	bl	11992 <le_adv_update.constprop.0>
		if (err) {
    d204:	2800      	cmp	r0, #0
    d206:	d1eb      	bne.n	d1e0 <bt_le_adv_start_legacy+0x14c>
	return bt_le_adv_set_enable_legacy(adv, enable);
    d208:	2101      	movs	r1, #1
    d20a:	4630      	mov	r0, r6
    d20c:	f004 fc48 	bl	11aa0 <bt_le_adv_set_enable_legacy>
	if (err) {
    d210:	2800      	cmp	r0, #0
    d212:	d1e5      	bne.n	d1e0 <bt_le_adv_start_legacy+0x14c>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    d214:	6860      	ldr	r0, [r4, #4]
    d216:	f080 0002 	eor.w	r0, r0, #2
    d21a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    d21e:	f000 0201 	and.w	r2, r0, #1
    d222:	210e      	movs	r1, #14
    d224:	4640      	mov	r0, r8
    d226:	f004 fb9d 	bl	11964 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    d22a:	1e7b      	subs	r3, r7, #1
    d22c:	425a      	negs	r2, r3
    d22e:	415a      	adcs	r2, r3
    d230:	4640      	mov	r0, r8
    d232:	2108      	movs	r1, #8
    d234:	f004 fb96 	bl	11964 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    d238:	1eb9      	subs	r1, r7, #2
    d23a:	424a      	negs	r2, r1
    d23c:	414a      	adcs	r2, r1
    d23e:	4640      	mov	r0, r8
    d240:	2109      	movs	r1, #9
    d242:	f004 fb8f 	bl	11964 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    d246:	6862      	ldr	r2, [r4, #4]
    d248:	4640      	mov	r0, r8
    d24a:	f002 0201 	and.w	r2, r2, #1
    d24e:	210a      	movs	r1, #10
    d250:	f004 fb88 	bl	11964 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    d254:	464a      	mov	r2, r9
    d256:	4640      	mov	r0, r8
    d258:	210b      	movs	r1, #11
    d25a:	f004 fb83 	bl	11964 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    d25e:	6862      	ldr	r2, [r4, #4]
    d260:	210d      	movs	r1, #13
    d262:	f3c2 0280 	ubfx	r2, r2, #2, #1
    d266:	4640      	mov	r0, r8
    d268:	f004 fb7c 	bl	11964 <atomic_set_bit_to>
	return 0;
    d26c:	e72b      	b.n	d0c6 <bt_le_adv_start_legacy+0x32>
		return -EAGAIN;
    d26e:	f06f 050a 	mvn.w	r5, #10
    d272:	e728      	b.n	d0c6 <bt_le_adv_start_legacy+0x32>
		return -EALREADY;
    d274:	f06f 0577 	mvn.w	r5, #119	; 0x77
    d278:	e725      	b.n	d0c6 <bt_le_adv_start_legacy+0x32>
		return -ENOBUFS;
    d27a:	f06f 0568 	mvn.w	r5, #104	; 0x68
    d27e:	e722      	b.n	d0c6 <bt_le_adv_start_legacy+0x32>
    d280:	2000026c 	.word	0x2000026c
    d284:	200001a0 	.word	0x200001a0
    d288:	0001304f 	.word	0x0001304f

0000d28c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    d28c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d28e:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    d290:	9a06      	ldr	r2, [sp, #24]
{
    d292:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    d294:	e9cd 3200 	strd	r3, r2, [sp]
    d298:	462b      	mov	r3, r5
    d29a:	460a      	mov	r2, r1
    d29c:	4601      	mov	r1, r0
    d29e:	4811      	ldr	r0, [pc, #68]	; (d2e4 <bt_le_adv_start+0x58>)
    d2a0:	f7ff fef8 	bl	d094 <bt_le_adv_start_legacy>
    d2a4:	4621      	mov	r1, r4
    d2a6:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    d2a8:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    d2aa:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    d2ae:	429d      	cmp	r5, r3
    d2b0:	d102      	bne.n	d2b8 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    d2b2:	4630      	mov	r0, r6
    d2b4:	b002      	add	sp, #8
    d2b6:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    d2b8:	880a      	ldrh	r2, [r1, #0]
    d2ba:	4282      	cmp	r2, r0
    d2bc:	d104      	bne.n	d2c8 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    d2be:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    d2c0:	b112      	cbz	r2, d2c8 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    d2c2:	7812      	ldrb	r2, [r2, #0]
    d2c4:	07d2      	lsls	r2, r2, #31
    d2c6:	d402      	bmi.n	d2ce <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    d2c8:	3301      	adds	r3, #1
    d2ca:	3108      	adds	r1, #8
    d2cc:	e7ef      	b.n	d2ae <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    d2ce:	4906      	ldr	r1, [pc, #24]	; (d2e8 <bt_le_adv_start+0x5c>)
    d2d0:	4806      	ldr	r0, [pc, #24]	; (d2ec <bt_le_adv_start+0x60>)
    d2d2:	f005 fa05 	bl	126e0 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    d2d6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    d2da:	2300      	movs	r3, #0
    d2dc:	4803      	ldr	r0, [pc, #12]	; (d2ec <bt_le_adv_start+0x60>)
    d2de:	f003 f8cd 	bl	1047c <k_work_reschedule>
    d2e2:	e7e6      	b.n	d2b2 <bt_le_adv_start+0x26>
    d2e4:	200001b8 	.word	0x200001b8
    d2e8:	00011af1 	.word	0x00011af1
    d2ec:	200001d0 	.word	0x200001d0

0000d2f0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    d2f0:	b508      	push	{r3, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
    d2f2:	480b      	ldr	r0, [pc, #44]	; (d320 <bt_le_adv_stop+0x30>)
    d2f4:	f004 fbf9 	bl	11aea <bt_le_lim_adv_cancel_timeout>
    d2f8:	480a      	ldr	r0, [pc, #40]	; (d324 <bt_le_adv_stop+0x34>)
    d2fa:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    d2fe:	f004 fabc 	bl	1187a <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d302:	4808      	ldr	r0, [pc, #32]	; (d324 <bt_le_adv_stop+0x34>)
    d304:	f004 fab3 	bl	1186e <atomic_get>
    d308:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    d30a:	061b      	lsls	r3, r3, #24
    d30c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    d310:	d505      	bpl.n	d31e <bt_le_adv_stop+0x2e>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    d312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
    d316:	4802      	ldr	r0, [pc, #8]	; (d320 <bt_le_adv_stop+0x30>)
    d318:	2100      	movs	r1, #0
    d31a:	f004 bbc1 	b.w	11aa0 <bt_le_adv_set_enable_legacy>
}
    d31e:	bd08      	pop	{r3, pc}
    d320:	200001b8 	.word	0x200001b8
    d324:	200001c8 	.word	0x200001c8

0000d328 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    d328:	4b02      	ldr	r3, [pc, #8]	; (d334 <net_buf_pool_get+0xc>)
    d32a:	2230      	movs	r2, #48	; 0x30
    d32c:	fb02 3000 	mla	r0, r2, r0, r3
    d330:	4770      	bx	lr
    d332:	bf00      	nop
    d334:	200004a0 	.word	0x200004a0

0000d338 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d338:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    d33a:	4b07      	ldr	r3, [pc, #28]	; (d358 <net_buf_id+0x20>)
    d33c:	2130      	movs	r1, #48	; 0x30
    d33e:	fb01 3302 	mla	r3, r1, r2, r3
    d342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    d344:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    d348:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    d34a:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    d34c:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
    d350:	fbb0 f0f3 	udiv	r0, r0, r3
    d354:	4770      	bx	lr
    d356:	bf00      	nop
    d358:	200004a0 	.word	0x200004a0

0000d35c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    d35c:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d35e:	4b0a      	ldr	r3, [pc, #40]	; (d388 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d360:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d362:	2430      	movs	r4, #48	; 0x30
    d364:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
    d368:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d36c:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    d36e:	681a      	ldr	r2, [r3, #0]
    d370:	4294      	cmp	r4, r2
    d372:	bf94      	ite	ls
    d374:	600c      	strls	r4, [r1, #0]
    d376:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    d378:	e9d3 5400 	ldrd	r5, r4, [r3]
    d37c:	f7ff ffdc 	bl	d338 <net_buf_id>
}
    d380:	fb05 4000 	mla	r0, r5, r0, r4
    d384:	bd38      	pop	{r3, r4, r5, pc}
    d386:	bf00      	nop
    d388:	200004a0 	.word	0x200004a0

0000d38c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    d38c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d390:	4605      	mov	r5, r0
    d392:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    d394:	4610      	mov	r0, r2
    d396:	4619      	mov	r1, r3
{
    d398:	4691      	mov	r9, r2
    d39a:	4698      	mov	r8, r3
    d39c:	4617      	mov	r7, r2
    d39e:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    d3a0:	f005 fb16 	bl	129d0 <sys_clock_timeout_end_calc>
    d3a4:	4682      	mov	sl, r0
    d3a6:	468b      	mov	fp, r1
	__asm__ volatile(
    d3a8:	f04f 0340 	mov.w	r3, #64	; 0x40
    d3ac:	f3ef 8111 	mrs	r1, BASEPRI
    d3b0:	f383 8812 	msr	BASEPRI_MAX, r3
    d3b4:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    d3b8:	8c2b      	ldrh	r3, [r5, #32]
    d3ba:	2b00      	cmp	r3, #0
    d3bc:	d05b      	beq.n	d476 <net_buf_alloc_len+0xea>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    d3be:	8bea      	ldrh	r2, [r5, #30]
    d3c0:	429a      	cmp	r2, r3
    d3c2:	d93d      	bls.n	d440 <net_buf_alloc_len+0xb4>
    d3c4:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
    d3c6:	2200      	movs	r2, #0
    d3c8:	2300      	movs	r3, #0
    d3ca:	4628      	mov	r0, r5
    d3cc:	f002 fe7a 	bl	100c4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    d3d0:	9900      	ldr	r1, [sp, #0]
    d3d2:	4604      	mov	r4, r0
    d3d4:	2800      	cmp	r0, #0
    d3d6:	d033      	beq.n	d440 <net_buf_alloc_len+0xb4>
	__asm__ volatile(
    d3d8:	f381 8811 	msr	BASEPRI, r1
    d3dc:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    d3e0:	9b01      	ldr	r3, [sp, #4]
    d3e2:	2b00      	cmp	r3, #0
    d3e4:	d058      	beq.n	d498 <net_buf_alloc_len+0x10c>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    d3e6:	ea58 0309 	orrs.w	r3, r8, r9
    d3ea:	d00f      	beq.n	d40c <net_buf_alloc_len+0x80>
    d3ec:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    d3f0:	bf08      	it	eq
    d3f2:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    d3f6:	d009      	beq.n	d40c <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
    d3f8:	f003 fce0 	bl	10dbc <sys_clock_tick_get>
    d3fc:	ebba 0700 	subs.w	r7, sl, r0
    d400:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
    d404:	2e00      	cmp	r6, #0
    d406:	bfbc      	itt	lt
    d408:	2700      	movlt	r7, #0
    d40a:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d40c:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    d40e:	4d28      	ldr	r5, [pc, #160]	; (d4b0 <net_buf_alloc_len+0x124>)
    d410:	2230      	movs	r2, #48	; 0x30
    d412:	fb02 5303 	mla	r3, r2, r3, r5
    d416:	a901      	add	r1, sp, #4
    d418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d41a:	681b      	ldr	r3, [r3, #0]
    d41c:	463a      	mov	r2, r7
    d41e:	f8d3 8000 	ldr.w	r8, [r3]
    d422:	4620      	mov	r0, r4
    d424:	4633      	mov	r3, r6
    d426:	47c0      	blx	r8
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    d428:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    d42a:	2800      	cmp	r0, #0
    d42c:	d135      	bne.n	d49a <net_buf_alloc_len+0x10e>
	k_lifo_put(&pool->free, buf);
    d42e:	79a0      	ldrb	r0, [r4, #6]
    d430:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d434:	4621      	mov	r1, r4
    d436:	eb05 1000 	add.w	r0, r5, r0, lsl #4
    d43a:	f005 f856 	bl	124ea <k_queue_prepend>
}
    d43e:	e026      	b.n	d48e <net_buf_alloc_len+0x102>
		uninit_count = pool->uninit_count--;
    d440:	8c28      	ldrh	r0, [r5, #32]
    d442:	1e43      	subs	r3, r0, #1
    d444:	842b      	strh	r3, [r5, #32]
    d446:	f381 8811 	msr	BASEPRI, r1
    d44a:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    d44e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
    d452:	8bea      	ldrh	r2, [r5, #30]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
    d454:	6aec      	ldr	r4, [r5, #44]	; 0x2c
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    d456:	3317      	adds	r3, #23
    d458:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
    d45c:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
    d45e:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
    d462:	4b13      	ldr	r3, [pc, #76]	; (d4b0 <net_buf_alloc_len+0x124>)
    d464:	4a13      	ldr	r2, [pc, #76]	; (d4b4 <net_buf_alloc_len+0x128>)
    d466:	1aeb      	subs	r3, r5, r3
    d468:	111b      	asrs	r3, r3, #4
    d46a:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
    d46c:	71a3      	strb	r3, [r4, #6]
	buf->user_data_size = pool->user_data_size;
    d46e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
    d472:	71e3      	strb	r3, [r4, #7]
		goto success;
    d474:	e7b4      	b.n	d3e0 <net_buf_alloc_len+0x54>
    d476:	f381 8811 	msr	BASEPRI, r1
    d47a:	f3bf 8f6f 	isb	sy
    d47e:	464a      	mov	r2, r9
    d480:	4643      	mov	r3, r8
    d482:	4628      	mov	r0, r5
    d484:	f002 fe1e 	bl	100c4 <z_impl_k_queue_get>
	if (!buf) {
    d488:	4604      	mov	r4, r0
    d48a:	2800      	cmp	r0, #0
    d48c:	d1a8      	bne.n	d3e0 <net_buf_alloc_len+0x54>
		return NULL;
    d48e:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
    d490:	4620      	mov	r0, r4
    d492:	b003      	add	sp, #12
    d494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
    d498:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    d49a:	2300      	movs	r3, #0
    d49c:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
    d49e:	2201      	movs	r2, #1
    d4a0:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
    d4a2:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
    d4a4:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    d4a6:	6923      	ldr	r3, [r4, #16]
    d4a8:	81e2      	strh	r2, [r4, #14]
    d4aa:	60a3      	str	r3, [r4, #8]
	return buf;
    d4ac:	e7f0      	b.n	d490 <net_buf_alloc_len+0x104>
    d4ae:	bf00      	nop
    d4b0:	200004a0 	.word	0x200004a0
    d4b4:	aaaaaaab 	.word	0xaaaaaaab

0000d4b8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    d4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4bc:	4d17      	ldr	r5, [pc, #92]	; (d51c <net_buf_unref+0x64>)
    d4be:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    d4c0:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
    d4c2:	2730      	movs	r7, #48	; 0x30
	while (buf) {
    d4c4:	b90c      	cbnz	r4, d4ca <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    d4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
    d4ca:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    d4cc:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
    d4d0:	3b01      	subs	r3, #1
    d4d2:	b2db      	uxtb	r3, r3
    d4d4:	7123      	strb	r3, [r4, #4]
    d4d6:	2b00      	cmp	r3, #0
    d4d8:	d1f5      	bne.n	d4c6 <net_buf_unref+0xe>
		if (buf->__buf) {
    d4da:	6921      	ldr	r1, [r4, #16]
    d4dc:	b159      	cbz	r1, d4f6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    d4de:	7963      	ldrb	r3, [r4, #5]
    d4e0:	079b      	lsls	r3, r3, #30
    d4e2:	d407      	bmi.n	d4f4 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d4e4:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    d4e6:	fb07 5303 	mla	r3, r7, r3, r5
    d4ea:	4620      	mov	r0, r4
    d4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d4ee:	681b      	ldr	r3, [r3, #0]
    d4f0:	689b      	ldr	r3, [r3, #8]
    d4f2:	4798      	blx	r3
			buf->__buf = NULL;
    d4f4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
    d4f6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    d4f8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
    d4fa:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
    d4fe:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    d500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d502:	b11b      	cbz	r3, d50c <net_buf_unref+0x54>
			pool->destroy(buf);
    d504:	4620      	mov	r0, r4
    d506:	4798      	blx	r3
{
    d508:	4644      	mov	r4, r8
    d50a:	e7db      	b.n	d4c4 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
    d50c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d510:	4621      	mov	r1, r4
    d512:	eb05 1000 	add.w	r0, r5, r0, lsl #4
    d516:	f004 ffe8 	bl	124ea <k_queue_prepend>
}
    d51a:	e7f5      	b.n	d508 <net_buf_unref+0x50>
    d51c:	200004a0 	.word	0x200004a0

0000d520 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
    d520:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    d522:	4804      	ldr	r0, [pc, #16]	; (d534 <xoshiro128_initialize+0x14>)
    d524:	f004 feb8 	bl	12298 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
    d528:	2800      	cmp	r0, #0
}
    d52a:	bf0c      	ite	eq
    d52c:	f06f 0012 	mvneq.w	r0, #18
    d530:	2000      	movne	r0, #0
    d532:	bd08      	pop	{r3, pc}
    d534:	00012c4c 	.word	0x00012c4c

0000d538 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    d538:	4b05      	ldr	r3, [pc, #20]	; (d550 <adc_context_start_sampling+0x18>)
    d53a:	2201      	movs	r2, #1
    d53c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    d540:	f890 108e 	ldrb.w	r1, [r0, #142]	; 0x8e
    d544:	b109      	cbz	r1, d54a <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d546:	60da      	str	r2, [r3, #12]
}
    d548:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d54a:	601a      	str	r2, [r3, #0]
    d54c:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    d54e:	4770      	bx	lr
    d550:	40007000 	.word	0x40007000

0000d554 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    d554:	7908      	ldrb	r0, [r1, #4]
{
    d556:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    d558:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    d55c:	2c07      	cmp	r4, #7
    d55e:	d820      	bhi.n	d5a2 <adc_nrfx_channel_setup+0x4e>
	switch (channel_cfg->gain) {
    d560:	780b      	ldrb	r3, [r1, #0]
    d562:	2b0b      	cmp	r3, #11
    d564:	d81d      	bhi.n	d5a2 <adc_nrfx_channel_setup+0x4e>
    d566:	e8df f003 	tbb	[pc, r3]
    d56a:	0707      	.short	0x0707
    d56c:	061c0707 	.word	0x061c0707
    d570:	211f1c1c 	.word	0x211f1c1c
    d574:	231c      	.short	0x231c
		config.gain = NRF_SAADC_GAIN1_2;
    d576:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
    d578:	784a      	ldrb	r2, [r1, #1]
    d57a:	2a03      	cmp	r2, #3
    d57c:	d01a      	beq.n	d5b4 <adc_nrfx_channel_setup+0x60>
    d57e:	2a04      	cmp	r2, #4
    d580:	d10f      	bne.n	d5a2 <adc_nrfx_channel_setup+0x4e>
	nrf_saadc_channel_config_t config = {
    d582:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    d584:	884a      	ldrh	r2, [r1, #2]
    d586:	f244 060a 	movw	r6, #16394	; 0x400a
    d58a:	42b2      	cmp	r2, r6
    d58c:	d046      	beq.n	d61c <adc_nrfx_channel_setup+0xc8>
    d58e:	d813      	bhi.n	d5b8 <adc_nrfx_channel_setup+0x64>
    d590:	f244 0603 	movw	r6, #16387	; 0x4003
    d594:	42b2      	cmp	r2, r6
    d596:	d03d      	beq.n	d614 <adc_nrfx_channel_setup+0xc0>
    d598:	f244 0605 	movw	r6, #16389	; 0x4005
    d59c:	42b2      	cmp	r2, r6
    d59e:	d03b      	beq.n	d618 <adc_nrfx_channel_setup+0xc4>
    d5a0:	b3e2      	cbz	r2, d61c <adc_nrfx_channel_setup+0xc8>
    d5a2:	f06f 0015 	mvn.w	r0, #21
    d5a6:	e034      	b.n	d612 <adc_nrfx_channel_setup+0xbe>
		config.gain = NRF_SAADC_GAIN1;
    d5a8:	2305      	movs	r3, #5
		break;
    d5aa:	e7e5      	b.n	d578 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
    d5ac:	2306      	movs	r3, #6
		break;
    d5ae:	e7e3      	b.n	d578 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
    d5b0:	2307      	movs	r3, #7
		break;
    d5b2:	e7e1      	b.n	d578 <adc_nrfx_channel_setup+0x24>
	switch (channel_cfg->reference) {
    d5b4:	2501      	movs	r5, #1
    d5b6:	e7e5      	b.n	d584 <adc_nrfx_channel_setup+0x30>
	switch (channel_cfg->acquisition_time) {
    d5b8:	f244 0614 	movw	r6, #16404	; 0x4014
    d5bc:	42b2      	cmp	r2, r6
    d5be:	d02f      	beq.n	d620 <adc_nrfx_channel_setup+0xcc>
    d5c0:	f244 0628 	movw	r6, #16424	; 0x4028
    d5c4:	42b2      	cmp	r2, r6
    d5c6:	d02d      	beq.n	d624 <adc_nrfx_channel_setup+0xd0>
    d5c8:	f244 060f 	movw	r6, #16399	; 0x400f
    d5cc:	42b2      	cmp	r2, r6
    d5ce:	d1e8      	bne.n	d5a2 <adc_nrfx_channel_setup+0x4e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    d5d0:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    d5d2:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    d5d6:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    d5d8:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    d5dc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    d5e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    d5e4:	0122      	lsls	r2, r4, #4
    d5e6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    d5ea:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    d5ee:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    d5f0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    d5f4:	0123      	lsls	r3, r4, #4
    d5f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d5fa:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    d5fe:	798a      	ldrb	r2, [r1, #6]
    d600:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    d604:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    d608:	4b07      	ldr	r3, [pc, #28]	; (d628 <adc_nrfx_channel_setup+0xd4>)
    d60a:	794a      	ldrb	r2, [r1, #5]
    d60c:	4423      	add	r3, r4
    d60e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
    d612:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
    d614:	2200      	movs	r2, #0
    d616:	e7dc      	b.n	d5d2 <adc_nrfx_channel_setup+0x7e>
	switch (channel_cfg->acquisition_time) {
    d618:	2201      	movs	r2, #1
    d61a:	e7da      	b.n	d5d2 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    d61c:	2202      	movs	r2, #2
    d61e:	e7d8      	b.n	d5d2 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    d620:	2204      	movs	r2, #4
    d622:	e7d6      	b.n	d5d2 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    d624:	2205      	movs	r2, #5
    d626:	e7d4      	b.n	d5d2 <adc_nrfx_channel_setup+0x7e>
    d628:	200002c8 	.word	0x200002c8

0000d62c <start_read.constprop.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
    d62c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
    d62e:	6846      	ldr	r6, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    d630:	1e73      	subs	r3, r6, #1
    d632:	2bfe      	cmp	r3, #254	; 0xfe
static int start_read(const struct device *dev,
    d634:	4605      	mov	r5, r0
	if (!selected_channels ||
    d636:	d83c      	bhi.n	d6b2 <start_read.constprop.0+0x86>
    d638:	2300      	movs	r3, #0
    p_reg->CH[channel].PSELP = pselp;
    d63a:	4852      	ldr	r0, [pc, #328]	; (d784 <start_read.constprop.0+0x158>)
	do {
		if (selected_channels & BIT(channel_id)) {
			/* Signal an error if a selected channel has not been
			 * configured yet.
			 */
			if (m_data.positive_inputs[channel_id] == 0U) {
    d63c:	4f52      	ldr	r7, [pc, #328]	; (d788 <start_read.constprop.0+0x15c>)
	active_channels = 0U;
    d63e:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
    d640:	fa26 f103 	lsr.w	r1, r6, r3
    d644:	f011 0101 	ands.w	r1, r1, #1
    d648:	d026      	beq.n	d698 <start_read.constprop.0+0x6c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    d64a:	f817 c003 	ldrb.w	ip, [r7, r3]
    d64e:	f1bc 0f00 	cmp.w	ip, #0
    d652:	d02e      	beq.n	d6b2 <start_read.constprop.0+0x86>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    d654:	eb00 1e03 	add.w	lr, r0, r3, lsl #4
			 * event is not generated) after switching to a single
			 * channel sampling and back. Thus, when oversampling
			 * is not used (hence, the multiple channel sampling is
			 * possible), the burst mode have to be deactivated.
			 */
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    d658:	7c6c      	ldrb	r4, [r5, #17]
    d65a:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
    d65e:	3c00      	subs	r4, #0
    d660:	bf18      	it	ne
    d662:	2401      	movne	r4, #1
    d664:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
    d668:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
    d66c:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    d670:	f103 0151 	add.w	r1, r3, #81	; 0x51
    d674:	0109      	lsls	r1, r1, #4
					NRF_SAADC_BURST_DISABLED));
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				m_data.positive_inputs[channel_id]);
			++active_channels;
    d676:	3201      	adds	r2, #1
    d678:	f840 c001 	str.w	ip, [r0, r1]
    d67c:	b2d2      	uxtb	r2, r2
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
    d67e:	3301      	adds	r3, #1
    d680:	2b08      	cmp	r3, #8
    d682:	d1dd      	bne.n	d640 <start_read.constprop.0+0x14>
	switch (sequence->resolution) {
    d684:	7c2b      	ldrb	r3, [r5, #16]
    d686:	3b08      	subs	r3, #8
    d688:	2b06      	cmp	r3, #6
    d68a:	d812      	bhi.n	d6b2 <start_read.constprop.0+0x86>
    d68c:	e8df f003 	tbb	[pc, r3]
    d690:	11191109 	.word	0x11191109
    d694:	1115      	.short	0x1115
    d696:	17          	.byte	0x17
    d697:	00          	.byte	0x00
    d698:	f103 0451 	add.w	r4, r3, #81	; 0x51
    d69c:	0124      	lsls	r4, r4, #4
    d69e:	5101      	str	r1, [r0, r4]
}
    d6a0:	e7ed      	b.n	d67e <start_read.constprop.0+0x52>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    d6a2:	2300      	movs	r3, #0
    p_reg->RESOLUTION = resolution;
    d6a4:	4937      	ldr	r1, [pc, #220]	; (d784 <start_read.constprop.0+0x158>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    d6a6:	2a01      	cmp	r2, #1
    d6a8:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_resolution(sequence);
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
    d6ac:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    d6ae:	d90a      	bls.n	d6c6 <start_read.constprop.0+0x9a>
    d6b0:	b15b      	cbz	r3, d6ca <start_read.constprop.0+0x9e>
		return -EINVAL;
    d6b2:	f06f 0015 	mvn.w	r0, #21

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    d6b6:	b003      	add	sp, #12
    d6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    d6ba:	2302      	movs	r3, #2
		break;
    d6bc:	e7f2      	b.n	d6a4 <start_read.constprop.0+0x78>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    d6be:	2303      	movs	r3, #3
		break;
    d6c0:	e7f0      	b.n	d6a4 <start_read.constprop.0+0x78>
	switch (sequence->resolution) {
    d6c2:	2301      	movs	r3, #1
    d6c4:	e7ee      	b.n	d6a4 <start_read.constprop.0+0x78>
	switch (sequence->oversampling) {
    d6c6:	2b08      	cmp	r3, #8
    d6c8:	d8f3      	bhi.n	d6b2 <start_read.constprop.0+0x86>
    p_reg->OVERSAMPLE = oversample;
    d6ca:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
    d6ce:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    d6d0:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
    d6d2:	b111      	cbz	r1, d6da <start_read.constprop.0+0xae>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    d6d4:	8989      	ldrh	r1, [r1, #12]
    d6d6:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    d6da:	68e9      	ldr	r1, [r5, #12]
    d6dc:	4299      	cmp	r1, r3
    d6de:	d34d      	bcc.n	d77c <start_read.constprop.0+0x150>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    d6e0:	4b28      	ldr	r3, [pc, #160]	; (d784 <start_read.constprop.0+0x158>)
    d6e2:	68a9      	ldr	r1, [r5, #8]
    d6e4:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    d6e8:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    d6ea:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
    d6ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    d6f0:	4c26      	ldr	r4, [pc, #152]	; (d78c <start_read.constprop.0+0x160>)
    d6f2:	f104 067c 	add.w	r6, r4, #124	; 0x7c
    d6f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    d6f8:	683b      	ldr	r3, [r7, #0]
    d6fa:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
    d6fc:	2600      	movs	r6, #0
    d6fe:	6726      	str	r6, [r4, #112]	; 0x70

	if (sequence->options) {
    d700:	682b      	ldr	r3, [r5, #0]
    d702:	4627      	mov	r7, r4
    d704:	b3a3      	cbz	r3, d770 <start_read.constprop.0+0x144>
		ctx->options = *sequence->options;
    d706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d708:	f104 0590 	add.w	r5, r4, #144	; 0x90
    d70c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    d710:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
    d712:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
    d716:	b358      	cbz	r0, d770 <start_read.constprop.0+0x144>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d718:	f3bf 8f5b 	dmb	ish
    d71c:	e857 3f00 	ldrex	r3, [r7]
    d720:	e847 6200 	strex	r2, r6, [r7]
    d724:	2a00      	cmp	r2, #0
    d726:	d1f9      	bne.n	d71c <start_read.constprop.0+0xf0>
    d728:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    d72c:	4918      	ldr	r1, [pc, #96]	; (d790 <start_read.constprop.0+0x164>)
    d72e:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    d732:	4a18      	ldr	r2, [pc, #96]	; (d794 <start_read.constprop.0+0x168>)
    d734:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d738:	460f      	mov	r7, r1
    d73a:	4631      	mov	r1, r6
    d73c:	fbe5 7100 	umlal	r7, r1, r5, r0
    d740:	2300      	movs	r3, #0
    d742:	4638      	mov	r0, r7
    d744:	f7f3 f8a6 	bl	894 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    d748:	2200      	movs	r2, #0
    d74a:	e9cd 0100 	strd	r0, r1, [sp]
    d74e:	2300      	movs	r3, #0
    d750:	f104 0008 	add.w	r0, r4, #8
    d754:	f003 fbb6 	bl	10ec4 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
    d758:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d75c:	b963      	cbnz	r3, d778 <start_read.constprop.0+0x14c>
	return z_impl_k_sem_take(sem, timeout);
    d75e:	480e      	ldr	r0, [pc, #56]	; (d798 <start_read.constprop.0+0x16c>)
    d760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d768:	f002 fd04 	bl	10174 <z_impl_k_sem_take>
	return ctx->status;
    d76c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    d76e:	e7a2      	b.n	d6b6 <start_read.constprop.0+0x8a>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    d770:	4806      	ldr	r0, [pc, #24]	; (d78c <start_read.constprop.0+0x160>)
    d772:	f7ff fee1 	bl	d538 <adc_context_start_sampling>
    d776:	e7ef      	b.n	d758 <start_read.constprop.0+0x12c>
		return 0;
    d778:	2000      	movs	r0, #0
	return error;
    d77a:	e79c      	b.n	d6b6 <start_read.constprop.0+0x8a>
		return -ENOMEM;
    d77c:	f06f 000b 	mvn.w	r0, #11
    d780:	e799      	b.n	d6b6 <start_read.constprop.0+0x8a>
    d782:	bf00      	nop
    d784:	40007000 	.word	0x40007000
    d788:	20000370 	.word	0x20000370
    d78c:	200002c8 	.word	0x200002c8
    d790:	000f423f 	.word	0x000f423f
    d794:	000f4240 	.word	0x000f4240
    d798:	20000320 	.word	0x20000320

0000d79c <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
    d79c:	b570      	push	{r4, r5, r6, lr}
    d79e:	460c      	mov	r4, r1
    d7a0:	4616      	mov	r6, r2
	ctx->asynchronous = asynchronous;
    d7a2:	4d0c      	ldr	r5, [pc, #48]	; (d7d4 <adc_nrfx_read_async+0x38>)
    d7a4:	480c      	ldr	r0, [pc, #48]	; (d7d8 <adc_nrfx_read_async+0x3c>)
    d7a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d7aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d7ae:	f002 fce1 	bl	10174 <z_impl_k_sem_take>
    d7b2:	2301      	movs	r3, #1
    d7b4:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
    d7b8:	4620      	mov	r0, r4
	ctx->signal = signal;
    d7ba:	676e      	str	r6, [r5, #116]	; 0x74
    d7bc:	f7ff ff36 	bl	d62c <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
    d7c0:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    d7c4:	4604      	mov	r4, r0
    d7c6:	b103      	cbz	r3, d7ca <adc_nrfx_read_async+0x2e>
    d7c8:	b110      	cbz	r0, d7d0 <adc_nrfx_read_async+0x34>
	z_impl_k_sem_give(sem);
    d7ca:	4803      	ldr	r0, [pc, #12]	; (d7d8 <adc_nrfx_read_async+0x3c>)
    d7cc:	f002 fcac 	bl	10128 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    d7d0:	4620      	mov	r0, r4
    d7d2:	bd70      	pop	{r4, r5, r6, pc}
    d7d4:	200002c8 	.word	0x200002c8
    d7d8:	20000308 	.word	0x20000308

0000d7dc <adc_nrfx_read>:
{
    d7dc:	b538      	push	{r3, r4, r5, lr}
    d7de:	460c      	mov	r4, r1
	ctx->asynchronous = asynchronous;
    d7e0:	4d0c      	ldr	r5, [pc, #48]	; (d814 <adc_nrfx_read+0x38>)
	return z_impl_k_sem_take(sem, timeout);
    d7e2:	480d      	ldr	r0, [pc, #52]	; (d818 <adc_nrfx_read+0x3c>)
    d7e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d7e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d7ec:	f002 fcc2 	bl	10174 <z_impl_k_sem_take>
    d7f0:	2300      	movs	r3, #0
    d7f2:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    d7f6:	676b      	str	r3, [r5, #116]	; 0x74
	error = start_read(dev, sequence);
    d7f8:	4620      	mov	r0, r4
    d7fa:	f7ff ff17 	bl	d62c <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
    d7fe:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    d802:	4604      	mov	r4, r0
    d804:	b103      	cbz	r3, d808 <adc_nrfx_read+0x2c>
    d806:	b110      	cbz	r0, d80e <adc_nrfx_read+0x32>
	z_impl_k_sem_give(sem);
    d808:	4803      	ldr	r0, [pc, #12]	; (d818 <adc_nrfx_read+0x3c>)
    d80a:	f002 fc8d 	bl	10128 <z_impl_k_sem_give>
}
    d80e:	4620      	mov	r0, r4
    d810:	bd38      	pop	{r3, r4, r5, pc}
    d812:	bf00      	nop
    d814:	200002c8 	.word	0x200002c8
    d818:	20000308 	.word	0x20000308

0000d81c <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    d81c:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d81e:	4b0e      	ldr	r3, [pc, #56]	; (d858 <init_saadc+0x3c>)
    d820:	2400      	movs	r4, #0
    d822:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    d826:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    d82a:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    d82e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    d832:	2212      	movs	r2, #18
    d834:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    d838:	2007      	movs	r0, #7
    d83a:	f7fe fa47 	bl	bccc <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d83e:	4622      	mov	r2, r4
    d840:	2101      	movs	r1, #1
    d842:	2007      	movs	r0, #7
    d844:	f7fe fa72 	bl	bd2c <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    d848:	4804      	ldr	r0, [pc, #16]	; (d85c <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
    d84a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    d84c:	b913      	cbnz	r3, d854 <init_saadc+0x38>
    d84e:	3040      	adds	r0, #64	; 0x40
    d850:	f002 fc6a 	bl	10128 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    d854:	2000      	movs	r0, #0
    d856:	bd10      	pop	{r4, pc}
    d858:	40007000 	.word	0x40007000
    d85c:	200002c8 	.word	0x200002c8

0000d860 <saadc_irq_handler>:
{
    d860:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d862:	4b34      	ldr	r3, [pc, #208]	; (d934 <saadc_irq_handler+0xd4>)
    d864:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    d868:	2a00      	cmp	r2, #0
    d86a:	d056      	beq.n	d91a <saadc_irq_handler+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d86c:	2200      	movs	r2, #0
    d86e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    d872:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    d876:	4c30      	ldr	r4, [pc, #192]	; (d938 <saadc_irq_handler+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d878:	2101      	movs	r1, #1
    d87a:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    d87c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    d880:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    d882:	4625      	mov	r5, r4
    d884:	b3d3      	cbz	r3, d8fc <saadc_irq_handler+0x9c>
		adc_sequence_callback callback = ctx->options.callback;
    d886:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
    d88a:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
		if (callback) {
    d88e:	b133      	cbz	r3, d89e <saadc_irq_handler+0x3e>
			action = callback(dev,
    d890:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    d894:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    d896:	2801      	cmp	r0, #1
    d898:	d014      	beq.n	d8c4 <saadc_irq_handler+0x64>
    d89a:	2802      	cmp	r0, #2
    d89c:	d028      	beq.n	d8f0 <saadc_irq_handler+0x90>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    d89e:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    d8a2:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    d8a6:	429a      	cmp	r2, r3
    d8a8:	d922      	bls.n	d8f0 <saadc_irq_handler+0x90>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    d8aa:	3301      	adds	r3, #1
    d8ac:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    d8b0:	4b20      	ldr	r3, [pc, #128]	; (d934 <saadc_irq_handler+0xd4>)
    d8b2:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    d8b6:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    d8ba:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    d8bc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    d8c0:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    d8c4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    d8c8:	b923      	cbnz	r3, d8d4 <saadc_irq_handler+0x74>
}
    d8ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
    d8ce:	481a      	ldr	r0, [pc, #104]	; (d938 <saadc_irq_handler+0xd8>)
    d8d0:	f7ff be32 	b.w	d538 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    d8d4:	f3bf 8f5b 	dmb	ish
    d8d8:	e855 3f00 	ldrex	r3, [r5]
    d8dc:	1e5a      	subs	r2, r3, #1
    d8de:	e845 2100 	strex	r1, r2, [r5]
    d8e2:	2900      	cmp	r1, #0
    d8e4:	d1f8      	bne.n	d8d8 <saadc_irq_handler+0x78>
    d8e6:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    d8ea:	2b01      	cmp	r3, #1
    d8ec:	dced      	bgt.n	d8ca <saadc_irq_handler+0x6a>
    d8ee:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    d8f0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    d8f4:	b113      	cbz	r3, d8fc <saadc_irq_handler+0x9c>
	z_impl_k_timer_stop(timer);
    d8f6:	4811      	ldr	r0, [pc, #68]	; (d93c <saadc_irq_handler+0xdc>)
    d8f8:	f005 f88c 	bl	12a14 <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
    d8fc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d900:	b14b      	cbz	r3, d916 <saadc_irq_handler+0xb6>
		if (ctx->signal) {
    d902:	6f60      	ldr	r0, [r4, #116]	; 0x74
    d904:	b110      	cbz	r0, d90c <saadc_irq_handler+0xac>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    d906:	2100      	movs	r1, #0
    d908:	f003 fb28 	bl	10f5c <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
    d90c:	480c      	ldr	r0, [pc, #48]	; (d940 <saadc_irq_handler+0xe0>)
    d90e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d912:	f002 bc09 	b.w	10128 <z_impl_k_sem_give>
    d916:	480b      	ldr	r0, [pc, #44]	; (d944 <saadc_irq_handler+0xe4>)
    d918:	e7f9      	b.n	d90e <saadc_irq_handler+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d91a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    d91e:	2900      	cmp	r1, #0
    d920:	d0e5      	beq.n	d8ee <saadc_irq_handler+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d922:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    d926:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d92a:	2201      	movs	r2, #1
    d92c:	609a      	str	r2, [r3, #8]
    d92e:	601a      	str	r2, [r3, #0]
    d930:	605a      	str	r2, [r3, #4]
}
    d932:	e7dc      	b.n	d8ee <saadc_irq_handler+0x8e>
    d934:	40007000 	.word	0x40007000
    d938:	200002c8 	.word	0x200002c8
    d93c:	200002d0 	.word	0x200002d0
    d940:	20000308 	.word	0x20000308
    d944:	20000320 	.word	0x20000320

0000d948 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    d948:	b570      	push	{r4, r5, r6, lr}
    d94a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    d94c:	4906      	ldr	r1, [pc, #24]	; (d968 <onoff_stop+0x20>)
    d94e:	1a41      	subs	r1, r0, r1
{
    d950:	4604      	mov	r4, r0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    d952:	1149      	asrs	r1, r1, #5
    d954:	4805      	ldr	r0, [pc, #20]	; (d96c <onoff_stop+0x24>)
    d956:	2240      	movs	r2, #64	; 0x40
    d958:	f004 f987 	bl	11c6a <stop>
	notify(mgr, res);
    d95c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    d95e:	4601      	mov	r1, r0
	notify(mgr, res);
    d960:	4620      	mov	r0, r4
}
    d962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    d966:	4718      	bx	r3
    d968:	2000157c 	.word	0x2000157c
    d96c:	00012c1c 	.word	0x00012c1c

0000d970 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    d970:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d972:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    d974:	490a      	ldr	r1, [pc, #40]	; (d9a0 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d976:	4a0b      	ldr	r2, [pc, #44]	; (d9a4 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    d978:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d97a:	2340      	movs	r3, #64	; 0x40
    d97c:	9300      	str	r3, [sp, #0]
    d97e:	1149      	asrs	r1, r1, #5
{
    d980:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d982:	4623      	mov	r3, r4
    d984:	4808      	ldr	r0, [pc, #32]	; (d9a8 <onoff_start+0x38>)
    d986:	f004 f99d 	bl	11cc4 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    d98a:	1e01      	subs	r1, r0, #0
    d98c:	da05      	bge.n	d99a <onoff_start+0x2a>
		notify(mgr, err);
    d98e:	4628      	mov	r0, r5
    d990:	4623      	mov	r3, r4
	}
}
    d992:	b003      	add	sp, #12
    d994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    d998:	4718      	bx	r3
}
    d99a:	b003      	add	sp, #12
    d99c:	bd30      	pop	{r4, r5, pc}
    d99e:	bf00      	nop
    d9a0:	2000157c 	.word	0x2000157c
    d9a4:	00011d31 	.word	0x00011d31
    d9a8:	00012c1c 	.word	0x00012c1c

0000d9ac <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d9ac:	2200      	movs	r2, #0
{
    d9ae:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d9b0:	2101      	movs	r1, #1
{
    d9b2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d9b4:	4610      	mov	r0, r2
    d9b6:	f7fe f9b9 	bl	bd2c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    d9ba:	480f      	ldr	r0, [pc, #60]	; (d9f8 <clk_init+0x4c>)
    d9bc:	f001 fb4a 	bl	f054 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    d9c0:	4b0e      	ldr	r3, [pc, #56]	; (d9fc <clk_init+0x50>)
    d9c2:	4298      	cmp	r0, r3
    d9c4:	d115      	bne.n	d9f2 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    d9c6:	f004 fc1f 	bl	12208 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    d9ca:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    d9cc:	490c      	ldr	r1, [pc, #48]	; (da00 <clk_init+0x54>)
    d9ce:	4630      	mov	r0, r6
    d9d0:	f003 fde6 	bl	115a0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    d9d4:	2800      	cmp	r0, #0
    d9d6:	db0b      	blt.n	d9f0 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d9d8:	2501      	movs	r5, #1
    d9da:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
    d9dc:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    d9de:	4908      	ldr	r1, [pc, #32]	; (da00 <clk_init+0x54>)
    d9e0:	f104 0020 	add.w	r0, r4, #32
    d9e4:	f003 fddc 	bl	115a0 <onoff_manager_init>
		if (err < 0) {
    d9e8:	2800      	cmp	r0, #0
    d9ea:	db01      	blt.n	d9f0 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d9ec:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    d9ee:	2000      	movs	r0, #0
}
    d9f0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    d9f2:	f06f 0004 	mvn.w	r0, #4
    d9f6:	e7fb      	b.n	d9f0 <clk_init+0x44>
    d9f8:	0000da39 	.word	0x0000da39
    d9fc:	0bad0000 	.word	0x0bad0000
    da00:	00012f2c 	.word	0x00012f2c

0000da04 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    da04:	b570      	push	{r4, r5, r6, lr}
    da06:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    da08:	230c      	movs	r3, #12
    da0a:	4809      	ldr	r0, [pc, #36]	; (da30 <clkstarted_handle.constprop.0+0x2c>)
    da0c:	434b      	muls	r3, r1
    da0e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    da10:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    da14:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    da16:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    da18:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    da1a:	4418      	add	r0, r3
    da1c:	f004 f912 	bl	11c44 <set_on_state>
	if (callback) {
    da20:	b12d      	cbz	r5, da2e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    da22:	4632      	mov	r2, r6
    da24:	462b      	mov	r3, r5
    da26:	4803      	ldr	r0, [pc, #12]	; (da34 <clkstarted_handle.constprop.0+0x30>)
}
    da28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    da2c:	4718      	bx	r3
}
    da2e:	bd70      	pop	{r4, r5, r6, pc}
    da30:	2000157c 	.word	0x2000157c
    da34:	00012c1c 	.word	0x00012c1c

0000da38 <clock_event_handler>:
	switch (event) {
    da38:	b110      	cbz	r0, da40 <clock_event_handler+0x8>
    da3a:	2801      	cmp	r0, #1
    da3c:	d004      	beq.n	da48 <clock_event_handler+0x10>
    da3e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    da40:	4b03      	ldr	r3, [pc, #12]	; (da50 <clock_event_handler+0x18>)
    da42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    da44:	075b      	lsls	r3, r3, #29
    da46:	d101      	bne.n	da4c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    da48:	f7ff bfdc 	b.w	da04 <clkstarted_handle.constprop.0>
}
    da4c:	4770      	bx	lr
    da4e:	bf00      	nop
    da50:	2000157c 	.word	0x2000157c

0000da54 <generic_hfclk_start>:
{
    da54:	b508      	push	{r3, lr}
	__asm__ volatile(
    da56:	f04f 0340 	mov.w	r3, #64	; 0x40
    da5a:	f3ef 8111 	mrs	r1, BASEPRI
    da5e:	f383 8812 	msr	BASEPRI_MAX, r3
    da62:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    da66:	4a12      	ldr	r2, [pc, #72]	; (dab0 <generic_hfclk_start+0x5c>)
    da68:	6813      	ldr	r3, [r2, #0]
    da6a:	f043 0002 	orr.w	r0, r3, #2
    da6e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    da70:	07da      	lsls	r2, r3, #31
    da72:	d408      	bmi.n	da86 <generic_hfclk_start+0x32>
	__asm__ volatile(
    da74:	f381 8811 	msr	BASEPRI, r1
    da78:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    da7c:	2001      	movs	r0, #1
}
    da7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    da82:	f001 bad7 	b.w	f034 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    da86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    da8a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    da8e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    da92:	07d3      	lsls	r3, r2, #31
    da94:	d5ee      	bpl.n	da74 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    da96:	4807      	ldr	r0, [pc, #28]	; (dab4 <generic_hfclk_start+0x60>)
    da98:	f004 f8d4 	bl	11c44 <set_on_state>
    da9c:	f381 8811 	msr	BASEPRI, r1
    daa0:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    daa4:	2000      	movs	r0, #0
}
    daa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    daaa:	f7ff bfab 	b.w	da04 <clkstarted_handle.constprop.0>
    daae:	bf00      	nop
    dab0:	200015d4 	.word	0x200015d4
    dab4:	200015c4 	.word	0x200015c4

0000dab8 <api_blocking_start>:
{
    dab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    daba:	2200      	movs	r2, #0
    dabc:	2301      	movs	r3, #1
    dabe:	e9cd 2302 	strd	r2, r3, [sp, #8]
    dac2:	ab04      	add	r3, sp, #16
    dac4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    dac8:	4a09      	ldr	r2, [pc, #36]	; (daf0 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    daca:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    dace:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    dad0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    dad4:	f004 f925 	bl	11d22 <api_start>
	if (err < 0) {
    dad8:	2800      	cmp	r0, #0
    dada:	db05      	blt.n	dae8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    dadc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    dae0:	2300      	movs	r3, #0
    dae2:	4668      	mov	r0, sp
    dae4:	f002 fb46 	bl	10174 <z_impl_k_sem_take>
}
    dae8:	b007      	add	sp, #28
    daea:	f85d fb04 	ldr.w	pc, [sp], #4
    daee:	bf00      	nop
    daf0:	00011d49 	.word	0x00011d49

0000daf4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    daf4:	4b09      	ldr	r3, [pc, #36]	; (db1c <generic_hfclk_stop+0x28>)
    daf6:	f3bf 8f5b 	dmb	ish
    dafa:	e853 2f00 	ldrex	r2, [r3]
    dafe:	f022 0102 	bic.w	r1, r2, #2
    db02:	e843 1000 	strex	r0, r1, [r3]
    db06:	2800      	cmp	r0, #0
    db08:	d1f7      	bne.n	dafa <generic_hfclk_stop+0x6>
    db0a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    db0e:	07d3      	lsls	r3, r2, #31
    db10:	d402      	bmi.n	db18 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    db12:	2001      	movs	r0, #1
    db14:	f004 bb73 	b.w	121fe <nrfx_clock_stop>
}
    db18:	4770      	bx	lr
    db1a:	bf00      	nop
    db1c:	200015d4 	.word	0x200015d4

0000db20 <z_nrf_clock_control_lf_on>:
{
    db20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    db22:	4928      	ldr	r1, [pc, #160]	; (dbc4 <z_nrf_clock_control_lf_on+0xa4>)
    db24:	f3bf 8f5b 	dmb	ish
    db28:	4606      	mov	r6, r0
    db2a:	2201      	movs	r2, #1
    db2c:	e851 3f00 	ldrex	r3, [r1]
    db30:	e841 2000 	strex	r0, r2, [r1]
    db34:	2800      	cmp	r0, #0
    db36:	d1f9      	bne.n	db2c <z_nrf_clock_control_lf_on+0xc>
    db38:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    db3c:	b933      	cbnz	r3, db4c <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    db3e:	4922      	ldr	r1, [pc, #136]	; (dbc8 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
    db40:	4822      	ldr	r0, [pc, #136]	; (dbcc <z_nrf_clock_control_lf_on+0xac>)
    db42:	604b      	str	r3, [r1, #4]
    db44:	60cb      	str	r3, [r1, #12]
    db46:	608a      	str	r2, [r1, #8]
    db48:	f003 fd3d 	bl	115c6 <onoff_request>
	switch (start_mode) {
    db4c:	1e73      	subs	r3, r6, #1
    db4e:	2b01      	cmp	r3, #1
    db50:	d81d      	bhi.n	db8e <z_nrf_clock_control_lf_on+0x6e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    db52:	f004 fc3d 	bl	123d0 <k_is_in_isr>
    db56:	4604      	mov	r4, r0
    db58:	b9d0      	cbnz	r0, db90 <z_nrf_clock_control_lf_on+0x70>
	return !z_sys_post_kernel;
    db5a:	4b1d      	ldr	r3, [pc, #116]	; (dbd0 <z_nrf_clock_control_lf_on+0xb0>)
    db5c:	781b      	ldrb	r3, [r3, #0]
    db5e:	b1bb      	cbz	r3, db90 <z_nrf_clock_control_lf_on+0x70>
    p_reg->INTENCLR = mask;
    db60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    db64:	2202      	movs	r2, #2
    db66:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    db6a:	4605      	mov	r5, r0
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    db6c:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    db70:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    db74:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    db78:	03d2      	lsls	r2, r2, #15
    db7a:	d513      	bpl.n	dba4 <z_nrf_clock_control_lf_on+0x84>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    db7c:	079b      	lsls	r3, r3, #30
    db7e:	d001      	beq.n	db84 <z_nrf_clock_control_lf_on+0x64>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    db80:	2e01      	cmp	r6, #1
    db82:	d10f      	bne.n	dba4 <z_nrf_clock_control_lf_on+0x84>
	if (isr_mode) {
    db84:	b1c4      	cbz	r4, dbb8 <z_nrf_clock_control_lf_on+0x98>
    db86:	f385 8811 	msr	BASEPRI, r5
    db8a:	f3bf 8f6f 	isb	sy
}
    db8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    db90:	f04f 0340 	mov.w	r3, #64	; 0x40
    db94:	f3ef 8511 	mrs	r5, BASEPRI
    db98:	f383 8812 	msr	BASEPRI_MAX, r3
    db9c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    dba0:	2401      	movs	r4, #1
    dba2:	e7e3      	b.n	db6c <z_nrf_clock_control_lf_on+0x4c>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    dba4:	b11c      	cbz	r4, dbae <z_nrf_clock_control_lf_on+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    dba6:	4628      	mov	r0, r5
    dba8:	f7fe f886 	bl	bcb8 <arch_cpu_atomic_idle>
}
    dbac:	e7e0      	b.n	db70 <z_nrf_clock_control_lf_on+0x50>
	return z_impl_k_sleep(timeout);
    dbae:	2100      	movs	r1, #0
    dbb0:	2021      	movs	r0, #33	; 0x21
    dbb2:	f002 ff31 	bl	10a18 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    dbb6:	e7db      	b.n	db70 <z_nrf_clock_control_lf_on+0x50>
    p_reg->INTENSET = mask;
    dbb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dbbc:	2202      	movs	r2, #2
    dbbe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    dbc2:	e7e4      	b.n	db8e <z_nrf_clock_control_lf_on+0x6e>
    dbc4:	20001578 	.word	0x20001578
    dbc8:	20001568 	.word	0x20001568
    dbcc:	2000159c 	.word	0x2000159c
    dbd0:	20001b94 	.word	0x20001b94

0000dbd4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    dbd4:	b530      	push	{r4, r5, lr}
	return port->config;
    dbd6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    dbd8:	7b05      	ldrb	r5, [r0, #12]
    dbda:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    dbde:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    dbe2:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    dbe4:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    dbe8:	d105      	bne.n	dbf6 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    dbea:	4620      	mov	r0, r4
    dbec:	f001 fd5c 	bl	f6a8 <nrfx_gpiote_trigger_disable>

		return 0;
    dbf0:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    dbf2:	b005      	add	sp, #20
    dbf4:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    dbf6:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    dbf8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    dbfc:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    dc00:	d114      	bne.n	dc2c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    dc02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    dc06:	bf0c      	ite	eq
    dc08:	2304      	moveq	r3, #4
    dc0a:	2305      	movne	r3, #5
    dc0c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    dc10:	2300      	movs	r3, #0
    dc12:	4619      	mov	r1, r3
    dc14:	aa02      	add	r2, sp, #8
    dc16:	4620      	mov	r0, r4
    dc18:	f001 fb7c 	bl	f314 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    dc1c:	4b1d      	ldr	r3, [pc, #116]	; (dc94 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    dc1e:	4298      	cmp	r0, r3
    dc20:	d135      	bne.n	dc8e <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    dc22:	2101      	movs	r1, #1
    dc24:	4620      	mov	r0, r4
    dc26:	f001 fcfb 	bl	f620 <nrfx_gpiote_trigger_enable>
	return 0;
    dc2a:	e7e1      	b.n	dbf0 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    dc2c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    dc30:	d022      	beq.n	dc78 <gpio_nrfx_pin_interrupt_configure+0xa4>
    dc32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    dc36:	bf14      	ite	ne
    dc38:	2301      	movne	r3, #1
    dc3a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    dc3c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    dc40:	6883      	ldr	r3, [r0, #8]
    dc42:	40cb      	lsrs	r3, r1
    dc44:	07d9      	lsls	r1, r3, #31
    dc46:	d4e3      	bmi.n	dc10 <gpio_nrfx_pin_interrupt_configure+0x3c>
    dc48:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    dc4c:	d1e0      	bne.n	dc10 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    dc4e:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    dc52:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    dc56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    dc5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    dc5e:	07db      	lsls	r3, r3, #31
    dc60:	d4d6      	bmi.n	dc10 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    dc62:	f10d 0507 	add.w	r5, sp, #7
    dc66:	4629      	mov	r1, r5
    dc68:	4620      	mov	r0, r4
    dc6a:	f001 fc85 	bl	f578 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    dc6e:	4b0a      	ldr	r3, [pc, #40]	; (dc98 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    dc70:	4298      	cmp	r0, r3
    dc72:	d003      	beq.n	dc7c <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    dc74:	9503      	str	r5, [sp, #12]
    dc76:	e7cb      	b.n	dc10 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    dc78:	2303      	movs	r3, #3
    dc7a:	e7df      	b.n	dc3c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    dc7c:	4628      	mov	r0, r5
    dc7e:	f001 fcc9 	bl	f614 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    dc82:	4b04      	ldr	r3, [pc, #16]	; (dc94 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    dc84:	4298      	cmp	r0, r3
    dc86:	d0f5      	beq.n	dc74 <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
    dc88:	f06f 000b 	mvn.w	r0, #11
    dc8c:	e7b1      	b.n	dbf2 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    dc8e:	f06f 0015 	mvn.w	r0, #21
    dc92:	e7ae      	b.n	dbf2 <gpio_nrfx_pin_interrupt_configure+0x1e>
    dc94:	0bad0000 	.word	0x0bad0000
    dc98:	0bad0004 	.word	0x0bad0004

0000dc9c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    dc9c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    dc9e:	f001 fca9 	bl	f5f4 <nrfx_gpiote_is_init>
    dca2:	4604      	mov	r4, r0
    dca4:	b968      	cbnz	r0, dcc2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    dca6:	f001 fc7d 	bl	f5a4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    dcaa:	4b08      	ldr	r3, [pc, #32]	; (dccc <gpio_nrfx_init+0x30>)
    dcac:	4298      	cmp	r0, r3
    dcae:	d10a      	bne.n	dcc6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    dcb0:	4807      	ldr	r0, [pc, #28]	; (dcd0 <gpio_nrfx_init+0x34>)
    dcb2:	4621      	mov	r1, r4
    dcb4:	f001 fc5a 	bl	f56c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    dcb8:	4622      	mov	r2, r4
    dcba:	2105      	movs	r1, #5
    dcbc:	2006      	movs	r0, #6
    dcbe:	f7fe f835 	bl	bd2c <z_arm_irq_priority_set>
		return 0;
    dcc2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    dcc4:	bd10      	pop	{r4, pc}
		return -EIO;
    dcc6:	f06f 0004 	mvn.w	r0, #4
    dcca:	e7fb      	b.n	dcc4 <gpio_nrfx_init+0x28>
    dccc:	0bad0000 	.word	0x0bad0000
    dcd0:	0000dcd5 	.word	0x0000dcd5

0000dcd4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    dcd4:	0943      	lsrs	r3, r0, #5
{
    dcd6:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    dcd8:	d107      	bne.n	dcea <nrfx_gpio_handler+0x16>
    dcda:	4b0b      	ldr	r3, [pc, #44]	; (dd08 <nrfx_gpio_handler+0x34>)
    dcdc:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    dcde:	b121      	cbz	r1, dcea <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    dce0:	2501      	movs	r5, #1
	return node->next;
    dce2:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    dce4:	4e09      	ldr	r6, [pc, #36]	; (dd0c <nrfx_gpio_handler+0x38>)
    dce6:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    dce8:	b901      	cbnz	r1, dcec <nrfx_gpio_handler+0x18>
}
    dcea:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    dcec:	688a      	ldr	r2, [r1, #8]
    dcee:	402a      	ands	r2, r5
    dcf0:	d002      	beq.n	dcf8 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    dcf2:	684b      	ldr	r3, [r1, #4]
    dcf4:	4630      	mov	r0, r6
    dcf6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    dcf8:	b11c      	cbz	r4, dd02 <nrfx_gpio_handler+0x2e>
    dcfa:	6823      	ldr	r3, [r4, #0]
    dcfc:	4621      	mov	r1, r4
    dcfe:	461c      	mov	r4, r3
    dd00:	e7f2      	b.n	dce8 <nrfx_gpio_handler+0x14>
    dd02:	4623      	mov	r3, r4
    dd04:	e7fa      	b.n	dcfc <nrfx_gpio_handler+0x28>
    dd06:	bf00      	nop
    dd08:	200015d8 	.word	0x200015d8
    dd0c:	00012c34 	.word	0x00012c34

0000dd10 <gpio_nrfx_pin_configure>:
{
    dd10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    dd14:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    dd16:	7b3b      	ldrb	r3, [r7, #12]
    dd18:	f001 051f 	and.w	r5, r1, #31
    dd1c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    dd20:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    dd22:	4628      	mov	r0, r5
    dd24:	f10d 0103 	add.w	r1, sp, #3
{
    dd28:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    dd2a:	f001 fc25 	bl	f578 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    dd2e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    dd32:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    dd34:	d10b      	bne.n	dd4e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    dd36:	4628      	mov	r0, r5
    dd38:	f001 fcde 	bl	f6f8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    dd3c:	4b3d      	ldr	r3, [pc, #244]	; (de34 <gpio_nrfx_pin_configure+0x124>)
    dd3e:	4598      	cmp	r8, r3
    dd40:	d103      	bne.n	dd4a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    dd42:	f89d 0003 	ldrb.w	r0, [sp, #3]
    dd46:	f001 fc5f 	bl	f608 <nrfx_gpiote_channel_free>
		return 0;
    dd4a:	2000      	movs	r0, #0
    dd4c:	e00c      	b.n	dd68 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    dd4e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    dd50:	4619      	mov	r1, r3
    dd52:	aa02      	add	r2, sp, #8
    dd54:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    dd56:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    dd5a:	f001 fadb 	bl	f314 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    dd5e:	4b35      	ldr	r3, [pc, #212]	; (de34 <gpio_nrfx_pin_configure+0x124>)
    dd60:	4298      	cmp	r0, r3
    dd62:	d004      	beq.n	dd6e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    dd64:	f06f 0015 	mvn.w	r0, #21
}
    dd68:	b004      	add	sp, #16
    dd6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    dd6e:	4580      	cmp	r8, r0
    dd70:	d103      	bne.n	dd7a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    dd72:	f89d 0003 	ldrb.w	r0, [sp, #3]
    dd76:	f001 fc47 	bl	f608 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    dd7a:	03a3      	lsls	r3, r4, #14
    dd7c:	d54b      	bpl.n	de16 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    dd7e:	f240 3306 	movw	r3, #774	; 0x306
    dd82:	4023      	ands	r3, r4
    dd84:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    dd88:	d019      	beq.n	ddbe <gpio_nrfx_pin_configure+0xae>
    dd8a:	d80c      	bhi.n	dda6 <gpio_nrfx_pin_configure+0x96>
    dd8c:	2b06      	cmp	r3, #6
    dd8e:	d017      	beq.n	ddc0 <gpio_nrfx_pin_configure+0xb0>
    dd90:	d804      	bhi.n	dd9c <gpio_nrfx_pin_configure+0x8c>
    dd92:	b1ab      	cbz	r3, ddc0 <gpio_nrfx_pin_configure+0xb0>
    dd94:	2b02      	cmp	r3, #2
    dd96:	d1e5      	bne.n	dd64 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    dd98:	2304      	movs	r3, #4
    dd9a:	e011      	b.n	ddc0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    dd9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    dda0:	d1e0      	bne.n	dd64 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    dda2:	2301      	movs	r3, #1
    dda4:	e00c      	b.n	ddc0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    dda6:	f240 2202 	movw	r2, #514	; 0x202
    ddaa:	4293      	cmp	r3, r2
    ddac:	d027      	beq.n	ddfe <gpio_nrfx_pin_configure+0xee>
    ddae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    ddb2:	d026      	beq.n	de02 <gpio_nrfx_pin_configure+0xf2>
    ddb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    ddb8:	d1d4      	bne.n	dd64 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    ddba:	2302      	movs	r3, #2
    ddbc:	e000      	b.n	ddc0 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    ddbe:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    ddc0:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    ddc4:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    ddc8:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    ddcc:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    ddce:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    ddd2:	bf54      	ite	pl
    ddd4:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    ddd8:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    ddda:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    dddc:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    dde0:	d511      	bpl.n	de06 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    dde2:	687a      	ldr	r2, [r7, #4]
    dde4:	2301      	movs	r3, #1
    dde6:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    dde8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    ddec:	2200      	movs	r2, #0
    ddee:	a901      	add	r1, sp, #4
    ddf0:	4628      	mov	r0, r5
    ddf2:	f001 fb3d 	bl	f470 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    ddf6:	4b0f      	ldr	r3, [pc, #60]	; (de34 <gpio_nrfx_pin_configure+0x124>)
    ddf8:	4298      	cmp	r0, r3
    ddfa:	d0a6      	beq.n	dd4a <gpio_nrfx_pin_configure+0x3a>
    ddfc:	e7b2      	b.n	dd64 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    ddfe:	2305      	movs	r3, #5
    de00:	e7de      	b.n	ddc0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    de02:	2303      	movs	r3, #3
    de04:	e7dc      	b.n	ddc0 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    de06:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    de08:	bf41      	itttt	mi
    de0a:	2301      	movmi	r3, #1
    de0c:	687a      	ldrmi	r2, [r7, #4]
    de0e:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    de10:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    de14:	e7ea      	b.n	ddec <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    de16:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    de18:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    de1c:	bf54      	ite	pl
    de1e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    de22:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    de24:	461a      	mov	r2, r3
    de26:	a901      	add	r1, sp, #4
    de28:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    de2a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    de2e:	f001 fa71 	bl	f314 <nrfx_gpiote_input_configure>
    de32:	e7e0      	b.n	ddf6 <gpio_nrfx_pin_configure+0xe6>
    de34:	0bad0000 	.word	0x0bad0000

0000de38 <transfer_next_chunk>:
	return 0;
}
#endif

static void transfer_next_chunk(const struct device *dev)
{
    de38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    de3a:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    de3c:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    de3e:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
    de40:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
    de42:	b98d      	cbnz	r5, de68 <transfer_next_chunk+0x30>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    de44:	2b00      	cmp	r3, #0
    de46:	d137      	bne.n	deb8 <transfer_next_chunk+0x80>
	int error = 0;
    de48:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
    de4a:	2200      	movs	r2, #0
    de4c:	4611      	mov	r1, r2
    de4e:	4620      	mov	r0, r4
    de50:	f003 fffe 	bl	11e50 <_spi_context_cs_control>
	ctx->sync_status = status;
    de54:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
    de56:	f104 0028 	add.w	r0, r4, #40	; 0x28
    de5a:	f002 f965 	bl	10128 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, dev, error);
	dev_data->busy = false;
    de5e:	2300      	movs	r3, #0
    de60:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
    de64:	b004      	add	sp, #16
    de66:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
    de68:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
    de6a:	bb0b      	cbnz	r3, deb0 <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
    de6c:	bb39      	cbnz	r1, debe <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
    de6e:	f643 72ff 	movw	r2, #16383	; 0x3fff
    de72:	42aa      	cmp	r2, r5
    de74:	6d63      	ldr	r3, [r4, #84]	; 0x54
		xfer.p_tx_buffer = tx_buf;
    de76:	9100      	str	r1, [sp, #0]
		if (chunk_len > MAX_CHUNK_LEN) {
    de78:	bf28      	it	cs
    de7a:	462a      	movcs	r2, r5
		dev_data->chunk_len = chunk_len;
    de7c:	66a2      	str	r2, [r4, #104]	; 0x68
    de7e:	b11b      	cbz	r3, de88 <transfer_next_chunk+0x50>
    de80:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    de82:	2b00      	cmp	r3, #0
    de84:	bf18      	it	ne
    de86:	4613      	movne	r3, r2
    de88:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    de8a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    de8c:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    de8e:	b11b      	cbz	r3, de98 <transfer_next_chunk+0x60>
    de90:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    de92:	2b00      	cmp	r3, #0
    de94:	bf18      	it	ne
    de96:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    de98:	2200      	movs	r2, #0
    de9a:	4669      	mov	r1, sp
    de9c:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    de9e:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    dea0:	f001 fdec 	bl	fa7c <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    dea4:	4b0d      	ldr	r3, [pc, #52]	; (dedc <transfer_next_chunk+0xa4>)
    dea6:	4298      	cmp	r0, r3
    dea8:	d0dc      	beq.n	de64 <transfer_next_chunk+0x2c>
			error = -EIO;
    deaa:	f06f 0504 	mvn.w	r5, #4
    deae:	e7cc      	b.n	de4a <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    deb0:	429d      	cmp	r5, r3
    deb2:	bf28      	it	cs
    deb4:	461d      	movcs	r5, r3
    deb6:	e7d9      	b.n	de6c <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
    deb8:	6d61      	ldr	r1, [r4, #84]	; 0x54
    deba:	461d      	mov	r5, r3
    debc:	e7d7      	b.n	de6e <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    debe:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    dec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    dec6:	d0d2      	beq.n	de6e <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
    dec8:	2d08      	cmp	r5, #8
    deca:	bf28      	it	cs
    decc:	2508      	movcs	r5, #8
    dece:	6f20      	ldr	r0, [r4, #112]	; 0x70
    ded0:	462a      	mov	r2, r5
    ded2:	f004 fe3c 	bl	12b4e <memcpy>
			tx_buf = dev_data->buffer;
    ded6:	6f21      	ldr	r1, [r4, #112]	; 0x70
    ded8:	e7c9      	b.n	de6e <transfer_next_chunk+0x36>
    deda:	bf00      	nop
    dedc:	0bad0000 	.word	0x0bad0000

0000dee0 <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
    dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dee4:	4698      	mov	r8, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    dee6:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    dee8:	6904      	ldr	r4, [r0, #16]
{
    deea:	4607      	mov	r7, r0
    deec:	0498      	lsls	r0, r3, #18
    deee:	b08b      	sub	sp, #44	; 0x2c
    def0:	460d      	mov	r5, r1
    def2:	4691      	mov	r9, r2
    def4:	f100 80cf 	bmi.w	e096 <spi_nrfx_transceive+0x1b6>
	return z_impl_k_sem_take(sem, timeout);
    def8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    defc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    df00:	f104 0010 	add.w	r0, r4, #16
    df04:	f002 f936 	bl	10174 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    df08:	6065      	str	r5, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
    df0a:	f8d7 b004 	ldr.w	fp, [r7, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    df0e:	f8d7 a010 	ldr.w	sl, [r7, #16]
	uint32_t max_freq = dev_config->max_freq;
    df12:	f8db 3008 	ldr.w	r3, [fp, #8]
    df16:	9303      	str	r3, [sp, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    df18:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
    df1c:	9301      	str	r3, [sp, #4]
    df1e:	b11b      	cbz	r3, df28 <spi_nrfx_transceive+0x48>
    df20:	f8da 3000 	ldr.w	r3, [sl]
    df24:	429d      	cmp	r5, r3
    df26:	d065      	beq.n	dff4 <spi_nrfx_transceive+0x114>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    df28:	88ae      	ldrh	r6, [r5, #4]
    df2a:	0531      	lsls	r1, r6, #20
    df2c:	f100 80e2 	bmi.w	e0f4 <spi_nrfx_transceive+0x214>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    df30:	f016 0f09 	tst.w	r6, #9
    df34:	f040 80db 	bne.w	e0ee <spi_nrfx_transceive+0x20e>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    df38:	f3c6 1345 	ubfx	r3, r6, #5, #6
    df3c:	2b08      	cmp	r3, #8
    df3e:	f040 80d6 	bne.w	e0ee <spi_nrfx_transceive+0x20e>
	if (spi_cfg->frequency < 125000) {
    df42:	682b      	ldr	r3, [r5, #0]
    df44:	9302      	str	r3, [sp, #8]
    df46:	9a02      	ldr	r2, [sp, #8]
    df48:	4b76      	ldr	r3, [pc, #472]	; (e124 <spi_nrfx_transceive+0x244>)
    df4a:	429a      	cmp	r2, r3
    df4c:	f240 80cf 	bls.w	e0ee <spi_nrfx_transceive+0x20e>
	config = dev_config->def_config;
    df50:	f10b 0e0c 	add.w	lr, fp, #12
    df54:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    df58:	f10d 0c14 	add.w	ip, sp, #20
    df5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    df60:	f8de 3000 	ldr.w	r3, [lr]
    df64:	f8cc 3000 	str.w	r3, [ip]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    df68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    df6c:	4293      	cmp	r3, r2
    df6e:	bf28      	it	cs
    df70:	4613      	movcs	r3, r2
	if (frequency < 250000) {
    df72:	4a6d      	ldr	r2, [pc, #436]	; (e128 <spi_nrfx_transceive+0x248>)
    df74:	4293      	cmp	r3, r2
    df76:	f240 8097 	bls.w	e0a8 <spi_nrfx_transceive+0x1c8>
	} else if (frequency < 500000) {
    df7a:	4a6c      	ldr	r2, [pc, #432]	; (e12c <spi_nrfx_transceive+0x24c>)
    df7c:	4293      	cmp	r3, r2
    df7e:	f240 8096 	bls.w	e0ae <spi_nrfx_transceive+0x1ce>
	} else if (frequency < 1000000) {
    df82:	4a6b      	ldr	r2, [pc, #428]	; (e130 <spi_nrfx_transceive+0x250>)
    df84:	4293      	cmp	r3, r2
    df86:	f240 8095 	bls.w	e0b4 <spi_nrfx_transceive+0x1d4>
	} else if (frequency < 2000000) {
    df8a:	4a6a      	ldr	r2, [pc, #424]	; (e134 <spi_nrfx_transceive+0x254>)
    df8c:	4293      	cmp	r3, r2
    df8e:	f240 8094 	bls.w	e0ba <spi_nrfx_transceive+0x1da>
	} else if (frequency < 4000000) {
    df92:	4a69      	ldr	r2, [pc, #420]	; (e138 <spi_nrfx_transceive+0x258>)
    df94:	4293      	cmp	r3, r2
    df96:	f240 8093 	bls.w	e0c0 <spi_nrfx_transceive+0x1e0>
		return NRF_SPIM_FREQ_4M;
    df9a:	4a68      	ldr	r2, [pc, #416]	; (e13c <spi_nrfx_transceive+0x25c>)
    df9c:	4293      	cmp	r3, r2
    df9e:	bf2c      	ite	cs
    dfa0:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
    dfa4:	f04f 4380 	movcc.w	r3, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    dfa8:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    dfaa:	9307      	str	r3, [sp, #28]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    dfac:	f006 0304 	and.w	r3, r6, #4
    dfb0:	f140 8089 	bpl.w	e0c6 <spi_nrfx_transceive+0x1e6>
			return NRF_SPIM_MODE_2;
    dfb4:	2b00      	cmp	r3, #0
    dfb6:	bf14      	ite	ne
    dfb8:	2303      	movne	r3, #3
    dfba:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    dfbc:	f88d 3020 	strb.w	r3, [sp, #32]
	if (dev_data->initialized) {
    dfc0:	9b01      	ldr	r3, [sp, #4]
	if (operation & SPI_TRANSFER_LSB) {
    dfc2:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    dfc6:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
	if (dev_data->initialized) {
    dfca:	b12b      	cbz	r3, dfd8 <spi_nrfx_transceive+0xf8>
		nrfx_spim_uninit(&dev_config->spim);
    dfcc:	4658      	mov	r0, fp
    dfce:	f001 fd0d 	bl	f9ec <nrfx_spim_uninit>
		dev_data->initialized = false;
    dfd2:	2300      	movs	r3, #0
    dfd4:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
    dfd8:	4653      	mov	r3, sl
    dfda:	4a59      	ldr	r2, [pc, #356]	; (e140 <spi_nrfx_transceive+0x260>)
    dfdc:	a905      	add	r1, sp, #20
    dfde:	4658      	mov	r0, fp
    dfe0:	f001 fc56 	bl	f890 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    dfe4:	4b57      	ldr	r3, [pc, #348]	; (e144 <spi_nrfx_transceive+0x264>)
    dfe6:	4298      	cmp	r0, r3
    dfe8:	d171      	bne.n	e0ce <spi_nrfx_transceive+0x1ee>
	dev_data->initialized = true;
    dfea:	2301      	movs	r3, #1
    dfec:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	ctx->config = spi_cfg;
    dff0:	f8ca 5000 	str.w	r5, [sl]
		dev_data->busy = true;
    dff4:	2301      	movs	r3, #1
    dff6:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    dffa:	f1b9 0f00 	cmp.w	r9, #0
    dffe:	d17c      	bne.n	e0fa <spi_nrfx_transceive+0x21a>
    e000:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    e004:	2300      	movs	r3, #0
    e006:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    e008:	f104 0258 	add.w	r2, r4, #88	; 0x58
    e00c:	f104 0148 	add.w	r1, r4, #72	; 0x48
    e010:	f104 0044 	add.w	r0, r4, #68	; 0x44
    e014:	f003 fef5 	bl	11e02 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    e018:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    e01a:	f1b8 0f00 	cmp.w	r8, #0
    e01e:	d175      	bne.n	e10c <spi_nrfx_transceive+0x22c>
    e020:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    e024:	2300      	movs	r3, #0
    e026:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    e028:	f104 0260 	add.w	r2, r4, #96	; 0x60
    e02c:	f104 0150 	add.w	r1, r4, #80	; 0x50
    e030:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    e034:	f003 fee5 	bl	11e02 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    e038:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
    e03a:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
    e03c:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
    e03e:	2101      	movs	r1, #1
    e040:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    e042:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
    e044:	f003 ff04 	bl	11e50 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    e048:	4638      	mov	r0, r7
    e04a:	f7ff fef5 	bl	de38 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    e04e:	6e25      	ldr	r5, [r4, #96]	; 0x60
    e050:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
    e052:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    e054:	429d      	cmp	r5, r3
    e056:	bf38      	it	cc
    e058:	461d      	movcc	r5, r3
    e05a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    e05e:	435d      	muls	r5, r3
			     ctx->config->frequency;
    e060:	f857 3b28 	ldr.w	r3, [r7], #40
    e064:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    e068:	681b      	ldr	r3, [r3, #0]
    e06a:	fbb5 f5f3 	udiv	r5, r5, r3
    e06e:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    e070:	35c8      	adds	r5, #200	; 0xc8
    e072:	f240 30e7 	movw	r0, #999	; 0x3e7
    e076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e07a:	2300      	movs	r3, #0
    e07c:	fbe5 010c 	umlal	r0, r1, r5, ip
    e080:	f7f2 fc08 	bl	894 <__aeabi_uldivmod>
    e084:	4602      	mov	r2, r0
    e086:	460b      	mov	r3, r1
    e088:	4638      	mov	r0, r7
    e08a:	f002 f873 	bl	10174 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    e08e:	2800      	cmp	r0, #0
    e090:	d144      	bne.n	e11c <spi_nrfx_transceive+0x23c>
	status = ctx->sync_status;
    e092:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
    e094:	e01d      	b.n	e0d2 <spi_nrfx_transceive+0x1f2>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    e096:	69a3      	ldr	r3, [r4, #24]
    e098:	2b00      	cmp	r3, #0
    e09a:	f47f af2d 	bne.w	def8 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
    e09e:	6863      	ldr	r3, [r4, #4]
    e0a0:	4299      	cmp	r1, r3
    e0a2:	f47f af29 	bne.w	def8 <spi_nrfx_transceive+0x18>
    e0a6:	e730      	b.n	df0a <spi_nrfx_transceive+0x2a>
		return NRF_SPIM_FREQ_125K;
    e0a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    e0ac:	e77c      	b.n	dfa8 <spi_nrfx_transceive+0xc8>
		return NRF_SPIM_FREQ_250K;
    e0ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    e0b2:	e779      	b.n	dfa8 <spi_nrfx_transceive+0xc8>
		return NRF_SPIM_FREQ_500K;
    e0b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    e0b8:	e776      	b.n	dfa8 <spi_nrfx_transceive+0xc8>
		return NRF_SPIM_FREQ_1M;
    e0ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e0be:	e773      	b.n	dfa8 <spi_nrfx_transceive+0xc8>
		return NRF_SPIM_FREQ_2M;
    e0c0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    e0c4:	e770      	b.n	dfa8 <spi_nrfx_transceive+0xc8>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    e0c6:	3b00      	subs	r3, #0
    e0c8:	bf18      	it	ne
    e0ca:	2301      	movne	r3, #1
    e0cc:	e776      	b.n	dfbc <spi_nrfx_transceive+0xdc>
		return -EIO;
    e0ce:	f06f 0504 	mvn.w	r5, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    e0d2:	6823      	ldr	r3, [r4, #0]
    e0d4:	889b      	ldrh	r3, [r3, #4]
    e0d6:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    e0da:	d104      	bne.n	e0e6 <spi_nrfx_transceive+0x206>
		ctx->owner = NULL;
    e0dc:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    e0de:	f104 0010 	add.w	r0, r4, #16
    e0e2:	f002 f821 	bl	10128 <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
}
    e0e6:	4628      	mov	r0, r5
    e0e8:	b00b      	add	sp, #44	; 0x2c
    e0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
    e0ee:	f06f 0515 	mvn.w	r5, #21
    e0f2:	e7ee      	b.n	e0d2 <spi_nrfx_transceive+0x1f2>
		return -ENOTSUP;
    e0f4:	f06f 0585 	mvn.w	r5, #133	; 0x85
    e0f8:	e7eb      	b.n	e0d2 <spi_nrfx_transceive+0x1f2>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    e0fa:	f8d9 3000 	ldr.w	r3, [r9]
    e0fe:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    e100:	2b00      	cmp	r3, #0
    e102:	f43f af7f 	beq.w	e004 <spi_nrfx_transceive+0x124>
    e106:	f8d9 3004 	ldr.w	r3, [r9, #4]
    e10a:	e77c      	b.n	e006 <spi_nrfx_transceive+0x126>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    e10c:	f8d8 3000 	ldr.w	r3, [r8]
    e110:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    e112:	2b00      	cmp	r3, #0
    e114:	d086      	beq.n	e024 <spi_nrfx_transceive+0x144>
    e116:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e11a:	e784      	b.n	e026 <spi_nrfx_transceive+0x146>
		return -ETIMEDOUT;
    e11c:	f06f 0573 	mvn.w	r5, #115	; 0x73
    e120:	e7d7      	b.n	e0d2 <spi_nrfx_transceive+0x1f2>
    e122:	bf00      	nop
    e124:	0001e847 	.word	0x0001e847
    e128:	0003d08f 	.word	0x0003d08f
    e12c:	0007a11f 	.word	0x0007a11f
    e130:	000f423f 	.word	0x000f423f
    e134:	001e847f 	.word	0x001e847f
    e138:	003d08ff 	.word	0x003d08ff
    e13c:	007a1200 	.word	0x007a1200
    e140:	00011f85 	.word	0x00011f85
    e144:	0bad0000 	.word	0x0bad0000

0000e148 <random_byte_get>:
    e148:	f04f 0340 	mov.w	r3, #64	; 0x40
    e14c:	f3ef 8211 	mrs	r2, BASEPRI
    e150:	f383 8812 	msr	BASEPRI_MAX, r3
    e154:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    e158:	4b09      	ldr	r3, [pc, #36]	; (e180 <random_byte_get+0x38>)
    e15a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
    e15e:	b161      	cbz	r1, e17a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e160:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
    e162:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e166:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    e16a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
    e16e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    e170:	f382 8811 	msr	BASEPRI, r2
    e174:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
    e178:	4770      	bx	lr
	int retval = -EAGAIN;
    e17a:	f06f 000a 	mvn.w	r0, #10
    e17e:	e7f7      	b.n	e170 <random_byte_get+0x28>
    e180:	4000d000 	.word	0x4000d000

0000e184 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
    e184:	b5f0      	push	{r4, r5, r6, r7, lr}
    e186:	4603      	mov	r3, r0
    e188:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
    e18a:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
    e18c:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
    e190:	f04f 0540 	mov.w	r5, #64	; 0x40
    e194:	f3ef 8211 	mrs	r2, BASEPRI
    e198:	f385 8812 	msr	BASEPRI_MAX, r5
    e19c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    e1a0:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    e1a2:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
    e1a6:	1be4      	subs	r4, r4, r7
    e1a8:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
    e1ac:	42a0      	cmp	r0, r4
		len = available;
    e1ae:	bf88      	it	hi
    e1b0:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    e1b2:	183e      	adds	r6, r7, r0
    e1b4:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
    e1b8:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
    e1ba:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
    e1bc:	f382 8811 	msr	BASEPRI, r2
    e1c0:	f3bf 8f6f 	isb	sy
    e1c4:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
    e1c6:	428a      	cmp	r2, r1
    e1c8:	d117      	bne.n	e1fa <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    e1ca:	4577      	cmp	r7, lr
    e1cc:	d10d      	bne.n	e1ea <rng_pool_get+0x66>
	__asm__ volatile(
    e1ce:	f04f 0140 	mov.w	r1, #64	; 0x40
    e1d2:	f3ef 8211 	mrs	r2, BASEPRI
    e1d6:	f381 8812 	msr	BASEPRI_MAX, r1
    e1da:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    e1de:	7819      	ldrb	r1, [r3, #0]
    e1e0:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
    e1e2:	f382 8811 	msr	BASEPRI, r2
    e1e6:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
    e1ea:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
    e1ec:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
    e1ee:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e1f0:	bf22      	ittt	cs
    e1f2:	4b06      	ldrcs	r3, [pc, #24]	; (e20c <rng_pool_get+0x88>)
    e1f4:	2201      	movcs	r2, #1
    e1f6:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
    e1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
    e1fa:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
    e1fc:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
    e1fe:	7976      	ldrb	r6, [r6, #5]
    e200:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
    e204:	ea05 050c 	and.w	r5, r5, ip
    e208:	e7dd      	b.n	e1c6 <rng_pool_get+0x42>
    e20a:	bf00      	nop
    e20c:	4000d000 	.word	0x4000d000

0000e210 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    e210:	43db      	mvns	r3, r3
{
    e212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    e216:	f013 0501 	ands.w	r5, r3, #1
{
    e21a:	460e      	mov	r6, r1
    e21c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    e21e:	d004      	beq.n	e22a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    e220:	4821      	ldr	r0, [pc, #132]	; (e2a8 <entropy_nrf5_get_entropy_isr+0x98>)
    e222:	f7ff ffaf 	bl	e184 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
    e226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
    e22a:	b3a2      	cbz	r2, e296 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
    e22c:	f04f 0340 	mov.w	r3, #64	; 0x40
    e230:	f3ef 8811 	mrs	r8, BASEPRI
    e234:	f383 8812 	msr	BASEPRI_MAX, r3
    e238:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
    e23c:	200d      	movs	r0, #13
    e23e:	f7fd fd67 	bl	bd10 <arch_irq_is_enabled>
    e242:	4607      	mov	r7, r0
		irq_disable(IRQN);
    e244:	200d      	movs	r0, #13
    e246:	f7fd fd4f 	bl	bce8 <arch_irq_disable>
	__asm__ volatile(
    e24a:	f388 8811 	msr	BASEPRI, r8
    e24e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e252:	f8df 8058 	ldr.w	r8, [pc, #88]	; e2ac <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e256:	f8df 9058 	ldr.w	r9, [pc, #88]	; e2b0 <entropy_nrf5_get_entropy_isr+0xa0>
    e25a:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
    e25e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
    e262:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e266:	2301      	movs	r3, #1
    e268:	f8c8 3000 	str.w	r3, [r8]
    e26c:	4625      	mov	r5, r4
    e26e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    e272:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
    e276:	b183      	cbz	r3, e29a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
    e278:	f7ff ff66 	bl	e148 <random_byte_get>
			if (byte < 0) {
    e27c:	1e03      	subs	r3, r0, #0
    e27e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    e282:	dbf6      	blt.n	e272 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
    e284:	3d01      	subs	r5, #1
    e286:	b2ad      	uxth	r5, r5
    e288:	5573      	strb	r3, [r6, r5]
		} while (len);
    e28a:	2d00      	cmp	r5, #0
    e28c:	d1f1      	bne.n	e272 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
    e28e:	b117      	cbz	r7, e296 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
    e290:	200d      	movs	r0, #13
    e292:	f7fd fd1b 	bl	bccc <arch_irq_enable>
	return cnt;
    e296:	4620      	mov	r0, r4
    e298:	e7c5      	b.n	e226 <entropy_nrf5_get_entropy_isr+0x16>
    e29a:	f3bf 8f4f 	dsb	sy
				__WFE();
    e29e:	bf20      	wfe
				__SEV();
    e2a0:	bf40      	sev
				__WFE();
    e2a2:	bf20      	wfe
    e2a4:	e7e5      	b.n	e272 <entropy_nrf5_get_entropy_isr+0x62>
    e2a6:	bf00      	nop
    e2a8:	20001614 	.word	0x20001614
    e2ac:	4000d000 	.word	0x4000d000
    e2b0:	e000e100 	.word	0xe000e100

0000e2b4 <entropy_nrf5_get_entropy>:
{
    e2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    e2b8:	4f12      	ldr	r7, [pc, #72]	; (e304 <entropy_nrf5_get_entropy+0x50>)
    e2ba:	460d      	mov	r5, r1
    e2bc:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    e2be:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
    e2c2:	b914      	cbnz	r4, e2ca <entropy_nrf5_get_entropy+0x16>
}
    e2c4:	4620      	mov	r0, r4
    e2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e2ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e2ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e2d2:	4638      	mov	r0, r7
    e2d4:	f001 ff4e 	bl	10174 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    e2d8:	4622      	mov	r2, r4
    e2da:	4629      	mov	r1, r5
    e2dc:	4640      	mov	r0, r8
    e2de:	f7ff ff51 	bl	e184 <rng_pool_get>
    e2e2:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
    e2e4:	4638      	mov	r0, r7
    e2e6:	f001 ff1f 	bl	10128 <z_impl_k_sem_give>
		if (bytes == 0U) {
    e2ea:	b93e      	cbnz	r6, e2fc <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
    e2ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e2f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e2f4:	4804      	ldr	r0, [pc, #16]	; (e308 <entropy_nrf5_get_entropy+0x54>)
    e2f6:	f001 ff3d 	bl	10174 <z_impl_k_sem_take>
	while (len) {
    e2fa:	e7e6      	b.n	e2ca <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
    e2fc:	1ba4      	subs	r4, r4, r6
    e2fe:	b2a4      	uxth	r4, r4
		buf += bytes;
    e300:	4435      	add	r5, r6
    e302:	e7de      	b.n	e2c2 <entropy_nrf5_get_entropy+0xe>
    e304:	200015e4 	.word	0x200015e4
    e308:	200015fc 	.word	0x200015fc

0000e30c <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
    e30c:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    e30e:	4c19      	ldr	r4, [pc, #100]	; (e374 <entropy_nrf5_init+0x68>)
    e310:	2201      	movs	r2, #1
    e312:	4611      	mov	r1, r2
    e314:	4620      	mov	r0, r4
    e316:	f004 f933 	bl	12580 <z_impl_k_sem_init>
    e31a:	2201      	movs	r2, #1
    e31c:	2100      	movs	r1, #0
    e31e:	f104 0018 	add.w	r0, r4, #24
    e322:	f004 f92d 	bl	12580 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
    e326:	f240 4307 	movw	r3, #1031	; 0x407
    e32a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
    e32e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    e332:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
    e334:	230c      	movs	r3, #12
    e336:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
    e33a:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
    e33c:	4b0e      	ldr	r3, [pc, #56]	; (e378 <entropy_nrf5_init+0x6c>)
    e33e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
    e342:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
    e346:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    e34a:	f022 0201 	bic.w	r2, r2, #1
    e34e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
    e352:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e354:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
    e358:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    e35c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
    e360:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e362:	6019      	str	r1, [r3, #0]
    e364:	200d      	movs	r0, #13
    e366:	f7fd fce1 	bl	bd2c <z_arm_irq_priority_set>
	irq_enable(IRQN);
    e36a:	200d      	movs	r0, #13
    e36c:	f7fd fcae 	bl	bccc <arch_irq_enable>

	return 0;
}
    e370:	4628      	mov	r0, r5
    e372:	bd38      	pop	{r3, r4, r5, pc}
    e374:	200015e4 	.word	0x200015e4
    e378:	4000d000 	.word	0x4000d000

0000e37c <isr>:
{
    e37c:	b510      	push	{r4, lr}
	byte = random_byte_get();
    e37e:	f7ff fee3 	bl	e148 <random_byte_get>
	if (byte < 0) {
    e382:	2800      	cmp	r0, #0
    e384:	db20      	blt.n	e3c8 <isr+0x4c>
	uint8_t last  = rngp->last;
    e386:	4b17      	ldr	r3, [pc, #92]	; (e3e4 <isr+0x68>)
    e388:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
    e38c:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
    e390:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
    e394:	1b14      	subs	r4, r2, r4
    e396:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    e39a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
    e39c:	d10d      	bne.n	e3ba <isr+0x3e>
	uint8_t last  = rngp->last;
    e39e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
    e3a2:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
    e3a6:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
    e3aa:	1b14      	subs	r4, r2, r4
    e3ac:	ea31 0404 	bics.w	r4, r1, r4
    e3b0:	d10b      	bne.n	e3ca <isr+0x4e>
    e3b2:	4b0d      	ldr	r3, [pc, #52]	; (e3e8 <isr+0x6c>)
    e3b4:	2201      	movs	r2, #1
    e3b6:	605a      	str	r2, [r3, #4]
}
    e3b8:	e00e      	b.n	e3d8 <isr+0x5c>
	rngp->buffer[last] = byte;
    e3ba:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    e3bc:	3201      	adds	r2, #1
    e3be:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
    e3c0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
    e3c4:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
    e3c8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
    e3ca:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    e3cc:	3201      	adds	r2, #1
    e3ce:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
    e3d0:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
    e3d4:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
    e3d8:	4804      	ldr	r0, [pc, #16]	; (e3ec <isr+0x70>)
}
    e3da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e3de:	f001 bea3 	b.w	10128 <z_impl_k_sem_give>
    e3e2:	bf00      	nop
    e3e4:	200015e4 	.word	0x200015e4
    e3e8:	4000d000 	.word	0x4000d000
    e3ec:	200015fc 	.word	0x200015fc

0000e3f0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    e3f0:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    e3f2:	2301      	movs	r3, #1
    e3f4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e3f6:	4a0e      	ldr	r2, [pc, #56]	; (e430 <compare_int_lock+0x40>)
    e3f8:	f3bf 8f5b 	dmb	ish
    e3fc:	43dc      	mvns	r4, r3
    e3fe:	e852 1f00 	ldrex	r1, [r2]
    e402:	ea01 0504 	and.w	r5, r1, r4
    e406:	e842 5600 	strex	r6, r5, [r2]
    e40a:	2e00      	cmp	r6, #0
    e40c:	d1f7      	bne.n	e3fe <compare_int_lock+0xe>
    e40e:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    e412:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e416:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    e418:	4806      	ldr	r0, [pc, #24]	; (e434 <compare_int_lock+0x44>)
    e41a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    e41e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e422:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    e426:	420b      	tst	r3, r1
}
    e428:	bf14      	ite	ne
    e42a:	2001      	movne	r0, #1
    e42c:	2000      	moveq	r0, #0
    e42e:	bd70      	pop	{r4, r5, r6, pc}
    e430:	2000163c 	.word	0x2000163c
    e434:	40011000 	.word	0x40011000

0000e438 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    e438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    e43a:	491b      	ldr	r1, [pc, #108]	; (e4a8 <sys_clock_timeout_handler+0x70>)
{
    e43c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    e43e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    e442:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    e444:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    e448:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    e44c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    e44e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    e452:	d30f      	bcc.n	e474 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    e454:	f002 fc58 	bl	10d08 <sys_clock_announce>
    return p_reg->CC[ch];
    e458:	00a3      	lsls	r3, r4, #2
    e45a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e45e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    e462:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    e466:	4295      	cmp	r5, r2
    e468:	d11d      	bne.n	e4a6 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    e46a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    e46e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    e472:	e012      	b.n	e49a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    e474:	4b0d      	ldr	r3, [pc, #52]	; (e4ac <sys_clock_timeout_handler+0x74>)
    e476:	681b      	ldr	r3, [r3, #0]
    e478:	0a1a      	lsrs	r2, r3, #8
    e47a:	061b      	lsls	r3, r3, #24
    e47c:	195e      	adds	r6, r3, r5
    e47e:	4b0c      	ldr	r3, [pc, #48]	; (e4b0 <sys_clock_timeout_handler+0x78>)
    e480:	f142 0700 	adc.w	r7, r2, #0
    e484:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    e488:	f002 fc3e 	bl	10d08 <sys_clock_announce>
    return p_reg->CC[ch];
    e48c:	4a09      	ldr	r2, [pc, #36]	; (e4b4 <sys_clock_timeout_handler+0x7c>)
    e48e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    e492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    e496:	429d      	cmp	r5, r3
    e498:	d105      	bne.n	e4a6 <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    e49a:	4a06      	ldr	r2, [pc, #24]	; (e4b4 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    e49c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    e4a0:	40a3      	lsls	r3, r4
    e4a2:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    e4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e4a8:	200012c0 	.word	0x200012c0
    e4ac:	20001640 	.word	0x20001640
    e4b0:	200012c8 	.word	0x200012c8
    e4b4:	40011000 	.word	0x40011000

0000e4b8 <compare_int_unlock>:
	if (key) {
    e4b8:	b311      	cbz	r1, e500 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e4ba:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    e4be:	2301      	movs	r3, #1
    e4c0:	4a10      	ldr	r2, [pc, #64]	; (e504 <compare_int_unlock+0x4c>)
    e4c2:	4083      	lsls	r3, r0
    e4c4:	e852 cf00 	ldrex	ip, [r2]
    e4c8:	ea4c 0c03 	orr.w	ip, ip, r3
    e4cc:	e842 c100 	strex	r1, ip, [r2]
    e4d0:	2900      	cmp	r1, #0
    e4d2:	d1f7      	bne.n	e4c4 <compare_int_unlock+0xc>
    e4d4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    e4d8:	4a0b      	ldr	r2, [pc, #44]	; (e508 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    e4da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    e4de:	4083      	lsls	r3, r0
    e4e0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e4e4:	4b09      	ldr	r3, [pc, #36]	; (e50c <compare_int_unlock+0x54>)
    e4e6:	f3bf 8f5b 	dmb	ish
    e4ea:	681b      	ldr	r3, [r3, #0]
    e4ec:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    e4f0:	40c3      	lsrs	r3, r0
    e4f2:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e4f4:	bf42      	ittt	mi
    e4f6:	4b06      	ldrmi	r3, [pc, #24]	; (e510 <compare_int_unlock+0x58>)
    e4f8:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    e4fc:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    e500:	4770      	bx	lr
    e502:	bf00      	nop
    e504:	2000163c 	.word	0x2000163c
    e508:	40011000 	.word	0x40011000
    e50c:	20001638 	.word	0x20001638
    e510:	e000e100 	.word	0xe000e100

0000e514 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    e514:	4b0d      	ldr	r3, [pc, #52]	; (e54c <z_nrf_rtc_timer_read+0x38>)
    e516:	6818      	ldr	r0, [r3, #0]
    e518:	0a01      	lsrs	r1, r0, #8
    e51a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    e51c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    e520:	4b0b      	ldr	r3, [pc, #44]	; (e550 <z_nrf_rtc_timer_read+0x3c>)
    e522:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    e526:	1818      	adds	r0, r3, r0
    e528:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    e52c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    e530:	d20a      	bcs.n	e548 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    e532:	4b08      	ldr	r3, [pc, #32]	; (e554 <z_nrf_rtc_timer_read+0x40>)
    e534:	e9d3 2300 	ldrd	r2, r3, [r3]
    e538:	4290      	cmp	r0, r2
    e53a:	eb71 0303 	sbcs.w	r3, r1, r3
    e53e:	d203      	bcs.n	e548 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    e540:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    e544:	f141 0100 	adc.w	r1, r1, #0
}
    e548:	4770      	bx	lr
    e54a:	bf00      	nop
    e54c:	20001640 	.word	0x20001640
    e550:	40011000 	.word	0x40011000
    e554:	200012c8 	.word	0x200012c8

0000e558 <compare_set>:
{
    e558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e55c:	4614      	mov	r4, r2
    e55e:	461d      	mov	r5, r3
    e560:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    e562:	f7ff ff45 	bl	e3f0 <compare_int_lock>
    e566:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    e568:	f7ff ffd4 	bl	e514 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    e56c:	42a0      	cmp	r0, r4
    e56e:	eb71 0305 	sbcs.w	r3, r1, r5
    e572:	d27a      	bcs.n	e66a <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    e574:	4b46      	ldr	r3, [pc, #280]	; (e690 <compare_set+0x138>)
    e576:	1a20      	subs	r0, r4, r0
    e578:	eb65 0101 	sbc.w	r1, r5, r1
    e57c:	4298      	cmp	r0, r3
    e57e:	f171 0100 	sbcs.w	r1, r1, #0
    e582:	f080 8081 	bcs.w	e688 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    e586:	4b43      	ldr	r3, [pc, #268]	; (e694 <compare_set+0x13c>)
    e588:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    e58c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    e590:	429d      	cmp	r5, r3
    e592:	bf08      	it	eq
    e594:	4294      	cmpeq	r4, r2
    e596:	d053      	beq.n	e640 <compare_set+0xe8>
    e598:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    e59c:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    e5a0:	f107 0950 	add.w	r9, r7, #80	; 0x50
    e5a4:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    e5a8:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e5ac:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    e5b0:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    e5b4:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    e5b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    e5bc:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    e5c0:	4a35      	ldr	r2, [pc, #212]	; (e698 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e5c2:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    e5c6:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    e5c8:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    e5ca:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    e5ce:	eba0 000b 	sub.w	r0, r0, fp
    e5d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    e5d6:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    e5da:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    e5dc:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    e5e0:	d105      	bne.n	e5ee <compare_set+0x96>
    e5e2:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    e5e4:	2013      	movs	r0, #19
    e5e6:	f004 f9ef 	bl	129c8 <z_impl_k_busy_wait>
    e5ea:	4a2b      	ldr	r2, [pc, #172]	; (e698 <compare_set+0x140>)
    e5ec:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    e5ee:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    e5f2:	eba6 000c 	sub.w	r0, r6, ip
    e5f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    e5fa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    e5fe:	bf88      	it	hi
    e600:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e602:	2000      	movs	r0, #0
    e604:	f8c9 0000 	str.w	r0, [r9]
    e608:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    e60c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    e610:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    e614:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    e618:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    e61c:	4583      	cmp	fp, r0
    e61e:	d006      	beq.n	e62e <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    e620:	1a30      	subs	r0, r6, r0
    e622:	3802      	subs	r0, #2
    e624:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    e628:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    e62c:	d81b      	bhi.n	e666 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    e62e:	eba6 0608 	sub.w	r6, r6, r8
    e632:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    e636:	1936      	adds	r6, r6, r4
    e638:	f145 0300 	adc.w	r3, r5, #0
    e63c:	4634      	mov	r4, r6
    e63e:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    e640:	4914      	ldr	r1, [pc, #80]	; (e694 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    e642:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    e644:	013b      	lsls	r3, r7, #4
    e646:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    e64a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    e64c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e64e:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    e650:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    e654:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    e656:	4638      	mov	r0, r7
    e658:	9900      	ldr	r1, [sp, #0]
    e65a:	f7ff ff2d 	bl	e4b8 <compare_int_unlock>
}
    e65e:	4620      	mov	r0, r4
    e660:	b003      	add	sp, #12
    e662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e666:	4630      	mov	r0, r6
    e668:	e7af      	b.n	e5ca <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    e66a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e66c:	4a0b      	ldr	r2, [pc, #44]	; (e69c <compare_set+0x144>)
    e66e:	f3bf 8f5b 	dmb	ish
    e672:	40bb      	lsls	r3, r7
    e674:	e852 0f00 	ldrex	r0, [r2]
    e678:	4318      	orrs	r0, r3
    e67a:	e842 0100 	strex	r1, r0, [r2]
    e67e:	2900      	cmp	r1, #0
    e680:	d1f8      	bne.n	e674 <compare_set+0x11c>
    e682:	f3bf 8f5b 	dmb	ish
    e686:	e7db      	b.n	e640 <compare_set+0xe8>
			return -EINVAL;
    e688:	f06f 0415 	mvn.w	r4, #21
    e68c:	e7e3      	b.n	e656 <compare_set+0xfe>
    e68e:	bf00      	nop
    e690:	01000001 	.word	0x01000001
    e694:	200012b0 	.word	0x200012b0
    e698:	40011000 	.word	0x40011000
    e69c:	20001638 	.word	0x20001638

0000e6a0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    e6a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    e6a2:	4b19      	ldr	r3, [pc, #100]	; (e708 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    e6a4:	4d19      	ldr	r5, [pc, #100]	; (e70c <sys_clock_driver_init+0x6c>)
    e6a6:	2400      	movs	r4, #0
    e6a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e6ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e6b0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    e6b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    e6b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    e6bc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e6c0:	4b13      	ldr	r3, [pc, #76]	; (e710 <sys_clock_driver_init+0x70>)
    e6c2:	2602      	movs	r6, #2
    e6c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    e6c8:	2101      	movs	r1, #1
    e6ca:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    e6ce:	2011      	movs	r0, #17
    e6d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    e6d4:	4622      	mov	r2, r4
    e6d6:	f7fd fb29 	bl	bd2c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    e6da:	2011      	movs	r0, #17
    e6dc:	f7fd faf6 	bl	bccc <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    e6e0:	4a0c      	ldr	r2, [pc, #48]	; (e714 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    e6e2:	2301      	movs	r3, #1
    e6e4:	60ab      	str	r3, [r5, #8]
    e6e6:	602b      	str	r3, [r5, #0]
    e6e8:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    e6ea:	4b0b      	ldr	r3, [pc, #44]	; (e718 <sys_clock_driver_init+0x78>)
    e6ec:	4a0b      	ldr	r2, [pc, #44]	; (e71c <sys_clock_driver_init+0x7c>)
    e6ee:	9300      	str	r3, [sp, #0]
    e6f0:	9401      	str	r4, [sp, #4]
    e6f2:	2300      	movs	r3, #0
    e6f4:	4620      	mov	r0, r4
    e6f6:	f7ff ff2f 	bl	e558 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    e6fa:	4630      	mov	r0, r6
    e6fc:	f7ff fa10 	bl	db20 <z_nrf_clock_control_lf_on>

	return 0;
}
    e700:	4620      	mov	r0, r4
    e702:	b002      	add	sp, #8
    e704:	bd70      	pop	{r4, r5, r6, pc}
    e706:	bf00      	nop
    e708:	200012b0 	.word	0x200012b0
    e70c:	40011000 	.word	0x40011000
    e710:	e000e100 	.word	0xe000e100
    e714:	2000163c 	.word	0x2000163c
    e718:	0000e439 	.word	0x0000e439
    e71c:	007fffff 	.word	0x007fffff

0000e720 <rtc_nrf_isr>:
{
    e720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    e724:	4c2b      	ldr	r4, [pc, #172]	; (e7d4 <rtc_nrf_isr+0xb4>)
    e726:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    e72a:	079a      	lsls	r2, r3, #30
    e72c:	d50b      	bpl.n	e746 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e72e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    e732:	b143      	cbz	r3, e746 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    e734:	4a28      	ldr	r2, [pc, #160]	; (e7d8 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e736:	2300      	movs	r3, #0
    e738:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    e73c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    e740:	6813      	ldr	r3, [r2, #0]
    e742:	3301      	adds	r3, #1
    e744:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e746:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    e74a:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
    e74c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    e750:	03db      	lsls	r3, r3, #15
    e752:	d522      	bpl.n	e79a <rtc_nrf_isr+0x7a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e754:	f3bf 8f5b 	dmb	ish
    e758:	4b20      	ldr	r3, [pc, #128]	; (e7dc <rtc_nrf_isr+0xbc>)
    e75a:	e853 1f00 	ldrex	r1, [r3]
    e75e:	f021 0001 	bic.w	r0, r1, #1
    e762:	e843 0500 	strex	r5, r0, [r3]
    e766:	2d00      	cmp	r5, #0
    e768:	d1f7      	bne.n	e75a <rtc_nrf_isr+0x3a>
    e76a:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    e76e:	b911      	cbnz	r1, e776 <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e770:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e774:	b18b      	cbz	r3, e79a <rtc_nrf_isr+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e776:	2500      	movs	r5, #0
    e778:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    e77c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e780:	f382 8810 	msr	PRIMASK, r2
		curr_time = z_nrf_rtc_timer_read();
    e784:	f7ff fec6 	bl	e514 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e788:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    e78c:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
    e78e:	4b14      	ldr	r3, [pc, #80]	; (e7e0 <rtc_nrf_isr+0xc0>)
    e790:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    e794:	42b0      	cmp	r0, r6
    e796:	41b9      	sbcs	r1, r7
    e798:	d204      	bcs.n	e7a4 <rtc_nrf_isr+0x84>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e79a:	f382 8810 	msr	PRIMASK, r2
}
    e79e:	b003      	add	sp, #12
    e7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    e7a4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    e7a8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    e7ac:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    e7b0:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    e7b4:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    e7b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    e7ba:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    e7be:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
    e7c2:	2900      	cmp	r1, #0
    e7c4:	d0eb      	beq.n	e79e <rtc_nrf_isr+0x7e>
			handler(chan, expire_time, user_context);
    e7c6:	9000      	str	r0, [sp, #0]
    e7c8:	4632      	mov	r2, r6
    e7ca:	463b      	mov	r3, r7
    e7cc:	4628      	mov	r0, r5
    e7ce:	4788      	blx	r1
}
    e7d0:	e7e5      	b.n	e79e <rtc_nrf_isr+0x7e>
    e7d2:	bf00      	nop
    e7d4:	40011000 	.word	0x40011000
    e7d8:	20001640 	.word	0x20001640
    e7dc:	20001638 	.word	0x20001638
    e7e0:	200012b0 	.word	0x200012b0

0000e7e4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    e7e4:	1c43      	adds	r3, r0, #1
{
    e7e6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    e7e8:	d021      	beq.n	e82e <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    e7ea:	2801      	cmp	r0, #1
    e7ec:	dd21      	ble.n	e832 <sys_clock_set_timeout+0x4e>
    e7ee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    e7f2:	da20      	bge.n	e836 <sys_clock_set_timeout+0x52>
    e7f4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    e7f6:	f7ff fe8d 	bl	e514 <z_nrf_rtc_timer_read>
    e7fa:	4b10      	ldr	r3, [pc, #64]	; (e83c <sys_clock_set_timeout+0x58>)
    e7fc:	e9d3 1300 	ldrd	r1, r3, [r3]
    e800:	1a42      	subs	r2, r0, r1
		ticks = 0;
    e802:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    e806:	480e      	ldr	r0, [pc, #56]	; (e840 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    e808:	bf28      	it	cs
    e80a:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    e80c:	3201      	adds	r2, #1
    e80e:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    e810:	4282      	cmp	r2, r0
    e812:	bf28      	it	cs
    e814:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    e816:	1852      	adds	r2, r2, r1
    e818:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    e81c:	4909      	ldr	r1, [pc, #36]	; (e844 <sys_clock_set_timeout+0x60>)
    e81e:	9001      	str	r0, [sp, #4]
    e820:	9100      	str	r1, [sp, #0]
    e822:	f143 0300 	adc.w	r3, r3, #0
    e826:	f7ff fe97 	bl	e558 <compare_set>
}
    e82a:	b002      	add	sp, #8
    e82c:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    e82e:	4804      	ldr	r0, [pc, #16]	; (e840 <sys_clock_set_timeout+0x5c>)
    e830:	e7e0      	b.n	e7f4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    e832:	2400      	movs	r4, #0
    e834:	e7df      	b.n	e7f6 <sys_clock_set_timeout+0x12>
    e836:	4c02      	ldr	r4, [pc, #8]	; (e840 <sys_clock_set_timeout+0x5c>)
    e838:	e7dd      	b.n	e7f6 <sys_clock_set_timeout+0x12>
    e83a:	bf00      	nop
    e83c:	200012c0 	.word	0x200012c0
    e840:	007fffff 	.word	0x007fffff
    e844:	0000e439 	.word	0x0000e439

0000e848 <sys_clock_elapsed>:
{
    e848:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    e84a:	f7ff fe63 	bl	e514 <z_nrf_rtc_timer_read>
    e84e:	4b02      	ldr	r3, [pc, #8]	; (e858 <sys_clock_elapsed+0x10>)
    e850:	681b      	ldr	r3, [r3, #0]
}
    e852:	1ac0      	subs	r0, r0, r3
    e854:	bd08      	pop	{r3, pc}
    e856:	bf00      	nop
    e858:	200012c0 	.word	0x200012c0

0000e85c <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
    e85c:	4602      	mov	r2, r0
    e85e:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    e860:	4801      	ldr	r0, [pc, #4]	; (e868 <multithreading_lock_acquire+0xc>)
    e862:	f001 bb79 	b.w	ff58 <z_impl_k_mutex_lock>
    e866:	bf00      	nop
    e868:	2000048c 	.word	0x2000048c

0000e86c <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
    e86c:	4801      	ldr	r0, [pc, #4]	; (e874 <multithreading_lock_release+0x8>)
    e86e:	f001 bbed 	b.w	1004c <z_impl_k_mutex_unlock>
    e872:	bf00      	nop
    e874:	2000048c 	.word	0x2000048c

0000e878 <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
    e878:	b510      	push	{r4, lr}
	BT_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
    e87a:	4916      	ldr	r1, [pc, #88]	; (e8d4 <hci_driver_open+0x5c>)
    e87c:	4816      	ldr	r0, [pc, #88]	; (e8d8 <hci_driver_open+0x60>)
{
    e87e:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
    e880:	f003 ff00 	bl	12684 <k_work_init>
		hci_ecdh_init();
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
    e884:	a803      	add	r0, sp, #12
    e886:	f7f5 fcd1 	bl	422c <sdc_build_revision_get>
    e88a:	4814      	ldr	r0, [pc, #80]	; (e8dc <hci_driver_open+0x64>)
    e88c:	f003 fd04 	bl	12298 <z_device_is_ready>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
    e890:	b1d0      	cbz	r0, e8c8 <hci_driver_open+0x50>
		BT_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
    e892:	4a13      	ldr	r2, [pc, #76]	; (e8e0 <hci_driver_open+0x68>)
    e894:	ca07      	ldmia	r2, {r0, r1, r2}
    e896:	466b      	mov	r3, sp
    e898:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
    e89c:	4618      	mov	r0, r3
    e89e:	f7f5 fe33 	bl	4508 <sdc_rand_source_register>
	if (err) {
    e8a2:	b9a0      	cbnz	r0, e8ce <hci_driver_open+0x56>
		BT_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
    e8a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e8a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e8ac:	f7ff ffd6 	bl	e85c <multithreading_lock_acquire>
	if (err) {
    e8b0:	4604      	mov	r4, r0
    e8b2:	b930      	cbnz	r0, e8c2 <hci_driver_open+0x4a>
				return err;
			}
		}
	}

	err = sdc_enable(receive_signal_raise, sdc_mempool);
    e8b4:	490b      	ldr	r1, [pc, #44]	; (e8e4 <hci_driver_open+0x6c>)
    e8b6:	480c      	ldr	r0, [pc, #48]	; (e8e8 <hci_driver_open+0x70>)
    e8b8:	f7f5 fd2a 	bl	4310 <sdc_enable>
	if (err) {
    e8bc:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
		return err;
	}

	MULTITHREADING_LOCK_RELEASE();
    e8be:	f7ff ffd5 	bl	e86c <multithreading_lock_release>

	return 0;
}
    e8c2:	4620      	mov	r0, r4
    e8c4:	b008      	add	sp, #32
    e8c6:	bd10      	pop	{r4, pc}
		return -ENODEV;
    e8c8:	f06f 0412 	mvn.w	r4, #18
    e8cc:	e7f9      	b.n	e8c2 <hci_driver_open+0x4a>
		return -EINVAL;
    e8ce:	f06f 0415 	mvn.w	r4, #21
    e8d2:	e7f6      	b.n	e8c2 <hci_driver_open+0x4a>
    e8d4:	00012173 	.word	0x00012173
    e8d8:	20001644 	.word	0x20001644
    e8dc:	00012c4c 	.word	0x00012c4c
    e8e0:	00012de4 	.word	0x00012de4
    e8e4:	2000191b 	.word	0x2000191b
    e8e8:	0000e9d1 	.word	0x0000e9d1

0000e8ec <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
    e8ec:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
    e8ee:	482b      	ldr	r0, [pc, #172]	; (e99c <hci_driver_init+0xb0>)
    e8f0:	f7fe f982 	bl	cbf8 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
    e8f4:	482a      	ldr	r0, [pc, #168]	; (e9a0 <hci_driver_init+0xb4>)
    e8f6:	f7f5 fd33 	bl	4360 <sdc_init>
			err = sdc_support_adv();
    e8fa:	f7f5 fdaf 	bl	445c <sdc_support_adv>
			if (err) {
    e8fe:	4604      	mov	r4, r0
    e900:	2800      	cmp	r0, #0
    e902:	d147      	bne.n	e994 <hci_driver_init+0xa8>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e904:	aa01      	add	r2, sp, #4
    e906:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
    e908:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e90c:	f7f5 fc9c 	bl	4248 <sdc_cfg_set>
	if (required_memory < 0) {
    e910:	2800      	cmp	r0, #0
    e912:	db3b      	blt.n	e98c <hci_driver_init+0xa0>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e914:	aa01      	add	r2, sp, #4
    e916:	2102      	movs	r1, #2
    e918:	4620      	mov	r0, r4
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
    e91a:	f88d 4004 	strb.w	r4, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e91e:	f7f5 fc93 	bl	4248 <sdc_cfg_set>
	if (required_memory < 0) {
    e922:	2800      	cmp	r0, #0
    e924:	db32      	blt.n	e98c <hci_driver_init+0xa0>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
    e926:	4b1f      	ldr	r3, [pc, #124]	; (e9a4 <hci_driver_init+0xb8>)
    e928:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e92a:	aa01      	add	r2, sp, #4
    e92c:	2103      	movs	r1, #3
    e92e:	4620      	mov	r0, r4
    e930:	f7f5 fc8a 	bl	4248 <sdc_cfg_set>
	if (required_memory < 0) {
    e934:	2800      	cmp	r0, #0
    e936:	db29      	blt.n	e98c <hci_driver_init+0xa0>
	cfg.event_length.event_length_us =
    e938:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e93c:	aa01      	add	r2, sp, #4
    e93e:	2104      	movs	r1, #4
    e940:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
    e942:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e944:	f7f5 fc80 	bl	4248 <sdc_cfg_set>
	if (required_memory < 0) {
    e948:	2800      	cmp	r0, #0
    e94a:	db1f      	blt.n	e98c <hci_driver_init+0xa0>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
    e94c:	2301      	movs	r3, #1
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e94e:	aa01      	add	r2, sp, #4
    e950:	2105      	movs	r1, #5
    e952:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
    e954:	f88d 3004 	strb.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e958:	f7f5 fc76 	bl	4248 <sdc_cfg_set>
	if (required_memory < 0) {
    e95c:	2800      	cmp	r0, #0
    e95e:	db15      	blt.n	e98c <hci_driver_init+0xa0>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
    e960:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e962:	aa01      	add	r2, sp, #4
    e964:	2107      	movs	r1, #7
    e966:	4620      	mov	r0, r4
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
    e968:	f8ad 3004 	strh.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    e96c:	f7f5 fc6c 	bl	4248 <sdc_cfg_set>
		if (required_memory < 0) {
    e970:	2800      	cmp	r0, #0
    e972:	db0b      	blt.n	e98c <hci_driver_init+0xa0>
	if (required_memory > sizeof(sdc_mempool)) {
    e974:	f240 2332 	movw	r3, #562	; 0x232
    e978:	4298      	cmp	r0, r3
    e97a:	dd09      	ble.n	e990 <hci_driver_init+0xa4>
		k_panic();
    e97c:	4040      	eors	r0, r0
    e97e:	f380 8811 	msr	BASEPRI, r0
    e982:	f04f 0004 	mov.w	r0, #4
    e986:	df02      	svc	2
		return -ENOMEM;
    e988:	f06f 000b 	mvn.w	r0, #11
	if (err) {
		return err;
	}

	return err;
}
    e98c:	b002      	add	sp, #8
    e98e:	bd10      	pop	{r4, pc}
	return 0;
    e990:	4620      	mov	r0, r4
	if (err) {
    e992:	e7fb      	b.n	e98c <hci_driver_init+0xa0>
				return -ENOTSUP;
    e994:	f06f 0085 	mvn.w	r0, #133	; 0x85
    e998:	e7f8      	b.n	e98c <hci_driver_init+0xa0>
    e99a:	bf00      	nop
    e99c:	00013000 	.word	0x00013000
    e9a0:	00012103 	.word	0x00012103
    e9a4:	02031b1b 	.word	0x02031b1b

0000e9a8 <rand_prio_low_vector_get>:
{
    e9a8:	b538      	push	{r3, r4, r5, lr}
    e9aa:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
    e9ac:	4807      	ldr	r0, [pc, #28]	; (e9cc <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
    e9ae:	6883      	ldr	r3, [r0, #8]
    e9b0:	685d      	ldr	r5, [r3, #4]
    e9b2:	460a      	mov	r2, r1
    e9b4:	b135      	cbz	r5, e9c4 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    e9b6:	2300      	movs	r3, #0
    e9b8:	4621      	mov	r1, r4
    e9ba:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
    e9bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
    e9c0:	b2c0      	uxtb	r0, r0
    e9c2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
    e9c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    e9c8:	e7f8      	b.n	e9bc <rand_prio_low_vector_get+0x14>
    e9ca:	bf00      	nop
    e9cc:	00012c4c 	.word	0x00012c4c

0000e9d0 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
    e9d0:	4901      	ldr	r1, [pc, #4]	; (e9d8 <receive_signal_raise+0x8>)
    e9d2:	4802      	ldr	r0, [pc, #8]	; (e9dc <receive_signal_raise+0xc>)
    e9d4:	f003 be73 	b.w	126be <k_work_submit_to_queue>
    e9d8:	20001644 	.word	0x20001644
    e9dc:	200012d0 	.word	0x200012d0

0000e9e0 <rand_prio_low_vector_get_blocking>:
{
    e9e0:	b410      	push	{r4}
    e9e2:	4603      	mov	r3, r0
    e9e4:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
    e9e6:	4803      	ldr	r0, [pc, #12]	; (e9f4 <rand_prio_low_vector_get_blocking+0x14>)
    e9e8:	6881      	ldr	r1, [r0, #8]
    e9ea:	680c      	ldr	r4, [r1, #0]
    e9ec:	4619      	mov	r1, r3
    e9ee:	4623      	mov	r3, r4
}
    e9f0:	bc10      	pop	{r4}
    e9f2:	4718      	bx	r3
    e9f4:	00012c4c 	.word	0x00012c4c

0000e9f8 <hci_driver_receive_process>:
{
    e9f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
    e9fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e9fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ea02:	f7ff ff2b 	bl	e85c <multithreading_lock_acquire>
	if (!errcode) {
    ea06:	2800      	cmp	r0, #0
    ea08:	d145      	bne.n	ea96 <hci_driver_receive_process+0x9e>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
    ea0a:	4d24      	ldr	r5, [pc, #144]	; (ea9c <hci_driver_receive_process+0xa4>)
    ea0c:	f10d 0107 	add.w	r1, sp, #7
    ea10:	4628      	mov	r0, r5
    ea12:	f000 fa85 	bl	ef20 <hci_internal_msg_get>
    ea16:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
    ea18:	f7ff ff28 	bl	e86c <multithreading_lock_release>
	if (errcode) {
    ea1c:	2c00      	cmp	r4, #0
    ea1e:	d13a      	bne.n	ea96 <hci_driver_receive_process+0x9e>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
    ea20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ea24:	2b04      	cmp	r3, #4
    ea26:	d126      	bne.n	ea76 <hci_driver_receive_process+0x7e>
	switch (hdr->evt) {
    ea28:	7828      	ldrb	r0, [r5, #0]
    ea2a:	283e      	cmp	r0, #62	; 0x3e
    ea2c:	d019      	beq.n	ea62 <hci_driver_receive_process+0x6a>
    ea2e:	28ff      	cmp	r0, #255	; 0xff
    ea30:	d01e      	beq.n	ea70 <hci_driver_receive_process+0x78>
		switch (subevent) {
    ea32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ea36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
    ea3a:	4621      	mov	r1, r4
    ea3c:	f7fd fd22 	bl	c484 <bt_buf_get_evt>
	if (!evt_buf) {
    ea40:	4604      	mov	r4, r0
    ea42:	b148      	cbz	r0, ea58 <hci_driver_receive_process+0x60>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
    ea44:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ea46:	4915      	ldr	r1, [pc, #84]	; (ea9c <hci_driver_receive_process+0xa4>)
    ea48:	3202      	adds	r2, #2
    ea4a:	f104 0008 	add.w	r0, r4, #8
    ea4e:	f003 f8bc 	bl	11bca <net_buf_simple_add_mem>
	bt_recv(data_buf);
    ea52:	4620      	mov	r0, r4
    ea54:	f7fe f8aa 	bl	cbac <bt_recv>
}
    ea58:	b003      	add	sp, #12
    ea5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		receive_signal_raise();
    ea5e:	f7ff bfb7 	b.w	e9d0 <receive_signal_raise>
		switch (me->subevent) {
    ea62:	78ab      	ldrb	r3, [r5, #2]
    ea64:	2b02      	cmp	r3, #2
		switch (subevent) {
    ea66:	d1e4      	bne.n	ea32 <hci_driver_receive_process+0x3a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
    ea68:	2200      	movs	r2, #0
    ea6a:	2300      	movs	r3, #0
			return true;
    ea6c:	2401      	movs	r4, #1
    ea6e:	e7e4      	b.n	ea3a <hci_driver_receive_process+0x42>
		switch (subevent) {
    ea70:	78ab      	ldrb	r3, [r5, #2]
    ea72:	2b80      	cmp	r3, #128	; 0x80
    ea74:	e7f7      	b.n	ea66 <hci_driver_receive_process+0x6e>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
    ea76:	2b02      	cmp	r3, #2
    ea78:	d10d      	bne.n	ea96 <hci_driver_receive_process+0x9e>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    ea7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ea7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ea82:	2003      	movs	r0, #3
    ea84:	f7fd fcd4 	bl	c430 <bt_buf_get_rx>
	if (!data_buf) {
    ea88:	4604      	mov	r4, r0
    ea8a:	2800      	cmp	r0, #0
    ea8c:	d0e4      	beq.n	ea58 <hci_driver_receive_process+0x60>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
    ea8e:	886a      	ldrh	r2, [r5, #2]
    ea90:	4629      	mov	r1, r5
    ea92:	3204      	adds	r2, #4
    ea94:	e7d9      	b.n	ea4a <hci_driver_receive_process+0x52>
}
    ea96:	b003      	add	sp, #12
    ea98:	bd30      	pop	{r4, r5, pc}
    ea9a:	bf00      	nop
    ea9c:	200018d5 	.word	0x200018d5

0000eaa0 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
    eaa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
    eaa2:	4dba      	ldr	r5, [pc, #744]	; (ed8c <hci_internal_cmd_put+0x2ec>)
    eaa4:	782b      	ldrb	r3, [r5, #0]
{
    eaa6:	4606      	mov	r6, r0
	if (cmd_complete_or_status.occurred) {
    eaa8:	2b00      	cmp	r3, #0
    eaaa:	f040 8231 	bne.w	ef10 <hci_internal_cmd_put+0x470>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
    eaae:	2304      	movs	r3, #4
    eab0:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
    eab4:	4bb6      	ldr	r3, [pc, #728]	; (ed90 <hci_internal_cmd_put+0x2f0>)
    eab6:	8804      	ldrh	r4, [r0, #0]
    eab8:	681f      	ldr	r7, [r3, #0]
    eaba:	b1b7      	cbz	r7, eaea <hci_internal_cmd_put+0x4a>
		status = user_cmd_handler(cmd_in,
    eabc:	f10d 0306 	add.w	r3, sp, #6
    eac0:	f10d 0207 	add.w	r2, sp, #7
    eac4:	1c69      	adds	r1, r5, #1
    eac6:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
    eac8:	2801      	cmp	r0, #1
    eaca:	d00e      	beq.n	eaea <hci_internal_cmd_put+0x4a>
	if (generate_command_status_event ||
    eacc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ead0:	2b00      	cmp	r3, #0
    ead2:	f040 8206 	bne.w	eee2 <hci_internal_cmd_put+0x442>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
    ead6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
    eada:	70ab      	strb	r3, [r5, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    eadc:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
    eade:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    eae0:	706a      	strb	r2, [r5, #1]
	evt_data->ncmd = 1;
    eae2:	70eb      	strb	r3, [r5, #3]
	evt_data->opcode = hci_opcode;
    eae4:	80ac      	strh	r4, [r5, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
    eae6:	71a8      	strb	r0, [r5, #6]
}
    eae8:	e204      	b.n	eef4 <hci_internal_cmd_put+0x454>
		switch (BT_OGF(opcode)) {
    eaea:	0aa3      	lsrs	r3, r4, #10
    eaec:	2b08      	cmp	r3, #8
    eaee:	f000 8089 	beq.w	ec04 <hci_internal_cmd_put+0x164>
    eaf2:	d805      	bhi.n	eb00 <hci_internal_cmd_put+0x60>
    eaf4:	2b03      	cmp	r3, #3
    eaf6:	d00a      	beq.n	eb0e <hci_internal_cmd_put+0x6e>
    eaf8:	2b04      	cmp	r3, #4
    eafa:	d019      	beq.n	eb30 <hci_internal_cmd_put+0x90>
    eafc:	2001      	movs	r0, #1
    eafe:	e1f0      	b.n	eee2 <hci_internal_cmd_put+0x442>
    eb00:	2b3f      	cmp	r3, #63	; 0x3f
    eb02:	f000 8136 	beq.w	ed72 <hci_internal_cmd_put+0x2d2>
    eb06:	2001      	movs	r0, #1
	if (generate_command_status_event ||
    eb08:	2801      	cmp	r0, #1
    eb0a:	d0f7      	beq.n	eafc <hci_internal_cmd_put+0x5c>
    eb0c:	e7e3      	b.n	ead6 <hci_internal_cmd_put+0x36>
	return ((uint16_t)src[1] << 8) | src[0];
    eb0e:	f9b6 3000 	ldrsh.w	r3, [r6]
	switch (opcode)	{
    eb12:	f640 4201 	movw	r2, #3073	; 0xc01
    eb16:	4293      	cmp	r3, r2
    eb18:	d006      	beq.n	eb28 <hci_internal_cmd_put+0x88>
    eb1a:	f640 4203 	movw	r2, #3075	; 0xc03
    eb1e:	4293      	cmp	r3, r2
    eb20:	d1ec      	bne.n	eafc <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_reset();
    eb22:	f7f5 fdeb 	bl	46fc <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
    eb26:	e7ef      	b.n	eb08 <hci_internal_cmd_put+0x68>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
    eb28:	1cf0      	adds	r0, r6, #3
    eb2a:	f7fa f88b 	bl	8c44 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
    eb2e:	e7eb      	b.n	eb08 <hci_internal_cmd_put+0x68>
	switch (opcode)	{
    eb30:	8833      	ldrh	r3, [r6, #0]
    eb32:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    eb36:	3b01      	subs	r3, #1
    eb38:	2b08      	cmp	r3, #8
    eb3a:	d8df      	bhi.n	eafc <hci_internal_cmd_put+0x5c>
    eb3c:	a201      	add	r2, pc, #4	; (adr r2, eb44 <hci_internal_cmd_put+0xa4>)
    eb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    eb42:	bf00      	nop
    eb44:	0000eb69 	.word	0x0000eb69
    eb48:	0000eb7b 	.word	0x0000eb7b
    eb4c:	0000ebd3 	.word	0x0000ebd3
    eb50:	0000eafd 	.word	0x0000eafd
    eb54:	0000eafd 	.word	0x0000eafd
    eb58:	0000eafd 	.word	0x0000eafd
    eb5c:	0000eafd 	.word	0x0000eafd
    eb60:	0000eafd 	.word	0x0000eafd
    eb64:	0000ebf3 	.word	0x0000ebf3
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
    eb68:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
    eb6c:	4889      	ldr	r0, [pc, #548]	; (ed94 <hci_internal_cmd_put+0x2f4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
    eb6e:	3308      	adds	r3, #8
    eb70:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
    eb74:	f7fa f934 	bl	8de0 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
    eb78:	e7c6      	b.n	eb08 <hci_internal_cmd_put+0x68>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
    eb7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    eb7e:	4885      	ldr	r0, [pc, #532]	; (ed94 <hci_internal_cmd_put+0x2f4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
    eb80:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
    eb82:	222f      	movs	r2, #47	; 0x2f
    eb84:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
    eb86:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    eb8a:	f003 ffee 	bl	12b6a <memset>
	cmds->hci_set_event_mask = 1;
    eb8e:	f06f 033f 	mvn.w	r3, #63	; 0x3f
    eb92:	732b      	strb	r3, [r5, #12]
	cmds->hci_read_local_version_information = 1;
    eb94:	2328      	movs	r3, #40	; 0x28
    eb96:	756b      	strb	r3, [r5, #21]
	cmds->hci_read_bd_addr = 1;
    eb98:	2302      	movs	r3, #2
    eb9a:	75ab      	strb	r3, [r5, #22]
	cmds->hci_le_set_event_mask = 1;
    eb9c:	f06f 0308 	mvn.w	r3, #8
    eba0:	f885 3020 	strb.w	r3, [r5, #32]
	cmds->hci_le_set_scan_response_data = 1;
    eba4:	f06f 033c 	mvn.w	r3, #60	; 0x3c
    eba8:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
    ebac:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	cmds->hci_le_read_supported_states = 1;
    ebb0:	2378      	movs	r3, #120	; 0x78
    ebb2:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
    ebb6:	2380      	movs	r3, #128	; 0x80
    ebb8:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
    ebbc:	2301      	movs	r3, #1
    ebbe:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
    ebc2:	2380      	movs	r3, #128	; 0x80
    ebc4:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	cmds->hci_le_set_data_related_address_changes = 1;
    ebc8:	2340      	movs	r3, #64	; 0x40
    ebca:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
		return 0;
    ebce:	2000      	movs	r0, #0
    ebd0:	e781      	b.n	ead6 <hci_internal_cmd_put+0x36>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
    ebd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ebd6:	3308      	adds	r3, #8
    ebd8:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
    ebdc:	4b6d      	ldr	r3, [pc, #436]	; (ed94 <hci_internal_cmd_put+0x2f4>)
    ebde:	2200      	movs	r2, #0
    ebe0:	601a      	str	r2, [r3, #0]
    ebe2:	605a      	str	r2, [r3, #4]
	features->bdedr_not_supported = 1;
    ebe4:	7aeb      	ldrb	r3, [r5, #11]
    ebe6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    ebea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    ebee:	72eb      	strb	r3, [r5, #11]
	if (generate_command_status_event ||
    ebf0:	e7ed      	b.n	ebce <hci_internal_cmd_put+0x12e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
    ebf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
    ebf6:	4867      	ldr	r0, [pc, #412]	; (ed94 <hci_internal_cmd_put+0x2f4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
    ebf8:	3306      	adds	r3, #6
    ebfa:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
    ebfe:	f7fa f8ed 	bl	8ddc <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
    ec02:	e781      	b.n	eb08 <hci_internal_cmd_put+0x68>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
    ec04:	4630      	mov	r0, r6
	switch (opcode)	{
    ec06:	f242 011c 	movw	r1, #8220	; 0x201c
    ec0a:	f830 3b03 	ldrh.w	r3, [r0], #3
    ec0e:	b21a      	sxth	r2, r3
    ec10:	428a      	cmp	r2, r1
    ec12:	dc19      	bgt.n	ec48 <hci_internal_cmd_put+0x1a8>
    ec14:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    ec18:	f242 0626 	movw	r6, #8230	; 0x2026
    ec1c:	dd1f      	ble.n	ec5e <hci_internal_cmd_put+0x1be>
    ec1e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    ec22:	3b01      	subs	r3, #1
    ec24:	2b1b      	cmp	r3, #27
    ec26:	d81a      	bhi.n	ec5e <hci_internal_cmd_put+0x1be>
    ec28:	e8df f003 	tbb	[pc, r3]
    ec2c:	19372b20 	.word	0x19372b20
    ec30:	60575451 	.word	0x60575451
    ec34:	19196663 	.word	0x19196663
    ec38:	756c1919 	.word	0x756c1919
    ec3c:	19197b78 	.word	0x19197b78
    ec40:	877e1919 	.word	0x877e1919
    ec44:	90191919 	.word	0x90191919
    ec48:	f242 034b 	movw	r3, #8267	; 0x204b
    ec4c:	429a      	cmp	r2, r3
    ec4e:	f000 8087 	beq.w	ed60 <hci_internal_cmd_put+0x2c0>
    ec52:	f242 037c 	movw	r3, #8316	; 0x207c
    ec56:	429a      	cmp	r2, r3
    ec58:	f242 0626 	movw	r6, #8230	; 0x2026
    ec5c:	d04f      	beq.n	ecfe <hci_internal_cmd_put+0x25e>
	switch (hci_opcode) {
    ec5e:	42b4      	cmp	r4, r6
    ec60:	f200 814d 	bhi.w	eefe <hci_internal_cmd_put+0x45e>
    ec64:	f242 030c 	movw	r3, #8204	; 0x200c
    ec68:	2001      	movs	r0, #1
    ec6a:	e126      	b.n	eeba <hci_internal_cmd_put+0x41a>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
    ec6c:	f7fa f8d8 	bl	8e20 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
    ec70:	42b4      	cmp	r4, r6
    ec72:	f240 8129 	bls.w	eec8 <hci_internal_cmd_put+0x428>
    ec76:	f242 0377 	movw	r3, #8311	; 0x2077
    ec7a:	429c      	cmp	r4, r3
    ec7c:	f040 80b5 	bne.w	edea <hci_internal_cmd_put+0x34a>
    ec80:	e12f      	b.n	eee2 <hci_internal_cmd_put+0x442>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
    ec82:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
    ec86:	4843      	ldr	r0, [pc, #268]	; (ed94 <hci_internal_cmd_put+0x2f4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
    ec88:	3303      	adds	r3, #3
    ec8a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
    ec8e:	f7fa f8b7 	bl	8e00 <sdc_hci_cmd_le_read_buffer_size>
	switch (hci_opcode) {
    ec92:	f242 0326 	movw	r3, #8230	; 0x2026
    ec96:	429c      	cmp	r4, r3
    ec98:	e7eb      	b.n	ec72 <hci_internal_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
    ec9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ec9e:	3308      	adds	r3, #8
    eca0:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
    eca4:	4b3b      	ldr	r3, [pc, #236]	; (ed94 <hci_internal_cmd_put+0x2f4>)
    eca6:	2200      	movs	r2, #0
    eca8:	601a      	str	r2, [r3, #0]
    ecaa:	711a      	strb	r2, [r3, #4]
	features->le_encryption = 1;
    ecac:	79eb      	ldrb	r3, [r5, #7]
    ecae:	f023 031d 	bic.w	r3, r3, #29
    ecb2:	f043 031d 	orr.w	r3, r3, #29
    ecb6:	71eb      	strb	r3, [r5, #7]
	features->channel_selection_algorithm_2 = 1;
    ecb8:	7a2b      	ldrb	r3, [r5, #8]
    ecba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ecbe:	722b      	strb	r3, [r5, #8]
	switch (hci_opcode) {
    ecc0:	f242 0326 	movw	r3, #8230	; 0x2026
    ecc4:	429c      	cmp	r4, r3
    ecc6:	f240 80f5 	bls.w	eeb4 <hci_internal_cmd_put+0x414>
		return 0;
    ecca:	2000      	movs	r0, #0
    eccc:	e7d3      	b.n	ec76 <hci_internal_cmd_put+0x1d6>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
    ecce:	f7fa f8ac 	bl	8e2a <sdc_hci_cmd_le_set_random_address>
	switch (hci_opcode) {
    ecd2:	e7cd      	b.n	ec70 <hci_internal_cmd_put+0x1d0>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
    ecd4:	f7fa f8a0 	bl	8e18 <sdc_hci_cmd_le_set_adv_params>
    ecd8:	e7ca      	b.n	ec70 <hci_internal_cmd_put+0x1d0>
		*param_length_out +=
    ecda:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
    ecde:	482d      	ldr	r0, [pc, #180]	; (ed94 <hci_internal_cmd_put+0x2f4>)
		*param_length_out +=
    ece0:	3301      	adds	r3, #1
    ece2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
    ece6:	f7fa f889 	bl	8dfc <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
	switch (hci_opcode) {
    ecea:	e7d2      	b.n	ec92 <hci_internal_cmd_put+0x1f2>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
    ecec:	f7fa f890 	bl	8e10 <sdc_hci_cmd_le_set_adv_data>
	switch (hci_opcode) {
    ecf0:	e7be      	b.n	ec70 <hci_internal_cmd_put+0x1d0>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
    ecf2:	f7fa f89c 	bl	8e2e <sdc_hci_cmd_le_set_scan_response_data>
	switch (hci_opcode) {
    ecf6:	e7bb      	b.n	ec70 <hci_internal_cmd_put+0x1d0>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
    ecf8:	f7fa f88c 	bl	8e14 <sdc_hci_cmd_le_set_adv_enable>
	switch (hci_opcode) {
    ecfc:	e7b8      	b.n	ec70 <hci_internal_cmd_put+0x1d0>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
    ecfe:	f7fa f88d 	bl	8e1c <sdc_hci_cmd_le_set_data_related_address_changes>
	switch (hci_opcode) {
    ed02:	e7b5      	b.n	ec70 <hci_internal_cmd_put+0x1d0>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
    ed04:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
    ed08:	4822      	ldr	r0, [pc, #136]	; (ed94 <hci_internal_cmd_put+0x2f4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
    ed0a:	3301      	adds	r3, #1
    ed0c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
    ed10:	f7fa f878 	bl	8e04 <sdc_hci_cmd_le_read_filter_accept_list_size>
	switch (hci_opcode) {
    ed14:	e7bd      	b.n	ec92 <hci_internal_cmd_put+0x1f2>
		return sdc_hci_cmd_le_clear_filter_accept_list();
    ed16:	f7fa f867 	bl	8de8 <sdc_hci_cmd_le_clear_filter_accept_list>
	switch (hci_opcode) {
    ed1a:	e7a9      	b.n	ec70 <hci_internal_cmd_put+0x1d0>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
    ed1c:	f7fa f862 	bl	8de4 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
	switch (hci_opcode) {
    ed20:	e7a6      	b.n	ec70 <hci_internal_cmd_put+0x1d0>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
    ed22:	f7fa f873 	bl	8e0c <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
	switch (hci_opcode) {
    ed26:	e7a3      	b.n	ec70 <hci_internal_cmd_put+0x1d0>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
    ed28:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
    ed2c:	4919      	ldr	r1, [pc, #100]	; (ed94 <hci_internal_cmd_put+0x2f4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
    ed2e:	3310      	adds	r3, #16
    ed30:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
    ed34:	f7fa f85a 	bl	8dec <sdc_hci_cmd_le_encrypt>
	switch (hci_opcode) {
    ed38:	e7ab      	b.n	ec92 <hci_internal_cmd_put+0x1f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
    ed3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
    ed3e:	4815      	ldr	r0, [pc, #84]	; (ed94 <hci_internal_cmd_put+0x2f4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
    ed40:	3308      	adds	r3, #8
    ed42:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
    ed46:	f7fa f857 	bl	8df8 <sdc_hci_cmd_le_rand>
    ed4a:	e7a2      	b.n	ec92 <hci_internal_cmd_put+0x1f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
    ed4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ed50:	3308      	adds	r3, #8
    ed52:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
    ed56:	2303      	movs	r3, #3
    ed58:	71eb      	strb	r3, [r5, #7]
	*(buf + 4) = states2;
    ed5a:	2300      	movs	r3, #0
    ed5c:	72eb      	strb	r3, [r5, #11]
    ed5e:	e7af      	b.n	ecc0 <hci_internal_cmd_put+0x220>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
    ed60:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
    ed64:	480b      	ldr	r0, [pc, #44]	; (ed94 <hci_internal_cmd_put+0x2f4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
    ed66:	3302      	adds	r3, #2
    ed68:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
    ed6c:	f7fa f84c 	bl	8e08 <sdc_hci_cmd_le_read_transmit_power>
	switch (hci_opcode) {
    ed70:	e78f      	b.n	ec92 <hci_internal_cmd_put+0x1f2>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
    ed72:	4630      	mov	r0, r6
	switch (opcode)	{
    ed74:	f64f 420b 	movw	r2, #64523	; 0xfc0b
    ed78:	f830 3b03 	ldrh.w	r3, [r0], #3
    ed7c:	4293      	cmp	r3, r2
    ed7e:	d819      	bhi.n	edb4 <hci_internal_cmd_put+0x314>
    ed80:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
    ed84:	d808      	bhi.n	ed98 <hci_internal_cmd_put+0x2f8>
    ed86:	2001      	movs	r0, #1
	switch (hci_opcode) {
    ed88:	e02f      	b.n	edea <hci_internal_cmd_put+0x34a>
    ed8a:	bf00      	nop
    ed8c:	20001b4d 	.word	0x20001b4d
    ed90:	20001654 	.word	0x20001654
    ed94:	20001b54 	.word	0x20001b54
	switch (opcode)	{
    ed98:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
    ed9c:	3b01      	subs	r3, #1
    ed9e:	2b0a      	cmp	r3, #10
    eda0:	f200 80af 	bhi.w	ef02 <hci_internal_cmd_put+0x462>
    eda4:	e8df f003 	tbb	[pc, r3]
    eda8:	adad3119 	.word	0xadad3119
    edac:	adad59ad 	.word	0xadad59ad
    edb0:	5047      	.short	0x5047
    edb2:	5c          	.byte	0x5c
    edb3:	00          	.byte	0x00
    edb4:	f503 7240 	add.w	r2, r3, #768	; 0x300
    edb8:	b292      	uxth	r2, r2
    edba:	2a0c      	cmp	r2, #12
    edbc:	d8e3      	bhi.n	ed86 <hci_internal_cmd_put+0x2e6>
    edbe:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
    edc2:	2b0c      	cmp	r3, #12
    edc4:	f200 809b 	bhi.w	eefe <hci_internal_cmd_put+0x45e>
    edc8:	e8df f003 	tbb	[pc, r3]
    edcc:	68656253 	.word	0x68656253
    edd0:	99996e6b 	.word	0x99996e6b
    edd4:	99999999 	.word	0x99999999
    edd8:	71          	.byte	0x71
    edd9:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
    edda:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
    edde:	484e      	ldr	r0, [pc, #312]	; (ef18 <hci_internal_cmd_put+0x478>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
    ede0:	330c      	adds	r3, #12
    ede2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
    ede6:	f7f5 fc9d 	bl	4724 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
    edea:	f242 0377 	movw	r3, #8311	; 0x2077
    edee:	429c      	cmp	r4, r3
    edf0:	f200 8088 	bhi.w	ef04 <hci_internal_cmd_put+0x464>
    edf4:	f242 0332 	movw	r3, #8242	; 0x2032
    edf8:	429c      	cmp	r4, r3
    edfa:	d072      	beq.n	eee2 <hci_internal_cmd_put+0x442>
    edfc:	f5a4 5301 	sub.w	r3, r4, #8256	; 0x2040
    ee00:	3b03      	subs	r3, #3
    ee02:	2b01      	cmp	r3, #1
    ee04:	f63f ae80 	bhi.w	eb08 <hci_internal_cmd_put+0x68>
    ee08:	e06b      	b.n	eee2 <hci_internal_cmd_put+0x442>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
    ee0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ee0e:	3340      	adds	r3, #64	; 0x40
    ee10:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    ee14:	4b40      	ldr	r3, [pc, #256]	; (ef18 <hci_internal_cmd_put+0x478>)
    ee16:	2200      	movs	r2, #0
    ee18:	801a      	strh	r2, [r3, #0]
	cmds->read_version_info = 1;
    ee1a:	79eb      	ldrb	r3, [r5, #7]
    ee1c:	f023 0323 	bic.w	r3, r3, #35	; 0x23
    ee20:	f043 0323 	orr.w	r3, r3, #35	; 0x23
    ee24:	71eb      	strb	r3, [r5, #7]
	cmds->read_static_addresses = 1;
    ee26:	7a2b      	ldrb	r3, [r5, #8]
    ee28:	f023 0307 	bic.w	r3, r3, #7
    ee2c:	f043 0307 	orr.w	r3, r3, #7
    ee30:	722b      	strb	r3, [r5, #8]
		return 0;
    ee32:	2000      	movs	r0, #0
    ee34:	e7d9      	b.n	edea <hci_internal_cmd_put+0x34a>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
    ee36:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
    ee3a:	4837      	ldr	r0, [pc, #220]	; (ef18 <hci_internal_cmd_put+0x478>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
    ee3c:	3317      	adds	r3, #23
    ee3e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
    ee42:	f7f9 ff7a 	bl	8d3a <sdc_hci_cmd_vs_zephyr_read_static_addresses>
    ee46:	e7d0      	b.n	edea <hci_internal_cmd_put+0x34a>
		*param_length_out +=
    ee48:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
    ee4c:	4832      	ldr	r0, [pc, #200]	; (ef18 <hci_internal_cmd_put+0x478>)
		*param_length_out +=
    ee4e:	3320      	adds	r3, #32
    ee50:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
    ee54:	f7f9 ff24 	bl	8ca0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
    ee58:	e7c7      	b.n	edea <hci_internal_cmd_put+0x34a>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
    ee5a:	f7f9 ffbd 	bl	8dd8 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
    ee5e:	e7c4      	b.n	edea <hci_internal_cmd_put+0x34a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
    ee60:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
    ee64:	482c      	ldr	r0, [pc, #176]	; (ef18 <hci_internal_cmd_put+0x478>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
    ee66:	3301      	adds	r3, #1
    ee68:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
    ee6c:	f7f9 ff04 	bl	8c78 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
    ee70:	e7bb      	b.n	edea <hci_internal_cmd_put+0x34a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
    ee72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ee76:	3340      	adds	r3, #64	; 0x40
    ee78:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    ee7c:	4b26      	ldr	r3, [pc, #152]	; (ef18 <hci_internal_cmd_put+0x478>)
    ee7e:	2200      	movs	r2, #0
    ee80:	801a      	strh	r2, [r3, #0]
	cmds->read_supported_vs_commands = 1;
    ee82:	79eb      	ldrb	r3, [r5, #7]
    ee84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    ee88:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
    ee8c:	71eb      	strb	r3, [r5, #7]
}
    ee8e:	e7d0      	b.n	ee32 <hci_internal_cmd_put+0x392>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
    ee90:	f7f9 fee9 	bl	8c66 <sdc_hci_cmd_vs_llpm_mode_set>
    ee94:	e7a9      	b.n	edea <hci_internal_cmd_put+0x34a>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
    ee96:	f7f9 fee2 	bl	8c5e <sdc_hci_cmd_vs_conn_update>
    ee9a:	e7a6      	b.n	edea <hci_internal_cmd_put+0x34a>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
    ee9c:	f7f9 fed7 	bl	8c4e <sdc_hci_cmd_vs_conn_event_extend>
    eea0:	e7a3      	b.n	edea <hci_internal_cmd_put+0x34a>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
    eea2:	f7f9 fee2 	bl	8c6a <sdc_hci_cmd_vs_qos_conn_event_report_enable>
    eea6:	e7a0      	b.n	edea <hci_internal_cmd_put+0x34a>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
    eea8:	f7f9 fedb 	bl	8c62 <sdc_hci_cmd_vs_event_length_set>
    eeac:	e79d      	b.n	edea <hci_internal_cmd_put+0x34a>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
    eeae:	f7f9 fee1 	bl	8c74 <sdc_hci_cmd_vs_set_adv_randomness>
    eeb2:	e79a      	b.n	edea <hci_internal_cmd_put+0x34a>
	switch (hci_opcode) {
    eeb4:	f242 030c 	movw	r3, #8204	; 0x200c
		return 0;
    eeb8:	2000      	movs	r0, #0
	switch (hci_opcode) {
    eeba:	429c      	cmp	r4, r3
    eebc:	d807      	bhi.n	eece <hci_internal_cmd_put+0x42e>
    eebe:	f240 431d 	movw	r3, #1053	; 0x41d
    eec2:	429c      	cmp	r4, r3
    eec4:	d00d      	beq.n	eee2 <hci_internal_cmd_put+0x442>
    eec6:	e61f      	b.n	eb08 <hci_internal_cmd_put+0x68>
    eec8:	f242 030c 	movw	r3, #8204	; 0x200c
    eecc:	e7f5      	b.n	eeba <hci_internal_cmd_put+0x41a>
    eece:	f5a4 5300 	sub.w	r3, r4, #8192	; 0x2000
    eed2:	4a12      	ldr	r2, [pc, #72]	; (ef1c <hci_internal_cmd_put+0x47c>)
    eed4:	3b0d      	subs	r3, #13
    eed6:	b29b      	uxth	r3, r3
    eed8:	fa22 f303 	lsr.w	r3, r2, r3
    eedc:	07db      	lsls	r3, r3, #31
    eede:	f57f ae13 	bpl.w	eb08 <hci_internal_cmd_put+0x68>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    eee2:	230f      	movs	r3, #15
    eee4:	706b      	strb	r3, [r5, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    eee6:	2304      	movs	r3, #4
    eee8:	70ab      	strb	r3, [r5, #2]
	evt_data->ncmd = 1;
    eeea:	2301      	movs	r3, #1
	evt_data->status = status_code;
    eeec:	70e8      	strb	r0, [r5, #3]
	evt_data->ncmd = 1;
    eeee:	712b      	strb	r3, [r5, #4]
	evt_data->opcode = hci_opcode;
    eef0:	f8a5 4005 	strh.w	r4, [r5, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
    eef4:	2301      	movs	r3, #1
    eef6:	702b      	strb	r3, [r5, #0]
	}

	return 0;
    eef8:	2000      	movs	r0, #0
}
    eefa:	b003      	add	sp, #12
    eefc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (hci_opcode) {
    eefe:	2001      	movs	r0, #1
    ef00:	e6b9      	b.n	ec76 <hci_internal_cmd_put+0x1d6>
	switch (opcode)	{
    ef02:	2001      	movs	r0, #1
	switch (hci_opcode) {
    ef04:	f024 0308 	bic.w	r3, r4, #8
    ef08:	f64f 5202 	movw	r2, #64770	; 0xfd02
    ef0c:	4293      	cmp	r3, r2
    ef0e:	e7d9      	b.n	eec4 <hci_internal_cmd_put+0x424>
		return -NRF_EPERM;
    ef10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ef14:	e7f1      	b.n	eefa <hci_internal_cmd_put+0x45a>
    ef16:	bf00      	nop
    ef18:	20001b54 	.word	0x20001b54
    ef1c:	03001241 	.word	0x03001241

0000ef20 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
    ef20:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
    ef22:	4c09      	ldr	r4, [pc, #36]	; (ef48 <hci_internal_msg_get+0x28>)
    ef24:	7823      	ldrb	r3, [r4, #0]
{
    ef26:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
    ef28:	b91b      	cbnz	r3, ef32 <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
    ef2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
    ef2e:	f7f9 be79 	b.w	8c24 <sdc_hci_get>
		memcpy(msg_out,
    ef32:	78a2      	ldrb	r2, [r4, #2]
    ef34:	1c61      	adds	r1, r4, #1
    ef36:	3202      	adds	r2, #2
    ef38:	f003 fe09 	bl	12b4e <memcpy>
		cmd_complete_or_status.occurred = false;
    ef3c:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
    ef3e:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
    ef40:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
    ef42:	702b      	strb	r3, [r5, #0]
}
    ef44:	bd38      	pop	{r3, r4, r5, pc}
    ef46:	bf00      	nop
    ef48:	20001b4d 	.word	0x20001b4d

0000ef4c <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
    ef4c:	b570      	push	{r4, r5, r6, lr}
    ef4e:	4605      	mov	r5, r0
    ef50:	460e      	mov	r6, r1
    ef52:	4c08      	ldr	r4, [pc, #32]	; (ef74 <bt_rand+0x28>)
    ef54:	4620      	mov	r0, r4
    ef56:	f003 f99f 	bl	12298 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
    ef5a:	b138      	cbz	r0, ef6c <bt_rand+0x20>
    ef5c:	68a3      	ldr	r3, [r4, #8]
    ef5e:	b2b2      	uxth	r2, r6
    ef60:	4629      	mov	r1, r5
    ef62:	4620      	mov	r0, r4
    ef64:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
    ef66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef6a:	4718      	bx	r3
    ef6c:	f06f 0012 	mvn.w	r0, #18
    ef70:	bd70      	pop	{r4, r5, r6, pc}
    ef72:	bf00      	nop
    ef74:	00012c4c 	.word	0x00012c4c

0000ef78 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
    ef78:	4901      	ldr	r1, [pc, #4]	; (ef80 <mpsl_low_prio_irq_handler+0x8>)
    ef7a:	4802      	ldr	r0, [pc, #8]	; (ef84 <mpsl_low_prio_irq_handler+0xc>)
    ef7c:	f003 bb9f 	b.w	126be <k_work_submit_to_queue>
    ef80:	20001658 	.word	0x20001658
    ef84:	200012d0 	.word	0x200012d0

0000ef88 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
    ef88:	b513      	push	{r0, r1, r4, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
    ef8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    ef8e:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
    ef92:	2300      	movs	r3, #0
    ef94:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
    ef98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    ef9c:	f8ad 3000 	strh.w	r3, [sp]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    efa0:	4a0d      	ldr	r2, [pc, #52]	; (efd8 <mpsl_lib_init_sys+0x50>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
    efa2:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    efa4:	2119      	movs	r1, #25
    efa6:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
    efa8:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    efac:	f7f4 ff68 	bl	3e80 <mpsl_init>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
    efb0:	4604      	mov	r4, r0
    efb2:	b970      	cbnz	r0, efd2 <mpsl_lib_init_sys+0x4a>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    efb4:	4601      	mov	r1, r0
    efb6:	2201      	movs	r2, #1
    efb8:	2008      	movs	r0, #8
    efba:	f7fc feb7 	bl	bd2c <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    efbe:	2201      	movs	r2, #1
    efc0:	4621      	mov	r1, r4
    efc2:	200b      	movs	r0, #11
    efc4:	f7fc feb2 	bl	bd2c <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    efc8:	2201      	movs	r2, #1
    efca:	4621      	mov	r1, r4
    efcc:	4610      	mov	r0, r2
    efce:	f7fc fead 	bl	bd2c <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
    efd2:	4620      	mov	r0, r4
    efd4:	b002      	add	sp, #8
    efd6:	bd10      	pop	{r4, pc}
    efd8:	00012177 	.word	0x00012177

0000efdc <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
    efdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
    efde:	4d0d      	ldr	r5, [pc, #52]	; (f014 <mpsl_low_prio_init+0x38>)
    efe0:	490d      	ldr	r1, [pc, #52]	; (f018 <mpsl_low_prio_init+0x3c>)
    efe2:	2400      	movs	r4, #0
    efe4:	9400      	str	r4, [sp, #0]
    efe6:	f06f 0309 	mvn.w	r3, #9
    efea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    efee:	4628      	mov	r0, r5
    eff0:	f001 f9de 	bl	103b0 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    eff4:	4909      	ldr	r1, [pc, #36]	; (f01c <mpsl_low_prio_init+0x40>)
    eff6:	4628      	mov	r0, r5
    eff8:	f003 f9f0 	bl	123dc <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
    effc:	4908      	ldr	r1, [pc, #32]	; (f020 <mpsl_low_prio_init+0x44>)
    effe:	4809      	ldr	r0, [pc, #36]	; (f024 <mpsl_low_prio_init+0x48>)
    f000:	f003 fb40 	bl	12684 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
    f004:	4622      	mov	r2, r4
    f006:	2104      	movs	r1, #4
    f008:	2019      	movs	r0, #25
    f00a:	f7fc fe8f 	bl	bd2c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
    f00e:	4620      	mov	r0, r4
    f010:	b003      	add	sp, #12
    f012:	bd30      	pop	{r4, r5, pc}
    f014:	200012d0 	.word	0x200012d0
    f018:	20001bc0 	.word	0x20001bc0
    f01c:	000131a8 	.word	0x000131a8
    f020:	000121a3 	.word	0x000121a3
    f024:	20001658 	.word	0x20001658

0000f028 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    f028:	4b01      	ldr	r3, [pc, #4]	; (f030 <mpsl_hfclk_callback+0x8>)
    f02a:	2000      	movs	r0, #0
    f02c:	681b      	ldr	r3, [r3, #0]
    f02e:	4718      	bx	r3
    f030:	20001668 	.word	0x20001668

0000f034 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
    f034:	b120      	cbz	r0, f040 <nrfx_clock_start+0xc>
    f036:	2801      	cmp	r0, #1
    f038:	d106      	bne.n	f048 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
    f03a:	4804      	ldr	r0, [pc, #16]	; (f04c <nrfx_clock_start+0x18>)
    f03c:	f7f4 bdb4 	b.w	3ba8 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    f040:	4b03      	ldr	r3, [pc, #12]	; (f050 <nrfx_clock_start+0x1c>)
    f042:	2001      	movs	r0, #1
    f044:	681b      	ldr	r3, [r3, #0]
    f046:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
    f048:	4770      	bx	lr
    f04a:	bf00      	nop
    f04c:	0000f029 	.word	0x0000f029
    f050:	20001668 	.word	0x20001668

0000f054 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
    f054:	4b01      	ldr	r3, [pc, #4]	; (f05c <nrfx_clock_init+0x8>)
    f056:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
    f058:	4801      	ldr	r0, [pc, #4]	; (f060 <nrfx_clock_init+0xc>)
    f05a:	4770      	bx	lr
    f05c:	20001668 	.word	0x20001668
    f060:	0bad0000 	.word	0x0bad0000

0000f064 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    f064:	4a02      	ldr	r2, [pc, #8]	; (f070 <nvmc_wait+0xc>)
    f066:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    f06a:	2b00      	cmp	r3, #0
    f06c:	d0fb      	beq.n	f066 <nvmc_wait+0x2>
}
    f06e:	4770      	bx	lr
    f070:	4001e000 	.word	0x4001e000

0000f074 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    f074:	b510      	push	{r4, lr}
                var2 = *(uint32_t *)0x10000134ul;
            }
        #elif defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f076:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            if (var1 == 0x0E)
    f07a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    f07e:	2a0e      	cmp	r2, #14
    f080:	d15d      	bne.n	f13e <SystemInit+0xca>

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    f082:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
    f086:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    f08a:	f3c2 3242 	ubfx	r2, r2, #13, #3
    f08e:	f8c1 253c 	str.w	r2, [r1, #1340]	; 0x53c

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    f092:	2200      	movs	r2, #0
    f094:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    f098:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    f09c:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    f0a0:	4a41      	ldr	r2, [pc, #260]	; (f1a8 <SystemInit+0x134>)
    f0a2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
    f0a6:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    f0aa:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
    f0ae:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    f0b2:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    f0b6:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    f0ba:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
    f0be:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    f0c2:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
    f0c6:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    f0ca:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
    f0ce:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    f0d2:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
    f0d6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    f0da:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
    f0de:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    f0e2:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
    f0e6:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    f0ea:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
    f0ee:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    f0f2:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
    f0f6:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    f0fa:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    f0fe:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    f102:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
    f106:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    f10a:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
    f10e:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    f112:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
    f116:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    f11a:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
    f11e:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    f122:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    f126:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    f12a:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    f12e:	07db      	lsls	r3, r3, #31
    f130:	d434      	bmi.n	f19c <SystemInit+0x128>

    #if NRF52_ERRATA_217_ENABLE_WORKAROUND
        /* Workaround for Errata 217 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_217()){
            *(volatile uint32_t *)0x40000EE4ul |= 0x0000000Ful;
    f132:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    f136:	f043 030f 	orr.w	r3, r3, #15
    f13a:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    f13e:	f003 f866 	bl	1220e <nrf52_configuration_249>
    f142:	b338      	cbz	r0, f194 <SystemInit+0x120>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    f144:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    f148:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f14c:	f8d1 2208 	ldr.w	r2, [r1, #520]	; 0x208
    f150:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #endif

    nrf52_handle_approtect();

    #if NRF52_CONFIGURATION_249_ENABLE && (defined(NRF52805_XXAA) || defined(NRF52810_XXAA) || defined(NRF52811_XXAA))
        if (nrf52_configuration_249() && (NRF_UICR->NRFMDK[0] == 0xFFFFFFFF || NRF_UICR->NRFMDK[1] == 0xFFFFFFFF))
    f154:	f003 f85b 	bl	1220e <nrf52_configuration_249>
    f158:	b1e0      	cbz	r0, f194 <SystemInit+0x120>
    f15a:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    f15e:	3301      	adds	r3, #1
    f160:	d003      	beq.n	f16a <SystemInit+0xf6>
    f162:	f8d1 3104 	ldr.w	r3, [r1, #260]	; 0x104
    f166:	3301      	adds	r3, #1
    f168:	d114      	bne.n	f194 <SystemInit+0x120>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    f16a:	4810      	ldr	r0, [pc, #64]	; (f1ac <SystemInit+0x138>)
    f16c:	2301      	movs	r3, #1
        {
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NRFMDK[0] = 0;
    f16e:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    f172:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
            NRF_UICR->NRFMDK[0] = 0;
    f176:	2100      	movs	r1, #0
    nvmc_wait();
    f178:	f7ff ff74 	bl	f064 <nvmc_wait>
            NRF_UICR->NRFMDK[0] = 0;
    f17c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
            nvmc_wait();
    f180:	f7ff ff70 	bl	f064 <nvmc_wait>
            NRF_UICR->NRFMDK[1] = 0;
    f184:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
            nvmc_wait();
    f188:	f7ff ff6c 	bl	f064 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    f18c:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    nvmc_wait();
    f190:	f7ff ff68 	bl	f064 <nvmc_wait>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    f194:	4b06      	ldr	r3, [pc, #24]	; (f1b0 <SystemInit+0x13c>)
    f196:	4a07      	ldr	r2, [pc, #28]	; (f1b4 <SystemInit+0x140>)
    f198:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    f19a:	bd10      	pop	{r4, pc}
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    f19c:	f06f 0301 	mvn.w	r3, #1
    f1a0:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
    f1a4:	e7c5      	b.n	f132 <SystemInit+0xbe>
    f1a6:	bf00      	nop
    f1a8:	4000c000 	.word	0x4000c000
    f1ac:	4001e000 	.word	0x4001e000
    f1b0:	2000040c 	.word	0x2000040c
    f1b4:	03d09000 	.word	0x03d09000

0000f1b8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    f1b8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    f1ba:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    f1bc:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    f1be:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    f1c2:	fab2 f382 	clz	r3, r2
    f1c6:	f1c3 031f 	rsb	r3, r3, #31
    f1ca:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    f1cc:	fa05 f403 	lsl.w	r4, r5, r3
    f1d0:	ea22 0404 	bic.w	r4, r2, r4
    f1d4:	e850 6f00 	ldrex	r6, [r0]
    f1d8:	4296      	cmp	r6, r2
    f1da:	d104      	bne.n	f1e6 <nrfx_flag32_alloc+0x2e>
    f1dc:	e840 4c00 	strex	ip, r4, [r0]
    f1e0:	f1bc 0f00 	cmp.w	ip, #0
    f1e4:	d1f6      	bne.n	f1d4 <nrfx_flag32_alloc+0x1c>
    f1e6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    f1ea:	d1e7      	bne.n	f1bc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    f1ec:	4801      	ldr	r0, [pc, #4]	; (f1f4 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    f1ee:	700b      	strb	r3, [r1, #0]
}
    f1f0:	bd70      	pop	{r4, r5, r6, pc}
    f1f2:	bf00      	nop
    f1f4:	0bad0000 	.word	0x0bad0000

0000f1f8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    f1f8:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    f1fa:	6803      	ldr	r3, [r0, #0]
    f1fc:	40cb      	lsrs	r3, r1
    f1fe:	07db      	lsls	r3, r3, #31
    f200:	d414      	bmi.n	f22c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    f202:	2301      	movs	r3, #1
    f204:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    f206:	6802      	ldr	r2, [r0, #0]
    f208:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    f20c:	ea43 0102 	orr.w	r1, r3, r2
    f210:	e850 4f00 	ldrex	r4, [r0]
    f214:	4294      	cmp	r4, r2
    f216:	d104      	bne.n	f222 <nrfx_flag32_free+0x2a>
    f218:	e840 1c00 	strex	ip, r1, [r0]
    f21c:	f1bc 0f00 	cmp.w	ip, #0
    f220:	d1f6      	bne.n	f210 <nrfx_flag32_free+0x18>
    f222:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    f226:	d1ee      	bne.n	f206 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    f228:	4801      	ldr	r0, [pc, #4]	; (f230 <nrfx_flag32_free+0x38>)
}
    f22a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    f22c:	4801      	ldr	r0, [pc, #4]	; (f234 <nrfx_flag32_free+0x3c>)
    f22e:	e7fc      	b.n	f22a <nrfx_flag32_free+0x32>
    f230:	0bad0000 	.word	0x0bad0000
    f234:	0bad0004 	.word	0x0bad0004

0000f238 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    f238:	4b03      	ldr	r3, [pc, #12]	; (f248 <pin_in_use_by_te+0x10>)
    f23a:	3008      	adds	r0, #8
    f23c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    f240:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f244:	4770      	bx	lr
    f246:	bf00      	nop
    f248:	20000410 	.word	0x20000410

0000f24c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    f24c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    f24e:	f100 0308 	add.w	r3, r0, #8
    f252:	4c0c      	ldr	r4, [pc, #48]	; (f284 <call_handler+0x38>)
    f254:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    f258:	05da      	lsls	r2, r3, #23
{
    f25a:	4605      	mov	r5, r0
    f25c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    f25e:	d507      	bpl.n	f270 <call_handler+0x24>
    f260:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    f264:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    f268:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    f26c:	6852      	ldr	r2, [r2, #4]
    f26e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    f270:	68a3      	ldr	r3, [r4, #8]
    f272:	b12b      	cbz	r3, f280 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    f274:	68e2      	ldr	r2, [r4, #12]
    f276:	4631      	mov	r1, r6
    f278:	4628      	mov	r0, r5
    }
}
    f27a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    f27e:	4718      	bx	r3
}
    f280:	bd70      	pop	{r4, r5, r6, pc}
    f282:	bf00      	nop
    f284:	20000410 	.word	0x20000410

0000f288 <release_handler>:
{
    f288:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    f28a:	4a12      	ldr	r2, [pc, #72]	; (f2d4 <release_handler+0x4c>)
    f28c:	3008      	adds	r0, #8
    f28e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    f292:	05d9      	lsls	r1, r3, #23
    f294:	d51b      	bpl.n	f2ce <release_handler+0x46>
    f296:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    f29a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    f29e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    f2a2:	f102 040e 	add.w	r4, r2, #14
    f2a6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    f2a8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    f2ac:	f413 7f80 	tst.w	r3, #256	; 0x100
    f2b0:	d003      	beq.n	f2ba <release_handler+0x32>
    f2b2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    f2b6:	4299      	cmp	r1, r3
    f2b8:	d009      	beq.n	f2ce <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    f2ba:	3001      	adds	r0, #1
    f2bc:	2820      	cmp	r0, #32
    f2be:	d1f3      	bne.n	f2a8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    f2c0:	2300      	movs	r3, #0
    f2c2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    f2c6:	4804      	ldr	r0, [pc, #16]	; (f2d8 <release_handler+0x50>)
}
    f2c8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    f2ca:	f7ff bf95 	b.w	f1f8 <nrfx_flag32_free>
}
    f2ce:	bc10      	pop	{r4}
    f2d0:	4770      	bx	lr
    f2d2:	bf00      	nop
    f2d4:	20000410 	.word	0x20000410
    f2d8:	20000464 	.word	0x20000464

0000f2dc <pin_handler_trigger_uninit>:
{
    f2dc:	b538      	push	{r3, r4, r5, lr}
    f2de:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    f2e0:	f7ff ffaa 	bl	f238 <pin_in_use_by_te>
    f2e4:	4c09      	ldr	r4, [pc, #36]	; (f30c <pin_handler_trigger_uninit+0x30>)
    f2e6:	f102 0508 	add.w	r5, r2, #8
    f2ea:	b140      	cbz	r0, f2fe <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    f2ec:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    f2f0:	4907      	ldr	r1, [pc, #28]	; (f310 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    f2f2:	0b5b      	lsrs	r3, r3, #13
    f2f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    f2f8:	2000      	movs	r0, #0
    f2fa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    f2fe:	4610      	mov	r0, r2
    f300:	f7ff ffc2 	bl	f288 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    f304:	2300      	movs	r3, #0
    f306:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    f30a:	bd38      	pop	{r3, r4, r5, pc}
    f30c:	20000410 	.word	0x20000410
    f310:	40006000 	.word	0x40006000

0000f314 <nrfx_gpiote_input_configure>:
{
    f314:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f318:	4604      	mov	r4, r0
    f31a:	461d      	mov	r5, r3
    if (p_input_config)
    f31c:	b309      	cbz	r1, f362 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f31e:	4f4f      	ldr	r7, [pc, #316]	; (f45c <nrfx_gpiote_input_configure+0x148>)
    f320:	f100 0808 	add.w	r8, r0, #8
    f324:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    f328:	07b3      	lsls	r3, r6, #30
    f32a:	d506      	bpl.n	f33a <nrfx_gpiote_input_configure+0x26>
    f32c:	f7ff ff84 	bl	f238 <pin_in_use_by_te>
    f330:	b118      	cbz	r0, f33a <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    f332:	484b      	ldr	r0, [pc, #300]	; (f460 <nrfx_gpiote_input_configure+0x14c>)
}
    f334:	b002      	add	sp, #8
    f336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    f33a:	f004 031f 	and.w	r3, r4, #31
    f33e:	009b      	lsls	r3, r3, #2
    f340:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    f344:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    f346:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    f34a:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    f34e:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    f352:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    f356:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    f35a:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    f35e:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    f362:	b19a      	cbz	r2, f38c <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f364:	4b3d      	ldr	r3, [pc, #244]	; (f45c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    f366:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    f368:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f36a:	f104 0608 	add.w	r6, r4, #8
    f36e:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    f372:	f011 0f02 	tst.w	r1, #2
    f376:	d00d      	beq.n	f394 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    f378:	2800      	cmp	r0, #0
    f37a:	d1da      	bne.n	f332 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    f37c:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    f380:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    f384:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    f388:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    f38c:	2d00      	cmp	r5, #0
    f38e:	d13b      	bne.n	f408 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
    f390:	4834      	ldr	r0, [pc, #208]	; (f464 <nrfx_gpiote_input_configure+0x150>)
    f392:	e7cf      	b.n	f334 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    f394:	f021 0120 	bic.w	r1, r1, #32
    f398:	04c9      	lsls	r1, r1, #19
    f39a:	0cc9      	lsrs	r1, r1, #19
    f39c:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    f3a0:	2800      	cmp	r0, #0
    f3a2:	d0eb      	beq.n	f37c <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    f3a4:	2f03      	cmp	r7, #3
    f3a6:	d8c4      	bhi.n	f332 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    f3a8:	6852      	ldr	r2, [r2, #4]
    f3aa:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    f3ae:	b92f      	cbnz	r7, f3bc <nrfx_gpiote_input_configure+0xa8>
    f3b0:	4a2d      	ldr	r2, [pc, #180]	; (f468 <nrfx_gpiote_input_configure+0x154>)
    f3b2:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    f3b6:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    f3ba:	e7df      	b.n	f37c <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    f3bc:	ea4f 028c 	mov.w	r2, ip, lsl #2
    f3c0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    f3c4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    f3c8:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    f3cc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    f3d0:	f020 0003 	bic.w	r0, r0, #3
    f3d4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f3d8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    f3dc:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    f3e0:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    f3e4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f3e8:	0220      	lsls	r0, r4, #8
    f3ea:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    f3ee:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    f3f2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    f3f6:	ea40 000e 	orr.w	r0, r0, lr
    f3fa:	f041 0120 	orr.w	r1, r1, #32
    f3fe:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    f402:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    f406:	e7b9      	b.n	f37c <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    f408:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    f40c:	4620      	mov	r0, r4
    f40e:	f7ff ff3b 	bl	f288 <release_handler>
    if (!handler)
    f412:	2e00      	cmp	r6, #0
    f414:	d0bc      	beq.n	f390 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    f416:	4d11      	ldr	r5, [pc, #68]	; (f45c <nrfx_gpiote_input_configure+0x148>)
    f418:	e9d5 2300 	ldrd	r2, r3, [r5]
    f41c:	4296      	cmp	r6, r2
    f41e:	d101      	bne.n	f424 <nrfx_gpiote_input_configure+0x110>
    f420:	429f      	cmp	r7, r3
    f422:	d019      	beq.n	f458 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    f424:	4811      	ldr	r0, [pc, #68]	; (f46c <nrfx_gpiote_input_configure+0x158>)
    f426:	f10d 0107 	add.w	r1, sp, #7
    f42a:	f7ff fec5 	bl	f1b8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    f42e:	4b0d      	ldr	r3, [pc, #52]	; (f464 <nrfx_gpiote_input_configure+0x150>)
    f430:	4298      	cmp	r0, r3
    f432:	f47f af7f 	bne.w	f334 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    f436:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    f43a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    f43e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    f442:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    f444:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    f446:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    f44a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    f44e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f452:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    f456:	e79b      	b.n	f390 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    f458:	2200      	movs	r2, #0
    f45a:	e7ee      	b.n	f43a <nrfx_gpiote_input_configure+0x126>
    f45c:	20000410 	.word	0x20000410
    f460:	0bad0004 	.word	0x0bad0004
    f464:	0bad0000 	.word	0x0bad0000
    f468:	40006000 	.word	0x40006000
    f46c:	20000464 	.word	0x20000464

0000f470 <nrfx_gpiote_output_configure>:
{
    f470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f472:	4604      	mov	r4, r0
    if (p_config)
    f474:	b389      	cbz	r1, f4da <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f476:	4e3a      	ldr	r6, [pc, #232]	; (f560 <nrfx_gpiote_output_configure+0xf0>)
    f478:	f100 0708 	add.w	r7, r0, #8
    f47c:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    f480:	07ab      	lsls	r3, r5, #30
    f482:	d404      	bmi.n	f48e <nrfx_gpiote_output_configure+0x1e>
    f484:	f7ff fed8 	bl	f238 <pin_in_use_by_te>
    f488:	b108      	cbz	r0, f48e <nrfx_gpiote_output_configure+0x1e>
{
    f48a:	4836      	ldr	r0, [pc, #216]	; (f564 <nrfx_gpiote_output_configure+0xf4>)
}
    f48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    f48e:	f015 0f1c 	tst.w	r5, #28
    f492:	784b      	ldrb	r3, [r1, #1]
    f494:	d124      	bne.n	f4e0 <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    f496:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    f49a:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    f49e:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    f4a2:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    f4a4:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    f4a8:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    f4ac:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    f4ae:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    f4b2:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    f4b6:	f02c 0c07 	bic.w	ip, ip, #7
    f4ba:	ea43 030c 	orr.w	r3, r3, ip
    f4be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    f4c2:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    f4c6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    f4ca:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    f4ce:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    f4d2:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    f4d6:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    f4da:	b922      	cbnz	r2, f4e6 <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    f4dc:	4822      	ldr	r0, [pc, #136]	; (f568 <nrfx_gpiote_output_configure+0xf8>)
    f4de:	e7d5      	b.n	f48c <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    f4e0:	2b01      	cmp	r3, #1
    f4e2:	d1d8      	bne.n	f496 <nrfx_gpiote_output_configure+0x26>
    f4e4:	e7d1      	b.n	f48a <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f4e6:	4e1e      	ldr	r6, [pc, #120]	; (f560 <nrfx_gpiote_output_configure+0xf0>)
    f4e8:	f104 0708 	add.w	r7, r4, #8
    f4ec:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    f4f0:	0783      	lsls	r3, r0, #30
    f4f2:	d5ca      	bpl.n	f48a <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    f4f4:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    f4f8:	4661      	mov	r1, ip
    f4fa:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    f4fc:	f020 0020 	bic.w	r0, r0, #32
    f500:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    f504:	04c0      	lsls	r0, r0, #19
    f506:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    f50a:	0cc0      	lsrs	r0, r0, #19
    f50c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    f510:	2300      	movs	r3, #0
    f512:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    f516:	7855      	ldrb	r5, [r2, #1]
    f518:	2d00      	cmp	r5, #0
    f51a:	d0df      	beq.n	f4dc <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    f51c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    f520:	7892      	ldrb	r2, [r2, #2]
    f522:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    f526:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    f52a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f52e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    f532:	0223      	lsls	r3, r4, #8
    f534:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    f538:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f53a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    f53e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    f542:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f544:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    f546:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    f54a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f54e:	4313      	orrs	r3, r2
    f550:	f040 0020 	orr.w	r0, r0, #32
    f554:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    f558:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    f55c:	e7be      	b.n	f4dc <nrfx_gpiote_output_configure+0x6c>
    f55e:	bf00      	nop
    f560:	20000410 	.word	0x20000410
    f564:	0bad0004 	.word	0x0bad0004
    f568:	0bad0000 	.word	0x0bad0000

0000f56c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    f56c:	4b01      	ldr	r3, [pc, #4]	; (f574 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    f56e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    f572:	4770      	bx	lr
    f574:	20000410 	.word	0x20000410

0000f578 <nrfx_gpiote_channel_get>:
{
    f578:	b508      	push	{r3, lr}
    f57a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    f57c:	f7ff fe5c 	bl	f238 <pin_in_use_by_te>
    f580:	b138      	cbz	r0, f592 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    f582:	4b05      	ldr	r3, [pc, #20]	; (f598 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    f584:	4805      	ldr	r0, [pc, #20]	; (f59c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    f586:	3208      	adds	r2, #8
    f588:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    f58c:	0b5b      	lsrs	r3, r3, #13
    f58e:	700b      	strb	r3, [r1, #0]
}
    f590:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    f592:	4803      	ldr	r0, [pc, #12]	; (f5a0 <nrfx_gpiote_channel_get+0x28>)
    f594:	e7fc      	b.n	f590 <nrfx_gpiote_channel_get+0x18>
    f596:	bf00      	nop
    f598:	20000410 	.word	0x20000410
    f59c:	0bad0000 	.word	0x0bad0000
    f5a0:	0bad0004 	.word	0x0bad0004

0000f5a4 <nrfx_gpiote_init>:
{
    f5a4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    f5a6:	4c0f      	ldr	r4, [pc, #60]	; (f5e4 <nrfx_gpiote_init+0x40>)
    f5a8:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    f5ac:	b9bd      	cbnz	r5, f5de <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    f5ae:	2240      	movs	r2, #64	; 0x40
    f5b0:	4629      	mov	r1, r5
    f5b2:	f104 0010 	add.w	r0, r4, #16
    f5b6:	f003 fad8 	bl	12b6a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    f5ba:	2006      	movs	r0, #6
    f5bc:	f7fc fb86 	bl	bccc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f5c0:	4b09      	ldr	r3, [pc, #36]	; (f5e8 <nrfx_gpiote_init+0x44>)
    return err_code;
    f5c2:	480a      	ldr	r0, [pc, #40]	; (f5ec <nrfx_gpiote_init+0x48>)
    f5c4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    f5c8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    f5cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    f5d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    f5d4:	2301      	movs	r3, #1
    f5d6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    f5da:	6563      	str	r3, [r4, #84]	; 0x54
}
    f5dc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    f5de:	4804      	ldr	r0, [pc, #16]	; (f5f0 <nrfx_gpiote_init+0x4c>)
    f5e0:	e7fc      	b.n	f5dc <nrfx_gpiote_init+0x38>
    f5e2:	bf00      	nop
    f5e4:	20000410 	.word	0x20000410
    f5e8:	40006000 	.word	0x40006000
    f5ec:	0bad0000 	.word	0x0bad0000
    f5f0:	0bad0005 	.word	0x0bad0005

0000f5f4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    f5f4:	4b03      	ldr	r3, [pc, #12]	; (f604 <nrfx_gpiote_is_init+0x10>)
    f5f6:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    f5fa:	3800      	subs	r0, #0
    f5fc:	bf18      	it	ne
    f5fe:	2001      	movne	r0, #1
    f600:	4770      	bx	lr
    f602:	bf00      	nop
    f604:	20000410 	.word	0x20000410

0000f608 <nrfx_gpiote_channel_free>:
{
    f608:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    f60a:	4801      	ldr	r0, [pc, #4]	; (f610 <nrfx_gpiote_channel_free+0x8>)
    f60c:	f7ff bdf4 	b.w	f1f8 <nrfx_flag32_free>
    f610:	20000460 	.word	0x20000460

0000f614 <nrfx_gpiote_channel_alloc>:
{
    f614:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    f616:	4801      	ldr	r0, [pc, #4]	; (f61c <nrfx_gpiote_channel_alloc+0x8>)
    f618:	f7ff bdce 	b.w	f1b8 <nrfx_flag32_alloc>
    f61c:	20000460 	.word	0x20000460

0000f620 <nrfx_gpiote_trigger_enable>:
{
    f620:	b510      	push	{r4, lr}
    f622:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    f624:	f7ff fe08 	bl	f238 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f628:	f102 0408 	add.w	r4, r2, #8
    f62c:	4b1c      	ldr	r3, [pc, #112]	; (f6a0 <nrfx_gpiote_trigger_enable+0x80>)
    f62e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    f632:	b1e0      	cbz	r0, f66e <nrfx_gpiote_trigger_enable+0x4e>
    f634:	f013 0402 	ands.w	r4, r3, #2
    f638:	d119      	bne.n	f66e <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    f63a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    f63c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    f63e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    f642:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    f646:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    f64a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f64e:	6004      	str	r4, [r0, #0]
    f650:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    f652:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    f656:	f040 0001 	orr.w	r0, r0, #1
    f65a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    f65e:	b129      	cbz	r1, f66c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    f660:	2201      	movs	r2, #1
    f662:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    f666:	4a0f      	ldr	r2, [pc, #60]	; (f6a4 <nrfx_gpiote_trigger_enable+0x84>)
    f668:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    f66c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    f66e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    f672:	2b04      	cmp	r3, #4
    f674:	d010      	beq.n	f698 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    f676:	2b05      	cmp	r3, #5
    f678:	d010      	beq.n	f69c <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    f67a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    f67e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    f682:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    f686:	40d9      	lsrs	r1, r3
    f688:	f001 0101 	and.w	r1, r1, #1
    f68c:	3102      	adds	r1, #2
}
    f68e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    f692:	4610      	mov	r0, r2
    f694:	f002 bdcc 	b.w	12230 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    f698:	2103      	movs	r1, #3
    f69a:	e7f8      	b.n	f68e <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    f69c:	2102      	movs	r1, #2
    f69e:	e7f6      	b.n	f68e <nrfx_gpiote_trigger_enable+0x6e>
    f6a0:	20000410 	.word	0x20000410
    f6a4:	40006000 	.word	0x40006000

0000f6a8 <nrfx_gpiote_trigger_disable>:
{
    f6a8:	b508      	push	{r3, lr}
    f6aa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    f6ac:	f7ff fdc4 	bl	f238 <pin_in_use_by_te>
    f6b0:	b1c0      	cbz	r0, f6e4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f6b2:	f102 0108 	add.w	r1, r2, #8
    f6b6:	4b0e      	ldr	r3, [pc, #56]	; (f6f0 <nrfx_gpiote_trigger_disable+0x48>)
    f6b8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    f6bc:	0799      	lsls	r1, r3, #30
    f6be:	d411      	bmi.n	f6e4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    f6c0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    f6c2:	2201      	movs	r2, #1
    f6c4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    f6c6:	009b      	lsls	r3, r3, #2
    f6c8:	490a      	ldr	r1, [pc, #40]	; (f6f4 <nrfx_gpiote_trigger_disable+0x4c>)
    f6ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f6ce:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    f6d2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    f6d6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    f6da:	f022 0203 	bic.w	r2, r2, #3
    f6de:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    f6e2:	bd08      	pop	{r3, pc}
    f6e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    f6e8:	2100      	movs	r1, #0
    f6ea:	4610      	mov	r0, r2
    f6ec:	f002 bda0 	b.w	12230 <nrf_gpio_cfg_sense_set>
    f6f0:	20000410 	.word	0x20000410
    f6f4:	40006000 	.word	0x40006000

0000f6f8 <nrfx_gpiote_pin_uninit>:
{
    f6f8:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    f6fa:	4b0d      	ldr	r3, [pc, #52]	; (f730 <nrfx_gpiote_pin_uninit+0x38>)
    f6fc:	f100 0208 	add.w	r2, r0, #8
{
    f700:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    f702:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    f706:	07db      	lsls	r3, r3, #31
    f708:	d50f      	bpl.n	f72a <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    f70a:	f7ff ffcd 	bl	f6a8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    f70e:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    f710:	f004 041f 	and.w	r4, r4, #31
    f714:	f7ff fde2 	bl	f2dc <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    f718:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    f71c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    f720:	2202      	movs	r2, #2
    f722:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    f726:	4803      	ldr	r0, [pc, #12]	; (f734 <nrfx_gpiote_pin_uninit+0x3c>)
}
    f728:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    f72a:	4803      	ldr	r0, [pc, #12]	; (f738 <nrfx_gpiote_pin_uninit+0x40>)
    f72c:	e7fc      	b.n	f728 <nrfx_gpiote_pin_uninit+0x30>
    f72e:	bf00      	nop
    f730:	20000410 	.word	0x20000410
    f734:	0bad0000 	.word	0x0bad0000
    f738:	0bad0004 	.word	0x0bad0004

0000f73c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    f73c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f740:	4b4f      	ldr	r3, [pc, #316]	; (f880 <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
    f742:	4850      	ldr	r0, [pc, #320]	; (f884 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    f744:	4950      	ldr	r1, [pc, #320]	; (f888 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
    f746:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    f748:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f74a:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f74c:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    f74e:	b136      	cbz	r6, f75e <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    f750:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    f754:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f756:	bf1e      	ittt	ne
    f758:	601c      	strne	r4, [r3, #0]
    f75a:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    f75c:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    f75e:	3304      	adds	r3, #4
    f760:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    f762:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    f766:	d1f1      	bne.n	f74c <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f768:	4b46      	ldr	r3, [pc, #280]	; (f884 <nrfx_gpiote_irq_handler+0x148>)
    f76a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    f76e:	b1bb      	cbz	r3, f7a0 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    f770:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    f774:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    f778:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    f77a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    f77e:	af01      	add	r7, sp, #4
    f780:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    f784:	9c01      	ldr	r4, [sp, #4]
    f786:	b98c      	cbnz	r4, f7ac <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f788:	4b3e      	ldr	r3, [pc, #248]	; (f884 <nrfx_gpiote_irq_handler+0x148>)
    f78a:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    f78e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    f792:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    f796:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    f798:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    f79c:	2b00      	cmp	r3, #0
    f79e:	d1ee      	bne.n	f77e <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    f7a0:	2401      	movs	r4, #1
    while (mask)
    f7a2:	2d00      	cmp	r5, #0
    f7a4:	d153      	bne.n	f84e <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    f7a6:	b003      	add	sp, #12
    f7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    f7ac:	fa94 f4a4 	rbit	r4, r4
    f7b0:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    f7b4:	4a35      	ldr	r2, [pc, #212]	; (f88c <nrfx_gpiote_irq_handler+0x150>)
    f7b6:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    f7ba:	08e0      	lsrs	r0, r4, #3
    f7bc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    f7c0:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    f7c2:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    f7c6:	fa08 f202 	lsl.w	r2, r8, r2
    f7ca:	ea23 0302 	bic.w	r3, r3, r2
    f7ce:	543b      	strb	r3, [r7, r0]
    f7d0:	00a3      	lsls	r3, r4, #2
    f7d2:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    f7d6:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    f7da:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    f7de:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    f7e0:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    f7e2:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    f7e6:	d518      	bpl.n	f81a <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
    f7e8:	4659      	mov	r1, fp
    f7ea:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    f7ec:	fa5f fa82 	uxtb.w	sl, r2
    f7f0:	f7ff fd2c 	bl	f24c <call_handler>
    f7f4:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    f7f8:	f3c3 4301 	ubfx	r3, r3, #16, #2
    f7fc:	459a      	cmp	sl, r3
    f7fe:	d107      	bne.n	f810 <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    f800:	2100      	movs	r1, #0
    f802:	4620      	mov	r0, r4
    f804:	f002 fd14 	bl	12230 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    f808:	4651      	mov	r1, sl
    f80a:	4620      	mov	r0, r4
    f80c:	f002 fd10 	bl	12230 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    f810:	fa08 f404 	lsl.w	r4, r8, r4
    f814:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    f818:	e7b4      	b.n	f784 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    f81a:	2a02      	cmp	r2, #2
    f81c:	d10c      	bne.n	f838 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    f81e:	2103      	movs	r1, #3
    f820:	4620      	mov	r0, r4
    f822:	f002 fd05 	bl	12230 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    f826:	f00a 0305 	and.w	r3, sl, #5
    f82a:	2b01      	cmp	r3, #1
    f82c:	d1f0      	bne.n	f810 <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
    f82e:	4659      	mov	r1, fp
    f830:	4620      	mov	r0, r4
    f832:	f7ff fd0b 	bl	f24c <call_handler>
    f836:	e7eb      	b.n	f810 <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    f838:	2102      	movs	r1, #2
    f83a:	4620      	mov	r0, r4
    f83c:	f002 fcf8 	bl	12230 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    f840:	f1ba 0f03 	cmp.w	sl, #3
    f844:	d0f3      	beq.n	f82e <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    f846:	2a03      	cmp	r2, #3
    f848:	d1e2      	bne.n	f810 <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    f84a:	458a      	cmp	sl, r1
    f84c:	e7ee      	b.n	f82c <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    f84e:	fa95 f3a5 	rbit	r3, r5
    f852:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    f856:	fa04 f203 	lsl.w	r2, r4, r3
    f85a:	009b      	lsls	r3, r3, #2
    f85c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f860:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    f864:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f868:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    f86c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    f870:	f3c0 2004 	ubfx	r0, r0, #8, #5
    f874:	f3c1 4101 	ubfx	r1, r1, #16, #2
    f878:	f7ff fce8 	bl	f24c <call_handler>
    f87c:	e791      	b.n	f7a2 <nrfx_gpiote_irq_handler+0x66>
    f87e:	bf00      	nop
    f880:	40006100 	.word	0x40006100
    f884:	40006000 	.word	0x40006000
    f888:	40006120 	.word	0x40006120
    f88c:	20000410 	.word	0x20000410

0000f890 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    f890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    f894:	4d52      	ldr	r5, [pc, #328]	; (f9e0 <nrfx_spim_init+0x150>)
{
    f896:	460c      	mov	r4, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f898:	7901      	ldrb	r1, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    f89a:	014f      	lsls	r7, r1, #5
    f89c:	eb05 1141 	add.w	r1, r5, r1, lsl #5
{
    f8a0:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    f8a2:	7f08      	ldrb	r0, [r1, #28]
    f8a4:	2800      	cmp	r0, #0
    f8a6:	f040 8098 	bne.w	f9da <nrfx_spim_init+0x14a>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    f8aa:	f8d6 8000 	ldr.w	r8, [r6]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    f8ae:	51ea      	str	r2, [r5, r7]
    p_cb->p_context = p_context;
    f8b0:	604b      	str	r3, [r1, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    f8b2:	7be0      	ldrb	r0, [r4, #15]
    f8b4:	7f8a      	ldrb	r2, [r1, #30]
    f8b6:	f360 0200 	bfi	r2, r0, #0, #1
    f8ba:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    f8bc:	7920      	ldrb	r0, [r4, #4]
    f8be:	b2d2      	uxtb	r2, r2
    f8c0:	f360 0241 	bfi	r2, r0, #1, #1
    f8c4:	778a      	strb	r2, [r1, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
    f8c6:	78e3      	ldrb	r3, [r4, #3]
    f8c8:	77cb      	strb	r3, [r1, #31]
    if (!p_config->skip_gpio_cfg)
    f8ca:	7be3      	ldrb	r3, [r4, #15]
    f8cc:	f8d6 9000 	ldr.w	r9, [r6]
    f8d0:	2b00      	cmp	r3, #0
    f8d2:	d140      	bne.n	f956 <nrfx_spim_init+0xc6>
        nrf_gpio_pin_write(p_config->sck_pin,
    f8d4:	7b21      	ldrb	r1, [r4, #12]
    f8d6:	7820      	ldrb	r0, [r4, #0]
    f8d8:	2901      	cmp	r1, #1
    f8da:	bf94      	ite	ls
    f8dc:	2100      	movls	r1, #0
    f8de:	2101      	movhi	r1, #1
    f8e0:	f002 fcc0 	bl	12264 <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    f8e4:	7823      	ldrb	r3, [r4, #0]
    f8e6:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    f8ea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    f8ee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    f8f2:	2201      	movs	r2, #1
    f8f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    f8f8:	7863      	ldrb	r3, [r4, #1]
    f8fa:	2bff      	cmp	r3, #255	; 0xff
    f8fc:	d00c      	beq.n	f918 <nrfx_spim_init+0x88>
    *p_pin = pin_number & 0x1F;
    f8fe:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    f902:	409a      	lsls	r2, r3
    p_reg->OUTCLR = clr_mask;
    f904:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    f908:	7863      	ldrb	r3, [r4, #1]
    f90a:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    f90e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    f912:	2203      	movs	r2, #3
    f914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    f918:	78a3      	ldrb	r3, [r4, #2]
    f91a:	2bff      	cmp	r3, #255	; 0xff
    f91c:	d009      	beq.n	f932 <nrfx_spim_init+0xa2>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    f91e:	7ba2      	ldrb	r2, [r4, #14]
    *p_pin = pin_number & 0x1F;
    f920:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    f924:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    f928:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    f92c:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    f92e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    f932:	78e0      	ldrb	r0, [r4, #3]
    f934:	28ff      	cmp	r0, #255	; 0xff
    f936:	d00e      	beq.n	f956 <nrfx_spim_init+0xc6>
                               p_config->ss_active_high ? 0 : 1);
    f938:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
    f93a:	f081 0101 	eor.w	r1, r1, #1
    f93e:	f002 fc91 	bl	12264 <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    f942:	78e3      	ldrb	r3, [r4, #3]
    f944:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    f948:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    f94c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    f950:	2103      	movs	r1, #3
    f952:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    f956:	7c23      	ldrb	r3, [r4, #16]
    f958:	b993      	cbnz	r3, f980 <nrfx_spim_init+0xf0>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    f95a:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    f95c:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    f95e:	2bff      	cmp	r3, #255	; 0xff
    f960:	bf18      	it	ne
    f962:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    f964:	78a3      	ldrb	r3, [r4, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    f966:	f8c9 1508 	str.w	r1, [r9, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    f96a:	bf08      	it	eq
    f96c:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    f970:	2bff      	cmp	r3, #255	; 0xff
    f972:	bf08      	it	eq
    f974:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    p_reg->PSEL.MOSI = mosi_pin;
    f978:	f8c9 250c 	str.w	r2, [r9, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    f97c:	f8c9 3510 	str.w	r3, [r9, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    f980:	68a3      	ldr	r3, [r4, #8]
    f982:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    f986:	7b63      	ldrb	r3, [r4, #13]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    f988:	7b22      	ldrb	r2, [r4, #12]
    f98a:	3b00      	subs	r3, #0
    f98c:	bf18      	it	ne
    f98e:	2301      	movne	r3, #1
    switch (spi_mode)
    f990:	2a02      	cmp	r2, #2
    f992:	d01c      	beq.n	f9ce <nrfx_spim_init+0x13e>
    f994:	2a03      	cmp	r2, #3
    f996:	d01d      	beq.n	f9d4 <nrfx_spim_init+0x144>
    f998:	2a01      	cmp	r2, #1
    f99a:	d101      	bne.n	f9a0 <nrfx_spim_init+0x110>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    f99c:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    f9a0:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    f9a4:	79a3      	ldrb	r3, [r4, #6]
    f9a6:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    f9aa:	2307      	movs	r3, #7
    f9ac:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    f9b0:	59eb      	ldr	r3, [r5, r7]
    f9b2:	b123      	cbz	r3, f9be <nrfx_spim_init+0x12e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    f9b4:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    f9b6:	f340 3007 	sbfx	r0, r0, #12, #8
    f9ba:	f7fc f987 	bl	bccc <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    f9be:	443d      	add	r5, r7
    f9c0:	2300      	movs	r3, #0
    f9c2:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    f9c4:	4807      	ldr	r0, [pc, #28]	; (f9e4 <nrfx_spim_init+0x154>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    f9c6:	2301      	movs	r3, #1
    f9c8:	772b      	strb	r3, [r5, #28]
}
    f9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    f9ce:	f043 0304 	orr.w	r3, r3, #4
        break;
    f9d2:	e7e5      	b.n	f9a0 <nrfx_spim_init+0x110>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    f9d4:	f043 0306 	orr.w	r3, r3, #6
        break;
    f9d8:	e7e2      	b.n	f9a0 <nrfx_spim_init+0x110>
        return err_code;
    f9da:	4803      	ldr	r0, [pc, #12]	; (f9e8 <nrfx_spim_init+0x158>)
    f9dc:	e7f5      	b.n	f9ca <nrfx_spim_init+0x13a>
    f9de:	bf00      	nop
    f9e0:	2000166c 	.word	0x2000166c
    f9e4:	0bad0000 	.word	0x0bad0000
    f9e8:	0bad0005 	.word	0x0bad0005

0000f9ec <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    f9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f9ee:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    f9f0:	4d20      	ldr	r5, [pc, #128]	; (fa74 <nrfx_spim_uninit+0x88>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    f9f2:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    f9f4:	015e      	lsls	r6, r3, #5
    f9f6:	eb05 1743 	add.w	r7, r5, r3, lsl #5
    f9fa:	59ab      	ldr	r3, [r5, r6]
    f9fc:	b1b3      	cbz	r3, fa2c <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    f9fe:	f344 3007 	sbfx	r0, r4, #12, #8
    fa02:	f7fc f971 	bl	bce8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    fa06:	4b1c      	ldr	r3, [pc, #112]	; (fa78 <nrfx_spim_uninit+0x8c>)
    fa08:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    fa0c:	7f7b      	ldrb	r3, [r7, #29]
    fa0e:	b16b      	cbz	r3, fa2c <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fa10:	2301      	movs	r3, #1
    fa12:	6163      	str	r3, [r4, #20]
    fa14:	2764      	movs	r7, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fa16:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    fa1a:	b923      	cbnz	r3, fa26 <nrfx_spim_uninit+0x3a>
    fa1c:	2001      	movs	r0, #1
    fa1e:	f002 fc05 	bl	1222c <nrfx_busy_wait>
    fa22:	3f01      	subs	r7, #1
    fa24:	d1f7      	bne.n	fa16 <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
    fa26:	19ab      	adds	r3, r5, r6
    fa28:	2200      	movs	r2, #0
    fa2a:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    fa2c:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    fa2e:	19a9      	adds	r1, r5, r6
    fa30:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    fa34:	7f8b      	ldrb	r3, [r1, #30]
    fa36:	07db      	lsls	r3, r3, #31
    fa38:	d417      	bmi.n	fa6a <nrfx_spim_uninit+0x7e>
    return p_reg->PSEL.SCK;
    fa3a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    fa3e:	f002 fc05 	bl	1224c <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    fa42:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    fa46:	f002 fc01 	bl	1224c <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    fa4a:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    fa4e:	f002 fbfd 	bl	1224c <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    fa52:	7fcb      	ldrb	r3, [r1, #31]
    fa54:	2bff      	cmp	r3, #255	; 0xff
    fa56:	d008      	beq.n	fa6a <nrfx_spim_uninit+0x7e>
    *p_pin = pin_number & 0x1F;
    fa58:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    fa5c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    fa60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    fa64:	2102      	movs	r1, #2
    fa66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    fa6a:	4435      	add	r5, r6
    fa6c:	2300      	movs	r3, #0
    fa6e:	772b      	strb	r3, [r5, #28]
}
    fa70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa72:	bf00      	nop
    fa74:	2000166c 	.word	0x2000166c
    fa78:	00080152 	.word	0x00080152

0000fa7c <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    fa7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    fa80:	4f38      	ldr	r7, [pc, #224]	; (fb64 <nrfx_spim_xfer+0xe8>)
    fa82:	7903      	ldrb	r3, [r0, #4]
    fa84:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
    fa88:	4615      	mov	r5, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    fa8a:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    fa8e:	4681      	mov	r9, r0
    fa90:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
    fa92:	015e      	lsls	r6, r3, #5
    fa94:	2a00      	cmp	r2, #0
    fa96:	d163      	bne.n	fb60 <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    fa98:	59ba      	ldr	r2, [r7, r6]
    fa9a:	b12a      	cbz	r2, faa8 <nrfx_spim_xfer+0x2c>
    fa9c:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    faa0:	bf04      	itt	eq
    faa2:	2201      	moveq	r2, #1
    faa4:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    faa8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    faac:	eb07 0c06 	add.w	ip, r7, r6
    fab0:	f10c 0c0c 	add.w	ip, ip, #12
    fab4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    fab8:	2101      	movs	r1, #1
    faba:	4640      	mov	r0, r8
    fabc:	f002 fbdf 	bl	1227e <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    fac0:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    fac2:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    fac6:	b121      	cbz	r1, fad2 <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    fac8:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
    facc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    fad0:	d106      	bne.n	fae0 <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    fad2:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    fad4:	b152      	cbz	r2, faec <nrfx_spim_xfer+0x70>
    fad6:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    fada:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    fade:	d005      	beq.n	faec <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
    fae0:	443e      	add	r6, r7
    fae2:	2300      	movs	r3, #0
        return err_code;
    fae4:	4820      	ldr	r0, [pc, #128]	; (fb68 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
    fae6:	7773      	strb	r3, [r6, #29]
}
    fae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    faec:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    faee:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    faf2:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    faf6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    fafa:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    fafe:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fb02:	2200      	movs	r2, #0
    fb04:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    fb08:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    fb0c:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    fb10:	bf18      	it	ne
    fb12:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    fb14:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    fb18:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    fb1c:	bf18      	it	ne
    fb1e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    fb20:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    fb24:	072a      	lsls	r2, r5, #28
    fb26:	d507      	bpl.n	fb38 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
    fb28:	59ba      	ldr	r2, [r7, r6]
    fb2a:	b972      	cbnz	r2, fb4a <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
    fb2c:	2100      	movs	r1, #0
    fb2e:	4640      	mov	r0, r8
    fb30:	f002 fba5 	bl	1227e <set_ss_pin_state>
    return err_code;
    fb34:	480d      	ldr	r0, [pc, #52]	; (fb6c <nrfx_spim_xfer+0xf0>)
    fb36:	e7d7      	b.n	fae8 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fb38:	2201      	movs	r2, #1
    fb3a:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
    fb3c:	59ba      	ldr	r2, [r7, r6]
    fb3e:	b922      	cbnz	r2, fb4a <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fb40:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    fb44:	2a00      	cmp	r2, #0
    fb46:	d0fb      	beq.n	fb40 <nrfx_spim_xfer+0xc4>
    fb48:	e7f0      	b.n	fb2c <nrfx_spim_xfer+0xb0>
    if (!enable)
    fb4a:	f015 0f04 	tst.w	r5, #4
    fb4e:	f04f 0240 	mov.w	r2, #64	; 0x40
    fb52:	d002      	beq.n	fb5a <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
    fb54:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    fb58:	e7ec      	b.n	fb34 <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
    fb5a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    fb5e:	e7e9      	b.n	fb34 <nrfx_spim_xfer+0xb8>
        return err_code;
    fb60:	4803      	ldr	r0, [pc, #12]	; (fb70 <nrfx_spim_xfer+0xf4>)
    fb62:	e7c1      	b.n	fae8 <nrfx_spim_xfer+0x6c>
    fb64:	2000166c 	.word	0x2000166c
    fb68:	0bad000a 	.word	0x0bad000a
    fb6c:	0bad0000 	.word	0x0bad0000
    fb70:	0bad000b 	.word	0x0bad000b

0000fb74 <nrfx_spim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPIM0_ENABLED)
void nrfx_spim_0_irq_handler(void)
{
    fb74:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fb76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    fb7a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    fb7e:	b192      	cbz	r2, fba6 <nrfx_spim_0_irq_handler+0x32>
    set_ss_pin_state(p_cb, false);
    fb80:	4c09      	ldr	r4, [pc, #36]	; (fba8 <nrfx_spim_0_irq_handler+0x34>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fb82:	2500      	movs	r5, #0
    fb84:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    fb88:	4629      	mov	r1, r5
    fb8a:	4620      	mov	r0, r4
    fb8c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    fb90:	f002 fb75 	bl	1227e <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
    fb94:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    fb96:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    fb98:	e9d4 3100 	ldrd	r3, r1, [r4]
    fb9c:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM0, &m_cb[NRFX_SPIM0_INST_IDX]);
}
    fba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    fba4:	4718      	bx	r3
}
    fba6:	bd70      	pop	{r4, r5, r6, pc}
    fba8:	2000166c 	.word	0x2000166c

0000fbac <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    fbac:	4b0f      	ldr	r3, [pc, #60]	; (fbec <z_sys_init_run_level+0x40>)
{
    fbae:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    fbb0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    fbb4:	3001      	adds	r0, #1
    fbb6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    fbba:	42a6      	cmp	r6, r4
    fbbc:	d800      	bhi.n	fbc0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    fbbe:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    fbc0:	e9d4 3500 	ldrd	r3, r5, [r4]
    fbc4:	4628      	mov	r0, r5
    fbc6:	4798      	blx	r3
		if (dev != NULL) {
    fbc8:	b16d      	cbz	r5, fbe6 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    fbca:	b138      	cbz	r0, fbdc <z_sys_init_run_level+0x30>
				if (rc < 0) {
    fbcc:	2800      	cmp	r0, #0
    fbce:	bfb8      	it	lt
    fbd0:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    fbd2:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    fbd4:	28ff      	cmp	r0, #255	; 0xff
    fbd6:	bfa8      	it	ge
    fbd8:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    fbda:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    fbdc:	68ea      	ldr	r2, [r5, #12]
    fbde:	7853      	ldrb	r3, [r2, #1]
    fbe0:	f043 0301 	orr.w	r3, r3, #1
    fbe4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    fbe6:	3408      	adds	r4, #8
    fbe8:	e7e7      	b.n	fbba <z_sys_init_run_level+0xe>
    fbea:	bf00      	nop
    fbec:	0001301c 	.word	0x0001301c

0000fbf0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    fbf0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    fbf2:	4b0b      	ldr	r3, [pc, #44]	; (fc20 <bg_thread_main+0x30>)
    fbf4:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    fbf6:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    fbf8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    fbfa:	f7ff ffd7 	bl	fbac <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    fbfe:	f001 f9f5 	bl	10fec <boot_banner>

#if defined(CONFIG_CPLUSPLUS)
	void z_cpp_init_static(void);
	z_cpp_init_static();
    fc02:	f001 fd8a 	bl	1171a <z_cpp_init_static>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    fc06:	2004      	movs	r0, #4
    fc08:	f7ff ffd0 	bl	fbac <z_sys_init_run_level>

	z_init_static_threads();
    fc0c:	f000 f92c 	bl	fe68 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    fc10:	f7fb f93e 	bl	ae90 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    fc14:	4a03      	ldr	r2, [pc, #12]	; (fc24 <bg_thread_main+0x34>)
    fc16:	7b13      	ldrb	r3, [r2, #12]
    fc18:	f023 0301 	bic.w	r3, r3, #1
    fc1c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    fc1e:	bd08      	pop	{r3, pc}
    fc20:	20001b94 	.word	0x20001b94
    fc24:	200013f0 	.word	0x200013f0

0000fc28 <z_bss_zero>:
{
    fc28:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    fc2a:	4803      	ldr	r0, [pc, #12]	; (fc38 <z_bss_zero+0x10>)
    fc2c:	4a03      	ldr	r2, [pc, #12]	; (fc3c <z_bss_zero+0x14>)
    fc2e:	2100      	movs	r1, #0
    fc30:	1a12      	subs	r2, r2, r0
    fc32:	f002 fb57 	bl	122e4 <z_early_memset>
}
    fc36:	bd08      	pop	{r3, pc}
    fc38:	20000530 	.word	0x20000530
    fc3c:	20001b9c 	.word	0x20001b9c

0000fc40 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    fc40:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    fc42:	2300      	movs	r3, #0
{
    fc44:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    fc46:	2201      	movs	r2, #1
    fc48:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    fc4c:	4e13      	ldr	r6, [pc, #76]	; (fc9c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    fc4e:	4d14      	ldr	r5, [pc, #80]	; (fca0 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    fc50:	9301      	str	r3, [sp, #4]
    fc52:	220f      	movs	r2, #15
    fc54:	e9cd 3202 	strd	r3, r2, [sp, #8]
    fc58:	4912      	ldr	r1, [pc, #72]	; (fca4 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    fc5a:	2318      	movs	r3, #24
    fc5c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    fc60:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    fc64:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    fc66:	f44f 70a0 	mov.w	r0, #320	; 0x140
    fc6a:	fb00 1104 	mla	r1, r0, r4, r1
    fc6e:	4b0e      	ldr	r3, [pc, #56]	; (fca8 <z_init_cpu+0x68>)
    fc70:	9500      	str	r5, [sp, #0]
    fc72:	f44f 7280 	mov.w	r2, #256	; 0x100
    fc76:	4630      	mov	r0, r6
    fc78:	f000 f898 	bl	fdac <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    fc7c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    fc7e:	4a0b      	ldr	r2, [pc, #44]	; (fcac <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    fc80:	60ee      	str	r6, [r5, #12]
    fc82:	f023 0304 	bic.w	r3, r3, #4
    fc86:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    fc88:	f44f 6304 	mov.w	r3, #2112	; 0x840
    fc8c:	fb04 3303 	mla	r3, r4, r3, r3
    fc90:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    fc92:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    fc94:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    fc96:	b006      	add	sp, #24
    fc98:	bd70      	pop	{r4, r5, r6, pc}
    fc9a:	bf00      	nop
    fc9c:	20001370 	.word	0x20001370
    fca0:	2000168c 	.word	0x2000168c
    fca4:	20002840 	.word	0x20002840
    fca8:	0000ff21 	.word	0x0000ff21
    fcac:	20002000 	.word	0x20002000

0000fcb0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    fcb0:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    fcb2:	2000      	movs	r0, #0
{
    fcb4:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    fcb6:	f7ff ff79 	bl	fbac <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    fcba:	4b2c      	ldr	r3, [pc, #176]	; (fd6c <z_cstart+0xbc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    fcbc:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    fcc0:	4d2b      	ldr	r5, [pc, #172]	; (fd70 <z_cstart+0xc0>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    fcc2:	4e2c      	ldr	r6, [pc, #176]	; (fd74 <z_cstart+0xc4>)
    fcc4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    fcc6:	4f2c      	ldr	r7, [pc, #176]	; (fd78 <z_cstart+0xc8>)
    fcc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    fccc:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fcce:	23e0      	movs	r3, #224	; 0xe0
    fcd0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    fcd4:	2400      	movs	r4, #0
    fcd6:	2320      	movs	r3, #32
    fcd8:	77eb      	strb	r3, [r5, #31]
    fcda:	762c      	strb	r4, [r5, #24]
    fcdc:	766c      	strb	r4, [r5, #25]
    fcde:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    fce0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fce2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    fce6:	626b      	str	r3, [r5, #36]	; 0x24
    fce8:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    fcec:	f7fc fa16 	bl	c11c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    fcf0:	f7fb ffce 	bl	bc90 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    fcf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fcf8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    fcfa:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    fcfc:	f7fc fb48 	bl	c390 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    fd00:	f7fc faae 	bl	c260 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    fd04:	f240 1301 	movw	r3, #257	; 0x101
    fd08:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    fd0c:	ab06      	add	r3, sp, #24
    fd0e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    fd10:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
    fd14:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    fd16:	f002 fabe 	bl	12296 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    fd1a:	2001      	movs	r0, #1
    fd1c:	f7ff ff46 	bl	fbac <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    fd20:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    fd22:	4d16      	ldr	r5, [pc, #88]	; (fd7c <z_cstart+0xcc>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    fd24:	f7ff ff42 	bl	fbac <z_sys_init_run_level>
	z_sched_init();
    fd28:	f000 fde8 	bl	108fc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    fd2c:	4b14      	ldr	r3, [pc, #80]	; (fd80 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
    fd2e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    fd30:	9305      	str	r3, [sp, #20]
    fd32:	2301      	movs	r3, #1
    fd34:	4913      	ldr	r1, [pc, #76]	; (fd84 <z_cstart+0xd4>)
    fd36:	9400      	str	r4, [sp, #0]
    fd38:	e9cd 4303 	strd	r4, r3, [sp, #12]
    fd3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    fd40:	463b      	mov	r3, r7
    fd42:	e9cd 4401 	strd	r4, r4, [sp, #4]
    fd46:	4628      	mov	r0, r5
    fd48:	f000 f830 	bl	fdac <z_setup_new_thread>
    fd4c:	7b6a      	ldrb	r2, [r5, #13]
    fd4e:	4606      	mov	r6, r0
    fd50:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    fd54:	4628      	mov	r0, r5
    fd56:	736a      	strb	r2, [r5, #13]
    fd58:	f002 fd3e 	bl	127d8 <z_ready_thread>
	z_init_cpu(0);
    fd5c:	4620      	mov	r0, r4
    fd5e:	f7ff ff6f 	bl	fc40 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    fd62:	463a      	mov	r2, r7
    fd64:	4631      	mov	r1, r6
    fd66:	4628      	mov	r0, r5
    fd68:	f7fc f8a8 	bl	bebc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    fd6c:	20002840 	.word	0x20002840
    fd70:	e000ed00 	.word	0xe000ed00
    fd74:	2000168c 	.word	0x2000168c
    fd78:	0000fbf1 	.word	0x0000fbf1
    fd7c:	200013f0 	.word	0x200013f0
    fd80:	000131b2 	.word	0x000131b2
    fd84:	20002980 	.word	0x20002980

0000fd88 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    fd88:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    fd8a:	4c06      	ldr	r4, [pc, #24]	; (fda4 <statics_init+0x1c>)
    fd8c:	4d06      	ldr	r5, [pc, #24]	; (fda8 <statics_init+0x20>)
    fd8e:	42ac      	cmp	r4, r5
    fd90:	d301      	bcc.n	fd96 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    fd92:	2000      	movs	r0, #0
    fd94:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    fd96:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    fd9a:	4620      	mov	r0, r4
    fd9c:	f002 faa6 	bl	122ec <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    fda0:	3418      	adds	r4, #24
    fda2:	e7f4      	b.n	fd8e <statics_init+0x6>
    fda4:	2000048c 	.word	0x2000048c
    fda8:	2000048c 	.word	0x2000048c

0000fdac <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    fdac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    fdb0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    fdb2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    fdb4:	2604      	movs	r6, #4
    fdb6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    fdb8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    fdba:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    fdbc:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    fdc0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    fdc2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    fdc4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    fdc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    fdca:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    fdcc:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    fdd0:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    fdd2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    fdd6:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
    fdda:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    fddc:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    fdde:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    fde0:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    fde4:	9202      	str	r2, [sp, #8]
    fde6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fde8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    fdea:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    fdec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fdee:	9200      	str	r2, [sp, #0]
    fdf0:	4642      	mov	r2, r8
{
    fdf2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    fdf4:	f7fc f830 	bl	be58 <arch_new_thread>
	if (!_current) {
    fdf8:	4b04      	ldr	r3, [pc, #16]	; (fe0c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    fdfa:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    fdfc:	689b      	ldr	r3, [r3, #8]
    fdfe:	b103      	cbz	r3, fe02 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    fe00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    fe02:	6763      	str	r3, [r4, #116]	; 0x74
}
    fe04:	4640      	mov	r0, r8
    fe06:	b004      	add	sp, #16
    fe08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe0c:	2000168c 	.word	0x2000168c

0000fe10 <z_impl_k_thread_create>:
{
    fe10:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe12:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    fe14:	2500      	movs	r5, #0
    fe16:	9505      	str	r5, [sp, #20]
    fe18:	9d10      	ldr	r5, [sp, #64]	; 0x40
    fe1a:	9504      	str	r5, [sp, #16]
    fe1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    fe1e:	9503      	str	r5, [sp, #12]
    fe20:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    fe22:	9502      	str	r5, [sp, #8]
{
    fe24:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    fe28:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    fe2a:	9501      	str	r5, [sp, #4]
    fe2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    fe2e:	9500      	str	r5, [sp, #0]
{
    fe30:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    fe32:	f7ff ffbb 	bl	fdac <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    fe36:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    fe3a:	bf08      	it	eq
    fe3c:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    fe40:	d005      	beq.n	fe4e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    fe42:	ea56 0307 	orrs.w	r3, r6, r7
    fe46:	d105      	bne.n	fe54 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    fe48:	4620      	mov	r0, r4
    fe4a:	f000 fcd7 	bl	107fc <z_sched_start>
}
    fe4e:	4620      	mov	r0, r4
    fe50:	b007      	add	sp, #28
    fe52:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    fe54:	4903      	ldr	r1, [pc, #12]	; (fe64 <z_impl_k_thread_create+0x54>)
    fe56:	463a      	mov	r2, r7
    fe58:	4633      	mov	r3, r6
    fe5a:	f104 0018 	add.w	r0, r4, #24
    fe5e:	f000 fed5 	bl	10c0c <z_add_timeout>
    fe62:	e7f4      	b.n	fe4e <z_impl_k_thread_create+0x3e>
    fe64:	00012745 	.word	0x00012745

0000fe68 <z_init_static_threads>:
{
    fe68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fe6c:	4c29      	ldr	r4, [pc, #164]	; (ff14 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    fe6e:	4d2a      	ldr	r5, [pc, #168]	; (ff18 <z_init_static_threads+0xb0>)
{
    fe70:	b087      	sub	sp, #28
    fe72:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    fe74:	42ae      	cmp	r6, r5
    fe76:	f104 0430 	add.w	r4, r4, #48	; 0x30
    fe7a:	d30f      	bcc.n	fe9c <z_init_static_threads+0x34>
	k_sched_lock();
    fe7c:	f000 fd0e 	bl	1089c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    fe80:	4c24      	ldr	r4, [pc, #144]	; (ff14 <z_init_static_threads+0xac>)
    fe82:	f8df 9098 	ldr.w	r9, [pc, #152]	; ff1c <z_init_static_threads+0xb4>
    fe86:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    fe8a:	f240 37e7 	movw	r7, #999	; 0x3e7
    fe8e:	42ac      	cmp	r4, r5
    fe90:	d320      	bcc.n	fed4 <z_init_static_threads+0x6c>
}
    fe92:	b007      	add	sp, #28
    fe94:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    fe98:	f000 bd14 	b.w	108c4 <k_sched_unlock>
		z_setup_new_thread(
    fe9c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    fea0:	9305      	str	r3, [sp, #20]
    fea2:	f854 3c10 	ldr.w	r3, [r4, #-16]
    fea6:	9304      	str	r3, [sp, #16]
    fea8:	f854 3c14 	ldr.w	r3, [r4, #-20]
    feac:	9303      	str	r3, [sp, #12]
    feae:	f854 3c18 	ldr.w	r3, [r4, #-24]
    feb2:	9302      	str	r3, [sp, #8]
    feb4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    feb8:	9301      	str	r3, [sp, #4]
    feba:	f854 3c20 	ldr.w	r3, [r4, #-32]
    febe:	9300      	str	r3, [sp, #0]
    fec0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    fec4:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    fec8:	f7ff ff70 	bl	fdac <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    fecc:	f854 3c30 	ldr.w	r3, [r4, #-48]
    fed0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    fed2:	e7ce      	b.n	fe72 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    fed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fed6:	1c5a      	adds	r2, r3, #1
    fed8:	d00d      	beq.n	fef6 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    feda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fede:	2100      	movs	r1, #0
    fee0:	4638      	mov	r0, r7
    fee2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    fee6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    feea:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    feee:	d104      	bne.n	fefa <z_init_static_threads+0x92>
	z_sched_start(thread);
    fef0:	4640      	mov	r0, r8
    fef2:	f000 fc83 	bl	107fc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    fef6:	3430      	adds	r4, #48	; 0x30
    fef8:	e7c9      	b.n	fe8e <z_init_static_threads+0x26>
    fefa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fefe:	2300      	movs	r3, #0
    ff00:	f7f0 fcc8 	bl	894 <__aeabi_uldivmod>
    ff04:	4602      	mov	r2, r0
    ff06:	460b      	mov	r3, r1
    ff08:	f108 0018 	add.w	r0, r8, #24
    ff0c:	4649      	mov	r1, r9
    ff0e:	f000 fe7d 	bl	10c0c <z_add_timeout>
    ff12:	e7f0      	b.n	fef6 <z_init_static_threads+0x8e>
    ff14:	00012d9c 	.word	0x00012d9c
    ff18:	00012d9c 	.word	0x00012d9c
    ff1c:	00012745 	.word	0x00012745

0000ff20 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    ff20:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    ff22:	4c0b      	ldr	r4, [pc, #44]	; (ff50 <idle+0x30>)
	return !z_sys_post_kernel;
    ff24:	4d0b      	ldr	r5, [pc, #44]	; (ff54 <idle+0x34>)
	__asm__ volatile(
    ff26:	f04f 0240 	mov.w	r2, #64	; 0x40
    ff2a:	f3ef 8311 	mrs	r3, BASEPRI
    ff2e:	f382 8812 	msr	BASEPRI_MAX, r2
    ff32:	f3bf 8f6f 	isb	sy
    ff36:	f002 fd15 	bl	12964 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    ff3a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    ff3c:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    ff3e:	b913      	cbnz	r3, ff46 <idle+0x26>
	arch_cpu_idle();
    ff40:	f7fb feac 	bl	bc9c <arch_cpu_idle>
}
    ff44:	e7ef      	b.n	ff26 <idle+0x6>
    ff46:	f7fb fdd5 	bl	baf4 <pm_system_suspend>
    ff4a:	2800      	cmp	r0, #0
    ff4c:	d1eb      	bne.n	ff26 <idle+0x6>
    ff4e:	e7f7      	b.n	ff40 <idle+0x20>
    ff50:	2000168c 	.word	0x2000168c
    ff54:	20001b94 	.word	0x20001b94

0000ff58 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    ff58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ff5c:	4604      	mov	r4, r0
    ff5e:	4617      	mov	r7, r2
    ff60:	461e      	mov	r6, r3
    ff62:	f04f 0340 	mov.w	r3, #64	; 0x40
    ff66:	f3ef 8811 	mrs	r8, BASEPRI
    ff6a:	f383 8812 	msr	BASEPRI_MAX, r3
    ff6e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    ff72:	68c3      	ldr	r3, [r0, #12]
    ff74:	4a33      	ldr	r2, [pc, #204]	; (10044 <z_impl_k_mutex_lock+0xec>)
    ff76:	b17b      	cbz	r3, ff98 <z_impl_k_mutex_lock+0x40>
    ff78:	6880      	ldr	r0, [r0, #8]
    ff7a:	6891      	ldr	r1, [r2, #8]
    ff7c:	4288      	cmp	r0, r1
    ff7e:	d019      	beq.n	ffb4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    ff80:	ea57 0306 	orrs.w	r3, r7, r6
    ff84:	d118      	bne.n	ffb8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    ff86:	f388 8811 	msr	BASEPRI, r8
    ff8a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    ff8e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    ff92:	b002      	add	sp, #8
    ff94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    ff98:	6891      	ldr	r1, [r2, #8]
    ff9a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    ff9e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    ffa0:	3301      	adds	r3, #1
    ffa2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    ffa4:	6893      	ldr	r3, [r2, #8]
    ffa6:	60a3      	str	r3, [r4, #8]
    ffa8:	f388 8811 	msr	BASEPRI, r8
    ffac:	f3bf 8f6f 	isb	sy
		return 0;
    ffb0:	2000      	movs	r0, #0
    ffb2:	e7ee      	b.n	ff92 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    ffb4:	6921      	ldr	r1, [r4, #16]
    ffb6:	e7f2      	b.n	ff9e <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    ffb8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    ffbc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    ffc0:	4299      	cmp	r1, r3
    ffc2:	bfa8      	it	ge
    ffc4:	4619      	movge	r1, r3
    ffc6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    ffca:	4291      	cmp	r1, r2
    ffcc:	bfb8      	it	lt
    ffce:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    ffd0:	428b      	cmp	r3, r1
    ffd2:	dd2e      	ble.n	10032 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    ffd4:	f002 fa0e 	bl	123f4 <adjust_owner_prio.isra.0>
    ffd8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    ffda:	e9cd 7600 	strd	r7, r6, [sp]
    ffde:	481a      	ldr	r0, [pc, #104]	; (10048 <z_impl_k_mutex_lock+0xf0>)
    ffe0:	4622      	mov	r2, r4
    ffe2:	4641      	mov	r1, r8
    ffe4:	f000 fb94 	bl	10710 <z_pend_curr>
	if (got_mutex == 0) {
    ffe8:	2800      	cmp	r0, #0
    ffea:	d0e1      	beq.n	ffb0 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    ffec:	f04f 0340 	mov.w	r3, #64	; 0x40
    fff0:	f3ef 8611 	mrs	r6, BASEPRI
    fff4:	f383 8812 	msr	BASEPRI_MAX, r3
    fff8:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    fffc:	68a0      	ldr	r0, [r4, #8]
    fffe:	b1d0      	cbz	r0, 10036 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   10000:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   10002:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10004:	429c      	cmp	r4, r3
   10006:	d00a      	beq.n	1001e <z_impl_k_mutex_lock+0xc6>
   10008:	b14b      	cbz	r3, 1001e <z_impl_k_mutex_lock+0xc6>
   1000a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1000e:	4299      	cmp	r1, r3
   10010:	bfa8      	it	ge
   10012:	4619      	movge	r1, r3
   10014:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   10018:	4299      	cmp	r1, r3
   1001a:	bfb8      	it	lt
   1001c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1001e:	f002 f9e9 	bl	123f4 <adjust_owner_prio.isra.0>
   10022:	b140      	cbz	r0, 10036 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   10024:	4808      	ldr	r0, [pc, #32]	; (10048 <z_impl_k_mutex_lock+0xf0>)
   10026:	4631      	mov	r1, r6
   10028:	f000 fbd6 	bl	107d8 <z_reschedule>
	return -EAGAIN;
   1002c:	f06f 000a 	mvn.w	r0, #10
   10030:	e7af      	b.n	ff92 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   10032:	2500      	movs	r5, #0
   10034:	e7d1      	b.n	ffda <z_impl_k_mutex_lock+0x82>
	if (resched) {
   10036:	2d00      	cmp	r5, #0
   10038:	d1f4      	bne.n	10024 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1003a:	f386 8811 	msr	BASEPRI, r6
   1003e:	f3bf 8f6f 	isb	sy
   10042:	e7f3      	b.n	1002c <z_impl_k_mutex_lock+0xd4>
   10044:	2000168c 	.word	0x2000168c
   10048:	20001b95 	.word	0x20001b95

0001004c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1004c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1004e:	6883      	ldr	r3, [r0, #8]
{
   10050:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   10052:	b36b      	cbz	r3, 100b0 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   10054:	4a19      	ldr	r2, [pc, #100]	; (100bc <z_impl_k_mutex_unlock+0x70>)
   10056:	6892      	ldr	r2, [r2, #8]
   10058:	4293      	cmp	r3, r2
   1005a:	d12c      	bne.n	100b6 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1005c:	68c3      	ldr	r3, [r0, #12]
   1005e:	2b01      	cmp	r3, #1
   10060:	d903      	bls.n	1006a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   10062:	3b01      	subs	r3, #1
   10064:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   10066:	2000      	movs	r0, #0
}
   10068:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1006a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1006e:	f3ef 8511 	mrs	r5, BASEPRI
   10072:	f383 8812 	msr	BASEPRI_MAX, r3
   10076:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1007a:	6901      	ldr	r1, [r0, #16]
   1007c:	6880      	ldr	r0, [r0, #8]
   1007e:	f002 f9b9 	bl	123f4 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   10082:	4620      	mov	r0, r4
   10084:	f002 fbdf 	bl	12846 <z_unpend_first_thread>
	mutex->owner = new_owner;
   10088:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1008a:	b158      	cbz	r0, 100a4 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   1008c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   10090:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   10092:	2200      	movs	r2, #0
   10094:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   10096:	f002 fb9f 	bl	127d8 <z_ready_thread>
		z_reschedule(&lock, key);
   1009a:	4809      	ldr	r0, [pc, #36]	; (100c0 <z_impl_k_mutex_unlock+0x74>)
   1009c:	4629      	mov	r1, r5
   1009e:	f000 fb9b 	bl	107d8 <z_reschedule>
   100a2:	e7e0      	b.n	10066 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   100a4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   100a6:	f385 8811 	msr	BASEPRI, r5
   100aa:	f3bf 8f6f 	isb	sy
   100ae:	e7da      	b.n	10066 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   100b0:	f06f 0015 	mvn.w	r0, #21
   100b4:	e7d8      	b.n	10068 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   100b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   100ba:	e7d5      	b.n	10068 <z_impl_k_mutex_unlock+0x1c>
   100bc:	2000168c 	.word	0x2000168c
   100c0:	20001b95 	.word	0x20001b95

000100c4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   100c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
   100c6:	f04f 0140 	mov.w	r1, #64	; 0x40
   100ca:	f3ef 8511 	mrs	r5, BASEPRI
   100ce:	f381 8812 	msr	BASEPRI_MAX, r1
   100d2:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   100d6:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   100d8:	b19c      	cbz	r4, 10102 <z_impl_k_queue_get+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   100da:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   100dc:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   100de:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   100e2:	4294      	cmp	r4, r2
	list->head = node;
   100e4:	6003      	str	r3, [r0, #0]
	list->tail = node;
   100e6:	bf08      	it	eq
   100e8:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   100ea:	2101      	movs	r1, #1
   100ec:	4620      	mov	r0, r4
   100ee:	f002 f9f0 	bl	124d2 <z_queue_node_peek>
   100f2:	4604      	mov	r4, r0
	__asm__ volatile(
   100f4:	f385 8811 	msr	BASEPRI, r5
   100f8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   100fc:	4620      	mov	r0, r4
   100fe:	b003      	add	sp, #12
   10100:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10102:	ea52 0103 	orrs.w	r1, r2, r3
   10106:	d0f5      	beq.n	100f4 <z_impl_k_queue_get+0x30>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   10108:	e9cd 2300 	strd	r2, r3, [sp]
   1010c:	4629      	mov	r1, r5
   1010e:	f100 020c 	add.w	r2, r0, #12
   10112:	3008      	adds	r0, #8
   10114:	f000 fafc 	bl	10710 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   10118:	2800      	cmp	r0, #0
   1011a:	d1ef      	bne.n	100fc <z_impl_k_queue_get+0x38>
   1011c:	4b01      	ldr	r3, [pc, #4]	; (10124 <z_impl_k_queue_get+0x60>)
   1011e:	689b      	ldr	r3, [r3, #8]
   10120:	695c      	ldr	r4, [r3, #20]
   10122:	e7eb      	b.n	100fc <z_impl_k_queue_get+0x38>
   10124:	2000168c 	.word	0x2000168c

00010128 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   10128:	b538      	push	{r3, r4, r5, lr}
   1012a:	4604      	mov	r4, r0
	__asm__ volatile(
   1012c:	f04f 0340 	mov.w	r3, #64	; 0x40
   10130:	f3ef 8511 	mrs	r5, BASEPRI
   10134:	f383 8812 	msr	BASEPRI_MAX, r3
   10138:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1013c:	f002 fb83 	bl	12846 <z_unpend_first_thread>

	if (thread != NULL) {
   10140:	b148      	cbz	r0, 10156 <z_impl_k_sem_give+0x2e>
   10142:	2200      	movs	r2, #0
   10144:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   10146:	f002 fb47 	bl	127d8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1014a:	4629      	mov	r1, r5
   1014c:	4808      	ldr	r0, [pc, #32]	; (10170 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1014e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   10152:	f000 bb41 	b.w	107d8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10156:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1015a:	429a      	cmp	r2, r3
   1015c:	bf18      	it	ne
   1015e:	3301      	addne	r3, #1
   10160:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   10162:	2102      	movs	r1, #2
   10164:	f104 0010 	add.w	r0, r4, #16
   10168:	f002 fccb 	bl	12b02 <z_handle_obj_poll_events>
}
   1016c:	e7ed      	b.n	1014a <z_impl_k_sem_give+0x22>
   1016e:	bf00      	nop
   10170:	20001b96 	.word	0x20001b96

00010174 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   10174:	b513      	push	{r0, r1, r4, lr}
   10176:	f04f 0440 	mov.w	r4, #64	; 0x40
   1017a:	f3ef 8111 	mrs	r1, BASEPRI
   1017e:	f384 8812 	msr	BASEPRI_MAX, r4
   10182:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   10186:	6884      	ldr	r4, [r0, #8]
   10188:	b144      	cbz	r4, 1019c <z_impl_k_sem_take+0x28>
		sem->count--;
   1018a:	3c01      	subs	r4, #1
   1018c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1018e:	f381 8811 	msr	BASEPRI, r1
   10192:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   10196:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   10198:	b002      	add	sp, #8
   1019a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1019c:	ea52 0403 	orrs.w	r4, r2, r3
   101a0:	d106      	bne.n	101b0 <z_impl_k_sem_take+0x3c>
   101a2:	f381 8811 	msr	BASEPRI, r1
   101a6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   101aa:	f06f 000f 	mvn.w	r0, #15
   101ae:	e7f3      	b.n	10198 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   101b0:	e9cd 2300 	strd	r2, r3, [sp]
   101b4:	4602      	mov	r2, r0
   101b6:	4802      	ldr	r0, [pc, #8]	; (101c0 <z_impl_k_sem_take+0x4c>)
   101b8:	f000 faaa 	bl	10710 <z_pend_curr>
	return ret;
   101bc:	e7ec      	b.n	10198 <z_impl_k_sem_take+0x24>
   101be:	bf00      	nop
   101c0:	20001b96 	.word	0x20001b96

000101c4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   101c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   101c8:	4e4a      	ldr	r6, [pc, #296]	; (102f4 <work_queue_main+0x130>)
   101ca:	b085      	sub	sp, #20
   101cc:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   101ce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   101d2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   101d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   101da:	f3ef 8711 	mrs	r7, BASEPRI
   101de:	f383 8812 	msr	BASEPRI_MAX, r3
   101e2:	f3bf 8f6f 	isb	sy
   101e6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   101ea:	b98d      	cbnz	r5, 10210 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   101ec:	2102      	movs	r1, #2
   101ee:	f104 0098 	add.w	r0, r4, #152	; 0x98
   101f2:	f002 f9d5 	bl	125a0 <flag_test_and_clear>
   101f6:	2800      	cmp	r0, #0
   101f8:	d143      	bne.n	10282 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   101fa:	2300      	movs	r3, #0
   101fc:	e9cd 8900 	strd	r8, r9, [sp]
   10200:	9302      	str	r3, [sp, #8]
   10202:	f104 0288 	add.w	r2, r4, #136	; 0x88
   10206:	4639      	mov	r1, r7
   10208:	483b      	ldr	r0, [pc, #236]	; (102f8 <work_queue_main+0x134>)
   1020a:	f000 fc85 	bl	10b18 <z_sched_wait>
			continue;
   1020e:	e7e2      	b.n	101d6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10210:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   10214:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   10216:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1021a:	4295      	cmp	r5, r2
	list->tail = node;
   1021c:	bf08      	it	eq
   1021e:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   10222:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   10226:	f043 0302 	orr.w	r3, r3, #2
   1022a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1022e:	68eb      	ldr	r3, [r5, #12]
   10230:	f023 0304 	bic.w	r3, r3, #4
   10234:	f043 0301 	orr.w	r3, r3, #1
   10238:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1023a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1023c:	f387 8811 	msr	BASEPRI, r7
   10240:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   10244:	4628      	mov	r0, r5
   10246:	4798      	blx	r3
	__asm__ volatile(
   10248:	f04f 0340 	mov.w	r3, #64	; 0x40
   1024c:	f3ef 8b11 	mrs	fp, BASEPRI
   10250:	f383 8812 	msr	BASEPRI_MAX, r3
   10254:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   10258:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1025a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1025c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   10260:	d419      	bmi.n	10296 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   10262:	60ea      	str	r2, [r5, #12]
   10264:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   10268:	f023 0302 	bic.w	r3, r3, #2
   1026c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   10270:	f38b 8811 	msr	BASEPRI, fp
   10274:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   10278:	05db      	lsls	r3, r3, #23
   1027a:	d4ac      	bmi.n	101d6 <work_queue_main+0x12>
	z_impl_k_yield();
   1027c:	f000 fb4a 	bl	10914 <z_impl_k_yield>
}
   10280:	e7a9      	b.n	101d6 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   10282:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   10286:	2200      	movs	r2, #0
   10288:	2101      	movs	r1, #1
   1028a:	4628      	mov	r0, r5
   1028c:	f002 fb31 	bl	128f2 <z_sched_wake>
   10290:	2800      	cmp	r0, #0
   10292:	d1f8      	bne.n	10286 <work_queue_main+0xc2>
   10294:	e7b1      	b.n	101fa <work_queue_main+0x36>
	return list->head;
   10296:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   10298:	f023 0303 	bic.w	r3, r3, #3
   1029c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1029e:	2800      	cmp	r0, #0
   102a0:	d0e0      	beq.n	10264 <work_queue_main+0xa0>
	return node->next;
   102a2:	2700      	movs	r7, #0
   102a4:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   102a8:	463b      	mov	r3, r7
   102aa:	2800      	cmp	r0, #0
   102ac:	d0da      	beq.n	10264 <work_queue_main+0xa0>
		if (wc->work == work) {
   102ae:	6842      	ldr	r2, [r0, #4]
   102b0:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   102b2:	4601      	mov	r1, r0
		if (wc->work == work) {
   102b4:	d10c      	bne.n	102d0 <work_queue_main+0x10c>
	return node->next;
   102b6:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   102b8:	b99f      	cbnz	r7, 102e2 <work_queue_main+0x11e>
   102ba:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   102bc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   102be:	4282      	cmp	r2, r0
   102c0:	d100      	bne.n	102c4 <work_queue_main+0x100>
	list->tail = node;
   102c2:	6071      	str	r1, [r6, #4]
	parent->next = child;
   102c4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   102c8:	f7ff ff2e 	bl	10128 <z_impl_k_sem_give>
}
   102cc:	4639      	mov	r1, r7
   102ce:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   102d0:	f1ba 0f00 	cmp.w	sl, #0
   102d4:	d00b      	beq.n	102ee <work_queue_main+0x12a>
	return node->next;
   102d6:	f8da 2000 	ldr.w	r2, [sl]
   102da:	4650      	mov	r0, sl
   102dc:	460f      	mov	r7, r1
   102de:	4692      	mov	sl, r2
   102e0:	e7e3      	b.n	102aa <work_queue_main+0xe6>
	parent->next = child;
   102e2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   102e4:	6872      	ldr	r2, [r6, #4]
   102e6:	4282      	cmp	r2, r0
	list->tail = node;
   102e8:	bf08      	it	eq
   102ea:	6077      	streq	r7, [r6, #4]
}
   102ec:	e7ea      	b.n	102c4 <work_queue_main+0x100>
   102ee:	4652      	mov	r2, sl
   102f0:	e7f3      	b.n	102da <work_queue_main+0x116>
   102f2:	bf00      	nop
   102f4:	200016b4 	.word	0x200016b4
   102f8:	20001b97 	.word	0x20001b97

000102fc <submit_to_queue_locked>:
{
   102fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   102fe:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   10300:	079a      	lsls	r2, r3, #30
{
   10302:	4604      	mov	r4, r0
   10304:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   10306:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1030a:	d42c      	bmi.n	10366 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1030c:	075b      	lsls	r3, r3, #29
   1030e:	d41a      	bmi.n	10346 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   10310:	680b      	ldr	r3, [r1, #0]
   10312:	b90b      	cbnz	r3, 10318 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   10314:	6883      	ldr	r3, [r0, #8]
   10316:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   10318:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1031a:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   1031c:	bf44      	itt	mi
   1031e:	68a3      	ldrmi	r3, [r4, #8]
   10320:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   10322:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   10324:	bf4c      	ite	mi
   10326:	2602      	movmi	r6, #2
		ret = 1;
   10328:	2601      	movpl	r6, #1
	if (queue == NULL) {
   1032a:	2d00      	cmp	r5, #0
   1032c:	d03a      	beq.n	103a4 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1032e:	4b1f      	ldr	r3, [pc, #124]	; (103ac <submit_to_queue_locked+0xb0>)
   10330:	689b      	ldr	r3, [r3, #8]
   10332:	42ab      	cmp	r3, r5
   10334:	d00a      	beq.n	1034c <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   10336:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1033a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1033c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   10340:	d414      	bmi.n	1036c <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   10342:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   10346:	2300      	movs	r3, #0
   10348:	603b      	str	r3, [r7, #0]
	return ret;
   1034a:	e025      	b.n	10398 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1034c:	f002 f840 	bl	123d0 <k_is_in_isr>
   10350:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   10354:	2800      	cmp	r0, #0
   10356:	d1f0      	bne.n	1033a <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   10358:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1035a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1035e:	d5f0      	bpl.n	10342 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   10360:	b152      	cbz	r2, 10378 <submit_to_queue_locked+0x7c>
   10362:	075b      	lsls	r3, r3, #29
   10364:	d408      	bmi.n	10378 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   10366:	f06f 060f 	mvn.w	r6, #15
   1036a:	e7ec      	b.n	10346 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   1036c:	2a00      	cmp	r2, #0
   1036e:	d1fa      	bne.n	10366 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   10370:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   10374:	2b00      	cmp	r3, #0
   10376:	d1f6      	bne.n	10366 <submit_to_queue_locked+0x6a>
	parent->next = child;
   10378:	2300      	movs	r3, #0
   1037a:	6023      	str	r3, [r4, #0]
	return list->tail;
   1037c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   10380:	b963      	cbnz	r3, 1039c <submit_to_queue_locked+0xa0>
	list->head = node;
   10382:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   10386:	4628      	mov	r0, r5
   10388:	f002 f923 	bl	125d2 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1038c:	68e3      	ldr	r3, [r4, #12]
   1038e:	f043 0304 	orr.w	r3, r3, #4
   10392:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   10394:	683b      	ldr	r3, [r7, #0]
   10396:	60a3      	str	r3, [r4, #8]
}
   10398:	4630      	mov	r0, r6
   1039a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1039c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1039e:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   103a2:	e7f0      	b.n	10386 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   103a4:	f06f 0615 	mvn.w	r6, #21
   103a8:	e7cd      	b.n	10346 <submit_to_queue_locked+0x4a>
   103aa:	bf00      	nop
   103ac:	2000168c 	.word	0x2000168c

000103b0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   103b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   103b2:	b089      	sub	sp, #36	; 0x24
   103b4:	4604      	mov	r4, r0
	list->head = NULL;
   103b6:	2000      	movs	r0, #0
	list->tail = NULL;
   103b8:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   103bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   103be:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   103c2:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   103c6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   103ca:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   103ce:	b31d      	cbz	r5, 10418 <k_work_queue_start+0x68>
   103d0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   103d2:	2800      	cmp	r0, #0
   103d4:	f240 1001 	movw	r0, #257	; 0x101
   103d8:	bf08      	it	eq
   103da:	2001      	moveq	r0, #1
	*flagp = flags;
   103dc:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   103e0:	2000      	movs	r0, #0
   103e2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   103e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   103ea:	e9cd 3003 	strd	r3, r0, [sp, #12]
   103ee:	e9cd 0001 	strd	r0, r0, [sp, #4]
   103f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   103f6:	4b09      	ldr	r3, [pc, #36]	; (1041c <k_work_queue_start+0x6c>)
   103f8:	9400      	str	r4, [sp, #0]
   103fa:	4620      	mov	r0, r4
   103fc:	f7ff fd08 	bl	fe10 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   10400:	b125      	cbz	r5, 1040c <k_work_queue_start+0x5c>
   10402:	6829      	ldr	r1, [r5, #0]
   10404:	b111      	cbz	r1, 1040c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   10406:	4620      	mov	r0, r4
   10408:	f001 ffe8 	bl	123dc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1040c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1040e:	b009      	add	sp, #36	; 0x24
   10410:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   10414:	f001 bfe5 	b.w	123e2 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   10418:	2001      	movs	r0, #1
   1041a:	e7df      	b.n	103dc <k_work_queue_start+0x2c>
   1041c:	000101c5 	.word	0x000101c5

00010420 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   10420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10422:	460c      	mov	r4, r1
   10424:	9001      	str	r0, [sp, #4]
   10426:	4616      	mov	r6, r2
   10428:	461d      	mov	r5, r3
	__asm__ volatile(
   1042a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1042e:	f3ef 8711 	mrs	r7, BASEPRI
   10432:	f383 8812 	msr	BASEPRI_MAX, r3
   10436:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1043a:	4608      	mov	r0, r1
   1043c:	f002 f8bb 	bl	125b6 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10440:	ea55 0306 	orrs.w	r3, r5, r6
   10444:	d109      	bne.n	1045a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   10446:	a901      	add	r1, sp, #4
   10448:	4620      	mov	r0, r4
   1044a:	f7ff ff57 	bl	102fc <submit_to_queue_locked>
	__asm__ volatile(
   1044e:	f387 8811 	msr	BASEPRI, r7
   10452:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   10456:	b003      	add	sp, #12
   10458:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1045a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1045c:	4906      	ldr	r1, [pc, #24]	; (10478 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1045e:	f043 0308 	orr.w	r3, r3, #8
   10462:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   10464:	9b01      	ldr	r3, [sp, #4]
   10466:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   10468:	f104 0010 	add.w	r0, r4, #16
   1046c:	4632      	mov	r2, r6
   1046e:	462b      	mov	r3, r5
   10470:	f000 fbcc 	bl	10c0c <z_add_timeout>
	return ret;
   10474:	2001      	movs	r0, #1
   10476:	e7ea      	b.n	1044e <k_work_reschedule_for_queue+0x2e>
   10478:	00012647 	.word	0x00012647

0001047c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1047c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1047e:	4801      	ldr	r0, [pc, #4]	; (10484 <k_work_reschedule+0x8>)
   10480:	f7ff bfce 	b.w	10420 <k_work_reschedule_for_queue>
   10484:	20001478 	.word	0x20001478

00010488 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   10488:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   1048a:	4d07      	ldr	r5, [pc, #28]	; (104a8 <z_reset_time_slice+0x20>)
   1048c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   1048e:	b154      	cbz	r4, 104a6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   10490:	f7fe f9da 	bl	e848 <sys_clock_elapsed>
   10494:	4b05      	ldr	r3, [pc, #20]	; (104ac <z_reset_time_slice+0x24>)
   10496:	4404      	add	r4, r0
   10498:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1049a:	6828      	ldr	r0, [r5, #0]
   1049c:	2100      	movs	r1, #0
	}
}
   1049e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   104a2:	f002 ba6f 	b.w	12984 <z_set_timeout_expiry>
}
   104a6:	bd38      	pop	{r3, r4, r5, pc}
   104a8:	200016c4 	.word	0x200016c4
   104ac:	2000168c 	.word	0x2000168c

000104b0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   104b0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   104b2:	4d0d      	ldr	r5, [pc, #52]	; (104e8 <update_cache+0x38>)
   104b4:	462b      	mov	r3, r5
   104b6:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   104ba:	429c      	cmp	r4, r3
   104bc:	d000      	beq.n	104c0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   104be:	b904      	cbnz	r4, 104c2 <update_cache+0x12>
   104c0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   104c2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   104c4:	b938      	cbnz	r0, 104d6 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   104c6:	7b5a      	ldrb	r2, [r3, #13]
   104c8:	06d2      	lsls	r2, r2, #27
   104ca:	d104      	bne.n	104d6 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   104cc:	69a2      	ldr	r2, [r4, #24]
   104ce:	b912      	cbnz	r2, 104d6 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   104d0:	89da      	ldrh	r2, [r3, #14]
   104d2:	2a7f      	cmp	r2, #127	; 0x7f
   104d4:	d805      	bhi.n	104e2 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   104d6:	429c      	cmp	r4, r3
   104d8:	d002      	beq.n	104e0 <update_cache+0x30>
			z_reset_time_slice(thread);
   104da:	4620      	mov	r0, r4
   104dc:	f7ff ffd4 	bl	10488 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   104e0:	4623      	mov	r3, r4
   104e2:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   104e4:	bd38      	pop	{r3, r4, r5, pc}
   104e6:	bf00      	nop
   104e8:	2000168c 	.word	0x2000168c

000104ec <move_thread_to_end_of_prio_q>:
{
   104ec:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   104ee:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   104f2:	7b43      	ldrb	r3, [r0, #13]
   104f4:	2a00      	cmp	r2, #0
{
   104f6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   104f8:	da04      	bge.n	10504 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   104fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   104fe:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   10500:	f002 f90e 	bl	12720 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   10504:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   10506:	4a15      	ldr	r2, [pc, #84]	; (1055c <move_thread_to_end_of_prio_q+0x70>)
   10508:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1050c:	4610      	mov	r0, r2
   1050e:	734b      	strb	r3, [r1, #13]
   10510:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   10514:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10516:	4283      	cmp	r3, r0
   10518:	bf08      	it	eq
   1051a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1051c:	b923      	cbnz	r3, 10528 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   1051e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   10522:	6021      	str	r1, [r4, #0]
	list->tail = node;
   10524:	6251      	str	r1, [r2, #36]	; 0x24
}
   10526:	e00c      	b.n	10542 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   10528:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1052c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   10530:	42b5      	cmp	r5, r6
   10532:	d00e      	beq.n	10552 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   10534:	42ae      	cmp	r6, r5
   10536:	dd0c      	ble.n	10552 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   10538:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1053a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1053e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   10540:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   10542:	6890      	ldr	r0, [r2, #8]
   10544:	1a43      	subs	r3, r0, r1
   10546:	4258      	negs	r0, r3
}
   10548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1054c:	4158      	adcs	r0, r3
   1054e:	f7ff bfaf 	b.w	104b0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   10552:	429c      	cmp	r4, r3
   10554:	d0e3      	beq.n	1051e <move_thread_to_end_of_prio_q+0x32>
   10556:	681b      	ldr	r3, [r3, #0]
   10558:	e7e0      	b.n	1051c <move_thread_to_end_of_prio_q+0x30>
   1055a:	bf00      	nop
   1055c:	2000168c 	.word	0x2000168c

00010560 <ready_thread>:
{
   10560:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   10562:	f990 300d 	ldrsb.w	r3, [r0, #13]
   10566:	7b42      	ldrb	r2, [r0, #13]
   10568:	2b00      	cmp	r3, #0
   1056a:	db29      	blt.n	105c0 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1056c:	06d3      	lsls	r3, r2, #27
   1056e:	d127      	bne.n	105c0 <ready_thread+0x60>
	return node->next != NULL;
   10570:	6983      	ldr	r3, [r0, #24]
   10572:	bb2b      	cbnz	r3, 105c0 <ready_thread+0x60>
	return list->head == list;
   10574:	4913      	ldr	r1, [pc, #76]	; (105c4 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   10576:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1057a:	7342      	strb	r2, [r0, #13]
   1057c:	460a      	mov	r2, r1
   1057e:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10582:	4294      	cmp	r4, r2
   10584:	bf18      	it	ne
   10586:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   10588:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1058a:	b923      	cbnz	r3, 10596 <ready_thread+0x36>
	node->prev = tail;
   1058c:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   10590:	6020      	str	r0, [r4, #0]
	list->tail = node;
   10592:	6248      	str	r0, [r1, #36]	; 0x24
}
   10594:	e00c      	b.n	105b0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   10596:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1059a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1059e:	42b5      	cmp	r5, r6
   105a0:	d00a      	beq.n	105b8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   105a2:	42ae      	cmp	r6, r5
   105a4:	dd08      	ble.n	105b8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   105a6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   105a8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   105ac:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   105ae:	6058      	str	r0, [r3, #4]
}
   105b0:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   105b2:	2000      	movs	r0, #0
   105b4:	f7ff bf7c 	b.w	104b0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   105b8:	42a3      	cmp	r3, r4
   105ba:	d0e7      	beq.n	1058c <ready_thread+0x2c>
   105bc:	681b      	ldr	r3, [r3, #0]
   105be:	e7e4      	b.n	1058a <ready_thread+0x2a>
}
   105c0:	bc70      	pop	{r4, r5, r6}
   105c2:	4770      	bx	lr
   105c4:	2000168c 	.word	0x2000168c

000105c8 <unready_thread>:
{
   105c8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   105ca:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   105ce:	7b43      	ldrb	r3, [r0, #13]
   105d0:	2a00      	cmp	r2, #0
{
   105d2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   105d4:	da04      	bge.n	105e0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   105d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   105da:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   105dc:	f002 f8a0 	bl	12720 <sys_dlist_remove>
	update_cache(thread == _current);
   105e0:	4b04      	ldr	r3, [pc, #16]	; (105f4 <unready_thread+0x2c>)
   105e2:	6898      	ldr	r0, [r3, #8]
   105e4:	1a43      	subs	r3, r0, r1
   105e6:	4258      	negs	r0, r3
   105e8:	4158      	adcs	r0, r3
}
   105ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   105ee:	f7ff bf5f 	b.w	104b0 <update_cache>
   105f2:	bf00      	nop
   105f4:	2000168c 	.word	0x2000168c

000105f8 <pend_locked>:
{
   105f8:	b570      	push	{r4, r5, r6, lr}
   105fa:	4615      	mov	r5, r2
   105fc:	461c      	mov	r4, r3
   105fe:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   10600:	f002 f8c2 	bl	12788 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10604:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   10608:	bf08      	it	eq
   1060a:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   1060e:	d008      	beq.n	10622 <pend_locked+0x2a>
   10610:	462a      	mov	r2, r5
   10612:	4623      	mov	r3, r4
   10614:	f106 0018 	add.w	r0, r6, #24
   10618:	4902      	ldr	r1, [pc, #8]	; (10624 <pend_locked+0x2c>)
}
   1061a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1061e:	f000 baf5 	b.w	10c0c <z_add_timeout>
   10622:	bd70      	pop	{r4, r5, r6, pc}
   10624:	00012745 	.word	0x00012745

00010628 <k_sched_time_slice_set>:
{
   10628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1062a:	4604      	mov	r4, r0
   1062c:	460d      	mov	r5, r1
	__asm__ volatile(
   1062e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10632:	f3ef 8711 	mrs	r7, BASEPRI
   10636:	f383 8812 	msr	BASEPRI_MAX, r3
   1063a:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   1063e:	2600      	movs	r6, #0
   10640:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   10644:	f240 30e7 	movw	r0, #999	; 0x3e7
   10648:	4631      	mov	r1, r6
   1064a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1064e:	2300      	movs	r3, #0
   10650:	fbe4 010c 	umlal	r0, r1, r4, ip
   10654:	f7f0 f91e 	bl	894 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   10658:	42b4      	cmp	r4, r6
   1065a:	dd02      	ble.n	10662 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   1065c:	2802      	cmp	r0, #2
   1065e:	bfb8      	it	lt
   10660:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   10662:	4a07      	ldr	r2, [pc, #28]	; (10680 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   10664:	4b07      	ldr	r3, [pc, #28]	; (10684 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   10666:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   10668:	4a07      	ldr	r2, [pc, #28]	; (10688 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   1066a:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   1066c:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   1066e:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   10670:	f7ff ff0a 	bl	10488 <z_reset_time_slice>
	__asm__ volatile(
   10674:	f387 8811 	msr	BASEPRI, r7
   10678:	f3bf 8f6f 	isb	sy
}
   1067c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1067e:	bf00      	nop
   10680:	200016c4 	.word	0x200016c4
   10684:	2000168c 	.word	0x2000168c
   10688:	200016c0 	.word	0x200016c0

0001068c <z_time_slice>:
{
   1068c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1068e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10692:	f3ef 8511 	mrs	r5, BASEPRI
   10696:	f383 8812 	msr	BASEPRI_MAX, r3
   1069a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1069e:	4b17      	ldr	r3, [pc, #92]	; (106fc <z_time_slice+0x70>)
   106a0:	4a17      	ldr	r2, [pc, #92]	; (10700 <z_time_slice+0x74>)
   106a2:	689c      	ldr	r4, [r3, #8]
   106a4:	6811      	ldr	r1, [r2, #0]
   106a6:	428c      	cmp	r4, r1
   106a8:	d107      	bne.n	106ba <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   106aa:	4620      	mov	r0, r4
   106ac:	f7ff feec 	bl	10488 <z_reset_time_slice>
	__asm__ volatile(
   106b0:	f385 8811 	msr	BASEPRI, r5
   106b4:	f3bf 8f6f 	isb	sy
}
   106b8:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   106ba:	2100      	movs	r1, #0
   106bc:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   106be:	4a11      	ldr	r2, [pc, #68]	; (10704 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   106c0:	6812      	ldr	r2, [r2, #0]
   106c2:	b1c2      	cbz	r2, 106f6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   106c4:	89e2      	ldrh	r2, [r4, #14]
   106c6:	2a7f      	cmp	r2, #127	; 0x7f
   106c8:	d815      	bhi.n	106f6 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   106ca:	7b62      	ldrb	r2, [r4, #13]
   106cc:	06d2      	lsls	r2, r2, #27
   106ce:	d112      	bne.n	106f6 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   106d0:	4a0d      	ldr	r2, [pc, #52]	; (10708 <z_time_slice+0x7c>)
   106d2:	f994 100e 	ldrsb.w	r1, [r4, #14]
   106d6:	6812      	ldr	r2, [r2, #0]
   106d8:	4291      	cmp	r1, r2
   106da:	db0c      	blt.n	106f6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   106dc:	4a0b      	ldr	r2, [pc, #44]	; (1070c <z_time_slice+0x80>)
   106de:	4294      	cmp	r4, r2
   106e0:	d009      	beq.n	106f6 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   106e2:	691a      	ldr	r2, [r3, #16]
   106e4:	4282      	cmp	r2, r0
   106e6:	dc03      	bgt.n	106f0 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   106e8:	4620      	mov	r0, r4
   106ea:	f7ff feff 	bl	104ec <move_thread_to_end_of_prio_q>
   106ee:	e7dc      	b.n	106aa <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   106f0:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   106f2:	611a      	str	r2, [r3, #16]
   106f4:	e7dc      	b.n	106b0 <z_time_slice+0x24>
   106f6:	2200      	movs	r2, #0
   106f8:	e7fb      	b.n	106f2 <z_time_slice+0x66>
   106fa:	bf00      	nop
   106fc:	2000168c 	.word	0x2000168c
   10700:	200016bc 	.word	0x200016bc
   10704:	200016c4 	.word	0x200016c4
   10708:	200016c0 	.word	0x200016c0
   1070c:	20001370 	.word	0x20001370

00010710 <z_pend_curr>:
{
   10710:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   10712:	480c      	ldr	r0, [pc, #48]	; (10744 <z_pend_curr+0x34>)
   10714:	4d0c      	ldr	r5, [pc, #48]	; (10748 <z_pend_curr+0x38>)
   10716:	6886      	ldr	r6, [r0, #8]
   10718:	602e      	str	r6, [r5, #0]
{
   1071a:	460c      	mov	r4, r1
   1071c:	4611      	mov	r1, r2
   1071e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   10722:	f04f 0640 	mov.w	r6, #64	; 0x40
   10726:	f3ef 8511 	mrs	r5, BASEPRI
   1072a:	f386 8812 	msr	BASEPRI_MAX, r6
   1072e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   10732:	6880      	ldr	r0, [r0, #8]
   10734:	f7ff ff60 	bl	105f8 <pend_locked>
	ret = arch_swap(key);
   10738:	4620      	mov	r0, r4
}
   1073a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1073e:	f7fb bb37 	b.w	bdb0 <arch_swap>
   10742:	bf00      	nop
   10744:	2000168c 	.word	0x2000168c
   10748:	200016bc 	.word	0x200016bc

0001074c <z_set_prio>:
{
   1074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1074e:	4604      	mov	r4, r0
   10750:	f04f 0340 	mov.w	r3, #64	; 0x40
   10754:	f3ef 8611 	mrs	r6, BASEPRI
   10758:	f383 8812 	msr	BASEPRI_MAX, r3
   1075c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   10760:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   10762:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   10764:	b249      	sxtb	r1, r1
   10766:	d119      	bne.n	1079c <z_set_prio+0x50>
	return node->next != NULL;
   10768:	6985      	ldr	r5, [r0, #24]
   1076a:	b9bd      	cbnz	r5, 1079c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1076c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10770:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   10772:	f001 ffd5 	bl	12720 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   10776:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   10778:	4a16      	ldr	r2, [pc, #88]	; (107d4 <z_set_prio+0x88>)
				thread->base.prio = prio;
   1077a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1077c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10780:	7343      	strb	r3, [r0, #13]
   10782:	4613      	mov	r3, r2
   10784:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10788:	4298      	cmp	r0, r3
   1078a:	bf18      	it	ne
   1078c:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   1078e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10790:	b95d      	cbnz	r5, 107aa <z_set_prio+0x5e>
	node->prev = tail;
   10792:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   10796:	6004      	str	r4, [r0, #0]
	list->tail = node;
   10798:	6254      	str	r4, [r2, #36]	; 0x24
}
   1079a:	e011      	b.n	107c0 <z_set_prio+0x74>
			thread->base.prio = prio;
   1079c:	73a1      	strb	r1, [r4, #14]
   1079e:	2000      	movs	r0, #0
	__asm__ volatile(
   107a0:	f386 8811 	msr	BASEPRI, r6
   107a4:	f3bf 8f6f 	isb	sy
}
   107a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   107aa:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   107ae:	42b9      	cmp	r1, r7
   107b0:	d00b      	beq.n	107ca <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   107b2:	428f      	cmp	r7, r1
   107b4:	dd09      	ble.n	107ca <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   107b6:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   107b8:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   107bc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   107be:	606c      	str	r4, [r5, #4]
			update_cache(1);
   107c0:	2001      	movs	r0, #1
   107c2:	f7ff fe75 	bl	104b0 <update_cache>
   107c6:	2001      	movs	r0, #1
   107c8:	e7ea      	b.n	107a0 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   107ca:	42a8      	cmp	r0, r5
   107cc:	d0e1      	beq.n	10792 <z_set_prio+0x46>
   107ce:	682d      	ldr	r5, [r5, #0]
   107d0:	e7de      	b.n	10790 <z_set_prio+0x44>
   107d2:	bf00      	nop
   107d4:	2000168c 	.word	0x2000168c

000107d8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   107d8:	b949      	cbnz	r1, 107ee <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   107da:	f3ef 8005 	mrs	r0, IPSR
   107de:	b930      	cbnz	r0, 107ee <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   107e0:	4b05      	ldr	r3, [pc, #20]	; (107f8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   107e2:	69da      	ldr	r2, [r3, #28]
   107e4:	689b      	ldr	r3, [r3, #8]
   107e6:	429a      	cmp	r2, r3
   107e8:	d001      	beq.n	107ee <z_reschedule+0x16>
   107ea:	f7fb bae1 	b.w	bdb0 <arch_swap>
   107ee:	f381 8811 	msr	BASEPRI, r1
   107f2:	f3bf 8f6f 	isb	sy
}
   107f6:	4770      	bx	lr
   107f8:	2000168c 	.word	0x2000168c

000107fc <z_sched_start>:
{
   107fc:	b510      	push	{r4, lr}
	__asm__ volatile(
   107fe:	f04f 0240 	mov.w	r2, #64	; 0x40
   10802:	f3ef 8411 	mrs	r4, BASEPRI
   10806:	f382 8812 	msr	BASEPRI_MAX, r2
   1080a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1080e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   10810:	0751      	lsls	r1, r2, #29
   10812:	d404      	bmi.n	1081e <z_sched_start+0x22>
	__asm__ volatile(
   10814:	f384 8811 	msr	BASEPRI, r4
   10818:	f3bf 8f6f 	isb	sy
}
   1081c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1081e:	f022 0204 	bic.w	r2, r2, #4
   10822:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   10824:	f7ff fe9c 	bl	10560 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   10828:	4621      	mov	r1, r4
   1082a:	4802      	ldr	r0, [pc, #8]	; (10834 <z_sched_start+0x38>)
}
   1082c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   10830:	f7ff bfd2 	b.w	107d8 <z_reschedule>
   10834:	20001b98 	.word	0x20001b98

00010838 <z_impl_k_thread_suspend>:
{
   10838:	b570      	push	{r4, r5, r6, lr}
   1083a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1083c:	3018      	adds	r0, #24
   1083e:	f002 f87b 	bl	12938 <z_abort_timeout>
	__asm__ volatile(
   10842:	f04f 0340 	mov.w	r3, #64	; 0x40
   10846:	f3ef 8611 	mrs	r6, BASEPRI
   1084a:	f383 8812 	msr	BASEPRI_MAX, r3
   1084e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   10852:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   10856:	7b63      	ldrb	r3, [r4, #13]
   10858:	2a00      	cmp	r2, #0
   1085a:	da05      	bge.n	10868 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1085c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10860:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   10862:	4620      	mov	r0, r4
   10864:	f001 ff5c 	bl	12720 <sys_dlist_remove>
		update_cache(thread == _current);
   10868:	4d0b      	ldr	r5, [pc, #44]	; (10898 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1086a:	7b63      	ldrb	r3, [r4, #13]
   1086c:	68a8      	ldr	r0, [r5, #8]
   1086e:	f043 0310 	orr.w	r3, r3, #16
   10872:	7363      	strb	r3, [r4, #13]
   10874:	1b03      	subs	r3, r0, r4
   10876:	4258      	negs	r0, r3
   10878:	4158      	adcs	r0, r3
   1087a:	f7ff fe19 	bl	104b0 <update_cache>
	__asm__ volatile(
   1087e:	f386 8811 	msr	BASEPRI, r6
   10882:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   10886:	68ab      	ldr	r3, [r5, #8]
   10888:	42a3      	cmp	r3, r4
   1088a:	d103      	bne.n	10894 <z_impl_k_thread_suspend+0x5c>
}
   1088c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   10890:	f002 b815 	b.w	128be <z_reschedule_unlocked>
}
   10894:	bd70      	pop	{r4, r5, r6, pc}
   10896:	bf00      	nop
   10898:	2000168c 	.word	0x2000168c

0001089c <k_sched_lock>:
	__asm__ volatile(
   1089c:	f04f 0340 	mov.w	r3, #64	; 0x40
   108a0:	f3ef 8111 	mrs	r1, BASEPRI
   108a4:	f383 8812 	msr	BASEPRI_MAX, r3
   108a8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   108ac:	4b04      	ldr	r3, [pc, #16]	; (108c0 <k_sched_lock+0x24>)
   108ae:	689a      	ldr	r2, [r3, #8]
   108b0:	7bd3      	ldrb	r3, [r2, #15]
   108b2:	3b01      	subs	r3, #1
   108b4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   108b6:	f381 8811 	msr	BASEPRI, r1
   108ba:	f3bf 8f6f 	isb	sy
}
   108be:	4770      	bx	lr
   108c0:	2000168c 	.word	0x2000168c

000108c4 <k_sched_unlock>:
{
   108c4:	b510      	push	{r4, lr}
	__asm__ volatile(
   108c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   108ca:	f3ef 8411 	mrs	r4, BASEPRI
   108ce:	f383 8812 	msr	BASEPRI_MAX, r3
   108d2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   108d6:	4b08      	ldr	r3, [pc, #32]	; (108f8 <k_sched_unlock+0x34>)
   108d8:	689a      	ldr	r2, [r3, #8]
   108da:	7bd3      	ldrb	r3, [r2, #15]
   108dc:	3301      	adds	r3, #1
   108de:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   108e0:	2000      	movs	r0, #0
   108e2:	f7ff fde5 	bl	104b0 <update_cache>
	__asm__ volatile(
   108e6:	f384 8811 	msr	BASEPRI, r4
   108ea:	f3bf 8f6f 	isb	sy
}
   108ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   108f2:	f001 bfe4 	b.w	128be <z_reschedule_unlocked>
   108f6:	bf00      	nop
   108f8:	2000168c 	.word	0x2000168c

000108fc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   108fc:	4b04      	ldr	r3, [pc, #16]	; (10910 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   108fe:	2100      	movs	r1, #0
   10900:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   10904:	e9c3 2208 	strd	r2, r2, [r3, #32]
   10908:	4608      	mov	r0, r1
   1090a:	f7ff be8d 	b.w	10628 <k_sched_time_slice_set>
   1090e:	bf00      	nop
   10910:	2000168c 	.word	0x2000168c

00010914 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   10914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   10916:	f04f 0340 	mov.w	r3, #64	; 0x40
   1091a:	f3ef 8511 	mrs	r5, BASEPRI
   1091e:	f383 8812 	msr	BASEPRI_MAX, r3
   10922:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   10926:	4919      	ldr	r1, [pc, #100]	; (1098c <z_impl_k_yield+0x78>)
   10928:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1092a:	7b43      	ldrb	r3, [r0, #13]
   1092c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10930:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   10932:	f001 fef5 	bl	12720 <sys_dlist_remove>
	}
	queue_thread(_current);
   10936:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   10938:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1093a:	4608      	mov	r0, r1
   1093c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10940:	735a      	strb	r2, [r3, #13]
   10942:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   10946:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10948:	4282      	cmp	r2, r0
   1094a:	bf08      	it	eq
   1094c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1094e:	b922      	cbnz	r2, 1095a <z_impl_k_yield+0x46>
	node->prev = tail;
   10950:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   10954:	6023      	str	r3, [r4, #0]
	list->tail = node;
   10956:	624b      	str	r3, [r1, #36]	; 0x24
}
   10958:	e00c      	b.n	10974 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   1095a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1095e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   10962:	42be      	cmp	r6, r7
   10964:	d00e      	beq.n	10984 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   10966:	42b7      	cmp	r7, r6
   10968:	dd0c      	ble.n	10984 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   1096a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1096c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   10970:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   10972:	6053      	str	r3, [r2, #4]
	update_cache(1);
   10974:	2001      	movs	r0, #1
   10976:	f7ff fd9b 	bl	104b0 <update_cache>
   1097a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1097c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10980:	f7fb ba16 	b.w	bdb0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   10984:	42a2      	cmp	r2, r4
   10986:	d0e3      	beq.n	10950 <z_impl_k_yield+0x3c>
   10988:	6812      	ldr	r2, [r2, #0]
   1098a:	e7e0      	b.n	1094e <z_impl_k_yield+0x3a>
   1098c:	2000168c 	.word	0x2000168c

00010990 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   10990:	ea50 0301 	orrs.w	r3, r0, r1
{
   10994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10998:	4605      	mov	r5, r0
   1099a:	460e      	mov	r6, r1
	if (ticks == 0) {
   1099c:	d103      	bne.n	109a6 <z_tick_sleep+0x16>
	z_impl_k_yield();
   1099e:	f7ff ffb9 	bl	10914 <z_impl_k_yield>
		k_yield();
		return 0;
   109a2:	2000      	movs	r0, #0
   109a4:	e02c      	b.n	10a00 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   109a6:	1c83      	adds	r3, r0, #2
   109a8:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   109ac:	db2a      	blt.n	10a04 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   109ae:	f002 f805 	bl	129bc <sys_clock_tick_get_32>
   109b2:	1944      	adds	r4, r0, r5
   109b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   109b8:	f3ef 8811 	mrs	r8, BASEPRI
   109bc:	f383 8812 	msr	BASEPRI_MAX, r3
   109c0:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   109c4:	4f11      	ldr	r7, [pc, #68]	; (10a0c <z_tick_sleep+0x7c>)
   109c6:	4b12      	ldr	r3, [pc, #72]	; (10a10 <z_tick_sleep+0x80>)
   109c8:	68b8      	ldr	r0, [r7, #8]
   109ca:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   109cc:	f7ff fdfc 	bl	105c8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   109d0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   109d2:	4910      	ldr	r1, [pc, #64]	; (10a14 <z_tick_sleep+0x84>)
   109d4:	462a      	mov	r2, r5
   109d6:	4633      	mov	r3, r6
   109d8:	3018      	adds	r0, #24
   109da:	f000 f917 	bl	10c0c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   109de:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   109e0:	7b53      	ldrb	r3, [r2, #13]
   109e2:	f043 0310 	orr.w	r3, r3, #16
   109e6:	7353      	strb	r3, [r2, #13]
   109e8:	4640      	mov	r0, r8
   109ea:	f7fb f9e1 	bl	bdb0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   109ee:	f001 ffe5 	bl	129bc <sys_clock_tick_get_32>
   109f2:	1a20      	subs	r0, r4, r0
   109f4:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   109f8:	2801      	cmp	r0, #1
   109fa:	f173 0300 	sbcs.w	r3, r3, #0
   109fe:	dbd0      	blt.n	109a2 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   10a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   10a04:	f06f 0401 	mvn.w	r4, #1
   10a08:	1a24      	subs	r4, r4, r0
   10a0a:	e7d3      	b.n	109b4 <z_tick_sleep+0x24>
   10a0c:	2000168c 	.word	0x2000168c
   10a10:	200016bc 	.word	0x200016bc
   10a14:	00012745 	.word	0x00012745

00010a18 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10a18:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   10a1c:	bf08      	it	eq
   10a1e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   10a22:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10a24:	d106      	bne.n	10a34 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   10a26:	4b08      	ldr	r3, [pc, #32]	; (10a48 <z_impl_k_sleep+0x30>)
   10a28:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   10a2a:	f7ff ff05 	bl	10838 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   10a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   10a32:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   10a34:	f7ff ffac 	bl	10990 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   10a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   10a3c:	fb80 0303 	smull	r0, r3, r0, r3
   10a40:	0bc0      	lsrs	r0, r0, #15
   10a42:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   10a46:	e7f4      	b.n	10a32 <z_impl_k_sleep+0x1a>
   10a48:	2000168c 	.word	0x2000168c

00010a4c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   10a4c:	4b01      	ldr	r3, [pc, #4]	; (10a54 <z_impl_z_current_get+0x8>)
   10a4e:	6898      	ldr	r0, [r3, #8]
   10a50:	4770      	bx	lr
   10a52:	bf00      	nop
   10a54:	2000168c 	.word	0x2000168c

00010a58 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   10a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a5c:	4604      	mov	r4, r0
   10a5e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10a62:	f3ef 8611 	mrs	r6, BASEPRI
   10a66:	f383 8812 	msr	BASEPRI_MAX, r3
   10a6a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   10a6e:	7b03      	ldrb	r3, [r0, #12]
   10a70:	07d9      	lsls	r1, r3, #31
   10a72:	d50b      	bpl.n	10a8c <z_thread_abort+0x34>
	__asm__ volatile(
   10a74:	f386 8811 	msr	BASEPRI, r6
   10a78:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   10a7c:	4040      	eors	r0, r0
   10a7e:	f380 8811 	msr	BASEPRI, r0
   10a82:	f04f 0004 	mov.w	r0, #4
   10a86:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   10a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   10a8c:	7b43      	ldrb	r3, [r0, #13]
   10a8e:	071a      	lsls	r2, r3, #28
   10a90:	d504      	bpl.n	10a9c <z_thread_abort+0x44>
   10a92:	f386 8811 	msr	BASEPRI, r6
   10a96:	f3bf 8f6f 	isb	sy
   10a9a:	e7f5      	b.n	10a88 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   10a9c:	f023 0220 	bic.w	r2, r3, #32
   10aa0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   10aa4:	09d2      	lsrs	r2, r2, #7
   10aa6:	d120      	bne.n	10aea <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   10aa8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   10aaa:	68a3      	ldr	r3, [r4, #8]
   10aac:	b113      	cbz	r3, 10ab4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   10aae:	4620      	mov	r0, r4
   10ab0:	f001 fe3e 	bl	12730 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   10ab4:	f104 0018 	add.w	r0, r4, #24
   10ab8:	f001 ff3e 	bl	12938 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   10abc:	f104 0758 	add.w	r7, r4, #88	; 0x58
   10ac0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   10ac4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10ac6:	42bd      	cmp	r5, r7
   10ac8:	d000      	beq.n	10acc <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   10aca:	b9b5      	cbnz	r5, 10afa <z_thread_abort+0xa2>
		update_cache(1);
   10acc:	2001      	movs	r0, #1
   10ace:	f7ff fcef 	bl	104b0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   10ad2:	4b10      	ldr	r3, [pc, #64]	; (10b14 <z_thread_abort+0xbc>)
   10ad4:	689b      	ldr	r3, [r3, #8]
   10ad6:	42a3      	cmp	r3, r4
   10ad8:	d1db      	bne.n	10a92 <z_thread_abort+0x3a>
   10ada:	f3ef 8305 	mrs	r3, IPSR
   10ade:	2b00      	cmp	r3, #0
   10ae0:	d1d7      	bne.n	10a92 <z_thread_abort+0x3a>
   10ae2:	4630      	mov	r0, r6
   10ae4:	f7fb f964 	bl	bdb0 <arch_swap>
	return ret;
   10ae8:	e7d3      	b.n	10a92 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10aea:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   10aee:	f043 0308 	orr.w	r3, r3, #8
   10af2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   10af4:	f001 fe14 	bl	12720 <sys_dlist_remove>
}
   10af8:	e7d7      	b.n	10aaa <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   10afa:	4628      	mov	r0, r5
   10afc:	f001 fe18 	bl	12730 <unpend_thread_no_timeout>
   10b00:	f105 0018 	add.w	r0, r5, #24
   10b04:	f001 ff18 	bl	12938 <z_abort_timeout>
   10b08:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   10b0c:	4628      	mov	r0, r5
   10b0e:	f7ff fd27 	bl	10560 <ready_thread>
   10b12:	e7d7      	b.n	10ac4 <z_thread_abort+0x6c>
   10b14:	2000168c 	.word	0x2000168c

00010b18 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   10b18:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   10b1a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   10b1e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   10b20:	e9cd 6700 	strd	r6, r7, [sp]
   10b24:	f7ff fdf4 	bl	10710 <z_pend_curr>

	if (data != NULL) {
   10b28:	b11c      	cbz	r4, 10b32 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   10b2a:	4b03      	ldr	r3, [pc, #12]	; (10b38 <z_sched_wait+0x20>)
   10b2c:	689b      	ldr	r3, [r3, #8]
   10b2e:	695b      	ldr	r3, [r3, #20]
   10b30:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   10b32:	b002      	add	sp, #8
   10b34:	bdd0      	pop	{r4, r6, r7, pc}
   10b36:	bf00      	nop
   10b38:	2000168c 	.word	0x2000168c

00010b3c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   10b3c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   10b3e:	4806      	ldr	r0, [pc, #24]	; (10b58 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   10b40:	4a06      	ldr	r2, [pc, #24]	; (10b5c <z_data_copy+0x20>)
   10b42:	4907      	ldr	r1, [pc, #28]	; (10b60 <z_data_copy+0x24>)
   10b44:	1a12      	subs	r2, r2, r0
   10b46:	f001 fbcf 	bl	122e8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   10b4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   10b4e:	4a05      	ldr	r2, [pc, #20]	; (10b64 <z_data_copy+0x28>)
   10b50:	4905      	ldr	r1, [pc, #20]	; (10b68 <z_data_copy+0x2c>)
   10b52:	4806      	ldr	r0, [pc, #24]	; (10b6c <z_data_copy+0x30>)
   10b54:	f001 bbc8 	b.w	122e8 <z_early_memcpy>
   10b58:	20000000 	.word	0x20000000
   10b5c:	20000530 	.word	0x20000530
   10b60:	000132f0 	.word	0x000132f0
   10b64:	00000000 	.word	0x00000000
   10b68:	000132f0 	.word	0x000132f0
   10b6c:	20000000 	.word	0x20000000

00010b70 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   10b70:	4b03      	ldr	r3, [pc, #12]	; (10b80 <elapsed+0x10>)
   10b72:	681b      	ldr	r3, [r3, #0]
   10b74:	b90b      	cbnz	r3, 10b7a <elapsed+0xa>
   10b76:	f7fd be67 	b.w	e848 <sys_clock_elapsed>
}
   10b7a:	2000      	movs	r0, #0
   10b7c:	4770      	bx	lr
   10b7e:	bf00      	nop
   10b80:	200016c8 	.word	0x200016c8

00010b84 <next_timeout>:

static int32_t next_timeout(void)
{
   10b84:	b510      	push	{r4, lr}
	return list->head == list;
   10b86:	4b11      	ldr	r3, [pc, #68]	; (10bcc <next_timeout+0x48>)
   10b88:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10b8a:	429c      	cmp	r4, r3
   10b8c:	d10a      	bne.n	10ba4 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   10b8e:	f7ff ffef 	bl	10b70 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   10b92:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   10b96:	4b0e      	ldr	r3, [pc, #56]	; (10bd0 <next_timeout+0x4c>)
   10b98:	691b      	ldr	r3, [r3, #16]
   10b9a:	b113      	cbz	r3, 10ba2 <next_timeout+0x1e>
   10b9c:	4298      	cmp	r0, r3
   10b9e:	bfa8      	it	ge
   10ba0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   10ba2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   10ba4:	f7ff ffe4 	bl	10b70 <elapsed>
	if ((to == NULL) ||
   10ba8:	2c00      	cmp	r4, #0
   10baa:	d0f2      	beq.n	10b92 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   10bac:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   10bb0:	1a1b      	subs	r3, r3, r0
   10bb2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   10bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   10bba:	f172 0100 	sbcs.w	r1, r2, #0
   10bbe:	dae8      	bge.n	10b92 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   10bc0:	2a00      	cmp	r2, #0
   10bc2:	bfac      	ite	ge
   10bc4:	4618      	movge	r0, r3
   10bc6:	2000      	movlt	r0, #0
   10bc8:	e7e5      	b.n	10b96 <next_timeout+0x12>
   10bca:	bf00      	nop
   10bcc:	2000046c 	.word	0x2000046c
   10bd0:	2000168c 	.word	0x2000168c

00010bd4 <remove_timeout>:
{
   10bd4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   10bd6:	b170      	cbz	r0, 10bf6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   10bd8:	4b0b      	ldr	r3, [pc, #44]	; (10c08 <remove_timeout+0x34>)
   10bda:	685b      	ldr	r3, [r3, #4]
   10bdc:	4298      	cmp	r0, r3
   10bde:	d00a      	beq.n	10bf6 <remove_timeout+0x22>
   10be0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   10be2:	b143      	cbz	r3, 10bf6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   10be4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   10be8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   10bec:	1912      	adds	r2, r2, r4
   10bee:	eb41 0105 	adc.w	r1, r1, r5
   10bf2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   10bf6:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   10bfa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   10bfc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10bfe:	2300      	movs	r3, #0
	node->prev = NULL;
   10c00:	e9c0 3300 	strd	r3, r3, [r0]
}
   10c04:	bd30      	pop	{r4, r5, pc}
   10c06:	bf00      	nop
   10c08:	2000046c 	.word	0x2000046c

00010c0c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10c10:	bf08      	it	eq
   10c12:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   10c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c18:	4604      	mov	r4, r0
   10c1a:	461d      	mov	r5, r3
   10c1c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10c1e:	d061      	beq.n	10ce4 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   10c20:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   10c22:	f04f 0340 	mov.w	r3, #64	; 0x40
   10c26:	f3ef 8711 	mrs	r7, BASEPRI
   10c2a:	f383 8812 	msr	BASEPRI_MAX, r3
   10c2e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   10c32:	3201      	adds	r2, #1
   10c34:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   10c38:	da24      	bge.n	10c84 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   10c3a:	4930      	ldr	r1, [pc, #192]	; (10cfc <z_add_timeout+0xf0>)
   10c3c:	e9d1 2000 	ldrd	r2, r0, [r1]
   10c40:	f06f 0301 	mvn.w	r3, #1
   10c44:	1a9b      	subs	r3, r3, r2
   10c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10c4a:	eb62 0000 	sbc.w	r0, r2, r0
   10c4e:	1b9e      	subs	r6, r3, r6
   10c50:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   10c54:	2e01      	cmp	r6, #1
   10c56:	f170 0300 	sbcs.w	r3, r0, #0
   10c5a:	da01      	bge.n	10c60 <z_add_timeout+0x54>
   10c5c:	2601      	movs	r6, #1
   10c5e:	2000      	movs	r0, #0
   10c60:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   10c64:	4e26      	ldr	r6, [pc, #152]	; (10d00 <z_add_timeout+0xf4>)
   10c66:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   10c6a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10c6c:	45b4      	cmp	ip, r6
   10c6e:	bf08      	it	eq
   10c70:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   10c74:	f1bc 0f00 	cmp.w	ip, #0
   10c78:	d10d      	bne.n	10c96 <z_add_timeout+0x8a>
	node->prev = tail;
   10c7a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   10c7e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   10c80:	6074      	str	r4, [r6, #4]
}
   10c82:	e01c      	b.n	10cbe <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   10c84:	f7ff ff74 	bl	10b70 <elapsed>
   10c88:	3601      	adds	r6, #1
   10c8a:	f145 0500 	adc.w	r5, r5, #0
   10c8e:	1836      	adds	r6, r6, r0
   10c90:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   10c94:	e7e4      	b.n	10c60 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   10c96:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   10c9a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   10c9e:	4293      	cmp	r3, r2
   10ca0:	eb71 0e00 	sbcs.w	lr, r1, r0
   10ca4:	da1f      	bge.n	10ce6 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   10ca6:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   10ca8:	f8dc 3004 	ldr.w	r3, [ip, #4]
   10cac:	eb60 0001 	sbc.w	r0, r0, r1
   10cb0:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   10cb4:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   10cb8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   10cba:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   10cbe:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10cc0:	42b3      	cmp	r3, r6
   10cc2:	d00b      	beq.n	10cdc <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   10cc4:	429c      	cmp	r4, r3
   10cc6:	d109      	bne.n	10cdc <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   10cc8:	f7ff ff5c 	bl	10b84 <next_timeout>

			if (next_time == 0 ||
   10ccc:	b118      	cbz	r0, 10cd6 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   10cce:	4b0d      	ldr	r3, [pc, #52]	; (10d04 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   10cd0:	691b      	ldr	r3, [r3, #16]
   10cd2:	4283      	cmp	r3, r0
   10cd4:	d002      	beq.n	10cdc <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   10cd6:	2100      	movs	r1, #0
   10cd8:	f7fd fd84 	bl	e7e4 <sys_clock_set_timeout>
	__asm__ volatile(
   10cdc:	f387 8811 	msr	BASEPRI, r7
   10ce0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   10ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   10ce6:	1a9b      	subs	r3, r3, r2
   10ce8:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   10cec:	45ac      	cmp	ip, r5
   10cee:	e9c4 3104 	strd	r3, r1, [r4, #16]
   10cf2:	d0c2      	beq.n	10c7a <z_add_timeout+0x6e>
   10cf4:	f8dc c000 	ldr.w	ip, [ip]
   10cf8:	e7bc      	b.n	10c74 <z_add_timeout+0x68>
   10cfa:	bf00      	nop
   10cfc:	20001470 	.word	0x20001470
   10d00:	2000046c 	.word	0x2000046c
   10d04:	2000168c 	.word	0x2000168c

00010d08 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   10d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10d0c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   10d0e:	f7ff fcbd 	bl	1068c <z_time_slice>
	__asm__ volatile(
   10d12:	f04f 0340 	mov.w	r3, #64	; 0x40
   10d16:	f3ef 8611 	mrs	r6, BASEPRI
   10d1a:	f383 8812 	msr	BASEPRI_MAX, r3
   10d1e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   10d22:	4f23      	ldr	r7, [pc, #140]	; (10db0 <sys_clock_announce+0xa8>)
	return list->head == list;
   10d24:	f8df 808c 	ldr.w	r8, [pc, #140]	; 10db4 <sys_clock_announce+0xac>
   10d28:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   10d2c:	4a22      	ldr	r2, [pc, #136]	; (10db8 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
   10d2e:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10d30:	4540      	cmp	r0, r8
		curr_tick += dt;
   10d32:	e9d2 3e00 	ldrd	r3, lr, [r2]
   10d36:	ea4f 71e4 	mov.w	r1, r4, asr #31
   10d3a:	d00b      	beq.n	10d54 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   10d3c:	b150      	cbz	r0, 10d54 <sys_clock_announce+0x4c>
   10d3e:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   10d42:	42ac      	cmp	r4, r5
   10d44:	eb71 090c 	sbcs.w	r9, r1, ip
   10d48:	da16      	bge.n	10d78 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   10d4a:	1b2d      	subs	r5, r5, r4
   10d4c:	eb6c 0c01 	sbc.w	ip, ip, r1
   10d50:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   10d54:	18e3      	adds	r3, r4, r3
   10d56:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   10d5a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   10d5c:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   10d60:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   10d62:	f7ff ff0f 	bl	10b84 <next_timeout>
   10d66:	4621      	mov	r1, r4
   10d68:	f7fd fd3c 	bl	e7e4 <sys_clock_set_timeout>
	__asm__ volatile(
   10d6c:	f386 8811 	msr	BASEPRI, r6
   10d70:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   10d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   10d78:	18eb      	adds	r3, r5, r3
   10d7a:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   10d7e:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   10d82:	2200      	movs	r2, #0
   10d84:	2300      	movs	r3, #0
   10d86:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   10d8a:	f7ff ff23 	bl	10bd4 <remove_timeout>
   10d8e:	f386 8811 	msr	BASEPRI, r6
   10d92:	f3bf 8f6f 	isb	sy
		t->fn(t);
   10d96:	6883      	ldr	r3, [r0, #8]
   10d98:	4798      	blx	r3
	__asm__ volatile(
   10d9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   10d9e:	f3ef 8611 	mrs	r6, BASEPRI
   10da2:	f383 8812 	msr	BASEPRI_MAX, r3
   10da6:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   10daa:	683c      	ldr	r4, [r7, #0]
   10dac:	1b64      	subs	r4, r4, r5
   10dae:	e7bb      	b.n	10d28 <sys_clock_announce+0x20>
   10db0:	200016c8 	.word	0x200016c8
   10db4:	2000046c 	.word	0x2000046c
   10db8:	20001470 	.word	0x20001470

00010dbc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   10dbc:	b510      	push	{r4, lr}
   10dbe:	f04f 0340 	mov.w	r3, #64	; 0x40
   10dc2:	f3ef 8411 	mrs	r4, BASEPRI
   10dc6:	f383 8812 	msr	BASEPRI_MAX, r3
   10dca:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   10dce:	f7ff fecf 	bl	10b70 <elapsed>
   10dd2:	4a06      	ldr	r2, [pc, #24]	; (10dec <sys_clock_tick_get+0x30>)
   10dd4:	4603      	mov	r3, r0
   10dd6:	e9d2 0100 	ldrd	r0, r1, [r2]
   10dda:	1818      	adds	r0, r3, r0
   10ddc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   10de0:	f384 8811 	msr	BASEPRI, r4
   10de4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   10de8:	bd10      	pop	{r4, pc}
   10dea:	bf00      	nop
   10dec:	20001470 	.word	0x20001470

00010df0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   10df0:	b570      	push	{r4, r5, r6, lr}
   10df2:	4604      	mov	r4, r0
	__asm__ volatile(
   10df4:	f04f 0340 	mov.w	r3, #64	; 0x40
   10df8:	f3ef 8511 	mrs	r5, BASEPRI
   10dfc:	f383 8812 	msr	BASEPRI_MAX, r3
   10e00:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   10e04:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   10e08:	3301      	adds	r3, #1
   10e0a:	f142 0200 	adc.w	r2, r2, #0
   10e0e:	2b02      	cmp	r3, #2
   10e10:	f172 0200 	sbcs.w	r2, r2, #0
   10e14:	d322      	bcc.n	10e5c <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   10e16:	f001 fdd5 	bl	129c4 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   10e1a:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   10e1e:	3001      	adds	r0, #1
   10e20:	f141 0100 	adc.w	r1, r1, #0
   10e24:	18c0      	adds	r0, r0, r3
   10e26:	eb41 0102 	adc.w	r1, r1, r2
   10e2a:	2801      	cmp	r0, #1
   10e2c:	f171 0100 	sbcs.w	r1, r1, #0
   10e30:	db32      	blt.n	10e98 <z_timer_expiration_handler+0xa8>
   10e32:	f001 fdc7 	bl	129c4 <z_impl_k_uptime_ticks>
   10e36:	3001      	adds	r0, #1
   10e38:	f141 0300 	adc.w	r3, r1, #0
   10e3c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   10e40:	1880      	adds	r0, r0, r2
   10e42:	f06f 0201 	mvn.w	r2, #1
   10e46:	eb43 0301 	adc.w	r3, r3, r1
   10e4a:	1a12      	subs	r2, r2, r0
   10e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10e50:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10e54:	491a      	ldr	r1, [pc, #104]	; (10ec0 <z_timer_expiration_handler+0xd0>)
   10e56:	4620      	mov	r0, r4
   10e58:	f7ff fed8 	bl	10c0c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   10e5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10e5e:	3301      	adds	r3, #1
   10e60:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   10e62:	6a23      	ldr	r3, [r4, #32]
   10e64:	b173      	cbz	r3, 10e84 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   10e66:	f385 8811 	msr	BASEPRI, r5
   10e6a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   10e6e:	6a23      	ldr	r3, [r4, #32]
   10e70:	4620      	mov	r0, r4
   10e72:	4798      	blx	r3
	__asm__ volatile(
   10e74:	f04f 0340 	mov.w	r3, #64	; 0x40
   10e78:	f3ef 8511 	mrs	r5, BASEPRI
   10e7c:	f383 8812 	msr	BASEPRI_MAX, r3
   10e80:	f3bf 8f6f 	isb	sy
	return list->head == list;
   10e84:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10e88:	42a6      	cmp	r6, r4
   10e8a:	d000      	beq.n	10e8e <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   10e8c:	b94e      	cbnz	r6, 10ea2 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   10e8e:	f385 8811 	msr	BASEPRI, r5
   10e92:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   10e96:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   10e98:	f06f 0201 	mvn.w	r2, #1
   10e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10ea0:	e7d8      	b.n	10e54 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   10ea2:	4630      	mov	r0, r6
   10ea4:	f001 fca8 	bl	127f8 <z_unpend_thread_no_timeout>
   10ea8:	2300      	movs	r3, #0
   10eaa:	67f3      	str	r3, [r6, #124]	; 0x7c
   10eac:	f385 8811 	msr	BASEPRI, r5
   10eb0:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   10eb4:	4630      	mov	r0, r6
}
   10eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   10eba:	f001 bc8d 	b.w	127d8 <z_ready_thread>
   10ebe:	bf00      	nop
   10ec0:	00010df1 	.word	0x00010df1

00010ec4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   10ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   10ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10ecc:	bf08      	it	eq
   10ece:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   10ed2:	4605      	mov	r5, r0
   10ed4:	4614      	mov	r4, r2
   10ed6:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   10eda:	4619      	mov	r1, r3
   10edc:	4691      	mov	r9, r2
   10ede:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   10ee0:	d037      	beq.n	10f52 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   10ee2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   10ee6:	bf08      	it	eq
   10ee8:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   10eec:	4637      	mov	r7, r6
   10eee:	4682      	mov	sl, r0
   10ef0:	d011      	beq.n	10f16 <z_impl_k_timer_start+0x52>
   10ef2:	ea50 0306 	orrs.w	r3, r0, r6
   10ef6:	d00e      	beq.n	10f16 <z_impl_k_timer_start+0x52>
   10ef8:	1c72      	adds	r2, r6, #1
   10efa:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
   10efe:	db0a      	blt.n	10f16 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   10f00:	2e02      	cmp	r6, #2
   10f02:	4684      	mov	ip, r0
   10f04:	f170 0000 	sbcs.w	r0, r0, #0
   10f08:	bfbc      	itt	lt
   10f0a:	2702      	movlt	r7, #2
   10f0c:	f04f 0c00 	movlt.w	ip, #0
   10f10:	3f01      	subs	r7, #1
   10f12:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   10f16:	1c63      	adds	r3, r4, #1
   10f18:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   10f1c:	db0a      	blt.n	10f34 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   10f1e:	2c01      	cmp	r4, #1
   10f20:	f171 0300 	sbcs.w	r3, r1, #0
   10f24:	4622      	mov	r2, r4
   10f26:	bfbc      	itt	lt
   10f28:	2201      	movlt	r2, #1
   10f2a:	2100      	movlt	r1, #0
   10f2c:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   10f30:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   10f34:	4628      	mov	r0, r5
   10f36:	f001 fcff 	bl	12938 <z_abort_timeout>
	timer->period = period;
   10f3a:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   10f3e:	2300      	movs	r3, #0
   10f40:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10f42:	464a      	mov	r2, r9
   10f44:	4643      	mov	r3, r8
   10f46:	4628      	mov	r0, r5
   10f48:	4903      	ldr	r1, [pc, #12]	; (10f58 <z_impl_k_timer_start+0x94>)
		     duration);
}
   10f4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10f4e:	f7ff be5d 	b.w	10c0c <z_add_timeout>
}
   10f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10f56:	bf00      	nop
   10f58:	00010df1 	.word	0x00010df1

00010f5c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   10f5c:	b538      	push	{r3, r4, r5, lr}
   10f5e:	4603      	mov	r3, r0
	__asm__ volatile(
   10f60:	f04f 0240 	mov.w	r2, #64	; 0x40
   10f64:	f3ef 8511 	mrs	r5, BASEPRI
   10f68:	f382 8812 	msr	BASEPRI_MAX, r2
   10f6c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   10f70:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   10f72:	2101      	movs	r1, #1
   10f74:	6081      	str	r1, [r0, #8]
	return list->head == list;
   10f76:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   10f78:	4283      	cmp	r3, r0
   10f7a:	d106      	bne.n	10f8a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   10f7c:	f385 8811 	msr	BASEPRI, r5
   10f80:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   10f84:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   10f86:	4620      	mov	r0, r4
   10f88:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   10f8a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   10f8e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   10f90:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10f92:	2300      	movs	r3, #0
	node->prev = NULL;
   10f94:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   10f98:	f001 fd59 	bl	12a4e <signal_poll_event>
	z_reschedule(&lock, key);
   10f9c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   10f9e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   10fa0:	4801      	ldr	r0, [pc, #4]	; (10fa8 <z_impl_k_poll_signal_raise+0x4c>)
   10fa2:	f7ff fc19 	bl	107d8 <z_reschedule>
	return rc;
   10fa6:	e7ee      	b.n	10f86 <z_impl_k_poll_signal_raise+0x2a>
   10fa8:	20001b99 	.word	0x20001b99

00010fac <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   10fac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10fae:	4606      	mov	r6, r0
   10fb0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   10fb2:	f001 fa0d 	bl	123d0 <k_is_in_isr>
   10fb6:	b978      	cbnz	r0, 10fd8 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   10fb8:	4b0b      	ldr	r3, [pc, #44]	; (10fe8 <z_thread_aligned_alloc+0x3c>)
   10fba:	689b      	ldr	r3, [r3, #8]
   10fbc:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   10fbe:	b17c      	cbz	r4, 10fe0 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   10fc0:	1d2a      	adds	r2, r5, #4
   10fc2:	d209      	bcs.n	10fd8 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   10fc4:	2000      	movs	r0, #0
   10fc6:	2100      	movs	r1, #0
   10fc8:	e9cd 0100 	strd	r0, r1, [sp]
   10fcc:	f046 0104 	orr.w	r1, r6, #4
   10fd0:	4620      	mov	r0, r4
   10fd2:	f001 f993 	bl	122fc <k_heap_aligned_alloc>
	if (mem == NULL) {
   10fd6:	b908      	cbnz	r0, 10fdc <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   10fd8:	2400      	movs	r4, #0
	}

	return ret;
   10fda:	e001      	b.n	10fe0 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   10fdc:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   10fde:	1d04      	adds	r4, r0, #4
}
   10fe0:	4620      	mov	r0, r4
   10fe2:	b002      	add	sp, #8
   10fe4:	bd70      	pop	{r4, r5, r6, pc}
   10fe6:	bf00      	nop
   10fe8:	2000168c 	.word	0x2000168c

00010fec <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   10fec:	4801      	ldr	r0, [pc, #4]	; (10ff4 <boot_banner+0x8>)
   10fee:	f000 b8ab 	b.w	11148 <printk>
   10ff2:	bf00      	nop
   10ff4:	000131b7 	.word	0x000131b7

00010ff8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   10ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   10ffa:	4b09      	ldr	r3, [pc, #36]	; (11020 <k_sys_work_q_init+0x28>)
   10ffc:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   10ffe:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   11000:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   11002:	9300      	str	r3, [sp, #0]
   11004:	4907      	ldr	r1, [pc, #28]	; (11024 <k_sys_work_q_init+0x2c>)
   11006:	4808      	ldr	r0, [pc, #32]	; (11028 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   11008:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1100c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11010:	f44f 6200 	mov.w	r2, #2048	; 0x800
   11014:	f7ff f9cc 	bl	103b0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   11018:	4620      	mov	r0, r4
   1101a:	b004      	add	sp, #16
   1101c:	bd10      	pop	{r4, pc}
   1101e:	bf00      	nop
   11020:	000131e5 	.word	0x000131e5
   11024:	20002dc0 	.word	0x20002dc0
   11028:	20001478 	.word	0x20001478

0001102c <gpio_pin_configure_dt>:
{
   1102c:	b4f0      	push	{r4, r5, r6, r7}
   1102e:	4603      	mov	r3, r0
   11030:	460a      	mov	r2, r1
				  spec->pin,
   11032:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   11034:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
   11036:	6800      	ldr	r0, [r0, #0]
   11038:	4313      	orrs	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1103a:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
   1103c:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
   1103e:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   11040:	d506      	bpl.n	11050 <gpio_pin_configure_dt+0x24>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   11042:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   11046:	d003      	beq.n	11050 <gpio_pin_configure_dt+0x24>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   11048:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1104a:	bf48      	it	mi
   1104c:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11050:	6834      	ldr	r4, [r6, #0]
   11052:	2501      	movs	r5, #1
   11054:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   11056:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1105a:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1105c:	bf4c      	ite	mi
   1105e:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11060:	43ac      	bicpl	r4, r5
   11062:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   11064:	683b      	ldr	r3, [r7, #0]
}
   11066:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   11068:	4718      	bx	r3

0001106a <gpio_pin_get>:
{
   1106a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1106c:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
   1106e:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
   11070:	6883      	ldr	r3, [r0, #8]
   11072:	a901      	add	r1, sp, #4
   11074:	685b      	ldr	r3, [r3, #4]
   11076:	4798      	blx	r3
	if (ret == 0) {
   11078:	b948      	cbnz	r0, 1108e <gpio_pin_get+0x24>
		*value ^= data->invert;
   1107a:	9b01      	ldr	r3, [sp, #4]
   1107c:	682a      	ldr	r2, [r5, #0]
   1107e:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   11080:	2301      	movs	r3, #1
   11082:	fa03 f104 	lsl.w	r1, r3, r4
   11086:	420a      	tst	r2, r1
   11088:	bf14      	ite	ne
   1108a:	4618      	movne	r0, r3
   1108c:	2000      	moveq	r0, #0
}
   1108e:	b003      	add	sp, #12
   11090:	bd30      	pop	{r4, r5, pc}

00011092 <z_impl_gpio_pin_interrupt_configure.constprop.0>:
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
   11092:	b410      	push	{r4}
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   11094:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
   11096:	6882      	ldr	r2, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   11098:	6824      	ldr	r4, [r4, #0]
   1109a:	2301      	movs	r3, #1
   1109c:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1109e:	4223      	tst	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
   110a0:	6994      	ldr	r4, [r2, #24]
   110a2:	bf18      	it	ne
   110a4:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
   110a8:	46a4      	mov	ip, r4
   110aa:	bf08      	it	eq
   110ac:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
}
   110b0:	bc10      	pop	{r4}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   110b2:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   110b6:	4760      	bx	ip

000110b8 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   110b8:	4601      	mov	r1, r0
   110ba:	f240 30e7 	movw	r0, #999	; 0x3e7
   110be:	b508      	push	{r3, lr}
   110c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   110c4:	2300      	movs	r3, #0
   110c6:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   110ca:	1449      	asrs	r1, r1, #17
   110cc:	f7ef fbe2 	bl	894 <__aeabi_uldivmod>
}
   110d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   110d4:	f7ff bca0 	b.w	10a18 <z_impl_k_sleep>

000110d8 <drivingWaitFifoEmpty>:
{
   110d8:	b508      	push	{r3, lr}
    spi_read_write(0x56, 0x17);  // Set BC = IC_STATUS
   110da:	2117      	movs	r1, #23
   110dc:	2056      	movs	r0, #86	; 0x56
   110de:	f7f9 fdd3 	bl	ac88 <spi_read_write>
        uint16_t ic_status_reg = spi_read_write(0xC0, 0x00); // dummy write, get IC_STATUS value
   110e2:	2100      	movs	r1, #0
   110e4:	20c0      	movs	r0, #192	; 0xc0
   110e6:	f7f9 fdcf 	bl	ac88 <spi_read_write>
    while(!fifoempty)
   110ea:	0643      	lsls	r3, r0, #25
   110ec:	d5f9      	bpl.n	110e2 <drivingWaitFifoEmpty+0xa>
}
   110ee:	bd08      	pop	{r3, pc}

000110f0 <snap_measurement_cal>:
{
   110f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	volatile uint8_t adc_readings[4] = {0, 0, 0, 0};
   110f2:	2300      	movs	r3, #0
{
   110f4:	4604      	mov	r4, r0
	volatile uint8_t adc_readings[4] = {0, 0, 0, 0};
   110f6:	9301      	str	r3, [sp, #4]
   110f8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		get_adc_readings(adc_readings);
   110fc:	a801      	add	r0, sp, #4
   110fe:	f7f9 fe63 	bl	adc8 <get_adc_readings>
		if (adc_readings[1] > max_snap_values[0])
   11102:	f89d 3005 	ldrb.w	r3, [sp, #5]
   11106:	7822      	ldrb	r2, [r4, #0]
   11108:	429a      	cmp	r2, r3
			max_snap_values[0] = adc_readings[1];
   1110a:	bf38      	it	cc
   1110c:	f89d 3005 	ldrbcc.w	r3, [sp, #5]
		if (adc_readings[2] > max_snap_values[1])
   11110:	7862      	ldrb	r2, [r4, #1]
			max_snap_values[0] = adc_readings[1];
   11112:	bf38      	it	cc
   11114:	7023      	strbcc	r3, [r4, #0]
		if (adc_readings[2] > max_snap_values[1])
   11116:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1111a:	429a      	cmp	r2, r3
			max_snap_values[1] = adc_readings[2];
   1111c:	bf38      	it	cc
   1111e:	f89d 3006 	ldrbcc.w	r3, [sp, #6]
		if (adc_readings[3] > max_snap_values[2])
   11122:	78a2      	ldrb	r2, [r4, #2]
			max_snap_values[1] = adc_readings[2];
   11124:	bf38      	it	cc
   11126:	7063      	strbcc	r3, [r4, #1]
		if (adc_readings[3] > max_snap_values[2])
   11128:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1112c:	429a      	cmp	r2, r3
			max_snap_values[2] = adc_readings[3];
   1112e:	bf3c      	itt	cc
   11130:	f89d 3007 	ldrbcc.w	r3, [sp, #7]
   11134:	70a3      	strbcc	r3, [r4, #2]
		k_msleep(1);
   11136:	2001      	movs	r0, #1
   11138:	f7ff ffbe 	bl	110b8 <k_msleep.isra.0>
	for (int a  = 0; a < 1000; a++)
   1113c:	3d01      	subs	r5, #1
   1113e:	d1dd      	bne.n	110fc <snap_measurement_cal+0xc>
}
   11140:	b003      	add	sp, #12
   11142:	bd30      	pop	{r4, r5, pc}

00011144 <arch_printk_char_out>:
}
   11144:	2000      	movs	r0, #0
   11146:	4770      	bx	lr

00011148 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   11148:	b40f      	push	{r0, r1, r2, r3}
   1114a:	b507      	push	{r0, r1, r2, lr}
   1114c:	a904      	add	r1, sp, #16
   1114e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   11152:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   11154:	f7f9 ff24 	bl	afa0 <vprintk>

	va_end(ap);
}
   11158:	b003      	add	sp, #12
   1115a:	f85d eb04 	ldr.w	lr, [sp], #4
   1115e:	b004      	add	sp, #16
   11160:	4770      	bx	lr

00011162 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   11162:	4604      	mov	r4, r0
   11164:	b508      	push	{r3, lr}
   11166:	4608      	mov	r0, r1
   11168:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1116a:	461a      	mov	r2, r3
   1116c:	47a0      	blx	r4
	return z_impl_z_current_get();
   1116e:	f7ff fc6d 	bl	10a4c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   11172:	f7fb f85f 	bl	c234 <z_impl_k_thread_abort>

00011176 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   11176:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1117a:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1117c:	0840      	lsrs	r0, r0, #1
   1117e:	4770      	bx	lr

00011180 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   11180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11182:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   11184:	f7ff fff7 	bl	11176 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   11188:	fab0 f080 	clz	r0, r0
   1118c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   11190:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   11194:	00ca      	lsls	r2, r1, #3
   11196:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1119a:	1d17      	adds	r7, r2, #4
{
   1119c:	460c      	mov	r4, r1
   1119e:	3206      	adds	r2, #6
   111a0:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   111a2:	b956      	cbnz	r6, 111ba <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   111a4:	2101      	movs	r1, #1
   111a6:	fa01 f000 	lsl.w	r0, r1, r0
   111aa:	68d9      	ldr	r1, [r3, #12]
   111ac:	4301      	orrs	r1, r0
   111ae:	60d9      	str	r1, [r3, #12]
		b->next = c;
   111b0:	f8cc 4010 	str.w	r4, [ip, #16]
   111b4:	53dd      	strh	r5, [r3, r7]
   111b6:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   111b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   111ba:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   111bc:	3104      	adds	r1, #4
   111be:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   111c0:	53d8      	strh	r0, [r3, r7]
   111c2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   111c6:	529e      	strh	r6, [r3, r2]
   111c8:	80c5      	strh	r5, [r0, #6]
   111ca:	525d      	strh	r5, [r3, r1]
   111cc:	e7f4      	b.n	111b8 <free_list_add+0x38>

000111ce <free_list_remove_bidx>:
{
   111ce:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   111d0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   111d4:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   111d6:	4299      	cmp	r1, r3
   111d8:	f102 0104 	add.w	r1, r2, #4
   111dc:	d10a      	bne.n	111f4 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   111de:	2301      	movs	r3, #1
   111e0:	fa03 f202 	lsl.w	r2, r3, r2
   111e4:	68c3      	ldr	r3, [r0, #12]
   111e6:	ea23 0302 	bic.w	r3, r3, r2
   111ea:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   111ec:	2300      	movs	r3, #0
   111ee:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   111f2:	bd10      	pop	{r4, pc}
   111f4:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   111f6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   111fa:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   111fe:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   11202:	80cb      	strh	r3, [r1, #6]
   11204:	8082      	strh	r2, [r0, #4]
}
   11206:	e7f4      	b.n	111f2 <free_list_remove_bidx+0x24>

00011208 <free_list_remove>:
{
   11208:	b508      	push	{r3, lr}
   1120a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1120c:	f7ff ffb3 	bl	11176 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   11210:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   11214:	f1c2 021f 	rsb	r2, r2, #31
   11218:	4618      	mov	r0, r3
}
   1121a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1121e:	f7ff bfd6 	b.w	111ce <free_list_remove_bidx>

00011222 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   11222:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11226:	fab1 f581 	clz	r5, r1
   1122a:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1122e:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   11232:	4603      	mov	r3, r0
	if (b->next) {
   11234:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   11238:	460e      	mov	r6, r1
	if (b->next) {
   1123a:	b1c2      	cbz	r2, 1126e <alloc_chunk+0x4c>
   1123c:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1123e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   11242:	4618      	mov	r0, r3
   11244:	4621      	mov	r1, r4
   11246:	f7ff ff96 	bl	11176 <chunk_size>
   1124a:	42b0      	cmp	r0, r6
   1124c:	d306      	bcc.n	1125c <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1124e:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   11250:	4618      	mov	r0, r3
   11252:	f7ff ffbc 	bl	111ce <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   11256:	4620      	mov	r0, r4
   11258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1125c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   11260:	3f01      	subs	r7, #1
   11262:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   11264:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   11268:	d001      	beq.n	1126e <alloc_chunk+0x4c>
   1126a:	4282      	cmp	r2, r0
   1126c:	d1e7      	bne.n	1123e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1126e:	f1c5 0220 	rsb	r2, r5, #32
   11272:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11276:	4094      	lsls	r4, r2
   11278:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1127a:	4014      	ands	r4, r2
   1127c:	d0eb      	beq.n	11256 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1127e:	fa94 f2a4 	rbit	r2, r4
   11282:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   11286:	1d11      	adds	r1, r2, #4
   11288:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1128c:	4621      	mov	r1, r4
   1128e:	e7df      	b.n	11250 <alloc_chunk+0x2e>

00011290 <merge_chunks>:
{
   11290:	b538      	push	{r3, r4, r5, lr}
   11292:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   11294:	f7ff ff6f 	bl	11176 <chunk_size>
{
   11298:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1129a:	4604      	mov	r4, r0
   1129c:	4611      	mov	r1, r2
   1129e:	4618      	mov	r0, r3
   112a0:	f7ff ff69 	bl	11176 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   112a4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   112a8:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   112aa:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   112ac:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   112ae:	4618      	mov	r0, r3
   112b0:	f7ff ff61 	bl	11176 <chunk_size>
	void *cmem = &buf[c];
   112b4:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   112b6:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   112ba:	bd38      	pop	{r3, r4, r5, pc}

000112bc <split_chunks>:
{
   112bc:	b538      	push	{r3, r4, r5, lr}
   112be:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   112c0:	f7ff ff59 	bl	11176 <chunk_size>
{
   112c4:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   112c6:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   112c8:	1a51      	subs	r1, r2, r1
   112ca:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   112ce:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   112d0:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   112d2:	8060      	strh	r0, [r4, #2]
   112d4:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   112d8:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   112da:	8044      	strh	r4, [r0, #2]
   112dc:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   112e0:	4618      	mov	r0, r3
   112e2:	4611      	mov	r1, r2
   112e4:	f7ff ff47 	bl	11176 <chunk_size>
	void *cmem = &buf[c];
   112e8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   112ea:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   112ee:	bd38      	pop	{r3, r4, r5, pc}

000112f0 <free_chunk>:
{
   112f0:	b538      	push	{r3, r4, r5, lr}
   112f2:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   112f4:	f7ff ff3f 	bl	11176 <chunk_size>
   112f8:	460c      	mov	r4, r1
   112fa:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   112fc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   11300:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   11302:	07da      	lsls	r2, r3, #31
   11304:	d40a      	bmi.n	1131c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   11306:	4628      	mov	r0, r5
   11308:	f7ff ff7e 	bl	11208 <free_list_remove>
	return c + chunk_size(h, c);
   1130c:	4621      	mov	r1, r4
   1130e:	4628      	mov	r0, r5
   11310:	f7ff ff31 	bl	11176 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   11314:	1822      	adds	r2, r4, r0
   11316:	4628      	mov	r0, r5
   11318:	f7ff ffba 	bl	11290 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1131c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   11320:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   11322:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   11326:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   11328:	07db      	lsls	r3, r3, #31
   1132a:	d40c      	bmi.n	11346 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1132c:	4628      	mov	r0, r5
   1132e:	f7ff ff6b 	bl	11208 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   11332:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   11336:	4622      	mov	r2, r4
   11338:	1a61      	subs	r1, r4, r1
   1133a:	4628      	mov	r0, r5
   1133c:	f7ff ffa8 	bl	11290 <merge_chunks>
   11340:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   11344:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   11346:	4621      	mov	r1, r4
   11348:	4628      	mov	r0, r5
}
   1134a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1134e:	f7ff bf17 	b.w	11180 <free_list_add>

00011352 <sys_heap_free>:
	if (mem == NULL) {
   11352:	b161      	cbz	r1, 1136e <sys_heap_free+0x1c>
   11354:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11356:	3904      	subs	r1, #4
   11358:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1135a:	f021 0307 	bic.w	r3, r1, #7
   1135e:	4403      	add	r3, r0
	free_chunk(h, c);
   11360:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   11362:	885a      	ldrh	r2, [r3, #2]
   11364:	f022 0201 	bic.w	r2, r2, #1
   11368:	805a      	strh	r2, [r3, #2]
   1136a:	f7ff bfc1 	b.w	112f0 <free_chunk>
}
   1136e:	4770      	bx	lr

00011370 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   11370:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   11372:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   11374:	b909      	cbnz	r1, 1137a <sys_heap_alloc+0xa>
		return NULL;
   11376:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   11378:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1137a:	68ab      	ldr	r3, [r5, #8]
   1137c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   11380:	d9f9      	bls.n	11376 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11382:	310b      	adds	r1, #11
   11384:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   11386:	4621      	mov	r1, r4
   11388:	4628      	mov	r0, r5
   1138a:	f7ff ff4a 	bl	11222 <alloc_chunk>
	if (c == 0U) {
   1138e:	4606      	mov	r6, r0
   11390:	2800      	cmp	r0, #0
   11392:	d0f0      	beq.n	11376 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   11394:	4601      	mov	r1, r0
   11396:	4628      	mov	r0, r5
   11398:	f7ff feed 	bl	11176 <chunk_size>
   1139c:	42a0      	cmp	r0, r4
   1139e:	d907      	bls.n	113b0 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   113a0:	1932      	adds	r2, r6, r4
   113a2:	4628      	mov	r0, r5
   113a4:	f7ff ff8a 	bl	112bc <split_chunks>
		free_list_add(h, c + chunk_sz);
   113a8:	4611      	mov	r1, r2
   113aa:	4628      	mov	r0, r5
   113ac:	f7ff fee8 	bl	11180 <free_list_add>
	void *cmem = &buf[c];
   113b0:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   113b4:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   113b6:	8853      	ldrh	r3, [r2, #2]
   113b8:	f043 0301 	orr.w	r3, r3, #1
   113bc:	8053      	strh	r3, [r2, #2]
   113be:	3004      	adds	r0, #4
	return mem;
   113c0:	e7da      	b.n	11378 <sys_heap_alloc+0x8>

000113c2 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   113c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   113c6:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   113ca:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   113ce:	6806      	ldr	r6, [r0, #0]
{
   113d0:	460f      	mov	r7, r1
   113d2:	4614      	mov	r4, r2
	if (align != rew) {
   113d4:	d00c      	beq.n	113f0 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   113d6:	424b      	negs	r3, r1
   113d8:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   113da:	2b04      	cmp	r3, #4
   113dc:	461a      	mov	r2, r3
   113de:	464f      	mov	r7, r9
   113e0:	bf28      	it	cs
   113e2:	2204      	movcs	r2, #4
	rew = align & -align;
   113e4:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   113e6:	b964      	cbnz	r4, 11402 <sys_heap_aligned_alloc+0x40>
		return NULL;
   113e8:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   113ea:	4628      	mov	r0, r5
   113ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   113f0:	2904      	cmp	r1, #4
   113f2:	d804      	bhi.n	113fe <sys_heap_aligned_alloc+0x3c>
}
   113f4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   113f8:	4611      	mov	r1, r2
   113fa:	f7ff bfb9 	b.w	11370 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   113fe:	2204      	movs	r2, #4
   11400:	e7f1      	b.n	113e6 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   11402:	68b3      	ldr	r3, [r6, #8]
   11404:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   11408:	d9ee      	bls.n	113e8 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1140a:	f104 010b 	add.w	r1, r4, #11
   1140e:	4439      	add	r1, r7
   11410:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   11412:	08c9      	lsrs	r1, r1, #3
   11414:	4630      	mov	r0, r6
   11416:	f7ff ff04 	bl	11222 <alloc_chunk>
	if (c0 == 0) {
   1141a:	4680      	mov	r8, r0
   1141c:	2800      	cmp	r0, #0
   1141e:	d0e3      	beq.n	113e8 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   11420:	f109 0504 	add.w	r5, r9, #4
   11424:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   11428:	1e7b      	subs	r3, r7, #1
   1142a:	4435      	add	r5, r6
   1142c:	441d      	add	r5, r3
   1142e:	427f      	negs	r7, r7
   11430:	403d      	ands	r5, r7
   11432:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11436:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11438:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1143a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1143c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1143e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   11442:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   11444:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11448:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1144c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   11450:	d208      	bcs.n	11464 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   11452:	4601      	mov	r1, r0
   11454:	463a      	mov	r2, r7
   11456:	4630      	mov	r0, r6
   11458:	f7ff ff30 	bl	112bc <split_chunks>
		free_list_add(h, c0);
   1145c:	4641      	mov	r1, r8
   1145e:	4630      	mov	r0, r6
   11460:	f7ff fe8e 	bl	11180 <free_list_add>
	return c + chunk_size(h, c);
   11464:	4639      	mov	r1, r7
   11466:	4630      	mov	r0, r6
   11468:	f7ff fe85 	bl	11176 <chunk_size>
   1146c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1146e:	4284      	cmp	r4, r0
   11470:	d207      	bcs.n	11482 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   11472:	4630      	mov	r0, r6
   11474:	4622      	mov	r2, r4
   11476:	f7ff ff21 	bl	112bc <split_chunks>
		free_list_add(h, c_end);
   1147a:	4621      	mov	r1, r4
   1147c:	4630      	mov	r0, r6
   1147e:	f7ff fe7f 	bl	11180 <free_list_add>
	void *cmem = &buf[c];
   11482:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11486:	8873      	ldrh	r3, [r6, #2]
   11488:	f043 0301 	orr.w	r3, r3, #1
   1148c:	8073      	strh	r3, [r6, #2]
   1148e:	e7ac      	b.n	113ea <sys_heap_aligned_alloc+0x28>

00011490 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   11490:	3a04      	subs	r2, #4
{
   11492:	b4f0      	push	{r4, r5, r6, r7}
   11494:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11496:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11498:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1149a:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1149e:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   114a2:	1a0e      	subs	r6, r1, r0
   114a4:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   114a6:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   114a8:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   114ac:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   114ae:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   114b2:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   114b4:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   114b6:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   114b8:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   114bc:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   114be:	f1c2 0220 	rsb	r2, r2, #32
   114c2:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   114c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   114c8:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   114cc:	4294      	cmp	r4, r2
   114ce:	d1fb      	bne.n	114c8 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   114d0:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   114d2:	f042 0201 	orr.w	r2, r2, #1
   114d6:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   114d8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   114dc:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   114de:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   114e0:	8007      	strh	r7, [r0, #0]
   114e2:	8065      	strh	r5, [r4, #2]
   114e4:	1984      	adds	r4, r0, r6
   114e6:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   114ea:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   114ee:	8067      	strh	r7, [r4, #2]
   114f0:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   114f2:	885a      	ldrh	r2, [r3, #2]
   114f4:	f042 0201 	orr.w	r2, r2, #1
   114f8:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   114fa:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   114fc:	f7ff be40 	b.w	11180 <free_list_add>

00011500 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11500:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   11502:	f013 0307 	ands.w	r3, r3, #7
   11506:	d105      	bne.n	11514 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   11508:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1150a:	2b00      	cmp	r3, #0
   1150c:	bf0c      	ite	eq
   1150e:	2000      	moveq	r0, #0
   11510:	2003      	movne	r0, #3
   11512:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   11514:	2b02      	cmp	r3, #2
   11516:	d105      	bne.n	11524 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   11518:	8bc0      	ldrh	r0, [r0, #30]
   1151a:	fab0 f080 	clz	r0, r0
   1151e:	0940      	lsrs	r0, r0, #5
   11520:	0080      	lsls	r0, r0, #2
   11522:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   11524:	2b01      	cmp	r3, #1
   11526:	d105      	bne.n	11534 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   11528:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1152a:	2b00      	cmp	r3, #0
   1152c:	bf0c      	ite	eq
   1152e:	2000      	moveq	r0, #0
   11530:	2005      	movne	r0, #5
   11532:	4770      	bx	lr
	int evt = EVT_NOP;
   11534:	2000      	movs	r0, #0
}
   11536:	4770      	bx	lr

00011538 <validate_args>:
{
   11538:	b510      	push	{r4, lr}
   1153a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1153c:	b100      	cbz	r0, 11540 <validate_args+0x8>
   1153e:	b911      	cbnz	r1, 11546 <validate_args+0xe>
		return -EINVAL;
   11540:	f06f 0015 	mvn.w	r0, #21
}
   11544:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   11546:	1d08      	adds	r0, r1, #4
   11548:	f000 f895 	bl	11676 <sys_notify_validate>
	if ((rv == 0)
   1154c:	2800      	cmp	r0, #0
   1154e:	d1f9      	bne.n	11544 <validate_args+0xc>
	    && ((cli->notify.flags
   11550:	68a3      	ldr	r3, [r4, #8]
   11552:	2b03      	cmp	r3, #3
   11554:	d9f6      	bls.n	11544 <validate_args+0xc>
   11556:	e7f3      	b.n	11540 <validate_args+0x8>

00011558 <notify_one>:
{
   11558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1155c:	460d      	mov	r5, r1
   1155e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   11560:	4619      	mov	r1, r3
   11562:	1d28      	adds	r0, r5, #4
{
   11564:	4690      	mov	r8, r2
   11566:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   11568:	f000 f899 	bl	1169e <sys_notify_finalize>
	if (cb) {
   1156c:	4604      	mov	r4, r0
   1156e:	b138      	cbz	r0, 11580 <notify_one+0x28>
		cb(mgr, cli, state, res);
   11570:	4633      	mov	r3, r6
   11572:	4642      	mov	r2, r8
   11574:	4629      	mov	r1, r5
   11576:	4638      	mov	r0, r7
   11578:	46a4      	mov	ip, r4
}
   1157a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1157e:	4760      	bx	ip
}
   11580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011584 <transition_complete>:
{
   11584:	b410      	push	{r4}
	__asm__ volatile(
   11586:	f04f 0440 	mov.w	r4, #64	; 0x40
   1158a:	f3ef 8211 	mrs	r2, BASEPRI
   1158e:	f384 8812 	msr	BASEPRI_MAX, r4
   11592:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   11596:	6181      	str	r1, [r0, #24]
}
   11598:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1159a:	2101      	movs	r1, #1
   1159c:	f7f9 bd0e 	b.w	afbc <process_event>

000115a0 <onoff_manager_init>:
{
   115a0:	b538      	push	{r3, r4, r5, lr}
   115a2:	460c      	mov	r4, r1
	if ((mgr == NULL)
   115a4:	4605      	mov	r5, r0
   115a6:	b158      	cbz	r0, 115c0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   115a8:	b151      	cbz	r1, 115c0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   115aa:	680b      	ldr	r3, [r1, #0]
   115ac:	b143      	cbz	r3, 115c0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   115ae:	684b      	ldr	r3, [r1, #4]
   115b0:	b133      	cbz	r3, 115c0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   115b2:	2220      	movs	r2, #32
   115b4:	2100      	movs	r1, #0
   115b6:	f001 fad8 	bl	12b6a <memset>
   115ba:	612c      	str	r4, [r5, #16]
	return 0;
   115bc:	2000      	movs	r0, #0
}
   115be:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   115c0:	f06f 0015 	mvn.w	r0, #21
   115c4:	e7fb      	b.n	115be <onoff_manager_init+0x1e>

000115c6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   115c6:	b570      	push	{r4, r5, r6, lr}
   115c8:	4605      	mov	r5, r0
   115ca:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   115cc:	f7ff ffb4 	bl	11538 <validate_args>

	if (rv < 0) {
   115d0:	1e04      	subs	r4, r0, #0
   115d2:	db15      	blt.n	11600 <onoff_request+0x3a>
   115d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   115d8:	f3ef 8211 	mrs	r2, BASEPRI
   115dc:	f383 8812 	msr	BASEPRI_MAX, r3
   115e0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   115e4:	8beb      	ldrh	r3, [r5, #30]
   115e6:	8bac      	ldrh	r4, [r5, #28]
   115e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   115ec:	428b      	cmp	r3, r1
   115ee:	f004 0407 	and.w	r4, r4, #7
   115f2:	d107      	bne.n	11604 <onoff_request+0x3e>
	__asm__ volatile(
   115f4:	f382 8811 	msr	BASEPRI, r2
   115f8:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   115fc:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   11600:	4620      	mov	r0, r4
   11602:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   11604:	2c02      	cmp	r4, #2
   11606:	d10c      	bne.n	11622 <onoff_request+0x5c>
		mgr->refs += 1U;
   11608:	3301      	adds	r3, #1
   1160a:	83eb      	strh	r3, [r5, #30]
   1160c:	f382 8811 	msr	BASEPRI, r2
   11610:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   11614:	2300      	movs	r3, #0
   11616:	4622      	mov	r2, r4
   11618:	4631      	mov	r1, r6
   1161a:	4628      	mov	r0, r5
   1161c:	f7ff ff9c 	bl	11558 <notify_one>
   11620:	e7ee      	b.n	11600 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   11622:	2c06      	cmp	r4, #6
   11624:	d814      	bhi.n	11650 <onoff_request+0x8a>
   11626:	e8df f004 	tbb	[pc, r4]
   1162a:	1304      	.short	0x1304
   1162c:	1a041313 	.word	0x1a041313
   11630:	04          	.byte	0x04
   11631:	00          	.byte	0x00
	parent->next = child;
   11632:	2300      	movs	r3, #0
   11634:	6033      	str	r3, [r6, #0]
	return list->tail;
   11636:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   11638:	b93b      	cbnz	r3, 1164a <onoff_request+0x84>
	list->head = node;
   1163a:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   1163e:	b9ac      	cbnz	r4, 1166c <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   11640:	2102      	movs	r1, #2
   11642:	4628      	mov	r0, r5
   11644:	f7f9 fcba 	bl	afbc <process_event>
   11648:	e7da      	b.n	11600 <onoff_request+0x3a>
	parent->next = child;
   1164a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1164c:	606e      	str	r6, [r5, #4]
}
   1164e:	e7f6      	b.n	1163e <onoff_request+0x78>
   11650:	f382 8811 	msr	BASEPRI, r2
   11654:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   11658:	f06f 0404 	mvn.w	r4, #4
   1165c:	e7d0      	b.n	11600 <onoff_request+0x3a>
   1165e:	f382 8811 	msr	BASEPRI, r2
   11662:	f3bf 8f6f 	isb	sy
   11666:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1166a:	e7c9      	b.n	11600 <onoff_request+0x3a>
   1166c:	f382 8811 	msr	BASEPRI, r2
   11670:	f3bf 8f6f 	isb	sy
		if (notify) {
   11674:	e7c4      	b.n	11600 <onoff_request+0x3a>

00011676 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   11676:	4603      	mov	r3, r0
   11678:	b140      	cbz	r0, 1168c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1167a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1167c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   11680:	2a02      	cmp	r2, #2
   11682:	d006      	beq.n	11692 <sys_notify_validate+0x1c>
   11684:	2a03      	cmp	r2, #3
   11686:	d004      	beq.n	11692 <sys_notify_validate+0x1c>
   11688:	2a01      	cmp	r2, #1
   1168a:	d005      	beq.n	11698 <sys_notify_validate+0x22>
   1168c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   11690:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   11692:	681a      	ldr	r2, [r3, #0]
   11694:	2a00      	cmp	r2, #0
   11696:	d0f9      	beq.n	1168c <sys_notify_validate+0x16>
		notify->result = 0;
   11698:	2000      	movs	r0, #0
   1169a:	6098      	str	r0, [r3, #8]
   1169c:	4770      	bx	lr

0001169e <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1169e:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   116a0:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   116a2:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   116a4:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   116a8:	2a02      	cmp	r2, #2
{
   116aa:	4603      	mov	r3, r0
	switch (method) {
   116ac:	f04f 0400 	mov.w	r4, #0
   116b0:	d007      	beq.n	116c2 <sys_notify_finalize+0x24>
   116b2:	2a03      	cmp	r2, #3
   116b4:	d002      	beq.n	116bc <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   116b6:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   116b8:	2000      	movs	r0, #0
   116ba:	e001      	b.n	116c0 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   116bc:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   116be:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   116c0:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   116c2:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   116c4:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   116c6:	2800      	cmp	r0, #0
   116c8:	d0f6      	beq.n	116b8 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   116ca:	f7ff fc47 	bl	10f5c <z_impl_k_poll_signal_raise>
   116ce:	e7f3      	b.n	116b8 <sys_notify_finalize+0x1a>

000116d0 <outs>:
{
   116d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116d4:	4607      	mov	r7, r0
   116d6:	4688      	mov	r8, r1
   116d8:	4615      	mov	r5, r2
   116da:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   116dc:	4614      	mov	r4, r2
   116de:	42b4      	cmp	r4, r6
   116e0:	d305      	bcc.n	116ee <outs+0x1e>
   116e2:	b10e      	cbz	r6, 116e8 <outs+0x18>
	return (int)count;
   116e4:	1b60      	subs	r0, r4, r5
   116e6:	e008      	b.n	116fa <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   116e8:	7823      	ldrb	r3, [r4, #0]
   116ea:	2b00      	cmp	r3, #0
   116ec:	d0fa      	beq.n	116e4 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   116ee:	f814 0b01 	ldrb.w	r0, [r4], #1
   116f2:	4641      	mov	r1, r8
   116f4:	47b8      	blx	r7
		if (rc < 0) {
   116f6:	2800      	cmp	r0, #0
   116f8:	daf1      	bge.n	116de <outs+0xe>
}
   116fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000116fe <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   116fe:	b40f      	push	{r0, r1, r2, r3}
   11700:	b507      	push	{r0, r1, r2, lr}
   11702:	a904      	add	r1, sp, #16
   11704:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   11708:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1170a:	f7f9 fc49 	bl	afa0 <vprintk>

	va_end(ap);
}
   1170e:	b003      	add	sp, #12
   11710:	f85d eb04 	ldr.w	lr, [sp], #4
   11714:	b004      	add	sp, #16
   11716:	4770      	bx	lr

00011718 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   11718:	4770      	bx	lr

0001171a <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
   1171a:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
   1171c:	f7fa f972 	bl	ba04 <__do_global_ctors_aux>
	__do_init_array_aux();
}
   11720:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__do_init_array_aux();
   11724:	f7fa b960 	b.w	b9e8 <__do_init_array_aux>

00011728 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   11728:	f000 bdc1 	b.w	122ae <z_fatal_error>

0001172c <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1172c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1172e:	6800      	ldr	r0, [r0, #0]
   11730:	f000 bdbd 	b.w	122ae <z_fatal_error>

00011734 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   11734:	2100      	movs	r1, #0
   11736:	2001      	movs	r0, #1
   11738:	f7ff bff6 	b.w	11728 <z_arm_fatal_error>

0001173c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1173c:	b508      	push	{r3, lr}
	handler();
   1173e:	f7fa fb1d 	bl	bd7c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   11742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   11746:	f7fa bbef 	b.w	bf28 <z_arm_exc_exit>

0001174a <malloc_prepare>:
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   1174a:	2000      	movs	r0, #0
   1174c:	4770      	bx	lr

0001174e <nordicsemi_nrf52_init>:
	__asm__ volatile(
   1174e:	f04f 0240 	mov.w	r2, #64	; 0x40
   11752:	f3ef 8311 	mrs	r3, BASEPRI
   11756:	f382 8812 	msr	BASEPRI_MAX, r2
   1175a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1175e:	f383 8811 	msr	BASEPRI, r3
   11762:	f3bf 8f6f 	isb	sy
}
   11766:	2000      	movs	r0, #0
   11768:	4770      	bx	lr

0001176a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1176a:	2806      	cmp	r0, #6
   1176c:	d108      	bne.n	11780 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1176e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11772:	2201      	movs	r2, #1
   11774:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   11778:	f3bf 8f4f 	dsb	sy
        __WFE();
   1177c:	bf20      	wfe
    while (true)
   1177e:	e7fd      	b.n	1177c <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   11780:	4770      	bx	lr

00011782 <pm_state_exit_post_ops>:
   11782:	2300      	movs	r3, #0
   11784:	f383 8811 	msr	BASEPRI, r3
   11788:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1178c:	4770      	bx	lr

0001178e <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1178e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   11790:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   11792:	2106      	movs	r1, #6
{
   11794:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   11796:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1179a:	f7fd fbd7 	bl	ef4c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1179e:	b918      	cbnz	r0, 117a8 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   117a0:	79a3      	ldrb	r3, [r4, #6]
   117a2:	f063 033f 	orn	r3, r3, #63	; 0x3f
   117a6:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   117a8:	bd10      	pop	{r4, pc}

000117aa <hci_vendor_event>:
}
   117aa:	4770      	bx	lr

000117ac <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   117ac:	2101      	movs	r1, #1
   117ae:	3008      	adds	r0, #8
   117b0:	f000 ba1c 	b.w	11bec <net_buf_simple_pull_mem>

000117b4 <handle_event_common.isra.0>:
static int handle_event_common(uint8_t event, struct net_buf *buf,
   117b4:	b430      	push	{r4, r5}
   117b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   117ba:	4604      	mov	r4, r0
   117bc:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   117be:	429a      	cmp	r2, r3
   117c0:	d101      	bne.n	117c6 <handle_event_common.isra.0+0x12>
}
   117c2:	bc30      	pop	{r4, r5}
   117c4:	4770      	bx	lr
		if (handler->event != event) {
   117c6:	4611      	mov	r1, r2
   117c8:	f811 5b08 	ldrb.w	r5, [r1], #8
   117cc:	42a5      	cmp	r5, r4
   117ce:	d106      	bne.n	117de <handle_event_common.isra.0+0x2a>
		if (buf->len < handler->min_len) {
   117d0:	8981      	ldrh	r1, [r0, #12]
   117d2:	7853      	ldrb	r3, [r2, #1]
   117d4:	4299      	cmp	r1, r3
   117d6:	d3f4      	bcc.n	117c2 <handle_event_common.isra.0+0xe>
}
   117d8:	bc30      	pop	{r4, r5}
		handler->handler(buf);
   117da:	6853      	ldr	r3, [r2, #4]
   117dc:	4718      	bx	r3
   117de:	460a      	mov	r2, r1
   117e0:	e7ed      	b.n	117be <handle_event_common.isra.0+0xa>

000117e2 <bt_addr_le_eq>:
 *
 *  @retval #true if the two addresses are equal
 *  @retval #false otherwise
 */
static inline bool bt_addr_le_eq(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
   117e2:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   117e4:	2207      	movs	r2, #7
   117e6:	f001 f9a2 	bl	12b2e <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
}
   117ea:	fab0 f080 	clz	r0, r0
   117ee:	0940      	lsrs	r0, r0, #5
   117f0:	bd08      	pop	{r3, pc}

000117f2 <bt_addr_copy>:
   117f2:	680b      	ldr	r3, [r1, #0]
   117f4:	6003      	str	r3, [r0, #0]
   117f6:	888b      	ldrh	r3, [r1, #4]
   117f8:	8083      	strh	r3, [r0, #4]
 *  @param src Bluetooth device address source buffer.
 */
static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
}
   117fa:	4770      	bx	lr

000117fc <bt_addr_le_copy>:
   117fc:	680b      	ldr	r3, [r1, #0]
   117fe:	6003      	str	r3, [r0, #0]
   11800:	888b      	ldrh	r3, [r1, #4]
   11802:	8083      	strh	r3, [r0, #4]
   11804:	798b      	ldrb	r3, [r1, #6]
   11806:	7183      	strb	r3, [r0, #6]
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
}
   11808:	4770      	bx	lr

0001180a <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   1180a:	b118      	cbz	r0, 11814 <bt_id_set_adv_random_addr+0xa>
   1180c:	b111      	cbz	r1, 11814 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   1180e:	4608      	mov	r0, r1
   11810:	f7fb ba7c 	b.w	cd0c <set_random_address>
}
   11814:	f06f 0015 	mvn.w	r0, #21
   11818:	4770      	bx	lr

0001181a <bt_id_set_adv_private_addr>:
{
   1181a:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   1181c:	4604      	mov	r4, r0
   1181e:	b180      	cbz	r0, 11842 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   11820:	2106      	movs	r1, #6
   11822:	4668      	mov	r0, sp
   11824:	f7fd fb92 	bl	ef4c <bt_rand>
	if (err) {
   11828:	b948      	cbnz	r0, 1183e <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   1182a:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1182e:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   11830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   11834:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   11836:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1183a:	f7ff ffe6 	bl	1180a <bt_id_set_adv_random_addr>
}
   1183e:	b002      	add	sp, #8
   11840:	bd10      	pop	{r4, pc}
		return -EINVAL;
   11842:	f06f 0015 	mvn.w	r0, #21
   11846:	e7fa      	b.n	1183e <bt_id_set_adv_private_addr+0x24>

00011848 <bt_id_adv_random_addr_check>:
}
   11848:	3800      	subs	r0, #0
   1184a:	bf18      	it	ne
   1184c:	2001      	movne	r0, #1
   1184e:	4770      	bx	lr

00011850 <get_adv_channel_map>:
{
   11850:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   11852:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   11856:	bf0c      	ite	eq
   11858:	2007      	moveq	r0, #7
   1185a:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1185c:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1185e:	bf48      	it	mi
   11860:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   11864:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   11866:	bf48      	it	mi
   11868:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1186c:	4770      	bx	lr

0001186e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1186e:	f3bf 8f5b 	dmb	ish
   11872:	6800      	ldr	r0, [r0, #0]
   11874:	f3bf 8f5b 	dmb	ish
}
   11878:	4770      	bx	lr

0001187a <atomic_and>:
{
   1187a:	b510      	push	{r4, lr}
   1187c:	4603      	mov	r3, r0
}
   1187e:	f3bf 8f5b 	dmb	ish
   11882:	e853 0f00 	ldrex	r0, [r3]
   11886:	ea00 0201 	and.w	r2, r0, r1
   1188a:	e843 2400 	strex	r4, r2, [r3]
   1188e:	2c00      	cmp	r4, #0
   11890:	d1f7      	bne.n	11882 <atomic_and+0x8>
   11892:	f3bf 8f5b 	dmb	ish
   11896:	bd10      	pop	{r4, pc}

00011898 <bt_addr_le_copy>:
   11898:	680b      	ldr	r3, [r1, #0]
   1189a:	6003      	str	r3, [r0, #0]
   1189c:	888b      	ldrh	r3, [r1, #4]
   1189e:	8083      	strh	r3, [r0, #4]
   118a0:	798b      	ldrb	r3, [r1, #6]
   118a2:	7183      	strb	r3, [r0, #6]
   118a4:	4770      	bx	lr

000118a6 <hci_set_ad>:
{
   118a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118aa:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   118ac:	2120      	movs	r1, #32
{
   118ae:	9000      	str	r0, [sp, #0]
   118b0:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   118b2:	f7fa ff1f 	bl	c6f4 <bt_hci_cmd_create>
	if (!buf) {
   118b6:	4605      	mov	r5, r0
   118b8:	2800      	cmp	r0, #0
   118ba:	d050      	beq.n	1195e <hci_set_ad+0xb8>
	return net_buf_simple_add(&buf->b, len);
   118bc:	2120      	movs	r1, #32
   118be:	3008      	adds	r0, #8
   118c0:	f000 f97d 	bl	11bbe <net_buf_simple_add>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   118c4:	2220      	movs	r2, #32
   118c6:	2100      	movs	r1, #0
   118c8:	4681      	mov	r9, r0
   118ca:	f001 f94e 	bl	12b6a <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   118ce:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   118d2:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   118d6:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   118d8:	f8d4 8000 	ldr.w	r8, [r4]
   118dc:	2300      	movs	r3, #0
   118de:	6862      	ldr	r2, [r4, #4]
   118e0:	4293      	cmp	r3, r2
   118e2:	d30c      	bcc.n	118fe <hci_set_ad+0x58>
	for (size_t i = 0; i < ad_len; i++) {
   118e4:	3408      	adds	r4, #8
   118e6:	45a2      	cmp	sl, r4
   118e8:	d1f6      	bne.n	118d8 <hci_set_ad+0x32>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   118ea:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   118ec:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   118f0:	2200      	movs	r2, #0
   118f2:	4629      	mov	r1, r5
}
   118f4:	b003      	add	sp, #12
   118f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   118fa:	f7fa bf35 	b.w	c768 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   118fe:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   11902:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   11906:	1cb0      	adds	r0, r6, #2
   11908:	1811      	adds	r1, r2, r0
   1190a:	291f      	cmp	r1, #31
   1190c:	d908      	bls.n	11920 <hci_set_ad+0x7a>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1190e:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   11912:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   11916:	d11a      	bne.n	1194e <hci_set_ad+0xa8>
   11918:	2a00      	cmp	r2, #0
   1191a:	dd18      	ble.n	1194e <hci_set_ad+0xa8>
				type = BT_DATA_NAME_SHORTENED;
   1191c:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   11920:	b2d7      	uxtb	r7, r2
   11922:	1c79      	adds	r1, r7, #1
   11924:	f80b 1006 	strb.w	r1, [fp, r6]
   11928:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   1192a:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1192c:	fa5b f080 	uxtab	r0, fp, r0
   11930:	f80b c001 	strb.w	ip, [fp, r1]
   11934:	f8d8 1004 	ldr.w	r1, [r8, #4]
   11938:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1193a:	3702      	adds	r7, #2
   1193c:	f001 f907 	bl	12b4e <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   11940:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   11942:	4437      	add	r7, r6
   11944:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   11946:	3301      	adds	r3, #1
   11948:	f108 0808 	add.w	r8, r8, #8
   1194c:	e7c7      	b.n	118de <hci_set_ad+0x38>
		net_buf_unref(buf);
   1194e:	4628      	mov	r0, r5
   11950:	f7fb fdb2 	bl	d4b8 <net_buf_unref>
		return err;
   11954:	f06f 0015 	mvn.w	r0, #21
}
   11958:	b003      	add	sp, #12
   1195a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
   1195e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11962:	e7f9      	b.n	11958 <hci_set_ad+0xb2>

00011964 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   11964:	2301      	movs	r3, #1
{
   11966:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   11968:	fa03 f101 	lsl.w	r1, r3, r1
{
   1196c:	4604      	mov	r4, r0
	if (val) {
   1196e:	b162      	cbz	r2, 1198a <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11970:	f3bf 8f5b 	dmb	ish
   11974:	e854 3f00 	ldrex	r3, [r4]
   11978:	430b      	orrs	r3, r1
   1197a:	e844 3200 	strex	r2, r3, [r4]
   1197e:	2a00      	cmp	r2, #0
   11980:	d1f8      	bne.n	11974 <atomic_set_bit_to+0x10>
   11982:	f3bf 8f5b 	dmb	ish
	}
}
   11986:	bc10      	pop	{r4}
   11988:	4770      	bx	lr
   1198a:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1198c:	43c9      	mvns	r1, r1
   1198e:	f7ff bf74 	b.w	1187a <atomic_and>

00011992 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   11992:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11996:	b087      	sub	sp, #28
   11998:	4605      	mov	r5, r0
   1199a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1199e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   119a2:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   119a6:	460c      	mov	r4, r1
   119a8:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   119aa:	2100      	movs	r1, #0
   119ac:	2210      	movs	r2, #16
   119ae:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   119b0:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   119b2:	f001 f8da 	bl	12b6a <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   119b6:	b9ee      	cbnz	r6, 119f4 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   119b8:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   119bc:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   119be:	a902      	add	r1, sp, #8
   119c0:	f242 0008 	movw	r0, #8200	; 0x2008
   119c4:	f7ff ff6f 	bl	118a6 <hci_set_ad>
		if (err) {
   119c8:	4604      	mov	r4, r0
   119ca:	b978      	cbnz	r0, 119ec <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   119cc:	f1ba 0f00 	cmp.w	sl, #0
   119d0:	d13e      	bne.n	11a50 <le_adv_update.constprop.0+0xbe>
   119d2:	3510      	adds	r5, #16
   119d4:	f3bf 8f5b 	dmb	ish
   119d8:	e855 3f00 	ldrex	r3, [r5]
   119dc:	f043 0304 	orr.w	r3, r3, #4
   119e0:	e845 3200 	strex	r2, r3, [r5]
   119e4:	2a00      	cmp	r2, #0
   119e6:	d1f7      	bne.n	119d8 <le_adv_update.constprop.0+0x46>
   119e8:	f3bf 8f5b 	dmb	ish
}
   119ec:	4620      	mov	r0, r4
   119ee:	b007      	add	sp, #28
   119f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   119f4:	f7fb f940 	bl	cc78 <bt_get_name>
   119f8:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   119fa:	b9e4      	cbnz	r4, 11a36 <le_adv_update.constprop.0+0xa4>
   119fc:	bb37      	cbnz	r7, 11a4c <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   119fe:	4658      	mov	r0, fp
   11a00:	f7f6 fbd2 	bl	81a8 <strlen>
   11a04:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   11a06:	2e01      	cmp	r6, #1
		d[0].data = ad;
   11a08:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   11a0c:	f88d 3000 	strb.w	r3, [sp]
   11a10:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   11a14:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   11a18:	d1d0      	bne.n	119bc <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   11a1a:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   11a1e:	9605      	str	r6, [sp, #20]
			d_len = 2;
   11a20:	2202      	movs	r2, #2
   11a22:	e7cc      	b.n	119be <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   11a24:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   11a28:	3a08      	subs	r2, #8
   11a2a:	2a01      	cmp	r2, #1
   11a2c:	d925      	bls.n	11a7a <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   11a2e:	3301      	adds	r3, #1
   11a30:	4598      	cmp	r8, r3
   11a32:	d1f7      	bne.n	11a24 <le_adv_update.constprop.0+0x92>
   11a34:	e7e2      	b.n	119fc <le_adv_update.constprop.0+0x6a>
   11a36:	2300      	movs	r3, #0
   11a38:	e7fa      	b.n	11a30 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   11a3a:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   11a3e:	3a08      	subs	r2, #8
   11a40:	2a01      	cmp	r2, #1
   11a42:	d91a      	bls.n	11a7a <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   11a44:	3301      	adds	r3, #1
   11a46:	4599      	cmp	r9, r3
   11a48:	d1f7      	bne.n	11a3a <le_adv_update.constprop.0+0xa8>
   11a4a:	e7d8      	b.n	119fe <le_adv_update.constprop.0+0x6c>
   11a4c:	2300      	movs	r3, #0
   11a4e:	e7fa      	b.n	11a46 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   11a50:	2e02      	cmp	r6, #2
   11a52:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   11a56:	bf08      	it	eq
   11a58:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   11a5a:	a902      	add	r1, sp, #8
			d_len = 2;
   11a5c:	bf08      	it	eq
   11a5e:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   11a60:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   11a64:	bf08      	it	eq
   11a66:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   11a6a:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   11a6e:	f7ff ff1a 	bl	118a6 <hci_set_ad>
		if (err) {
   11a72:	2800      	cmp	r0, #0
   11a74:	d0ad      	beq.n	119d2 <le_adv_update.constprop.0+0x40>
   11a76:	4604      	mov	r4, r0
   11a78:	e7b8      	b.n	119ec <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   11a7a:	f06f 0415 	mvn.w	r4, #21
   11a7e:	e7b5      	b.n	119ec <le_adv_update.constprop.0+0x5a>

00011a80 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   11a80:	6843      	ldr	r3, [r0, #4]
   11a82:	f013 0008 	ands.w	r0, r3, #8
   11a86:	d00a      	beq.n	11a9e <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   11a88:	035a      	lsls	r2, r3, #13
   11a8a:	d407      	bmi.n	11a9c <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   11a8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   11a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   11a94:	bf14      	ite	ne
   11a96:	2002      	movne	r0, #2
   11a98:	2001      	moveq	r0, #1
   11a9a:	4770      	bx	lr
   11a9c:	2001      	movs	r0, #1
}
   11a9e:	4770      	bx	lr

00011aa0 <bt_le_adv_set_enable_legacy>:
{
   11aa0:	b570      	push	{r4, r5, r6, lr}
   11aa2:	4606      	mov	r6, r0
   11aa4:	b086      	sub	sp, #24
   11aa6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   11aa8:	f242 000a 	movw	r0, #8202	; 0x200a
   11aac:	2101      	movs	r1, #1
   11aae:	f7fa fe21 	bl	c6f4 <bt_hci_cmd_create>
	if (!buf) {
   11ab2:	4604      	mov	r4, r0
   11ab4:	b1b0      	cbz	r0, 11ae4 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   11ab6:	3008      	adds	r0, #8
	if (enable) {
   11ab8:	b195      	cbz	r5, 11ae0 <bt_le_adv_set_enable_legacy+0x40>
   11aba:	2101      	movs	r1, #1
   11abc:	f000 f88e 	bl	11bdc <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   11ac0:	f106 0210 	add.w	r2, r6, #16
   11ac4:	a903      	add	r1, sp, #12
   11ac6:	4620      	mov	r0, r4
   11ac8:	9500      	str	r5, [sp, #0]
   11aca:	2307      	movs	r3, #7
   11acc:	f7fa fe00 	bl	c6d0 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   11ad0:	2200      	movs	r2, #0
   11ad2:	4621      	mov	r1, r4
   11ad4:	f242 000a 	movw	r0, #8202	; 0x200a
   11ad8:	f7fa fe46 	bl	c768 <bt_hci_cmd_send_sync>
}
   11adc:	b006      	add	sp, #24
   11ade:	bd70      	pop	{r4, r5, r6, pc}
   11ae0:	4629      	mov	r1, r5
   11ae2:	e7eb      	b.n	11abc <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   11ae4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11ae8:	e7f8      	b.n	11adc <bt_le_adv_set_enable_legacy+0x3c>

00011aea <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   11aea:	3018      	adds	r0, #24
   11aec:	f000 be04 	b.w	126f8 <k_work_cancel_delayable>

00011af0 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   11af0:	f7fb bbfe 	b.w	d2f0 <bt_le_adv_stop>

00011af4 <fixed_data_unref>:
}
   11af4:	4770      	bx	lr

00011af6 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   11af6:	6a81      	ldr	r1, [r0, #40]	; 0x28
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   11af8:	6849      	ldr	r1, [r1, #4]
   11afa:	6809      	ldr	r1, [r1, #0]
   11afc:	f7fb bc46 	b.w	d38c <net_buf_alloc_len>

00011b00 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   11b00:	6883      	ldr	r3, [r0, #8]
   11b02:	440b      	add	r3, r1
   11b04:	6003      	str	r3, [r0, #0]
}
   11b06:	4770      	bx	lr

00011b08 <net_buf_slist_put>:
{
   11b08:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   11b0a:	460b      	mov	r3, r1
   11b0c:	681c      	ldr	r4, [r3, #0]
   11b0e:	b98c      	cbnz	r4, 11b34 <net_buf_slist_put+0x2c>
	__asm__ volatile(
   11b10:	f04f 0240 	mov.w	r2, #64	; 0x40
   11b14:	f3ef 8411 	mrs	r4, BASEPRI
   11b18:	f382 8812 	msr	BASEPRI_MAX, r2
   11b1c:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   11b20:	b119      	cbz	r1, 11b2a <net_buf_slist_put+0x22>
	return list->tail;
   11b22:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   11b24:	b962      	cbnz	r2, 11b40 <net_buf_slist_put+0x38>
	list->head = node;
   11b26:	6001      	str	r1, [r0, #0]
	list->tail = node;
   11b28:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   11b2a:	f384 8811 	msr	BASEPRI, r4
   11b2e:	f3bf 8f6f 	isb	sy
}
   11b32:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   11b34:	795a      	ldrb	r2, [r3, #5]
   11b36:	f042 0201 	orr.w	r2, r2, #1
   11b3a:	715a      	strb	r2, [r3, #5]
   11b3c:	4623      	mov	r3, r4
   11b3e:	e7e5      	b.n	11b0c <net_buf_slist_put+0x4>
	parent->next = child;
   11b40:	6011      	str	r1, [r2, #0]
}
   11b42:	e7f1      	b.n	11b28 <net_buf_slist_put+0x20>

00011b44 <net_buf_slist_get>:
{
   11b44:	b570      	push	{r4, r5, r6, lr}
   11b46:	4603      	mov	r3, r0
	__asm__ volatile(
   11b48:	f04f 0240 	mov.w	r2, #64	; 0x40
   11b4c:	f3ef 8511 	mrs	r5, BASEPRI
   11b50:	f382 8812 	msr	BASEPRI_MAX, r2
   11b54:	f3bf 8f6f 	isb	sy
	return list->head;
   11b58:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   11b5a:	b158      	cbz	r0, 11b74 <net_buf_slist_get+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11b5c:	6859      	ldr	r1, [r3, #4]
	return node->next;
   11b5e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   11b60:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11b62:	4288      	cmp	r0, r1
	list->tail = node;
   11b64:	bf08      	it	eq
   11b66:	605a      	streq	r2, [r3, #4]
   11b68:	4602      	mov	r2, r0
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   11b6a:	7951      	ldrb	r1, [r2, #5]
   11b6c:	f011 0101 	ands.w	r1, r1, #1
   11b70:	d105      	bne.n	11b7e <net_buf_slist_get+0x3a>
		frag->frags = NULL;
   11b72:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   11b74:	f385 8811 	msr	BASEPRI, r5
   11b78:	f3bf 8f6f 	isb	sy
}
   11b7c:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   11b7e:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET(slist, snode)
   11b80:	b129      	cbz	r1, 11b8e <net_buf_slist_get+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11b82:	685e      	ldr	r6, [r3, #4]
	return node->next;
   11b84:	680c      	ldr	r4, [r1, #0]
	list->head = node;
   11b86:	601c      	str	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11b88:	42b1      	cmp	r1, r6
	list->tail = node;
   11b8a:	bf08      	it	eq
   11b8c:	605c      	streq	r4, [r3, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   11b8e:	7954      	ldrb	r4, [r2, #5]
			frag->frags = (void *)sys_slist_get(list);
   11b90:	6011      	str	r1, [r2, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   11b92:	f024 0401 	bic.w	r4, r4, #1
   11b96:	7154      	strb	r4, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   11b98:	460a      	mov	r2, r1
   11b9a:	e7e6      	b.n	11b6a <net_buf_slist_get+0x26>

00011b9c <net_buf_put>:
{
   11b9c:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   11b9e:	460a      	mov	r2, r1
   11ba0:	6814      	ldr	r4, [r2, #0]
   11ba2:	b914      	cbnz	r4, 11baa <net_buf_put+0xe>
}
   11ba4:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   11ba6:	f000 bcaa 	b.w	124fe <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   11baa:	7953      	ldrb	r3, [r2, #5]
   11bac:	f043 0301 	orr.w	r3, r3, #1
   11bb0:	7153      	strb	r3, [r2, #5]
   11bb2:	4622      	mov	r2, r4
   11bb4:	e7f4      	b.n	11ba0 <net_buf_put+0x4>

00011bb6 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   11bb6:	7902      	ldrb	r2, [r0, #4]
   11bb8:	3201      	adds	r2, #1
   11bba:	7102      	strb	r2, [r0, #4]
	return buf;
}
   11bbc:	4770      	bx	lr

00011bbe <net_buf_simple_add>:
	return buf->data + buf->len;
   11bbe:	8883      	ldrh	r3, [r0, #4]
   11bc0:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   11bc2:	4419      	add	r1, r3
   11bc4:	8081      	strh	r1, [r0, #4]
	return tail;
}
   11bc6:	18d0      	adds	r0, r2, r3
   11bc8:	4770      	bx	lr

00011bca <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   11bca:	b430      	push	{r4, r5}
   11bcc:	8884      	ldrh	r4, [r0, #4]
   11bce:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   11bd0:	18a3      	adds	r3, r4, r2
   11bd2:	8083      	strh	r3, [r0, #4]
   11bd4:	1928      	adds	r0, r5, r4
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   11bd6:	bc30      	pop	{r4, r5}
   11bd8:	f000 bfb9 	b.w	12b4e <memcpy>

00011bdc <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   11bdc:	b510      	push	{r4, lr}
   11bde:	8883      	ldrh	r3, [r0, #4]
   11be0:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   11be2:	1c5c      	adds	r4, r3, #1
   11be4:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   11be6:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   11be8:	18d0      	adds	r0, r2, r3
   11bea:	bd10      	pop	{r4, pc}

00011bec <net_buf_simple_pull_mem>:
	buf->len -= len;
	return buf->data += len;
}

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   11bec:	4603      	mov	r3, r0
	void *data = buf->data;
   11bee:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   11bf0:	889a      	ldrh	r2, [r3, #4]
   11bf2:	1a52      	subs	r2, r2, r1
	buf->data += len;
   11bf4:	4401      	add	r1, r0
	buf->len -= len;
   11bf6:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   11bf8:	6019      	str	r1, [r3, #0]

	return data;
}
   11bfa:	4770      	bx	lr

00011bfc <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   11bfc:	6802      	ldr	r2, [r0, #0]
   11bfe:	6880      	ldr	r0, [r0, #8]
}
   11c00:	1a10      	subs	r0, r2, r0
   11c02:	4770      	bx	lr

00011c04 <adc_context_on_timer_expired>:
{
   11c04:	b410      	push	{r4}
   11c06:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11c08:	3808      	subs	r0, #8
   11c0a:	f3bf 8f5b 	dmb	ish
   11c0e:	e850 2f00 	ldrex	r2, [r0]
   11c12:	1c51      	adds	r1, r2, #1
   11c14:	e840 1400 	strex	r4, r1, [r0]
   11c18:	2c00      	cmp	r4, #0
   11c1a:	d1f8      	bne.n	11c0e <adc_context_on_timer_expired+0xa>
   11c1c:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   11c20:	b912      	cbnz	r2, 11c28 <adc_context_on_timer_expired+0x24>
}
   11c22:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   11c24:	f7fb bc88 	b.w	d538 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   11c28:	f06f 020f 	mvn.w	r2, #15
}
   11c2c:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   11c2e:	669a      	str	r2, [r3, #104]	; 0x68
}
   11c30:	4770      	bx	lr

00011c32 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   11c32:	6903      	ldr	r3, [r0, #16]
   11c34:	b2c9      	uxtb	r1, r1
   11c36:	220c      	movs	r2, #12
   11c38:	fb01 3302 	mla	r3, r1, r2, r3
   11c3c:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   11c3e:	f000 0007 	and.w	r0, r0, #7
   11c42:	4770      	bx	lr

00011c44 <set_on_state>:
	__asm__ volatile(
   11c44:	f04f 0340 	mov.w	r3, #64	; 0x40
   11c48:	f3ef 8211 	mrs	r2, BASEPRI
   11c4c:	f383 8812 	msr	BASEPRI_MAX, r3
   11c50:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   11c54:	6803      	ldr	r3, [r0, #0]
   11c56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   11c5a:	f043 0302 	orr.w	r3, r3, #2
   11c5e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   11c60:	f382 8811 	msr	BASEPRI, r2
   11c64:	f3bf 8f6f 	isb	sy
}
   11c68:	4770      	bx	lr

00011c6a <stop>:
{
   11c6a:	b570      	push	{r4, r5, r6, lr}
   11c6c:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   11c6e:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   11c70:	f04f 0440 	mov.w	r4, #64	; 0x40
   11c74:	f3ef 8511 	mrs	r5, BASEPRI
   11c78:	f384 8812 	msr	BASEPRI_MAX, r4
   11c7c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   11c80:	260c      	movs	r6, #12
   11c82:	fb06 3401 	mla	r4, r6, r1, r3
   11c86:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   11c88:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   11c8c:	d008      	beq.n	11ca0 <stop+0x36>
   11c8e:	42a2      	cmp	r2, r4
   11c90:	d006      	beq.n	11ca0 <stop+0x36>
	__asm__ volatile(
   11c92:	f385 8811 	msr	BASEPRI, r5
   11c96:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   11c9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   11c9e:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   11ca0:	fb06 3301 	mla	r3, r6, r1, r3
   11ca4:	2201      	movs	r2, #1
   11ca6:	649a      	str	r2, [r3, #72]	; 0x48
   11ca8:	f385 8811 	msr	BASEPRI, r5
   11cac:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   11cb0:	6843      	ldr	r3, [r0, #4]
   11cb2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   11cb6:	685b      	ldr	r3, [r3, #4]
   11cb8:	4798      	blx	r3
	return 0;
   11cba:	2000      	movs	r0, #0
   11cbc:	e7ef      	b.n	11c9e <stop+0x34>

00011cbe <api_stop>:
	return stop(dev, subsys, CTX_API);
   11cbe:	2280      	movs	r2, #128	; 0x80
   11cc0:	f7ff bfd3 	b.w	11c6a <stop>

00011cc4 <async_start>:
{
   11cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11cc6:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   11cc8:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   11cca:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   11ccc:	f04f 0540 	mov.w	r5, #64	; 0x40
   11cd0:	f3ef 8611 	mrs	r6, BASEPRI
   11cd4:	f385 8812 	msr	BASEPRI_MAX, r5
   11cd8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   11cdc:	250c      	movs	r5, #12
   11cde:	fb05 4401 	mla	r4, r5, r1, r4
   11ce2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   11ce4:	f005 0c07 	and.w	ip, r5, #7
   11ce8:	f1bc 0f01 	cmp.w	ip, #1
   11cec:	d10c      	bne.n	11d08 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   11cee:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   11cf0:	f386 8811 	msr	BASEPRI, r6
   11cf4:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   11cf8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   11cfc:	6843      	ldr	r3, [r0, #4]
   11cfe:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   11d02:	4798      	blx	r3
	return 0;
   11d04:	2000      	movs	r0, #0
}
   11d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   11d08:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   11d0c:	42af      	cmp	r7, r5
   11d0e:	f386 8811 	msr	BASEPRI, r6
   11d12:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   11d16:	bf0c      	ite	eq
   11d18:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   11d1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   11d20:	e7f1      	b.n	11d06 <async_start+0x42>

00011d22 <api_start>:
{
   11d22:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   11d24:	2480      	movs	r4, #128	; 0x80
   11d26:	9400      	str	r4, [sp, #0]
   11d28:	f7ff ffcc 	bl	11cc4 <async_start>
}
   11d2c:	b002      	add	sp, #8
   11d2e:	bd10      	pop	{r4, pc}

00011d30 <onoff_started_callback>:
	return &data->mgr[type];
   11d30:	6900      	ldr	r0, [r0, #16]
   11d32:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   11d34:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   11d38:	2100      	movs	r1, #0
   11d3a:	4710      	bx	r2

00011d3c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   11d3c:	2000      	movs	r0, #0
   11d3e:	f7fd b979 	b.w	f034 <nrfx_clock_start>

00011d42 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   11d42:	2000      	movs	r0, #0
   11d44:	f000 ba5b 	b.w	121fe <nrfx_clock_stop>

00011d48 <blocking_start_callback>:
{
   11d48:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   11d4a:	f7fe b9ed 	b.w	10128 <z_impl_k_sem_give>

00011d4e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11d4e:	6843      	ldr	r3, [r0, #4]
   11d50:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   11d52:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   11d56:	600b      	str	r3, [r1, #0]
}
   11d58:	2000      	movs	r0, #0
   11d5a:	4770      	bx	lr

00011d5c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11d5c:	6843      	ldr	r3, [r0, #4]
   11d5e:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   11d60:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   11d64:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   11d68:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   11d6c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   11d70:	2000      	movs	r0, #0
   11d72:	4770      	bx	lr

00011d74 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11d74:	6843      	ldr	r3, [r0, #4]
   11d76:	685b      	ldr	r3, [r3, #4]
}
   11d78:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   11d7a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   11d7e:	4770      	bx	lr

00011d80 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11d80:	6843      	ldr	r3, [r0, #4]
   11d82:	685b      	ldr	r3, [r3, #4]
}
   11d84:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   11d86:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   11d8a:	4770      	bx	lr

00011d8c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11d8c:	6843      	ldr	r3, [r0, #4]
   11d8e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   11d90:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   11d94:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   11d98:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   11d9a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   11d9e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   11da2:	2000      	movs	r0, #0
   11da4:	4770      	bx	lr

00011da6 <gpio_nrfx_manage_callback>:
{
   11da6:	b510      	push	{r4, lr}
	return port->data;
   11da8:	6903      	ldr	r3, [r0, #16]
	return list->head;
   11daa:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   11dac:	b1f8      	cbz	r0, 11dee <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11dae:	4288      	cmp	r0, r1
   11db0:	d119      	bne.n	11de6 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   11db2:	689c      	ldr	r4, [r3, #8]
	return node->next;
   11db4:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   11db6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   11db8:	42a1      	cmp	r1, r4
   11dba:	d100      	bne.n	11dbe <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   11dbc:	6098      	str	r0, [r3, #8]
	parent->next = child;
   11dbe:	2000      	movs	r0, #0
   11dc0:	6008      	str	r0, [r1, #0]
	if (set) {
   11dc2:	b12a      	cbz	r2, 11dd0 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   11dc4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   11dc6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   11dc8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   11dca:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   11dcc:	b902      	cbnz	r2, 11dd0 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   11dce:	6099      	str	r1, [r3, #8]
	return 0;
   11dd0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   11dd2:	e010      	b.n	11df6 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11dd4:	4281      	cmp	r1, r0
   11dd6:	d106      	bne.n	11de6 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   11dd8:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   11dda:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   11ddc:	6898      	ldr	r0, [r3, #8]
   11dde:	4281      	cmp	r1, r0
   11de0:	d1ed      	bne.n	11dbe <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   11de2:	609c      	str	r4, [r3, #8]
}
   11de4:	e7eb      	b.n	11dbe <gpio_nrfx_manage_callback+0x18>
	return node->next;
   11de6:	4604      	mov	r4, r0
   11de8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11dea:	2800      	cmp	r0, #0
   11dec:	d1f2      	bne.n	11dd4 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   11dee:	2a00      	cmp	r2, #0
   11df0:	d1e8      	bne.n	11dc4 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   11df2:	f06f 0015 	mvn.w	r0, #21
}
   11df6:	bd10      	pop	{r4, pc}

00011df8 <irq_connect0>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(SPIM(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_SPI_0_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(0);
   11df8:	2200      	movs	r2, #0
   11dfa:	2101      	movs	r1, #1
   11dfc:	2004      	movs	r0, #4
   11dfe:	f7f9 bf95 	b.w	bd2c <z_arm_irq_priority_set>

00011e02 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   11e02:	b510      	push	{r4, lr}
	while (*count) {
   11e04:	680b      	ldr	r3, [r1, #0]
   11e06:	b913      	cbnz	r3, 11e0e <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   11e08:	6013      	str	r3, [r2, #0]
	return NULL;
   11e0a:	4618      	mov	r0, r3
   11e0c:	e005      	b.n	11e1a <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   11e0e:	6803      	ldr	r3, [r0, #0]
   11e10:	685c      	ldr	r4, [r3, #4]
   11e12:	b11c      	cbz	r4, 11e1c <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   11e14:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   11e16:	6803      	ldr	r3, [r0, #0]
   11e18:	6818      	ldr	r0, [r3, #0]
}
   11e1a:	bd10      	pop	{r4, pc}
		++(*current);
   11e1c:	3308      	adds	r3, #8
   11e1e:	6003      	str	r3, [r0, #0]
		--(*count);
   11e20:	680b      	ldr	r3, [r1, #0]
   11e22:	3b01      	subs	r3, #1
   11e24:	600b      	str	r3, [r1, #0]
   11e26:	e7ed      	b.n	11e04 <spi_context_get_next_buf.constprop.0+0x2>

00011e28 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   11e28:	4603      	mov	r3, r0
   11e2a:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
   11e2c:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11e2e:	7919      	ldrb	r1, [r3, #4]
   11e30:	2301      	movs	r3, #1
   11e32:	fa03 f101 	lsl.w	r1, r3, r1
   11e36:	6903      	ldr	r3, [r0, #16]
   11e38:	681b      	ldr	r3, [r3, #0]
   11e3a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   11e3c:	bf18      	it	ne
   11e3e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   11e42:	b112      	cbz	r2, 11e4a <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   11e44:	6883      	ldr	r3, [r0, #8]
   11e46:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   11e48:	4718      	bx	r3
   11e4a:	6883      	ldr	r3, [r0, #8]
   11e4c:	691b      	ldr	r3, [r3, #16]
   11e4e:	e7fb      	b.n	11e48 <gpio_pin_set_dt.isra.0+0x20>

00011e50 <_spi_context_cs_control>:
{
   11e50:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   11e52:	6803      	ldr	r3, [r0, #0]
{
   11e54:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   11e56:	b1e3      	cbz	r3, 11e92 <_spi_context_cs_control+0x42>
   11e58:	6898      	ldr	r0, [r3, #8]
   11e5a:	b1d0      	cbz	r0, 11e92 <_spi_context_cs_control+0x42>
   11e5c:	6805      	ldr	r5, [r0, #0]
   11e5e:	b1c5      	cbz	r5, 11e92 <_spi_context_cs_control+0x42>
		if (on) {
   11e60:	b149      	cbz	r1, 11e76 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   11e62:	2101      	movs	r1, #1
   11e64:	f7ff ffe0 	bl	11e28 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   11e68:	6823      	ldr	r3, [r4, #0]
   11e6a:	689b      	ldr	r3, [r3, #8]
   11e6c:	6898      	ldr	r0, [r3, #8]
}
   11e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   11e72:	f000 bda9 	b.w	129c8 <z_impl_k_busy_wait>
			if (!force_off &&
   11e76:	b912      	cbnz	r2, 11e7e <_spi_context_cs_control+0x2e>
   11e78:	889b      	ldrh	r3, [r3, #4]
   11e7a:	04db      	lsls	r3, r3, #19
   11e7c:	d409      	bmi.n	11e92 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   11e7e:	6880      	ldr	r0, [r0, #8]
   11e80:	f000 fda2 	bl	129c8 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   11e84:	6823      	ldr	r3, [r4, #0]
   11e86:	2100      	movs	r1, #0
   11e88:	6898      	ldr	r0, [r3, #8]
}
   11e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   11e8e:	f7ff bfcb 	b.w	11e28 <gpio_pin_set_dt.isra.0>
}
   11e92:	bd38      	pop	{r3, r4, r5, pc}

00011e94 <spi_context_unlock_unconditionally>:
{
   11e94:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   11e96:	2201      	movs	r2, #1
   11e98:	2100      	movs	r1, #0
{
   11e9a:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   11e9c:	f7ff ffd8 	bl	11e50 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   11ea0:	69a3      	ldr	r3, [r4, #24]
   11ea2:	b933      	cbnz	r3, 11eb2 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   11ea4:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   11ea6:	f104 0010 	add.w	r0, r4, #16
}
   11eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11eae:	f7fe b93b 	b.w	10128 <z_impl_k_sem_give>
   11eb2:	bd10      	pop	{r4, pc}

00011eb4 <spi_nrfx_release>:
{
   11eb4:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   11eb6:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   11eb8:	6803      	ldr	r3, [r0, #0]
   11eba:	428b      	cmp	r3, r1
   11ebc:	d106      	bne.n	11ecc <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   11ebe:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   11ec2:	b934      	cbnz	r4, 11ed2 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   11ec4:	f7ff ffe6 	bl	11e94 <spi_context_unlock_unconditionally>
	return 0;
   11ec8:	4620      	mov	r0, r4
}
   11eca:	bd10      	pop	{r4, pc}
		return -EINVAL;
   11ecc:	f06f 0015 	mvn.w	r0, #21
   11ed0:	e7fb      	b.n	11eca <spi_nrfx_release+0x16>
		return -EBUSY;
   11ed2:	f06f 000f 	mvn.w	r0, #15
   11ed6:	e7f8      	b.n	11eca <spi_nrfx_release+0x16>

00011ed8 <spi_nrfx_init>:
{
   11ed8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   11edc:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   11ede:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   11ee0:	6a66      	ldr	r6, [r4, #36]	; 0x24
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   11ee2:	aa01      	add	r2, sp, #4
   11ee4:	2100      	movs	r1, #0
   11ee6:	4630      	mov	r0, r6
   11ee8:	f000 f8a1 	bl	1202e <pinctrl_lookup_state>
	if (ret < 0) {
   11eec:	2800      	cmp	r0, #0
   11eee:	db43      	blt.n	11f78 <spi_nrfx_init+0xa0>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   11ef0:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   11ef2:	6832      	ldr	r2, [r6, #0]
   11ef4:	7919      	ldrb	r1, [r3, #4]
   11ef6:	6818      	ldr	r0, [r3, #0]
   11ef8:	f000 f8af 	bl	1205a <pinctrl_configure_pins>
	if (err < 0) {
   11efc:	2800      	cmp	r0, #0
   11efe:	db3b      	blt.n	11f78 <spi_nrfx_init+0xa0>
	dev_config->irq_connect();
   11f00:	6a23      	ldr	r3, [r4, #32]
   11f02:	4798      	blx	r3
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   11f04:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11f06:	2601      	movs	r6, #1
   11f08:	3408      	adds	r4, #8
   11f0a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   11f0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11f12:	f1a4 0208 	sub.w	r2, r4, #8
   11f16:	4293      	cmp	r3, r2
   11f18:	d804      	bhi.n	11f24 <spi_nrfx_init+0x4c>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   11f1a:	4628      	mov	r0, r5
   11f1c:	f7ff ffba 	bl	11e94 <spi_context_unlock_unconditionally>
	return 0;
   11f20:	2000      	movs	r0, #0
	return 0;
   11f22:	e029      	b.n	11f78 <spi_nrfx_init+0xa0>
		if (!device_is_ready(cs_gpio->port)) {
   11f24:	f854 0c08 	ldr.w	r0, [r4, #-8]
   11f28:	f000 f9b6 	bl	12298 <z_device_is_ready>
   11f2c:	b338      	cbz	r0, 11f7e <spi_nrfx_init+0xa6>
	return gpio_pin_configure(spec->port,
   11f2e:	f854 0c08 	ldr.w	r0, [r4, #-8]
				  spec->pin,
   11f32:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
   11f36:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
   11f3a:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   11f3e:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11f42:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   11f46:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   11f48:	bf54      	ite	pl
   11f4a:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   11f4e:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   11f52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11f56:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   11f5a:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11f5c:	bf4c      	ite	mi
   11f5e:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11f62:	ea27 070e 	bicpl.w	r7, r7, lr
   11f66:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
   11f6a:	f8d8 3000 	ldr.w	r3, [r8]
   11f6e:	4798      	blx	r3
		if (ret < 0) {
   11f70:	2800      	cmp	r0, #0
   11f72:	f104 0408 	add.w	r4, r4, #8
   11f76:	dac8      	bge.n	11f0a <spi_nrfx_init+0x32>
}
   11f78:	b002      	add	sp, #8
   11f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
   11f7e:	f06f 0012 	mvn.w	r0, #18
	if (err < 0) {
   11f82:	e7f9      	b.n	11f78 <spi_nrfx_init+0xa0>

00011f84 <event_handler>:
{
   11f84:	b538      	push	{r3, r4, r5, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   11f86:	7803      	ldrb	r3, [r0, #0]
{
   11f88:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   11f8a:	2b00      	cmp	r3, #0
   11f8c:	d13c      	bne.n	12008 <event_handler+0x84>
	if (!ctx->tx_len) {
   11f8e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   11f90:	6e8d      	ldr	r5, [r1, #104]	; 0x68
   11f92:	b193      	cbz	r3, 11fba <event_handler+0x36>
	if (len > ctx->tx_len) {
   11f94:	429d      	cmp	r5, r3
   11f96:	d810      	bhi.n	11fba <event_handler+0x36>
	ctx->tx_len -= len;
   11f98:	1b5b      	subs	r3, r3, r5
   11f9a:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   11f9c:	bb43      	cbnz	r3, 11ff0 <event_handler+0x6c>
		++ctx->current_tx;
   11f9e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   11fa0:	3308      	adds	r3, #8
   11fa2:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   11fa4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   11fa6:	3b01      	subs	r3, #1
   11fa8:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   11faa:	f101 0258 	add.w	r2, r1, #88	; 0x58
   11fae:	f104 0044 	add.w	r0, r4, #68	; 0x44
   11fb2:	3148      	adds	r1, #72	; 0x48
   11fb4:	f7ff ff25 	bl	11e02 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   11fb8:	6560      	str	r0, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
   11fba:	6e23      	ldr	r3, [r4, #96]	; 0x60
   11fbc:	b19b      	cbz	r3, 11fe6 <event_handler+0x62>
	if (len > ctx->rx_len) {
   11fbe:	429d      	cmp	r5, r3
   11fc0:	d811      	bhi.n	11fe6 <event_handler+0x62>
	ctx->rx_len -= len;
   11fc2:	1b5b      	subs	r3, r3, r5
   11fc4:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   11fc6:	b9cb      	cbnz	r3, 11ffc <event_handler+0x78>
		++ctx->current_rx;
   11fc8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   11fca:	3308      	adds	r3, #8
   11fcc:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   11fce:	6d23      	ldr	r3, [r4, #80]	; 0x50
   11fd0:	3b01      	subs	r3, #1
   11fd2:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   11fd4:	f104 0260 	add.w	r2, r4, #96	; 0x60
   11fd8:	f104 0150 	add.w	r1, r4, #80	; 0x50
   11fdc:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   11fe0:	f7ff ff0f 	bl	11e02 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   11fe4:	65e0      	str	r0, [r4, #92]	; 0x5c
		transfer_next_chunk(dev_data->dev);
   11fe6:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   11fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		transfer_next_chunk(dev_data->dev);
   11fec:	f7fb bf24 	b.w	de38 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   11ff0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   11ff2:	2b00      	cmp	r3, #0
   11ff4:	d0e1      	beq.n	11fba <event_handler+0x36>
		ctx->tx_buf += dfs * len;
   11ff6:	442b      	add	r3, r5
   11ff8:	654b      	str	r3, [r1, #84]	; 0x54
   11ffa:	e7de      	b.n	11fba <event_handler+0x36>
	} else if (ctx->rx_buf) {
   11ffc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   11ffe:	2b00      	cmp	r3, #0
   12000:	d0f1      	beq.n	11fe6 <event_handler+0x62>
		ctx->rx_buf += dfs * len;
   12002:	442b      	add	r3, r5
   12004:	65e3      	str	r3, [r4, #92]	; 0x5c
   12006:	e7ee      	b.n	11fe6 <event_handler+0x62>
}
   12008:	bd38      	pop	{r3, r4, r5, pc}

0001200a <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   1200a:	2000      	movs	r0, #0
   1200c:	4770      	bx	lr

0001200e <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   1200e:	b538      	push	{r3, r4, r5, lr}
   12010:	460c      	mov	r4, r1
   12012:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   12014:	f7fa fe24 	bl	cc60 <bt_is_ready>
   12018:	b128      	cbz	r0, 12026 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   1201a:	4629      	mov	r1, r5
   1201c:	4620      	mov	r0, r4
}
   1201e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   12022:	f7fa bd3f 	b.w	caa4 <bt_hci_le_rand>
}
   12026:	f06f 000a 	mvn.w	r0, #10
   1202a:	bd38      	pop	{r3, r4, r5, pc}

0001202c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1202c:	4770      	bx	lr

0001202e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1202e:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
   12030:	6843      	ldr	r3, [r0, #4]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   12032:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
   12036:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   12038:	7a05      	ldrb	r5, [r0, #8]
   1203a:	6844      	ldr	r4, [r0, #4]
   1203c:	4435      	add	r5, r6
   1203e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   12042:	42a3      	cmp	r3, r4
   12044:	d902      	bls.n	1204c <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
   12046:	f06f 0001 	mvn.w	r0, #1
}
   1204a:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   1204c:	795c      	ldrb	r4, [r3, #5]
   1204e:	428c      	cmp	r4, r1
   12050:	d001      	beq.n	12056 <pinctrl_lookup_state+0x28>
		(*state)++;
   12052:	3308      	adds	r3, #8
   12054:	e7ef      	b.n	12036 <pinctrl_lookup_state+0x8>
			return 0;
   12056:	2000      	movs	r0, #0
   12058:	e7f7      	b.n	1204a <pinctrl_lookup_state+0x1c>

0001205a <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1205a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1205e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   12062:	2701      	movs	r7, #1
    p_reg->OUTCLR = clr_mask;
   12064:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   12068:	4281      	cmp	r1, r0
   1206a:	d102      	bne.n	12072 <pinctrl_configure_pins+0x18>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1206c:	2000      	movs	r0, #0
}
   1206e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   12072:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   12074:	f005 047f 	and.w	r4, r5, #127	; 0x7f
			pin = 0xFFFFFFFFU;
   12078:	2c7f      	cmp	r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1207a:	f3c5 2343 	ubfx	r3, r5, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
   1207e:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   12082:	bf08      	it	eq
   12084:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
   12088:	2d05      	cmp	r5, #5
   1208a:	d00f      	beq.n	120ac <pinctrl_configure_pins+0x52>
   1208c:	2d06      	cmp	r5, #6
   1208e:	d011      	beq.n	120b4 <pinctrl_configure_pins+0x5a>
   12090:	2d04      	cmp	r5, #4
   12092:	d12f      	bne.n	120f4 <pinctrl_configure_pins+0x9a>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   12094:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   12098:	2500      	movs	r5, #0
    *p_pin = pin_number & 0x1F;
   1209a:	f004 0c1f 	and.w	ip, r4, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1209e:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   120a2:	f8c6 c50c 	str.w	ip, [r6, #1292]	; 0x50c
}
   120a6:	f04f 0c01 	mov.w	ip, #1
   120aa:	e007      	b.n	120bc <pinctrl_configure_pins+0x62>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   120ac:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   120b0:	2501      	movs	r5, #1
   120b2:	e7f2      	b.n	1209a <pinctrl_configure_pins+0x40>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   120b4:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, MISO) = pin;
   120b6:	f8c2 4510 	str.w	r4, [r2, #1296]	; 0x510
			dir = NRF_GPIO_PIN_DIR_INPUT;
   120ba:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   120bc:	f850 eb04 	ldr.w	lr, [r0], #4
   120c0:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   120c4:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   120c8:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   120cc:	ea4f 2303 	mov.w	r3, r3, lsl #8
   120d0:	bf18      	it	ne
   120d2:	f04f 0c00 	movne.w	ip, #0
    *p_pin = pin_number & 0x1F;
   120d6:	f004 041f 	and.w	r4, r4, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   120da:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
   120de:	bf18      	it	ne
   120e0:	2501      	movne	r5, #1
   120e2:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
   120e6:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   120ea:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   120ee:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   120f2:	e7b9      	b.n	12068 <pinctrl_configure_pins+0xe>
		switch (NRF_GET_FUN(pins[i])) {
   120f4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   120f8:	e7b9      	b.n	1206e <pinctrl_configure_pins+0x14>

000120fa <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   120fa:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   120fc:	2000      	movs	r0, #0
   120fe:	f7fa f977 	bl	c3f0 <sys_arch_reboot>

00012102 <sdc_assertion_handler>:
	k_oops();
   12102:	4040      	eors	r0, r0
   12104:	f380 8811 	msr	BASEPRI, r0
   12108:	f04f 0003 	mov.w	r0, #3
   1210c:	df02      	svc	2
}
   1210e:	4770      	bx	lr

00012110 <hci_driver_close>:
{
   12110:	b510      	push	{r4, lr}
	err = MULTITHREADING_LOCK_ACQUIRE();
   12112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12116:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1211a:	f7fc fb9f 	bl	e85c <multithreading_lock_acquire>
	if (err) {
   1211e:	4604      	mov	r4, r0
   12120:	b920      	cbnz	r0, 1212c <hci_driver_close+0x1c>
	err = sdc_disable();
   12122:	f7f2 f8e3 	bl	42ec <sdc_disable>
	if (err) {
   12126:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   12128:	f7fc fba0 	bl	e86c <multithreading_lock_release>
}
   1212c:	4620      	mov	r0, r4
   1212e:	bd10      	pop	{r4, pc}

00012130 <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   12130:	f7fc bc3a 	b.w	e9a8 <rand_prio_low_vector_get>

00012134 <hci_driver_send>:
{
   12134:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   12136:	8983      	ldrh	r3, [r0, #12]
{
   12138:	4605      	mov	r5, r0
	if (!buf->len) {
   1213a:	b1bb      	cbz	r3, 1216c <hci_driver_send+0x38>
	switch (type) {
   1213c:	7d03      	ldrb	r3, [r0, #20]
   1213e:	b9ab      	cbnz	r3, 1216c <hci_driver_send+0x38>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   12140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12148:	f7fc fb88 	bl	e85c <multithreading_lock_acquire>
	if (!errcode) {
   1214c:	4604      	mov	r4, r0
   1214e:	b958      	cbnz	r0, 12168 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   12150:	68a8      	ldr	r0, [r5, #8]
   12152:	f7fc fca5 	bl	eaa0 <hci_internal_cmd_put>
   12156:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   12158:	f7fc fb88 	bl	e86c <multithreading_lock_release>
	if (errcode) {
   1215c:	b924      	cbnz	r4, 12168 <hci_driver_send+0x34>
	receive_signal_raise();
   1215e:	f7fc fc37 	bl	e9d0 <receive_signal_raise>
		net_buf_unref(buf);
   12162:	4628      	mov	r0, r5
   12164:	f7fb f9a8 	bl	d4b8 <net_buf_unref>
}
   12168:	4620      	mov	r0, r4
   1216a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1216c:	f06f 0415 	mvn.w	r4, #21
   12170:	e7fa      	b.n	12168 <hci_driver_send+0x34>

00012172 <receive_work_handler>:
	hci_driver_receive_process();
   12172:	f7fc bc41 	b.w	e9f8 <hci_driver_receive_process>

00012176 <m_assert_handler>:
	k_oops();
   12176:	4040      	eors	r0, r0
   12178:	f380 8811 	msr	BASEPRI, r0
   1217c:	f04f 0003 	mov.w	r0, #3
   12180:	df02      	svc	2
}
   12182:	4770      	bx	lr

00012184 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   12184:	4668      	mov	r0, sp
   12186:	f020 0107 	bic.w	r1, r0, #7
   1218a:	468d      	mov	sp, r1
   1218c:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1218e:	f7f0 fea1 	bl	2ed4 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   12192:	f7f9 fde5 	bl	bd60 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   12196:	f7f9 fec7 	bl	bf28 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1219a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1219e:	4685      	mov	sp, r0
   121a0:	4770      	bx	lr

000121a2 <mpsl_low_prio_work_handler>:
{
   121a2:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   121a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   121a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121ac:	f7fc fb56 	bl	e85c <multithreading_lock_acquire>
	mpsl_low_priority_process();
   121b0:	f7f6 f91c 	bl	83ec <mpsl_low_priority_process>
}
   121b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   121b8:	f7fc bb58 	b.w	e86c <multithreading_lock_release>

000121bc <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   121bc:	4668      	mov	r0, sp
   121be:	f020 0107 	bic.w	r1, r0, #7
   121c2:	468d      	mov	sp, r1
   121c4:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   121c6:	f7f0 fdfb 	bl	2dc0 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   121ca:	f7f9 fdc9 	bl	bd60 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   121ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   121d2:	4685      	mov	sp, r0
   121d4:	4770      	bx	lr

000121d6 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   121d6:	4668      	mov	r0, sp
   121d8:	f020 0107 	bic.w	r1, r0, #7
   121dc:	468d      	mov	sp, r1
   121de:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   121e0:	f7ee fbf6 	bl	9d0 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   121e4:	f7f9 fdbc 	bl	bd60 <_arch_isr_direct_pm>
   121e8:	f7f9 fe9e 	bl	bf28 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   121ec:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   121f0:	4685      	mov	sp, r0
   121f2:	4770      	bx	lr

000121f4 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   121f4:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   121f6:	f7f6 fa75 	bl	86e4 <mpsl_fem_init>

	return 0;
}
   121fa:	2000      	movs	r0, #0
   121fc:	bd08      	pop	{r3, pc}

000121fe <nrfx_clock_stop>:
	switch (domain) {
   121fe:	2801      	cmp	r0, #1
   12200:	d101      	bne.n	12206 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   12202:	f7f1 bcc3 	b.w	3b8c <mpsl_clock_hfclk_release>
}
   12206:	4770      	bx	lr

00012208 <nrfx_clock_enable>:
}
   12208:	4770      	bx	lr

0001220a <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   1220a:	f7f1 bad3 	b.w	37b4 <MPSL_IRQ_CLOCK_Handler>

0001220e <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1220e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            if (var1 == 0x0E)
   12212:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   12216:	2a0e      	cmp	r2, #14
   12218:	d105      	bne.n	12226 <nrf52_configuration_249+0x18>
            {
                switch(var2)
   1221a:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
   1221e:	3800      	subs	r0, #0
   12220:	bf18      	it	ne
   12222:	2001      	movne	r0, #1
   12224:	4770      	bx	lr
                {
                    case 0x00ul:
                        return false;
   12226:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
   12228:	4770      	bx	lr

0001222a <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1222a:	4700      	bx	r0

0001222c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1222c:	f000 bbcc 	b.w	129c8 <z_impl_k_busy_wait>

00012230 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   12230:	f000 001f 	and.w	r0, r0, #31
   12234:	0080      	lsls	r0, r0, #2
   12236:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1223a:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   1223e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   12242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   12246:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1224a:	4770      	bx	lr

0001224c <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   1224c:	1c43      	adds	r3, r0, #1
   1224e:	d008      	beq.n	12262 <spim_pin_uninit+0x16>
    *p_pin = pin_number & 0x1F;
   12250:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
   12254:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   12258:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1225c:	2202      	movs	r2, #2
   1225e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   12262:	4770      	bx	lr

00012264 <nrf_gpio_pin_write>:
    *p_pin = pin_number & 0x1F;
   12264:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   12268:	2301      	movs	r3, #1
   1226a:	4083      	lsls	r3, r0
   1226c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    if (value == 0)
   12270:	b911      	cbnz	r1, 12278 <nrf_gpio_pin_write+0x14>
    p_reg->OUTCLR = clr_mask;
   12272:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   12276:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
   12278:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   1227c:	4770      	bx	lr

0001227e <set_ss_pin_state>:
{
   1227e:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   12280:	7fc0      	ldrb	r0, [r0, #31]
   12282:	28ff      	cmp	r0, #255	; 0xff
   12284:	d006      	beq.n	12294 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
   12286:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
   12288:	079b      	lsls	r3, r3, #30
   1228a:	bf58      	it	pl
   1228c:	f081 0101 	eorpl.w	r1, r1, #1
   12290:	f7ff bfe8 	b.w	12264 <nrf_gpio_pin_write>
}
   12294:	4770      	bx	lr

00012296 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   12296:	4770      	bx	lr

00012298 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   12298:	b140      	cbz	r0, 122ac <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1229a:	68c3      	ldr	r3, [r0, #12]
   1229c:	7858      	ldrb	r0, [r3, #1]
   1229e:	f010 0001 	ands.w	r0, r0, #1
   122a2:	bf1e      	ittt	ne
   122a4:	7818      	ldrbne	r0, [r3, #0]
   122a6:	fab0 f080 	clzne	r0, r0
   122aa:	0940      	lsrne	r0, r0, #5
}
   122ac:	4770      	bx	lr

000122ae <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   122ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   122b0:	4605      	mov	r5, r0
   122b2:	460e      	mov	r6, r1
	__asm__ volatile(
   122b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   122b8:	f3ef 8711 	mrs	r7, BASEPRI
   122bc:	f383 8812 	msr	BASEPRI_MAX, r3
   122c0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   122c4:	f7fe fbc2 	bl	10a4c <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   122c8:	4631      	mov	r1, r6
   122ca:	4604      	mov	r4, r0
   122cc:	4628      	mov	r0, r5
   122ce:	f7ff ff14 	bl	120fa <k_sys_fatal_error_handler>
	__asm__ volatile(
   122d2:	f387 8811 	msr	BASEPRI, r7
   122d6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   122da:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   122dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   122e0:	f7f9 bfa8 	b.w	c234 <z_impl_k_thread_abort>

000122e4 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   122e4:	f000 bc41 	b.w	12b6a <memset>

000122e8 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   122e8:	f000 bc31 	b.w	12b4e <memcpy>

000122ec <k_heap_init>:
{
   122ec:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   122ee:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   122f2:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   122f6:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   122f8:	f7ff b8ca 	b.w	11490 <sys_heap_init>

000122fc <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   122fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12300:	b085      	sub	sp, #20
   12302:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   12306:	4607      	mov	r7, r0
   12308:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1230a:	4650      	mov	r0, sl
   1230c:	4621      	mov	r1, r4
{
   1230e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   12310:	f000 fb5e 	bl	129d0 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   12314:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12318:	bf08      	it	eq
   1231a:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1231e:	4605      	mov	r5, r0
   12320:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   12322:	bf04      	itt	eq
   12324:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   12328:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1232c:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   12330:	f04f 0340 	mov.w	r3, #64	; 0x40
   12334:	f3ef 8411 	mrs	r4, BASEPRI
   12338:	f383 8812 	msr	BASEPRI_MAX, r3
   1233c:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   12340:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   12344:	464a      	mov	r2, r9
   12346:	4641      	mov	r1, r8
   12348:	4638      	mov	r0, r7
   1234a:	f7ff f83a 	bl	113c2 <sys_heap_aligned_alloc>
   1234e:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   12350:	f7fe fd34 	bl	10dbc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   12354:	9b03      	ldr	r3, [sp, #12]
   12356:	b13b      	cbz	r3, 12368 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   12358:	f384 8811 	msr	BASEPRI, r4
   1235c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   12360:	4618      	mov	r0, r3
   12362:	b005      	add	sp, #20
   12364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   12368:	1a28      	subs	r0, r5, r0
   1236a:	eb66 0101 	sbc.w	r1, r6, r1
   1236e:	2801      	cmp	r0, #1
   12370:	f171 0200 	sbcs.w	r2, r1, #0
   12374:	dbf0      	blt.n	12358 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   12376:	e9cd 0100 	strd	r0, r1, [sp]
   1237a:	465a      	mov	r2, fp
   1237c:	4621      	mov	r1, r4
   1237e:	4650      	mov	r0, sl
   12380:	f7fe f9c6 	bl	10710 <z_pend_curr>
	__asm__ volatile(
   12384:	f04f 0340 	mov.w	r3, #64	; 0x40
   12388:	f3ef 8411 	mrs	r4, BASEPRI
   1238c:	f383 8812 	msr	BASEPRI_MAX, r3
   12390:	f3bf 8f6f 	isb	sy
	return k;
   12394:	e7d6      	b.n	12344 <k_heap_aligned_alloc+0x48>

00012396 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   12396:	b538      	push	{r3, r4, r5, lr}
   12398:	4604      	mov	r4, r0
   1239a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1239e:	f3ef 8511 	mrs	r5, BASEPRI
   123a2:	f383 8812 	msr	BASEPRI_MAX, r3
   123a6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   123aa:	f7fe ffd2 	bl	11352 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   123ae:	f104 000c 	add.w	r0, r4, #12
   123b2:	f000 fa8e 	bl	128d2 <z_unpend_all>
   123b6:	b130      	cbz	r0, 123c6 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   123b8:	4629      	mov	r1, r5
   123ba:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   123be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   123c2:	f7fe ba09 	b.w	107d8 <z_reschedule>
	__asm__ volatile(
   123c6:	f385 8811 	msr	BASEPRI, r5
   123ca:	f3bf 8f6f 	isb	sy
}
   123ce:	bd38      	pop	{r3, r4, r5, pc}

000123d0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   123d0:	f3ef 8005 	mrs	r0, IPSR
}
   123d4:	3800      	subs	r0, #0
   123d6:	bf18      	it	ne
   123d8:	2001      	movne	r0, #1
   123da:	4770      	bx	lr

000123dc <z_impl_k_thread_name_set>:
}
   123dc:	f06f 0057 	mvn.w	r0, #87	; 0x57
   123e0:	4770      	bx	lr

000123e2 <z_impl_k_thread_start>:
	z_sched_start(thread);
   123e2:	f7fe ba0b 	b.w	107fc <z_sched_start>

000123e6 <z_pm_save_idle_exit>:
{
   123e6:	b508      	push	{r3, lr}
	pm_system_resume();
   123e8:	f7f9 fb48 	bl	ba7c <pm_system_resume>
}
   123ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   123f0:	f7ff be1c 	b.w	1202c <sys_clock_idle_exit>

000123f4 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   123f4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   123f8:	428b      	cmp	r3, r1
   123fa:	d001      	beq.n	12400 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   123fc:	f7fe b9a6 	b.w	1074c <z_set_prio>
}
   12400:	2000      	movs	r0, #0
   12402:	4770      	bx	lr

00012404 <queue_insert>:
{
   12404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12408:	4699      	mov	r9, r3
   1240a:	4604      	mov	r4, r0
   1240c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   12410:	460d      	mov	r5, r1
   12412:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   12414:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   12418:	f04f 0240 	mov.w	r2, #64	; 0x40
   1241c:	f3ef 8611 	mrs	r6, BASEPRI
   12420:	f382 8812 	msr	BASEPRI_MAX, r2
   12424:	f3bf 8f6f 	isb	sy
	if (is_append) {
   12428:	b103      	cbz	r3, 1242c <queue_insert+0x28>
	return list->tail;
   1242a:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1242c:	f104 000c 	add.w	r0, r4, #12
   12430:	f000 fa09 	bl	12846 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   12434:	b158      	cbz	r0, 1244e <queue_insert+0x4a>
   12436:	2300      	movs	r3, #0
   12438:	67c3      	str	r3, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1243a:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1243e:	f000 f9cb 	bl	127d8 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   12442:	4638      	mov	r0, r7
   12444:	4631      	mov	r1, r6
   12446:	f7fe f9c7 	bl	107d8 <z_reschedule>
		return 0;
   1244a:	2000      	movs	r0, #0
   1244c:	e00c      	b.n	12468 <queue_insert+0x64>
	if (alloc) {
   1244e:	f1b9 0f00 	cmp.w	r9, #0
   12452:	d01b      	beq.n	1248c <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   12454:	2108      	movs	r1, #8
   12456:	f7fe fda9 	bl	10fac <z_thread_aligned_alloc>
		if (anode == NULL) {
   1245a:	b938      	cbnz	r0, 1246c <queue_insert+0x68>
	__asm__ volatile(
   1245c:	f386 8811 	msr	BASEPRI, r6
   12460:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   12464:	f06f 000b 	mvn.w	r0, #11
}
   12468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1246c:	2201      	movs	r2, #1
		anode->data = data;
   1246e:	f8c0 8004 	str.w	r8, [r0, #4]
   12472:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12474:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   12476:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1247a:	b95d      	cbnz	r5, 12494 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1247c:	6822      	ldr	r2, [r4, #0]
   1247e:	430a      	orrs	r2, r1
   12480:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   12482:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   12484:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   12486:	b96a      	cbnz	r2, 124a4 <queue_insert+0xa0>
	list->tail = node;
   12488:	6060      	str	r0, [r4, #4]
}
   1248a:	e00b      	b.n	124a4 <queue_insert+0xa0>
	node->next_and_flags = flags;
   1248c:	f8c8 9000 	str.w	r9, [r8]
}
   12490:	4640      	mov	r0, r8
   12492:	e7ef      	b.n	12474 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   12494:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   12496:	2a03      	cmp	r2, #3
   12498:	d810      	bhi.n	124bc <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1249a:	6001      	str	r1, [r0, #0]
	return list->tail;
   1249c:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1249e:	b939      	cbnz	r1, 124b0 <queue_insert+0xac>
	list->head = node;
   124a0:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   124a4:	2104      	movs	r1, #4
   124a6:	f104 0014 	add.w	r0, r4, #20
   124aa:	f000 fb2a 	bl	12b02 <z_handle_obj_poll_events>
   124ae:	e7c8      	b.n	12442 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   124b0:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   124b2:	f002 0203 	and.w	r2, r2, #3
   124b6:	4302      	orrs	r2, r0
   124b8:	600a      	str	r2, [r1, #0]
   124ba:	e7e5      	b.n	12488 <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   124bc:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   124c0:	430a      	orrs	r2, r1
   124c2:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   124c4:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   124c6:	f002 0203 	and.w	r2, r2, #3
   124ca:	ea40 0302 	orr.w	r3, r0, r2
   124ce:	602b      	str	r3, [r5, #0]
}
   124d0:	e7e8      	b.n	124a4 <queue_insert+0xa0>

000124d2 <z_queue_node_peek>:
{
   124d2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   124d4:	4604      	mov	r4, r0
   124d6:	b130      	cbz	r0, 124e6 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   124d8:	6802      	ldr	r2, [r0, #0]
   124da:	0793      	lsls	r3, r2, #30
   124dc:	d003      	beq.n	124e6 <z_queue_node_peek+0x14>
		ret = anode->data;
   124de:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   124e0:	b109      	cbz	r1, 124e6 <z_queue_node_peek+0x14>
			k_free(anode);
   124e2:	f000 fb1c 	bl	12b1e <k_free>
}
   124e6:	4620      	mov	r0, r4
   124e8:	bd10      	pop	{r4, pc}

000124ea <k_queue_prepend>:
{
   124ea:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   124ec:	2300      	movs	r3, #0
{
   124ee:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   124f0:	9300      	str	r3, [sp, #0]
   124f2:	4619      	mov	r1, r3
   124f4:	f7ff ff86 	bl	12404 <queue_insert>
}
   124f8:	b003      	add	sp, #12
   124fa:	f85d fb04 	ldr.w	pc, [sp], #4

000124fe <k_queue_append_list>:
{
   124fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12502:	4681      	mov	r9, r0
   12504:	4615      	mov	r5, r2
	CHECKIF(head == NULL || tail == NULL) {
   12506:	460c      	mov	r4, r1
   12508:	b3b9      	cbz	r1, 1257a <k_queue_append_list+0x7c>
   1250a:	b3b2      	cbz	r2, 1257a <k_queue_append_list+0x7c>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1250c:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   12510:	f04f 0340 	mov.w	r3, #64	; 0x40
   12514:	f3ef 8811 	mrs	r8, BASEPRI
   12518:	f383 8812 	msr	BASEPRI_MAX, r3
   1251c:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   12520:	f100 060c 	add.w	r6, r0, #12
   12524:	4630      	mov	r0, r6
   12526:	f000 f98e 	bl	12846 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1252a:	b168      	cbz	r0, 12548 <k_queue_append_list+0x4a>
   1252c:	f04f 0a00 	mov.w	sl, #0
	thread->base.swap_data = data;
   12530:	6144      	str	r4, [r0, #20]
   12532:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   12536:	f000 f94f 	bl	127d8 <z_ready_thread>
		head = *(void **)head;
   1253a:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1253c:	4630      	mov	r0, r6
   1253e:	f000 f982 	bl	12846 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   12542:	b144      	cbz	r4, 12556 <k_queue_append_list+0x58>
   12544:	2800      	cmp	r0, #0
   12546:	d1f3      	bne.n	12530 <k_queue_append_list+0x32>
	return list->tail;
   12548:	f8d9 3004 	ldr.w	r3, [r9, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1254c:	b97b      	cbnz	r3, 1256e <k_queue_append_list+0x70>
	list->head = node;
   1254e:	f8c9 4000 	str.w	r4, [r9]
	list->tail = node;
   12552:	f8c9 5004 	str.w	r5, [r9, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   12556:	2104      	movs	r1, #4
   12558:	f109 0014 	add.w	r0, r9, #20
   1255c:	f000 fad1 	bl	12b02 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   12560:	4638      	mov	r0, r7
   12562:	4641      	mov	r1, r8
   12564:	f7fe f938 	bl	107d8 <z_reschedule>
	return 0;
   12568:	2000      	movs	r0, #0
}
   1256a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1256e:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   12570:	f002 0203 	and.w	r2, r2, #3
   12574:	4314      	orrs	r4, r2
   12576:	601c      	str	r4, [r3, #0]
}
   12578:	e7eb      	b.n	12552 <k_queue_append_list+0x54>
		return -EINVAL;
   1257a:	f06f 0015 	mvn.w	r0, #21
   1257e:	e7f4      	b.n	1256a <k_queue_append_list+0x6c>

00012580 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   12580:	b15a      	cbz	r2, 1259a <z_impl_k_sem_init+0x1a>
   12582:	428a      	cmp	r2, r1
   12584:	d309      	bcc.n	1259a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   12586:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1258a:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1258e:	e9c0 0000 	strd	r0, r0, [r0]
   12592:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   12596:	2000      	movs	r0, #0
   12598:	4770      	bx	lr
		return -EINVAL;
   1259a:	f06f 0015 	mvn.w	r0, #21
}
   1259e:	4770      	bx	lr

000125a0 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   125a0:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   125a2:	2301      	movs	r3, #1
   125a4:	408b      	lsls	r3, r1
   125a6:	ea22 0303 	bic.w	r3, r2, r3
   125aa:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   125ac:	fa22 f001 	lsr.w	r0, r2, r1
}
   125b0:	f000 0001 	and.w	r0, r0, #1
   125b4:	4770      	bx	lr

000125b6 <unschedule_locked>:
{
   125b6:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   125b8:	2103      	movs	r1, #3
{
   125ba:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   125bc:	300c      	adds	r0, #12
   125be:	f7ff ffef 	bl	125a0 <flag_test_and_clear>
   125c2:	4604      	mov	r4, r0
   125c4:	b118      	cbz	r0, 125ce <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   125c6:	f105 0010 	add.w	r0, r5, #16
   125ca:	f000 f9b5 	bl	12938 <z_abort_timeout>
}
   125ce:	4620      	mov	r0, r4
   125d0:	bd38      	pop	{r3, r4, r5, pc}

000125d2 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   125d2:	b120      	cbz	r0, 125de <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   125d4:	2200      	movs	r2, #0
   125d6:	4611      	mov	r1, r2
   125d8:	3088      	adds	r0, #136	; 0x88
   125da:	f000 b98a 	b.w	128f2 <z_sched_wake>
}
   125de:	4770      	bx	lr

000125e0 <cancel_async_locked>:
{
   125e0:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   125e2:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   125e4:	f3c3 0640 	ubfx	r6, r3, #1, #1
   125e8:	079b      	lsls	r3, r3, #30
{
   125ea:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   125ec:	d416      	bmi.n	1261c <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   125ee:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   125f0:	2102      	movs	r1, #2
   125f2:	300c      	adds	r0, #12
   125f4:	f7ff ffd4 	bl	125a0 <flag_test_and_clear>
   125f8:	b180      	cbz	r0, 1261c <cancel_async_locked+0x3c>
	return list->head;
   125fa:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   125fe:	b16a      	cbz	r2, 1261c <cancel_async_locked+0x3c>
   12600:	4294      	cmp	r4, r2
   12602:	d11d      	bne.n	12640 <cancel_async_locked+0x60>
	return node->next;
   12604:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   12606:	b99e      	cbnz	r6, 12630 <cancel_async_locked+0x50>
   12608:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   1260c:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   12610:	429c      	cmp	r4, r3
   12612:	d101      	bne.n	12618 <cancel_async_locked+0x38>
	list->tail = node;
   12614:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   12618:	2300      	movs	r3, #0
   1261a:	6023      	str	r3, [r4, #0]
	return *flagp;
   1261c:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1261e:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   12622:	bf1e      	ittt	ne
   12624:	f043 0302 	orrne.w	r3, r3, #2
   12628:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1262a:	f040 0002 	orrne.w	r0, r0, #2
}
   1262e:	bd70      	pop	{r4, r5, r6, pc}
   12630:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   12632:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   12636:	4294      	cmp	r4, r2
	list->tail = node;
   12638:	bf08      	it	eq
   1263a:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   1263e:	e7eb      	b.n	12618 <cancel_async_locked+0x38>
	return node->next;
   12640:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12642:	6812      	ldr	r2, [r2, #0]
   12644:	e7db      	b.n	125fe <cancel_async_locked+0x1e>

00012646 <work_timeout>:
{
   12646:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12648:	4604      	mov	r4, r0
   1264a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1264e:	f3ef 8511 	mrs	r5, BASEPRI
   12652:	f383 8812 	msr	BASEPRI_MAX, r3
   12656:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1265a:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1265c:	f1a0 0610 	sub.w	r6, r0, #16
   12660:	2103      	movs	r1, #3
   12662:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   12664:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   12666:	f7ff ff9b 	bl	125a0 <flag_test_and_clear>
   1266a:	b128      	cbz	r0, 12678 <work_timeout+0x32>
		queue = dw->queue;
   1266c:	69a3      	ldr	r3, [r4, #24]
   1266e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   12670:	a901      	add	r1, sp, #4
   12672:	4630      	mov	r0, r6
   12674:	f7fd fe42 	bl	102fc <submit_to_queue_locked>
	__asm__ volatile(
   12678:	f385 8811 	msr	BASEPRI, r5
   1267c:	f3bf 8f6f 	isb	sy
}
   12680:	b002      	add	sp, #8
   12682:	bd70      	pop	{r4, r5, r6, pc}

00012684 <k_work_init>:
{
   12684:	b538      	push	{r3, r4, r5, lr}
   12686:	4604      	mov	r4, r0
   12688:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1268a:	2210      	movs	r2, #16
   1268c:	2100      	movs	r1, #0
   1268e:	f000 fa6c 	bl	12b6a <memset>
   12692:	6065      	str	r5, [r4, #4]
}
   12694:	bd38      	pop	{r3, r4, r5, pc}

00012696 <z_work_submit_to_queue>:
{
   12696:	b513      	push	{r0, r1, r4, lr}
   12698:	9001      	str	r0, [sp, #4]
   1269a:	4608      	mov	r0, r1
	__asm__ volatile(
   1269c:	f04f 0340 	mov.w	r3, #64	; 0x40
   126a0:	f3ef 8411 	mrs	r4, BASEPRI
   126a4:	f383 8812 	msr	BASEPRI_MAX, r3
   126a8:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   126ac:	a901      	add	r1, sp, #4
   126ae:	f7fd fe25 	bl	102fc <submit_to_queue_locked>
	__asm__ volatile(
   126b2:	f384 8811 	msr	BASEPRI, r4
   126b6:	f3bf 8f6f 	isb	sy
}
   126ba:	b002      	add	sp, #8
   126bc:	bd10      	pop	{r4, pc}

000126be <k_work_submit_to_queue>:
{
   126be:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   126c0:	f7ff ffe9 	bl	12696 <z_work_submit_to_queue>
	if (ret > 0) {
   126c4:	1e04      	subs	r4, r0, #0
   126c6:	dd09      	ble.n	126dc <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   126c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   126cc:	f3ef 8011 	mrs	r0, BASEPRI
   126d0:	f383 8812 	msr	BASEPRI_MAX, r3
   126d4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   126d8:	f000 f8e5 	bl	128a6 <z_reschedule_irqlock>
}
   126dc:	4620      	mov	r0, r4
   126de:	bd10      	pop	{r4, pc}

000126e0 <k_work_init_delayable>:
{
   126e0:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   126e2:	2230      	movs	r2, #48	; 0x30
{
   126e4:	4604      	mov	r4, r0
   126e6:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   126e8:	2100      	movs	r1, #0
   126ea:	f000 fa3e 	bl	12b6a <memset>
   126ee:	f44f 7380 	mov.w	r3, #256	; 0x100
   126f2:	6065      	str	r5, [r4, #4]
   126f4:	60e3      	str	r3, [r4, #12]
}
   126f6:	bd38      	pop	{r3, r4, r5, pc}

000126f8 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   126f8:	b538      	push	{r3, r4, r5, lr}
   126fa:	4604      	mov	r4, r0
   126fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   12700:	f3ef 8511 	mrs	r5, BASEPRI
   12704:	f383 8812 	msr	BASEPRI_MAX, r3
   12708:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1270c:	f7ff ff53 	bl	125b6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   12710:	4620      	mov	r0, r4
   12712:	f7ff ff65 	bl	125e0 <cancel_async_locked>
	__asm__ volatile(
   12716:	f385 8811 	msr	BASEPRI, r5
   1271a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1271e:	bd38      	pop	{r3, r4, r5, pc}

00012720 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   12720:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   12724:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   12726:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   12728:	2300      	movs	r3, #0
	node->prev = NULL;
   1272a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1272e:	4770      	bx	lr

00012730 <unpend_thread_no_timeout>:
{
   12730:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   12732:	f7ff fff5 	bl	12720 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   12736:	7b43      	ldrb	r3, [r0, #13]
   12738:	f023 0302 	bic.w	r3, r3, #2
   1273c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1273e:	2300      	movs	r3, #0
   12740:	6083      	str	r3, [r0, #8]
}
   12742:	bd08      	pop	{r3, pc}

00012744 <z_thread_timeout>:
{
   12744:	b510      	push	{r4, lr}
   12746:	4601      	mov	r1, r0
	__asm__ volatile(
   12748:	f04f 0340 	mov.w	r3, #64	; 0x40
   1274c:	f3ef 8411 	mrs	r4, BASEPRI
   12750:	f383 8812 	msr	BASEPRI_MAX, r3
   12754:	f3bf 8f6f 	isb	sy
		if (!killed) {
   12758:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1275c:	f013 0f28 	tst.w	r3, #40	; 0x28
   12760:	d10d      	bne.n	1277e <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   12762:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   12766:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   12768:	b10b      	cbz	r3, 1276e <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1276a:	f7ff ffe1 	bl	12730 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1276e:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   12772:	f023 0314 	bic.w	r3, r3, #20
   12776:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1277a:	f7fd fef1 	bl	10560 <ready_thread>
	__asm__ volatile(
   1277e:	f384 8811 	msr	BASEPRI, r4
   12782:	f3bf 8f6f 	isb	sy
}
   12786:	bd10      	pop	{r4, pc}

00012788 <add_to_waitq_locked>:
{
   12788:	b538      	push	{r3, r4, r5, lr}
   1278a:	4604      	mov	r4, r0
   1278c:	460d      	mov	r5, r1
	unready_thread(thread);
   1278e:	f7fd ff1b 	bl	105c8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   12792:	7b63      	ldrb	r3, [r4, #13]
   12794:	f043 0302 	orr.w	r3, r3, #2
   12798:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1279a:	b1e5      	cbz	r5, 127d6 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   1279c:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   1279e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   127a0:	429d      	cmp	r5, r3
   127a2:	d109      	bne.n	127b8 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   127a4:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   127a6:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   127aa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   127ac:	606c      	str	r4, [r5, #4]
}
   127ae:	e012      	b.n	127d6 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   127b0:	686a      	ldr	r2, [r5, #4]
   127b2:	4293      	cmp	r3, r2
   127b4:	d0f6      	beq.n	127a4 <add_to_waitq_locked+0x1c>
   127b6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   127b8:	2b00      	cmp	r3, #0
   127ba:	d0f3      	beq.n	127a4 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   127bc:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   127c0:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   127c4:	428a      	cmp	r2, r1
   127c6:	d0f3      	beq.n	127b0 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   127c8:	4291      	cmp	r1, r2
   127ca:	ddf1      	ble.n	127b0 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   127cc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   127ce:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   127d2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   127d4:	605c      	str	r4, [r3, #4]
}
   127d6:	bd38      	pop	{r3, r4, r5, pc}

000127d8 <z_ready_thread>:
{
   127d8:	b510      	push	{r4, lr}
	__asm__ volatile(
   127da:	f04f 0340 	mov.w	r3, #64	; 0x40
   127de:	f3ef 8411 	mrs	r4, BASEPRI
   127e2:	f383 8812 	msr	BASEPRI_MAX, r3
   127e6:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   127ea:	f7fd feb9 	bl	10560 <ready_thread>
	__asm__ volatile(
   127ee:	f384 8811 	msr	BASEPRI, r4
   127f2:	f3bf 8f6f 	isb	sy
}
   127f6:	bd10      	pop	{r4, pc}

000127f8 <z_unpend_thread_no_timeout>:
{
   127f8:	b508      	push	{r3, lr}
	__asm__ volatile(
   127fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   127fe:	f3ef 8111 	mrs	r1, BASEPRI
   12802:	f383 8812 	msr	BASEPRI_MAX, r3
   12806:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1280a:	f7ff ff91 	bl	12730 <unpend_thread_no_timeout>
	__asm__ volatile(
   1280e:	f381 8811 	msr	BASEPRI, r1
   12812:	f3bf 8f6f 	isb	sy
}
   12816:	bd08      	pop	{r3, pc}

00012818 <z_unpend1_no_timeout>:
{
   12818:	b508      	push	{r3, lr}
   1281a:	4603      	mov	r3, r0
	__asm__ volatile(
   1281c:	f04f 0240 	mov.w	r2, #64	; 0x40
   12820:	f3ef 8111 	mrs	r1, BASEPRI
   12824:	f382 8812 	msr	BASEPRI_MAX, r2
   12828:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1282c:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1282e:	4283      	cmp	r3, r0
   12830:	d007      	beq.n	12842 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   12832:	b108      	cbz	r0, 12838 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   12834:	f7ff ff7c 	bl	12730 <unpend_thread_no_timeout>
	__asm__ volatile(
   12838:	f381 8811 	msr	BASEPRI, r1
   1283c:	f3bf 8f6f 	isb	sy
}
   12840:	bd08      	pop	{r3, pc}
   12842:	2000      	movs	r0, #0
   12844:	e7f8      	b.n	12838 <z_unpend1_no_timeout+0x20>

00012846 <z_unpend_first_thread>:
{
   12846:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   12848:	f04f 0340 	mov.w	r3, #64	; 0x40
   1284c:	f3ef 8511 	mrs	r5, BASEPRI
   12850:	f383 8812 	msr	BASEPRI_MAX, r3
   12854:	f3bf 8f6f 	isb	sy
	return list->head == list;
   12858:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1285a:	42a0      	cmp	r0, r4
   1285c:	d00d      	beq.n	1287a <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   1285e:	b134      	cbz	r4, 1286e <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   12860:	4620      	mov	r0, r4
   12862:	f7ff ff65 	bl	12730 <unpend_thread_no_timeout>
   12866:	f104 0018 	add.w	r0, r4, #24
   1286a:	f000 f865 	bl	12938 <z_abort_timeout>
	__asm__ volatile(
   1286e:	f385 8811 	msr	BASEPRI, r5
   12872:	f3bf 8f6f 	isb	sy
}
   12876:	4620      	mov	r0, r4
   12878:	bd38      	pop	{r3, r4, r5, pc}
   1287a:	2400      	movs	r4, #0
   1287c:	e7f7      	b.n	1286e <z_unpend_first_thread+0x28>

0001287e <z_unpend_thread>:
{
   1287e:	b510      	push	{r4, lr}
	__asm__ volatile(
   12880:	f04f 0340 	mov.w	r3, #64	; 0x40
   12884:	f3ef 8411 	mrs	r4, BASEPRI
   12888:	f383 8812 	msr	BASEPRI_MAX, r3
   1288c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   12890:	f7ff ff4e 	bl	12730 <unpend_thread_no_timeout>
	__asm__ volatile(
   12894:	f384 8811 	msr	BASEPRI, r4
   12898:	f3bf 8f6f 	isb	sy
}
   1289c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   128a0:	3018      	adds	r0, #24
   128a2:	f000 b849 	b.w	12938 <z_abort_timeout>

000128a6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   128a6:	4603      	mov	r3, r0
   128a8:	b920      	cbnz	r0, 128b4 <z_reschedule_irqlock+0xe>
   128aa:	f3ef 8205 	mrs	r2, IPSR
   128ae:	b90a      	cbnz	r2, 128b4 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   128b0:	f7f9 ba7e 	b.w	bdb0 <arch_swap>
   128b4:	f383 8811 	msr	BASEPRI, r3
   128b8:	f3bf 8f6f 	isb	sy
}
   128bc:	4770      	bx	lr

000128be <z_reschedule_unlocked>:
	__asm__ volatile(
   128be:	f04f 0340 	mov.w	r3, #64	; 0x40
   128c2:	f3ef 8011 	mrs	r0, BASEPRI
   128c6:	f383 8812 	msr	BASEPRI_MAX, r3
   128ca:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   128ce:	f7ff bfea 	b.w	128a6 <z_reschedule_irqlock>

000128d2 <z_unpend_all>:
{
   128d2:	b538      	push	{r3, r4, r5, lr}
   128d4:	4605      	mov	r5, r0
	int need_sched = 0;
   128d6:	2000      	movs	r0, #0
	return list->head == list;
   128d8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   128da:	42a5      	cmp	r5, r4
   128dc:	d000      	beq.n	128e0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   128de:	b904      	cbnz	r4, 128e2 <z_unpend_all+0x10>
}
   128e0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   128e2:	4620      	mov	r0, r4
   128e4:	f7ff ffcb 	bl	1287e <z_unpend_thread>
		z_ready_thread(thread);
   128e8:	4620      	mov	r0, r4
   128ea:	f7ff ff75 	bl	127d8 <z_ready_thread>
		need_sched = 1;
   128ee:	2001      	movs	r0, #1
   128f0:	e7f2      	b.n	128d8 <z_unpend_all+0x6>

000128f2 <z_sched_wake>:
{
   128f2:	b538      	push	{r3, r4, r5, lr}
   128f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   128f8:	f3ef 8511 	mrs	r5, BASEPRI
   128fc:	f383 8812 	msr	BASEPRI_MAX, r3
   12900:	f3bf 8f6f 	isb	sy
	return list->head == list;
   12904:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12906:	42a0      	cmp	r0, r4
   12908:	d012      	beq.n	12930 <z_sched_wake+0x3e>
		if (thread != NULL) {
   1290a:	b19c      	cbz	r4, 12934 <z_sched_wake+0x42>
   1290c:	67e1      	str	r1, [r4, #124]	; 0x7c
   1290e:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   12910:	4620      	mov	r0, r4
   12912:	f7ff ff0d 	bl	12730 <unpend_thread_no_timeout>
   12916:	f104 0018 	add.w	r0, r4, #24
   1291a:	f000 f80d 	bl	12938 <z_abort_timeout>
			ready_thread(thread);
   1291e:	4620      	mov	r0, r4
   12920:	f7fd fe1e 	bl	10560 <ready_thread>
			ret = true;
   12924:	2001      	movs	r0, #1
	__asm__ volatile(
   12926:	f385 8811 	msr	BASEPRI, r5
   1292a:	f3bf 8f6f 	isb	sy
}
   1292e:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   12930:	2000      	movs	r0, #0
   12932:	e7f8      	b.n	12926 <z_sched_wake+0x34>
   12934:	4620      	mov	r0, r4
   12936:	e7f6      	b.n	12926 <z_sched_wake+0x34>

00012938 <z_abort_timeout>:
{
   12938:	b510      	push	{r4, lr}
	__asm__ volatile(
   1293a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1293e:	f3ef 8411 	mrs	r4, BASEPRI
   12942:	f382 8812 	msr	BASEPRI_MAX, r2
   12946:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1294a:	6803      	ldr	r3, [r0, #0]
   1294c:	b13b      	cbz	r3, 1295e <z_abort_timeout+0x26>
			remove_timeout(to);
   1294e:	f7fe f941 	bl	10bd4 <remove_timeout>
			ret = 0;
   12952:	2000      	movs	r0, #0
	__asm__ volatile(
   12954:	f384 8811 	msr	BASEPRI, r4
   12958:	f3bf 8f6f 	isb	sy
}
   1295c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1295e:	f06f 0015 	mvn.w	r0, #21
   12962:	e7f7      	b.n	12954 <z_abort_timeout+0x1c>

00012964 <z_get_next_timeout_expiry>:
{
   12964:	b510      	push	{r4, lr}
	__asm__ volatile(
   12966:	f04f 0340 	mov.w	r3, #64	; 0x40
   1296a:	f3ef 8411 	mrs	r4, BASEPRI
   1296e:	f383 8812 	msr	BASEPRI_MAX, r3
   12972:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   12976:	f7fe f905 	bl	10b84 <next_timeout>
	__asm__ volatile(
   1297a:	f384 8811 	msr	BASEPRI, r4
   1297e:	f3bf 8f6f 	isb	sy
}
   12982:	bd10      	pop	{r4, pc}

00012984 <z_set_timeout_expiry>:
{
   12984:	b570      	push	{r4, r5, r6, lr}
   12986:	4604      	mov	r4, r0
   12988:	460d      	mov	r5, r1
	__asm__ volatile(
   1298a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1298e:	f3ef 8611 	mrs	r6, BASEPRI
   12992:	f383 8812 	msr	BASEPRI_MAX, r3
   12996:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1299a:	f7fe f8f3 	bl	10b84 <next_timeout>
			      || (ticks <= next_to);
   1299e:	2801      	cmp	r0, #1
   129a0:	dd07      	ble.n	129b2 <z_set_timeout_expiry+0x2e>
   129a2:	42a0      	cmp	r0, r4
   129a4:	db05      	blt.n	129b2 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   129a6:	42a0      	cmp	r0, r4
   129a8:	4629      	mov	r1, r5
   129aa:	bfa8      	it	ge
   129ac:	4620      	movge	r0, r4
   129ae:	f7fb ff19 	bl	e7e4 <sys_clock_set_timeout>
	__asm__ volatile(
   129b2:	f386 8811 	msr	BASEPRI, r6
   129b6:	f3bf 8f6f 	isb	sy
}
   129ba:	bd70      	pop	{r4, r5, r6, pc}

000129bc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   129bc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   129be:	f7fe f9fd 	bl	10dbc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   129c2:	bd08      	pop	{r3, pc}

000129c4 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   129c4:	f7fe b9fa 	b.w	10dbc <sys_clock_tick_get>

000129c8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   129c8:	b108      	cbz	r0, 129ce <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   129ca:	f7f9 bd27 	b.w	c41c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   129ce:	4770      	bx	lr

000129d0 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   129d0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   129d4:	bf08      	it	eq
   129d6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   129da:	b538      	push	{r3, r4, r5, lr}
   129dc:	460c      	mov	r4, r1
   129de:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   129e0:	d014      	beq.n	12a0c <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   129e2:	4308      	orrs	r0, r1
   129e4:	d103      	bne.n	129ee <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   129e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   129ea:	f7fe b9e7 	b.w	10dbc <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   129ee:	f06f 0001 	mvn.w	r0, #1
   129f2:	1b40      	subs	r0, r0, r5
   129f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   129f8:	eb63 0101 	sbc.w	r1, r3, r1
   129fc:	2900      	cmp	r1, #0
   129fe:	da04      	bge.n	12a0a <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   12a00:	f7fe f9dc 	bl	10dbc <sys_clock_tick_get>
   12a04:	1940      	adds	r0, r0, r5
   12a06:	eb41 0104 	adc.w	r1, r1, r4
}
   12a0a:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   12a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12a10:	4601      	mov	r1, r0
   12a12:	e7fa      	b.n	12a0a <sys_clock_timeout_end_calc+0x3a>

00012a14 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   12a14:	b510      	push	{r4, lr}
   12a16:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   12a18:	f7ff ff8e 	bl	12938 <z_abort_timeout>

	if (inactive) {
   12a1c:	b9b0      	cbnz	r0, 12a4c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   12a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12a20:	b10b      	cbz	r3, 12a26 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   12a22:	4620      	mov	r0, r4
   12a24:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   12a26:	f104 0018 	add.w	r0, r4, #24
   12a2a:	f7ff fef5 	bl	12818 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   12a2e:	b168      	cbz	r0, 12a4c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   12a30:	f7ff fed2 	bl	127d8 <z_ready_thread>
	__asm__ volatile(
   12a34:	f04f 0340 	mov.w	r3, #64	; 0x40
   12a38:	f3ef 8011 	mrs	r0, BASEPRI
   12a3c:	f383 8812 	msr	BASEPRI_MAX, r3
   12a40:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   12a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12a48:	f7ff bf2d 	b.w	128a6 <z_reschedule_irqlock>
   12a4c:	bd10      	pop	{r4, pc}

00012a4e <signal_poll_event>:
{
   12a4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   12a52:	6884      	ldr	r4, [r0, #8]
{
   12a54:	4605      	mov	r5, r0
   12a56:	460e      	mov	r6, r1
	if (poller != NULL) {
   12a58:	b144      	cbz	r4, 12a6c <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   12a5a:	7863      	ldrb	r3, [r4, #1]
   12a5c:	2b01      	cmp	r3, #1
   12a5e:	d12e      	bne.n	12abe <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   12a60:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   12a64:	f013 0302 	ands.w	r3, r3, #2
   12a68:	d10a      	bne.n	12a80 <signal_poll_event+0x32>
		poller->is_polling = false;
   12a6a:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   12a6c:	68eb      	ldr	r3, [r5, #12]
   12a6e:	f3c3 3286 	ubfx	r2, r3, #14, #7
   12a72:	4316      	orrs	r6, r2
	event->poller = NULL;
   12a74:	2000      	movs	r0, #0
	event->state |= state;
   12a76:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   12a7a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   12a7c:	60eb      	str	r3, [r5, #12]
	return retcode;
   12a7e:	e03e      	b.n	12afe <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   12a80:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   12a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   12a88:	bf08      	it	eq
   12a8a:	f112 0f02 	cmneq.w	r2, #2
   12a8e:	d032      	beq.n	12af6 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   12a90:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   12a94:	4640      	mov	r0, r8
   12a96:	f7ff fef2 	bl	1287e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   12a9a:	2e08      	cmp	r6, #8
   12a9c:	bf0c      	ite	eq
   12a9e:	f06f 0303 	mvneq.w	r3, #3
   12aa2:	2300      	movne	r3, #0
   12aa4:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   12aa6:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   12aaa:	06db      	lsls	r3, r3, #27
   12aac:	d109      	bne.n	12ac2 <signal_poll_event+0x74>
   12aae:	f854 7c48 	ldr.w	r7, [r4, #-72]
   12ab2:	b937      	cbnz	r7, 12ac2 <signal_poll_event+0x74>
	z_ready_thread(thread);
   12ab4:	4640      	mov	r0, r8
   12ab6:	f7ff fe8f 	bl	127d8 <z_ready_thread>
		poller->is_polling = false;
   12aba:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   12abc:	e7d6      	b.n	12a6c <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   12abe:	2b02      	cmp	r3, #2
   12ac0:	d001      	beq.n	12ac6 <signal_poll_event+0x78>
		poller->is_polling = false;
   12ac2:	2300      	movs	r3, #0
   12ac4:	e7d1      	b.n	12a6a <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   12ac6:	7823      	ldrb	r3, [r4, #0]
   12ac8:	2b00      	cmp	r3, #0
   12aca:	d0cf      	beq.n	12a6c <signal_poll_event+0x1e>
   12acc:	f854 7c04 	ldr.w	r7, [r4, #-4]
   12ad0:	2f00      	cmp	r7, #0
   12ad2:	d0f2      	beq.n	12aba <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   12ad4:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   12ad8:	f1a4 0914 	sub.w	r9, r4, #20
   12adc:	f104 0014 	add.w	r0, r4, #20
   12ae0:	f7ff ff2a 	bl	12938 <z_abort_timeout>
		twork->poll_result = 0;
   12ae4:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   12ae8:	4649      	mov	r1, r9
   12aea:	4638      	mov	r0, r7
   12aec:	f7ff fdd3 	bl	12696 <z_work_submit_to_queue>
		poller->is_polling = false;
   12af0:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   12af4:	e7ba      	b.n	12a6c <signal_poll_event+0x1e>
		poller->is_polling = false;
   12af6:	2300      	movs	r3, #0
   12af8:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   12afa:	f06f 000a 	mvn.w	r0, #10
}
   12afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00012b02 <z_handle_obj_poll_events>:
{
   12b02:	4603      	mov	r3, r0
	return list->head == list;
   12b04:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   12b06:	4283      	cmp	r3, r0
   12b08:	d008      	beq.n	12b1c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   12b0a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   12b0e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   12b10:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   12b12:	2300      	movs	r3, #0
	node->prev = NULL;
   12b14:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   12b18:	f7ff bf99 	b.w	12a4e <signal_poll_event>
}
   12b1c:	4770      	bx	lr

00012b1e <k_free>:
	if (ptr != NULL) {
   12b1e:	b120      	cbz	r0, 12b2a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   12b20:	1f01      	subs	r1, r0, #4
   12b22:	f850 0c04 	ldr.w	r0, [r0, #-4]
   12b26:	f7ff bc36 	b.w	12396 <k_heap_free>
}
   12b2a:	4770      	bx	lr

00012b2c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   12b2c:	4770      	bx	lr

00012b2e <memcmp>:
   12b2e:	b510      	push	{r4, lr}
   12b30:	3901      	subs	r1, #1
   12b32:	4402      	add	r2, r0
   12b34:	4290      	cmp	r0, r2
   12b36:	d101      	bne.n	12b3c <memcmp+0xe>
   12b38:	2000      	movs	r0, #0
   12b3a:	e005      	b.n	12b48 <memcmp+0x1a>
   12b3c:	7803      	ldrb	r3, [r0, #0]
   12b3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   12b42:	42a3      	cmp	r3, r4
   12b44:	d001      	beq.n	12b4a <memcmp+0x1c>
   12b46:	1b18      	subs	r0, r3, r4
   12b48:	bd10      	pop	{r4, pc}
   12b4a:	3001      	adds	r0, #1
   12b4c:	e7f2      	b.n	12b34 <memcmp+0x6>

00012b4e <memcpy>:
   12b4e:	440a      	add	r2, r1
   12b50:	4291      	cmp	r1, r2
   12b52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   12b56:	d100      	bne.n	12b5a <memcpy+0xc>
   12b58:	4770      	bx	lr
   12b5a:	b510      	push	{r4, lr}
   12b5c:	f811 4b01 	ldrb.w	r4, [r1], #1
   12b60:	f803 4f01 	strb.w	r4, [r3, #1]!
   12b64:	4291      	cmp	r1, r2
   12b66:	d1f9      	bne.n	12b5c <memcpy+0xe>
   12b68:	bd10      	pop	{r4, pc}

00012b6a <memset>:
   12b6a:	4402      	add	r2, r0
   12b6c:	4603      	mov	r3, r0
   12b6e:	4293      	cmp	r3, r2
   12b70:	d100      	bne.n	12b74 <memset+0xa>
   12b72:	4770      	bx	lr
   12b74:	f803 1b01 	strb.w	r1, [r3], #1
   12b78:	e7f9      	b.n	12b6e <memset+0x4>

00012b7a <strnlen>:
   12b7a:	b510      	push	{r4, lr}
   12b7c:	4602      	mov	r2, r0
   12b7e:	4401      	add	r1, r0
   12b80:	428a      	cmp	r2, r1
   12b82:	4613      	mov	r3, r2
   12b84:	d003      	beq.n	12b8e <strnlen+0x14>
   12b86:	781c      	ldrb	r4, [r3, #0]
   12b88:	3201      	adds	r2, #1
   12b8a:	2c00      	cmp	r4, #0
   12b8c:	d1f8      	bne.n	12b80 <strnlen+0x6>
   12b8e:	1a18      	subs	r0, r3, r0
   12b90:	bd10      	pop	{r4, pc}
	...
