
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	50 34 00 20 4d b6 00 00 47 0a 01 00 21 b6 00 00     P4. M...G...!...
  10:	21 b6 00 00 21 b6 00 00 21 b6 00 00 00 00 00 00     !...!...!.......
	...
  2c:	9d b3 00 00 21 b6 00 00 00 00 00 00 55 b3 00 00     ....!.......U...
  3c:	21 b6 00 00                                         !...

00000040 <_irq_vector_table>:
  40:	19 b4 00 00 7d 14 01 00 19 b4 00 00 19 b4 00 00     ....}...........
  50:	19 b4 00 00 19 b4 00 00 19 b4 00 00 19 b4 00 00     ................
  60:	2b 14 01 00 19 b4 00 00 19 b4 00 00 63 14 01 00     +...........c...
  70:	19 b4 00 00 19 b4 00 00 19 b4 00 00 19 b4 00 00     ................
  80:	19 b4 00 00 19 b4 00 00 19 b4 00 00 19 b4 00 00     ................
  90:	19 b4 00 00 19 b4 00 00 19 b4 00 00 19 b4 00 00     ................
  a0:	19 b4 00 00 19 b4 00 00 19 b4 00 00 19 b4 00 00     ................
  b0:	19 b4 00 00 19 b4 00 00                             ........

Disassembly of section text:

000000b8 <__aeabi_uldivmod>:
      b8:	b953      	cbnz	r3, d0 <CONFIG_FLASH_SIZE+0x10>
      ba:	b94a      	cbnz	r2, d0 <CONFIG_FLASH_SIZE+0x10>
      bc:	2900      	cmp	r1, #0
      be:	bf08      	it	eq
      c0:	2800      	cmpeq	r0, #0
      c2:	bf1c      	itt	ne
      c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      cc:	f000 b80c 	b.w	e8 <__aeabi_idiv0>
      d0:	f1ad 0c08 	sub.w	ip, sp, #8
      d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      d8:	f007 fb28 	bl	772c <__udivmoddi4>
      dc:	f8dd e004 	ldr.w	lr, [sp, #4]
      e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      e4:	b004      	add	sp, #16
      e6:	4770      	bx	lr

000000e8 <__aeabi_idiv0>:
      e8:	4770      	bx	lr
      ea:	bf00      	nop

000000ec <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
      ec:	4801      	ldr	r0, [pc, #4]	; (f4 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
      ee:	7800      	ldrb	r0, [r0, #0]
      f0:	4770      	bx	lr
      f2:	0000      	.short	0x0000
      f4:	20000028 	.word	0x20000028

000000f8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
      f8:	b570      	push	{r4, r5, r6, lr}
      fa:	4c17      	ldr	r4, [pc, #92]	; (158 <CONFIG_IDLE_STACK_SIZE+0x58>)
      fc:	7860      	ldrb	r0, [r4, #1]
      fe:	2800      	cmp	r0, #0
     100:	d123      	bne.n	14a <CONFIG_IDLE_STACK_SIZE+0x4a>
     102:	2001      	movs	r0, #1
     104:	7060      	strb	r0, [r4, #1]
     106:	f007 fda8 	bl	7c5a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     10a:	f06f 0527 	mvn.w	r5, #39	; 0x27
     10e:	b928      	cbnz	r0, 11c <CONFIG_IDLE_STACK_SIZE+0x1c>
     110:	f007 fdd9 	bl	7cc6 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     114:	b910      	cbnz	r0, 11c <CONFIG_IDLE_STACK_SIZE+0x1c>
     116:	f007 fde0 	bl	7cda <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     11a:	b120      	cbz	r0, 126 <CONFIG_IDLE_STACK_SIZE+0x26>
     11c:	480f      	ldr	r0, [pc, #60]	; (15c <CONFIG_IDLE_STACK_SIZE+0x5c>)
     11e:	6060      	str	r0, [r4, #4]
     120:	70a5      	strb	r5, [r4, #2]
     122:	2008      	movs	r0, #8
     124:	e010      	b.n	148 <CONFIG_IDLE_STACK_SIZE+0x48>
     126:	f007 fd6d 	bl	7c04 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     12a:	b940      	cbnz	r0, 13e <CONFIG_IDLE_STACK_SIZE+0x3e>
     12c:	f007 fd74 	bl	7c18 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     130:	b928      	cbnz	r0, 13e <CONFIG_IDLE_STACK_SIZE+0x3e>
     132:	f007 fd88 	bl	7c46 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     136:	b910      	cbnz	r0, 13e <CONFIG_IDLE_STACK_SIZE+0x3e>
     138:	f007 fd99 	bl	7c6e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     13c:	b130      	cbz	r0, 14c <CONFIG_IDLE_STACK_SIZE+0x4c>
     13e:	4807      	ldr	r0, [pc, #28]	; (15c <CONFIG_IDLE_STACK_SIZE+0x5c>)
     140:	3031      	adds	r0, #49	; 0x31
     142:	6060      	str	r0, [r4, #4]
     144:	70a5      	strb	r5, [r4, #2]
     146:	2004      	movs	r0, #4
     148:	70e0      	strb	r0, [r4, #3]
     14a:	bd70      	pop	{r4, r5, r6, pc}
     14c:	f44f 718f 	mov.w	r1, #286	; 0x11e
     150:	2074      	movs	r0, #116	; 0x74
     152:	f003 fa83 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     156:	0000      	.short	0x0000
     158:	20000028 	.word	0x20000028
     15c:	0000a388 	.word	0x0000a388

00000160 <mpsl_tx_power_radio_supported_power_adjust>:
     160:	4908      	ldr	r1, [pc, #32]	; (184 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17>)
     162:	f991 2003 	ldrsb.w	r2, [r1, #3]
     166:	4290      	cmp	r0, r2
     168:	da03      	bge.n	172 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5>
     16a:	f991 2002 	ldrsb.w	r2, [r1, #2]
     16e:	4290      	cmp	r0, r2
     170:	dc01      	bgt.n	176 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x9>
     172:	4610      	mov	r0, r2
     174:	4770      	bx	lr
     176:	6849      	ldr	r1, [r1, #4]
     178:	1a80      	subs	r0, r0, r2
     17a:	5c08      	ldrb	r0, [r1, r0]
     17c:	4902      	ldr	r1, [pc, #8]	; (188 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1b>)
     17e:	5608      	ldrsb	r0, [r1, r0]
     180:	4770      	bx	lr
     182:	0000      	.short	0x0000
     184:	20000028 	.word	0x20000028
     188:	0000a37a 	.word	0x0000a37a

0000018c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
     18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     190:	461c      	mov	r4, r3
     192:	4690      	mov	r8, r2
     194:	460d      	mov	r5, r1
     196:	4606      	mov	r6, r0
     198:	f06f 0715 	mvn.w	r7, #21
     19c:	2804      	cmp	r0, #4
     19e:	d804      	bhi.n	1aa <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     1a0:	b11c      	cbz	r4, 1aa <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     1a2:	f007 fc13 	bl	79cc <__udivmoddi4+0x2a0>
     1a6:	42a8      	cmp	r0, r5
     1a8:	d802      	bhi.n	1b0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
     1aa:	4638      	mov	r0, r7
     1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     1b0:	4805      	ldr	r0, [pc, #20]	; (1c8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
     1b2:	4642      	mov	r2, r8
     1b4:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     1b8:	b118      	cbz	r0, 1c2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     1ba:	5740      	ldrsb	r0, [r0, r5]
     1bc:	4282      	cmp	r2, r0
     1be:	dd00      	ble.n	1c2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     1c0:	4602      	mov	r2, r0
     1c2:	7022      	strb	r2, [r4, #0]
     1c4:	2000      	movs	r0, #0
     1c6:	e7f1      	b.n	1ac <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
     1c8:	20000638 	.word	0x20000638

000001cc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     1cc:	4801      	ldr	r0, [pc, #4]	; (1d4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     1ce:	7800      	ldrb	r0, [r0, #0]
     1d0:	4770      	bx	lr
     1d2:	0000      	.short	0x0000
     1d4:	20000030 	.word	0x20000030

000001d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     1d8:	4905      	ldr	r1, [pc, #20]	; (1f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     1da:	780a      	ldrb	r2, [r1, #0]
     1dc:	4290      	cmp	r0, r2
     1de:	d301      	bcc.n	1e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     1e0:	2000      	movs	r0, #0
     1e2:	4770      	bx	lr
     1e4:	6849      	ldr	r1, [r1, #4]
     1e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     1ea:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     1ee:	4770      	bx	lr
     1f0:	20000030 	.word	0x20000030

000001f4 <MPSL_IRQ_RADIO_Handler>:
     1f4:	490e      	ldr	r1, [pc, #56]	; (230 <MPSL_IRQ_RADIO_Handler+0x3c>)
     1f6:	b510      	push	{r4, lr}
     1f8:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     1fc:	2820      	cmp	r0, #32
     1fe:	d012      	beq.n	226 <MPSL_IRQ_RADIO_Handler+0x32>
     200:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     204:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
     208:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     20c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
     210:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
     214:	6840      	ldr	r0, [r0, #4]
     216:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     21a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
     21e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     222:	2104      	movs	r1, #4
     224:	4710      	bx	r2
     226:	f640 01bc 	movw	r1, #2236	; 0x8bc
     22a:	2070      	movs	r0, #112	; 0x70
     22c:	f003 fa16 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     230:	20000a4c 	.word	0x20000a4c
     234:	b570      	push	{r4, r5, r6, lr}
     236:	4605      	mov	r5, r0
     238:	2a20      	cmp	r2, #32
     23a:	d028      	beq.n	28e <MPSL_IRQ_RADIO_Handler+0x9a>
     23c:	4819      	ldr	r0, [pc, #100]	; (2a4 <MPSL_IRQ_RADIO_Handler+0xb0>)
     23e:	4c1a      	ldr	r4, [pc, #104]	; (2a8 <MPSL_IRQ_RADIO_Handler+0xb4>)
     240:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     244:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     248:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     24c:	4423      	add	r3, r4
     24e:	2920      	cmp	r1, #32
     250:	d022      	beq.n	298 <MPSL_IRQ_RADIO_Handler+0xa4>
     252:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     256:	7840      	ldrb	r0, [r0, #1]
     258:	784c      	ldrb	r4, [r1, #1]
     25a:	7048      	strb	r0, [r1, #1]
     25c:	4620      	mov	r0, r4
     25e:	4601      	mov	r1, r0
     260:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     264:	4291      	cmp	r1, r2
     266:	7005      	strb	r5, [r0, #0]
     268:	7840      	ldrb	r0, [r0, #1]
     26a:	d1f8      	bne.n	25e <MPSL_IRQ_RADIO_Handler+0x6a>
     26c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     270:	2a20      	cmp	r2, #32
     272:	bf1a      	itte	ne
     274:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     278:	7054      	strbne	r4, [r2, #1]
     27a:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     27e:	2220      	movs	r2, #32
     280:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     284:	f88c 2001 	strb.w	r2, [ip, #1]
     288:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     28c:	bd70      	pop	{r4, r5, r6, pc}
     28e:	f44f 7126 	mov.w	r1, #664	; 0x298
     292:	2070      	movs	r0, #112	; 0x70
     294:	f003 f9e2 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     298:	f893 4020 	ldrb.w	r4, [r3, #32]
     29c:	7840      	ldrb	r0, [r0, #1]
     29e:	f883 0020 	strb.w	r0, [r3, #32]
     2a2:	e7db      	b.n	25c <MPSL_IRQ_RADIO_Handler+0x68>
     2a4:	200009cc 	.word	0x200009cc
     2a8:	20000a4c 	.word	0x20000a4c
     2ac:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     2b0:	b08d      	sub	sp, #52	; 0x34
     2b2:	4615      	mov	r5, r2
     2b4:	460c      	mov	r4, r1
     2b6:	f002 f94b 	bl	2550 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     2ba:	4428      	add	r0, r5
     2bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     2c0:	9008      	str	r0, [sp, #32]
     2c2:	6821      	ldr	r1, [r4, #0]
     2c4:	1a08      	subs	r0, r1, r0
     2c6:	0200      	lsls	r0, r0, #8
     2c8:	17c1      	asrs	r1, r0, #31
     2ca:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     2ce:	1200      	asrs	r0, r0, #8
     2d0:	2800      	cmp	r0, #0
     2d2:	f300 80f0 	bgt.w	4b6 <__data_size+0x9f>
     2d6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
     2da:	48cd      	ldr	r0, [pc, #820]	; (610 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>)
     2dc:	eb08 0148 	add.w	r1, r8, r8, lsl #1
     2e0:	4408      	add	r0, r1
     2e2:	9009      	str	r0, [sp, #36]	; 0x24
     2e4:	f890 5020 	ldrb.w	r5, [r0, #32]
     2e8:	2020      	movs	r0, #32
     2ea:	4eca      	ldr	r6, [pc, #808]	; (614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>)
     2ec:	f10d 0a18 	add.w	sl, sp, #24
     2f0:	f10d 091c 	add.w	r9, sp, #28
     2f4:	f88d 0018 	strb.w	r0, [sp, #24]
     2f8:	2d20      	cmp	r5, #32
     2fa:	bf1c      	itt	ne
     2fc:	48c6      	ldrne	r0, [pc, #792]	; (618 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>)
     2fe:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     302:	d038      	beq.n	376 <MPSL_IRQ_RADIO_Handler+0x182>
     304:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     308:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     30c:	f100 0108 	add.w	r1, r0, #8
     310:	68c0      	ldr	r0, [r0, #12]
     312:	6827      	ldr	r7, [r4, #0]
     314:	1a38      	subs	r0, r7, r0
     316:	0200      	lsls	r0, r0, #8
     318:	17c2      	asrs	r2, r0, #31
     31a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     31e:	1200      	asrs	r0, r0, #8
     320:	d429      	bmi.n	376 <MPSL_IRQ_RADIO_Handler+0x182>
     322:	89e0      	ldrh	r0, [r4, #14]
     324:	b300      	cbz	r0, 368 <MPSL_IRQ_RADIO_Handler+0x174>
     326:	89c8      	ldrh	r0, [r1, #14]
     328:	b9f0      	cbnz	r0, 368 <MPSL_IRQ_RADIO_Handler+0x174>
     32a:	6808      	ldr	r0, [r1, #0]
     32c:	9003      	str	r0, [sp, #12]
     32e:	f003 f809 	bl	3344 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     332:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     336:	bf08      	it	eq
     338:	200d      	moveq	r0, #13
     33a:	d00b      	beq.n	354 <MPSL_IRQ_RADIO_Handler+0x160>
     33c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     340:	3856      	subs	r0, #86	; 0x56
     342:	bf08      	it	eq
     344:	201c      	moveq	r0, #28
     346:	d005      	beq.n	354 <MPSL_IRQ_RADIO_Handler+0x160>
     348:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     34c:	389f      	subs	r0, #159	; 0x9f
     34e:	bf14      	ite	ne
     350:	2000      	movne	r0, #0
     352:	2032      	moveq	r0, #50	; 0x32
     354:	1c41      	adds	r1, r0, #1
     356:	9803      	ldr	r0, [sp, #12]
     358:	1a38      	subs	r0, r7, r0
     35a:	0200      	lsls	r0, r0, #8
     35c:	17c2      	asrs	r2, r0, #31
     35e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     362:	1200      	asrs	r0, r0, #8
     364:	4288      	cmp	r0, r1
     366:	db06      	blt.n	376 <MPSL_IRQ_RADIO_Handler+0x182>
     368:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     36c:	f88a 5000 	strb.w	r5, [sl]
     370:	7845      	ldrb	r5, [r0, #1]
     372:	2d20      	cmp	r5, #32
     374:	d1c6      	bne.n	304 <MPSL_IRQ_RADIO_Handler+0x110>
     376:	f89a 0000 	ldrb.w	r0, [sl]
     37a:	f889 0000 	strb.w	r0, [r9]
     37e:	2d20      	cmp	r5, #32
     380:	bf1c      	itt	ne
     382:	48a5      	ldrne	r0, [pc, #660]	; (618 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>)
     384:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     388:	f000 813e 	beq.w	608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     38c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     390:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     394:	6861      	ldr	r1, [r4, #4]
     396:	f8d7 8008 	ldr.w	r8, [r7, #8]
     39a:	f107 0008 	add.w	r0, r7, #8
     39e:	eba8 0101 	sub.w	r1, r8, r1
     3a2:	0209      	lsls	r1, r1, #8
     3a4:	17ca      	asrs	r2, r1, #31
     3a6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     3aa:	1209      	asrs	r1, r1, #8
     3ac:	d427      	bmi.n	3fe <MPSL_IRQ_RADIO_Handler+0x20a>
     3ae:	89c0      	ldrh	r0, [r0, #14]
     3b0:	2800      	cmp	r0, #0
     3b2:	f000 8129 	beq.w	608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     3b6:	89e0      	ldrh	r0, [r4, #14]
     3b8:	2800      	cmp	r0, #0
     3ba:	f040 8125 	bne.w	608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     3be:	f8d4 a000 	ldr.w	sl, [r4]
     3c2:	f002 ffbf 	bl	3344 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     3c6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     3ca:	bf08      	it	eq
     3cc:	200d      	moveq	r0, #13
     3ce:	d00b      	beq.n	3e8 <MPSL_IRQ_RADIO_Handler+0x1f4>
     3d0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     3d4:	3856      	subs	r0, #86	; 0x56
     3d6:	bf08      	it	eq
     3d8:	201c      	moveq	r0, #28
     3da:	d005      	beq.n	3e8 <MPSL_IRQ_RADIO_Handler+0x1f4>
     3dc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     3e0:	389f      	subs	r0, #159	; 0x9f
     3e2:	bf14      	ite	ne
     3e4:	2000      	movne	r0, #0
     3e6:	2032      	moveq	r0, #50	; 0x32
     3e8:	1c41      	adds	r1, r0, #1
     3ea:	eba8 000a 	sub.w	r0, r8, sl
     3ee:	0200      	lsls	r0, r0, #8
     3f0:	17c2      	asrs	r2, r0, #31
     3f2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     3f6:	1200      	asrs	r0, r0, #8
     3f8:	4288      	cmp	r0, r1
     3fa:	f280 8105 	bge.w	608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     3fe:	f889 5000 	strb.w	r5, [r9]
     402:	7e38      	ldrb	r0, [r7, #24]
     404:	7c21      	ldrb	r1, [r4, #16]
     406:	4288      	cmp	r0, r1
     408:	d906      	bls.n	418 <__data_size+0x1>
     40a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     40e:	7845      	ldrb	r5, [r0, #1]
     410:	2d20      	cmp	r5, #32
     412:	d1bb      	bne.n	38c <MPSL_IRQ_RADIO_Handler+0x198>
     414:	f000 b8f8 	b.w	608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     418:	f89d 001c 	ldrb.w	r0, [sp, #28]
     41c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     420:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     424:	8ac1      	ldrh	r1, [r0, #22]
     426:	68c5      	ldr	r5, [r0, #12]
     428:	bbe1      	cbnz	r1, 4a4 <__data_size+0x8d>
     42a:	89e1      	ldrh	r1, [r4, #14]
     42c:	b3d1      	cbz	r1, 4a4 <__data_size+0x8d>
     42e:	6887      	ldr	r7, [r0, #8]
     430:	f002 ff88 	bl	3344 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     434:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     438:	bf08      	it	eq
     43a:	200d      	moveq	r0, #13
     43c:	d00b      	beq.n	456 <__data_size+0x3f>
     43e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     442:	3856      	subs	r0, #86	; 0x56
     444:	bf08      	it	eq
     446:	201c      	moveq	r0, #28
     448:	d005      	beq.n	456 <__data_size+0x3f>
     44a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     44e:	389f      	subs	r0, #159	; 0x9f
     450:	bf14      	ite	ne
     452:	2000      	movne	r0, #0
     454:	2032      	moveq	r0, #50	; 0x32
     456:	1c41      	adds	r1, r0, #1
     458:	1be8      	subs	r0, r5, r7
     45a:	0200      	lsls	r0, r0, #8
     45c:	17c2      	asrs	r2, r0, #31
     45e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     462:	1200      	asrs	r0, r0, #8
     464:	4288      	cmp	r0, r1
     466:	da1d      	bge.n	4a4 <__data_size+0x8d>
     468:	f002 ff6c 	bl	3344 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     46c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     470:	bf08      	it	eq
     472:	200d      	moveq	r0, #13
     474:	d00b      	beq.n	48e <__data_size+0x77>
     476:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     47a:	3856      	subs	r0, #86	; 0x56
     47c:	bf08      	it	eq
     47e:	201c      	moveq	r0, #28
     480:	d005      	beq.n	48e <__data_size+0x77>
     482:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     486:	389f      	subs	r0, #159	; 0x9f
     488:	bf14      	ite	ne
     48a:	2000      	movne	r0, #0
     48c:	2032      	moveq	r0, #50	; 0x32
     48e:	f89d 101c 	ldrb.w	r1, [sp, #28]
     492:	1c40      	adds	r0, r0, #1
     494:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     498:	eb06 0181 	add.w	r1, r6, r1, lsl #2
     49c:	6889      	ldr	r1, [r1, #8]
     49e:	4408      	add	r0, r1
     4a0:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
     4a4:	9808      	ldr	r0, [sp, #32]
     4a6:	1a28      	subs	r0, r5, r0
     4a8:	0200      	lsls	r0, r0, #8
     4aa:	17c1      	asrs	r1, r0, #31
     4ac:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     4b0:	1200      	asrs	r0, r0, #8
     4b2:	2800      	cmp	r0, #0
     4b4:	dd03      	ble.n	4be <__data_size+0xa7>
     4b6:	b011      	add	sp, #68	; 0x44
     4b8:	2000      	movs	r0, #0
     4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     4be:	6820      	ldr	r0, [r4, #0]
     4c0:	42a8      	cmp	r0, r5
     4c2:	d902      	bls.n	4ca <__data_size+0xb3>
     4c4:	68a1      	ldr	r1, [r4, #8]
     4c6:	1c49      	adds	r1, r1, #1
     4c8:	60a1      	str	r1, [r4, #8]
     4ca:	6861      	ldr	r1, [r4, #4]
     4cc:	f10d 0a18 	add.w	sl, sp, #24
     4d0:	1a08      	subs	r0, r1, r0
     4d2:	4428      	add	r0, r5
     4d4:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
     4d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4dc:	e9c4 1000 	strd	r1, r0, [r4]
     4e0:	9810      	ldr	r0, [sp, #64]	; 0x40
     4e2:	900b      	str	r0, [sp, #44]	; 0x2c
     4e4:	9809      	ldr	r0, [sp, #36]	; 0x24
     4e6:	f10d 081c 	add.w	r8, sp, #28
     4ea:	f890 5020 	ldrb.w	r5, [r0, #32]
     4ee:	2020      	movs	r0, #32
     4f0:	f88d 0018 	strb.w	r0, [sp, #24]
     4f4:	2d20      	cmp	r5, #32
     4f6:	d03c      	beq.n	572 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8a>
     4f8:	4947      	ldr	r1, [pc, #284]	; (618 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>)
     4fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
     4fc:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
     500:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     504:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     508:	f100 0108 	add.w	r1, r0, #8
     50c:	68c0      	ldr	r0, [r0, #12]
     50e:	6827      	ldr	r7, [r4, #0]
     510:	1a38      	subs	r0, r7, r0
     512:	0200      	lsls	r0, r0, #8
     514:	17c2      	asrs	r2, r0, #31
     516:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     51a:	1200      	asrs	r0, r0, #8
     51c:	d429      	bmi.n	572 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8a>
     51e:	89e0      	ldrh	r0, [r4, #14]
     520:	b300      	cbz	r0, 564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>
     522:	89c8      	ldrh	r0, [r1, #14]
     524:	b9f0      	cbnz	r0, 564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>
     526:	f8d1 9000 	ldr.w	r9, [r1]
     52a:	f002 ff0b 	bl	3344 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     52e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     532:	bf08      	it	eq
     534:	200d      	moveq	r0, #13
     536:	d00b      	beq.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     538:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     53c:	3856      	subs	r0, #86	; 0x56
     53e:	bf08      	it	eq
     540:	201c      	moveq	r0, #28
     542:	d005      	beq.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     544:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     548:	389f      	subs	r0, #159	; 0x9f
     54a:	bf14      	ite	ne
     54c:	2000      	movne	r0, #0
     54e:	2032      	moveq	r0, #50	; 0x32
     550:	1c41      	adds	r1, r0, #1
     552:	eba7 0009 	sub.w	r0, r7, r9
     556:	0200      	lsls	r0, r0, #8
     558:	17c2      	asrs	r2, r0, #31
     55a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     55e:	1200      	asrs	r0, r0, #8
     560:	4288      	cmp	r0, r1
     562:	db06      	blt.n	572 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8a>
     564:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     568:	f88a 5000 	strb.w	r5, [sl]
     56c:	7845      	ldrb	r5, [r0, #1]
     56e:	2d20      	cmp	r5, #32
     570:	d1c6      	bne.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
     572:	f89a 0000 	ldrb.w	r0, [sl]
     576:	f888 0000 	strb.w	r0, [r8]
     57a:	980b      	ldr	r0, [sp, #44]	; 0x2c
     57c:	2d20      	cmp	r5, #32
     57e:	bf1c      	itt	ne
     580:	4925      	ldrne	r1, [pc, #148]	; (618 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>)
     582:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
     586:	d03f      	beq.n	608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     588:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     58c:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     590:	6860      	ldr	r0, [r4, #4]
     592:	f8d7 9008 	ldr.w	r9, [r7, #8]
     596:	f107 0108 	add.w	r1, r7, #8
     59a:	eba9 0000 	sub.w	r0, r9, r0
     59e:	0200      	lsls	r0, r0, #8
     5a0:	17c2      	asrs	r2, r0, #31
     5a2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     5a6:	1200      	asrs	r0, r0, #8
     5a8:	d422      	bmi.n	5f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x108>
     5aa:	89c8      	ldrh	r0, [r1, #14]
     5ac:	b360      	cbz	r0, 608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     5ae:	89e0      	ldrh	r0, [r4, #14]
     5b0:	bb50      	cbnz	r0, 608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     5b2:	f8d4 a000 	ldr.w	sl, [r4]
     5b6:	f002 fec5 	bl	3344 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     5ba:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     5be:	bf08      	it	eq
     5c0:	200d      	moveq	r0, #13
     5c2:	d00b      	beq.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     5c4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     5c8:	3856      	subs	r0, #86	; 0x56
     5ca:	bf08      	it	eq
     5cc:	201c      	moveq	r0, #28
     5ce:	d005      	beq.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     5d0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     5d4:	389f      	subs	r0, #159	; 0x9f
     5d6:	bf14      	ite	ne
     5d8:	2000      	movne	r0, #0
     5da:	2032      	moveq	r0, #50	; 0x32
     5dc:	1c41      	adds	r1, r0, #1
     5de:	eba9 000a 	sub.w	r0, r9, sl
     5e2:	0200      	lsls	r0, r0, #8
     5e4:	17c2      	asrs	r2, r0, #31
     5e6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     5ea:	1200      	asrs	r0, r0, #8
     5ec:	4288      	cmp	r0, r1
     5ee:	da0b      	bge.n	608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     5f0:	f888 5000 	strb.w	r5, [r8]
     5f4:	7e38      	ldrb	r0, [r7, #24]
     5f6:	7c21      	ldrb	r1, [r4, #16]
     5f8:	4288      	cmp	r0, r1
     5fa:	f67f af0d 	bls.w	418 <__data_size+0x1>
     5fe:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     602:	7845      	ldrb	r5, [r0, #1]
     604:	2d20      	cmp	r5, #32
     606:	d1bf      	bne.n	588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>
     608:	b011      	add	sp, #68	; 0x44
     60a:	2001      	movs	r0, #1
     60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     610:	20000a4c 	.word	0x20000a4c
     614:	2000064c 	.word	0x2000064c
     618:	200009cc 	.word	0x200009cc
     61c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     620:	460f      	mov	r7, r1
     622:	4606      	mov	r6, r0
     624:	eb01 0047 	add.w	r0, r1, r7, lsl #1
     628:	494b      	ldr	r1, [pc, #300]	; (758 <CONFIG_BT_HCI_TX_STACK_SIZE+0x158>)
     62a:	4699      	mov	r9, r3
     62c:	4408      	add	r0, r1
     62e:	4692      	mov	sl, r2
     630:	f890 4020 	ldrb.w	r4, [r0, #32]
     634:	2020      	movs	r0, #32
     636:	7010      	strb	r0, [r2, #0]
     638:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
     63c:	2c20      	cmp	r4, #32
     63e:	bf1c      	itt	ne
     640:	4846      	ldrne	r0, [pc, #280]	; (75c <CONFIG_BT_HCI_TX_STACK_SIZE+0x15c>)
     642:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     646:	d038      	beq.n	6ba <CONFIG_BT_HCI_TX_STACK_SIZE+0xba>
     648:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     64c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
     650:	f100 0108 	add.w	r1, r0, #8
     654:	68c0      	ldr	r0, [r0, #12]
     656:	6835      	ldr	r5, [r6, #0]
     658:	1a28      	subs	r0, r5, r0
     65a:	0200      	lsls	r0, r0, #8
     65c:	17c2      	asrs	r2, r0, #31
     65e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     662:	1200      	asrs	r0, r0, #8
     664:	d429      	bmi.n	6ba <CONFIG_BT_HCI_TX_STACK_SIZE+0xba>
     666:	89f0      	ldrh	r0, [r6, #14]
     668:	b300      	cbz	r0, 6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     66a:	89c8      	ldrh	r0, [r1, #14]
     66c:	b9f0      	cbnz	r0, 6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     66e:	6808      	ldr	r0, [r1, #0]
     670:	9000      	str	r0, [sp, #0]
     672:	f002 fe67 	bl	3344 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     676:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     67a:	bf08      	it	eq
     67c:	200d      	moveq	r0, #13
     67e:	d00b      	beq.n	698 <CONFIG_BT_HCI_TX_STACK_SIZE+0x98>
     680:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     684:	3856      	subs	r0, #86	; 0x56
     686:	bf08      	it	eq
     688:	201c      	moveq	r0, #28
     68a:	d005      	beq.n	698 <CONFIG_BT_HCI_TX_STACK_SIZE+0x98>
     68c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     690:	389f      	subs	r0, #159	; 0x9f
     692:	bf14      	ite	ne
     694:	2000      	movne	r0, #0
     696:	2032      	moveq	r0, #50	; 0x32
     698:	1c41      	adds	r1, r0, #1
     69a:	9800      	ldr	r0, [sp, #0]
     69c:	1a28      	subs	r0, r5, r0
     69e:	0200      	lsls	r0, r0, #8
     6a0:	17c2      	asrs	r2, r0, #31
     6a2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     6a6:	1200      	asrs	r0, r0, #8
     6a8:	4288      	cmp	r0, r1
     6aa:	db06      	blt.n	6ba <CONFIG_BT_HCI_TX_STACK_SIZE+0xba>
     6ac:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
     6b0:	f88a 4000 	strb.w	r4, [sl]
     6b4:	7844      	ldrb	r4, [r0, #1]
     6b6:	2c20      	cmp	r4, #32
     6b8:	d1c6      	bne.n	648 <CONFIG_BT_HCI_TX_STACK_SIZE+0x48>
     6ba:	f89a 0000 	ldrb.w	r0, [sl]
     6be:	f889 0000 	strb.w	r0, [r9]
     6c2:	2c20      	cmp	r4, #32
     6c4:	bf1c      	itt	ne
     6c6:	4825      	ldrne	r0, [pc, #148]	; (75c <CONFIG_BT_HCI_TX_STACK_SIZE+0x15c>)
     6c8:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
     6cc:	d040      	beq.n	750 <CONFIG_BT_HCI_TX_STACK_SIZE+0x150>
     6ce:	bf00      	nop
     6d0:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     6d4:	eb08 0780 	add.w	r7, r8, r0, lsl #2
     6d8:	6870      	ldr	r0, [r6, #4]
     6da:	68bd      	ldr	r5, [r7, #8]
     6dc:	f107 0108 	add.w	r1, r7, #8
     6e0:	1a28      	subs	r0, r5, r0
     6e2:	0200      	lsls	r0, r0, #8
     6e4:	17c2      	asrs	r2, r0, #31
     6e6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     6ea:	1200      	asrs	r0, r0, #8
     6ec:	d422      	bmi.n	734 <CONFIG_BT_HCI_TX_STACK_SIZE+0x134>
     6ee:	89c8      	ldrh	r0, [r1, #14]
     6f0:	b370      	cbz	r0, 750 <CONFIG_BT_HCI_TX_STACK_SIZE+0x150>
     6f2:	89f0      	ldrh	r0, [r6, #14]
     6f4:	bb60      	cbnz	r0, 750 <CONFIG_BT_HCI_TX_STACK_SIZE+0x150>
     6f6:	f8d6 b000 	ldr.w	fp, [r6]
     6fa:	f002 fe23 	bl	3344 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     6fe:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     702:	bf08      	it	eq
     704:	200d      	moveq	r0, #13
     706:	d00b      	beq.n	720 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     708:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     70c:	3856      	subs	r0, #86	; 0x56
     70e:	bf08      	it	eq
     710:	201c      	moveq	r0, #28
     712:	d005      	beq.n	720 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     714:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     718:	389f      	subs	r0, #159	; 0x9f
     71a:	bf14      	ite	ne
     71c:	2000      	movne	r0, #0
     71e:	2032      	moveq	r0, #50	; 0x32
     720:	1c41      	adds	r1, r0, #1
     722:	eba5 000b 	sub.w	r0, r5, fp
     726:	0200      	lsls	r0, r0, #8
     728:	17c2      	asrs	r2, r0, #31
     72a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     72e:	1200      	asrs	r0, r0, #8
     730:	4288      	cmp	r0, r1
     732:	da0d      	bge.n	750 <CONFIG_BT_HCI_TX_STACK_SIZE+0x150>
     734:	f889 4000 	strb.w	r4, [r9]
     738:	7e38      	ldrb	r0, [r7, #24]
     73a:	7c31      	ldrb	r1, [r6, #16]
     73c:	4288      	cmp	r0, r1
     73e:	d802      	bhi.n	746 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     740:	2000      	movs	r0, #0
     742:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     746:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
     74a:	7844      	ldrb	r4, [r0, #1]
     74c:	2c20      	cmp	r4, #32
     74e:	d1bf      	bne.n	6d0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd0>
     750:	2001      	movs	r0, #1
     752:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     756:	0000      	.short	0x0000
     758:	20000a4c 	.word	0x20000a4c
     75c:	200009cc 	.word	0x200009cc
     760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     764:	b098      	sub	sp, #96	; 0x60
     766:	4615      	mov	r5, r2
     768:	468b      	mov	fp, r1
     76a:	f002 f99f 	bl	2aac <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     76e:	4604      	mov	r4, r0
     770:	f002 fc1a 	bl	2fa8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     774:	4606      	mov	r6, r0
     776:	f1bb 0f01 	cmp.w	fp, #1
     77a:	bf18      	it	ne
     77c:	f1bb 0f02 	cmpne.w	fp, #2
     780:	d005      	beq.n	78e <CONFIG_BT_HCI_TX_STACK_SIZE+0x18e>
     782:	f640 1192 	movw	r1, #2450	; 0x992
     786:	f04f 0070 	mov.w	r0, #112	; 0x70
     78a:	f002 ff67 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     78e:	49ff      	ldr	r1, [pc, #1020]	; (b8c <CONFIG_ISR_STACK_SIZE+0x38c>)
     790:	2001      	movs	r0, #1
     792:	6008      	str	r0, [r1, #0]
     794:	49fe      	ldr	r1, [pc, #1016]	; (b90 <CONFIG_ISR_STACK_SIZE+0x390>)
     796:	6889      	ldr	r1, [r1, #8]
     798:	6008      	str	r0, [r1, #0]
     79a:	2000      	movs	r0, #0
     79c:	f88d 0056 	strb.w	r0, [sp, #86]	; 0x56
     7a0:	900e      	str	r0, [sp, #56]	; 0x38
     7a2:	1e40      	subs	r0, r0, #1
     7a4:	900f      	str	r0, [sp, #60]	; 0x3c
     7a6:	49fb      	ldr	r1, [pc, #1004]	; (b94 <CONFIG_ISR_STACK_SIZE+0x394>)
     7a8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     7ac:	eb01 0180 	add.w	r1, r1, r0, lsl #2
     7b0:	e9d1 0c02 	ldrd	r0, ip, [r1, #8]
     7b4:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     7b8:	e9cd 0c10 	strd	r0, ip, [sp, #64]	; 0x40
     7bc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
     7c0:	6989      	ldr	r1, [r1, #24]
     7c2:	9114      	str	r1, [sp, #80]	; 0x50
     7c4:	f007 f939 	bl	7a3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     7c8:	4601      	mov	r1, r0
     7ca:	f8bd 804e 	ldrh.w	r8, [sp, #78]	; 0x4e
     7ce:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     7d2:	4bf1      	ldr	r3, [pc, #964]	; (b98 <CONFIG_ISR_STACK_SIZE+0x398>)
     7d4:	4440      	add	r0, r8
     7d6:	1c42      	adds	r2, r0, #1
     7d8:	1888      	adds	r0, r1, r2
     7da:	4299      	cmp	r1, r3
     7dc:	d84f      	bhi.n	87e <CONFIG_ISR_STACK_SIZE+0x7e>
     7de:	4def      	ldr	r5, [pc, #956]	; (b9c <CONFIG_ISR_STACK_SIZE+0x39c>)
     7e0:	42aa      	cmp	r2, r5
     7e2:	dc53      	bgt.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     7e4:	4269      	negs	r1, r5
     7e6:	428a      	cmp	r2, r1
     7e8:	db58      	blt.n	89c <CONFIG_ISR_STACK_SIZE+0x9c>
     7ea:	1c59      	adds	r1, r3, #1
     7ec:	4281      	cmp	r1, r0
     7ee:	bfdc      	itt	le
     7f0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     7f4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     7f8:	dd05      	ble.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
     7fa:	2800      	cmp	r0, #0
     7fc:	bfbc      	itt	lt
     7fe:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     802:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     806:	900c      	str	r0, [sp, #48]	; 0x30
     808:	48e5      	ldr	r0, [pc, #916]	; (ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>)
     80a:	f1b8 0f00 	cmp.w	r8, #0
     80e:	8b80      	ldrh	r0, [r0, #28]
     810:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
     814:	bf04      	itt	eq
     816:	2000      	moveq	r0, #0
     818:	900b      	streq	r0, [sp, #44]	; 0x2c
     81a:	d00b      	beq.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
     81c:	2001      	movs	r0, #1
     81e:	900b      	str	r0, [sp, #44]	; 0x2c
     820:	48df      	ldr	r0, [pc, #892]	; (ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>)
     822:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
     826:	b928      	cbnz	r0, 834 <CONFIG_ISR_STACK_SIZE+0x34>
     828:	f002 fea0 	bl	356c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     82c:	2800      	cmp	r0, #0
     82e:	bf08      	it	eq
     830:	2701      	moveq	r7, #1
     832:	d000      	beq.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     834:	2700      	movs	r7, #0
     836:	f002 fd85 	bl	3344 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     83a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     83e:	bf08      	it	eq
     840:	200d      	moveq	r0, #13
     842:	d00b      	beq.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
     844:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     848:	3856      	subs	r0, #86	; 0x56
     84a:	bf08      	it	eq
     84c:	201c      	moveq	r0, #28
     84e:	d005      	beq.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
     850:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     854:	389f      	subs	r0, #159	; 0x9f
     856:	bf14      	ite	ne
     858:	2000      	movne	r0, #0
     85a:	2032      	moveq	r0, #50	; 0x32
     85c:	f04f 0900 	mov.w	r9, #0
     860:	46ca      	mov	sl, r9
     862:	9009      	str	r0, [sp, #36]	; 0x24
     864:	4546      	cmp	r6, r8
     866:	d937      	bls.n	8d8 <CONFIG_ISR_STACK_SIZE+0xd8>
     868:	990c      	ldr	r1, [sp, #48]	; 0x30
     86a:	f8df 932c 	ldr.w	r9, [pc, #812]	; b98 <CONFIG_ISR_STACK_SIZE+0x398>
     86e:	ea6f 0c06 	mvn.w	ip, r6
     872:	466b      	mov	r3, sp
     874:	aa16      	add	r2, sp, #88	; 0x58
     876:	eb01 000c 	add.w	r0, r1, ip
     87a:	4549      	cmp	r1, r9
     87c:	d904      	bls.n	888 <CONFIG_ISR_STACK_SIZE+0x88>
     87e:	f240 519e 	movw	r1, #1438	; 0x59e
     882:	2070      	movs	r0, #112	; 0x70
     884:	f002 feea 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     888:	45ac      	cmp	ip, r5
     88a:	dd04      	ble.n	896 <CONFIG_ISR_STACK_SIZE+0x96>
     88c:	f240 519f 	movw	r1, #1439	; 0x59f
     890:	2070      	movs	r0, #112	; 0x70
     892:	f002 fee3 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     896:	49c3      	ldr	r1, [pc, #780]	; (ba4 <CONFIG_ISR_STACK_SIZE+0x3a4>)
     898:	458c      	cmp	ip, r1
     89a:	da04      	bge.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
     89c:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
     8a0:	2070      	movs	r0, #112	; 0x70
     8a2:	f002 fedb 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     8a6:	49c0      	ldr	r1, [pc, #768]	; (ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>)
     8a8:	4281      	cmp	r1, r0
     8aa:	bfdc      	itt	le
     8ac:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     8b0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     8b4:	dd05      	ble.n	8c2 <CONFIG_ISR_STACK_SIZE+0xc2>
     8b6:	2800      	cmp	r0, #0
     8b8:	bfbc      	itt	lt
     8ba:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     8be:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     8c2:	4619      	mov	r1, r3
     8c4:	f001 fe60 	bl	2588 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     8c8:	9800      	ldr	r0, [sp, #0]
     8ca:	9910      	ldr	r1, [sp, #64]	; 0x40
     8cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     8d0:	9000      	str	r0, [sp, #0]
     8d2:	1a08      	subs	r0, r1, r0
     8d4:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
     8d8:	2f00      	cmp	r7, #0
     8da:	bf18      	it	ne
     8dc:	f8dd a024 	ldrne.w	sl, [sp, #36]	; 0x24
     8e0:	d105      	bne.n	8ee <CONFIG_ISR_STACK_SIZE+0xee>
     8e2:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
     8e6:	2800      	cmp	r0, #0
     8e8:	bf18      	it	ne
     8ea:	f04f 0a02 	movne.w	sl, #2
     8ee:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     8f2:	d008      	beq.n	906 <CONFIG_ISR_STACK_SIZE+0x106>
     8f4:	9810      	ldr	r0, [sp, #64]	; 0x40
     8f6:	1b00      	subs	r0, r0, r4
     8f8:	0200      	lsls	r0, r0, #8
     8fa:	17c1      	asrs	r1, r0, #31
     8fc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     900:	1200      	asrs	r0, r0, #8
     902:	2801      	cmp	r0, #1
     904:	da02      	bge.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
     906:	2003      	movs	r0, #3
     908:	9d18      	ldr	r5, [sp, #96]	; 0x60
     90a:	e00d      	b.n	928 <CONFIG_ISR_STACK_SIZE+0x128>
     90c:	b157      	cbz	r7, 924 <CONFIG_ISR_STACK_SIZE+0x124>
     90e:	48a4      	ldr	r0, [pc, #656]	; (ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>)
     910:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
     914:	b130      	cbz	r0, 924 <CONFIG_ISR_STACK_SIZE+0x124>
     916:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
     91a:	f110 0a00 	adds.w	sl, r0, #0
     91e:	bf18      	it	ne
     920:	f04f 0a02 	movne.w	sl, #2
     924:	4625      	mov	r5, r4
     926:	2000      	movs	r0, #0
     928:	4482      	add	sl, r0
     92a:	9810      	ldr	r0, [sp, #64]	; 0x40
     92c:	eba0 0009 	sub.w	r0, r0, r9
     930:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     934:	1e50      	subs	r0, r2, #1
     936:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     93a:	1b41      	subs	r1, r0, r5
     93c:	0209      	lsls	r1, r1, #8
     93e:	17cb      	asrs	r3, r1, #31
     940:	eb01 6113 	add.w	r1, r1, r3, lsr #24
     944:	1209      	asrs	r1, r1, #8
     946:	4551      	cmp	r1, sl
     948:	db04      	blt.n	954 <CONFIG_ISR_STACK_SIZE+0x154>
     94a:	f1b9 0f00 	cmp.w	r9, #0
     94e:	bf18      	it	ne
     950:	9210      	strne	r2, [sp, #64]	; 0x40
     952:	e02d      	b.n	9b0 <CONFIG_ISR_STACK_SIZE+0x1b0>
     954:	f1b9 0f00 	cmp.w	r9, #0
     958:	d005      	beq.n	966 <CONFIG_ISR_STACK_SIZE+0x166>
     95a:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
     95e:	b920      	cbnz	r0, 96a <CONFIG_ISR_STACK_SIZE+0x16a>
     960:	f002 fb18 	bl	2f94 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
     964:	b108      	cbz	r0, 96a <CONFIG_ISR_STACK_SIZE+0x16a>
     966:	b9af      	cbnz	r7, 994 <CONFIG_ISR_STACK_SIZE+0x194>
     968:	e00c      	b.n	984 <CONFIG_ISR_STACK_SIZE+0x184>
     96a:	b92f      	cbnz	r7, 978 <CONFIG_ISR_STACK_SIZE+0x178>
     96c:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
     970:	2800      	cmp	r0, #0
     972:	bf18      	it	ne
     974:	f1aa 0a02 	subne.w	sl, sl, #2
     978:	f04f 0900 	mov.w	r9, #0
     97c:	f88d 9054 	strb.w	r9, [sp, #84]	; 0x54
     980:	464e      	mov	r6, r9
     982:	e007      	b.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
     984:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
     988:	b120      	cbz	r0, 994 <CONFIG_ISR_STACK_SIZE+0x194>
     98a:	2000      	movs	r0, #0
     98c:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
     990:	f1aa 0a02 	sub.w	sl, sl, #2
     994:	9810      	ldr	r0, [sp, #64]	; 0x40
     996:	eba0 0009 	sub.w	r0, r0, r9
     99a:	1e40      	subs	r0, r0, #1
     99c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9a0:	1b41      	subs	r1, r0, r5
     9a2:	0209      	lsls	r1, r1, #8
     9a4:	17ca      	asrs	r2, r1, #31
     9a6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     9aa:	1209      	asrs	r1, r1, #8
     9ac:	4551      	cmp	r1, sl
     9ae:	db7c      	blt.n	aaa <CONFIG_ISR_STACK_SIZE+0x2aa>
     9b0:	970a      	str	r7, [sp, #40]	; 0x28
     9b2:	4605      	mov	r5, r0
     9b4:	f04f 0900 	mov.w	r9, #0
     9b8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
     9ba:	f001 ff4f 	bl	285c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     9be:	1a28      	subs	r0, r5, r0
     9c0:	0200      	lsls	r0, r0, #8
     9c2:	17c1      	asrs	r1, r0, #31
     9c4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     9c8:	ea4f 2a20 	mov.w	sl, r0, asr #8
     9cc:	f002 fcba 	bl	3344 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     9d0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     9d4:	bf08      	it	eq
     9d6:	200d      	moveq	r0, #13
     9d8:	d00b      	beq.n	9f2 <CONFIG_ISR_STACK_SIZE+0x1f2>
     9da:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     9de:	3856      	subs	r0, #86	; 0x56
     9e0:	bf08      	it	eq
     9e2:	201c      	moveq	r0, #28
     9e4:	d005      	beq.n	9f2 <CONFIG_ISR_STACK_SIZE+0x1f2>
     9e6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     9ea:	389f      	subs	r0, #159	; 0x9f
     9ec:	bf14      	ite	ne
     9ee:	2000      	movne	r0, #0
     9f0:	2032      	moveq	r0, #50	; 0x32
     9f2:	300b      	adds	r0, #11
     9f4:	4582      	cmp	sl, r0
     9f6:	da20      	bge.n	a3a <CONFIG_ISR_STACK_SIZE+0x23a>
     9f8:	f1bb 0f01 	cmp.w	fp, #1
     9fc:	d002      	beq.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
     9fe:	980a      	ldr	r0, [sp, #40]	; 0x28
     a00:	b140      	cbz	r0, a14 <CONFIG_ISR_STACK_SIZE+0x214>
     a02:	e012      	b.n	a2a <CONFIG_ISR_STACK_SIZE+0x22a>
     a04:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     a08:	d11c      	bne.n	a44 <CONFIG_ISR_STACK_SIZE+0x244>
     a0a:	f640 1113 	movw	r1, #2323	; 0x913
     a0e:	2070      	movs	r0, #112	; 0x70
     a10:	f002 fe24 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a14:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     a18:	d007      	beq.n	a2a <CONFIG_ISR_STACK_SIZE+0x22a>
     a1a:	1b60      	subs	r0, r4, r5
     a1c:	0200      	lsls	r0, r0, #8
     a1e:	17c1      	asrs	r1, r0, #31
     a20:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a24:	1200      	asrs	r0, r0, #8
     a26:	2804      	cmp	r0, #4
     a28:	dd04      	ble.n	a34 <CONFIG_ISR_STACK_SIZE+0x234>
     a2a:	462c      	mov	r4, r5
     a2c:	4620      	mov	r0, r4
     a2e:	f001 ff3b 	bl	28a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     a32:	e007      	b.n	a44 <CONFIG_ISR_STACK_SIZE+0x244>
     a34:	2800      	cmp	r0, #0
     a36:	dc64      	bgt.n	b02 <CONFIG_ISR_STACK_SIZE+0x302>
     a38:	e004      	b.n	a44 <CONFIG_ISR_STACK_SIZE+0x244>
     a3a:	462c      	mov	r4, r5
     a3c:	4620      	mov	r0, r4
     a3e:	f001 ff33 	bl	28a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     a42:	46b9      	mov	r9, r7
     a44:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     a48:	d056      	beq.n	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
     a4a:	9810      	ldr	r0, [sp, #64]	; 0x40
     a4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
     a4e:	1b00      	subs	r0, r0, r4
     a50:	1b12      	subs	r2, r2, r4
     a52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a56:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     a5a:	2801      	cmp	r0, #1
     a5c:	d351      	bcc.n	b02 <CONFIG_ISR_STACK_SIZE+0x302>
     a5e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     a62:	bf98      	it	ls
     a64:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
     a68:	d84b      	bhi.n	b02 <CONFIG_ISR_STACK_SIZE+0x302>
     a6a:	4620      	mov	r0, r4
     a6c:	f006 ffe5 	bl	7a3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     a70:	990c      	ldr	r1, [sp, #48]	; 0x30
     a72:	4a4a      	ldr	r2, [pc, #296]	; (b9c <CONFIG_ISR_STACK_SIZE+0x39c>)
     a74:	1a0d      	subs	r5, r1, r0
     a76:	f04f 0a00 	mov.w	sl, #0
     a7a:	1aaa      	subs	r2, r5, r2
     a7c:	f17a 0200 	sbcs.w	r2, sl, #0
     a80:	d318      	bcc.n	ab4 <CONFIG_ISR_STACK_SIZE+0x2b4>
     a82:	4b46      	ldr	r3, [pc, #280]	; (b9c <CONFIG_ISR_STACK_SIZE+0x39c>)
     a84:	1a42      	subs	r2, r0, r1
     a86:	1ad3      	subs	r3, r2, r3
     a88:	f17a 0300 	sbcs.w	r3, sl, #0
     a8c:	d312      	bcc.n	ab4 <CONFIG_ISR_STACK_SIZE+0x2b4>
     a8e:	4b42      	ldr	r3, [pc, #264]	; (b98 <CONFIG_ISR_STACK_SIZE+0x398>)
     a90:	42ab      	cmp	r3, r5
     a92:	bf3e      	ittt	cc
     a94:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
     a98:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
     a9c:	1845      	addcc	r5, r0, r1
     a9e:	d309      	bcc.n	ab4 <CONFIG_ISR_STACK_SIZE+0x2b4>
     aa0:	4293      	cmp	r3, r2
     aa2:	d232      	bcs.n	b0a <CONFIG_ISR_STACK_SIZE+0x30a>
     aa4:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
     aa8:	e000      	b.n	aac <CONFIG_ISR_STACK_SIZE+0x2ac>
     aaa:	e02a      	b.n	b02 <CONFIG_ISR_STACK_SIZE+0x302>
     aac:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
     ab0:	4408      	add	r0, r1
     ab2:	4245      	negs	r5, r0
     ab4:	4f3a      	ldr	r7, [pc, #232]	; (ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>)
     ab6:	7fb8      	ldrb	r0, [r7, #30]
     ab8:	b360      	cbz	r0, b14 <CONFIG_ISR_STACK_SIZE+0x314>
     aba:	bf00      	nop
     abc:	f1bb 0f01 	cmp.w	fp, #1
     ac0:	d005      	beq.n	ace <CONFIG_ISR_STACK_SIZE+0x2ce>
     ac2:	2002      	movs	r0, #2
     ac4:	f002 f92c 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     ac8:	2001      	movs	r0, #1
     aca:	f002 f929 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     ace:	45b0      	cmp	r8, r6
     ad0:	d22c      	bcs.n	b2c <CONFIG_ISR_STACK_SIZE+0x32c>
     ad2:	eba5 0106 	sub.w	r1, r5, r6
     ad6:	f04f 0002 	mov.w	r0, #2
     ada:	f002 f86b 	bl	2bb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     ade:	b390      	cbz	r0, b46 <CONFIG_ISR_STACK_SIZE+0x346>
     ae0:	f1b8 0f00 	cmp.w	r8, #0
     ae4:	bf1c      	itt	ne
     ae6:	eba5 0108 	subne.w	r1, r5, r8
     aea:	2001      	movne	r0, #1
     aec:	d034      	beq.n	b58 <CONFIG_ISR_STACK_SIZE+0x358>
     aee:	bf00      	nop
     af0:	f002 f860 	bl	2bb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     af4:	b338      	cbz	r0, b46 <CONFIG_ISR_STACK_SIZE+0x346>
     af6:	e02f      	b.n	b58 <CONFIG_ISR_STACK_SIZE+0x358>
     af8:	f640 2126 	movw	r1, #2598	; 0xa26
     afc:	2070      	movs	r0, #112	; 0x70
     afe:	f002 fdad 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b02:	b01b      	add	sp, #108	; 0x6c
     b04:	2000      	movs	r0, #0
     b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b0a:	f640 21fa 	movw	r1, #2810	; 0xafa
     b0e:	2070      	movs	r0, #112	; 0x70
     b10:	f002 fda4 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b14:	45b0      	cmp	r8, r6
     b16:	bf34      	ite	cc
     b18:	4630      	movcc	r0, r6
     b1a:	4640      	movcs	r0, r8
     b1c:	301e      	adds	r0, #30
     b1e:	42a8      	cmp	r0, r5
     b20:	dbcc      	blt.n	abc <CONFIG_ISR_STACK_SIZE+0x2bc>
     b22:	f640 213a 	movw	r1, #2618	; 0xa3a
     b26:	2070      	movs	r0, #112	; 0x70
     b28:	f002 fd98 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b2c:	d90c      	bls.n	b48 <CONFIG_ISR_STACK_SIZE+0x348>
     b2e:	eba5 0108 	sub.w	r1, r5, r8
     b32:	2001      	movs	r0, #1
     b34:	f002 f83e 	bl	2bb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     b38:	b128      	cbz	r0, b46 <CONFIG_ISR_STACK_SIZE+0x346>
     b3a:	2e00      	cmp	r6, #0
     b3c:	bf1c      	itt	ne
     b3e:	1ba9      	subne	r1, r5, r6
     b40:	2002      	movne	r0, #2
     b42:	d009      	beq.n	b58 <CONFIG_ISR_STACK_SIZE+0x358>
     b44:	e7d4      	b.n	af0 <CONFIG_ISR_STACK_SIZE+0x2f0>
     b46:	e041      	b.n	bcc <CONFIG_ISR_STACK_SIZE+0x3cc>
     b48:	ea56 0008 	orrs.w	r0, r6, r8
     b4c:	d004      	beq.n	b58 <CONFIG_ISR_STACK_SIZE+0x358>
     b4e:	f640 1176 	movw	r1, #2422	; 0x976
     b52:	2070      	movs	r0, #112	; 0x70
     b54:	f002 fd82 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b58:	4629      	mov	r1, r5
     b5a:	2000      	movs	r0, #0
     b5c:	f002 f82a 	bl	2bb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     b60:	b3a0      	cbz	r0, bcc <CONFIG_ISR_STACK_SIZE+0x3cc>
     b62:	980b      	ldr	r0, [sp, #44]	; 0x2c
     b64:	2601      	movs	r6, #1
     b66:	2800      	cmp	r0, #0
     b68:	bf04      	itt	eq
     b6a:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
     b6e:	2800      	cmpeq	r0, #0
     b70:	d002      	beq.n	b78 <CONFIG_ISR_STACK_SIZE+0x378>
     b72:	f1b9 0f00 	cmp.w	r9, #0
     b76:	d034      	beq.n	be2 <CONFIG_ISR_STACK_SIZE+0x3e2>
     b78:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
     b7c:	b118      	cbz	r0, b86 <CONFIG_ISR_STACK_SIZE+0x386>
     b7e:	f002 fbe7 	bl	3350 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     b82:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
     b86:	f1b9 0f00 	cmp.w	r9, #0
     b8a:	e00f      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
     b8c:	40000508 	.word	0x40000508
     b90:	20000038 	.word	0x20000038
     b94:	2000064c 	.word	0x2000064c
     b98:	1e847fff 	.word	0x1e847fff
     b9c:	0f424000 	.word	0x0f424000
     ba0:	20000a4c 	.word	0x20000a4c
     ba4:	f0bdc000 	.word	0xf0bdc000
     ba8:	1e848000 	.word	0x1e848000
     bac:	d01c      	beq.n	be8 <CONFIG_ISR_STACK_SIZE+0x3e8>
     bae:	9809      	ldr	r0, [sp, #36]	; 0x24
     bb0:	1a20      	subs	r0, r4, r0
     bb2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     bb6:	2005      	movs	r0, #5
     bb8:	f001 fffc 	bl	2bb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bbc:	b360      	cbz	r0, c18 <CONFIG_ISR_STACK_SIZE+0x418>
     bbe:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
     bc2:	2800      	cmp	r0, #0
     bc4:	bf08      	it	eq
     bc6:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
     bca:	e015      	b.n	bf8 <CONFIG_ISR_STACK_SIZE+0x3f8>
     bcc:	e7ff      	b.n	bce <CONFIG_ISR_STACK_SIZE+0x3ce>
     bce:	2002      	movs	r0, #2
     bd0:	f002 f8a6 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     bd4:	2001      	movs	r0, #1
     bd6:	f002 f8a3 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     bda:	b01b      	add	sp, #108	; 0x6c
     bdc:	2000      	movs	r0, #0
     bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     be2:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
     be6:	b190      	cbz	r0, c0e <CONFIG_ISR_STACK_SIZE+0x40e>
     be8:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
     bec:	b120      	cbz	r0, bf8 <CONFIG_ISR_STACK_SIZE+0x3f8>
     bee:	2005      	movs	r0, #5
     bf0:	f002 f896 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     bf4:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
     bf8:	eba5 0008 	sub.w	r0, r5, r8
     bfc:	f1a0 0119 	sub.w	r1, r0, #25
     c00:	2900      	cmp	r1, #0
     c02:	dc0e      	bgt.n	c22 <CONFIG_ISR_STACK_SIZE+0x422>
     c04:	f640 2163 	movw	r1, #2659	; 0xa63
     c08:	2070      	movs	r0, #112	; 0x70
     c0a:	f002 fd27 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c0e:	f002 fbbb 	bl	3388 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     c12:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
     c16:	e7b6      	b.n	b86 <CONFIG_ISR_STACK_SIZE+0x386>
     c18:	f44f 713e 	mov.w	r1, #760	; 0x2f8
     c1c:	2070      	movs	r0, #112	; 0x70
     c1e:	f002 fd1d 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c22:	2003      	movs	r0, #3
     c24:	f001 ffc6 	bl	2bb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c28:	b1c0      	cbz	r0, c5c <CONFIG_ISR_STACK_SIZE+0x45c>
     c2a:	480f      	ldr	r0, [pc, #60]	; (c68 <CONFIG_ISR_STACK_SIZE+0x468>)
     c2c:	6880      	ldr	r0, [r0, #8]
     c2e:	f8c0 a000 	str.w	sl, [r0]
     c32:	480e      	ldr	r0, [pc, #56]	; (c6c <CONFIG_ISR_STACK_SIZE+0x46c>)
     c34:	f8c0 a000 	str.w	sl, [r0]
     c38:	ac0e      	add	r4, sp, #56	; 0x38
     c3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     c3e:	6038      	str	r0, [r7, #0]
     c40:	6079      	str	r1, [r7, #4]
     c42:	60ba      	str	r2, [r7, #8]
     c44:	60fb      	str	r3, [r7, #12]
     c46:	ac12      	add	r4, sp, #72	; 0x48
     c48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     c4c:	6138      	str	r0, [r7, #16]
     c4e:	6179      	str	r1, [r7, #20]
     c50:	61ba      	str	r2, [r7, #24]
     c52:	61fb      	str	r3, [r7, #28]
     c54:	b01b      	add	sp, #108	; 0x6c
     c56:	2001      	movs	r0, #1
     c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c5c:	f640 216b 	movw	r1, #2667	; 0xa6b
     c60:	2070      	movs	r0, #112	; 0x70
     c62:	f002 fcfb 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c66:	0000      	.short	0x0000
     c68:	20000038 	.word	0x20000038
     c6c:	40000508 	.word	0x40000508
     c70:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c74:	4614      	mov	r4, r2
     c76:	460d      	mov	r5, r1
     c78:	f04f 0a00 	mov.w	sl, #0
     c7c:	890a      	ldrh	r2, [r1, #8]
     c7e:	4651      	mov	r1, sl
     c80:	f362 411f 	bfi	r1, r2, #16, #16
     c84:	7aaa      	ldrb	r2, [r5, #10]
     c86:	46d1      	mov	r9, sl
     c88:	f362 0907 	bfi	r9, r2, #0, #8
     c8c:	7aea      	ldrb	r2, [r5, #11]
     c8e:	4606      	mov	r6, r0
     c90:	f362 290f 	bfi	r9, r2, #8, #8
     c94:	782a      	ldrb	r2, [r5, #0]
     c96:	b083      	sub	sp, #12
     c98:	6840      	ldr	r0, [r0, #4]
     c9a:	f8c4 a000 	str.w	sl, [r4]
     c9e:	f362 4917 	bfi	r9, r2, #16, #8
     ca2:	f8c4 a004 	str.w	sl, [r4, #4]
     ca6:	f8c4 9010 	str.w	r9, [r4, #16]
     caa:	e9c4 0102 	strd	r0, r1, [r4, #8]
     cae:	4f9d      	ldr	r7, [pc, #628]	; (f24 <CONFIG_ISR_STACK_SIZE+0x724>)
     cb0:	6870      	ldr	r0, [r6, #4]
     cb2:	fba0 8907 	umull	r8, r9, r0, r7
     cb6:	6830      	ldr	r0, [r6, #0]
     cb8:	f006 febf 	bl	7a3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     cbc:	eb10 0108 	adds.w	r1, r0, r8
     cc0:	eb4a 0209 	adc.w	r2, sl, r9
     cc4:	7828      	ldrb	r0, [r5, #0]
     cc6:	ea4f 0967 	mov.w	r9, r7, asr #1
     cca:	f1c9 0b00 	rsb	fp, r9, #0
     cce:	b170      	cbz	r0, cee <CONFIG_ISR_STACK_SIZE+0x4ee>
     cd0:	89e0      	ldrh	r0, [r4, #14]
     cd2:	f894 8011 	ldrb.w	r8, [r4, #17]
     cd6:	43c0      	mvns	r0, r0
     cd8:	f8d5 a004 	ldr.w	sl, [r5, #4]
     cdc:	f104 020c 	add.w	r2, r4, #12
     ce0:	4548      	cmp	r0, r9
     ce2:	dd7c      	ble.n	dde <CONFIG_ISR_STACK_SIZE+0x5de>
     ce4:	f240 519f 	movw	r1, #1439	; 0x59f
     ce8:	2070      	movs	r0, #112	; 0x70
     cea:	f002 fcb7 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cee:	f8df c238 	ldr.w	ip, [pc, #568]	; f28 <CONFIG_ISR_STACK_SIZE+0x728>
     cf2:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
     cf6:	eb11 0a0c 	adds.w	sl, r1, ip
     cfa:	f142 0c00 	adc.w	ip, r2, #0
     cfe:	ebb0 0a0a 	subs.w	sl, r0, sl
     d02:	eb73 0c0c 	sbcs.w	ip, r3, ip
     d06:	d272      	bcs.n	dee <CONFIG_ISR_STACK_SIZE+0x5ee>
     d08:	1a41      	subs	r1, r0, r1
     d0a:	eb73 0102 	sbcs.w	r1, r3, r2
     d0e:	d36e      	bcc.n	dee <CONFIG_ISR_STACK_SIZE+0x5ee>
     d10:	ebb0 0608 	subs.w	r6, r0, r8
     d14:	42b7      	cmp	r7, r6
     d16:	d82b      	bhi.n	d70 <CONFIG_ISR_STACK_SIZE+0x570>
     d18:	89e0      	ldrh	r0, [r4, #14]
     d1a:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
     d1e:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
     d22:	43c1      	mvns	r1, r0
     d24:	4a81      	ldr	r2, [pc, #516]	; (f2c <CONFIG_ISR_STACK_SIZE+0x72c>)
     d26:	eb08 0001 	add.w	r0, r8, r1
     d2a:	4542      	cmp	r2, r8
     d2c:	d32b      	bcc.n	d86 <CONFIG_ISR_STACK_SIZE+0x586>
     d2e:	4549      	cmp	r1, r9
     d30:	dcd8      	bgt.n	ce4 <CONFIG_ISR_STACK_SIZE+0x4e4>
     d32:	4559      	cmp	r1, fp
     d34:	db66      	blt.n	e04 <CONFIG_ISR_STACK_SIZE+0x604>
     d36:	4287      	cmp	r7, r0
     d38:	bfdc      	itt	le
     d3a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     d3e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     d42:	dd05      	ble.n	d50 <CONFIG_ISR_STACK_SIZE+0x550>
     d44:	2800      	cmp	r0, #0
     d46:	bfbc      	itt	lt
     d48:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     d4c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     d50:	466a      	mov	r2, sp
     d52:	a901      	add	r1, sp, #4
     d54:	f001 fc18 	bl	2588 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     d58:	89e0      	ldrh	r0, [r4, #14]
     d5a:	f89d 1000 	ldrb.w	r1, [sp]
     d5e:	1a30      	subs	r0, r6, r0
     d60:	1a40      	subs	r0, r0, r1
     d62:	1e40      	subs	r0, r0, #1
     d64:	42b8      	cmp	r0, r7
     d66:	d302      	bcc.n	d6e <CONFIG_ISR_STACK_SIZE+0x56e>
     d68:	68a0      	ldr	r0, [r4, #8]
     d6a:	1c40      	adds	r0, r0, #1
     d6c:	60a0      	str	r0, [r4, #8]
     d6e:	4646      	mov	r6, r8
     d70:	89e0      	ldrh	r0, [r4, #14]
     d72:	4b6e      	ldr	r3, [pc, #440]	; (f2c <CONFIG_ISR_STACK_SIZE+0x72c>)
     d74:	43c1      	mvns	r1, r0
     d76:	686d      	ldr	r5, [r5, #4]
     d78:	f894 8011 	ldrb.w	r8, [r4, #17]
     d7c:	1870      	adds	r0, r6, r1
     d7e:	f104 020c 	add.w	r2, r4, #12
     d82:	429e      	cmp	r6, r3
     d84:	d904      	bls.n	d90 <CONFIG_ISR_STACK_SIZE+0x590>
     d86:	f240 519e 	movw	r1, #1438	; 0x59e
     d8a:	2070      	movs	r0, #112	; 0x70
     d8c:	f002 fc66 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d90:	4549      	cmp	r1, r9
     d92:	dca7      	bgt.n	ce4 <CONFIG_ISR_STACK_SIZE+0x4e4>
     d94:	4559      	cmp	r1, fp
     d96:	db35      	blt.n	e04 <CONFIG_ISR_STACK_SIZE+0x604>
     d98:	4287      	cmp	r7, r0
     d9a:	bfdc      	itt	le
     d9c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     da0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     da4:	dd05      	ble.n	db2 <CONFIG_ISR_STACK_SIZE+0x5b2>
     da6:	2800      	cmp	r0, #0
     da8:	bfbc      	itt	lt
     daa:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     dae:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     db2:	4621      	mov	r1, r4
     db4:	f001 fbe8 	bl	2588 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     db8:	6820      	ldr	r0, [r4, #0]
     dba:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     dbe:	1970      	adds	r0, r6, r5
     dc0:	1c40      	adds	r0, r0, #1
     dc2:	6021      	str	r1, [r4, #0]
     dc4:	f1b8 0f00 	cmp.w	r8, #0
     dc8:	bf08      	it	eq
     dca:	307a      	addeq	r0, #122	; 0x7a
     dcc:	d004      	beq.n	dd8 <CONFIG_ISR_STACK_SIZE+0x5d8>
     dce:	f1b8 0f01 	cmp.w	r8, #1
     dd2:	bf08      	it	eq
     dd4:	3048      	addeq	r0, #72	; 0x48
     dd6:	d13a      	bne.n	e4e <CONFIG_ISR_STACK_SIZE+0x64e>
     dd8:	f001 fbba 	bl	2550 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     ddc:	e001      	b.n	de2 <CONFIG_ISR_STACK_SIZE+0x5e2>
     dde:	e00e      	b.n	dfe <CONFIG_ISR_STACK_SIZE+0x5fe>
     de0:	e005      	b.n	dee <CONFIG_ISR_STACK_SIZE+0x5ee>
     de2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     de6:	6060      	str	r0, [r4, #4]
     de8:	b007      	add	sp, #28
     dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dee:	6830      	ldr	r0, [r6, #0]
     df0:	1e40      	subs	r0, r0, #1
     df2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     df6:	6020      	str	r0, [r4, #0]
     df8:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     dfc:	e7f3      	b.n	de6 <CONFIG_ISR_STACK_SIZE+0x5e6>
     dfe:	4601      	mov	r1, r0
     e00:	4558      	cmp	r0, fp
     e02:	da04      	bge.n	e0e <CONFIG_ISR_STACK_SIZE+0x60e>
     e04:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
     e08:	2070      	movs	r0, #112	; 0x70
     e0a:	f002 fc27 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e0e:	4287      	cmp	r7, r0
     e10:	bfdc      	itt	le
     e12:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     e16:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     e1a:	dd05      	ble.n	e28 <CONFIG_ISR_STACK_SIZE+0x628>
     e1c:	2800      	cmp	r0, #0
     e1e:	bfbc      	itt	lt
     e20:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     e24:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     e28:	4621      	mov	r1, r4
     e2a:	f001 fbad 	bl	2588 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e2e:	6820      	ldr	r0, [r4, #0]
     e30:	f1b8 0f00 	cmp.w	r8, #0
     e34:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e38:	f10a 0001 	add.w	r0, sl, #1
     e3c:	6021      	str	r1, [r4, #0]
     e3e:	bf08      	it	eq
     e40:	307a      	addeq	r0, #122	; 0x7a
     e42:	d009      	beq.n	e58 <CONFIG_ISR_STACK_SIZE+0x658>
     e44:	f1b8 0f01 	cmp.w	r8, #1
     e48:	bf08      	it	eq
     e4a:	3048      	addeq	r0, #72	; 0x48
     e4c:	d004      	beq.n	e58 <CONFIG_ISR_STACK_SIZE+0x658>
     e4e:	f240 6139 	movw	r1, #1593	; 0x639
     e52:	2070      	movs	r0, #112	; 0x70
     e54:	f002 fc02 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e58:	f001 fb7a 	bl	2550 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e5c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e60:	6061      	str	r1, [r4, #4]
     e62:	f8b4 900e 	ldrh.w	r9, [r4, #14]
     e66:	aa01      	add	r2, sp, #4
     e68:	4669      	mov	r1, sp
     e6a:	4648      	mov	r0, r9
     e6c:	6837      	ldr	r7, [r6, #0]
     e6e:	f001 fb8b 	bl	2588 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e72:	f002 f899 	bl	2fa8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     e76:	f001 fb6b 	bl	2550 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e7a:	4680      	mov	r8, r0
     e7c:	482c      	ldr	r0, [pc, #176]	; (f30 <CONFIG_ISR_STACK_SIZE+0x730>)
     e7e:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
     e82:	2920      	cmp	r1, #32
     e84:	d02a      	beq.n	edc <CONFIG_ISR_STACK_SIZE+0x6dc>
     e86:	68c0      	ldr	r0, [r0, #12]
     e88:	1d40      	adds	r0, r0, #5
     e8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     e8e:	bf00      	nop
     e90:	e9d4 2100 	ldrd	r2, r1, [r4]
     e94:	1a89      	subs	r1, r1, r2
     e96:	4401      	add	r1, r0
     e98:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     e9c:	e9c4 0100 	strd	r0, r1, [r4]
     ea0:	6831      	ldr	r1, [r6, #0]
     ea2:	4281      	cmp	r1, r0
     ea4:	d902      	bls.n	eac <CONFIG_ISR_STACK_SIZE+0x6ac>
     ea6:	68a0      	ldr	r0, [r4, #8]
     ea8:	1c40      	adds	r0, r0, #1
     eaa:	60a0      	str	r0, [r4, #8]
     eac:	6832      	ldr	r2, [r6, #0]
     eae:	6928      	ldr	r0, [r5, #16]
     eb0:	4621      	mov	r1, r4
     eb2:	9b06      	ldr	r3, [sp, #24]
     eb4:	f7ff f9fa 	bl	2ac <MPSL_IRQ_RADIO_Handler+0xb8>
     eb8:	2800      	cmp	r0, #0
     eba:	bf1c      	itt	ne
     ebc:	b007      	addne	sp, #28
     ebe:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ec2:	e9d4 1000 	ldrd	r1, r0, [r4]
     ec6:	1a40      	subs	r0, r0, r1
     ec8:	6831      	ldr	r1, [r6, #0]
     eca:	6021      	str	r1, [r4, #0]
     ecc:	6831      	ldr	r1, [r6, #0]
     ece:	4408      	add	r0, r1
     ed0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ed4:	6060      	str	r0, [r4, #4]
     ed6:	b007      	add	sp, #28
     ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     edc:	3709      	adds	r7, #9
     ede:	f1b9 0f00 	cmp.w	r9, #0
     ee2:	d016      	beq.n	f12 <CONFIG_ISR_STACK_SIZE+0x712>
     ee4:	f002 fb42 	bl	356c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     ee8:	b998      	cbnz	r0, f12 <CONFIG_ISR_STACK_SIZE+0x712>
     eea:	f002 fa2b 	bl	3344 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     eee:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     ef2:	bf08      	it	eq
     ef4:	200d      	moveq	r0, #13
     ef6:	d00b      	beq.n	f10 <CONFIG_ISR_STACK_SIZE+0x710>
     ef8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     efc:	3856      	subs	r0, #86	; 0x56
     efe:	bf08      	it	eq
     f00:	201c      	moveq	r0, #28
     f02:	d005      	beq.n	f10 <CONFIG_ISR_STACK_SIZE+0x710>
     f04:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     f08:	389f      	subs	r0, #159	; 0x9f
     f0a:	bf14      	ite	ne
     f0c:	2000      	movne	r0, #0
     f0e:	2032      	moveq	r0, #50	; 0x32
     f10:	4407      	add	r7, r0
     f12:	9800      	ldr	r0, [sp, #0]
     f14:	4580      	cmp	r8, r0
     f16:	bf84      	itt	hi
     f18:	eba8 0000 	subhi.w	r0, r8, r0
     f1c:	4407      	addhi	r7, r0
     f1e:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
     f22:	e7b5      	b.n	e90 <CONFIG_ISR_STACK_SIZE+0x690>
     f24:	1e848000 	.word	0x1e848000
     f28:	0f424000 	.word	0x0f424000
     f2c:	1e847fff 	.word	0x1e847fff
     f30:	20000a4c 	.word	0x20000a4c
     f34:	b570      	push	{r4, r5, r6, lr}
     f36:	4d1e      	ldr	r5, [pc, #120]	; (fb0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x10>)
     f38:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
     f3c:	2820      	cmp	r0, #32
     f3e:	bf18      	it	ne
     f40:	bd70      	popne	{r4, r5, r6, pc}
     f42:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
     f46:	eb02 0042 	add.w	r0, r2, r2, lsl #1
     f4a:	4428      	add	r0, r5
     f4c:	f890 4020 	ldrb.w	r4, [r0, #32]
     f50:	2c20      	cmp	r4, #32
     f52:	d027      	beq.n	fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>
     f54:	4b17      	ldr	r3, [pc, #92]	; (fb4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x14>)
     f56:	eb03 1182 	add.w	r1, r3, r2, lsl #6
     f5a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
     f5e:	7849      	ldrb	r1, [r1, #1]
     f60:	f880 1020 	strb.w	r1, [r0, #32]
     f64:	20ff      	movs	r0, #255	; 0xff
     f66:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
     f6a:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
     f6e:	4621      	mov	r1, r4
     f70:	2002      	movs	r0, #2
     f72:	f000 f891 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
     f76:	2000      	movs	r0, #0
     f78:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
     f7c:	77a8      	strb	r0, [r5, #30]
     f7e:	490e      	ldr	r1, [pc, #56]	; (fb8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x18>)
     f80:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     f84:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     f88:	7e00      	ldrb	r0, [r0, #24]
     f8a:	2800      	cmp	r0, #0
     f8c:	bf08      	it	eq
     f8e:	f002 fccf 	bleq	3930 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
     f92:	2000      	movs	r0, #0
     f94:	4909      	ldr	r1, [pc, #36]	; (fbc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1c>)
     f96:	6849      	ldr	r1, [r1, #4]
     f98:	2900      	cmp	r1, #0
     f9a:	bf08      	it	eq
     f9c:	bd70      	popeq	{r4, r5, r6, pc}
     f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     fa2:	4708      	bx	r1
     fa4:	f240 3132 	movw	r1, #818	; 0x332
     fa8:	2070      	movs	r0, #112	; 0x70
     faa:	f002 fb57 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fae:	0000      	.short	0x0000
     fb0:	20000a4c 	.word	0x20000a4c
     fb4:	200009cc 	.word	0x200009cc
     fb8:	2000064c 	.word	0x2000064c
     fbc:	20000038 	.word	0x20000038
     fc0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fc4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     fc8:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
     fcc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     fd0:	4440      	add	r0, r8
     fd2:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     fd6:	2c20      	cmp	r4, #32
     fd8:	bf08      	it	eq
     fda:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     fde:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
     fe2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
     fe6:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
     fea:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
     fee:	2607      	movs	r6, #7
     ff0:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
     ff4:	2801      	cmp	r0, #1
     ff6:	d00e      	beq.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
     ff8:	2804      	cmp	r0, #4
     ffa:	bf08      	it	eq
     ffc:	2602      	moveq	r6, #2
     ffe:	d00a      	beq.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
    1000:	2805      	cmp	r0, #5
    1002:	bf0c      	ite	eq
    1004:	2603      	moveq	r6, #3
    1006:	2806      	cmpne	r0, #6
    1008:	d005      	beq.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
    100a:	f640 01dd 	movw	r1, #2269	; 0x8dd
    100e:	f04f 0070 	mov.w	r0, #112	; 0x70
    1012:	f002 fb23 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1016:	f1bb 0f00 	cmp.w	fp, #0
    101a:	bf18      	it	ne
    101c:	f3af 8000 	nopne.w
    1020:	f3ef 8010 	mrs	r0, PRIMASK
    1024:	b672      	cpsid	i
    1026:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    102a:	784a      	ldrb	r2, [r1, #1]
    102c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1030:	4441      	add	r1, r8
    1032:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1036:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    103a:	42a2      	cmp	r2, r4
    103c:	bf04      	itt	eq
    103e:	2220      	moveq	r2, #32
    1040:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1044:	b1c0      	cbz	r0, 1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
    1046:	462a      	mov	r2, r5
    1048:	4621      	mov	r1, r4
    104a:	2001      	movs	r0, #1
    104c:	f000 f824 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    1050:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1054:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    1058:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    105c:	6840      	ldr	r0, [r0, #4]
    105e:	4631      	mov	r1, r6
    1060:	4790      	blx	r2
    1062:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1066:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    106a:	4440      	add	r0, r8
    106c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1070:	2c20      	cmp	r4, #32
    1072:	d1ba      	bne.n	fea <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4a>
    1074:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1078:	4806      	ldr	r0, [pc, #24]	; (1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    107a:	2800      	cmp	r0, #0
    107c:	bf18      	it	ne
    107e:	f3af 8000 	nopne.w
    1082:	b662      	cpsie	i
    1084:	e7df      	b.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
    1086:	0000      	.short	0x0000
    1088:	20000a4c 	.word	0x20000a4c
    108c:	00000000 	.word	0x00000000
    1090:	200009cc 	.word	0x200009cc
    1094:	00000000 	.word	0x00000000
    1098:	f8df c058 	ldr.w	ip, [pc, #88]	; 10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
    109c:	b510      	push	{r4, lr}
    109e:	2300      	movs	r3, #0
    10a0:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    10a4:	2807      	cmp	r0, #7
    10a6:	d21f      	bcs.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    10a8:	e8df f000 	tbb	[pc, r0]
    10ac:	05050505 	.word	0x05050505
    10b0:	00040404 	.word	0x00040404
    10b4:	2301      	movs	r3, #1
    10b6:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    10ba:	2b00      	cmp	r3, #0
    10bc:	bf08      	it	eq
    10be:	bd10      	popeq	{r4, pc}
    10c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    10c4:	480c      	ldr	r0, [pc, #48]	; (10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
    10c6:	4402      	add	r2, r0
    10c8:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    10cc:	2820      	cmp	r0, #32
    10ce:	bf0e      	itee	eq
    10d0:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    10d4:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    10d8:	7041      	strbne	r1, [r0, #1]
    10da:	2020      	movs	r0, #32
    10dc:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    10e0:	7058      	strb	r0, [r3, #1]
    10e2:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    10e6:	bd10      	pop	{r4, pc}
    10e8:	f240 216e 	movw	r1, #622	; 0x26e
    10ec:	2070      	movs	r0, #112	; 0x70
    10ee:	f002 fab5 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10f2:	0000      	.short	0x0000
    10f4:	200009cc 	.word	0x200009cc
    10f8:	20000a4c 	.word	0x20000a4c
    10fc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1100:	460f      	mov	r7, r1
    1102:	4680      	mov	r8, r0
    1104:	f8df a158 	ldr.w	sl, [pc, #344]	; 1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
    1108:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    110c:	4450      	add	r0, sl
    110e:	f1b8 0f01 	cmp.w	r8, #1
    1112:	f890 4020 	ldrb.w	r4, [r0, #32]
    1116:	4625      	mov	r5, r4
    1118:	bf18      	it	ne
    111a:	f1b8 0f02 	cmpne.w	r8, #2
    111e:	d005      	beq.n	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    1120:	f640 21a1 	movw	r1, #2721	; 0xaa1
    1124:	f04f 0070 	mov.w	r0, #112	; 0x70
    1128:	f002 fa98 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    112c:	f04f 0b00 	mov.w	fp, #0
    1130:	2d20      	cmp	r5, #32
    1132:	d042      	beq.n	11ba <CONFIG_FPROTECT_BLOCK_SIZE+0x1ba>
    1134:	f89a 001e 	ldrb.w	r0, [sl, #30]
    1138:	2600      	movs	r6, #0
    113a:	2800      	cmp	r0, #0
    113c:	bf08      	it	eq
    113e:	2602      	moveq	r6, #2
    1140:	f001 fb8c 	bl	285c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1144:	f8df c11c 	ldr.w	ip, [pc, #284]	; 1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>
    1148:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    114c:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    1150:	688a      	ldr	r2, [r1, #8]
    1152:	68c9      	ldr	r1, [r1, #12]
    1154:	1a12      	subs	r2, r2, r0
    1156:	1a09      	subs	r1, r1, r0
    1158:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    115c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1160:	4296      	cmp	r6, r2
    1162:	bf99      	ittee	ls
    1164:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1168:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    116c:	4a3e      	ldrhi	r2, [pc, #248]	; (1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>)
    116e:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    1172:	d920      	bls.n	11b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b6>
    1174:	4622      	mov	r2, r4
    1176:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    117a:	784c      	ldrb	r4, [r1, #1]
    117c:	2c20      	cmp	r4, #32
    117e:	d012      	beq.n	11a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a6>
    1180:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1184:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    1188:	688b      	ldr	r3, [r1, #8]
    118a:	68c9      	ldr	r1, [r1, #12]
    118c:	1a1b      	subs	r3, r3, r0
    118e:	1a09      	subs	r1, r1, r0
    1190:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1194:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1198:	429e      	cmp	r6, r3
    119a:	bf9c      	itt	ls
    119c:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    11a0:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    11a4:	d8e6      	bhi.n	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    11a6:	2a20      	cmp	r2, #32
    11a8:	d005      	beq.n	11b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b6>
    11aa:	463b      	mov	r3, r7
    11ac:	2120      	movs	r1, #32
    11ae:	2004      	movs	r0, #4
    11b0:	f7ff f840 	bl	234 <MPSL_IRQ_RADIO_Handler+0x40>
    11b4:	4604      	mov	r4, r0
    11b6:	42ac      	cmp	r4, r5
    11b8:	d116      	bne.n	11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>
    11ba:	482c      	ldr	r0, [pc, #176]	; (126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>)
    11bc:	2800      	cmp	r0, #0
    11be:	bf18      	it	ne
    11c0:	f3af 8000 	nopne.w
    11c4:	f001 fb4a 	bl	285c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    11c8:	4603      	mov	r3, r0
    11ca:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    11ce:	2820      	cmp	r0, #32
    11d0:	d00d      	beq.n	11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
    11d2:	f8da 0008 	ldr.w	r0, [sl, #8]
    11d6:	1c99      	adds	r1, r3, #2
    11d8:	1a08      	subs	r0, r1, r0
    11da:	0200      	lsls	r0, r0, #8
    11dc:	17c1      	asrs	r1, r0, #31
    11de:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    11e2:	1200      	asrs	r0, r0, #8
    11e4:	2800      	cmp	r0, #0
    11e6:	dd02      	ble.n	11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
    11e8:	2000      	movs	r0, #0
    11ea:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    11ee:	2d20      	cmp	r5, #32
    11f0:	d014      	beq.n	121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>
    11f2:	462a      	mov	r2, r5
    11f4:	4641      	mov	r1, r8
    11f6:	4618      	mov	r0, r3
    11f8:	f7ff fab2 	bl	760 <CONFIG_BT_HCI_TX_STACK_SIZE+0x160>
    11fc:	2800      	cmp	r0, #0
    11fe:	bf1e      	ittt	ne
    1200:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    1204:	2002      	movne	r0, #2
    1206:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    120a:	463b      	mov	r3, r7
    120c:	462a      	mov	r2, r5
    120e:	2120      	movs	r1, #32
    1210:	2004      	movs	r0, #4
    1212:	f7ff f80f 	bl	234 <MPSL_IRQ_RADIO_Handler+0x40>
    1216:	2000      	movs	r0, #0
    1218:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    121c:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    1220:	b118      	cbz	r0, 122a <CONFIG_FPROTECT_BLOCK_SIZE+0x22a>
    1222:	f002 f895 	bl	3350 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1226:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    122a:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    122e:	b120      	cbz	r0, 123a <CONFIG_FPROTECT_BLOCK_SIZE+0x23a>
    1230:	2005      	movs	r0, #5
    1232:	f001 fd75 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1236:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    123a:	2004      	movs	r0, #4
    123c:	f001 fd70 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1240:	f001 fdde 	bl	2e00 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1244:	2020      	movs	r0, #32
    1246:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    124a:	4809      	ldr	r0, [pc, #36]	; (1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>)
    124c:	6880      	ldr	r0, [r0, #8]
    124e:	f8c0 b000 	str.w	fp, [r0]
    1252:	4808      	ldr	r0, [pc, #32]	; (1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>)
    1254:	f8c0 b000 	str.w	fp, [r0]
    1258:	2001      	movs	r0, #1
    125a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    125e:	0000      	.short	0x0000
    1260:	20000a4c 	.word	0x20000a4c
    1264:	2000064c 	.word	0x2000064c
    1268:	200009cc 	.word	0x200009cc
    126c:	00000000 	.word	0x00000000
    1270:	20000038 	.word	0x20000038
    1274:	40000508 	.word	0x40000508

00001278 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    127c:	4e69      	ldr	r6, [pc, #420]	; (1424 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    127e:	4607      	mov	r7, r0
    1280:	b08d      	sub	sp, #52	; 0x34
    1282:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1286:	4688      	mov	r8, r1
    1288:	2820      	cmp	r0, #32
    128a:	d055      	beq.n	1338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    128c:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1290:	f106 0408 	add.w	r4, r6, #8
    1294:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1298:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    129c:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    12a0:	2020      	movs	r0, #32
    12a2:	f88d 0020 	strb.w	r0, [sp, #32]
    12a6:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    12aa:	aa0a      	add	r2, sp, #40	; 0x28
    12ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    12b0:	4430      	add	r0, r6
    12b2:	a909      	add	r1, sp, #36	; 0x24
    12b4:	f890 5020 	ldrb.w	r5, [r0, #32]
    12b8:	68f0      	ldr	r0, [r6, #12]
    12ba:	9002      	str	r0, [sp, #8]
    12bc:	6830      	ldr	r0, [r6, #0]
    12be:	4438      	add	r0, r7
    12c0:	f001 f962 	bl	2588 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    12c4:	f8da 000c 	ldr.w	r0, [sl, #12]
    12c8:	9909      	ldr	r1, [sp, #36]	; 0x24
    12ca:	2f65      	cmp	r7, #101	; 0x65
    12cc:	4408      	add	r0, r1
    12ce:	d338      	bcc.n	1342 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    12d0:	4a55      	ldr	r2, [pc, #340]	; (1428 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    12d2:	2100      	movs	r1, #0
    12d4:	1bd2      	subs	r2, r2, r7
    12d6:	eb71 0201 	sbcs.w	r2, r1, r1
    12da:	d332      	bcc.n	1342 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    12dc:	6822      	ldr	r2, [r4, #0]
    12de:	1a82      	subs	r2, r0, r2
    12e0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    12e4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    12e8:	d82b      	bhi.n	1342 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    12ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    12ee:	6060      	str	r0, [r4, #4]
    12f0:	4630      	mov	r0, r6
    12f2:	f884 8010 	strb.w	r8, [r4, #16]
    12f6:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    12fa:	f10d 0a20 	add.w	sl, sp, #32
    12fe:	2d20      	cmp	r5, #32
    1300:	bf1c      	itt	ne
    1302:	494a      	ldrne	r1, [pc, #296]	; (142c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    1304:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1308:	d050      	beq.n	13ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    130a:	bf00      	nop
    130c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1310:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1314:	6861      	ldr	r1, [r4, #4]
    1316:	f8d8 6008 	ldr.w	r6, [r8, #8]
    131a:	f108 0008 	add.w	r0, r8, #8
    131e:	1a71      	subs	r1, r6, r1
    1320:	0209      	lsls	r1, r1, #8
    1322:	17ca      	asrs	r2, r1, #31
    1324:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1328:	1209      	asrs	r1, r1, #8
    132a:	d42d      	bmi.n	1388 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    132c:	89c0      	ldrh	r0, [r0, #14]
    132e:	2800      	cmp	r0, #0
    1330:	d03c      	beq.n	13ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1332:	89e0      	ldrh	r0, [r4, #14]
    1334:	b148      	cbz	r0, 134a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    1336:	e039      	b.n	13ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1338:	f640 3168 	movw	r1, #2920	; 0xb68
    133c:	2070      	movs	r0, #112	; 0x70
    133e:	f002 f98d 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1342:	b00d      	add	sp, #52	; 0x34
    1344:	2001      	movs	r0, #1
    1346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    134a:	6820      	ldr	r0, [r4, #0]
    134c:	900c      	str	r0, [sp, #48]	; 0x30
    134e:	f001 fff9 	bl	3344 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1352:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1356:	bf08      	it	eq
    1358:	200d      	moveq	r0, #13
    135a:	d00b      	beq.n	1374 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    135c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1360:	3856      	subs	r0, #86	; 0x56
    1362:	bf08      	it	eq
    1364:	201c      	moveq	r0, #28
    1366:	d005      	beq.n	1374 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1368:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    136c:	389f      	subs	r0, #159	; 0x9f
    136e:	bf14      	ite	ne
    1370:	2000      	movne	r0, #0
    1372:	2032      	moveq	r0, #50	; 0x32
    1374:	1c41      	adds	r1, r0, #1
    1376:	980c      	ldr	r0, [sp, #48]	; 0x30
    1378:	1a30      	subs	r0, r6, r0
    137a:	0200      	lsls	r0, r0, #8
    137c:	17c2      	asrs	r2, r0, #31
    137e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1382:	1200      	asrs	r0, r0, #8
    1384:	4288      	cmp	r0, r1
    1386:	da11      	bge.n	13ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1388:	f88a 5000 	strb.w	r5, [sl]
    138c:	f898 1018 	ldrb.w	r1, [r8, #24]
    1390:	7c20      	ldrb	r0, [r4, #16]
    1392:	4281      	cmp	r1, r0
    1394:	d805      	bhi.n	13a2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    1396:	9802      	ldr	r0, [sp, #8]
    1398:	6060      	str	r0, [r4, #4]
    139a:	b00d      	add	sp, #52	; 0x34
    139c:	2002      	movs	r0, #2
    139e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13a2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    13a6:	7845      	ldrb	r5, [r0, #1]
    13a8:	2d20      	cmp	r5, #32
    13aa:	d1af      	bne.n	130c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    13ac:	2005      	movs	r0, #5
    13ae:	f001 fcb7 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13b2:	4c1c      	ldr	r4, [pc, #112]	; (1424 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    13b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    13b8:	6060      	str	r0, [r4, #4]
    13ba:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    13be:	f89d 2020 	ldrb.w	r2, [sp, #32]
    13c2:	2120      	movs	r1, #32
    13c4:	2a20      	cmp	r2, #32
    13c6:	d003      	beq.n	13d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    13c8:	2005      	movs	r0, #5
    13ca:	f7fe ff33 	bl	234 <MPSL_IRQ_RADIO_Handler+0x40>
    13ce:	e004      	b.n	13da <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    13d0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    13d4:	4420      	add	r0, r4
    13d6:	f890 0020 	ldrb.w	r0, [r0, #32]
    13da:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    13de:	4913      	ldr	r1, [pc, #76]	; (142c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    13e0:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    13e4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    13e8:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    13ec:	7048      	strb	r0, [r1, #1]
    13ee:	6820      	ldr	r0, [r4, #0]
    13f0:	4438      	add	r0, r7
    13f2:	6020      	str	r0, [r4, #0]
    13f4:	20ff      	movs	r0, #255	; 0xff
    13f6:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    13fa:	7e60      	ldrb	r0, [r4, #25]
    13fc:	2801      	cmp	r0, #1
    13fe:	d105      	bne.n	140c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    1400:	68e0      	ldr	r0, [r4, #12]
    1402:	1e40      	subs	r0, r0, #1
    1404:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1408:	f001 faee 	bl	29e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    140c:	f89d 0020 	ldrb.w	r0, [sp, #32]
    1410:	2820      	cmp	r0, #32
    1412:	d003      	beq.n	141c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    1414:	4806      	ldr	r0, [pc, #24]	; (1430 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    1416:	7840      	ldrb	r0, [r0, #1]
    1418:	f002 f9f4 	bl	3804 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    141c:	b00d      	add	sp, #52	; 0x34
    141e:	2000      	movs	r0, #0
    1420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1424:	20000a4c 	.word	0x20000a4c
    1428:	0f424000 	.word	0x0f424000
    142c:	200009cc 	.word	0x200009cc
    1430:	20000038 	.word	0x20000038

00001434 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1436:	4d6b      	ldr	r5, [pc, #428]	; (15e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    1438:	4a6b      	ldr	r2, [pc, #428]	; (15e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    143a:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    143e:	2601      	movs	r6, #1
    1440:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    1444:	2808      	cmp	r0, #8
    1446:	d27c      	bcs.n	1542 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    1448:	e8df f000 	tbb	[pc, r0]
    144c:	a9977004 	.word	0xa9977004
    1450:	b3ae41c7 	.word	0xb3ae41c7
    1454:	b919      	cbnz	r1, 145e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1456:	f001 ff97 	bl	3388 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    145a:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    145e:	8ae0      	ldrh	r0, [r4, #22]
    1460:	b110      	cbz	r0, 1468 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1462:	f002 f883 	bl	356c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1466:	b180      	cbz	r0, 148a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    1468:	f7ff fd64 	bl	f34 <CONFIG_ISR_STACK_SIZE+0x734>
    146c:	20ff      	movs	r0, #255	; 0xff
    146e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    1472:	6861      	ldr	r1, [r4, #4]
    1474:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    1478:	d003      	beq.n	1482 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    147a:	2005      	movs	r0, #5
    147c:	f001 fb9a 	bl	2bb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1480:	b140      	cbz	r0, 1494 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    1482:	7e60      	ldrb	r0, [r4, #25]
    1484:	2801      	cmp	r0, #1
    1486:	d110      	bne.n	14aa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    1488:	e009      	b.n	149e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    148a:	f640 0169 	movw	r1, #2153	; 0x869
    148e:	2070      	movs	r0, #112	; 0x70
    1490:	f002 f8e4 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1494:	f640 016e 	movw	r1, #2158	; 0x86e
    1498:	2070      	movs	r0, #112	; 0x70
    149a:	f002 f8df 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    149e:	68e0      	ldr	r0, [r4, #12]
    14a0:	1e40      	subs	r0, r0, #1
    14a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14a6:	f001 fa9f 	bl	29e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    14aa:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    14ae:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    14b2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    14b6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    14ba:	6840      	ldr	r0, [r0, #4]
    14bc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    14c0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    14c4:	b001      	add	sp, #4
    14c6:	2101      	movs	r1, #1
    14c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    14cc:	4710      	bx	r2
    14ce:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    14d2:	b140      	cbz	r0, 14e6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    14d4:	b919      	cbnz	r1, 14de <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    14d6:	f001 ff57 	bl	3388 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    14da:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    14de:	2000      	movs	r0, #0
    14e0:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    14e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14e6:	f7ff fd25 	bl	f34 <CONFIG_ISR_STACK_SIZE+0x734>
    14ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    14ee:	6060      	str	r0, [r4, #4]
    14f0:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    14f4:	f88d 0000 	strb.w	r0, [sp]
    14f8:	f89d 0000 	ldrb.w	r0, [sp]
    14fc:	b188      	cbz	r0, 1522 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    14fe:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1502:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1506:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    150a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    150e:	6840      	ldr	r0, [r0, #4]
    1510:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1514:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1518:	b001      	add	sp, #4
    151a:	2106      	movs	r1, #6
    151c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1520:	4710      	bx	r2
    1522:	f640 0185 	movw	r1, #2181	; 0x885
    1526:	2070      	movs	r0, #112	; 0x70
    1528:	f002 f898 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    152c:	f7ff fd02 	bl	f34 <CONFIG_ISR_STACK_SIZE+0x734>
    1530:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    1534:	f002 f81a 	bl	356c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1538:	b120      	cbz	r0, 1544 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    153a:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    153e:	b130      	cbz	r0, 154e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    1540:	e009      	b.n	1556 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    1542:	e04a      	b.n	15da <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a6>
    1544:	f640 0193 	movw	r1, #2195	; 0x893
    1548:	2070      	movs	r0, #112	; 0x70
    154a:	f002 f887 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    154e:	f001 ff1b 	bl	3388 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1552:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1556:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    155a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    155e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1562:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1566:	6840      	ldr	r0, [r0, #4]
    1568:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    156c:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1570:	b001      	add	sp, #4
    1572:	2100      	movs	r1, #0
    1574:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1578:	4710      	bx	r2
    157a:	f001 fcf7 	bl	2f6c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    157e:	8ae0      	ldrh	r0, [r4, #22]
    1580:	b110      	cbz	r0, 1588 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x154>
    1582:	f001 fff3 	bl	356c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1586:	b128      	cbz	r0, 1594 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x160>
    1588:	f001 fd04 	bl	2f94 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    158c:	2800      	cmp	r0, #0
    158e:	bf18      	it	ne
    1590:	7766      	strbne	r6, [r4, #29]
    1592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1594:	f640 019d 	movw	r1, #2205	; 0x89d
    1598:	2070      	movs	r0, #112	; 0x70
    159a:	f002 f85f 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    159e:	4813      	ldr	r0, [pc, #76]	; (15ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    15a0:	6006      	str	r6, [r0, #0]
    15a2:	6890      	ldr	r0, [r2, #8]
    15a4:	6006      	str	r6, [r0, #0]
    15a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15a8:	7810      	ldrb	r0, [r2, #0]
    15aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    15ae:	f002 b929 	b.w	3804 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    15b2:	f7ff fcbf 	bl	f34 <CONFIG_ISR_STACK_SIZE+0x734>
    15b6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    15ba:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    15be:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    15c2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    15c6:	6840      	ldr	r0, [r0, #4]
    15c8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    15cc:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    15d0:	b001      	add	sp, #4
    15d2:	2105      	movs	r1, #5
    15d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    15d8:	4710      	bx	r2
    15da:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    15de:	2070      	movs	r0, #112	; 0x70
    15e0:	f002 f83c 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15e4:	2000064c 	.word	0x2000064c
    15e8:	20000038 	.word	0x20000038
    15ec:	40000508 	.word	0x40000508

000015f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    15f0:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15f4:	4682      	mov	sl, r0
    15f6:	48ef      	ldr	r0, [pc, #956]	; (19b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    15f8:	b095      	sub	sp, #84	; 0x54
    15fa:	6800      	ldr	r0, [r0, #0]
    15fc:	4dee      	ldr	r5, [pc, #952]	; (19b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    15fe:	05c0      	lsls	r0, r0, #23
    1600:	0dc0      	lsrs	r0, r0, #23
    1602:	d00e      	beq.n	1622 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1604:	3810      	subs	r0, #16
    1606:	b240      	sxtb	r0, r0
    1608:	2800      	cmp	r0, #0
    160a:	bfb8      	it	lt
    160c:	f000 000f 	andlt.w	r0, r0, #15
    1610:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1614:	bfac      	ite	ge
    1616:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    161a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    161e:	0940      	lsrs	r0, r0, #5
    1620:	d00d      	beq.n	163e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1622:	9816      	ldr	r0, [sp, #88]	; 0x58
    1624:	f04f 0b00 	mov.w	fp, #0
    1628:	7800      	ldrb	r0, [r0, #0]
    162a:	2800      	cmp	r0, #0
    162c:	bf18      	it	ne
    162e:	2801      	cmpne	r0, #1
    1630:	d018      	beq.n	1664 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1632:	f240 713b 	movw	r1, #1851	; 0x73b
    1636:	f04f 0070 	mov.w	r0, #112	; 0x70
    163a:	f002 f80f 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    163e:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1642:	f04f 0b01 	mov.w	fp, #1
    1646:	2820      	cmp	r0, #32
    1648:	d007      	beq.n	165a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    164a:	9816      	ldr	r0, [sp, #88]	; 0x58
    164c:	7800      	ldrb	r0, [r0, #0]
    164e:	b148      	cbz	r0, 1664 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1650:	f240 7137 	movw	r1, #1847	; 0x737
    1654:	2070      	movs	r0, #112	; 0x70
    1656:	f002 f801 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    165a:	f240 7134 	movw	r1, #1844	; 0x734
    165e:	2070      	movs	r0, #112	; 0x70
    1660:	f001 fffc 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1664:	4cd5      	ldr	r4, [pc, #852]	; (19bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    1666:	b124      	cbz	r4, 1672 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1668:	2100      	movs	r1, #0
    166a:	f240 703e 	movw	r0, #1854	; 0x73e
    166e:	f3af 8000 	nop.w
    1672:	2000      	movs	r0, #0
    1674:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    1678:	49d1      	ldr	r1, [pc, #836]	; (19c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    167a:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    167e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1682:	f04f 0901 	mov.w	r9, #1
    1686:	9000      	str	r0, [sp, #0]
    1688:	b124      	cbz	r4, 1694 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    168a:	2100      	movs	r1, #0
    168c:	f240 7049 	movw	r0, #1865	; 0x749
    1690:	f3af 8000 	nop.w
    1694:	f1b9 0f00 	cmp.w	r9, #0
    1698:	d00a      	beq.n	16b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    169a:	bf00      	nop
    169c:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    16a0:	f04f 0800 	mov.w	r8, #0
    16a4:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    16a8:	f1bb 0f00 	cmp.w	fp, #0
    16ac:	d007      	beq.n	16be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    16ae:	e038      	b.n	1722 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    16b0:	48c4      	ldr	r0, [pc, #784]	; (19c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    16b2:	2800      	cmp	r0, #0
    16b4:	bf18      	it	ne
    16b6:	f3af 8000 	nopne.w
    16ba:	b662      	cpsie	i
    16bc:	e7ee      	b.n	169c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    16be:	4637      	mov	r7, r6
    16c0:	2001      	movs	r0, #1
    16c2:	ea20 0607 	bic.w	r6, r0, r7
    16c6:	48c0      	ldr	r0, [pc, #768]	; (19c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    16c8:	2240      	movs	r2, #64	; 0x40
    16ca:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    16ce:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    16d2:	f006 fb0c 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    16d6:	b124      	cbz	r4, 16e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    16d8:	2100      	movs	r1, #0
    16da:	f240 505e 	movw	r0, #1374	; 0x55e
    16de:	f3af 8000 	nop.w
    16e2:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    16e6:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    16ea:	4429      	add	r1, r5
    16ec:	4428      	add	r0, r5
    16ee:	8c0a      	ldrh	r2, [r1, #32]
    16f0:	8402      	strh	r2, [r0, #32]
    16f2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    16f6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    16fa:	b124      	cbz	r4, 1706 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    16fc:	2100      	movs	r1, #0
    16fe:	f240 5062 	movw	r0, #1378	; 0x562
    1702:	f3af 8000 	nop.w
    1706:	b124      	cbz	r4, 1712 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    1708:	2100      	movs	r1, #0
    170a:	f240 7053 	movw	r0, #1875	; 0x753
    170e:	f3af 8000 	nop.w
    1712:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1716:	f88d 0008 	strb.w	r0, [sp, #8]
    171a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    171e:	2800      	cmp	r0, #0
    1720:	d1b2      	bne.n	1688 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1722:	b124      	cbz	r4, 172e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    1724:	2100      	movs	r1, #0
    1726:	f240 705d 	movw	r0, #1885	; 0x75d
    172a:	f3af 8000 	nop.w
    172e:	a802      	add	r0, sp, #8
    1730:	f001 f89a 	bl	2868 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    1734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1738:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    173c:	4633      	mov	r3, r6
    173e:	aa09      	add	r2, sp, #36	; 0x24
    1740:	a80e      	add	r0, sp, #56	; 0x38
    1742:	9916      	ldr	r1, [sp, #88]	; 0x58
    1744:	f7ff fa94 	bl	c70 <CONFIG_ISR_STACK_SIZE+0x470>
    1748:	b124      	cbz	r4, 1754 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    174a:	2100      	movs	r1, #0
    174c:	f240 7064 	movw	r0, #1892	; 0x764
    1750:	f3af 8000 	nop.w
    1754:	4a9c      	ldr	r2, [pc, #624]	; (19c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    1756:	990e      	ldr	r1, [sp, #56]	; 0x38
    1758:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    175c:	a809      	add	r0, sp, #36	; 0x24
    175e:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    1762:	2a01      	cmp	r2, #1
    1764:	bf18      	it	ne
    1766:	2a02      	cmpne	r2, #2
    1768:	d138      	bne.n	17dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    176a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    176c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    176e:	eba2 0201 	sub.w	r2, r2, r1
    1772:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1776:	eba3 0101 	sub.w	r1, r3, r1
    177a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    177e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1782:	2a02      	cmp	r2, #2
    1784:	d364      	bcc.n	1850 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    1786:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    178a:	bf98      	it	ls
    178c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1790:	d85e      	bhi.n	1850 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    1792:	f04f 0801 	mov.w	r8, #1
    1796:	ab14      	add	r3, sp, #80	; 0x50
    1798:	aa13      	add	r2, sp, #76	; 0x4c
    179a:	4631      	mov	r1, r6
    179c:	f7fe ff3e 	bl	61c <CONFIG_BT_HCI_TX_STACK_SIZE+0x1c>
    17a0:	2800      	cmp	r0, #0
    17a2:	d05d      	beq.n	1860 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    17a4:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    17a8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    17ac:	4633      	mov	r3, r6
    17ae:	428a      	cmp	r2, r1
    17b0:	d05a      	beq.n	1868 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    17b2:	2005      	movs	r0, #5
    17b4:	f7fe fd3e 	bl	234 <MPSL_IRQ_RADIO_Handler+0x40>
    17b8:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    17bc:	7048      	strb	r0, [r1, #1]
    17be:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    17c2:	2820      	cmp	r0, #32
    17c4:	bf1c      	itt	ne
    17c6:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    17ca:	f880 a001 	strbne.w	sl, [r0, #1]
    17ce:	d057      	beq.n	1880 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    17d0:	4632      	mov	r2, r6
    17d2:	4651      	mov	r1, sl
    17d4:	f05f 0003 	movs.w	r0, #3
    17d8:	f7ff fc5e 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    17dc:	b124      	cbz	r4, 17e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    17de:	2100      	movs	r1, #0
    17e0:	f240 7069 	movw	r0, #1897	; 0x769
    17e4:	f3af 8000 	nop.w
    17e8:	4878      	ldr	r0, [pc, #480]	; (19cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    17ea:	2800      	cmp	r0, #0
    17ec:	bf18      	it	ne
    17ee:	f3af 8000 	nopne.w
    17f2:	f3ef 8910 	mrs	r9, PRIMASK
    17f6:	b672      	cpsid	i
    17f8:	b124      	cbz	r4, 1804 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    17fa:	2100      	movs	r1, #0
    17fc:	f240 706f 	movw	r0, #1903	; 0x76f
    1800:	f3af 8000 	nop.w
    1804:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1808:	f88d 0008 	strb.w	r0, [sp, #8]
    180c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1810:	2800      	cmp	r0, #0
    1812:	f47f af39 	bne.w	1688 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1816:	b124      	cbz	r4, 1822 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    1818:	2100      	movs	r1, #0
    181a:	f240 7077 	movw	r0, #1911	; 0x777
    181e:	f3af 8000 	nop.w
    1822:	af09      	add	r7, sp, #36	; 0x24
    1824:	9800      	ldr	r0, [sp, #0]
    1826:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    182a:	f100 0708 	add.w	r7, r0, #8
    182e:	f1b8 0f00 	cmp.w	r8, #0
    1832:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    1836:	990d      	ldr	r1, [sp, #52]	; 0x34
    1838:	6181      	str	r1, [r0, #24]
    183a:	d051      	beq.n	18e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    183c:	b124      	cbz	r4, 1848 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    183e:	2100      	movs	r1, #0
    1840:	f240 7084 	movw	r0, #1924	; 0x784
    1844:	f3af 8000 	nop.w
    1848:	f1bb 0f00 	cmp.w	fp, #0
    184c:	d139      	bne.n	18c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    184e:	e01f      	b.n	1890 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    1850:	4632      	mov	r2, r6
    1852:	4651      	mov	r1, sl
    1854:	2004      	movs	r0, #4
    1856:	f7ff fc1f 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    185a:	f04f 0801 	mov.w	r8, #1
    185e:	e7bd      	b.n	17dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    1860:	4632      	mov	r2, r6
    1862:	4651      	mov	r1, sl
    1864:	2004      	movs	r0, #4
    1866:	e7b7      	b.n	17d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    1868:	2920      	cmp	r1, #32
    186a:	bf19      	ittee	ne
    186c:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1870:	7840      	ldrbne	r0, [r0, #1]
    1872:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    1876:	4428      	addeq	r0, r5
    1878:	bf08      	it	eq
    187a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    187e:	e79b      	b.n	17b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    1880:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    1884:	4429      	add	r1, r5
    1886:	f881 a020 	strb.w	sl, [r1, #32]
    188a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    188e:	e79f      	b.n	17d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    1890:	9811      	ldr	r0, [sp, #68]	; 0x44
    1892:	f010 0fff 	tst.w	r0, #255	; 0xff
    1896:	d014      	beq.n	18c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    1898:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    189c:	2820      	cmp	r0, #32
    189e:	d110      	bne.n	18c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    18a0:	b124      	cbz	r4, 18ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    18a2:	2100      	movs	r1, #0
    18a4:	f240 7089 	movw	r0, #1929	; 0x789
    18a8:	f3af 8000 	nop.w
    18ac:	4631      	mov	r1, r6
    18ae:	2002      	movs	r0, #2
    18b0:	f7ff fc24 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    18b4:	9010      	str	r0, [sp, #64]	; 0x40
    18b6:	b920      	cbnz	r0, 18c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    18b8:	9816      	ldr	r0, [sp, #88]	; 0x58
    18ba:	7800      	ldrb	r0, [r0, #0]
    18bc:	b1e8      	cbz	r0, 18fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
    18be:	2801      	cmp	r0, #1
    18c0:	d02a      	beq.n	1918 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    18c2:	b124      	cbz	r4, 18ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    18c4:	2100      	movs	r1, #0
    18c6:	f240 70a6 	movw	r0, #1958	; 0x7a6
    18ca:	f3af 8000 	nop.w
    18ce:	20ff      	movs	r0, #255	; 0xff
    18d0:	f1bb 0f00 	cmp.w	fp, #0
    18d4:	bf18      	it	ne
    18d6:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    18da:	d026      	beq.n	192a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33a>
    18dc:	f04f 0801 	mov.w	r8, #1
    18e0:	b124      	cbz	r4, 18ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    18e2:	2100      	movs	r1, #0
    18e4:	f240 70b7 	movw	r0, #1975	; 0x7b7
    18e8:	f3af 8000 	nop.w
    18ec:	9810      	ldr	r0, [sp, #64]	; 0x40
    18ee:	4e38      	ldr	r6, [pc, #224]	; (19d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    18f0:	2802      	cmp	r0, #2
    18f2:	d023      	beq.n	193c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    18f4:	2801      	cmp	r0, #1
    18f6:	d029      	beq.n	194c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    18f8:	e02d      	b.n	1956 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    18fa:	b124      	cbz	r4, 1906 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x316>
    18fc:	2100      	movs	r1, #0
    18fe:	f240 7091 	movw	r0, #1937	; 0x791
    1902:	f3af 8000 	nop.w
    1906:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    190a:	4651      	mov	r1, sl
    190c:	2004      	movs	r0, #4
    190e:	f7ff fbc3 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    1912:	f04f 0801 	mov.w	r8, #1
    1916:	e7e3      	b.n	18e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    1918:	2c00      	cmp	r4, #0
    191a:	f43f aeb5 	beq.w	1688 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    191e:	2100      	movs	r1, #0
    1920:	f240 709c 	movw	r0, #1948	; 0x79c
    1924:	f3af 8000 	nop.w
    1928:	e6ae      	b.n	1688 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    192a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    192e:	2101      	movs	r1, #1
    1930:	4391      	bics	r1, r2
    1932:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    1936:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    193a:	e7cf      	b.n	18dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
    193c:	68a8      	ldr	r0, [r5, #8]
    193e:	990e      	ldr	r1, [sp, #56]	; 0x38
    1940:	1a40      	subs	r0, r0, r1
    1942:	f006 f87a 	bl	7a3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1946:	6871      	ldr	r1, [r6, #4]
    1948:	b921      	cbnz	r1, 1954 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    194a:	e004      	b.n	1956 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    194c:	6871      	ldr	r1, [r6, #4]
    194e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1952:	b101      	cbz	r1, 1956 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    1954:	4788      	blx	r1
    1956:	f1b9 0f00 	cmp.w	r9, #0
    195a:	d024      	beq.n	19a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b6>
    195c:	b124      	cbz	r4, 1968 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    195e:	2100      	movs	r1, #0
    1960:	f240 70c7 	movw	r0, #1991	; 0x7c7
    1964:	f3af 8000 	nop.w
    1968:	f1b8 0f00 	cmp.w	r8, #0
    196c:	d011      	beq.n	1992 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    196e:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    1972:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1976:	4428      	add	r0, r5
    1978:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    197c:	2820      	cmp	r0, #32
    197e:	d008      	beq.n	1992 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    1980:	b124      	cbz	r4, 198c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>
    1982:	2100      	movs	r1, #0
    1984:	f240 70ce 	movw	r0, #1998	; 0x7ce
    1988:	f3af 8000 	nop.w
    198c:	7870      	ldrb	r0, [r6, #1]
    198e:	f001 ff39 	bl	3804 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1992:	b124      	cbz	r4, 199e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    1994:	2100      	movs	r1, #0
    1996:	f240 70d3 	movw	r0, #2003	; 0x7d3
    199a:	f3af 8000 	nop.w
    199e:	b017      	add	sp, #92	; 0x5c
    19a0:	4640      	mov	r0, r8
    19a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19a6:	4807      	ldr	r0, [pc, #28]	; (19c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    19a8:	2800      	cmp	r0, #0
    19aa:	bf18      	it	ne
    19ac:	f3af 8000 	nopne.w
    19b0:	b662      	cpsie	i
    19b2:	e7d3      	b.n	195c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>
    19b4:	e000ed04 	.word	0xe000ed04
    19b8:	20000a4c 	.word	0x20000a4c
    19bc:	00000000 	.word	0x00000000
    19c0:	2000064c 	.word	0x2000064c
    19c4:	00000000 	.word	0x00000000
    19c8:	200009cc 	.word	0x200009cc
    19cc:	00000000 	.word	0x00000000
    19d0:	20000038 	.word	0x20000038

000019d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    19d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19d8:	4606      	mov	r6, r0
    19da:	7800      	ldrb	r0, [r0, #0]
    19dc:	b08d      	sub	sp, #52	; 0x34
    19de:	b118      	cbz	r0, 19e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    19e0:	b00d      	add	sp, #52	; 0x34
    19e2:	2000      	movs	r0, #0
    19e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19e8:	488c      	ldr	r0, [pc, #560]	; (1c1c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    19ea:	6800      	ldr	r0, [r0, #0]
    19ec:	05c0      	lsls	r0, r0, #23
    19ee:	0dc0      	lsrs	r0, r0, #23
    19f0:	d00e      	beq.n	1a10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    19f2:	3810      	subs	r0, #16
    19f4:	b240      	sxtb	r0, r0
    19f6:	2800      	cmp	r0, #0
    19f8:	bfb8      	it	lt
    19fa:	f000 000f 	andlt.w	r0, r0, #15
    19fe:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1a02:	bfac      	ite	ge
    1a04:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1a08:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1a0c:	0940      	lsrs	r0, r0, #5
    1a0e:	d0e7      	beq.n	19e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    1a10:	4d83      	ldr	r5, [pc, #524]	; (1c20 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    1a12:	4c84      	ldr	r4, [pc, #528]	; (1c24 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    1a14:	f04f 0b01 	mov.w	fp, #1
    1a18:	2700      	movs	r7, #0
    1a1a:	b125      	cbz	r5, 1a26 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    1a1c:	2100      	movs	r1, #0
    1a1e:	f240 50e5 	movw	r0, #1509	; 0x5e5
    1a22:	f3af 8000 	nop.w
    1a26:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
    1a2a:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    1a2e:	f04f 0900 	mov.w	r9, #0
    1a32:	b125      	cbz	r5, 1a3e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    1a34:	2100      	movs	r1, #0
    1a36:	f240 50ea 	movw	r0, #1514	; 0x5ea
    1a3a:	f3af 8000 	nop.w
    1a3e:	487a      	ldr	r0, [pc, #488]	; (1c28 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    1a40:	ea2b 080a 	bic.w	r8, fp, sl
    1a44:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    1a48:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    1a4c:	2240      	movs	r2, #64	; 0x40
    1a4e:	f006 f94e 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1a52:	b125      	cbz	r5, 1a5e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    1a54:	2100      	movs	r1, #0
    1a56:	f240 505e 	movw	r0, #1374	; 0x55e
    1a5a:	f3af 8000 	nop.w
    1a5e:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    1a62:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    1a66:	4421      	add	r1, r4
    1a68:	4420      	add	r0, r4
    1a6a:	8c0a      	ldrh	r2, [r1, #32]
    1a6c:	8402      	strh	r2, [r0, #32]
    1a6e:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    1a72:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    1a76:	b125      	cbz	r5, 1a82 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    1a78:	2100      	movs	r1, #0
    1a7a:	f240 5062 	movw	r0, #1378	; 0x562
    1a7e:	f3af 8000 	nop.w
    1a82:	b125      	cbz	r5, 1a8e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    1a84:	2100      	movs	r1, #0
    1a86:	f240 50ef 	movw	r0, #1519	; 0x5ef
    1a8a:	f3af 8000 	nop.w
    1a8e:	a808      	add	r0, sp, #32
    1a90:	f000 feea 	bl	2868 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    1a94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    1a98:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    1a9c:	4643      	mov	r3, r8
    1a9e:	466a      	mov	r2, sp
    1aa0:	4631      	mov	r1, r6
    1aa2:	a80a      	add	r0, sp, #40	; 0x28
    1aa4:	f7ff f8e4 	bl	c70 <CONFIG_ISR_STACK_SIZE+0x470>
    1aa8:	b125      	cbz	r5, 1ab4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    1aaa:	2100      	movs	r1, #0
    1aac:	f240 50f5 	movw	r0, #1525	; 0x5f5
    1ab0:	f3af 8000 	nop.w
    1ab4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1ab8:	2820      	cmp	r0, #32
    1aba:	d01a      	beq.n	1af2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    1abc:	68e0      	ldr	r0, [r4, #12]
    1abe:	9900      	ldr	r1, [sp, #0]
    1ac0:	1a09      	subs	r1, r1, r0
    1ac2:	0209      	lsls	r1, r1, #8
    1ac4:	17ca      	asrs	r2, r1, #31
    1ac6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1aca:	1209      	asrs	r1, r1, #8
    1acc:	d511      	bpl.n	1af2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    1ace:	9900      	ldr	r1, [sp, #0]
    1ad0:	4281      	cmp	r1, r0
    1ad2:	d902      	bls.n	1ada <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    1ad4:	9902      	ldr	r1, [sp, #8]
    1ad6:	1c49      	adds	r1, r1, #1
    1ad8:	9102      	str	r1, [sp, #8]
    1ada:	e9dd 2100 	ldrd	r2, r1, [sp]
    1ade:	1a89      	subs	r1, r1, r2
    1ae0:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1ae4:	4408      	add	r0, r1
    1ae6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1aea:	e9cd 2000 	strd	r2, r0, [sp]
    1aee:	f04f 0901 	mov.w	r9, #1
    1af2:	b125      	cbz	r5, 1afe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    1af4:	2100      	movs	r1, #0
    1af6:	f240 50ff 	movw	r0, #1535	; 0x5ff
    1afa:	f3af 8000 	nop.w
    1afe:	9900      	ldr	r1, [sp, #0]
    1b00:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b02:	9a01      	ldr	r2, [sp, #4]
    1b04:	1a09      	subs	r1, r1, r0
    1b06:	1a10      	subs	r0, r2, r0
    1b08:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1b0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    1b14:	bf98      	it	ls
    1b16:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    1b1a:	d809      	bhi.n	1b30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    1b1c:	4643      	mov	r3, r8
    1b1e:	4669      	mov	r1, sp
    1b20:	4842      	ldr	r0, [pc, #264]	; (1c2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    1b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1b24:	f7fe fbc2 	bl	2ac <MPSL_IRQ_RADIO_Handler+0xb8>
    1b28:	ea59 0000 	orrs.w	r0, r9, r0
    1b2c:	d129      	bne.n	1b82 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    1b2e:	e042      	b.n	1bb6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    1b30:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1b32:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    1b36:	9002      	str	r0, [sp, #8]
    1b38:	aa09      	add	r2, sp, #36	; 0x24
    1b3a:	a907      	add	r1, sp, #28
    1b3c:	4650      	mov	r0, sl
    1b3e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    1b42:	f000 fd21 	bl	2588 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1b46:	f001 fa2f 	bl	2fa8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1b4a:	f000 fd01 	bl	2550 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1b4e:	4681      	mov	r9, r0
    1b50:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1b54:	2820      	cmp	r0, #32
    1b56:	d03b      	beq.n	1bd0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    1b58:	68e0      	ldr	r0, [r4, #12]
    1b5a:	1d40      	adds	r0, r0, #5
    1b5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b60:	9900      	ldr	r1, [sp, #0]
    1b62:	4281      	cmp	r1, r0
    1b64:	d902      	bls.n	1b6c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    1b66:	9902      	ldr	r1, [sp, #8]
    1b68:	1c49      	adds	r1, r1, #1
    1b6a:	9102      	str	r1, [sp, #8]
    1b6c:	e9dd 2100 	ldrd	r2, r1, [sp]
    1b70:	1a89      	subs	r1, r1, r2
    1b72:	9000      	str	r0, [sp, #0]
    1b74:	4408      	add	r0, r1
    1b76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b7a:	9001      	str	r0, [sp, #4]
    1b7c:	201f      	movs	r0, #31
    1b7e:	f88d 000c 	strb.w	r0, [sp, #12]
    1b82:	9800      	ldr	r0, [sp, #0]
    1b84:	f005 ff59 	bl	7a3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1b88:	1c41      	adds	r1, r0, #1
    1b8a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    1b8e:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1b92:	4410      	add	r0, r2
    1b94:	4408      	add	r0, r1
    1b96:	e9c6 0704 	strd	r0, r7, [r6, #16]
    1b9a:	b125      	cbz	r5, 1ba6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    1b9c:	2100      	movs	r1, #0
    1b9e:	f240 601a 	movw	r0, #1562	; 0x61a
    1ba2:	f3af 8000 	nop.w
    1ba6:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    1baa:	4a21      	ldr	r2, [pc, #132]	; (1c30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    1bac:	9b02      	ldr	r3, [sp, #8]
    1bae:	fbe3 1002 	umlal	r1, r0, r3, r2
    1bb2:	e9c6 1004 	strd	r1, r0, [r6, #16]
    1bb6:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    1bba:	f88d 0014 	strb.w	r0, [sp, #20]
    1bbe:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1bc2:	2800      	cmp	r0, #0
    1bc4:	f47f af29 	bne.w	1a1a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    1bc8:	b00d      	add	sp, #52	; 0x34
    1bca:	2001      	movs	r0, #1
    1bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bd0:	f108 0809 	add.w	r8, r8, #9
    1bd4:	f1ba 0f00 	cmp.w	sl, #0
    1bd8:	d016      	beq.n	1c08 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    1bda:	f001 fcc7 	bl	356c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1bde:	b998      	cbnz	r0, 1c08 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    1be0:	f001 fbb0 	bl	3344 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1be4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1be8:	bf08      	it	eq
    1bea:	200d      	moveq	r0, #13
    1bec:	d00b      	beq.n	1c06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    1bee:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1bf2:	3856      	subs	r0, #86	; 0x56
    1bf4:	bf08      	it	eq
    1bf6:	201c      	moveq	r0, #28
    1bf8:	d005      	beq.n	1c06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    1bfa:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1bfe:	389f      	subs	r0, #159	; 0x9f
    1c00:	bf14      	ite	ne
    1c02:	4638      	movne	r0, r7
    1c04:	2032      	moveq	r0, #50	; 0x32
    1c06:	4480      	add	r8, r0
    1c08:	9807      	ldr	r0, [sp, #28]
    1c0a:	4581      	cmp	r9, r0
    1c0c:	bf84      	itt	hi
    1c0e:	eba9 0000 	subhi.w	r0, r9, r0
    1c12:	4480      	addhi	r8, r0
    1c14:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    1c18:	e7a2      	b.n	1b60 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    1c1a:	0000      	.short	0x0000
    1c1c:	e000ed04 	.word	0xe000ed04
    1c20:	00000000 	.word	0x00000000
    1c24:	20000a4c 	.word	0x20000a4c
    1c28:	200009cc 	.word	0x200009cc
    1c2c:	0f424000 	.word	0x0f424000
    1c30:	1e848000 	.word	0x1e848000

00001c34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1c34:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c38:	4d92      	ldr	r5, [pc, #584]	; (1e84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>)
    1c3a:	b08c      	sub	sp, #48	; 0x30
    1c3c:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    1c40:	2000      	movs	r0, #0
    1c42:	9008      	str	r0, [sp, #32]
    1c44:	9006      	str	r0, [sp, #24]
    1c46:	2001      	movs	r0, #1
    1c48:	4c8f      	ldr	r4, [pc, #572]	; (1e88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>)
    1c4a:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    1c4e:	f04f 0800 	mov.w	r8, #0
    1c52:	4607      	mov	r7, r0
    1c54:	9007      	str	r0, [sp, #28]
    1c56:	b124      	cbz	r4, 1c62 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    1c58:	2100      	movs	r1, #0
    1c5a:	f240 70e4 	movw	r0, #2020	; 0x7e4
    1c5e:	f3af 8000 	nop.w
    1c62:	9807      	ldr	r0, [sp, #28]
    1c64:	2800      	cmp	r0, #0
    1c66:	d03c      	beq.n	1ce2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    1c68:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    1c6c:	b124      	cbz	r4, 1c78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    1c6e:	2100      	movs	r1, #0
    1c70:	f240 70e9 	movw	r0, #2025	; 0x7e9
    1c74:	f3af 8000 	nop.w
    1c78:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    1c7c:	2240      	movs	r2, #64	; 0x40
    1c7e:	ea27 060a 	bic.w	r6, r7, sl
    1c82:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    1c86:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    1c8a:	4683      	mov	fp, r0
    1c8c:	f006 f82f 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1c90:	b124      	cbz	r4, 1c9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    1c92:	2100      	movs	r1, #0
    1c94:	f240 505e 	movw	r0, #1374	; 0x55e
    1c98:	f3af 8000 	nop.w
    1c9c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1ca0:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    1ca4:	4428      	add	r0, r5
    1ca6:	4429      	add	r1, r5
    1ca8:	9000      	str	r0, [sp, #0]
    1caa:	8c0a      	ldrh	r2, [r1, #32]
    1cac:	8402      	strh	r2, [r0, #32]
    1cae:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    1cb2:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    1cb6:	b124      	cbz	r4, 1cc2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    1cb8:	2100      	movs	r1, #0
    1cba:	f240 5062 	movw	r0, #1378	; 0x562
    1cbe:	f3af 8000 	nop.w
    1cc2:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1cc6:	f88d 0008 	strb.w	r0, [sp, #8]
    1cca:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1cce:	b178      	cbz	r0, 1cf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    1cd0:	2c00      	cmp	r4, #0
    1cd2:	bf1c      	itt	ne
    1cd4:	2100      	movne	r1, #0
    1cd6:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    1cda:	d0bc      	beq.n	1c56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    1cdc:	f3af 8000 	nop.w
    1ce0:	e7b9      	b.n	1c56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    1ce2:	486a      	ldr	r0, [pc, #424]	; (1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>)
    1ce4:	2800      	cmp	r0, #0
    1ce6:	bf18      	it	ne
    1ce8:	f3af 8000 	nopne.w
    1cec:	b662      	cpsie	i
    1cee:	e7bb      	b.n	1c68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    1cf0:	b124      	cbz	r4, 1cfc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    1cf2:	2100      	movs	r1, #0
    1cf4:	f240 70f3 	movw	r0, #2035	; 0x7f3
    1cf8:	f3af 8000 	nop.w
    1cfc:	980c      	ldr	r0, [sp, #48]	; 0x30
    1cfe:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    1d02:	2803      	cmp	r0, #3
    1d04:	d17e      	bne.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1d06:	9a00      	ldr	r2, [sp, #0]
    1d08:	990c      	ldr	r1, [sp, #48]	; 0x30
    1d0a:	f892 0020 	ldrb.w	r0, [r2, #32]
    1d0e:	4288      	cmp	r0, r1
    1d10:	bf14      	ite	ne
    1d12:	f04f 0a00 	movne.w	sl, #0
    1d16:	f04f 0a01 	moveq.w	sl, #1
    1d1a:	f102 0c20 	add.w	ip, r2, #32
    1d1e:	4683      	mov	fp, r0
    1d20:	2220      	movs	r2, #32
    1d22:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    1d26:	e003      	b.n	1d30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    1d28:	4602      	mov	r2, r0
    1d2a:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1d2e:	7840      	ldrb	r0, [r0, #1]
    1d30:	4288      	cmp	r0, r1
    1d32:	d002      	beq.n	1d3a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    1d34:	2820      	cmp	r0, #32
    1d36:	d00a      	beq.n	1d4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2>
    1d38:	e7f6      	b.n	1d28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    1d3a:	2820      	cmp	r0, #32
    1d3c:	d007      	beq.n	1d4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2>
    1d3e:	4583      	cmp	fp, r0
    1d40:	d107      	bne.n	1d52 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6>
    1d42:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    1d46:	7840      	ldrb	r0, [r0, #1]
    1d48:	f88c 0000 	strb.w	r0, [ip]
    1d4c:	e007      	b.n	1d5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12>
    1d4e:	4640      	mov	r0, r8
    1d50:	e00c      	b.n	1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d52:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1d56:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    1d5a:	7840      	ldrb	r0, [r0, #1]
    1d5c:	7048      	strb	r0, [r1, #1]
    1d5e:	b124      	cbz	r4, 1d6a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e>
    1d60:	2100      	movs	r1, #0
    1d62:	f240 40c9 	movw	r0, #1225	; 0x4c9
    1d66:	f3af 8000 	nop.w
    1d6a:	4638      	mov	r0, r7
    1d6c:	46c3      	mov	fp, r8
    1d6e:	ea10 0f0a 	tst.w	r0, sl
    1d72:	bf18      	it	ne
    1d74:	46bb      	movne	fp, r7
    1d76:	2800      	cmp	r0, #0
    1d78:	d04e      	beq.n	1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    1d7a:	b124      	cbz	r4, 1d86 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a>
    1d7c:	2100      	movs	r1, #0
    1d7e:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    1d82:	f3af 8000 	nop.w
    1d86:	4632      	mov	r2, r6
    1d88:	2001      	movs	r0, #1
    1d8a:	990c      	ldr	r1, [sp, #48]	; 0x30
    1d8c:	f7ff f984 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    1d90:	b124      	cbz	r4, 1d9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>
    1d92:	2100      	movs	r1, #0
    1d94:	f640 0001 	movw	r0, #2049	; 0x801
    1d98:	f3af 8000 	nop.w
    1d9c:	483c      	ldr	r0, [pc, #240]	; (1e90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>)
    1d9e:	2800      	cmp	r0, #0
    1da0:	bf18      	it	ne
    1da2:	f3af 8000 	nopne.w
    1da6:	f3ef 8010 	mrs	r0, PRIMASK
    1daa:	b672      	cpsid	i
    1dac:	9007      	str	r0, [sp, #28]
    1dae:	b124      	cbz	r4, 1dba <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6e>
    1db0:	2100      	movs	r1, #0
    1db2:	f640 0006 	movw	r0, #2054	; 0x806
    1db6:	f3af 8000 	nop.w
    1dba:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1dbe:	f88d 0008 	strb.w	r0, [sp, #8]
    1dc2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1dc6:	b138      	cbz	r0, 1dd8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>
    1dc8:	2c00      	cmp	r4, #0
    1dca:	bf1c      	itt	ne
    1dcc:	2100      	movne	r1, #0
    1dce:	f640 000a 	movwne	r0, #2058	; 0x80a
    1dd2:	f43f af40 	beq.w	1c56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    1dd6:	e781      	b.n	1cdc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    1dd8:	f1bb 0f00 	cmp.w	fp, #0
    1ddc:	d009      	beq.n	1df2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa6>
    1dde:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1de2:	2820      	cmp	r0, #32
    1de4:	d105      	bne.n	1df2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa6>
    1de6:	4631      	mov	r1, r6
    1de8:	2002      	movs	r0, #2
    1dea:	f7ff f987 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1dee:	9006      	str	r0, [sp, #24]
    1df0:	b1f8      	cbz	r0, 1e32 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe6>
    1df2:	b124      	cbz	r4, 1dfe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb2>
    1df4:	2100      	movs	r1, #0
    1df6:	f640 001e 	movw	r0, #2078	; 0x81e
    1dfa:	f3af 8000 	nop.w
    1dfe:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    1e02:	e000      	b.n	1e06 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xba>
    1e04:	e008      	b.n	1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    1e06:	ea27 0000 	bic.w	r0, r7, r0
    1e0a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    1e0e:	20ff      	movs	r0, #255	; 0xff
    1e10:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    1e14:	2001      	movs	r0, #1
    1e16:	9008      	str	r0, [sp, #32]
    1e18:	b124      	cbz	r4, 1e24 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd8>
    1e1a:	2100      	movs	r1, #0
    1e1c:	f640 0027 	movw	r0, #2087	; 0x827
    1e20:	f3af 8000 	nop.w
    1e24:	9806      	ldr	r0, [sp, #24]
    1e26:	4e1b      	ldr	r6, [pc, #108]	; (1e94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>)
    1e28:	2802      	cmp	r0, #2
    1e2a:	d009      	beq.n	1e40 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf4>
    1e2c:	2801      	cmp	r0, #1
    1e2e:	d010      	beq.n	1e52 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x106>
    1e30:	e014      	b.n	1e5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>
    1e32:	b19c      	cbz	r4, 1e5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>
    1e34:	2100      	movs	r1, #0
    1e36:	f640 0019 	movw	r0, #2073	; 0x819
    1e3a:	f3af 8000 	nop.w
    1e3e:	e7ec      	b.n	1e1a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xce>
    1e40:	f000 fd0c 	bl	285c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1e44:	68a9      	ldr	r1, [r5, #8]
    1e46:	1a08      	subs	r0, r1, r0
    1e48:	f005 fdf7 	bl	7a3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1e4c:	6871      	ldr	r1, [r6, #4]
    1e4e:	b921      	cbnz	r1, 1e5a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10e>
    1e50:	e004      	b.n	1e5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>
    1e52:	6871      	ldr	r1, [r6, #4]
    1e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1e58:	b101      	cbz	r1, 1e5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>
    1e5a:	4788      	blx	r1
    1e5c:	9807      	ldr	r0, [sp, #28]
    1e5e:	b148      	cbz	r0, 1e74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x128>
    1e60:	b124      	cbz	r4, 1e6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>
    1e62:	2100      	movs	r1, #0
    1e64:	f640 003c 	movw	r0, #2108	; 0x83c
    1e68:	f3af 8000 	nop.w
    1e6c:	9808      	ldr	r0, [sp, #32]
    1e6e:	b00d      	add	sp, #52	; 0x34
    1e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e74:	4805      	ldr	r0, [pc, #20]	; (1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>)
    1e76:	2800      	cmp	r0, #0
    1e78:	bf18      	it	ne
    1e7a:	f3af 8000 	nopne.w
    1e7e:	b662      	cpsie	i
    1e80:	e7ee      	b.n	1e60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>
    1e82:	0000      	.short	0x0000
    1e84:	20000a4c 	.word	0x20000a4c
	...
    1e94:	20000038 	.word	0x20000038

00001e98 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    1e98:	b510      	push	{r4, lr}
    1e9a:	2820      	cmp	r0, #32
    1e9c:	d211      	bcs.n	1ec2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    1e9e:	490e      	ldr	r1, [pc, #56]	; (1ed8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    1ea0:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    1ea4:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    1ea8:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    1eac:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    1eb0:	b13b      	cbz	r3, 1ec2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    1eb2:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    1eb6:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    1eba:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    1ebe:	2a01      	cmp	r2, #1
    1ec0:	d001      	beq.n	1ec6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    1ec2:	2000      	movs	r0, #0
    1ec4:	bd10      	pop	{r4, pc}
    1ec6:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    1eca:	4601      	mov	r1, r0
    1ecc:	2000      	movs	r0, #0
    1ece:	f7ff f8e3 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    1ed2:	2001      	movs	r0, #1
    1ed4:	bd10      	pop	{r4, pc}
    1ed6:	0000      	.short	0x0000
    1ed8:	20000a4c 	.word	0x20000a4c

00001edc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    1edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ee0:	4e86      	ldr	r6, [pc, #536]	; (20fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    1ee2:	4680      	mov	r8, r0
    1ee4:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    1ee8:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    1eec:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    1ef0:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    1ef4:	2800      	cmp	r0, #0
    1ef6:	d071      	beq.n	1fdc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    1ef8:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    1efc:	4d80      	ldr	r5, [pc, #512]	; (2100 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    1efe:	b125      	cbz	r5, 1f0a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    1f00:	2100      	movs	r1, #0
    1f02:	f640 30ae 	movw	r0, #2990	; 0xbae
    1f06:	f3af 8000 	nop.w
    1f0a:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    1f0e:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    1f12:	2801      	cmp	r0, #1
    1f14:	d018      	beq.n	1f48 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    1f16:	b2c0      	uxtb	r0, r0
    1f18:	2804      	cmp	r0, #4
    1f1a:	bf1c      	itt	ne
    1f1c:	2805      	cmpne	r0, #5
    1f1e:	2806      	cmpne	r0, #6
    1f20:	d061      	beq.n	1fe6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    1f22:	b12d      	cbz	r5, 1f30 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    1f24:	f04f 0100 	mov.w	r1, #0
    1f28:	f640 30ba 	movw	r0, #3002	; 0xbba
    1f2c:	f3af 8000 	nop.w
    1f30:	f001 fcce 	bl	38d0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    1f34:	b125      	cbz	r5, 1f40 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    1f36:	2100      	movs	r1, #0
    1f38:	f640 30be 	movw	r0, #3006	; 0xbbe
    1f3c:	f3af 8000 	nop.w
    1f40:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    1f44:	2801      	cmp	r0, #1
    1f46:	d1e6      	bne.n	1f16 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    1f48:	2401      	movs	r4, #1
    1f4a:	b125      	cbz	r5, 1f56 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    1f4c:	2100      	movs	r1, #0
    1f4e:	f640 30c5 	movw	r0, #3013	; 0xbc5
    1f52:	f3af 8000 	nop.w
    1f56:	2c00      	cmp	r4, #0
    1f58:	d04b      	beq.n	1ff2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    1f5a:	2000      	movs	r0, #0
    1f5c:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    1f60:	b125      	cbz	r5, 1f6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    1f62:	2100      	movs	r1, #0
    1f64:	f640 30ca 	movw	r0, #3018	; 0xbca
    1f68:	f3af 8000 	nop.w
    1f6c:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    1f70:	2001      	movs	r0, #1
    1f72:	ea20 090b 	bic.w	r9, r0, fp
    1f76:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    1f7a:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    1f7e:	2240      	movs	r2, #64	; 0x40
    1f80:	f005 feb5 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f84:	b125      	cbz	r5, 1f90 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    1f86:	2100      	movs	r1, #0
    1f88:	f240 505e 	movw	r0, #1374	; 0x55e
    1f8c:	f3af 8000 	nop.w
    1f90:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    1f94:	eb00 0a06 	add.w	sl, r0, r6
    1f98:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    1f9c:	4430      	add	r0, r6
    1f9e:	8c01      	ldrh	r1, [r0, #32]
    1fa0:	f8aa 1020 	strh.w	r1, [sl, #32]
    1fa4:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1fa8:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    1fac:	b125      	cbz	r5, 1fb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    1fae:	2100      	movs	r1, #0
    1fb0:	f240 5062 	movw	r0, #1378	; 0x562
    1fb4:	f3af 8000 	nop.w
    1fb8:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    1fbc:	f88d 0000 	strb.w	r0, [sp]
    1fc0:	f89d 0000 	ldrb.w	r0, [sp]
    1fc4:	b1e0      	cbz	r0, 2000 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    1fc6:	2d00      	cmp	r5, #0
    1fc8:	bf1c      	itt	ne
    1fca:	2100      	movne	r1, #0
    1fcc:	f44f 603d 	movne.w	r0, #3024	; 0xbd0
    1fd0:	d0bb      	beq.n	1f4a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    1fd2:	bf00      	nop
    1fd4:	f3af 8000 	nop.w
    1fd8:	e7b7      	b.n	1f4a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    1fda:	e7ff      	b.n	1fdc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    1fdc:	f640 31a5 	movw	r1, #2981	; 0xba5
    1fe0:	2070      	movs	r0, #112	; 0x70
    1fe2:	f001 fb3b 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fe6:	464a      	mov	r2, r9
    1fe8:	4641      	mov	r1, r8
    1fea:	2001      	movs	r0, #1
    1fec:	f7ff f854 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    1ff0:	e7a0      	b.n	1f34 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    1ff2:	4844      	ldr	r0, [pc, #272]	; (2104 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    1ff4:	2800      	cmp	r0, #0
    1ff6:	bf18      	it	ne
    1ff8:	f3af 8000 	nopne.w
    1ffc:	b662      	cpsie	i
    1ffe:	e7ac      	b.n	1f5a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    2000:	b125      	cbz	r5, 200c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    2002:	2100      	movs	r1, #0
    2004:	f640 30d4 	movw	r0, #3028	; 0xbd4
    2008:	f3af 8000 	nop.w
    200c:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2010:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2014:	4640      	mov	r0, r8
    2016:	461c      	mov	r4, r3
    2018:	f04f 0b20 	mov.w	fp, #32
    201c:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2020:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2024:	e004      	b.n	2030 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    2026:	46a3      	mov	fp, r4
    2028:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    202c:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2030:	4284      	cmp	r4, r0
    2032:	d002      	beq.n	203a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    2034:	2c20      	cmp	r4, #32
    2036:	d02b      	beq.n	2090 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    2038:	e7f5      	b.n	2026 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    203a:	2c20      	cmp	r4, #32
    203c:	d028      	beq.n	2090 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    203e:	42a3      	cmp	r3, r4
    2040:	d104      	bne.n	204c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    2042:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    2046:	7840      	ldrb	r0, [r0, #1]
    2048:	7008      	strb	r0, [r1, #0]
    204a:	e005      	b.n	2058 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    204c:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2050:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2054:	7840      	ldrb	r0, [r0, #1]
    2056:	7048      	strb	r0, [r1, #1]
    2058:	f1ba 0f00 	cmp.w	sl, #0
    205c:	d011      	beq.n	2082 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    205e:	b125      	cbz	r5, 206a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2060:	2100      	movs	r1, #0
    2062:	f240 40c1 	movw	r0, #1217	; 0x4c1
    2066:	f3af 8000 	nop.w
    206a:	f89a 0000 	ldrb.w	r0, [sl]
    206e:	42a0      	cmp	r0, r4
    2070:	d107      	bne.n	2082 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    2072:	b125      	cbz	r5, 207e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    2074:	2100      	movs	r1, #0
    2076:	f240 40c4 	movw	r0, #1220	; 0x4c4
    207a:	f3af 8000 	nop.w
    207e:	f88a b000 	strb.w	fp, [sl]
    2082:	b15d      	cbz	r5, 209c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2084:	2100      	movs	r1, #0
    2086:	f240 40c9 	movw	r0, #1225	; 0x4c9
    208a:	f3af 8000 	nop.w
    208e:	e000      	b.n	2092 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    2090:	b125      	cbz	r5, 209c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2092:	2100      	movs	r1, #0
    2094:	f640 30d8 	movw	r0, #3032	; 0xbd8
    2098:	f3af 8000 	nop.w
    209c:	481a      	ldr	r0, [pc, #104]	; (2108 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    209e:	2800      	cmp	r0, #0
    20a0:	bf18      	it	ne
    20a2:	f3af 8000 	nopne.w
    20a6:	f3ef 8410 	mrs	r4, PRIMASK
    20aa:	b672      	cpsid	i
    20ac:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    20b0:	f88d 0000 	strb.w	r0, [sp]
    20b4:	f89d 0000 	ldrb.w	r0, [sp]
    20b8:	b138      	cbz	r0, 20ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    20ba:	2d00      	cmp	r5, #0
    20bc:	bf1c      	itt	ne
    20be:	2100      	movne	r1, #0
    20c0:	f640 30de 	movwne	r0, #3038	; 0xbde
    20c4:	f43f af41 	beq.w	1f4a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    20c8:	e784      	b.n	1fd4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    20ca:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    20ce:	20ff      	movs	r0, #255	; 0xff
    20d0:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    20d4:	b154      	cbz	r4, 20ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    20d6:	2d00      	cmp	r5, #0
    20d8:	bf08      	it	eq
    20da:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20de:	2100      	movs	r1, #0
    20e0:	f640 30eb 	movw	r0, #3051	; 0xbeb
    20e4:	f3af 8000 	nop.w
    20e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20ec:	4805      	ldr	r0, [pc, #20]	; (2104 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    20ee:	2800      	cmp	r0, #0
    20f0:	bf18      	it	ne
    20f2:	f3af 8000 	nopne.w
    20f6:	b662      	cpsie	i
    20f8:	e7ed      	b.n	20d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    20fa:	0000      	.short	0x0000
    20fc:	20000a4c 	.word	0x20000a4c
	...

0000210c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    210c:	b570      	push	{r4, r5, r6, lr}
    210e:	460d      	mov	r5, r1
    2110:	4606      	mov	r6, r0
    2112:	f001 fa19 	bl	3548 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2116:	480f      	ldr	r0, [pc, #60]	; (2154 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2118:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    211c:	2400      	movs	r4, #0
    211e:	3880      	subs	r0, #128	; 0x80
    2120:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2124:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2128:	b129      	cbz	r1, 2136 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    212a:	1c61      	adds	r1, r4, #1
    212c:	b2cc      	uxtb	r4, r1
    212e:	2c20      	cmp	r4, #32
    2130:	d3f8      	bcc.n	2124 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2132:	2020      	movs	r0, #32
    2134:	bd70      	pop	{r4, r5, r6, pc}
    2136:	4808      	ldr	r0, [pc, #32]	; (2158 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2138:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    213c:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    2140:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2144:	4621      	mov	r1, r4
    2146:	6045      	str	r5, [r0, #4]
    2148:	2001      	movs	r0, #1
    214a:	f7fe ffa5 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    214e:	4620      	mov	r0, r4
    2150:	bd70      	pop	{r4, r5, r6, pc}
    2152:	0000      	.short	0x0000
    2154:	20000a4c 	.word	0x20000a4c
    2158:	2000064c 	.word	0x2000064c

0000215c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    215c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2160:	b083      	sub	sp, #12
    2162:	f000 fb7b 	bl	285c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2166:	4605      	mov	r5, r0
    2168:	f000 fe4a 	bl	2e00 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    216c:	4c84      	ldr	r4, [pc, #528]	; (2380 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    216e:	6860      	ldr	r0, [r4, #4]
    2170:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2174:	bf1c      	itt	ne
    2176:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    217a:	6060      	strne	r0, [r4, #4]
    217c:	7fa0      	ldrb	r0, [r4, #30]
    217e:	f8df 9204 	ldr.w	r9, [pc, #516]	; 2384 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    2182:	b990      	cbnz	r0, 21aa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    2184:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    2188:	1a40      	subs	r0, r0, r1
    218a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    218e:	f44f 710c 	mov.w	r1, #560	; 0x230
    2192:	f005 fc7d 	bl	7a90 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2196:	68e1      	ldr	r1, [r4, #12]
    2198:	4408      	add	r0, r1
    219a:	1a28      	subs	r0, r5, r0
    219c:	0200      	lsls	r0, r0, #8
    219e:	17c1      	asrs	r1, r0, #31
    21a0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    21a4:	1200      	asrs	r0, r0, #8
    21a6:	0fc0      	lsrs	r0, r0, #31
    21a8:	d012      	beq.n	21d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    21aa:	7e60      	ldrb	r0, [r4, #25]
    21ac:	b320      	cbz	r0, 21f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    21ae:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    21b2:	f88d 0000 	strb.w	r0, [sp]
    21b6:	f89d 0000 	ldrb.w	r0, [sp]
    21ba:	b1e8      	cbz	r0, 21f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    21bc:	f000 fc7c 	bl	2ab8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    21c0:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    21c4:	b1f0      	cbz	r0, 2204 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    21c6:	f240 31f5 	movw	r1, #1013	; 0x3f5
    21ca:	2070      	movs	r0, #112	; 0x70
    21cc:	f001 fa46 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21d0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    21d4:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    21d8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    21dc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    21e0:	6840      	ldr	r0, [r0, #4]
    21e2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    21e6:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    21ea:	2108      	movs	r1, #8
    21ec:	4790      	blx	r2
    21ee:	f240 31dd 	movw	r1, #989	; 0x3dd
    21f2:	2070      	movs	r0, #112	; 0x70
    21f4:	f001 fa32 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21f8:	1ce8      	adds	r0, r5, #3
    21fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21fe:	f000 fb53 	bl	28a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2202:	e7dd      	b.n	21c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    2204:	2001      	movs	r0, #1
    2206:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    220a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    220e:	2820      	cmp	r0, #32
    2210:	d021      	beq.n	2256 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    2212:	f894 802d 	ldrb.w	r8, [r4, #45]	; 0x2d
    2216:	2020      	movs	r0, #32
    2218:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    221c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2220:	2000      	movs	r0, #0
    2222:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    2226:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    222a:	6020      	str	r0, [r4, #0]
    222c:	f000 fec2 	bl	2fb4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    2230:	7720      	strb	r0, [r4, #28]
    2232:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    2236:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    223a:	1907      	adds	r7, r0, r4
    223c:	f897 0020 	ldrb.w	r0, [r7, #32]
    2240:	2820      	cmp	r0, #32
    2242:	d058      	beq.n	22f6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2244:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2248:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    224c:	f899 001a 	ldrb.w	r0, [r9, #26]
    2250:	2801      	cmp	r0, #1
    2252:	d005      	beq.n	2260 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    2254:	e04f      	b.n	22f6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2256:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    225a:	2070      	movs	r0, #112	; 0x70
    225c:	f001 f9fe 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2260:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    2264:	aa01      	add	r2, sp, #4
    2266:	4669      	mov	r1, sp
    2268:	4658      	mov	r0, fp
    226a:	f000 f98d 	bl	2588 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    226e:	f000 fe9b 	bl	2fa8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    2272:	f000 f96d 	bl	2550 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2276:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    227a:	2820      	cmp	r0, #32
    227c:	d004      	beq.n	2288 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    227e:	68e0      	ldr	r0, [r4, #12]
    2280:	1d40      	adds	r0, r0, #5
    2282:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2286:	e01d      	b.n	22c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    2288:	f105 0a09 	add.w	sl, r5, #9
    228c:	f1bb 0f00 	cmp.w	fp, #0
    2290:	d016      	beq.n	22c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    2292:	f001 f96b 	bl	356c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2296:	b998      	cbnz	r0, 22c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    2298:	f001 f854 	bl	3344 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    229c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    22a0:	bf08      	it	eq
    22a2:	200d      	moveq	r0, #13
    22a4:	d00b      	beq.n	22be <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    22a6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    22aa:	3856      	subs	r0, #86	; 0x56
    22ac:	bf08      	it	eq
    22ae:	201c      	moveq	r0, #28
    22b0:	d005      	beq.n	22be <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    22b2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    22b6:	389f      	subs	r0, #159	; 0x9f
    22b8:	bf14      	ite	ne
    22ba:	2000      	movne	r0, #0
    22bc:	2032      	moveq	r0, #50	; 0x32
    22be:	4482      	add	sl, r0
    22c0:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    22c4:	f8d9 2008 	ldr.w	r2, [r9, #8]
    22c8:	1a81      	subs	r1, r0, r2
    22ca:	0209      	lsls	r1, r1, #8
    22cc:	17cb      	asrs	r3, r1, #31
    22ce:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    22d2:	1209      	asrs	r1, r1, #8
    22d4:	2900      	cmp	r1, #0
    22d6:	dc0e      	bgt.n	22f6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    22d8:	f109 0308 	add.w	r3, r9, #8
    22dc:	4282      	cmp	r2, r0
    22de:	d202      	bcs.n	22e6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    22e0:	6899      	ldr	r1, [r3, #8]
    22e2:	1e49      	subs	r1, r1, #1
    22e4:	6099      	str	r1, [r3, #8]
    22e6:	e9d3 2100 	ldrd	r2, r1, [r3]
    22ea:	1a89      	subs	r1, r1, r2
    22ec:	6018      	str	r0, [r3, #0]
    22ee:	4408      	add	r0, r1
    22f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    22f4:	6058      	str	r0, [r3, #4]
    22f6:	4631      	mov	r1, r6
    22f8:	2001      	movs	r0, #1
    22fa:	f7fe feff 	bl	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    22fe:	ea5f 0900 	movs.w	r9, r0
    2302:	d0f8      	beq.n	22f6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2304:	4820      	ldr	r0, [pc, #128]	; (2388 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    2306:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    230a:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    230e:	2802      	cmp	r0, #2
    2310:	d104      	bne.n	231c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    2312:	4632      	mov	r2, r6
    2314:	4641      	mov	r1, r8
    2316:	2006      	movs	r0, #6
    2318:	f7fe febe 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    231c:	20ff      	movs	r0, #255	; 0xff
    231e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2322:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    2326:	4e19      	ldr	r6, [pc, #100]	; (238c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    2328:	2820      	cmp	r0, #32
    232a:	bf1c      	itt	ne
    232c:	7870      	ldrbne	r0, [r6, #1]
    232e:	f001 fa69 	blne	3804 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2332:	7f20      	ldrb	r0, [r4, #28]
    2334:	b120      	cbz	r0, 2340 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    2336:	f000 fe19 	bl	2f6c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    233a:	2000      	movs	r0, #0
    233c:	7720      	strb	r0, [r4, #28]
    233e:	7760      	strb	r0, [r4, #29]
    2340:	f1b9 0f02 	cmp.w	r9, #2
    2344:	d011      	beq.n	236a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    2346:	f1b9 0f01 	cmp.w	r9, #1
    234a:	bf1c      	itt	ne
    234c:	b003      	addne	sp, #12
    234e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2356:	6871      	ldr	r1, [r6, #4]
    2358:	2900      	cmp	r1, #0
    235a:	bf04      	itt	eq
    235c:	b003      	addeq	sp, #12
    235e:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2362:	b003      	add	sp, #12
    2364:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2368:	4708      	bx	r1
    236a:	68a0      	ldr	r0, [r4, #8]
    236c:	1b40      	subs	r0, r0, r5
    236e:	f005 fb64 	bl	7a3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2372:	6871      	ldr	r1, [r6, #4]
    2374:	2900      	cmp	r1, #0
    2376:	d1f4      	bne.n	2362 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    2378:	b003      	add	sp, #12
    237a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    237e:	0000      	.short	0x0000
    2380:	20000a4c 	.word	0x20000a4c
    2384:	2000064c 	.word	0x2000064c
    2388:	200009cc 	.word	0x200009cc
    238c:	20000038 	.word	0x20000038

00002390 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2390:	b570      	push	{r4, r5, r6, lr}
    2392:	4c42      	ldr	r4, [pc, #264]	; (249c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    2394:	4605      	mov	r5, r0
    2396:	b082      	sub	sp, #8
    2398:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    239c:	2820      	cmp	r0, #32
    239e:	d008      	beq.n	23b2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    23a0:	6860      	ldr	r0, [r4, #4]
    23a2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    23a6:	d009      	beq.n	23bc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    23a8:	f640 21d9 	movw	r1, #2777	; 0xad9
    23ac:	2070      	movs	r0, #112	; 0x70
    23ae:	f001 f955 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23b2:	f640 21d8 	movw	r1, #2776	; 0xad8
    23b6:	2070      	movs	r0, #112	; 0x70
    23b8:	f001 f950 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23bc:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    23c0:	4937      	ldr	r1, [pc, #220]	; (24a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    23c2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    23c6:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    23ca:	68b0      	ldr	r0, [r6, #8]
    23cc:	f005 fb35 	bl	7a3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    23d0:	4602      	mov	r2, r0
    23d2:	8af0      	ldrh	r0, [r6, #22]
    23d4:	7d31      	ldrb	r1, [r6, #20]
    23d6:	4b33      	ldr	r3, [pc, #204]	; (24a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    23d8:	4408      	add	r0, r1
    23da:	1c40      	adds	r0, r0, #1
    23dc:	1811      	adds	r1, r2, r0
    23de:	429a      	cmp	r2, r3
    23e0:	d817      	bhi.n	2412 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    23e2:	4a31      	ldr	r2, [pc, #196]	; (24a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    23e4:	4290      	cmp	r0, r2
    23e6:	dc1b      	bgt.n	2420 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    23e8:	f1c2 0c00 	rsb	ip, r2, #0
    23ec:	4560      	cmp	r0, ip
    23ee:	db1e      	blt.n	242e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    23f0:	0056      	lsls	r6, r2, #1
    23f2:	428e      	cmp	r6, r1
    23f4:	bfdc      	itt	le
    23f6:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    23fa:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    23fe:	dd05      	ble.n	240c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2400:	2900      	cmp	r1, #0
    2402:	bfbc      	itt	lt
    2404:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2408:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    240c:	1948      	adds	r0, r1, r5
    240e:	4299      	cmp	r1, r3
    2410:	d904      	bls.n	241c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    2412:	f240 519e 	movw	r1, #1438	; 0x59e
    2416:	2070      	movs	r0, #112	; 0x70
    2418:	f001 f920 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    241c:	4295      	cmp	r5, r2
    241e:	dd04      	ble.n	242a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    2420:	f240 519f 	movw	r1, #1439	; 0x59f
    2424:	2070      	movs	r0, #112	; 0x70
    2426:	f001 f919 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    242a:	4565      	cmp	r5, ip
    242c:	da04      	bge.n	2438 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    242e:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    2432:	2070      	movs	r0, #112	; 0x70
    2434:	f001 f912 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2438:	4286      	cmp	r6, r0
    243a:	bfdc      	itt	le
    243c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2440:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2444:	dd05      	ble.n	2452 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    2446:	2800      	cmp	r0, #0
    2448:	bfbc      	itt	lt
    244a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    244e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2452:	aa01      	add	r2, sp, #4
    2454:	4669      	mov	r1, sp
    2456:	f000 f897 	bl	2588 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    245a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    245e:	280f      	cmp	r0, #15
    2460:	bf8c      	ite	hi
    2462:	2001      	movhi	r0, #1
    2464:	2000      	movls	r0, #0
    2466:	9900      	ldr	r1, [sp, #0]
    2468:	4408      	add	r0, r1
    246a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    246e:	6061      	str	r1, [r4, #4]
    2470:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2474:	f88d 0000 	strb.w	r0, [sp]
    2478:	f89d 0000 	ldrb.w	r0, [sp]
    247c:	2800      	cmp	r0, #0
    247e:	bf04      	itt	eq
    2480:	b002      	addeq	sp, #8
    2482:	bd70      	popeq	{r4, r5, r6, pc}
    2484:	2005      	movs	r0, #5
    2486:	f000 fb95 	bl	2bb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    248a:	2800      	cmp	r0, #0
    248c:	bf1c      	itt	ne
    248e:	b002      	addne	sp, #8
    2490:	bd70      	popne	{r4, r5, r6, pc}
    2492:	f44f 612e 	mov.w	r1, #2784	; 0xae0
    2496:	2070      	movs	r0, #112	; 0x70
    2498:	f001 f8e0 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    249c:	20000a4c 	.word	0x20000a4c
    24a0:	2000064c 	.word	0x2000064c
    24a4:	1e847fff 	.word	0x1e847fff
    24a8:	0f424000 	.word	0x0f424000

000024ac <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    24ac:	b570      	push	{r4, r5, r6, lr}
    24ae:	4c1c      	ldr	r4, [pc, #112]	; (2520 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    24b0:	2120      	movs	r1, #32
    24b2:	f884 1020 	strb.w	r1, [r4, #32]
    24b6:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    24ba:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    24be:	2000      	movs	r0, #0
    24c0:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    24c4:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    24c8:	1e42      	subs	r2, r0, #1
    24ca:	e9c4 0200 	strd	r0, r2, [r4]
    24ce:	77a0      	strb	r0, [r4, #30]
    24d0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    24d4:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    24d8:	7720      	strb	r0, [r4, #28]
    24da:	7760      	strb	r0, [r4, #29]
    24dc:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    24e0:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    24e4:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    24e8:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    24ec:	2210      	movs	r2, #16
    24ee:	7088      	strb	r0, [r1, #2]
    24f0:	f801 0f04 	strb.w	r0, [r1, #4]!
    24f4:	1e52      	subs	r2, r2, #1
    24f6:	d1fa      	bne.n	24ee <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    24f8:	f000 fd66 	bl	2fc8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    24fc:	4d09      	ldr	r5, [pc, #36]	; (2524 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    24fe:	2601      	movs	r6, #1
    2500:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2504:	20ff      	movs	r0, #255	; 0xff
    2506:	7028      	strb	r0, [r5, #0]
    2508:	4807      	ldr	r0, [pc, #28]	; (2528 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    250a:	f001 f95d 	bl	37c8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    250e:	7068      	strb	r0, [r5, #1]
    2510:	f001 f9c8 	bl	38a4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2514:	60a8      	str	r0, [r5, #8]
    2516:	f000 fce1 	bl	2edc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    251a:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    251e:	bd70      	pop	{r4, r5, r6, pc}
    2520:	20000a4c 	.word	0x20000a4c
    2524:	20000038 	.word	0x20000038
    2528:	00000fc1 	.word	0x00000fc1

0000252c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    252c:	b500      	push	{lr}
    252e:	b083      	sub	sp, #12
    2530:	4668      	mov	r0, sp
    2532:	f000 f999 	bl	2868 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2536:	9800      	ldr	r0, [sp, #0]
    2538:	f005 fa7f 	bl	7a3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    253c:	9a01      	ldr	r2, [sp, #4]
    253e:	4b03      	ldr	r3, [pc, #12]	; (254c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    2540:	2100      	movs	r1, #0
    2542:	fbe2 0103 	umlal	r0, r1, r2, r3
    2546:	b003      	add	sp, #12
    2548:	bd00      	pop	{pc}
    254a:	0000      	.short	0x0000
    254c:	1e848000 	.word	0x1e848000

00002550 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2550:	0b41      	lsrs	r1, r0, #13
    2552:	f248 6237 	movw	r2, #34359	; 0x8637
    2556:	4351      	muls	r1, r2
    2558:	0c0a      	lsrs	r2, r1, #16
    255a:	4b09      	ldr	r3, [pc, #36]	; (2580 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    255c:	0251      	lsls	r1, r2, #9
    255e:	fb02 0203 	mla	r2, r2, r3, r0
    2562:	4808      	ldr	r0, [pc, #32]	; (2584 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2564:	4350      	muls	r0, r2
    2566:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    256a:	306e      	adds	r0, #110	; 0x6e
    256c:	0d40      	lsrs	r0, r0, #21
    256e:	425b      	negs	r3, r3
    2570:	fb10 f303 	smulbb	r3, r0, r3
    2574:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2578:	bf88      	it	hi
    257a:	1c49      	addhi	r1, r1, #1
    257c:	4408      	add	r0, r1
    257e:	4770      	bx	lr
    2580:	ffffc2f7 	.word	0xffffc2f7
    2584:	00010c6f 	.word	0x00010c6f

00002588 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2588:	0b43      	lsrs	r3, r0, #13
    258a:	f248 6c37 	movw	ip, #34359	; 0x8637
    258e:	fb03 f30c 	mul.w	r3, r3, ip
    2592:	b430      	push	{r4, r5}
    2594:	0c1b      	lsrs	r3, r3, #16
    2596:	f8df c044 	ldr.w	ip, [pc, #68]	; 25dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    259a:	025c      	lsls	r4, r3, #9
    259c:	fb03 030c 	mla	r3, r3, ip, r0
    25a0:	480f      	ldr	r0, [pc, #60]	; (25e0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    25a2:	4358      	muls	r0, r3
    25a4:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    25a8:	eb04 000c 	add.w	r0, r4, ip
    25ac:	f643 5409 	movw	r4, #15625	; 0x3d09
    25b0:	fb1c f404 	smulbb	r4, ip, r4
    25b4:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    25b8:	f643 5508 	movw	r5, #15624	; 0x3d08
    25bc:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    25c0:	442c      	add	r4, r5
    25c2:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    25c6:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    25ca:	bf84      	itt	hi
    25cc:	f04f 0c00 	movhi.w	ip, #0
    25d0:	1c40      	addhi	r0, r0, #1
    25d2:	6008      	str	r0, [r1, #0]
    25d4:	f882 c000 	strb.w	ip, [r2]
    25d8:	bc30      	pop	{r4, r5}
    25da:	4770      	bx	lr
    25dc:	ffffc2f7 	.word	0xffffc2f7
    25e0:	00010c6f 	.word	0x00010c6f

000025e4 <MPSL_IRQ_RTC0_Handler>:
    25e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25e8:	4d3b      	ldr	r5, [pc, #236]	; (26d8 <MPSL_IRQ_RTC0_Handler+0xf4>)
    25ea:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    25ee:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 26dc <MPSL_IRQ_RTC0_Handler+0xf8>
    25f2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    25f6:	f44f 6600 	mov.w	r6, #2048	; 0x800
    25fa:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    25fe:	f04f 0400 	mov.w	r4, #0
    2602:	d019      	beq.n	2638 <MPSL_IRQ_RTC0_Handler+0x54>
    2604:	4836      	ldr	r0, [pc, #216]	; (26e0 <MPSL_IRQ_RTC0_Handler+0xfc>)
    2606:	6800      	ldr	r0, [r0, #0]
    2608:	b1b0      	cbz	r0, 2638 <MPSL_IRQ_RTC0_Handler+0x54>
    260a:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    260e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2612:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    2616:	f8d8 1000 	ldr.w	r1, [r8]
    261a:	1a40      	subs	r0, r0, r1
    261c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2620:	2802      	cmp	r0, #2
    2622:	d302      	bcc.n	262a <MPSL_IRQ_RTC0_Handler+0x46>
    2624:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2628:	d906      	bls.n	2638 <MPSL_IRQ_RTC0_Handler+0x54>
    262a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    262e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2632:	2004      	movs	r0, #4
    2634:	f7fe fefe 	bl	1434 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2638:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    263c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2640:	d01a      	beq.n	2678 <MPSL_IRQ_RTC0_Handler+0x94>
    2642:	4828      	ldr	r0, [pc, #160]	; (26e4 <MPSL_IRQ_RTC0_Handler+0x100>)
    2644:	6800      	ldr	r0, [r0, #0]
    2646:	b1b8      	cbz	r0, 2678 <MPSL_IRQ_RTC0_Handler+0x94>
    2648:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    264c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2650:	4825      	ldr	r0, [pc, #148]	; (26e8 <MPSL_IRQ_RTC0_Handler+0x104>)
    2652:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2656:	f8d8 1000 	ldr.w	r1, [r8]
    265a:	1a40      	subs	r0, r0, r1
    265c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2660:	2802      	cmp	r0, #2
    2662:	d302      	bcc.n	266a <MPSL_IRQ_RTC0_Handler+0x86>
    2664:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2668:	d906      	bls.n	2678 <MPSL_IRQ_RTC0_Handler+0x94>
    266a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    266e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2672:	2005      	movs	r0, #5
    2674:	f7fe fede 	bl	1434 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2678:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    267c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2680:	d01a      	beq.n	26b8 <MPSL_IRQ_RTC0_Handler+0xd4>
    2682:	481a      	ldr	r0, [pc, #104]	; (26ec <MPSL_IRQ_RTC0_Handler+0x108>)
    2684:	6800      	ldr	r0, [r0, #0]
    2686:	b1b8      	cbz	r0, 26b8 <MPSL_IRQ_RTC0_Handler+0xd4>
    2688:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    268c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2690:	4817      	ldr	r0, [pc, #92]	; (26f0 <MPSL_IRQ_RTC0_Handler+0x10c>)
    2692:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2696:	f8d8 1000 	ldr.w	r1, [r8]
    269a:	1a40      	subs	r0, r0, r1
    269c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    26a0:	2802      	cmp	r0, #2
    26a2:	d302      	bcc.n	26aa <MPSL_IRQ_RTC0_Handler+0xc6>
    26a4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    26a8:	d906      	bls.n	26b8 <MPSL_IRQ_RTC0_Handler+0xd4>
    26aa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    26ae:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    26b2:	2006      	movs	r0, #6
    26b4:	f7fe febe 	bl	1434 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    26b8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    26bc:	2800      	cmp	r0, #0
    26be:	bf08      	it	eq
    26c0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    26c4:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    26c8:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    26cc:	4809      	ldr	r0, [pc, #36]	; (26f4 <MPSL_IRQ_RTC0_Handler+0x110>)
    26ce:	68c1      	ldr	r1, [r0, #12]
    26d0:	1c49      	adds	r1, r1, #1
    26d2:	60c1      	str	r1, [r0, #12]
    26d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26d8:	4000b000 	.word	0x4000b000
    26dc:	4000b504 	.word	0x4000b504
    26e0:	4000b140 	.word	0x4000b140
    26e4:	4000b144 	.word	0x4000b144
    26e8:	4000b004 	.word	0x4000b004
    26ec:	4000b148 	.word	0x4000b148
    26f0:	4000b008 	.word	0x4000b008
    26f4:	20000044 	.word	0x20000044

000026f8 <MPSL_IRQ_TIMER0_Handler>:
    26f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    26fc:	4d38      	ldr	r5, [pc, #224]	; (27e0 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    26fe:	7828      	ldrb	r0, [r5, #0]
    2700:	2804      	cmp	r0, #4
    2702:	d068      	beq.n	27d6 <MPSL_IRQ_TIMER0_Handler+0xde>
    2704:	1ca8      	adds	r0, r5, #2
    2706:	2201      	movs	r2, #1
    2708:	7801      	ldrb	r1, [r0, #0]
    270a:	b159      	cbz	r1, 2724 <MPSL_IRQ_TIMER0_Handler+0x2c>
    270c:	2901      	cmp	r1, #1
    270e:	bf08      	it	eq
    2710:	706a      	strbeq	r2, [r5, #1]
    2712:	d002      	beq.n	271a <MPSL_IRQ_TIMER0_Handler+0x22>
    2714:	7869      	ldrb	r1, [r5, #1]
    2716:	2900      	cmp	r1, #0
    2718:	d058      	beq.n	27cc <MPSL_IRQ_TIMER0_Handler+0xd4>
    271a:	2102      	movs	r1, #2
    271c:	7001      	strb	r1, [r0, #0]
    271e:	7840      	ldrb	r0, [r0, #1]
    2720:	f000 fafe 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2724:	4c2f      	ldr	r4, [pc, #188]	; (27e4 <MPSL_IRQ_TIMER0_Handler+0xec>)
    2726:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    272a:	f04f 0800 	mov.w	r8, #0
    272e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    2732:	f44f 7780 	mov.w	r7, #256	; 0x100
    2736:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    273a:	d00a      	beq.n	2752 <MPSL_IRQ_TIMER0_Handler+0x5a>
    273c:	482a      	ldr	r0, [pc, #168]	; (27e8 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    273e:	6800      	ldr	r0, [r0, #0]
    2740:	b138      	cbz	r0, 2752 <MPSL_IRQ_TIMER0_Handler+0x5a>
    2742:	2003      	movs	r0, #3
    2744:	f000 faec 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2748:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    274c:	2003      	movs	r0, #3
    274e:	f7fe fe71 	bl	1434 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2752:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2756:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    275a:	d00a      	beq.n	2772 <MPSL_IRQ_TIMER0_Handler+0x7a>
    275c:	4823      	ldr	r0, [pc, #140]	; (27ec <MPSL_IRQ_TIMER0_Handler+0xf4>)
    275e:	6800      	ldr	r0, [r0, #0]
    2760:	b138      	cbz	r0, 2772 <MPSL_IRQ_TIMER0_Handler+0x7a>
    2762:	2002      	movs	r0, #2
    2764:	f000 fadc 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2768:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    276c:	2002      	movs	r0, #2
    276e:	f7fe fe61 	bl	1434 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2772:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2776:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    277a:	d00a      	beq.n	2792 <MPSL_IRQ_TIMER0_Handler+0x9a>
    277c:	481c      	ldr	r0, [pc, #112]	; (27f0 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    277e:	6800      	ldr	r0, [r0, #0]
    2780:	b138      	cbz	r0, 2792 <MPSL_IRQ_TIMER0_Handler+0x9a>
    2782:	2001      	movs	r0, #1
    2784:	f000 facc 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2788:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    278c:	2001      	movs	r0, #1
    278e:	f7fe fe51 	bl	1434 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2792:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2796:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    279a:	bf08      	it	eq
    279c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    27a0:	4814      	ldr	r0, [pc, #80]	; (27f4 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    27a2:	6800      	ldr	r0, [r0, #0]
    27a4:	2800      	cmp	r0, #0
    27a6:	bf08      	it	eq
    27a8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    27ac:	2000      	movs	r0, #0
    27ae:	f000 fab7 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27b2:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    27b6:	2004      	movs	r0, #4
    27b8:	7028      	strb	r0, [r5, #0]
    27ba:	f8c5 8004 	str.w	r8, [r5, #4]
    27be:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    27c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    27c6:	2000      	movs	r0, #0
    27c8:	f7fe be34 	b.w	1434 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27cc:	f240 41a3 	movw	r1, #1187	; 0x4a3
    27d0:	206c      	movs	r0, #108	; 0x6c
    27d2:	f000 ff43 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    27da:	2007      	movs	r0, #7
    27dc:	f7fe be2a 	b.w	1434 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27e0:	20000044 	.word	0x20000044
    27e4:	40008000 	.word	0x40008000
    27e8:	4000814c 	.word	0x4000814c
    27ec:	40008148 	.word	0x40008148
    27f0:	40008144 	.word	0x40008144
    27f4:	40008140 	.word	0x40008140
    27f8:	2201      	movs	r2, #1
    27fa:	0211      	lsls	r1, r2, #8
    27fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2800:	2000      	movs	r0, #0
    2802:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2806:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    280a:	f3bf 8f4f 	dsb	sy
    280e:	f3bf 8f6f 	isb	sy
    2812:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    2816:	490e      	ldr	r1, [pc, #56]	; (2850 <MPSL_IRQ_TIMER0_Handler+0x158>)
    2818:	f841 2f04 	str.w	r2, [r1, #4]!
    281c:	1e43      	subs	r3, r0, #1
    281e:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    2822:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    2826:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    282a:	4b0a      	ldr	r3, [pc, #40]	; (2854 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    282c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2830:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2834:	1d1b      	adds	r3, r3, #4
    2836:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    283a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    283e:	1d1b      	adds	r3, r3, #4
    2840:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2844:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2848:	60ca      	str	r2, [r1, #12]
    284a:	4903      	ldr	r1, [pc, #12]	; (2858 <MPSL_IRQ_TIMER0_Handler+0x160>)
    284c:	7048      	strb	r0, [r1, #1]
    284e:	4770      	bx	lr
    2850:	40008000 	.word	0x40008000
    2854:	40008004 	.word	0x40008004
    2858:	20000044 	.word	0x20000044

0000285c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    285c:	4801      	ldr	r0, [pc, #4]	; (2864 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    285e:	6800      	ldr	r0, [r0, #0]
    2860:	4770      	bx	lr
    2862:	0000      	.short	0x0000
    2864:	4000b504 	.word	0x4000b504

00002868 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    2868:	b430      	push	{r4, r5}
    286a:	f3ef 8c10 	mrs	ip, PRIMASK
    286e:	b672      	cpsid	i
    2870:	2500      	movs	r5, #0
    2872:	4b0b      	ldr	r3, [pc, #44]	; (28a0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    2874:	4a0b      	ldr	r2, [pc, #44]	; (28a4 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    2876:	bf00      	nop
    2878:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    287c:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    2880:	b12c      	cbz	r4, 288e <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    2882:	68d1      	ldr	r1, [r2, #12]
    2884:	1c49      	adds	r1, r1, #1
    2886:	60d1      	str	r1, [r2, #12]
    2888:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    288c:	e7f4      	b.n	2878 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    288e:	68d2      	ldr	r2, [r2, #12]
    2890:	f1bc 0f00 	cmp.w	ip, #0
    2894:	d100      	bne.n	2898 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    2896:	b662      	cpsie	i
    2898:	e9c0 1200 	strd	r1, r2, [r0]
    289c:	bc30      	pop	{r4, r5}
    289e:	4770      	bx	lr
    28a0:	4000b000 	.word	0x4000b000
    28a4:	20000044 	.word	0x20000044

000028a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    28a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    28ac:	4e46      	ldr	r6, [pc, #280]	; (29c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    28ae:	4605      	mov	r5, r0
    28b0:	1eb7      	subs	r7, r6, #2
    28b2:	7833      	ldrb	r3, [r6, #0]
    28b4:	68b9      	ldr	r1, [r7, #8]
    28b6:	2b01      	cmp	r3, #1
    28b8:	bf04      	itt	eq
    28ba:	42a9      	cmpeq	r1, r5
    28bc:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    28c0:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    28c4:	4a41      	ldr	r2, [pc, #260]	; (29cc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    28c6:	6010      	str	r0, [r2, #0]
    28c8:	4a42      	ldr	r2, [pc, #264]	; (29d4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    28ca:	4841      	ldr	r0, [pc, #260]	; (29d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    28cc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    28d0:	f102 0c04 	add.w	ip, r2, #4
    28d4:	f04f 0400 	mov.w	r4, #0
    28d8:	2b00      	cmp	r3, #0
    28da:	d062      	beq.n	29a2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    28dc:	483e      	ldr	r0, [pc, #248]	; (29d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    28de:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    28e2:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    28e6:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    28ea:	bf00      	nop
    28ec:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    28f0:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    28f4:	f04f 0801 	mov.w	r8, #1
    28f8:	2800      	cmp	r0, #0
    28fa:	bf01      	itttt	eq
    28fc:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    2900:	2800      	cmpeq	r0, #0
    2902:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    2906:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    290a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    290e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2912:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    2916:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    291a:	4830      	ldr	r0, [pc, #192]	; (29dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    291c:	f8d0 c000 	ldr.w	ip, [r0]
    2920:	eba5 0c0c 	sub.w	ip, r5, ip
    2924:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    2928:	f1bc 0f02 	cmp.w	ip, #2
    292c:	d344      	bcc.n	29b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    292e:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    2932:	d841      	bhi.n	29b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    2934:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    2938:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    293c:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    2940:	b12b      	cbz	r3, 294e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    2942:	6802      	ldr	r2, [r0, #0]
    2944:	1a8a      	subs	r2, r1, r2
    2946:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    294a:	2a02      	cmp	r2, #2
    294c:	d3f9      	bcc.n	2942 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    294e:	f8c7 8004 	str.w	r8, [r7, #4]
    2952:	703c      	strb	r4, [r7, #0]
    2954:	f7ff ff50 	bl	27f8 <MPSL_IRQ_TIMER0_Handler+0x100>
    2958:	4821      	ldr	r0, [pc, #132]	; (29e0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    295a:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    295e:	f364 0101 	bfi	r1, r4, #0, #2
    2962:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    2966:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    296a:	2102      	movs	r1, #2
    296c:	f361 0201 	bfi	r2, r1, #0, #2
    2970:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    2974:	2104      	movs	r1, #4
    2976:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    297a:	f8c0 800c 	str.w	r8, [r0, #12]
    297e:	6879      	ldr	r1, [r7, #4]
    2980:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2984:	1580      	asrs	r0, r0, #22
    2986:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    298a:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    298e:	4915      	ldr	r1, [pc, #84]	; (29e4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    2990:	05c0      	lsls	r0, r0, #23
    2992:	6008      	str	r0, [r1, #0]
    2994:	2004      	movs	r0, #4
    2996:	60bd      	str	r5, [r7, #8]
    2998:	7070      	strb	r0, [r6, #1]
    299a:	f886 8000 	strb.w	r8, [r6]
    299e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    29a2:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    29a6:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    29aa:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    29ae:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    29b2:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    29b6:	e799      	b.n	28ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    29b8:	2000      	movs	r0, #0
    29ba:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    29be:	f240 2197 	movw	r1, #663	; 0x297
    29c2:	206c      	movs	r0, #108	; 0x6c
    29c4:	f000 fe4a 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29c8:	20000046 	.word	0x20000046
    29cc:	4001f508 	.word	0x4001f508
    29d0:	fffbfffd 	.word	0xfffbfffd
    29d4:	4000b000 	.word	0x4000b000
    29d8:	fffafffd 	.word	0xfffafffd
    29dc:	4000b504 	.word	0x4000b504
    29e0:	40008000 	.word	0x40008000
    29e4:	4001f504 	.word	0x4001f504

000029e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    29e8:	b570      	push	{r4, r5, r6, lr}
    29ea:	4c2a      	ldr	r4, [pc, #168]	; (2a94 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    29ec:	68a1      	ldr	r1, [r4, #8]
    29ee:	4281      	cmp	r1, r0
    29f0:	bf14      	ite	ne
    29f2:	2201      	movne	r2, #1
    29f4:	2200      	moveq	r2, #0
    29f6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 2a98 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    29fa:	f89c 5000 	ldrb.w	r5, [ip]
    29fe:	2d02      	cmp	r5, #2
    2a00:	d002      	beq.n	2a08 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    2a02:	2a00      	cmp	r2, #0
    2a04:	d034      	beq.n	2a70 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    2a06:	e002      	b.n	2a0e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    2a08:	2a00      	cmp	r2, #0
    2a0a:	bf08      	it	eq
    2a0c:	bd70      	popeq	{r4, r5, r6, pc}
    2a0e:	7862      	ldrb	r2, [r4, #1]
    2a10:	b39a      	cbz	r2, 2a7a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2a12:	4b22      	ldr	r3, [pc, #136]	; (2a9c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2a14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a18:	601a      	str	r2, [r3, #0]
    2a1a:	4b21      	ldr	r3, [pc, #132]	; (2aa0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    2a1c:	1392      	asrs	r2, r2, #14
    2a1e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    2a22:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    2a26:	2200      	movs	r2, #0
    2a28:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    2a2c:	4a1d      	ldr	r2, [pc, #116]	; (2aa4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2a2e:	6816      	ldr	r6, [r2, #0]
    2a30:	1b86      	subs	r6, r0, r6
    2a32:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    2a36:	2e02      	cmp	r6, #2
    2a38:	d324      	bcc.n	2a84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2a3a:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    2a3e:	d821      	bhi.n	2a84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2a40:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a44:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    2a48:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    2a4c:	b12d      	cbz	r5, 2a5a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    2a4e:	6813      	ldr	r3, [r2, #0]
    2a50:	1acb      	subs	r3, r1, r3
    2a52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2a56:	2b02      	cmp	r3, #2
    2a58:	d3f9      	bcc.n	2a4e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    2a5a:	4b13      	ldr	r3, [pc, #76]	; (2aa8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2a5c:	2102      	movs	r1, #2
    2a5e:	074a      	lsls	r2, r1, #29
    2a60:	601a      	str	r2, [r3, #0]
    2a62:	60a0      	str	r0, [r4, #8]
    2a64:	2004      	movs	r0, #4
    2a66:	f88c 0001 	strb.w	r0, [ip, #1]
    2a6a:	f88c 1000 	strb.w	r1, [ip]
    2a6e:	bd70      	pop	{r4, r5, r6, pc}
    2a70:	f240 21a5 	movw	r1, #677	; 0x2a5
    2a74:	206c      	movs	r0, #108	; 0x6c
    2a76:	f000 fdf1 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a7a:	f240 21a9 	movw	r1, #681	; 0x2a9
    2a7e:	206c      	movs	r0, #108	; 0x6c
    2a80:	f000 fdec 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a84:	2000      	movs	r0, #0
    2a86:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a8a:	f240 21b5 	movw	r1, #693	; 0x2b5
    2a8e:	206c      	movs	r0, #108	; 0x6c
    2a90:	f000 fde4 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a94:	20000044 	.word	0x20000044
    2a98:	20000046 	.word	0x20000046
    2a9c:	4001f508 	.word	0x4001f508
    2aa0:	4000b000 	.word	0x4000b000
    2aa4:	4000b504 	.word	0x4000b504
    2aa8:	4001f504 	.word	0x4001f504

00002aac <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2aac:	4801      	ldr	r0, [pc, #4]	; (2ab4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2aae:	6880      	ldr	r0, [r0, #8]
    2ab0:	4770      	bx	lr
    2ab2:	0000      	.short	0x0000
    2ab4:	20000044 	.word	0x20000044

00002ab8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2abc:	4836      	ldr	r0, [pc, #216]	; (2b98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2abe:	4a35      	ldr	r2, [pc, #212]	; (2b94 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2ac0:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    2ac4:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 2b9c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    2ac8:	1d03      	adds	r3, r0, #4
    2aca:	2100      	movs	r1, #0
    2acc:	f89c 4000 	ldrb.w	r4, [ip]
    2ad0:	b184      	cbz	r4, 2af4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    2ad2:	4a33      	ldr	r2, [pc, #204]	; (2ba0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2ad4:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    2ad8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    2adc:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2ae0:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    2ae4:	2301      	movs	r3, #1
    2ae6:	2a00      	cmp	r2, #0
    2ae8:	bf04      	itt	eq
    2aea:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    2aee:	2800      	cmpeq	r0, #0
    2af0:	d111      	bne.n	2b16 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    2af2:	e00a      	b.n	2b0a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    2af4:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    2af8:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2afc:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2b00:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    2b04:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2b08:	e7ea      	b.n	2ae0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    2b0a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2b0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2b12:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    2b16:	2c02      	cmp	r4, #2
    2b18:	d004      	beq.n	2b24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    2b1a:	f240 21c1 	movw	r1, #705	; 0x2c1
    2b1e:	206c      	movs	r0, #108	; 0x6c
    2b20:	f000 fd9c 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b24:	4e1f      	ldr	r6, [pc, #124]	; (2ba4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2b26:	6830      	ldr	r0, [r6, #0]
    2b28:	4c1f      	ldr	r4, [pc, #124]	; (2ba8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2b2a:	1cc0      	adds	r0, r0, #3
    2b2c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b30:	68a2      	ldr	r2, [r4, #8]
    2b32:	4d1e      	ldr	r5, [pc, #120]	; (2bac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    2b34:	4290      	cmp	r0, r2
    2b36:	d00b      	beq.n	2b50 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    2b38:	6837      	ldr	r7, [r6, #0]
    2b3a:	1bd7      	subs	r7, r2, r7
    2b3c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2b40:	2f04      	cmp	r7, #4
    2b42:	d305      	bcc.n	2b50 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    2b44:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    2b48:	d802      	bhi.n	2b50 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    2b4a:	f7ff fead 	bl	28a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2b4e:	e01b      	b.n	2b88 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2b50:	6830      	ldr	r0, [r6, #0]
    2b52:	1a10      	subs	r0, r2, r0
    2b54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b58:	2802      	cmp	r0, #2
    2b5a:	d313      	bcc.n	2b84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    2b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2b60:	d810      	bhi.n	2b84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    2b62:	4a13      	ldr	r2, [pc, #76]	; (2bb0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    2b64:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2b68:	6010      	str	r0, [r2, #0]
    2b6a:	6063      	str	r3, [r4, #4]
    2b6c:	7021      	strb	r1, [r4, #0]
    2b6e:	606b      	str	r3, [r5, #4]
    2b70:	60eb      	str	r3, [r5, #12]
    2b72:	0040      	lsls	r0, r0, #1
    2b74:	1f11      	subs	r1, r2, #4
    2b76:	6008      	str	r0, [r1, #0]
    2b78:	2004      	movs	r0, #4
    2b7a:	f88c 0001 	strb.w	r0, [ip, #1]
    2b7e:	f88c 3000 	strb.w	r3, [ip]
    2b82:	e001      	b.n	2b88 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2b84:	6063      	str	r3, [r4, #4]
    2b86:	7021      	strb	r1, [r4, #0]
    2b88:	6860      	ldr	r0, [r4, #4]
    2b8a:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b92:	0000      	.short	0x0000
    2b94:	fffbfffd 	.word	0xfffbfffd
    2b98:	4000b000 	.word	0x4000b000
    2b9c:	20000046 	.word	0x20000046
    2ba0:	fffafffd 	.word	0xfffafffd
    2ba4:	4000b504 	.word	0x4000b504
    2ba8:	20000044 	.word	0x20000044
    2bac:	40008000 	.word	0x40008000
    2bb0:	4001f508 	.word	0x4001f508

00002bb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bb8:	4a54      	ldr	r2, [pc, #336]	; (2d0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    2bba:	2500      	movs	r5, #0
    2bbc:	2401      	movs	r4, #1
    2bbe:	f892 c000 	ldrb.w	ip, [r2]
    2bc2:	7853      	ldrb	r3, [r2, #1]
    2bc4:	f44f 76a0 	mov.w	r6, #320	; 0x140
    2bc8:	2807      	cmp	r0, #7
    2bca:	d27d      	bcs.n	2cc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    2bcc:	e8df f000 	tbb	[pc, r0]
    2bd0:	04040404 	.word	0x04040404
    2bd4:	00585858 	.word	0x00585858
    2bd8:	4a4d      	ldr	r2, [pc, #308]	; (2d10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    2bda:	6897      	ldr	r7, [r2, #8]
    2bdc:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    2be0:	bf04      	itt	eq
    2be2:	7852      	ldrbeq	r2, [r2, #1]
    2be4:	2a00      	cmpeq	r2, #0
    2be6:	d003      	beq.n	2bf0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2be8:	f1bc 0f02 	cmp.w	ip, #2
    2bec:	d005      	beq.n	2bfa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2bee:	e026      	b.n	2c3e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2bf0:	f240 3151 	movw	r1, #849	; 0x351
    2bf4:	206c      	movs	r0, #108	; 0x6c
    2bf6:	f000 fd31 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bfa:	1f1a      	subs	r2, r3, #4
    2bfc:	b2d2      	uxtb	r2, r2
    2bfe:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    2c02:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    2c06:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    2c0a:	2200      	movs	r2, #0
    2c0c:	f1bc 0f01 	cmp.w	ip, #1
    2c10:	d003      	beq.n	2c1a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    2c12:	f1bc 0f02 	cmp.w	ip, #2
    2c16:	d008      	beq.n	2c2a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    2c18:	e00e      	b.n	2c38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    2c1a:	2b04      	cmp	r3, #4
    2c1c:	bf24      	itt	cs
    2c1e:	6837      	ldrcs	r7, [r6, #0]
    2c20:	2f00      	cmpcs	r7, #0
    2c22:	bf08      	it	eq
    2c24:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    2c28:	e006      	b.n	2c38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    2c2a:	2b04      	cmp	r3, #4
    2c2c:	bf24      	itt	cs
    2c2e:	6837      	ldrcs	r7, [r6, #0]
    2c30:	2f00      	cmpcs	r7, #0
    2c32:	bf08      	it	eq
    2c34:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    2c38:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    2c3c:	d1e5      	bne.n	2c0a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    2c3e:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 2d14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    2c42:	f100 0210 	add.w	r2, r0, #16
    2c46:	fa04 f202 	lsl.w	r2, r4, r2
    2c4a:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    2c4e:	f04f 0340 	mov.w	r3, #64	; 0x40
    2c52:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2c56:	b2db      	uxtb	r3, r3
    2c58:	4463      	add	r3, ip
    2c5a:	601c      	str	r4, [r3, #0]
    2c5c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    2c60:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    2c64:	eba1 0303 	sub.w	r3, r1, r3
    2c68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2c6c:	2b03      	cmp	r3, #3
    2c6e:	bf26      	itte	cs
    2c70:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    2c74:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    2c78:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    2c7c:	d237      	bcs.n	2cee <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    2c7e:	e03c      	b.n	2cfa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    2c80:	f1bc 0f00 	cmp.w	ip, #0
    2c84:	d006      	beq.n	2c94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2c86:	4283      	cmp	r3, r0
    2c88:	d104      	bne.n	2c94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2c8a:	f240 3171 	movw	r1, #881	; 0x371
    2c8e:	206c      	movs	r0, #108	; 0x6c
    2c90:	f000 fce4 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c94:	1f02      	subs	r2, r0, #4
    2c96:	b2d3      	uxtb	r3, r2
    2c98:	2b03      	cmp	r3, #3
    2c9a:	d304      	bcc.n	2ca6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    2c9c:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    2ca0:	206c      	movs	r0, #108	; 0x6c
    2ca2:	f000 fcdb 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ca6:	f8df c070 	ldr.w	ip, [pc, #112]	; 2d18 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    2caa:	f103 0210 	add.w	r2, r3, #16
    2cae:	fa04 f202 	lsl.w	r2, r4, r2
    2cb2:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    2cb6:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    2cba:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    2cbe:	f84c 5003 	str.w	r5, [ip, r3]
    2cc2:	4b16      	ldr	r3, [pc, #88]	; (2d1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	e000      	b.n	2cca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    2cc8:	e01a      	b.n	2d00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    2cca:	1f00      	subs	r0, r0, #4
    2ccc:	1acb      	subs	r3, r1, r3
    2cce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2cd2:	b2c0      	uxtb	r0, r0
    2cd4:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    2cd8:	2b02      	cmp	r3, #2
    2cda:	d30b      	bcc.n	2cf4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    2cdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    2ce0:	d808      	bhi.n	2cf4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    2ce2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2ce6:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    2cea:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    2cee:	2001      	movs	r0, #1
    2cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2cf4:	2100      	movs	r1, #0
    2cf6:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2cfa:	2000      	movs	r0, #0
    2cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d00:	f240 3175 	movw	r1, #885	; 0x375
    2d04:	206c      	movs	r0, #108	; 0x6c
    2d06:	f000 fca9 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d0a:	0000      	.short	0x0000
    2d0c:	20000046 	.word	0x20000046
    2d10:	20000044 	.word	0x20000044
    2d14:	40008000 	.word	0x40008000
    2d18:	4000b000 	.word	0x4000b000
    2d1c:	4000b504 	.word	0x4000b504

00002d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2d24:	2601      	movs	r6, #1
    2d26:	2700      	movs	r7, #0
    2d28:	f44f 78a0 	mov.w	r8, #320	; 0x140
    2d2c:	2807      	cmp	r0, #7
    2d2e:	d251      	bcs.n	2dd4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    2d30:	e8df f000 	tbb	[pc, r0]
    2d34:	04040404 	.word	0x04040404
    2d38:	00191919 	.word	0x00191919
    2d3c:	f100 0110 	add.w	r1, r0, #16
    2d40:	fa06 f201 	lsl.w	r2, r6, r1
    2d44:	4926      	ldr	r1, [pc, #152]	; (2de0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2d46:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2d4a:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    2d4e:	2200      	movs	r2, #0
    2d50:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2d54:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    2d58:	508f      	str	r7, [r1, r2]
    2d5a:	4922      	ldr	r1, [pc, #136]	; (2de4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2d5c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2d60:	9000      	str	r0, [sp, #0]
    2d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2d66:	4d20      	ldr	r5, [pc, #128]	; (2de8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2d68:	1f01      	subs	r1, r0, #4
    2d6a:	b2cc      	uxtb	r4, r1
    2d6c:	7829      	ldrb	r1, [r5, #0]
    2d6e:	b179      	cbz	r1, 2d90 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    2d70:	786a      	ldrb	r2, [r5, #1]
    2d72:	4282      	cmp	r2, r0
    2d74:	d10c      	bne.n	2d90 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    2d76:	4a1d      	ldr	r2, [pc, #116]	; (2dec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2d78:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2d7c:	6010      	str	r0, [r2, #0]
    2d7e:	2901      	cmp	r1, #1
    2d80:	bf08      	it	eq
    2d82:	f7ff fd39 	bleq	27f8 <MPSL_IRQ_TIMER0_Handler+0x100>
    2d86:	702f      	strb	r7, [r5, #0]
    2d88:	4919      	ldr	r1, [pc, #100]	; (2df0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    2d8a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2d8e:	6088      	str	r0, [r1, #8]
    2d90:	4918      	ldr	r1, [pc, #96]	; (2df4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    2d92:	f104 0010 	add.w	r0, r4, #16
    2d96:	fa06 f000 	lsl.w	r0, r6, r0
    2d9a:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    2d9e:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    2da2:	00a0      	lsls	r0, r4, #2
    2da4:	4408      	add	r0, r1
    2da6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2daa:	4a13      	ldr	r2, [pc, #76]	; (2df8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    2dac:	6812      	ldr	r2, [r2, #0]
    2dae:	1a80      	subs	r0, r0, r2
    2db0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2db4:	2802      	cmp	r0, #2
    2db6:	d307      	bcc.n	2dc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    2db8:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    2dbc:	2000      	movs	r0, #0
    2dbe:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2dc2:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    2dc6:	500f      	str	r7, [r1, r0]
    2dc8:	480c      	ldr	r0, [pc, #48]	; (2dfc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    2dca:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    2dce:	9000      	str	r0, [sp, #0]
    2dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2dd4:	f240 31f9 	movw	r1, #1017	; 0x3f9
    2dd8:	206c      	movs	r0, #108	; 0x6c
    2dda:	f000 fc3f 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dde:	0000      	.short	0x0000
    2de0:	40008000 	.word	0x40008000
    2de4:	40008140 	.word	0x40008140
    2de8:	20000046 	.word	0x20000046
    2dec:	4001f508 	.word	0x4001f508
    2df0:	20000044 	.word	0x20000044
    2df4:	4000b000 	.word	0x4000b000
    2df8:	4000b504 	.word	0x4000b504
    2dfc:	4000b140 	.word	0x4000b140

00002e00 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2e00:	4825      	ldr	r0, [pc, #148]	; (2e98 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    2e02:	4a24      	ldr	r2, [pc, #144]	; (2e94 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    2e04:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    2e08:	4924      	ldr	r1, [pc, #144]	; (2e9c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    2e0a:	1d03      	adds	r3, r0, #4
    2e0c:	f891 c000 	ldrb.w	ip, [r1]
    2e10:	2100      	movs	r1, #0
    2e12:	f1bc 0f00 	cmp.w	ip, #0
    2e16:	d010      	beq.n	2e3a <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    2e18:	4a21      	ldr	r2, [pc, #132]	; (2ea0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    2e1a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    2e1e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    2e22:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2e26:	bf00      	nop
    2e28:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    2e2c:	2a00      	cmp	r2, #0
    2e2e:	bf04      	itt	eq
    2e30:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    2e34:	2800      	cmpeq	r0, #0
    2e36:	d111      	bne.n	2e5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    2e38:	e00a      	b.n	2e50 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2e3a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    2e3e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e42:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2e46:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    2e4a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2e4e:	e7eb      	b.n	2e28 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2e50:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2e54:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2e58:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    2e5c:	4811      	ldr	r0, [pc, #68]	; (2ea4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    2e5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e62:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    2e66:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e6a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2e6e:	f100 0204 	add.w	r2, r0, #4
    2e72:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    2e76:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2e7a:	f102 0204 	add.w	r2, r2, #4
    2e7e:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    2e82:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    2e86:	f102 0204 	add.w	r2, r2, #4
    2e8a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    2e8e:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    2e92:	4770      	bx	lr
    2e94:	fffbfffd 	.word	0xfffbfffd
    2e98:	4000b000 	.word	0x4000b000
    2e9c:	20000046 	.word	0x20000046
    2ea0:	fffafffd 	.word	0xfffafffd
    2ea4:	40008000 	.word	0x40008000

00002ea8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    2ea8:	b510      	push	{r4, lr}
    2eaa:	2807      	cmp	r0, #7
    2eac:	d20d      	bcs.n	2eca <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    2eae:	e8df f000 	tbb	[pc, r0]
    2eb2:	0404      	.short	0x0404
    2eb4:	06060404 	.word	0x06060404
    2eb8:	0006      	.short	0x0006
    2eba:	4906      	ldr	r1, [pc, #24]	; (2ed4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    2ebc:	e002      	b.n	2ec4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    2ebe:	1f00      	subs	r0, r0, #4
    2ec0:	4905      	ldr	r1, [pc, #20]	; (2ed8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    2ec2:	b2c0      	uxtb	r0, r0
    2ec4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2ec8:	bd10      	pop	{r4, pc}
    2eca:	f240 3199 	movw	r1, #921	; 0x399
    2ece:	206c      	movs	r0, #108	; 0x6c
    2ed0:	f000 fbc4 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ed4:	40008140 	.word	0x40008140
    2ed8:	4000b140 	.word	0x4000b140

00002edc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    2edc:	b570      	push	{r4, r5, r6, lr}
    2ede:	481f      	ldr	r0, [pc, #124]	; (2f5c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    2ee0:	2400      	movs	r4, #0
    2ee2:	2104      	movs	r1, #4
    2ee4:	7004      	strb	r4, [r0, #0]
    2ee6:	1e80      	subs	r0, r0, #2
    2ee8:	7001      	strb	r1, [r0, #0]
    2eea:	0589      	lsls	r1, r1, #22
    2eec:	60c4      	str	r4, [r0, #12]
    2eee:	6081      	str	r1, [r0, #8]
    2ef0:	f7ff fc82 	bl	27f8 <MPSL_IRQ_TIMER0_Handler+0x100>
    2ef4:	2501      	movs	r5, #1
    2ef6:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    2efa:	02eb      	lsls	r3, r5, #11
    2efc:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    2f00:	f3bf 8f4f 	dsb	sy
    2f04:	f3bf 8f6f 	isb	sy
    2f08:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    2f0c:	4814      	ldr	r0, [pc, #80]	; (2f60 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    2f0e:	6045      	str	r5, [r0, #4]
    2f10:	6085      	str	r5, [r0, #8]
    2f12:	4914      	ldr	r1, [pc, #80]	; (2f64 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    2f14:	680a      	ldr	r2, [r1, #0]
    2f16:	2a00      	cmp	r2, #0
    2f18:	d1fc      	bne.n	2f14 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    2f1a:	1e51      	subs	r1, r2, #1
    2f1c:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2f20:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2f24:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    2f28:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2f2c:	490e      	ldr	r1, [pc, #56]	; (2f68 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    2f2e:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2f32:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    2f36:	1d09      	adds	r1, r1, #4
    2f38:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2f3c:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    2f40:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    2f44:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    2f48:	6005      	str	r5, [r0, #0]
    2f4a:	f44f 7182 	mov.w	r1, #260	; 0x104
    2f4e:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    2f52:	2102      	movs	r1, #2
    2f54:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    2f58:	bd70      	pop	{r4, r5, r6, pc}
    2f5a:	0000      	.short	0x0000
    2f5c:	20000046 	.word	0x20000046
    2f60:	4000b000 	.word	0x4000b000
    2f64:	4000b504 	.word	0x4000b504
    2f68:	4000b004 	.word	0x4000b004

00002f6c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    2f6c:	4808      	ldr	r0, [pc, #32]	; (2f90 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    2f6e:	f990 0000 	ldrsb.w	r0, [r0]
    2f72:	2800      	cmp	r0, #0
    2f74:	bfb8      	it	lt
    2f76:	4770      	bxlt	lr
    2f78:	f000 011f 	and.w	r1, r0, #31
    2f7c:	2201      	movs	r2, #1
    2f7e:	fa02 f101 	lsl.w	r1, r2, r1
    2f82:	0940      	lsrs	r0, r0, #5
    2f84:	0080      	lsls	r0, r0, #2
    2f86:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2f8a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2f8e:	4770      	bx	lr
    2f90:	20000178 	.word	0x20000178

00002f94 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    2f94:	4803      	ldr	r0, [pc, #12]	; (2fa4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    2f96:	7800      	ldrb	r0, [r0, #0]
    2f98:	2803      	cmp	r0, #3
    2f9a:	bf0c      	ite	eq
    2f9c:	2001      	moveq	r0, #1
    2f9e:	2000      	movne	r0, #0
    2fa0:	4770      	bx	lr
    2fa2:	0000      	.short	0x0000
    2fa4:	20000168 	.word	0x20000168

00002fa8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    2fa8:	4801      	ldr	r0, [pc, #4]	; (2fb0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    2faa:	8840      	ldrh	r0, [r0, #2]
    2fac:	4770      	bx	lr
    2fae:	0000      	.short	0x0000
    2fb0:	20000168 	.word	0x20000168

00002fb4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    2fb4:	4803      	ldr	r0, [pc, #12]	; (2fc4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    2fb6:	7800      	ldrb	r0, [r0, #0]
    2fb8:	2802      	cmp	r0, #2
    2fba:	bf16      	itet	ne
    2fbc:	2803      	cmpne	r0, #3
    2fbe:	2001      	moveq	r0, #1
    2fc0:	2000      	movne	r0, #0
    2fc2:	4770      	bx	lr
    2fc4:	20000168 	.word	0x20000168

00002fc8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    2fc8:	4802      	ldr	r0, [pc, #8]	; (2fd4 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    2fca:	2100      	movs	r1, #0
    2fcc:	7001      	strb	r1, [r0, #0]
    2fce:	8041      	strh	r1, [r0, #2]
    2fd0:	4770      	bx	lr
    2fd2:	0000      	.short	0x0000
    2fd4:	20000168 	.word	0x20000168

00002fd8 <MPSL_IRQ_CLOCK_Handler>:
    2fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fdc:	4c16      	ldr	r4, [pc, #88]	; (3038 <MPSL_IRQ_CLOCK_Handler+0x60>)
    2fde:	7a60      	ldrb	r0, [r4, #9]
    2fe0:	2800      	cmp	r0, #0
    2fe2:	d027      	beq.n	3034 <MPSL_IRQ_CLOCK_Handler+0x5c>
    2fe4:	f44f 7180 	mov.w	r1, #256	; 0x100
    2fe8:	058d      	lsls	r5, r1, #22
    2fea:	4628      	mov	r0, r5
    2fec:	f004 fd74 	bl	7ad8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2ff0:	4680      	mov	r8, r0
    2ff2:	f44f 7182 	mov.w	r1, #260	; 0x104
    2ff6:	4628      	mov	r0, r5
    2ff8:	f004 fd6e 	bl	7ad8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2ffc:	2600      	movs	r6, #0
    2ffe:	4607      	mov	r7, r0
    3000:	f1b8 0f00 	cmp.w	r8, #0
    3004:	d009      	beq.n	301a <MPSL_IRQ_CLOCK_Handler+0x42>
    3006:	2001      	movs	r0, #1
    3008:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    300c:	7920      	ldrb	r0, [r4, #4]
    300e:	b120      	cbz	r0, 301a <MPSL_IRQ_CLOCK_Handler+0x42>
    3010:	7126      	strb	r6, [r4, #4]
    3012:	69e0      	ldr	r0, [r4, #28]
    3014:	b108      	cbz	r0, 301a <MPSL_IRQ_CLOCK_Handler+0x42>
    3016:	4780      	blx	r0
    3018:	61e6      	str	r6, [r4, #28]
    301a:	b137      	cbz	r7, 302a <MPSL_IRQ_CLOCK_Handler+0x52>
    301c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3020:	2002      	movs	r0, #2
    3022:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3026:	f000 fa4d 	bl	34c4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    302a:	4640      	mov	r0, r8
    302c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3030:	f000 b858 	b.w	30e4 <MPSL_IRQ_CLOCK_Handler+0x10c>
    3034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3038:	20000054 	.word	0x20000054
    303c:	b510      	push	{r4, lr}
    303e:	f004 fdf5 	bl	7c2c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3042:	b930      	cbnz	r0, 3052 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3044:	f004 fe13 	bl	7c6e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3048:	b918      	cbnz	r0, 3052 <MPSL_IRQ_CLOCK_Handler+0x7a>
    304a:	f004 fe46 	bl	7cda <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    304e:	2800      	cmp	r0, #0
    3050:	d002      	beq.n	3058 <MPSL_IRQ_CLOCK_Handler+0x80>
    3052:	4902      	ldr	r1, [pc, #8]	; (305c <MPSL_IRQ_CLOCK_Handler+0x84>)
    3054:	2002      	movs	r0, #2
    3056:	6008      	str	r0, [r1, #0]
    3058:	bd10      	pop	{r4, pc}
    305a:	0000      	.short	0x0000
    305c:	40000c34 	.word	0x40000c34
    3060:	b570      	push	{r4, r5, r6, lr}
    3062:	f000 f991 	bl	3388 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3066:	f000 fa81 	bl	356c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    306a:	4c09      	ldr	r4, [pc, #36]	; (3090 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    306c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3070:	b130      	cbz	r0, 3080 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3072:	f7ff ffe3 	bl	303c <MPSL_IRQ_CLOCK_Handler+0x64>
    3076:	2001      	movs	r0, #1
    3078:	6128      	str	r0, [r5, #16]
    307a:	2004      	movs	r0, #4
    307c:	72a0      	strb	r0, [r4, #10]
    307e:	e004      	b.n	308a <MPSL_IRQ_CLOCK_Handler+0xb2>
    3080:	2003      	movs	r0, #3
    3082:	72a0      	strb	r0, [r4, #10]
    3084:	2001      	movs	r0, #1
    3086:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    308a:	2000      	movs	r0, #0
    308c:	71e0      	strb	r0, [r4, #7]
    308e:	bd70      	pop	{r4, r5, r6, pc}
    3090:	20000054 	.word	0x20000054
    3094:	b570      	push	{r4, r5, r6, lr}
    3096:	4c12      	ldr	r4, [pc, #72]	; (30e0 <MPSL_IRQ_CLOCK_Handler+0x108>)
    3098:	79a0      	ldrb	r0, [r4, #6]
    309a:	b1e0      	cbz	r0, 30d6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    309c:	79e1      	ldrb	r1, [r4, #7]
    309e:	1e40      	subs	r0, r0, #1
    30a0:	4281      	cmp	r1, r0
    30a2:	da18      	bge.n	30d6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    30a4:	f000 fa62 	bl	356c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    30a8:	4605      	mov	r5, r0
    30aa:	f000 fb4b 	bl	3744 <mpsl_temperature_get>
    30ae:	79a1      	ldrb	r1, [r4, #6]
    30b0:	2901      	cmp	r1, #1
    30b2:	d902      	bls.n	30ba <MPSL_IRQ_CLOCK_Handler+0xe2>
    30b4:	79e1      	ldrb	r1, [r4, #7]
    30b6:	1c49      	adds	r1, r1, #1
    30b8:	71e1      	strb	r1, [r4, #7]
    30ba:	b10d      	cbz	r5, 30c0 <MPSL_IRQ_CLOCK_Handler+0xe8>
    30bc:	6961      	ldr	r1, [r4, #20]
    30be:	e000      	b.n	30c2 <MPSL_IRQ_CLOCK_Handler+0xea>
    30c0:	6921      	ldr	r1, [r4, #16]
    30c2:	1a41      	subs	r1, r0, r1
    30c4:	2902      	cmp	r1, #2
    30c6:	da02      	bge.n	30ce <MPSL_IRQ_CLOCK_Handler+0xf6>
    30c8:	f111 0f02 	cmn.w	r1, #2
    30cc:	dc07      	bgt.n	30de <MPSL_IRQ_CLOCK_Handler+0x106>
    30ce:	b10d      	cbz	r5, 30d4 <MPSL_IRQ_CLOCK_Handler+0xfc>
    30d0:	6160      	str	r0, [r4, #20]
    30d2:	e000      	b.n	30d6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    30d4:	6120      	str	r0, [r4, #16]
    30d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    30da:	f7ff bfc1 	b.w	3060 <MPSL_IRQ_CLOCK_Handler+0x88>
    30de:	bd70      	pop	{r4, r5, r6, pc}
    30e0:	20000054 	.word	0x20000054
    30e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    30e8:	4606      	mov	r6, r0
    30ea:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    30ee:	f44f 7186 	mov.w	r1, #268	; 0x10c
    30f2:	4628      	mov	r0, r5
    30f4:	f004 fcf0 	bl	7ad8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    30f8:	4680      	mov	r8, r0
    30fa:	f44f 7188 	mov.w	r1, #272	; 0x110
    30fe:	4628      	mov	r0, r5
    3100:	f004 fcea 	bl	7ad8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3104:	4c27      	ldr	r4, [pc, #156]	; (31a4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    3106:	4682      	mov	sl, r0
    3108:	7827      	ldrb	r7, [r4, #0]
    310a:	f104 0008 	add.w	r0, r4, #8
    310e:	f004 fd57 	bl	7bc0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3112:	b110      	cbz	r0, 311a <MPSL_IRQ_CLOCK_Handler+0x142>
    3114:	f240 11b9 	movw	r1, #441	; 0x1b9
    3118:	e016      	b.n	3148 <MPSL_IRQ_CLOCK_Handler+0x170>
    311a:	f04f 0901 	mov.w	r9, #1
    311e:	b146      	cbz	r6, 3132 <MPSL_IRQ_CLOCK_Handler+0x15a>
    3120:	7aa0      	ldrb	r0, [r4, #10]
    3122:	2803      	cmp	r0, #3
    3124:	d105      	bne.n	3132 <MPSL_IRQ_CLOCK_Handler+0x15a>
    3126:	2004      	movs	r0, #4
    3128:	72a0      	strb	r0, [r4, #10]
    312a:	f7ff ff87 	bl	303c <MPSL_IRQ_CLOCK_Handler+0x64>
    312e:	f8c5 9010 	str.w	r9, [r5, #16]
    3132:	2600      	movs	r6, #0
    3134:	f1b8 0f00 	cmp.w	r8, #0
    3138:	d018      	beq.n	316c <MPSL_IRQ_CLOCK_Handler+0x194>
    313a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    313e:	7aa0      	ldrb	r0, [r4, #10]
    3140:	2804      	cmp	r0, #4
    3142:	d004      	beq.n	314e <MPSL_IRQ_CLOCK_Handler+0x176>
    3144:	f240 11cb 	movw	r1, #459	; 0x1cb
    3148:	206d      	movs	r0, #109	; 0x6d
    314a:	f000 fa87 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    314e:	f004 fd6d 	bl	7c2c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3152:	b928      	cbnz	r0, 3160 <MPSL_IRQ_CLOCK_Handler+0x188>
    3154:	f004 fd8b 	bl	7c6e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3158:	b910      	cbnz	r0, 3160 <MPSL_IRQ_CLOCK_Handler+0x188>
    315a:	f004 fdbe 	bl	7cda <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    315e:	b108      	cbz	r0, 3164 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3160:	4811      	ldr	r0, [pc, #68]	; (31a8 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3162:	6006      	str	r6, [r0, #0]
    3164:	2002      	movs	r0, #2
    3166:	72a0      	strb	r0, [r4, #10]
    3168:	f000 f8f2 	bl	3350 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    316c:	f1ba 0f00 	cmp.w	sl, #0
    3170:	d008      	beq.n	3184 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3172:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3176:	7aa0      	ldrb	r0, [r4, #10]
    3178:	2802      	cmp	r0, #2
    317a:	d101      	bne.n	3180 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    317c:	f7ff ff8a 	bl	3094 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3180:	f8c5 9014 	str.w	r9, [r5, #20]
    3184:	b13f      	cbz	r7, 3196 <MPSL_IRQ_CLOCK_Handler+0x1be>
    3186:	7026      	strb	r6, [r4, #0]
    3188:	7aa0      	ldrb	r0, [r4, #10]
    318a:	2802      	cmp	r0, #2
    318c:	d101      	bne.n	3192 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    318e:	f7ff ff67 	bl	3060 <MPSL_IRQ_CLOCK_Handler+0x88>
    3192:	f000 f8dd 	bl	3350 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3196:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    319a:	4802      	ldr	r0, [pc, #8]	; (31a4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    319c:	3008      	adds	r0, #8
    319e:	f004 bd26 	b.w	7bee <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    31a2:	0000      	.short	0x0000
    31a4:	20000054 	.word	0x20000054
    31a8:	40000c34 	.word	0x40000c34
    31ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31b0:	4c5f      	ldr	r4, [pc, #380]	; (3330 <MPSL_IRQ_CLOCK_Handler+0x358>)
    31b2:	2700      	movs	r7, #0
    31b4:	4606      	mov	r6, r0
    31b6:	61a7      	str	r7, [r4, #24]
    31b8:	7842      	ldrb	r2, [r0, #1]
    31ba:	7881      	ldrb	r1, [r0, #2]
    31bc:	7800      	ldrb	r0, [r0, #0]
    31be:	72e0      	strb	r0, [r4, #11]
    31c0:	7162      	strb	r2, [r4, #5]
    31c2:	71a1      	strb	r1, [r4, #6]
    31c4:	71e7      	strb	r7, [r4, #7]
    31c6:	f04f 0801 	mov.w	r8, #1
    31ca:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    31ce:	2805      	cmp	r0, #5
    31d0:	d225      	bcs.n	321e <MPSL_IRQ_CLOCK_Handler+0x246>
    31d2:	e8df f000 	tbb	[pc, r0]
    31d6:	0310      	.short	0x0310
    31d8:	00222006 	.word	0x00222006
    31dc:	f8c4 8018 	str.w	r8, [r4, #24]
    31e0:	e009      	b.n	31f6 <MPSL_IRQ_CLOCK_Handler+0x21e>
    31e2:	f000 f8d1 	bl	3388 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    31e6:	2101      	movs	r1, #1
    31e8:	4628      	mov	r0, r5
    31ea:	f004 fc7a 	bl	7ae2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    31ee:	2800      	cmp	r0, #0
    31f0:	d0f9      	beq.n	31e6 <MPSL_IRQ_CLOCK_Handler+0x20e>
    31f2:	2002      	movs	r0, #2
    31f4:	61a0      	str	r0, [r4, #24]
    31f6:	f004 fca0 	bl	7b3a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    31fa:	b1b0      	cbz	r0, 322a <MPSL_IRQ_CLOCK_Handler+0x252>
    31fc:	f000 f9d0 	bl	35a0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3200:	7e21      	ldrb	r1, [r4, #24]
    3202:	f001 0103 	and.w	r1, r1, #3
    3206:	4288      	cmp	r0, r1
    3208:	d10f      	bne.n	322a <MPSL_IRQ_CLOCK_Handler+0x252>
    320a:	79b0      	ldrb	r0, [r6, #6]
    320c:	b150      	cbz	r0, 3224 <MPSL_IRQ_CLOCK_Handler+0x24c>
    320e:	2002      	movs	r0, #2
    3210:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3214:	e070      	b.n	32f8 <MPSL_IRQ_CLOCK_Handler+0x320>
    3216:	4847      	ldr	r0, [pc, #284]	; (3334 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3218:	e7ec      	b.n	31f4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    321a:	4847      	ldr	r0, [pc, #284]	; (3338 <MPSL_IRQ_CLOCK_Handler+0x360>)
    321c:	e7ea      	b.n	31f4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    321e:	f240 313a 	movw	r1, #826	; 0x33a
    3222:	e04d      	b.n	32c0 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    3224:	f000 f990 	bl	3548 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3228:	e066      	b.n	32f8 <MPSL_IRQ_CLOCK_Handler+0x320>
    322a:	f8c5 800c 	str.w	r8, [r5, #12]
    322e:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3232:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3236:	69a0      	ldr	r0, [r4, #24]
    3238:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    323c:	f004 fce2 	bl	7c04 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3240:	b940      	cbnz	r0, 3254 <MPSL_IRQ_CLOCK_Handler+0x27c>
    3242:	f004 fce9 	bl	7c18 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3246:	b928      	cbnz	r0, 3254 <MPSL_IRQ_CLOCK_Handler+0x27c>
    3248:	f004 fcfd 	bl	7c46 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    324c:	b910      	cbnz	r0, 3254 <MPSL_IRQ_CLOCK_Handler+0x27c>
    324e:	f004 fd0e 	bl	7c6e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3252:	b138      	cbz	r0, 3264 <MPSL_IRQ_CLOCK_Handler+0x28c>
    3254:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3258:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    325c:	4937      	ldr	r1, [pc, #220]	; (333c <MPSL_IRQ_CLOCK_Handler+0x364>)
    325e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    3262:	6008      	str	r0, [r1, #0]
    3264:	f004 fcce 	bl	7c04 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3268:	b940      	cbnz	r0, 327c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    326a:	f004 fcd5 	bl	7c18 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    326e:	b928      	cbnz	r0, 327c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    3270:	f004 fce9 	bl	7c46 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3274:	b910      	cbnz	r0, 327c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    3276:	f004 fcfa 	bl	7c6e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    327a:	b118      	cbz	r0, 3284 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    327c:	492f      	ldr	r1, [pc, #188]	; (333c <MPSL_IRQ_CLOCK_Handler+0x364>)
    327e:	3110      	adds	r1, #16
    3280:	f8c1 8000 	str.w	r8, [r1]
    3284:	f8c5 8008 	str.w	r8, [r5, #8]
    3288:	2002      	movs	r0, #2
    328a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    328e:	79b0      	ldrb	r0, [r6, #6]
    3290:	bb90      	cbnz	r0, 32f8 <MPSL_IRQ_CLOCK_Handler+0x320>
    3292:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3296:	f010 0f02 	tst.w	r0, #2
    329a:	d00f      	beq.n	32bc <MPSL_IRQ_CLOCK_Handler+0x2e4>
    329c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 3340 <MPSL_IRQ_CLOCK_Handler+0x368>
    32a0:	f8d9 1000 	ldr.w	r1, [r9]
    32a4:	43c9      	mvns	r1, r1
    32a6:	f341 1100 	sbfx	r1, r1, #4, #1
    32aa:	f101 0801 	add.w	r8, r1, #1
    32ae:	f8d9 1000 	ldr.w	r1, [r9]
    32b2:	f041 0110 	orr.w	r1, r1, #16
    32b6:	f8c9 1000 	str.w	r1, [r9]
    32ba:	e007      	b.n	32cc <MPSL_IRQ_CLOCK_Handler+0x2f4>
    32bc:	f240 21fb 	movw	r1, #763	; 0x2fb
    32c0:	206d      	movs	r0, #109	; 0x6d
    32c2:	f000 f9cb 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32c6:	bf00      	nop
    32c8:	f000 fb02 	bl	38d0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    32cc:	4651      	mov	r1, sl
    32ce:	4628      	mov	r0, r5
    32d0:	f004 fc02 	bl	7ad8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    32d4:	2800      	cmp	r0, #0
    32d6:	d0f7      	beq.n	32c8 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    32d8:	f000 f936 	bl	3548 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    32dc:	f1b8 0f00 	cmp.w	r8, #0
    32e0:	d105      	bne.n	32ee <MPSL_IRQ_CLOCK_Handler+0x316>
    32e2:	f8d9 1000 	ldr.w	r1, [r9]
    32e6:	f021 0110 	bic.w	r1, r1, #16
    32ea:	f8c9 1000 	str.w	r1, [r9]
    32ee:	2002      	movs	r0, #2
    32f0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    32f4:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    32f8:	79a0      	ldrb	r0, [r4, #6]
    32fa:	b170      	cbz	r0, 331a <MPSL_IRQ_CLOCK_Handler+0x342>
    32fc:	7830      	ldrb	r0, [r6, #0]
    32fe:	b960      	cbnz	r0, 331a <MPSL_IRQ_CLOCK_Handler+0x342>
    3300:	f000 f934 	bl	356c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3304:	4606      	mov	r6, r0
    3306:	f000 fa1d 	bl	3744 <mpsl_temperature_get>
    330a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    330e:	b116      	cbz	r6, 3316 <MPSL_IRQ_CLOCK_Handler+0x33e>
    3310:	e9c4 1004 	strd	r1, r0, [r4, #16]
    3314:	e001      	b.n	331a <MPSL_IRQ_CLOCK_Handler+0x342>
    3316:	e9c4 0104 	strd	r0, r1, [r4, #16]
    331a:	2101      	movs	r1, #1
    331c:	4628      	mov	r0, r5
    331e:	f004 fbe0 	bl	7ae2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3322:	b108      	cbz	r0, 3328 <MPSL_IRQ_CLOCK_Handler+0x350>
    3324:	f000 f91c 	bl	3560 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3328:	72a7      	strb	r7, [r4, #10]
    332a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    332e:	0000      	.short	0x0000
    3330:	20000054 	.word	0x20000054
    3334:	00020001 	.word	0x00020001
    3338:	00030001 	.word	0x00030001
    333c:	4000053c 	.word	0x4000053c
    3340:	e000ed10 	.word	0xe000ed10

00003344 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    3344:	4801      	ldr	r0, [pc, #4]	; (334c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    3346:	89c0      	ldrh	r0, [r0, #14]
    3348:	4770      	bx	lr
    334a:	0000      	.short	0x0000
    334c:	20000054 	.word	0x20000054

00003350 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3350:	b510      	push	{r4, lr}
    3352:	f3ef 8410 	mrs	r4, PRIMASK
    3356:	b672      	cpsid	i
    3358:	480a      	ldr	r0, [pc, #40]	; (3384 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    335a:	7841      	ldrb	r1, [r0, #1]
    335c:	b129      	cbz	r1, 336a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    335e:	7841      	ldrb	r1, [r0, #1]
    3360:	1e49      	subs	r1, r1, #1
    3362:	7041      	strb	r1, [r0, #1]
    3364:	7841      	ldrb	r1, [r0, #1]
    3366:	b129      	cbz	r1, 3374 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3368:	e008      	b.n	337c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    336a:	f44f 718e 	mov.w	r1, #284	; 0x11c
    336e:	206d      	movs	r0, #109	; 0x6d
    3370:	f000 f974 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3374:	7880      	ldrb	r0, [r0, #2]
    3376:	b908      	cbnz	r0, 337c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3378:	f000 f906 	bl	3588 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    337c:	2c00      	cmp	r4, #0
    337e:	d100      	bne.n	3382 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3380:	b662      	cpsie	i
    3382:	bd10      	pop	{r4, pc}
    3384:	20000054 	.word	0x20000054

00003388 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3388:	b510      	push	{r4, lr}
    338a:	f3ef 8410 	mrs	r4, PRIMASK
    338e:	b672      	cpsid	i
    3390:	4806      	ldr	r0, [pc, #24]	; (33ac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3392:	7841      	ldrb	r1, [r0, #1]
    3394:	1c49      	adds	r1, r1, #1
    3396:	7041      	strb	r1, [r0, #1]
    3398:	7840      	ldrb	r0, [r0, #1]
    339a:	2801      	cmp	r0, #1
    339c:	d101      	bne.n	33a2 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    339e:	f004 fbb7 	bl	7b10 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    33a2:	2c00      	cmp	r4, #0
    33a4:	d100      	bne.n	33a8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    33a6:	b662      	cpsie	i
    33a8:	bd10      	pop	{r4, pc}
    33aa:	0000      	.short	0x0000
    33ac:	20000054 	.word	0x20000054

000033b0 <mpsl_clock_hfclk_release>:
    33b0:	4805      	ldr	r0, [pc, #20]	; (33c8 <mpsl_clock_hfclk_release+0x18>)
    33b2:	b510      	push	{r4, lr}
    33b4:	78c1      	ldrb	r1, [r0, #3]
    33b6:	b121      	cbz	r1, 33c2 <mpsl_clock_hfclk_release+0x12>
    33b8:	2100      	movs	r1, #0
    33ba:	7101      	strb	r1, [r0, #4]
    33bc:	70c1      	strb	r1, [r0, #3]
    33be:	f7ff ffc7 	bl	3350 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    33c2:	2000      	movs	r0, #0
    33c4:	bd10      	pop	{r4, pc}
    33c6:	0000      	.short	0x0000
    33c8:	20000054 	.word	0x20000054

000033cc <mpsl_clock_hfclk_request>:
    33cc:	b570      	push	{r4, r5, r6, lr}
    33ce:	4c0c      	ldr	r4, [pc, #48]	; (3400 <mpsl_clock_hfclk_request+0x34>)
    33d0:	78e1      	ldrb	r1, [r4, #3]
    33d2:	b961      	cbnz	r1, 33ee <mpsl_clock_hfclk_request+0x22>
    33d4:	2501      	movs	r5, #1
    33d6:	70e5      	strb	r5, [r4, #3]
    33d8:	61e0      	str	r0, [r4, #28]
    33da:	f7ff ffd5 	bl	3388 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    33de:	f000 f8c5 	bl	356c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    33e2:	b130      	cbz	r0, 33f2 <mpsl_clock_hfclk_request+0x26>
    33e4:	69e0      	ldr	r0, [r4, #28]
    33e6:	b110      	cbz	r0, 33ee <mpsl_clock_hfclk_request+0x22>
    33e8:	4780      	blx	r0
    33ea:	2000      	movs	r0, #0
    33ec:	61e0      	str	r0, [r4, #28]
    33ee:	2000      	movs	r0, #0
    33f0:	bd70      	pop	{r4, r5, r6, pc}
    33f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    33f6:	7125      	strb	r5, [r4, #4]
    33f8:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    33fc:	e7f7      	b.n	33ee <mpsl_clock_hfclk_request+0x22>
    33fe:	0000      	.short	0x0000
    3400:	20000054 	.word	0x20000054

00003404 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3408:	0005      	movs	r5, r0
    340a:	f06f 0015 	mvn.w	r0, #21
    340e:	d03f      	beq.n	3490 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3410:	7829      	ldrb	r1, [r5, #0]
    3412:	2904      	cmp	r1, #4
    3414:	d83c      	bhi.n	3490 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3416:	2900      	cmp	r1, #0
    3418:	7869      	ldrb	r1, [r5, #1]
    341a:	d03b      	beq.n	3494 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    341c:	2900      	cmp	r1, #0
    341e:	d137      	bne.n	3490 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3420:	78a9      	ldrb	r1, [r5, #2]
    3422:	2900      	cmp	r1, #0
    3424:	d134      	bne.n	3490 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3426:	2000      	movs	r0, #0
    3428:	f004 fb21 	bl	7a6e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    342c:	2000      	movs	r0, #0
    342e:	f004 fb11 	bl	7a54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    3432:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3436:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    343a:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    343e:	2600      	movs	r6, #0
    3440:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3444:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3448:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    344c:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3450:	4c14      	ldr	r4, [pc, #80]	; (34a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3452:	7066      	strb	r6, [r4, #1]
    3454:	88a8      	ldrh	r0, [r5, #4]
    3456:	81a0      	strh	r0, [r4, #12]
    3458:	f004 fb51 	bl	7afe <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    345c:	2701      	movs	r7, #1
    345e:	b108      	cbz	r0, 3464 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3460:	70e7      	strb	r7, [r4, #3]
    3462:	7067      	strb	r7, [r4, #1]
    3464:	2101      	movs	r1, #1
    3466:	4640      	mov	r0, r8
    3468:	f004 fb3b 	bl	7ae2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    346c:	b108      	cbz	r0, 3472 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    346e:	f000 f877 	bl	3560 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3472:	f240 50f5 	movw	r0, #1525	; 0x5f5
    3476:	81e0      	strh	r0, [r4, #14]
    3478:	4628      	mov	r0, r5
    347a:	f7ff fe97 	bl	31ac <MPSL_IRQ_CLOCK_Handler+0x1d4>
    347e:	7267      	strb	r7, [r4, #9]
    3480:	2000      	movs	r0, #0
    3482:	f004 fae7 	bl	7a54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    3486:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    348a:	4630      	mov	r0, r6
    348c:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    3490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3494:	2900      	cmp	r1, #0
    3496:	d0fb      	beq.n	3490 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3498:	2920      	cmp	r1, #32
    349a:	d8f9      	bhi.n	3490 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    349c:	78a9      	ldrb	r1, [r5, #2]
    349e:	2921      	cmp	r1, #33	; 0x21
    34a0:	d9c1      	bls.n	3426 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    34a2:	e7f5      	b.n	3490 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    34a4:	20000054 	.word	0x20000054

000034a8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    34a8:	4801      	ldr	r0, [pc, #4]	; (34b0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    34aa:	8980      	ldrh	r0, [r0, #12]
    34ac:	4770      	bx	lr
    34ae:	0000      	.short	0x0000
    34b0:	20000054 	.word	0x20000054

000034b4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    34b4:	4802      	ldr	r0, [pc, #8]	; (34c0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    34b6:	7a80      	ldrb	r0, [r0, #10]
    34b8:	2800      	cmp	r0, #0
    34ba:	d000      	beq.n	34be <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    34bc:	2001      	movs	r0, #1
    34be:	4770      	bx	lr
    34c0:	20000054 	.word	0x20000054

000034c4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    34c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34c6:	4d1f      	ldr	r5, [pc, #124]	; (3544 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    34c8:	7ae8      	ldrb	r0, [r5, #11]
    34ca:	2800      	cmp	r0, #0
    34cc:	d10f      	bne.n	34ee <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    34ce:	7e28      	ldrb	r0, [r5, #24]
    34d0:	f000 0003 	and.w	r0, r0, #3
    34d4:	f004 fb21 	bl	7b1a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    34d8:	2800      	cmp	r0, #0
    34da:	d008      	beq.n	34ee <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    34dc:	f3ef 8110 	mrs	r1, PRIMASK
    34e0:	b672      	cpsid	i
    34e2:	f7ff ffe7 	bl	34b4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    34e6:	b118      	cbz	r0, 34f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    34e8:	2900      	cmp	r1, #0
    34ea:	d100      	bne.n	34ee <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    34ec:	b662      	cpsie	i
    34ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34f0:	2601      	movs	r6, #1
    34f2:	72ae      	strb	r6, [r5, #10]
    34f4:	b901      	cbnz	r1, 34f8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    34f6:	b662      	cpsie	i
    34f8:	2018      	movs	r0, #24
    34fa:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    34fe:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3502:	61a6      	str	r6, [r4, #24]
    3504:	f44f 7020 	mov.w	r0, #640	; 0x280
    3508:	f8ad 0000 	strh.w	r0, [sp]
    350c:	f8bd 0000 	ldrh.w	r0, [sp]
    3510:	1e41      	subs	r1, r0, #1
    3512:	f8ad 1000 	strh.w	r1, [sp]
    3516:	d2f9      	bcs.n	350c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3518:	2700      	movs	r7, #0
    351a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    351e:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3522:	4808      	ldr	r0, [pc, #32]	; (3544 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3524:	3008      	adds	r0, #8
    3526:	f004 fb5e 	bl	7be6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    352a:	702f      	strb	r7, [r5, #0]
    352c:	f7ff fd98 	bl	3060 <MPSL_IRQ_CLOCK_Handler+0x88>
    3530:	6166      	str	r6, [r4, #20]
    3532:	7968      	ldrb	r0, [r5, #5]
    3534:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3538:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    353c:	2018      	movs	r0, #24
    353e:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3544:	20000054 	.word	0x20000054

00003548 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3548:	b510      	push	{r4, lr}
    354a:	4c04      	ldr	r4, [pc, #16]	; (355c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    354c:	7e20      	ldrb	r0, [r4, #24]
    354e:	f000 0003 	and.w	r0, r0, #3
    3552:	f004 fae2 	bl	7b1a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3556:	2800      	cmp	r0, #0
    3558:	d0f8      	beq.n	354c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    355a:	bd10      	pop	{r4, pc}
    355c:	20000054 	.word	0x20000054

00003560 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3560:	4901      	ldr	r1, [pc, #4]	; (3568 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3562:	2001      	movs	r0, #1
    3564:	7008      	strb	r0, [r1, #0]
    3566:	4770      	bx	lr
    3568:	20000179 	.word	0x20000179

0000356c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    356c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3570:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3574:	b918      	cbnz	r0, 357e <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    3576:	4803      	ldr	r0, [pc, #12]	; (3584 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3578:	7800      	ldrb	r0, [r0, #0]
    357a:	2800      	cmp	r0, #0
    357c:	d000      	beq.n	3580 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    357e:	2001      	movs	r0, #1
    3580:	4770      	bx	lr
    3582:	0000      	.short	0x0000
    3584:	20000179 	.word	0x20000179

00003588 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3588:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    358c:	2101      	movs	r1, #1
    358e:	6041      	str	r1, [r0, #4]
    3590:	2100      	movs	r1, #0
    3592:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3596:	4801      	ldr	r0, [pc, #4]	; (359c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3598:	7001      	strb	r1, [r0, #0]
    359a:	4770      	bx	lr
    359c:	20000179 	.word	0x20000179

000035a0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    35a0:	4802      	ldr	r0, [pc, #8]	; (35ac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    35a2:	6800      	ldr	r0, [r0, #0]
    35a4:	f000 0003 	and.w	r0, r0, #3
    35a8:	4770      	bx	lr
    35aa:	0000      	.short	0x0000
    35ac:	4000041c 	.word	0x4000041c
    35b0:	b510      	push	{r4, lr}
    35b2:	b131      	cbz	r1, 35c2 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    35b4:	2901      	cmp	r1, #1
    35b6:	d007      	beq.n	35c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    35b8:	f240 3102 	movw	r1, #770	; 0x302
    35bc:	a005      	add	r0, pc, #20	; (adr r0, 35d4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    35be:	f000 f821 	bl	3604 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    35c2:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    35c6:	e001      	b.n	35cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    35c8:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    35cc:	f000 0001 	and.w	r0, r0, #1
    35d0:	bd10      	pop	{r4, pc}
    35d2:	0000      	.short	0x0000
    35d4:	5f66726e 	.word	0x5f66726e
    35d8:	636f6c63 	.word	0x636f6c63
    35dc:	00682e6b 	.word	0x00682e6b
    35e0:	f3bf 8f4f 	dsb	sy
    35e4:	4805      	ldr	r0, [pc, #20]	; (35fc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    35e6:	6801      	ldr	r1, [r0, #0]
    35e8:	4a05      	ldr	r2, [pc, #20]	; (3600 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    35ea:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    35ee:	4311      	orrs	r1, r2
    35f0:	6001      	str	r1, [r0, #0]
    35f2:	f3bf 8f4f 	dsb	sy
    35f6:	bf00      	nop
    35f8:	e7fd      	b.n	35f6 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    35fa:	0000      	.short	0x0000
    35fc:	e000ed0c 	.word	0xe000ed0c
    3600:	05fa0004 	.word	0x05fa0004

00003604 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3604:	b672      	cpsid	i
    3606:	4a03      	ldr	r2, [pc, #12]	; (3614 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3608:	6852      	ldr	r2, [r2, #4]
    360a:	b102      	cbz	r2, 360e <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    360c:	4790      	blx	r2
    360e:	f7ff ffe7 	bl	35e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3612:	0000      	.short	0x0000
    3614:	20000074 	.word	0x20000074
    3618:	4806      	ldr	r0, [pc, #24]	; (3634 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    361a:	b510      	push	{r4, lr}
    361c:	2100      	movs	r1, #0
    361e:	6001      	str	r1, [r0, #0]
    3620:	2101      	movs	r1, #1
    3622:	6001      	str	r1, [r0, #0]
    3624:	4608      	mov	r0, r1
    3626:	f004 fa9f 	bl	7b68 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    362a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    362e:	2001      	movs	r0, #1
    3630:	f004 ba8d 	b.w	7b4e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3634:	40001ffc 	.word	0x40001ffc
    3638:	4807      	ldr	r0, [pc, #28]	; (3658 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    363a:	b510      	push	{r4, lr}
    363c:	2101      	movs	r1, #1
    363e:	6041      	str	r1, [r0, #4]
    3640:	1e89      	subs	r1, r1, #2
    3642:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3646:	200c      	movs	r0, #12
    3648:	f004 fa8e 	bl	7b68 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    364c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3650:	200c      	movs	r0, #12
    3652:	f004 ba7c 	b.w	7b4e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3656:	0000      	.short	0x0000
    3658:	4000c000 	.word	0x4000c000

0000365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    365c:	b50e      	push	{r1, r2, r3, lr}
    365e:	b672      	cpsid	i
    3660:	4a0f      	ldr	r2, [pc, #60]	; (36a0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3662:	6855      	ldr	r5, [r2, #4]
    3664:	b1d5      	cbz	r5, 369c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    3666:	2200      	movs	r2, #0
    3668:	4603      	mov	r3, r0
    366a:	466e      	mov	r6, sp
    366c:	240a      	movs	r4, #10
    366e:	e003      	b.n	3678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    3670:	fbb0 f0f4 	udiv	r0, r0, r4
    3674:	1c52      	adds	r2, r2, #1
    3676:	b2d2      	uxtb	r2, r2
    3678:	2800      	cmp	r0, #0
    367a:	d1f9      	bne.n	3670 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    367c:	54b0      	strb	r0, [r6, r2]
    367e:	e009      	b.n	3694 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3680:	fbb3 f0f4 	udiv	r0, r3, r4
    3684:	fb04 3010 	mls	r0, r4, r0, r3
    3688:	fbb3 f3f4 	udiv	r3, r3, r4
    368c:	1e52      	subs	r2, r2, #1
    368e:	b2d2      	uxtb	r2, r2
    3690:	3030      	adds	r0, #48	; 0x30
    3692:	54b0      	strb	r0, [r6, r2]
    3694:	2a00      	cmp	r2, #0
    3696:	d1f3      	bne.n	3680 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3698:	4630      	mov	r0, r6
    369a:	47a8      	blx	r5
    369c:	f7ff ffa0 	bl	35e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    36a0:	20000074 	.word	0x20000074

000036a4 <mpsl_init>:
    36a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36a8:	4c18      	ldr	r4, [pc, #96]	; (370c <mpsl_init+0x68>)
    36aa:	4606      	mov	r6, r0
    36ac:	4617      	mov	r7, r2
    36ae:	7860      	ldrb	r0, [r4, #1]
    36b0:	460d      	mov	r5, r1
    36b2:	b118      	cbz	r0, 36bc <mpsl_init+0x18>
    36b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    36b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36bc:	f7fc fd1c 	bl	f8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    36c0:	b906      	cbnz	r6, 36c4 <mpsl_init+0x20>
    36c2:	4e13      	ldr	r6, [pc, #76]	; (3710 <mpsl_init+0x6c>)
    36c4:	6067      	str	r7, [r4, #4]
    36c6:	7025      	strb	r5, [r4, #0]
    36c8:	f7ff ffa6 	bl	3618 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    36cc:	f7ff ffb4 	bl	3638 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    36d0:	4630      	mov	r0, r6
    36d2:	f7ff fe97 	bl	3404 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    36d6:	0006      	movs	r6, r0
    36d8:	d1ee      	bne.n	36b8 <mpsl_init+0x14>
    36da:	f7fe fee7 	bl	24ac <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    36de:	f7ff fef1 	bl	34c4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    36e2:	f004 f986 	bl	79f2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    36e6:	4628      	mov	r0, r5
    36e8:	f004 fa31 	bl	7b4e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    36ec:	2001      	movs	r0, #1
    36ee:	2d00      	cmp	r5, #0
    36f0:	db09      	blt.n	3706 <mpsl_init+0x62>
    36f2:	f005 011f 	and.w	r1, r5, #31
    36f6:	fa00 f101 	lsl.w	r1, r0, r1
    36fa:	096a      	lsrs	r2, r5, #5
    36fc:	0092      	lsls	r2, r2, #2
    36fe:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3702:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3706:	7060      	strb	r0, [r4, #1]
    3708:	4630      	mov	r0, r6
    370a:	e7d5      	b.n	36b8 <mpsl_init+0x14>
    370c:	20000074 	.word	0x20000074
    3710:	00007b8a 	.word	0x00007b8a

00003714 <mpsl_is_initialized>:
    3714:	4801      	ldr	r0, [pc, #4]	; (371c <mpsl_is_initialized+0x8>)
    3716:	7840      	ldrb	r0, [r0, #1]
    3718:	4770      	bx	lr
    371a:	0000      	.short	0x0000
    371c:	20000074 	.word	0x20000074

00003720 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3720:	4807      	ldr	r0, [pc, #28]	; (3740 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    3722:	f990 0000 	ldrsb.w	r0, [r0]
    3726:	2800      	cmp	r0, #0
    3728:	db09      	blt.n	373e <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    372a:	f000 021f 	and.w	r2, r0, #31
    372e:	2101      	movs	r1, #1
    3730:	4091      	lsls	r1, r2
    3732:	0940      	lsrs	r0, r0, #5
    3734:	0080      	lsls	r0, r0, #2
    3736:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    373a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    373e:	4770      	bx	lr
    3740:	20000074 	.word	0x20000074

00003744 <mpsl_temperature_get>:
    3744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3748:	2601      	movs	r6, #1
    374a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    374e:	0331      	lsls	r1, r6, #12
    3750:	f04f 0800 	mov.w	r8, #0
    3754:	4640      	mov	r0, r8
    3756:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    375a:	f3bf 8f4f 	dsb	sy
    375e:	f3bf 8f6f 	isb	sy
    3762:	4c16      	ldr	r4, [pc, #88]	; (37bc <mpsl_temperature_get+0x78>)
    3764:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    3768:	200c      	movs	r0, #12
    376a:	f004 fa1c 	bl	7ba6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    376e:	4d14      	ldr	r5, [pc, #80]	; (37c0 <mpsl_temperature_get+0x7c>)
    3770:	6828      	ldr	r0, [r5, #0]
    3772:	43c0      	mvns	r0, r0
    3774:	f340 1700 	sbfx	r7, r0, #4, #1
    3778:	6828      	ldr	r0, [r5, #0]
    377a:	f040 0010 	orr.w	r0, r0, #16
    377e:	6028      	str	r0, [r5, #0]
    3780:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3784:	6026      	str	r6, [r4, #0]
    3786:	1c7f      	adds	r7, r7, #1
    3788:	e002      	b.n	3790 <mpsl_temperature_get+0x4c>
    378a:	bf00      	nop
    378c:	f000 f8a0 	bl	38d0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3790:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3794:	2800      	cmp	r0, #0
    3796:	d0f9      	beq.n	378c <mpsl_temperature_get+0x48>
    3798:	b91f      	cbnz	r7, 37a2 <mpsl_temperature_get+0x5e>
    379a:	6828      	ldr	r0, [r5, #0]
    379c:	f020 0010 	bic.w	r0, r0, #16
    37a0:	6028      	str	r0, [r5, #0]
    37a2:	4808      	ldr	r0, [pc, #32]	; (37c4 <mpsl_temperature_get+0x80>)
    37a4:	6805      	ldr	r5, [r0, #0]
    37a6:	6066      	str	r6, [r4, #4]
    37a8:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    37ac:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    37b0:	200c      	movs	r0, #12
    37b2:	f004 f9f8 	bl	7ba6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    37b6:	4628      	mov	r0, r5
    37b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37bc:	4000c000 	.word	0x4000c000
    37c0:	e000ed10 	.word	0xe000ed10
    37c4:	4000c508 	.word	0x4000c508

000037c8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    37c8:	b510      	push	{r4, lr}
    37ca:	4602      	mov	r2, r0
    37cc:	2005      	movs	r0, #5
    37ce:	490c      	ldr	r1, [pc, #48]	; (3800 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    37d0:	e004      	b.n	37dc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    37d2:	bf00      	nop
    37d4:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    37d8:	791b      	ldrb	r3, [r3, #4]
    37da:	b133      	cbz	r3, 37ea <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    37dc:	1e40      	subs	r0, r0, #1
    37de:	b2c0      	uxtb	r0, r0
    37e0:	d2f8      	bcs.n	37d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    37e2:	2148      	movs	r1, #72	; 0x48
    37e4:	2069      	movs	r0, #105	; 0x69
    37e6:	f7ff ff39 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37ea:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    37ee:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    37f2:	2200      	movs	r2, #0
    37f4:	714a      	strb	r2, [r1, #5]
    37f6:	718a      	strb	r2, [r1, #6]
    37f8:	2201      	movs	r2, #1
    37fa:	710a      	strb	r2, [r1, #4]
    37fc:	bd10      	pop	{r4, pc}
    37fe:	0000      	.short	0x0000
    3800:	20000a7c 	.word	0x20000a7c

00003804 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3804:	b510      	push	{r4, lr}
    3806:	2805      	cmp	r0, #5
    3808:	d301      	bcc.n	380e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    380a:	2158      	movs	r1, #88	; 0x58
    380c:	e006      	b.n	381c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    380e:	490a      	ldr	r1, [pc, #40]	; (3838 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3810:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3814:	7901      	ldrb	r1, [r0, #4]
    3816:	2901      	cmp	r1, #1
    3818:	d003      	beq.n	3822 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    381a:	2159      	movs	r1, #89	; 0x59
    381c:	2069      	movs	r0, #105	; 0x69
    381e:	f7ff ff1d 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3822:	7941      	ldrb	r1, [r0, #5]
    3824:	7982      	ldrb	r2, [r0, #6]
    3826:	1c49      	adds	r1, r1, #1
    3828:	b2c9      	uxtb	r1, r1
    382a:	428a      	cmp	r2, r1
    382c:	d000      	beq.n	3830 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    382e:	7141      	strb	r1, [r0, #5]
    3830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3834:	f7ff bf74 	b.w	3720 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3838:	20000a7c 	.word	0x20000a7c

0000383c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    383c:	b510      	push	{r4, lr}
    383e:	2805      	cmp	r0, #5
    3840:	d303      	bcc.n	384a <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    3842:	214f      	movs	r1, #79	; 0x4f
    3844:	2069      	movs	r0, #105	; 0x69
    3846:	f7ff ff09 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    384a:	4a03      	ldr	r2, [pc, #12]	; (3858 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    384c:	2100      	movs	r1, #0
    384e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    3852:	7101      	strb	r1, [r0, #4]
    3854:	bd10      	pop	{r4, pc}
    3856:	0000      	.short	0x0000
    3858:	20000a7c 	.word	0x20000a7c

0000385c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    385c:	b570      	push	{r4, r5, r6, lr}
    385e:	2505      	movs	r5, #5
    3860:	4e0e      	ldr	r6, [pc, #56]	; (389c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    3862:	4c0f      	ldr	r4, [pc, #60]	; (38a0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    3864:	e016      	b.n	3894 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3866:	7821      	ldrb	r1, [r4, #0]
    3868:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    386c:	7902      	ldrb	r2, [r0, #4]
    386e:	2a01      	cmp	r2, #1
    3870:	d108      	bne.n	3884 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3872:	7942      	ldrb	r2, [r0, #5]
    3874:	7983      	ldrb	r3, [r0, #6]
    3876:	429a      	cmp	r2, r3
    3878:	d004      	beq.n	3884 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    387a:	7942      	ldrb	r2, [r0, #5]
    387c:	7182      	strb	r2, [r0, #6]
    387e:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    3882:	4780      	blx	r0
    3884:	7820      	ldrb	r0, [r4, #0]
    3886:	1c40      	adds	r0, r0, #1
    3888:	b2c0      	uxtb	r0, r0
    388a:	7020      	strb	r0, [r4, #0]
    388c:	2805      	cmp	r0, #5
    388e:	d301      	bcc.n	3894 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3890:	2000      	movs	r0, #0
    3892:	7020      	strb	r0, [r4, #0]
    3894:	1e6d      	subs	r5, r5, #1
    3896:	b2ed      	uxtb	r5, r5
    3898:	d2e5      	bcs.n	3866 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    389a:	bd70      	pop	{r4, r5, r6, pc}
    389c:	20000a7c 	.word	0x20000a7c
    38a0:	2000017a 	.word	0x2000017a

000038a4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    38a4:	b500      	push	{lr}
    38a6:	f004 f9ad 	bl	7c04 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    38aa:	b940      	cbnz	r0, 38be <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    38ac:	f004 f9b4 	bl	7c18 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    38b0:	b928      	cbnz	r0, 38be <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    38b2:	f004 f9c8 	bl	7c46 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    38b6:	b910      	cbnz	r0, 38be <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    38b8:	f004 f9d9 	bl	7c6e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    38bc:	b108      	cbz	r0, 38c2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    38be:	4802      	ldr	r0, [pc, #8]	; (38c8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    38c0:	bd00      	pop	{pc}
    38c2:	4802      	ldr	r0, [pc, #8]	; (38cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    38c4:	bd00      	pop	{pc}
    38c6:	0000      	.short	0x0000
    38c8:	4000050c 	.word	0x4000050c
    38cc:	4001e700 	.word	0x4001e700

000038d0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    38d0:	b510      	push	{r4, lr}
    38d2:	f004 f9cc 	bl	7c6e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    38d6:	b330      	cbz	r0, 3926 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    38d8:	f3ef 8010 	mrs	r0, PRIMASK
    38dc:	b1c8      	cbz	r0, 3912 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    38de:	2100      	movs	r1, #0
    38e0:	b672      	cpsid	i
    38e2:	4812      	ldr	r0, [pc, #72]	; (392c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    38e4:	6802      	ldr	r2, [r0, #0]
    38e6:	6803      	ldr	r3, [r0, #0]
    38e8:	f3c2 1200 	ubfx	r2, r2, #4, #1
    38ec:	f043 0310 	orr.w	r3, r3, #16
    38f0:	6003      	str	r3, [r0, #0]
    38f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    38f6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    38fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    38fe:	431c      	orrs	r4, r3
    3900:	d000      	beq.n	3904 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3902:	bf40      	sev
    3904:	bf20      	wfe
    3906:	bf00      	nop
    3908:	bf00      	nop
    390a:	bf00      	nop
    390c:	bf00      	nop
    390e:	b112      	cbz	r2, 3916 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3910:	e005      	b.n	391e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3912:	2101      	movs	r1, #1
    3914:	e7e4      	b.n	38e0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3916:	6802      	ldr	r2, [r0, #0]
    3918:	f022 0210 	bic.w	r2, r2, #16
    391c:	6002      	str	r2, [r0, #0]
    391e:	2900      	cmp	r1, #0
    3920:	d000      	beq.n	3924 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3922:	b662      	cpsie	i
    3924:	bd10      	pop	{r4, pc}
    3926:	bf20      	wfe
    3928:	bd10      	pop	{r4, pc}
    392a:	0000      	.short	0x0000
    392c:	e000ed10 	.word	0xe000ed10

00003930 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    3930:	4901      	ldr	r1, [pc, #4]	; (3938 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    3932:	2001      	movs	r0, #1
    3934:	7088      	strb	r0, [r1, #2]
    3936:	4770      	bx	lr
    3938:	2000007c 	.word	0x2000007c

0000393c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    393c:	00007ebb 00007ef3 00007edd 00007ecb     .~...~...~...~..
    394c:	00007ed7 00007ec5 00007eb9 00007eb7     .~...~...~...~..
    395c:	00007eef 00007ee3 00007ed1 00007ebf     .~...~...~...~..
    396c:	00007eb1 00007ea9 00007ead 00007ea3     .~...~...~...~..

0000397c <mpsl_fem_disable>:
    397c:	4801      	ldr	r0, [pc, #4]	; (3984 <mpsl_fem_disable+0x8>)
    397e:	6800      	ldr	r0, [r0, #0]
    3980:	6800      	ldr	r0, [r0, #0]
    3982:	4700      	bx	r0
    3984:	20000090 	.word	0x20000090

00003988 <mpsl_fem_lna_configuration_clear>:
    3988:	4801      	ldr	r0, [pc, #4]	; (3990 <mpsl_fem_lna_configuration_clear+0x8>)
    398a:	6800      	ldr	r0, [r0, #0]
    398c:	6940      	ldr	r0, [r0, #20]
    398e:	4700      	bx	r0
    3990:	20000090 	.word	0x20000090

00003994 <mpsl_fem_lna_configuration_set>:
    3994:	4a01      	ldr	r2, [pc, #4]	; (399c <mpsl_fem_lna_configuration_set+0x8>)
    3996:	6812      	ldr	r2, [r2, #0]
    3998:	68d2      	ldr	r2, [r2, #12]
    399a:	4710      	bx	r2
    399c:	20000090 	.word	0x20000090

000039a0 <mpsl_fem_lna_is_configured>:
    39a0:	4901      	ldr	r1, [pc, #4]	; (39a8 <mpsl_fem_lna_is_configured+0x8>)
    39a2:	6809      	ldr	r1, [r1, #0]
    39a4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    39a6:	4708      	bx	r1
    39a8:	20000090 	.word	0x20000090

000039ac <mpsl_fem_pa_configuration_clear>:
    39ac:	4801      	ldr	r0, [pc, #4]	; (39b4 <mpsl_fem_pa_configuration_clear+0x8>)
    39ae:	6800      	ldr	r0, [r0, #0]
    39b0:	6900      	ldr	r0, [r0, #16]
    39b2:	4700      	bx	r0
    39b4:	20000090 	.word	0x20000090

000039b8 <mpsl_fem_pa_configuration_set>:
    39b8:	4a01      	ldr	r2, [pc, #4]	; (39c0 <mpsl_fem_pa_configuration_set+0x8>)
    39ba:	6812      	ldr	r2, [r2, #0]
    39bc:	6892      	ldr	r2, [r2, #8]
    39be:	4710      	bx	r2
    39c0:	20000090 	.word	0x20000090

000039c4 <mpsl_fem_pa_gain_set>:
    39c4:	4901      	ldr	r1, [pc, #4]	; (39cc <mpsl_fem_pa_gain_set+0x8>)
    39c6:	6809      	ldr	r1, [r1, #0]
    39c8:	6a49      	ldr	r1, [r1, #36]	; 0x24
    39ca:	4708      	bx	r1
    39cc:	20000090 	.word	0x20000090

000039d0 <mpsl_fem_pa_is_configured>:
    39d0:	4901      	ldr	r1, [pc, #4]	; (39d8 <mpsl_fem_pa_is_configured+0x8>)
    39d2:	6809      	ldr	r1, [r1, #0]
    39d4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    39d6:	4708      	bx	r1
    39d8:	20000090 	.word	0x20000090

000039dc <mpsl_fem_tx_power_split>:
    39dc:	4b01      	ldr	r3, [pc, #4]	; (39e4 <mpsl_fem_tx_power_split+0x8>)
    39de:	681b      	ldr	r3, [r3, #0]
    39e0:	685b      	ldr	r3, [r3, #4]
    39e2:	4718      	bx	r3
    39e4:	20000090 	.word	0x20000090

000039e8 <mpsl_fem_device_config_254_apply_get>:
    39e8:	4801      	ldr	r0, [pc, #4]	; (39f0 <mpsl_fem_device_config_254_apply_get+0x8>)
    39ea:	7800      	ldrb	r0, [r0, #0]
    39ec:	4770      	bx	lr
    39ee:	0000      	.short	0x0000
    39f0:	2000017b 	.word	0x2000017b
    39f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    39f6:	4c14      	ldr	r4, [pc, #80]	; (3a48 <mpsl_fem_device_config_254_apply_get+0x60>)
    39f8:	7a20      	ldrb	r0, [r4, #8]
    39fa:	f88d 0001 	strb.w	r0, [sp, #1]
    39fe:	79e0      	ldrb	r0, [r4, #7]
    3a00:	f88d 0000 	strb.w	r0, [sp]
    3a04:	79a0      	ldrb	r0, [r4, #6]
    3a06:	f8ad 0004 	strh.w	r0, [sp, #4]
    3a0a:	7960      	ldrb	r0, [r4, #5]
    3a0c:	f8ad 0002 	strh.w	r0, [sp, #2]
    3a10:	4668      	mov	r0, sp
    3a12:	f002 fba7 	bl	6164 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3a16:	b108      	cbz	r0, 3a1c <mpsl_fem_device_config_254_apply_get+0x34>
    3a18:	2190      	movs	r1, #144	; 0x90
    3a1a:	e010      	b.n	3a3e <mpsl_fem_device_config_254_apply_get+0x56>
    3a1c:	68e0      	ldr	r0, [r4, #12]
    3a1e:	9002      	str	r0, [sp, #8]
    3a20:	a802      	add	r0, sp, #8
    3a22:	f002 fbb5 	bl	6190 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3a26:	b108      	cbz	r0, 3a2c <mpsl_fem_device_config_254_apply_get+0x44>
    3a28:	2194      	movs	r1, #148	; 0x94
    3a2a:	e008      	b.n	3a3e <mpsl_fem_device_config_254_apply_get+0x56>
    3a2c:	4807      	ldr	r0, [pc, #28]	; (3a4c <mpsl_fem_device_config_254_apply_get+0x64>)
    3a2e:	6800      	ldr	r0, [r0, #0]
    3a30:	9003      	str	r0, [sp, #12]
    3a32:	a803      	add	r0, sp, #12
    3a34:	f006 f92d 	bl	9c92 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3a38:	2800      	cmp	r0, #0
    3a3a:	d003      	beq.n	3a44 <mpsl_fem_device_config_254_apply_get+0x5c>
    3a3c:	2198      	movs	r1, #152	; 0x98
    3a3e:	2003      	movs	r0, #3
    3a40:	f000 f8ea 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3a44:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3a46:	0000      	.short	0x0000
    3a48:	20000aa4 	.word	0x20000aa4
    3a4c:	00003ca0 	.word	0x00003ca0

00003a50 <sdc_build_revision_get>:
    3a50:	b510      	push	{r4, lr}
    3a52:	b128      	cbz	r0, 3a60 <sdc_build_revision_get+0x10>
    3a54:	2214      	movs	r2, #20
    3a56:	4904      	ldr	r1, [pc, #16]	; (3a68 <sdc_build_revision_get+0x18>)
    3a58:	f004 f949 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3a5c:	2000      	movs	r0, #0
    3a5e:	bd10      	pop	{r4, pc}
    3a60:	f06f 0015 	mvn.w	r0, #21
    3a64:	bd10      	pop	{r4, pc}
    3a66:	0000      	.short	0x0000
    3a68:	00003cc4 	.word	0x00003cc4

00003a6c <sdc_cfg_set>:
    3a6c:	b570      	push	{r4, r5, r6, lr}
    3a6e:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    3a72:	bb90      	cbnz	r0, 3ada <sdc_cfg_set+0x6e>
    3a74:	4c24      	ldr	r4, [pc, #144]	; (3b08 <sdc_cfg_set+0x9c>)
    3a76:	7860      	ldrb	r0, [r4, #1]
    3a78:	b108      	cbz	r0, 3a7e <sdc_cfg_set+0x12>
    3a7a:	1198      	asrs	r0, r3, #6
    3a7c:	bd70      	pop	{r4, r5, r6, pc}
    3a7e:	b309      	cbz	r1, 3ac4 <sdc_cfg_set+0x58>
    3a80:	f06f 0515 	mvn.w	r5, #21
    3a84:	b33a      	cbz	r2, 3ad6 <sdc_cfg_set+0x6a>
    3a86:	4821      	ldr	r0, [pc, #132]	; (3b0c <sdc_cfg_set+0xa0>)
    3a88:	2908      	cmp	r1, #8
    3a8a:	d237      	bcs.n	3afc <sdc_cfg_set+0x90>
    3a8c:	e8df f001 	tbb	[pc, r1]
    3a90:	0a070436 	.word	0x0a070436
    3a94:	291e1b18 	.word	0x291e1b18
    3a98:	7811      	ldrb	r1, [r2, #0]
    3a9a:	7001      	strb	r1, [r0, #0]
    3a9c:	e023      	b.n	3ae6 <sdc_cfg_set+0x7a>
    3a9e:	7811      	ldrb	r1, [r2, #0]
    3aa0:	7041      	strb	r1, [r0, #1]
    3aa2:	e020      	b.n	3ae6 <sdc_cfg_set+0x7a>
    3aa4:	7891      	ldrb	r1, [r2, #2]
    3aa6:	b1b1      	cbz	r1, 3ad6 <sdc_cfg_set+0x6a>
    3aa8:	78d1      	ldrb	r1, [r2, #3]
    3aaa:	b1a1      	cbz	r1, 3ad6 <sdc_cfg_set+0x6a>
    3aac:	7811      	ldrb	r1, [r2, #0]
    3aae:	291b      	cmp	r1, #27
    3ab0:	d311      	bcc.n	3ad6 <sdc_cfg_set+0x6a>
    3ab2:	7851      	ldrb	r1, [r2, #1]
    3ab4:	291b      	cmp	r1, #27
    3ab6:	d30e      	bcc.n	3ad6 <sdc_cfg_set+0x6a>
    3ab8:	6811      	ldr	r1, [r2, #0]
    3aba:	f8c0 1005 	str.w	r1, [r0, #5]
    3abe:	e012      	b.n	3ae6 <sdc_cfg_set+0x7a>
    3ac0:	6811      	ldr	r1, [r2, #0]
    3ac2:	60c1      	str	r1, [r0, #12]
    3ac4:	e00f      	b.n	3ae6 <sdc_cfg_set+0x7a>
    3ac6:	7811      	ldrb	r1, [r2, #0]
    3ac8:	7081      	strb	r1, [r0, #2]
    3aca:	e00c      	b.n	3ae6 <sdc_cfg_set+0x7a>
    3acc:	78e1      	ldrb	r1, [r4, #3]
    3ace:	b129      	cbz	r1, 3adc <sdc_cfg_set+0x70>
    3ad0:	7811      	ldrb	r1, [r2, #0]
    3ad2:	2902      	cmp	r1, #2
    3ad4:	d202      	bcs.n	3adc <sdc_cfg_set+0x70>
    3ad6:	4628      	mov	r0, r5
    3ad8:	bd70      	pop	{r4, r5, r6, pc}
    3ada:	e00f      	b.n	3afc <sdc_cfg_set+0x90>
    3adc:	7811      	ldrb	r1, [r2, #0]
    3ade:	7401      	strb	r1, [r0, #16]
    3ae0:	e001      	b.n	3ae6 <sdc_cfg_set+0x7a>
    3ae2:	8811      	ldrh	r1, [r2, #0]
    3ae4:	8241      	strh	r1, [r0, #18]
    3ae6:	2201      	movs	r2, #1
    3ae8:	4908      	ldr	r1, [pc, #32]	; (3b0c <sdc_cfg_set+0xa0>)
    3aea:	2000      	movs	r0, #0
    3aec:	f004 fa1d 	bl	7f2a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    3af0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3af4:	db04      	blt.n	3b00 <sdc_cfg_set+0x94>
    3af6:	f06f 000b 	mvn.w	r0, #11
    3afa:	e7ed      	b.n	3ad8 <sdc_cfg_set+0x6c>
    3afc:	4618      	mov	r0, r3
    3afe:	e7eb      	b.n	3ad8 <sdc_cfg_set+0x6c>
    3b00:	2101      	movs	r1, #1
    3b02:	70a1      	strb	r1, [r4, #2]
    3b04:	e7e8      	b.n	3ad8 <sdc_cfg_set+0x6c>
    3b06:	0000      	.short	0x0000
    3b08:	20000094 	.word	0x20000094
    3b0c:	20000aa4 	.word	0x20000aa4

00003b10 <sdc_disable>:
    3b10:	b510      	push	{r4, lr}
    3b12:	4c07      	ldr	r4, [pc, #28]	; (3b30 <sdc_disable+0x20>)
    3b14:	7860      	ldrb	r0, [r4, #1]
    3b16:	b120      	cbz	r0, 3b22 <sdc_disable+0x12>
    3b18:	f002 fd48 	bl	65ac <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    3b1c:	7820      	ldrb	r0, [r4, #0]
    3b1e:	f7ff fe8d 	bl	383c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    3b22:	f000 fd29 	bl	4578 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    3b26:	f000 fe03 	bl	4730 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    3b2a:	2000      	movs	r0, #0
    3b2c:	7060      	strb	r0, [r4, #1]
    3b2e:	bd10      	pop	{r4, pc}
    3b30:	20000094 	.word	0x20000094

00003b34 <sdc_enable>:
    3b34:	b570      	push	{r4, r5, r6, lr}
    3b36:	460c      	mov	r4, r1
    3b38:	0005      	movs	r5, r0
    3b3a:	d019      	beq.n	3b70 <sdc_enable+0x3c>
    3b3c:	b1c4      	cbz	r4, 3b70 <sdc_enable+0x3c>
    3b3e:	f000 f8e7 	bl	3d10 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3b42:	b1c0      	cbz	r0, 3b76 <sdc_enable+0x42>
    3b44:	4628      	mov	r0, r5
    3b46:	f7ff fe3f 	bl	37c8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3b4a:	4d0c      	ldr	r5, [pc, #48]	; (3b7c <sdc_enable+0x48>)
    3b4c:	2200      	movs	r2, #0
    3b4e:	490c      	ldr	r1, [pc, #48]	; (3b80 <sdc_enable+0x4c>)
    3b50:	7028      	strb	r0, [r5, #0]
    3b52:	4620      	mov	r0, r4
    3b54:	f004 f9e9 	bl	7f2a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    3b58:	f006 fba5 	bl	a2a6 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3b5c:	2100      	movs	r1, #0
    3b5e:	7828      	ldrb	r0, [r5, #0]
    3b60:	f002 fd14 	bl	658c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3b64:	f7ff ff46 	bl	39f4 <mpsl_fem_device_config_254_apply_get+0xc>
    3b68:	2001      	movs	r0, #1
    3b6a:	7068      	strb	r0, [r5, #1]
    3b6c:	2000      	movs	r0, #0
    3b6e:	bd70      	pop	{r4, r5, r6, pc}
    3b70:	f06f 0015 	mvn.w	r0, #21
    3b74:	bd70      	pop	{r4, r5, r6, pc}
    3b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3b7a:	bd70      	pop	{r4, r5, r6, pc}
    3b7c:	20000094 	.word	0x20000094
    3b80:	20000aa4 	.word	0x20000aa4

00003b84 <sdc_init>:
    3b84:	b530      	push	{r4, r5, lr}
    3b86:	b089      	sub	sp, #36	; 0x24
    3b88:	0005      	movs	r5, r0
    3b8a:	d00c      	beq.n	3ba6 <sdc_init+0x22>
    3b8c:	f7ff fdc2 	bl	3714 <mpsl_is_initialized>
    3b90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3b94:	b120      	cbz	r0, 3ba0 <sdc_init+0x1c>
    3b96:	f7ff fc87 	bl	34a8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3b9a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3b9e:	d905      	bls.n	3bac <sdc_init+0x28>
    3ba0:	4620      	mov	r0, r4
    3ba2:	b009      	add	sp, #36	; 0x24
    3ba4:	bd30      	pop	{r4, r5, pc}
    3ba6:	f06f 0015 	mvn.w	r0, #21
    3baa:	e7fa      	b.n	3ba2 <sdc_init+0x1e>
    3bac:	4c15      	ldr	r4, [pc, #84]	; (3c04 <sdc_init+0x80>)
    3bae:	4816      	ldr	r0, [pc, #88]	; (3c08 <sdc_init+0x84>)
    3bb0:	6065      	str	r5, [r4, #4]
    3bb2:	f000 f9c3 	bl	3f3c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3bb6:	2000      	movs	r0, #0
    3bb8:	7060      	strb	r0, [r4, #1]
    3bba:	70a0      	strb	r0, [r4, #2]
    3bbc:	70e0      	strb	r0, [r4, #3]
    3bbe:	4601      	mov	r1, r0
    3bc0:	2220      	movs	r2, #32
    3bc2:	4668      	mov	r0, sp
    3bc4:	f004 f90d 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3bc8:	2220      	movs	r2, #32
    3bca:	4910      	ldr	r1, [pc, #64]	; (3c0c <sdc_init+0x88>)
    3bcc:	4668      	mov	r0, sp
    3bce:	f004 f88e 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3bd2:	2220      	movs	r2, #32
    3bd4:	4669      	mov	r1, sp
    3bd6:	480e      	ldr	r0, [pc, #56]	; (3c10 <sdc_init+0x8c>)
    3bd8:	f004 f889 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3bdc:	f3ef 8410 	mrs	r4, PRIMASK
    3be0:	b672      	cpsid	i
    3be2:	f06f 000c 	mvn.w	r0, #12
    3be6:	f000 fcd5 	bl	4594 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3bea:	480a      	ldr	r0, [pc, #40]	; (3c14 <sdc_init+0x90>)
    3bec:	f000 fdac 	bl	4748 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3bf0:	b118      	cbz	r0, 3bfa <sdc_init+0x76>
    3bf2:	21ab      	movs	r1, #171	; 0xab
    3bf4:	2003      	movs	r0, #3
    3bf6:	f000 f80f 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3bfa:	b904      	cbnz	r4, 3bfe <sdc_init+0x7a>
    3bfc:	b662      	cpsie	i
    3bfe:	2000      	movs	r0, #0
    3c00:	e7cf      	b.n	3ba2 <sdc_init+0x1e>
    3c02:	0000      	.short	0x0000
    3c04:	20000094 	.word	0x20000094
    3c08:	000039f5 	.word	0x000039f5
    3c0c:	00003ca4 	.word	0x00003ca4
    3c10:	20000aa4 	.word	0x20000aa4
    3c14:	00003d3d 	.word	0x00003d3d

00003c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3c18:	b50e      	push	{r1, r2, r3, lr}
    3c1a:	b672      	cpsid	i
    3c1c:	4a15      	ldr	r2, [pc, #84]	; (3c74 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3c1e:	6855      	ldr	r5, [r2, #4]
    3c20:	b1dd      	cbz	r5, 3c5a <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    3c22:	2200      	movs	r2, #0
    3c24:	4603      	mov	r3, r0
    3c26:	466e      	mov	r6, sp
    3c28:	240a      	movs	r4, #10
    3c2a:	e003      	b.n	3c34 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3c2c:	fbb0 f0f4 	udiv	r0, r0, r4
    3c30:	1c52      	adds	r2, r2, #1
    3c32:	b2d2      	uxtb	r2, r2
    3c34:	2800      	cmp	r0, #0
    3c36:	d1f9      	bne.n	3c2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3c38:	54b0      	strb	r0, [r6, r2]
    3c3a:	e00a      	b.n	3c52 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    3c3c:	b2d8      	uxtb	r0, r3
    3c3e:	fbb0 f7f4 	udiv	r7, r0, r4
    3c42:	fbb3 f3f4 	udiv	r3, r3, r4
    3c46:	fb04 0017 	mls	r0, r4, r7, r0
    3c4a:	1e52      	subs	r2, r2, #1
    3c4c:	b2d2      	uxtb	r2, r2
    3c4e:	3030      	adds	r0, #48	; 0x30
    3c50:	54b0      	strb	r0, [r6, r2]
    3c52:	2a00      	cmp	r2, #0
    3c54:	d1f2      	bne.n	3c3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3c56:	4630      	mov	r0, r6
    3c58:	47a8      	blx	r5
    3c5a:	f3bf 8f4f 	dsb	sy
    3c5e:	4806      	ldr	r0, [pc, #24]	; (3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3c60:	6801      	ldr	r1, [r0, #0]
    3c62:	4a06      	ldr	r2, [pc, #24]	; (3c7c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3c64:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3c68:	4311      	orrs	r1, r2
    3c6a:	6001      	str	r1, [r0, #0]
    3c6c:	f3bf 8f4f 	dsb	sy
    3c70:	bf00      	nop
    3c72:	e7fd      	b.n	3c70 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    3c74:	20000094 	.word	0x20000094
    3c78:	e000ed0c 	.word	0xe000ed0c
    3c7c:	05fa0004 	.word	0x05fa0004

00003c80 <sdc_support_adv>:
    3c80:	4806      	ldr	r0, [pc, #24]	; (3c9c <sdc_support_adv+0x1c>)
    3c82:	b510      	push	{r4, lr}
    3c84:	7881      	ldrb	r1, [r0, #2]
    3c86:	7840      	ldrb	r0, [r0, #1]
    3c88:	4301      	orrs	r1, r0
    3c8a:	d002      	beq.n	3c92 <sdc_support_adv+0x12>
    3c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3c90:	bd10      	pop	{r4, pc}
    3c92:	f002 fc99 	bl	65c8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    3c96:	2000      	movs	r0, #0
    3c98:	bd10      	pop	{r4, pc}
    3c9a:	0000      	.short	0x0000
    3c9c:	20000094 	.word	0x20000094
    3ca0:	00000001 	.word	0x00000001
    3ca4:	00010101 	.word	0x00010101
    3ca8:	031b1b00 	.word	0x031b1b00
    3cac:	00000002 	.word	0x00000002
    3cb0:	00001d4c 	.word	0x00001d4c
    3cb4:	001f0003 	.word	0x001f0003
	...
    3cc4:	2a41906d 	.word	0x2a41906d
    3cc8:	17ade838 	.word	0x17ade838
    3ccc:	3803a529 	.word	0x3803a529
    3cd0:	85d72739 	.word	0x85d72739
    3cd4:	e1d8851f 	.word	0xe1d8851f

00003cd8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3cd8:	4a05      	ldr	r2, [pc, #20]	; (3cf0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3cda:	b510      	push	{r4, lr}
    3cdc:	6852      	ldr	r2, [r2, #4]
    3cde:	b112      	cbz	r2, 3ce6 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ce4:	4710      	bx	r2
    3ce6:	2192      	movs	r1, #146	; 0x92
    3ce8:	2004      	movs	r0, #4
    3cea:	f7ff ff95 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cee:	0000      	.short	0x0000
    3cf0:	20000ac4 	.word	0x20000ac4

00003cf4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3cf4:	4a05      	ldr	r2, [pc, #20]	; (3d0c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3cf6:	b510      	push	{r4, lr}
    3cf8:	6892      	ldr	r2, [r2, #8]
    3cfa:	b112      	cbz	r2, 3d02 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3d00:	4710      	bx	r2
    3d02:	2198      	movs	r1, #152	; 0x98
    3d04:	2004      	movs	r0, #4
    3d06:	f7ff ff87 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d0a:	0000      	.short	0x0000
    3d0c:	20000ac4 	.word	0x20000ac4

00003d10 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3d10:	4805      	ldr	r0, [pc, #20]	; (3d28 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3d12:	6801      	ldr	r1, [r0, #0]
    3d14:	b129      	cbz	r1, 3d22 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3d16:	6841      	ldr	r1, [r0, #4]
    3d18:	b119      	cbz	r1, 3d22 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3d1a:	6880      	ldr	r0, [r0, #8]
    3d1c:	b108      	cbz	r0, 3d22 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3d1e:	2001      	movs	r0, #1
    3d20:	4770      	bx	lr
    3d22:	2000      	movs	r0, #0
    3d24:	4770      	bx	lr
    3d26:	0000      	.short	0x0000
    3d28:	20000ac4 	.word	0x20000ac4

00003d2c <sdc_rand_source_register>:
    3d2c:	4902      	ldr	r1, [pc, #8]	; (3d38 <sdc_rand_source_register+0xc>)
    3d2e:	c80d      	ldmia	r0, {r0, r2, r3}
    3d30:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3d34:	2000      	movs	r0, #0
    3d36:	4770      	bx	lr
    3d38:	20000ac4 	.word	0x20000ac4

00003d3c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d3e:	4c12      	ldr	r4, [pc, #72]	; (3d88 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3d40:	2600      	movs	r6, #0
    3d42:	6825      	ldr	r5, [r4, #0]
    3d44:	e011      	b.n	3d6a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3d46:	9800      	ldr	r0, [sp, #0]
    3d48:	2802      	cmp	r0, #2
    3d4a:	d002      	beq.n	3d52 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3d4c:	2803      	cmp	r0, #3
    3d4e:	d10c      	bne.n	3d6a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3d50:	e006      	b.n	3d60 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3d52:	6820      	ldr	r0, [r4, #0]
    3d54:	b110      	cbz	r0, 3d5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3d56:	2000      	movs	r0, #0
    3d58:	6026      	str	r6, [r4, #0]
    3d5a:	e005      	b.n	3d68 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3d5c:	2128      	movs	r1, #40	; 0x28
    3d5e:	e00c      	b.n	3d7a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3d60:	6820      	ldr	r0, [r4, #0]
    3d62:	b168      	cbz	r0, 3d80 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3d64:	2001      	movs	r0, #1
    3d66:	6026      	str	r6, [r4, #0]
    3d68:	47a8      	blx	r5
    3d6a:	4668      	mov	r0, sp
    3d6c:	f000 fcb2 	bl	46d4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3d70:	2800      	cmp	r0, #0
    3d72:	d0e8      	beq.n	3d46 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3d74:	2805      	cmp	r0, #5
    3d76:	d005      	beq.n	3d84 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3d78:	2135      	movs	r1, #53	; 0x35
    3d7a:	2004      	movs	r0, #4
    3d7c:	f7ff ff4c 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d80:	212d      	movs	r1, #45	; 0x2d
    3d82:	e7fa      	b.n	3d7a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d86:	0000      	.short	0x0000
    3d88:	2000009c 	.word	0x2000009c

00003d8c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    3d8c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3d90:	4c29      	ldr	r4, [pc, #164]	; (3e38 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    3d92:	4605      	mov	r5, r0
    3d94:	1d00      	adds	r0, r0, #4
    3d96:	f504 7782 	add.w	r7, r4, #260	; 0x104
    3d9a:	60a0      	str	r0, [r4, #8]
    3d9c:	7838      	ldrb	r0, [r7, #0]
    3d9e:	b158      	cbz	r0, 3db8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
    3da0:	78ba      	ldrb	r2, [r7, #2]
    3da2:	463c      	mov	r4, r7
    3da4:	1c79      	adds	r1, r7, #1
    3da6:	4628      	mov	r0, r5
    3da8:	1c92      	adds	r2, r2, #2
    3daa:	f003 ffa0 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3dae:	2000      	movs	r0, #0
    3db0:	7020      	strb	r0, [r4, #0]
    3db2:	2004      	movs	r0, #4
    3db4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    3db8:	481f      	ldr	r0, [pc, #124]	; (3e38 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    3dba:	f000 ffd7 	bl	4d6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3dbe:	4606      	mov	r6, r0
    3dc0:	2802      	cmp	r0, #2
    3dc2:	d002      	beq.n	3dca <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x3e>
    3dc4:	2e04      	cmp	r6, #4
    3dc6:	d005      	beq.n	3dd4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x48>
    3dc8:	e026      	b.n	3e18 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
    3dca:	491b      	ldr	r1, [pc, #108]	; (3e38 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    3dcc:	4628      	mov	r0, r5
    3dce:	f004 f908 	bl	7fe2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    3dd2:	e021      	b.n	3e18 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
    3dd4:	7820      	ldrb	r0, [r4, #0]
    3dd6:	2811      	cmp	r0, #17
    3dd8:	d104      	bne.n	3de4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x58>
    3dda:	210a      	movs	r1, #10
    3ddc:	203e      	movs	r0, #62	; 0x3e
    3dde:	f004 f8ec 	bl	7fba <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xbe>
    3de2:	b118      	cbz	r0, 3dec <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x60>
    3de4:	7820      	ldrb	r0, [r4, #0]
    3de6:	2808      	cmp	r0, #8
    3de8:	d005      	beq.n	3df6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6a>
    3dea:	e009      	b.n	3e00 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x74>
    3dec:	4912      	ldr	r1, [pc, #72]	; (3e38 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    3dee:	4628      	mov	r0, r5
    3df0:	f004 faef 	bl	83d2 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3df4:	e00a      	b.n	3e0c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x80>
    3df6:	2105      	movs	r1, #5
    3df8:	203e      	movs	r0, #62	; 0x3e
    3dfa:	f004 f8de 	bl	7fba <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xbe>
    3dfe:	b168      	cbz	r0, 3e1c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
    3e00:	490d      	ldr	r1, [pc, #52]	; (3e38 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    3e02:	4628      	mov	r0, r5
    3e04:	f004 f91b 	bl	803e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3e08:	2800      	cmp	r0, #0
    3e0a:	d0c7      	beq.n	3d9c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    3e0c:	78a9      	ldrb	r1, [r5, #2]
    3e0e:	7828      	ldrb	r0, [r5, #0]
    3e10:	f004 f8d3 	bl	7fba <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xbe>
    3e14:	2800      	cmp	r0, #0
    3e16:	d0c1      	beq.n	3d9c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    3e18:	4630      	mov	r0, r6
    3e1a:	e7cb      	b.n	3db4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    3e1c:	88a0      	ldrh	r0, [r4, #4]
    3e1e:	f8ad 0000 	strh.w	r0, [sp]
    3e22:	a901      	add	r1, sp, #4
    3e24:	4668      	mov	r0, sp
    3e26:	f004 fbed 	bl	8604 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    3e2a:	2800      	cmp	r0, #0
    3e2c:	d0b6      	beq.n	3d9c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    3e2e:	21aa      	movs	r1, #170	; 0xaa
    3e30:	2008      	movs	r0, #8
    3e32:	f7ff fef1 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e36:	0000      	.short	0x0000
    3e38:	20000ad0 	.word	0x20000ad0
    3e3c:	b570      	push	{r4, r5, r6, lr}
    3e3e:	780a      	ldrb	r2, [r1, #0]
    3e40:	7082      	strb	r2, [r0, #2]
    3e42:	b33a      	cbz	r2, 3e94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x108>
    3e44:	2a01      	cmp	r2, #1
    3e46:	d825      	bhi.n	3e94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x108>
    3e48:	2313      	movs	r3, #19
    3e4a:	7003      	strb	r3, [r0, #0]
    3e4c:	2300      	movs	r3, #0
    3e4e:	e00a      	b.n	3e66 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xda>
    3e50:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3e54:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3e58:	78a6      	ldrb	r6, [r4, #2]
    3e5a:	70ee      	strb	r6, [r5, #3]
    3e5c:	8864      	ldrh	r4, [r4, #2]
    3e5e:	0a24      	lsrs	r4, r4, #8
    3e60:	1c5b      	adds	r3, r3, #1
    3e62:	712c      	strb	r4, [r5, #4]
    3e64:	b2db      	uxtb	r3, r3
    3e66:	4293      	cmp	r3, r2
    3e68:	d3f2      	bcc.n	3e50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc4>
    3e6a:	2300      	movs	r3, #0
    3e6c:	e00b      	b.n	3e86 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xfa>
    3e6e:	bf00      	nop
    3e70:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    3e74:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    3e78:	792e      	ldrb	r6, [r5, #4]
    3e7a:	7166      	strb	r6, [r4, #5]
    3e7c:	88ad      	ldrh	r5, [r5, #4]
    3e7e:	0a2d      	lsrs	r5, r5, #8
    3e80:	1c5b      	adds	r3, r3, #1
    3e82:	71a5      	strb	r5, [r4, #6]
    3e84:	b2db      	uxtb	r3, r3
    3e86:	4293      	cmp	r3, r2
    3e88:	d3f2      	bcc.n	3e70 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe4>
    3e8a:	2101      	movs	r1, #1
    3e8c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3e90:	b2c0      	uxtb	r0, r0
    3e92:	bd70      	pop	{r4, r5, r6, pc}
    3e94:	2000      	movs	r0, #0
    3e96:	bd70      	pop	{r4, r5, r6, pc}

00003e98 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    3e98:	2840      	cmp	r0, #64	; 0x40
    3e9a:	d203      	bcs.n	3ea4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    3e9c:	1e40      	subs	r0, r0, #1
    3e9e:	b2c1      	uxtb	r1, r0
    3ea0:	4805      	ldr	r0, [pc, #20]	; (3eb8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    3ea2:	e005      	b.n	3eb0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    3ea4:	28ff      	cmp	r0, #255	; 0xff
    3ea6:	d005      	beq.n	3eb4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    3ea8:	3840      	subs	r0, #64	; 0x40
    3eaa:	b2c1      	uxtb	r1, r0
    3eac:	4802      	ldr	r0, [pc, #8]	; (3eb8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    3eae:	3008      	adds	r0, #8
    3eb0:	f004 bab9 	b.w	8426 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    3eb4:	2001      	movs	r0, #1
    3eb6:	4770      	bx	lr
    3eb8:	200000a0 	.word	0x200000a0

00003ebc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    3ebc:	1e40      	subs	r0, r0, #1
    3ebe:	b2c1      	uxtb	r1, r0
    3ec0:	4801      	ldr	r0, [pc, #4]	; (3ec8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    3ec2:	f004 bab0 	b.w	8426 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    3ec6:	0000      	.short	0x0000
    3ec8:	200000b0 	.word	0x200000b0

00003ecc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    3ecc:	4902      	ldr	r1, [pc, #8]	; (3ed8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    3ece:	6802      	ldr	r2, [r0, #0]
    3ed0:	610a      	str	r2, [r1, #16]
    3ed2:	6840      	ldr	r0, [r0, #4]
    3ed4:	6148      	str	r0, [r1, #20]
    3ed6:	4770      	bx	lr
    3ed8:	200000a0 	.word	0x200000a0

00003edc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    3edc:	4905      	ldr	r1, [pc, #20]	; (3ef4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    3ede:	6802      	ldr	r2, [r0, #0]
    3ee0:	600a      	str	r2, [r1, #0]
    3ee2:	6840      	ldr	r0, [r0, #4]
    3ee4:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    3ee8:	600a      	str	r2, [r1, #0]
    3eea:	4a03      	ldr	r2, [pc, #12]	; (3ef8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    3eec:	4310      	orrs	r0, r2
    3eee:	6048      	str	r0, [r1, #4]
    3ef0:	4770      	bx	lr
    3ef2:	0000      	.short	0x0000
    3ef4:	200000a0 	.word	0x200000a0
    3ef8:	024007f8 	.word	0x024007f8

00003efc <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    3efc:	4807      	ldr	r0, [pc, #28]	; (3f1c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    3efe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3f02:	2200      	movs	r2, #0
    3f04:	6001      	str	r1, [r0, #0]
    3f06:	0cc9      	lsrs	r1, r1, #19
    3f08:	6041      	str	r1, [r0, #4]
    3f0a:	f100 0108 	add.w	r1, r0, #8
    3f0e:	201f      	movs	r0, #31
    3f10:	600a      	str	r2, [r1, #0]
    3f12:	604a      	str	r2, [r1, #4]
    3f14:	3108      	adds	r1, #8
    3f16:	e9c1 0200 	strd	r0, r2, [r1]
    3f1a:	4770      	bx	lr
    3f1c:	200000a0 	.word	0x200000a0

00003f20 <sdc_hci_cmd_cb_reset>:
    3f20:	b510      	push	{r4, lr}
    3f22:	f7ff ffeb 	bl	3efc <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    3f26:	f005 ff85 	bl	9e34 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    3f2a:	4604      	mov	r4, r0
    3f2c:	4802      	ldr	r0, [pc, #8]	; (3f38 <sdc_hci_cmd_cb_reset+0x18>)
    3f2e:	6800      	ldr	r0, [r0, #0]
    3f30:	b100      	cbz	r0, 3f34 <sdc_hci_cmd_cb_reset+0x14>
    3f32:	4780      	blx	r0
    3f34:	4620      	mov	r0, r4
    3f36:	bd10      	pop	{r4, pc}
    3f38:	200000b8 	.word	0x200000b8

00003f3c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    3f3c:	4901      	ldr	r1, [pc, #4]	; (3f44 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    3f3e:	6008      	str	r0, [r1, #0]
    3f40:	4770      	bx	lr
    3f42:	0000      	.short	0x0000
    3f44:	200000b8 	.word	0x200000b8

00003f48 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    3f48:	2102      	movs	r1, #2
    3f4a:	8001      	strh	r1, [r0, #0]
    3f4c:	8041      	strh	r1, [r0, #2]
    3f4e:	2100      	movs	r1, #0
    3f50:	7101      	strb	r1, [r0, #4]
    3f52:	216d      	movs	r1, #109	; 0x6d
    3f54:	7141      	strb	r1, [r0, #5]
    3f56:	f244 1190 	movw	r1, #16784	; 0x4190
    3f5a:	80c1      	strh	r1, [r0, #6]
    3f5c:	4901      	ldr	r1, [pc, #4]	; (3f64 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    3f5e:	6081      	str	r1, [r0, #8]
    3f60:	2000      	movs	r0, #0
    3f62:	4770      	bx	lr
    3f64:	ade8382a 	.word	0xade8382a

00003f68 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    3f68:	b510      	push	{r4, lr}
    3f6a:	2802      	cmp	r0, #2
    3f6c:	d304      	bcc.n	3f78 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    3f6e:	f44f 7101 	mov.w	r1, #516	; 0x204
    3f72:	2017      	movs	r0, #23
    3f74:	f7ff fe50 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f78:	4901      	ldr	r1, [pc, #4]	; (3f80 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    3f7a:	5c08      	ldrb	r0, [r1, r0]
    3f7c:	bd10      	pop	{r4, pc}
    3f7e:	0000      	.short	0x0000
    3f80:	20000cd8 	.word	0x20000cd8

00003f84 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    3f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f86:	0005      	movs	r5, r0
    3f88:	9500      	str	r5, [sp, #0]
    3f8a:	d00d      	beq.n	3fa8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x24>
    3f8c:	2600      	movs	r6, #0
    3f8e:	7808      	ldrb	r0, [r1, #0]
    3f90:	7849      	ldrb	r1, [r1, #1]
    3f92:	4604      	mov	r4, r0
    3f94:	42a1      	cmp	r1, r4
    3f96:	d900      	bls.n	3f9a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    3f98:	460c      	mov	r4, r1
    3f9a:	07aa      	lsls	r2, r5, #30
    3f9c:	d006      	beq.n	3fac <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    3f9e:	f240 11cb 	movw	r1, #459	; 0x1cb
    3fa2:	2017      	movs	r0, #23
    3fa4:	f7ff fe38 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3fa8:	2601      	movs	r6, #1
    3faa:	e7f0      	b.n	3f8e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    3fac:	4f12      	ldr	r7, [pc, #72]	; (3ff8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    3fae:	7038      	strb	r0, [r7, #0]
    3fb0:	7079      	strb	r1, [r7, #1]
    3fb2:	4631      	mov	r1, r6
    3fb4:	4668      	mov	r0, sp
    3fb6:	f000 f8d3 	bl	4160 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    3fba:	2100      	movs	r1, #0
    3fbc:	460b      	mov	r3, r1
    3fbe:	9800      	ldr	r0, [sp, #0]
    3fc0:	1cc0      	adds	r0, r0, #3
    3fc2:	f020 0003 	bic.w	r0, r0, #3
    3fc6:	9000      	str	r0, [sp, #0]
    3fc8:	b966      	cbnz	r6, 3fe4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    3fca:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    3fce:	60d0      	str	r0, [r2, #12]
    3fd0:	2000      	movs	r0, #0
    3fd2:	e005      	b.n	3fe0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>
    3fd4:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    3fd8:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    3fdc:	1c40      	adds	r0, r0, #1
    3fde:	b2c0      	uxtb	r0, r0
    3fe0:	42a0      	cmp	r0, r4
    3fe2:	d3f7      	bcc.n	3fd4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    3fe4:	9800      	ldr	r0, [sp, #0]
    3fe6:	1c49      	adds	r1, r1, #1
    3fe8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    3fec:	b2c9      	uxtb	r1, r1
    3fee:	9000      	str	r0, [sp, #0]
    3ff0:	2902      	cmp	r1, #2
    3ff2:	d3e4      	bcc.n	3fbe <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    3ff4:	1b40      	subs	r0, r0, r5
    3ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ff8:	20000cd8 	.word	0x20000cd8

00003ffc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    3ffc:	b570      	push	{r4, r5, r6, lr}
    3ffe:	4604      	mov	r4, r0
    4000:	7985      	ldrb	r5, [r0, #6]
    4002:	f000 f8e9 	bl	41d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    4006:	4a0c      	ldr	r2, [pc, #48]	; (4038 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
    4008:	79e1      	ldrb	r1, [r4, #7]
    400a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    400e:	e00e      	b.n	402e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
    4010:	68d3      	ldr	r3, [r2, #12]
    4012:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4016:	b143      	cbz	r3, 402a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
    4018:	1c48      	adds	r0, r1, #1
    401a:	71e0      	strb	r0, [r4, #7]
    401c:	80a1      	strh	r1, [r4, #4]
    401e:	68d0      	ldr	r0, [r2, #12]
    4020:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4024:	6020      	str	r0, [r4, #0]
    4026:	2000      	movs	r0, #0
    4028:	bd70      	pop	{r4, r5, r6, pc}
    402a:	1c49      	adds	r1, r1, #1
    402c:	b2c9      	uxtb	r1, r1
    402e:	4281      	cmp	r1, r0
    4030:	d3ee      	bcc.n	4010 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
    4032:	71e1      	strb	r1, [r4, #7]
    4034:	2005      	movs	r0, #5
    4036:	bd70      	pop	{r4, r5, r6, pc}
    4038:	20000cd8 	.word	0x20000cd8

0000403c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    403c:	b4f0      	push	{r4, r5, r6, r7}
    403e:	b121      	cbz	r1, 404a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4040:	2901      	cmp	r1, #1
    4042:	d002      	beq.n	404a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4044:	bcf0      	pop	{r4, r5, r6, r7}
    4046:	2000      	movs	r0, #0
    4048:	4770      	bx	lr
    404a:	4a0f      	ldr	r2, [pc, #60]	; (4088 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    404c:	2500      	movs	r5, #0
    404e:	462b      	mov	r3, r5
    4050:	f64f 74ff 	movw	r4, #65535	; 0xffff
    4054:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    4058:	5c57      	ldrb	r7, [r2, r1]
    405a:	e00a      	b.n	4072 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    405c:	195a      	adds	r2, r3, r5
    405e:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    4062:	b292      	uxth	r2, r2
    4064:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
    4068:	f1bc 0f00 	cmp.w	ip, #0
    406c:	d004      	beq.n	4078 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    406e:	1c5b      	adds	r3, r3, #1
    4070:	b29b      	uxth	r3, r3
    4072:	429f      	cmp	r7, r3
    4074:	d8f2      	bhi.n	405c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    4076:	4622      	mov	r2, r4
    4078:	8002      	strh	r2, [r0, #0]
    407a:	4610      	mov	r0, r2
    407c:	42a2      	cmp	r2, r4
    407e:	d0e1      	beq.n	4044 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8>
    4080:	bcf0      	pop	{r4, r5, r6, r7}
    4082:	f000 b835 	b.w	40f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4086:	0000      	.short	0x0000
    4088:	20000cd8 	.word	0x20000cd8

0000408c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    408c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4090:	4606      	mov	r6, r0
    4092:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4096:	460c      	mov	r4, r1
    4098:	f243 0702 	movw	r7, #12290	; 0x3002
    409c:	38ff      	subs	r0, #255	; 0xff
    409e:	d020      	beq.n	40e2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    40a0:	2c02      	cmp	r4, #2
    40a2:	d302      	bcc.n	40aa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    40a4:	2007      	movs	r0, #7
    40a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40aa:	4630      	mov	r0, r6
    40ac:	f000 f848 	bl	4140 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    40b0:	0005      	movs	r5, r0
    40b2:	d016      	beq.n	40e2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    40b4:	480c      	ldr	r0, [pc, #48]	; (40e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    40b6:	4629      	mov	r1, r5
    40b8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    40bc:	4630      	mov	r0, r6
    40be:	4790      	blx	r2
    40c0:	480a      	ldr	r0, [pc, #40]	; (40ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    40c2:	2100      	movs	r1, #0
    40c4:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    40c8:	68f8      	ldr	r0, [r7, #12]
    40ca:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    40ce:	4620      	mov	r0, r4
    40d0:	f000 f878 	bl	41c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    40d4:	4602      	mov	r2, r0
    40d6:	4629      	mov	r1, r5
    40d8:	6878      	ldr	r0, [r7, #4]
    40da:	f004 fb88 	bl	87ee <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    40de:	2000      	movs	r0, #0
    40e0:	e7e1      	b.n	40a6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    40e2:	4638      	mov	r0, r7
    40e4:	e7df      	b.n	40a6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    40e6:	0000      	.short	0x0000
    40e8:	000041f0 	.word	0x000041f0
    40ec:	20000cd8 	.word	0x20000cd8
    40f0:	b570      	push	{r4, r5, r6, lr}
    40f2:	460e      	mov	r6, r1
    40f4:	4605      	mov	r5, r0
    40f6:	f004 fbb4 	bl	8862 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    40fa:	b158      	cbz	r0, 4114 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    40fc:	480f      	ldr	r0, [pc, #60]	; (413c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb0>)
    40fe:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    4102:	68e0      	ldr	r0, [r4, #12]
    4104:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4108:	b138      	cbz	r0, 411a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    410a:	f240 118b 	movw	r1, #395	; 0x18b
    410e:	2017      	movs	r0, #23
    4110:	f7ff fd82 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4114:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    4118:	e7f9      	b.n	410e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x82>
    411a:	6860      	ldr	r0, [r4, #4]
    411c:	2800      	cmp	r0, #0
    411e:	d00b      	beq.n	4138 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    4120:	4630      	mov	r0, r6
    4122:	f000 f84f 	bl	41c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4126:	4601      	mov	r1, r0
    4128:	6860      	ldr	r0, [r4, #4]
    412a:	f004 fb08 	bl	873e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    412e:	2800      	cmp	r0, #0
    4130:	d002      	beq.n	4138 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    4132:	68e1      	ldr	r1, [r4, #12]
    4134:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
    4138:	bd70      	pop	{r4, r5, r6, pc}
    413a:	0000      	.short	0x0000
    413c:	20000cd8 	.word	0x20000cd8
    4140:	b570      	push	{r4, r5, r6, lr}
    4142:	460c      	mov	r4, r1
    4144:	4605      	mov	r5, r0
    4146:	f004 fb8c 	bl	8862 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    414a:	2800      	cmp	r0, #0
    414c:	d005      	beq.n	415a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xce>
    414e:	4803      	ldr	r0, [pc, #12]	; (415c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4150:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4154:	68c0      	ldr	r0, [r0, #12]
    4156:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    415a:	bd70      	pop	{r4, r5, r6, pc}
    415c:	20000cd8 	.word	0x20000cd8
    4160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4164:	4e16      	ldr	r6, [pc, #88]	; (41c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>)
    4166:	4688      	mov	r8, r1
    4168:	4605      	mov	r5, r0
    416a:	2400      	movs	r4, #0
    416c:	6828      	ldr	r0, [r5, #0]
    416e:	1cc0      	adds	r0, r0, #3
    4170:	f020 0003 	bic.w	r0, r0, #3
    4174:	6028      	str	r0, [r5, #0]
    4176:	4620      	mov	r0, r4
    4178:	f000 f824 	bl	41c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    417c:	5d31      	ldrb	r1, [r6, r4]
    417e:	4348      	muls	r0, r1
    4180:	f1b8 0f00 	cmp.w	r8, #0
    4184:	d001      	beq.n	418a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfe>
    4186:	2200      	movs	r2, #0
    4188:	e000      	b.n	418c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    418a:	682a      	ldr	r2, [r5, #0]
    418c:	4601      	mov	r1, r0
    418e:	9200      	str	r2, [sp, #0]
    4190:	b132      	cbz	r2, 41a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x114>
    4192:	2700      	movs	r7, #0
    4194:	ea4f 000d 	mov.w	r0, sp
    4198:	f004 fb02 	bl	87a0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    419c:	b11f      	cbz	r7, 41a6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11a>
    419e:	e006      	b.n	41ae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    41a0:	2701      	movs	r7, #1
    41a2:	2000      	movs	r0, #0
    41a4:	e7f8      	b.n	4198 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    41a6:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    41aa:	9a00      	ldr	r2, [sp, #0]
    41ac:	604a      	str	r2, [r1, #4]
    41ae:	6829      	ldr	r1, [r5, #0]
    41b0:	1c64      	adds	r4, r4, #1
    41b2:	4408      	add	r0, r1
    41b4:	b2e4      	uxtb	r4, r4
    41b6:	6028      	str	r0, [r5, #0]
    41b8:	2c02      	cmp	r4, #2
    41ba:	d3d7      	bcc.n	416c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    41bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    41c0:	20000cd8 	.word	0x20000cd8
    41c4:	4903      	ldr	r1, [pc, #12]	; (41d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>)
    41c6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    41ca:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    41ce:	1cc0      	adds	r0, r0, #3
    41d0:	4008      	ands	r0, r1
    41d2:	4770      	bx	lr
    41d4:	000041ec 	.word	0x000041ec
    41d8:	4903      	ldr	r1, [pc, #12]	; (41e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>)
    41da:	7808      	ldrb	r0, [r1, #0]
    41dc:	7849      	ldrb	r1, [r1, #1]
    41de:	4288      	cmp	r0, r1
    41e0:	d200      	bcs.n	41e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>
    41e2:	4608      	mov	r0, r1
    41e4:	4770      	bx	lr
    41e6:	0000      	.short	0x0000
    41e8:	20000cd8 	.word	0x20000cd8
    41ec:	011802e8 	.word	0x011802e8
    41f0:	00009829 	.word	0x00009829
    41f4:	0000908d 	.word	0x0000908d

000041f8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    41f8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41fc:	4c24      	ldr	r4, [pc, #144]	; (4290 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    41fe:	4606      	mov	r6, r0
    4200:	b081      	sub	sp, #4
    4202:	6820      	ldr	r0, [r4, #0]
    4204:	469a      	mov	sl, r3
    4206:	4693      	mov	fp, r2
    4208:	b158      	cbz	r0, 4222 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    420a:	7a01      	ldrb	r1, [r0, #8]
    420c:	42b1      	cmp	r1, r6
    420e:	d903      	bls.n	4218 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4210:	6840      	ldr	r0, [r0, #4]
    4212:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    4216:	b140      	cbz	r0, 422a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4218:	f243 0002 	movw	r0, #12290	; 0x3002
    421c:	b005      	add	sp, #20
    421e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4222:	21a5      	movs	r1, #165	; 0xa5
    4224:	2018      	movs	r0, #24
    4226:	f7ff fcf7 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    422a:	4619      	mov	r1, r3
    422c:	9802      	ldr	r0, [sp, #8]
    422e:	f004 fb3b 	bl	88a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    4232:	4680      	mov	r8, r0
    4234:	4658      	mov	r0, fp
    4236:	990e      	ldr	r1, [sp, #56]	; 0x38
    4238:	f004 fb2c 	bl	8894 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    423c:	4605      	mov	r5, r0
    423e:	eb08 0005 	add.w	r0, r8, r5
    4242:	1d00      	adds	r0, r0, #4
    4244:	b287      	uxth	r7, r0
    4246:	6820      	ldr	r0, [r4, #0]
    4248:	46a1      	mov	r9, r4
    424a:	4639      	mov	r1, r7
    424c:	6800      	ldr	r0, [r0, #0]
    424e:	f004 fa76 	bl	873e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4252:	0004      	movs	r4, r0
    4254:	d01a      	beq.n	428c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    4256:	8067      	strh	r7, [r4, #2]
    4258:	8025      	strh	r5, [r4, #0]
    425a:	4629      	mov	r1, r5
    425c:	1d20      	adds	r0, r4, #4
    425e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4260:	4607      	mov	r7, r0
    4262:	465a      	mov	r2, fp
    4264:	2309      	movs	r3, #9
    4266:	9500      	str	r5, [sp, #0]
    4268:	f004 fa16 	bl	8698 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    426c:	8820      	ldrh	r0, [r4, #0]
    426e:	4641      	mov	r1, r8
    4270:	4438      	add	r0, r7
    4272:	230a      	movs	r3, #10
    4274:	9a02      	ldr	r2, [sp, #8]
    4276:	f8cd a000 	str.w	sl, [sp]
    427a:	f004 fa0d 	bl	8698 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    427e:	f8d9 0000 	ldr.w	r0, [r9]
    4282:	6840      	ldr	r0, [r0, #4]
    4284:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    4288:	2000      	movs	r0, #0
    428a:	e7c7      	b.n	421c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    428c:	2004      	movs	r0, #4
    428e:	e7c5      	b.n	421c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4290:	200000bc 	.word	0x200000bc

00004294 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4294:	b570      	push	{r4, r5, r6, lr}
    4296:	4c14      	ldr	r4, [pc, #80]	; (42e8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4298:	6823      	ldr	r3, [r4, #0]
    429a:	b18b      	cbz	r3, 42c0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    429c:	7a19      	ldrb	r1, [r3, #8]
    429e:	4281      	cmp	r1, r0
    42a0:	d912      	bls.n	42c8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    42a2:	685a      	ldr	r2, [r3, #4]
    42a4:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    42a8:	b171      	cbz	r1, 42c8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    42aa:	2500      	movs	r5, #0
    42ac:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    42b0:	884a      	ldrh	r2, [r1, #2]
    42b2:	6818      	ldr	r0, [r3, #0]
    42b4:	f004 fa9b 	bl	87ee <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    42b8:	6821      	ldr	r1, [r4, #0]
    42ba:	2000      	movs	r0, #0
    42bc:	7a0a      	ldrb	r2, [r1, #8]
    42be:	e00c      	b.n	42da <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    42c0:	21c6      	movs	r1, #198	; 0xc6
    42c2:	2018      	movs	r0, #24
    42c4:	f7ff fca8 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42c8:	f243 0002 	movw	r0, #12290	; 0x3002
    42cc:	bd70      	pop	{r4, r5, r6, pc}
    42ce:	684b      	ldr	r3, [r1, #4]
    42d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    42d4:	b933      	cbnz	r3, 42e4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    42d6:	1c40      	adds	r0, r0, #1
    42d8:	b2c0      	uxtb	r0, r0
    42da:	4282      	cmp	r2, r0
    42dc:	d8f7      	bhi.n	42ce <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    42de:	6808      	ldr	r0, [r1, #0]
    42e0:	f004 fa7a 	bl	87d8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    42e4:	2000      	movs	r0, #0
    42e6:	bd70      	pop	{r4, r5, r6, pc}
    42e8:	200000bc 	.word	0x200000bc

000042ec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    42ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42f0:	460d      	mov	r5, r1
    42f2:	0004      	movs	r4, r0
    42f4:	4690      	mov	r8, r2
    42f6:	f04f 0600 	mov.w	r6, #0
    42fa:	d006      	beq.n	430a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    42fc:	2700      	movs	r7, #0
    42fe:	07a0      	lsls	r0, r4, #30
    4300:	d005      	beq.n	430e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    4302:	2186      	movs	r1, #134	; 0x86
    4304:	2018      	movs	r0, #24
    4306:	f7ff fc87 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    430a:	2701      	movs	r7, #1
    430c:	e7f7      	b.n	42fe <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    430e:	b1cd      	cbz	r5, 4344 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    4310:	4611      	mov	r1, r2
    4312:	2000      	movs	r0, #0
    4314:	f004 fa44 	bl	87a0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4318:	300c      	adds	r0, #12
    431a:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    431e:	b98f      	cbnz	r7, 4344 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    4320:	4f0a      	ldr	r7, [pc, #40]	; (434c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    4322:	f104 000c 	add.w	r0, r4, #12
    4326:	00aa      	lsls	r2, r5, #2
    4328:	603c      	str	r4, [r7, #0]
    432a:	7225      	strb	r5, [r4, #8]
    432c:	6060      	str	r0, [r4, #4]
    432e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4332:	6020      	str	r0, [r4, #0]
    4334:	2100      	movs	r1, #0
    4336:	6860      	ldr	r0, [r4, #4]
    4338:	f003 fd53 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    433c:	4641      	mov	r1, r8
    433e:	6838      	ldr	r0, [r7, #0]
    4340:	f004 fa2e 	bl	87a0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4344:	4630      	mov	r0, r6
    4346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    434a:	0000      	.short	0x0000
    434c:	200000bc 	.word	0x200000bc

00004350 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4350:	4909      	ldr	r1, [pc, #36]	; (4378 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4352:	b510      	push	{r4, lr}
    4354:	4602      	mov	r2, r0
    4356:	6809      	ldr	r1, [r1, #0]
    4358:	2000      	movs	r0, #0
    435a:	b149      	cbz	r1, 4370 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    435c:	7a0b      	ldrb	r3, [r1, #8]
    435e:	4293      	cmp	r3, r2
    4360:	d905      	bls.n	436e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4362:	6849      	ldr	r1, [r1, #4]
    4364:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4368:	2900      	cmp	r1, #0
    436a:	d000      	beq.n	436e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    436c:	1d08      	adds	r0, r1, #4
    436e:	bd10      	pop	{r4, pc}
    4370:	21ec      	movs	r1, #236	; 0xec
    4372:	2018      	movs	r0, #24
    4374:	f7ff fc50 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4378:	200000bc 	.word	0x200000bc

0000437c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    437c:	490a      	ldr	r1, [pc, #40]	; (43a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    437e:	b510      	push	{r4, lr}
    4380:	4602      	mov	r2, r0
    4382:	6809      	ldr	r1, [r1, #0]
    4384:	2000      	movs	r0, #0
    4386:	b159      	cbz	r1, 43a0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4388:	7a0b      	ldrb	r3, [r1, #8]
    438a:	4293      	cmp	r3, r2
    438c:	d907      	bls.n	439e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    438e:	6849      	ldr	r1, [r1, #4]
    4390:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4394:	2900      	cmp	r1, #0
    4396:	d002      	beq.n	439e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4398:	f831 0b04 	ldrh.w	r0, [r1], #4
    439c:	4408      	add	r0, r1
    439e:	bd10      	pop	{r4, pc}
    43a0:	21fa      	movs	r1, #250	; 0xfa
    43a2:	2018      	movs	r0, #24
    43a4:	f7ff fc38 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43a8:	200000bc 	.word	0x200000bc
    43ac:	b570      	push	{r4, r5, r6, lr}
    43ae:	4b1e      	ldr	r3, [pc, #120]	; (4428 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    43b0:	6845      	ldr	r5, [r0, #4]
    43b2:	4604      	mov	r4, r0
    43b4:	2200      	movs	r2, #0
    43b6:	b1a1      	cbz	r1, 43e2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    43b8:	2001      	movs	r0, #1
    43ba:	7060      	strb	r0, [r4, #1]
    43bc:	8858      	ldrh	r0, [r3, #2]
    43be:	0881      	lsrs	r1, r0, #2
    43c0:	f05f 0000 	movs.w	r0, #0
    43c4:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    43c8:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    43cc:	831a      	strh	r2, [r3, #24]
    43ce:	8419      	strh	r1, [r3, #32]
    43d0:	fb00 5301 	mla	r3, r0, r1, r5
    43d4:	6073      	str	r3, [r6, #4]
    43d6:	1823      	adds	r3, r4, r0
    43d8:	1c40      	adds	r0, r0, #1
    43da:	751a      	strb	r2, [r3, #20]
    43dc:	2804      	cmp	r0, #4
    43de:	d3f1      	bcc.n	43c4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    43e0:	bd70      	pop	{r4, r5, r6, pc}
    43e2:	7062      	strb	r2, [r4, #1]
    43e4:	f05f 0000 	movs.w	r0, #0
    43e8:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    43ec:	830a      	strh	r2, [r1, #24]
    43ee:	840a      	strh	r2, [r1, #32]
    43f0:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    43f4:	604a      	str	r2, [r1, #4]
    43f6:	1821      	adds	r1, r4, r0
    43f8:	1c40      	adds	r0, r0, #1
    43fa:	750a      	strb	r2, [r1, #20]
    43fc:	2804      	cmp	r0, #4
    43fe:	d3f3      	bcc.n	43e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    4400:	8858      	ldrh	r0, [r3, #2]
    4402:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    4406:	d201      	bcs.n	440c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    4408:	0846      	lsrs	r6, r0, #1
    440a:	e000      	b.n	440e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    440c:	26ff      	movs	r6, #255	; 0xff
    440e:	f004 fabf 	bl	8990 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    4412:	6065      	str	r5, [r4, #4]
    4414:	8420      	strh	r0, [r4, #32]
    4416:	1829      	adds	r1, r5, r0
    4418:	60a1      	str	r1, [r4, #8]
    441a:	8466      	strh	r6, [r4, #34]	; 0x22
    441c:	60e5      	str	r5, [r4, #12]
    441e:	84a0      	strh	r0, [r4, #36]	; 0x24
    4420:	6121      	str	r1, [r4, #16]
    4422:	84e6      	strh	r6, [r4, #38]	; 0x26
    4424:	bd70      	pop	{r4, r5, r6, pc}
    4426:	0000      	.short	0x0000
    4428:	200000c0 	.word	0x200000c0

0000442c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    442c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4430:	b158      	cbz	r0, 444a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    4432:	2500      	movs	r5, #0
    4434:	4411      	add	r1, r2
    4436:	4e24      	ldr	r6, [pc, #144]	; (44c8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    4438:	b2cc      	uxtb	r4, r1
    443a:	2700      	movs	r7, #0
    443c:	7034      	strb	r4, [r6, #0]
    443e:	0781      	lsls	r1, r0, #30
    4440:	d005      	beq.n	444e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    4442:	214e      	movs	r1, #78	; 0x4e
    4444:	2009      	movs	r0, #9
    4446:	f7ff fbe7 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    444a:	2501      	movs	r5, #1
    444c:	e7f2      	b.n	4434 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    444e:	2b1f      	cmp	r3, #31
    4450:	d804      	bhi.n	445c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    4452:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4456:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    445a:	e009      	b.n	4470 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    445c:	0059      	lsls	r1, r3, #1
    445e:	2bff      	cmp	r3, #255	; 0xff
    4460:	d90c      	bls.n	447c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    4462:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    4466:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    446a:	d200      	bcs.n	446e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    446c:	4611      	mov	r1, r2
    446e:	b289      	uxth	r1, r1
    4470:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    4474:	1cc9      	adds	r1, r1, #3
    4476:	4011      	ands	r1, r2
    4478:	b135      	cbz	r5, 4488 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    447a:	e007      	b.n	448c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    447c:	227c      	movs	r2, #124	; 0x7c
    447e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4482:	d3f4      	bcc.n	446e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4484:	217c      	movs	r1, #124	; 0x7c
    4486:	e7f2      	b.n	446e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4488:	6070      	str	r0, [r6, #4]
    448a:	8071      	strh	r1, [r6, #2]
    448c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    4490:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    4494:	2200      	movs	r2, #0
    4496:	6876      	ldr	r6, [r6, #4]
    4498:	f04f 0c01 	mov.w	ip, #1
    449c:	e00d      	b.n	44ba <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    449e:	b94d      	cbnz	r5, 44b4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    44a0:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    44a4:	eb00 0e03 	add.w	lr, r0, r3
    44a8:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    44ac:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    44b0:	f8c7 e004 	str.w	lr, [r7, #4]
    44b4:	1c52      	adds	r2, r2, #1
    44b6:	440b      	add	r3, r1
    44b8:	b2d2      	uxtb	r2, r2
    44ba:	42a2      	cmp	r2, r4
    44bc:	d3ef      	bcc.n	449e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    44be:	1ddb      	adds	r3, r3, #7
    44c0:	f023 0007 	bic.w	r0, r3, #7
    44c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44c8:	200000c0 	.word	0x200000c0

000044cc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    44cc:	b570      	push	{r4, r5, r6, lr}
    44ce:	4a10      	ldr	r2, [pc, #64]	; (4510 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    44d0:	2000      	movs	r0, #0
    44d2:	6851      	ldr	r1, [r2, #4]
    44d4:	7812      	ldrb	r2, [r2, #0]
    44d6:	e014      	b.n	4502 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    44d8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    44dc:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    44e0:	b16b      	cbz	r3, 44fe <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    44e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    44e6:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    44ea:	d00c      	beq.n	4506 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    44ec:	2500      	movs	r5, #0
    44ee:	70a5      	strb	r5, [r4, #2]
    44f0:	2101      	movs	r1, #1
    44f2:	4620      	mov	r0, r4
    44f4:	f7ff ff5a 	bl	43ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    44f8:	7025      	strb	r5, [r4, #0]
    44fa:	4620      	mov	r0, r4
    44fc:	bd70      	pop	{r4, r5, r6, pc}
    44fe:	1c40      	adds	r0, r0, #1
    4500:	b2c0      	uxtb	r0, r0
    4502:	4290      	cmp	r0, r2
    4504:	d3e8      	bcc.n	44d8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    4506:	21a9      	movs	r1, #169	; 0xa9
    4508:	2009      	movs	r0, #9
    450a:	f7ff fb85 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    450e:	0000      	.short	0x0000
    4510:	200000c0 	.word	0x200000c0

00004514 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    4514:	4804      	ldr	r0, [pc, #16]	; (4528 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    4516:	b510      	push	{r4, lr}
    4518:	8840      	ldrh	r0, [r0, #2]
    451a:	0884      	lsrs	r4, r0, #2
    451c:	f004 fa38 	bl	8990 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    4520:	4284      	cmp	r4, r0
    4522:	d300      	bcc.n	4526 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    4524:	4620      	mov	r0, r4
    4526:	bd10      	pop	{r4, pc}
    4528:	200000c0 	.word	0x200000c0
    452c:	b530      	push	{r4, r5, lr}
    452e:	490d      	ldr	r1, [pc, #52]	; (4564 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    4530:	2001      	movs	r0, #1
    4532:	6048      	str	r0, [r1, #4]
    4534:	1e82      	subs	r2, r0, #2
    4536:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    453a:	490b      	ldr	r1, [pc, #44]	; (4568 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    453c:	6088      	str	r0, [r1, #8]
    453e:	2300      	movs	r3, #0
    4540:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    4544:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4548:	4c08      	ldr	r4, [pc, #32]	; (456c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    454a:	6023      	str	r3, [r4, #0]
    454c:	1d25      	adds	r5, r4, #4
    454e:	6028      	str	r0, [r5, #0]
    4550:	6088      	str	r0, [r1, #8]
    4552:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4556:	6023      	str	r3, [r4, #0]
    4558:	6028      	str	r0, [r5, #0]
    455a:	4906      	ldr	r1, [pc, #24]	; (4574 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    455c:	4804      	ldr	r0, [pc, #16]	; (4570 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    455e:	6008      	str	r0, [r1, #0]
    4560:	bd30      	pop	{r4, r5, pc}
    4562:	0000      	.short	0x0000
    4564:	4000e000 	.word	0x4000e000
    4568:	4000f000 	.word	0x4000f000
    456c:	4000f500 	.word	0x4000f500
    4570:	3ff60000 	.word	0x3ff60000
    4574:	4001f508 	.word	0x4001f508

00004578 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    4578:	b510      	push	{r4, lr}
    457a:	f7ff ffd7 	bl	452c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    457e:	f004 fada 	bl	8b36 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    4582:	4903      	ldr	r1, [pc, #12]	; (4590 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    4584:	4801      	ldr	r0, [pc, #4]	; (458c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    4586:	6008      	str	r0, [r1, #0]
    4588:	bd10      	pop	{r4, pc}
    458a:	0000      	.short	0x0000
    458c:	3ff60000 	.word	0x3ff60000
    4590:	4001f508 	.word	0x4001f508

00004594 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4594:	b510      	push	{r4, lr}
    4596:	4604      	mov	r4, r0
    4598:	f7ff ffc8 	bl	452c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    459c:	f004 facb 	bl	8b36 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    45a0:	f000 f888 	bl	46b4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    45a4:	4905      	ldr	r1, [pc, #20]	; (45bc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    45a6:	4804      	ldr	r0, [pc, #16]	; (45b8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    45a8:	6008      	str	r0, [r1, #0]
    45aa:	4620      	mov	r0, r4
    45ac:	f000 f8b8 	bl	4720 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    45b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    45b4:	f000 b8dc 	b.w	4770 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    45b8:	3ff60000 	.word	0x3ff60000
    45bc:	4001f508 	.word	0x4001f508
    45c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45c4:	4682      	mov	sl, r0
    45c6:	4838      	ldr	r0, [pc, #224]	; (46a8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    45c8:	f003 fafa 	bl	7bc0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    45cc:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 46a8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    45d0:	b128      	cbz	r0, 45de <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    45d2:	2601      	movs	r6, #1
    45d4:	f10b 0001 	add.w	r0, fp, #1
    45d8:	21ff      	movs	r1, #255	; 0xff
    45da:	7001      	strb	r1, [r0, #0]
    45dc:	e000      	b.n	45e0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    45de:	2600      	movs	r6, #0
    45e0:	f44f 7580 	mov.w	r5, #256	; 0x100
    45e4:	4c31      	ldr	r4, [pc, #196]	; (46ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    45e6:	f04f 0800 	mov.w	r8, #0
    45ea:	1d2f      	adds	r7, r5, #4
    45ec:	2101      	movs	r1, #1
    45ee:	6061      	str	r1, [r4, #4]
    45f0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    45f4:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    45f8:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    45fc:	6021      	str	r1, [r4, #0]
    45fe:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 46b0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    4602:	e01c      	b.n	463e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4604:	f8d9 0000 	ldr.w	r0, [r9]
    4608:	06c0      	lsls	r0, r0, #27
    460a:	d518      	bpl.n	463e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    460c:	200e      	movs	r0, #14
    460e:	f004 faa1 	bl	8b54 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    4612:	f3ef 8010 	mrs	r0, PRIMASK
    4616:	9000      	str	r0, [sp, #0]
    4618:	b672      	cpsid	i
    461a:	2103      	movs	r1, #3
    461c:	4620      	mov	r0, r4
    461e:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    4622:	4629      	mov	r1, r5
    4624:	f004 faa3 	bl	8b6e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4628:	b930      	cbnz	r0, 4638 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    462a:	4639      	mov	r1, r7
    462c:	4620      	mov	r0, r4
    462e:	f004 fa9e 	bl	8b6e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4632:	b908      	cbnz	r0, 4638 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    4634:	f7ff f94c 	bl	38d0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4638:	9800      	ldr	r0, [sp, #0]
    463a:	b900      	cbnz	r0, 463e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    463c:	b662      	cpsie	i
    463e:	4629      	mov	r1, r5
    4640:	4620      	mov	r0, r4
    4642:	f004 fa94 	bl	8b6e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4646:	b928      	cbnz	r0, 4654 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    4648:	4639      	mov	r1, r7
    464a:	4620      	mov	r0, r4
    464c:	f004 fa8f 	bl	8b6e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4650:	2800      	cmp	r0, #0
    4652:	d0d7      	beq.n	4604 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    4654:	4639      	mov	r1, r7
    4656:	4620      	mov	r0, r4
    4658:	f004 fa89 	bl	8b6e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    465c:	2800      	cmp	r0, #0
    465e:	d1c5      	bne.n	45ec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    4660:	bb06      	cbnz	r6, 46a4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    4662:	f89b 1001 	ldrb.w	r1, [fp, #1]
    4666:	f88d 1000 	strb.w	r1, [sp]
    466a:	9900      	ldr	r1, [sp, #0]
    466c:	9100      	str	r1, [sp, #0]
    466e:	f89d 1000 	ldrb.w	r1, [sp]
    4672:	b109      	cbz	r1, 4678 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    4674:	2501      	movs	r5, #1
    4676:	e000      	b.n	467a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    4678:	2500      	movs	r5, #0
    467a:	f10b 0001 	add.w	r0, fp, #1
    467e:	f880 8000 	strb.w	r8, [r0]
    4682:	2003      	movs	r0, #3
    4684:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4688:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    468c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4690:	200e      	movs	r0, #14
    4692:	f004 fa5f 	bl	8b54 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    4696:	4804      	ldr	r0, [pc, #16]	; (46a8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    4698:	f003 faa9 	bl	7bee <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    469c:	b115      	cbz	r5, 46a4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    469e:	2011      	movs	r0, #17
    46a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46a4:	2000      	movs	r0, #0
    46a6:	e7fb      	b.n	46a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    46a8:	2000017c 	.word	0x2000017c
    46ac:	4000e000 	.word	0x4000e000
    46b0:	e000ed10 	.word	0xe000ed10

000046b4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    46b4:	b510      	push	{r4, lr}
    46b6:	4806      	ldr	r0, [pc, #24]	; (46d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    46b8:	f003 fa95 	bl	7be6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    46bc:	b118      	cbz	r0, 46c6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    46be:	2127      	movs	r1, #39	; 0x27
    46c0:	201d      	movs	r0, #29
    46c2:	f7ff faa9 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46c6:	4802      	ldr	r0, [pc, #8]	; (46d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    46c8:	2100      	movs	r1, #0
    46ca:	7041      	strb	r1, [r0, #1]
    46cc:	bd10      	pop	{r4, pc}
    46ce:	0000      	.short	0x0000
    46d0:	2000017c 	.word	0x2000017c

000046d4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    46d4:	b570      	push	{r4, r5, r6, lr}
    46d6:	4911      	ldr	r1, [pc, #68]	; (471c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    46d8:	680a      	ldr	r2, [r1, #0]
    46da:	b1ea      	cbz	r2, 4718 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    46dc:	2300      	movs	r3, #0
    46de:	461d      	mov	r5, r3
    46e0:	2401      	movs	r4, #1
    46e2:	684a      	ldr	r2, [r1, #4]
    46e4:	1c52      	adds	r2, r2, #1
    46e6:	604a      	str	r2, [r1, #4]
    46e8:	2a09      	cmp	r2, #9
    46ea:	d300      	bcc.n	46ee <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    46ec:	604d      	str	r5, [r1, #4]
    46ee:	790e      	ldrb	r6, [r1, #4]
    46f0:	fa04 f206 	lsl.w	r2, r4, r6
    46f4:	680e      	ldr	r6, [r1, #0]
    46f6:	4216      	tst	r6, r2
    46f8:	d00b      	beq.n	4712 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    46fa:	f3ef 8310 	mrs	r3, PRIMASK
    46fe:	b672      	cpsid	i
    4700:	680c      	ldr	r4, [r1, #0]
    4702:	4394      	bics	r4, r2
    4704:	600c      	str	r4, [r1, #0]
    4706:	b903      	cbnz	r3, 470a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4708:	b662      	cpsie	i
    470a:	6849      	ldr	r1, [r1, #4]
    470c:	6001      	str	r1, [r0, #0]
    470e:	2000      	movs	r0, #0
    4710:	bd70      	pop	{r4, r5, r6, pc}
    4712:	1c5b      	adds	r3, r3, #1
    4714:	2b09      	cmp	r3, #9
    4716:	d3e4      	bcc.n	46e2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4718:	2005      	movs	r0, #5
    471a:	bd70      	pop	{r4, r5, r6, pc}
    471c:	200000c8 	.word	0x200000c8

00004720 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4720:	4802      	ldr	r0, [pc, #8]	; (472c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    4722:	2100      	movs	r1, #0
    4724:	6001      	str	r1, [r0, #0]
    4726:	6041      	str	r1, [r0, #4]
    4728:	4770      	bx	lr
    472a:	0000      	.short	0x0000
    472c:	200000c8 	.word	0x200000c8

00004730 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    4730:	b510      	push	{r4, lr}
    4732:	4c04      	ldr	r4, [pc, #16]	; (4744 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    4734:	7820      	ldrb	r0, [r4, #0]
    4736:	28ff      	cmp	r0, #255	; 0xff
    4738:	d003      	beq.n	4742 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    473a:	f7ff f87f 	bl	383c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    473e:	20ff      	movs	r0, #255	; 0xff
    4740:	7020      	strb	r0, [r4, #0]
    4742:	bd10      	pop	{r4, pc}
    4744:	20000000 	.word	0x20000000

00004748 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4748:	b510      	push	{r4, lr}
    474a:	4c08      	ldr	r4, [pc, #32]	; (476c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    474c:	7861      	ldrb	r1, [r4, #1]
    474e:	b109      	cbz	r1, 4754 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4750:	200f      	movs	r0, #15
    4752:	bd10      	pop	{r4, pc}
    4754:	f7ff f838 	bl	37c8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4758:	7020      	strb	r0, [r4, #0]
    475a:	28ff      	cmp	r0, #255	; 0xff
    475c:	d001      	beq.n	4762 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    475e:	2000      	movs	r0, #0
    4760:	bd10      	pop	{r4, pc}
    4762:	2178      	movs	r1, #120	; 0x78
    4764:	201f      	movs	r0, #31
    4766:	f7ff fa57 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    476a:	0000      	.short	0x0000
    476c:	20000000 	.word	0x20000000

00004770 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4770:	4901      	ldr	r1, [pc, #4]	; (4778 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4772:	2000      	movs	r0, #0
    4774:	7048      	strb	r0, [r1, #1]
    4776:	4770      	bx	lr
    4778:	20000000 	.word	0x20000000
    477c:	4905      	ldr	r1, [pc, #20]	; (4794 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x24>)
    477e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4780:	4282      	cmp	r2, r0
    4782:	d105      	bne.n	4790 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x20>
    4784:	2000      	movs	r0, #0
    4786:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    478a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    478e:	8488      	strh	r0, [r1, #36]	; 0x24
    4790:	4770      	bx	lr
    4792:	0000      	.short	0x0000
    4794:	20000d88 	.word	0x20000d88

00004798 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4798:	4a0a      	ldr	r2, [pc, #40]	; (47c4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    479a:	b110      	cbz	r0, 47a2 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    479c:	2801      	cmp	r0, #1
    479e:	d007      	beq.n	47b0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    47a0:	e00e      	b.n	47c0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    47a2:	7850      	ldrb	r0, [r2, #1]
    47a4:	b160      	cbz	r0, 47c0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    47a6:	f8d2 0002 	ldr.w	r0, [r2, #2]
    47aa:	6008      	str	r0, [r1, #0]
    47ac:	88d0      	ldrh	r0, [r2, #6]
    47ae:	e004      	b.n	47ba <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    47b0:	7810      	ldrb	r0, [r2, #0]
    47b2:	b128      	cbz	r0, 47c0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    47b4:	6890      	ldr	r0, [r2, #8]
    47b6:	6008      	str	r0, [r1, #0]
    47b8:	8990      	ldrh	r0, [r2, #12]
    47ba:	8088      	strh	r0, [r1, #4]
    47bc:	2001      	movs	r0, #1
    47be:	4770      	bx	lr
    47c0:	2000      	movs	r0, #0
    47c2:	4770      	bx	lr
    47c4:	2000017e 	.word	0x2000017e

000047c8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    47c8:	4a08      	ldr	r2, [pc, #32]	; (47ec <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    47ca:	2301      	movs	r3, #1
    47cc:	b138      	cbz	r0, 47de <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    47ce:	2801      	cmp	r0, #1
    47d0:	d104      	bne.n	47dc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    47d2:	7013      	strb	r3, [r2, #0]
    47d4:	6808      	ldr	r0, [r1, #0]
    47d6:	6090      	str	r0, [r2, #8]
    47d8:	8888      	ldrh	r0, [r1, #4]
    47da:	8190      	strh	r0, [r2, #12]
    47dc:	4770      	bx	lr
    47de:	7053      	strb	r3, [r2, #1]
    47e0:	6808      	ldr	r0, [r1, #0]
    47e2:	f8c2 0002 	str.w	r0, [r2, #2]
    47e6:	8888      	ldrh	r0, [r1, #4]
    47e8:	80d0      	strh	r0, [r2, #6]
    47ea:	4770      	bx	lr
    47ec:	2000017e 	.word	0x2000017e

000047f0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    47f0:	4906      	ldr	r1, [pc, #24]	; (480c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    47f2:	b110      	cbz	r0, 47fa <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    47f4:	2801      	cmp	r0, #1
    47f6:	d002      	beq.n	47fe <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    47f8:	e005      	b.n	4806 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    47fa:	7848      	ldrb	r0, [r1, #1]
    47fc:	e000      	b.n	4800 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    47fe:	7808      	ldrb	r0, [r1, #0]
    4800:	b108      	cbz	r0, 4806 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4802:	2001      	movs	r0, #1
    4804:	4770      	bx	lr
    4806:	2000      	movs	r0, #0
    4808:	4770      	bx	lr
    480a:	0000      	.short	0x0000
    480c:	2000017e 	.word	0x2000017e

00004810 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4810:	4901      	ldr	r1, [pc, #4]	; (4818 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4812:	7708      	strb	r0, [r1, #28]
    4814:	4770      	bx	lr
    4816:	0000      	.short	0x0000
    4818:	20000612 	.word	0x20000612

0000481c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    481c:	4800      	ldr	r0, [pc, #0]	; (4820 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    481e:	4770      	bx	lr
    4820:	20000f81 	.word	0x20000f81

00004824 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    4824:	4904      	ldr	r1, [pc, #16]	; (4838 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    4826:	788a      	ldrb	r2, [r1, #2]
    4828:	4282      	cmp	r2, r0
    482a:	d903      	bls.n	4834 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    482c:	4408      	add	r0, r1
    482e:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    4832:	4770      	bx	lr
    4834:	2000      	movs	r0, #0
    4836:	4770      	bx	lr
    4838:	20000dae 	.word	0x20000dae

0000483c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    483c:	4904      	ldr	r1, [pc, #16]	; (4850 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    483e:	788a      	ldrb	r2, [r1, #2]
    4840:	4282      	cmp	r2, r0
    4842:	d903      	bls.n	484c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    4844:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    4848:	3083      	adds	r0, #131	; 0x83
    484a:	4770      	bx	lr
    484c:	2000      	movs	r0, #0
    484e:	4770      	bx	lr
    4850:	20000dae 	.word	0x20000dae

00004854 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    4854:	4a05      	ldr	r2, [pc, #20]	; (486c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    4856:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    485a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    485e:	6802      	ldr	r2, [r0, #0]
    4860:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    4864:	8880      	ldrh	r0, [r0, #4]
    4866:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    486a:	4770      	bx	lr
    486c:	20000dae 	.word	0x20000dae

00004870 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    4870:	4904      	ldr	r1, [pc, #16]	; (4884 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    4872:	788a      	ldrb	r2, [r1, #2]
    4874:	4282      	cmp	r2, r0
    4876:	d903      	bls.n	4880 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    4878:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    487c:	1cc0      	adds	r0, r0, #3
    487e:	4770      	bx	lr
    4880:	2000      	movs	r0, #0
    4882:	4770      	bx	lr
    4884:	20000dae 	.word	0x20000dae

00004888 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    4888:	b510      	push	{r4, lr}
    488a:	f240 12d3 	movw	r2, #467	; 0x1d3
    488e:	2100      	movs	r1, #0
    4890:	4808      	ldr	r0, [pc, #32]	; (48b4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    4892:	f003 faa6 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4896:	2208      	movs	r2, #8
    4898:	21ff      	movs	r1, #255	; 0xff
    489a:	4807      	ldr	r0, [pc, #28]	; (48b8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    489c:	f003 faa1 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    48a0:	4805      	ldr	r0, [pc, #20]	; (48b8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    48a2:	2100      	movs	r1, #0
    48a4:	1f00      	subs	r0, r0, #4
    48a6:	7001      	strb	r1, [r0, #0]
    48a8:	7041      	strb	r1, [r0, #1]
    48aa:	f44f 7161 	mov.w	r1, #900	; 0x384
    48ae:	8041      	strh	r1, [r0, #2]
    48b0:	bd10      	pop	{r4, pc}
    48b2:	0000      	.short	0x0000
    48b4:	20000dae 	.word	0x20000dae
    48b8:	20000170 	.word	0x20000170

000048bc <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    48bc:	4b0b      	ldr	r3, [pc, #44]	; (48ec <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    48be:	b510      	push	{r4, lr}
    48c0:	789c      	ldrb	r4, [r3, #2]
    48c2:	4284      	cmp	r4, r0
    48c4:	d90f      	bls.n	48e6 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    48c6:	4418      	add	r0, r3
    48c8:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    48cc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    48d0:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    48d4:	700b      	strb	r3, [r1, #0]
    48d6:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    48da:	6011      	str	r1, [r2, #0]
    48dc:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    48e0:	8090      	strh	r0, [r2, #4]
    48e2:	2001      	movs	r0, #1
    48e4:	bd10      	pop	{r4, pc}
    48e6:	2000      	movs	r0, #0
    48e8:	bd10      	pop	{r4, pc}
    48ea:	0000      	.short	0x0000
    48ec:	20000dae 	.word	0x20000dae

000048f0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    48f0:	4907      	ldr	r1, [pc, #28]	; (4910 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    48f2:	788a      	ldrb	r2, [r1, #2]
    48f4:	4282      	cmp	r2, r0
    48f6:	d909      	bls.n	490c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    48f8:	4408      	add	r0, r1
    48fa:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    48fe:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4902:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    4906:	f000 0001 	and.w	r0, r0, #1
    490a:	4770      	bx	lr
    490c:	2000      	movs	r0, #0
    490e:	4770      	bx	lr
    4910:	20000dae 	.word	0x20000dae

00004914 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    4914:	4801      	ldr	r0, [pc, #4]	; (491c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    4916:	8840      	ldrh	r0, [r0, #2]
    4918:	4770      	bx	lr
    491a:	0000      	.short	0x0000
    491c:	2000016c 	.word	0x2000016c

00004920 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    4920:	4905      	ldr	r1, [pc, #20]	; (4938 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    4922:	788a      	ldrb	r2, [r1, #2]
    4924:	4282      	cmp	r2, r0
    4926:	d903      	bls.n	4930 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    4928:	4408      	add	r0, r1
    492a:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    492e:	b108      	cbz	r0, 4934 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    4930:	2000      	movs	r0, #0
    4932:	4770      	bx	lr
    4934:	2001      	movs	r0, #1
    4936:	4770      	bx	lr
    4938:	20000dae 	.word	0x20000dae

0000493c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    493c:	b570      	push	{r4, r5, r6, lr}
    493e:	460d      	mov	r5, r1
    4940:	4606      	mov	r6, r0
    4942:	f000 f8c1 	bl	4ac8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    4946:	4c10      	ldr	r4, [pc, #64]	; (4988 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    4948:	2810      	cmp	r0, #16
    494a:	d007      	beq.n	495c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    494c:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    4950:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    4954:	07c9      	lsls	r1, r1, #31
    4956:	d001      	beq.n	495c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    4958:	2001      	movs	r0, #1
    495a:	bd70      	pop	{r4, r5, r6, pc}
    495c:	7861      	ldrb	r1, [r4, #1]
    495e:	2908      	cmp	r1, #8
    4960:	d210      	bcs.n	4984 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    4962:	2810      	cmp	r0, #16
    4964:	d008      	beq.n	4978 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    4966:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    496a:	2101      	movs	r1, #1
    496c:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    4970:	7860      	ldrb	r0, [r4, #1]
    4972:	1c40      	adds	r0, r0, #1
    4974:	7060      	strb	r0, [r4, #1]
    4976:	e7ef      	b.n	4958 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    4978:	2201      	movs	r2, #1
    497a:	4629      	mov	r1, r5
    497c:	4630      	mov	r0, r6
    497e:	f000 f887 	bl	4a90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    4982:	e7f5      	b.n	4970 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    4984:	2000      	movs	r0, #0
    4986:	bd70      	pop	{r4, r5, r6, pc}
    4988:	20000dae 	.word	0x20000dae

0000498c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    498c:	b570      	push	{r4, r5, r6, lr}
    498e:	4d0b      	ldr	r5, [pc, #44]	; (49bc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    4990:	7828      	ldrb	r0, [r5, #0]
    4992:	1e40      	subs	r0, r0, #1
    4994:	b244      	sxtb	r4, r0
    4996:	e00a      	b.n	49ae <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    4998:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    499c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    49a0:	07c0      	lsls	r0, r0, #31
    49a2:	d002      	beq.n	49aa <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    49a4:	b2e0      	uxtb	r0, r4
    49a6:	f000 f8ed 	bl	4b84 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    49aa:	1e64      	subs	r4, r4, #1
    49ac:	b264      	sxtb	r4, r4
    49ae:	2c00      	cmp	r4, #0
    49b0:	daf2      	bge.n	4998 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    49b2:	4903      	ldr	r1, [pc, #12]	; (49c0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    49b4:	2000      	movs	r0, #0
    49b6:	7048      	strb	r0, [r1, #1]
    49b8:	bd70      	pop	{r4, r5, r6, pc}
    49ba:	0000      	.short	0x0000
    49bc:	20000dae 	.word	0x20000dae
    49c0:	2000016c 	.word	0x2000016c

000049c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    49c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49c8:	2400      	movs	r4, #0
    49ca:	4625      	mov	r5, r4
    49cc:	4e18      	ldr	r6, [pc, #96]	; (4a30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    49ce:	e029      	b.n	4a24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    49d0:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    49d4:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    49d8:	07c0      	lsls	r0, r0, #31
    49da:	d021      	beq.n	4a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    49dc:	4628      	mov	r0, r5
    49de:	f000 f843 	bl	4a68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    49e2:	4603      	mov	r3, r0
    49e4:	f7ff ff44 	bl	4870 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    49e8:	4601      	mov	r1, r0
    49ea:	2000      	movs	r0, #0
    49ec:	2b10      	cmp	r3, #16
    49ee:	d009      	beq.n	4a04 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    49f0:	18f2      	adds	r2, r6, r3
    49f2:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    49f6:	f1bc 0f01 	cmp.w	ip, #1
    49fa:	d002      	beq.n	4a02 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    49fc:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    4a00:	b102      	cbz	r2, 4a04 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    4a02:	2001      	movs	r0, #1
    4a04:	1e40      	subs	r0, r0, #1
    4a06:	4201      	tst	r1, r0
    4a08:	d10a      	bne.n	4a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    4a0a:	480a      	ldr	r0, [pc, #40]	; (4a34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    4a0c:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    4a10:	5503      	strb	r3, [r0, r4]
    4a12:	4620      	mov	r0, r4
    4a14:	1c64      	adds	r4, r4, #1
    4a16:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    4a1a:	b2e4      	uxtb	r4, r4
    4a1c:	f002 fb02 	bl	7024 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    4a20:	1c6d      	adds	r5, r5, #1
    4a22:	b2ed      	uxtb	r5, r5
    4a24:	7830      	ldrb	r0, [r6, #0]
    4a26:	42a8      	cmp	r0, r5
    4a28:	d8d2      	bhi.n	49d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    4a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a2e:	0000      	.short	0x0000
    4a30:	20000dae 	.word	0x20000dae
    4a34:	20000170 	.word	0x20000170
    4a38:	4602      	mov	r2, r0
    4a3a:	4809      	ldr	r0, [pc, #36]	; (4a60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    4a3c:	b510      	push	{r4, lr}
    4a3e:	7800      	ldrb	r0, [r0, #0]
    4a40:	460b      	mov	r3, r1
    4a42:	b158      	cbz	r0, 4a5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    4a44:	4807      	ldr	r0, [pc, #28]	; (4a64 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    4a46:	7881      	ldrb	r1, [r0, #2]
    4a48:	b141      	cbz	r1, 4a5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    4a4a:	b10b      	cbz	r3, 4a50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    4a4c:	1cc0      	adds	r0, r0, #3
    4a4e:	e001      	b.n	4a54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    4a50:	4804      	ldr	r0, [pc, #16]	; (4a64 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    4a52:	3083      	adds	r0, #131	; 0x83
    4a54:	f001 fe0e 	bl	6674 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    4a58:	2001      	movs	r0, #1
    4a5a:	bd10      	pop	{r4, pc}
    4a5c:	2000      	movs	r0, #0
    4a5e:	bd10      	pop	{r4, pc}
    4a60:	2000016c 	.word	0x2000016c
    4a64:	20000dae 	.word	0x20000dae
    4a68:	4908      	ldr	r1, [pc, #32]	; (4a8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    4a6a:	b510      	push	{r4, lr}
    4a6c:	4603      	mov	r3, r0
    4a6e:	2000      	movs	r0, #0
    4a70:	788a      	ldrb	r2, [r1, #2]
    4a72:	e006      	b.n	4a82 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    4a74:	180c      	adds	r4, r1, r0
    4a76:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    4a7a:	429c      	cmp	r4, r3
    4a7c:	d004      	beq.n	4a88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    4a7e:	1c40      	adds	r0, r0, #1
    4a80:	b2c0      	uxtb	r0, r0
    4a82:	4282      	cmp	r2, r0
    4a84:	d8f6      	bhi.n	4a74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    4a86:	2010      	movs	r0, #16
    4a88:	bd10      	pop	{r4, pc}
    4a8a:	0000      	.short	0x0000
    4a8c:	20000dae 	.word	0x20000dae
    4a90:	b570      	push	{r4, r5, r6, lr}
    4a92:	4b0c      	ldr	r3, [pc, #48]	; (4ac4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    4a94:	4604      	mov	r4, r0
    4a96:	7818      	ldrb	r0, [r3, #0]
    4a98:	1c45      	adds	r5, r0, #1
    4a9a:	701d      	strb	r5, [r3, #0]
    4a9c:	2810      	cmp	r0, #16
    4a9e:	d303      	bcc.n	4aa8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    4aa0:	2146      	movs	r1, #70	; 0x46
    4aa2:	2028      	movs	r0, #40	; 0x28
    4aa4:	f7ff f8b8 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4aa8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    4aac:	680d      	ldr	r5, [r1, #0]
    4aae:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    4ab2:	8889      	ldrh	r1, [r1, #4]
    4ab4:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    4ab8:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    4abc:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    4ac0:	bd70      	pop	{r4, r5, r6, pc}
    4ac2:	0000      	.short	0x0000
    4ac4:	20000dae 	.word	0x20000dae
    4ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aca:	4c1a      	ldr	r4, [pc, #104]	; (4b34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    4acc:	4603      	mov	r3, r0
    4ace:	2000      	movs	r0, #0
    4ad0:	7825      	ldrb	r5, [r4, #0]
    4ad2:	e02a      	b.n	4b2a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    4ad4:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    4ad8:	780f      	ldrb	r7, [r1, #0]
    4ada:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    4ade:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    4ae2:	ea87 070c 	eor.w	r7, r7, ip
    4ae6:	405e      	eors	r6, r3
    4ae8:	443e      	add	r6, r7
    4aea:	784f      	ldrb	r7, [r1, #1]
    4aec:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    4af0:	ea87 070c 	eor.w	r7, r7, ip
    4af4:	443e      	add	r6, r7
    4af6:	788f      	ldrb	r7, [r1, #2]
    4af8:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    4afc:	ea87 070c 	eor.w	r7, r7, ip
    4b00:	443e      	add	r6, r7
    4b02:	78cf      	ldrb	r7, [r1, #3]
    4b04:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    4b08:	ea87 070c 	eor.w	r7, r7, ip
    4b0c:	443e      	add	r6, r7
    4b0e:	790f      	ldrb	r7, [r1, #4]
    4b10:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    4b14:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    4b18:	ea87 070c 	eor.w	r7, r7, ip
    4b1c:	443e      	add	r6, r7
    4b1e:	794f      	ldrb	r7, [r1, #5]
    4b20:	4057      	eors	r7, r2
    4b22:	42f7      	cmn	r7, r6
    4b24:	d004      	beq.n	4b30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    4b26:	1c40      	adds	r0, r0, #1
    4b28:	b2c0      	uxtb	r0, r0
    4b2a:	4285      	cmp	r5, r0
    4b2c:	d8d2      	bhi.n	4ad4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    4b2e:	2010      	movs	r0, #16
    4b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b32:	0000      	.short	0x0000
    4b34:	20000dae 	.word	0x20000dae
    4b38:	b570      	push	{r4, r5, r6, lr}
    4b3a:	4605      	mov	r5, r0
    4b3c:	f7ff ff94 	bl	4a68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    4b40:	2810      	cmp	r0, #16
    4b42:	d11c      	bne.n	4b7e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    4b44:	4c0e      	ldr	r4, [pc, #56]	; (4b80 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    4b46:	7820      	ldrb	r0, [r4, #0]
    4b48:	1e40      	subs	r0, r0, #1
    4b4a:	b2c0      	uxtb	r0, r0
    4b4c:	7020      	strb	r0, [r4, #0]
    4b4e:	42a8      	cmp	r0, r5
    4b50:	d015      	beq.n	4b7e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    4b52:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    4b56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    4b5a:	f502 7080 	add.w	r0, r2, #256	; 0x100
    4b5e:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    4b62:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    4b66:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    4b6a:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    4b6e:	7820      	ldrb	r0, [r4, #0]
    4b70:	f7ff ff7a 	bl	4a68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    4b74:	2810      	cmp	r0, #16
    4b76:	d002      	beq.n	4b7e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    4b78:	4420      	add	r0, r4
    4b7a:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    4b7e:	bd70      	pop	{r4, r5, r6, pc}
    4b80:	20000dae 	.word	0x20000dae
    4b84:	4905      	ldr	r1, [pc, #20]	; (4b9c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    4b86:	784a      	ldrb	r2, [r1, #1]
    4b88:	1e52      	subs	r2, r2, #1
    4b8a:	704a      	strb	r2, [r1, #1]
    4b8c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    4b90:	2200      	movs	r2, #0
    4b92:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    4b96:	f7ff bfcf 	b.w	4b38 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    4b9a:	0000      	.short	0x0000
    4b9c:	20000dae 	.word	0x20000dae

00004ba0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    4ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ba4:	4604      	mov	r4, r0
    4ba6:	f100 0580 	add.w	r5, r0, #128	; 0x80
    4baa:	f04f 0901 	mov.w	r9, #1
    4bae:	b171      	cbz	r1, 4bce <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    4bb0:	f104 079e 	add.w	r7, r4, #158	; 0x9e
    4bb4:	1e7e      	subs	r6, r7, #1
    4bb6:	2901      	cmp	r1, #1
    4bb8:	d020      	beq.n	4bfc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    4bba:	2902      	cmp	r1, #2
    4bbc:	d045      	beq.n	4c4a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xaa>
    4bbe:	2903      	cmp	r1, #3
    4bc0:	d11a      	bne.n	4bf8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    4bc2:	4639      	mov	r1, r7
    4bc4:	4630      	mov	r0, r6
    4bc6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4bca:	f004 b922 	b.w	8e12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    4bce:	f44f 723a 	mov.w	r2, #744	; 0x2e8
    4bd2:	2100      	movs	r1, #0
    4bd4:	f003 f905 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4bd8:	f885 901d 	strb.w	r9, [r5, #29]
    4bdc:	4820      	ldr	r0, [pc, #128]	; (4c60 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    4bde:	6668      	str	r0, [r5, #100]	; 0x64
    4be0:	2007      	movs	r0, #7
    4be2:	66a8      	str	r0, [r5, #104]	; 0x68
    4be4:	f814 0fe4 	ldrb.w	r0, [r4, #228]!
    4be8:	f020 0004 	bic.w	r0, r0, #4
    4bec:	7020      	strb	r0, [r4, #0]
    4bee:	20fe      	movs	r0, #254	; 0xfe
    4bf0:	f885 009c 	strb.w	r0, [r5, #156]	; 0x9c
    4bf4:	207f      	movs	r0, #127	; 0x7f
    4bf6:	7468      	strb	r0, [r5, #17]
    4bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4bfc:	f04f 0800 	mov.w	r8, #0
    4c00:	f8a4 8226 	strh.w	r8, [r4, #550]	; 0x226
    4c04:	f884 821b 	strb.w	r8, [r4, #539]	; 0x21b
    4c08:	6921      	ldr	r1, [r4, #16]
    4c0a:	4816      	ldr	r0, [pc, #88]	; (4c64 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>)
    4c0c:	460a      	mov	r2, r1
    4c0e:	4408      	add	r0, r1
    4c10:	fbb0 f0f1 	udiv	r0, r0, r1
    4c14:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    4c18:	f640 30b8 	movw	r0, #3000	; 0xbb8
    4c1c:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    4c20:	8b63      	ldrh	r3, [r4, #26]
    4c22:	4628      	mov	r0, r5
    4c24:	f000 f820 	bl	4c68 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>
    4c28:	4639      	mov	r1, r7
    4c2a:	4630      	mov	r0, r6
    4c2c:	f004 f8f1 	bl	8e12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    4c30:	f003 f839 	bl	7ca6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    4c34:	b118      	cbz	r0, 4c3e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9e>
    4c36:	6960      	ldr	r0, [r4, #20]
    4c38:	f000 fa4e 	bl	50d8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    4c3c:	b110      	cbz	r0, 4c44 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa4>
    4c3e:	f884 820c 	strb.w	r8, [r4, #524]	; 0x20c
    4c42:	e7d9      	b.n	4bf8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    4c44:	f884 920c 	strb.w	r9, [r4, #524]	; 0x20c
    4c48:	e7d6      	b.n	4bf8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    4c4a:	6901      	ldr	r1, [r0, #16]
    4c4c:	f8b4 32ca 	ldrh.w	r3, [r4, #714]	; 0x2ca
    4c50:	f8d4 22c4 	ldr.w	r2, [r4, #708]	; 0x2c4
    4c54:	4628      	mov	r0, r5
    4c56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c5a:	f000 b805 	b.w	4c68 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>
    4c5e:	0000      	.short	0x0000
    4c60:	3004492f 	.word	0x3004492f
    4c64:	01c9c37f 	.word	0x01c9c37f
    4c68:	b510      	push	{r4, lr}
    4c6a:	2400      	movs	r4, #0
    4c6c:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
    4c70:	f830 4f48 	ldrh.w	r4, [r0, #72]!
    4c74:	434c      	muls	r4, r1
    4c76:	fbb4 f4f2 	udiv	r4, r4, r2
    4c7a:	f820 4910 	strh.w	r4, [r0], #-16
    4c7e:	f240 2471 	movw	r4, #625	; 0x271
    4c82:	4363      	muls	r3, r4
    4c84:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    4c88:	1e5b      	subs	r3, r3, #1
    4c8a:	fbb3 f3f2 	udiv	r3, r3, r2
    4c8e:	81c3      	strh	r3, [r0, #14]
    4c90:	4b09      	ldr	r3, [pc, #36]	; (4cb8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x118>)
    4c92:	fbb3 f3f2 	udiv	r3, r3, r2
    4c96:	1c5b      	adds	r3, r3, #1
    4c98:	8283      	strh	r3, [r0, #20]
    4c9a:	8903      	ldrh	r3, [r0, #8]
    4c9c:	4363      	muls	r3, r4
    4c9e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    4ca2:	1e5b      	subs	r3, r3, #1
    4ca4:	fbb3 f3f2 	udiv	r3, r3, r2
    4ca8:	6043      	str	r3, [r0, #4]
    4caa:	6803      	ldr	r3, [r0, #0]
    4cac:	434b      	muls	r3, r1
    4cae:	fbb3 f1f2 	udiv	r1, r3, r2
    4cb2:	6001      	str	r1, [r0, #0]
    4cb4:	bd10      	pop	{r4, pc}
    4cb6:	0000      	.short	0x0000
    4cb8:	02625a00 	.word	0x02625a00

00004cbc <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    4cbc:	4904      	ldr	r1, [pc, #16]	; (4cd0 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    4cbe:	7c89      	ldrb	r1, [r1, #18]
    4cc0:	0749      	lsls	r1, r1, #29
    4cc2:	d400      	bmi.n	4cc6 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    4cc4:	b108      	cbz	r0, 4cca <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    4cc6:	2000      	movs	r0, #0
    4cc8:	4770      	bx	lr
    4cca:	2001      	movs	r0, #1
    4ccc:	4770      	bx	lr
    4cce:	0000      	.short	0x0000
    4cd0:	20000cec 	.word	0x20000cec

00004cd4 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    4cd4:	4803      	ldr	r0, [pc, #12]	; (4ce4 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    4cd6:	7c80      	ldrb	r0, [r0, #18]
    4cd8:	0780      	lsls	r0, r0, #30
    4cda:	d401      	bmi.n	4ce0 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    4cdc:	2001      	movs	r0, #1
    4cde:	4770      	bx	lr
    4ce0:	2000      	movs	r0, #0
    4ce2:	4770      	bx	lr
    4ce4:	20000cec 	.word	0x20000cec

00004ce8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    4ce8:	4803      	ldr	r0, [pc, #12]	; (4cf8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    4cea:	7c80      	ldrb	r0, [r0, #18]
    4cec:	07c0      	lsls	r0, r0, #31
    4cee:	d001      	beq.n	4cf4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    4cf0:	2000      	movs	r0, #0
    4cf2:	4770      	bx	lr
    4cf4:	2001      	movs	r0, #1
    4cf6:	4770      	bx	lr
    4cf8:	20000cec 	.word	0x20000cec

00004cfc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    4cfc:	b538      	push	{r3, r4, r5, lr}
    4cfe:	b318      	cbz	r0, 4d48 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x4c>
    4d00:	7a03      	ldrb	r3, [r0, #8]
    4d02:	f88d 3000 	strb.w	r3, [sp]
    4d06:	9b00      	ldr	r3, [sp, #0]
    4d08:	9300      	str	r3, [sp, #0]
    4d0a:	f89d 3000 	ldrb.w	r3, [sp]
    4d0e:	2b00      	cmp	r3, #0
    4d10:	d126      	bne.n	4d60 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x64>
    4d12:	6041      	str	r1, [r0, #4]
    4d14:	f100 0108 	add.w	r1, r0, #8
    4d18:	700a      	strb	r2, [r1, #0]
    4d1a:	f3ef 8210 	mrs	r2, PRIMASK
    4d1e:	b672      	cpsid	i
    4d20:	4b10      	ldr	r3, [pc, #64]	; (4d64 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x68>)
    4d22:	6003      	str	r3, [r0, #0]
    4d24:	1f19      	subs	r1, r3, #4
    4d26:	684c      	ldr	r4, [r1, #4]
    4d28:	7a24      	ldrb	r4, [r4, #8]
    4d2a:	f88d 4000 	strb.w	r4, [sp]
    4d2e:	9c00      	ldr	r4, [sp, #0]
    4d30:	9400      	str	r4, [sp, #0]
    4d32:	f89d 5000 	ldrb.w	r5, [sp]
    4d36:	2d01      	cmp	r5, #1
    4d38:	d004      	beq.n	4d44 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x48>
    4d3a:	680b      	ldr	r3, [r1, #0]
    4d3c:	6018      	str	r0, [r3, #0]
    4d3e:	6008      	str	r0, [r1, #0]
    4d40:	b13a      	cbz	r2, 4d52 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x56>
    4d42:	e007      	b.n	4d54 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x58>
    4d44:	600b      	str	r3, [r1, #0]
    4d46:	e7f9      	b.n	4d3c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x40>
    4d48:	f44f 6192 	mov.w	r1, #1168	; 0x490
    4d4c:	2010      	movs	r0, #16
    4d4e:	f7fe ff63 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d52:	b662      	cpsie	i
    4d54:	4804      	ldr	r0, [pc, #16]	; (4d68 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x6c>)
    4d56:	7800      	ldrb	r0, [r0, #0]
    4d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4d5c:	f7fe bd52 	b.w	3804 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    4d60:	bd38      	pop	{r3, r4, r5, pc}
    4d62:	0000      	.short	0x0000
    4d64:	20000d1c 	.word	0x20000d1c
    4d68:	2000018c 	.word	0x2000018c

00004d6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    4d6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d70:	4f47      	ldr	r7, [pc, #284]	; (4e90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x124>)
    4d72:	f8df 9120 	ldr.w	r9, [pc, #288]	; 4e94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    4d76:	4682      	mov	sl, r0
    4d78:	2600      	movs	r6, #0
    4d7a:	6878      	ldr	r0, [r7, #4]
    4d7c:	7a00      	ldrb	r0, [r0, #8]
    4d7e:	f88d 0000 	strb.w	r0, [sp]
    4d82:	9800      	ldr	r0, [sp, #0]
    4d84:	9000      	str	r0, [sp, #0]
    4d86:	f89d 1000 	ldrb.w	r1, [sp]
    4d8a:	2927      	cmp	r1, #39	; 0x27
    4d8c:	d106      	bne.n	4d9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>
    4d8e:	f899 1013 	ldrb.w	r1, [r9, #19]
    4d92:	b119      	cbz	r1, 4d9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>
    4d94:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    4d98:	2800      	cmp	r0, #0
    4d9a:	d06c      	beq.n	4e76 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    4d9c:	f88d 6000 	strb.w	r6, [sp]
    4da0:	4668      	mov	r0, sp
    4da2:	f000 f88b 	bl	4ebc <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x10>
    4da6:	f89d 1000 	ldrb.w	r1, [sp]
    4daa:	2900      	cmp	r1, #0
    4dac:	d1f8      	bne.n	4da0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    4dae:	2800      	cmp	r0, #0
    4db0:	d061      	beq.n	4e76 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    4db2:	4604      	mov	r4, r0
    4db4:	7a00      	ldrb	r0, [r0, #8]
    4db6:	f88d 0000 	strb.w	r0, [sp]
    4dba:	9800      	ldr	r0, [sp, #0]
    4dbc:	9000      	str	r0, [sp, #0]
    4dbe:	f89d 5000 	ldrb.w	r5, [sp]
    4dc2:	1ea8      	subs	r0, r5, #2
    4dc4:	2826      	cmp	r0, #38	; 0x26
    4dc6:	d25d      	bcs.n	4e84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    4dc8:	e8df f000 	tbb	[pc, r0]
    4dcc:	1a5c2213 	.word	0x1a5c2213
    4dd0:	3e22225c 	.word	0x3e22225c
    4dd4:	22222222 	.word	0x22222222
    4dd8:	5c1a5c22 	.word	0x5c1a5c22
    4ddc:	5c1a2222 	.word	0x5c1a2222
    4de0:	225c5c5c 	.word	0x225c5c5c
    4de4:	1a225c5c 	.word	0x1a225c5c
    4de8:	435c2222 	.word	0x435c2222
    4dec:	2f5c5c1a 	.word	0x2f5c5c1a
    4df0:	4c34      	.short	0x4c34
    4df2:	6862      	ldr	r2, [r4, #4]
    4df4:	bb7a      	cbnz	r2, 4e56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    4df6:	f240 318a 	movw	r1, #906	; 0x38a
    4dfa:	e040      	b.n	4e7e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    4dfc:	7226      	strb	r6, [r4, #8]
    4dfe:	e044      	b.n	4e8a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    4e00:	4825      	ldr	r0, [pc, #148]	; (4e98 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12c>)
    4e02:	6803      	ldr	r3, [r0, #0]
    4e04:	b11b      	cbz	r3, 4e0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    4e06:	6860      	ldr	r0, [r4, #4]
    4e08:	462a      	mov	r2, r5
    4e0a:	4651      	mov	r1, sl
    4e0c:	4798      	blx	r3
    4e0e:	e7f5      	b.n	4dfc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    4e10:	462a      	mov	r2, r5
    4e12:	4621      	mov	r1, r4
    4e14:	4650      	mov	r0, sl
    4e16:	f000 f879 	bl	4f0c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x60>
    4e1a:	b110      	cbz	r0, 4e22 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    4e1c:	2d0d      	cmp	r5, #13
    4e1e:	d034      	beq.n	4e8a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    4e20:	e7ec      	b.n	4dfc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    4e22:	2d0d      	cmp	r5, #13
    4e24:	d031      	beq.n	4e8a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    4e26:	7226      	strb	r6, [r4, #8]
    4e28:	e7a7      	b.n	4d7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe>
    4e2a:	6862      	ldr	r2, [r4, #4]
    4e2c:	b99a      	cbnz	r2, 4e56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    4e2e:	f240 412b 	movw	r1, #1067	; 0x42b
    4e32:	e024      	b.n	4e7e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    4e34:	f88a 6001 	strb.w	r6, [sl, #1]
    4e38:	2115      	movs	r1, #21
    4e3a:	f88a 1000 	strb.w	r1, [sl]
    4e3e:	f8d4 1009 	ldr.w	r1, [r4, #9]
    4e42:	f8ca 1004 	str.w	r1, [sl, #4]
    4e46:	e7d9      	b.n	4dfc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    4e48:	6862      	ldr	r2, [r4, #4]
    4e4a:	b922      	cbnz	r2, 4e56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    4e4c:	f240 413d 	movw	r1, #1085	; 0x43d
    4e50:	e015      	b.n	4e7e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    4e52:	6862      	ldr	r2, [r4, #4]
    4e54:	b11a      	cbz	r2, 4e5e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf2>
    4e56:	4651      	mov	r1, sl
    4e58:	4620      	mov	r0, r4
    4e5a:	4790      	blx	r2
    4e5c:	e7ce      	b.n	4dfc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    4e5e:	f240 4147 	movw	r1, #1095	; 0x447
    4e62:	e00c      	b.n	4e7e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    4e64:	480d      	ldr	r0, [pc, #52]	; (4e9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>)
    4e66:	6802      	ldr	r2, [r0, #0]
    4e68:	b122      	cbz	r2, 4e74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    4e6a:	6860      	ldr	r0, [r4, #4]
    4e6c:	b128      	cbz	r0, 4e7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    4e6e:	8800      	ldrh	r0, [r0, #0]
    4e70:	4651      	mov	r1, sl
    4e72:	4790      	blx	r2
    4e74:	2002      	movs	r0, #2
    4e76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e7a:	f44f 618a 	mov.w	r1, #1104	; 0x450
    4e7e:	2010      	movs	r0, #16
    4e80:	f7fe feca 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e84:	f240 416b 	movw	r1, #1131	; 0x46b
    4e88:	e7f9      	b.n	4e7e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    4e8a:	2004      	movs	r0, #4
    4e8c:	e7f3      	b.n	4e76 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    4e8e:	0000      	.short	0x0000
    4e90:	20000d18 	.word	0x20000d18
    4e94:	20000cec 	.word	0x20000cec
    4e98:	200000d0 	.word	0x200000d0
    4e9c:	200000d4 	.word	0x200000d4

00004ea0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    4ea0:	4901      	ldr	r1, [pc, #4]	; (4ea8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    4ea2:	7008      	strb	r0, [r1, #0]
    4ea4:	f000 b902 	b.w	50ac <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x200>
    4ea8:	2000018c 	.word	0x2000018c

00004eac <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    4eac:	4902      	ldr	r1, [pc, #8]	; (4eb8 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    4eae:	4801      	ldr	r0, [pc, #4]	; (4eb4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    4eb0:	6008      	str	r0, [r1, #0]
    4eb2:	4770      	bx	lr
    4eb4:	0000910b 	.word	0x0000910b
    4eb8:	200000d0 	.word	0x200000d0
    4ebc:	b538      	push	{r3, r4, r5, lr}
    4ebe:	4602      	mov	r2, r0
    4ec0:	4b11      	ldr	r3, [pc, #68]	; (4f08 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x5c>)
    4ec2:	2000      	movs	r0, #0
    4ec4:	7010      	strb	r0, [r2, #0]
    4ec6:	6858      	ldr	r0, [r3, #4]
    4ec8:	7a01      	ldrb	r1, [r0, #8]
    4eca:	f88d 1000 	strb.w	r1, [sp]
    4ece:	9900      	ldr	r1, [sp, #0]
    4ed0:	9100      	str	r1, [sp, #0]
    4ed2:	f89d 5000 	ldrb.w	r5, [sp]
    4ed6:	2401      	movs	r4, #1
    4ed8:	2d01      	cmp	r5, #1
    4eda:	d006      	beq.n	4eea <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x3e>
    4edc:	f3ef 8110 	mrs	r1, PRIMASK
    4ee0:	b672      	cpsid	i
    4ee2:	6805      	ldr	r5, [r0, #0]
    4ee4:	605d      	str	r5, [r3, #4]
    4ee6:	b111      	cbz	r1, 4eee <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x42>
    4ee8:	e002      	b.n	4ef0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x44>
    4eea:	2000      	movs	r0, #0
    4eec:	bd38      	pop	{r3, r4, r5, pc}
    4eee:	b662      	cpsie	i
    4ef0:	7a01      	ldrb	r1, [r0, #8]
    4ef2:	f88d 1000 	strb.w	r1, [sp]
    4ef6:	9900      	ldr	r1, [sp, #0]
    4ef8:	9100      	str	r1, [sp, #0]
    4efa:	f89d 3000 	ldrb.w	r3, [sp]
    4efe:	2b00      	cmp	r3, #0
    4f00:	d1f4      	bne.n	4eec <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x40>
    4f02:	7014      	strb	r4, [r2, #0]
    4f04:	bd38      	pop	{r3, r4, r5, pc}
    4f06:	0000      	.short	0x0000
    4f08:	20000d18 	.word	0x20000d18
    4f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f10:	b086      	sub	sp, #24
    4f12:	000f      	movs	r7, r1
    4f14:	4604      	mov	r4, r0
    4f16:	4691      	mov	r9, r2
    4f18:	d013      	beq.n	4f42 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x96>
    4f1a:	6878      	ldr	r0, [r7, #4]
    4f1c:	b188      	cbz	r0, 4f42 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x96>
    4f1e:	f100 0580 	add.w	r5, r0, #128	; 0x80
    4f22:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    4f26:	8806      	ldrh	r6, [r0, #0]
    4f28:	4610      	mov	r0, r2
    4f2a:	f04f 0800 	mov.w	r8, #0
    4f2e:	2a12      	cmp	r2, #18
    4f30:	d078      	beq.n	5024 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x178>
    4f32:	dc09      	bgt.n	4f48 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x9c>
    4f34:	f04f 0a01 	mov.w	sl, #1
    4f38:	2803      	cmp	r0, #3
    4f3a:	d00a      	beq.n	4f52 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xa6>
    4f3c:	2a0d      	cmp	r2, #13
    4f3e:	d170      	bne.n	5022 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x176>
    4f40:	e01a      	b.n	4f78 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xcc>
    4f42:	f240 210b 	movw	r1, #523	; 0x20b
    4f46:	e0ac      	b.n	50a2 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1f6>
    4f48:	281e      	cmp	r0, #30
    4f4a:	d04c      	beq.n	4fe6 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x13a>
    4f4c:	2a1f      	cmp	r2, #31
    4f4e:	d17f      	bne.n	5050 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1a4>
    4f50:	e026      	b.n	4fa0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xf4>
    4f52:	2d00      	cmp	r5, #0
    4f54:	d00f      	beq.n	4f76 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xca>
    4f56:	f884 8001 	strb.w	r8, [r4, #1]
    4f5a:	f884 a000 	strb.w	sl, [r4]
    4f5e:	f884 8004 	strb.w	r8, [r4, #4]
    4f62:	f8a4 6005 	strh.w	r6, [r4, #5]
    4f66:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
    4f6a:	71e0      	strb	r0, [r4, #7]
    4f6c:	f835 0f60 	ldrh.w	r0, [r5, #96]!
    4f70:	8120      	strh	r0, [r4, #8]
    4f72:	8868      	ldrh	r0, [r5, #2]
    4f74:	8160      	strh	r0, [r4, #10]
    4f76:	e075      	b.n	5064 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1b8>
    4f78:	4630      	mov	r0, r6
    4f7a:	f7ff f9ff 	bl	437c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4f7e:	b160      	cbz	r0, 4f9a <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xee>
    4f80:	f884 8001 	strb.w	r8, [r4, #1]
    4f84:	220d      	movs	r2, #13
    4f86:	7022      	strb	r2, [r4, #0]
    4f88:	80e6      	strh	r6, [r4, #6]
    4f8a:	f8a4 a008 	strh.w	sl, [r4, #8]
    4f8e:	4641      	mov	r1, r8
    4f90:	f884 a004 	strb.w	sl, [r4, #4]
    4f94:	f003 fba9 	bl	86ea <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    4f98:	e064      	b.n	5064 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1b8>
    4f9a:	f240 1153 	movw	r1, #339	; 0x153
    4f9e:	e080      	b.n	50a2 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1f6>
    4fa0:	f7ff fea2 	bl	4ce8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    4fa4:	b3e8      	cbz	r0, 5022 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x176>
    4fa6:	f887 8008 	strb.w	r8, [r7, #8]
    4faa:	4630      	mov	r0, r6
    4fac:	f8ad 6000 	strh.w	r6, [sp]
    4fb0:	a902      	add	r1, sp, #8
    4fb2:	f003 fe9b 	bl	8cec <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    4fb6:	b110      	cbz	r0, 4fbe <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x112>
    4fb8:	f240 1125 	movw	r1, #293	; 0x125
    4fbc:	e071      	b.n	50a2 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1f6>
    4fbe:	9803      	ldr	r0, [sp, #12]
    4fc0:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    4fc4:	f88d 1002 	strb.w	r1, [sp, #2]
    4fc8:	7841      	ldrb	r1, [r0, #1]
    4fca:	f88d 1003 	strb.w	r1, [sp, #3]
    4fce:	8840      	ldrh	r0, [r0, #2]
    4fd0:	f8ad 0004 	strh.w	r0, [sp, #4]
    4fd4:	2102      	movs	r1, #2
    4fd6:	4668      	mov	r0, sp
    4fd8:	f004 ff33 	bl	9e42 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    4fdc:	2800      	cmp	r0, #0
    4fde:	d034      	beq.n	504a <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x19e>
    4fe0:	f240 113b 	movw	r1, #315	; 0x13b
    4fe4:	e05d      	b.n	50a2 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1f6>
    4fe6:	f7ff fe75 	bl	4cd4 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    4fea:	b1d0      	cbz	r0, 5022 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x176>
    4fec:	f887 8008 	strb.w	r8, [r7, #8]
    4ff0:	a903      	add	r1, sp, #12
    4ff2:	4630      	mov	r0, r6
    4ff4:	f004 fe1c 	bl	9c30 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    4ff8:	b110      	cbz	r0, 5000 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x154>
    4ffa:	f44f 71a1 	mov.w	r1, #322	; 0x142
    4ffe:	e050      	b.n	50a2 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1f6>
    5000:	f8ad 6000 	strh.w	r6, [sp]
    5004:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    5008:	f8ad 0002 	strh.w	r0, [sp, #2]
    500c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    5010:	f8ad 0004 	strh.w	r0, [sp, #4]
    5014:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    5018:	f8ad 0006 	strh.w	r0, [sp, #6]
    501c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    5020:	e001      	b.n	5026 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x17a>
    5022:	e015      	b.n	5050 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1a4>
    5024:	e009      	b.n	503a <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x18e>
    5026:	f8ad 0008 	strh.w	r0, [sp, #8]
    502a:	4668      	mov	r0, sp
    502c:	f004 fe39 	bl	9ca2 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    5030:	2800      	cmp	r0, #0
    5032:	d00a      	beq.n	504a <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x19e>
    5034:	f240 114b 	movw	r1, #331	; 0x14b
    5038:	e033      	b.n	50a2 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1f6>
    503a:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    503e:	f000 0001 	and.w	r0, r0, #1
    5042:	f7ff fe3b 	bl	4cbc <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    5046:	b130      	cbz	r0, 5056 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1aa>
    5048:	2000      	movs	r0, #0
    504a:	b006      	add	sp, #24
    504c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5050:	f1b9 0f0a 	cmp.w	r9, #10
    5054:	d008      	beq.n	5068 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1bc>
    5056:	4814      	ldr	r0, [pc, #80]	; (50a8 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1fc>)
    5058:	6803      	ldr	r3, [r0, #0]
    505a:	b11b      	cbz	r3, 5064 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1b8>
    505c:	6878      	ldr	r0, [r7, #4]
    505e:	464a      	mov	r2, r9
    5060:	4621      	mov	r1, r4
    5062:	4798      	blx	r3
    5064:	2001      	movs	r0, #1
    5066:	e7f0      	b.n	504a <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x19e>
    5068:	4630      	mov	r0, r6
    506a:	f7ff f971 	bl	4350 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    506e:	f003 fb0b 	bl	8688 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5072:	b1a0      	cbz	r0, 509e <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1f2>
    5074:	4630      	mov	r0, r6
    5076:	f003 fd91 	bl	8b9c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    507a:	2100      	movs	r1, #0
    507c:	4630      	mov	r0, r6
    507e:	f7ff f805 	bl	408c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5082:	2d00      	cmp	r5, #0
    5084:	d0ee      	beq.n	5064 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1b8>
    5086:	f884 8001 	strb.w	r8, [r4, #1]
    508a:	210a      	movs	r1, #10
    508c:	7021      	strb	r1, [r4, #0]
    508e:	f884 8004 	strb.w	r8, [r4, #4]
    5092:	f8a4 6005 	strh.w	r6, [r4, #5]
    5096:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
    509a:	71e0      	strb	r0, [r4, #7]
    509c:	e7e2      	b.n	5064 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x1b8>
    509e:	f44f 7113 	mov.w	r1, #588	; 0x24c
    50a2:	2010      	movs	r0, #16
    50a4:	f7fe fdb8 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50a8:	200000d8 	.word	0x200000d8
    50ac:	4809      	ldr	r0, [pc, #36]	; (50d4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x228>)
    50ae:	b510      	push	{r4, lr}
    50b0:	2100      	movs	r1, #0
    50b2:	6141      	str	r1, [r0, #20]
    50b4:	6181      	str	r1, [r0, #24]
    50b6:	61c1      	str	r1, [r0, #28]
    50b8:	6201      	str	r1, [r0, #32]
    50ba:	2212      	movs	r2, #18
    50bc:	f002 fe91 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    50c0:	4804      	ldr	r0, [pc, #16]	; (50d4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x228>)
    50c2:	3018      	adds	r0, #24
    50c4:	1f02      	subs	r2, r0, #4
    50c6:	1f01      	subs	r1, r0, #4
    50c8:	2301      	movs	r3, #1
    50ca:	6050      	str	r0, [r2, #4]
    50cc:	730b      	strb	r3, [r1, #12]
    50ce:	6010      	str	r0, [r2, #0]
    50d0:	bd10      	pop	{r4, pc}
    50d2:	0000      	.short	0x0000
    50d4:	20000d04 	.word	0x20000d04

000050d8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    50d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    50da:	f06f 021f 	mvn.w	r2, #31
    50de:	0c01      	lsrs	r1, r0, #16
    50e0:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    50e4:	251f      	movs	r5, #31
    50e6:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    50ea:	3854      	subs	r0, #84	; 0x54
    50ec:	d00d      	beq.n	510a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    50ee:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    50f2:	3855      	subs	r0, #85	; 0x55
    50f4:	d009      	beq.n	510a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    50f6:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    50fa:	38aa      	subs	r0, #170	; 0xaa
    50fc:	d005      	beq.n	510a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    50fe:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    5102:	38aa      	subs	r0, #170	; 0xaa
    5104:	d001      	beq.n	510a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    5106:	2001      	movs	r0, #1
    5108:	e000      	b.n	510c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    510a:	2000      	movs	r0, #0
    510c:	2200      	movs	r2, #0
    510e:	4613      	mov	r3, r2
    5110:	ea4f 0402 	mov.w	r4, r2
    5114:	ea82 0701 	eor.w	r7, r2, r1
    5118:	43ff      	mvns	r7, r7
    511a:	431f      	orrs	r7, r3
    511c:	1c7f      	adds	r7, r7, #1
    511e:	d00f      	beq.n	5140 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    5120:	f006 0701 	and.w	r7, r6, #1
    5124:	0852      	lsrs	r2, r2, #1
    5126:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    512a:	f005 0701 	and.w	r7, r5, #1
    512e:	085b      	lsrs	r3, r3, #1
    5130:	0876      	lsrs	r6, r6, #1
    5132:	086d      	lsrs	r5, r5, #1
    5134:	1c64      	adds	r4, r4, #1
    5136:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    513a:	2c16      	cmp	r4, #22
    513c:	d3ea      	bcc.n	5114 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    513e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5140:	2000      	movs	r0, #0
    5142:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005144 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    5144:	b510      	push	{r4, lr}
    5146:	4804      	ldr	r0, [pc, #16]	; (5158 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    5148:	f003 ff35 	bl	8fb6 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x16>
    514c:	4802      	ldr	r0, [pc, #8]	; (5158 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    514e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5152:	3008      	adds	r0, #8
    5154:	f003 bf2f 	b.w	8fb6 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x16>
    5158:	200000dc 	.word	0x200000dc

0000515c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    515c:	4801      	ldr	r0, [pc, #4]	; (5164 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    515e:	f000 b809 	b.w	5174 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    5162:	0000      	.short	0x0000
    5164:	200000dc 	.word	0x200000dc

00005168 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    5168:	4801      	ldr	r0, [pc, #4]	; (5170 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    516a:	f000 b803 	b.w	5174 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    516e:	0000      	.short	0x0000
    5170:	200000e4 	.word	0x200000e4
    5174:	b510      	push	{r4, lr}
    5176:	e9d0 2100 	ldrd	r2, r1, [r0]
    517a:	4b09      	ldr	r3, [pc, #36]	; (51a0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    517c:	4c09      	ldr	r4, [pc, #36]	; (51a4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    517e:	4353      	muls	r3, r2
    5180:	4354      	muls	r4, r2
    5182:	4051      	eors	r1, r2
    5184:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    5188:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    518c:	ea4f 41f1 	mov.w	r1, r1, ror #19
    5190:	e9c0 2100 	strd	r2, r1, [r0]
    5194:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    5198:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    519c:	4618      	mov	r0, r3
    519e:	bd10      	pop	{r4, pc}
    51a0:	c6ef3760 	.word	0xc6ef3760
    51a4:	9e3779bb 	.word	0x9e3779bb

000051a8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    51a8:	b570      	push	{r4, r5, r6, lr}
    51aa:	4604      	mov	r4, r0
    51ac:	7c00      	ldrb	r0, [r0, #16]
    51ae:	b300      	cbz	r0, 51f2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    51b0:	2802      	cmp	r0, #2
    51b2:	d01e      	beq.n	51f2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    51b4:	f05f 0001 	movs.w	r0, #1
    51b8:	f104 0151 	add.w	r1, r4, #81	; 0x51
    51bc:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    51c0:	460d      	mov	r5, r1
    51c2:	b1c0      	cbz	r0, 51f6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    51c4:	7de0      	ldrb	r0, [r4, #23]
    51c6:	b1f0      	cbz	r0, 5206 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    51c8:	f8d4 0011 	ldr.w	r0, [r4, #17]
    51cc:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    51d0:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    51d4:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    51d8:	7c20      	ldrb	r0, [r4, #16]
    51da:	f003 ff1e 	bl	901a <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x4a>
    51de:	7620      	strb	r0, [r4, #24]
    51e0:	2008      	movs	r0, #8
    51e2:	7660      	strb	r0, [r4, #25]
    51e4:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    51e8:	4629      	mov	r1, r5
    51ea:	f003 ff02 	bl	8ff2 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x22>
    51ee:	b9a8      	cbnz	r0, 521c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    51f0:	e00e      	b.n	5210 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    51f2:	2000      	movs	r0, #0
    51f4:	e7e0      	b.n	51b8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    51f6:	2000      	movs	r0, #0
    51f8:	f7ff face 	bl	4798 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    51fc:	2800      	cmp	r0, #0
    51fe:	d1eb      	bne.n	51d8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    5200:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
    5204:	e001      	b.n	520a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    5206:	f240 41bc 	movw	r1, #1212	; 0x4bc
    520a:	202d      	movs	r0, #45	; 0x2d
    520c:	f7fe fd04 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5210:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    5214:	4629      	mov	r1, r5
    5216:	f003 fef5 	bl	9004 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x34>
    521a:	b100      	cbz	r0, 521e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    521c:	2001      	movs	r0, #1
    521e:	76a0      	strb	r0, [r4, #26]
    5220:	7e20      	ldrb	r0, [r4, #24]
    5222:	b130      	cbz	r0, 5232 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    5224:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    5228:	f104 0158 	add.w	r1, r4, #88	; 0x58
    522c:	f003 fd2a 	bl	8c84 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    5230:	7660      	strb	r0, [r4, #25]
    5232:	f7ff fb6f 	bl	4914 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    5236:	490c      	ldr	r1, [pc, #48]	; (5268 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    5238:	fba0 2301 	umull	r2, r3, r0, r1
    523c:	f104 0048 	add.w	r0, r4, #72	; 0x48
    5240:	f004 f8b5 	bl	93ae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    5244:	2100      	movs	r1, #0
    5246:	4620      	mov	r0, r4
    5248:	f004 f85f 	bl	930a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4e>
    524c:	2000      	movs	r0, #0
    524e:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    5252:	78a0      	ldrb	r0, [r4, #2]
    5254:	0740      	lsls	r0, r0, #29
    5256:	d505      	bpl.n	5264 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    5258:	4620      	mov	r0, r4
    525a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    525e:	2100      	movs	r1, #0
    5260:	f000 bd40 	b.w	5ce4 <__kernel_ram_size+0x1a4>
    5264:	bd70      	pop	{r4, r5, r6, pc}
    5266:	0000      	.short	0x0000
    5268:	000f4240 	.word	0x000f4240

0000526c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    526c:	b530      	push	{r4, r5, lr}
    526e:	460c      	mov	r4, r1
    5270:	b08d      	sub	sp, #52	; 0x34
    5272:	4605      	mov	r5, r0
    5274:	4601      	mov	r1, r0
    5276:	2224      	movs	r2, #36	; 0x24
    5278:	a802      	add	r0, sp, #8
    527a:	f002 fd38 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    527e:	a80b      	add	r0, sp, #44	; 0x2c
    5280:	f004 f8f2 	bl	9468 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    5284:	7aa0      	ldrb	r0, [r4, #10]
    5286:	f88d 0018 	strb.w	r0, [sp, #24]
    528a:	7820      	ldrb	r0, [r4, #0]
    528c:	f88d 0008 	strb.w	r0, [sp, #8]
    5290:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    5294:	f8ad 0000 	strh.w	r0, [sp]
    5298:	f89d 0000 	ldrb.w	r0, [sp]
    529c:	f000 0101 	and.w	r1, r0, #1
    52a0:	f3c0 0240 	ubfx	r2, r0, #1, #1
    52a4:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    52a8:	f3c0 0280 	ubfx	r2, r0, #2, #1
    52ac:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    52b0:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    52b4:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    52b8:	f3c0 1200 	ubfx	r2, r0, #4, #1
    52bc:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    52c0:	f3c0 1240 	ubfx	r2, r0, #5, #1
    52c4:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    52c8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    52cc:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    52d0:	f8ad 000a 	strh.w	r0, [sp, #10]
    52d4:	7d20      	ldrb	r0, [r4, #20]
    52d6:	2801      	cmp	r0, #1
    52d8:	d006      	beq.n	52e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    52da:	2802      	cmp	r0, #2
    52dc:	d004      	beq.n	52e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    52de:	f240 21e2 	movw	r1, #738	; 0x2e2
    52e2:	2006      	movs	r0, #6
    52e4:	f7fe fc98 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52e8:	f88d 000c 	strb.w	r0, [sp, #12]
    52ec:	7a61      	ldrb	r1, [r4, #9]
    52ee:	a80b      	add	r0, sp, #44	; 0x2c
    52f0:	f004 f8a1 	bl	9436 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    52f4:	7d20      	ldrb	r0, [r4, #20]
    52f6:	2101      	movs	r1, #1
    52f8:	2802      	cmp	r0, #2
    52fa:	d102      	bne.n	5302 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    52fc:	7d60      	ldrb	r0, [r4, #21]
    52fe:	1c40      	adds	r0, r0, #1
    5300:	b2c1      	uxtb	r1, r0
    5302:	7ea0      	ldrb	r0, [r4, #26]
    5304:	1c40      	adds	r0, r0, #1
    5306:	b2c2      	uxtb	r2, r0
    5308:	a80b      	add	r0, sp, #44	; 0x2c
    530a:	f004 f85b 	bl	93c4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    530e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    5312:	0700      	lsls	r0, r0, #28
    5314:	d501      	bpl.n	531a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    5316:	2000      	movs	r0, #0
    5318:	e020      	b.n	535c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    531a:	a80b      	add	r0, sp, #44	; 0x2c
    531c:	f004 f864 	bl	93e8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    5320:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    5324:	2228      	movs	r2, #40	; 0x28
    5326:	f000 fd39 	bl	5d9c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    532a:	f240 2171 	movw	r1, #625	; 0x271
    532e:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    5332:	fbb0 f0f1 	udiv	r0, r0, r1
    5336:	4348      	muls	r0, r1
    5338:	f8d4 1002 	ldr.w	r1, [r4, #2]
    533c:	f240 2371 	movw	r3, #625	; 0x271
    5340:	0a0a      	lsrs	r2, r1, #8
    5342:	f240 2171 	movw	r1, #625	; 0x271
    5346:	434a      	muls	r2, r1
    5348:	f8d4 1005 	ldr.w	r1, [r4, #5]
    534c:	0a09      	lsrs	r1, r1, #8
    534e:	4359      	muls	r1, r3
    5350:	4290      	cmp	r0, r2
    5352:	d801      	bhi.n	5358 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    5354:	9204      	str	r2, [sp, #16]
    5356:	e004      	b.n	5362 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    5358:	4288      	cmp	r0, r1
    535a:	d801      	bhi.n	5360 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    535c:	9004      	str	r0, [sp, #16]
    535e:	e000      	b.n	5362 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    5360:	9104      	str	r1, [sp, #16]
    5362:	7ca0      	ldrb	r0, [r4, #18]
    5364:	f88d 0017 	strb.w	r0, [sp, #23]
    5368:	7e20      	ldrb	r0, [r4, #24]
    536a:	2801      	cmp	r0, #1
    536c:	d000      	beq.n	5370 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    536e:	2000      	movs	r0, #0
    5370:	f88d 0014 	strb.w	r0, [sp, #20]
    5374:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5376:	f003 fb19 	bl	89ac <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    537a:	6b68      	ldr	r0, [r5, #52]	; 0x34
    537c:	f003 fbba 	bl	8af4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    5380:	2224      	movs	r2, #36	; 0x24
    5382:	a902      	add	r1, sp, #8
    5384:	4628      	mov	r0, r5
    5386:	f002 fcb2 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    538a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    538c:	62a8      	str	r0, [r5, #40]	; 0x28
    538e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    5392:	85a8      	strh	r0, [r5, #44]	; 0x2c
    5394:	7ae0      	ldrb	r0, [r4, #11]
    5396:	b168      	cbz	r0, 53b4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    5398:	2802      	cmp	r0, #2
    539a:	d00b      	beq.n	53b4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    539c:	f05f 0001 	movs.w	r0, #1
    53a0:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    53a4:	68e0      	ldr	r0, [r4, #12]
    53a6:	65a8      	str	r0, [r5, #88]	; 0x58
    53a8:	8a20      	ldrh	r0, [r4, #16]
    53aa:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    53ae:	b00d      	add	sp, #52	; 0x34
    53b0:	2000      	movs	r0, #0
    53b2:	bd30      	pop	{r4, r5, pc}
    53b4:	2000      	movs	r0, #0
    53b6:	e7f3      	b.n	53a0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

000053b8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    53b8:	4a0a      	ldr	r2, [pc, #40]	; (53e4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    53ba:	b510      	push	{r4, lr}
    53bc:	2100      	movs	r1, #0
    53be:	7011      	strb	r1, [r2, #0]
    53c0:	4c09      	ldr	r4, [pc, #36]	; (53e8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    53c2:	6060      	str	r0, [r4, #4]
    53c4:	f000 f822 	bl	540c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    53c8:	b110      	cbz	r0, 53d0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    53ca:	f44f 714b 	mov.w	r1, #812	; 0x32c
    53ce:	e004      	b.n	53da <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    53d0:	68a0      	ldr	r0, [r4, #8]
    53d2:	2800      	cmp	r0, #0
    53d4:	d104      	bne.n	53e0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    53d6:	f240 312f 	movw	r1, #815	; 0x32f
    53da:	202d      	movs	r0, #45	; 0x2d
    53dc:	f7fe fc1c 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53e0:	bd10      	pop	{r4, pc}
    53e2:	0000      	.short	0x0000
    53e4:	20000d28 	.word	0x20000d28
    53e8:	200000ec 	.word	0x200000ec

000053ec <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    53ec:	4902      	ldr	r1, [pc, #8]	; (53f8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    53ee:	4801      	ldr	r0, [pc, #4]	; (53f4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    53f0:	6088      	str	r0, [r1, #8]
    53f2:	4770      	bx	lr
    53f4:	00005d84 	.word	0x00005d84
    53f8:	200000ec 	.word	0x200000ec

000053fc <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    53fc:	4902      	ldr	r1, [pc, #8]	; (5408 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    53fe:	6008      	str	r0, [r1, #0]
    5400:	6889      	ldr	r1, [r1, #8]
    5402:	6809      	ldr	r1, [r1, #0]
    5404:	4708      	bx	r1
    5406:	0000      	.short	0x0000
    5408:	200000ec 	.word	0x200000ec

0000540c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    540c:	4808      	ldr	r0, [pc, #32]	; (5430 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    540e:	b510      	push	{r4, lr}
    5410:	7800      	ldrb	r0, [r0, #0]
    5412:	b110      	cbz	r0, 541a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    5414:	240c      	movs	r4, #12
    5416:	4620      	mov	r0, r4
    5418:	bd10      	pop	{r4, pc}
    541a:	2400      	movs	r4, #0
    541c:	2218      	movs	r2, #24
    541e:	4621      	mov	r1, r4
    5420:	4803      	ldr	r0, [pc, #12]	; (5430 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    5422:	f002 fcde 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5426:	f001 fa1d 	bl	6864 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    542a:	f001 f93b 	bl	66a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    542e:	e7f2      	b.n	5416 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    5430:	20000d28 	.word	0x20000d28

00005434 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    5434:	4904      	ldr	r1, [pc, #16]	; (5448 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    5436:	b510      	push	{r4, lr}
    5438:	7809      	ldrb	r1, [r1, #0]
    543a:	2901      	cmp	r1, #1
    543c:	d101      	bne.n	5442 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    543e:	f000 fb7d 	bl	5b3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    5442:	2000      	movs	r0, #0
    5444:	bd10      	pop	{r4, pc}
    5446:	0000      	.short	0x0000
    5448:	20000d28 	.word	0x20000d28
    544c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5450:	000f      	movs	r7, r1
    5452:	4604      	mov	r4, r0
    5454:	d023      	beq.n	549e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x6a>
    5456:	f104 0028 	add.w	r0, r4, #40	; 0x28
    545a:	4605      	mov	r5, r0
    545c:	f003 ffed 	bl	943a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    5460:	b9b0      	cbnz	r0, 5490 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x5c>
    5462:	78a0      	ldrb	r0, [r4, #2]
    5464:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5468:	b350      	cbz	r0, 54c0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x8c>
    546a:	4628      	mov	r0, r5
    546c:	f003 ffbc 	bl	93e8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    5470:	4606      	mov	r6, r0
    5472:	4628      	mov	r0, r5
    5474:	f003 ffe1 	bl	943a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    5478:	1a30      	subs	r0, r6, r0
    547a:	b2c0      	uxtb	r0, r0
    547c:	f004 f832 	bl	94e4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    5480:	4601      	mov	r1, r0
    5482:	4835      	ldr	r0, [pc, #212]	; (5558 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x124>)
    5484:	6842      	ldr	r2, [r0, #4]
    5486:	4411      	add	r1, r2
    5488:	6041      	str	r1, [r0, #4]
    548a:	4628      	mov	r0, r5
    548c:	f003 fff3 	bl	9476 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    5490:	4628      	mov	r0, r5
    5492:	f003 ffb5 	bl	9400 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    5496:	4601      	mov	r1, r0
    5498:	4620      	mov	r0, r4
    549a:	f003 ff72 	bl	9382 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    549e:	4d2f      	ldr	r5, [pc, #188]	; (555c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x128>)
    54a0:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    54a4:	2100      	movs	r1, #0
    54a6:	6868      	ldr	r0, [r5, #4]
    54a8:	8001      	strh	r1, [r0, #0]
    54aa:	f003 ff0c 	bl	92c6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    54ae:	8860      	ldrh	r0, [r4, #2]
    54b0:	2813      	cmp	r0, #19
    54b2:	d013      	beq.n	54dc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xa8>
    54b4:	dc09      	bgt.n	54ca <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x96>
    54b6:	2810      	cmp	r0, #16
    54b8:	d036      	beq.n	5528 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xf4>
    54ba:	2812      	cmp	r0, #18
    54bc:	d109      	bne.n	54d2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x9e>
    54be:	e031      	b.n	5524 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xf0>
    54c0:	4620      	mov	r0, r4
    54c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    54c6:	f000 bb39 	b.w	5b3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    54ca:	2815      	cmp	r0, #21
    54cc:	d00f      	beq.n	54ee <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xba>
    54ce:	281d      	cmp	r0, #29
    54d0:	d00d      	beq.n	54ee <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xba>
    54d2:	f240 6172 	movw	r1, #1650	; 0x672
    54d6:	202d      	movs	r0, #45	; 0x2d
    54d8:	f7fe fb9e 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54dc:	2100      	movs	r1, #0
    54de:	6868      	ldr	r0, [r5, #4]
    54e0:	f003 fcd5 	bl	8e8e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    54e4:	2101      	movs	r1, #1
    54e6:	6868      	ldr	r0, [r5, #4]
    54e8:	f003 feed 	bl	92c6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    54ec:	e020      	b.n	5530 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xfc>
    54ee:	2101      	movs	r1, #1
    54f0:	6868      	ldr	r0, [r5, #4]
    54f2:	f003 fccc 	bl	8e8e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    54f6:	2101      	movs	r1, #1
    54f8:	6868      	ldr	r0, [r5, #4]
    54fa:	f003 fee4 	bl	92c6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    54fe:	b136      	cbz	r6, 550e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xda>
    5500:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    5504:	6868      	ldr	r0, [r5, #4]
    5506:	f003 fcdd 	bl	8ec4 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    550a:	2101      	movs	r1, #1
    550c:	e006      	b.n	551c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe8>
    550e:	f104 0158 	add.w	r1, r4, #88	; 0x58
    5512:	6868      	ldr	r0, [r5, #4]
    5514:	f003 fcd6 	bl	8ec4 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    5518:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    551c:	6868      	ldr	r0, [r5, #4]
    551e:	f003 fcd7 	bl	8ed0 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    5522:	e005      	b.n	5530 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xfc>
    5524:	2106      	movs	r1, #6
    5526:	e000      	b.n	552a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xf6>
    5528:	2102      	movs	r1, #2
    552a:	6868      	ldr	r0, [r5, #4]
    552c:	f003 fcaf 	bl	8e8e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    5530:	4620      	mov	r0, r4
    5532:	f000 fc05 	bl	5d40 <__kernel_ram_size+0x200>
    5536:	8860      	ldrh	r0, [r4, #2]
    5538:	281d      	cmp	r0, #29
    553a:	d007      	beq.n	554c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x118>
    553c:	2815      	cmp	r0, #21
    553e:	d005      	beq.n	554c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x118>
    5540:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    5544:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    5546:	6868      	ldr	r0, [r5, #4]
    5548:	f003 fc91 	bl	8e6e <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    554c:	4639      	mov	r1, r7
    554e:	4620      	mov	r0, r4
    5550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5554:	f000 b9f0 	b.w	5938 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ec>
    5558:	20000d28 	.word	0x20000d28
    555c:	200000ec 	.word	0x200000ec
    5560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5564:	4d2e      	ldr	r5, [pc, #184]	; (5620 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1ec>)
    5566:	4607      	mov	r7, r0
    5568:	7828      	ldrb	r0, [r5, #0]
    556a:	2802      	cmp	r0, #2
    556c:	d005      	beq.n	557a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x146>
    556e:	7828      	ldrb	r0, [r5, #0]
    5570:	2803      	cmp	r0, #3
    5572:	d002      	beq.n	557a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x146>
    5574:	f640 5129 	movw	r1, #3369	; 0xd29
    5578:	e028      	b.n	55cc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x198>
    557a:	4c2a      	ldr	r4, [pc, #168]	; (5624 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1f0>)
    557c:	6820      	ldr	r0, [r4, #0]
    557e:	7b01      	ldrb	r1, [r0, #12]
    5580:	b109      	cbz	r1, 5586 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x152>
    5582:	f003 ff09 	bl	9398 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    5586:	f8d4 c004 	ldr.w	ip, [r4, #4]
    558a:	f04f 0800 	mov.w	r8, #0
    558e:	f89c 0000 	ldrb.w	r0, [ip]
    5592:	f000 060f 	and.w	r6, r0, #15
    5596:	b33f      	cbz	r7, 55e8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1b4>
    5598:	6821      	ldr	r1, [r4, #0]
    559a:	09c0      	lsrs	r0, r0, #7
    559c:	f101 0351 	add.w	r3, r1, #81	; 0x51
    55a0:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    55a4:	f10c 0109 	add.w	r1, ip, #9
    55a8:	f003 fafa 	bl	8ba0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    55ac:	b1e0      	cbz	r0, 55e8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1b4>
    55ae:	4641      	mov	r1, r8
    55b0:	6860      	ldr	r0, [r4, #4]
    55b2:	f003 fc4c 	bl	8e4e <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    55b6:	b1b8      	cbz	r0, 55e8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1b4>
    55b8:	782a      	ldrb	r2, [r5, #0]
    55ba:	6820      	ldr	r0, [r4, #0]
    55bc:	4631      	mov	r1, r6
    55be:	2a02      	cmp	r2, #2
    55c0:	d007      	beq.n	55d2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x19e>
    55c2:	782a      	ldrb	r2, [r5, #0]
    55c4:	2a03      	cmp	r2, #3
    55c6:	d004      	beq.n	55d2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x19e>
    55c8:	f640 5102 	movw	r1, #3330	; 0xd02
    55cc:	202d      	movs	r0, #45	; 0x2d
    55ce:	f7fe fb23 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55d2:	68a2      	ldr	r2, [r4, #8]
    55d4:	782b      	ldrb	r3, [r5, #0]
    55d6:	6952      	ldr	r2, [r2, #20]
    55d8:	f06f 0607 	mvn.w	r6, #7
    55dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    55e0:	58d2      	ldr	r2, [r2, r3]
    55e2:	4790      	blx	r2
    55e4:	4606      	mov	r6, r0
    55e6:	e000      	b.n	55ea <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1b6>
    55e8:	2601      	movs	r6, #1
    55ea:	7ba8      	ldrb	r0, [r5, #14]
    55ec:	b118      	cbz	r0, 55f6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1c2>
    55ee:	f001 f939 	bl	6864 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    55f2:	f001 f857 	bl	66a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    55f6:	2e00      	cmp	r6, #0
    55f8:	d00f      	beq.n	561a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1e6>
    55fa:	6820      	ldr	r0, [r4, #0]
    55fc:	f003 ff88 	bl	9510 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    5600:	b130      	cbz	r0, 5610 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x1dc>
    5602:	f001 f957 	bl	68b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5606:	68a0      	ldr	r0, [r4, #8]
    5608:	6880      	ldr	r0, [r0, #8]
    560a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    560e:	4700      	bx	r0
    5610:	6820      	ldr	r0, [r4, #0]
    5612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5616:	f000 ba91 	b.w	5b3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    561a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    561e:	0000      	.short	0x0000
    5620:	20000d28 	.word	0x20000d28
    5624:	200000ec 	.word	0x200000ec
    5628:	b510      	push	{r4, lr}
    562a:	2903      	cmp	r1, #3
    562c:	d002      	beq.n	5634 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x200>
    562e:	2905      	cmp	r1, #5
    5630:	d10a      	bne.n	5648 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x214>
    5632:	e002      	b.n	563a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x206>
    5634:	f000 fb1a 	bl	5c6c <__kernel_ram_size+0x12c>
    5638:	e003      	b.n	5642 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x20e>
    563a:	4904      	ldr	r1, [pc, #16]	; (564c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x218>)
    563c:	6809      	ldr	r1, [r1, #0]
    563e:	b109      	cbz	r1, 5644 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x210>
    5640:	4788      	blx	r1
    5642:	b108      	cbz	r0, 5648 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x214>
    5644:	2000      	movs	r0, #0
    5646:	bd10      	pop	{r4, pc}
    5648:	2001      	movs	r0, #1
    564a:	bd10      	pop	{r4, pc}
    564c:	200000f8 	.word	0x200000f8
    5650:	4a09      	ldr	r2, [pc, #36]	; (5678 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x244>)
    5652:	0003      	movs	r3, r0
    5654:	6810      	ldr	r0, [r2, #0]
    5656:	d001      	beq.n	565c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x228>
    5658:	f000 ba70 	b.w	5b3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    565c:	2900      	cmp	r1, #0
    565e:	d009      	beq.n	5674 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x240>
    5660:	6891      	ldr	r1, [r2, #8]
    5662:	4a06      	ldr	r2, [pc, #24]	; (567c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x248>)
    5664:	6909      	ldr	r1, [r1, #16]
    5666:	7812      	ldrb	r2, [r2, #0]
    5668:	f06f 030f 	mvn.w	r3, #15
    566c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5670:	5889      	ldr	r1, [r1, r2]
    5672:	4708      	bx	r1
    5674:	4770      	bx	lr
    5676:	0000      	.short	0x0000
    5678:	200000ec 	.word	0x200000ec
    567c:	20000d28 	.word	0x20000d28
    5680:	b570      	push	{r4, r5, r6, lr}
    5682:	4604      	mov	r4, r0
    5684:	8840      	ldrh	r0, [r0, #2]
    5686:	2810      	cmp	r0, #16
    5688:	d019      	beq.n	56be <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x28a>
    568a:	4d10      	ldr	r5, [pc, #64]	; (56cc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x298>)
    568c:	7ba8      	ldrb	r0, [r5, #14]
    568e:	b120      	cbz	r0, 569a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x266>
    5690:	f001 f828 	bl	66e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    5694:	2040      	movs	r0, #64	; 0x40
    5696:	f001 f8f3 	bl	6880 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    569a:	480d      	ldr	r0, [pc, #52]	; (56d0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x29c>)
    569c:	6840      	ldr	r0, [r0, #4]
    569e:	f001 fb2d 	bl	6cfc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    56a2:	78a0      	ldrb	r0, [r4, #2]
    56a4:	0740      	lsls	r0, r0, #29
    56a6:	d404      	bmi.n	56b2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x27e>
    56a8:	2100      	movs	r1, #0
    56aa:	7922      	ldrb	r2, [r4, #4]
    56ac:	4608      	mov	r0, r1
    56ae:	f001 fb9d 	bl	6dec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    56b2:	2000      	movs	r0, #0
    56b4:	f001 f9f4 	bl	6aa0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    56b8:	2002      	movs	r0, #2
    56ba:	7028      	strb	r0, [r5, #0]
    56bc:	bd70      	pop	{r4, r5, r6, pc}
    56be:	4620      	mov	r0, r4
    56c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    56c4:	2101      	movs	r1, #1
    56c6:	f7ff bec1 	b.w	544c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    56ca:	0000      	.short	0x0000
    56cc:	20000d28 	.word	0x20000d28
    56d0:	200000ec 	.word	0x200000ec
    56d4:	b510      	push	{r4, lr}
    56d6:	4c12      	ldr	r4, [pc, #72]	; (5720 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2ec>)
    56d8:	6820      	ldr	r0, [r4, #0]
    56da:	f000 f825 	bl	5728 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2f4>
    56de:	6820      	ldr	r0, [r4, #0]
    56e0:	f003 ff16 	bl	9510 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    56e4:	2800      	cmp	r0, #0
    56e6:	6820      	ldr	r0, [r4, #0]
    56e8:	d00b      	beq.n	5702 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2ce>
    56ea:	490e      	ldr	r1, [pc, #56]	; (5724 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2f0>)
    56ec:	780a      	ldrb	r2, [r1, #0]
    56ee:	2a02      	cmp	r2, #2
    56f0:	d00b      	beq.n	570a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2d6>
    56f2:	780a      	ldrb	r2, [r1, #0]
    56f4:	2a03      	cmp	r2, #3
    56f6:	d008      	beq.n	570a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2d6>
    56f8:	f640 4137 	movw	r1, #3127	; 0xc37
    56fc:	202d      	movs	r0, #45	; 0x2d
    56fe:	f7fe fa8b 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5706:	f000 ba19 	b.w	5b3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    570a:	68a2      	ldr	r2, [r4, #8]
    570c:	7809      	ldrb	r1, [r1, #0]
    570e:	68d2      	ldr	r2, [r2, #12]
    5710:	f06f 0307 	mvn.w	r3, #7
    5714:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5718:	5851      	ldr	r1, [r2, r1]
    571a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    571e:	4708      	bx	r1
    5720:	200000ec 	.word	0x200000ec
    5724:	20000d28 	.word	0x20000d28
    5728:	b510      	push	{r4, lr}
    572a:	7b01      	ldrb	r1, [r0, #12]
    572c:	b109      	cbz	r1, 5732 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2fe>
    572e:	f003 fe33 	bl	9398 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    5732:	4805      	ldr	r0, [pc, #20]	; (5748 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x314>)
    5734:	7b80      	ldrb	r0, [r0, #14]
    5736:	2800      	cmp	r0, #0
    5738:	d005      	beq.n	5746 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x312>
    573a:	f001 f893 	bl	6864 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    573e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5742:	f000 bfaf 	b.w	66a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    5746:	bd10      	pop	{r4, pc}
    5748:	20000d28 	.word	0x20000d28

0000574c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    574c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5750:	4d5d      	ldr	r5, [pc, #372]	; (58c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    5752:	4604      	mov	r4, r0
    5754:	b086      	sub	sp, #24
    5756:	7828      	ldrb	r0, [r5, #0]
    5758:	2800      	cmp	r0, #0
    575a:	d14e      	bne.n	57fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    575c:	7820      	ldrb	r0, [r4, #0]
    575e:	28ff      	cmp	r0, #255	; 0xff
    5760:	d04b      	beq.n	57fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    5762:	f04f 0800 	mov.w	r8, #0
    5766:	f8a5 800c 	strh.w	r8, [r5, #12]
    576a:	f8c5 8004 	str.w	r8, [r5, #4]
    576e:	f885 8001 	strb.w	r8, [r5, #1]
    5772:	f885 8002 	strb.w	r8, [r5, #2]
    5776:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    577a:	4b54      	ldr	r3, [pc, #336]	; (58cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    577c:	4e54      	ldr	r6, [pc, #336]	; (58d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    577e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5780:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    5784:	68b0      	ldr	r0, [r6, #8]
    5786:	6840      	ldr	r0, [r0, #4]
    5788:	9003      	str	r0, [sp, #12]
    578a:	4668      	mov	r0, sp
    578c:	f001 f980 	bl	6a90 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5790:	f001 fa0e 	bl	6bb0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5794:	f001 fc76 	bl	7084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    5798:	f001 f864 	bl	6864 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    579c:	f000 ff82 	bl	66a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    57a0:	484c      	ldr	r0, [pc, #304]	; (58d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    57a2:	f001 fb4d 	bl	6e40 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    57a6:	484c      	ldr	r0, [pc, #304]	; (58d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    57a8:	f001 fb54 	bl	6e54 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    57ac:	f104 0028 	add.w	r0, r4, #40	; 0x28
    57b0:	4607      	mov	r7, r0
    57b2:	f003 fe60 	bl	9476 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    57b6:	4638      	mov	r0, r7
    57b8:	f003 fe22 	bl	9400 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    57bc:	4601      	mov	r1, r0
    57be:	4620      	mov	r0, r4
    57c0:	f003 fddf 	bl	9382 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    57c4:	f994 000e 	ldrsb.w	r0, [r4, #14]
    57c8:	f001 fa76 	bl	6cb8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    57cc:	7921      	ldrb	r1, [r4, #4]
    57ce:	2000      	movs	r0, #0
    57d0:	f001 f8fa 	bl	69c8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    57d4:	2101      	movs	r1, #1
    57d6:	60a8      	str	r0, [r5, #8]
    57d8:	b198      	cbz	r0, 5802 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    57da:	f104 0138 	add.w	r1, r4, #56	; 0x38
    57de:	6b60      	ldr	r0, [r4, #52]	; 0x34
    57e0:	f003 f957 	bl	8a92 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    57e4:	4607      	mov	r7, r0
    57e6:	f104 0140 	add.w	r1, r4, #64	; 0x40
    57ea:	6b60      	ldr	r0, [r4, #52]	; 0x34
    57ec:	f003 f954 	bl	8a98 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    57f0:	b14f      	cbz	r7, 5806 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    57f2:	f894 1020 	ldrb.w	r1, [r4, #32]
    57f6:	b951      	cbnz	r1, 580e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc2>
    57f8:	e005      	b.n	5806 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    57fa:	200c      	movs	r0, #12
    57fc:	b006      	add	sp, #24
    57fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5802:	7029      	strb	r1, [r5, #0]
    5804:	e05e      	b.n	58c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    5806:	b120      	cbz	r0, 5812 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    5808:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    580c:	b108      	cbz	r0, 5812 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    580e:	2701      	movs	r7, #1
    5810:	e000      	b.n	5814 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8>
    5812:	2700      	movs	r7, #0
    5814:	7ea0      	ldrb	r0, [r4, #26]
    5816:	b920      	cbnz	r0, 5822 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    5818:	7e20      	ldrb	r0, [r4, #24]
    581a:	b910      	cbnz	r0, 5822 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    581c:	78a0      	ldrb	r0, [r4, #2]
    581e:	0740      	lsls	r0, r0, #29
    5820:	d523      	bpl.n	586a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    5822:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    5826:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    582a:	4050      	eors	r0, r2
    582c:	ea70 0101 	orns	r1, r0, r1
    5830:	d006      	beq.n	5840 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    5832:	f7fc fe7b 	bl	252c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    5836:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    583a:	1a80      	subs	r0, r0, r2
    583c:	4199      	sbcs	r1, r3
    583e:	d200      	bcs.n	5842 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf6>
    5840:	b19f      	cbz	r7, 586a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    5842:	f7ff f867 	bl	4914 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    5846:	4925      	ldr	r1, [pc, #148]	; (58dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x190>)
    5848:	fba0 2301 	umull	r2, r3, r0, r1
    584c:	f104 0048 	add.w	r0, r4, #72	; 0x48
    5850:	f003 fdad 	bl	93ae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    5854:	2101      	movs	r1, #1
    5856:	4620      	mov	r0, r4
    5858:	f003 fd57 	bl	930a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4e>
    585c:	78a0      	ldrb	r0, [r4, #2]
    585e:	0740      	lsls	r0, r0, #29
    5860:	d503      	bpl.n	586a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    5862:	2101      	movs	r1, #1
    5864:	4620      	mov	r0, r4
    5866:	f000 fa3d 	bl	5ce4 <__kernel_ram_size+0x1a4>
    586a:	f7ff f8ab 	bl	49c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    586e:	6870      	ldr	r0, [r6, #4]
    5870:	1cc0      	adds	r0, r0, #3
    5872:	f003 f9fa 	bl	8c6a <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    5876:	73a8      	strb	r0, [r5, #14]
    5878:	78a0      	ldrb	r0, [r4, #2]
    587a:	07c0      	lsls	r0, r0, #31
    587c:	d022      	beq.n	58c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    587e:	f8cd 8010 	str.w	r8, [sp, #16]
    5882:	20ff      	movs	r0, #255	; 0xff
    5884:	f8cd 8014 	str.w	r8, [sp, #20]
    5888:	73e8      	strb	r0, [r5, #15]
    588a:	69e6      	ldr	r6, [r4, #28]
    588c:	f106 070a 	add.w	r7, r6, #10
    5890:	e013      	b.n	58ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    5892:	9c04      	ldr	r4, [sp, #16]
    5894:	42b4      	cmp	r4, r6
    5896:	d010      	beq.n	58ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    5898:	7a72      	ldrb	r2, [r6, #9]
    589a:	7a60      	ldrb	r0, [r4, #9]
    589c:	463b      	mov	r3, r7
    589e:	f104 010a 	add.w	r1, r4, #10
    58a2:	f003 f97d 	bl	8ba0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    58a6:	b140      	cbz	r0, 58ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    58a8:	78a0      	ldrb	r0, [r4, #2]
    58aa:	73e8      	strb	r0, [r5, #15]
    58ac:	f8d4 0003 	ldr.w	r0, [r4, #3]
    58b0:	6128      	str	r0, [r5, #16]
    58b2:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    58b6:	82a8      	strh	r0, [r5, #20]
    58b8:	e004      	b.n	58c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    58ba:	a804      	add	r0, sp, #16
    58bc:	f7fe fb9e 	bl	3ffc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    58c0:	2800      	cmp	r0, #0
    58c2:	d0e6      	beq.n	5892 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x146>
    58c4:	2000      	movs	r0, #0
    58c6:	e799      	b.n	57fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb0>
    58c8:	20000d28 	.word	0x20000d28
    58cc:	00005d64 	.word	0x00005d64
    58d0:	200000ec 	.word	0x200000ec
    58d4:	8e89bed6 	.word	0x8e89bed6
    58d8:	00555555 	.word	0x00555555
    58dc:	000f4240 	.word	0x000f4240
    58e0:	b510      	push	{r4, lr}
    58e2:	4604      	mov	r4, r0
    58e4:	f7ff ff32 	bl	574c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    58e8:	2800      	cmp	r0, #0
    58ea:	d108      	bne.n	58fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b2>
    58ec:	4804      	ldr	r0, [pc, #16]	; (5900 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b4>)
    58ee:	7800      	ldrb	r0, [r0, #0]
    58f0:	2801      	cmp	r0, #1
    58f2:	d003      	beq.n	58fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>
    58f4:	2100      	movs	r1, #0
    58f6:	4620      	mov	r0, r4
    58f8:	f7ff fda8 	bl	544c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    58fc:	2000      	movs	r0, #0
    58fe:	bd10      	pop	{r4, pc}
    5900:	20000d28 	.word	0x20000d28
    5904:	480a      	ldr	r0, [pc, #40]	; (5930 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    5906:	b510      	push	{r4, lr}
    5908:	490a      	ldr	r1, [pc, #40]	; (5934 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>)
    590a:	6804      	ldr	r4, [r0, #0]
    590c:	7808      	ldrb	r0, [r1, #0]
    590e:	2800      	cmp	r0, #0
    5910:	d00d      	beq.n	592e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e2>
    5912:	7808      	ldrb	r0, [r1, #0]
    5914:	2802      	cmp	r0, #2
    5916:	d002      	beq.n	591e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d2>
    5918:	7808      	ldrb	r0, [r1, #0]
    591a:	2803      	cmp	r0, #3
    591c:	d102      	bne.n	5924 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    591e:	4620      	mov	r0, r4
    5920:	f7ff ff02 	bl	5728 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x2f4>
    5924:	4620      	mov	r0, r4
    5926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    592a:	f000 b907 	b.w	5b3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    592e:	bd10      	pop	{r4, pc}
    5930:	200000ec 	.word	0x200000ec
    5934:	20000d28 	.word	0x20000d28
    5938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    593c:	4604      	mov	r4, r0
    593e:	4827      	ldr	r0, [pc, #156]	; (59dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x290>)
    5940:	460d      	mov	r5, r1
    5942:	6840      	ldr	r0, [r0, #4]
    5944:	f001 f9da 	bl	6cfc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5948:	4e25      	ldr	r6, [pc, #148]	; (59e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    594a:	2004      	movs	r0, #4
    594c:	7030      	strb	r0, [r6, #0]
    594e:	b325      	cbz	r5, 599a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    5950:	8860      	ldrh	r0, [r4, #2]
    5952:	2810      	cmp	r0, #16
    5954:	d02a      	beq.n	59ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x260>
    5956:	f104 0028 	add.w	r0, r4, #40	; 0x28
    595a:	4680      	mov	r8, r0
    595c:	68b5      	ldr	r5, [r6, #8]
    595e:	f003 fd43 	bl	93e8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    5962:	4607      	mov	r7, r0
    5964:	4640      	mov	r0, r8
    5966:	f003 fd68 	bl	943a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    596a:	1a38      	subs	r0, r7, r0
    596c:	1e40      	subs	r0, r0, #1
    596e:	b2c0      	uxtb	r0, r0
    5970:	8861      	ldrh	r1, [r4, #2]
    5972:	2228      	movs	r2, #40	; 0x28
    5974:	f000 fa32 	bl	5ddc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    5978:	4405      	add	r5, r0
    597a:	78a0      	ldrb	r0, [r4, #2]
    597c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5980:	b130      	cbz	r0, 5990 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    5982:	6870      	ldr	r0, [r6, #4]
    5984:	4405      	add	r5, r0
    5986:	f003 fdb1 	bl	94ec <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    598a:	4428      	add	r0, r5
    598c:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    5990:	7922      	ldrb	r2, [r4, #4]
    5992:	4629      	mov	r1, r5
    5994:	2000      	movs	r0, #0
    5996:	f001 f9c7 	bl	6d28 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    599a:	8860      	ldrh	r0, [r4, #2]
    599c:	2813      	cmp	r0, #19
    599e:	d013      	beq.n	59c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    59a0:	dc09      	bgt.n	59b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26a>
    59a2:	2810      	cmp	r0, #16
    59a4:	d017      	beq.n	59d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28a>
    59a6:	2812      	cmp	r0, #18
    59a8:	d109      	bne.n	59be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    59aa:	e00d      	b.n	59c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    59ac:	7921      	ldrb	r1, [r4, #4]
    59ae:	2000      	movs	r0, #0
    59b0:	f000 ffd0 	bl	6954 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    59b4:	e7f1      	b.n	599a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    59b6:	2815      	cmp	r0, #21
    59b8:	d006      	beq.n	59c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    59ba:	281d      	cmp	r0, #29
    59bc:	d004      	beq.n	59c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    59be:	f640 51b8 	movw	r1, #3512	; 0xdb8
    59c2:	202d      	movs	r0, #45	; 0x2d
    59c4:	f7fe f928 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59c8:	7922      	ldrb	r2, [r4, #4]
    59ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    59ce:	2101      	movs	r1, #1
    59d0:	2000      	movs	r0, #0
    59d2:	f001 ba0b 	b.w	6dec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    59d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59da:	0000      	.short	0x0000
    59dc:	200000ec 	.word	0x200000ec
    59e0:	20000d28 	.word	0x20000d28
    59e4:	b510      	push	{r4, lr}
    59e6:	4604      	mov	r4, r0
    59e8:	7800      	ldrb	r0, [r0, #0]
    59ea:	460b      	mov	r3, r1
    59ec:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    59f0:	29ff      	cmp	r1, #255	; 0xff
    59f2:	d010      	beq.n	5a16 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ca>
    59f4:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    59f8:	1e51      	subs	r1, r2, #1
    59fa:	4618      	mov	r0, r3
    59fc:	f7fe ff5e 	bl	48bc <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    5a00:	b130      	cbz	r0, 5a10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c4>
    5a02:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    5a06:	f040 0002 	orr.w	r0, r0, #2
    5a0a:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    5a0e:	e011      	b.n	5a34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    5a10:	f241 0102 	movw	r1, #4098	; 0x1002
    5a14:	e021      	b.n	5a5a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
    5a16:	4812      	ldr	r0, [pc, #72]	; (5a60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x314>)
    5a18:	6840      	ldr	r0, [r0, #4]
    5a1a:	7801      	ldrb	r1, [r0, #0]
    5a1c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    5a20:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    5a24:	f8d0 1003 	ldr.w	r1, [r0, #3]
    5a28:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    5a2c:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    5a30:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    5a34:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    5a38:	287f      	cmp	r0, #127	; 0x7f
    5a3a:	d00c      	beq.n	5a56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30a>
    5a3c:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    5a40:	207f      	movs	r0, #127	; 0x7f
    5a42:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    5a46:	4621      	mov	r1, r4
    5a48:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    5a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5a50:	221d      	movs	r2, #29
    5a52:	f7ff b953 	b.w	4cfc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5a56:	f640 616b 	movw	r1, #3691	; 0xe6b
    5a5a:	202d      	movs	r0, #45	; 0x2d
    5a5c:	f7fe f8dc 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a60:	200000ec 	.word	0x200000ec
    5a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a68:	4690      	mov	r8, r2
    5a6a:	460e      	mov	r6, r1
    5a6c:	4604      	mov	r4, r0
    5a6e:	2903      	cmp	r1, #3
    5a70:	d004      	beq.n	5a7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    5a72:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    5a76:	b108      	cbz	r0, 5a7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    5a78:	2001      	movs	r0, #1
    5a7a:	e000      	b.n	5a7e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    5a7c:	2000      	movs	r0, #0
    5a7e:	4681      	mov	r9, r0
    5a80:	f000 ff0a 	bl	6898 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    5a84:	4605      	mov	r5, r0
    5a86:	2e03      	cmp	r6, #3
    5a88:	d003      	beq.n	5a92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x346>
    5a8a:	2701      	movs	r7, #1
    5a8c:	2e05      	cmp	r6, #5
    5a8e:	d005      	beq.n	5a9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    5a90:	e008      	b.n	5aa4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x358>
    5a92:	78a0      	ldrb	r0, [r4, #2]
    5a94:	2702      	movs	r7, #2
    5a96:	f3c0 0040 	ubfx	r0, r0, #1, #1
    5a9a:	e001      	b.n	5aa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    5a9c:	78a0      	ldrb	r0, [r4, #2]
    5a9e:	07c0      	lsls	r0, r0, #31
    5aa0:	2800      	cmp	r0, #0
    5aa2:	d042      	beq.n	5b2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    5aa4:	f1b9 0f00 	cmp.w	r9, #0
    5aa8:	d13e      	bne.n	5b28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    5aaa:	4822      	ldr	r0, [pc, #136]	; (5b34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>)
    5aac:	7b80      	ldrb	r0, [r0, #14]
    5aae:	b140      	cbz	r0, 5ac2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    5ab0:	f003 f8de 	bl	8c70 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    5ab4:	f888 0000 	strb.w	r0, [r8]
    5ab8:	28ff      	cmp	r0, #255	; 0xff
    5aba:	d002      	beq.n	5ac2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    5abc:	f7fe ff18 	bl	48f0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    5ac0:	4305      	orrs	r5, r0
    5ac2:	4e1d      	ldr	r6, [pc, #116]	; (5b38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>)
    5ac4:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    5ac8:	f104 0358 	add.w	r3, r4, #88	; 0x58
    5acc:	6871      	ldr	r1, [r6, #4]
    5ace:	f811 0b03 	ldrb.w	r0, [r1], #3
    5ad2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    5ad6:	f003 f863 	bl	8ba0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    5ada:	f898 1000 	ldrb.w	r1, [r8]
    5ade:	29ff      	cmp	r1, #255	; 0xff
    5ae0:	d004      	beq.n	5aec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    5ae2:	b990      	cbnz	r0, 5b0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    5ae4:	7e60      	ldrb	r0, [r4, #25]
    5ae6:	4288      	cmp	r0, r1
    5ae8:	d00f      	beq.n	5b0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    5aea:	e008      	b.n	5afe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    5aec:	b138      	cbz	r0, 5afe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    5aee:	6871      	ldr	r1, [r6, #4]
    5af0:	f811 0b03 	ldrb.w	r0, [r1], #3
    5af4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    5af8:	f003 fbee 	bl	92d8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    5afc:	b128      	cbz	r0, 5b0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    5afe:	2000      	movs	r0, #0
    5b00:	78a1      	ldrb	r1, [r4, #2]
    5b02:	0749      	lsls	r1, r1, #29
    5b04:	d503      	bpl.n	5b0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c2>
    5b06:	b990      	cbnz	r0, 5b2e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    5b08:	e00e      	b.n	5b28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    5b0a:	2001      	movs	r0, #1
    5b0c:	e7f8      	b.n	5b00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    5b0e:	b975      	cbnz	r5, 5b2e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    5b10:	7be0      	ldrb	r0, [r4, #15]
    5b12:	b108      	cbz	r0, 5b18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    5b14:	42b8      	cmp	r0, r7
    5b16:	d107      	bne.n	5b28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    5b18:	6871      	ldr	r1, [r6, #4]
    5b1a:	f811 0b03 	ldrb.w	r0, [r1], #3
    5b1e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    5b22:	f003 fbd9 	bl	92d8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    5b26:	b110      	cbz	r0, 5b2e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    5b28:	2000      	movs	r0, #0
    5b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b2e:	2001      	movs	r0, #1
    5b30:	e7fb      	b.n	5b2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    5b32:	0000      	.short	0x0000
    5b34:	20000d28 	.word	0x20000d28
    5b38:	200000ec 	.word	0x200000ec
    5b3c:	b570      	push	{r4, r5, r6, lr}
    5b3e:	4604      	mov	r4, r0
    5b40:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    5b42:	4d10      	ldr	r5, [pc, #64]	; (5b84 <__kernel_ram_size+0x44>)
    5b44:	1c40      	adds	r0, r0, #1
    5b46:	8620      	strh	r0, [r4, #48]	; 0x30
    5b48:	7ba8      	ldrb	r0, [r5, #14]
    5b4a:	2600      	movs	r6, #0
    5b4c:	b120      	cbz	r0, 5b58 <__kernel_ram_size+0x18>
    5b4e:	f000 fe89 	bl	6864 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    5b52:	f000 fda7 	bl	66a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    5b56:	73ae      	strb	r6, [r5, #14]
    5b58:	702e      	strb	r6, [r5, #0]
    5b5a:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    5b5e:	b108      	cbz	r0, 5b64 <__kernel_ram_size+0x24>
    5b60:	2101      	movs	r1, #1
    5b62:	e00a      	b.n	5b7a <__kernel_ram_size+0x3a>
    5b64:	7b60      	ldrb	r0, [r4, #13]
    5b66:	b138      	cbz	r0, 5b78 <__kernel_ram_size+0x38>
    5b68:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    5b6a:	4288      	cmp	r0, r1
    5b6c:	d804      	bhi.n	5b78 <__kernel_ram_size+0x38>
    5b6e:	2101      	movs	r1, #1
    5b70:	4620      	mov	r0, r4
    5b72:	f003 fcdf 	bl	9534 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    5b76:	bd70      	pop	{r4, r5, r6, pc}
    5b78:	2100      	movs	r1, #0
    5b7a:	4620      	mov	r0, r4
    5b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5b80:	f003 bcd8 	b.w	9534 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    5b84:	20000d28 	.word	0x20000d28
    5b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b8a:	4604      	mov	r4, r0
    5b8c:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
    5b90:	4616      	mov	r6, r2
    5b92:	460d      	mov	r5, r1
    5b94:	f88d 0000 	strb.w	r0, [sp]
    5b98:	9800      	ldr	r0, [sp, #0]
    5b9a:	9000      	str	r0, [sp, #0]
    5b9c:	f89d 0000 	ldrb.w	r0, [sp]
    5ba0:	b110      	cbz	r0, 5ba8 <__kernel_ram_size+0x68>
    5ba2:	f640 416b 	movw	r1, #3179	; 0xc6b
    5ba6:	e055      	b.n	5c54 <__kernel_ram_size+0x114>
    5ba8:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
    5bac:	2700      	movs	r7, #0
    5bae:	8828      	ldrh	r0, [r5, #0]
    5bb0:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
    5bb4:	2b00      	cmp	r3, #0
    5bb6:	d14a      	bne.n	5c4e <__kernel_ram_size+0x10e>
    5bb8:	6928      	ldr	r0, [r5, #16]
    5bba:	f003 f8a4 	bl	8d06 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5bbe:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    5bc2:	8b28      	ldrh	r0, [r5, #24]
    5bc4:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    5bc8:	8b68      	ldrh	r0, [r5, #26]
    5bca:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    5bce:	f895 020d 	ldrb.w	r0, [r5, #525]	; 0x20d
    5bd2:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    5bd6:	7e20      	ldrb	r0, [r4, #24]
    5bd8:	f104 0151 	add.w	r1, r4, #81	; 0x51
    5bdc:	460d      	mov	r5, r1
    5bde:	b120      	cbz	r0, 5bea <__kernel_ram_size+0xaa>
    5be0:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    5be4:	f003 fa0e 	bl	9004 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x34>
    5be8:	b940      	cbnz	r0, 5bfc <__kernel_ram_size+0xbc>
    5bea:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5bee:	b170      	cbz	r0, 5c0e <__kernel_ram_size+0xce>
    5bf0:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    5bf4:	4629      	mov	r1, r5
    5bf6:	f003 f9fc 	bl	8ff2 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x22>
    5bfa:	b140      	cbz	r0, 5c0e <__kernel_ram_size+0xce>
    5bfc:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    5c00:	f8c4 0082 	str.w	r0, [r4, #130]	; 0x82
    5c04:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    5c08:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    5c0c:	e003      	b.n	5c16 <__kernel_ram_size+0xd6>
    5c0e:	f8c4 7082 	str.w	r7, [r4, #130]	; 0x82
    5c12:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    5c16:	4814      	ldr	r0, [pc, #80]	; (5c68 <__kernel_ram_size+0x128>)
    5c18:	2eff      	cmp	r6, #255	; 0xff
    5c1a:	6840      	ldr	r0, [r0, #4]
    5c1c:	7801      	ldrb	r1, [r0, #0]
    5c1e:	f3c1 1180 	ubfx	r1, r1, #6, #1
    5c22:	f884 107b 	strb.w	r1, [r4, #123]	; 0x7b
    5c26:	f850 1f03 	ldr.w	r1, [r0, #3]!
    5c2a:	d016      	beq.n	5c5a <__kernel_ram_size+0x11a>
    5c2c:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    5c30:	8880      	ldrh	r0, [r0, #4]
    5c32:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    5c36:	f104 027c 	add.w	r2, r4, #124	; 0x7c
    5c3a:	1e51      	subs	r1, r2, #1
    5c3c:	4630      	mov	r0, r6
    5c3e:	f7fe fe3d 	bl	48bc <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    5c42:	b128      	cbz	r0, 5c50 <__kernel_ram_size+0x110>
    5c44:	f814 0f7b 	ldrb.w	r0, [r4, #123]!
    5c48:	f040 0002 	orr.w	r0, r0, #2
    5c4c:	7020      	strb	r0, [r4, #0]
    5c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c50:	f640 418c 	movw	r1, #3212	; 0xc8c
    5c54:	202d      	movs	r0, #45	; 0x2d
    5c56:	f7fd ffdf 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c5a:	f844 1f7c 	str.w	r1, [r4, #124]!
    5c5e:	8880      	ldrh	r0, [r0, #4]
    5c60:	80a0      	strh	r0, [r4, #4]
    5c62:	60e7      	str	r7, [r4, #12]
    5c64:	8227      	strh	r7, [r4, #16]
    5c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c68:	200000ec 	.word	0x200000ec
    5c6c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    5c70:	4604      	mov	r4, r0
    5c72:	20ff      	movs	r0, #255	; 0xff
    5c74:	f88d 0000 	strb.w	r0, [sp]
    5c78:	2501      	movs	r5, #1
    5c7a:	466a      	mov	r2, sp
    5c7c:	2103      	movs	r1, #3
    5c7e:	4620      	mov	r0, r4
    5c80:	f7ff fef0 	bl	5a64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    5c84:	b330      	cbz	r0, 5cd4 <__kernel_ram_size+0x194>
    5c86:	7b20      	ldrb	r0, [r4, #12]
    5c88:	2700      	movs	r7, #0
    5c8a:	b168      	cbz	r0, 5ca8 <__kernel_ram_size+0x168>
    5c8c:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    5c90:	f88d 0004 	strb.w	r0, [sp, #4]
    5c94:	9801      	ldr	r0, [sp, #4]
    5c96:	9001      	str	r0, [sp, #4]
    5c98:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5c9c:	b920      	cbnz	r0, 5ca8 <__kernel_ram_size+0x168>
    5c9e:	f89d 1000 	ldrb.w	r1, [sp]
    5ca2:	4620      	mov	r0, r4
    5ca4:	f7ff fe9e 	bl	59e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>
    5ca8:	4e0c      	ldr	r6, [pc, #48]	; (5cdc <__kernel_ram_size+0x19c>)
    5caa:	2104      	movs	r1, #4
    5cac:	6870      	ldr	r0, [r6, #4]
    5cae:	8007      	strh	r7, [r0, #0]
    5cb0:	f003 f8ed 	bl	8e8e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    5cb4:	4620      	mov	r0, r4
    5cb6:	f000 f843 	bl	5d40 <__kernel_ram_size+0x200>
    5cba:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    5cbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
    5cc0:	6870      	ldr	r0, [r6, #4]
    5cc2:	f003 f91b 	bl	8efc <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    5cc6:	4906      	ldr	r1, [pc, #24]	; (5ce0 <__kernel_ram_size+0x1a0>)
    5cc8:	2005      	movs	r0, #5
    5cca:	7008      	strb	r0, [r1, #0]
    5ccc:	6870      	ldr	r0, [r6, #4]
    5cce:	f001 f815 	bl	6cfc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5cd2:	e000      	b.n	5cd6 <__kernel_ram_size+0x196>
    5cd4:	2500      	movs	r5, #0
    5cd6:	4628      	mov	r0, r5
    5cd8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    5cdc:	200000ec 	.word	0x200000ec
    5ce0:	20000d28 	.word	0x20000d28
    5ce4:	b570      	push	{r4, r5, r6, lr}
    5ce6:	4604      	mov	r4, r0
    5ce8:	460e      	mov	r6, r1
    5cea:	7e40      	ldrb	r0, [r0, #25]
    5cec:	f7fe fdc0 	bl	4870 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5cf0:	0005      	movs	r5, r0
    5cf2:	d019      	beq.n	5d28 <__kernel_ram_size+0x1e8>
    5cf4:	2110      	movs	r1, #16
    5cf6:	f003 f87d 	bl	8df4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5cfa:	2800      	cmp	r0, #0
    5cfc:	d114      	bne.n	5d28 <__kernel_ram_size+0x1e8>
    5cfe:	2001      	movs	r0, #1
    5d00:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    5d04:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    5d08:	4632      	mov	r2, r6
    5d0a:	460c      	mov	r4, r1
    5d0c:	4628      	mov	r0, r5
    5d0e:	f002 ff77 	bl	8c00 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    5d12:	4621      	mov	r1, r4
    5d14:	4c05      	ldr	r4, [pc, #20]	; (5d2c <__kernel_ram_size+0x1ec>)
    5d16:	6860      	ldr	r0, [r4, #4]
    5d18:	f003 f8d4 	bl	8ec4 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    5d1c:	6860      	ldr	r0, [r4, #4]
    5d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5d22:	2101      	movs	r1, #1
    5d24:	f003 b8d4 	b.w	8ed0 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    5d28:	bd70      	pop	{r4, r5, r6, pc}
    5d2a:	0000      	.short	0x0000
    5d2c:	200000ec 	.word	0x200000ec
    5d30:	4802      	ldr	r0, [pc, #8]	; (5d3c <__kernel_ram_size+0x1fc>)
    5d32:	2101      	movs	r1, #1
    5d34:	6800      	ldr	r0, [r0, #0]
    5d36:	f7ff bb89 	b.w	544c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    5d3a:	0000      	.short	0x0000
    5d3c:	200000ec 	.word	0x200000ec
    5d40:	b570      	push	{r4, r5, r6, lr}
    5d42:	4d07      	ldr	r5, [pc, #28]	; (5d60 <__kernel_ram_size+0x220>)
    5d44:	4604      	mov	r4, r0
    5d46:	f100 0151 	add.w	r1, r0, #81	; 0x51
    5d4a:	6868      	ldr	r0, [r5, #4]
    5d4c:	f003 f8c7 	bl	8ede <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    5d50:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    5d54:	6868      	ldr	r0, [r5, #4]
    5d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5d5a:	f003 b8c6 	b.w	8eea <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    5d5e:	0000      	.short	0x0000
    5d60:	200000ec 	.word	0x200000ec
    5d64:	000056d5 	.word	0x000056d5
    5d68:	00005561 	.word	0x00005561
    5d6c:	00005651 	.word	0x00005651
    5d70:	00000000 	.word	0x00000000
    5d74:	00005629 	.word	0x00005629
    5d78:	00005681 	.word	0x00005681
    5d7c:	000092ff 	.word	0x000092ff
    5d80:	00009305 	.word	0x00009305
    5d84:	000058e1 	.word	0x000058e1
    5d88:	00005905 	.word	0x00005905
    5d8c:	00005d31 	.word	0x00005d31
    5d90:	00005d80 	.word	0x00005d80
    5d94:	00005d78 	.word	0x00005d78
    5d98:	00005d74 	.word	0x00005d74

00005d9c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    5d9c:	b510      	push	{r4, lr}
    5d9e:	1e42      	subs	r2, r0, #1
    5da0:	2a02      	cmp	r2, #2
    5da2:	d901      	bls.n	5da8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    5da4:	21ca      	movs	r1, #202	; 0xca
    5da6:	e009      	b.n	5dbc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    5da8:	1e40      	subs	r0, r0, #1
    5daa:	2910      	cmp	r1, #16
    5dac:	d009      	beq.n	5dc2 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    5dae:	2912      	cmp	r1, #18
    5db0:	d00c      	beq.n	5dcc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    5db2:	2913      	cmp	r1, #19
    5db4:	d00a      	beq.n	5dcc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    5db6:	2915      	cmp	r1, #21
    5db8:	d005      	beq.n	5dc6 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    5dba:	21d8      	movs	r1, #216	; 0xd8
    5dbc:	202f      	movs	r0, #47	; 0x2f
    5dbe:	f7fd ff2b 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5dc2:	4905      	ldr	r1, [pc, #20]	; (5dd8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    5dc4:	e004      	b.n	5dd0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    5dc6:	4904      	ldr	r1, [pc, #16]	; (5dd8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    5dc8:	1d89      	adds	r1, r1, #6
    5dca:	e001      	b.n	5dd0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    5dcc:	4902      	ldr	r1, [pc, #8]	; (5dd8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    5dce:	1f89      	subs	r1, r1, #6
    5dd0:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5dd4:	bd10      	pop	{r4, pc}
    5dd6:	0000      	.short	0x0000
    5dd8:	00009504 	.word	0x00009504

00005ddc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    5ddc:	1e42      	subs	r2, r0, #1
    5dde:	b510      	push	{r4, lr}
    5de0:	b2d2      	uxtb	r2, r2
    5de2:	2a01      	cmp	r2, #1
    5de4:	d903      	bls.n	5dee <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    5de6:	291d      	cmp	r1, #29
    5de8:	d001      	beq.n	5dee <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    5dea:	21ee      	movs	r1, #238	; 0xee
    5dec:	e00d      	b.n	5e0a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    5dee:	2913      	cmp	r1, #19
    5df0:	d013      	beq.n	5e1a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    5df2:	dc04      	bgt.n	5dfe <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    5df4:	2910      	cmp	r1, #16
    5df6:	d00b      	beq.n	5e10 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    5df8:	2912      	cmp	r1, #18
    5dfa:	d104      	bne.n	5e06 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    5dfc:	e00d      	b.n	5e1a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    5dfe:	2915      	cmp	r1, #21
    5e00:	d008      	beq.n	5e14 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    5e02:	291d      	cmp	r1, #29
    5e04:	d00e      	beq.n	5e24 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    5e06:	f44f 7181 	mov.w	r1, #258	; 0x102
    5e0a:	202f      	movs	r0, #47	; 0x2f
    5e0c:	f7fd ff04 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e10:	4807      	ldr	r0, [pc, #28]	; (5e30 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    5e12:	e004      	b.n	5e1e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    5e14:	4806      	ldr	r0, [pc, #24]	; (5e30 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    5e16:	3008      	adds	r0, #8
    5e18:	e001      	b.n	5e1e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    5e1a:	4805      	ldr	r0, [pc, #20]	; (5e30 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    5e1c:	1d00      	adds	r0, r0, #4
    5e1e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    5e22:	bd10      	pop	{r4, pc}
    5e24:	f240 315a 	movw	r1, #858	; 0x35a
    5e28:	fb10 f001 	smulbb	r0, r0, r1
    5e2c:	bd10      	pop	{r4, pc}
    5e2e:	0000      	.short	0x0000
    5e30:	000094f2 	.word	0x000094f2

00005e34 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    5e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e38:	4604      	mov	r4, r0
    5e3a:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    5e3e:	4616      	mov	r6, r2
    5e40:	460d      	mov	r5, r1
    5e42:	2800      	cmp	r0, #0
    5e44:	d15e      	bne.n	5f04 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    5e46:	4621      	mov	r1, r4
    5e48:	484c      	ldr	r0, [pc, #304]	; (5f7c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x148>)
    5e4a:	f7fc f95f 	bl	210c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    5e4e:	4607      	mov	r7, r0
    5e50:	2820      	cmp	r0, #32
    5e52:	d057      	beq.n	5f04 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    5e54:	2250      	movs	r2, #80	; 0x50
    5e56:	2100      	movs	r1, #0
    5e58:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    5e5c:	f001 ffc1 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e60:	f884 70c8 	strb.w	r7, [r4, #200]	; 0xc8
    5e64:	2701      	movs	r7, #1
    5e66:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    5e6a:	f884 70e0 	strb.w	r7, [r4, #224]	; 0xe0
    5e6e:	b135      	cbz	r5, 5e7e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    5e70:	f7ff f97a 	bl	5168 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    5e74:	f000 0007 	and.w	r0, r0, #7
    5e78:	1c40      	adds	r0, r0, #1
    5e7a:	f885 023c 	strb.w	r0, [r5, #572]	; 0x23c
    5e7e:	4620      	mov	r0, r4
    5e80:	f003 fc11 	bl	96a6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf8>
    5e84:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    5e88:	2002      	movs	r0, #2
    5e8a:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    5e8e:	f884 70f3 	strb.w	r7, [r4, #243]	; 0xf3
    5e92:	2500      	movs	r5, #0
    5e94:	46b8      	mov	r8, r7
    5e96:	f804 5fe8 	strb.w	r5, [r4, #232]!
    5e9a:	f7fd fa53 	bl	3344 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    5e9e:	4607      	mov	r7, r0
    5ea0:	f001 fdc2 	bl	7a28 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    5ea4:	8921      	ldrh	r1, [r4, #8]
    5ea6:	3ce8      	subs	r4, #232	; 0xe8
    5ea8:	4288      	cmp	r0, r1
    5eaa:	d800      	bhi.n	5eae <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    5eac:	4608      	mov	r0, r1
    5eae:	4438      	add	r0, r7
    5eb0:	30cc      	adds	r0, #204	; 0xcc
    5eb2:	b287      	uxth	r7, r0
    5eb4:	4620      	mov	r0, r4
    5eb6:	f003 f9b8 	bl	922a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    5eba:	b330      	cbz	r0, 5f0a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    5ebc:	f004 f9d9 	bl	a272 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    5ec0:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    5ec4:	b281      	uxth	r1, r0
    5ec6:	4630      	mov	r0, r6
    5ec8:	f001 fde2 	bl	7a90 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    5ecc:	4430      	add	r0, r6
    5ece:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    5ed2:	3490      	adds	r4, #144	; 0x90
    5ed4:	f7fc fb2a 	bl	252c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    5ed8:	19c0      	adds	r0, r0, r7
    5eda:	4169      	adcs	r1, r5
    5edc:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    5ee0:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    5ee4:	f824 5c6e 	strh.w	r5, [r4, #-110]
    5ee8:	2001      	movs	r0, #1
    5eea:	f003 fafb 	bl	94e4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    5eee:	f500 7088 	add.w	r0, r0, #272	; 0x110
    5ef2:	1a30      	subs	r0, r6, r0
    5ef4:	6460      	str	r0, [r4, #68]	; 0x44
    5ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5efa:	0841      	lsrs	r1, r0, #1
    5efc:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    5f00:	3c90      	subs	r4, #144	; 0x90
    5f02:	e023      	b.n	5f4c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    5f04:	200c      	movs	r0, #12
    5f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f0a:	2100      	movs	r1, #0
    5f0c:	4620      	mov	r0, r4
    5f0e:	f003 fb97 	bl	9640 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x92>
    5f12:	f8df 806c 	ldr.w	r8, [pc, #108]	; 5f80 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>
    5f16:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    5f1a:	2000      	movs	r0, #0
    5f1c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    5f20:	b139      	cbz	r1, 5f32 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xfe>
    5f22:	f7ff f921 	bl	5168 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    5f26:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    5f2a:	fbb0 f2f1 	udiv	r2, r0, r1
    5f2e:	fb01 0012 	mls	r0, r1, r2, r0
    5f32:	4407      	add	r7, r0
    5f34:	f7fc fafa 	bl	252c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    5f38:	19c0      	adds	r0, r0, r7
    5f3a:	4169      	adcs	r1, r5
    5f3c:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    5f40:	b19e      	cbz	r6, 5f6a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x136>
    5f42:	1980      	adds	r0, r0, r6
    5f44:	eb51 0105 	adcs.w	r1, r1, r5
    5f48:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    5f4c:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    5f50:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    5f54:	f003 fba5 	bl	96a2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf4>
    5f58:	b158      	cbz	r0, 5f72 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13e>
    5f5a:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    5f5e:	2100      	movs	r1, #0
    5f60:	4620      	mov	r0, r4
    5f62:	f003 f992 	bl	928a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    5f66:	2000      	movs	r0, #0
    5f68:	e7cd      	b.n	5f06 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    5f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5f6e:	0841      	lsrs	r1, r0, #1
    5f70:	e7ea      	b.n	5f48 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x114>
    5f72:	f240 11e7 	movw	r1, #487	; 0x1e7
    5f76:	2030      	movs	r0, #48	; 0x30
    5f78:	f7fd fe4e 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f7c:	00009787 	.word	0x00009787
    5f80:	200000fc 	.word	0x200000fc

00005f84 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    5f84:	4901      	ldr	r1, [pc, #4]	; (5f8c <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    5f86:	8088      	strh	r0, [r1, #4]
    5f88:	4770      	bx	lr
    5f8a:	0000      	.short	0x0000
    5f8c:	200000fc 	.word	0x200000fc

00005f90 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    5f90:	4805      	ldr	r0, [pc, #20]	; (5fa8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    5f92:	2100      	movs	r1, #0
    5f94:	7001      	strb	r1, [r0, #0]
    5f96:	2201      	movs	r2, #1
    5f98:	7082      	strb	r2, [r0, #2]
    5f9a:	7041      	strb	r1, [r0, #1]
    5f9c:	f242 7110 	movw	r1, #10000	; 0x2710
    5fa0:	8081      	strh	r1, [r0, #4]
    5fa2:	f000 b803 	b.w	5fac <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    5fa6:	0000      	.short	0x0000
    5fa8:	200000fc 	.word	0x200000fc

00005fac <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    5fac:	b51c      	push	{r2, r3, r4, lr}
    5fae:	4909      	ldr	r1, [pc, #36]	; (5fd4 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    5fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
    5fb4:	e9cd 0100 	strd	r0, r1, [sp]
    5fb8:	e002      	b.n	5fc0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    5fba:	9800      	ldr	r0, [sp, #0]
    5fbc:	f003 face 	bl	955c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    5fc0:	4668      	mov	r0, sp
    5fc2:	f7fe f81b 	bl	3ffc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    5fc6:	2800      	cmp	r0, #0
    5fc8:	d0f7      	beq.n	5fba <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    5fca:	f000 f81f 	bl	600c <CONFIG_PM_SRAM_SIZE+0xc>
    5fce:	2000      	movs	r0, #0
    5fd0:	bd1c      	pop	{r2, r3, r4, pc}
    5fd2:	0000      	.short	0x0000
    5fd4:	0000606c 	.word	0x0000606c

00005fd8 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    5fd8:	4901      	ldr	r1, [pc, #4]	; (5fe0 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    5fda:	7008      	strb	r0, [r1, #0]
    5fdc:	4770      	bx	lr
    5fde:	0000      	.short	0x0000
    5fe0:	200000fc 	.word	0x200000fc

00005fe4 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    5fe4:	4908      	ldr	r1, [pc, #32]	; (6008 <CONFIG_PM_SRAM_SIZE+0x8>)
    5fe6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5fea:	fbb1 f1f2 	udiv	r1, r1, r2
    5fee:	b510      	push	{r4, lr}
    5ff0:	f501 7125 	add.w	r1, r1, #660	; 0x294
    5ff4:	f002 ffd4 	bl	8fa0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    5ff8:	f640 0148 	movw	r1, #2120	; 0x848
    5ffc:	4288      	cmp	r0, r1
    5ffe:	d300      	bcc.n	6002 <CONFIG_PM_SRAM_SIZE+0x2>
    6000:	4608      	mov	r0, r1
    6002:	b280      	uxth	r0, r0
    6004:	bd10      	pop	{r4, pc}
    6006:	0000      	.short	0x0000
    6008:	0001527d 	.word	0x0001527d
    600c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6010:	4d15      	ldr	r5, [pc, #84]	; (6068 <CONFIG_PM_SRAM_SIZE+0x68>)
    6012:	2001      	movs	r0, #1
    6014:	7068      	strb	r0, [r5, #1]
    6016:	2400      	movs	r4, #0
    6018:	f64f 76ff 	movw	r6, #65535	; 0xffff
    601c:	e00b      	b.n	6036 <CONFIG_PM_SRAM_SIZE+0x36>
    601e:	2100      	movs	r1, #0
    6020:	f002 fc15 	bl	884e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6024:	0007      	movs	r7, r0
    6026:	d009      	beq.n	603c <CONFIG_PM_SRAM_SIZE+0x3c>
    6028:	f897 0294 	ldrb.w	r0, [r7, #660]	; 0x294
    602c:	f7fb ff56 	bl	1edc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    6030:	4638      	mov	r0, r7
    6032:	f003 fb9b 	bl	976c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1be>
    6036:	9400      	str	r4, [sp, #0]
    6038:	9401      	str	r4, [sp, #4]
    603a:	e00d      	b.n	6058 <CONFIG_PM_SRAM_SIZE+0x58>
    603c:	f240 111f 	movw	r1, #287	; 0x11f
    6040:	2030      	movs	r0, #48	; 0x30
    6042:	f7fd fde9 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6046:	9800      	ldr	r0, [sp, #0]
    6048:	b130      	cbz	r0, 6058 <CONFIG_PM_SRAM_SIZE+0x58>
    604a:	f890 124c 	ldrb.w	r1, [r0, #588]	; 0x24c
    604e:	b119      	cbz	r1, 6058 <CONFIG_PM_SRAM_SIZE+0x58>
    6050:	8800      	ldrh	r0, [r0, #0]
    6052:	42b0      	cmp	r0, r6
    6054:	d1e3      	bne.n	601e <CONFIG_PM_SRAM_SIZE+0x1e>
    6056:	e004      	b.n	6062 <CONFIG_PM_SRAM_SIZE+0x62>
    6058:	4668      	mov	r0, sp
    605a:	f7fd ffcf 	bl	3ffc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    605e:	2800      	cmp	r0, #0
    6060:	d0f1      	beq.n	6046 <CONFIG_PM_SRAM_SIZE+0x46>
    6062:	706c      	strb	r4, [r5, #1]
    6064:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6068:	200000fc 	.word	0x200000fc
    606c:	00000000 	.word	0x00000000
    6070:	00010000 	.word	0x00010000
    6074:	00000000 	.word	0x00000000
    6078:	00010000 	.word	0x00010000
    607c:	00000000 	.word	0x00000000
    6080:	00001e14 	.word	0x00001e14
    6084:	00001130 	.word	0x00001130
    6088:	00fa01f4 	.word	0x00fa01f4
    608c:	00640096 	.word	0x00640096
    6090:	0032004b 	.word	0x0032004b
    6094:	0014001e 	.word	0x0014001e
    6098:	0005000a 	.word	0x0005000a
    609c:	00010002 	.word	0x00010002

000060a0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    60a0:	4903      	ldr	r1, [pc, #12]	; (60b0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    60a2:	884a      	ldrh	r2, [r1, #2]
    60a4:	8002      	strh	r2, [r0, #0]
    60a6:	7809      	ldrb	r1, [r1, #0]
    60a8:	7081      	strb	r1, [r0, #2]
    60aa:	2000      	movs	r0, #0
    60ac:	4770      	bx	lr
    60ae:	0000      	.short	0x0000
    60b0:	20000cec 	.word	0x20000cec

000060b4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    60b4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    60b8:	460f      	mov	r7, r1
    60ba:	4605      	mov	r5, r0
    60bc:	7806      	ldrb	r6, [r0, #0]
    60be:	f003 ff9e 	bl	9ffe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfc>
    60c2:	2800      	cmp	r0, #0
    60c4:	d10a      	bne.n	60dc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    60c6:	4628      	mov	r0, r5
    60c8:	f003 ff73 	bl	9fb2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    60cc:	2800      	cmp	r0, #0
    60ce:	d105      	bne.n	60dc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    60d0:	2001      	movs	r0, #1
    60d2:	f7fd ff49 	bl	3f68 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    60d6:	4286      	cmp	r6, r0
    60d8:	d302      	bcc.n	60e0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    60da:	2007      	movs	r0, #7
    60dc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    60e0:	2101      	movs	r1, #1
    60e2:	4630      	mov	r0, r6
    60e4:	f002 fbb3 	bl	884e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    60e8:	0004      	movs	r4, r0
    60ea:	d004      	beq.n	60f6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    60ec:	f003 fa5f 	bl	95ae <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    60f0:	b168      	cbz	r0, 610e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    60f2:	200c      	movs	r0, #12
    60f4:	e7f2      	b.n	60dc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    60f6:	2101      	movs	r1, #1
    60f8:	4630      	mov	r0, r6
    60fa:	f002 fb9e 	bl	883a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    60fe:	0004      	movs	r4, r0
    6100:	d013      	beq.n	612a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x76>
    6102:	4817      	ldr	r0, [pc, #92]	; (6160 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xac>)
    6104:	f990 1000 	ldrsb.w	r1, [r0]
    6108:	4620      	mov	r0, r4
    610a:	f002 ffc4 	bl	9096 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    610e:	4620      	mov	r0, r4
    6110:	f003 f895 	bl	923e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    6114:	7038      	strb	r0, [r7, #0]
    6116:	74e8      	strb	r0, [r5, #19]
    6118:	4629      	mov	r1, r5
    611a:	4620      	mov	r0, r4
    611c:	f7ff f8a6 	bl	526c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    6120:	4606      	mov	r6, r0
    6122:	7e68      	ldrb	r0, [r5, #25]
    6124:	b1d0      	cbz	r0, 615c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    6126:	b12e      	cbz	r6, 6134 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x80>
    6128:	e018      	b.n	615c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    612a:	f241 3162 	movw	r1, #4962	; 0x1362
    612e:	2039      	movs	r0, #57	; 0x39
    6130:	f7fd fd72 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6134:	2200      	movs	r2, #0
    6136:	4668      	mov	r0, sp
    6138:	6b61      	ldr	r1, [r4, #52]	; 0x34
    613a:	f002 fc3a 	bl	89b2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    613e:	2200      	movs	r2, #0
    6140:	2101      	movs	r1, #1
    6142:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6144:	f002 fcab 	bl	8a9e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6148:	2204      	movs	r2, #4
    614a:	4668      	mov	r0, sp
    614c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    614e:	f002 fc30 	bl	89b2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    6152:	2200      	movs	r2, #0
    6154:	4611      	mov	r1, r2
    6156:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6158:	f002 fca1 	bl	8a9e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    615c:	4630      	mov	r0, r6
    615e:	e7bd      	b.n	60dc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    6160:	20000118 	.word	0x20000118

00006164 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    6164:	7801      	ldrb	r1, [r0, #0]
    6166:	b171      	cbz	r1, 6186 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6168:	7841      	ldrb	r1, [r0, #1]
    616a:	b161      	cbz	r1, 6186 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    616c:	8841      	ldrh	r1, [r0, #2]
    616e:	291b      	cmp	r1, #27
    6170:	d309      	bcc.n	6186 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6172:	8881      	ldrh	r1, [r0, #4]
    6174:	291b      	cmp	r1, #27
    6176:	d306      	bcc.n	6186 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6178:	4904      	ldr	r1, [pc, #16]	; (618c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    617a:	6802      	ldr	r2, [r0, #0]
    617c:	600a      	str	r2, [r1, #0]
    617e:	8880      	ldrh	r0, [r0, #4]
    6180:	8088      	strh	r0, [r1, #4]
    6182:	2000      	movs	r0, #0
    6184:	4770      	bx	lr
    6186:	2012      	movs	r0, #18
    6188:	4770      	bx	lr
    618a:	0000      	.short	0x0000
    618c:	20000cec 	.word	0x20000cec

00006190 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    6190:	6800      	ldr	r0, [r0, #0]
    6192:	f240 41e2 	movw	r1, #1250	; 0x4e2
    6196:	4288      	cmp	r0, r1
    6198:	d303      	bcc.n	61a2 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    619a:	4903      	ldr	r1, [pc, #12]	; (61a8 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    619c:	6088      	str	r0, [r1, #8]
    619e:	2000      	movs	r0, #0
    61a0:	4770      	bx	lr
    61a2:	2012      	movs	r0, #18
    61a4:	4770      	bx	lr
    61a6:	0000      	.short	0x0000
    61a8:	20000cec 	.word	0x20000cec

000061ac <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    61ac:	4a03      	ldr	r2, [pc, #12]	; (61bc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    61ae:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    61b2:	6001      	str	r1, [r0, #0]
    61b4:	6042      	str	r2, [r0, #4]
    61b6:	2000      	movs	r0, #0
    61b8:	4770      	bx	lr
    61ba:	0000      	.short	0x0000
    61bc:	00006564 	.word	0x00006564
    61c0:	b51c      	push	{r2, r3, r4, lr}
    61c2:	4909      	ldr	r1, [pc, #36]	; (61e8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x3c>)
    61c4:	e9d1 0100 	ldrd	r0, r1, [r1]
    61c8:	e9cd 0100 	strd	r0, r1, [sp]
    61cc:	e005      	b.n	61da <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2e>
    61ce:	9800      	ldr	r0, [sp, #0]
    61d0:	f003 f9ed 	bl	95ae <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    61d4:	b108      	cbz	r0, 61da <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2e>
    61d6:	2001      	movs	r0, #1
    61d8:	bd1c      	pop	{r2, r3, r4, pc}
    61da:	4668      	mov	r0, sp
    61dc:	f7fd ff0e 	bl	3ffc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    61e0:	2800      	cmp	r0, #0
    61e2:	d0f4      	beq.n	61ce <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x22>
    61e4:	2000      	movs	r0, #0
    61e6:	bd1c      	pop	{r2, r3, r4, pc}
    61e8:	00006564 	.word	0x00006564
    61ec:	b510      	push	{r4, lr}
    61ee:	480d      	ldr	r0, [pc, #52]	; (6224 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x78>)
    61f0:	2100      	movs	r1, #0
    61f2:	4b0d      	ldr	r3, [pc, #52]	; (6228 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x7c>)
    61f4:	74c1      	strb	r1, [r0, #19]
    61f6:	8281      	strh	r1, [r0, #20]
    61f8:	221b      	movs	r2, #27
    61fa:	801a      	strh	r2, [r3, #0]
    61fc:	f44f 74a4 	mov.w	r4, #328	; 0x148
    6200:	805c      	strh	r4, [r3, #2]
    6202:	809a      	strh	r2, [r3, #4]
    6204:	80dc      	strh	r4, [r3, #6]
    6206:	7381      	strb	r1, [r0, #14]
    6208:	73c1      	strb	r1, [r0, #15]
    620a:	2303      	movs	r3, #3
    620c:	7003      	strb	r3, [r0, #0]
    620e:	2302      	movs	r3, #2
    6210:	7043      	strb	r3, [r0, #1]
    6212:	8042      	strh	r2, [r0, #2]
    6214:	8082      	strh	r2, [r0, #4]
    6216:	f640 62a6 	movw	r2, #3750	; 0xea6
    621a:	6082      	str	r2, [r0, #8]
    621c:	7481      	strb	r1, [r0, #18]
    621e:	7301      	strb	r1, [r0, #12]
    6220:	bd10      	pop	{r4, pc}
    6222:	0000      	.short	0x0000
    6224:	20000cec 	.word	0x20000cec
    6228:	20000120 	.word	0x20000120
    622c:	b510      	push	{r4, lr}
    622e:	2101      	movs	r1, #1
    6230:	2000      	movs	r0, #0
    6232:	f002 fb0c 	bl	884e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6236:	0004      	movs	r4, r0
    6238:	d10a      	bne.n	6250 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xa4>
    623a:	2101      	movs	r1, #1
    623c:	f002 fafd 	bl	883a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    6240:	0004      	movs	r4, r0
    6242:	d007      	beq.n	6254 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xa8>
    6244:	4806      	ldr	r0, [pc, #24]	; (6260 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xb4>)
    6246:	f990 1000 	ldrsb.w	r1, [r0]
    624a:	4620      	mov	r0, r4
    624c:	f002 ff23 	bl	9096 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    6250:	4620      	mov	r0, r4
    6252:	bd10      	pop	{r4, pc}
    6254:	f240 2167 	movw	r1, #615	; 0x267
    6258:	2039      	movs	r0, #57	; 0x39
    625a:	f7fd fcdd 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    625e:	0000      	.short	0x0000
    6260:	20000118 	.word	0x20000118

00006264 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    6264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6268:	b087      	sub	sp, #28
    626a:	460c      	mov	r4, r1
    626c:	4680      	mov	r8, r0
    626e:	4605      	mov	r5, r0
    6270:	f002 ffe8 	bl	9244 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    6274:	b198      	cbz	r0, 629e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    6276:	4628      	mov	r0, r5
    6278:	f002 ffd7 	bl	922a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    627c:	b130      	cbz	r0, 628c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    627e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    6282:	2012      	movs	r0, #18
    6284:	2900      	cmp	r1, #0
    6286:	d00b      	beq.n	62a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6288:	2980      	cmp	r1, #128	; 0x80
    628a:	d809      	bhi.n	62a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    628c:	4628      	mov	r0, r5
    628e:	f002 ffbb 	bl	9208 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    6292:	b140      	cbz	r0, 62a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    6294:	4640      	mov	r0, r8
    6296:	f002 fec8 	bl	902a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    629a:	b130      	cbz	r0, 62aa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    629c:	e009      	b.n	62b2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4e>
    629e:	2042      	movs	r0, #66	; 0x42
    62a0:	b007      	add	sp, #28
    62a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    62a6:	200c      	movs	r0, #12
    62a8:	e7fa      	b.n	62a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    62aa:	4640      	mov	r0, r8
    62ac:	f002 ffb7 	bl	921e <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    62b0:	b3c8      	cbz	r0, 6326 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    62b2:	4640      	mov	r0, r8
    62b4:	f003 f97b 	bl	95ae <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    62b8:	2800      	cmp	r0, #0
    62ba:	d1f4      	bne.n	62a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    62bc:	4640      	mov	r0, r8
    62be:	f002 fecf 	bl	9060 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    62c2:	2800      	cmp	r0, #0
    62c4:	d1ef      	bne.n	62a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    62c6:	4640      	mov	r0, r8
    62c8:	f7fe ff6e 	bl	51a8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    62cc:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    62d0:	f242 7110 	movw	r1, #10000	; 0x2710
    62d4:	fb00 f901 	mul.w	r9, r0, r1
    62d8:	78e1      	ldrb	r1, [r4, #3]
    62da:	4640      	mov	r0, r8
    62dc:	f002 ff8b 	bl	91f6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    62e0:	4640      	mov	r0, r8
    62e2:	f002 ff9e 	bl	9222 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    62e6:	b308      	cbz	r0, 632c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc8>
    62e8:	2100      	movs	r1, #0
    62ea:	a801      	add	r0, sp, #4
    62ec:	f7fd fea6 	bl	403c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    62f0:	0004      	movs	r4, r0
    62f2:	d07b      	beq.n	63ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    62f4:	2100      	movs	r1, #0
    62f6:	f7fe fc53 	bl	4ba0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    62fa:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    62fe:	8020      	strh	r0, [r4, #0]
    6300:	4621      	mov	r1, r4
    6302:	4640      	mov	r0, r8
    6304:	f002 ffb5 	bl	9272 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    6308:	f000 f984 	bl	6614 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    630c:	0940      	lsrs	r0, r0, #5
    630e:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    6312:	07c0      	lsls	r0, r0, #31
    6314:	4d41      	ldr	r5, [pc, #260]	; (641c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    6316:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    631a:	d011      	beq.n	6340 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    631c:	8869      	ldrh	r1, [r5, #2]
    631e:	88aa      	ldrh	r2, [r5, #4]
    6320:	84c1      	strh	r1, [r0, #38]	; 0x26
    6322:	8502      	strh	r2, [r0, #40]	; 0x28
    6324:	e00f      	b.n	6346 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe2>
    6326:	e7ff      	b.n	6328 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    6328:	2012      	movs	r0, #18
    632a:	e7b9      	b.n	62a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    632c:	464a      	mov	r2, r9
    632e:	2100      	movs	r1, #0
    6330:	4640      	mov	r0, r8
    6332:	f7ff fd7f 	bl	5e34 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    6336:	2800      	cmp	r0, #0
    6338:	d0b2      	beq.n	62a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    633a:	f241 51b5 	movw	r1, #5557	; 0x15b5
    633e:	e05f      	b.n	6400 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    6340:	221b      	movs	r2, #27
    6342:	84c2      	strh	r2, [r0, #38]	; 0x26
    6344:	8502      	strh	r2, [r0, #40]	; 0x28
    6346:	f000 f965 	bl	6614 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    634a:	0788      	lsls	r0, r1, #30
    634c:	f04f 0601 	mov.w	r6, #1
    6350:	d505      	bpl.n	635e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    6352:	f88d 6008 	strb.w	r6, [sp, #8]
    6356:	a802      	add	r0, sp, #8
    6358:	9403      	str	r4, [sp, #12]
    635a:	f003 fa67 	bl	982c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    635e:	68a8      	ldr	r0, [r5, #8]
    6360:	62e0      	str	r0, [r4, #44]	; 0x2c
    6362:	f641 574c 	movw	r7, #7500	; 0x1d4c
    6366:	4640      	mov	r0, r8
    6368:	f002 ff63 	bl	9232 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    636c:	b910      	cbnz	r0, 6374 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x110>
    636e:	4640      	mov	r0, r8
    6370:	f002 ff7d 	bl	926e <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    6374:	6127      	str	r7, [r4, #16]
    6376:	8821      	ldrh	r1, [r4, #0]
    6378:	f8ad 1008 	strh.w	r1, [sp, #8]
    637c:	7ba9      	ldrb	r1, [r5, #14]
    637e:	f88d 100a 	strb.w	r1, [sp, #10]
    6382:	7be9      	ldrb	r1, [r5, #15]
    6384:	f88d 100b 	strb.w	r1, [sp, #11]
    6388:	8a29      	ldrh	r1, [r5, #16]
    638a:	f8ad 100c 	strh.w	r1, [sp, #12]
    638e:	a905      	add	r1, sp, #20
    6390:	9100      	str	r1, [sp, #0]
    6392:	4630      	mov	r0, r6
    6394:	ab04      	add	r3, sp, #16
    6396:	aa02      	add	r2, sp, #8
    6398:	4621      	mov	r1, r4
    639a:	f003 fecb 	bl	a134 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x232>
    639e:	b140      	cbz	r0, 63b2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    63a0:	2100      	movs	r1, #0
    63a2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    63a6:	f7fd fe71 	bl	408c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    63aa:	b1f0      	cbz	r0, 63ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    63ac:	f241 6117 	movw	r1, #5655	; 0x1617
    63b0:	e026      	b.n	6400 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    63b2:	f89d 0010 	ldrb.w	r0, [sp, #16]
    63b6:	f88d 0018 	strb.w	r0, [sp, #24]
    63ba:	f89d 0014 	ldrb.w	r0, [sp, #20]
    63be:	f88d 0019 	strb.w	r0, [sp, #25]
    63c2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    63c6:	f8ad 001a 	strh.w	r0, [sp, #26]
    63ca:	a906      	add	r1, sp, #24
    63cc:	4620      	mov	r0, r4
    63ce:	f002 fcd0 	bl	8d72 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    63d2:	7868      	ldrb	r0, [r5, #1]
    63d4:	9000      	str	r0, [sp, #0]
    63d6:	782b      	ldrb	r3, [r5, #0]
    63d8:	88aa      	ldrh	r2, [r5, #4]
    63da:	8869      	ldrh	r1, [r5, #2]
    63dc:	8820      	ldrh	r0, [r4, #0]
    63de:	f7fd ff0b 	bl	41f8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    63e2:	b128      	cbz	r0, 63f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18c>
    63e4:	f241 6122 	movw	r1, #5666	; 0x1622
    63e8:	e00a      	b.n	6400 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    63ea:	e7ff      	b.n	63ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    63ec:	2009      	movs	r0, #9
    63ee:	e757      	b.n	62a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    63f0:	464a      	mov	r2, r9
    63f2:	4621      	mov	r1, r4
    63f4:	4640      	mov	r0, r8
    63f6:	f7ff fd1d 	bl	5e34 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    63fa:	b120      	cbz	r0, 6406 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a2>
    63fc:	f241 6124 	movw	r1, #5668	; 0x1624
    6400:	2039      	movs	r0, #57	; 0x39
    6402:	f7fd fc09 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6406:	4806      	ldr	r0, [pc, #24]	; (6420 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    6408:	6843      	ldr	r3, [r0, #4]
    640a:	b123      	cbz	r3, 6416 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b2>
    640c:	2200      	movs	r2, #0
    640e:	f504 7195 	add.w	r1, r4, #298	; 0x12a
    6412:	4620      	mov	r0, r4
    6414:	4798      	blx	r3
    6416:	2000      	movs	r0, #0
    6418:	e742      	b.n	62a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    641a:	0000      	.short	0x0000
    641c:	20000cec 	.word	0x20000cec
    6420:	20000118 	.word	0x20000118
    6424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6428:	b088      	sub	sp, #32
    642a:	4604      	mov	r4, r0
    642c:	8800      	ldrh	r0, [r0, #0]
    642e:	a906      	add	r1, sp, #24
    6430:	f002 fc5c 	bl	8cec <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6434:	2800      	cmp	r0, #0
    6436:	d147      	bne.n	64c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6438:	9807      	ldr	r0, [sp, #28]
    643a:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    643e:	f88d 1008 	strb.w	r1, [sp, #8]
    6442:	9902      	ldr	r1, [sp, #8]
    6444:	9102      	str	r1, [sp, #8]
    6446:	f89d 1008 	ldrb.w	r1, [sp, #8]
    644a:	3080      	adds	r0, #128	; 0x80
    644c:	b101      	cbz	r1, 6450 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    644e:	2101      	movs	r1, #1
    6450:	f88d 100c 	strb.w	r1, [sp, #12]
    6454:	7901      	ldrb	r1, [r0, #4]
    6456:	f04f 0800 	mov.w	r8, #0
    645a:	0689      	lsls	r1, r1, #26
    645c:	d502      	bpl.n	6464 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    645e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    6462:	b149      	cbz	r1, 6478 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x214>
    6464:	f05f 0100 	movs.w	r1, #0
    6468:	f88d 1004 	strb.w	r1, [sp, #4]
    646c:	2105      	movs	r1, #5
    646e:	3064      	adds	r0, #100	; 0x64
    6470:	f003 fa48 	bl	9904 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x74>
    6474:	b110      	cbz	r0, 647c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x218>
    6476:	e004      	b.n	6482 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21e>
    6478:	2101      	movs	r1, #1
    647a:	e7f5      	b.n	6468 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    647c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6480:	b308      	cbz	r0, 64c6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    6482:	8921      	ldrh	r1, [r4, #8]
    6484:	88e0      	ldrh	r0, [r4, #6]
    6486:	f003 fe11 	bl	a0ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1aa>
    648a:	2800      	cmp	r0, #0
    648c:	d11c      	bne.n	64c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    648e:	88a1      	ldrh	r1, [r4, #4]
    6490:	8860      	ldrh	r0, [r4, #2]
    6492:	f003 fe0b 	bl	a0ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1aa>
    6496:	2800      	cmp	r0, #0
    6498:	d116      	bne.n	64c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    649a:	8921      	ldrh	r1, [r4, #8]
    649c:	88e0      	ldrh	r0, [r4, #6]
    649e:	f003 fdfb 	bl	a098 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x196>
    64a2:	2800      	cmp	r0, #0
    64a4:	d110      	bne.n	64c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    64a6:	88a1      	ldrh	r1, [r4, #4]
    64a8:	8860      	ldrh	r0, [r4, #2]
    64aa:	f003 fdf5 	bl	a098 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x196>
    64ae:	0006      	movs	r6, r0
    64b0:	d10a      	bne.n	64c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    64b2:	9807      	ldr	r0, [sp, #28]
    64b4:	f500 7595 	add.w	r5, r0, #298	; 0x12a
    64b8:	27ff      	movs	r7, #255	; 0xff
    64ba:	706f      	strb	r7, [r5, #1]
    64bc:	f89d 100c 	ldrb.w	r1, [sp, #12]
    64c0:	b129      	cbz	r1, 64ce <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26a>
    64c2:	263a      	movs	r6, #58	; 0x3a
    64c4:	e02e      	b.n	6524 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c0>
    64c6:	201a      	movs	r0, #26
    64c8:	b008      	add	sp, #32
    64ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64ce:	4641      	mov	r1, r8
    64d0:	aa03      	add	r2, sp, #12
    64d2:	f003 fdf9 	bl	a0c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c6>
    64d6:	8861      	ldrh	r1, [r4, #2]
    64d8:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    64dc:	4281      	cmp	r1, r0
    64de:	d200      	bcs.n	64e2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    64e0:	4608      	mov	r0, r1
    64e2:	80e8      	strh	r0, [r5, #6]
    64e4:	88a1      	ldrh	r1, [r4, #4]
    64e6:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    64ea:	4281      	cmp	r1, r0
    64ec:	d200      	bcs.n	64f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    64ee:	4608      	mov	r0, r1
    64f0:	8128      	strh	r0, [r5, #8]
    64f2:	88e2      	ldrh	r2, [r4, #6]
    64f4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    64f8:	428a      	cmp	r2, r1
    64fa:	d200      	bcs.n	64fe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29a>
    64fc:	4611      	mov	r1, r2
    64fe:	8069      	strh	r1, [r5, #2]
    6500:	8922      	ldrh	r2, [r4, #8]
    6502:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    6506:	428a      	cmp	r2, r1
    6508:	d200      	bcs.n	650c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a8>
    650a:	4611      	mov	r1, r2
    650c:	f640 0248 	movw	r2, #2120	; 0x848
    6510:	80a9      	strh	r1, [r5, #4]
    6512:	4291      	cmp	r1, r2
    6514:	d300      	bcc.n	6518 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2b4>
    6516:	4611      	mov	r1, r2
    6518:	80a9      	strh	r1, [r5, #4]
    651a:	4290      	cmp	r0, r2
    651c:	d200      	bcs.n	6520 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2bc>
    651e:	4602      	mov	r2, r0
    6520:	812a      	strh	r2, [r5, #8]
    6522:	702f      	strb	r7, [r5, #0]
    6524:	f885 8001 	strb.w	r8, [r5, #1]
    6528:	4630      	mov	r0, r6
    652a:	e7cd      	b.n	64c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    652c:	b51c      	push	{r2, r3, r4, lr}
    652e:	490c      	ldr	r1, [pc, #48]	; (6560 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2fc>)
    6530:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    6534:	e9cd 0100 	strd	r0, r1, [sp]
    6538:	e00a      	b.n	6550 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    653a:	9c00      	ldr	r4, [sp, #0]
    653c:	4620      	mov	r0, r4
    653e:	f003 f836 	bl	95ae <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6542:	b128      	cbz	r0, 6550 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    6544:	4620      	mov	r0, r4
    6546:	f002 feb9 	bl	92bc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    654a:	b108      	cbz	r0, 6550 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    654c:	2001      	movs	r0, #1
    654e:	bd1c      	pop	{r2, r3, r4, pc}
    6550:	4668      	mov	r0, sp
    6552:	f7fd fd53 	bl	3ffc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6556:	2800      	cmp	r0, #0
    6558:	d0ef      	beq.n	653a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d6>
    655a:	2000      	movs	r0, #0
    655c:	bd1c      	pop	{r2, r3, r4, pc}
    655e:	0000      	.short	0x0000
    6560:	00006564 	.word	0x00006564
    6564:	00000000 	.word	0x00000000
    6568:	00010000 	.word	0x00010000
    656c:	00000000 	.word	0x00000000
    6570:	00010000 	.word	0x00010000
    6574:	0c11fa0c 	.word	0x0c11fa0c
    6578:	11fa0059 	.word	0x11fa0059
    657c:	00000000 	.word	0x00000000
    6580:	00010000 	.word	0x00010000
    6584:	00000000 	.word	0x00000000
    6588:	00010000 	.word	0x00010000

0000658c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    658c:	b510      	push	{r4, lr}
    658e:	f7fe fc87 	bl	4ea0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    6592:	4805      	ldr	r0, [pc, #20]	; (65a8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    6594:	6840      	ldr	r0, [r0, #4]
    6596:	f003 fe63 	bl	a260 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x35e>
    659a:	f003 fc50 	bl	9e3e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    659e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    65a2:	f7fe bdcf 	b.w	5144 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    65a6:	0000      	.short	0x0000
    65a8:	20000128 	.word	0x20000128

000065ac <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    65ac:	b510      	push	{r4, lr}
    65ae:	4c05      	ldr	r4, [pc, #20]	; (65c4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    65b0:	68a0      	ldr	r0, [r4, #8]
    65b2:	f003 fe55 	bl	a260 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x35e>
    65b6:	68e0      	ldr	r0, [r4, #12]
    65b8:	f003 fe52 	bl	a260 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x35e>
    65bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    65c0:	f003 bc9f 	b.w	9f02 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    65c4:	20000128 	.word	0x20000128

000065c8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    65c8:	b510      	push	{r4, lr}
    65ca:	4905      	ldr	r1, [pc, #20]	; (65e0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    65cc:	4805      	ldr	r0, [pc, #20]	; (65e4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    65ce:	f003 fe3a 	bl	a246 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x344>
    65d2:	4804      	ldr	r0, [pc, #16]	; (65e4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    65d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    65d8:	4903      	ldr	r1, [pc, #12]	; (65e8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    65da:	1d00      	adds	r0, r0, #4
    65dc:	f003 be33 	b.w	a246 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x344>
    65e0:	20000138 	.word	0x20000138
    65e4:	2000012c 	.word	0x2000012c
    65e8:	20000140 	.word	0x20000140

000065ec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    65ec:	4801      	ldr	r0, [pc, #4]	; (65f4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    65ee:	7800      	ldrb	r0, [r0, #0]
    65f0:	4770      	bx	lr
    65f2:	0000      	.short	0x0000
    65f4:	20000128 	.word	0x20000128
    65f8:	b510      	push	{r4, lr}
    65fa:	f7fe fef7 	bl	53ec <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    65fe:	f7ff fcc7 	bl	5f90 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    6602:	4803      	ldr	r0, [pc, #12]	; (6610 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    6604:	f7fe fed8 	bl	53b8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    6608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    660c:	f7fe bc4e 	b.w	4eac <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    6610:	20000f91 	.word	0x20000f91

00006614 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    6614:	4901      	ldr	r1, [pc, #4]	; (661c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    6616:	e9d1 0100 	ldrd	r0, r1, [r1]
    661a:	4770      	bx	lr
    661c:	20000020 	.word	0x20000020

00006620 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    6620:	4806      	ldr	r0, [pc, #24]	; (663c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    6622:	8801      	ldrh	r1, [r0, #0]
    6624:	7900      	ldrb	r0, [r0, #4]
    6626:	0602      	lsls	r2, r0, #24
    6628:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    662c:	f000 0001 	and.w	r0, r0, #1
    6630:	1800      	adds	r0, r0, r0
    6632:	b2c0      	uxtb	r0, r0
    6634:	f040 0001 	orr.w	r0, r0, #1
    6638:	4770      	bx	lr
    663a:	0000      	.short	0x0000
    663c:	20000020 	.word	0x20000020

00006640 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    6640:	b510      	push	{r4, lr}
    6642:	f7fc ff31 	bl	34a8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    6646:	2200      	movs	r2, #0
    6648:	4b08      	ldr	r3, [pc, #32]	; (666c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    664a:	4611      	mov	r1, r2
    664c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    6650:	4284      	cmp	r4, r0
    6652:	d303      	bcc.n	665c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    6654:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6658:	7882      	ldrb	r2, [r0, #2]
    665a:	e003      	b.n	6664 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    665c:	1c49      	adds	r1, r1, #1
    665e:	b2c9      	uxtb	r1, r1
    6660:	290c      	cmp	r1, #12
    6662:	d3f3      	bcc.n	664c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    6664:	4802      	ldr	r0, [pc, #8]	; (6670 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    6666:	7002      	strb	r2, [r0, #0]
    6668:	bd10      	pop	{r4, pc}
    666a:	0000      	.short	0x0000
    666c:	0000a276 	.word	0x0000a276
    6670:	2000018d 	.word	0x2000018d

00006674 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    6674:	b570      	push	{r4, r5, r6, lr}
    6676:	4605      	mov	r5, r0
    6678:	4616      	mov	r6, r2
    667a:	460c      	mov	r4, r1
    667c:	2002      	movs	r0, #2
    667e:	f000 f8bd 	bl	67fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    6682:	4906      	ldr	r1, [pc, #24]	; (669c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    6684:	2001      	movs	r0, #1
    6686:	1ef6      	subs	r6, r6, #3
    6688:	7008      	strb	r0, [r1, #0]
    668a:	4805      	ldr	r0, [pc, #20]	; (66a0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    668c:	6006      	str	r6, [r0, #0]
    668e:	4804      	ldr	r0, [pc, #16]	; (66a0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    6690:	3808      	subs	r0, #8
    6692:	6005      	str	r5, [r0, #0]
    6694:	1f00      	subs	r0, r0, #4
    6696:	6004      	str	r4, [r0, #0]
    6698:	bd70      	pop	{r4, r5, r6, pc}
    669a:	0000      	.short	0x0000
    669c:	2000018e 	.word	0x2000018e
    66a0:	4000f510 	.word	0x4000f510

000066a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    66a4:	b510      	push	{r4, lr}
    66a6:	4c0c      	ldr	r4, [pc, #48]	; (66d8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    66a8:	7820      	ldrb	r0, [r4, #0]
    66aa:	b180      	cbz	r0, 66ce <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    66ac:	490b      	ldr	r1, [pc, #44]	; (66dc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    66ae:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    66b2:	6008      	str	r0, [r1, #0]
    66b4:	f000 f86a 	bl	678c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    66b8:	2100      	movs	r1, #0
    66ba:	b120      	cbz	r0, 66c6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    66bc:	2001      	movs	r0, #1
    66be:	7060      	strb	r0, [r4, #1]
    66c0:	4807      	ldr	r0, [pc, #28]	; (66e0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    66c2:	6800      	ldr	r0, [r0, #0]
    66c4:	e001      	b.n	66ca <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    66c6:	7061      	strb	r1, [r4, #1]
    66c8:	2010      	movs	r0, #16
    66ca:	70a0      	strb	r0, [r4, #2]
    66cc:	7021      	strb	r1, [r4, #0]
    66ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    66d2:	2000      	movs	r0, #0
    66d4:	f000 b892 	b.w	67fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    66d8:	2000018e 	.word	0x2000018e
    66dc:	4001f508 	.word	0x4001f508
    66e0:	4000f400 	.word	0x4000f400

000066e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    66e4:	b510      	push	{r4, lr}
    66e6:	2002      	movs	r0, #2
    66e8:	f000 f888 	bl	67fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    66ec:	4904      	ldr	r1, [pc, #16]	; (6700 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    66ee:	2001      	movs	r0, #1
    66f0:	7008      	strb	r0, [r1, #0]
    66f2:	f000 f859 	bl	67a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    66f6:	4903      	ldr	r1, [pc, #12]	; (6704 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    66f8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    66fc:	6008      	str	r0, [r1, #0]
    66fe:	bd10      	pop	{r4, pc}
    6700:	2000018e 	.word	0x2000018e
    6704:	4001f504 	.word	0x4001f504

00006708 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    6708:	4803      	ldr	r0, [pc, #12]	; (6718 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    670a:	2100      	movs	r1, #0
    670c:	7001      	strb	r1, [r0, #0]
    670e:	7041      	strb	r1, [r0, #1]
    6710:	2110      	movs	r1, #16
    6712:	7081      	strb	r1, [r0, #2]
    6714:	4770      	bx	lr
    6716:	0000      	.short	0x0000
    6718:	2000018e 	.word	0x2000018e

0000671c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    671c:	4807      	ldr	r0, [pc, #28]	; (673c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    671e:	b510      	push	{r4, lr}
    6720:	7801      	ldrb	r1, [r0, #0]
    6722:	b141      	cbz	r1, 6736 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    6724:	f000 f832 	bl	678c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    6728:	b118      	cbz	r0, 6732 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    672a:	4805      	ldr	r0, [pc, #20]	; (6740 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    672c:	6800      	ldr	r0, [r0, #0]
    672e:	b2c0      	uxtb	r0, r0
    6730:	bd10      	pop	{r4, pc}
    6732:	2010      	movs	r0, #16
    6734:	bd10      	pop	{r4, pc}
    6736:	7880      	ldrb	r0, [r0, #2]
    6738:	bd10      	pop	{r4, pc}
    673a:	0000      	.short	0x0000
    673c:	2000018e 	.word	0x2000018e
    6740:	4000f400 	.word	0x4000f400

00006744 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    6744:	4808      	ldr	r0, [pc, #32]	; (6768 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    6746:	b510      	push	{r4, lr}
    6748:	7801      	ldrb	r1, [r0, #0]
    674a:	b159      	cbz	r1, 6764 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    674c:	4807      	ldr	r0, [pc, #28]	; (676c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    674e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    6752:	b128      	cbz	r0, 6760 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    6754:	f000 f80c 	bl	6770 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    6758:	2800      	cmp	r0, #0
    675a:	d000      	beq.n	675e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    675c:	2001      	movs	r0, #1
    675e:	bd10      	pop	{r4, pc}
    6760:	2002      	movs	r0, #2
    6762:	bd10      	pop	{r4, pc}
    6764:	7840      	ldrb	r0, [r0, #1]
    6766:	bd10      	pop	{r4, pc}
    6768:	2000018e 	.word	0x2000018e
    676c:	4000f000 	.word	0x4000f000
    6770:	4805      	ldr	r0, [pc, #20]	; (6788 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    6772:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    6776:	b111      	cbz	r1, 677e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    6778:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    677c:	b108      	cbz	r0, 6782 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    677e:	2000      	movs	r0, #0
    6780:	4770      	bx	lr
    6782:	2001      	movs	r0, #1
    6784:	4770      	bx	lr
    6786:	0000      	.short	0x0000
    6788:	4000f000 	.word	0x4000f000
    678c:	4805      	ldr	r0, [pc, #20]	; (67a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    678e:	b510      	push	{r4, lr}
    6790:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    6794:	b120      	cbz	r0, 67a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    6796:	f7ff ffeb 	bl	6770 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    679a:	b108      	cbz	r0, 67a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    679c:	2001      	movs	r0, #1
    679e:	bd10      	pop	{r4, pc}
    67a0:	2000      	movs	r0, #0
    67a2:	bd10      	pop	{r4, pc}
    67a4:	4000f000 	.word	0x4000f000
    67a8:	4804      	ldr	r0, [pc, #16]	; (67bc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    67aa:	2100      	movs	r1, #0
    67ac:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    67b0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    67b4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    67b8:	4770      	bx	lr
    67ba:	0000      	.short	0x0000
    67bc:	4000f000 	.word	0x4000f000

000067c0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    67c0:	b570      	push	{r4, r5, r6, lr}
    67c2:	4d05      	ldr	r5, [pc, #20]	; (67d8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    67c4:	2400      	movs	r4, #0
    67c6:	7828      	ldrb	r0, [r5, #0]
    67c8:	b110      	cbz	r0, 67d0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    67ca:	f000 f80f 	bl	67ec <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>
    67ce:	702c      	strb	r4, [r5, #0]
    67d0:	706c      	strb	r4, [r5, #1]
    67d2:	70ac      	strb	r4, [r5, #2]
    67d4:	bd70      	pop	{r4, r5, r6, pc}
    67d6:	0000      	.short	0x0000
    67d8:	20000191 	.word	0x20000191

000067dc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    67dc:	4802      	ldr	r0, [pc, #8]	; (67e8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    67de:	2100      	movs	r1, #0
    67e0:	7001      	strb	r1, [r0, #0]
    67e2:	7041      	strb	r1, [r0, #1]
    67e4:	7081      	strb	r1, [r0, #2]
    67e6:	4770      	bx	lr
    67e8:	20000191 	.word	0x20000191
    67ec:	4902      	ldr	r1, [pc, #8]	; (67f8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x1c>)
    67ee:	4801      	ldr	r0, [pc, #4]	; (67f4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x18>)
    67f0:	6008      	str	r0, [r1, #0]
    67f2:	4770      	bx	lr
    67f4:	02020000 	.word	0x02020000
    67f8:	4001f508 	.word	0x4001f508

000067fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    67fc:	b510      	push	{r4, lr}
    67fe:	4604      	mov	r4, r0
    6800:	f000 f820 	bl	6844 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    6804:	2c00      	cmp	r4, #0
    6806:	d00e      	beq.n	6826 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    6808:	4a0b      	ldr	r2, [pc, #44]	; (6838 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    680a:	480b      	ldr	r0, [pc, #44]	; (6838 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    680c:	490b      	ldr	r1, [pc, #44]	; (683c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    680e:	3214      	adds	r2, #20
    6810:	2c01      	cmp	r4, #1
    6812:	d005      	beq.n	6820 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    6814:	2c02      	cmp	r4, #2
    6816:	d007      	beq.n	6828 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    6818:	2182      	movs	r1, #130	; 0x82
    681a:	203d      	movs	r0, #61	; 0x3d
    681c:	f7fd f9fc 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6820:	2302      	movs	r3, #2
    6822:	6003      	str	r3, [r0, #0]
    6824:	6011      	str	r1, [r2, #0]
    6826:	bd10      	pop	{r4, pc}
    6828:	2303      	movs	r3, #3
    682a:	6003      	str	r3, [r0, #0]
    682c:	6011      	str	r1, [r2, #0]
    682e:	4904      	ldr	r1, [pc, #16]	; (6840 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    6830:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    6834:	6008      	str	r0, [r1, #0]
    6836:	bd10      	pop	{r4, pc}
    6838:	4000f500 	.word	0x4000f500
    683c:	20001093 	.word	0x20001093
    6840:	4001f504 	.word	0x4001f504
    6844:	4805      	ldr	r0, [pc, #20]	; (685c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    6846:	b510      	push	{r4, lr}
    6848:	2100      	movs	r1, #0
    684a:	6001      	str	r1, [r0, #0]
    684c:	6001      	str	r1, [r0, #0]
    684e:	f7ff ffb7 	bl	67c0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6852:	4903      	ldr	r1, [pc, #12]	; (6860 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    6854:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    6858:	6008      	str	r0, [r1, #0]
    685a:	bd10      	pop	{r4, pc}
    685c:	4000f500 	.word	0x4000f500
    6860:	4001f508 	.word	0x4001f508

00006864 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    6864:	4805      	ldr	r0, [pc, #20]	; (687c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    6866:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    686a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    686e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    6872:	2100      	movs	r1, #0
    6874:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    6878:	4770      	bx	lr
    687a:	0000      	.short	0x0000
    687c:	40001000 	.word	0x40001000

00006880 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    6880:	4904      	ldr	r1, [pc, #16]	; (6894 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    6882:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    6886:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    688a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    688e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    6892:	4770      	bx	lr
    6894:	40001000 	.word	0x40001000

00006898 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    6898:	4801      	ldr	r0, [pc, #4]	; (68a0 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    689a:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    689e:	4770      	bx	lr
    68a0:	20000d50 	.word	0x20000d50

000068a4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    68a4:	4902      	ldr	r1, [pc, #8]	; (68b0 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    68a6:	5c08      	ldrb	r0, [r1, r0]
    68a8:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    68ac:	4770      	bx	lr
    68ae:	0000      	.short	0x0000
    68b0:	0000752a 	.word	0x0000752a

000068b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    68b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68b6:	4c24      	ldr	r4, [pc, #144]	; (6948 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    68b8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    68bc:	f010 0f10 	tst.w	r0, #16
    68c0:	d001      	beq.n	68c6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    68c2:	2701      	movs	r7, #1
    68c4:	e000      	b.n	68c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    68c6:	2700      	movs	r7, #0
    68c8:	2010      	movs	r0, #16
    68ca:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    68ce:	2002      	movs	r0, #2
    68d0:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    68d4:	481d      	ldr	r0, [pc, #116]	; (694c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    68d6:	2500      	movs	r5, #0
    68d8:	491d      	ldr	r1, [pc, #116]	; (6950 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    68da:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    68de:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    68e2:	6008      	str	r0, [r1, #0]
    68e4:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    68e8:	f44f 7688 	mov.w	r6, #272	; 0x110
    68ec:	f010 0fff 	tst.w	r0, #255	; 0xff
    68f0:	d019      	beq.n	6926 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    68f2:	20ff      	movs	r0, #255	; 0xff
    68f4:	f88d 0000 	strb.w	r0, [sp]
    68f8:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    68fc:	2001      	movs	r0, #1
    68fe:	6120      	str	r0, [r4, #16]
    6900:	e005      	b.n	690e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    6902:	bf00      	nop
    6904:	f89d 0000 	ldrb.w	r0, [sp]
    6908:	1e40      	subs	r0, r0, #1
    690a:	f88d 0000 	strb.w	r0, [sp]
    690e:	f89d 0000 	ldrb.w	r0, [sp]
    6912:	b128      	cbz	r0, 6920 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    6914:	4631      	mov	r1, r6
    6916:	4620      	mov	r0, r4
    6918:	f003 fd0c 	bl	a334 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    691c:	2800      	cmp	r0, #0
    691e:	d0f1      	beq.n	6904 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    6920:	f89d 0000 	ldrb.w	r0, [sp]
    6924:	b158      	cbz	r0, 693e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    6926:	f000 fbf5 	bl	7114 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    692a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    692e:	f000 fd7d 	bl	742c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    6932:	2f00      	cmp	r7, #0
    6934:	d002      	beq.n	693c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    6936:	2010      	movs	r0, #16
    6938:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    693c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    693e:	f640 018f 	movw	r1, #2191	; 0x88f
    6942:	203e      	movs	r0, #62	; 0x3e
    6944:	f7fd f968 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6948:	40001000 	.word	0x40001000
    694c:	20000d50 	.word	0x20000d50
    6950:	4001f508 	.word	0x4001f508

00006954 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    6954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6958:	4d18      	ldr	r5, [pc, #96]	; (69bc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    695a:	4607      	mov	r7, r0
    695c:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    6960:	07c2      	lsls	r2, r0, #31
    6962:	d00f      	beq.n	6984 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    6964:	4c16      	ldr	r4, [pc, #88]	; (69c0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    6966:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    696a:	f042 0201 	orr.w	r2, r2, #1
    696e:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    6972:	f040 0002 	orr.w	r0, r0, #2
    6976:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    697a:	2601      	movs	r6, #1
    697c:	b13f      	cbz	r7, 698e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    697e:	2f01      	cmp	r7, #1
    6980:	d00b      	beq.n	699a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    6982:	e010      	b.n	69a6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    6984:	f240 717c 	movw	r1, #1916	; 0x77c
    6988:	203e      	movs	r0, #62	; 0x3e
    698a:	f7fd f945 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    698e:	4608      	mov	r0, r1
    6990:	f000 fda6 	bl	74e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    6994:	726e      	strb	r6, [r5, #9]
    6996:	6026      	str	r6, [r4, #0]
    6998:	e005      	b.n	69a6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    699a:	4608      	mov	r0, r1
    699c:	f000 fd86 	bl	74ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    69a0:	2002      	movs	r0, #2
    69a2:	7268      	strb	r0, [r5, #9]
    69a4:	6066      	str	r6, [r4, #4]
    69a6:	4807      	ldr	r0, [pc, #28]	; (69c4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    69a8:	64c6      	str	r6, [r0, #76]	; 0x4c
    69aa:	4806      	ldr	r0, [pc, #24]	; (69c4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    69ac:	300c      	adds	r0, #12
    69ae:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    69b2:	4638      	mov	r0, r7
    69b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    69b8:	f000 bd0a 	b.w	73d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    69bc:	20000d50 	.word	0x20000d50
    69c0:	40001000 	.word	0x40001000
    69c4:	40008000 	.word	0x40008000

000069c8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    69c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    69cc:	4c2c      	ldr	r4, [pc, #176]	; (6a80 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    69ce:	0006      	movs	r6, r0
    69d0:	4d2c      	ldr	r5, [pc, #176]	; (6a84 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    69d2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    69d6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 6a88 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    69da:	f040 0002 	orr.w	r0, r0, #2
    69de:	4689      	mov	r9, r1
    69e0:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    69e4:	f04f 0700 	mov.w	r7, #0
    69e8:	d002      	beq.n	69f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    69ea:	2e01      	cmp	r6, #1
    69ec:	d020      	beq.n	6a30 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    69ee:	e036      	b.n	6a5e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    69f0:	4608      	mov	r0, r1
    69f2:	f000 fd75 	bl	74e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    69f6:	2001      	movs	r0, #1
    69f8:	7260      	strb	r0, [r4, #9]
    69fa:	79e0      	ldrb	r0, [r4, #7]
    69fc:	2801      	cmp	r0, #1
    69fe:	d105      	bne.n	6a0c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    6a00:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    6a04:	f040 0008 	orr.w	r0, r0, #8
    6a08:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    6a0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6a0e:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    6a12:	62a0      	str	r0, [r4, #40]	; 0x28
    6a14:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    6a18:	f8c8 0000 	str.w	r0, [r8]
    6a1c:	491b      	ldr	r1, [pc, #108]	; (6a8c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    6a1e:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    6a22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    6a26:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    6a2a:	fbb0 f7f1 	udiv	r7, r0, r1
    6a2e:	e016      	b.n	6a5e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    6a30:	4608      	mov	r0, r1
    6a32:	f000 fd3b 	bl	74ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    6a36:	2002      	movs	r0, #2
    6a38:	7260      	strb	r0, [r4, #9]
    6a3a:	79e0      	ldrb	r0, [r4, #7]
    6a3c:	2801      	cmp	r0, #1
    6a3e:	d105      	bne.n	6a4c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    6a40:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    6a44:	f040 0004 	orr.w	r0, r0, #4
    6a48:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    6a4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6a4e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    6a52:	62a0      	str	r0, [r4, #40]	; 0x28
    6a54:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    6a58:	f8c8 0000 	str.w	r0, [r8]
    6a5c:	2729      	movs	r7, #41	; 0x29
    6a5e:	f000 fbc5 	bl	71ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    6a62:	f000 ffd8 	bl	7a16 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    6a66:	b120      	cbz	r0, 6a72 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    6a68:	f7ff ff24 	bl	68b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6a6c:	2000      	movs	r0, #0
    6a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a72:	2100      	movs	r1, #0
    6a74:	4630      	mov	r0, r6
    6a76:	f000 fcab 	bl	73d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    6a7a:	4638      	mov	r0, r7
    6a7c:	e7f7      	b.n	6a6e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    6a7e:	0000      	.short	0x0000
    6a80:	20000d50 	.word	0x20000d50
    6a84:	40001000 	.word	0x40001000
    6a88:	4001f504 	.word	0x4001f504
    6a8c:	00007524 	.word	0x00007524

00006a90 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    6a90:	b510      	push	{r4, lr}
    6a92:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    6a94:	4901      	ldr	r1, [pc, #4]	; (6a9c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    6a96:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    6a9a:	bd10      	pop	{r4, pc}
    6a9c:	20000d40 	.word	0x20000d40

00006aa0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    6aa0:	b570      	push	{r4, r5, r6, lr}
    6aa2:	4c0f      	ldr	r4, [pc, #60]	; (6ae0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    6aa4:	4603      	mov	r3, r0
    6aa6:	2002      	movs	r0, #2
    6aa8:	7320      	strb	r0, [r4, #12]
    6aaa:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    6aae:	2096      	movs	r0, #150	; 0x96
    6ab0:	f894 1020 	ldrb.w	r1, [r4, #32]
    6ab4:	7d22      	ldrb	r2, [r4, #20]
    6ab6:	2d01      	cmp	r5, #1
    6ab8:	d00e      	beq.n	6ad8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    6aba:	f000 fd6f 	bl	759c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    6abe:	6120      	str	r0, [r4, #16]
    6ac0:	4808      	ldr	r0, [pc, #32]	; (6ae4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    6ac2:	2100      	movs	r1, #0
    6ac4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    6ac8:	6921      	ldr	r1, [r4, #16]
    6aca:	69e0      	ldr	r0, [r4, #28]
    6acc:	4408      	add	r0, r1
    6ace:	4905      	ldr	r1, [pc, #20]	; (6ae4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    6ad0:	1d09      	adds	r1, r1, #4
    6ad2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    6ad6:	bd70      	pop	{r4, r5, r6, pc}
    6ad8:	f000 fd7e 	bl	75d8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    6adc:	e7ef      	b.n	6abe <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    6ade:	0000      	.short	0x0000
    6ae0:	20000d50 	.word	0x20000d50
    6ae4:	40008000 	.word	0x40008000

00006ae8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    6ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6aec:	2238      	movs	r2, #56	; 0x38
    6aee:	2100      	movs	r1, #0
    6af0:	4813      	ldr	r0, [pc, #76]	; (6b40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    6af2:	f001 f976 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6af6:	f000 fc99 	bl	742c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    6afa:	f001 f88d 	bl	7c18 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    6afe:	4d11      	ldr	r5, [pc, #68]	; (6b44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    6b00:	4e10      	ldr	r6, [pc, #64]	; (6b44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    6b02:	2400      	movs	r4, #0
    6b04:	4f0f      	ldr	r7, [pc, #60]	; (6b44 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    6b06:	3508      	adds	r5, #8
    6b08:	3610      	adds	r6, #16
    6b0a:	b928      	cbnz	r0, 6b18 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    6b0c:	f001 f89b 	bl	7c46 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    6b10:	b910      	cbnz	r0, 6b18 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    6b12:	f001 f8a2 	bl	7c5a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    6b16:	b108      	cbz	r0, 6b1c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    6b18:	2224      	movs	r2, #36	; 0x24
    6b1a:	e006      	b.n	6b2a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    6b1c:	f001 f8dd 	bl	7cda <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    6b20:	b910      	cbnz	r0, 6b28 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    6b22:	f001 f8d0 	bl	7cc6 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    6b26:	b140      	cbz	r0, 6b3a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    6b28:	2240      	movs	r2, #64	; 0x40
    6b2a:	21ff      	movs	r1, #255	; 0xff
    6b2c:	4638      	mov	r0, r7
    6b2e:	f001 f958 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6b32:	602c      	str	r4, [r5, #0]
    6b34:	6034      	str	r4, [r6, #0]
    6b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b3a:	2238      	movs	r2, #56	; 0x38
    6b3c:	e7f5      	b.n	6b2a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    6b3e:	0000      	.short	0x0000
    6b40:	20000d50 	.word	0x20000d50
    6b44:	40000e00 	.word	0x40000e00

00006b48 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    6b48:	b510      	push	{r4, lr}
    6b4a:	f000 fc23 	bl	7394 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    6b4e:	f7ff feb1 	bl	68b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6b52:	f7fc ff13 	bl	397c <mpsl_fem_disable>
    6b56:	b130      	cbz	r0, 6b66 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    6b58:	1c40      	adds	r0, r0, #1
    6b5a:	d004      	beq.n	6b66 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    6b5c:	f240 516d 	movw	r1, #1389	; 0x56d
    6b60:	203e      	movs	r0, #62	; 0x3e
    6b62:	f7fd f859 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b66:	480f      	ldr	r0, [pc, #60]	; (6ba4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    6b68:	4a0f      	ldr	r2, [pc, #60]	; (6ba8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    6b6a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    6b6c:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    6b70:	6011      	str	r1, [r2, #0]
    6b72:	2400      	movs	r4, #0
    6b74:	6284      	str	r4, [r0, #40]	; 0x28
    6b76:	7304      	strb	r4, [r0, #12]
    6b78:	61c4      	str	r4, [r0, #28]
    6b7a:	6184      	str	r4, [r0, #24]
    6b7c:	f000 fc0a 	bl	7394 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    6b80:	480a      	ldr	r0, [pc, #40]	; (6bac <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    6b82:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    6b86:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    6b8a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    6b8e:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    6b92:	2001      	movs	r0, #1
    6b94:	f003 fbbd 	bl	a312 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    6b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6b9c:	2001      	movs	r0, #1
    6b9e:	f003 bbab 	b.w	a2f8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    6ba2:	0000      	.short	0x0000
    6ba4:	20000d50 	.word	0x20000d50
    6ba8:	4001f508 	.word	0x4001f508
    6bac:	40008000 	.word	0x40008000

00006bb0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    6bb0:	b570      	push	{r4, r5, r6, lr}
    6bb2:	2001      	movs	r0, #1
    6bb4:	f003 fbad 	bl	a312 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    6bb8:	4c37      	ldr	r4, [pc, #220]	; (6c98 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    6bba:	2000      	movs	r0, #0
    6bbc:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    6bc0:	2001      	movs	r0, #1
    6bc2:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    6bc6:	f001 f85e 	bl	7c86 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    6bca:	4d34      	ldr	r5, [pc, #208]	; (6c9c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    6bcc:	b118      	cbz	r0, 6bd6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    6bce:	6828      	ldr	r0, [r5, #0]
    6bd0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6bd4:	6028      	str	r0, [r5, #0]
    6bd6:	f001 f84a 	bl	7c6e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    6bda:	b128      	cbz	r0, 6be8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    6bdc:	6828      	ldr	r0, [r5, #0]
    6bde:	4930      	ldr	r1, [pc, #192]	; (6ca0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    6be0:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    6be4:	4308      	orrs	r0, r1
    6be6:	6028      	str	r0, [r5, #0]
    6be8:	f001 f85d 	bl	7ca6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6bec:	b138      	cbz	r0, 6bfe <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    6bee:	482b      	ldr	r0, [pc, #172]	; (6c9c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    6bf0:	1d00      	adds	r0, r0, #4
    6bf2:	6801      	ldr	r1, [r0, #0]
    6bf4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    6bf8:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    6bfc:	6001      	str	r1, [r0, #0]
    6bfe:	4927      	ldr	r1, [pc, #156]	; (6c9c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    6c00:	4828      	ldr	r0, [pc, #160]	; (6ca4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    6c02:	313c      	adds	r1, #60	; 0x3c
    6c04:	6008      	str	r0, [r1, #0]
    6c06:	f7fc feef 	bl	39e8 <mpsl_fem_device_config_254_apply_get>
    6c0a:	b140      	cbz	r0, 6c1e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    6c0c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    6c10:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    6c14:	1c41      	adds	r1, r0, #1
    6c16:	d002      	beq.n	6c1e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    6c18:	4920      	ldr	r1, [pc, #128]	; (6c9c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    6c1a:	3110      	adds	r1, #16
    6c1c:	6008      	str	r0, [r1, #0]
    6c1e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    6c22:	6e00      	ldr	r0, [r0, #96]	; 0x60
    6c24:	1c41      	adds	r1, r0, #1
    6c26:	d004      	beq.n	6c32 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    6c28:	491f      	ldr	r1, [pc, #124]	; (6ca8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    6c2a:	680a      	ldr	r2, [r1, #0]
    6c2c:	f360 4217 	bfi	r2, r0, #16, #8
    6c30:	600a      	str	r2, [r1, #0]
    6c32:	f240 1103 	movw	r1, #259	; 0x103
    6c36:	f240 605b 	movw	r0, #1627	; 0x65b
    6c3a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    6c3e:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    6c42:	2001      	movs	r0, #1
    6c44:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    6c48:	f000 f842 	bl	6cd0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    6c4c:	f240 2001 	movw	r0, #513	; 0x201
    6c50:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    6c54:	2002      	movs	r0, #2
    6c56:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    6c5a:	4914      	ldr	r1, [pc, #80]	; (6cac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    6c5c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    6c60:	6008      	str	r0, [r1, #0]
    6c62:	4913      	ldr	r1, [pc, #76]	; (6cb0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    6c64:	2000      	movs	r0, #0
    6c66:	4d13      	ldr	r5, [pc, #76]	; (6cb4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    6c68:	8608      	strh	r0, [r1, #48]	; 0x30
    6c6a:	3110      	adds	r1, #16
    6c6c:	61c8      	str	r0, [r1, #28]
    6c6e:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    6c72:	7028      	strb	r0, [r5, #0]
    6c74:	2001      	movs	r0, #1
    6c76:	f003 fb3f 	bl	a2f8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    6c7a:	2010      	movs	r0, #16
    6c7c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    6c80:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6c84:	2002      	movs	r0, #2
    6c86:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    6c8a:	6868      	ldr	r0, [r5, #4]
    6c8c:	2800      	cmp	r0, #0
    6c8e:	d002      	beq.n	6c96 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    6c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6c94:	4700      	bx	r0
    6c96:	bd70      	pop	{r4, r5, r6, pc}
    6c98:	40001000 	.word	0x40001000
    6c9c:	4000173c 	.word	0x4000173c
    6ca0:	80000096 	.word	0x80000096
    6ca4:	8900002c 	.word	0x8900002c
    6ca8:	4000158c 	.word	0x4000158c
    6cac:	4001f504 	.word	0x4001f504
    6cb0:	20000d40 	.word	0x20000d40
    6cb4:	20000148 	.word	0x20000148

00006cb8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    6cb8:	4901      	ldr	r1, [pc, #4]	; (6cc0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    6cba:	7548      	strb	r0, [r1, #21]
    6cbc:	4770      	bx	lr
    6cbe:	0000      	.short	0x0000
    6cc0:	20000d50 	.word	0x20000d50

00006cc4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    6cc4:	4901      	ldr	r1, [pc, #4]	; (6ccc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    6cc6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    6cca:	4770      	bx	lr
    6ccc:	00007578 	.word	0x00007578

00006cd0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    6cd0:	4908      	ldr	r1, [pc, #32]	; (6cf4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    6cd2:	b510      	push	{r4, lr}
    6cd4:	7508      	strb	r0, [r1, #20]
    6cd6:	4908      	ldr	r1, [pc, #32]	; (6cf8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    6cd8:	2801      	cmp	r0, #1
    6cda:	d006      	beq.n	6cea <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    6cdc:	2802      	cmp	r0, #2
    6cde:	d006      	beq.n	6cee <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    6ce0:	f640 5169 	movw	r1, #3433	; 0xd69
    6ce4:	203e      	movs	r0, #62	; 0x3e
    6ce6:	f7fc ff97 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cea:	2003      	movs	r0, #3
    6cec:	e000      	b.n	6cf0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    6cee:	2004      	movs	r0, #4
    6cf0:	6008      	str	r0, [r1, #0]
    6cf2:	bd10      	pop	{r4, pc}
    6cf4:	20000d50 	.word	0x20000d50
    6cf8:	40001510 	.word	0x40001510

00006cfc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    6cfc:	4905      	ldr	r1, [pc, #20]	; (6d14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    6cfe:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    6d02:	4805      	ldr	r0, [pc, #20]	; (6d18 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    6d04:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    6d08:	f041 0101 	orr.w	r1, r1, #1
    6d0c:	7001      	strb	r1, [r0, #0]
    6d0e:	f000 ba33 	b.w	7178 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    6d12:	0000      	.short	0x0000
    6d14:	40001000 	.word	0x40001000
    6d18:	20000d50 	.word	0x20000d50

00006d1c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    6d1c:	4901      	ldr	r1, [pc, #4]	; (6d24 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    6d1e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    6d22:	4770      	bx	lr
    6d24:	00007584 	.word	0x00007584

00006d28 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    6d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d2c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 6dd0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>
    6d30:	4d28      	ldr	r5, [pc, #160]	; (6dd4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xac>)
    6d32:	460f      	mov	r7, r1
    6d34:	0006      	movs	r6, r0
    6d36:	4614      	mov	r4, r2
    6d38:	f04f 0801 	mov.w	r8, #1
    6d3c:	d004      	beq.n	6d48 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20>
    6d3e:	2e01      	cmp	r6, #1
    6d40:	d010      	beq.n	6d64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3c>
    6d42:	f640 0124 	movw	r1, #2084	; 0x824
    6d46:	e039      	b.n	6dbc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x94>
    6d48:	4610      	mov	r0, r2
    6d4a:	f000 fbc9 	bl	74e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    6d4e:	4822      	ldr	r0, [pc, #136]	; (6dd8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>)
    6d50:	f885 8009 	strb.w	r8, [r5, #9]
    6d54:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    6d58:	4638      	mov	r0, r7
    6d5a:	f000 fb6f 	bl	743c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    6d5e:	4604      	mov	r4, r0
    6d60:	4648      	mov	r0, r9
    6d62:	e00c      	b.n	6d7e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x56>
    6d64:	4610      	mov	r0, r2
    6d66:	f000 fba1 	bl	74ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    6d6a:	2002      	movs	r0, #2
    6d6c:	7268      	strb	r0, [r5, #9]
    6d6e:	f649 71ba 	movw	r1, #40890	; 0x9fba
    6d72:	4638      	mov	r0, r7
    6d74:	f000 fb62 	bl	743c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    6d78:	4604      	mov	r4, r0
    6d7a:	4815      	ldr	r0, [pc, #84]	; (6dd0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>)
    6d7c:	1d00      	adds	r0, r0, #4
    6d7e:	f000 fb1b 	bl	73b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    6d82:	4f16      	ldr	r7, [pc, #88]	; (6ddc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    6d84:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
    6d88:	4916      	ldr	r1, [pc, #88]	; (6de4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>)
    6d8a:	4815      	ldr	r0, [pc, #84]	; (6de0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>)
    6d8c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    6d90:	2010      	movs	r0, #16
    6d92:	f8c9 0304 	str.w	r0, [r9, #772]	; 0x304
    6d96:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6d98:	4913      	ldr	r1, [pc, #76]	; (6de8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc0>)
    6d9a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    6d9e:	62a8      	str	r0, [r5, #40]	; 0x28
    6da0:	0138      	lsls	r0, r7, #4
    6da2:	6008      	str	r0, [r1, #0]
    6da4:	f000 fa22 	bl	71ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    6da8:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
    6dac:	480b      	ldr	r0, [pc, #44]	; (6ddc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    6dae:	300c      	adds	r0, #12
    6db0:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    6db4:	42a0      	cmp	r0, r4
    6db6:	d304      	bcc.n	6dc2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9a>
    6db8:	f640 013a 	movw	r1, #2106	; 0x83a
    6dbc:	203e      	movs	r0, #62	; 0x3e
    6dbe:	f7fc ff2b 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dc2:	4621      	mov	r1, r4
    6dc4:	4630      	mov	r0, r6
    6dc6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6dca:	f000 bb01 	b.w	73d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    6dce:	0000      	.short	0x0000
    6dd0:	40001000 	.word	0x40001000
    6dd4:	20000d50 	.word	0x20000d50
    6dd8:	00007524 	.word	0x00007524
    6ddc:	40008000 	.word	0x40008000
    6de0:	40008140 	.word	0x40008140
    6de4:	4001f098 	.word	0x4001f098
    6de8:	4001f504 	.word	0x4001f504

00006dec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    6dec:	4b0d      	ldr	r3, [pc, #52]	; (6e24 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    6dee:	b510      	push	{r4, lr}
    6df0:	71d8      	strb	r0, [r3, #7]
    6df2:	729a      	strb	r2, [r3, #10]
    6df4:	b151      	cbz	r1, 6e0c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    6df6:	2002      	movs	r0, #2
    6df8:	7218      	strb	r0, [r3, #8]
    6dfa:	2801      	cmp	r0, #1
    6dfc:	d008      	beq.n	6e10 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    6dfe:	2802      	cmp	r0, #2
    6e00:	d00f      	beq.n	6e22 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    6e02:	f640 2145 	movw	r1, #2629	; 0xa45
    6e06:	203e      	movs	r0, #62	; 0x3e
    6e08:	f7fc ff06 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e0c:	2001      	movs	r0, #1
    6e0e:	e7f3      	b.n	6df8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    6e10:	7a58      	ldrb	r0, [r3, #9]
    6e12:	2802      	cmp	r0, #2
    6e14:	d105      	bne.n	6e22 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    6e16:	f000 f973 	bl	7100 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    6e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6e1e:	f000 baa1 	b.w	7364 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    6e22:	bd10      	pop	{r4, pc}
    6e24:	20000d50 	.word	0x20000d50

00006e28 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    6e28:	4904      	ldr	r1, [pc, #16]	; (6e3c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    6e2a:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    6e2e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    6e32:	4249      	negs	r1, r1
    6e34:	7001      	strb	r1, [r0, #0]
    6e36:	2001      	movs	r0, #1
    6e38:	4770      	bx	lr
    6e3a:	0000      	.short	0x0000
    6e3c:	40001000 	.word	0x40001000

00006e40 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    6e40:	4903      	ldr	r1, [pc, #12]	; (6e50 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    6e42:	0e02      	lsrs	r2, r0, #24
    6e44:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    6e48:	0200      	lsls	r0, r0, #8
    6e4a:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    6e4e:	4770      	bx	lr
    6e50:	40001000 	.word	0x40001000

00006e54 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    6e54:	4901      	ldr	r1, [pc, #4]	; (6e5c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    6e56:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    6e5a:	4770      	bx	lr
    6e5c:	40001000 	.word	0x40001000

00006e60 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    6e60:	b510      	push	{r4, lr}
    6e62:	2200      	movs	r2, #0
    6e64:	2901      	cmp	r1, #1
    6e66:	d006      	beq.n	6e76 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    6e68:	2902      	cmp	r1, #2
    6e6a:	d002      	beq.n	6e72 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    6e6c:	f240 21d9 	movw	r1, #729	; 0x2d9
    6e70:	e014      	b.n	6e9c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    6e72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6e76:	490b      	ldr	r1, [pc, #44]	; (6ea4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    6e78:	430a      	orrs	r2, r1
    6e7a:	490b      	ldr	r1, [pc, #44]	; (6ea8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    6e7c:	600a      	str	r2, [r1, #0]
    6e7e:	490b      	ldr	r1, [pc, #44]	; (6eac <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    6e80:	4308      	orrs	r0, r1
    6e82:	4909      	ldr	r1, [pc, #36]	; (6ea8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    6e84:	1d09      	adds	r1, r1, #4
    6e86:	6008      	str	r0, [r1, #0]
    6e88:	4809      	ldr	r0, [pc, #36]	; (6eb0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    6e8a:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    6e8e:	b2c0      	uxtb	r0, r0
    6e90:	2803      	cmp	r0, #3
    6e92:	d001      	beq.n	6e98 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    6e94:	280b      	cmp	r0, #11
    6e96:	d104      	bne.n	6ea2 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    6e98:	f240 21f1 	movw	r1, #753	; 0x2f1
    6e9c:	203e      	movs	r0, #62	; 0x3e
    6e9e:	f7fc febb 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ea2:	bd10      	pop	{r4, pc}
    6ea4:	00100108 	.word	0x00100108
    6ea8:	40001514 	.word	0x40001514
    6eac:	02030000 	.word	0x02030000
    6eb0:	40001000 	.word	0x40001000

00006eb4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    6eb4:	4901      	ldr	r1, [pc, #4]	; (6ebc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    6eb6:	7588      	strb	r0, [r1, #22]
    6eb8:	4770      	bx	lr
    6eba:	0000      	.short	0x0000
    6ebc:	20000d50 	.word	0x20000d50

00006ec0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    6ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ec4:	4852      	ldr	r0, [pc, #328]	; (7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    6ec6:	f04f 0a01 	mov.w	sl, #1
    6eca:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    6ece:	4850      	ldr	r0, [pc, #320]	; (7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    6ed0:	300c      	adds	r0, #12
    6ed2:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    6ed6:	f000 fd9c 	bl	7a12 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    6eda:	4c4e      	ldr	r4, [pc, #312]	; (7014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    6edc:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    6ee0:	f000 f918 	bl	7114 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    6ee4:	494c      	ldr	r1, [pc, #304]	; (7018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    6ee6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6ee8:	6008      	str	r0, [r1, #0]
    6eea:	f8df 9130 	ldr.w	r9, [pc, #304]	; 701c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
    6eee:	2000      	movs	r0, #0
    6ef0:	62a0      	str	r0, [r4, #40]	; 0x28
    6ef2:	f8d9 2200 	ldr.w	r2, [r9, #512]	; 0x200
    6ef6:	f240 131d 	movw	r3, #285	; 0x11d
    6efa:	439a      	bics	r2, r3
    6efc:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    6f00:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    6f04:	f000 f986 	bl	7214 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    6f08:	4605      	mov	r5, r0
    6f0a:	4841      	ldr	r0, [pc, #260]	; (7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    6f0c:	3008      	adds	r0, #8
    6f0e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    6f12:	4e3f      	ldr	r6, [pc, #252]	; (7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    6f14:	61e0      	str	r0, [r4, #28]
    6f16:	1d36      	adds	r6, r6, #4
    6f18:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    6f1c:	61a0      	str	r0, [r4, #24]
    6f1e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    6f22:	7d21      	ldrb	r1, [r4, #20]
    6f24:	f884 1020 	strb.w	r1, [r4, #32]
    6f28:	7a61      	ldrb	r1, [r4, #9]
    6f2a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    6f2e:	46a0      	mov	r8, r4
    6f30:	2400      	movs	r4, #0
    6f32:	4639      	mov	r1, r7
    6f34:	4628      	mov	r0, r5
    6f36:	f000 f9e1 	bl	72fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    6f3a:	b910      	cbnz	r0, 6f42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    6f3c:	f8c9 a010 	str.w	sl, [r9, #16]
    6f40:	2401      	movs	r4, #1
    6f42:	4f34      	ldr	r7, [pc, #208]	; (7014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    6f44:	07e8      	lsls	r0, r5, #31
    6f46:	f1a7 0710 	sub.w	r7, r7, #16
    6f4a:	d002      	beq.n	6f52 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    6f4c:	6838      	ldr	r0, [r7, #0]
    6f4e:	4780      	blx	r0
    6f50:	e032      	b.n	6fb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    6f52:	07a8      	lsls	r0, r5, #30
    6f54:	d527      	bpl.n	6fa6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    6f56:	0768      	lsls	r0, r5, #29
    6f58:	d41f      	bmi.n	6f9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    6f5a:	f000 fea4 	bl	7ca6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6f5e:	b9e0      	cbnz	r0, 6f9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    6f60:	f000 fe91 	bl	7c86 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    6f64:	b9c8      	cbnz	r0, 6f9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    6f66:	482e      	ldr	r0, [pc, #184]	; (7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    6f68:	6800      	ldr	r0, [r0, #0]
    6f6a:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    6f6e:	f3c0 5142 	ubfx	r1, r0, #21, #3
    6f72:	f000 030f 	and.w	r3, r0, #15
    6f76:	f3c0 1203 	ubfx	r2, r0, #4, #4
    6f7a:	f3c0 2003 	ubfx	r0, r0, #8, #4
    6f7e:	f1bc 0f00 	cmp.w	ip, #0
    6f82:	d00a      	beq.n	6f9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    6f84:	b10b      	cbz	r3, 6f8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    6f86:	b102      	cbz	r2, 6f8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    6f88:	b938      	cbnz	r0, 6f9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    6f8a:	4825      	ldr	r0, [pc, #148]	; (7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    6f8c:	1d00      	adds	r0, r0, #4
    6f8e:	6800      	ldr	r0, [r0, #0]
    6f90:	b118      	cbz	r0, 6f9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    6f92:	2903      	cmp	r1, #3
    6f94:	d201      	bcs.n	6f9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    6f96:	f045 0504 	orr.w	r5, r5, #4
    6f9a:	f345 0080 	sbfx	r0, r5, #2, #1
    6f9e:	4621      	mov	r1, r4
    6fa0:	1c40      	adds	r0, r0, #1
    6fa2:	687a      	ldr	r2, [r7, #4]
    6fa4:	e007      	b.n	6fb6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    6fa6:	f015 0f28 	tst.w	r5, #40	; 0x28
    6faa:	d005      	beq.n	6fb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    6fac:	f345 1140 	sbfx	r1, r5, #5, #1
    6fb0:	68ba      	ldr	r2, [r7, #8]
    6fb2:	4620      	mov	r0, r4
    6fb4:	1c49      	adds	r1, r1, #1
    6fb6:	4790      	blx	r2
    6fb8:	06e8      	lsls	r0, r5, #27
    6fba:	d501      	bpl.n	6fc0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    6fbc:	68f8      	ldr	r0, [r7, #12]
    6fbe:	4780      	blx	r0
    6fc0:	f898 1009 	ldrb.w	r1, [r8, #9]
    6fc4:	4640      	mov	r0, r8
    6fc6:	2902      	cmp	r1, #2
    6fc8:	d120      	bne.n	700c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
    6fca:	7b01      	ldrb	r1, [r0, #12]
    6fcc:	2900      	cmp	r1, #0
    6fce:	d01d      	beq.n	700c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
    6fd0:	2902      	cmp	r1, #2
    6fd2:	d004      	beq.n	6fde <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11e>
    6fd4:	2901      	cmp	r1, #1
    6fd6:	d009      	beq.n	6fec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12c>
    6fd8:	f640 4148 	movw	r1, #3144	; 0xc48
    6fdc:	e00d      	b.n	6ffa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    6fde:	69c1      	ldr	r1, [r0, #28]
    6fe0:	f8d8 0010 	ldr.w	r0, [r8, #16]
    6fe4:	4408      	add	r0, r1
    6fe6:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    6fea:	e00b      	b.n	7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    6fec:	6901      	ldr	r1, [r0, #16]
    6fee:	f8d8 001c 	ldr.w	r0, [r8, #28]
    6ff2:	4281      	cmp	r1, r0
    6ff4:	d804      	bhi.n	7000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>
    6ff6:	f640 4149 	movw	r1, #3145	; 0xc49
    6ffa:	203e      	movs	r0, #62	; 0x3e
    6ffc:	f7fc fe0c 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7000:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    7004:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7008:	f000 b9b6 	b.w	7378 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    700c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7010:	40008000 	.word	0x40008000
    7014:	20000d50 	.word	0x20000d50
    7018:	4001f508 	.word	0x4001f508
    701c:	40001000 	.word	0x40001000
    7020:	40001450 	.word	0x40001450

00007024 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    7024:	b570      	push	{r4, r5, r6, lr}
    7026:	4b16      	ldr	r3, [pc, #88]	; (7080 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    7028:	888c      	ldrh	r4, [r1, #4]
    702a:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    702e:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    7032:	780c      	ldrb	r4, [r1, #0]
    7034:	f8d1 1001 	ldr.w	r1, [r1, #1]
    7038:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    703c:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    7040:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    7044:	2401      	movs	r4, #1
    7046:	4084      	lsls	r4, r0
    7048:	b2c9      	uxtb	r1, r1
    704a:	b2e5      	uxtb	r5, r4
    704c:	4329      	orrs	r1, r5
    704e:	b132      	cbz	r2, 705e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    7050:	2a01      	cmp	r2, #1
    7052:	d00a      	beq.n	706a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    7054:	f240 51d4 	movw	r1, #1492	; 0x5d4
    7058:	203e      	movs	r0, #62	; 0x3e
    705a:	f7fc fddd 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    705e:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    7062:	f3c0 2007 	ubfx	r0, r0, #8, #8
    7066:	43a0      	bics	r0, r4
    7068:	e004      	b.n	7074 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    706a:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    706e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    7072:	4328      	orrs	r0, r5
    7074:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    7078:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    707c:	bd70      	pop	{r4, r5, r6, pc}
    707e:	0000      	.short	0x0000
    7080:	40001000 	.word	0x40001000

00007084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    7084:	4901      	ldr	r1, [pc, #4]	; (708c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    7086:	2001      	movs	r0, #1
    7088:	7008      	strb	r0, [r1, #0]
    708a:	4770      	bx	lr
    708c:	20000148 	.word	0x20000148
    7090:	480b      	ldr	r0, [pc, #44]	; (70c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    7092:	7d81      	ldrb	r1, [r0, #22]
    7094:	480b      	ldr	r0, [pc, #44]	; (70c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    7096:	5c40      	ldrb	r0, [r0, r1]
    7098:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    709c:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    70a0:	d204      	bcs.n	70ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    70a2:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    70a6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    70aa:	e001      	b.n	70b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    70ac:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    70b0:	4a05      	ldr	r2, [pc, #20]	; (70c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    70b2:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    70b6:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    70ba:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    70be:	4770      	bx	lr
    70c0:	20000d50 	.word	0x20000d50
    70c4:	0000752a 	.word	0x0000752a
    70c8:	40001000 	.word	0x40001000
    70cc:	b508      	push	{r3, lr}
    70ce:	490b      	ldr	r1, [pc, #44]	; (70fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    70d0:	466b      	mov	r3, sp
    70d2:	f991 2015 	ldrsb.w	r2, [r1, #21]
    70d6:	7d89      	ldrb	r1, [r1, #22]
    70d8:	f000 faca 	bl	7670 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    70dc:	f99d 0000 	ldrsb.w	r0, [sp]
    70e0:	f000 fa9a 	bl	7618 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    70e4:	f10d 0001 	add.w	r0, sp, #1
    70e8:	f7fc fc6c 	bl	39c4 <mpsl_fem_pa_gain_set>
    70ec:	2800      	cmp	r0, #0
    70ee:	d004      	beq.n	70fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    70f0:	f240 6115 	movw	r1, #1557	; 0x615
    70f4:	203e      	movs	r0, #62	; 0x3e
    70f6:	f7fc fd8f 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70fa:	bd08      	pop	{r3, pc}
    70fc:	20000d50 	.word	0x20000d50
    7100:	4803      	ldr	r0, [pc, #12]	; (7110 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    7102:	7a01      	ldrb	r1, [r0, #8]
    7104:	2901      	cmp	r1, #1
    7106:	d102      	bne.n	710e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    7108:	7a80      	ldrb	r0, [r0, #10]
    710a:	f7ff bfdf 	b.w	70cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    710e:	4770      	bx	lr
    7110:	20000d50 	.word	0x20000d50
    7114:	480d      	ldr	r0, [pc, #52]	; (714c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    7116:	b510      	push	{r4, lr}
    7118:	7a40      	ldrb	r0, [r0, #9]
    711a:	2801      	cmp	r0, #1
    711c:	d00c      	beq.n	7138 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    711e:	2802      	cmp	r0, #2
    7120:	d113      	bne.n	714a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    7122:	f7fc fc31 	bl	3988 <mpsl_fem_lna_configuration_clear>
    7126:	2800      	cmp	r0, #0
    7128:	d00f      	beq.n	714a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    712a:	1c40      	adds	r0, r0, #1
    712c:	d00d      	beq.n	714a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    712e:	f640 01a6 	movw	r1, #2214	; 0x8a6
    7132:	203e      	movs	r0, #62	; 0x3e
    7134:	f7fc fd70 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7138:	f7fc fc38 	bl	39ac <mpsl_fem_pa_configuration_clear>
    713c:	2800      	cmp	r0, #0
    713e:	d004      	beq.n	714a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    7140:	1c40      	adds	r0, r0, #1
    7142:	d002      	beq.n	714a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    7144:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    7148:	e7f3      	b.n	7132 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    714a:	bd10      	pop	{r4, pc}
    714c:	20000d50 	.word	0x20000d50
    7150:	4808      	ldr	r0, [pc, #32]	; (7174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    7152:	2100      	movs	r1, #0
    7154:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7158:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    715c:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    7160:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7164:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    7168:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    716c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7170:	4770      	bx	lr
    7172:	0000      	.short	0x0000
    7174:	40001000 	.word	0x40001000
    7178:	4818      	ldr	r0, [pc, #96]	; (71dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    717a:	b510      	push	{r4, lr}
    717c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    7180:	07c1      	lsls	r1, r0, #31
    7182:	d029      	beq.n	71d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    7184:	0781      	lsls	r1, r0, #30
    7186:	d514      	bpl.n	71b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    7188:	4815      	ldr	r0, [pc, #84]	; (71e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    718a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    718e:	f041 0101 	orr.w	r1, r1, #1
    7192:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7196:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    719a:	b2c0      	uxtb	r0, r0
    719c:	280b      	cmp	r0, #11
    719e:	d005      	beq.n	71ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    71a0:	280a      	cmp	r0, #10
    71a2:	d003      	beq.n	71ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    71a4:	2803      	cmp	r0, #3
    71a6:	d001      	beq.n	71ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    71a8:	2802      	cmp	r0, #2
    71aa:	d115      	bne.n	71d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    71ac:	f240 613e 	movw	r1, #1598	; 0x63e
    71b0:	e00f      	b.n	71d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    71b2:	0740      	lsls	r0, r0, #29
    71b4:	d510      	bpl.n	71d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    71b6:	480a      	ldr	r0, [pc, #40]	; (71e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    71b8:	490a      	ldr	r1, [pc, #40]	; (71e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    71ba:	3008      	adds	r0, #8
    71bc:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    71c0:	f44f 71a0 	mov.w	r1, #320	; 0x140
    71c4:	4808      	ldr	r0, [pc, #32]	; (71e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    71c6:	f003 f8ba 	bl	a33e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    71ca:	2800      	cmp	r0, #0
    71cc:	d004      	beq.n	71d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    71ce:	f240 6146 	movw	r1, #1606	; 0x646
    71d2:	203e      	movs	r0, #62	; 0x3e
    71d4:	f7fc fd20 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71d8:	bd10      	pop	{r4, pc}
    71da:	0000      	.short	0x0000
    71dc:	20000d50 	.word	0x20000d50
    71e0:	40001000 	.word	0x40001000
    71e4:	4001f098 	.word	0x4001f098
    71e8:	40008000 	.word	0x40008000
    71ec:	4808      	ldr	r0, [pc, #32]	; (7210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    71ee:	4601      	mov	r1, r0
    71f0:	79c2      	ldrb	r2, [r0, #7]
    71f2:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    71f6:	b112      	cbz	r2, 71fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    71f8:	2a01      	cmp	r2, #1
    71fa:	d003      	beq.n	7204 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    71fc:	e006      	b.n	720c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    71fe:	f041 0102 	orr.w	r1, r1, #2
    7202:	e001      	b.n	7208 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    7204:	f041 0104 	orr.w	r1, r1, #4
    7208:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    720c:	f7ff bfb4 	b.w	7178 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    7210:	20000d50 	.word	0x20000d50
    7214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7218:	4d34      	ldr	r5, [pc, #208]	; (72ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    721a:	2400      	movs	r4, #0
    721c:	7b28      	ldrb	r0, [r5, #12]
    721e:	b138      	cbz	r0, 7230 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    7220:	f44f 71a2 	mov.w	r1, #324	; 0x144
    7224:	4832      	ldr	r0, [pc, #200]	; (72f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    7226:	f003 f88a 	bl	a33e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    722a:	b108      	cbz	r0, 7230 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    722c:	2601      	movs	r6, #1
    722e:	e000      	b.n	7232 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    7230:	2600      	movs	r6, #0
    7232:	7a68      	ldrb	r0, [r5, #9]
    7234:	4f2f      	ldr	r7, [pc, #188]	; (72f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    7236:	f44f 7186 	mov.w	r1, #268	; 0x10c
    723a:	2801      	cmp	r0, #1
    723c:	d002      	beq.n	7244 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    723e:	2802      	cmp	r0, #2
    7240:	d006      	beq.n	7250 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    7242:	e016      	b.n	7272 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    7244:	4638      	mov	r0, r7
    7246:	f003 f875 	bl	a334 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    724a:	b190      	cbz	r0, 7272 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    724c:	2408      	movs	r4, #8
    724e:	e010      	b.n	7272 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    7250:	4638      	mov	r0, r7
    7252:	f003 f86f 	bl	a334 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7256:	b100      	cbz	r0, 725a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    7258:	2402      	movs	r4, #2
    725a:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    725e:	43c0      	mvns	r0, r0
    7260:	f340 0000 	sbfx	r0, r0, #0, #1
    7264:	1c40      	adds	r0, r0, #1
    7266:	d101      	bne.n	726c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    7268:	f044 0404 	orr.w	r4, r4, #4
    726c:	b10e      	cbz	r6, 7272 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    726e:	f044 0401 	orr.w	r4, r4, #1
    7272:	f014 0f0b 	tst.w	r4, #11
    7276:	d107      	bne.n	7288 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    7278:	f44f 7188 	mov.w	r1, #272	; 0x110
    727c:	4638      	mov	r0, r7
    727e:	f003 f859 	bl	a334 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7282:	b108      	cbz	r0, 7288 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    7284:	f044 0410 	orr.w	r4, r4, #16
    7288:	481b      	ldr	r0, [pc, #108]	; (72f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    728a:	7800      	ldrb	r0, [r0, #0]
    728c:	b1f8      	cbz	r0, 72ce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    728e:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    7292:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    7296:	d007      	beq.n	72a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    7298:	f44f 718a 	mov.w	r1, #276	; 0x114
    729c:	4638      	mov	r0, r7
    729e:	f003 f849 	bl	a334 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    72a2:	b108      	cbz	r0, 72a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    72a4:	2001      	movs	r0, #1
    72a6:	e000      	b.n	72aa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    72a8:	2000      	movs	r0, #0
    72aa:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    72ae:	b13e      	cbz	r6, 72c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    72b0:	f44f 718c 	mov.w	r1, #280	; 0x118
    72b4:	4638      	mov	r0, r7
    72b6:	f003 f83d 	bl	a334 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    72ba:	b108      	cbz	r0, 72c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    72bc:	2001      	movs	r0, #1
    72be:	e000      	b.n	72c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    72c0:	2000      	movs	r0, #0
    72c2:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    72c6:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    72ca:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    72ce:	f7ff ff3f 	bl	7150 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    72d2:	06e0      	lsls	r0, r4, #27
    72d4:	d506      	bpl.n	72e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    72d6:	0720      	lsls	r0, r4, #28
    72d8:	d404      	bmi.n	72e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    72da:	7a68      	ldrb	r0, [r5, #9]
    72dc:	2801      	cmp	r0, #1
    72de:	d101      	bne.n	72e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    72e0:	f044 0420 	orr.w	r4, r4, #32
    72e4:	4620      	mov	r0, r4
    72e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72ea:	0000      	.short	0x0000
    72ec:	20000d50 	.word	0x20000d50
    72f0:	40008000 	.word	0x40008000
    72f4:	40001000 	.word	0x40001000
    72f8:	20000148 	.word	0x20000148
    72fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7300:	4c17      	ldr	r4, [pc, #92]	; (7360 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>)
    7302:	460d      	mov	r5, r1
    7304:	7a21      	ldrb	r1, [r4, #8]
    7306:	b129      	cbz	r1, 7314 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    7308:	f010 0f11 	tst.w	r0, #17
    730c:	d007      	beq.n	731e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    730e:	f7ff fad1 	bl	68b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7312:	e023      	b.n	735c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    7314:	f000 f88a 	bl	742c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    7318:	2000      	movs	r0, #0
    731a:	7320      	strb	r0, [r4, #12]
    731c:	e01e      	b.n	735c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    731e:	2901      	cmp	r1, #1
    7320:	d001      	beq.n	7326 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    7322:	2601      	movs	r6, #1
    7324:	e000      	b.n	7328 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    7326:	2600      	movs	r6, #0
    7328:	79e0      	ldrb	r0, [r4, #7]
    732a:	2801      	cmp	r0, #1
    732c:	d00e      	beq.n	734c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    732e:	2700      	movs	r7, #0
    7330:	f000 f87c 	bl	742c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    7334:	2196      	movs	r1, #150	; 0x96
    7336:	4630      	mov	r0, r6
    7338:	f000 f88e 	bl	7458 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d4>
    733c:	4601      	mov	r1, r0
    733e:	b14f      	cbz	r7, 7354 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    7340:	353b      	adds	r5, #59	; 0x3b
    7342:	428d      	cmp	r5, r1
    7344:	d904      	bls.n	7350 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    7346:	2000      	movs	r0, #0
    7348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    734c:	2701      	movs	r7, #1
    734e:	e7ef      	b.n	7330 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    7350:	2001      	movs	r0, #1
    7352:	71e0      	strb	r0, [r4, #7]
    7354:	7aa2      	ldrb	r2, [r4, #10]
    7356:	4630      	mov	r0, r6
    7358:	f7ff fce6 	bl	6d28 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    735c:	2001      	movs	r0, #1
    735e:	e7f3      	b.n	7348 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    7360:	20000d50 	.word	0x20000d50
    7364:	4803      	ldr	r0, [pc, #12]	; (7374 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    7366:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    736a:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    736e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7372:	4770      	bx	lr
    7374:	40001000 	.word	0x40001000
    7378:	4804      	ldr	r0, [pc, #16]	; (738c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    737a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    737c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    7380:	6281      	str	r1, [r0, #40]	; 0x28
    7382:	4903      	ldr	r1, [pc, #12]	; (7390 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    7384:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    7388:	6008      	str	r0, [r1, #0]
    738a:	4770      	bx	lr
    738c:	20000d50 	.word	0x20000d50
    7390:	4001f504 	.word	0x4001f504
    7394:	4a07      	ldr	r2, [pc, #28]	; (73b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    7396:	2000      	movs	r0, #0
    7398:	3208      	adds	r2, #8
    739a:	4906      	ldr	r1, [pc, #24]	; (73b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    739c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    73a0:	1d0a      	adds	r2, r1, #4
    73a2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    73a6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    73aa:	4902      	ldr	r1, [pc, #8]	; (73b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    73ac:	310c      	adds	r1, #12
    73ae:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    73b2:	4770      	bx	lr
    73b4:	40008000 	.word	0x40008000
    73b8:	4903      	ldr	r1, [pc, #12]	; (73c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x344>)
    73ba:	79c9      	ldrb	r1, [r1, #7]
    73bc:	2900      	cmp	r1, #0
    73be:	d102      	bne.n	73c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    73c0:	4902      	ldr	r1, [pc, #8]	; (73cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x348>)
    73c2:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    73c6:	4770      	bx	lr
    73c8:	20000d50 	.word	0x20000d50
    73cc:	4001f098 	.word	0x4001f098
    73d0:	b510      	push	{r4, lr}
    73d2:	4a14      	ldr	r2, [pc, #80]	; (7424 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    73d4:	b120      	cbz	r0, 73e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    73d6:	2801      	cmp	r0, #1
    73d8:	d011      	beq.n	73fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37a>
    73da:	f44f 61ec 	mov.w	r1, #1888	; 0x760
    73de:	e01c      	b.n	741a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    73e0:	f101 0028 	add.w	r0, r1, #40	; 0x28
    73e4:	e9c2 1002 	strd	r1, r0, [r2, #8]
    73e8:	490f      	ldr	r1, [pc, #60]	; (7428 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    73ea:	480e      	ldr	r0, [pc, #56]	; (7424 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    73ec:	f7fc fae4 	bl	39b8 <mpsl_fem_pa_configuration_set>
    73f0:	2800      	cmp	r0, #0
    73f2:	d015      	beq.n	7420 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    73f4:	1c40      	adds	r0, r0, #1
    73f6:	d013      	beq.n	7420 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    73f8:	f240 714f 	movw	r1, #1871	; 0x74f
    73fc:	e00d      	b.n	741a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    73fe:	f101 0029 	add.w	r0, r1, #41	; 0x29
    7402:	e9c2 1002 	strd	r1, r0, [r2, #8]
    7406:	4908      	ldr	r1, [pc, #32]	; (7428 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    7408:	4806      	ldr	r0, [pc, #24]	; (7424 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    740a:	f7fc fac3 	bl	3994 <mpsl_fem_lna_configuration_set>
    740e:	2800      	cmp	r0, #0
    7410:	d006      	beq.n	7420 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    7412:	1c40      	adds	r0, r0, #1
    7414:	d004      	beq.n	7420 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    7416:	f240 715c 	movw	r1, #1884	; 0x75c
    741a:	203e      	movs	r0, #62	; 0x3e
    741c:	f7fc fbfc 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7420:	bd10      	pop	{r4, pc}
    7422:	0000      	.short	0x0000
    7424:	20000150 	.word	0x20000150
    7428:	00007554 	.word	0x00007554
    742c:	4802      	ldr	r0, [pc, #8]	; (7438 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    742e:	2100      	movs	r1, #0
    7430:	71c1      	strb	r1, [r0, #7]
    7432:	7201      	strb	r1, [r0, #8]
    7434:	7241      	strb	r1, [r0, #9]
    7436:	4770      	bx	lr
    7438:	20000d50 	.word	0x20000d50
    743c:	4a05      	ldr	r2, [pc, #20]	; (7454 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d0>)
    743e:	79d2      	ldrb	r2, [r2, #7]
    7440:	2a01      	cmp	r2, #1
    7442:	d006      	beq.n	7452 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ce>
    7444:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7448:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    744c:	fbb1 f1f2 	udiv	r1, r1, r2
    7450:	1a40      	subs	r0, r0, r1
    7452:	4770      	bx	lr
    7454:	20000d50 	.word	0x20000d50
    7458:	b570      	push	{r4, r5, r6, lr}
    745a:	4c13      	ldr	r4, [pc, #76]	; (74a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x424>)
    745c:	4603      	mov	r3, r0
    745e:	460d      	mov	r5, r1
    7460:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    7464:	2000      	movs	r0, #0
    7466:	b15a      	cbz	r2, 7480 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fc>
    7468:	4621      	mov	r1, r4
    746a:	f891 1020 	ldrb.w	r1, [r1, #32]
    746e:	b163      	cbz	r3, 748a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    7470:	2b01      	cmp	r3, #1
    7472:	d111      	bne.n	7498 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>
    7474:	2a01      	cmp	r2, #1
    7476:	4628      	mov	r0, r5
    7478:	d012      	beq.n	74a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    747a:	f002 ff65 	bl	a348 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    747e:	e009      	b.n	7494 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    7480:	f640 0153 	movw	r1, #2131	; 0x853
    7484:	203e      	movs	r0, #62	; 0x3e
    7486:	f7fc fbc7 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    748a:	2a01      	cmp	r2, #1
    748c:	4628      	mov	r0, r5
    748e:	d004      	beq.n	749a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x416>
    7490:	f002 ff68 	bl	a364 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    7494:	69e1      	ldr	r1, [r4, #28]
    7496:	4408      	add	r0, r1
    7498:	bd70      	pop	{r4, r5, r6, pc}
    749a:	f000 f8d1 	bl	7640 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    749e:	e7f9      	b.n	7494 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    74a0:	f000 f8c0 	bl	7624 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    74a4:	e7f6      	b.n	7494 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    74a6:	0000      	.short	0x0000
    74a8:	20000d50 	.word	0x20000d50
    74ac:	b510      	push	{r4, lr}
    74ae:	f7ff fc0f 	bl	6cd0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    74b2:	f7ff fded 	bl	7090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    74b6:	f7ff fe23 	bl	7100 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    74ba:	f7ff ff53 	bl	7364 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    74be:	f000 fbf2 	bl	7ca6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    74c2:	2800      	cmp	r0, #0
    74c4:	d108      	bne.n	74d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    74c6:	f000 fbde 	bl	7c86 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    74ca:	2800      	cmp	r0, #0
    74cc:	d104      	bne.n	74d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    74ce:	4803      	ldr	r0, [pc, #12]	; (74dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x458>)
    74d0:	6801      	ldr	r1, [r0, #0]
    74d2:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    74d6:	6001      	str	r1, [r0, #0]
    74d8:	bd10      	pop	{r4, pc}
    74da:	0000      	.short	0x0000
    74dc:	40001568 	.word	0x40001568
    74e0:	b510      	push	{r4, lr}
    74e2:	4604      	mov	r4, r0
    74e4:	f7ff fbf4 	bl	6cd0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    74e8:	f7ff fdd2 	bl	7090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    74ec:	4620      	mov	r0, r4
    74ee:	f7ff fded 	bl	70cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    74f2:	f000 fbd8 	bl	7ca6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    74f6:	2800      	cmp	r0, #0
    74f8:	d00d      	beq.n	7516 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x492>
    74fa:	4a09      	ldr	r2, [pc, #36]	; (7520 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49c>)
    74fc:	6811      	ldr	r1, [r2, #0]
    74fe:	0650      	lsls	r0, r2, #25
    7500:	2c02      	cmp	r4, #2
    7502:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    7506:	d007      	beq.n	7518 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    7508:	f3c0 2006 	ubfx	r0, r0, #8, #7
    750c:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    7510:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    7514:	6010      	str	r0, [r2, #0]
    7516:	bd10      	pop	{r4, pc}
    7518:	f3c0 6006 	ubfx	r0, r0, #24, #7
    751c:	e7f6      	b.n	750c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    751e:	0000      	.short	0x0000
    7520:	40001588 	.word	0x40001588
    7524:	a62c0000 	.word	0xa62c0000
    7528:	0604a1e0 	.word	0x0604a1e0
    752c:	0e0c0a08 	.word	0x0e0c0a08
    7530:	16141210 	.word	0x16141210
    7534:	201e1c18 	.word	0x201e1c18
    7538:	28262422 	.word	0x28262422
    753c:	302e2c2a 	.word	0x302e2c2a
    7540:	38363432 	.word	0x38363432
    7544:	403e3c3a 	.word	0x403e3c3a
    7548:	48464442 	.word	0x48464442
    754c:	024e4c4a 	.word	0x024e4c4a
    7550:	0000501a 	.word	0x0000501a
    7554:	00000001 	.word	0x00000001
    7558:	40001110 	.word	0x40001110
	...
    7570:	00001e14 	.word	0x00001e14
    7574:	00001130 	.word	0x00001130
    7578:	00000000 	.word	0x00000000
    757c:	00000028 	.word	0x00000028
    7580:	00000018 	.word	0x00000018
    7584:	00000000 	.word	0x00000000
    7588:	00001e14 	.word	0x00001e14
    758c:	00001130 	.word	0x00001130
    7590:	00000000 	.word	0x00000000
    7594:	00001770 	.word	0x00001770
    7598:	00000fa0 	.word	0x00000fa0

0000759c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    759c:	b570      	push	{r4, r5, r6, lr}
    759e:	4605      	mov	r5, r0
    75a0:	4614      	mov	r4, r2
    75a2:	4608      	mov	r0, r1
    75a4:	f7ff fbba 	bl	6d1c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    75a8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    75ac:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    75b0:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    75b4:	4807      	ldr	r0, [pc, #28]	; (75d4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    75b6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    75ba:	4408      	add	r0, r1
    75bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    75c0:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    75c4:	fbb0 f5f1 	udiv	r5, r0, r1
    75c8:	4620      	mov	r0, r4
    75ca:	f7ff fb7b 	bl	6cc4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    75ce:	4428      	add	r0, r5
    75d0:	1d40      	adds	r0, r0, #5
    75d2:	bd70      	pop	{r4, r5, r6, pc}
    75d4:	00007664 	.word	0x00007664

000075d8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    75d8:	b570      	push	{r4, r5, r6, lr}
    75da:	4d0e      	ldr	r5, [pc, #56]	; (7614 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    75dc:	461c      	mov	r4, r3
    75de:	3d08      	subs	r5, #8
    75e0:	4b0c      	ldr	r3, [pc, #48]	; (7614 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    75e2:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    75e6:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    75ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    75ee:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    75f2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    75f6:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    75fa:	4418      	add	r0, r3
    75fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7600:	fbb0 f5f1 	udiv	r5, r0, r1
    7604:	4610      	mov	r0, r2
    7606:	f7ff fb5d 	bl	6cc4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    760a:	4428      	add	r0, r5
    760c:	4420      	add	r0, r4
    760e:	1d40      	adds	r0, r0, #5
    7610:	bd70      	pop	{r4, r5, r6, pc}
    7612:	0000      	.short	0x0000
    7614:	00007664 	.word	0x00007664

00007618 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    7618:	4901      	ldr	r1, [pc, #4]	; (7620 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    761a:	b2c0      	uxtb	r0, r0
    761c:	6008      	str	r0, [r1, #0]
    761e:	4770      	bx	lr
    7620:	4000150c 	.word	0x4000150c

00007624 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    7624:	4a05      	ldr	r2, [pc, #20]	; (763c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    7626:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    762a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    762e:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    7632:	fbb1 f1f2 	udiv	r1, r1, r2
    7636:	4408      	add	r0, r1
    7638:	1e80      	subs	r0, r0, #2
    763a:	4770      	bx	lr
    763c:	0000765c 	.word	0x0000765c

00007640 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    7640:	4a05      	ldr	r2, [pc, #20]	; (7658 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    7642:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    7646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    764a:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    764e:	fbb1 f1f2 	udiv	r1, r1, r2
    7652:	4408      	add	r0, r1
    7654:	4770      	bx	lr
    7656:	0000      	.short	0x0000
    7658:	0000765c 	.word	0x0000765c
    765c:	05dc0000 	.word	0x05dc0000
    7660:	000003e8 	.word	0x000003e8
    7664:	00000000 	.word	0x00000000
    7668:	00001e14 	.word	0x00001e14
    766c:	00001130 	.word	0x00001130

00007670 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    7670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7674:	461e      	mov	r6, r3
    7676:	4617      	mov	r7, r2
    7678:	460c      	mov	r4, r1
    767a:	4605      	mov	r5, r0
    767c:	f7f8 fd36 	bl	ec <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    7680:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 7728 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    7684:	4680      	mov	r8, r0
    7686:	f899 0000 	ldrb.w	r0, [r9]
    768a:	42a8      	cmp	r0, r5
    768c:	d110      	bne.n	76b0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    768e:	f899 1001 	ldrb.w	r1, [r9, #1]
    7692:	4648      	mov	r0, r9
    7694:	42a1      	cmp	r1, r4
    7696:	d10b      	bne.n	76b0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    7698:	f990 1002 	ldrsb.w	r1, [r0, #2]
    769c:	42b9      	cmp	r1, r7
    769e:	d107      	bne.n	76b0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    76a0:	78c2      	ldrb	r2, [r0, #3]
    76a2:	4542      	cmp	r2, r8
    76a4:	d104      	bne.n	76b0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    76a6:	8881      	ldrh	r1, [r0, #4]
    76a8:	8031      	strh	r1, [r6, #0]
    76aa:	7980      	ldrb	r0, [r0, #6]
    76ac:	70b0      	strb	r0, [r6, #2]
    76ae:	e036      	b.n	771e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xae>
    76b0:	463a      	mov	r2, r7
    76b2:	4621      	mov	r1, r4
    76b4:	2d01      	cmp	r5, #1
    76b6:	d009      	beq.n	76cc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    76b8:	2d02      	cmp	r5, #2
    76ba:	d009      	beq.n	76d0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    76bc:	2d04      	cmp	r5, #4
    76be:	d009      	beq.n	76d4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    76c0:	2d08      	cmp	r5, #8
    76c2:	d009      	beq.n	76d8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    76c4:	f240 415a 	movw	r1, #1114	; 0x45a
    76c8:	2006      	movs	r0, #6
    76ca:	e00c      	b.n	76e6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    76cc:	2000      	movs	r0, #0
    76ce:	e004      	b.n	76da <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    76d0:	2001      	movs	r0, #1
    76d2:	e002      	b.n	76da <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    76d4:	2003      	movs	r0, #3
    76d6:	e000      	b.n	76da <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    76d8:	2002      	movs	r0, #2
    76da:	466b      	mov	r3, sp
    76dc:	f7f8 fd56 	bl	18c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    76e0:	b118      	cbz	r0, 76ea <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    76e2:	213d      	movs	r1, #61	; 0x3d
    76e4:	2075      	movs	r0, #117	; 0x75
    76e6:	f7fc fa97 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76ea:	4620      	mov	r0, r4
    76ec:	f7ff f8da 	bl	68a4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    76f0:	4602      	mov	r2, r0
    76f2:	4631      	mov	r1, r6
    76f4:	f99d 0000 	ldrsb.w	r0, [sp]
    76f8:	f7fc f970 	bl	39dc <mpsl_fem_tx_power_split>
    76fc:	4601      	mov	r1, r0
    76fe:	f889 1007 	strb.w	r1, [r9, #7]
    7702:	8831      	ldrh	r1, [r6, #0]
    7704:	f8a9 1004 	strh.w	r1, [r9, #4]
    7708:	78b1      	ldrb	r1, [r6, #2]
    770a:	f889 1006 	strb.w	r1, [r9, #6]
    770e:	f889 5000 	strb.w	r5, [r9]
    7712:	f889 4001 	strb.w	r4, [r9, #1]
    7716:	f889 7002 	strb.w	r7, [r9, #2]
    771a:	f889 8003 	strb.w	r8, [r9, #3]
    771e:	f999 0007 	ldrsb.w	r0, [r9, #7]
    7722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7726:	0000      	.short	0x0000
    7728:	20000196 	.word	0x20000196

0000772c <__udivmoddi4>:
    772c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7730:	4686      	mov	lr, r0
    7732:	468c      	mov	ip, r1
    7734:	4608      	mov	r0, r1
    7736:	9e08      	ldr	r6, [sp, #32]
    7738:	4615      	mov	r5, r2
    773a:	4674      	mov	r4, lr
    773c:	4619      	mov	r1, r3
    773e:	2b00      	cmp	r3, #0
    7740:	f040 80c2 	bne.w	78c8 <__udivmoddi4+0x19c>
    7744:	4285      	cmp	r5, r0
    7746:	fab2 f282 	clz	r2, r2
    774a:	d945      	bls.n	77d8 <__udivmoddi4+0xac>
    774c:	b14a      	cbz	r2, 7762 <__udivmoddi4+0x36>
    774e:	f1c2 0320 	rsb	r3, r2, #32
    7752:	fa00 fc02 	lsl.w	ip, r0, r2
    7756:	fa2e f303 	lsr.w	r3, lr, r3
    775a:	4095      	lsls	r5, r2
    775c:	ea43 0c0c 	orr.w	ip, r3, ip
    7760:	4094      	lsls	r4, r2
    7762:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7766:	b2a8      	uxth	r0, r5
    7768:	fbbc f8fe 	udiv	r8, ip, lr
    776c:	0c23      	lsrs	r3, r4, #16
    776e:	fb0e cc18 	mls	ip, lr, r8, ip
    7772:	fb08 f900 	mul.w	r9, r8, r0
    7776:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    777a:	4599      	cmp	r9, r3
    777c:	d928      	bls.n	77d0 <__udivmoddi4+0xa4>
    777e:	18eb      	adds	r3, r5, r3
    7780:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    7784:	d204      	bcs.n	7790 <__udivmoddi4+0x64>
    7786:	4599      	cmp	r9, r3
    7788:	d902      	bls.n	7790 <__udivmoddi4+0x64>
    778a:	f1a8 0702 	sub.w	r7, r8, #2
    778e:	442b      	add	r3, r5
    7790:	eba3 0309 	sub.w	r3, r3, r9
    7794:	b2a4      	uxth	r4, r4
    7796:	fbb3 fcfe 	udiv	ip, r3, lr
    779a:	fb0e 331c 	mls	r3, lr, ip, r3
    779e:	fb0c f000 	mul.w	r0, ip, r0
    77a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    77a6:	42a0      	cmp	r0, r4
    77a8:	d914      	bls.n	77d4 <__udivmoddi4+0xa8>
    77aa:	192c      	adds	r4, r5, r4
    77ac:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    77b0:	d204      	bcs.n	77bc <__udivmoddi4+0x90>
    77b2:	42a0      	cmp	r0, r4
    77b4:	d902      	bls.n	77bc <__udivmoddi4+0x90>
    77b6:	f1ac 0302 	sub.w	r3, ip, #2
    77ba:	442c      	add	r4, r5
    77bc:	1a24      	subs	r4, r4, r0
    77be:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    77c2:	b11e      	cbz	r6, 77cc <__udivmoddi4+0xa0>
    77c4:	40d4      	lsrs	r4, r2
    77c6:	2300      	movs	r3, #0
    77c8:	6034      	str	r4, [r6, #0]
    77ca:	6073      	str	r3, [r6, #4]
    77cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77d0:	4647      	mov	r7, r8
    77d2:	e7dd      	b.n	7790 <__udivmoddi4+0x64>
    77d4:	4663      	mov	r3, ip
    77d6:	e7f1      	b.n	77bc <__udivmoddi4+0x90>
    77d8:	bb92      	cbnz	r2, 7840 <__udivmoddi4+0x114>
    77da:	1b43      	subs	r3, r0, r5
    77dc:	2101      	movs	r1, #1
    77de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    77e2:	b2af      	uxth	r7, r5
    77e4:	fbb3 fcfe 	udiv	ip, r3, lr
    77e8:	0c20      	lsrs	r0, r4, #16
    77ea:	fb0e 331c 	mls	r3, lr, ip, r3
    77ee:	fb0c f807 	mul.w	r8, ip, r7
    77f2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    77f6:	4598      	cmp	r8, r3
    77f8:	d962      	bls.n	78c0 <__udivmoddi4+0x194>
    77fa:	18eb      	adds	r3, r5, r3
    77fc:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    7800:	d204      	bcs.n	780c <__udivmoddi4+0xe0>
    7802:	4598      	cmp	r8, r3
    7804:	d902      	bls.n	780c <__udivmoddi4+0xe0>
    7806:	f1ac 0002 	sub.w	r0, ip, #2
    780a:	442b      	add	r3, r5
    780c:	eba3 0308 	sub.w	r3, r3, r8
    7810:	b2a4      	uxth	r4, r4
    7812:	fbb3 fcfe 	udiv	ip, r3, lr
    7816:	fb0e 331c 	mls	r3, lr, ip, r3
    781a:	fb0c f707 	mul.w	r7, ip, r7
    781e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    7822:	42a7      	cmp	r7, r4
    7824:	d94e      	bls.n	78c4 <__udivmoddi4+0x198>
    7826:	192c      	adds	r4, r5, r4
    7828:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    782c:	d204      	bcs.n	7838 <__udivmoddi4+0x10c>
    782e:	42a7      	cmp	r7, r4
    7830:	d902      	bls.n	7838 <__udivmoddi4+0x10c>
    7832:	f1ac 0302 	sub.w	r3, ip, #2
    7836:	442c      	add	r4, r5
    7838:	1be4      	subs	r4, r4, r7
    783a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    783e:	e7c0      	b.n	77c2 <__udivmoddi4+0x96>
    7840:	f1c2 0320 	rsb	r3, r2, #32
    7844:	fa20 f103 	lsr.w	r1, r0, r3
    7848:	4095      	lsls	r5, r2
    784a:	4090      	lsls	r0, r2
    784c:	fa2e f303 	lsr.w	r3, lr, r3
    7850:	4303      	orrs	r3, r0
    7852:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7856:	b2af      	uxth	r7, r5
    7858:	fbb1 fcfe 	udiv	ip, r1, lr
    785c:	fb0e 101c 	mls	r0, lr, ip, r1
    7860:	0c19      	lsrs	r1, r3, #16
    7862:	fb0c f807 	mul.w	r8, ip, r7
    7866:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    786a:	4588      	cmp	r8, r1
    786c:	fa04 f402 	lsl.w	r4, r4, r2
    7870:	d922      	bls.n	78b8 <__udivmoddi4+0x18c>
    7872:	1869      	adds	r1, r5, r1
    7874:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    7878:	d204      	bcs.n	7884 <__udivmoddi4+0x158>
    787a:	4588      	cmp	r8, r1
    787c:	d902      	bls.n	7884 <__udivmoddi4+0x158>
    787e:	f1ac 0002 	sub.w	r0, ip, #2
    7882:	4429      	add	r1, r5
    7884:	eba1 0108 	sub.w	r1, r1, r8
    7888:	b29b      	uxth	r3, r3
    788a:	fbb1 fcfe 	udiv	ip, r1, lr
    788e:	fb0e 111c 	mls	r1, lr, ip, r1
    7892:	fb0c f707 	mul.w	r7, ip, r7
    7896:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    789a:	429f      	cmp	r7, r3
    789c:	d90e      	bls.n	78bc <__udivmoddi4+0x190>
    789e:	18eb      	adds	r3, r5, r3
    78a0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    78a4:	d204      	bcs.n	78b0 <__udivmoddi4+0x184>
    78a6:	429f      	cmp	r7, r3
    78a8:	d902      	bls.n	78b0 <__udivmoddi4+0x184>
    78aa:	f1ac 0102 	sub.w	r1, ip, #2
    78ae:	442b      	add	r3, r5
    78b0:	1bdb      	subs	r3, r3, r7
    78b2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    78b6:	e792      	b.n	77de <__udivmoddi4+0xb2>
    78b8:	4660      	mov	r0, ip
    78ba:	e7e3      	b.n	7884 <__udivmoddi4+0x158>
    78bc:	4661      	mov	r1, ip
    78be:	e7f7      	b.n	78b0 <__udivmoddi4+0x184>
    78c0:	4660      	mov	r0, ip
    78c2:	e7a3      	b.n	780c <__udivmoddi4+0xe0>
    78c4:	4663      	mov	r3, ip
    78c6:	e7b7      	b.n	7838 <__udivmoddi4+0x10c>
    78c8:	4283      	cmp	r3, r0
    78ca:	d906      	bls.n	78da <__udivmoddi4+0x1ae>
    78cc:	b916      	cbnz	r6, 78d4 <__udivmoddi4+0x1a8>
    78ce:	2100      	movs	r1, #0
    78d0:	4608      	mov	r0, r1
    78d2:	e77b      	b.n	77cc <__udivmoddi4+0xa0>
    78d4:	e9c6 e000 	strd	lr, r0, [r6]
    78d8:	e7f9      	b.n	78ce <__udivmoddi4+0x1a2>
    78da:	fab3 f783 	clz	r7, r3
    78de:	b98f      	cbnz	r7, 7904 <__udivmoddi4+0x1d8>
    78e0:	4283      	cmp	r3, r0
    78e2:	d301      	bcc.n	78e8 <__udivmoddi4+0x1bc>
    78e4:	4572      	cmp	r2, lr
    78e6:	d808      	bhi.n	78fa <__udivmoddi4+0x1ce>
    78e8:	ebbe 0402 	subs.w	r4, lr, r2
    78ec:	eb60 0303 	sbc.w	r3, r0, r3
    78f0:	2001      	movs	r0, #1
    78f2:	469c      	mov	ip, r3
    78f4:	b91e      	cbnz	r6, 78fe <__udivmoddi4+0x1d2>
    78f6:	2100      	movs	r1, #0
    78f8:	e768      	b.n	77cc <__udivmoddi4+0xa0>
    78fa:	4638      	mov	r0, r7
    78fc:	e7fa      	b.n	78f4 <__udivmoddi4+0x1c8>
    78fe:	e9c6 4c00 	strd	r4, ip, [r6]
    7902:	e7f8      	b.n	78f6 <__udivmoddi4+0x1ca>
    7904:	f1c7 0c20 	rsb	ip, r7, #32
    7908:	40bb      	lsls	r3, r7
    790a:	fa22 f40c 	lsr.w	r4, r2, ip
    790e:	431c      	orrs	r4, r3
    7910:	fa2e f10c 	lsr.w	r1, lr, ip
    7914:	fa20 f30c 	lsr.w	r3, r0, ip
    7918:	40b8      	lsls	r0, r7
    791a:	4301      	orrs	r1, r0
    791c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    7920:	fa0e f507 	lsl.w	r5, lr, r7
    7924:	fbb3 f8f9 	udiv	r8, r3, r9
    7928:	fa1f fe84 	uxth.w	lr, r4
    792c:	fb09 3018 	mls	r0, r9, r8, r3
    7930:	0c0b      	lsrs	r3, r1, #16
    7932:	fb08 fa0e 	mul.w	sl, r8, lr
    7936:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    793a:	459a      	cmp	sl, r3
    793c:	fa02 f207 	lsl.w	r2, r2, r7
    7940:	d940      	bls.n	79c4 <__udivmoddi4+0x298>
    7942:	18e3      	adds	r3, r4, r3
    7944:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    7948:	d204      	bcs.n	7954 <__udivmoddi4+0x228>
    794a:	459a      	cmp	sl, r3
    794c:	d902      	bls.n	7954 <__udivmoddi4+0x228>
    794e:	f1a8 0002 	sub.w	r0, r8, #2
    7952:	4423      	add	r3, r4
    7954:	eba3 030a 	sub.w	r3, r3, sl
    7958:	b289      	uxth	r1, r1
    795a:	fbb3 f8f9 	udiv	r8, r3, r9
    795e:	fb09 3318 	mls	r3, r9, r8, r3
    7962:	fb08 fe0e 	mul.w	lr, r8, lr
    7966:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    796a:	458e      	cmp	lr, r1
    796c:	d92c      	bls.n	79c8 <__udivmoddi4+0x29c>
    796e:	1861      	adds	r1, r4, r1
    7970:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    7974:	d204      	bcs.n	7980 <__udivmoddi4+0x254>
    7976:	458e      	cmp	lr, r1
    7978:	d902      	bls.n	7980 <__udivmoddi4+0x254>
    797a:	f1a8 0302 	sub.w	r3, r8, #2
    797e:	4421      	add	r1, r4
    7980:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    7984:	fba0 9802 	umull	r9, r8, r0, r2
    7988:	eba1 010e 	sub.w	r1, r1, lr
    798c:	4541      	cmp	r1, r8
    798e:	46ce      	mov	lr, r9
    7990:	4643      	mov	r3, r8
    7992:	d302      	bcc.n	799a <__udivmoddi4+0x26e>
    7994:	d106      	bne.n	79a4 <__udivmoddi4+0x278>
    7996:	454d      	cmp	r5, r9
    7998:	d204      	bcs.n	79a4 <__udivmoddi4+0x278>
    799a:	ebb9 0e02 	subs.w	lr, r9, r2
    799e:	eb68 0304 	sbc.w	r3, r8, r4
    79a2:	3801      	subs	r0, #1
    79a4:	2e00      	cmp	r6, #0
    79a6:	d0a6      	beq.n	78f6 <__udivmoddi4+0x1ca>
    79a8:	ebb5 020e 	subs.w	r2, r5, lr
    79ac:	eb61 0103 	sbc.w	r1, r1, r3
    79b0:	fa01 fc0c 	lsl.w	ip, r1, ip
    79b4:	fa22 f307 	lsr.w	r3, r2, r7
    79b8:	ea4c 0303 	orr.w	r3, ip, r3
    79bc:	40f9      	lsrs	r1, r7
    79be:	e9c6 3100 	strd	r3, r1, [r6]
    79c2:	e798      	b.n	78f6 <__udivmoddi4+0x1ca>
    79c4:	4640      	mov	r0, r8
    79c6:	e7c5      	b.n	7954 <__udivmoddi4+0x228>
    79c8:	4643      	mov	r3, r8
    79ca:	e7d9      	b.n	7980 <__udivmoddi4+0x254>
    79cc:	2804      	cmp	r0, #4
    79ce:	d202      	bcs.n	79d6 <__udivmoddi4+0x2aa>
    79d0:	f04f 0028 	mov.w	r0, #40	; 0x28
    79d4:	4770      	bx	lr
    79d6:	d102      	bne.n	79de <__udivmoddi4+0x2b2>
    79d8:	f04f 0010 	mov.w	r0, #16
    79dc:	4770      	bx	lr
    79de:	f04f 0000 	mov.w	r0, #0
    79e2:	4770      	bx	lr
    79e4:	2100      	movs	r1, #0
    79e6:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    79ea:	f800 1f24 	strb.w	r1, [r0, #36]!
    79ee:	7041      	strb	r1, [r0, #1]
    79f0:	4770      	bx	lr

000079f2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    79f2:	b570      	push	{r4, r5, r6, lr}
    79f4:	f7f8 fbea 	bl	1cc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    79f8:	4605      	mov	r5, r0
    79fa:	2400      	movs	r4, #0
    79fc:	e006      	b.n	7a0c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    79fe:	4620      	mov	r0, r4
    7a00:	f7f8 fbea 	bl	1d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    7a04:	f7ff ffee 	bl	79e4 <__udivmoddi4+0x2b8>
    7a08:	1c64      	adds	r4, r4, #1
    7a0a:	b2e4      	uxtb	r4, r4
    7a0c:	42ac      	cmp	r4, r5
    7a0e:	d3f6      	bcc.n	79fe <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    7a10:	bd70      	pop	{r4, r5, r6, pc}

00007a12 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    7a12:	f7fa bf23 	b.w	285c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00007a16 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    7a16:	b510      	push	{r4, lr}
    7a18:	2000      	movs	r0, #0
    7a1a:	f7fb fa45 	bl	2ea8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    7a1e:	6800      	ldr	r0, [r0, #0]
    7a20:	2800      	cmp	r0, #0
    7a22:	bf18      	it	ne
    7a24:	2001      	movne	r0, #1
    7a26:	bd10      	pop	{r4, pc}

00007a28 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    7a28:	b510      	push	{r4, lr}
    7a2a:	f7fb fabd 	bl	2fa8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    7a2e:	f7fa fd8f 	bl	2550 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    7a32:	f000 f802 	bl	7a3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    7a36:	b280      	uxth	r0, r0
    7a38:	bd10      	pop	{r4, pc}

00007a3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    7a3a:	0a41      	lsrs	r1, r0, #9
    7a3c:	f643 5209 	movw	r2, #15625	; 0x3d09
    7a40:	4351      	muls	r1, r2
    7a42:	f3c0 0008 	ubfx	r0, r0, #0, #9
    7a46:	fb10 f002 	smulbb	r0, r0, r2
    7a4a:	f500 7080 	add.w	r0, r0, #256	; 0x100
    7a4e:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    7a52:	4770      	bx	lr
    7a54:	2800      	cmp	r0, #0
    7a56:	db09      	blt.n	7a6c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    7a58:	f000 021f 	and.w	r2, r0, #31
    7a5c:	2101      	movs	r1, #1
    7a5e:	4091      	lsls	r1, r2
    7a60:	0940      	lsrs	r0, r0, #5
    7a62:	0080      	lsls	r0, r0, #2
    7a64:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    7a68:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    7a6c:	4770      	bx	lr
    7a6e:	2800      	cmp	r0, #0
    7a70:	db0d      	blt.n	7a8e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    7a72:	f000 021f 	and.w	r2, r0, #31
    7a76:	2101      	movs	r1, #1
    7a78:	4091      	lsls	r1, r2
    7a7a:	0940      	lsrs	r0, r0, #5
    7a7c:	0080      	lsls	r0, r0, #2
    7a7e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    7a82:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    7a86:	f3bf 8f4f 	dsb	sy
    7a8a:	f3bf 8f6f 	isb	sy
    7a8e:	4770      	bx	lr

00007a90 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    7a90:	b570      	push	{r4, r5, r6, lr}
    7a92:	4602      	mov	r2, r0
    7a94:	2000      	movs	r0, #0
    7a96:	2900      	cmp	r1, #0
    7a98:	d01d      	beq.n	7ad6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    7a9a:	fba2 0101 	umull	r0, r1, r2, r1
    7a9e:	0a40      	lsrs	r0, r0, #9
    7aa0:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    7aa4:	0a49      	lsrs	r1, r1, #9
    7aa6:	1c40      	adds	r0, r0, #1
    7aa8:	f141 0100 	adc.w	r1, r1, #0
    7aac:	f240 72a1 	movw	r2, #1953	; 0x7a1
    7ab0:	1883      	adds	r3, r0, r2
    7ab2:	f141 0100 	adc.w	r1, r1, #0
    7ab6:	1c5b      	adds	r3, r3, #1
    7ab8:	f141 0400 	adc.w	r4, r1, #0
    7abc:	2100      	movs	r1, #0
    7abe:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    7ac2:	41a1      	sbcs	r1, r4
    7ac4:	d203      	bcs.n	7ace <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    7ac6:	2172      	movs	r1, #114	; 0x72
    7ac8:	206d      	movs	r0, #109	; 0x6d
    7aca:	f7fb fdc7 	bl	365c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7ace:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    7ad2:	fbb0 f0f2 	udiv	r0, r0, r2
    7ad6:	bd70      	pop	{r4, r5, r6, pc}
    7ad8:	5840      	ldr	r0, [r0, r1]
    7ada:	2800      	cmp	r0, #0
    7adc:	d000      	beq.n	7ae0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    7ade:	2001      	movs	r0, #1
    7ae0:	4770      	bx	lr
    7ae2:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    7ae6:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    7aea:	f002 0201 	and.w	r2, r2, #1
    7aee:	03c0      	lsls	r0, r0, #15
    7af0:	d503      	bpl.n	7afa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    7af2:	428a      	cmp	r2, r1
    7af4:	d101      	bne.n	7afa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    7af6:	2001      	movs	r0, #1
    7af8:	4770      	bx	lr
    7afa:	2000      	movs	r0, #0
    7afc:	4770      	bx	lr

00007afe <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    7afe:	b510      	push	{r4, lr}
    7b00:	2101      	movs	r1, #1
    7b02:	0788      	lsls	r0, r1, #30
    7b04:	f7fb fd54 	bl	35b0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    7b08:	2800      	cmp	r0, #0
    7b0a:	d000      	beq.n	7b0e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    7b0c:	2001      	movs	r0, #1
    7b0e:	bd10      	pop	{r4, pc}

00007b10 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    7b10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7b14:	2101      	movs	r1, #1
    7b16:	6001      	str	r1, [r0, #0]
    7b18:	4770      	bx	lr

00007b1a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    7b1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7b1e:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    7b22:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    7b26:	f002 0203 	and.w	r2, r2, #3
    7b2a:	03c9      	lsls	r1, r1, #15
    7b2c:	d503      	bpl.n	7b36 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    7b2e:	4282      	cmp	r2, r0
    7b30:	d101      	bne.n	7b36 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    7b32:	2001      	movs	r0, #1
    7b34:	4770      	bx	lr
    7b36:	2000      	movs	r0, #0
    7b38:	4770      	bx	lr

00007b3a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    7b3a:	b510      	push	{r4, lr}
    7b3c:	2100      	movs	r1, #0
    7b3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7b42:	f7fb fd35 	bl	35b0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    7b46:	2800      	cmp	r0, #0
    7b48:	d000      	beq.n	7b4c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    7b4a:	2001      	movs	r0, #1
    7b4c:	bd10      	pop	{r4, pc}
    7b4e:	2800      	cmp	r0, #0
    7b50:	db09      	blt.n	7b66 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    7b52:	f000 021f 	and.w	r2, r0, #31
    7b56:	2101      	movs	r1, #1
    7b58:	4091      	lsls	r1, r2
    7b5a:	0940      	lsrs	r0, r0, #5
    7b5c:	0080      	lsls	r0, r0, #2
    7b5e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    7b62:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    7b66:	4770      	bx	lr
    7b68:	2800      	cmp	r0, #0
    7b6a:	db0d      	blt.n	7b88 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    7b6c:	f000 021f 	and.w	r2, r0, #31
    7b70:	2101      	movs	r1, #1
    7b72:	4091      	lsls	r1, r2
    7b74:	0940      	lsrs	r0, r0, #5
    7b76:	0080      	lsls	r0, r0, #2
    7b78:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    7b7c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    7b80:	f3bf 8f4f 	dsb	sy
    7b84:	f3bf 8f6f 	isb	sy
    7b88:	4770      	bx	lr
    7b8a:	1000      	.short	0x1000
    7b8c:	00fa0002 	.word	0x00fa0002
    7b90:	edb80000 	.word	0xedb80000
    7b94:	0ef2aa4d 	.word	0x0ef2aa4d
    7b98:	b5ea3202 	.word	0xb5ea3202
    7b9c:	d1502fde 	.word	0xd1502fde
    7ba0:	d2b55ab7 	.word	0xd2b55ab7
    7ba4:	41c7      	.short	0x41c7
    7ba6:	2800      	cmp	r0, #0
    7ba8:	db09      	blt.n	7bbe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    7baa:	f000 021f 	and.w	r2, r0, #31
    7bae:	2101      	movs	r1, #1
    7bb0:	4091      	lsls	r1, r2
    7bb2:	0940      	lsrs	r0, r0, #5
    7bb4:	0080      	lsls	r0, r0, #2
    7bb6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    7bba:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    7bbe:	4770      	bx	lr

00007bc0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    7bc0:	f3ef 8110 	mrs	r1, PRIMASK
    7bc4:	b672      	cpsid	i
    7bc6:	7802      	ldrb	r2, [r0, #0]
    7bc8:	2a01      	cmp	r2, #1
    7bca:	d001      	beq.n	7bd0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    7bcc:	2201      	movs	r2, #1
    7bce:	e000      	b.n	7bd2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    7bd0:	2200      	movs	r2, #0
    7bd2:	2301      	movs	r3, #1
    7bd4:	7003      	strb	r3, [r0, #0]
    7bd6:	b901      	cbnz	r1, 7bda <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    7bd8:	b662      	cpsie	i
    7bda:	b10a      	cbz	r2, 7be0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    7bdc:	2000      	movs	r0, #0
    7bde:	4770      	bx	lr
    7be0:	f06f 0022 	mvn.w	r0, #34	; 0x22
    7be4:	4770      	bx	lr

00007be6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    7be6:	2100      	movs	r1, #0
    7be8:	7001      	strb	r1, [r0, #0]
    7bea:	4608      	mov	r0, r1
    7bec:	4770      	bx	lr

00007bee <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    7bee:	f3ef 8110 	mrs	r1, PRIMASK
    7bf2:	b672      	cpsid	i
    7bf4:	2200      	movs	r2, #0
    7bf6:	7002      	strb	r2, [r0, #0]
    7bf8:	b901      	cbnz	r1, 7bfc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    7bfa:	b662      	cpsie	i
    7bfc:	2000      	movs	r0, #0
    7bfe:	4770      	bx	lr

00007c00 <mpsl_low_priority_process>:
    7c00:	f7fb be2c 	b.w	385c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00007c04 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    7c04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7c08:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    7c0c:	280f      	cmp	r0, #15
    7c0e:	d001      	beq.n	7c14 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    7c10:	2000      	movs	r0, #0
    7c12:	4770      	bx	lr
    7c14:	2001      	movs	r0, #1
    7c16:	4770      	bx	lr

00007c18 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    7c18:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7c1c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    7c20:	280a      	cmp	r0, #10
    7c22:	d001      	beq.n	7c28 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    7c24:	2000      	movs	r0, #0
    7c26:	4770      	bx	lr
    7c28:	2001      	movs	r0, #1
    7c2a:	4770      	bx	lr

00007c2c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    7c2c:	b500      	push	{lr}
    7c2e:	f7ff fff3 	bl	7c18 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7c32:	b120      	cbz	r0, 7c3e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    7c34:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7c38:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    7c3c:	b108      	cbz	r0, 7c42 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    7c3e:	2000      	movs	r0, #0
    7c40:	bd00      	pop	{pc}
    7c42:	2001      	movs	r0, #1
    7c44:	bd00      	pop	{pc}

00007c46 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    7c46:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7c4a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    7c4e:	280e      	cmp	r0, #14
    7c50:	d001      	beq.n	7c56 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    7c52:	2000      	movs	r0, #0
    7c54:	4770      	bx	lr
    7c56:	2001      	movs	r0, #1
    7c58:	4770      	bx	lr

00007c5a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    7c5a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7c5e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    7c62:	2810      	cmp	r0, #16
    7c64:	d001      	beq.n	7c6a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    7c66:	2000      	movs	r0, #0
    7c68:	4770      	bx	lr
    7c6a:	2001      	movs	r0, #1
    7c6c:	4770      	bx	lr

00007c6e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    7c6e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7c72:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    7c76:	2806      	cmp	r0, #6
    7c78:	d003      	beq.n	7c82 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    7c7a:	1c40      	adds	r0, r0, #1
    7c7c:	d001      	beq.n	7c82 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    7c7e:	2000      	movs	r0, #0
    7c80:	4770      	bx	lr
    7c82:	2001      	movs	r0, #1
    7c84:	4770      	bx	lr

00007c86 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    7c86:	b500      	push	{lr}
    7c88:	f7ff fff1 	bl	7c6e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7c8c:	b148      	cbz	r0, 7ca2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    7c8e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7c92:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    7c96:	2806      	cmp	r0, #6
    7c98:	d303      	bcc.n	7ca2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    7c9a:	1c40      	adds	r0, r0, #1
    7c9c:	d001      	beq.n	7ca2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    7c9e:	2001      	movs	r0, #1
    7ca0:	bd00      	pop	{pc}
    7ca2:	2000      	movs	r0, #0
    7ca4:	bd00      	pop	{pc}

00007ca6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    7ca6:	b500      	push	{lr}
    7ca8:	f7ff ffe1 	bl	7c6e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7cac:	b138      	cbz	r0, 7cbe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    7cae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7cb2:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    7cb6:	2806      	cmp	r0, #6
    7cb8:	d303      	bcc.n	7cc2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    7cba:	1c40      	adds	r0, r0, #1
    7cbc:	d001      	beq.n	7cc2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    7cbe:	2000      	movs	r0, #0
    7cc0:	bd00      	pop	{pc}
    7cc2:	2001      	movs	r0, #1
    7cc4:	bd00      	pop	{pc}

00007cc6 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    7cc6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7cca:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    7cce:	280d      	cmp	r0, #13
    7cd0:	d001      	beq.n	7cd6 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    7cd2:	2000      	movs	r0, #0
    7cd4:	4770      	bx	lr
    7cd6:	2001      	movs	r0, #1
    7cd8:	4770      	bx	lr

00007cda <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    7cda:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7cde:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    7ce2:	2808      	cmp	r0, #8
    7ce4:	d001      	beq.n	7cea <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    7ce6:	2000      	movs	r0, #0
    7ce8:	4770      	bx	lr
    7cea:	2001      	movs	r0, #1
    7cec:	4770      	bx	lr

00007cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    7cee:	b4f0      	push	{r4, r5, r6, r7}
    7cf0:	ea80 0c01 	eor.w	ip, r0, r1
    7cf4:	4603      	mov	r3, r0
    7cf6:	f01c 0f03 	tst.w	ip, #3
    7cfa:	d13c      	bne.n	7d76 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    7cfc:	f013 0f03 	tst.w	r3, #3
    7d00:	d00b      	beq.n	7d1a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    7d02:	2a00      	cmp	r2, #0
    7d04:	bf04      	itt	eq
    7d06:	bcf0      	popeq	{r4, r5, r6, r7}
    7d08:	4770      	bxeq	lr
    7d0a:	f811 cb01 	ldrb.w	ip, [r1], #1
    7d0e:	f803 cb01 	strb.w	ip, [r3], #1
    7d12:	1e52      	subs	r2, r2, #1
    7d14:	f013 0f03 	tst.w	r3, #3
    7d18:	d1f3      	bne.n	7d02 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    7d1a:	2a03      	cmp	r2, #3
    7d1c:	d94f      	bls.n	7dbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    7d1e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    7d22:	d24c      	bcs.n	7dbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    7d24:	f1c2 0c00 	rsb	ip, r2, #0
    7d28:	ea4f 74ec 	mov.w	r4, ip, asr #31
    7d2c:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    7d30:	ea4f 0cac 	mov.w	ip, ip, asr #2
    7d34:	f1cc 0c00 	rsb	ip, ip, #0
    7d38:	f1bc 0f00 	cmp.w	ip, #0
    7d3c:	dd1b      	ble.n	7d76 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    7d3e:	1f0d      	subs	r5, r1, #4
    7d40:	1f1c      	subs	r4, r3, #4
    7d42:	f01c 0f01 	tst.w	ip, #1
    7d46:	d003      	beq.n	7d50 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    7d48:	f855 6f04 	ldr.w	r6, [r5, #4]!
    7d4c:	f844 6f04 	str.w	r6, [r4, #4]!
    7d50:	ea5f 066c 	movs.w	r6, ip, asr #1
    7d54:	d007      	beq.n	7d66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    7d56:	686f      	ldr	r7, [r5, #4]
    7d58:	6067      	str	r7, [r4, #4]
    7d5a:	f855 7f08 	ldr.w	r7, [r5, #8]!
    7d5e:	f844 7f08 	str.w	r7, [r4, #8]!
    7d62:	1e76      	subs	r6, r6, #1
    7d64:	d1f7      	bne.n	7d56 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    7d66:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    7d6a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    7d6e:	f1cc 0c00 	rsb	ip, ip, #0
    7d72:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    7d76:	2a00      	cmp	r2, #0
    7d78:	bf04      	itt	eq
    7d7a:	bcf0      	popeq	{r4, r5, r6, r7}
    7d7c:	4770      	bxeq	lr
    7d7e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    7d82:	d226      	bcs.n	7dd2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    7d84:	2a00      	cmp	r2, #0
    7d86:	bfdc      	itt	le
    7d88:	bcf0      	pople	{r4, r5, r6, r7}
    7d8a:	4770      	bxle	lr
    7d8c:	1e49      	subs	r1, r1, #1
    7d8e:	1e5b      	subs	r3, r3, #1
    7d90:	f012 0f01 	tst.w	r2, #1
    7d94:	d003      	beq.n	7d9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    7d96:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    7d9a:	f803 cf01 	strb.w	ip, [r3, #1]!
    7d9e:	1052      	asrs	r2, r2, #1
    7da0:	bf04      	itt	eq
    7da2:	bcf0      	popeq	{r4, r5, r6, r7}
    7da4:	4770      	bxeq	lr
    7da6:	f891 c001 	ldrb.w	ip, [r1, #1]
    7daa:	f883 c001 	strb.w	ip, [r3, #1]
    7dae:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    7db2:	f803 cf02 	strb.w	ip, [r3, #2]!
    7db6:	1e52      	subs	r2, r2, #1
    7db8:	d1f5      	bne.n	7da6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    7dba:	bcf0      	pop	{r4, r5, r6, r7}
    7dbc:	4770      	bx	lr
    7dbe:	2a04      	cmp	r2, #4
    7dc0:	d3d9      	bcc.n	7d76 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    7dc2:	f851 cb04 	ldr.w	ip, [r1], #4
    7dc6:	1f12      	subs	r2, r2, #4
    7dc8:	f843 cb04 	str.w	ip, [r3], #4
    7dcc:	2a04      	cmp	r2, #4
    7dce:	d2f8      	bcs.n	7dc2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    7dd0:	e7d1      	b.n	7d76 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    7dd2:	f811 cb01 	ldrb.w	ip, [r1], #1
    7dd6:	f803 cb01 	strb.w	ip, [r3], #1
    7dda:	1e52      	subs	r2, r2, #1
    7ddc:	d1f9      	bne.n	7dd2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    7dde:	bcf0      	pop	{r4, r5, r6, r7}
    7de0:	4770      	bx	lr

00007de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    7de2:	b470      	push	{r4, r5, r6}
    7de4:	4603      	mov	r3, r0
    7de6:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    7dea:	f010 0f03 	tst.w	r0, #3
    7dee:	d009      	beq.n	7e04 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    7df0:	2a00      	cmp	r2, #0
    7df2:	bf04      	itt	eq
    7df4:	bc70      	popeq	{r4, r5, r6}
    7df6:	4770      	bxeq	lr
    7df8:	f803 cb01 	strb.w	ip, [r3], #1
    7dfc:	1e52      	subs	r2, r2, #1
    7dfe:	f013 0f03 	tst.w	r3, #3
    7e02:	d1f5      	bne.n	7df0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    7e04:	b2c9      	uxtb	r1, r1
    7e06:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    7e0a:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    7e0e:	2a03      	cmp	r2, #3
    7e10:	d939      	bls.n	7e86 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    7e12:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    7e16:	d236      	bcs.n	7e86 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    7e18:	4251      	negs	r1, r2
    7e1a:	17cc      	asrs	r4, r1, #31
    7e1c:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    7e20:	1089      	asrs	r1, r1, #2
    7e22:	424e      	negs	r6, r1
    7e24:	2e00      	cmp	r6, #0
    7e26:	dd11      	ble.n	7e4c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    7e28:	1f19      	subs	r1, r3, #4
    7e2a:	f016 0f01 	tst.w	r6, #1
    7e2e:	bf18      	it	ne
    7e30:	f841 5f04 	strne.w	r5, [r1, #4]!
    7e34:	1074      	asrs	r4, r6, #1
    7e36:	d004      	beq.n	7e42 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    7e38:	604d      	str	r5, [r1, #4]
    7e3a:	f841 5f08 	str.w	r5, [r1, #8]!
    7e3e:	1e64      	subs	r4, r4, #1
    7e40:	d1fa      	bne.n	7e38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    7e42:	4271      	negs	r1, r6
    7e44:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    7e48:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    7e4c:	2a00      	cmp	r2, #0
    7e4e:	bf04      	itt	eq
    7e50:	bc70      	popeq	{r4, r5, r6}
    7e52:	4770      	bxeq	lr
    7e54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    7e58:	d21d      	bcs.n	7e96 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    7e5a:	2a00      	cmp	r2, #0
    7e5c:	bfdc      	itt	le
    7e5e:	bc70      	pople	{r4, r5, r6}
    7e60:	4770      	bxle	lr
    7e62:	1e59      	subs	r1, r3, #1
    7e64:	f012 0f01 	tst.w	r2, #1
    7e68:	bf18      	it	ne
    7e6a:	f801 cf01 	strbne.w	ip, [r1, #1]!
    7e6e:	1052      	asrs	r2, r2, #1
    7e70:	bf04      	itt	eq
    7e72:	bc70      	popeq	{r4, r5, r6}
    7e74:	4770      	bxeq	lr
    7e76:	f881 c001 	strb.w	ip, [r1, #1]
    7e7a:	f801 cf02 	strb.w	ip, [r1, #2]!
    7e7e:	1e52      	subs	r2, r2, #1
    7e80:	d1f9      	bne.n	7e76 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    7e82:	bc70      	pop	{r4, r5, r6}
    7e84:	4770      	bx	lr
    7e86:	2a04      	cmp	r2, #4
    7e88:	d3e0      	bcc.n	7e4c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    7e8a:	1f12      	subs	r2, r2, #4
    7e8c:	f843 5b04 	str.w	r5, [r3], #4
    7e90:	2a04      	cmp	r2, #4
    7e92:	d2fa      	bcs.n	7e8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    7e94:	e7da      	b.n	7e4c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    7e96:	f803 cb01 	strb.w	ip, [r3], #1
    7e9a:	1e52      	subs	r2, r2, #1
    7e9c:	d1fb      	bne.n	7e96 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    7e9e:	bc70      	pop	{r4, r5, r6}
    7ea0:	4770      	bx	lr
    7ea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7ea6:	4770      	bx	lr
    7ea8:	2000      	movs	r0, #0
    7eaa:	4770      	bx	lr
    7eac:	2000      	movs	r0, #0
    7eae:	4770      	bx	lr
    7eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7eb4:	4770      	bx	lr
    7eb6:	4770      	bx	lr
    7eb8:	4770      	bx	lr
    7eba:	2000      	movs	r0, #0
    7ebc:	4770      	bx	lr
    7ebe:	2100      	movs	r1, #0
    7ec0:	7001      	strb	r1, [r0, #0]
    7ec2:	4770      	bx	lr
    7ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7ec8:	4770      	bx	lr
    7eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7ece:	4770      	bx	lr
    7ed0:	2100      	movs	r1, #0
    7ed2:	7001      	strb	r1, [r0, #0]
    7ed4:	4770      	bx	lr
    7ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7eda:	4770      	bx	lr
    7edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7ee0:	4770      	bx	lr
    7ee2:	7800      	ldrb	r0, [r0, #0]
    7ee4:	2800      	cmp	r0, #0
    7ee6:	d001      	beq.n	7eec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    7ee8:	f06f 0015 	mvn.w	r0, #21
    7eec:	4770      	bx	lr
    7eee:	2000      	movs	r0, #0
    7ef0:	4770      	bx	lr
    7ef2:	2200      	movs	r2, #0
    7ef4:	f000 b802 	b.w	7efc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00007ef8 <mpsl_fem_init>:
    7ef8:	f7f8 b8fe 	b.w	f8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00007efc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    7efc:	b570      	push	{r4, r5, r6, lr}
    7efe:	4614      	mov	r4, r2
    7f00:	460d      	mov	r5, r1
    7f02:	1b00      	subs	r0, r0, r4
    7f04:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    7f08:	4288      	cmp	r0, r1
    7f0a:	da01      	bge.n	7f10 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    7f0c:	4608      	mov	r0, r1
    7f0e:	e002      	b.n	7f16 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    7f10:	287f      	cmp	r0, #127	; 0x7f
    7f12:	dd00      	ble.n	7f16 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    7f14:	207f      	movs	r0, #127	; 0x7f
    7f16:	b240      	sxtb	r0, r0
    7f18:	f7f8 f922 	bl	160 <mpsl_tx_power_radio_supported_power_adjust>
    7f1c:	7028      	strb	r0, [r5, #0]
    7f1e:	706c      	strb	r4, [r5, #1]
    7f20:	2100      	movs	r1, #0
    7f22:	4420      	add	r0, r4
    7f24:	70a9      	strb	r1, [r5, #2]
    7f26:	b240      	sxtb	r0, r0
    7f28:	bd70      	pop	{r4, r5, r6, pc}
    7f2a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f2e:	460c      	mov	r4, r1
    7f30:	4681      	mov	r9, r0
    7f32:	7849      	ldrb	r1, [r1, #1]
    7f34:	f100 0003 	add.w	r0, r0, #3
    7f38:	f88d 1000 	strb.w	r1, [sp]
    7f3c:	f020 0003 	bic.w	r0, r0, #3
    7f40:	78a1      	ldrb	r1, [r4, #2]
    7f42:	0016      	movs	r6, r2
    7f44:	4605      	mov	r5, r0
    7f46:	f88d 1001 	strb.w	r1, [sp, #1]
    7f4a:	d000      	beq.n	7f4e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x52>
    7f4c:	2000      	movs	r0, #0
    7f4e:	4669      	mov	r1, sp
    7f50:	f7fc f818 	bl	3f84 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    7f54:	4428      	add	r0, r5
    7f56:	78a1      	ldrb	r1, [r4, #2]
    7f58:	4605      	mov	r5, r0
    7f5a:	b131      	cbz	r1, 7f6a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    7f5c:	8a63      	ldrh	r3, [r4, #18]
    7f5e:	78e2      	ldrb	r2, [r4, #3]
    7f60:	b106      	cbz	r6, 7f64 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x68>
    7f62:	2000      	movs	r0, #0
    7f64:	f7fc fa62 	bl	442c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    7f68:	4405      	add	r5, r0
    7f6a:	7820      	ldrb	r0, [r4, #0]
    7f6c:	7861      	ldrb	r1, [r4, #1]
    7f6e:	46b2      	mov	sl, r6
    7f70:	2600      	movs	r6, #0
    7f72:	4408      	add	r0, r1
    7f74:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    7f78:	4637      	mov	r7, r6
    7f7a:	e008      	b.n	7f8e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x92>
    7f7c:	7a23      	ldrb	r3, [r4, #8]
    7f7e:	79e2      	ldrb	r2, [r4, #7]
    7f80:	79a1      	ldrb	r1, [r4, #6]
    7f82:	7960      	ldrb	r0, [r4, #5]
    7f84:	f000 fc77 	bl	8876 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    7f88:	1c7f      	adds	r7, r7, #1
    7f8a:	4406      	add	r6, r0
    7f8c:	b2ff      	uxtb	r7, r7
    7f8e:	4547      	cmp	r7, r8
    7f90:	d3f4      	bcc.n	7f7c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x80>
    7f92:	1ced      	adds	r5, r5, #3
    7f94:	f025 0003 	bic.w	r0, r5, #3
    7f98:	4604      	mov	r4, r0
    7f9a:	f1ba 0f00 	cmp.w	sl, #0
    7f9e:	d000      	beq.n	7fa2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa6>
    7fa0:	2000      	movs	r0, #0
    7fa2:	4632      	mov	r2, r6
    7fa4:	4641      	mov	r1, r8
    7fa6:	f7fc f9a1 	bl	42ec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    7faa:	4420      	add	r0, r4
    7fac:	1dc0      	adds	r0, r0, #7
    7fae:	f020 0007 	bic.w	r0, r0, #7
    7fb2:	eba0 0009 	sub.w	r0, r0, r9
    7fb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7fba:	b570      	push	{r4, r5, r6, lr}
    7fbc:	460c      	mov	r4, r1
    7fbe:	4605      	mov	r5, r0
    7fc0:	f7fb ff6a 	bl	3e98 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    7fc4:	2800      	cmp	r0, #0
    7fc6:	d002      	beq.n	7fce <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xd2>
    7fc8:	2d3e      	cmp	r5, #62	; 0x3e
    7fca:	d001      	beq.n	7fd0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xd4>
    7fcc:	2001      	movs	r0, #1
    7fce:	bd70      	pop	{r4, r5, r6, pc}
    7fd0:	2c12      	cmp	r4, #18
    7fd2:	d004      	beq.n	7fde <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xe2>
    7fd4:	4620      	mov	r0, r4
    7fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7fda:	f7fb bf6f 	b.w	3ebc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    7fde:	2000      	movs	r0, #0
    7fe0:	bd70      	pop	{r4, r5, r6, pc}

00007fe2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    7fe2:	b510      	push	{r4, lr}
    7fe4:	460c      	mov	r4, r1
    7fe6:	7809      	ldrb	r1, [r1, #0]
    7fe8:	7001      	strb	r1, [r0, #0]
    7fea:	7841      	ldrb	r1, [r0, #1]
    7fec:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    7ff0:	7041      	strb	r1, [r0, #1]
    7ff2:	8822      	ldrh	r2, [r4, #0]
    7ff4:	f3c2 2203 	ubfx	r2, r2, #8, #4
    7ff8:	4311      	orrs	r1, r2
    7ffa:	7041      	strb	r1, [r0, #1]
    7ffc:	78a2      	ldrb	r2, [r4, #2]
    7ffe:	7082      	strb	r2, [r0, #2]
    8000:	8862      	ldrh	r2, [r4, #2]
    8002:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    8006:	0a12      	lsrs	r2, r2, #8
    8008:	70c2      	strb	r2, [r0, #3]
    800a:	7041      	strb	r1, [r0, #1]
    800c:	7922      	ldrb	r2, [r4, #4]
    800e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    8012:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    8016:	7041      	strb	r1, [r0, #1]
    8018:	7962      	ldrb	r2, [r4, #5]
    801a:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    801e:	7041      	strb	r1, [r0, #1]
    8020:	68a1      	ldr	r1, [r4, #8]
    8022:	1d02      	adds	r2, r0, #4
    8024:	4291      	cmp	r1, r2
    8026:	d006      	beq.n	8036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36>
    8028:	8862      	ldrh	r2, [r4, #2]
    802a:	2afb      	cmp	r2, #251	; 0xfb
    802c:	d300      	bcc.n	8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>
    802e:	22fb      	movs	r2, #251	; 0xfb
    8030:	1d00      	adds	r0, r0, #4
    8032:	f7ff fe5c 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8036:	78a0      	ldrb	r0, [r4, #2]
    8038:	1d00      	adds	r0, r0, #4
    803a:	b2c0      	uxtb	r0, r0
    803c:	bd10      	pop	{r4, pc}

0000803e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    803e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8042:	4604      	mov	r4, r0
    8044:	f891 c000 	ldrb.w	ip, [r1]
    8048:	2000      	movs	r0, #0
    804a:	2513      	movs	r5, #19
    804c:	260c      	movs	r6, #12
    804e:	2705      	movs	r7, #5
    8050:	223e      	movs	r2, #62	; 0x3e
    8052:	23ff      	movs	r3, #255	; 0xff
    8054:	f1bc 0f1d 	cmp.w	ip, #29
    8058:	d27d      	bcs.n	8156 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    805a:	e8df f00c 	tbb	[pc, ip]
    805e:	0f7c      	.short	0x0f7c
    8060:	882e2826 	.word	0x882e2826
    8064:	d1bea492 	.word	0xd1bea492
    8068:	f5f7ded3 	.word	0xf5f7ded3
    806c:	547c7cf4 	.word	0x547c7cf4
    8070:	f0f1f2f3 	.word	0xf0f1f2f3
    8074:	ecedeeef 	.word	0xecedeeef
    8078:	00e9eaeb 	.word	0x00e9eaeb
    807c:	7026      	strb	r6, [r4, #0]
    807e:	7908      	ldrb	r0, [r1, #4]
    8080:	70a0      	strb	r0, [r4, #2]
    8082:	7948      	ldrb	r0, [r1, #5]
    8084:	70e0      	strb	r0, [r4, #3]
    8086:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    808a:	0a00      	lsrs	r0, r0, #8
    808c:	7120      	strb	r0, [r4, #4]
    808e:	79c8      	ldrb	r0, [r1, #7]
    8090:	7160      	strb	r0, [r4, #5]
    8092:	7a08      	ldrb	r0, [r1, #8]
    8094:	71a0      	strb	r0, [r4, #6]
    8096:	8908      	ldrh	r0, [r1, #8]
    8098:	0a00      	lsrs	r0, r0, #8
    809a:	71e0      	strb	r0, [r4, #7]
    809c:	7a88      	ldrb	r0, [r1, #10]
    809e:	7220      	strb	r0, [r4, #8]
    80a0:	8948      	ldrh	r0, [r1, #10]
    80a2:	0a00      	lsrs	r0, r0, #8
    80a4:	7260      	strb	r0, [r4, #9]
    80a6:	2008      	movs	r0, #8
    80a8:	e190      	b.n	83cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    80aa:	2010      	movs	r0, #16
    80ac:	e000      	b.n	80b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x72>
    80ae:	201a      	movs	r0, #26
    80b0:	7020      	strb	r0, [r4, #0]
    80b2:	7908      	ldrb	r0, [r1, #4]
    80b4:	70a0      	strb	r0, [r4, #2]
    80b6:	2001      	movs	r0, #1
    80b8:	e188      	b.n	83cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    80ba:	7022      	strb	r2, [r4, #0]
    80bc:	2001      	movs	r0, #1
    80be:	70a0      	strb	r0, [r4, #2]
    80c0:	7908      	ldrb	r0, [r1, #4]
    80c2:	70e0      	strb	r0, [r4, #3]
    80c4:	7988      	ldrb	r0, [r1, #6]
    80c6:	7120      	strb	r0, [r4, #4]
    80c8:	88c8      	ldrh	r0, [r1, #6]
    80ca:	0a00      	lsrs	r0, r0, #8
    80cc:	7160      	strb	r0, [r4, #5]
    80ce:	7a08      	ldrb	r0, [r1, #8]
    80d0:	71a0      	strb	r0, [r4, #6]
    80d2:	7a48      	ldrb	r0, [r1, #9]
    80d4:	71e0      	strb	r0, [r4, #7]
    80d6:	f8d1 000a 	ldr.w	r0, [r1, #10]
    80da:	60a0      	str	r0, [r4, #8]
    80dc:	89c8      	ldrh	r0, [r1, #14]
    80de:	81a0      	strh	r0, [r4, #12]
    80e0:	7c08      	ldrb	r0, [r1, #16]
    80e2:	73a0      	strb	r0, [r4, #14]
    80e4:	8a08      	ldrh	r0, [r1, #16]
    80e6:	0a00      	lsrs	r0, r0, #8
    80e8:	73e0      	strb	r0, [r4, #15]
    80ea:	7c88      	ldrb	r0, [r1, #18]
    80ec:	7420      	strb	r0, [r4, #16]
    80ee:	8a48      	ldrh	r0, [r1, #18]
    80f0:	0a00      	lsrs	r0, r0, #8
    80f2:	7460      	strb	r0, [r4, #17]
    80f4:	7d08      	ldrb	r0, [r1, #20]
    80f6:	74a0      	strb	r0, [r4, #18]
    80f8:	8a88      	ldrh	r0, [r1, #20]
    80fa:	0a00      	lsrs	r0, r0, #8
    80fc:	74e0      	strb	r0, [r4, #19]
    80fe:	7d88      	ldrb	r0, [r1, #22]
    8100:	7520      	strb	r0, [r4, #20]
    8102:	4628      	mov	r0, r5
    8104:	e162      	b.n	83cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8106:	7022      	strb	r2, [r4, #0]
    8108:	200a      	movs	r0, #10
    810a:	70a0      	strb	r0, [r4, #2]
    810c:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    8110:	70e0      	strb	r0, [r4, #3]
    8112:	7888      	ldrb	r0, [r1, #2]
    8114:	7120      	strb	r0, [r4, #4]
    8116:	8848      	ldrh	r0, [r1, #2]
    8118:	0a00      	lsrs	r0, r0, #8
    811a:	7160      	strb	r0, [r4, #5]
    811c:	7908      	ldrb	r0, [r1, #4]
    811e:	71a0      	strb	r0, [r4, #6]
    8120:	7948      	ldrb	r0, [r1, #5]
    8122:	71e0      	strb	r0, [r4, #7]
    8124:	f8d1 0006 	ldr.w	r0, [r1, #6]
    8128:	60a0      	str	r0, [r4, #8]
    812a:	8948      	ldrh	r0, [r1, #10]
    812c:	81a0      	strh	r0, [r4, #12]
    812e:	68c8      	ldr	r0, [r1, #12]
    8130:	f8c4 000e 	str.w	r0, [r4, #14]
    8134:	8a08      	ldrh	r0, [r1, #16]
    8136:	8260      	strh	r0, [r4, #18]
    8138:	f8d1 0012 	ldr.w	r0, [r1, #18]
    813c:	6160      	str	r0, [r4, #20]
    813e:	8ac8      	ldrh	r0, [r1, #22]
    8140:	8320      	strh	r0, [r4, #24]
    8142:	7e08      	ldrb	r0, [r1, #24]
    8144:	76a0      	strb	r0, [r4, #26]
    8146:	8b08      	ldrh	r0, [r1, #24]
    8148:	0a00      	lsrs	r0, r0, #8
    814a:	76e0      	strb	r0, [r4, #27]
    814c:	7e88      	ldrb	r0, [r1, #26]
    814e:	7720      	strb	r0, [r4, #28]
    8150:	8b48      	ldrh	r0, [r1, #26]
    8152:	0a00      	lsrs	r0, r0, #8
    8154:	e000      	b.n	8158 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11a>
    8156:	e09a      	b.n	828e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    8158:	7760      	strb	r0, [r4, #29]
    815a:	7f08      	ldrb	r0, [r1, #28]
    815c:	77a0      	strb	r0, [r4, #30]
    815e:	8b88      	ldrh	r0, [r1, #28]
    8160:	0a00      	lsrs	r0, r0, #8
    8162:	77e0      	strb	r0, [r4, #31]
    8164:	7f88      	ldrb	r0, [r1, #30]
    8166:	f884 0020 	strb.w	r0, [r4, #32]
    816a:	201f      	movs	r0, #31
    816c:	e12e      	b.n	83cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    816e:	7022      	strb	r2, [r4, #0]
    8170:	2014      	movs	r0, #20
    8172:	70a0      	strb	r0, [r4, #2]
    8174:	7908      	ldrb	r0, [r1, #4]
    8176:	70e0      	strb	r0, [r4, #3]
    8178:	8888      	ldrh	r0, [r1, #4]
    817a:	0a00      	lsrs	r0, r0, #8
    817c:	7120      	strb	r0, [r4, #4]
    817e:	7988      	ldrb	r0, [r1, #6]
    8180:	e0c2      	b.n	8308 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    8182:	7022      	strb	r2, [r4, #0]
    8184:	2004      	movs	r0, #4
    8186:	70a0      	strb	r0, [r4, #2]
    8188:	7908      	ldrb	r0, [r1, #4]
    818a:	70e0      	strb	r0, [r4, #3]
    818c:	7988      	ldrb	r0, [r1, #6]
    818e:	7120      	strb	r0, [r4, #4]
    8190:	88c8      	ldrh	r0, [r1, #6]
    8192:	0a00      	lsrs	r0, r0, #8
    8194:	7160      	strb	r0, [r4, #5]
    8196:	6888      	ldr	r0, [r1, #8]
    8198:	f8c4 0006 	str.w	r0, [r4, #6]
    819c:	68c8      	ldr	r0, [r1, #12]
    819e:	f8c4 000a 	str.w	r0, [r4, #10]
    81a2:	200c      	movs	r0, #12
    81a4:	e112      	b.n	83cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    81a6:	7022      	strb	r2, [r4, #0]
    81a8:	2003      	movs	r0, #3
    81aa:	70a0      	strb	r0, [r4, #2]
    81ac:	7908      	ldrb	r0, [r1, #4]
    81ae:	70e0      	strb	r0, [r4, #3]
    81b0:	7988      	ldrb	r0, [r1, #6]
    81b2:	7120      	strb	r0, [r4, #4]
    81b4:	88c8      	ldrh	r0, [r1, #6]
    81b6:	0a00      	lsrs	r0, r0, #8
    81b8:	7160      	strb	r0, [r4, #5]
    81ba:	7a08      	ldrb	r0, [r1, #8]
    81bc:	71a0      	strb	r0, [r4, #6]
    81be:	8908      	ldrh	r0, [r1, #8]
    81c0:	0a00      	lsrs	r0, r0, #8
    81c2:	71e0      	strb	r0, [r4, #7]
    81c4:	7a88      	ldrb	r0, [r1, #10]
    81c6:	7220      	strb	r0, [r4, #8]
    81c8:	8948      	ldrh	r0, [r1, #10]
    81ca:	0a00      	lsrs	r0, r0, #8
    81cc:	7260      	strb	r0, [r4, #9]
    81ce:	7b08      	ldrb	r0, [r1, #12]
    81d0:	72a0      	strb	r0, [r4, #10]
    81d2:	8988      	ldrh	r0, [r1, #12]
    81d4:	0a00      	lsrs	r0, r0, #8
    81d6:	72e0      	strb	r0, [r4, #11]
    81d8:	e0d2      	b.n	8380 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x342>
    81da:	7022      	strb	r2, [r4, #0]
    81dc:	70a7      	strb	r7, [r4, #2]
    81de:	7908      	ldrb	r0, [r1, #4]
    81e0:	70e0      	strb	r0, [r4, #3]
    81e2:	8888      	ldrh	r0, [r1, #4]
    81e4:	0a00      	lsrs	r0, r0, #8
    81e6:	7120      	strb	r0, [r4, #4]
    81e8:	f8d1 0006 	ldr.w	r0, [r1, #6]
    81ec:	f8c4 0005 	str.w	r0, [r4, #5]
    81f0:	f8d1 000a 	ldr.w	r0, [r1, #10]
    81f4:	f8c4 0009 	str.w	r0, [r4, #9]
    81f8:	89c8      	ldrh	r0, [r1, #14]
    81fa:	f8a4 000d 	strh.w	r0, [r4, #13]
    81fe:	e0e4      	b.n	83ca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38c>
    8200:	2011      	movs	r0, #17
    8202:	e047      	b.n	8294 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x256>
    8204:	7027      	strb	r7, [r4, #0]
    8206:	7908      	ldrb	r0, [r1, #4]
    8208:	70a0      	strb	r0, [r4, #2]
    820a:	7948      	ldrb	r0, [r1, #5]
    820c:	70e0      	strb	r0, [r4, #3]
    820e:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    8212:	0a00      	lsrs	r0, r0, #8
    8214:	7120      	strb	r0, [r4, #4]
    8216:	79c8      	ldrb	r0, [r1, #7]
    8218:	e076      	b.n	8308 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    821a:	2008      	movs	r0, #8
    821c:	7020      	strb	r0, [r4, #0]
    821e:	7908      	ldrb	r0, [r1, #4]
    8220:	70a0      	strb	r0, [r4, #2]
    8222:	7988      	ldrb	r0, [r1, #6]
    8224:	70e0      	strb	r0, [r4, #3]
    8226:	88c8      	ldrh	r0, [r1, #6]
    8228:	0a00      	lsrs	r0, r0, #8
    822a:	7120      	strb	r0, [r4, #4]
    822c:	7a08      	ldrb	r0, [r1, #8]
    822e:	e06b      	b.n	8308 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    8230:	e0b6      	b.n	83a0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x362>
    8232:	e08a      	b.n	834a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x30c>
    8234:	e06b      	b.n	830e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d0>
    8236:	e096      	b.n	8366 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    8238:	e0a4      	b.n	8384 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x346>
    823a:	e05d      	b.n	82f8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    823c:	e045      	b.n	82ca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x28c>
    823e:	e041      	b.n	82c4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    8240:	e030      	b.n	82a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x266>
    8242:	e011      	b.n	8268 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22a>
    8244:	e00d      	b.n	8262 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x224>
    8246:	e024      	b.n	8292 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x254>
    8248:	e01b      	b.n	8282 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    824a:	e7ff      	b.n	824c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20e>
    824c:	2030      	movs	r0, #48	; 0x30
    824e:	7020      	strb	r0, [r4, #0]
    8250:	7908      	ldrb	r0, [r1, #4]
    8252:	70a0      	strb	r0, [r4, #2]
    8254:	7988      	ldrb	r0, [r1, #6]
    8256:	70e0      	strb	r0, [r4, #3]
    8258:	88c8      	ldrh	r0, [r1, #6]
    825a:	0a00      	lsrs	r0, r0, #8
    825c:	7120      	strb	r0, [r4, #4]
    825e:	2003      	movs	r0, #3
    8260:	e0b4      	b.n	83cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8262:	7022      	strb	r2, [r4, #0]
    8264:	2007      	movs	r0, #7
    8266:	e054      	b.n	8312 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d4>
    8268:	7022      	strb	r2, [r4, #0]
    826a:	70a6      	strb	r6, [r4, #2]
    826c:	7908      	ldrb	r0, [r1, #4]
    826e:	70e0      	strb	r0, [r4, #3]
    8270:	7988      	ldrb	r0, [r1, #6]
    8272:	7120      	strb	r0, [r4, #4]
    8274:	88c8      	ldrh	r0, [r1, #6]
    8276:	0a00      	lsrs	r0, r0, #8
    8278:	7160      	strb	r0, [r4, #5]
    827a:	7a08      	ldrb	r0, [r1, #8]
    827c:	71a0      	strb	r0, [r4, #6]
    827e:	7a48      	ldrb	r0, [r1, #9]
    8280:	e01d      	b.n	82be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x280>
    8282:	4620      	mov	r0, r4
    8284:	1d09      	adds	r1, r1, #4
    8286:	f7fb fdd9 	bl	3e3c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb0>
    828a:	2800      	cmp	r0, #0
    828c:	d109      	bne.n	82a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x264>
    828e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8292:	2057      	movs	r0, #87	; 0x57
    8294:	7020      	strb	r0, [r4, #0]
    8296:	7908      	ldrb	r0, [r1, #4]
    8298:	70a0      	strb	r0, [r4, #2]
    829a:	8888      	ldrh	r0, [r1, #4]
    829c:	0a00      	lsrs	r0, r0, #8
    829e:	70e0      	strb	r0, [r4, #3]
    82a0:	2002      	movs	r0, #2
    82a2:	e093      	b.n	83cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    82a4:	7022      	strb	r2, [r4, #0]
    82a6:	2012      	movs	r0, #18
    82a8:	70a0      	strb	r0, [r4, #2]
    82aa:	7908      	ldrb	r0, [r1, #4]
    82ac:	70e0      	strb	r0, [r4, #3]
    82ae:	7948      	ldrb	r0, [r1, #5]
    82b0:	7120      	strb	r0, [r4, #4]
    82b2:	7988      	ldrb	r0, [r1, #6]
    82b4:	7160      	strb	r0, [r4, #5]
    82b6:	88c8      	ldrh	r0, [r1, #6]
    82b8:	0a00      	lsrs	r0, r0, #8
    82ba:	71a0      	strb	r0, [r4, #6]
    82bc:	7a08      	ldrb	r0, [r1, #8]
    82be:	71e0      	strb	r0, [r4, #7]
    82c0:	2006      	movs	r0, #6
    82c2:	e083      	b.n	83cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    82c4:	7022      	strb	r2, [r4, #0]
    82c6:	2020      	movs	r0, #32
    82c8:	e041      	b.n	834e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x310>
    82ca:	7022      	strb	r2, [r4, #0]
    82cc:	2021      	movs	r0, #33	; 0x21
    82ce:	70a0      	strb	r0, [r4, #2]
    82d0:	7908      	ldrb	r0, [r1, #4]
    82d2:	70e0      	strb	r0, [r4, #3]
    82d4:	7948      	ldrb	r0, [r1, #5]
    82d6:	7120      	strb	r0, [r4, #4]
    82d8:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    82dc:	0a00      	lsrs	r0, r0, #8
    82de:	7160      	strb	r0, [r4, #5]
    82e0:	79c8      	ldrb	r0, [r1, #7]
    82e2:	71a0      	strb	r0, [r4, #6]
    82e4:	7a08      	ldrb	r0, [r1, #8]
    82e6:	71e0      	strb	r0, [r4, #7]
    82e8:	7a48      	ldrb	r0, [r1, #9]
    82ea:	7220      	strb	r0, [r4, #8]
    82ec:	7a88      	ldrb	r0, [r1, #10]
    82ee:	7260      	strb	r0, [r4, #9]
    82f0:	7ac8      	ldrb	r0, [r1, #11]
    82f2:	72a0      	strb	r0, [r4, #10]
    82f4:	2009      	movs	r0, #9
    82f6:	e069      	b.n	83cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    82f8:	7023      	strb	r3, [r4, #0]
    82fa:	20a1      	movs	r0, #161	; 0xa1
    82fc:	70a0      	strb	r0, [r4, #2]
    82fe:	7908      	ldrb	r0, [r1, #4]
    8300:	70e0      	strb	r0, [r4, #3]
    8302:	7948      	ldrb	r0, [r1, #5]
    8304:	7120      	strb	r0, [r4, #4]
    8306:	2000      	movs	r0, #0
    8308:	7160      	strb	r0, [r4, #5]
    830a:	2004      	movs	r0, #4
    830c:	e05e      	b.n	83cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    830e:	7023      	strb	r3, [r4, #0]
    8310:	20a2      	movs	r0, #162	; 0xa2
    8312:	70a0      	strb	r0, [r4, #2]
    8314:	7908      	ldrb	r0, [r1, #4]
    8316:	70e0      	strb	r0, [r4, #3]
    8318:	8888      	ldrh	r0, [r1, #4]
    831a:	0a00      	lsrs	r0, r0, #8
    831c:	7120      	strb	r0, [r4, #4]
    831e:	7988      	ldrb	r0, [r1, #6]
    8320:	7160      	strb	r0, [r4, #5]
    8322:	88c8      	ldrh	r0, [r1, #6]
    8324:	0a00      	lsrs	r0, r0, #8
    8326:	71a0      	strb	r0, [r4, #6]
    8328:	7a08      	ldrb	r0, [r1, #8]
    832a:	71e0      	strb	r0, [r4, #7]
    832c:	8908      	ldrh	r0, [r1, #8]
    832e:	0a00      	lsrs	r0, r0, #8
    8330:	7220      	strb	r0, [r4, #8]
    8332:	7a88      	ldrb	r0, [r1, #10]
    8334:	7260      	strb	r0, [r4, #9]
    8336:	8948      	ldrh	r0, [r1, #10]
    8338:	0a00      	lsrs	r0, r0, #8
    833a:	72a0      	strb	r0, [r4, #10]
    833c:	7b08      	ldrb	r0, [r1, #12]
    833e:	72e0      	strb	r0, [r4, #11]
    8340:	8988      	ldrh	r0, [r1, #12]
    8342:	0a00      	lsrs	r0, r0, #8
    8344:	7320      	strb	r0, [r4, #12]
    8346:	200b      	movs	r0, #11
    8348:	e040      	b.n	83cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    834a:	7023      	strb	r3, [r4, #0]
    834c:	20a3      	movs	r0, #163	; 0xa3
    834e:	70a0      	strb	r0, [r4, #2]
    8350:	7908      	ldrb	r0, [r1, #4]
    8352:	70e0      	strb	r0, [r4, #3]
    8354:	8888      	ldrh	r0, [r1, #4]
    8356:	0a00      	lsrs	r0, r0, #8
    8358:	7120      	strb	r0, [r4, #4]
    835a:	7988      	ldrb	r0, [r1, #6]
    835c:	7160      	strb	r0, [r4, #5]
    835e:	79c8      	ldrb	r0, [r1, #7]
    8360:	71a0      	strb	r0, [r4, #6]
    8362:	2005      	movs	r0, #5
    8364:	e032      	b.n	83cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8366:	7022      	strb	r2, [r4, #0]
    8368:	70a5      	strb	r5, [r4, #2]
    836a:	7908      	ldrb	r0, [r1, #4]
    836c:	70e0      	strb	r0, [r4, #3]
    836e:	7948      	ldrb	r0, [r1, #5]
    8370:	7120      	strb	r0, [r4, #4]
    8372:	f8d1 0006 	ldr.w	r0, [r1, #6]
    8376:	f8c4 0005 	str.w	r0, [r4, #5]
    837a:	8948      	ldrh	r0, [r1, #10]
    837c:	f8a4 0009 	strh.w	r0, [r4, #9]
    8380:	200a      	movs	r0, #10
    8382:	e023      	b.n	83cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8384:	7023      	strb	r3, [r4, #0]
    8386:	20a4      	movs	r0, #164	; 0xa4
    8388:	70a0      	strb	r0, [r4, #2]
    838a:	7908      	ldrb	r0, [r1, #4]
    838c:	70e0      	strb	r0, [r4, #3]
    838e:	8888      	ldrh	r0, [r1, #4]
    8390:	0a00      	lsrs	r0, r0, #8
    8392:	7120      	strb	r0, [r4, #4]
    8394:	7988      	ldrb	r0, [r1, #6]
    8396:	7160      	strb	r0, [r4, #5]
    8398:	79c8      	ldrb	r0, [r1, #7]
    839a:	71a0      	strb	r0, [r4, #6]
    839c:	2007      	movs	r0, #7
    839e:	e015      	b.n	83cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    83a0:	7023      	strb	r3, [r4, #0]
    83a2:	2080      	movs	r0, #128	; 0x80
    83a4:	70a0      	strb	r0, [r4, #2]
    83a6:	888a      	ldrh	r2, [r1, #4]
    83a8:	f8a4 2003 	strh.w	r2, [r4, #3]
    83ac:	88ca      	ldrh	r2, [r1, #6]
    83ae:	f8a4 2005 	strh.w	r2, [r4, #5]
    83b2:	7a0a      	ldrb	r2, [r1, #8]
    83b4:	71e2      	strb	r2, [r4, #7]
    83b6:	894a      	ldrh	r2, [r1, #10]
    83b8:	8122      	strh	r2, [r4, #8]
    83ba:	898a      	ldrh	r2, [r1, #12]
    83bc:	8162      	strh	r2, [r4, #10]
    83be:	89ca      	ldrh	r2, [r1, #14]
    83c0:	81a2      	strh	r2, [r4, #12]
    83c2:	7c09      	ldrb	r1, [r1, #16]
    83c4:	f001 0101 	and.w	r1, r1, #1
    83c8:	73a1      	strb	r1, [r4, #14]
    83ca:	200d      	movs	r0, #13
    83cc:	7060      	strb	r0, [r4, #1]
    83ce:	1c80      	adds	r0, r0, #2
    83d0:	e75d      	b.n	828e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>

000083d2 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    83d2:	223e      	movs	r2, #62	; 0x3e
    83d4:	7002      	strb	r2, [r0, #0]
    83d6:	2201      	movs	r2, #1
    83d8:	7082      	strb	r2, [r0, #2]
    83da:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    83de:	70c2      	strb	r2, [r0, #3]
    83e0:	788a      	ldrb	r2, [r1, #2]
    83e2:	7102      	strb	r2, [r0, #4]
    83e4:	884a      	ldrh	r2, [r1, #2]
    83e6:	0a12      	lsrs	r2, r2, #8
    83e8:	7142      	strb	r2, [r0, #5]
    83ea:	790a      	ldrb	r2, [r1, #4]
    83ec:	7182      	strb	r2, [r0, #6]
    83ee:	794a      	ldrb	r2, [r1, #5]
    83f0:	71c2      	strb	r2, [r0, #7]
    83f2:	f8d1 2006 	ldr.w	r2, [r1, #6]
    83f6:	6082      	str	r2, [r0, #8]
    83f8:	894a      	ldrh	r2, [r1, #10]
    83fa:	8182      	strh	r2, [r0, #12]
    83fc:	7e0a      	ldrb	r2, [r1, #24]
    83fe:	7382      	strb	r2, [r0, #14]
    8400:	8b0a      	ldrh	r2, [r1, #24]
    8402:	0a12      	lsrs	r2, r2, #8
    8404:	73c2      	strb	r2, [r0, #15]
    8406:	7e8a      	ldrb	r2, [r1, #26]
    8408:	7402      	strb	r2, [r0, #16]
    840a:	8b4a      	ldrh	r2, [r1, #26]
    840c:	0a12      	lsrs	r2, r2, #8
    840e:	7442      	strb	r2, [r0, #17]
    8410:	7f0a      	ldrb	r2, [r1, #28]
    8412:	7482      	strb	r2, [r0, #18]
    8414:	8b8a      	ldrh	r2, [r1, #28]
    8416:	0a12      	lsrs	r2, r2, #8
    8418:	74c2      	strb	r2, [r0, #19]
    841a:	7f89      	ldrb	r1, [r1, #30]
    841c:	7501      	strb	r1, [r0, #20]
    841e:	2113      	movs	r1, #19
    8420:	7041      	strb	r1, [r0, #1]
    8422:	4608      	mov	r0, r1
    8424:	4770      	bx	lr
    8426:	094a      	lsrs	r2, r1, #5
    8428:	f001 011f 	and.w	r1, r1, #31
    842c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    8430:	40c8      	lsrs	r0, r1
    8432:	f000 0001 	and.w	r0, r0, #1
    8436:	4770      	bx	lr

00008438 <sdc_hci_get>:
    8438:	b510      	push	{r4, lr}
    843a:	460c      	mov	r4, r1
    843c:	b130      	cbz	r0, 844c <sdc_hci_get+0x14>
    843e:	b12c      	cbz	r4, 844c <sdc_hci_get+0x14>
    8440:	f7fb fca4 	bl	3d8c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    8444:	b128      	cbz	r0, 8452 <sdc_hci_get+0x1a>
    8446:	7020      	strb	r0, [r4, #0]
    8448:	2000      	movs	r0, #0
    844a:	bd10      	pop	{r4, pc}
    844c:	f06f 0015 	mvn.w	r0, #21
    8450:	bd10      	pop	{r4, pc}
    8452:	f06f 0022 	mvn.w	r0, #34	; 0x22
    8456:	bd10      	pop	{r4, pc}

00008458 <sdc_hci_cmd_cb_set_event_mask>:
    8458:	b510      	push	{r4, lr}
    845a:	f7fb fd3f 	bl	3edc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    845e:	2000      	movs	r0, #0
    8460:	bd10      	pop	{r4, pc}

00008462 <sdc_hci_cmd_vs_conn_event_extend>:
    8462:	b508      	push	{r3, lr}
    8464:	7800      	ldrb	r0, [r0, #0]
    8466:	f88d 0000 	strb.w	r0, [sp]
    846a:	4668      	mov	r0, sp
    846c:	f001 fc11 	bl	9c92 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    8470:	bd08      	pop	{r3, pc}

00008472 <sdc_hci_cmd_vs_conn_update>:
    8472:	2001      	movs	r0, #1
    8474:	4770      	bx	lr

00008476 <sdc_hci_cmd_vs_event_length_set>:
    8476:	f7fd be8b 	b.w	6190 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000847a <sdc_hci_cmd_vs_llpm_mode_set>:
    847a:	2001      	movs	r0, #1
    847c:	4770      	bx	lr

0000847e <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    847e:	7800      	ldrb	r0, [r0, #0]
    8480:	b100      	cbz	r0, 8484 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    8482:	2001      	movs	r0, #1
    8484:	f001 bbcf 	b.w	9c26 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

00008488 <sdc_hci_cmd_vs_set_adv_randomness>:
    8488:	f001 bbe0 	b.w	9c4c <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000848c <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    848c:	b510      	push	{r4, lr}
    848e:	4604      	mov	r4, r0
    8490:	f7fb f958 	bl	3744 <mpsl_temperature_get>
    8494:	17c1      	asrs	r1, r0, #31
    8496:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    849a:	1080      	asrs	r0, r0, #2
    849c:	287f      	cmp	r0, #127	; 0x7f
    849e:	dd01      	ble.n	84a4 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    84a0:	207f      	movs	r0, #127	; 0x7f
    84a2:	e004      	b.n	84ae <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    84a4:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    84a8:	4288      	cmp	r0, r1
    84aa:	da00      	bge.n	84ae <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    84ac:	4608      	mov	r0, r1
    84ae:	7020      	strb	r0, [r4, #0]
    84b0:	2000      	movs	r0, #0
    84b2:	bd10      	pop	{r4, pc}

000084b4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    84b4:	b570      	push	{r4, r5, r6, lr}
    84b6:	4605      	mov	r5, r0
    84b8:	2210      	movs	r2, #16
    84ba:	2100      	movs	r1, #0
    84bc:	f7ff fc91 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    84c0:	2210      	movs	r2, #16
    84c2:	2100      	movs	r1, #0
    84c4:	f105 0010 	add.w	r0, r5, #16
    84c8:	f7ff fc8b 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    84cc:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    84d0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    84d4:	1c40      	adds	r0, r0, #1
    84d6:	d10b      	bne.n	84f0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    84d8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    84dc:	1c40      	adds	r0, r0, #1
    84de:	d107      	bne.n	84f0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    84e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    84e4:	1c40      	adds	r0, r0, #1
    84e6:	d103      	bne.n	84f0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    84e8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    84ec:	1c40      	adds	r0, r0, #1
    84ee:	d00b      	beq.n	8508 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    84f0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    84f4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    84f8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    84fc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    8500:	612a      	str	r2, [r5, #16]
    8502:	6168      	str	r0, [r5, #20]
    8504:	61a9      	str	r1, [r5, #24]
    8506:	61eb      	str	r3, [r5, #28]
    8508:	2000      	movs	r0, #0
    850a:	f7fc f971 	bl	47f0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    850e:	b918      	cbnz	r0, 8518 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    8510:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    8514:	07c0      	lsls	r0, r0, #31
    8516:	d118      	bne.n	854a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    8518:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    851c:	1c40      	adds	r0, r0, #1
    851e:	d10b      	bne.n	8538 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    8520:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    8524:	1c40      	adds	r0, r0, #1
    8526:	d107      	bne.n	8538 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    8528:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    852c:	1c40      	adds	r0, r0, #1
    852e:	d103      	bne.n	8538 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    8530:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    8534:	1c40      	adds	r0, r0, #1
    8536:	d008      	beq.n	854a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    8538:	f854 0f90 	ldr.w	r0, [r4, #144]!
    853c:	6861      	ldr	r1, [r4, #4]
    853e:	68a2      	ldr	r2, [r4, #8]
    8540:	68e3      	ldr	r3, [r4, #12]
    8542:	6028      	str	r0, [r5, #0]
    8544:	6069      	str	r1, [r5, #4]
    8546:	60aa      	str	r2, [r5, #8]
    8548:	60eb      	str	r3, [r5, #12]
    854a:	2000      	movs	r0, #0
    854c:	bd70      	pop	{r4, r5, r6, pc}

0000854e <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    854e:	b538      	push	{r3, r4, r5, lr}
    8550:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8554:	4604      	mov	r4, r0
    8556:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    855a:	1c40      	adds	r0, r0, #1
    855c:	d105      	bne.n	856a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    855e:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    8562:	43c0      	mvns	r0, r0
    8564:	0400      	lsls	r0, r0, #16
    8566:	0c00      	lsrs	r0, r0, #16
    8568:	d03e      	beq.n	85e8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    856a:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    856e:	07c0      	lsls	r0, r0, #31
    8570:	d03a      	beq.n	85e8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    8572:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    8576:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    857a:	f8ad 1000 	strh.w	r1, [sp]
    857e:	f8c4 0001 	str.w	r0, [r4, #1]
    8582:	f8bd 0000 	ldrh.w	r0, [sp]
    8586:	f8a4 0005 	strh.w	r0, [r4, #5]
    858a:	79a0      	ldrb	r0, [r4, #6]
    858c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    8590:	71a0      	strb	r0, [r4, #6]
    8592:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    8596:	1c40      	adds	r0, r0, #1
    8598:	d00f      	beq.n	85ba <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    859a:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    859e:	1c40      	adds	r0, r0, #1
    85a0:	d00b      	beq.n	85ba <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    85a2:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    85a6:	1c40      	adds	r0, r0, #1
    85a8:	d007      	beq.n	85ba <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    85aa:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    85ae:	1c40      	adds	r0, r0, #1
    85b0:	d003      	beq.n	85ba <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    85b2:	2000      	movs	r0, #0
    85b4:	f7fc f91c 	bl	47f0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    85b8:	b140      	cbz	r0, 85cc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    85ba:	2210      	movs	r2, #16
    85bc:	2100      	movs	r1, #0
    85be:	1de0      	adds	r0, r4, #7
    85c0:	f7ff fc0f 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    85c4:	2001      	movs	r0, #1
    85c6:	7020      	strb	r0, [r4, #0]
    85c8:	2000      	movs	r0, #0
    85ca:	bd38      	pop	{r3, r4, r5, pc}
    85cc:	f855 2f90 	ldr.w	r2, [r5, #144]!
    85d0:	6869      	ldr	r1, [r5, #4]
    85d2:	68a8      	ldr	r0, [r5, #8]
    85d4:	68eb      	ldr	r3, [r5, #12]
    85d6:	f8c4 2007 	str.w	r2, [r4, #7]
    85da:	f8c4 100b 	str.w	r1, [r4, #11]
    85de:	f8c4 000f 	str.w	r0, [r4, #15]
    85e2:	f8c4 3013 	str.w	r3, [r4, #19]
    85e6:	e7ed      	b.n	85c4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    85e8:	2000      	movs	r0, #0
    85ea:	e7ec      	b.n	85c6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

000085ec <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    85ec:	f001 bb43 	b.w	9c76 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

000085f0 <sdc_hci_cmd_ip_read_bd_addr>:
    85f0:	f001 bc14 	b.w	9e1c <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

000085f4 <sdc_hci_cmd_ip_read_local_version_information>:
    85f4:	f7fd bdda 	b.w	61ac <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

000085f8 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    85f8:	f001 b994 	b.w	9924 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

000085fc <sdc_hci_cmd_le_clear_filter_accept_list>:
    85fc:	f001 b9a9 	b.w	9952 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

00008600 <sdc_hci_cmd_le_encrypt>:
    8600:	f001 b9b1 	b.w	9966 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

00008604 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    8604:	8802      	ldrh	r2, [r0, #0]
    8606:	800a      	strh	r2, [r1, #0]
    8608:	f001 b9b6 	b.w	9978 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000860c <sdc_hci_cmd_le_rand>:
    860c:	f001 b9cd 	b.w	99aa <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

00008610 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    8610:	f001 b9d1 	b.w	99b6 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

00008614 <sdc_hci_cmd_le_read_buffer_size>:
    8614:	f7fd bd44 	b.w	60a0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

00008618 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    8618:	f001 b9df 	b.w	99da <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000861c <sdc_hci_cmd_le_read_transmit_power>:
    861c:	f001 b9d4 	b.w	99c8 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

00008620 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    8620:	f001 b9df 	b.w	99e2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

00008624 <sdc_hci_cmd_le_set_adv_data>:
    8624:	f001 b9f2 	b.w	9a0c <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

00008628 <sdc_hci_cmd_le_set_adv_enable>:
    8628:	f001 ba05 	b.w	9a36 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000862c <sdc_hci_cmd_le_set_adv_params>:
    862c:	f001 ba36 	b.w	9a9c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

00008630 <sdc_hci_cmd_le_set_data_related_address_changes>:
    8630:	f001 bac9 	b.w	9bc6 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

00008634 <sdc_hci_cmd_le_set_event_mask>:
    8634:	b510      	push	{r4, lr}
    8636:	f7fb fc49 	bl	3ecc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    863a:	2000      	movs	r0, #0
    863c:	bd10      	pop	{r4, pc}

0000863e <sdc_hci_cmd_le_set_random_address>:
    863e:	f001 bacf 	b.w	9be0 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

00008642 <sdc_hci_cmd_le_set_scan_response_data>:
    8642:	f001 badb 	b.w	9bfc <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>
    8646:	b570      	push	{r4, r5, r6, lr}
    8648:	880b      	ldrh	r3, [r1, #0]
    864a:	7cc4      	ldrb	r4, [r0, #19]
    864c:	f100 0518 	add.w	r5, r0, #24
    8650:	f3c3 060e 	ubfx	r6, r3, #0, #15
    8654:	8802      	ldrh	r2, [r0, #0]
    8656:	4435      	add	r5, r6
    8658:	1d64      	adds	r4, r4, #5
    865a:	882d      	ldrh	r5, [r5, #0]
    865c:	4422      	add	r2, r4
    865e:	b292      	uxth	r2, r2
    8660:	4425      	add	r5, r4
    8662:	1e54      	subs	r4, r2, #1
    8664:	442c      	add	r4, r5
    8666:	fb94 f4f2 	sdiv	r4, r4, r2
    866a:	fb02 6204 	mla	r2, r2, r4, r6
    866e:	8840      	ldrh	r0, [r0, #2]
    8670:	b292      	uxth	r2, r2
    8672:	4290      	cmp	r0, r2
    8674:	d903      	bls.n	867e <sdc_hci_cmd_le_set_scan_response_data+0x3c>
    8676:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    867a:	4310      	orrs	r0, r2
    867c:	e002      	b.n	8684 <sdc_hci_cmd_le_set_scan_response_data+0x42>
    867e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    8682:	4398      	bics	r0, r3
    8684:	8008      	strh	r0, [r1, #0]
    8686:	bd70      	pop	{r4, r5, r6, pc}

00008688 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    8688:	8881      	ldrh	r1, [r0, #4]
    868a:	88c0      	ldrh	r0, [r0, #6]
    868c:	4288      	cmp	r0, r1
    868e:	d101      	bne.n	8694 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    8690:	2001      	movs	r0, #1
    8692:	4770      	bx	lr
    8694:	2000      	movs	r0, #0
    8696:	4770      	bx	lr

00008698 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    8698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    869c:	461d      	mov	r5, r3
    869e:	4616      	mov	r6, r2
    86a0:	9f06      	ldr	r7, [sp, #24]
    86a2:	460b      	mov	r3, r1
    86a4:	4604      	mov	r4, r0
    86a6:	463a      	mov	r2, r7
    86a8:	4629      	mov	r1, r5
    86aa:	4630      	mov	r0, r6
    86ac:	f000 f839 	bl	8722 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    86b0:	4283      	cmp	r3, r0
    86b2:	d201      	bcs.n	86b8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    86b4:	219f      	movs	r1, #159	; 0x9f
    86b6:	e012      	b.n	86de <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    86b8:	07a0      	lsls	r0, r4, #30
    86ba:	d001      	beq.n	86c0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    86bc:	21a0      	movs	r1, #160	; 0xa0
    86be:	e00e      	b.n	86de <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    86c0:	2218      	movs	r2, #24
    86c2:	2100      	movs	r1, #0
    86c4:	4620      	mov	r0, r4
    86c6:	f7ff fb8c 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    86ca:	19a8      	adds	r0, r5, r6
    86cc:	1d40      	adds	r0, r0, #5
    86ce:	4378      	muls	r0, r7
    86d0:	b280      	uxth	r0, r0
    86d2:	74e5      	strb	r5, [r4, #19]
    86d4:	8060      	strh	r0, [r4, #2]
    86d6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    86da:	d903      	bls.n	86e4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    86dc:	21a5      	movs	r1, #165	; 0xa5
    86de:	2014      	movs	r0, #20
    86e0:	f7fb fa9a 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86e4:	8026      	strh	r6, [r4, #0]
    86e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000086ea <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    86ea:	b570      	push	{r4, r5, r6, lr}
    86ec:	460b      	mov	r3, r1
    86ee:	4604      	mov	r4, r0
    86f0:	f100 0118 	add.w	r1, r0, #24
    86f4:	8902      	ldrh	r2, [r0, #8]
    86f6:	8880      	ldrh	r0, [r0, #4]
    86f8:	f3c2 050e 	ubfx	r5, r2, #0, #15
    86fc:	440d      	add	r5, r1
    86fe:	4282      	cmp	r2, r0
    8700:	d101      	bne.n	8706 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    8702:	2000      	movs	r0, #0
    8704:	bd70      	pop	{r4, r5, r6, pc}
    8706:	b123      	cbz	r3, 8712 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    8708:	7ce2      	ldrb	r2, [r4, #19]
    870a:	1ca9      	adds	r1, r5, #2
    870c:	4618      	mov	r0, r3
    870e:	f7ff faee 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8712:	882d      	ldrh	r5, [r5, #0]
    8714:	f104 0108 	add.w	r1, r4, #8
    8718:	4620      	mov	r0, r4
    871a:	f7ff ff94 	bl	8646 <sdc_hci_cmd_le_set_scan_response_data+0x4>
    871e:	4628      	mov	r0, r5
    8720:	bd70      	pop	{r4, r5, r6, pc}

00008722 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    8722:	4401      	add	r1, r0
    8724:	1d49      	adds	r1, r1, #5
    8726:	4351      	muls	r1, r2
    8728:	b28a      	uxth	r2, r1
    872a:	2100      	movs	r1, #0
    872c:	2845      	cmp	r0, #69	; 0x45
    872e:	d202      	bcs.n	8736 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    8730:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    8734:	b281      	uxth	r1, r0
    8736:	3218      	adds	r2, #24
    8738:	1850      	adds	r0, r2, r1
    873a:	b280      	uxth	r0, r0
    873c:	4770      	bx	lr

0000873e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    873e:	b570      	push	{r4, r5, r6, lr}
    8740:	2300      	movs	r3, #0
    8742:	f1a1 0208 	sub.w	r2, r1, #8
    8746:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    874a:	42a2      	cmp	r2, r4
    874c:	d304      	bcc.n	8758 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    874e:	f240 11cd 	movw	r1, #461	; 0x1cd
    8752:	2015      	movs	r0, #21
    8754:	f7fb fa60 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8758:	6802      	ldr	r2, [r0, #0]
    875a:	b90a      	cbnz	r2, 8760 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    875c:	e01e      	b.n	879c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    875e:	4610      	mov	r0, r2
    8760:	6802      	ldr	r2, [r0, #0]
    8762:	8893      	ldrh	r3, [r2, #4]
    8764:	428b      	cmp	r3, r1
    8766:	d002      	beq.n	876e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    8768:	6813      	ldr	r3, [r2, #0]
    876a:	2b00      	cmp	r3, #0
    876c:	d1f7      	bne.n	875e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    876e:	8894      	ldrh	r4, [r2, #4]
    8770:	4613      	mov	r3, r2
    8772:	428c      	cmp	r4, r1
    8774:	d101      	bne.n	877a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    8776:	6811      	ldr	r1, [r2, #0]
    8778:	e00d      	b.n	8796 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    877a:	f101 0508 	add.w	r5, r1, #8
    877e:	b2ae      	uxth	r6, r5
    8780:	2500      	movs	r5, #0
    8782:	42b4      	cmp	r4, r6
    8784:	d309      	bcc.n	879a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    8786:	1a64      	subs	r4, r4, r1
    8788:	4411      	add	r1, r2
    878a:	600d      	str	r5, [r1, #0]
    878c:	808c      	strh	r4, [r1, #4]
    878e:	6802      	ldr	r2, [r0, #0]
    8790:	6812      	ldr	r2, [r2, #0]
    8792:	6002      	str	r2, [r0, #0]
    8794:	600a      	str	r2, [r1, #0]
    8796:	6001      	str	r1, [r0, #0]
    8798:	e000      	b.n	879c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    879a:	2300      	movs	r3, #0
    879c:	4618      	mov	r0, r3
    879e:	bd70      	pop	{r4, r5, r6, pc}

000087a0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    87a0:	b510      	push	{r4, lr}
    87a2:	000c      	movs	r4, r1
    87a4:	d004      	beq.n	87b0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    87a6:	2c08      	cmp	r4, #8
    87a8:	d207      	bcs.n	87ba <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    87aa:	f240 1195 	movw	r1, #405	; 0x195
    87ae:	e00a      	b.n	87c6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    87b0:	b108      	cbz	r0, 87b6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    87b2:	2100      	movs	r1, #0
    87b4:	6001      	str	r1, [r0, #0]
    87b6:	2000      	movs	r0, #0
    87b8:	bd10      	pop	{r4, pc}
    87ba:	b158      	cbz	r0, 87d4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    87bc:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    87c0:	d304      	bcc.n	87cc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    87c2:	f240 11a7 	movw	r1, #423	; 0x1a7
    87c6:	2015      	movs	r0, #21
    87c8:	f7fb fa26 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87cc:	b2a1      	uxth	r1, r4
    87ce:	6800      	ldr	r0, [r0, #0]
    87d0:	f000 f814 	bl	87fc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    87d4:	1d20      	adds	r0, r4, #4
    87d6:	bd10      	pop	{r4, pc}

000087d8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    87d8:	2100      	movs	r1, #0
    87da:	6802      	ldr	r2, [r0, #0]
    87dc:	e003      	b.n	87e6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    87de:	8893      	ldrh	r3, [r2, #4]
    87e0:	6812      	ldr	r2, [r2, #0]
    87e2:	4419      	add	r1, r3
    87e4:	b289      	uxth	r1, r1
    87e6:	2a00      	cmp	r2, #0
    87e8:	d1f9      	bne.n	87de <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    87ea:	f000 b807 	b.w	87fc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

000087ee <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    87ee:	2300      	movs	r3, #0
    87f0:	600b      	str	r3, [r1, #0]
    87f2:	808a      	strh	r2, [r1, #4]
    87f4:	6802      	ldr	r2, [r0, #0]
    87f6:	600a      	str	r2, [r1, #0]
    87f8:	6001      	str	r1, [r0, #0]
    87fa:	4770      	bx	lr
    87fc:	2300      	movs	r3, #0
    87fe:	6043      	str	r3, [r0, #4]
    8800:	1d02      	adds	r2, r0, #4
    8802:	8101      	strh	r1, [r0, #8]
    8804:	6002      	str	r2, [r0, #0]
    8806:	4770      	bx	lr

00008808 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    8808:	b51c      	push	{r2, r3, r4, lr}
    880a:	4604      	mov	r4, r0
    880c:	2000      	movs	r0, #0
    880e:	9001      	str	r0, [sp, #4]
    8810:	9000      	str	r0, [sp, #0]
    8812:	f88d 4006 	strb.w	r4, [sp, #6]
    8816:	e00a      	b.n	882e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    8818:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    881c:	4621      	mov	r1, r4
    881e:	f7fb fc35 	bl	408c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    8822:	b120      	cbz	r0, 882e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    8824:	f240 21a5 	movw	r1, #677	; 0x2a5
    8828:	2017      	movs	r0, #23
    882a:	f7fb f9f5 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    882e:	4668      	mov	r0, sp
    8830:	f7fb fbe4 	bl	3ffc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8834:	2800      	cmp	r0, #0
    8836:	d0ef      	beq.n	8818 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    8838:	bd1c      	pop	{r2, r3, r4, pc}

0000883a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    883a:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    883e:	3aff      	subs	r2, #255	; 0xff
    8840:	d001      	beq.n	8846 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    8842:	2902      	cmp	r1, #2
    8844:	d301      	bcc.n	884a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    8846:	2000      	movs	r0, #0
    8848:	4770      	bx	lr
    884a:	f7fb bc51 	b.w	40f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000884e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    884e:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    8852:	3aff      	subs	r2, #255	; 0xff
    8854:	d001      	beq.n	885a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    8856:	2902      	cmp	r1, #2
    8858:	d301      	bcc.n	885e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    885a:	2000      	movs	r0, #0
    885c:	4770      	bx	lr
    885e:	f7fb bc6f 	b.w	4140 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    8862:	b510      	push	{r4, lr}
    8864:	4604      	mov	r4, r0
    8866:	f7fb fcb7 	bl	41d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    886a:	42a0      	cmp	r0, r4
    886c:	d901      	bls.n	8872 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>
    886e:	2001      	movs	r0, #1
    8870:	bd10      	pop	{r4, pc}
    8872:	2000      	movs	r0, #0
    8874:	bd10      	pop	{r4, pc}

00008876 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    8876:	b570      	push	{r4, r5, r6, lr}
    8878:	460e      	mov	r6, r1
    887a:	461d      	mov	r5, r3
    887c:	4611      	mov	r1, r2
    887e:	f000 f813 	bl	88a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    8882:	4604      	mov	r4, r0
    8884:	4629      	mov	r1, r5
    8886:	4630      	mov	r0, r6
    8888:	f000 f804 	bl	8894 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    888c:	4420      	add	r0, r4
    888e:	1d00      	adds	r0, r0, #4
    8890:	b280      	uxth	r0, r0
    8892:	bd70      	pop	{r4, r5, r6, pc}
    8894:	b510      	push	{r4, lr}
    8896:	460a      	mov	r2, r1
    8898:	2109      	movs	r1, #9
    889a:	f7ff ff42 	bl	8722 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    889e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    88a2:	1cc0      	adds	r0, r0, #3
    88a4:	4008      	ands	r0, r1
    88a6:	bd10      	pop	{r4, pc}
    88a8:	b510      	push	{r4, lr}
    88aa:	460a      	mov	r2, r1
    88ac:	210a      	movs	r1, #10
    88ae:	f7ff ff38 	bl	8722 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    88b2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    88b6:	1cc0      	adds	r0, r0, #3
    88b8:	4008      	ands	r0, r1
    88ba:	bd10      	pop	{r4, pc}
    88bc:	b109      	cbz	r1, 88c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    88be:	2100      	movs	r1, #0
    88c0:	e000      	b.n	88c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    88c2:	2102      	movs	r1, #2
    88c4:	1843      	adds	r3, r0, r1
    88c6:	7d1a      	ldrb	r2, [r3, #20]
    88c8:	2a02      	cmp	r2, #2
    88ca:	d008      	beq.n	88de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    88cc:	7d5b      	ldrb	r3, [r3, #21]
    88ce:	2b02      	cmp	r3, #2
    88d0:	d009      	beq.n	88e6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    88d2:	2a03      	cmp	r2, #3
    88d4:	d003      	beq.n	88de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    88d6:	2b03      	cmp	r3, #3
    88d8:	d005      	beq.n	88e6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    88da:	2000      	movs	r0, #0
    88dc:	4770      	bx	lr
    88de:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    88e2:	8b00      	ldrh	r0, [r0, #24]
    88e4:	4770      	bx	lr
    88e6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    88ea:	8b40      	ldrh	r0, [r0, #26]
    88ec:	4770      	bx	lr
    88ee:	b109      	cbz	r1, 88f4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    88f0:	2100      	movs	r1, #0
    88f2:	e000      	b.n	88f6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    88f4:	2102      	movs	r1, #2
    88f6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    88fa:	8b01      	ldrh	r1, [r0, #24]
    88fc:	b911      	cbnz	r1, 8904 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    88fe:	8b40      	ldrh	r0, [r0, #26]
    8900:	2800      	cmp	r0, #0
    8902:	d000      	beq.n	8906 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    8904:	2001      	movs	r0, #1
    8906:	4770      	bx	lr
    8908:	b538      	push	{r3, r4, r5, lr}
    890a:	7883      	ldrb	r3, [r0, #2]
    890c:	f88d 3000 	strb.w	r3, [sp]
    8910:	9b00      	ldr	r3, [sp, #0]
    8912:	9300      	str	r3, [sp, #0]
    8914:	f89d 3000 	ldrb.w	r3, [sp]
    8918:	b95b      	cbnz	r3, 8932 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    891a:	2400      	movs	r4, #0
    891c:	b10a      	cbz	r2, 8922 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    891e:	2300      	movs	r3, #0
    8920:	e000      	b.n	8924 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    8922:	2302      	movs	r3, #2
    8924:	18c2      	adds	r2, r0, r3
    8926:	7d15      	ldrb	r5, [r2, #20]
    8928:	2d02      	cmp	r5, #2
    892a:	d004      	beq.n	8936 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    892c:	7d52      	ldrb	r2, [r2, #21]
    892e:	2a02      	cmp	r2, #2
    8930:	d004      	beq.n	893c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    8932:	2000      	movs	r0, #0
    8934:	bd38      	pop	{r3, r4, r5, pc}
    8936:	461a      	mov	r2, r3
    8938:	1c5b      	adds	r3, r3, #1
    893a:	e000      	b.n	893e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    893c:	1c5a      	adds	r2, r3, #1
    893e:	b179      	cbz	r1, 8960 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    8940:	18c5      	adds	r5, r0, r3
    8942:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    8946:	752c      	strb	r4, [r5, #20]
    8948:	831c      	strh	r4, [r3, #24]
    894a:	2303      	movs	r3, #3
    894c:	1884      	adds	r4, r0, r2
    894e:	7523      	strb	r3, [r4, #20]
    8950:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    8954:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    8958:	685b      	ldr	r3, [r3, #4]
    895a:	600b      	str	r3, [r1, #0]
    895c:	8b00      	ldrh	r0, [r0, #24]
    895e:	8088      	strh	r0, [r1, #4]
    8960:	2001      	movs	r0, #1
    8962:	bd38      	pop	{r3, r4, r5, pc}
    8964:	b510      	push	{r4, lr}
    8966:	b109      	cbz	r1, 896c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    8968:	2100      	movs	r1, #0
    896a:	e000      	b.n	896e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    896c:	2102      	movs	r1, #2
    896e:	1843      	adds	r3, r0, r1
    8970:	7d1c      	ldrb	r4, [r3, #20]
    8972:	4294      	cmp	r4, r2
    8974:	d103      	bne.n	897e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    8976:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    897a:	8b00      	ldrh	r0, [r0, #24]
    897c:	bd10      	pop	{r4, pc}
    897e:	7d5b      	ldrb	r3, [r3, #21]
    8980:	4293      	cmp	r3, r2
    8982:	d103      	bne.n	898c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    8984:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    8988:	8b40      	ldrh	r0, [r0, #26]
    898a:	bd10      	pop	{r4, pc}
    898c:	2000      	movs	r0, #0
    898e:	bd10      	pop	{r4, pc}
    8990:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    8994:	d201      	bcs.n	899a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    8996:	0841      	lsrs	r1, r0, #1
    8998:	e000      	b.n	899c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    899a:	21ff      	movs	r1, #255	; 0xff
    899c:	1a40      	subs	r0, r0, r1
    899e:	f240 6172 	movw	r1, #1650	; 0x672
    89a2:	4288      	cmp	r0, r1
    89a4:	db00      	blt.n	89a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    89a6:	4608      	mov	r0, r1
    89a8:	b280      	uxth	r0, r0
    89aa:	4770      	bx	lr

000089ac <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    89ac:	2101      	movs	r1, #1
    89ae:	f7ff bf85 	b.w	88bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

000089b2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    89b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89b6:	4606      	mov	r6, r0
    89b8:	f342 0780 	sbfx	r7, r2, #2, #1
    89bc:	7848      	ldrb	r0, [r1, #1]
    89be:	460c      	mov	r4, r1
    89c0:	f022 0504 	bic.w	r5, r2, #4
    89c4:	1c7f      	adds	r7, r7, #1
    89c6:	b100      	cbz	r0, 89ca <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    89c8:	b90d      	cbnz	r5, 89ce <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    89ca:	4328      	orrs	r0, r5
    89cc:	d104      	bne.n	89d8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    89ce:	b145      	cbz	r5, 89e2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    89d0:	2100      	movs	r1, #0
    89d2:	4620      	mov	r0, r4
    89d4:	f7fb fcea 	bl	43ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    89d8:	20ff      	movs	r0, #255	; 0xff
    89da:	70a0      	strb	r0, [r4, #2]
    89dc:	b11f      	cbz	r7, 89e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    89de:	2000      	movs	r0, #0
    89e0:	e002      	b.n	89e8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    89e2:	2101      	movs	r1, #1
    89e4:	e7f5      	b.n	89d2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    89e6:	2002      	movs	r0, #2
    89e8:	1821      	adds	r1, r4, r0
    89ea:	7d09      	ldrb	r1, [r1, #20]
    89ec:	2903      	cmp	r1, #3
    89ee:	d102      	bne.n	89f6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    89f0:	2d02      	cmp	r5, #2
    89f2:	d000      	beq.n	89f6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    89f4:	1c40      	adds	r0, r0, #1
    89f6:	1822      	adds	r2, r4, r0
    89f8:	2101      	movs	r1, #1
    89fa:	7511      	strb	r1, [r2, #20]
    89fc:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    8a00:	2200      	movs	r2, #0
    8a02:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    8a06:	830a      	strh	r2, [r1, #24]
    8a08:	6840      	ldr	r0, [r0, #4]
    8a0a:	70a2      	strb	r2, [r4, #2]
    8a0c:	4631      	mov	r1, r6
    8a0e:	f362 010f 	bfi	r1, r2, #0, #16
    8a12:	e9c6 0100 	strd	r0, r1, [r6]
    8a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008a1a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    8a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a1e:	461e      	mov	r6, r3
    8a20:	4613      	mov	r3, r2
    8a22:	4604      	mov	r4, r0
    8a24:	b109      	cbz	r1, 8a2a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    8a26:	2000      	movs	r0, #0
    8a28:	e000      	b.n	8a2c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    8a2a:	2002      	movs	r0, #2
    8a2c:	21ff      	movs	r1, #255	; 0xff
    8a2e:	70a1      	strb	r1, [r4, #2]
    8a30:	1821      	adds	r1, r4, r0
    8a32:	7d0a      	ldrb	r2, [r1, #20]
    8a34:	2a01      	cmp	r2, #1
    8a36:	d003      	beq.n	8a40 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    8a38:	7d49      	ldrb	r1, [r1, #21]
    8a3a:	2901      	cmp	r1, #1
    8a3c:	d10c      	bne.n	8a58 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    8a3e:	1c40      	adds	r0, r0, #1
    8a40:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    8a44:	2700      	movs	r7, #0
    8a46:	8b29      	ldrh	r1, [r5, #24]
    8a48:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    8a4c:	198a      	adds	r2, r1, r6
    8a4e:	4562      	cmp	r2, ip
    8a50:	d905      	bls.n	8a5e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    8a52:	4420      	add	r0, r4
    8a54:	832f      	strh	r7, [r5, #24]
    8a56:	7507      	strb	r7, [r0, #20]
    8a58:	2000      	movs	r0, #0
    8a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a5e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    8a62:	4632      	mov	r2, r6
    8a64:	6840      	ldr	r0, [r0, #4]
    8a66:	4408      	add	r0, r1
    8a68:	4619      	mov	r1, r3
    8a6a:	f7ff f940 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8a6e:	8b28      	ldrh	r0, [r5, #24]
    8a70:	4430      	add	r0, r6
    8a72:	8328      	strh	r0, [r5, #24]
    8a74:	70a7      	strb	r7, [r4, #2]
    8a76:	2001      	movs	r0, #1
    8a78:	e7ef      	b.n	8a5a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

00008a7a <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    8a7a:	2202      	movs	r2, #2
    8a7c:	2100      	movs	r1, #0
    8a7e:	f7ff bf71 	b.w	8964 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

00008a82 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    8a82:	b510      	push	{r4, lr}
    8a84:	2101      	movs	r1, #1
    8a86:	f7ff ff32 	bl	88ee <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    8a8a:	2800      	cmp	r0, #0
    8a8c:	d000      	beq.n	8a90 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    8a8e:	2001      	movs	r0, #1
    8a90:	bd10      	pop	{r4, pc}

00008a92 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    8a92:	2201      	movs	r2, #1
    8a94:	f7ff bf38 	b.w	8908 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

00008a98 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    8a98:	2200      	movs	r2, #0
    8a9a:	f7ff bf35 	b.w	8908 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

00008a9e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    8a9e:	b570      	push	{r4, r5, r6, lr}
    8aa0:	b109      	cbz	r1, 8aa6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    8aa2:	2300      	movs	r3, #0
    8aa4:	e000      	b.n	8aa8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    8aa6:	2302      	movs	r3, #2
    8aa8:	21ff      	movs	r1, #255	; 0xff
    8aaa:	7081      	strb	r1, [r0, #2]
    8aac:	18c1      	adds	r1, r0, r3
    8aae:	2402      	movs	r4, #2
    8ab0:	7d0d      	ldrb	r5, [r1, #20]
    8ab2:	2d01      	cmp	r5, #1
    8ab4:	d007      	beq.n	8ac6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    8ab6:	7d4d      	ldrb	r5, [r1, #21]
    8ab8:	2d01      	cmp	r5, #1
    8aba:	d009      	beq.n	8ad0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    8abc:	f44f 718b 	mov.w	r1, #278	; 0x116
    8ac0:	2009      	movs	r0, #9
    8ac2:	f7fb f8a9 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ac6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    8aca:	831a      	strh	r2, [r3, #24]
    8acc:	750c      	strb	r4, [r1, #20]
    8ace:	e003      	b.n	8ad8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    8ad0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    8ad4:	835a      	strh	r2, [r3, #26]
    8ad6:	754c      	strb	r4, [r1, #21]
    8ad8:	2100      	movs	r1, #0
    8ada:	7081      	strb	r1, [r0, #2]
    8adc:	bd70      	pop	{r4, r5, r6, pc}

00008ade <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    8ade:	2101      	movs	r1, #1
    8ae0:	7001      	strb	r1, [r0, #0]
    8ae2:	4770      	bx	lr

00008ae4 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    8ae4:	2201      	movs	r2, #1
    8ae6:	4611      	mov	r1, r2
    8ae8:	f7ff bf3c 	b.w	8964 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

00008aec <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    8aec:	2201      	movs	r2, #1
    8aee:	2100      	movs	r1, #0
    8af0:	f7ff bf38 	b.w	8964 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

00008af4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    8af4:	2100      	movs	r1, #0
    8af6:	f7ff bee1 	b.w	88bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    8afa:	2800      	cmp	r0, #0
    8afc:	db09      	blt.n	8b12 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    8afe:	f000 021f 	and.w	r2, r0, #31
    8b02:	2101      	movs	r1, #1
    8b04:	4091      	lsls	r1, r2
    8b06:	0940      	lsrs	r0, r0, #5
    8b08:	0080      	lsls	r0, r0, #2
    8b0a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8b0e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8b12:	4770      	bx	lr
    8b14:	2800      	cmp	r0, #0
    8b16:	db0d      	blt.n	8b34 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    8b18:	f000 021f 	and.w	r2, r0, #31
    8b1c:	2101      	movs	r1, #1
    8b1e:	4091      	lsls	r1, r2
    8b20:	0940      	lsrs	r0, r0, #5
    8b22:	0080      	lsls	r0, r0, #2
    8b24:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8b28:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    8b2c:	f3bf 8f4f 	dsb	sy
    8b30:	f3bf 8f6f 	isb	sy
    8b34:	4770      	bx	lr
    8b36:	b510      	push	{r4, lr}
    8b38:	200e      	movs	r0, #14
    8b3a:	f7ff ffeb 	bl	8b14 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    8b3e:	200e      	movs	r0, #14
    8b40:	f7ff ffdb 	bl	8afa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    8b44:	200f      	movs	r0, #15
    8b46:	f7ff ffe5 	bl	8b14 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    8b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8b4e:	200f      	movs	r0, #15
    8b50:	f7ff bfd3 	b.w	8afa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    8b54:	2800      	cmp	r0, #0
    8b56:	db09      	blt.n	8b6c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    8b58:	f000 021f 	and.w	r2, r0, #31
    8b5c:	2101      	movs	r1, #1
    8b5e:	4091      	lsls	r1, r2
    8b60:	0940      	lsrs	r0, r0, #5
    8b62:	0080      	lsls	r0, r0, #2
    8b64:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8b68:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8b6c:	4770      	bx	lr
    8b6e:	5840      	ldr	r0, [r0, r1]
    8b70:	2800      	cmp	r0, #0
    8b72:	d000      	beq.n	8b76 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    8b74:	2001      	movs	r0, #1
    8b76:	4770      	bx	lr

00008b78 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    8b78:	b510      	push	{r4, lr}
    8b7a:	4604      	mov	r4, r0
    8b7c:	4620      	mov	r0, r4
    8b7e:	f7fb fd1f 	bl	45c0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    8b82:	2811      	cmp	r0, #17
    8b84:	d0fa      	beq.n	8b7c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    8b86:	bd10      	pop	{r4, pc}

00008b88 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    8b88:	b510      	push	{r4, lr}
    8b8a:	f7ff fff5 	bl	8b78 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    8b8e:	2800      	cmp	r0, #0
    8b90:	d003      	beq.n	8b9a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    8b92:	21a0      	movs	r1, #160	; 0xa0
    8b94:	201d      	movs	r0, #29
    8b96:	f7fb f83f 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b9a:	bd10      	pop	{r4, pc}

00008b9c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    8b9c:	f7fb bdee 	b.w	477c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0xc>

00008ba0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    8ba0:	b510      	push	{r4, lr}
    8ba2:	4050      	eors	r0, r2
    8ba4:	780a      	ldrb	r2, [r1, #0]
    8ba6:	781c      	ldrb	r4, [r3, #0]
    8ba8:	4062      	eors	r2, r4
    8baa:	4410      	add	r0, r2
    8bac:	784a      	ldrb	r2, [r1, #1]
    8bae:	785c      	ldrb	r4, [r3, #1]
    8bb0:	4062      	eors	r2, r4
    8bb2:	4410      	add	r0, r2
    8bb4:	788a      	ldrb	r2, [r1, #2]
    8bb6:	789c      	ldrb	r4, [r3, #2]
    8bb8:	4062      	eors	r2, r4
    8bba:	4410      	add	r0, r2
    8bbc:	78ca      	ldrb	r2, [r1, #3]
    8bbe:	78dc      	ldrb	r4, [r3, #3]
    8bc0:	4062      	eors	r2, r4
    8bc2:	4410      	add	r0, r2
    8bc4:	790a      	ldrb	r2, [r1, #4]
    8bc6:	791c      	ldrb	r4, [r3, #4]
    8bc8:	7949      	ldrb	r1, [r1, #5]
    8bca:	4062      	eors	r2, r4
    8bcc:	4410      	add	r0, r2
    8bce:	795a      	ldrb	r2, [r3, #5]
    8bd0:	4051      	eors	r1, r2
    8bd2:	42c1      	cmn	r1, r0
    8bd4:	d101      	bne.n	8bda <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    8bd6:	2001      	movs	r0, #1
    8bd8:	bd10      	pop	{r4, pc}
    8bda:	2000      	movs	r0, #0
    8bdc:	bd10      	pop	{r4, pc}

00008bde <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    8bde:	b510      	push	{r4, lr}
    8be0:	2900      	cmp	r1, #0
    8be2:	4604      	mov	r4, r0
    8be4:	f04f 0106 	mov.w	r1, #6
    8be8:	d002      	beq.n	8bf0 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    8bea:	f7fb f875 	bl	3cd8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    8bee:	e001      	b.n	8bf4 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    8bf0:	f7fb f880 	bl	3cf4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8bf4:	7960      	ldrb	r0, [r4, #5]
    8bf6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8bfa:	7160      	strb	r0, [r4, #5]
    8bfc:	bd10      	pop	{r4, pc}

00008bfe <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    8bfe:	4770      	bx	lr

00008c00 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    8c00:	b530      	push	{r4, r5, lr}
    8c02:	460c      	mov	r4, r1
    8c04:	4605      	mov	r5, r0
    8c06:	b08d      	sub	sp, #52	; 0x34
    8c08:	f04f 0103 	mov.w	r1, #3
    8c0c:	f104 0003 	add.w	r0, r4, #3
    8c10:	b112      	cbz	r2, 8c18 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    8c12:	f7fb f861 	bl	3cd8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    8c16:	e001      	b.n	8c1c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    8c18:	f7fb f86c 	bl	3cf4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8c1c:	7960      	ldrb	r0, [r4, #5]
    8c1e:	220d      	movs	r2, #13
    8c20:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8c24:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    8c28:	7160      	strb	r0, [r4, #5]
    8c2a:	2100      	movs	r1, #0
    8c2c:	a804      	add	r0, sp, #16
    8c2e:	f7ff f8d8 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8c32:	78e0      	ldrb	r0, [r4, #3]
    8c34:	f88d 001f 	strb.w	r0, [sp, #31]
    8c38:	7920      	ldrb	r0, [r4, #4]
    8c3a:	f88d 001e 	strb.w	r0, [sp, #30]
    8c3e:	7960      	ldrb	r0, [r4, #5]
    8c40:	f88d 001d 	strb.w	r0, [sp, #29]
    8c44:	2210      	movs	r2, #16
    8c46:	4629      	mov	r1, r5
    8c48:	4668      	mov	r0, sp
    8c4a:	f7ff f850 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8c4e:	4668      	mov	r0, sp
    8c50:	f7ff ff9a 	bl	8b88 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    8c54:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    8c58:	7020      	strb	r0, [r4, #0]
    8c5a:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    8c5e:	7060      	strb	r0, [r4, #1]
    8c60:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    8c64:	70a0      	strb	r0, [r4, #2]
    8c66:	b00d      	add	sp, #52	; 0x34
    8c68:	bd30      	pop	{r4, r5, pc}

00008c6a <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    8c6a:	2101      	movs	r1, #1
    8c6c:	f7fb bee4 	b.w	4a38 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

00008c70 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    8c70:	b510      	push	{r4, lr}
    8c72:	f001 fb23 	bl	a2bc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    8c76:	b118      	cbz	r0, 8c80 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    8c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8c7c:	f7fd bd4e 	b.w	671c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    8c80:	20ff      	movs	r0, #255	; 0xff
    8c82:	bd10      	pop	{r4, pc}

00008c84 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    8c84:	b510      	push	{r4, lr}
    8c86:	f7fb ff1f 	bl	4ac8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    8c8a:	2810      	cmp	r0, #16
    8c8c:	d003      	beq.n	8c96 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    8c8e:	f7fb feeb 	bl	4a68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    8c92:	2810      	cmp	r0, #16
    8c94:	d100      	bne.n	8c98 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    8c96:	2008      	movs	r0, #8
    8c98:	bd10      	pop	{r4, pc}

00008c9a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    8c9a:	b510      	push	{r4, lr}
    8c9c:	f7fb ff14 	bl	4ac8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    8ca0:	2810      	cmp	r0, #16
    8ca2:	d003      	beq.n	8cac <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    8ca4:	f7fb ff6e 	bl	4b84 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    8ca8:	2001      	movs	r0, #1
    8caa:	bd10      	pop	{r4, pc}
    8cac:	2000      	movs	r0, #0
    8cae:	bd10      	pop	{r4, pc}

00008cb0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    8cb0:	b570      	push	{r4, r5, r6, lr}
    8cb2:	460e      	mov	r6, r1
    8cb4:	b08c      	sub	sp, #48	; 0x30
    8cb6:	4614      	mov	r4, r2
    8cb8:	4601      	mov	r1, r0
    8cba:	461d      	mov	r5, r3
    8cbc:	2210      	movs	r2, #16
    8cbe:	4668      	mov	r0, sp
    8cc0:	f000 f88b 	bl	8dda <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    8cc4:	2210      	movs	r2, #16
    8cc6:	4631      	mov	r1, r6
    8cc8:	a804      	add	r0, sp, #16
    8cca:	f000 f886 	bl	8dda <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    8cce:	4668      	mov	r0, sp
    8cd0:	f7ff ff5a 	bl	8b88 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    8cd4:	a908      	add	r1, sp, #32
    8cd6:	f04f 0210 	mov.w	r2, #16
    8cda:	4628      	mov	r0, r5
    8cdc:	b11c      	cbz	r4, 8ce6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    8cde:	f000 f87c 	bl	8dda <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    8ce2:	b00c      	add	sp, #48	; 0x30
    8ce4:	bd70      	pop	{r4, r5, r6, pc}
    8ce6:	f7ff f802 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8cea:	e7fa      	b.n	8ce2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

00008cec <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    8cec:	b510      	push	{r4, lr}
    8cee:	460c      	mov	r4, r1
    8cf0:	2100      	movs	r1, #0
    8cf2:	f7ff fdac 	bl	884e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8cf6:	6060      	str	r0, [r4, #4]
    8cf8:	b118      	cbz	r0, 8d02 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    8cfa:	2001      	movs	r0, #1
    8cfc:	7020      	strb	r0, [r4, #0]
    8cfe:	2000      	movs	r0, #0
    8d00:	bd10      	pop	{r4, pc}
    8d02:	2002      	movs	r0, #2
    8d04:	bd10      	pop	{r4, pc}

00008d06 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    8d06:	f240 41e2 	movw	r1, #1250	; 0x4e2
    8d0a:	fbb0 f0f1 	udiv	r0, r0, r1
    8d0e:	b280      	uxth	r0, r0
    8d10:	4770      	bx	lr

00008d12 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    8d12:	f011 0f0c 	tst.w	r1, #12
    8d16:	d018      	beq.n	8d4a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    8d18:	074a      	lsls	r2, r1, #29
    8d1a:	f44f 7116 	mov.w	r1, #600	; 0x258
    8d1e:	2a00      	cmp	r2, #0
    8d20:	da02      	bge.n	8d28 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    8d22:	f04f 0210 	mov.w	r2, #16
    8d26:	e001      	b.n	8d2c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    8d28:	f04f 0240 	mov.w	r2, #64	; 0x40
    8d2c:	da01      	bge.n	8d32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    8d2e:	f04f 0196 	mov.w	r1, #150	; 0x96
    8d32:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    8d36:	eba0 0301 	sub.w	r3, r0, r1
    8d3a:	4288      	cmp	r0, r1
    8d3c:	d903      	bls.n	8d46 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    8d3e:	fb93 f0f2 	sdiv	r0, r3, r2
    8d42:	b280      	uxth	r0, r0
    8d44:	4770      	bx	lr
    8d46:	2000      	movs	r0, #0
    8d48:	4770      	bx	lr
    8d4a:	2902      	cmp	r1, #2
    8d4c:	d008      	beq.n	8d60 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    8d4e:	2870      	cmp	r0, #112	; 0x70
    8d50:	d9f9      	bls.n	8d46 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    8d52:	3870      	subs	r0, #112	; 0x70
    8d54:	17c1      	asrs	r1, r0, #31
    8d56:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    8d5a:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    8d5e:	4770      	bx	lr
    8d60:	283c      	cmp	r0, #60	; 0x3c
    8d62:	d9f0      	bls.n	8d46 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    8d64:	383c      	subs	r0, #60	; 0x3c
    8d66:	17c1      	asrs	r1, r0, #31
    8d68:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    8d6c:	f3c0 008f 	ubfx	r0, r0, #2, #16
    8d70:	4770      	bx	lr

00008d72 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    8d72:	6809      	ldr	r1, [r1, #0]
    8d74:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    8d78:	4770      	bx	lr

00008d7a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    8d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d7e:	4607      	mov	r7, r0
    8d80:	460e      	mov	r6, r1
    8d82:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    8d86:	f7f8 fe25 	bl	19d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    8d8a:	b198      	cbz	r0, 8db4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    8d8c:	b31e      	cbz	r6, 8dd6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    8d8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    8d92:	1b40      	subs	r0, r0, r5
    8d94:	2300      	movs	r3, #0
    8d96:	eb61 0104 	sbc.w	r1, r1, r4
    8d9a:	461a      	mov	r2, r3
    8d9c:	1a1b      	subs	r3, r3, r0
    8d9e:	418a      	sbcs	r2, r1
    8da0:	da19      	bge.n	8dd6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    8da2:	1c42      	adds	r2, r0, #1
    8da4:	f171 0100 	sbcs.w	r1, r1, #0
    8da8:	db07      	blt.n	8dba <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    8daa:	f240 2129 	movw	r1, #553	; 0x229
    8dae:	2029      	movs	r0, #41	; 0x29
    8db0:	f7fa ff32 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8db4:	f240 211f 	movw	r1, #543	; 0x21f
    8db8:	e7f9      	b.n	8dae <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    8dba:	4430      	add	r0, r6
    8dbc:	1e40      	subs	r0, r0, #1
    8dbe:	fbb0 f1f6 	udiv	r1, r0, r6
    8dc2:	fb01 f006 	mul.w	r0, r1, r6
    8dc6:	1828      	adds	r0, r5, r0
    8dc8:	f144 0400 	adc.w	r4, r4, #0
    8dcc:	e9c7 0404 	strd	r0, r4, [r7, #16]
    8dd0:	4608      	mov	r0, r1
    8dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8dd6:	2000      	movs	r0, #0
    8dd8:	e7fb      	b.n	8dd2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

00008dda <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    8dda:	b530      	push	{r4, r5, lr}
    8ddc:	4613      	mov	r3, r2
    8dde:	e006      	b.n	8dee <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    8de0:	18cc      	adds	r4, r1, r3
    8de2:	1ad5      	subs	r5, r2, r3
    8de4:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    8de8:	1e5b      	subs	r3, r3, #1
    8dea:	5544      	strb	r4, [r0, r5]
    8dec:	b2db      	uxtb	r3, r3
    8dee:	2b00      	cmp	r3, #0
    8df0:	d1f6      	bne.n	8de0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    8df2:	bd30      	pop	{r4, r5, pc}

00008df4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    8df4:	b510      	push	{r4, lr}
    8df6:	2300      	movs	r3, #0
    8df8:	461a      	mov	r2, r3
    8dfa:	e003      	b.n	8e04 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    8dfc:	5c84      	ldrb	r4, [r0, r2]
    8dfe:	4323      	orrs	r3, r4
    8e00:	1c52      	adds	r2, r2, #1
    8e02:	b2d2      	uxtb	r2, r2
    8e04:	428a      	cmp	r2, r1
    8e06:	d3f9      	bcc.n	8dfc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    8e08:	b10b      	cbz	r3, 8e0e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    8e0a:	2000      	movs	r0, #0
    8e0c:	bd10      	pop	{r4, pc}
    8e0e:	2001      	movs	r0, #1
    8e10:	bd10      	pop	{r4, pc}

00008e12 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    8e12:	b570      	push	{r4, r5, r6, lr}
    8e14:	4604      	mov	r4, r0
    8e16:	1c40      	adds	r0, r0, #1
    8e18:	4288      	cmp	r0, r1
    8e1a:	d004      	beq.n	8e26 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    8e1c:	6808      	ldr	r0, [r1, #0]
    8e1e:	f8c4 0001 	str.w	r0, [r4, #1]
    8e22:	7908      	ldrb	r0, [r1, #4]
    8e24:	7160      	strb	r0, [r4, #5]
    8e26:	7960      	ldrb	r0, [r4, #5]
    8e28:	f000 001f 	and.w	r0, r0, #31
    8e2c:	7160      	strb	r0, [r4, #5]
    8e2e:	2000      	movs	r0, #0
    8e30:	72e0      	strb	r0, [r4, #11]
    8e32:	4605      	mov	r5, r0
    8e34:	1966      	adds	r6, r4, r5
    8e36:	7870      	ldrb	r0, [r6, #1]
    8e38:	f000 f8ca 	bl	8fd0 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    8e3c:	71b0      	strb	r0, [r6, #6]
    8e3e:	7ae1      	ldrb	r1, [r4, #11]
    8e40:	1c6d      	adds	r5, r5, #1
    8e42:	4408      	add	r0, r1
    8e44:	b2ed      	uxtb	r5, r5
    8e46:	72e0      	strb	r0, [r4, #11]
    8e48:	2d05      	cmp	r5, #5
    8e4a:	d3f3      	bcc.n	8e34 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    8e4c:	bd70      	pop	{r4, r5, r6, pc}

00008e4e <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    8e4e:	7802      	ldrb	r2, [r0, #0]
    8e50:	f002 020f 	and.w	r2, r2, #15
    8e54:	2a03      	cmp	r2, #3
    8e56:	d003      	beq.n	8e60 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    8e58:	2a05      	cmp	r2, #5
    8e5a:	d104      	bne.n	8e66 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    8e5c:	f000 b85f 	b.w	8f1e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x22>
    8e60:	7840      	ldrb	r0, [r0, #1]
    8e62:	280c      	cmp	r0, #12
    8e64:	d001      	beq.n	8e6a <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    8e66:	2000      	movs	r0, #0
    8e68:	4770      	bx	lr
    8e6a:	2001      	movs	r0, #1
    8e6c:	4770      	bx	lr

00008e6e <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    8e6e:	b570      	push	{r4, r5, r6, lr}
    8e70:	4614      	mov	r4, r2
    8e72:	4605      	mov	r5, r0
    8e74:	2a1f      	cmp	r2, #31
    8e76:	d903      	bls.n	8e80 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    8e78:	21f1      	movs	r1, #241	; 0xf1
    8e7a:	202a      	movs	r0, #42	; 0x2a
    8e7c:	f7fa fecc 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e80:	f105 0009 	add.w	r0, r5, #9
    8e84:	f7fe ff33 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8e88:	1da4      	adds	r4, r4, #6
    8e8a:	706c      	strb	r4, [r5, #1]
    8e8c:	bd70      	pop	{r4, r5, r6, pc}

00008e8e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    8e8e:	b510      	push	{r4, lr}
    8e90:	7802      	ldrb	r2, [r0, #0]
    8e92:	f001 030f 	and.w	r3, r1, #15
    8e96:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    8e9a:	431a      	orrs	r2, r3
    8e9c:	7002      	strb	r2, [r0, #0]
    8e9e:	2907      	cmp	r1, #7
    8ea0:	d20c      	bcs.n	8ebc <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    8ea2:	e8df f001 	tbb	[pc, r1]
    8ea6:	0604      	.short	0x0604
    8ea8:	08040604 	.word	0x08040604
    8eac:	0004      	.short	0x0004
    8eae:	2106      	movs	r1, #6
    8eb0:	e002      	b.n	8eb8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    8eb2:	210c      	movs	r1, #12
    8eb4:	e000      	b.n	8eb8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    8eb6:	2122      	movs	r1, #34	; 0x22
    8eb8:	7041      	strb	r1, [r0, #1]
    8eba:	bd10      	pop	{r4, pc}
    8ebc:	21ab      	movs	r1, #171	; 0xab
    8ebe:	202a      	movs	r0, #42	; 0x2a
    8ec0:	f7fa feaa 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00008ec4 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    8ec4:	680a      	ldr	r2, [r1, #0]
    8ec6:	f840 2f09 	str.w	r2, [r0, #9]!
    8eca:	8889      	ldrh	r1, [r1, #4]
    8ecc:	8081      	strh	r1, [r0, #4]
    8ece:	4770      	bx	lr

00008ed0 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    8ed0:	7802      	ldrb	r2, [r0, #0]
    8ed2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8ed6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    8eda:	7002      	strb	r2, [r0, #0]
    8edc:	4770      	bx	lr

00008ede <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    8ede:	680a      	ldr	r2, [r1, #0]
    8ee0:	f840 2f03 	str.w	r2, [r0, #3]!
    8ee4:	8889      	ldrh	r1, [r1, #4]
    8ee6:	8081      	strh	r1, [r0, #4]
    8ee8:	4770      	bx	lr

00008eea <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    8eea:	7802      	ldrb	r2, [r0, #0]
    8eec:	2340      	movs	r3, #64	; 0x40
    8eee:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    8ef2:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    8ef6:	430a      	orrs	r2, r1
    8ef8:	7002      	strb	r2, [r0, #0]
    8efa:	4770      	bx	lr

00008efc <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    8efc:	b570      	push	{r4, r5, r6, lr}
    8efe:	4614      	mov	r4, r2
    8f00:	4605      	mov	r5, r0
    8f02:	2a1f      	cmp	r2, #31
    8f04:	d904      	bls.n	8f10 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    8f06:	f240 1113 	movw	r1, #275	; 0x113
    8f0a:	202a      	movs	r0, #42	; 0x2a
    8f0c:	f7fa fe84 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f10:	f105 0009 	add.w	r0, r5, #9
    8f14:	f7fe feeb 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8f18:	1da4      	adds	r4, r4, #6
    8f1a:	706c      	strb	r4, [r5, #1]
    8f1c:	bd70      	pop	{r4, r5, r6, pc}
    8f1e:	b570      	push	{r4, r5, r6, lr}
    8f20:	f8d0 201f 	ldr.w	r2, [r0, #31]
    8f24:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    8f28:	f012 0fff 	tst.w	r2, #255	; 0xff
    8f2c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    8f30:	d108      	bne.n	8f44 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    8f32:	f3c2 2407 	ubfx	r4, r2, #8, #8
    8f36:	b92c      	cbnz	r4, 8f44 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    8f38:	f3c2 4407 	ubfx	r4, r2, #16, #8
    8f3c:	b914      	cbnz	r4, 8f44 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    8f3e:	0e12      	lsrs	r2, r2, #24
    8f40:	d100      	bne.n	8f44 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    8f42:	b34b      	cbz	r3, 8f98 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8f44:	7846      	ldrb	r6, [r0, #1]
    8f46:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    8f4a:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    8f4e:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    8f52:	7d83      	ldrb	r3, [r0, #22]
    8f54:	2e22      	cmp	r6, #34	; 0x22
    8f56:	d11f      	bne.n	8f98 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8f58:	b131      	cbz	r1, 8f68 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x6c>
    8f5a:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    8f5e:	d903      	bls.n	8f68 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x6c>
    8f60:	f640 5107 	movw	r1, #3335	; 0xd07
    8f64:	428a      	cmp	r2, r1
    8f66:	d90b      	bls.n	8f80 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x84>
    8f68:	1f91      	subs	r1, r2, #6
    8f6a:	f640 467a 	movw	r6, #3194	; 0xc7a
    8f6e:	42b1      	cmp	r1, r6
    8f70:	d812      	bhi.n	8f98 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8f72:	b18b      	cbz	r3, 8f98 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8f74:	2b08      	cmp	r3, #8
    8f76:	d80f      	bhi.n	8f98 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8f78:	4293      	cmp	r3, r2
    8f7a:	d20d      	bcs.n	8f98 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8f7c:	4295      	cmp	r5, r2
    8f7e:	d80b      	bhi.n	8f98 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8f80:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    8f84:	d208      	bcs.n	8f98 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8f86:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    8f8a:	f640 4176 	movw	r1, #3190	; 0xc76
    8f8e:	380a      	subs	r0, #10
    8f90:	4288      	cmp	r0, r1
    8f92:	d801      	bhi.n	8f98 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8f94:	2001      	movs	r0, #1
    8f96:	bd70      	pop	{r4, r5, r6, pc}
    8f98:	2000      	movs	r0, #0
    8f9a:	bd70      	pop	{r4, r5, r6, pc}

00008f9c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    8f9c:	f7fc b886 	b.w	50ac <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x200>

00008fa0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    8fa0:	6800      	ldr	r0, [r0, #0]
    8fa2:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    8fa6:	4290      	cmp	r0, r2
    8fa8:	d903      	bls.n	8fb2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    8faa:	1a40      	subs	r0, r0, r1
    8fac:	389c      	subs	r0, #156	; 0x9c
    8fae:	0840      	lsrs	r0, r0, #1
    8fb0:	4770      	bx	lr
    8fb2:	2000      	movs	r0, #0
    8fb4:	4770      	bx	lr
    8fb6:	b510      	push	{r4, lr}
    8fb8:	4604      	mov	r4, r0
    8fba:	2108      	movs	r1, #8
    8fbc:	4620      	mov	r0, r4
    8fbe:	f7fa fe99 	bl	3cf4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8fc2:	6820      	ldr	r0, [r4, #0]
    8fc4:	2800      	cmp	r0, #0
    8fc6:	d102      	bne.n	8fce <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x2e>
    8fc8:	6860      	ldr	r0, [r4, #4]
    8fca:	2800      	cmp	r0, #0
    8fcc:	d0f5      	beq.n	8fba <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x1a>
    8fce:	bd10      	pop	{r4, pc}

00008fd0 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    8fd0:	f000 0155 	and.w	r1, r0, #85	; 0x55
    8fd4:	2255      	movs	r2, #85	; 0x55
    8fd6:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    8fda:	4408      	add	r0, r1
    8fdc:	f000 0133 	and.w	r1, r0, #51	; 0x33
    8fe0:	2233      	movs	r2, #51	; 0x33
    8fe2:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    8fe6:	4408      	add	r0, r1
    8fe8:	f000 010f 	and.w	r1, r0, #15
    8fec:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    8ff0:	4770      	bx	lr
    8ff2:	2801      	cmp	r0, #1
    8ff4:	d102      	bne.n	8ffc <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x2c>
    8ff6:	7948      	ldrb	r0, [r1, #5]
    8ff8:	0980      	lsrs	r0, r0, #6
    8ffa:	d001      	beq.n	9000 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x30>
    8ffc:	2000      	movs	r0, #0
    8ffe:	4770      	bx	lr
    9000:	2001      	movs	r0, #1
    9002:	4770      	bx	lr
    9004:	2801      	cmp	r0, #1
    9006:	d106      	bne.n	9016 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x46>
    9008:	7948      	ldrb	r0, [r1, #5]
    900a:	2101      	movs	r1, #1
    900c:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    9010:	d101      	bne.n	9016 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x46>
    9012:	2001      	movs	r0, #1
    9014:	4770      	bx	lr
    9016:	2000      	movs	r0, #0
    9018:	4770      	bx	lr
    901a:	2802      	cmp	r0, #2
    901c:	d003      	beq.n	9026 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x56>
    901e:	2803      	cmp	r0, #3
    9020:	d001      	beq.n	9026 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x56>
    9022:	2000      	movs	r0, #0
    9024:	4770      	bx	lr
    9026:	2001      	movs	r0, #1
    9028:	4770      	bx	lr

0000902a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    902a:	b510      	push	{r4, lr}
    902c:	4604      	mov	r4, r0
    902e:	7c00      	ldrb	r0, [r0, #16]
    9030:	f7ff fff3 	bl	901a <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x4a>
    9034:	b148      	cbz	r0, 904a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    9036:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    903a:	f104 0158 	add.w	r1, r4, #88	; 0x58
    903e:	f7ff fe21 	bl	8c84 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    9042:	2808      	cmp	r0, #8
    9044:	d001      	beq.n	904a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    9046:	2001      	movs	r0, #1
    9048:	bd10      	pop	{r4, pc}
    904a:	7c20      	ldrb	r0, [r4, #16]
    904c:	b118      	cbz	r0, 9056 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    904e:	2802      	cmp	r0, #2
    9050:	d001      	beq.n	9056 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    9052:	7de0      	ldrb	r0, [r4, #23]
    9054:	bd10      	pop	{r4, pc}
    9056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    905a:	2000      	movs	r0, #0
    905c:	f7fb bbc8 	b.w	47f0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

00009060 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    9060:	b508      	push	{r3, lr}
    9062:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    9066:	f88d 1000 	strb.w	r1, [sp]
    906a:	9900      	ldr	r1, [sp, #0]
    906c:	9100      	str	r1, [sp, #0]
    906e:	f89d 1000 	ldrb.w	r1, [sp]
    9072:	b109      	cbz	r1, 9078 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    9074:	2001      	movs	r0, #1
    9076:	bd08      	pop	{r3, pc}
    9078:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    907c:	f88d 0000 	strb.w	r0, [sp]
    9080:	9800      	ldr	r0, [sp, #0]
    9082:	9000      	str	r0, [sp, #0]
    9084:	f89d 0000 	ldrb.w	r0, [sp]
    9088:	2000      	movs	r0, #0
    908a:	bd08      	pop	{r3, pc}

0000908c <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    908c:	20ff      	movs	r0, #255	; 0xff
    908e:	7008      	strb	r0, [r1, #0]
    9090:	6b48      	ldr	r0, [r1, #52]	; 0x34
    9092:	f7ff bd24 	b.w	8ade <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

00009096 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    9096:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9098:	460d      	mov	r5, r1
    909a:	4604      	mov	r4, r0
    909c:	f44f 728c 	mov.w	r2, #280	; 0x118
    90a0:	2100      	movs	r1, #0
    90a2:	f7fe fe9e 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    90a6:	20ff      	movs	r0, #255	; 0xff
    90a8:	7020      	strb	r0, [r4, #0]
    90aa:	207f      	movs	r0, #127	; 0x7f
    90ac:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    90b0:	2013      	movs	r0, #19
    90b2:	8060      	strh	r0, [r4, #2]
    90b4:	f242 7010 	movw	r0, #10000	; 0x2710
    90b8:	8460      	strh	r0, [r4, #34]	; 0x22
    90ba:	f7fb fa07 	bl	44cc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    90be:	4601      	mov	r1, r0
    90c0:	6360      	str	r0, [r4, #52]	; 0x34
    90c2:	2200      	movs	r2, #0
    90c4:	4668      	mov	r0, sp
    90c6:	f7ff fc74 	bl	89b2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    90ca:	2200      	movs	r2, #0
    90cc:	2101      	movs	r1, #1
    90ce:	6b60      	ldr	r0, [r4, #52]	; 0x34
    90d0:	f7ff fce5 	bl	8a9e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    90d4:	2204      	movs	r2, #4
    90d6:	4668      	mov	r0, sp
    90d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    90da:	f7ff fc6a 	bl	89b2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    90de:	2200      	movs	r2, #0
    90e0:	4611      	mov	r1, r2
    90e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    90e4:	f7ff fcdb 	bl	8a9e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    90e8:	73a5      	strb	r5, [r4, #14]
    90ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
    90ee:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    90f2:	f000 b9b9 	b.w	9468 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

000090f6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    90f6:	7880      	ldrb	r0, [r0, #2]
    90f8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    90fc:	b108      	cbz	r0, 9102 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    90fe:	2000      	movs	r0, #0
    9100:	4770      	bx	lr
    9102:	201f      	movs	r0, #31
    9104:	4770      	bx	lr

00009106 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    9106:	f7fc bd19 	b.w	5b3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>

0000910a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
    910a:	b510      	push	{r4, lr}
    910c:	2300      	movs	r3, #0
    910e:	2a05      	cmp	r2, #5
    9110:	d013      	beq.n	913a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x30>
    9112:	2a10      	cmp	r2, #16
    9114:	d018      	beq.n	9148 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3e>
    9116:	2a14      	cmp	r2, #20
    9118:	d038      	beq.n	918c <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x82>
    911a:	2a1d      	cmp	r2, #29
    911c:	d002      	beq.n	9124 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1a>
    911e:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    9122:	e056      	b.n	91d2 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xc8>
    9124:	704b      	strb	r3, [r1, #1]
    9126:	2219      	movs	r2, #25
    9128:	700a      	strb	r2, [r1, #0]
    912a:	f850 2fbd 	ldr.w	r2, [r0, #189]!
    912e:	604a      	str	r2, [r1, #4]
    9130:	6842      	ldr	r2, [r0, #4]
    9132:	608a      	str	r2, [r1, #8]
    9134:	7a00      	ldrb	r0, [r0, #8]
    9136:	7308      	strb	r0, [r1, #12]
    9138:	bd10      	pop	{r4, pc}
    913a:	704b      	strb	r3, [r1, #1]
    913c:	2205      	movs	r2, #5
    913e:	700a      	strb	r2, [r1, #0]
    9140:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
    9144:	6048      	str	r0, [r1, #4]
    9146:	bd10      	pop	{r4, pc}
    9148:	460c      	mov	r4, r1
    914a:	704b      	strb	r3, [r1, #1]
    914c:	2111      	movs	r1, #17
    914e:	7021      	strb	r1, [r4, #0]
    9150:	f100 0176 	add.w	r1, r0, #118	; 0x76
    9154:	2220      	movs	r2, #32
    9156:	1d20      	adds	r0, r4, #4
    9158:	f7fe fdc9 	bl	7cee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    915c:	2001      	movs	r0, #1
    915e:	7220      	strb	r0, [r4, #8]
    9160:	7920      	ldrb	r0, [r4, #4]
    9162:	2800      	cmp	r0, #0
    9164:	d0ef      	beq.n	9146 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    9166:	88e4      	ldrh	r4, [r4, #6]
    9168:	2100      	movs	r1, #0
    916a:	4620      	mov	r0, r4
    916c:	f7ff fb6f 	bl	884e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9170:	2800      	cmp	r0, #0
    9172:	d0e8      	beq.n	9146 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    9174:	8800      	ldrh	r0, [r0, #0]
    9176:	f7ff fd11 	bl	8b9c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    917a:	2100      	movs	r1, #0
    917c:	4620      	mov	r0, r4
    917e:	f7fa ff85 	bl	408c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    9182:	2800      	cmp	r0, #0
    9184:	d0df      	beq.n	9146 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    9186:	f240 216a 	movw	r1, #618	; 0x26a
    918a:	e022      	b.n	91d2 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xc8>
    918c:	704b      	strb	r3, [r1, #1]
    918e:	2214      	movs	r2, #20
    9190:	700a      	strb	r2, [r1, #0]
    9192:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    9196:	604a      	str	r2, [r1, #4]
    9198:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    919c:	810a      	strh	r2, [r1, #8]
    919e:	790a      	ldrb	r2, [r1, #4]
    91a0:	2a00      	cmp	r2, #0
    91a2:	d0d0      	beq.n	9146 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    91a4:	7880      	ldrb	r0, [r0, #2]
    91a6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    91aa:	2800      	cmp	r0, #0
    91ac:	d1cb      	bne.n	9146 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    91ae:	88cc      	ldrh	r4, [r1, #6]
    91b0:	2100      	movs	r1, #0
    91b2:	4620      	mov	r0, r4
    91b4:	f7ff fb4b 	bl	884e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    91b8:	2800      	cmp	r0, #0
    91ba:	d0c4      	beq.n	9146 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    91bc:	8800      	ldrh	r0, [r0, #0]
    91be:	f7ff fced 	bl	8b9c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    91c2:	2100      	movs	r1, #0
    91c4:	4620      	mov	r0, r4
    91c6:	f7fa ff61 	bl	408c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    91ca:	2800      	cmp	r0, #0
    91cc:	d0bb      	beq.n	9146 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    91ce:	f240 219a 	movw	r1, #666	; 0x29a
    91d2:	202d      	movs	r0, #45	; 0x2d
    91d4:	f7fa fd20 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000091d8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    91d8:	6880      	ldr	r0, [r0, #8]
    91da:	4770      	bx	lr

000091dc <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    91dc:	2001      	movs	r0, #1
    91de:	4770      	bx	lr

000091e0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    91e0:	b510      	push	{r4, lr}
    91e2:	4604      	mov	r4, r0
    91e4:	3028      	adds	r0, #40	; 0x28
    91e6:	f000 f8ff 	bl	93e8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    91ea:	8861      	ldrh	r1, [r4, #2]
    91ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    91f0:	2228      	movs	r2, #40	; 0x28
    91f2:	f7fc bdd3 	b.w	5d9c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

000091f6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    91f6:	2200      	movs	r2, #0
    91f8:	8602      	strh	r2, [r0, #48]	; 0x30
    91fa:	8843      	ldrh	r3, [r0, #2]
    91fc:	2b1d      	cmp	r3, #29
    91fe:	d001      	beq.n	9204 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    9200:	7341      	strb	r1, [r0, #13]
    9202:	4770      	bx	lr
    9204:	7342      	strb	r2, [r0, #13]
    9206:	4770      	bx	lr

00009208 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    9208:	b510      	push	{r4, lr}
    920a:	2400      	movs	r4, #0
    920c:	6b40      	ldr	r0, [r0, #52]	; 0x34
    920e:	f7ff fc34 	bl	8a7a <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    9212:	b100      	cbz	r0, 9216 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    9214:	2001      	movs	r0, #1
    9216:	4384      	bics	r4, r0
    9218:	f084 0001 	eor.w	r0, r4, #1
    921c:	bd10      	pop	{r4, pc}

0000921e <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    921e:	2000      	movs	r0, #0
    9220:	4770      	bx	lr

00009222 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    9222:	7880      	ldrb	r0, [r0, #2]
    9224:	f000 0001 	and.w	r0, r0, #1
    9228:	4770      	bx	lr

0000922a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    922a:	7880      	ldrb	r0, [r0, #2]
    922c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    9230:	4770      	bx	lr

00009232 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    9232:	2001      	movs	r0, #1
    9234:	4770      	bx	lr

00009236 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    9236:	7880      	ldrb	r0, [r0, #2]
    9238:	f3c0 0040 	ubfx	r0, r0, #1, #1
    923c:	4770      	bx	lr

0000923e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    923e:	f990 000e 	ldrsb.w	r0, [r0, #14]
    9242:	4770      	bx	lr

00009244 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    9244:	7800      	ldrb	r0, [r0, #0]
    9246:	28ff      	cmp	r0, #255	; 0xff
    9248:	d001      	beq.n	924e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    924a:	2001      	movs	r0, #1
    924c:	4770      	bx	lr
    924e:	2000      	movs	r0, #0
    9250:	4770      	bx	lr

00009252 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    9252:	f800 1f20 	strb.w	r1, [r0, #32]!
    9256:	7042      	strb	r2, [r0, #1]
    9258:	4770      	bx	lr

0000925a <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    925a:	680a      	ldr	r2, [r1, #0]
    925c:	f840 2f11 	str.w	r2, [r0, #17]!
    9260:	8889      	ldrh	r1, [r1, #4]
    9262:	8081      	strh	r1, [r0, #4]
    9264:	2101      	movs	r1, #1
    9266:	7181      	strb	r1, [r0, #6]
    9268:	4770      	bx	lr

0000926a <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    926a:	7b00      	ldrb	r0, [r0, #12]
    926c:	4770      	bx	lr

0000926e <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    926e:	2001      	movs	r0, #1
    9270:	4770      	bx	lr

00009272 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    9272:	61c1      	str	r1, [r0, #28]
    9274:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    9278:	724a      	strb	r2, [r1, #9]
    927a:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    927e:	f8c1 200a 	str.w	r2, [r1, #10]
    9282:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    9286:	81c8      	strh	r0, [r1, #14]
    9288:	4770      	bx	lr

0000928a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    928a:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    928e:	4770      	bx	lr

00009290 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    9290:	b510      	push	{r4, lr}
    9292:	4604      	mov	r4, r0
    9294:	7880      	ldrb	r0, [r0, #2]
    9296:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    929a:	b158      	cbz	r0, 92b4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    929c:	233c      	movs	r3, #60	; 0x3c
    929e:	22ff      	movs	r2, #255	; 0xff
    92a0:	4620      	mov	r0, r4
    92a2:	69e1      	ldr	r1, [r4, #28]
    92a4:	f7fc fc70 	bl	5b88 <__kernel_ram_size+0x48>
    92a8:	2210      	movs	r2, #16
    92aa:	4621      	mov	r1, r4
    92ac:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    92b0:	f7fb fd24 	bl	4cfc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    92b4:	2001      	movs	r0, #1
    92b6:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    92ba:	bd10      	pop	{r4, pc}

000092bc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    92bc:	7bc0      	ldrb	r0, [r0, #15]
    92be:	2800      	cmp	r0, #0
    92c0:	d000      	beq.n	92c4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    92c2:	2001      	movs	r0, #1
    92c4:	4770      	bx	lr
    92c6:	7802      	ldrb	r2, [r0, #0]
    92c8:	2320      	movs	r3, #32
    92ca:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    92ce:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    92d2:	430a      	orrs	r2, r1
    92d4:	7002      	strb	r2, [r0, #0]
    92d6:	4770      	bx	lr
    92d8:	b510      	push	{r4, lr}
    92da:	f7ff fcd3 	bl	8c84 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    92de:	4604      	mov	r4, r0
    92e0:	f7fb fb1e 	bl	4920 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    92e4:	b138      	cbz	r0, 92f6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    92e6:	4620      	mov	r0, r4
    92e8:	f7fb fac2 	bl	4870 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    92ec:	b118      	cbz	r0, 92f6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    92ee:	2110      	movs	r1, #16
    92f0:	f7ff fd80 	bl	8df4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    92f4:	b108      	cbz	r0, 92fa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3e>
    92f6:	2000      	movs	r0, #0
    92f8:	bd10      	pop	{r4, pc}
    92fa:	2001      	movs	r0, #1
    92fc:	bd10      	pop	{r4, pc}
    92fe:	2101      	movs	r1, #1
    9300:	f7fc b8a4 	b.w	544c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    9304:	2101      	movs	r1, #1
    9306:	f7fc b8a1 	b.w	544c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    930a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    930e:	4604      	mov	r4, r0
    9310:	460f      	mov	r7, r1
    9312:	7e40      	ldrb	r0, [r0, #25]
    9314:	f7fb fa92 	bl	483c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    9318:	4606      	mov	r6, r0
    931a:	7e20      	ldrb	r0, [r4, #24]
    931c:	f104 0551 	add.w	r5, r4, #81	; 0x51
    9320:	b120      	cbz	r0, 932c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x70>
    9322:	b11e      	cbz	r6, 932c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x70>
    9324:	7e60      	ldrb	r0, [r4, #25]
    9326:	f7fb fa7d 	bl	4824 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    932a:	b1a0      	cbz	r0, 9356 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x9a>
    932c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    9330:	2800      	cmp	r0, #0
    9332:	d024      	beq.n	937e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    9334:	7ea0      	ldrb	r0, [r4, #26]
    9336:	2800      	cmp	r0, #0
    9338:	d021      	beq.n	937e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    933a:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    933e:	4629      	mov	r1, r5
    9340:	f7ff fe60 	bl	9004 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x34>
    9344:	b1a8      	cbz	r0, 9372 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb6>
    9346:	f7fb fa69 	bl	481c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    934a:	463a      	mov	r2, r7
    934c:	4629      	mov	r1, r5
    934e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9352:	f7ff bc55 	b.w	8c00 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    9356:	2001      	movs	r0, #1
    9358:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    935c:	463a      	mov	r2, r7
    935e:	4629      	mov	r1, r5
    9360:	4630      	mov	r0, r6
    9362:	f7ff fc4d 	bl	8c00 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    9366:	7e61      	ldrb	r1, [r4, #25]
    9368:	4628      	mov	r0, r5
    936a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    936e:	f7fb ba71 	b.w	4854 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    9372:	4639      	mov	r1, r7
    9374:	4628      	mov	r0, r5
    9376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    937a:	f7ff bc30 	b.w	8bde <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    937e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9382:	b510      	push	{r4, lr}
    9384:	4604      	mov	r4, r0
    9386:	4608      	mov	r0, r1
    9388:	f7fd fd94 	bl	6eb4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    938c:	7921      	ldrb	r1, [r4, #4]
    938e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9392:	2025      	movs	r0, #37	; 0x25
    9394:	f7fd bd64 	b.w	6e60 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    9398:	b510      	push	{r4, lr}
    939a:	4604      	mov	r4, r0
    939c:	302e      	adds	r0, #46	; 0x2e
    939e:	f7fd fd43 	bl	6e28 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    93a2:	2800      	cmp	r0, #0
    93a4:	d102      	bne.n	93ac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf0>
    93a6:	207f      	movs	r0, #127	; 0x7f
    93a8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    93ac:	bd10      	pop	{r4, pc}
    93ae:	b570      	push	{r4, r5, r6, lr}
    93b0:	4614      	mov	r4, r2
    93b2:	461d      	mov	r5, r3
    93b4:	4606      	mov	r6, r0
    93b6:	f7f9 f8b9 	bl	252c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    93ba:	1900      	adds	r0, r0, r4
    93bc:	4169      	adcs	r1, r5
    93be:	e9c6 0100 	strd	r0, r1, [r6]
    93c2:	bd70      	pop	{r4, r5, r6, pc}

000093c4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    93c4:	b570      	push	{r4, r5, r6, lr}
    93c6:	7001      	strb	r1, [r0, #0]
    93c8:	7042      	strb	r2, [r0, #1]
    93ca:	4614      	mov	r4, r2
    93cc:	460d      	mov	r5, r1
    93ce:	7880      	ldrb	r0, [r0, #2]
    93d0:	f000 f87f 	bl	94d2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    93d4:	fb10 f005 	smulbb	r0, r0, r5
    93d8:	4360      	muls	r0, r4
    93da:	28ff      	cmp	r0, #255	; 0xff
    93dc:	d303      	bcc.n	93e6 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    93de:	215c      	movs	r1, #92	; 0x5c
    93e0:	202e      	movs	r0, #46	; 0x2e
    93e2:	f7fa fc19 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    93e6:	bd70      	pop	{r4, r5, r6, pc}

000093e8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    93e8:	b510      	push	{r4, lr}
    93ea:	4604      	mov	r4, r0
    93ec:	7880      	ldrb	r0, [r0, #2]
    93ee:	f000 f870 	bl	94d2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    93f2:	7861      	ldrb	r1, [r4, #1]
    93f4:	7822      	ldrb	r2, [r4, #0]
    93f6:	fb11 f102 	smulbb	r1, r1, r2
    93fa:	4348      	muls	r0, r1
    93fc:	b2c0      	uxtb	r0, r0
    93fe:	bd10      	pop	{r4, pc}

00009400 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    9400:	b510      	push	{r4, lr}
    9402:	4604      	mov	r4, r0
    9404:	f000 f84d 	bl	94a2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    9408:	7961      	ldrb	r1, [r4, #5]
    940a:	1c49      	adds	r1, r1, #1
    940c:	b2c9      	uxtb	r1, r1
    940e:	7161      	strb	r1, [r4, #5]
    9410:	7862      	ldrb	r2, [r4, #1]
    9412:	4291      	cmp	r1, r2
    9414:	d10b      	bne.n	942e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    9416:	2200      	movs	r2, #0
    9418:	7162      	strb	r2, [r4, #5]
    941a:	78e1      	ldrb	r1, [r4, #3]
    941c:	4301      	orrs	r1, r0
    941e:	70e1      	strb	r1, [r4, #3]
    9420:	78a3      	ldrb	r3, [r4, #2]
    9422:	4299      	cmp	r1, r3
    9424:	d103      	bne.n	942e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    9426:	70e2      	strb	r2, [r4, #3]
    9428:	7921      	ldrb	r1, [r4, #4]
    942a:	1c49      	adds	r1, r1, #1
    942c:	7121      	strb	r1, [r4, #4]
    942e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9432:	f000 b825 	b.w	9480 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

00009436 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    9436:	7081      	strb	r1, [r0, #2]
    9438:	4770      	bx	lr

0000943a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    943a:	b570      	push	{r4, r5, r6, lr}
    943c:	4604      	mov	r4, r0
    943e:	7880      	ldrb	r0, [r0, #2]
    9440:	f000 f847 	bl	94d2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    9444:	7861      	ldrb	r1, [r4, #1]
    9446:	fb11 f500 	smulbb	r5, r1, r0
    944a:	78e0      	ldrb	r0, [r4, #3]
    944c:	f000 f841 	bl	94d2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    9450:	7861      	ldrb	r1, [r4, #1]
    9452:	7962      	ldrb	r2, [r4, #5]
    9454:	fb10 2001 	smlabb	r0, r0, r1, r2
    9458:	7821      	ldrb	r1, [r4, #0]
    945a:	7922      	ldrb	r2, [r4, #4]
    945c:	1a89      	subs	r1, r1, r2
    945e:	fb11 f105 	smulbb	r1, r1, r5
    9462:	1a08      	subs	r0, r1, r0
    9464:	b2c0      	uxtb	r0, r0
    9466:	bd70      	pop	{r4, r5, r6, pc}

00009468 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    9468:	2100      	movs	r1, #0
    946a:	6001      	str	r1, [r0, #0]
    946c:	8081      	strh	r1, [r0, #4]
    946e:	2101      	movs	r1, #1
    9470:	7041      	strb	r1, [r0, #1]
    9472:	7001      	strb	r1, [r0, #0]
    9474:	4770      	bx	lr

00009476 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    9476:	2100      	movs	r1, #0
    9478:	70c1      	strb	r1, [r0, #3]
    947a:	7141      	strb	r1, [r0, #5]
    947c:	7101      	strb	r1, [r0, #4]
    947e:	4770      	bx	lr
    9480:	b510      	push	{r4, lr}
    9482:	2801      	cmp	r0, #1
    9484:	d007      	beq.n	9496 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    9486:	2802      	cmp	r0, #2
    9488:	d007      	beq.n	949a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    948a:	2804      	cmp	r0, #4
    948c:	d007      	beq.n	949e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    948e:	2139      	movs	r1, #57	; 0x39
    9490:	202e      	movs	r0, #46	; 0x2e
    9492:	f7fa fbc1 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9496:	2025      	movs	r0, #37	; 0x25
    9498:	bd10      	pop	{r4, pc}
    949a:	2026      	movs	r0, #38	; 0x26
    949c:	bd10      	pop	{r4, pc}
    949e:	2027      	movs	r0, #39	; 0x27
    94a0:	bd10      	pop	{r4, pc}
    94a2:	4601      	mov	r1, r0
    94a4:	2000      	movs	r0, #0
    94a6:	788a      	ldrb	r2, [r1, #2]
    94a8:	07d3      	lsls	r3, r2, #31
    94aa:	d002      	beq.n	94b2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    94ac:	78cb      	ldrb	r3, [r1, #3]
    94ae:	07db      	lsls	r3, r3, #31
    94b0:	d006      	beq.n	94c0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    94b2:	0793      	lsls	r3, r2, #30
    94b4:	d506      	bpl.n	94c4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    94b6:	78cb      	ldrb	r3, [r1, #3]
    94b8:	079b      	lsls	r3, r3, #30
    94ba:	d403      	bmi.n	94c4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    94bc:	2002      	movs	r0, #2
    94be:	4770      	bx	lr
    94c0:	2001      	movs	r0, #1
    94c2:	4770      	bx	lr
    94c4:	0752      	lsls	r2, r2, #29
    94c6:	d5fc      	bpl.n	94c2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    94c8:	78c9      	ldrb	r1, [r1, #3]
    94ca:	0749      	lsls	r1, r1, #29
    94cc:	d4f9      	bmi.n	94c2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    94ce:	2004      	movs	r0, #4
    94d0:	4770      	bx	lr
    94d2:	f3c0 0180 	ubfx	r1, r0, #2, #1
    94d6:	f3c0 0240 	ubfx	r2, r0, #1, #1
    94da:	4411      	add	r1, r2
    94dc:	f000 0001 	and.w	r0, r0, #1
    94e0:	4408      	add	r0, r1
    94e2:	4770      	bx	lr

000094e4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    94e4:	f240 315a 	movw	r1, #858	; 0x35a
    94e8:	4348      	muls	r0, r1
    94ea:	4770      	bx	lr

000094ec <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    94ec:	f240 20ef 	movw	r0, #751	; 0x2ef
    94f0:	4770      	bx	lr
    94f2:	020e      	.short	0x020e
    94f4:	0630041c 	.word	0x0630041c
    94f8:	035a0c60 	.word	0x035a0c60
    94fc:	05c506b4 	.word	0x05c506b4
    9500:	12250bf5 	.word	0x12250bf5
    9504:	03b101a3 	.word	0x03b101a3
    9508:	02ef05bf 	.word	0x02ef05bf
    950c:	09a30649 	.word	0x09a30649

00009510 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    9510:	b510      	push	{r4, lr}
    9512:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    9516:	b109      	cbz	r1, 951c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    9518:	2000      	movs	r0, #0
    951a:	bd10      	pop	{r4, pc}
    951c:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    9520:	b131      	cbz	r1, 9530 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    9522:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    9526:	428a      	cmp	r2, r1
    9528:	d902      	bls.n	9530 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    952a:	f7ff feb1 	bl	9290 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    952e:	e7f3      	b.n	9518 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    9530:	2001      	movs	r0, #1
    9532:	bd10      	pop	{r4, pc}

00009534 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    9534:	b510      	push	{r4, lr}
    9536:	b131      	cbz	r1, 9546 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    9538:	2901      	cmp	r1, #1
    953a:	d008      	beq.n	954e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    953c:	f240 717d 	movw	r1, #1917	; 0x77d
    9540:	2030      	movs	r0, #48	; 0x30
    9542:	f7fa fb69 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    954a:	f000 b8d3 	b.w	96f4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x146>
    954e:	2100      	movs	r1, #0
    9550:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    9554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9558:	f000 b89c 	b.w	9694 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xe6>

0000955c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    955c:	b510      	push	{r4, lr}
    955e:	4604      	mov	r4, r0
    9560:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    9564:	2800      	cmp	r0, #0
    9566:	d019      	beq.n	959c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    9568:	2001      	movs	r0, #1
    956a:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    956e:	4601      	mov	r1, r0
    9570:	4620      	mov	r0, r4
    9572:	f7ff fe8a 	bl	928a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    9576:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    957a:	b170      	cbz	r0, 959a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    957c:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    9580:	f7f8 fb58 	bl	1c34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    9584:	7820      	ldrb	r0, [r4, #0]
    9586:	f7f8 fca9 	bl	1edc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    958a:	f814 09c8 	ldrb.w	r0, [r4], #-200
    958e:	f7f8 fc83 	bl	1e98 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9592:	b120      	cbz	r0, 959e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    9594:	2000      	movs	r0, #0
    9596:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    959a:	2000      	movs	r0, #0
    959c:	bd10      	pop	{r4, pc}
    959e:	f44f 7101 	mov.w	r1, #516	; 0x204
    95a2:	2030      	movs	r0, #48	; 0x30
    95a4:	f7fa fb38 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000095a8 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    95a8:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    95ac:	4770      	bx	lr

000095ae <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    95ae:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    95b2:	4770      	bx	lr
    95b4:	b570      	push	{r4, r5, r6, lr}
    95b6:	4604      	mov	r4, r0
    95b8:	f000 f875 	bl	96a6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf8>
    95bc:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    95c0:	2000      	movs	r0, #0
    95c2:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
    95c6:	4601      	mov	r1, r0
    95c8:	2501      	movs	r5, #1
    95ca:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    95ce:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    95d2:	4606      	mov	r6, r0
    95d4:	f7ff fbd1 	bl	8d7a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    95d8:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    95dc:	1c40      	adds	r0, r0, #1
    95de:	280a      	cmp	r0, #10
    95e0:	d201      	bcs.n	95e6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x38>
    95e2:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    95e6:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    95ea:	b138      	cbz	r0, 95fc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x4e>
    95ec:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    95f0:	1c40      	adds	r0, r0, #1
    95f2:	280a      	cmp	r0, #10
    95f4:	d302      	bcc.n	95fc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x4e>
    95f6:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
    95fa:	e002      	b.n	9602 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x54>
    95fc:	2002      	movs	r0, #2
    95fe:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    9602:	4620      	mov	r0, r4
    9604:	f000 f822 	bl	964c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x9e>
    9608:	b120      	cbz	r0, 9614 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x66>
    960a:	4620      	mov	r0, r4
    960c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9610:	f000 b80d 	b.w	962e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x80>
    9614:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    9618:	4631      	mov	r1, r6
    961a:	f000 f842 	bl	96a2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf4>
    961e:	2800      	cmp	r0, #0
    9620:	d104      	bne.n	962c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x7e>
    9622:	f240 6191 	movw	r1, #1681	; 0x691
    9626:	2030      	movs	r0, #48	; 0x30
    9628:	f7fa faf6 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    962c:	bd70      	pop	{r4, r5, r6, pc}
    962e:	b510      	push	{r4, lr}
    9630:	4604      	mov	r4, r0
    9632:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    9636:	f7f8 fc2f 	bl	1e98 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    963a:	2000      	movs	r0, #0
    963c:	7620      	strb	r0, [r4, #24]
    963e:	bd10      	pop	{r4, pc}
    9640:	b510      	push	{r4, lr}
    9642:	f7ff fdcd 	bl	91e0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    9646:	f500 7088 	add.w	r0, r0, #272	; 0x110
    964a:	bd10      	pop	{r4, pc}
    964c:	b570      	push	{r4, r5, r6, lr}
    964e:	4605      	mov	r5, r0
    9650:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    9654:	b108      	cbz	r0, 965a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xac>
    9656:	2001      	movs	r0, #1
    9658:	bd70      	pop	{r4, r5, r6, pc}
    965a:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    965e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    9662:	4050      	eors	r0, r2
    9664:	ea70 0101 	orns	r1, r0, r1
    9668:	d012      	beq.n	9690 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xe2>
    966a:	2400      	movs	r4, #0
    966c:	4621      	mov	r1, r4
    966e:	4628      	mov	r0, r5
    9670:	f7ff ffe6 	bl	9640 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x92>
    9674:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    9678:	1840      	adds	r0, r0, r1
    967a:	4154      	adcs	r4, r2
    967c:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    9680:	3df8      	subs	r5, #248	; 0xf8
    9682:	1a10      	subs	r0, r2, r0
    9684:	41a1      	sbcs	r1, r4
    9686:	d503      	bpl.n	9690 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xe2>
    9688:	4628      	mov	r0, r5
    968a:	f7ff fe01 	bl	9290 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    968e:	e7e2      	b.n	9656 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xa8>
    9690:	2000      	movs	r0, #0
    9692:	bd70      	pop	{r4, r5, r6, pc}
    9694:	b510      	push	{r4, lr}
    9696:	f7fd fa57 	bl	6b48 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    969a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    969e:	f7f8 bd5d 	b.w	215c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    96a2:	f7f7 bfa5 	b.w	15f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    96a6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    96a8:	4604      	mov	r4, r0
    96aa:	f7ff fdc2 	bl	9232 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    96ae:	b1f8      	cbz	r0, 96f0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x142>
    96b0:	4620      	mov	r0, r4
    96b2:	f7ff fdb6 	bl	9222 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    96b6:	b918      	cbnz	r0, 96c0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x112>
    96b8:	4620      	mov	r0, r4
    96ba:	f7ff fdbc 	bl	9236 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    96be:	b140      	cbz	r0, 96d2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x124>
    96c0:	2462      	movs	r4, #98	; 0x62
    96c2:	4668      	mov	r0, sp
    96c4:	f7fa f984 	bl	39d0 <mpsl_fem_pa_is_configured>
    96c8:	f89d 0000 	ldrb.w	r0, [sp]
    96cc:	b118      	cbz	r0, 96d6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x128>
    96ce:	2501      	movs	r5, #1
    96d0:	e002      	b.n	96d8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x12a>
    96d2:	245b      	movs	r4, #91	; 0x5b
    96d4:	e7f5      	b.n	96c2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x114>
    96d6:	2500      	movs	r5, #0
    96d8:	a801      	add	r0, sp, #4
    96da:	f7fa f961 	bl	39a0 <mpsl_fem_lna_is_configured>
    96de:	f89d 0004 	ldrb.w	r0, [sp, #4]
    96e2:	b100      	cbz	r0, 96e6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x138>
    96e4:	2001      	movs	r0, #1
    96e6:	4305      	orrs	r5, r0
    96e8:	d000      	beq.n	96ec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x13e>
    96ea:	340a      	adds	r4, #10
    96ec:	4620      	mov	r0, r4
    96ee:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    96f0:	2084      	movs	r0, #132	; 0x84
    96f2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    96f4:	b570      	push	{r4, r5, r6, lr}
    96f6:	4604      	mov	r4, r0
    96f8:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    96fa:	2500      	movs	r5, #0
    96fc:	b130      	cbz	r0, 970c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x15e>
    96fe:	f7fb fd2d 	bl	515c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    9702:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    9704:	fbb0 f2f1 	udiv	r2, r0, r1
    9708:	fb01 0512 	mls	r5, r1, r2, r0
    970c:	4620      	mov	r0, r4
    970e:	f7ff fd63 	bl	91d8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    9712:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    9716:	4428      	add	r0, r5
    9718:	34e8      	adds	r4, #232	; 0xe8
    971a:	2500      	movs	r5, #0
    971c:	1882      	adds	r2, r0, r2
    971e:	eb45 0001 	adc.w	r0, r5, r1
    9722:	e9c4 2004 	strd	r2, r0, [r4, #16]
    9726:	f804 5b0b 	strb.w	r5, [r4], #11
    972a:	2001      	movs	r0, #1
    972c:	f804 0901 	strb.w	r0, [r4], #-1
    9730:	2002      	movs	r0, #2
    9732:	f804 09f2 	strb.w	r0, [r4], #-242
    9736:	4620      	mov	r0, r4
    9738:	f7ff ffb5 	bl	96a6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf8>
    973c:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    9740:	4620      	mov	r0, r4
    9742:	f7ff ff83 	bl	964c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x9e>
    9746:	b930      	cbnz	r0, 9756 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1a8>
    9748:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    974c:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    9750:	f7ff ffa7 	bl	96a2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf4>
    9754:	b128      	cbz	r0, 9762 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1b4>
    9756:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    975a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    975e:	f7ff bf99 	b.w	9694 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xe6>
    9762:	f240 61d7 	movw	r1, #1751	; 0x6d7
    9766:	2030      	movs	r0, #48	; 0x30
    9768:	f7fa fa56 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    976c:	b510      	push	{r4, lr}
    976e:	4604      	mov	r4, r0
    9770:	2000      	movs	r0, #0
    9772:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    9776:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    977a:	f7f8 fb8d 	bl	1e98 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    977e:	2020      	movs	r0, #32
    9780:	f884 0294 	strb.w	r0, [r4, #660]	; 0x294
    9784:	bd10      	pop	{r4, pc}
    9786:	b570      	push	{r4, r5, r6, lr}
    9788:	b140      	cbz	r0, 979c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1ee>
    978a:	2909      	cmp	r1, #9
    978c:	d249      	bcs.n	9822 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x274>
    978e:	e8df f001 	tbb	[pc, r1]
    9792:	1507      	.short	0x1507
    9794:	48383c3c 	.word	0x48383c3c
    9798:	0044402a 	.word	0x0044402a
    979c:	21ca      	movs	r1, #202	; 0xca
    979e:	e03d      	b.n	981c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x26e>
    97a0:	4604      	mov	r4, r0
    97a2:	f7fb fe2b 	bl	53fc <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    97a6:	b110      	cbz	r0, 97ae <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x200>
    97a8:	f44f 711d 	mov.w	r1, #628	; 0x274
    97ac:	e036      	b.n	981c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x26e>
    97ae:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    97b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    97b6:	38ff      	subs	r0, #255	; 0xff
    97b8:	f7f8 bdea 	b.w	2390 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    97bc:	4605      	mov	r5, r0
    97be:	f7ff fd34 	bl	922a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    97c2:	b9b0      	cbnz	r0, 97f2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x244>
    97c4:	2100      	movs	r1, #0
    97c6:	4628      	mov	r0, r5
    97c8:	f7ff ff3a 	bl	9640 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x92>
    97cc:	4604      	mov	r4, r0
    97ce:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    97d2:	42a0      	cmp	r0, r4
    97d4:	d20b      	bcs.n	97ee <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x240>
    97d6:	1a20      	subs	r0, r4, r0
    97d8:	2103      	movs	r1, #3
    97da:	f7f7 fd4d 	bl	1278 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    97de:	b130      	cbz	r0, 97ee <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x240>
    97e0:	4628      	mov	r0, r5
    97e2:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    97e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    97ea:	f7ff bc8c 	b.w	9106 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    97ee:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    97f2:	4628      	mov	r0, r5
    97f4:	f7fb fe1e 	bl	5434 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    97f8:	2800      	cmp	r0, #0
    97fa:	d014      	beq.n	9826 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x278>
    97fc:	f240 21a7 	movw	r1, #679	; 0x2a7
    9800:	e00c      	b.n	981c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x26e>
    9802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9806:	f7fd bb5b 	b.w	6ec0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    980a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    980e:	f7ff bed1 	b.w	95b4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x6>
    9812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9816:	f7ff bf0a 	b.w	962e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x80>
    981a:	21ea      	movs	r1, #234	; 0xea
    981c:	2030      	movs	r0, #48	; 0x30
    981e:	f7fa f9fb 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9822:	21ee      	movs	r1, #238	; 0xee
    9824:	e7fa      	b.n	981c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x26e>
    9826:	bd70      	pop	{r4, r5, r6, pc}

00009828 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    9828:	f7fa bd34 	b.w	4294 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000982c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    982c:	b570      	push	{r4, r5, r6, lr}
    982e:	6844      	ldr	r4, [r0, #4]
    9830:	220f      	movs	r2, #15
    9832:	f504 7594 	add.w	r5, r4, #296	; 0x128
    9836:	2100      	movs	r1, #0
    9838:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    983c:	f7fe fad1 	bl	7de2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9840:	2100      	movs	r1, #0
    9842:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
    9846:	61a9      	str	r1, [r5, #24]
    9848:	4608      	mov	r0, r1
    984a:	217f      	movs	r1, #127	; 0x7f
    984c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    9850:	4422      	add	r2, r4
    9852:	1c40      	adds	r0, r0, #1
    9854:	b2c0      	uxtb	r0, r0
    9856:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
    985a:	2802      	cmp	r0, #2
    985c:	d3f6      	bcc.n	984c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x20>
    985e:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    9862:	4620      	mov	r0, r4
    9864:	f000 f814 	bl	9890 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    9868:	2000      	movs	r0, #0
    986a:	21ff      	movs	r1, #255	; 0xff
    986c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    9870:	4422      	add	r2, r4
    9872:	1c40      	adds	r0, r0, #1
    9874:	f802 1f71 	strb.w	r1, [r2, #113]!
    9878:	b2c0      	uxtb	r0, r0
    987a:	7191      	strb	r1, [r2, #6]
    987c:	2802      	cmp	r0, #2
    987e:	d3f5      	bcc.n	986c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x40>
    9880:	bd70      	pop	{r4, r5, r6, pc}

00009882 <sym_54DHANNB5K66OT2I32HH4FUSWNFM6Y6UROTVO5I>:
    9882:	207f      	movs	r0, #127	; 0x7f
    9884:	f000 b837 	b.w	98f6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>

00009888 <sym_ORQBLZC6MUX3FYLO7MAZX3V753VQRLBWB2XQIYI>:
    9888:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    988c:	f000 b833 	b.w	98f6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>

00009890 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    9890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9894:	460d      	mov	r5, r1
    9896:	4606      	mov	r6, r0
    9898:	f7ff fff3 	bl	9882 <sym_54DHANNB5K66OT2I32HH4FUSWNFM6Y6UROTVO5I>
    989c:	4607      	mov	r7, r0
    989e:	f7ff fff3 	bl	9888 <sym_ORQBLZC6MUX3FYLO7MAZX3V753VQRLBWB2XQIYI>
    98a2:	2400      	movs	r4, #0
    98a4:	4285      	cmp	r5, r0
    98a6:	d100      	bne.n	98aa <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    98a8:	2401      	movs	r4, #1
    98aa:	42bd      	cmp	r5, r7
    98ac:	d101      	bne.n	98b2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    98ae:	f044 0402 	orr.w	r4, r4, #2
    98b2:	f000 f814 	bl	98de <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4e>
    98b6:	2200      	movs	r2, #0
    98b8:	4601      	mov	r1, r0
    98ba:	2301      	movs	r3, #1
    98bc:	fa03 f002 	lsl.w	r0, r3, r2
    98c0:	4208      	tst	r0, r1
    98c2:	d006      	beq.n	98d2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x42>
    98c4:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    98c8:	4430      	add	r0, r6
    98ca:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    98ce:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    98d2:	1c52      	adds	r2, r2, #1
    98d4:	b2d2      	uxtb	r2, r2
    98d6:	2a02      	cmp	r2, #2
    98d8:	d3f0      	bcc.n	98bc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    98da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98de:	b510      	push	{r4, lr}
    98e0:	f7fc fe98 	bl	6614 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    98e4:	0a00      	lsrs	r0, r0, #8
    98e6:	2201      	movs	r2, #1
    98e8:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    98ec:	07c0      	lsls	r0, r0, #31
    98ee:	d000      	beq.n	98f2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x62>
    98f0:	2203      	movs	r2, #3
    98f2:	4610      	mov	r0, r2
    98f4:	bd10      	pop	{r4, pc}
    98f6:	b508      	push	{r3, lr}
    98f8:	f640 1288 	movw	r2, #2440	; 0x988
    98fc:	4669      	mov	r1, sp
    98fe:	f7fa f86d 	bl	39dc <mpsl_fem_tx_power_split>
    9902:	bd08      	pop	{r3, pc}
    9904:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    9908:	f001 0107 	and.w	r1, r1, #7
    990c:	7800      	ldrb	r0, [r0, #0]
    990e:	40c8      	lsrs	r0, r1
    9910:	f000 0001 	and.w	r0, r0, #1
    9914:	4770      	bx	lr
    9916:	b118      	cbz	r0, 9920 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x90>
    9918:	2802      	cmp	r0, #2
    991a:	d001      	beq.n	9920 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x90>
    991c:	2001      	movs	r0, #1
    991e:	4770      	bx	lr
    9920:	2000      	movs	r0, #0
    9922:	4770      	bx	lr

00009924 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    9924:	b510      	push	{r4, lr}
    9926:	4604      	mov	r4, r0
    9928:	f7fc fe00 	bl	652c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    992c:	b108      	cbz	r0, 9932 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    992e:	200c      	movs	r0, #12
    9930:	bd10      	pop	{r4, pc}
    9932:	7820      	ldrb	r0, [r4, #0]
    9934:	b118      	cbz	r0, 993e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    9936:	2801      	cmp	r0, #1
    9938:	d001      	beq.n	993e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    993a:	2012      	movs	r0, #18
    993c:	bd10      	pop	{r4, pc}
    993e:	f7ff ffea 	bl	9916 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x86>
    9942:	1c61      	adds	r1, r4, #1
    9944:	f7fa fffa 	bl	493c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    9948:	b108      	cbz	r0, 994e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    994a:	2000      	movs	r0, #0
    994c:	bd10      	pop	{r4, pc}
    994e:	2007      	movs	r0, #7
    9950:	bd10      	pop	{r4, pc}

00009952 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    9952:	b510      	push	{r4, lr}
    9954:	f7fc fdea 	bl	652c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    9958:	b108      	cbz	r0, 995e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    995a:	200c      	movs	r0, #12
    995c:	bd10      	pop	{r4, pc}
    995e:	f7fb f815 	bl	498c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    9962:	2000      	movs	r0, #0
    9964:	bd10      	pop	{r4, pc}

00009966 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    9966:	b510      	push	{r4, lr}
    9968:	460b      	mov	r3, r1
    996a:	2201      	movs	r2, #1
    996c:	f100 0110 	add.w	r1, r0, #16
    9970:	f7ff f99e 	bl	8cb0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9974:	2000      	movs	r0, #0
    9976:	bd10      	pop	{r4, pc}

00009978 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    9978:	b510      	push	{r4, lr}
    997a:	8800      	ldrh	r0, [r0, #0]
    997c:	2100      	movs	r1, #0
    997e:	f7fe ff66 	bl	884e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9982:	b118      	cbz	r0, 998c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    9984:	f890 12a0 	ldrb.w	r1, [r0, #672]	; 0x2a0
    9988:	b111      	cbz	r1, 9990 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    998a:	e007      	b.n	999c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    998c:	2002      	movs	r0, #2
    998e:	bd10      	pop	{r4, pc}
    9990:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    9994:	2916      	cmp	r1, #22
    9996:	d003      	beq.n	99a0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    9998:	2917      	cmp	r1, #23
    999a:	d001      	beq.n	99a0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    999c:	200c      	movs	r0, #12
    999e:	bd10      	pop	{r4, pc}
    99a0:	2102      	movs	r1, #2
    99a2:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
    99a6:	2000      	movs	r0, #0
    99a8:	bd10      	pop	{r4, pc}

000099aa <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    99aa:	b510      	push	{r4, lr}
    99ac:	2108      	movs	r1, #8
    99ae:	f7fa f9a1 	bl	3cf4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    99b2:	2000      	movs	r0, #0
    99b4:	bd10      	pop	{r4, pc}

000099b6 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    99b6:	b510      	push	{r4, lr}
    99b8:	4604      	mov	r4, r0
    99ba:	f7fc fc37 	bl	622c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    99be:	f7ff fc3e 	bl	923e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    99c2:	7020      	strb	r0, [r4, #0]
    99c4:	2000      	movs	r0, #0
    99c6:	bd10      	pop	{r4, pc}

000099c8 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    99c8:	b510      	push	{r4, lr}
    99ca:	4604      	mov	r4, r0
    99cc:	20d8      	movs	r0, #216	; 0xd8
    99ce:	7020      	strb	r0, [r4, #0]
    99d0:	f000 fbd0 	bl	a174 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x272>
    99d4:	7060      	strb	r0, [r4, #1]
    99d6:	2000      	movs	r0, #0
    99d8:	bd10      	pop	{r4, pc}

000099da <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    99da:	2108      	movs	r1, #8
    99dc:	7001      	strb	r1, [r0, #0]
    99de:	2000      	movs	r0, #0
    99e0:	4770      	bx	lr

000099e2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    99e2:	b510      	push	{r4, lr}
    99e4:	4604      	mov	r4, r0
    99e6:	f7fc fda1 	bl	652c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    99ea:	b108      	cbz	r0, 99f0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    99ec:	200c      	movs	r0, #12
    99ee:	bd10      	pop	{r4, pc}
    99f0:	7820      	ldrb	r0, [r4, #0]
    99f2:	b108      	cbz	r0, 99f8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    99f4:	2801      	cmp	r0, #1
    99f6:	d107      	bne.n	9a08 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    99f8:	f7ff ff8d 	bl	9916 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x86>
    99fc:	1c61      	adds	r1, r4, #1
    99fe:	f7ff f94c 	bl	8c9a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    9a02:	b108      	cbz	r0, 9a08 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    9a04:	2000      	movs	r0, #0
    9a06:	bd10      	pop	{r4, pc}
    9a08:	2012      	movs	r0, #18
    9a0a:	bd10      	pop	{r4, pc}

00009a0c <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    9a0c:	b51c      	push	{r2, r3, r4, lr}
    9a0e:	4604      	mov	r4, r0
    9a10:	f7fc fc0c 	bl	622c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    9a14:	2000      	movs	r0, #0
    9a16:	f88d 0002 	strb.w	r0, [sp, #2]
    9a1a:	2103      	movs	r1, #3
    9a1c:	f88d 1001 	strb.w	r1, [sp, #1]
    9a20:	f814 1b01 	ldrb.w	r1, [r4], #1
    9a24:	f88d 1003 	strb.w	r1, [sp, #3]
    9a28:	f88d 0000 	strb.w	r0, [sp]
    9a2c:	4668      	mov	r0, sp
    9a2e:	9401      	str	r4, [sp, #4]
    9a30:	f000 f939 	bl	9ca6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    9a34:	bd1c      	pop	{r2, r3, r4, pc}

00009a36 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    9a36:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9a38:	4605      	mov	r5, r0
    9a3a:	f7fc fbf7 	bl	622c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    9a3e:	4606      	mov	r6, r0
    9a40:	7828      	ldrb	r0, [r5, #0]
    9a42:	2400      	movs	r4, #0
    9a44:	b160      	cbz	r0, 9a60 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    9a46:	f88d 4000 	strb.w	r4, [sp]
    9a4a:	2001      	movs	r0, #1
    9a4c:	f10d 0101 	add.w	r1, sp, #1
    9a50:	f7fa fea2 	bl	4798 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    9a54:	b120      	cbz	r0, 9a60 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    9a56:	4668      	mov	r0, sp
    9a58:	f000 f897 	bl	9b8a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    9a5c:	2800      	cmp	r0, #0
    9a5e:	d112      	bne.n	9a86 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    9a60:	f88d 400c 	strb.w	r4, [sp, #12]
    9a64:	4630      	mov	r0, r6
    9a66:	f7ff fbe0 	bl	922a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9a6a:	b118      	cbz	r0, 9a74 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    9a6c:	2080      	movs	r0, #128	; 0x80
    9a6e:	f8ad 000d 	strh.w	r0, [sp, #13]
    9a72:	e001      	b.n	9a78 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    9a74:	f8ad 400d 	strh.w	r4, [sp, #13]
    9a78:	f88d 400f 	strb.w	r4, [sp, #15]
    9a7c:	7828      	ldrb	r0, [r5, #0]
    9a7e:	2801      	cmp	r0, #1
    9a80:	d003      	beq.n	9a8a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    9a82:	b138      	cbz	r0, 9a94 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    9a84:	2012      	movs	r0, #18
    9a86:	b004      	add	sp, #16
    9a88:	bd70      	pop	{r4, r5, r6, pc}
    9a8a:	a903      	add	r1, sp, #12
    9a8c:	4630      	mov	r0, r6
    9a8e:	f7fc fbe9 	bl	6264 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    9a92:	e7f8      	b.n	9a86 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    9a94:	4630      	mov	r0, r6
    9a96:	f000 fb70 	bl	a17a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x278>
    9a9a:	e7f4      	b.n	9a86 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

00009a9c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    9a9c:	b530      	push	{r4, r5, lr}
    9a9e:	b08b      	sub	sp, #44	; 0x2c
    9aa0:	4604      	mov	r4, r0
    9aa2:	f7fc fbc3 	bl	622c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    9aa6:	4602      	mov	r2, r0
    9aa8:	7920      	ldrb	r0, [r4, #4]
    9aaa:	2804      	cmp	r0, #4
    9aac:	d803      	bhi.n	9ab6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    9aae:	8860      	ldrh	r0, [r4, #2]
    9ab0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    9ab4:	d902      	bls.n	9abc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    9ab6:	2012      	movs	r0, #18
    9ab8:	b00b      	add	sp, #44	; 0x2c
    9aba:	bd30      	pop	{r4, r5, pc}
    9abc:	2500      	movs	r5, #0
    9abe:	f88d 5004 	strb.w	r5, [sp, #4]
    9ac2:	7921      	ldrb	r1, [r4, #4]
    9ac4:	9500      	str	r5, [sp, #0]
    9ac6:	f89d 0000 	ldrb.w	r0, [sp]
    9aca:	2905      	cmp	r1, #5
    9acc:	f040 0010 	orr.w	r0, r0, #16
    9ad0:	f88d 0000 	strb.w	r0, [sp]
    9ad4:	d254      	bcs.n	9b80 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    9ad6:	e8df f001 	tbb	[pc, r1]
    9ada:	0803      	.short	0x0803
    9adc:	000b1105 	.word	0x000b1105
    9ae0:	f040 0001 	orr.w	r0, r0, #1
    9ae4:	f040 0002 	orr.w	r0, r0, #2
    9ae8:	e006      	b.n	9af8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    9aea:	f040 0009 	orr.w	r0, r0, #9
    9aee:	e001      	b.n	9af4 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    9af0:	f040 0001 	orr.w	r0, r0, #1
    9af4:	f040 0004 	orr.w	r0, r0, #4
    9af8:	f88d 0000 	strb.w	r0, [sp]
    9afc:	f8bd 0000 	ldrh.w	r0, [sp]
    9b00:	9000      	str	r0, [sp, #0]
    9b02:	f8bd 0000 	ldrh.w	r0, [sp]
    9b06:	f8ad 0005 	strh.w	r0, [sp, #5]
    9b0a:	8821      	ldrh	r1, [r4, #0]
    9b0c:	f8dd 0006 	ldr.w	r0, [sp, #6]
    9b10:	f361 201f 	bfi	r0, r1, #8, #24
    9b14:	f8cd 0006 	str.w	r0, [sp, #6]
    9b18:	8861      	ldrh	r1, [r4, #2]
    9b1a:	f8dd 0009 	ldr.w	r0, [sp, #9]
    9b1e:	f361 201f 	bfi	r0, r1, #8, #24
    9b22:	f8cd 0009 	str.w	r0, [sp, #9]
    9b26:	7b60      	ldrb	r0, [r4, #13]
    9b28:	f88d 000d 	strb.w	r0, [sp, #13]
    9b2c:	7960      	ldrb	r0, [r4, #5]
    9b2e:	f88d 000e 	strb.w	r0, [sp, #14]
    9b32:	79a0      	ldrb	r0, [r4, #6]
    9b34:	f88d 000f 	strb.w	r0, [sp, #15]
    9b38:	f8d4 0007 	ldr.w	r0, [r4, #7]
    9b3c:	9004      	str	r0, [sp, #16]
    9b3e:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    9b42:	f8ad 0014 	strh.w	r0, [sp, #20]
    9b46:	7ba0      	ldrb	r0, [r4, #14]
    9b48:	f88d 0016 	strb.w	r0, [sp, #22]
    9b4c:	207f      	movs	r0, #127	; 0x7f
    9b4e:	f88d 0017 	strb.w	r0, [sp, #23]
    9b52:	2001      	movs	r0, #1
    9b54:	f88d 0018 	strb.w	r0, [sp, #24]
    9b58:	f88d 5019 	strb.w	r5, [sp, #25]
    9b5c:	f88d 001a 	strb.w	r0, [sp, #26]
    9b60:	f88d 501b 	strb.w	r5, [sp, #27]
    9b64:	4610      	mov	r0, r2
    9b66:	f7ff fb80 	bl	926a <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    9b6a:	f88d 001c 	strb.w	r0, [sp, #28]
    9b6e:	f88d 501d 	strb.w	r5, [sp, #29]
    9b72:	f88d 501e 	strb.w	r5, [sp, #30]
    9b76:	a909      	add	r1, sp, #36	; 0x24
    9b78:	a801      	add	r0, sp, #4
    9b7a:	f7fc fa9b 	bl	60b4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    9b7e:	e79b      	b.n	9ab8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    9b80:	f241 11d5 	movw	r1, #4565	; 0x11d5
    9b84:	2039      	movs	r0, #57	; 0x39
    9b86:	f7fa f847 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00009b8a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    9b8a:	b570      	push	{r4, r5, r6, lr}
    9b8c:	4604      	mov	r4, r0
    9b8e:	7800      	ldrb	r0, [r0, #0]
    9b90:	2101      	movs	r1, #1
    9b92:	f7fe fe5c 	bl	884e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9b96:	0005      	movs	r5, r0
    9b98:	d007      	beq.n	9baa <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    9b9a:	f7ff fd08 	bl	95ae <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9b9e:	b160      	cbz	r0, 9bba <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    9ba0:	4628      	mov	r0, r5
    9ba2:	f7ff fb48 	bl	9236 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    9ba6:	b110      	cbz	r0, 9bae <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    9ba8:	e005      	b.n	9bb6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    9baa:	2042      	movs	r0, #66	; 0x42
    9bac:	bd70      	pop	{r4, r5, r6, pc}
    9bae:	4628      	mov	r0, r5
    9bb0:	f7ff fb37 	bl	9222 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    9bb4:	b108      	cbz	r0, 9bba <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    9bb6:	200c      	movs	r0, #12
    9bb8:	bd70      	pop	{r4, r5, r6, pc}
    9bba:	1c61      	adds	r1, r4, #1
    9bbc:	4628      	mov	r0, r5
    9bbe:	f7ff fb4c 	bl	925a <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    9bc2:	2000      	movs	r0, #0
    9bc4:	bd70      	pop	{r4, r5, r6, pc}

00009bc6 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    9bc6:	b510      	push	{r4, lr}
    9bc8:	4604      	mov	r4, r0
    9bca:	f7fc fb2f 	bl	622c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    9bce:	7861      	ldrb	r1, [r4, #1]
    9bd0:	f3c1 0240 	ubfx	r2, r1, #1, #1
    9bd4:	f001 0101 	and.w	r1, r1, #1
    9bd8:	f7ff fb3b 	bl	9252 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    9bdc:	2000      	movs	r0, #0
    9bde:	bd10      	pop	{r4, pc}

00009be0 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    9be0:	b510      	push	{r4, lr}
    9be2:	4604      	mov	r4, r0
    9be4:	2001      	movs	r0, #1
    9be6:	f000 f9ae 	bl	9f46 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    9bea:	b128      	cbz	r0, 9bf8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    9bec:	4621      	mov	r1, r4
    9bee:	2001      	movs	r0, #1
    9bf0:	f7fa fdea 	bl	47c8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    9bf4:	2000      	movs	r0, #0
    9bf6:	bd10      	pop	{r4, pc}
    9bf8:	200c      	movs	r0, #12
    9bfa:	bd10      	pop	{r4, pc}

00009bfc <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    9bfc:	b51c      	push	{r2, r3, r4, lr}
    9bfe:	4604      	mov	r4, r0
    9c00:	f7fc fb14 	bl	622c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    9c04:	2000      	movs	r0, #0
    9c06:	f88d 0000 	strb.w	r0, [sp]
    9c0a:	f88d 0002 	strb.w	r0, [sp, #2]
    9c0e:	2003      	movs	r0, #3
    9c10:	f88d 0001 	strb.w	r0, [sp, #1]
    9c14:	f814 0b01 	ldrb.w	r0, [r4], #1
    9c18:	f88d 0003 	strb.w	r0, [sp, #3]
    9c1c:	4668      	mov	r0, sp
    9c1e:	9401      	str	r4, [sp, #4]
    9c20:	f000 f8aa 	bl	9d78 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    9c24:	bd1c      	pop	{r2, r3, r4, pc}

00009c26 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    9c26:	b510      	push	{r4, lr}
    9c28:	f7fa fdf2 	bl	4810 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    9c2c:	2000      	movs	r0, #0
    9c2e:	bd10      	pop	{r4, pc}

00009c30 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    9c30:	b51c      	push	{r2, r3, r4, lr}
    9c32:	460c      	mov	r4, r1
    9c34:	4669      	mov	r1, sp
    9c36:	f7ff f859 	bl	8cec <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9c3a:	2800      	cmp	r0, #0
    9c3c:	d105      	bne.n	9c4a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    9c3e:	2100      	movs	r1, #0
    9c40:	4622      	mov	r2, r4
    9c42:	9801      	ldr	r0, [sp, #4]
    9c44:	f000 fa40 	bl	a0c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c6>
    9c48:	2000      	movs	r0, #0
    9c4a:	bd1c      	pop	{r2, r3, r4, pc}

00009c4c <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    9c4c:	b510      	push	{r4, lr}
    9c4e:	4604      	mov	r4, r0
    9c50:	7800      	ldrb	r0, [r0, #0]
    9c52:	28ff      	cmp	r0, #255	; 0xff
    9c54:	d009      	beq.n	9c6a <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    9c56:	2101      	movs	r1, #1
    9c58:	f7fe fdf9 	bl	884e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9c5c:	b118      	cbz	r0, 9c66 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    9c5e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    9c62:	8441      	strh	r1, [r0, #34]	; 0x22
    9c64:	e005      	b.n	9c72 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    9c66:	2042      	movs	r0, #66	; 0x42
    9c68:	bd10      	pop	{r4, pc}
    9c6a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    9c6e:	f7fc f989 	bl	5f84 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    9c72:	2000      	movs	r0, #0
    9c74:	bd10      	pop	{r4, pc}

00009c76 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    9c76:	b510      	push	{r4, lr}
    9c78:	4604      	mov	r4, r0
    9c7a:	2000      	movs	r0, #0
    9c7c:	f000 f963 	bl	9f46 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    9c80:	b128      	cbz	r0, 9c8e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    9c82:	4621      	mov	r1, r4
    9c84:	2000      	movs	r0, #0
    9c86:	f7fa fd9f 	bl	47c8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    9c8a:	2000      	movs	r0, #0
    9c8c:	bd10      	pop	{r4, pc}
    9c8e:	200c      	movs	r0, #12
    9c90:	bd10      	pop	{r4, pc}

00009c92 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    9c92:	b510      	push	{r4, lr}
    9c94:	7800      	ldrb	r0, [r0, #0]
    9c96:	b100      	cbz	r0, 9c9a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    9c98:	2001      	movs	r0, #1
    9c9a:	f7fc f99d 	bl	5fd8 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    9c9e:	2000      	movs	r0, #0
    9ca0:	bd10      	pop	{r4, pc}

00009ca2 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    9ca2:	f7fc bbbf 	b.w	6424 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>

00009ca6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    9ca6:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9caa:	4606      	mov	r6, r0
    9cac:	7845      	ldrb	r5, [r0, #1]
    9cae:	7800      	ldrb	r0, [r0, #0]
    9cb0:	2101      	movs	r1, #1
    9cb2:	f7fe fdcc 	bl	884e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9cb6:	0004      	movs	r4, r0
    9cb8:	d01e      	beq.n	9cf8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    9cba:	f7ff fa1c 	bl	90f6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    9cbe:	78f1      	ldrb	r1, [r6, #3]
    9cc0:	4281      	cmp	r1, r0
    9cc2:	d800      	bhi.n	9cc6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    9cc4:	4608      	mov	r0, r1
    9cc6:	4607      	mov	r7, r0
    9cc8:	2d04      	cmp	r5, #4
    9cca:	d018      	beq.n	9cfe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    9ccc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9cce:	f7fe ff09 	bl	8ae4 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    9cd2:	4438      	add	r0, r7
    9cd4:	b281      	uxth	r1, r0
    9cd6:	4620      	mov	r0, r4
    9cd8:	2201      	movs	r2, #1
    9cda:	f000 f946 	bl	9f6a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x68>
    9cde:	2800      	cmp	r0, #0
    9ce0:	d10b      	bne.n	9cfa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    9ce2:	2d03      	cmp	r5, #3
    9ce4:	d000      	beq.n	9ce8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    9ce6:	b1df      	cbz	r7, 9d20 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9ce8:	4620      	mov	r0, r4
    9cea:	f7ff faa2 	bl	9232 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    9cee:	7871      	ldrb	r1, [r6, #1]
    9cf0:	2903      	cmp	r1, #3
    9cf2:	d010      	beq.n	9d16 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    9cf4:	b9a0      	cbnz	r0, 9d20 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9cf6:	e004      	b.n	9d02 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    9cf8:	2042      	movs	r0, #66	; 0x42
    9cfa:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9cfe:	b97f      	cbnz	r7, 9d20 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9d00:	e7f2      	b.n	9ce8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    9d02:	2904      	cmp	r1, #4
    9d04:	d107      	bne.n	9d16 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    9d06:	4620      	mov	r0, r4
    9d08:	f7ff fc51 	bl	95ae <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9d0c:	b140      	cbz	r0, 9d20 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9d0e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9d10:	f7fe feb7 	bl	8a82 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    9d14:	b120      	cbz	r0, 9d20 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9d16:	2d01      	cmp	r5, #1
    9d18:	d004      	beq.n	9d24 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    9d1a:	2d03      	cmp	r5, #3
    9d1c:	d002      	beq.n	9d24 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    9d1e:	e00e      	b.n	9d3e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    9d20:	2012      	movs	r0, #18
    9d22:	e7ea      	b.n	9cfa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    9d24:	4620      	mov	r0, r4
    9d26:	f7ff fa84 	bl	9232 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    9d2a:	b108      	cbz	r0, 9d30 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    9d2c:	2200      	movs	r2, #0
    9d2e:	e002      	b.n	9d36 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    9d30:	2d01      	cmp	r5, #1
    9d32:	d013      	beq.n	9d5c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    9d34:	2201      	movs	r2, #1
    9d36:	4668      	mov	r0, sp
    9d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9d3a:	f7fe fe3a 	bl	89b2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    9d3e:	2d04      	cmp	r5, #4
    9d40:	d018      	beq.n	9d74 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    9d42:	6872      	ldr	r2, [r6, #4]
    9d44:	463b      	mov	r3, r7
    9d46:	2101      	movs	r1, #1
    9d48:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9d4a:	f7fe fe66 	bl	8a1a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    9d4e:	b138      	cbz	r0, 9d60 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    9d50:	7870      	ldrb	r0, [r6, #1]
    9d52:	2802      	cmp	r0, #2
    9d54:	d006      	beq.n	9d64 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    9d56:	2803      	cmp	r0, #3
    9d58:	d004      	beq.n	9d64 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    9d5a:	e00b      	b.n	9d74 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    9d5c:	2202      	movs	r2, #2
    9d5e:	e7ea      	b.n	9d36 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    9d60:	2007      	movs	r0, #7
    9d62:	e7ca      	b.n	9cfa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    9d64:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9d66:	f7fe febd 	bl	8ae4 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    9d6a:	4602      	mov	r2, r0
    9d6c:	2101      	movs	r1, #1
    9d6e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9d70:	f7fe fe95 	bl	8a9e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    9d74:	2000      	movs	r0, #0
    9d76:	e7c0      	b.n	9cfa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

00009d78 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    9d78:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9d7c:	4607      	mov	r7, r0
    9d7e:	7845      	ldrb	r5, [r0, #1]
    9d80:	78c6      	ldrb	r6, [r0, #3]
    9d82:	7800      	ldrb	r0, [r0, #0]
    9d84:	2101      	movs	r1, #1
    9d86:	f7fe fd62 	bl	884e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9d8a:	0004      	movs	r4, r0
    9d8c:	d003      	beq.n	9d96 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    9d8e:	f7ff fa52 	bl	9236 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    9d92:	b118      	cbz	r0, 9d9c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    9d94:	e003      	b.n	9d9e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    9d96:	2042      	movs	r0, #66	; 0x42
    9d98:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9d9c:	2600      	movs	r6, #0
    9d9e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9da0:	f7fe fea4 	bl	8aec <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    9da4:	4430      	add	r0, r6
    9da6:	b281      	uxth	r1, r0
    9da8:	4688      	mov	r8, r1
    9daa:	4620      	mov	r0, r4
    9dac:	2201      	movs	r2, #1
    9dae:	f000 f8dc 	bl	9f6a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x68>
    9db2:	2800      	cmp	r0, #0
    9db4:	d1f0      	bne.n	9d98 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    9db6:	2d04      	cmp	r5, #4
    9db8:	d008      	beq.n	9dcc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    9dba:	2d03      	cmp	r5, #3
    9dbc:	d00a      	beq.n	9dd4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    9dbe:	b12e      	cbz	r6, 9dcc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    9dc0:	4620      	mov	r0, r4
    9dc2:	f7ff fbf4 	bl	95ae <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9dc6:	b118      	cbz	r0, 9dd0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    9dc8:	200c      	movs	r0, #12
    9dca:	e7e5      	b.n	9d98 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    9dcc:	2012      	movs	r0, #18
    9dce:	e7e3      	b.n	9d98 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    9dd0:	2d01      	cmp	r5, #1
    9dd2:	d10c      	bne.n	9dee <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    9dd4:	4620      	mov	r0, r4
    9dd6:	f7ff fa2c 	bl	9232 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    9dda:	b108      	cbz	r0, 9de0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    9ddc:	2204      	movs	r2, #4
    9dde:	e002      	b.n	9de6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    9de0:	2d01      	cmp	r5, #1
    9de2:	d010      	beq.n	9e06 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    9de4:	2205      	movs	r2, #5
    9de6:	4668      	mov	r0, sp
    9de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9dea:	f7fe fde2 	bl	89b2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    9dee:	687a      	ldr	r2, [r7, #4]
    9df0:	4633      	mov	r3, r6
    9df2:	2100      	movs	r1, #0
    9df4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9df6:	f7fe fe10 	bl	8a1a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    9dfa:	b130      	cbz	r0, 9e0a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    9dfc:	2d02      	cmp	r5, #2
    9dfe:	d006      	beq.n	9e0e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    9e00:	2d03      	cmp	r5, #3
    9e02:	d004      	beq.n	9e0e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    9e04:	e008      	b.n	9e18 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    9e06:	2206      	movs	r2, #6
    9e08:	e7ed      	b.n	9de6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    9e0a:	2007      	movs	r0, #7
    9e0c:	e7c4      	b.n	9d98 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    9e0e:	4642      	mov	r2, r8
    9e10:	2100      	movs	r1, #0
    9e12:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9e14:	f7fe fe43 	bl	8a9e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    9e18:	2000      	movs	r0, #0
    9e1a:	e7bd      	b.n	9d98 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

00009e1c <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    9e1c:	b510      	push	{r4, lr}
    9e1e:	4604      	mov	r4, r0
    9e20:	4601      	mov	r1, r0
    9e22:	2000      	movs	r0, #0
    9e24:	f7fa fcb8 	bl	4798 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    9e28:	b910      	cbnz	r0, 9e30 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    9e2a:	2000      	movs	r0, #0
    9e2c:	6020      	str	r0, [r4, #0]
    9e2e:	80a0      	strh	r0, [r4, #4]
    9e30:	2000      	movs	r0, #0
    9e32:	bd10      	pop	{r4, pc}

00009e34 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    9e34:	b510      	push	{r4, lr}
    9e36:	f7fc fbb9 	bl	65ac <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    9e3a:	2000      	movs	r0, #0
    9e3c:	bd10      	pop	{r4, pc}

00009e3e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    9e3e:	f000 b860 	b.w	9f02 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00009e42 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    9e42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9e46:	b086      	sub	sp, #24
    9e48:	4689      	mov	r9, r1
    9e4a:	4607      	mov	r7, r0
    9e4c:	8800      	ldrh	r0, [r0, #0]
    9e4e:	a901      	add	r1, sp, #4
    9e50:	f7fe ff4c 	bl	8cec <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9e54:	2800      	cmp	r0, #0
    9e56:	d136      	bne.n	9ec6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    9e58:	9802      	ldr	r0, [sp, #8]
    9e5a:	4601      	mov	r1, r0
    9e5c:	4688      	mov	r8, r1
    9e5e:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    9e62:	f500 7494 	add.w	r4, r0, #296	; 0x128
    9e66:	f88d 1000 	strb.w	r1, [sp]
    9e6a:	9900      	ldr	r1, [sp, #0]
    9e6c:	9100      	str	r1, [sp, #0]
    9e6e:	f89d 1000 	ldrb.w	r1, [sp]
    9e72:	3080      	adds	r0, #128	; 0x80
    9e74:	b109      	cbz	r1, 9e7a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
    9e76:	2601      	movs	r6, #1
    9e78:	e000      	b.n	9e7c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
    9e7a:	2600      	movs	r6, #0
    9e7c:	7d81      	ldrb	r1, [r0, #22]
    9e7e:	2923      	cmp	r1, #35	; 0x23
    9e80:	d100      	bne.n	9e84 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    9e82:	b13e      	cbz	r6, 9e94 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
    9e84:	2500      	movs	r5, #0
    9e86:	3064      	adds	r0, #100	; 0x64
    9e88:	2108      	movs	r1, #8
    9e8a:	4682      	mov	sl, r0
    9e8c:	f7ff fd3a 	bl	9904 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x74>
    9e90:	b110      	cbz	r0, 9e98 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
    9e92:	e007      	b.n	9ea4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    9e94:	2501      	movs	r5, #1
    9e96:	e7f6      	b.n	9e86 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
    9e98:	210b      	movs	r1, #11
    9e9a:	4650      	mov	r0, sl
    9e9c:	f7ff fd32 	bl	9904 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x74>
    9ea0:	b900      	cbnz	r0, 9ea4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    9ea2:	b17d      	cbz	r5, 9ec4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
    9ea4:	a804      	add	r0, sp, #16
    9ea6:	9000      	str	r0, [sp, #0]
    9ea8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9eac:	ab03      	add	r3, sp, #12
    9eae:	463a      	mov	r2, r7
    9eb0:	4641      	mov	r1, r8
    9eb2:	f000 f93f 	bl	a134 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x232>
    9eb6:	0005      	movs	r5, r0
    9eb8:	d105      	bne.n	9ec6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    9eba:	340c      	adds	r4, #12
    9ebc:	20ff      	movs	r0, #255	; 0xff
    9ebe:	7060      	strb	r0, [r4, #1]
    9ec0:	b936      	cbnz	r6, 9ed0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    9ec2:	e003      	b.n	9ecc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    9ec4:	201a      	movs	r0, #26
    9ec6:	b006      	add	sp, #24
    9ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9ecc:	7820      	ldrb	r0, [r4, #0]
    9ece:	b108      	cbz	r0, 9ed4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
    9ed0:	253a      	movs	r5, #58	; 0x3a
    9ed2:	e012      	b.n	9efa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
    9ed4:	f884 9000 	strb.w	r9, [r4]
    9ed8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    9edc:	70a0      	strb	r0, [r4, #2]
    9ede:	f89d 1010 	ldrb.w	r1, [sp, #16]
    9ee2:	70e1      	strb	r1, [r4, #3]
    9ee4:	f88d 0000 	strb.w	r0, [sp]
    9ee8:	f88d 1001 	strb.w	r1, [sp, #1]
    9eec:	88b8      	ldrh	r0, [r7, #4]
    9eee:	f8ad 0002 	strh.w	r0, [sp, #2]
    9ef2:	4669      	mov	r1, sp
    9ef4:	4640      	mov	r0, r8
    9ef6:	f7fe ff3c 	bl	8d72 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    9efa:	2000      	movs	r0, #0
    9efc:	7060      	strb	r0, [r4, #1]
    9efe:	4628      	mov	r0, r5
    9f00:	e7e1      	b.n	9ec6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

00009f02 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    9f02:	b510      	push	{r4, lr}
    9f04:	f7fe fe7b 	bl	8bfe <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9f08:	f7fa fcbe 	bl	4888 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9f0c:	f7fc fb98 	bl	6640 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    9f10:	f7ff f844 	bl	8f9c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    9f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9f18:	f7fc b968 	b.w	61ec <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x40>
    9f1c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    9f20:	4288      	cmp	r0, r1
    9f22:	d303      	bcc.n	9f2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a>
    9f24:	f640 0148 	movw	r1, #2120	; 0x848
    9f28:	4288      	cmp	r0, r1
    9f2a:	d300      	bcc.n	9f2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c>
    9f2c:	4608      	mov	r0, r1
    9f2e:	b280      	uxth	r0, r0
    9f30:	4770      	bx	lr
    9f32:	07c1      	lsls	r1, r0, #31
    9f34:	d001      	beq.n	9f3a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
    9f36:	2001      	movs	r0, #1
    9f38:	4770      	bx	lr
    9f3a:	0780      	lsls	r0, r0, #30
    9f3c:	d501      	bpl.n	9f42 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40>
    9f3e:	2002      	movs	r0, #2
    9f40:	4770      	bx	lr
    9f42:	2000      	movs	r0, #0
    9f44:	4770      	bx	lr
    9f46:	b510      	push	{r4, lr}
    9f48:	f7fc f93a 	bl	61c0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x14>
    9f4c:	b158      	cbz	r0, 9f66 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x64>
    9f4e:	f7fc f96d 	bl	622c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    9f52:	4604      	mov	r4, r0
    9f54:	f7ff f96f 	bl	9236 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    9f58:	b918      	cbnz	r0, 9f62 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x60>
    9f5a:	4620      	mov	r0, r4
    9f5c:	f7ff f961 	bl	9222 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    9f60:	b108      	cbz	r0, 9f66 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x64>
    9f62:	2000      	movs	r0, #0
    9f64:	bd10      	pop	{r4, pc}
    9f66:	2001      	movs	r0, #1
    9f68:	bd10      	pop	{r4, pc}
    9f6a:	b570      	push	{r4, r5, r6, lr}
    9f6c:	460c      	mov	r4, r1
    9f6e:	4605      	mov	r5, r0
    9f70:	b112      	cbz	r2, 9f78 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x76>
    9f72:	291f      	cmp	r1, #31
    9f74:	d80c      	bhi.n	9f90 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8e>
    9f76:	e016      	b.n	9fa6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    9f78:	f7fa facc 	bl	4514 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    9f7c:	42a0      	cmp	r0, r4
    9f7e:	d201      	bcs.n	9f84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    9f80:	2007      	movs	r0, #7
    9f82:	bd70      	pop	{r4, r5, r6, pc}
    9f84:	4628      	mov	r0, r5
    9f86:	f7ff f954 	bl	9232 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    9f8a:	b118      	cbz	r0, 9f94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x92>
    9f8c:	2c1f      	cmp	r4, #31
    9f8e:	d901      	bls.n	9f94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x92>
    9f90:	2012      	movs	r0, #18
    9f92:	bd70      	pop	{r4, r5, r6, pc}
    9f94:	4628      	mov	r0, r5
    9f96:	f7ff f955 	bl	9244 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    9f9a:	b130      	cbz	r0, 9faa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
    9f9c:	4621      	mov	r1, r4
    9f9e:	4628      	mov	r0, r5
    9fa0:	f7ff f91c 	bl	91dc <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    9fa4:	b118      	cbz	r0, 9fae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xac>
    9fa6:	2000      	movs	r0, #0
    9fa8:	bd70      	pop	{r4, r5, r6, pc}
    9faa:	2042      	movs	r0, #66	; 0x42
    9fac:	bd70      	pop	{r4, r5, r6, pc}
    9fae:	2045      	movs	r0, #69	; 0x45
    9fb0:	bd70      	pop	{r4, r5, r6, pc}
    9fb2:	b510      	push	{r4, lr}
    9fb4:	4604      	mov	r4, r0
    9fb6:	7840      	ldrb	r0, [r0, #1]
    9fb8:	06c1      	lsls	r1, r0, #27
    9fba:	d51c      	bpl.n	9ff6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    9fbc:	07c0      	lsls	r0, r0, #31
    9fbe:	d00b      	beq.n	9fd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
    9fc0:	f7fc fb14 	bl	65ec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    9fc4:	b1b8      	cbz	r0, 9ff6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    9fc6:	7860      	ldrb	r0, [r4, #1]
    9fc8:	06c1      	lsls	r1, r0, #27
    9fca:	d405      	bmi.n	9fd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
    9fcc:	0700      	lsls	r0, r0, #28
    9fce:	d503      	bpl.n	9fd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
    9fd0:	7d20      	ldrb	r0, [r4, #20]
    9fd2:	2802      	cmp	r0, #2
    9fd4:	d10f      	bne.n	9ff6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    9fd6:	e010      	b.n	9ffa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf8>
    9fd8:	7d20      	ldrb	r0, [r4, #20]
    9fda:	2802      	cmp	r0, #2
    9fdc:	d001      	beq.n	9fe2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    9fde:	7ea0      	ldrb	r0, [r4, #26]
    9fe0:	b948      	cbnz	r0, 9ff6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    9fe2:	7860      	ldrb	r0, [r4, #1]
    9fe4:	0700      	lsls	r0, r0, #28
    9fe6:	d408      	bmi.n	9ffa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf8>
    9fe8:	f8d4 0005 	ldr.w	r0, [r4, #5]
    9fec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    9ff0:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    9ff4:	d201      	bcs.n	9ffa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf8>
    9ff6:	2011      	movs	r0, #17
    9ff8:	bd10      	pop	{r4, pc}
    9ffa:	2000      	movs	r0, #0
    9ffc:	bd10      	pop	{r4, pc}
    9ffe:	b538      	push	{r3, r4, r5, lr}
    a000:	4604      	mov	r4, r0
    a002:	7800      	ldrb	r0, [r0, #0]
    a004:	28ef      	cmp	r0, #239	; 0xef
    a006:	d843      	bhi.n	a090 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a008:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a00c:	f8ad 0000 	strh.w	r0, [sp]
    a010:	9800      	ldr	r0, [sp, #0]
    a012:	f000 f8df 	bl	a1d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2d2>
    a016:	b3a0      	cbz	r0, a082 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    a018:	7861      	ldrb	r1, [r4, #1]
    a01a:	0708      	lsls	r0, r1, #28
    a01c:	d40b      	bmi.n	a036 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x134>
    a01e:	f8d4 0002 	ldr.w	r0, [r4, #2]
    a022:	f8d4 3005 	ldr.w	r3, [r4, #5]
    a026:	0a02      	lsrs	r2, r0, #8
    a028:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    a02c:	d830      	bhi.n	a090 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a02e:	2220      	movs	r2, #32
    a030:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    a034:	d82c      	bhi.n	a090 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a036:	7a60      	ldrb	r0, [r4, #9]
    a038:	b318      	cbz	r0, a082 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    a03a:	2807      	cmp	r0, #7
    a03c:	d828      	bhi.n	a090 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a03e:	7aa0      	ldrb	r0, [r4, #10]
    a040:	b128      	cbz	r0, a04e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14c>
    a042:	2801      	cmp	r0, #1
    a044:	d003      	beq.n	a04e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14c>
    a046:	2802      	cmp	r0, #2
    a048:	d001      	beq.n	a04e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14c>
    a04a:	2803      	cmp	r0, #3
    a04c:	d120      	bne.n	a090 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a04e:	074a      	lsls	r2, r1, #29
    a050:	d403      	bmi.n	a05a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    a052:	2802      	cmp	r0, #2
    a054:	d001      	beq.n	a05a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    a056:	2803      	cmp	r0, #3
    a058:	d105      	bne.n	a066 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x164>
    a05a:	7ae0      	ldrb	r0, [r4, #11]
    a05c:	b108      	cbz	r0, a062 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x160>
    a05e:	2801      	cmp	r0, #1
    a060:	d116      	bne.n	a090 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a062:	0748      	lsls	r0, r1, #29
    a064:	d407      	bmi.n	a076 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    a066:	7ca0      	ldrb	r0, [r4, #18]
    a068:	b128      	cbz	r0, a076 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    a06a:	2801      	cmp	r0, #1
    a06c:	d003      	beq.n	a076 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    a06e:	2802      	cmp	r0, #2
    a070:	d001      	beq.n	a076 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    a072:	2803      	cmp	r0, #3
    a074:	d10c      	bne.n	a090 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a076:	06c8      	lsls	r0, r1, #27
    a078:	7d20      	ldrb	r0, [r4, #20]
    a07a:	d503      	bpl.n	a084 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x182>
    a07c:	2801      	cmp	r0, #1
    a07e:	d107      	bne.n	a090 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a080:	e002      	b.n	a088 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x186>
    a082:	e005      	b.n	a090 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a084:	2802      	cmp	r0, #2
    a086:	d003      	beq.n	a090 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    a088:	7e20      	ldrb	r0, [r4, #24]
    a08a:	b118      	cbz	r0, a094 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x192>
    a08c:	2801      	cmp	r0, #1
    a08e:	d001      	beq.n	a094 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x192>
    a090:	2012      	movs	r0, #18
    a092:	bd38      	pop	{r3, r4, r5, pc}
    a094:	2000      	movs	r0, #0
    a096:	bd38      	pop	{r3, r4, r5, pc}
    a098:	28fb      	cmp	r0, #251	; 0xfb
    a09a:	d803      	bhi.n	a0a4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a2>
    a09c:	f640 0048 	movw	r0, #2120	; 0x848
    a0a0:	4281      	cmp	r1, r0
    a0a2:	d901      	bls.n	a0a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a6>
    a0a4:	2011      	movs	r0, #17
    a0a6:	4770      	bx	lr
    a0a8:	2000      	movs	r0, #0
    a0aa:	4770      	bx	lr
    a0ac:	381b      	subs	r0, #27
    a0ae:	28e1      	cmp	r0, #225	; 0xe1
    a0b0:	d206      	bcs.n	a0c0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1be>
    a0b2:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    a0b6:	d303      	bcc.n	a0c0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1be>
    a0b8:	f244 2090 	movw	r0, #17040	; 0x4290
    a0bc:	4281      	cmp	r1, r0
    a0be:	d901      	bls.n	a0c4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c2>
    a0c0:	2012      	movs	r0, #18
    a0c2:	4770      	bx	lr
    a0c4:	2000      	movs	r0, #0
    a0c6:	4770      	bx	lr
    a0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0cc:	4606      	mov	r6, r0
    a0ce:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    a0d2:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    a0d6:	4615      	mov	r5, r2
    a0d8:	302c      	adds	r0, #44	; 0x2c
    a0da:	f7fb ff83 	bl	5fe4 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
    a0de:	4680      	mov	r8, r0
    a0e0:	2102      	movs	r1, #2
    a0e2:	f7fe fe16 	bl	8d12 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    a0e6:	4287      	cmp	r7, r0
    a0e8:	d200      	bcs.n	a0ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ea>
    a0ea:	4638      	mov	r0, r7
    a0ec:	4607      	mov	r7, r0
    a0ee:	2102      	movs	r1, #2
    a0f0:	4640      	mov	r0, r8
    a0f2:	f7fe fe0e 	bl	8d12 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    a0f6:	4284      	cmp	r4, r0
    a0f8:	d200      	bcs.n	a0fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fa>
    a0fa:	4620      	mov	r0, r4
    a0fc:	8831      	ldrh	r1, [r6, #0]
    a0fe:	8029      	strh	r1, [r5, #0]
    a100:	2f1b      	cmp	r7, #27
    a102:	d913      	bls.n	a12c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    a104:	2ffb      	cmp	r7, #251	; 0xfb
    a106:	d300      	bcc.n	a10a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x208>
    a108:	27fb      	movs	r7, #251	; 0xfb
    a10a:	806f      	strh	r7, [r5, #2]
    a10c:	281b      	cmp	r0, #27
    a10e:	d90f      	bls.n	a130 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22e>
    a110:	28fb      	cmp	r0, #251	; 0xfb
    a112:	d300      	bcc.n	a116 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x214>
    a114:	20fb      	movs	r0, #251	; 0xfb
    a116:	80e8      	strh	r0, [r5, #6]
    a118:	4640      	mov	r0, r8
    a11a:	f7ff feff 	bl	9f1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
    a11e:	80a8      	strh	r0, [r5, #4]
    a120:	4640      	mov	r0, r8
    a122:	f7ff fefb 	bl	9f1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
    a126:	8128      	strh	r0, [r5, #8]
    a128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a12c:	271b      	movs	r7, #27
    a12e:	e7ec      	b.n	a10a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x208>
    a130:	201b      	movs	r0, #27
    a132:	e7f0      	b.n	a116 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x214>
    a134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a138:	7890      	ldrb	r0, [r2, #2]
    a13a:	9e06      	ldr	r6, [sp, #24]
    a13c:	461d      	mov	r5, r3
    a13e:	4614      	mov	r4, r2
    a140:	b908      	cbnz	r0, a146 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x244>
    a142:	f7fc fa6d 	bl	6620 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    a146:	78e4      	ldrb	r4, [r4, #3]
    a148:	4607      	mov	r7, r0
    a14a:	b914      	cbnz	r4, a152 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x250>
    a14c:	f7fc fa68 	bl	6620 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    a150:	4604      	mov	r4, r0
    a152:	b16f      	cbz	r7, a170 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26e>
    a154:	b164      	cbz	r4, a170 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26e>
    a156:	4638      	mov	r0, r7
    a158:	f7ff feeb 	bl	9f32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
    a15c:	4620      	mov	r0, r4
    a15e:	f7ff fee8 	bl	9f32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
    a162:	b12f      	cbz	r7, a170 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26e>
    a164:	b124      	cbz	r4, a170 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26e>
    a166:	702f      	strb	r7, [r5, #0]
    a168:	7034      	strb	r4, [r6, #0]
    a16a:	2000      	movs	r0, #0
    a16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a170:	2009      	movs	r0, #9
    a172:	e7fb      	b.n	a16c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26a>
    a174:	207f      	movs	r0, #127	; 0x7f
    a176:	f000 b826 	b.w	a1c6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c4>
    a17a:	b570      	push	{r4, r5, r6, lr}
    a17c:	4605      	mov	r5, r0
    a17e:	f7ff f861 	bl	9244 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a182:	b170      	cbz	r0, a1a2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a0>
    a184:	4628      	mov	r0, r5
    a186:	f7ff fa12 	bl	95ae <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a18a:	2800      	cmp	r0, #0
    a18c:	d008      	beq.n	a1a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x29e>
    a18e:	4628      	mov	r0, r5
    a190:	f7ff fa0a 	bl	95a8 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
    a194:	4604      	mov	r4, r0
    a196:	4628      	mov	r0, r5
    a198:	f7ff f9e0 	bl	955c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    a19c:	b118      	cbz	r0, a1a6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
    a19e:	200c      	movs	r0, #12
    a1a0:	bd70      	pop	{r4, r5, r6, pc}
    a1a2:	2042      	movs	r0, #66	; 0x42
    a1a4:	bd70      	pop	{r4, r5, r6, pc}
    a1a6:	b164      	cbz	r4, a1c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c0>
    a1a8:	8820      	ldrh	r0, [r4, #0]
    a1aa:	f7fe fcf7 	bl	8b9c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    a1ae:	8820      	ldrh	r0, [r4, #0]
    a1b0:	2100      	movs	r1, #0
    a1b2:	f7f9 ff6b 	bl	408c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a1b6:	b120      	cbz	r0, a1c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c0>
    a1b8:	f241 6154 	movw	r1, #5716	; 0x1654
    a1bc:	2039      	movs	r0, #57	; 0x39
    a1be:	f7f9 fd2b 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1c2:	2000      	movs	r0, #0
    a1c4:	bd70      	pop	{r4, r5, r6, pc}
    a1c6:	b508      	push	{r3, lr}
    a1c8:	f640 1288 	movw	r2, #2440	; 0x988
    a1cc:	4669      	mov	r1, sp
    a1ce:	f7f9 fc05 	bl	39dc <mpsl_fem_tx_power_split>
    a1d2:	bd08      	pop	{r3, pc}
    a1d4:	b2c0      	uxtb	r0, r0
    a1d6:	06c1      	lsls	r1, r0, #27
    a1d8:	d40c      	bmi.n	a1f4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2f2>
    a1da:	0681      	lsls	r1, r0, #26
    a1dc:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    a1e0:	d503      	bpl.n	a1ea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
    a1e2:	b9d1      	cbnz	r1, a21a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    a1e4:	0781      	lsls	r1, r0, #30
    a1e6:	d418      	bmi.n	a21a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    a1e8:	e001      	b.n	a1ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ec>
    a1ea:	2900      	cmp	r1, #0
    a1ec:	d1fa      	bne.n	a1e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e2>
    a1ee:	0700      	lsls	r0, r0, #28
    a1f0:	d413      	bmi.n	a21a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    a1f2:	e010      	b.n	a216 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x314>
    a1f4:	0641      	lsls	r1, r0, #25
    a1f6:	d410      	bmi.n	a21a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    a1f8:	0681      	lsls	r1, r0, #26
    a1fa:	d40e      	bmi.n	a21a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    a1fc:	07c1      	lsls	r1, r0, #31
    a1fe:	ea4f 7180 	mov.w	r1, r0, lsl #30
    a202:	d004      	beq.n	a20e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30c>
    a204:	2900      	cmp	r1, #0
    a206:	db02      	blt.n	a20e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30c>
    a208:	0740      	lsls	r0, r0, #29
    a20a:	d404      	bmi.n	a216 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x314>
    a20c:	e005      	b.n	a21a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    a20e:	0701      	lsls	r1, r0, #28
    a210:	d403      	bmi.n	a21a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    a212:	0740      	lsls	r0, r0, #29
    a214:	d401      	bmi.n	a21a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    a216:	2001      	movs	r0, #1
    a218:	4770      	bx	lr
    a21a:	2000      	movs	r0, #0
    a21c:	4770      	bx	lr
    a21e:	b510      	push	{r4, lr}
    a220:	f7fb fec4 	bl	5fac <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    a224:	b110      	cbz	r0, a22c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x32a>
    a226:	f240 110d 	movw	r1, #269	; 0x10d
    a22a:	e004      	b.n	a236 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x334>
    a22c:	f7fb f8ee 	bl	540c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    a230:	b120      	cbz	r0, a23c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    a232:	f44f 7189 	mov.w	r1, #274	; 0x112
    a236:	2001      	movs	r0, #1
    a238:	f7f9 fcee 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a240:	2001      	movs	r0, #1
    a242:	f7fe bae1 	b.w	8808 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    a246:	6802      	ldr	r2, [r0, #0]
    a248:	b912      	cbnz	r2, a250 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x34e>
    a24a:	6001      	str	r1, [r0, #0]
    a24c:	4770      	bx	lr
    a24e:	4602      	mov	r2, r0
    a250:	6850      	ldr	r0, [r2, #4]
    a252:	b108      	cbz	r0, a258 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x356>
    a254:	428a      	cmp	r2, r1
    a256:	d1fa      	bne.n	a24e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x34c>
    a258:	428a      	cmp	r2, r1
    a25a:	d0f7      	beq.n	a24c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x34a>
    a25c:	6051      	str	r1, [r2, #4]
    a25e:	4770      	bx	lr
    a260:	b510      	push	{r4, lr}
    a262:	4604      	mov	r4, r0
    a264:	e002      	b.n	a26c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36a>
    a266:	6820      	ldr	r0, [r4, #0]
    a268:	4780      	blx	r0
    a26a:	6864      	ldr	r4, [r4, #4]
    a26c:	2c00      	cmp	r4, #0
    a26e:	d1fa      	bne.n	a266 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x364>
    a270:	bd10      	pop	{r4, pc}

0000a272 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
    a272:	f7f9 b919 	b.w	34a8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    a276:	0001      	.short	0x0001
    a278:	0002000b 	.word	0x0002000b
    a27c:	0005000a 	.word	0x0005000a
    a280:	000a0009 	.word	0x000a0009
    a284:	00140008 	.word	0x00140008
    a288:	001e0007 	.word	0x001e0007
    a28c:	00320006 	.word	0x00320006
    a290:	004b0005 	.word	0x004b0005
    a294:	00640004 	.word	0x00640004
    a298:	00960003 	.word	0x00960003
    a29c:	00fa0002 	.word	0x00fa0002
    a2a0:	01f40001 	.word	0x01f40001
	...

0000a2a6 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    a2a6:	b510      	push	{r4, lr}
    a2a8:	f7fc fc1e 	bl	6ae8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    a2ac:	f000 f818 	bl	a2e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    a2b0:	f7fc fa2a 	bl	6708 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    a2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a2b8:	f7fc ba90 	b.w	67dc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000a2bc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    a2bc:	b510      	push	{r4, lr}
    a2be:	24c8      	movs	r4, #200	; 0xc8
    a2c0:	1e64      	subs	r4, r4, #1
    a2c2:	b2e4      	uxtb	r4, r4
    a2c4:	f7fc fa3e 	bl	6744 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    a2c8:	2802      	cmp	r0, #2
    a2ca:	d003      	beq.n	a2d4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    a2cc:	2801      	cmp	r0, #1
    a2ce:	d000      	beq.n	a2d2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    a2d0:	2000      	movs	r0, #0
    a2d2:	bd10      	pop	{r4, pc}
    a2d4:	2c00      	cmp	r4, #0
    a2d6:	d1f3      	bne.n	a2c0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    a2d8:	21b1      	movs	r1, #177	; 0xb1
    a2da:	203b      	movs	r0, #59	; 0x3b
    a2dc:	f7f9 fc9c 	bl	3c18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000a2e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    a2e0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    a2e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    a2e8:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    a2ec:	f3bf 8f4f 	dsb	sy
    a2f0:	f3bf 8f6f 	isb	sy
    a2f4:	f7fc baa6 	b.w	6844 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    a2f8:	2800      	cmp	r0, #0
    a2fa:	db09      	blt.n	a310 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    a2fc:	f000 021f 	and.w	r2, r0, #31
    a300:	2101      	movs	r1, #1
    a302:	4091      	lsls	r1, r2
    a304:	0940      	lsrs	r0, r0, #5
    a306:	0080      	lsls	r0, r0, #2
    a308:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a30c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    a310:	4770      	bx	lr
    a312:	2800      	cmp	r0, #0
    a314:	db0d      	blt.n	a332 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    a316:	f000 021f 	and.w	r2, r0, #31
    a31a:	2101      	movs	r1, #1
    a31c:	4091      	lsls	r1, r2
    a31e:	0940      	lsrs	r0, r0, #5
    a320:	0080      	lsls	r0, r0, #2
    a322:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a326:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    a32a:	f3bf 8f4f 	dsb	sy
    a32e:	f3bf 8f6f 	isb	sy
    a332:	4770      	bx	lr
    a334:	5840      	ldr	r0, [r0, r1]
    a336:	2800      	cmp	r0, #0
    a338:	d000      	beq.n	a33c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
    a33a:	2001      	movs	r0, #1
    a33c:	4770      	bx	lr
    a33e:	5840      	ldr	r0, [r0, r1]
    a340:	2800      	cmp	r0, #0
    a342:	d000      	beq.n	a346 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
    a344:	2001      	movs	r0, #1
    a346:	4770      	bx	lr

0000a348 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    a348:	b510      	push	{r4, lr}
    a34a:	4604      	mov	r4, r0
    a34c:	4608      	mov	r0, r1
    a34e:	f7fc fce5 	bl	6d1c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a352:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a356:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    a35a:	fbb0 f0f1 	udiv	r0, r0, r1
    a35e:	1a20      	subs	r0, r4, r0
    a360:	1e80      	subs	r0, r0, #2
    a362:	bd10      	pop	{r4, pc}

0000a364 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    a364:	b510      	push	{r4, lr}
    a366:	4604      	mov	r4, r0
    a368:	4608      	mov	r0, r1
    a36a:	f7fc fcd7 	bl	6d1c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    a36e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a372:	fbb0 f0f1 	udiv	r0, r0, r1
    a376:	1a20      	subs	r0, r4, r0
    a378:	bd10      	pop	{r4, pc}
    a37a:	ecd8      	.short	0xecd8
    a37c:	fcf8f4f0 	.word	0xfcf8f4f0
    a380:	04030200 	.word	0x04030200
    a384:	08070605 	.word	0x08070605
	...
    a39c:	01010101 	.word	0x01010101
    a3a0:	02020202 	.word	0x02020202
    a3a4:	03030303 	.word	0x03030303
    a3a8:	04040404 	.word	0x04040404
    a3ac:	05050505 	.word	0x05050505
    a3b0:	08070606 	.word	0x08070606
    a3b4:	0c0b0a09 	.word	0x0c0b0a09
    a3b8:	0000000d 	.word	0x0000000d
	...
    a3cc:	01010100 	.word	0x01010100
    a3d0:	02020201 	.word	0x02020201
    a3d4:	03030302 	.word	0x03030302
    a3d8:	04040403 	.word	0x04040403
    a3dc:	05050504 	.word	0x05050504
    a3e0:	06060605 	.word	0x06060605
    a3e4:	00000908 	.word	0x00000908

0000a3e8 <bt_ready>:
	BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN),
};


static void bt_ready(int err)
{
    a3e8:	b570      	push	{r4, r5, r6, lr}
    a3ea:	b09a      	sub	sp, #104	; 0x68
	char addr_s[BT_ADDR_LE_STR_LEN];
	bt_addr_le_t addr = {0};
    a3ec:	2300      	movs	r3, #0
	size_t count = 1;
    a3ee:	2601      	movs	r6, #1
	bt_addr_le_t addr = {0};
    a3f0:	9308      	str	r3, [sp, #32]
	size_t count = 1;
    a3f2:	9607      	str	r6, [sp, #28]
	bt_addr_le_t addr = {0};
    a3f4:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23

	if (err) {
    a3f8:	2800      	cmp	r0, #0
    a3fa:	d135      	bne.n	a468 <bt_ready+0x80>
		return;
	}

	/* Start advertising */
	err = bt_le_adv_start(BT_LE_ADV_NCONN_IDENTITY, ad, ARRAY_SIZE(ad),
    a3fc:	4d21      	ldr	r5, [pc, #132]	; (a484 <bt_ready+0x9c>)
    a3fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a400:	ac0d      	add	r4, sp, #52	; 0x34
    a402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a404:	682b      	ldr	r3, [r5, #0]
    a406:	6023      	str	r3, [r4, #0]
    a408:	491f      	ldr	r1, [pc, #124]	; (a488 <bt_ready+0xa0>)
    a40a:	4b20      	ldr	r3, [pc, #128]	; (a48c <bt_ready+0xa4>)
    a40c:	9600      	str	r6, [sp, #0]
    a40e:	2203      	movs	r2, #3
    a410:	a80d      	add	r0, sp, #52	; 0x34
    a412:	f002 fa17 	bl	c844 <bt_le_adv_start>
			      sd, ARRAY_SIZE(sd));
	if (err) {
    a416:	bb38      	cbnz	r0, a468 <bt_ready+0x80>
	 * bt_le_oob_get_local().  For non-connectable non-identity
	 * advertising an non-resolvable private address is used;
	 * there is no API to retrieve that.
	 */

	bt_id_get(&addr, &count);
    a418:	a907      	add	r1, sp, #28
    a41a:	a808      	add	r0, sp, #32
    a41c:	f001 ff64 	bl	c2e8 <bt_id_get>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    a420:	f89d 3020 	ldrb.w	r3, [sp, #32]
    a424:	ac0a      	add	r4, sp, #40	; 0x28
    a426:	2b03      	cmp	r3, #3
    a428:	d826      	bhi.n	a478 <bt_ready+0x90>
    a42a:	e8df f003 	tbb	[pc, r3]
    a42e:	1f02      	.short	0x1f02
    a430:	2321      	.short	0x2321
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    a432:	4917      	ldr	r1, [pc, #92]	; (a490 <bt_ready+0xa8>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    a434:	4620      	mov	r0, r4
    a436:	f006 fb0d 	bl	10a54 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    a43a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    a43e:	9304      	str	r3, [sp, #16]
    a440:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    a444:	9303      	str	r3, [sp, #12]
    a446:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a44a:	9302      	str	r3, [sp, #8]
    a44c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    a450:	9301      	str	r3, [sp, #4]
    a452:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    a456:	9300      	str	r3, [sp, #0]
    a458:	4a0e      	ldr	r2, [pc, #56]	; (a494 <bt_ready+0xac>)
    a45a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    a45e:	9405      	str	r4, [sp, #20]
    a460:	211e      	movs	r1, #30
    a462:	a812      	add	r0, sp, #72	; 0x48
    a464:	f005 ffb6 	bl	103d4 <snprintk>
	bt_addr_le_to_str(&addr, addr_s, sizeof(addr_s));
}
    a468:	b01a      	add	sp, #104	; 0x68
    a46a:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    a46c:	490a      	ldr	r1, [pc, #40]	; (a498 <bt_ready+0xb0>)
    a46e:	e7e1      	b.n	a434 <bt_ready+0x4c>
		strcpy(type, "public-id");
    a470:	490a      	ldr	r1, [pc, #40]	; (a49c <bt_ready+0xb4>)
    a472:	e7df      	b.n	a434 <bt_ready+0x4c>
		strcpy(type, "random-id");
    a474:	490a      	ldr	r1, [pc, #40]	; (a4a0 <bt_ready+0xb8>)
    a476:	e7dd      	b.n	a434 <bt_ready+0x4c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    a478:	4a0a      	ldr	r2, [pc, #40]	; (a4a4 <bt_ready+0xbc>)
    a47a:	210a      	movs	r1, #10
    a47c:	4620      	mov	r0, r4
    a47e:	f005 ffa9 	bl	103d4 <snprintk>
		break;
    a482:	e7da      	b.n	a43a <bt_ready+0x52>
    a484:	00012200 	.word	0x00012200
    a488:	00012230 	.word	0x00012230
    a48c:	00012228 	.word	0x00012228
    a490:	00012408 	.word	0x00012408
    a494:	00012431 	.word	0x00012431
    a498:	0001240f 	.word	0x0001240f
    a49c:	00012416 	.word	0x00012416
    a4a0:	00012420 	.word	0x00012420
    a4a4:	0001242a 	.word	0x0001242a

0000a4a8 <set_ble_msg>:

void set_ble_msg (uint8_t vbat, uint8_t fsr1, uint8_t fsr2, uint8_t fsr3)
{
    a4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4ac:	b088      	sub	sp, #32
    a4ae:	4680      	mov	r8, r0
    a4b0:	460f      	mov	r7, r1
    a4b2:	4616      	mov	r6, r2
    a4b4:	461d      	mov	r5, r3
    int err;
    err = bt_le_adv_stop();
    a4b6:	f002 f9f7 	bl	c8a8 <bt_le_adv_stop>
    k_msleep(5);

    ble_msg[2] = vbat;
    a4ba:	4c0d      	ldr	r4, [pc, #52]	; (a4f0 <set_ble_msg+0x48>)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    a4bc:	2100      	movs	r1, #0
    a4be:	20a4      	movs	r0, #164	; 0xa4
    a4c0:	f005 fc00 	bl	fcc4 <z_impl_k_sleep>
    ble_msg[3] = fsr1;
    ble_msg[4] = fsr2;
    ble_msg[5] = fsr3;
    a4c4:	7165      	strb	r5, [r4, #5]
    err = bt_le_adv_start(BT_LE_ADV_NCONN_IDENTITY, ad, ARRAY_SIZE(ad),
    a4c6:	4d0b      	ldr	r5, [pc, #44]	; (a4f4 <set_ble_msg+0x4c>)
    ble_msg[2] = vbat;
    a4c8:	f884 8002 	strb.w	r8, [r4, #2]
    err = bt_le_adv_start(BT_LE_ADV_NCONN_IDENTITY, ad, ARRAY_SIZE(ad),
    a4cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ble_msg[3] = fsr1;
    a4ce:	70e7      	strb	r7, [r4, #3]
    ble_msg[4] = fsr2;
    a4d0:	7126      	strb	r6, [r4, #4]
    err = bt_le_adv_start(BT_LE_ADV_NCONN_IDENTITY, ad, ARRAY_SIZE(ad),
    a4d2:	ac03      	add	r4, sp, #12
    a4d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a4d6:	682b      	ldr	r3, [r5, #0]
    a4d8:	6023      	str	r3, [r4, #0]
    a4da:	2301      	movs	r3, #1
    a4dc:	9300      	str	r3, [sp, #0]
    a4de:	4906      	ldr	r1, [pc, #24]	; (a4f8 <set_ble_msg+0x50>)
    a4e0:	4b06      	ldr	r3, [pc, #24]	; (a4fc <set_ble_msg+0x54>)
    a4e2:	2203      	movs	r2, #3
    a4e4:	a803      	add	r0, sp, #12
    a4e6:	f002 f9ad 	bl	c844 <bt_le_adv_start>
            sd, ARRAY_SIZE(sd));
}
    a4ea:	b008      	add	sp, #32
    a4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4f0:	2000040f 	.word	0x2000040f
    a4f4:	00012200 	.word	0x00012200
    a4f8:	00012230 	.word	0x00012230
    a4fc:	00012228 	.word	0x00012228

0000a500 <get_adc_readings>:

void get_adc_readings (uint8_t* array)
{
    a500:	b5f0      	push	{r4, r5, r6, r7, lr}
    a502:	b087      	sub	sp, #28
    a504:	4604      	mov	r4, r0
    int16_t buf;
	struct adc_sequence sequence = {
    a506:	2214      	movs	r2, #20
    a508:	2100      	movs	r1, #0
    a50a:	a801      	add	r0, sp, #4
    a50c:	f006 fad7 	bl	10abe <memset>
    a510:	f10d 0302 	add.w	r3, sp, #2
    a514:	9303      	str	r3, [sp, #12]
    a516:	4d10      	ldr	r5, [pc, #64]	; (a558 <get_adc_readings+0x58>)
    a518:	2302      	movs	r3, #2
    a51a:	1e66      	subs	r6, r4, #1
    a51c:	9304      	str	r3, [sp, #16]
		.buffer = &buf,
		/* buffer size in bytes, not number of samples */
		.buffer_size = sizeof(buf),
	};
    for(uint8_t i = 0; i < ARRAY_SIZE(adc_channels); i++)
    a51e:	3403      	adds	r4, #3
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    a520:	2701      	movs	r7, #1
	if (!spec->channel_cfg_dt_node_exists) {
    a522:	796b      	ldrb	r3, [r5, #5]
    a524:	b14b      	cbz	r3, a53a <get_adc_readings+0x3a>
	seq->channels = BIT(spec->channel_id);
    a526:	792b      	ldrb	r3, [r5, #4]
    a528:	fa07 f303 	lsl.w	r3, r7, r3
    a52c:	9302      	str	r3, [sp, #8]
	seq->resolution = spec->resolution;
    a52e:	7c2b      	ldrb	r3, [r5, #16]
    a530:	f88d 3014 	strb.w	r3, [sp, #20]
	seq->oversampling = spec->oversampling;
    a534:	7c6b      	ldrb	r3, [r5, #17]
    a536:	f88d 3015 	strb.w	r3, [sp, #21]
    {
        // Iniitlize the adc read sequence
        (void)adc_sequence_init_dt(&adc_channels[i], &sequence);
        // Read the ADC channel (internall updates sequence.buf)
        (void)adc_read(adc_channels[i].dev, &sequence);
    a53a:	f855 0b14 	ldr.w	r0, [r5], #20
	return api->read(dev, sequence);
    a53e:	6883      	ldr	r3, [r0, #8]
    a540:	a901      	add	r1, sp, #4
    a542:	685b      	ldr	r3, [r3, #4]
    a544:	4798      	blx	r3
        // Upcast the buffer to a int32_t from int16_t
        array[i] = (uint8_t)buf; // 3.5V = 8192, 4V = <optimized out>
    a546:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a54a:	f806 3f01 	strb.w	r3, [r6, #1]!
    for(uint8_t i = 0; i < ARRAY_SIZE(adc_channels); i++)
    a54e:	42a6      	cmp	r6, r4
    a550:	d1e7      	bne.n	a522 <get_adc_readings+0x22>
        // Do the conversion to Mv. based on the reference voltage
        // array[i] *= ADC_FACTOR; // map the value read to the adc value read
    }
}
    a552:	b007      	add	sp, #28
    a554:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a556:	bf00      	nop
    a558:	00012248 	.word	0x00012248

0000a55c <main>:

// Before main executes, zephyr-the RTOS, automatically initializes the pin in/out and set's up the clock
void main(void)
{
    a55c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    volatile int err;
    volatile uint8_t adc_readings[4] = {0, 0, 0, 0};

  	/* Initialize the Bluetooth Subsystem */
    err = bt_enable(bt_ready); //causes reset if used in gdb
    a55e:	4814      	ldr	r0, [pc, #80]	; (a5b0 <main+0x54>)
    a560:	4d14      	ldr	r5, [pc, #80]	; (a5b4 <main+0x58>)
    volatile uint8_t adc_readings[4] = {0, 0, 0, 0};
    a562:	2400      	movs	r4, #0
    a564:	9401      	str	r4, [sp, #4]
    err = bt_enable(bt_ready); //causes reset if used in gdb
    a566:	f001 fdb3 	bl	c0d0 <bt_enable>
    a56a:	9000      	str	r0, [sp, #0]
	if (!spec->channel_cfg_dt_node_exists) {
    a56c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    a570:	b12b      	cbz	r3, a57e <main+0x22>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    a572:	f855 0c06 	ldr.w	r0, [r5, #-6]
	return api->channel_setup(dev, channel_cfg);
    a576:	6883      	ldr	r3, [r0, #8]
    a578:	4629      	mov	r1, r5
    a57a:	681b      	ldr	r3, [r3, #0]
    a57c:	4798      	blx	r3
    // Initialization
    // gpio_pin_configure_dt(&blue_led, GPIO_OUTPUT_ACTIVE);
    // gpio_pin_configure_dt(&red_led, GPIO_OUTPUT_ACTIVE);
    // gpio_pin_configure_dt(&green_led, GPIO_OUTPUT_ACTIVE);

    for(uint8_t i = 0; i < ARRAY_SIZE(adc_channels); i++)
    a57e:	3405      	adds	r4, #5
    a580:	2c14      	cmp	r4, #20
    a582:	f105 0514 	add.w	r5, r5, #20
    a586:	d1f1      	bne.n	a56c <main+0x10>
    a588:	2100      	movs	r1, #0
    a58a:	f640 40cd 	movw	r0, #3277	; 0xccd
    a58e:	f005 fb99 	bl	fcc4 <z_impl_k_sleep>
    // gpio_pin_set_dt(&blue_led, LED_OFF);
    // gpio_pin_set_dt(&red_led, LED_OFF);
    // gpio_pin_set_dt(&green_led, LED_OFF);
    while(1){
        k_msleep(100);
        get_adc_readings(adc_readings);
    a592:	a801      	add	r0, sp, #4
    a594:	f7ff ffb4 	bl	a500 <get_adc_readings>
        set_ble_msg (adc_readings[0], adc_readings[1], adc_readings[2], adc_readings[3]);
    a598:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a59c:	f89d 1005 	ldrb.w	r1, [sp, #5]
    a5a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a5a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a5a8:	f7ff ff7e 	bl	a4a8 <set_ble_msg>
    while(1){
    a5ac:	e7ec      	b.n	a588 <main+0x2c>
    a5ae:	bf00      	nop
    a5b0:	0000a3e9 	.word	0x0000a3e9
    a5b4:	0001224e 	.word	0x0001224e

0000a5b8 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    a5b8:	4b01      	ldr	r3, [pc, #4]	; (a5c0 <char_out+0x8>)
    a5ba:	681b      	ldr	r3, [r3, #0]
    a5bc:	4718      	bx	r3
    a5be:	bf00      	nop
    a5c0:	20000370 	.word	0x20000370

0000a5c4 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    a5c4:	b507      	push	{r0, r1, r2, lr}
    a5c6:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    a5c8:	2100      	movs	r1, #0
    a5ca:	4602      	mov	r2, r0
    a5cc:	9100      	str	r1, [sp, #0]
    a5ce:	4803      	ldr	r0, [pc, #12]	; (a5dc <vprintk+0x18>)
    a5d0:	f000 f92a 	bl	a828 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    a5d4:	b003      	add	sp, #12
    a5d6:	f85d fb04 	ldr.w	pc, [sp], #4
    a5da:	bf00      	nop
    a5dc:	0000a5b9 	.word	0x0000a5b9

0000a5e0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    a5e0:	b530      	push	{r4, r5, lr}
    a5e2:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    a5e4:	2500      	movs	r5, #0
    a5e6:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    a5ea:	4604      	mov	r4, r0
    a5ec:	9500      	str	r5, [sp, #0]
    a5ee:	a903      	add	r1, sp, #12
    a5f0:	4805      	ldr	r0, [pc, #20]	; (a608 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    a5f2:	9505      	str	r5, [sp, #20]
    a5f4:	f000 f918 	bl	a828 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    a5f8:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    a5fc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    a5fe:	bfb8      	it	lt
    a600:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    a602:	b007      	add	sp, #28
    a604:	bd30      	pop	{r4, r5, pc}
    a606:	bf00      	nop
    a608:	00010395 	.word	0x00010395

0000a60c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    a60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a610:	8b05      	ldrh	r5, [r0, #24]
{
    a612:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    a614:	0728      	lsls	r0, r5, #28
{
    a616:	4690      	mov	r8, r2
	if (processing) {
    a618:	d411      	bmi.n	a63e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    a61a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a61c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    a620:	f040 80cd 	bne.w	a7be <process_event+0x1b2>
			evt = process_recheck(mgr);
    a624:	4620      	mov	r0, r4
    a626:	f006 f8b1 	bl	1078c <process_recheck>
		}

		if (evt == EVT_NOP) {
    a62a:	b178      	cbz	r0, a64c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    a62c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a62e:	8b21      	ldrh	r1, [r4, #24]
    a630:	2804      	cmp	r0, #4
    a632:	d811      	bhi.n	a658 <process_event+0x4c>
    a634:	e8df f000 	tbb	[pc, r0]
    a638:	856d10c3 	.word	0x856d10c3
    a63c:	95          	.byte	0x95
    a63d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    a63e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    a640:	bf0c      	ite	eq
    a642:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a646:	f045 0520 	orrne.w	r5, r5, #32
    a64a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    a64c:	f388 8811 	msr	BASEPRI, r8
    a650:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    a654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a658:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a65c:	45aa      	cmp	sl, r5
    a65e:	f000 80a6 	beq.w	a7ae <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    a662:	2700      	movs	r7, #0
    a664:	46b9      	mov	r9, r7
    a666:	463e      	mov	r6, r7
    a668:	68a3      	ldr	r3, [r4, #8]
    a66a:	2b00      	cmp	r3, #0
    a66c:	f000 80bd 	beq.w	a7ea <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a670:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    a674:	8321      	strh	r1, [r4, #24]
    a676:	f388 8811 	msr	BASEPRI, r8
    a67a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    a67e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a680:	2900      	cmp	r1, #0
    a682:	f000 80bb 	beq.w	a7fc <process_event+0x1f0>
	return node->next;
    a686:	680d      	ldr	r5, [r1, #0]
    a688:	2900      	cmp	r1, #0
    a68a:	f000 80b7 	beq.w	a7fc <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    a68e:	f8d1 8004 	ldr.w	r8, [r1, #4]
    a692:	4633      	mov	r3, r6
    a694:	4652      	mov	r2, sl
    a696:	4620      	mov	r0, r4
    a698:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a69a:	2d00      	cmp	r5, #0
    a69c:	d076      	beq.n	a78c <process_event+0x180>
    a69e:	682b      	ldr	r3, [r5, #0]
    a6a0:	4629      	mov	r1, r5
    a6a2:	461d      	mov	r5, r3
    a6a4:	e7f0      	b.n	a688 <process_event+0x7c>
    a6a6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    a6aa:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    a6ac:	2a01      	cmp	r2, #1
    a6ae:	d81b      	bhi.n	a6e8 <process_event+0xdc>
	list->head = NULL;
    a6b0:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a6b2:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    a6b6:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    a6b8:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a6ba:	b289      	uxth	r1, r1
	list->tail = NULL;
    a6bc:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    a6c0:	d109      	bne.n	a6d6 <process_event+0xca>
    a6c2:	463b      	mov	r3, r7
    a6c4:	e003      	b.n	a6ce <process_event+0xc2>
				mgr->refs += 1U;
    a6c6:	8b62      	ldrh	r2, [r4, #26]
    a6c8:	3201      	adds	r2, #1
    a6ca:	8362      	strh	r2, [r4, #26]
	return node->next;
    a6cc:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a6ce:	2b00      	cmp	r3, #0
    a6d0:	d1f9      	bne.n	a6c6 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a6d2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    a6d6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    a6d8:	4620      	mov	r0, r4
    a6da:	f006 f857 	bl	1078c <process_recheck>
    a6de:	2800      	cmp	r0, #0
    a6e0:	d07b      	beq.n	a7da <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a6e2:	f041 0120 	orr.w	r1, r1, #32
    a6e6:	e077      	b.n	a7d8 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    a6e8:	2b04      	cmp	r3, #4
    a6ea:	d10a      	bne.n	a702 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a6ec:	f021 0107 	bic.w	r1, r1, #7
    a6f0:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    a6f2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    a6f4:	4620      	mov	r0, r4
    a6f6:	f006 f849 	bl	1078c <process_recheck>
    a6fa:	b110      	cbz	r0, a702 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a6fc:	f041 0120 	orr.w	r1, r1, #32
    a700:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a702:	8b21      	ldrh	r1, [r4, #24]
    a704:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a708:	45aa      	cmp	sl, r5
    a70a:	d050      	beq.n	a7ae <process_event+0x1a2>
    a70c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    a70e:	46b9      	mov	r9, r7
    a710:	e7aa      	b.n	a668 <process_event+0x5c>
			transit = mgr->transitions->start;
    a712:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a714:	f021 0107 	bic.w	r1, r1, #7
    a718:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    a71c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    a71e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    a722:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    a724:	d12d      	bne.n	a782 <process_event+0x176>
		    || (transit != NULL)) {
    a726:	f1b9 0f00 	cmp.w	r9, #0
    a72a:	d040      	beq.n	a7ae <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a72c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    a730:	8321      	strh	r1, [r4, #24]
    a732:	f388 8811 	msr	BASEPRI, r8
    a736:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    a73a:	493a      	ldr	r1, [pc, #232]	; (a824 <process_event+0x218>)
    a73c:	4620      	mov	r0, r4
    a73e:	47c8      	blx	r9
    a740:	e029      	b.n	a796 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a742:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    a746:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a748:	f041 0104 	orr.w	r1, r1, #4
    a74c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    a74e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    a750:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    a754:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    a756:	d0e6      	beq.n	a726 <process_event+0x11a>
    a758:	2700      	movs	r7, #0
		res = 0;
    a75a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a75c:	f04f 0a04 	mov.w	sl, #4
    a760:	e782      	b.n	a668 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a762:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    a766:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a768:	f041 0105 	orr.w	r1, r1, #5
    a76c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    a76e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    a770:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    a774:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    a776:	d0d6      	beq.n	a726 <process_event+0x11a>
    a778:	2700      	movs	r7, #0
		res = 0;
    a77a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a77c:	f04f 0a05 	mov.w	sl, #5
    a780:	e772      	b.n	a668 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    a782:	2700      	movs	r7, #0
		res = 0;
    a784:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a786:	f04f 0a06 	mov.w	sl, #6
    a78a:	e76d      	b.n	a668 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a78c:	462b      	mov	r3, r5
    a78e:	e787      	b.n	a6a0 <process_event+0x94>
			if (transit != NULL) {
    a790:	f1b9 0f00 	cmp.w	r9, #0
    a794:	d1d1      	bne.n	a73a <process_event+0x12e>
	__asm__ volatile(
    a796:	f04f 0340 	mov.w	r3, #64	; 0x40
    a79a:	f3ef 8811 	mrs	r8, BASEPRI
    a79e:	f383 8812 	msr	BASEPRI_MAX, r3
    a7a2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    a7a6:	8b23      	ldrh	r3, [r4, #24]
    a7a8:	f023 0308 	bic.w	r3, r3, #8
    a7ac:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    a7ae:	8b25      	ldrh	r5, [r4, #24]
    a7b0:	06ea      	lsls	r2, r5, #27
    a7b2:	d52e      	bpl.n	a812 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    a7b4:	f025 0310 	bic.w	r3, r5, #16
    a7b8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    a7ba:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    a7be:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a7c0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    a7c2:	2e00      	cmp	r6, #0
    a7c4:	f6bf af6f 	bge.w	a6a6 <process_event+0x9a>
	list->head = NULL;
    a7c8:	2300      	movs	r3, #0
		*clients = mgr->clients;
    a7ca:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    a7cc:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a7d0:	f021 0107 	bic.w	r1, r1, #7
    a7d4:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a7d8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a7da:	8b21      	ldrh	r1, [r4, #24]
    a7dc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a7e0:	45aa      	cmp	sl, r5
    a7e2:	f04f 0900 	mov.w	r9, #0
    a7e6:	f47f af3f 	bne.w	a668 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    a7ea:	2f00      	cmp	r7, #0
    a7ec:	d09b      	beq.n	a726 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a7ee:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    a7f2:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    a7f4:	f388 8811 	msr	BASEPRI, r8
    a7f8:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    a7fc:	2f00      	cmp	r7, #0
    a7fe:	d0c7      	beq.n	a790 <process_event+0x184>
	return node->next;
    a800:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    a802:	4639      	mov	r1, r7
    a804:	4633      	mov	r3, r6
    a806:	4652      	mov	r2, sl
    a808:	4620      	mov	r0, r4
    a80a:	f005 ffeb 	bl	107e4 <notify_one>
	list->head = node;
    a80e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    a810:	e7f4      	b.n	a7fc <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    a812:	06ab      	lsls	r3, r5, #26
    a814:	f57f af1a 	bpl.w	a64c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a818:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    a81c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    a81e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    a822:	e6ff      	b.n	a624 <process_event+0x18>
    a824:	00010811 	.word	0x00010811

0000a828 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a82c:	4681      	mov	r9, r0
    a82e:	b095      	sub	sp, #84	; 0x54
    a830:	468b      	mov	fp, r1
    a832:	4617      	mov	r7, r2
    a834:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    a836:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    a838:	7838      	ldrb	r0, [r7, #0]
    a83a:	b908      	cbnz	r0, a840 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    a83c:	4628      	mov	r0, r5
    a83e:	e358      	b.n	aef2 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
    a840:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    a842:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    a844:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    a846:	d006      	beq.n	a856 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    a848:	4659      	mov	r1, fp
    a84a:	47c8      	blx	r9
    a84c:	2800      	cmp	r0, #0
    a84e:	f2c0 8350 	blt.w	aef2 <z_cbvprintf_impl+0x6ca>
    a852:	3501      	adds	r5, #1
		if (bps == NULL) {
    a854:	e1fb      	b.n	ac4e <z_cbvprintf_impl+0x426>
		} state = {
    a856:	2218      	movs	r2, #24
    a858:	2100      	movs	r1, #0
    a85a:	a80e      	add	r0, sp, #56	; 0x38
    a85c:	f006 f92f 	bl	10abe <memset>
	if (*sp == '%') {
    a860:	787b      	ldrb	r3, [r7, #1]
    a862:	2b25      	cmp	r3, #37	; 0x25
    a864:	d07d      	beq.n	a962 <z_cbvprintf_impl+0x13a>
    a866:	2300      	movs	r3, #0
    a868:	1c78      	adds	r0, r7, #1
    a86a:	4698      	mov	r8, r3
    a86c:	469e      	mov	lr, r3
    a86e:	469c      	mov	ip, r3
    a870:	461e      	mov	r6, r3
    a872:	4601      	mov	r1, r0
		switch (*sp) {
    a874:	f810 2b01 	ldrb.w	r2, [r0], #1
    a878:	2a2b      	cmp	r2, #43	; 0x2b
    a87a:	f000 80a1 	beq.w	a9c0 <z_cbvprintf_impl+0x198>
    a87e:	f200 8098 	bhi.w	a9b2 <z_cbvprintf_impl+0x18a>
    a882:	2a20      	cmp	r2, #32
    a884:	f000 809f 	beq.w	a9c6 <z_cbvprintf_impl+0x19e>
    a888:	2a23      	cmp	r2, #35	; 0x23
    a88a:	f000 809f 	beq.w	a9cc <z_cbvprintf_impl+0x1a4>
    a88e:	b12b      	cbz	r3, a89c <z_cbvprintf_impl+0x74>
    a890:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a898:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    a89c:	f1b8 0f00 	cmp.w	r8, #0
    a8a0:	d005      	beq.n	a8ae <z_cbvprintf_impl+0x86>
    a8a2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a8a6:	f043 0320 	orr.w	r3, r3, #32
    a8aa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    a8ae:	f1be 0f00 	cmp.w	lr, #0
    a8b2:	d005      	beq.n	a8c0 <z_cbvprintf_impl+0x98>
    a8b4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a8b8:	f043 0310 	orr.w	r3, r3, #16
    a8bc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    a8c0:	f1bc 0f00 	cmp.w	ip, #0
    a8c4:	d005      	beq.n	a8d2 <z_cbvprintf_impl+0xaa>
    a8c6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a8ca:	f043 0308 	orr.w	r3, r3, #8
    a8ce:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    a8d2:	b12e      	cbz	r6, a8e0 <z_cbvprintf_impl+0xb8>
    a8d4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a8d8:	f043 0304 	orr.w	r3, r3, #4
    a8dc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    a8e0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a8e4:	f003 0044 	and.w	r0, r3, #68	; 0x44
    a8e8:	2844      	cmp	r0, #68	; 0x44
    a8ea:	d103      	bne.n	a8f4 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    a8ec:	f36f 1386 	bfc	r3, #6, #1
    a8f0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    a8f4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    a8f8:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    a8fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a8fe:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    a902:	d17f      	bne.n	aa04 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    a904:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    a908:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    a90c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    a90e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    a912:	781a      	ldrb	r2, [r3, #0]
    a914:	2a2e      	cmp	r2, #46	; 0x2e
    a916:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    a91a:	bf0c      	ite	eq
    a91c:	2101      	moveq	r1, #1
    a91e:	2100      	movne	r1, #0
    a920:	f361 0241 	bfi	r2, r1, #1, #1
    a924:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    a928:	d178      	bne.n	aa1c <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    a92a:	785a      	ldrb	r2, [r3, #1]
    a92c:	2a2a      	cmp	r2, #42	; 0x2a
    a92e:	d06e      	beq.n	aa0e <z_cbvprintf_impl+0x1e6>
	++sp;
    a930:	3301      	adds	r3, #1
	size_t val = 0;
    a932:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    a934:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    a938:	4619      	mov	r1, r3
    a93a:	f811 0b01 	ldrb.w	r0, [r1], #1
    a93e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a942:	2e09      	cmp	r6, #9
    a944:	f240 8095 	bls.w	aa72 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    a948:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    a94c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    a94e:	f3c1 0040 	ubfx	r0, r1, #1, #1
    a952:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    a956:	460a      	mov	r2, r1
    a958:	f360 0241 	bfi	r2, r0, #1, #1
    a95c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    a960:	e05c      	b.n	aa1c <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    a962:	1cba      	adds	r2, r7, #2
    a964:	9203      	str	r2, [sp, #12]
    a966:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    a96a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    a96e:	07da      	lsls	r2, r3, #31
    a970:	f140 812e 	bpl.w	abd0 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    a974:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    a978:	f1b8 0f00 	cmp.w	r8, #0
    a97c:	da07      	bge.n	a98e <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    a97e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    a982:	f042 0204 	orr.w	r2, r2, #4
    a986:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    a98a:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    a98e:	075e      	lsls	r6, r3, #29
    a990:	f140 8127 	bpl.w	abe2 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    a994:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    a998:	f1ba 0f00 	cmp.w	sl, #0
    a99c:	f280 8126 	bge.w	abec <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    a9a0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    a9a4:	f36f 0341 	bfc	r3, #1, #1
    a9a8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    a9ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    a9b0:	e11c      	b.n	abec <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    a9b2:	2a2d      	cmp	r2, #45	; 0x2d
    a9b4:	d00d      	beq.n	a9d2 <z_cbvprintf_impl+0x1aa>
    a9b6:	2a30      	cmp	r2, #48	; 0x30
    a9b8:	f47f af69 	bne.w	a88e <z_cbvprintf_impl+0x66>
    a9bc:	2301      	movs	r3, #1
	} while (loop);
    a9be:	e758      	b.n	a872 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    a9c0:	f04f 0c01 	mov.w	ip, #1
    a9c4:	e755      	b.n	a872 <z_cbvprintf_impl+0x4a>
    a9c6:	f04f 0e01 	mov.w	lr, #1
    a9ca:	e752      	b.n	a872 <z_cbvprintf_impl+0x4a>
    a9cc:	f04f 0801 	mov.w	r8, #1
    a9d0:	e74f      	b.n	a872 <z_cbvprintf_impl+0x4a>
    a9d2:	2601      	movs	r6, #1
    a9d4:	e74d      	b.n	a872 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    a9d6:	fb0e 6202 	mla	r2, lr, r2, r6
    a9da:	3a30      	subs	r2, #48	; 0x30
    a9dc:	4603      	mov	r3, r0
    a9de:	4618      	mov	r0, r3
    a9e0:	f810 6b01 	ldrb.w	r6, [r0], #1
    a9e4:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a9e8:	f1bc 0f09 	cmp.w	ip, #9
    a9ec:	d9f3      	bls.n	a9d6 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    a9ee:	4299      	cmp	r1, r3
    a9f0:	d08f      	beq.n	a912 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    a9f2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    a9f6:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    a9f8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    a9fa:	f362 0141 	bfi	r1, r2, #1, #1
    a9fe:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    aa02:	e786      	b.n	a912 <z_cbvprintf_impl+0xea>
    aa04:	460b      	mov	r3, r1
	size_t val = 0;
    aa06:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    aa08:	f04f 0e0a 	mov.w	lr, #10
    aa0c:	e7e7      	b.n	a9de <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    aa0e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    aa12:	f042 0204 	orr.w	r2, r2, #4
    aa16:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    aa1a:	3302      	adds	r3, #2
	switch (*sp) {
    aa1c:	781a      	ldrb	r2, [r3, #0]
    aa1e:	2a6c      	cmp	r2, #108	; 0x6c
    aa20:	d047      	beq.n	aab2 <z_cbvprintf_impl+0x28a>
    aa22:	d82b      	bhi.n	aa7c <z_cbvprintf_impl+0x254>
    aa24:	2a68      	cmp	r2, #104	; 0x68
    aa26:	d031      	beq.n	aa8c <z_cbvprintf_impl+0x264>
    aa28:	2a6a      	cmp	r2, #106	; 0x6a
    aa2a:	d04b      	beq.n	aac4 <z_cbvprintf_impl+0x29c>
    aa2c:	2a4c      	cmp	r2, #76	; 0x4c
    aa2e:	d051      	beq.n	aad4 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    aa30:	461a      	mov	r2, r3
    aa32:	f812 3b01 	ldrb.w	r3, [r2], #1
    aa36:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    aa38:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    aa3a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    aa3e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    aa42:	f200 80be 	bhi.w	abc2 <z_cbvprintf_impl+0x39a>
    aa46:	2b6d      	cmp	r3, #109	; 0x6d
    aa48:	d851      	bhi.n	aaee <z_cbvprintf_impl+0x2c6>
    aa4a:	2b69      	cmp	r3, #105	; 0x69
    aa4c:	f200 80b9 	bhi.w	abc2 <z_cbvprintf_impl+0x39a>
    aa50:	2b57      	cmp	r3, #87	; 0x57
    aa52:	d867      	bhi.n	ab24 <z_cbvprintf_impl+0x2fc>
    aa54:	2b41      	cmp	r3, #65	; 0x41
    aa56:	d003      	beq.n	aa60 <z_cbvprintf_impl+0x238>
    aa58:	3b45      	subs	r3, #69	; 0x45
    aa5a:	2b02      	cmp	r3, #2
    aa5c:	f200 80b1 	bhi.w	abc2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    aa60:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    aa64:	2204      	movs	r2, #4
    aa66:	f362 0302 	bfi	r3, r2, #0, #3
    aa6a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    aa6e:	2301      	movs	r3, #1
			break;
    aa70:	e073      	b.n	ab5a <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    aa72:	fb0c 0202 	mla	r2, ip, r2, r0
    aa76:	3a30      	subs	r2, #48	; 0x30
    aa78:	460b      	mov	r3, r1
    aa7a:	e75d      	b.n	a938 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    aa7c:	2a74      	cmp	r2, #116	; 0x74
    aa7e:	d025      	beq.n	aacc <z_cbvprintf_impl+0x2a4>
    aa80:	2a7a      	cmp	r2, #122	; 0x7a
    aa82:	d1d5      	bne.n	aa30 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    aa84:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    aa88:	2106      	movs	r1, #6
    aa8a:	e00c      	b.n	aaa6 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    aa8c:	785a      	ldrb	r2, [r3, #1]
    aa8e:	2a68      	cmp	r2, #104	; 0x68
    aa90:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    aa94:	d106      	bne.n	aaa4 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    aa96:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    aa98:	f361 02c6 	bfi	r2, r1, #3, #4
    aa9c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    aaa0:	3302      	adds	r3, #2
    aaa2:	e7c5      	b.n	aa30 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    aaa4:	2102      	movs	r1, #2
    aaa6:	f361 02c6 	bfi	r2, r1, #3, #4
    aaaa:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    aaae:	3301      	adds	r3, #1
    aab0:	e7be      	b.n	aa30 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    aab2:	785a      	ldrb	r2, [r3, #1]
    aab4:	2a6c      	cmp	r2, #108	; 0x6c
    aab6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    aaba:	d101      	bne.n	aac0 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    aabc:	2104      	movs	r1, #4
    aabe:	e7eb      	b.n	aa98 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    aac0:	2103      	movs	r1, #3
    aac2:	e7f0      	b.n	aaa6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    aac4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    aac8:	2105      	movs	r1, #5
    aaca:	e7ec      	b.n	aaa6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    aacc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    aad0:	2107      	movs	r1, #7
    aad2:	e7e8      	b.n	aaa6 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    aad4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    aad8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    aadc:	f022 0202 	bic.w	r2, r2, #2
    aae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    aae4:	f042 0202 	orr.w	r2, r2, #2
    aae8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    aaec:	e7df      	b.n	aaae <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    aaee:	3b6e      	subs	r3, #110	; 0x6e
    aaf0:	b2d9      	uxtb	r1, r3
    aaf2:	2301      	movs	r3, #1
    aaf4:	408b      	lsls	r3, r1
    aaf6:	f240 4182 	movw	r1, #1154	; 0x482
    aafa:	420b      	tst	r3, r1
    aafc:	d137      	bne.n	ab6e <z_cbvprintf_impl+0x346>
    aafe:	f013 0f24 	tst.w	r3, #36	; 0x24
    ab02:	d151      	bne.n	aba8 <z_cbvprintf_impl+0x380>
    ab04:	07d8      	lsls	r0, r3, #31
    ab06:	d55c      	bpl.n	abc2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    ab08:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    ab0c:	2103      	movs	r1, #3
    ab0e:	f361 0302 	bfi	r3, r1, #0, #3
    ab12:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    ab16:	f002 0378 	and.w	r3, r2, #120	; 0x78
    ab1a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    ab1e:	424b      	negs	r3, r1
    ab20:	414b      	adcs	r3, r1
    ab22:	e01a      	b.n	ab5a <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
    ab24:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    ab28:	b2c9      	uxtb	r1, r1
    ab2a:	2001      	movs	r0, #1
    ab2c:	fa00 f101 	lsl.w	r1, r0, r1
    ab30:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    ab34:	d194      	bne.n	aa60 <z_cbvprintf_impl+0x238>
    ab36:	f640 0601 	movw	r6, #2049	; 0x801
    ab3a:	4231      	tst	r1, r6
    ab3c:	d11d      	bne.n	ab7a <z_cbvprintf_impl+0x352>
    ab3e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    ab42:	d03e      	beq.n	abc2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    ab44:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    ab48:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ab4c:	f002 0278 	and.w	r2, r2, #120	; 0x78
    ab50:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    ab52:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    ab56:	d034      	beq.n	abc2 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    ab58:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    ab5a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    ab5e:	f3c2 0140 	ubfx	r1, r2, #1, #1
    ab62:	430b      	orrs	r3, r1
    ab64:	f363 0241 	bfi	r2, r3, #1, #1
    ab68:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    ab6c:	e6fd      	b.n	a96a <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    ab6e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    ab72:	2102      	movs	r1, #2
    ab74:	f361 0302 	bfi	r3, r1, #0, #3
    ab78:	e7e8      	b.n	ab4c <z_cbvprintf_impl+0x324>
    ab7a:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    ab7e:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    ab80:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    ab84:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ab88:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    ab8a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    ab8e:	bf02      	ittt	eq
    ab90:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    ab94:	f041 0101 	orreq.w	r1, r1, #1
    ab98:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    ab9c:	2b63      	cmp	r3, #99	; 0x63
    ab9e:	d1db      	bne.n	ab58 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    aba0:	1e13      	subs	r3, r2, #0
    aba2:	bf18      	it	ne
    aba4:	2301      	movne	r3, #1
    aba6:	e7d8      	b.n	ab5a <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    aba8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    abac:	2103      	movs	r1, #3
    abae:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    abb2:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    abb6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    abba:	bf14      	ite	ne
    abbc:	2301      	movne	r3, #1
    abbe:	2300      	moveq	r3, #0
    abc0:	e7cb      	b.n	ab5a <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    abc2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    abc6:	f043 0301 	orr.w	r3, r3, #1
    abca:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    abce:	e7c3      	b.n	ab58 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    abd0:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    abd4:	2a00      	cmp	r2, #0
			width = conv->width_value;
    abd6:	bfb4      	ite	lt
    abd8:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    abdc:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    abe0:	e6d5      	b.n	a98e <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    abe2:	0798      	lsls	r0, r3, #30
    abe4:	f57f aee2 	bpl.w	a9ac <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    abe8:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    abec:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    abf0:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    abf2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    abf6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    abfa:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    abfe:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    ac00:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    ac04:	d133      	bne.n	ac6e <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    ac06:	1ecb      	subs	r3, r1, #3
    ac08:	2b04      	cmp	r3, #4
    ac0a:	d804      	bhi.n	ac16 <z_cbvprintf_impl+0x3ee>
    ac0c:	e8df f003 	tbb	[pc, r3]
    ac10:	21464621 	.word	0x21464621
    ac14:	21          	.byte	0x21
    ac15:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    ac16:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    ac18:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    ac1a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    ac1e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    ac22:	d11c      	bne.n	ac5e <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    ac24:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    ac28:	17da      	asrs	r2, r3, #31
    ac2a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    ac2e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    ac30:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    ac34:	f013 0603 	ands.w	r6, r3, #3
    ac38:	d050      	beq.n	acdc <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    ac3a:	9b03      	ldr	r3, [sp, #12]
    ac3c:	463a      	mov	r2, r7
    ac3e:	4659      	mov	r1, fp
    ac40:	4648      	mov	r0, r9
    ac42:	f005 fed1 	bl	109e8 <outs>
    ac46:	2800      	cmp	r0, #0
    ac48:	f2c0 8153 	blt.w	aef2 <z_cbvprintf_impl+0x6ca>
    ac4c:	4405      	add	r5, r0
			continue;
    ac4e:	9f03      	ldr	r7, [sp, #12]
    ac50:	e5f2      	b.n	a838 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    ac52:	f854 3b04 	ldr.w	r3, [r4], #4
    ac56:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    ac58:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    ac5c:	e7e8      	b.n	ac30 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    ac5e:	2902      	cmp	r1, #2
    ac60:	d1e5      	bne.n	ac2e <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    ac62:	b21a      	sxth	r2, r3
    ac64:	f343 33c0 	sbfx	r3, r3, #15, #1
    ac68:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    ac6c:	e7df      	b.n	ac2e <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    ac6e:	2b02      	cmp	r3, #2
    ac70:	d124      	bne.n	acbc <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    ac72:	1ecb      	subs	r3, r1, #3
    ac74:	2b04      	cmp	r3, #4
    ac76:	d804      	bhi.n	ac82 <z_cbvprintf_impl+0x45a>
    ac78:	e8df f003 	tbb	[pc, r3]
    ac7c:	18101018 	.word	0x18101018
    ac80:	18          	.byte	0x18
    ac81:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    ac82:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    ac84:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    ac88:	f04f 0200 	mov.w	r2, #0
    ac8c:	d014      	beq.n	acb8 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    ac8e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    ac90:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    ac94:	d1cc      	bne.n	ac30 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    ac96:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    ac98:	930e      	str	r3, [sp, #56]	; 0x38
    ac9a:	e7c9      	b.n	ac30 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    ac9c:	3407      	adds	r4, #7
    ac9e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    aca2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    aca6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    acaa:	e7c1      	b.n	ac30 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    acac:	f854 3b04 	ldr.w	r3, [r4], #4
    acb0:	930e      	str	r3, [sp, #56]	; 0x38
    acb2:	2300      	movs	r3, #0
    acb4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    acb6:	e7bb      	b.n	ac30 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    acb8:	b2db      	uxtb	r3, r3
    acba:	e7cd      	b.n	ac58 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    acbc:	2b04      	cmp	r3, #4
    acbe:	d108      	bne.n	acd2 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    acc0:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    acc2:	f024 0407 	bic.w	r4, r4, #7
    acc6:	e9d4 2300 	ldrd	r2, r3, [r4]
    acca:	3408      	adds	r4, #8
    accc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    acd0:	e7ae      	b.n	ac30 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    acd2:	2b03      	cmp	r3, #3
    acd4:	d1ac      	bne.n	ac30 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    acd6:	f854 3b04 	ldr.w	r3, [r4], #4
    acda:	e7dd      	b.n	ac98 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    acdc:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    ace0:	2878      	cmp	r0, #120	; 0x78
    ace2:	d8b4      	bhi.n	ac4e <z_cbvprintf_impl+0x426>
    ace4:	2862      	cmp	r0, #98	; 0x62
    ace6:	d81c      	bhi.n	ad22 <z_cbvprintf_impl+0x4fa>
    ace8:	2825      	cmp	r0, #37	; 0x25
    acea:	f43f adad 	beq.w	a848 <z_cbvprintf_impl+0x20>
    acee:	2858      	cmp	r0, #88	; 0x58
    acf0:	d1ad      	bne.n	ac4e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    acf2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    acf6:	9300      	str	r3, [sp, #0]
    acf8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    acfc:	ab08      	add	r3, sp, #32
    acfe:	aa10      	add	r2, sp, #64	; 0x40
    ad00:	f005 fe2c 	bl	1095c <encode_uint>
			if (precision >= 0) {
    ad04:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    ad08:	4607      	mov	r7, r0
			if (precision >= 0) {
    ad0a:	f280 809a 	bge.w	ae42 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
    ad0e:	2f00      	cmp	r7, #0
    ad10:	d09d      	beq.n	ac4e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    ad12:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    ad16:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    ad18:	2e00      	cmp	r6, #0
    ad1a:	f000 80c1 	beq.w	aea0 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
    ad1e:	3001      	adds	r0, #1
    ad20:	e0be      	b.n	aea0 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
    ad22:	3863      	subs	r0, #99	; 0x63
    ad24:	2815      	cmp	r0, #21
    ad26:	d892      	bhi.n	ac4e <z_cbvprintf_impl+0x426>
    ad28:	a201      	add	r2, pc, #4	; (adr r2, ad30 <z_cbvprintf_impl+0x508>)
    ad2a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    ad2e:	bf00      	nop
    ad30:	0000ae05 	.word	0x0000ae05
    ad34:	0000ae17 	.word	0x0000ae17
    ad38:	0000ac4f 	.word	0x0000ac4f
    ad3c:	0000ac4f 	.word	0x0000ac4f
    ad40:	0000ac4f 	.word	0x0000ac4f
    ad44:	0000ac4f 	.word	0x0000ac4f
    ad48:	0000ae17 	.word	0x0000ae17
    ad4c:	0000ac4f 	.word	0x0000ac4f
    ad50:	0000ac4f 	.word	0x0000ac4f
    ad54:	0000ac4f 	.word	0x0000ac4f
    ad58:	0000ac4f 	.word	0x0000ac4f
    ad5c:	0000aea5 	.word	0x0000aea5
    ad60:	0000ae3d 	.word	0x0000ae3d
    ad64:	0000ae63 	.word	0x0000ae63
    ad68:	0000ac4f 	.word	0x0000ac4f
    ad6c:	0000ac4f 	.word	0x0000ac4f
    ad70:	0000ad89 	.word	0x0000ad89
    ad74:	0000ac4f 	.word	0x0000ac4f
    ad78:	0000ae3d 	.word	0x0000ae3d
    ad7c:	0000ac4f 	.word	0x0000ac4f
    ad80:	0000ac4f 	.word	0x0000ac4f
    ad84:	0000ae3d 	.word	0x0000ae3d
			if (precision >= 0) {
    ad88:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    ad8c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    ad8e:	db35      	blt.n	adfc <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    ad90:	4651      	mov	r1, sl
    ad92:	4638      	mov	r0, r7
    ad94:	f005 fe6f 	bl	10a76 <strnlen>
			bpe = bps + len;
    ad98:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    ad9c:	2f00      	cmp	r7, #0
    ad9e:	f43f af56 	beq.w	ac4e <z_cbvprintf_impl+0x426>
		char sign = 0;
    ada2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    ada4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    ada8:	f013 0210 	ands.w	r2, r3, #16
    adac:	9205      	str	r2, [sp, #20]
    adae:	f000 8093 	beq.w	aed8 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
    adb2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    adb4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    adb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    adb8:	bf48      	it	mi
    adba:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    adbc:	9204      	str	r2, [sp, #16]
    adbe:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    adc0:	bf48      	it	mi
    adc2:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    adc4:	f1b8 0f00 	cmp.w	r8, #0
    adc8:	f340 80a0 	ble.w	af0c <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
    adcc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    add0:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    add4:	f3c2 0380 	ubfx	r3, r2, #2, #1
    add8:	0750      	lsls	r0, r2, #29
    adda:	9306      	str	r3, [sp, #24]
    addc:	f100 8096 	bmi.w	af0c <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
    ade0:	0651      	lsls	r1, r2, #25
    ade2:	f140 8089 	bpl.w	aef8 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
    ade6:	b13e      	cbz	r6, adf8 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    ade8:	4659      	mov	r1, fp
    adea:	4630      	mov	r0, r6
    adec:	47c8      	blx	r9
    adee:	2800      	cmp	r0, #0
    adf0:	db7f      	blt.n	aef2 <z_cbvprintf_impl+0x6ca>
    adf2:	9b06      	ldr	r3, [sp, #24]
    adf4:	3501      	adds	r5, #1
    adf6:	461e      	mov	r6, r3
					pad = '0';
    adf8:	2230      	movs	r2, #48	; 0x30
    adfa:	e07e      	b.n	aefa <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
    adfc:	4638      	mov	r0, r7
    adfe:	f005 fe33 	bl	10a68 <strlen>
    ae02:	e7c9      	b.n	ad98 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ae04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ae06:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    ae0a:	2600      	movs	r6, #0
			bps = buf;
    ae0c:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    ae0e:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    ae12:	2001      	movs	r0, #1
    ae14:	e7c6      	b.n	ada4 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    ae16:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    ae18:	bf5c      	itt	pl
    ae1a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    ae1e:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    ae20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    ae24:	bf48      	it	mi
    ae26:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    ae28:	2b00      	cmp	r3, #0
    ae2a:	f6bf af62 	bge.w	acf2 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    ae2e:	4252      	negs	r2, r2
    ae30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ae34:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    ae38:	262d      	movs	r6, #45	; 0x2d
    ae3a:	e75a      	b.n	acf2 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    ae3c:	2600      	movs	r6, #0
    ae3e:	e758      	b.n	acf2 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    ae40:	2600      	movs	r6, #0
				conv->flag_zero = false;
    ae42:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    ae46:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    ae4a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    ae4c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    ae50:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    ae52:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    ae56:	f67f af5a 	bls.w	ad0e <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    ae5a:	ebaa 0303 	sub.w	r3, sl, r3
    ae5e:	9311      	str	r3, [sp, #68]	; 0x44
    ae60:	e755      	b.n	ad0e <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    ae62:	980e      	ldr	r0, [sp, #56]	; 0x38
    ae64:	b390      	cbz	r0, aecc <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ae66:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    ae6a:	9300      	str	r3, [sp, #0]
    ae6c:	aa10      	add	r2, sp, #64	; 0x40
    ae6e:	ab08      	add	r3, sp, #32
    ae70:	2100      	movs	r1, #0
    ae72:	f005 fd73 	bl	1095c <encode_uint>
				conv->altform_0c = true;
    ae76:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    ae7a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    ae7e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    ae82:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    ae86:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ae8a:	4607      	mov	r7, r0
				conv->altform_0c = true;
    ae8c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    ae90:	dad6      	bge.n	ae40 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    ae92:	2800      	cmp	r0, #0
    ae94:	f43f aedb 	beq.w	ac4e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    ae98:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    ae9c:	1a18      	subs	r0, r3, r0
		char sign = 0;
    ae9e:	2600      	movs	r6, #0
    aea0:	469a      	mov	sl, r3
    aea2:	e77f      	b.n	ada4 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    aea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    aea6:	2907      	cmp	r1, #7
    aea8:	f63f aed1 	bhi.w	ac4e <z_cbvprintf_impl+0x426>
    aeac:	e8df f001 	tbb	[pc, r1]
    aeb0:	0c06040c 	.word	0x0c06040c
    aeb4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    aeb8:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    aeba:	e6c8      	b.n	ac4e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    aebc:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    aebe:	e6c6      	b.n	ac4e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    aec0:	17ea      	asrs	r2, r5, #31
    aec2:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    aec6:	e6c2      	b.n	ac4e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    aec8:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    aeca:	e6c0      	b.n	ac4e <z_cbvprintf_impl+0x426>
    aecc:	4f2e      	ldr	r7, [pc, #184]	; (af88 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    aece:	4606      	mov	r6, r0
			bpe = bps + 5;
    aed0:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    aed4:	2005      	movs	r0, #5
    aed6:	e765      	b.n	ada4 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    aed8:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    aeda:	bf48      	it	mi
    aedc:	3001      	addmi	r0, #1
    aede:	e769      	b.n	adb4 <z_cbvprintf_impl+0x58c>
    aee0:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    aee2:	4610      	mov	r0, r2
    aee4:	9206      	str	r2, [sp, #24]
    aee6:	4659      	mov	r1, fp
    aee8:	47c8      	blx	r9
    aeea:	2800      	cmp	r0, #0
    aeec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    aef0:	da04      	bge.n	aefc <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
    aef2:	b015      	add	sp, #84	; 0x54
    aef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    aef8:	2220      	movs	r2, #32
					pad = '0';
    aefa:	4643      	mov	r3, r8
				while (width-- > 0) {
    aefc:	4619      	mov	r1, r3
    aefe:	2900      	cmp	r1, #0
    af00:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    af04:	dcec      	bgt.n	aee0 <z_cbvprintf_impl+0x6b8>
    af06:	4445      	add	r5, r8
    af08:	1a6d      	subs	r5, r5, r1
    af0a:	4698      	mov	r8, r3
		if (sign != 0) {
    af0c:	b12e      	cbz	r6, af1a <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
    af0e:	4659      	mov	r1, fp
    af10:	4630      	mov	r0, r6
    af12:	47c8      	blx	r9
    af14:	2800      	cmp	r0, #0
    af16:	dbec      	blt.n	aef2 <z_cbvprintf_impl+0x6ca>
    af18:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    af1a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    af1e:	06da      	lsls	r2, r3, #27
    af20:	d401      	bmi.n	af26 <z_cbvprintf_impl+0x6fe>
    af22:	071b      	lsls	r3, r3, #28
    af24:	d505      	bpl.n	af32 <z_cbvprintf_impl+0x70a>
				OUTC('0');
    af26:	4659      	mov	r1, fp
    af28:	2030      	movs	r0, #48	; 0x30
    af2a:	47c8      	blx	r9
    af2c:	2800      	cmp	r0, #0
    af2e:	dbe0      	blt.n	aef2 <z_cbvprintf_impl+0x6ca>
    af30:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    af32:	9b05      	ldr	r3, [sp, #20]
    af34:	b133      	cbz	r3, af44 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
    af36:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    af3a:	4659      	mov	r1, fp
    af3c:	47c8      	blx	r9
    af3e:	2800      	cmp	r0, #0
    af40:	dbd7      	blt.n	aef2 <z_cbvprintf_impl+0x6ca>
    af42:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    af44:	9e04      	ldr	r6, [sp, #16]
    af46:	442e      	add	r6, r5
    af48:	e005      	b.n	af56 <z_cbvprintf_impl+0x72e>
				OUTC('0');
    af4a:	4659      	mov	r1, fp
    af4c:	2030      	movs	r0, #48	; 0x30
    af4e:	47c8      	blx	r9
    af50:	2800      	cmp	r0, #0
    af52:	dbce      	blt.n	aef2 <z_cbvprintf_impl+0x6ca>
    af54:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    af56:	1b73      	subs	r3, r6, r5
    af58:	2b00      	cmp	r3, #0
    af5a:	dcf6      	bgt.n	af4a <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
    af5c:	4653      	mov	r3, sl
    af5e:	463a      	mov	r2, r7
    af60:	4659      	mov	r1, fp
    af62:	4648      	mov	r0, r9
    af64:	f005 fd40 	bl	109e8 <outs>
    af68:	2800      	cmp	r0, #0
    af6a:	dbc2      	blt.n	aef2 <z_cbvprintf_impl+0x6ca>
    af6c:	4405      	add	r5, r0
		while (width > 0) {
    af6e:	44a8      	add	r8, r5
    af70:	eba8 0305 	sub.w	r3, r8, r5
    af74:	2b00      	cmp	r3, #0
    af76:	f77f ae6a 	ble.w	ac4e <z_cbvprintf_impl+0x426>
			OUTC(' ');
    af7a:	4659      	mov	r1, fp
    af7c:	2020      	movs	r0, #32
    af7e:	47c8      	blx	r9
    af80:	2800      	cmp	r0, #0
    af82:	dbb6      	blt.n	aef2 <z_cbvprintf_impl+0x6ca>
    af84:	3501      	adds	r5, #1
			--width;
    af86:	e7f3      	b.n	af70 <z_cbvprintf_impl+0x748>
    af88:	0001245a 	.word	0x0001245a

0000af8c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    af8c:	f003 ba42 	b.w	e414 <SystemInit>

0000af90 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    af90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    af94:	4605      	mov	r5, r0
	__asm__ volatile(
    af96:	f04f 0340 	mov.w	r3, #64	; 0x40
    af9a:	f3ef 8611 	mrs	r6, BASEPRI
    af9e:	f383 8812 	msr	BASEPRI_MAX, r3
    afa2:	f3bf 8f6f 	isb	sy
	return list->head;
    afa6:	4b0e      	ldr	r3, [pc, #56]	; (afe0 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    afa8:	4f0e      	ldr	r7, [pc, #56]	; (afe4 <pm_state_notify+0x54>)
    afaa:	681c      	ldr	r4, [r3, #0]
    afac:	f8df 8038 	ldr.w	r8, [pc, #56]	; afe8 <pm_state_notify+0x58>
    afb0:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    afb4:	b92c      	cbnz	r4, afc2 <pm_state_notify+0x32>
	__asm__ volatile(
    afb6:	f386 8811 	msr	BASEPRI, r6
    afba:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    afbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    afc2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    afc6:	2d00      	cmp	r5, #0
    afc8:	bf18      	it	ne
    afca:	4613      	movne	r3, r2
		if (callback) {
    afcc:	b12b      	cbz	r3, afda <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    afce:	f898 2014 	ldrb.w	r2, [r8, #20]
    afd2:	fb09 f202 	mul.w	r2, r9, r2
    afd6:	5cb8      	ldrb	r0, [r7, r2]
    afd8:	4798      	blx	r3
	return node->next;
    afda:	6824      	ldr	r4, [r4, #0]
    afdc:	e7ea      	b.n	afb4 <pm_state_notify+0x24>
    afde:	bf00      	nop
    afe0:	20001510 	.word	0x20001510
    afe4:	20001504 	.word	0x20001504
    afe8:	20001650 	.word	0x20001650

0000afec <pm_system_resume>:

void pm_system_resume(void)
{
    afec:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    afee:	4b19      	ldr	r3, [pc, #100]	; (b054 <pm_system_resume+0x68>)
    aff0:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    aff2:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    aff6:	f004 031f 	and.w	r3, r4, #31
    affa:	2201      	movs	r2, #1
    affc:	409a      	lsls	r2, r3
    affe:	4b16      	ldr	r3, [pc, #88]	; (b058 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b000:	0961      	lsrs	r1, r4, #5
    b002:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b006:	43d0      	mvns	r0, r2
    b008:	e853 1f00 	ldrex	r1, [r3]
    b00c:	ea01 0500 	and.w	r5, r1, r0
    b010:	e843 5600 	strex	r6, r5, [r3]
    b014:	2e00      	cmp	r6, #0
    b016:	d1f7      	bne.n	b008 <pm_system_resume+0x1c>
    b018:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    b01c:	420a      	tst	r2, r1
    b01e:	d013      	beq.n	b048 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    b020:	4b0e      	ldr	r3, [pc, #56]	; (b05c <pm_system_resume+0x70>)
    b022:	4d0f      	ldr	r5, [pc, #60]	; (b060 <pm_system_resume+0x74>)
    b024:	b18b      	cbz	r3, b04a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    b026:	230c      	movs	r3, #12
    b028:	4363      	muls	r3, r4
    b02a:	18ea      	adds	r2, r5, r3
    b02c:	5ce8      	ldrb	r0, [r5, r3]
    b02e:	7851      	ldrb	r1, [r2, #1]
    b030:	f005 fd68 	bl	10b04 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    b034:	2000      	movs	r0, #0
    b036:	f7ff ffab 	bl	af90 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    b03a:	230c      	movs	r3, #12
    b03c:	435c      	muls	r4, r3
    b03e:	192a      	adds	r2, r5, r4
    b040:	2300      	movs	r3, #0
    b042:	512b      	str	r3, [r5, r4]
    b044:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    b048:	bd70      	pop	{r4, r5, r6, pc}
    b04a:	f383 8811 	msr	BASEPRI, r3
    b04e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    b052:	e7ef      	b.n	b034 <pm_system_resume+0x48>
    b054:	20001650 	.word	0x20001650
    b058:	20001518 	.word	0x20001518
    b05c:	00010b05 	.word	0x00010b05
    b060:	20001504 	.word	0x20001504

0000b064 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    b064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    b068:	4b35      	ldr	r3, [pc, #212]	; (b140 <pm_system_suspend+0xdc>)
{
    b06a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    b06c:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    b06e:	f04f 0340 	mov.w	r3, #64	; 0x40
    b072:	f3ef 8811 	mrs	r8, BASEPRI
    b076:	f383 8812 	msr	BASEPRI_MAX, r3
    b07a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    b07e:	240c      	movs	r4, #12
    b080:	4b30      	ldr	r3, [pc, #192]	; (b144 <pm_system_suspend+0xe0>)
    b082:	4e31      	ldr	r6, [pc, #196]	; (b148 <pm_system_suspend+0xe4>)
    b084:	436c      	muls	r4, r5
    b086:	191a      	adds	r2, r3, r4
    b088:	5d19      	ldrb	r1, [r3, r4]
    b08a:	2900      	cmp	r1, #0
    b08c:	d04c      	beq.n	b128 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    b08e:	ca07      	ldmia	r2, {r0, r1, r2}
    b090:	eb06 0c04 	add.w	ip, r6, r4
    b094:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    b098:	2200      	movs	r2, #0
    b09a:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    b09c:	f388 8811 	msr	BASEPRI, r8
    b0a0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    b0a4:	230c      	movs	r3, #12
    b0a6:	436b      	muls	r3, r5
    b0a8:	18f2      	adds	r2, r6, r3
    b0aa:	5cf0      	ldrb	r0, [r6, r3]
    b0ac:	2800      	cmp	r0, #0
    b0ae:	d039      	beq.n	b124 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    b0b0:	1c7b      	adds	r3, r7, #1
    b0b2:	d010      	beq.n	b0d6 <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    b0b4:	f8d2 c008 	ldr.w	ip, [r2, #8]
    b0b8:	4c24      	ldr	r4, [pc, #144]	; (b14c <pm_system_suspend+0xe8>)
    b0ba:	4a25      	ldr	r2, [pc, #148]	; (b150 <pm_system_suspend+0xec>)
    b0bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    b0c0:	2100      	movs	r1, #0
    b0c2:	fbec 4100 	umlal	r4, r1, ip, r0
    b0c6:	2300      	movs	r3, #0
    b0c8:	4620      	mov	r0, r4
    b0ca:	f7f4 fff5 	bl	b8 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    b0ce:	2101      	movs	r1, #1
    b0d0:	1a38      	subs	r0, r7, r0
    b0d2:	f006 fdd1 	bl	11c78 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    b0d6:	f004 fd37 	bl	fb48 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    b0da:	2001      	movs	r0, #1
    b0dc:	f7ff ff58 	bl	af90 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b0e0:	f3bf 8f5b 	dmb	ish
    b0e4:	4b1b      	ldr	r3, [pc, #108]	; (b154 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    b0e6:	096a      	lsrs	r2, r5, #5
    b0e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    b0ec:	f005 011f 	and.w	r1, r5, #31
    b0f0:	2201      	movs	r2, #1
    b0f2:	408a      	lsls	r2, r1
    b0f4:	e853 0f00 	ldrex	r0, [r3]
    b0f8:	4310      	orrs	r0, r2
    b0fa:	e843 0100 	strex	r1, r0, [r3]
    b0fe:	2900      	cmp	r1, #0
    b100:	d1f8      	bne.n	b0f4 <pm_system_suspend+0x90>
    b102:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    b106:	4b14      	ldr	r3, [pc, #80]	; (b158 <pm_system_suspend+0xf4>)
    b108:	b13b      	cbz	r3, b11a <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    b10a:	230c      	movs	r3, #12
    b10c:	fb03 f005 	mul.w	r0, r3, r5
    b110:	1833      	adds	r3, r6, r0
    b112:	5c30      	ldrb	r0, [r6, r0]
    b114:	7859      	ldrb	r1, [r3, #1]
    b116:	f005 fce9 	bl	10aec <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    b11a:	f7ff ff67 	bl	afec <pm_system_resume>
	k_sched_unlock();
    b11e:	f004 fd27 	bl	fb70 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    b122:	2001      	movs	r0, #1
}
    b124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    b128:	4601      	mov	r1, r0
    b12a:	4628      	mov	r0, r5
    b12c:	f000 f816 	bl	b15c <pm_policy_next_state>
		if (info != NULL) {
    b130:	2800      	cmp	r0, #0
    b132:	d0b3      	beq.n	b09c <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    b134:	c807      	ldmia	r0, {r0, r1, r2}
    b136:	4434      	add	r4, r6
    b138:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    b13c:	e7ae      	b.n	b09c <pm_system_suspend+0x38>
    b13e:	bf00      	nop
    b140:	20001650 	.word	0x20001650
    b144:	200014f8 	.word	0x200014f8
    b148:	20001504 	.word	0x20001504
    b14c:	000f423f 	.word	0x000f423f
    b150:	000f4240 	.word	0x000f4240
    b154:	20001518 	.word	0x20001518
    b158:	00010aed 	.word	0x00010aed

0000b15c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    b15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b160:	b085      	sub	sp, #20
    b162:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    b164:	a903      	add	r1, sp, #12
    b166:	f000 f843 	bl	b1f0 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b16a:	4b1e      	ldr	r3, [pc, #120]	; (b1e4 <pm_policy_next_state+0x88>)
    b16c:	9d03      	ldr	r5, [sp, #12]
    b16e:	f8d3 a000 	ldr.w	sl, [r3]
    b172:	f8df 8074 	ldr.w	r8, [pc, #116]	; b1e8 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b176:	1e43      	subs	r3, r0, #1
    b178:	b21b      	sxth	r3, r3
    b17a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    b17e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b180:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    b184:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    b188:	f04f 0b00 	mov.w	fp, #0
    b18c:	b924      	cbnz	r4, b198 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    b18e:	46a1      	mov	r9, r4
}
    b190:	4648      	mov	r0, r9
    b192:	b005      	add	sp, #20
    b194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b198:	6868      	ldr	r0, [r5, #4]
    b19a:	4a14      	ldr	r2, [pc, #80]	; (b1ec <pm_policy_next_state+0x90>)
    b19c:	46c4      	mov	ip, r8
    b19e:	4659      	mov	r1, fp
    b1a0:	fbe0 c107 	umlal	ip, r1, r0, r7
    b1a4:	2300      	movs	r3, #0
    b1a6:	4660      	mov	r0, ip
    b1a8:	f7f4 ff86 	bl	b8 <__aeabi_uldivmod>
    b1ac:	9001      	str	r0, [sp, #4]
    b1ae:	68a8      	ldr	r0, [r5, #8]
    b1b0:	4a0e      	ldr	r2, [pc, #56]	; (b1ec <pm_policy_next_state+0x90>)
    b1b2:	46c4      	mov	ip, r8
    b1b4:	4659      	mov	r1, fp
    b1b6:	fbe0 c107 	umlal	ip, r1, r0, r7
    b1ba:	2300      	movs	r3, #0
    b1bc:	4660      	mov	r0, ip
    b1be:	f7f4 ff7b 	bl	b8 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b1c2:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    b1c6:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b1c8:	d001      	beq.n	b1ce <pm_policy_next_state+0x72>
    b1ca:	4582      	cmp	sl, r0
    b1cc:	d905      	bls.n	b1da <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    b1ce:	1c73      	adds	r3, r6, #1
    b1d0:	d0de      	beq.n	b190 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    b1d2:	9b01      	ldr	r3, [sp, #4]
    b1d4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    b1d6:	42b0      	cmp	r0, r6
    b1d8:	d9da      	bls.n	b190 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b1da:	3c01      	subs	r4, #1
    b1dc:	b2a4      	uxth	r4, r4
    b1de:	3d0c      	subs	r5, #12
    b1e0:	e7d4      	b.n	b18c <pm_policy_next_state+0x30>
    b1e2:	bf00      	nop
    b1e4:	20000374 	.word	0x20000374
    b1e8:	000f423f 	.word	0x000f423f
    b1ec:	000f4240 	.word	0x000f4240

0000b1f0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    b1f0:	b908      	cbnz	r0, b1f6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    b1f2:	4b02      	ldr	r3, [pc, #8]	; (b1fc <pm_state_cpu_get_all+0xc>)
    b1f4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    b1f6:	2000      	movs	r0, #0
    b1f8:	4770      	bx	lr
    b1fa:	bf00      	nop
    b1fc:	00012298 	.word	0x00012298

0000b200 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    b200:	4901      	ldr	r1, [pc, #4]	; (b208 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    b202:	2210      	movs	r2, #16
	str	r2, [r1]
    b204:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    b206:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    b208:	e000ed10 	.word	0xe000ed10

0000b20c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    b20c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    b20e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    b210:	f380 8811 	msr	BASEPRI, r0
	isb
    b214:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    b218:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    b21c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    b21e:	b662      	cpsie	i
	isb
    b220:	f3bf 8f6f 	isb	sy

	bx	lr
    b224:	4770      	bx	lr
    b226:	bf00      	nop

0000b228 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    b228:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    b22a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    b22c:	f381 8811 	msr	BASEPRI, r1

	wfe
    b230:	bf20      	wfe

	msr	BASEPRI, r0
    b232:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    b236:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    b238:	4770      	bx	lr
    b23a:	bf00      	nop

0000b23c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    b23c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    b23e:	2800      	cmp	r0, #0
    b240:	db07      	blt.n	b252 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b242:	4a04      	ldr	r2, [pc, #16]	; (b254 <arch_irq_enable+0x18>)
    b244:	0941      	lsrs	r1, r0, #5
    b246:	2301      	movs	r3, #1
    b248:	f000 001f 	and.w	r0, r0, #31
    b24c:	4083      	lsls	r3, r0
    b24e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    b252:	4770      	bx	lr
    b254:	e000e100 	.word	0xe000e100

0000b258 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    b258:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    b25a:	2800      	cmp	r0, #0
    b25c:	db0c      	blt.n	b278 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b25e:	0943      	lsrs	r3, r0, #5
    b260:	4906      	ldr	r1, [pc, #24]	; (b27c <arch_irq_disable+0x24>)
    b262:	f000 001f 	and.w	r0, r0, #31
    b266:	3320      	adds	r3, #32
    b268:	2201      	movs	r2, #1
    b26a:	4082      	lsls	r2, r0
    b26c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    b270:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b274:	f3bf 8f6f 	isb	sy
}
    b278:	4770      	bx	lr
    b27a:	bf00      	nop
    b27c:	e000e100 	.word	0xe000e100

0000b280 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    b280:	4b05      	ldr	r3, [pc, #20]	; (b298 <arch_irq_is_enabled+0x18>)
    b282:	0942      	lsrs	r2, r0, #5
    b284:	f000 001f 	and.w	r0, r0, #31
    b288:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    b28c:	2301      	movs	r3, #1
    b28e:	fa03 f000 	lsl.w	r0, r3, r0
}
    b292:	4010      	ands	r0, r2
    b294:	4770      	bx	lr
    b296:	bf00      	nop
    b298:	e000e100 	.word	0xe000e100

0000b29c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    b29c:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    b29e:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
    b2a0:	bf54      	ite	pl
    b2a2:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    b2a4:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    b2a6:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b2a8:	bfac      	ite	ge
    b2aa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b2ae:	4a07      	ldrlt	r2, [pc, #28]	; (b2cc <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b2b0:	ea4f 1341 	mov.w	r3, r1, lsl #5
    b2b4:	bfac      	ite	ge
    b2b6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b2ba:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b2be:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b2c0:	bfb4      	ite	lt
    b2c2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b2c4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
    b2c8:	4770      	bx	lr
    b2ca:	bf00      	nop
    b2cc:	e000ed14 	.word	0xe000ed14

0000b2d0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    b2d0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    b2d2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    b2d4:	4b04      	ldr	r3, [pc, #16]	; (b2e8 <_arch_isr_direct_pm+0x18>)
    b2d6:	699a      	ldr	r2, [r3, #24]
    b2d8:	b11a      	cbz	r2, b2e2 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    b2da:	2200      	movs	r2, #0
    b2dc:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    b2de:	f006 f9ea 	bl	116b6 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    b2e2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    b2e4:	bd08      	pop	{r3, pc}
    b2e6:	bf00      	nop
    b2e8:	20001650 	.word	0x20001650

0000b2ec <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    b2ec:	bf30      	wfi
    b z_SysNmiOnReset
    b2ee:	f7ff bffd 	b.w	b2ec <z_SysNmiOnReset>
    b2f2:	bf00      	nop

0000b2f4 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    b2f4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b2f6:	4b08      	ldr	r3, [pc, #32]	; (b318 <z_arm_prep_c+0x24>)
    b2f8:	4a08      	ldr	r2, [pc, #32]	; (b31c <z_arm_prep_c+0x28>)
    b2fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    b2fe:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    b300:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b304:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    b308:	f003 fdf4 	bl	eef4 <z_bss_zero>
	z_data_copy();
    b30c:	f004 fd6c 	bl	fde8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    b310:	f000 f990 	bl	b634 <z_arm_interrupt_init>
	z_cstart();
    b314:	f003 fe2e 	bl	ef74 <z_cstart>
    b318:	00000000 	.word	0x00000000
    b31c:	e000ed00 	.word	0xe000ed00

0000b320 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    b320:	4a09      	ldr	r2, [pc, #36]	; (b348 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    b322:	490a      	ldr	r1, [pc, #40]	; (b34c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    b324:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    b326:	6809      	ldr	r1, [r1, #0]
    b328:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b32a:	4909      	ldr	r1, [pc, #36]	; (b350 <arch_swap+0x30>)
	_current->arch.basepri = key;
    b32c:	66d8      	str	r0, [r3, #108]	; 0x6c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b32e:	684b      	ldr	r3, [r1, #4]
    b330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    b334:	604b      	str	r3, [r1, #4]
    b336:	2300      	movs	r3, #0
    b338:	f383 8811 	msr	BASEPRI, r3
    b33c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    b340:	6893      	ldr	r3, [r2, #8]
}
    b342:	6f18      	ldr	r0, [r3, #112]	; 0x70
    b344:	4770      	bx	lr
    b346:	bf00      	nop
    b348:	20001650 	.word	0x20001650
    b34c:	000123ec 	.word	0x000123ec
    b350:	e000ed00 	.word	0xe000ed00

0000b354 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    b354:	490f      	ldr	r1, [pc, #60]	; (b394 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    b356:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    b358:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    b35c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    b35e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    b362:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    b366:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    b368:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    b36c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    b370:	4f09      	ldr	r7, [pc, #36]	; (b398 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    b372:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    b376:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    b378:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    b37a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    b37c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
    b37e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    b380:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    b382:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    b386:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    b38a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    b38e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    b392:	4770      	bx	lr
    ldr r1, =_kernel
    b394:	20001650 	.word	0x20001650
    ldr v4, =_SCS_ICSR
    b398:	e000ed04 	.word	0xe000ed04

0000b39c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    b39c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    b3a0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    b3a2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    b3a6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    b3aa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    b3ac:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    b3b0:	2902      	cmp	r1, #2
    beq _oops
    b3b2:	d0ff      	beq.n	b3b4 <_oops>

0000b3b4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    b3b4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    b3b6:	f005 fb3e 	bl	10a36 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    b3ba:	bd01      	pop	{r0, pc}

0000b3bc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    b3bc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    b3c0:	9b00      	ldr	r3, [sp, #0]
    b3c2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    b3c6:	490a      	ldr	r1, [pc, #40]	; (b3f0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    b3c8:	9b01      	ldr	r3, [sp, #4]
    b3ca:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    b3ce:	9b02      	ldr	r3, [sp, #8]
    b3d0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    b3d4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    b3d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    b3dc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    b3e0:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    b3e4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    b3e6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    b3e8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    b3ea:	66c3      	str	r3, [r0, #108]	; 0x6c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    b3ec:	4770      	bx	lr
    b3ee:	bf00      	nop
    b3f0:	000103ef 	.word	0x000103ef

0000b3f4 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    b3f4:	4b07      	ldr	r3, [pc, #28]	; (b414 <arch_switch_to_main_thread+0x20>)
    b3f6:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    b3f8:	4610      	mov	r0, r2
    b3fa:	f381 8809 	msr	PSP, r1
    b3fe:	2100      	movs	r1, #0
    b400:	b663      	cpsie	if
    b402:	f381 8811 	msr	BASEPRI, r1
    b406:	f3bf 8f6f 	isb	sy
    b40a:	2200      	movs	r2, #0
    b40c:	2300      	movs	r3, #0
    b40e:	f004 ffee 	bl	103ee <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    b412:	bf00      	nop
    b414:	20001650 	.word	0x20001650

0000b418 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    b418:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    b41a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    b41c:	4a0b      	ldr	r2, [pc, #44]	; (b44c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    b41e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    b420:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    b422:	bf1e      	ittt	ne
	movne	r1, #0
    b424:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    b426:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    b428:	f006 f945 	blne	116b6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    b42c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    b42e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    b432:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    b436:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    b43a:	4905      	ldr	r1, [pc, #20]	; (b450 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    b43c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    b43e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    b440:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    b442:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    b446:	4903      	ldr	r1, [pc, #12]	; (b454 <_isr_wrapper+0x3c>)
	bx r1
    b448:	4708      	bx	r1
    b44a:	0000      	.short	0x0000
	ldr r2, =_kernel
    b44c:	20001650 	.word	0x20001650
	ldr r1, =_sw_isr_table
    b450:	000120e0 	.word	0x000120e0
	ldr r1, =z_arm_int_exit
    b454:	0000b459 	.word	0x0000b459

0000b458 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    b458:	4b04      	ldr	r3, [pc, #16]	; (b46c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    b45a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    b45c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    b45e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    b460:	d003      	beq.n	b46a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    b462:	4903      	ldr	r1, [pc, #12]	; (b470 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    b464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    b468:	600a      	str	r2, [r1, #0]

0000b46a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    b46a:	4770      	bx	lr
	ldr r3, =_kernel
    b46c:	20001650 	.word	0x20001650
	ldr r1, =_SCS_ICSR
    b470:	e000ed04 	.word	0xe000ed04

0000b474 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    b474:	4b0b      	ldr	r3, [pc, #44]	; (b4a4 <bus_fault.constprop.0+0x30>)
    b476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    b478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    b47a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b47c:	0592      	lsls	r2, r2, #22
    b47e:	d508      	bpl.n	b492 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    b480:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    b482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b484:	0412      	lsls	r2, r2, #16
    b486:	d504      	bpl.n	b492 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    b488:	b118      	cbz	r0, b492 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    b48a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b48c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    b490:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    b492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    b494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    b496:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    b498:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    b49a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    b49e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    b4a0:	7008      	strb	r0, [r1, #0]

	return reason;
}
    b4a2:	4770      	bx	lr
    b4a4:	e000ed00 	.word	0xe000ed00

0000b4a8 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    b4a8:	4b0d      	ldr	r3, [pc, #52]	; (b4e0 <mem_manage_fault.constprop.0+0x38>)
    b4aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    b4ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    b4ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b4b0:	0792      	lsls	r2, r2, #30
    b4b2:	d508      	bpl.n	b4c6 <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
    b4b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    b4b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b4b8:	0612      	lsls	r2, r2, #24
    b4ba:	d504      	bpl.n	b4c6 <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    b4bc:	b118      	cbz	r0, b4c6 <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    b4be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b4c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    b4c4:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    b4c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    b4c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b4ca:	06d2      	lsls	r2, r2, #27
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    b4cc:	4a04      	ldr	r2, [pc, #16]	; (b4e0 <mem_manage_fault.constprop.0+0x38>)
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    b4ce:	bf58      	it	pl
    b4d0:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    b4d2:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    b4d4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    b4d6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    b4da:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    b4dc:	7008      	strb	r0, [r1, #0]
}
    b4de:	4770      	bx	lr
    b4e0:	e000ed00 	.word	0xe000ed00

0000b4e4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    b4e4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    b4e6:	4b49      	ldr	r3, [pc, #292]	; (b60c <z_arm_fault+0x128>)
    b4e8:	685b      	ldr	r3, [r3, #4]
{
    b4ea:	b08a      	sub	sp, #40	; 0x28
    b4ec:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    b4ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
    b4f2:	2500      	movs	r5, #0
    b4f4:	f385 8811 	msr	BASEPRI, r5
    b4f8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    b4fc:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    b500:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    b504:	d111      	bne.n	b52a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    b506:	f002 000c 	and.w	r0, r2, #12
    b50a:	2808      	cmp	r0, #8
    b50c:	d00d      	beq.n	b52a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    b50e:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    b510:	bf4c      	ite	mi
    b512:	460e      	movmi	r6, r1
			*nested_exc = true;
    b514:	2501      	movpl	r5, #1
	*recoverable = false;
    b516:	2200      	movs	r2, #0
	switch (fault) {
    b518:	3b03      	subs	r3, #3
	*recoverable = false;
    b51a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    b51e:	2b03      	cmp	r3, #3
    b520:	d84c      	bhi.n	b5bc <z_arm_fault+0xd8>
    b522:	e8df f003 	tbb	[pc, r3]
    b526:	6404      	.short	0x6404
    b528:	6c68      	.short	0x6c68
		return NULL;
    b52a:	462e      	mov	r6, r5
    b52c:	e7f3      	b.n	b516 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    b52e:	4b37      	ldr	r3, [pc, #220]	; (b60c <z_arm_fault+0x128>)
    b530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b532:	0791      	lsls	r1, r2, #30
    b534:	d442      	bmi.n	b5bc <z_arm_fault+0xd8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    b536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b538:	2a00      	cmp	r2, #0
    b53a:	db3f      	blt.n	b5bc <z_arm_fault+0xd8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    b53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b53e:	0052      	lsls	r2, r2, #1
    b540:	d53c      	bpl.n	b5bc <z_arm_fault+0xd8>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    b542:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    b544:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    b546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b54a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    b54c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b550:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    b554:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    b556:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    b55a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    b55e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    b560:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b564:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    b568:	f64d 7202 	movw	r2, #57090	; 0xdf02
    b56c:	4291      	cmp	r1, r2
    b56e:	d008      	beq.n	b582 <z_arm_fault+0x9e>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    b570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b572:	b2d2      	uxtb	r2, r2
    b574:	b13a      	cbz	r2, b586 <z_arm_fault+0xa2>
			reason = mem_manage_fault(esf, 1, recoverable);
    b576:	f10d 0107 	add.w	r1, sp, #7
    b57a:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    b57c:	f7ff ff94 	bl	b4a8 <mem_manage_fault.constprop.0>
    b580:	e00a      	b.n	b598 <z_arm_fault+0xb4>
			reason = esf->basic.r0;
    b582:	6834      	ldr	r4, [r6, #0]
    b584:	e01b      	b.n	b5be <z_arm_fault+0xda>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    b586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b588:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    b58c:	d006      	beq.n	b59c <z_arm_fault+0xb8>
			reason = bus_fault(esf, 1, recoverable);
    b58e:	f10d 0107 	add.w	r1, sp, #7
    b592:	2001      	movs	r0, #1
    b594:	f7ff ff6e 	bl	b474 <bus_fault.constprop.0>
    b598:	4604      	mov	r4, r0
    b59a:	e010      	b.n	b5be <z_arm_fault+0xda>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    b59c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b59e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    b5a2:	d30b      	bcc.n	b5bc <z_arm_fault+0xd8>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    b5a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    b5a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    b5a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    b5aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    b5ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    b5ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    b5b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b5b2:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    b5b6:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    b5ba:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
    b5bc:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    b5be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b5c2:	b993      	cbnz	r3, b5ea <z_arm_fault+0x106>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    b5c4:	2220      	movs	r2, #32
    b5c6:	4631      	mov	r1, r6
    b5c8:	a802      	add	r0, sp, #8
    b5ca:	f005 fa6d 	bl	10aa8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    b5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b5d0:	b1bd      	cbz	r5, b602 <z_arm_fault+0x11e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    b5d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    b5d6:	b922      	cbnz	r2, b5e2 <z_arm_fault+0xfe>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    b5d8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    b5dc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    b5e0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    b5e2:	a902      	add	r1, sp, #8
    b5e4:	4620      	mov	r0, r4
    b5e6:	f005 fa24 	bl	10a32 <z_arm_fatal_error>
}
    b5ea:	b00a      	add	sp, #40	; 0x28
    b5ec:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    b5ee:	f10d 0107 	add.w	r1, sp, #7
    b5f2:	2000      	movs	r0, #0
    b5f4:	e7c2      	b.n	b57c <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
    b5f6:	f10d 0107 	add.w	r1, sp, #7
    b5fa:	2000      	movs	r0, #0
    b5fc:	e7ca      	b.n	b594 <z_arm_fault+0xb0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    b5fe:	4b03      	ldr	r3, [pc, #12]	; (b60c <z_arm_fault+0x128>)
    b600:	e7d0      	b.n	b5a4 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    b602:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    b606:	f023 0301 	bic.w	r3, r3, #1
    b60a:	e7e9      	b.n	b5e0 <z_arm_fault+0xfc>
    b60c:	e000ed00 	.word	0xe000ed00

0000b610 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    b610:	4a02      	ldr	r2, [pc, #8]	; (b61c <z_arm_fault_init+0xc>)
    b612:	6953      	ldr	r3, [r2, #20]
    b614:	f043 0310 	orr.w	r3, r3, #16
    b618:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    b61a:	4770      	bx	lr
    b61c:	e000ed00 	.word	0xe000ed00

0000b620 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    b620:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    b624:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    b628:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    b62a:	4672      	mov	r2, lr
	bl z_arm_fault
    b62c:	f7ff ff5a 	bl	b4e4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    b630:	bd01      	pop	{r0, pc}
    b632:	bf00      	nop

0000b634 <z_arm_interrupt_init>:
    b634:	4804      	ldr	r0, [pc, #16]	; (b648 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    b636:	2300      	movs	r3, #0
    b638:	2140      	movs	r1, #64	; 0x40
    b63a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    b63c:	3301      	adds	r3, #1
    b63e:	2b1e      	cmp	r3, #30
    b640:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    b644:	d1f9      	bne.n	b63a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    b646:	4770      	bx	lr
    b648:	e000e100 	.word	0xe000e100

0000b64c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    b64c:	2000      	movs	r0, #0
    msr CONTROL, r0
    b64e:	f380 8814 	msr	CONTROL, r0
    isb
    b652:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    b656:	f7ff fc99 	bl	af8c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    b65a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    b65c:	490d      	ldr	r1, [pc, #52]	; (b694 <__start+0x48>)
    str r0, [r1]
    b65e:	6008      	str	r0, [r1, #0]
    dsb
    b660:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    b664:	480c      	ldr	r0, [pc, #48]	; (b698 <__start+0x4c>)
    msr msp, r0
    b666:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    b66a:	f000 f82b 	bl	b6c4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    b66e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    b670:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    b674:	4809      	ldr	r0, [pc, #36]	; (b69c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    b676:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    b67a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    b67c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    b680:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    b684:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    b686:	4308      	orrs	r0, r1
    msr CONTROL, r0
    b688:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    b68c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    b690:	f7ff fe30 	bl	b2f4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    b694:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    b698:	20003450 	.word	0x20003450
    ldr r0, =z_interrupt_stacks
    b69c:	20002750 	.word	0x20002750

0000b6a0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    b6a0:	4907      	ldr	r1, [pc, #28]	; (b6c0 <z_arm_clear_arm_mpu_config+0x20>)
    b6a2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    b6a6:	2300      	movs	r3, #0
	int num_regions =
    b6a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    b6ac:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    b6ae:	4293      	cmp	r3, r2
    b6b0:	db00      	blt.n	b6b4 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    b6b2:	4770      	bx	lr
  MPU->RNR = rnr;
    b6b4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    b6b8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    b6bc:	3301      	adds	r3, #1
    b6be:	e7f6      	b.n	b6ae <z_arm_clear_arm_mpu_config+0xe>
    b6c0:	e000ed00 	.word	0xe000ed00

0000b6c4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    b6c4:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    b6c6:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    b6c8:	2300      	movs	r3, #0
    b6ca:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    b6ce:	f7ff ffe7 	bl	b6a0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    b6d2:	4b14      	ldr	r3, [pc, #80]	; (b724 <z_arm_init_arch_hw_at_boot+0x60>)
    b6d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b6d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    b6dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    b6e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    b6e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    b6e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    b6ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    b6f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    b6f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    b6f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    b6fc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    b700:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    b704:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    b708:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    b70c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    b710:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    b714:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    b718:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    b71a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b71e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    b722:	bd08      	pop	{r3, pc}
    b724:	e000e100 	.word	0xe000e100

0000b728 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    b728:	4b08      	ldr	r3, [pc, #32]	; (b74c <z_impl_k_thread_abort+0x24>)
    b72a:	689b      	ldr	r3, [r3, #8]
    b72c:	4283      	cmp	r3, r0
    b72e:	d10b      	bne.n	b748 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b730:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    b734:	b143      	cbz	r3, b748 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b736:	4b06      	ldr	r3, [pc, #24]	; (b750 <z_impl_k_thread_abort+0x28>)
    b738:	685a      	ldr	r2, [r3, #4]
    b73a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    b73e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    b740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b742:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    b746:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    b748:	f004 badc 	b.w	fd04 <z_thread_abort>
    b74c:	20001650 	.word	0x20001650
    b750:	e000ed00 	.word	0xe000ed00

0000b754 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    b754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b758:	b2c0      	uxtb	r0, r0
    b75a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    b75e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    b762:	4905      	ldr	r1, [pc, #20]	; (b778 <sys_arch_reboot+0x24>)
    b764:	4b05      	ldr	r3, [pc, #20]	; (b77c <sys_arch_reboot+0x28>)
    b766:	68ca      	ldr	r2, [r1, #12]
    b768:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    b76c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    b76e:	60cb      	str	r3, [r1, #12]
    b770:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    b774:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    b776:	e7fd      	b.n	b774 <sys_arch_reboot+0x20>
    b778:	e000ed00 	.word	0xe000ed00
    b77c:	05fa0004 	.word	0x05fa0004

0000b780 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    b780:	b120      	cbz	r0, b78c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    b782:	4b03      	ldr	r3, [pc, #12]	; (b790 <arch_busy_wait+0x10>)
    b784:	0180      	lsls	r0, r0, #6
    b786:	f043 0301 	orr.w	r3, r3, #1
    b78a:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    b78c:	4770      	bx	lr
    b78e:	bf00      	nop
    b790:	00012220 	.word	0x00012220

0000b794 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    b794:	b538      	push	{r3, r4, r5, lr}
    b796:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    b798:	4805      	ldr	r0, [pc, #20]	; (b7b0 <bt_buf_get_rx+0x1c>)
    b79a:	f005 fb5a 	bl	10e52 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    b79e:	4604      	mov	r4, r0
    b7a0:	b120      	cbz	r0, b7ac <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    b7a2:	2100      	movs	r1, #0
    b7a4:	3008      	adds	r0, #8
    b7a6:	f005 fb73 	bl	10e90 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    b7aa:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    b7ac:	4620      	mov	r0, r4
    b7ae:	bd38      	pop	{r3, r4, r5, pc}
    b7b0:	20000490 	.word	0x20000490

0000b7b4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    b7b4:	b510      	push	{r4, lr}
    b7b6:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    b7b8:	490a      	ldr	r1, [pc, #40]	; (b7e4 <bt_buf_get_cmd_complete+0x30>)
{
    b7ba:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    b7bc:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    b7c0:	b920      	cbnz	r0, b7cc <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    b7c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    b7c6:	2001      	movs	r0, #1
    b7c8:	f7ff bfe4 	b.w	b794 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    b7cc:	f005 fbbb 	bl	10f46 <net_buf_ref>
    b7d0:	2301      	movs	r3, #1
		buf->len = 0U;
    b7d2:	2100      	movs	r1, #0
    b7d4:	7503      	strb	r3, [r0, #20]
    b7d6:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    b7d8:	4604      	mov	r4, r0
    b7da:	3008      	adds	r0, #8
    b7dc:	f005 fb58 	bl	10e90 <net_buf_simple_reserve>
}
    b7e0:	4620      	mov	r0, r4
    b7e2:	bd10      	pop	{r4, pc}
    b7e4:	200001a0 	.word	0x200001a0

0000b7e8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    b7e8:	b570      	push	{r4, r5, r6, lr}
    b7ea:	4605      	mov	r5, r0
	switch (evt) {
    b7ec:	3d0e      	subs	r5, #14
    b7ee:	2d01      	cmp	r5, #1
{
    b7f0:	460c      	mov	r4, r1
    b7f2:	4610      	mov	r0, r2
    b7f4:	4619      	mov	r1, r3
	switch (evt) {
    b7f6:	d803      	bhi.n	b800 <bt_buf_get_evt+0x18>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    b7f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    b7fc:	f7ff bfda 	b.w	b7b4 <bt_buf_get_cmd_complete>
		if (discardable) {
    b800:	b164      	cbz	r4, b81c <bt_buf_get_evt+0x34>
	return net_buf_alloc_fixed(pool, timeout);
    b802:	4809      	ldr	r0, [pc, #36]	; (b828 <bt_buf_get_evt+0x40>)
    b804:	f005 fb25 	bl	10e52 <net_buf_alloc_fixed>
			if (buf) {
    b808:	4604      	mov	r4, r0
    b80a:	b128      	cbz	r0, b818 <bt_buf_get_evt+0x30>
	net_buf_simple_reserve(&buf->b, reserve);
    b80c:	2100      	movs	r1, #0
    b80e:	3008      	adds	r0, #8
    b810:	f005 fb3e 	bl	10e90 <net_buf_simple_reserve>
    b814:	2301      	movs	r3, #1
    b816:	7523      	strb	r3, [r4, #20]
}
    b818:	4620      	mov	r0, r4
    b81a:	bd70      	pop	{r4, r5, r6, pc}
    b81c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    b820:	2001      	movs	r0, #1
    b822:	f7ff bfb7 	b.w	b794 <bt_buf_get_rx>
    b826:	bf00      	nop
    b828:	20000438 	.word	0x20000438

0000b82c <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
    b82c:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    b82e:	2101      	movs	r1, #1
    b830:	4604      	mov	r4, r0
    b832:	3008      	adds	r0, #8
    b834:	f005 fba2 	bl	10f7c <net_buf_simple_pull_mem>
	err = handle_event_common(event, buf, handlers, num_handlers);
    b838:	4621      	mov	r1, r4
    b83a:	4a03      	ldr	r2, [pc, #12]	; (b848 <hci_le_meta_event+0x1c>)
    b83c:	7800      	ldrb	r0, [r0, #0]
	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
}
    b83e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
    b842:	2300      	movs	r3, #0
    b844:	f005 b977 	b.w	10b36 <handle_event_common.isra.0>
    b848:	000122e0 	.word	0x000122e0

0000b84c <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    b84c:	b538      	push	{r3, r4, r5, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    b84e:	4822      	ldr	r0, [pc, #136]	; (b8d8 <rx_work_handler+0x8c>)
    b850:	f005 fb40 	bl	10ed4 <net_buf_slist_get>
	if (!buf) {
    b854:	4604      	mov	r4, r0
    b856:	2800      	cmp	r0, #0
    b858:	d03c      	beq.n	b8d4 <rx_work_handler+0x88>
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
    b85a:	7d03      	ldrb	r3, [r0, #20]
    b85c:	2b01      	cmp	r3, #1
    b85e:	d12d      	bne.n	b8bc <rx_work_handler+0x70>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    b860:	8983      	ldrh	r3, [r0, #12]
    b862:	2b01      	cmp	r3, #1
    b864:	d80c      	bhi.n	b880 <rx_work_handler+0x34>
    b866:	4a1d      	ldr	r2, [pc, #116]	; (b8dc <rx_work_handler+0x90>)
    b868:	491d      	ldr	r1, [pc, #116]	; (b8e0 <rx_work_handler+0x94>)
    b86a:	481e      	ldr	r0, [pc, #120]	; (b8e4 <rx_work_handler+0x98>)
    b86c:	f44f 6316 	mov.w	r3, #2400	; 0x960
    b870:	f005 f8d1 	bl	10a16 <assert_print>
    b874:	4040      	eors	r0, r0
    b876:	f380 8811 	msr	BASEPRI, r0
    b87a:	f04f 0003 	mov.w	r0, #3
    b87e:	df02      	svc	2
    b880:	2102      	movs	r1, #2
    b882:	f104 0008 	add.w	r0, r4, #8
    b886:	f005 fb79 	bl	10f7c <net_buf_simple_pull_mem>
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    b88a:	7803      	ldrb	r3, [r0, #0]
    b88c:	3b0e      	subs	r3, #14
    b88e:	2b01      	cmp	r3, #1
    b890:	4605      	mov	r5, r0
    b892:	d80c      	bhi.n	b8ae <rx_work_handler+0x62>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    b894:	4a11      	ldr	r2, [pc, #68]	; (b8dc <rx_work_handler+0x90>)
    b896:	4914      	ldr	r1, [pc, #80]	; (b8e8 <rx_work_handler+0x9c>)
    b898:	4812      	ldr	r0, [pc, #72]	; (b8e4 <rx_work_handler+0x98>)
    b89a:	f640 1364 	movw	r3, #2404	; 0x964
    b89e:	f005 f8ba 	bl	10a16 <assert_print>
    b8a2:	4040      	eors	r0, r0
    b8a4:	f380 8811 	msr	BASEPRI, r0
    b8a8:	f04f 0003 	mov.w	r0, #3
    b8ac:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
    b8ae:	7828      	ldrb	r0, [r5, #0]
    b8b0:	4a0e      	ldr	r2, [pc, #56]	; (b8ec <rx_work_handler+0xa0>)
    b8b2:	2303      	movs	r3, #3
    b8b4:	4621      	mov	r1, r4
    b8b6:	f005 f93e 	bl	10b36 <handle_event_common.isra.0>
	net_buf_unref(buf);
    b8ba:	4620      	mov	r0, r4
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
    b8bc:	f001 f8d2 	bl	ca64 <net_buf_unref>
	return list->head;
    b8c0:	4b0b      	ldr	r3, [pc, #44]	; (b8f0 <rx_work_handler+0xa4>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    b8c2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
    b8c6:	b12b      	cbz	r3, b8d4 <rx_work_handler+0x88>
#endif
		if (err < 0) {
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
    b8c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    b8cc:	4909      	ldr	r1, [pc, #36]	; (b8f4 <rx_work_handler+0xa8>)
    b8ce:	480a      	ldr	r0, [pc, #40]	; (b8f8 <rx_work_handler+0xac>)
    b8d0:	f006 b860 	b.w	11994 <k_work_submit_to_queue>
}
    b8d4:	bd38      	pop	{r3, r4, r5, pc}
    b8d6:	bf00      	nop
    b8d8:	2000029c 	.word	0x2000029c
    b8dc:	00012473 	.word	0x00012473
    b8e0:	000124a7 	.word	0x000124a7
    b8e4:	000124c0 	.word	0x000124c0
    b8e8:	000124dd 	.word	0x000124dd
    b8ec:	000122c8 	.word	0x000122c8
    b8f0:	200001a0 	.word	0x200001a0
    b8f4:	2000038c 	.word	0x2000038c
    b8f8:	20001218 	.word	0x20001218

0000b8fc <hci_cmd_done>:
{
    b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8fe:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    b900:	7990      	ldrb	r0, [r2, #6]
{
    b902:	460e      	mov	r6, r1
    b904:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    b906:	f000 ffeb 	bl	c8e0 <net_buf_pool_get>
    b90a:	4b30      	ldr	r3, [pc, #192]	; (b9cc <hci_cmd_done+0xd0>)
    b90c:	4283      	cmp	r3, r0
    b90e:	d15b      	bne.n	b9c8 <hci_cmd_done+0xcc>
	if (cmd(buf)->opcode != opcode) {
    b910:	4620      	mov	r0, r4
    b912:	f000 ffed 	bl	c8f0 <net_buf_id>
    b916:	4d2e      	ldr	r5, [pc, #184]	; (b9d0 <hci_cmd_done+0xd4>)
    b918:	230c      	movs	r3, #12
    b91a:	fb03 5000 	mla	r0, r3, r0, r5
    b91e:	8843      	ldrh	r3, [r0, #2]
    b920:	42bb      	cmp	r3, r7
    b922:	d151      	bne.n	b9c8 <hci_cmd_done+0xcc>
	if (bt_dev.sent_cmd) {
    b924:	4f2b      	ldr	r7, [pc, #172]	; (b9d4 <hci_cmd_done+0xd8>)
    b926:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
    b92a:	b120      	cbz	r0, b936 <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
    b92c:	f001 f89a 	bl	ca64 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    b930:	2300      	movs	r3, #0
    b932:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	if (cmd(buf)->state && !status) {
    b936:	4620      	mov	r0, r4
    b938:	f000 ffda 	bl	c8f0 <net_buf_id>
    b93c:	270c      	movs	r7, #12
    b93e:	fb07 5000 	mla	r0, r7, r0, r5
    b942:	6843      	ldr	r3, [r0, #4]
    b944:	b1e3      	cbz	r3, b980 <hci_cmd_done+0x84>
    b946:	b9de      	cbnz	r6, b980 <hci_cmd_done+0x84>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    b948:	4620      	mov	r0, r4
    b94a:	f000 ffd1 	bl	c8f0 <net_buf_id>
    b94e:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    b952:	2201      	movs	r2, #1
    b954:	6840      	ldr	r0, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    b956:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
    b95a:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    b95c:	f001 071f 	and.w	r7, r1, #31
    b960:	40ba      	lsls	r2, r7
	if (val) {
    b962:	0949      	lsrs	r1, r1, #5
    b964:	b318      	cbz	r0, b9ae <hci_cmd_done+0xb2>
    b966:	f3bf 8f5b 	dmb	ish
    b96a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b96e:	e853 0f00 	ldrex	r0, [r3]
    b972:	4310      	orrs	r0, r2
    b974:	e843 0100 	strex	r1, r0, [r3]
    b978:	2900      	cmp	r1, #0
    b97a:	d1f8      	bne.n	b96e <hci_cmd_done+0x72>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b97c:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
    b980:	4620      	mov	r0, r4
    b982:	f000 ffb5 	bl	c8f0 <net_buf_id>
    b986:	270c      	movs	r7, #12
    b988:	fb07 5000 	mla	r0, r7, r0, r5
    b98c:	6883      	ldr	r3, [r0, #8]
    b98e:	b1db      	cbz	r3, b9c8 <hci_cmd_done+0xcc>
		cmd(buf)->status = status;
    b990:	4620      	mov	r0, r4
    b992:	f000 ffad 	bl	c8f0 <net_buf_id>
    b996:	4378      	muls	r0, r7
    b998:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    b99a:	4620      	mov	r0, r4
    b99c:	f000 ffa8 	bl	c8f0 <net_buf_id>
    b9a0:	fb07 5500 	mla	r5, r7, r0, r5
    b9a4:	68a8      	ldr	r0, [r5, #8]
}
    b9a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    b9aa:	f003 bd13 	b.w	f3d4 <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b9ae:	43d2      	mvns	r2, r2
    b9b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b9b4:	f3bf 8f5b 	dmb	ish
    b9b8:	e853 0f00 	ldrex	r0, [r3]
    b9bc:	4010      	ands	r0, r2
    b9be:	e843 0100 	strex	r1, r0, [r3]
    b9c2:	2900      	cmp	r1, #0
    b9c4:	d0da      	beq.n	b97c <hci_cmd_done+0x80>
    b9c6:	e7f7      	b.n	b9b8 <hci_cmd_done+0xbc>
    b9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b9ca:	bf00      	nop
    b9cc:	20000464 	.word	0x20000464
    b9d0:	2000151c 	.word	0x2000151c
    b9d4:	200001a0 	.word	0x200001a0

0000b9d8 <hci_cmd_status>:
{
    b9d8:	b538      	push	{r3, r4, r5, lr}
    b9da:	2104      	movs	r1, #4
    b9dc:	4604      	mov	r4, r0
    b9de:	3008      	adds	r0, #8
    b9e0:	f005 facc 	bl	10f7c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    b9e4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    b9e6:	7801      	ldrb	r1, [r0, #0]
    b9e8:	8840      	ldrh	r0, [r0, #2]
    b9ea:	4622      	mov	r2, r4
    b9ec:	f7ff ff86 	bl	b8fc <hci_cmd_done>
	if (ncmd) {
    b9f0:	b125      	cbz	r5, b9fc <hci_cmd_status+0x24>
    b9f2:	4803      	ldr	r0, [pc, #12]	; (ba00 <hci_cmd_status+0x28>)
}
    b9f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b9f8:	f003 bcec 	b.w	f3d4 <z_impl_k_sem_give>
    b9fc:	bd38      	pop	{r3, r4, r5, pc}
    b9fe:	bf00      	nop
    ba00:	20000280 	.word	0x20000280

0000ba04 <hci_cmd_complete>:
{
    ba04:	b538      	push	{r3, r4, r5, lr}
    ba06:	2103      	movs	r1, #3
    ba08:	4604      	mov	r4, r0
    ba0a:	3008      	adds	r0, #8
    ba0c:	f005 fab6 	bl	10f7c <net_buf_simple_pull_mem>
	status = buf->data[0];
    ba10:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    ba12:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    ba14:	7819      	ldrb	r1, [r3, #0]
    ba16:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    ba1a:	4622      	mov	r2, r4
    ba1c:	f7ff ff6e 	bl	b8fc <hci_cmd_done>
	if (ncmd) {
    ba20:	b125      	cbz	r5, ba2c <hci_cmd_complete+0x28>
    ba22:	4803      	ldr	r0, [pc, #12]	; (ba30 <hci_cmd_complete+0x2c>)
}
    ba24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ba28:	f003 bcd4 	b.w	f3d4 <z_impl_k_sem_give>
    ba2c:	bd38      	pop	{r3, r4, r5, pc}
    ba2e:	bf00      	nop
    ba30:	20000280 	.word	0x20000280

0000ba34 <bt_hci_cmd_state_set_init>:
{
    ba34:	b510      	push	{r4, lr}
	state->bit = bit;
    ba36:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    ba3a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ba3e:	720b      	strb	r3, [r1, #8]
{
    ba40:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    ba42:	f000 ff55 	bl	c8f0 <net_buf_id>
    ba46:	4b03      	ldr	r3, [pc, #12]	; (ba54 <bt_hci_cmd_state_set_init+0x20>)
    ba48:	220c      	movs	r2, #12
    ba4a:	fb02 3300 	mla	r3, r2, r0, r3
    ba4e:	605c      	str	r4, [r3, #4]
}
    ba50:	bd10      	pop	{r4, pc}
    ba52:	bf00      	nop
    ba54:	2000151c 	.word	0x2000151c

0000ba58 <bt_hci_cmd_create>:
{
    ba58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    ba5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ba60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ba64:	4606      	mov	r6, r0
    ba66:	4817      	ldr	r0, [pc, #92]	; (bac4 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    ba68:	4d17      	ldr	r5, [pc, #92]	; (bac8 <bt_hci_cmd_create+0x70>)
{
    ba6a:	460f      	mov	r7, r1
    ba6c:	f005 f9f1 	bl	10e52 <net_buf_alloc_fixed>
    ba70:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    ba72:	f100 0a08 	add.w	sl, r0, #8
    ba76:	2100      	movs	r1, #0
    ba78:	f04f 0800 	mov.w	r8, #0
    ba7c:	4650      	mov	r0, sl
    ba7e:	f005 fa07 	bl	10e90 <net_buf_simple_reserve>
    ba82:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    ba86:	4620      	mov	r0, r4
    ba88:	f000 ff32 	bl	c8f0 <net_buf_id>
    ba8c:	f04f 090c 	mov.w	r9, #12
    ba90:	fb09 5000 	mla	r0, r9, r0, r5
    ba94:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    ba96:	4620      	mov	r0, r4
    ba98:	f000 ff2a 	bl	c8f0 <net_buf_id>
    ba9c:	fb09 5000 	mla	r0, r9, r0, r5
    baa0:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    baa4:	4620      	mov	r0, r4
    baa6:	f000 ff23 	bl	c8f0 <net_buf_id>
    baaa:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    baae:	2103      	movs	r1, #3
    bab0:	f8c5 8004 	str.w	r8, [r5, #4]
    bab4:	4650      	mov	r0, sl
    bab6:	f005 fa4a 	bl	10f4e <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    baba:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    babc:	7087      	strb	r7, [r0, #2]
}
    babe:	4620      	mov	r0, r4
    bac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bac4:	20000464 	.word	0x20000464
    bac8:	2000151c 	.word	0x2000151c

0000bacc <bt_hci_cmd_send_sync>:
{
    bacc:	b5f0      	push	{r4, r5, r6, r7, lr}
    bace:	4615      	mov	r5, r2
    bad0:	b087      	sub	sp, #28
	if (!buf) {
    bad2:	460c      	mov	r4, r1
    bad4:	b921      	cbnz	r1, bae0 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    bad6:	f7ff ffbf 	bl	ba58 <bt_hci_cmd_create>
		if (!buf) {
    bada:	4604      	mov	r4, r0
    badc:	2800      	cmp	r0, #0
    bade:	d047      	beq.n	bb70 <bt_hci_cmd_send_sync+0xa4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    bae0:	2201      	movs	r2, #1
    bae2:	2100      	movs	r1, #0
    bae4:	4668      	mov	r0, sp
    bae6:	f005 febc 	bl	11862 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    baea:	4620      	mov	r0, r4
    baec:	f000 ff00 	bl	c8f0 <net_buf_id>
    baf0:	4f21      	ldr	r7, [pc, #132]	; (bb78 <bt_hci_cmd_send_sync+0xac>)
    baf2:	230c      	movs	r3, #12
    baf4:	fb03 7000 	mla	r0, r3, r0, r7
    baf8:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    bafc:	4620      	mov	r0, r4
    bafe:	f005 fa22 	bl	10f46 <net_buf_ref>
    bb02:	4601      	mov	r1, r0
    bb04:	481d      	ldr	r0, [pc, #116]	; (bb7c <bt_hci_cmd_send_sync+0xb0>)
    bb06:	f005 fa11 	bl	10f2c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    bb0a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    bb0e:	2300      	movs	r3, #0
    bb10:	4668      	mov	r0, sp
    bb12:	f003 fc85 	bl	f420 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    bb16:	4606      	mov	r6, r0
    bb18:	b180      	cbz	r0, bb3c <bt_hci_cmd_send_sync+0x70>
    bb1a:	4a19      	ldr	r2, [pc, #100]	; (bb80 <bt_hci_cmd_send_sync+0xb4>)
    bb1c:	4919      	ldr	r1, [pc, #100]	; (bb84 <bt_hci_cmd_send_sync+0xb8>)
    bb1e:	481a      	ldr	r0, [pc, #104]	; (bb88 <bt_hci_cmd_send_sync+0xbc>)
    bb20:	f240 1349 	movw	r3, #329	; 0x149
    bb24:	f004 ff77 	bl	10a16 <assert_print>
    bb28:	4818      	ldr	r0, [pc, #96]	; (bb8c <bt_hci_cmd_send_sync+0xc0>)
    bb2a:	4631      	mov	r1, r6
    bb2c:	f004 ff73 	bl	10a16 <assert_print>
    bb30:	4040      	eors	r0, r0
    bb32:	f380 8811 	msr	BASEPRI, r0
    bb36:	f04f 0003 	mov.w	r0, #3
    bb3a:	df02      	svc	2
	status = cmd(buf)->status;
    bb3c:	4620      	mov	r0, r4
    bb3e:	f000 fed7 	bl	c8f0 <net_buf_id>
    bb42:	230c      	movs	r3, #12
    bb44:	4358      	muls	r0, r3
    bb46:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
    bb48:	b156      	cbz	r6, bb60 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
    bb4a:	4620      	mov	r0, r4
    bb4c:	f000 ff8a 	bl	ca64 <net_buf_unref>
			return -ECONNREFUSED;
    bb50:	2e09      	cmp	r6, #9
    bb52:	bf14      	ite	ne
    bb54:	f06f 0004 	mvnne.w	r0, #4
    bb58:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    bb5c:	b007      	add	sp, #28
    bb5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    bb60:	b115      	cbz	r5, bb68 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
    bb62:	602c      	str	r4, [r5, #0]
	return 0;
    bb64:	2000      	movs	r0, #0
    bb66:	e7f9      	b.n	bb5c <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
    bb68:	4620      	mov	r0, r4
    bb6a:	f000 ff7b 	bl	ca64 <net_buf_unref>
    bb6e:	e7f9      	b.n	bb64 <bt_hci_cmd_send_sync+0x98>
			return -ENOBUFS;
    bb70:	f06f 0068 	mvn.w	r0, #104	; 0x68
    bb74:	e7f2      	b.n	bb5c <bt_hci_cmd_send_sync+0x90>
    bb76:	bf00      	nop
    bb78:	2000151c 	.word	0x2000151c
    bb7c:	200002a4 	.word	0x200002a4
    bb80:	00012473 	.word	0x00012473
    bb84:	0001250b 	.word	0x0001250b
    bb88:	000124c0 	.word	0x000124c0
    bb8c:	00012514 	.word	0x00012514

0000bb90 <hci_init>:
{
    bb90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    bb92:	4d99      	ldr	r5, [pc, #612]	; (bdf8 <hci_init+0x268>)
    bb94:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    bb98:	6899      	ldr	r1, [r3, #8]
    bb9a:	f011 0101 	ands.w	r1, r1, #1
    bb9e:	d121      	bne.n	bbe4 <hci_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    bba0:	aa01      	add	r2, sp, #4
    bba2:	f640 4003 	movw	r0, #3075	; 0xc03
    bba6:	f7ff ff91 	bl	bacc <bt_hci_cmd_send_sync>
		if (err) {
    bbaa:	4604      	mov	r4, r0
    bbac:	2800      	cmp	r0, #0
    bbae:	d161      	bne.n	bc74 <hci_init+0xe4>
		hci_reset_complete(rsp);
    bbb0:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
    bbb2:	6883      	ldr	r3, [r0, #8]
	if (status) {
    bbb4:	781b      	ldrb	r3, [r3, #0]
    bbb6:	b99b      	cbnz	r3, bbe0 <hci_init+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bbb8:	f3bf 8f5b 	dmb	ish
    bbbc:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    bbc0:	f3bf 8f5b 	dmb	ish
    bbc4:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bbc8:	f003 0309 	and.w	r3, r3, #9
    bbcc:	f3bf 8f5b 	dmb	ish
    bbd0:	e852 1f00 	ldrex	r1, [r2]
    bbd4:	e842 3400 	strex	r4, r3, [r2]
    bbd8:	2c00      	cmp	r4, #0
    bbda:	d1f9      	bne.n	bbd0 <hci_init+0x40>
    bbdc:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    bbe0:	f000 ff40 	bl	ca64 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    bbe4:	aa01      	add	r2, sp, #4
    bbe6:	2100      	movs	r1, #0
    bbe8:	f241 0003 	movw	r0, #4099	; 0x1003
    bbec:	f7ff ff6e 	bl	bacc <bt_hci_cmd_send_sync>
	if (err) {
    bbf0:	4604      	mov	r4, r0
    bbf2:	2800      	cmp	r0, #0
    bbf4:	d13e      	bne.n	bc74 <hci_init+0xe4>
	read_local_features_complete(rsp);
    bbf6:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    bbf8:	4880      	ldr	r0, [pc, #512]	; (bdfc <hci_init+0x26c>)
    bbfa:	68b1      	ldr	r1, [r6, #8]
    bbfc:	2208      	movs	r2, #8
    bbfe:	3101      	adds	r1, #1
    bc00:	f004 ff52 	bl	10aa8 <memcpy>
	net_buf_unref(rsp);
    bc04:	4630      	mov	r0, r6
    bc06:	f000 ff2d 	bl	ca64 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    bc0a:	4621      	mov	r1, r4
    bc0c:	aa01      	add	r2, sp, #4
    bc0e:	f241 0001 	movw	r0, #4097	; 0x1001
    bc12:	f7ff ff5b 	bl	bacc <bt_hci_cmd_send_sync>
	if (err) {
    bc16:	4604      	mov	r4, r0
    bc18:	bb60      	cbnz	r0, bc74 <hci_init+0xe4>
	read_local_ver_complete(rsp);
    bc1a:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    bc1c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    bc1e:	785a      	ldrb	r2, [r3, #1]
    bc20:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    bc24:	885a      	ldrh	r2, [r3, #2]
    bc26:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    bc2a:	791a      	ldrb	r2, [r3, #4]
    bc2c:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    bc30:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    bc34:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    bc38:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    bc3c:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    bc40:	f000 ff10 	bl	ca64 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    bc44:	4621      	mov	r1, r4
    bc46:	aa01      	add	r2, sp, #4
    bc48:	f241 0002 	movw	r0, #4098	; 0x1002
    bc4c:	f7ff ff3e 	bl	bacc <bt_hci_cmd_send_sync>
	if (err) {
    bc50:	4604      	mov	r4, r0
    bc52:	b978      	cbnz	r0, bc74 <hci_init+0xe4>
	read_supported_commands_complete(rsp);
    bc54:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    bc56:	486a      	ldr	r0, [pc, #424]	; (be00 <hci_init+0x270>)
    bc58:	68b1      	ldr	r1, [r6, #8]
    bc5a:	2240      	movs	r2, #64	; 0x40
    bc5c:	3101      	adds	r1, #1
    bc5e:	f004 ff23 	bl	10aa8 <memcpy>
	net_buf_unref(rsp);
    bc62:	4630      	mov	r0, r6
    bc64:	f000 fefe 	bl	ca64 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    bc68:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    bc6c:	0658      	lsls	r0, r3, #25
    bc6e:	d404      	bmi.n	bc7a <hci_init+0xea>
		return -ENODEV;
    bc70:	f06f 0412 	mvn.w	r4, #18
}
    bc74:	4620      	mov	r0, r4
    bc76:	b003      	add	sp, #12
    bc78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    bc7a:	4621      	mov	r1, r4
    bc7c:	aa01      	add	r2, sp, #4
    bc7e:	f242 0003 	movw	r0, #8195	; 0x2003
    bc82:	f7ff ff23 	bl	bacc <bt_hci_cmd_send_sync>
	if (err) {
    bc86:	4604      	mov	r4, r0
    bc88:	2800      	cmp	r0, #0
    bc8a:	d1f3      	bne.n	bc74 <hci_init+0xe4>
	read_le_features_complete(rsp);
    bc8c:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    bc8e:	485d      	ldr	r0, [pc, #372]	; (be04 <hci_init+0x274>)
    bc90:	68b1      	ldr	r1, [r6, #8]
    bc92:	2208      	movs	r2, #8
    bc94:	3101      	adds	r1, #1
    bc96:	f004 ff07 	bl	10aa8 <memcpy>
	net_buf_unref(rsp);
    bc9a:	4630      	mov	r0, r6
    bc9c:	f000 fee2 	bl	ca64 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    bca0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    bca4:	0699      	lsls	r1, r3, #26
    bca6:	d418      	bmi.n	bcda <hci_init+0x14a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    bca8:	2102      	movs	r1, #2
    bcaa:	f640 406d 	movw	r0, #3181	; 0xc6d
    bcae:	f7ff fed3 	bl	ba58 <bt_hci_cmd_create>
		if (!buf) {
    bcb2:	4606      	mov	r6, r0
    bcb4:	2800      	cmp	r0, #0
    bcb6:	f000 809c 	beq.w	bdf2 <hci_init+0x262>
    bcba:	2102      	movs	r1, #2
    bcbc:	3008      	adds	r0, #8
    bcbe:	f005 f946 	bl	10f4e <net_buf_simple_add>
		cp_le->le = 0x01;
    bcc2:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    bcc4:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    bcc6:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    bcc8:	4622      	mov	r2, r4
    bcca:	4631      	mov	r1, r6
    bccc:	f640 406d 	movw	r0, #3181	; 0xc6d
    bcd0:	f7ff fefc 	bl	bacc <bt_hci_cmd_send_sync>
		if (err) {
    bcd4:	4604      	mov	r4, r0
    bcd6:	2800      	cmp	r0, #0
    bcd8:	d1cc      	bne.n	bc74 <hci_init+0xe4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    bcda:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    bcde:	071a      	lsls	r2, r3, #28
    bce0:	d512      	bpl.n	bd08 <hci_init+0x178>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    bce2:	aa01      	add	r2, sp, #4
    bce4:	2100      	movs	r1, #0
    bce6:	f242 001c 	movw	r0, #8220	; 0x201c
    bcea:	f7ff feef 	bl	bacc <bt_hci_cmd_send_sync>
		if (err) {
    bcee:	4604      	mov	r4, r0
    bcf0:	2800      	cmp	r0, #0
    bcf2:	d1bf      	bne.n	bc74 <hci_init+0xe4>
		le_read_supp_states_complete(rsp);
    bcf4:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    bcf6:	6883      	ldr	r3, [r0, #8]
    bcf8:	f8d3 2001 	ldr.w	r2, [r3, #1]
    bcfc:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    bd00:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    bd04:	f000 feae 	bl	ca64 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    bd08:	2108      	movs	r1, #8
    bd0a:	f242 0001 	movw	r0, #8193	; 0x2001
    bd0e:	f7ff fea3 	bl	ba58 <bt_hci_cmd_create>
	if (!buf) {
    bd12:	4604      	mov	r4, r0
    bd14:	2800      	cmp	r0, #0
    bd16:	d06c      	beq.n	bdf2 <hci_init+0x262>
    bd18:	2108      	movs	r1, #8
    bd1a:	4408      	add	r0, r1
    bd1c:	f005 f917 	bl	10f4e <net_buf_simple_add>
	dst[0] = val;
    bd20:	2702      	movs	r7, #2
	dst[1] = val >> 8;
    bd22:	2200      	movs	r2, #0
	dst[0] = val;
    bd24:	7007      	strb	r7, [r0, #0]
	dst[1] = val >> 8;
    bd26:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    bd28:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    bd2a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    bd2c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    bd2e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    bd30:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    bd32:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    bd34:	4621      	mov	r1, r4
    bd36:	f242 0001 	movw	r0, #8193	; 0x2001
    bd3a:	f7ff fec7 	bl	bacc <bt_hci_cmd_send_sync>
	if (err) {
    bd3e:	4604      	mov	r4, r0
    bd40:	2800      	cmp	r0, #0
    bd42:	d197      	bne.n	bc74 <hci_init+0xe4>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    bd44:	2108      	movs	r1, #8
    bd46:	f640 4001 	movw	r0, #3073	; 0xc01
    bd4a:	f7ff fe85 	bl	ba58 <bt_hci_cmd_create>
	if (!buf) {
    bd4e:	4606      	mov	r6, r0
    bd50:	2800      	cmp	r0, #0
    bd52:	d04e      	beq.n	bdf2 <hci_init+0x262>
    bd54:	2108      	movs	r1, #8
    bd56:	4408      	add	r0, r1
    bd58:	f005 f8f9 	bl	10f4e <net_buf_simple_add>
    bd5c:	2380      	movs	r3, #128	; 0x80
    bd5e:	7043      	strb	r3, [r0, #1]
    bd60:	2320      	movs	r3, #32
	dst[0] = val;
    bd62:	7004      	strb	r4, [r0, #0]
    bd64:	7084      	strb	r4, [r0, #2]
    bd66:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    bd68:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    bd6a:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    bd6c:	70c7      	strb	r7, [r0, #3]
    bd6e:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    bd70:	4622      	mov	r2, r4
    bd72:	4631      	mov	r1, r6
    bd74:	f640 4001 	movw	r0, #3073	; 0xc01
    bd78:	f7ff fea8 	bl	bacc <bt_hci_cmd_send_sync>
	if (err) {
    bd7c:	4604      	mov	r4, r0
    bd7e:	2800      	cmp	r0, #0
    bd80:	f47f af78 	bne.w	bc74 <hci_init+0xe4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    bd84:	4601      	mov	r1, r0
    bd86:	aa01      	add	r2, sp, #4
    bd88:	f64f 4001 	movw	r0, #64513	; 0xfc01
    bd8c:	f7ff fe9e 	bl	bacc <bt_hci_cmd_send_sync>
	if (err) {
    bd90:	4604      	mov	r4, r0
    bd92:	bb48      	cbnz	r0, bde8 <hci_init+0x258>
	net_buf_unref(rsp);
    bd94:	9801      	ldr	r0, [sp, #4]
    bd96:	f000 fe65 	bl	ca64 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    bd9a:	4621      	mov	r1, r4
    bd9c:	aa01      	add	r2, sp, #4
    bd9e:	f64f 4002 	movw	r0, #64514	; 0xfc02
    bda2:	f7ff fe93 	bl	bacc <bt_hci_cmd_send_sync>
	if (err) {
    bda6:	4604      	mov	r4, r0
    bda8:	b9f0      	cbnz	r0, bde8 <hci_init+0x258>
	rp.cmds = (void *)rsp->data;
    bdaa:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    bdac:	4816      	ldr	r0, [pc, #88]	; (be08 <hci_init+0x278>)
    bdae:	68b1      	ldr	r1, [r6, #8]
    bdb0:	463a      	mov	r2, r7
    bdb2:	3101      	adds	r1, #1
    bdb4:	f004 fe78 	bl	10aa8 <memcpy>
	net_buf_unref(rsp);
    bdb8:	4630      	mov	r0, r6
    bdba:	f000 fe53 	bl	ca64 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    bdbe:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    bdc2:	075b      	lsls	r3, r3, #29
    bdc4:	d510      	bpl.n	bde8 <hci_init+0x258>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    bdc6:	aa01      	add	r2, sp, #4
    bdc8:	4621      	mov	r1, r4
    bdca:	f64f 4003 	movw	r0, #64515	; 0xfc03
    bdce:	f7ff fe7d 	bl	bacc <bt_hci_cmd_send_sync>
		if (err) {
    bdd2:	b948      	cbnz	r0, bde8 <hci_init+0x258>
		rp.feat = (void *)rsp->data;
    bdd4:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    bdd6:	480d      	ldr	r0, [pc, #52]	; (be0c <hci_init+0x27c>)
    bdd8:	68a1      	ldr	r1, [r4, #8]
    bdda:	2201      	movs	r2, #1
    bddc:	4411      	add	r1, r2
    bdde:	f004 fe63 	bl	10aa8 <memcpy>
		net_buf_unref(rsp);
    bde2:	4620      	mov	r0, r4
    bde4:	f000 fe3e 	bl	ca64 <net_buf_unref>
}
    bde8:	b003      	add	sp, #12
    bdea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	err = bt_id_init();
    bdee:	f000 bbcd 	b.w	c58c <bt_id_init>
		return -ENOBUFS;
    bdf2:	f06f 0468 	mvn.w	r4, #104	; 0x68
    bdf6:	e73d      	b.n	bc74 <hci_init+0xe4>
    bdf8:	200001a0 	.word	0x200001a0
    bdfc:	20000210 	.word	0x20000210
    be00:	20000218 	.word	0x20000218
    be04:	20000270 	.word	0x20000270
    be08:	20000259 	.word	0x20000259
    be0c:	20000258 	.word	0x20000258

0000be10 <bt_hci_le_rand>:
{
    be10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    be12:	4b14      	ldr	r3, [pc, #80]	; (be64 <bt_hci_le_rand+0x54>)
    be14:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
    be18:	2b00      	cmp	r3, #0
{
    be1a:	4605      	mov	r5, r0
    be1c:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    be1e:	da1d      	bge.n	be5c <bt_hci_le_rand+0x4c>
	while (len > 0) {
    be20:	b914      	cbnz	r4, be28 <bt_hci_le_rand+0x18>
	return 0;
    be22:	4620      	mov	r0, r4
}
    be24:	b003      	add	sp, #12
    be26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    be28:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    be2a:	aa01      	add	r2, sp, #4
    be2c:	f04f 0100 	mov.w	r1, #0
    be30:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
    be34:	4626      	mov	r6, r4
    be36:	bf28      	it	cs
    be38:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    be3a:	f7ff fe47 	bl	bacc <bt_hci_cmd_send_sync>
		if (err) {
    be3e:	2800      	cmp	r0, #0
    be40:	d1f0      	bne.n	be24 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    be42:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
    be44:	68b9      	ldr	r1, [r7, #8]
    be46:	4632      	mov	r2, r6
    be48:	3101      	adds	r1, #1
    be4a:	4628      	mov	r0, r5
    be4c:	f004 fe2c 	bl	10aa8 <memcpy>
		net_buf_unref(rsp);
    be50:	4638      	mov	r0, r7
    be52:	f000 fe07 	bl	ca64 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    be56:	4435      	add	r5, r6
		len -= count;
    be58:	1ba4      	subs	r4, r4, r6
    be5a:	e7e1      	b.n	be20 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    be5c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    be60:	e7e0      	b.n	be24 <bt_hci_le_rand+0x14>
    be62:	bf00      	nop
    be64:	200001a0 	.word	0x200001a0

0000be68 <bt_send>:
	return bt_dev.drv->send(buf);
    be68:	4b02      	ldr	r3, [pc, #8]	; (be74 <bt_send+0xc>)
    be6a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    be6e:	695b      	ldr	r3, [r3, #20]
    be70:	4718      	bx	r3
    be72:	bf00      	nop
    be74:	200001a0 	.word	0x200001a0

0000be78 <hci_tx_thread>:
{
    be78:	b570      	push	{r4, r5, r6, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    be7a:	4d33      	ldr	r5, [pc, #204]	; (bf48 <hci_tx_thread+0xd0>)
	if (bt_dev.sent_cmd) {
    be7c:	4e33      	ldr	r6, [pc, #204]	; (bf4c <hci_tx_thread+0xd4>)
		events[0].state = K_POLL_STATE_NOT_READY;
    be7e:	68eb      	ldr	r3, [r5, #12]
    be80:	f36f 3394 	bfc	r3, #14, #7
    be84:	60eb      	str	r3, [r5, #12]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    be86:	4830      	ldr	r0, [pc, #192]	; (bf48 <hci_tx_thread+0xd0>)
    be88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    be8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    be90:	2101      	movs	r1, #1
    be92:	f004 f9b9 	bl	10208 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    be96:	b160      	cbz	r0, beb2 <hci_tx_thread+0x3a>
    be98:	4a2d      	ldr	r2, [pc, #180]	; (bf50 <hci_tx_thread+0xd8>)
    be9a:	492e      	ldr	r1, [pc, #184]	; (bf54 <hci_tx_thread+0xdc>)
    be9c:	482e      	ldr	r0, [pc, #184]	; (bf58 <hci_tx_thread+0xe0>)
    be9e:	f640 13da 	movw	r3, #2522	; 0x9da
    bea2:	f004 fdb8 	bl	10a16 <assert_print>
    bea6:	4040      	eors	r0, r0
    bea8:	f380 8811 	msr	BASEPRI, r0
    beac:	f04f 0003 	mov.w	r0, #3
    beb0:	df02      	svc	2
		switch (ev->state) {
    beb2:	68eb      	ldr	r3, [r5, #12]
    beb4:	f3c3 3386 	ubfx	r3, r3, #14, #7
    beb8:	2b04      	cmp	r3, #4
    beba:	d12d      	bne.n	bf18 <hci_tx_thread+0xa0>
			if (ev->tag == BT_EVENT_CMD_TX) {
    bebc:	7b2b      	ldrb	r3, [r5, #12]
    bebe:	bb5b      	cbnz	r3, bf18 <hci_tx_thread+0xa0>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    bec0:	4826      	ldr	r0, [pc, #152]	; (bf5c <hci_tx_thread+0xe4>)
    bec2:	2200      	movs	r2, #0
    bec4:	2300      	movs	r3, #0
    bec6:	f004 ffc9 	bl	10e5c <net_buf_get>
	BT_ASSERT(buf);
    beca:	4604      	mov	r4, r0
    becc:	b368      	cbz	r0, bf2a <hci_tx_thread+0xb2>
	return z_impl_k_sem_take(sem, timeout);
    bece:	4824      	ldr	r0, [pc, #144]	; (bf60 <hci_tx_thread+0xe8>)
    bed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bed8:	f003 faa2 	bl	f420 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    bedc:	f8d6 00f8 	ldr.w	r0, [r6, #248]	; 0xf8
    bee0:	b9e8      	cbnz	r0, bf1e <hci_tx_thread+0xa6>
	bt_dev.sent_cmd = net_buf_ref(buf);
    bee2:	4620      	mov	r0, r4
    bee4:	f005 f82f 	bl	10f46 <net_buf_ref>
    bee8:	f8c6 00f8 	str.w	r0, [r6, #248]	; 0xf8
	err = bt_send(buf);
    beec:	4620      	mov	r0, r4
    beee:	f7ff ffbb 	bl	be68 <bt_send>
	if (err) {
    bef2:	b188      	cbz	r0, bf18 <hci_tx_thread+0xa0>
	z_impl_k_sem_give(sem);
    bef4:	481a      	ldr	r0, [pc, #104]	; (bf60 <hci_tx_thread+0xe8>)
    bef6:	f003 fa6d 	bl	f3d4 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    befa:	4620      	mov	r0, r4
    befc:	f000 fcf8 	bl	c8f0 <net_buf_id>
    bf00:	4b18      	ldr	r3, [pc, #96]	; (bf64 <hci_tx_thread+0xec>)
    bf02:	220c      	movs	r2, #12
    bf04:	fb02 3000 	mla	r0, r2, r0, r3
    bf08:	211f      	movs	r1, #31
    bf0a:	8840      	ldrh	r0, [r0, #2]
    bf0c:	4622      	mov	r2, r4
    bf0e:	f7ff fcf5 	bl	b8fc <hci_cmd_done>
		net_buf_unref(buf);
    bf12:	4620      	mov	r0, r4
    bf14:	f000 fda6 	bl	ca64 <net_buf_unref>
	z_impl_k_yield();
    bf18:	f003 fe52 	bl	fbc0 <z_impl_k_yield>
	while (1) {
    bf1c:	e7af      	b.n	be7e <hci_tx_thread+0x6>
		net_buf_unref(bt_dev.sent_cmd);
    bf1e:	f000 fda1 	bl	ca64 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    bf22:	2300      	movs	r3, #0
    bf24:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
    bf28:	e7db      	b.n	bee2 <hci_tx_thread+0x6a>
	BT_ASSERT(buf);
    bf2a:	4a09      	ldr	r2, [pc, #36]	; (bf50 <hci_tx_thread+0xd8>)
    bf2c:	490e      	ldr	r1, [pc, #56]	; (bf68 <hci_tx_thread+0xf0>)
    bf2e:	480a      	ldr	r0, [pc, #40]	; (bf58 <hci_tx_thread+0xe0>)
    bf30:	f640 1373 	movw	r3, #2419	; 0x973
    bf34:	f004 fd6f 	bl	10a16 <assert_print>
    bf38:	4040      	eors	r0, r0
    bf3a:	f380 8811 	msr	BASEPRI, r0
    bf3e:	f04f 0003 	mov.w	r0, #3
    bf42:	df02      	svc	2
    bf44:	e7c3      	b.n	bece <hci_tx_thread+0x56>
    bf46:	bf00      	nop
    bf48:	20000378 	.word	0x20000378
    bf4c:	200001a0 	.word	0x200001a0
    bf50:	00012473 	.word	0x00012473
    bf54:	0001250b 	.word	0x0001250b
    bf58:	000124c0 	.word	0x000124c0
    bf5c:	200002a4 	.word	0x200002a4
    bf60:	20000280 	.word	0x20000280
    bf64:	2000151c 	.word	0x2000151c
    bf68:	00012534 	.word	0x00012534

0000bf6c <hci_event_prio>:
{
    bf6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf70:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    bf72:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    bf76:	4630      	mov	r0, r6
    bf78:	f005 f808 	bl	10f8c <net_buf_simple_headroom>
	state->len = buf->len;
    bf7c:	89a7      	ldrh	r7, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    bf7e:	2f01      	cmp	r7, #1
	state->offset = net_buf_simple_headroom(buf);
    bf80:	4605      	mov	r5, r0
    bf82:	d80c      	bhi.n	bf9e <hci_event_prio+0x32>
    bf84:	4a20      	ldr	r2, [pc, #128]	; (c008 <hci_event_prio+0x9c>)
    bf86:	4921      	ldr	r1, [pc, #132]	; (c00c <hci_event_prio+0xa0>)
    bf88:	4821      	ldr	r0, [pc, #132]	; (c010 <hci_event_prio+0xa4>)
    bf8a:	f640 5377 	movw	r3, #3447	; 0xd77
    bf8e:	f004 fd42 	bl	10a16 <assert_print>
    bf92:	4040      	eors	r0, r0
    bf94:	f380 8811 	msr	BASEPRI, r0
    bf98:	f04f 0003 	mov.w	r0, #3
    bf9c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    bf9e:	4630      	mov	r0, r6
    bfa0:	2102      	movs	r1, #2
    bfa2:	f004 ffeb 	bl	10f7c <net_buf_simple_pull_mem>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    bfa6:	7803      	ldrb	r3, [r0, #0]
    bfa8:	2b05      	cmp	r3, #5
    bfaa:	4606      	mov	r6, r0
    bfac:	d021      	beq.n	bff2 <hci_event_prio+0x86>
    bfae:	3b0e      	subs	r3, #14
    bfb0:	2b01      	cmp	r3, #1
    bfb2:	d921      	bls.n	bff8 <hci_event_prio+0x8c>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    bfb4:	4a14      	ldr	r2, [pc, #80]	; (c008 <hci_event_prio+0x9c>)
    bfb6:	4917      	ldr	r1, [pc, #92]	; (c014 <hci_event_prio+0xa8>)
    bfb8:	4815      	ldr	r0, [pc, #84]	; (c010 <hci_event_prio+0xa4>)
    bfba:	f640 537b 	movw	r3, #3451	; 0xd7b
    bfbe:	f004 fd2a 	bl	10a16 <assert_print>
    bfc2:	4040      	eors	r0, r0
    bfc4:	f380 8811 	msr	BASEPRI, r0
    bfc8:	f04f 0003 	mov.w	r0, #3
    bfcc:	df02      	svc	2
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
    bfce:	f04f 0802 	mov.w	r8, #2
	err = handle_event_common(event, buf, handlers, num_handlers);
    bfd2:	4a11      	ldr	r2, [pc, #68]	; (c018 <hci_event_prio+0xac>)
    bfd4:	7830      	ldrb	r0, [r6, #0]
    bfd6:	2302      	movs	r3, #2
    bfd8:	4621      	mov	r1, r4
    bfda:	f004 fdac 	bl	10b36 <handle_event_common.isra.0>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    bfde:	f018 0f02 	tst.w	r8, #2
    bfe2:	d00c      	beq.n	bffe <hci_event_prio+0x92>
	buf->data = buf->__buf + state->offset;
    bfe4:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    bfe6:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    bfe8:	fa13 f585 	uxtah	r5, r3, r5
    bfec:	60a5      	str	r5, [r4, #8]
}
    bfee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
    bff2:	f04f 0803 	mov.w	r8, #3
    bff6:	e7ec      	b.n	bfd2 <hci_event_prio+0x66>
	switch (evt) {
    bff8:	f04f 0801 	mov.w	r8, #1
    bffc:	e7e9      	b.n	bfd2 <hci_event_prio+0x66>
		net_buf_unref(buf);
    bffe:	4620      	mov	r0, r4
}
    c000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    c004:	f000 bd2e 	b.w	ca64 <net_buf_unref>
    c008:	00012473 	.word	0x00012473
    c00c:	000124a7 	.word	0x000124a7
    c010:	000124c0 	.word	0x000124c0
    c014:	00012538 	.word	0x00012538
    c018:	000122b8 	.word	0x000122b8

0000c01c <bt_recv>:
{
    c01c:	b510      	push	{r4, lr}
	switch (bt_buf_get_type(buf)) {
    c01e:	7d03      	ldrb	r3, [r0, #20]
    c020:	2b01      	cmp	r3, #1
{
    c022:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    c024:	d115      	bne.n	c052 <bt_recv+0x36>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    c026:	6883      	ldr	r3, [r0, #8]
    c028:	781b      	ldrb	r3, [r3, #0]
    c02a:	2b05      	cmp	r3, #5
    c02c:	d006      	beq.n	c03c <bt_recv+0x20>
    c02e:	3b0e      	subs	r3, #14
    c030:	2b01      	cmp	r3, #1
    c032:	d805      	bhi.n	c040 <bt_recv+0x24>
			hci_event_prio(buf);
    c034:	f7ff ff9a 	bl	bf6c <hci_event_prio>
		return 0;
    c038:	2000      	movs	r0, #0
}
    c03a:	bd10      	pop	{r4, pc}
			hci_event_prio(buf);
    c03c:	f7ff ff96 	bl	bf6c <hci_event_prio>
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    c040:	4621      	mov	r1, r4
    c042:	4806      	ldr	r0, [pc, #24]	; (c05c <bt_recv+0x40>)
    c044:	f004 ff28 	bl	10e98 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    c048:	4905      	ldr	r1, [pc, #20]	; (c060 <bt_recv+0x44>)
    c04a:	4806      	ldr	r0, [pc, #24]	; (c064 <bt_recv+0x48>)
    c04c:	f005 fca2 	bl	11994 <k_work_submit_to_queue>
}
    c050:	e7f2      	b.n	c038 <bt_recv+0x1c>
		net_buf_unref(buf);
    c052:	f000 fd07 	bl	ca64 <net_buf_unref>
		return -EINVAL;
    c056:	f06f 0015 	mvn.w	r0, #21
    c05a:	e7ee      	b.n	c03a <bt_recv+0x1e>
    c05c:	2000029c 	.word	0x2000029c
    c060:	2000038c 	.word	0x2000038c
    c064:	20001218 	.word	0x20001218

0000c068 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    c068:	4a08      	ldr	r2, [pc, #32]	; (c08c <bt_hci_driver_register+0x24>)
{
    c06a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    c06c:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
    c070:	b930      	cbnz	r0, c080 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    c072:	68d9      	ldr	r1, [r3, #12]
    c074:	b139      	cbz	r1, c086 <bt_hci_driver_register+0x1e>
    c076:	6959      	ldr	r1, [r3, #20]
    c078:	b129      	cbz	r1, c086 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    c07a:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	return 0;
    c07e:	4770      	bx	lr
		return -EALREADY;
    c080:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c084:	4770      	bx	lr
		return -EINVAL;
    c086:	f06f 0015 	mvn.w	r0, #21
}
    c08a:	4770      	bx	lr
    c08c:	200001a0 	.word	0x200001a0

0000c090 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c090:	4b06      	ldr	r3, [pc, #24]	; (c0ac <bt_finalize_init+0x1c>)
    c092:	f3bf 8f5b 	dmb	ish
    c096:	e853 1f00 	ldrex	r1, [r3]
    c09a:	f041 0104 	orr.w	r1, r1, #4
    c09e:	e843 1200 	strex	r2, r1, [r3]
    c0a2:	2a00      	cmp	r2, #0
    c0a4:	d1f7      	bne.n	c096 <bt_finalize_init+0x6>
    c0a6:	f3bf 8f5b 	dmb	ish
}
    c0aa:	4770      	bx	lr
    c0ac:	2000026c 	.word	0x2000026c

0000c0b0 <init_work>:
{
    c0b0:	b510      	push	{r4, lr}
	err = hci_init();
    c0b2:	f7ff fd6d 	bl	bb90 <hci_init>
	if (err) {
    c0b6:	b908      	cbnz	r0, c0bc <init_work+0xc>
	bt_finalize_init();
    c0b8:	f7ff ffea 	bl	c090 <bt_finalize_init>
	if (ready_cb) {
    c0bc:	4b03      	ldr	r3, [pc, #12]	; (c0cc <init_work+0x1c>)
    c0be:	681b      	ldr	r3, [r3, #0]
    c0c0:	b113      	cbz	r3, c0c8 <init_work+0x18>
}
    c0c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    c0c6:	4718      	bx	r3
}
    c0c8:	bd10      	pop	{r4, pc}
    c0ca:	bf00      	nop
    c0cc:	20001534 	.word	0x20001534

0000c0d0 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    c0d0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    c0d2:	4d39      	ldr	r5, [pc, #228]	; (c1b8 <bt_enable+0xe8>)
    c0d4:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
{
    c0d8:	b088      	sub	sp, #32
    c0da:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    c0dc:	2b00      	cmp	r3, #0
    c0de:	d062      	beq.n	c1a6 <bt_enable+0xd6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c0e0:	f3bf 8f5b 	dmb	ish
    c0e4:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    c0e8:	e853 2f00 	ldrex	r2, [r3]
    c0ec:	f022 0202 	bic.w	r2, r2, #2
    c0f0:	e843 2100 	strex	r1, r2, [r3]
    c0f4:	2900      	cmp	r1, #0
    c0f6:	d1f7      	bne.n	c0e8 <bt_enable+0x18>
    c0f8:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c0fc:	f3bf 8f5b 	dmb	ish
    c100:	e853 4f00 	ldrex	r4, [r3]
    c104:	f044 0201 	orr.w	r2, r4, #1
    c108:	e843 2100 	strex	r1, r2, [r3]
    c10c:	2900      	cmp	r1, #0
    c10e:	d1f7      	bne.n	c100 <bt_enable+0x30>
    c110:	f3bf 8f5b 	dmb	ish
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    c114:	f014 0401 	ands.w	r4, r4, #1
    c118:	d148      	bne.n	c1ac <bt_enable+0xdc>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    c11a:	4b28      	ldr	r3, [pc, #160]	; (c1bc <bt_enable+0xec>)
    c11c:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    c11e:	2201      	movs	r2, #1
    c120:	4611      	mov	r1, r2
    c122:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    c126:	f005 fb9c 	bl	11862 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    c12a:	f505 7082 	add.w	r0, r5, #260	; 0x104
    c12e:	f005 fb43 	bl	117b8 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    c132:	2200      	movs	r2, #0
    c134:	2300      	movs	r3, #0
    c136:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c13a:	f06f 0308 	mvn.w	r3, #8
    c13e:	e9cd 4302 	strd	r4, r3, [sp, #8]
    c142:	e9cd 4400 	strd	r4, r4, [sp]
    c146:	4b1e      	ldr	r3, [pc, #120]	; (c1c0 <bt_enable+0xf0>)
    c148:	491e      	ldr	r1, [pc, #120]	; (c1c4 <bt_enable+0xf4>)
    c14a:	9404      	str	r4, [sp, #16]
    c14c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    c150:	481d      	ldr	r0, [pc, #116]	; (c1c8 <bt_enable+0xf8>)
    c152:	f002 ffb1 	bl	f0b8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    c156:	491d      	ldr	r1, [pc, #116]	; (c1cc <bt_enable+0xfc>)
    c158:	481b      	ldr	r0, [pc, #108]	; (c1c8 <bt_enable+0xf8>)
    c15a:	f005 faa7 	bl	116ac <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_init(&bt_workq);
    c15e:	481c      	ldr	r0, [pc, #112]	; (c1d0 <bt_enable+0x100>)
    c160:	f005 fc29 	bl	119b6 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
    c164:	491b      	ldr	r1, [pc, #108]	; (c1d4 <bt_enable+0x104>)
    c166:	481a      	ldr	r0, [pc, #104]	; (c1d0 <bt_enable+0x100>)
    c168:	9400      	str	r4, [sp, #0]
    c16a:	f06f 0307 	mvn.w	r3, #7
    c16e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c172:	f003 fa73 	bl	f65c <k_work_queue_start>
    c176:	4918      	ldr	r1, [pc, #96]	; (c1d8 <bt_enable+0x108>)
    c178:	4815      	ldr	r0, [pc, #84]	; (c1d0 <bt_enable+0x100>)
    c17a:	f005 fa97 	bl	116ac <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
    c17e:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    c182:	68db      	ldr	r3, [r3, #12]
    c184:	4798      	blx	r3
	if (err) {
    c186:	4604      	mov	r4, r0
    c188:	b928      	cbnz	r0, c196 <bt_enable+0xc6>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
    c18a:	b93e      	cbnz	r6, c19c <bt_enable+0xcc>
	err = hci_init();
    c18c:	f7ff fd00 	bl	bb90 <hci_init>
	if (err) {
    c190:	b978      	cbnz	r0, c1b2 <bt_enable+0xe2>
	bt_finalize_init();
    c192:	f7ff ff7d 	bl	c090 <bt_finalize_init>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    c196:	4620      	mov	r0, r4
    c198:	b008      	add	sp, #32
    c19a:	bd70      	pop	{r4, r5, r6, pc}
	k_work_submit(&bt_dev.init);
    c19c:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    c1a0:	f003 fa56 	bl	f650 <k_work_submit>
	return 0;
    c1a4:	e7f7      	b.n	c196 <bt_enable+0xc6>
		return -ENODEV;
    c1a6:	f06f 0412 	mvn.w	r4, #18
    c1aa:	e7f4      	b.n	c196 <bt_enable+0xc6>
		return -EALREADY;
    c1ac:	f06f 0477 	mvn.w	r4, #119	; 0x77
    c1b0:	e7f1      	b.n	c196 <bt_enable+0xc6>
    c1b2:	4604      	mov	r4, r0
    c1b4:	e7ef      	b.n	c196 <bt_enable+0xc6>
    c1b6:	bf00      	nop
    c1b8:	200001a0 	.word	0x200001a0
    c1bc:	20001534 	.word	0x20001534
    c1c0:	0000be79 	.word	0x0000be79
    c1c4:	20001950 	.word	0x20001950
    c1c8:	200011a0 	.word	0x200011a0
    c1cc:	00012551 	.word	0x00012551
    c1d0:	20001218 	.word	0x20001218
    c1d4:	20001f50 	.word	0x20001f50
    c1d8:	00012557 	.word	0x00012557

0000c1dc <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c1dc:	4b04      	ldr	r3, [pc, #16]	; (c1f0 <bt_is_ready+0x14>)
    c1de:	f3bf 8f5b 	dmb	ish
    c1e2:	6818      	ldr	r0, [r3, #0]
    c1e4:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    c1e8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    c1ec:	4770      	bx	lr
    c1ee:	bf00      	nop
    c1f0:	2000026c 	.word	0x2000026c

0000c1f4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    c1f4:	4800      	ldr	r0, [pc, #0]	; (c1f8 <bt_get_name+0x4>)
    c1f6:	4770      	bx	lr
    c1f8:	00012454 	.word	0x00012454

0000c1fc <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    c1fe:	4f0a      	ldr	r7, [pc, #40]	; (c228 <id_find+0x2c>)
{
    c200:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    c202:	2500      	movs	r5, #0
    c204:	79fb      	ldrb	r3, [r7, #7]
    c206:	b2ec      	uxtb	r4, r5
    c208:	42a3      	cmp	r3, r4
    c20a:	d802      	bhi.n	c212 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    c20c:	f06f 0001 	mvn.w	r0, #1
    c210:	e009      	b.n	c226 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    c212:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    c216:	4439      	add	r1, r7
    c218:	4630      	mov	r0, r6
    c21a:	f004 fca3 	bl	10b64 <bt_addr_le_eq>
    c21e:	3501      	adds	r5, #1
    c220:	2800      	cmp	r0, #0
    c222:	d0ef      	beq.n	c204 <id_find+0x8>
    c224:	4620      	mov	r0, r4
}
    c226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c228:	200001a0 	.word	0x200001a0

0000c22c <set_random_address>:
{
    c22c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    c22e:	4913      	ldr	r1, [pc, #76]	; (c27c <set_random_address+0x50>)
    c230:	2206      	movs	r2, #6
    c232:	4605      	mov	r5, r0
    c234:	f004 fc28 	bl	10a88 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    c238:	b1d8      	cbz	r0, c272 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    c23a:	2106      	movs	r1, #6
    c23c:	f242 0005 	movw	r0, #8197	; 0x2005
    c240:	f7ff fc0a 	bl	ba58 <bt_hci_cmd_create>
	if (!buf) {
    c244:	4604      	mov	r4, r0
    c246:	b1b0      	cbz	r0, c276 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    c248:	2206      	movs	r2, #6
    c24a:	4629      	mov	r1, r5
    c24c:	3008      	adds	r0, #8
    c24e:	f004 fe84 	bl	10f5a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    c252:	2200      	movs	r2, #0
    c254:	4621      	mov	r1, r4
    c256:	f242 0005 	movw	r0, #8197	; 0x2005
    c25a:	f7ff fc37 	bl	bacc <bt_hci_cmd_send_sync>
	if (err) {
    c25e:	b948      	cbnz	r0, c274 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
    c260:	2206      	movs	r2, #6
    c262:	4806      	ldr	r0, [pc, #24]	; (c27c <set_random_address+0x50>)
    c264:	4629      	mov	r1, r5
    c266:	f004 fc1f 	bl	10aa8 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    c26a:	4b05      	ldr	r3, [pc, #20]	; (c280 <set_random_address+0x54>)
    c26c:	2201      	movs	r2, #1
    c26e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
    c272:	2000      	movs	r0, #0
}
    c274:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    c276:	f06f 0068 	mvn.w	r0, #104	; 0x68
    c27a:	e7fb      	b.n	c274 <set_random_address+0x48>
    c27c:	20000201 	.word	0x20000201
    c280:	200001a0 	.word	0x200001a0

0000c284 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    c284:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c286:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    c288:	460d      	mov	r5, r1
    c28a:	b179      	cbz	r1, c2ac <id_create.constprop.0+0x28>
    c28c:	4914      	ldr	r1, [pc, #80]	; (c2e0 <id_create.constprop.0+0x5c>)
    c28e:	4628      	mov	r0, r5
    c290:	f004 fc68 	bl	10b64 <bt_addr_le_eq>
    c294:	b950      	cbnz	r0, c2ac <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
    c296:	4813      	ldr	r0, [pc, #76]	; (c2e4 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    c298:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    c29c:	2207      	movs	r2, #7
    c29e:	4629      	mov	r1, r5
    c2a0:	4420      	add	r0, r4
    c2a2:	f004 fc01 	bl	10aa8 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    c2a6:	2000      	movs	r0, #0
}
    c2a8:	b003      	add	sp, #12
    c2aa:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    c2ac:	4668      	mov	r0, sp
    c2ae:	f004 fc2f 	bl	10b10 <bt_addr_le_create_static>
			if (err) {
    c2b2:	2800      	cmp	r0, #0
    c2b4:	d1f8      	bne.n	c2a8 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
    c2b6:	4668      	mov	r0, sp
    c2b8:	f7ff ffa0 	bl	c1fc <id_find>
    c2bc:	2800      	cmp	r0, #0
    c2be:	daf5      	bge.n	c2ac <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    c2c0:	4b08      	ldr	r3, [pc, #32]	; (c2e4 <id_create.constprop.0+0x60>)
    c2c2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    c2c6:	441c      	add	r4, r3
    c2c8:	2207      	movs	r2, #7
    c2ca:	4669      	mov	r1, sp
    c2cc:	4620      	mov	r0, r4
    c2ce:	f004 fbeb 	bl	10aa8 <memcpy>
		if (addr) {
    c2d2:	2d00      	cmp	r5, #0
    c2d4:	d0e7      	beq.n	c2a6 <id_create.constprop.0+0x22>
    c2d6:	2207      	movs	r2, #7
    c2d8:	4621      	mov	r1, r4
    c2da:	4628      	mov	r0, r5
    c2dc:	e7e1      	b.n	c2a2 <id_create.constprop.0+0x1e>
    c2de:	bf00      	nop
    c2e0:	00012460 	.word	0x00012460
    c2e4:	200001a0 	.word	0x200001a0

0000c2e8 <bt_id_get>:
{
    c2e8:	b538      	push	{r3, r4, r5, lr}
    c2ea:	460d      	mov	r5, r1
		size_t to_copy = MIN(*count, bt_dev.id_count);
    c2ec:	4906      	ldr	r1, [pc, #24]	; (c308 <bt_id_get+0x20>)
    c2ee:	79cc      	ldrb	r4, [r1, #7]
	if (addrs) {
    c2f0:	b138      	cbz	r0, c302 <bt_id_get+0x1a>
		size_t to_copy = MIN(*count, bt_dev.id_count);
    c2f2:	682b      	ldr	r3, [r5, #0]
    c2f4:	429c      	cmp	r4, r3
    c2f6:	bf28      	it	cs
    c2f8:	461c      	movcs	r4, r3
		memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
    c2fa:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
    c2fe:	f004 fbd3 	bl	10aa8 <memcpy>
		*count = to_copy;
    c302:	602c      	str	r4, [r5, #0]
}
    c304:	bd38      	pop	{r3, r4, r5, pc}
    c306:	bf00      	nop
    c308:	200001a0 	.word	0x200001a0

0000c30c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    c30c:	b570      	push	{r4, r5, r6, lr}
    c30e:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    c310:	4604      	mov	r4, r0
    c312:	b918      	cbnz	r0, c31c <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    c314:	b1bd      	cbz	r5, c346 <bt_id_create+0x3a>
			return -EINVAL;
    c316:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    c31a:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    c31c:	491c      	ldr	r1, [pc, #112]	; (c390 <bt_id_create+0x84>)
    c31e:	f004 fc21 	bl	10b64 <bt_addr_le_eq>
    c322:	2800      	cmp	r0, #0
    c324:	d1f6      	bne.n	c314 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    c326:	7823      	ldrb	r3, [r4, #0]
    c328:	2b01      	cmp	r3, #1
    c32a:	d1f4      	bne.n	c316 <bt_id_create+0xa>
    c32c:	79a3      	ldrb	r3, [r4, #6]
    c32e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c332:	2bc0      	cmp	r3, #192	; 0xc0
    c334:	d1ef      	bne.n	c316 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    c336:	4620      	mov	r0, r4
    c338:	f7ff ff60 	bl	c1fc <id_find>
    c33c:	2800      	cmp	r0, #0
    c33e:	dbe9      	blt.n	c314 <bt_id_create+0x8>
			return -EALREADY;
    c340:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c344:	e7e9      	b.n	c31a <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    c346:	4d13      	ldr	r5, [pc, #76]	; (c394 <bt_id_create+0x88>)
    c348:	79eb      	ldrb	r3, [r5, #7]
    c34a:	2b01      	cmp	r3, #1
    c34c:	d01c      	beq.n	c388 <bt_id_create+0x7c>
    c34e:	f3bf 8f5b 	dmb	ish
    c352:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    c356:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    c35a:	07db      	lsls	r3, r3, #31
    c35c:	d50b      	bpl.n	c376 <bt_id_create+0x6a>
	new_id = bt_dev.id_count;
    c35e:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    c360:	4621      	mov	r1, r4
    c362:	4630      	mov	r0, r6
    c364:	f7ff ff8e 	bl	c284 <id_create.constprop.0>
	if (err) {
    c368:	2800      	cmp	r0, #0
    c36a:	d1d6      	bne.n	c31a <bt_id_create+0xe>
		bt_dev.id_count++;
    c36c:	79eb      	ldrb	r3, [r5, #7]
    c36e:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
    c370:	4630      	mov	r0, r6
		bt_dev.id_count++;
    c372:	71eb      	strb	r3, [r5, #7]
	return new_id;
    c374:	e7d1      	b.n	c31a <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    c376:	2c00      	cmp	r4, #0
    c378:	d0cd      	beq.n	c316 <bt_id_create+0xa>
    c37a:	4905      	ldr	r1, [pc, #20]	; (c390 <bt_id_create+0x84>)
    c37c:	4620      	mov	r0, r4
    c37e:	f004 fbf1 	bl	10b64 <bt_addr_le_eq>
    c382:	2800      	cmp	r0, #0
    c384:	d0eb      	beq.n	c35e <bt_id_create+0x52>
    c386:	e7c6      	b.n	c316 <bt_id_create+0xa>
		return -ENOMEM;
    c388:	f06f 000b 	mvn.w	r0, #11
    c38c:	e7c5      	b.n	c31a <bt_id_create+0xe>
    c38e:	bf00      	nop
    c390:	00012460 	.word	0x00012460
    c394:	200001a0 	.word	0x200001a0

0000c398 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    c398:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    c39a:	4604      	mov	r4, r0
    c39c:	b198      	cbz	r0, c3c6 <bt_id_read_public_addr+0x2e>
		BT_WARN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    c39e:	aa01      	add	r2, sp, #4
    c3a0:	2100      	movs	r1, #0
    c3a2:	f241 0009 	movw	r0, #4105	; 0x1009
    c3a6:	f7ff fb91 	bl	bacc <bt_hci_cmd_send_sync>
	if (err) {
    c3aa:	4606      	mov	r6, r0
    c3ac:	b958      	cbnz	r0, c3c6 <bt_id_read_public_addr+0x2e>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    c3ae:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    c3b0:	490f      	ldr	r1, [pc, #60]	; (c3f0 <bt_id_read_public_addr+0x58>)

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    c3b2:	689d      	ldr	r5, [r3, #8]
    c3b4:	3501      	adds	r5, #1
    c3b6:	2206      	movs	r2, #6
    c3b8:	4628      	mov	r0, r5
    c3ba:	f004 fb65 	bl	10a88 <memcmp>
    c3be:	b928      	cbnz	r0, c3cc <bt_id_read_public_addr+0x34>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
    c3c0:	9801      	ldr	r0, [sp, #4]
    c3c2:	f000 fb4f 	bl	ca64 <net_buf_unref>
		return 0U;
    c3c6:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    c3c8:	b002      	add	sp, #8
    c3ca:	bd70      	pop	{r4, r5, r6, pc}
    c3cc:	4909      	ldr	r1, [pc, #36]	; (c3f4 <bt_id_read_public_addr+0x5c>)
    c3ce:	2206      	movs	r2, #6
    c3d0:	4628      	mov	r0, r5
    c3d2:	f004 fb59 	bl	10a88 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    c3d6:	2800      	cmp	r0, #0
    c3d8:	d0f2      	beq.n	c3c0 <bt_id_read_public_addr+0x28>
	memcpy(dst, src, sizeof(*dst));
    c3da:	2206      	movs	r2, #6
    c3dc:	4629      	mov	r1, r5
    c3de:	1c60      	adds	r0, r4, #1
    c3e0:	f004 fb62 	bl	10aa8 <memcpy>
	net_buf_unref(rsp);
    c3e4:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    c3e6:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    c3e8:	f000 fb3c 	bl	ca64 <net_buf_unref>
	return 1U;
    c3ec:	2001      	movs	r0, #1
    c3ee:	e7eb      	b.n	c3c8 <bt_id_read_public_addr+0x30>
    c3f0:	0001246d 	.word	0x0001246d
    c3f4:	00012467 	.word	0x00012467

0000c3f8 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    c3f8:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    c3fa:	4668      	mov	r0, sp
    c3fc:	f7ff ffcc 	bl	c398 <bt_id_read_public_addr>
    c400:	4b04      	ldr	r3, [pc, #16]	; (c414 <bt_setup_public_id_addr+0x1c>)
    c402:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    c404:	b118      	cbz	r0, c40e <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    c406:	4669      	mov	r1, sp
    c408:	2000      	movs	r0, #0
    c40a:	f7ff ff3b 	bl	c284 <id_create.constprop.0>
}
    c40e:	b003      	add	sp, #12
    c410:	f85d fb04 	ldr.w	pc, [sp], #4
    c414:	200001a0 	.word	0x200001a0

0000c418 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    c418:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    c41c:	4b16      	ldr	r3, [pc, #88]	; (c478 <bt_read_static_addr+0x60>)
    c41e:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    c422:	07db      	lsls	r3, r3, #31
{
    c424:	4607      	mov	r7, r0
    c426:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    c428:	d404      	bmi.n	c434 <bt_read_static_addr+0x1c>
		BT_WARN("Read Static Addresses command not available");
		return 0;
    c42a:	2600      	movs	r6, #0
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    c42c:	4630      	mov	r0, r6
    c42e:	b002      	add	sp, #8
    c430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    c434:	aa01      	add	r2, sp, #4
    c436:	2100      	movs	r1, #0
    c438:	f64f 4009 	movw	r0, #64521	; 0xfc09
    c43c:	f7ff fb46 	bl	bacc <bt_hci_cmd_send_sync>
	if (err) {
    c440:	4604      	mov	r4, r0
    c442:	2800      	cmp	r0, #0
    c444:	d1f1      	bne.n	c42a <bt_read_static_addr+0x12>
	rp = (void *)rsp->data;
    c446:	9b01      	ldr	r3, [sp, #4]
    c448:	689d      	ldr	r5, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    c44a:	786e      	ldrb	r6, [r5, #1]
    c44c:	4546      	cmp	r6, r8
    c44e:	bf28      	it	cs
    c450:	4646      	movcs	r6, r8
	for (i = 0; i < cnt; i++) {
    c452:	3502      	adds	r5, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    c454:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
    c458:	42a6      	cmp	r6, r4
    c45a:	dc03      	bgt.n	c464 <bt_read_static_addr+0x4c>
	net_buf_unref(rsp);
    c45c:	9801      	ldr	r0, [sp, #4]
    c45e:	f000 fb01 	bl	ca64 <net_buf_unref>
	if (!cnt) {
    c462:	e7e3      	b.n	c42c <bt_read_static_addr+0x14>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    c464:	4629      	mov	r1, r5
    c466:	fb08 7004 	mla	r0, r8, r4, r7
    c46a:	2216      	movs	r2, #22
    c46c:	f004 fb1c 	bl	10aa8 <memcpy>
	for (i = 0; i < cnt; i++) {
    c470:	3401      	adds	r4, #1
    c472:	3516      	adds	r5, #22
    c474:	e7f0      	b.n	c458 <bt_read_static_addr+0x40>
    c476:	bf00      	nop
    c478:	200001a0 	.word	0x200001a0

0000c47c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    c47c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    c47e:	4e15      	ldr	r6, [pc, #84]	; (c4d4 <bt_setup_random_id_addr+0x58>)
    c480:	79f4      	ldrb	r4, [r6, #7]
{
    c482:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    c484:	b92c      	cbnz	r4, c492 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    c486:	2101      	movs	r1, #1
    c488:	a802      	add	r0, sp, #8
    c48a:	f7ff ffc5 	bl	c418 <bt_read_static_addr>
    c48e:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    c490:	b9c8      	cbnz	r0, c4c6 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    c492:	2100      	movs	r1, #0
    c494:	4608      	mov	r0, r1
}
    c496:	b009      	add	sp, #36	; 0x24
    c498:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    c49c:	f7ff bf36 	b.w	c30c <bt_id_create>
    c4a0:	ab02      	add	r3, sp, #8
    c4a2:	fb07 3105 	mla	r1, r7, r5, r3
    c4a6:	2206      	movs	r2, #6
    c4a8:	f10d 0001 	add.w	r0, sp, #1
    c4ac:	f004 fafc 	bl	10aa8 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    c4b0:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    c4b2:	4669      	mov	r1, sp
    c4b4:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    c4b6:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    c4ba:	f7ff fee3 	bl	c284 <id_create.constprop.0>
				if (err) {
    c4be:	3401      	adds	r4, #1
    c4c0:	b110      	cbz	r0, c4c8 <bt_setup_random_id_addr+0x4c>
}
    c4c2:	b009      	add	sp, #36	; 0x24
    c4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    c4c6:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    c4c8:	79f3      	ldrb	r3, [r6, #7]
    c4ca:	b2e5      	uxtb	r5, r4
    c4cc:	42ab      	cmp	r3, r5
    c4ce:	d8e7      	bhi.n	c4a0 <bt_setup_random_id_addr+0x24>
			return 0;
    c4d0:	2000      	movs	r0, #0
    c4d2:	e7f6      	b.n	c4c2 <bt_setup_random_id_addr+0x46>
    c4d4:	200001a0 	.word	0x200001a0

0000c4d8 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    c4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4dc:	4690      	mov	r8, r2
    c4de:	460e      	mov	r6, r1
    c4e0:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
    c4e2:	4602      	mov	r2, r0
    c4e4:	2800      	cmp	r0, #0
    c4e6:	d04b      	beq.n	c580 <bt_id_set_adv_own_addr+0xa8>
    c4e8:	2b00      	cmp	r3, #0
    c4ea:	d049      	beq.n	c580 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    c4ec:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
    c4ee:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    c4f0:	d531      	bpl.n	c556 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    c4f2:	4f25      	ldr	r7, [pc, #148]	; (c588 <bt_id_set_adv_own_addr+0xb0>)
    c4f4:	f1b8 0f00 	cmp.w	r8, #0
    c4f8:	d013      	beq.n	c522 <bt_id_set_adv_own_addr+0x4a>
    c4fa:	0688      	lsls	r0, r1, #26
    c4fc:	d40a      	bmi.n	c514 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    c4fe:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    c502:	5cfb      	ldrb	r3, [r7, r3]
    c504:	2b01      	cmp	r3, #1
    c506:	d015      	beq.n	c534 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    c508:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    c50a:	06b2      	lsls	r2, r6, #26
    c50c:	d50f      	bpl.n	c52e <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    c50e:	f043 0302 	orr.w	r3, r3, #2
    c512:	e00b      	b.n	c52c <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    c514:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
    c518:	0659      	lsls	r1, r3, #25
    c51a:	d4f0      	bmi.n	c4fe <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
    c51c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c520:	e006      	b.n	c530 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    c522:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    c526:	5cfb      	ldrb	r3, [r7, r3]
    c528:	2b01      	cmp	r3, #1
    c52a:	d003      	beq.n	c534 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
    c52c:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    c52e:	2000      	movs	r0, #0
}
    c530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    c534:	2107      	movs	r1, #7
    c536:	fb01 7104 	mla	r1, r1, r4, r7
    c53a:	3101      	adds	r1, #1
    c53c:	4610      	mov	r0, r2
    c53e:	f004 fb19 	bl	10b74 <bt_id_set_adv_random_addr>
				if (err) {
    c542:	2800      	cmp	r0, #0
    c544:	d1f4      	bne.n	c530 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
    c546:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    c54a:	5d3b      	ldrb	r3, [r7, r4]
    c54c:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    c54e:	f1b8 0f00 	cmp.w	r8, #0
    c552:	d0ec      	beq.n	c52e <bt_id_set_adv_own_addr+0x56>
    c554:	e7d9      	b.n	c50a <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    c556:	074b      	lsls	r3, r1, #29
    c558:	d50e      	bpl.n	c578 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    c55a:	4e0b      	ldr	r6, [pc, #44]	; (c588 <bt_id_set_adv_own_addr+0xb0>)
    c55c:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    c560:	5df3      	ldrb	r3, [r6, r7]
    c562:	2b01      	cmp	r3, #1
    c564:	d1e2      	bne.n	c52c <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    c566:	2107      	movs	r1, #7
    c568:	fb11 3104 	smlabb	r1, r1, r4, r3
    c56c:	4431      	add	r1, r6
    c56e:	f004 fb01 	bl	10b74 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
    c572:	5df3      	ldrb	r3, [r6, r7]
    c574:	702b      	strb	r3, [r5, #0]
		if (err) {
    c576:	e7db      	b.n	c530 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
    c578:	f004 fb04 	bl	10b84 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    c57c:	2301      	movs	r3, #1
    c57e:	e7f9      	b.n	c574 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
    c580:	f06f 0015 	mvn.w	r0, #21
    c584:	e7d4      	b.n	c530 <bt_id_set_adv_own_addr+0x58>
    c586:	bf00      	nop
    c588:	200001a0 	.word	0x200001a0

0000c58c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    c58c:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    c58e:	4c0a      	ldr	r4, [pc, #40]	; (c5b8 <bt_id_init+0x2c>)
    c590:	79e3      	ldrb	r3, [r4, #7]
    c592:	b10b      	cbz	r3, c598 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    c594:	2000      	movs	r0, #0
}
    c596:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
    c598:	f7ff ff2e 	bl	c3f8 <bt_setup_public_id_addr>
		if (err) {
    c59c:	2800      	cmp	r0, #0
    c59e:	d1fa      	bne.n	c596 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    c5a0:	79e3      	ldrb	r3, [r4, #7]
    c5a2:	2b00      	cmp	r3, #0
    c5a4:	d1f6      	bne.n	c594 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    c5a6:	f7ff ff69 	bl	c47c <bt_setup_random_id_addr>
		if (err) {
    c5aa:	2800      	cmp	r0, #0
    c5ac:	d1f3      	bne.n	c596 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    c5ae:	1c60      	adds	r0, r4, #1
}
    c5b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
    c5b4:	f7ff be3a 	b.w	c22c <set_random_address>
    c5b8:	200001a0 	.word	0x200001a0

0000c5bc <valid_adv_param>:

	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
    c5bc:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    c5be:	6843      	ldr	r3, [r0, #4]
{
    c5c0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    c5c2:	0558      	lsls	r0, r3, #21
    c5c4:	d501      	bpl.n	c5ca <valid_adv_param+0xe>
		return false;
    c5c6:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    c5c8:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    c5ca:	6922      	ldr	r2, [r4, #16]
    c5cc:	b10a      	cbz	r2, c5d2 <valid_adv_param+0x16>
    c5ce:	07d9      	lsls	r1, r3, #31
    c5d0:	d5f9      	bpl.n	c5c6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    c5d2:	4d19      	ldr	r5, [pc, #100]	; (c638 <valid_adv_param+0x7c>)
    c5d4:	7820      	ldrb	r0, [r4, #0]
    c5d6:	79eb      	ldrb	r3, [r5, #7]
    c5d8:	4283      	cmp	r3, r0
    c5da:	d9f4      	bls.n	c5c6 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    c5dc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	return memcmp(a, b, sizeof(*a));
    c5e0:	4916      	ldr	r1, [pc, #88]	; (c63c <valid_adv_param+0x80>)
    c5e2:	2207      	movs	r2, #7
    c5e4:	4428      	add	r0, r5
    c5e6:	f004 fa4f 	bl	10a88 <memcmp>
	if (param->id >= bt_dev.id_count ||
    c5ea:	2800      	cmp	r0, #0
    c5ec:	d0eb      	beq.n	c5c6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    c5ee:	6860      	ldr	r0, [r4, #4]
    c5f0:	07c2      	lsls	r2, r0, #31
    c5f2:	d406      	bmi.n	c602 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    c5f4:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    c5f8:	2b08      	cmp	r3, #8
    c5fa:	d802      	bhi.n	c602 <valid_adv_param+0x46>
    c5fc:	68a3      	ldr	r3, [r4, #8]
    c5fe:	2b9f      	cmp	r3, #159	; 0x9f
    c600:	d9e1      	bls.n	c5c6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    c602:	f010 0f30 	tst.w	r0, #48	; 0x30
    c606:	d002      	beq.n	c60e <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    c608:	6923      	ldr	r3, [r4, #16]
    c60a:	2b00      	cmp	r3, #0
    c60c:	d0db      	beq.n	c5c6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    c60e:	06c3      	lsls	r3, r0, #27
    c610:	d401      	bmi.n	c616 <valid_adv_param+0x5a>
    c612:	6923      	ldr	r3, [r4, #16]
    c614:	b943      	cbnz	r3, c628 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
    c616:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    c61a:	429a      	cmp	r2, r3
    c61c:	d8d3      	bhi.n	c5c6 <valid_adv_param+0xa>
    c61e:	2a1f      	cmp	r2, #31
    c620:	d9d1      	bls.n	c5c6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    c622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    c626:	d8ce      	bhi.n	c5c6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    c628:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    c62c:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    c630:	bf18      	it	ne
    c632:	2001      	movne	r0, #1
    c634:	e7c8      	b.n	c5c8 <valid_adv_param+0xc>
    c636:	bf00      	nop
    c638:	200001a0 	.word	0x200001a0
    c63c:	00012460 	.word	0x00012460

0000c640 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    c640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    c644:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
    c648:	b08b      	sub	sp, #44	; 0x2c
	bool dir_adv = (param->peer != NULL), scannable = false;
    c64a:	f1ba 0500 	subs.w	r5, sl, #0
{
    c64e:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    c650:	4879      	ldr	r0, [pc, #484]	; (c838 <bt_le_adv_start_legacy+0x1f8>)
    c652:	9305      	str	r3, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
    c654:	bf18      	it	ne
    c656:	2501      	movne	r5, #1
    c658:	f004 fabe 	bl	10bd8 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c65c:	0740      	lsls	r0, r0, #29
{
    c65e:	460c      	mov	r4, r1
    c660:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c662:	f140 80df 	bpl.w	c824 <bt_le_adv_start_legacy+0x1e4>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    c666:	4608      	mov	r0, r1
    c668:	f7ff ffa8 	bl	c5bc <valid_adv_param>
    c66c:	b928      	cbnz	r0, c67a <bt_le_adv_start_legacy+0x3a>
		return -EINVAL;
    c66e:	f06f 0515 	mvn.w	r5, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    c672:	4628      	mov	r0, r5
    c674:	b00b      	add	sp, #44	; 0x2c
    c676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    c67a:	4620      	mov	r0, r4
    c67c:	f004 fa99 	bl	10bb2 <bt_id_adv_random_addr_check>
    c680:	4681      	mov	r9, r0
    c682:	2800      	cmp	r0, #0
    c684:	d0f3      	beq.n	c66e <bt_le_adv_start_legacy+0x2e>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    c686:	f106 0810 	add.w	r8, r6, #16
    c68a:	4640      	mov	r0, r8
    c68c:	f004 faa4 	bl	10bd8 <atomic_get>
    c690:	0601      	lsls	r1, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    c692:	f3c0 17c0 	ubfx	r7, r0, #7, #1
    c696:	f100 80c8 	bmi.w	c82a <bt_le_adv_start_legacy+0x1ea>
	(void)memset(&set_param, 0, sizeof(set_param));
    c69a:	220f      	movs	r2, #15
    c69c:	4639      	mov	r1, r7
    c69e:	a806      	add	r0, sp, #24
    c6a0:	f004 fa0d 	bl	10abe <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    c6a4:	68a3      	ldr	r3, [r4, #8]
    c6a6:	f8ad 3018 	strh.w	r3, [sp, #24]
	set_param.channel_map  = get_adv_channel_map(param->options);
    c6aa:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    c6ac:	68e3      	ldr	r3, [r4, #12]
    c6ae:	f8ad 301a 	strh.w	r3, [sp, #26]
	set_param.channel_map  = get_adv_channel_map(param->options);
    c6b2:	f004 fa82 	bl	10bba <get_adv_channel_map>
	if (adv->id != param->id) {
    c6b6:	7832      	ldrb	r2, [r6, #0]
    c6b8:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    c6ba:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
	if (adv->id != param->id) {
    c6be:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    c6c0:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
	if (adv->id != param->id) {
    c6c4:	d004      	beq.n	c6d0 <bt_le_adv_start_legacy+0x90>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c6c6:	485c      	ldr	r0, [pc, #368]	; (c838 <bt_le_adv_start_legacy+0x1f8>)
    c6c8:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    c6cc:	f004 fa8a 	bl	10be4 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    c6d0:	4a5a      	ldr	r2, [pc, #360]	; (c83c <bt_le_adv_start_legacy+0x1fc>)
	adv->id = param->id;
    c6d2:	7823      	ldrb	r3, [r4, #0]
    c6d4:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    c6d6:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    c6da:	6861      	ldr	r1, [r4, #4]
    c6dc:	462a      	mov	r2, r5
    c6de:	f10d 031d 	add.w	r3, sp, #29
    c6e2:	4630      	mov	r0, r6
    c6e4:	f7ff fef8 	bl	c4d8 <bt_id_set_adv_own_addr>
	if (err) {
    c6e8:	4605      	mov	r5, r0
    c6ea:	2800      	cmp	r0, #0
    c6ec:	d1c1      	bne.n	c672 <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    c6ee:	f106 0009 	add.w	r0, r6, #9
	memcpy(dst, src, sizeof(*dst));
    c6f2:	2207      	movs	r2, #7
	if (dir_adv) {
    c6f4:	f1ba 0f00 	cmp.w	sl, #0
    c6f8:	d013      	beq.n	c722 <bt_le_adv_start_legacy+0xe2>
    c6fa:	6921      	ldr	r1, [r4, #16]
    c6fc:	f004 f9d4 	bl	10aa8 <memcpy>
	name_type = get_adv_name_type_param(param);
    c700:	4620      	mov	r0, r4
    c702:	f004 fb6b 	bl	10ddc <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    c706:	6863      	ldr	r3, [r4, #4]
    c708:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
    c70a:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    c70c:	d416      	bmi.n	c73c <bt_le_adv_start_legacy+0xfc>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    c70e:	0598      	lsls	r0, r3, #22
    c710:	d403      	bmi.n	c71a <bt_le_adv_start_legacy+0xda>
    c712:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c714:	b90b      	cbnz	r3, c71a <bt_le_adv_start_legacy+0xda>
    c716:	2f02      	cmp	r7, #2
    c718:	d13f      	bne.n	c79a <bt_le_adv_start_legacy+0x15a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    c71a:	2302      	movs	r3, #2
    c71c:	f88d 301c 	strb.w	r3, [sp, #28]
    c720:	e01a      	b.n	c758 <bt_le_adv_start_legacy+0x118>
    c722:	4947      	ldr	r1, [pc, #284]	; (c840 <bt_le_adv_start_legacy+0x200>)
    c724:	f004 f9c0 	bl	10aa8 <memcpy>
	name_type = get_adv_name_type_param(param);
    c728:	4620      	mov	r0, r4
    c72a:	f004 fb57 	bl	10ddc <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    c72e:	6863      	ldr	r3, [r4, #4]
    c730:	07dd      	lsls	r5, r3, #31
	name_type = get_adv_name_type_param(param);
    c732:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    c734:	d5eb      	bpl.n	c70e <bt_le_adv_start_legacy+0xce>
			set_param.type = BT_HCI_ADV_IND;
    c736:	f88d a01c 	strb.w	sl, [sp, #28]
    c73a:	e00d      	b.n	c758 <bt_le_adv_start_legacy+0x118>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
    c73c:	f013 0f10 	tst.w	r3, #16
    c740:	bf0c      	ite	eq
    c742:	2301      	moveq	r3, #1
    c744:	2304      	movne	r3, #4
    c746:	6921      	ldr	r1, [r4, #16]
    c748:	f88d 301c 	strb.w	r3, [sp, #28]
    c74c:	2207      	movs	r2, #7
    c74e:	f10d 001e 	add.w	r0, sp, #30
    c752:	f004 f9a9 	bl	10aa8 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    c756:	46a9      	mov	r9, r5
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    c758:	210f      	movs	r1, #15
    c75a:	f242 0006 	movw	r0, #8198	; 0x2006
    c75e:	f7ff f97b 	bl	ba58 <bt_hci_cmd_create>
	if (!buf) {
    c762:	4605      	mov	r5, r0
    c764:	2800      	cmp	r0, #0
    c766:	d063      	beq.n	c830 <bt_le_adv_start_legacy+0x1f0>
    c768:	220f      	movs	r2, #15
    c76a:	a906      	add	r1, sp, #24
    c76c:	3008      	adds	r0, #8
    c76e:	f004 fbf4 	bl	10f5a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    c772:	4629      	mov	r1, r5
    c774:	2200      	movs	r2, #0
    c776:	f242 0006 	movw	r0, #8198	; 0x2006
    c77a:	f7ff f9a7 	bl	bacc <bt_hci_cmd_send_sync>
	if (err) {
    c77e:	4605      	mov	r5, r0
    c780:	2800      	cmp	r0, #0
    c782:	f47f af76 	bne.w	c672 <bt_le_adv_start_legacy+0x32>
	if (!dir_adv) {
    c786:	f1ba 0f00 	cmp.w	sl, #0
    c78a:	d00c      	beq.n	c7a6 <bt_le_adv_start_legacy+0x166>
	return bt_le_adv_set_enable_legacy(adv, enable);
    c78c:	2101      	movs	r1, #1
    c78e:	4630      	mov	r0, r6
    c790:	f004 fb34 	bl	10dfc <bt_le_adv_set_enable_legacy>
	if (err) {
    c794:	b1f0      	cbz	r0, c7d4 <bt_le_adv_start_legacy+0x194>
    c796:	4605      	mov	r5, r0
    c798:	e76b      	b.n	c672 <bt_le_adv_start_legacy+0x32>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    c79a:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    c79c:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    c7a0:	f88d 301c 	strb.w	r3, [sp, #28]
    c7a4:	e7d8      	b.n	c758 <bt_le_adv_start_legacy+0x118>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    c7a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c7a8:	9300      	str	r3, [sp, #0]
    c7aa:	e9cd 9701 	strd	r9, r7, [sp, #4]
    c7ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c7b0:	9a05      	ldr	r2, [sp, #20]
    c7b2:	4659      	mov	r1, fp
    c7b4:	4630      	mov	r0, r6
    c7b6:	f004 fa9a 	bl	10cee <le_adv_update.constprop.0>
		if (err) {
    c7ba:	2800      	cmp	r0, #0
    c7bc:	d1eb      	bne.n	c796 <bt_le_adv_start_legacy+0x156>
	return bt_le_adv_set_enable_legacy(adv, enable);
    c7be:	2101      	movs	r1, #1
    c7c0:	4630      	mov	r0, r6
    c7c2:	f004 fb1b 	bl	10dfc <bt_le_adv_set_enable_legacy>
	if (err) {
    c7c6:	2800      	cmp	r0, #0
    c7c8:	d1e5      	bne.n	c796 <bt_le_adv_start_legacy+0x156>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    c7ca:	6860      	ldr	r0, [r4, #4]
    c7cc:	f080 0002 	eor.w	r0, r0, #2
    c7d0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    c7d4:	f000 0201 	and.w	r2, r0, #1
    c7d8:	210e      	movs	r1, #14
    c7da:	4640      	mov	r0, r8
    c7dc:	f004 fa70 	bl	10cc0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    c7e0:	1e7b      	subs	r3, r7, #1
    c7e2:	425a      	negs	r2, r3
    c7e4:	415a      	adcs	r2, r3
    c7e6:	4640      	mov	r0, r8
    c7e8:	2108      	movs	r1, #8
    c7ea:	f004 fa69 	bl	10cc0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    c7ee:	1eb9      	subs	r1, r7, #2
    c7f0:	424a      	negs	r2, r1
    c7f2:	414a      	adcs	r2, r1
    c7f4:	4640      	mov	r0, r8
    c7f6:	2109      	movs	r1, #9
    c7f8:	f004 fa62 	bl	10cc0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    c7fc:	6862      	ldr	r2, [r4, #4]
    c7fe:	4640      	mov	r0, r8
    c800:	f002 0201 	and.w	r2, r2, #1
    c804:	210a      	movs	r1, #10
    c806:	f004 fa5b 	bl	10cc0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    c80a:	464a      	mov	r2, r9
    c80c:	4640      	mov	r0, r8
    c80e:	210b      	movs	r1, #11
    c810:	f004 fa56 	bl	10cc0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    c814:	6862      	ldr	r2, [r4, #4]
    c816:	210d      	movs	r1, #13
    c818:	f3c2 0280 	ubfx	r2, r2, #2, #1
    c81c:	4640      	mov	r0, r8
    c81e:	f004 fa4f 	bl	10cc0 <atomic_set_bit_to>
	return 0;
    c822:	e726      	b.n	c672 <bt_le_adv_start_legacy+0x32>
		return -EAGAIN;
    c824:	f06f 050a 	mvn.w	r5, #10
    c828:	e723      	b.n	c672 <bt_le_adv_start_legacy+0x32>
		return -EALREADY;
    c82a:	f06f 0577 	mvn.w	r5, #119	; 0x77
    c82e:	e720      	b.n	c672 <bt_le_adv_start_legacy+0x32>
		return -ENOBUFS;
    c830:	f06f 0568 	mvn.w	r5, #104	; 0x68
    c834:	e71d      	b.n	c672 <bt_le_adv_start_legacy+0x32>
    c836:	bf00      	nop
    c838:	2000026c 	.word	0x2000026c
    c83c:	200001a0 	.word	0x200001a0
    c840:	00012460 	.word	0x00012460

0000c844 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    c844:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c846:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    c848:	9a06      	ldr	r2, [sp, #24]
{
    c84a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    c84c:	e9cd 3200 	strd	r3, r2, [sp]
    c850:	462b      	mov	r3, r5
    c852:	460a      	mov	r2, r1
    c854:	4601      	mov	r1, r0
    c856:	4811      	ldr	r0, [pc, #68]	; (c89c <bt_le_adv_start+0x58>)
    c858:	f7ff fef2 	bl	c640 <bt_le_adv_start_legacy>
    c85c:	4621      	mov	r1, r4
    c85e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    c860:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    c862:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    c866:	429d      	cmp	r5, r3
    c868:	d102      	bne.n	c870 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    c86a:	4630      	mov	r0, r6
    c86c:	b002      	add	sp, #8
    c86e:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    c870:	880a      	ldrh	r2, [r1, #0]
    c872:	4282      	cmp	r2, r0
    c874:	d104      	bne.n	c880 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    c876:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    c878:	b112      	cbz	r2, c880 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    c87a:	7812      	ldrb	r2, [r2, #0]
    c87c:	07d2      	lsls	r2, r2, #31
    c87e:	d402      	bmi.n	c886 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    c880:	3301      	adds	r3, #1
    c882:	3108      	adds	r1, #8
    c884:	e7ef      	b.n	c866 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    c886:	4906      	ldr	r1, [pc, #24]	; (c8a0 <bt_le_adv_start+0x5c>)
    c888:	4806      	ldr	r0, [pc, #24]	; (c8a4 <bt_le_adv_start+0x60>)
    c88a:	f005 f89a 	bl	119c2 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    c88e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    c892:	2300      	movs	r3, #0
    c894:	4803      	ldr	r0, [pc, #12]	; (c8a4 <bt_le_adv_start+0x60>)
    c896:	f002 ff47 	bl	f728 <k_work_reschedule>
    c89a:	e7e6      	b.n	c86a <bt_le_adv_start+0x26>
    c89c:	200001b8 	.word	0x200001b8
    c8a0:	00010e4d 	.word	0x00010e4d
    c8a4:	200001d0 	.word	0x200001d0

0000c8a8 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    c8a8:	b508      	push	{r3, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
    c8aa:	480b      	ldr	r0, [pc, #44]	; (c8d8 <bt_le_adv_stop+0x30>)
    c8ac:	f004 facb 	bl	10e46 <bt_le_lim_adv_cancel_timeout>
    c8b0:	480a      	ldr	r0, [pc, #40]	; (c8dc <bt_le_adv_stop+0x34>)
    c8b2:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    c8b6:	f004 f995 	bl	10be4 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    c8ba:	4808      	ldr	r0, [pc, #32]	; (c8dc <bt_le_adv_stop+0x34>)
    c8bc:	f004 f98c 	bl	10bd8 <atomic_get>
    c8c0:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    c8c2:	061b      	lsls	r3, r3, #24
    c8c4:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    c8c8:	d505      	bpl.n	c8d6 <bt_le_adv_stop+0x2e>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    c8ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
    c8ce:	4802      	ldr	r0, [pc, #8]	; (c8d8 <bt_le_adv_stop+0x30>)
    c8d0:	2100      	movs	r1, #0
    c8d2:	f004 ba93 	b.w	10dfc <bt_le_adv_set_enable_legacy>
}
    c8d6:	bd08      	pop	{r3, pc}
    c8d8:	200001b8 	.word	0x200001b8
    c8dc:	200001c8 	.word	0x200001c8

0000c8e0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    c8e0:	4b02      	ldr	r3, [pc, #8]	; (c8ec <net_buf_pool_get+0xc>)
    c8e2:	222c      	movs	r2, #44	; 0x2c
    c8e4:	fb02 3000 	mla	r0, r2, r0, r3
    c8e8:	4770      	bx	lr
    c8ea:	bf00      	nop
    c8ec:	20000438 	.word	0x20000438

0000c8f0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    c8f0:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    c8f2:	4b06      	ldr	r3, [pc, #24]	; (c90c <net_buf_id+0x1c>)
    c8f4:	212c      	movs	r1, #44	; 0x2c
    c8f6:	fb01 3302 	mla	r3, r1, r2, r3
    c8fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    c8fc:	7f1b      	ldrb	r3, [r3, #28]
    c8fe:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    c900:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    c902:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
    c906:	fbb0 f0f3 	udiv	r0, r0, r3
    c90a:	4770      	bx	lr
    c90c:	20000438 	.word	0x20000438

0000c910 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    c910:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    c912:	4b0a      	ldr	r3, [pc, #40]	; (c93c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    c914:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    c916:	242c      	movs	r4, #44	; 0x2c
    c918:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
    c91c:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    c91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c920:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    c922:	681a      	ldr	r2, [r3, #0]
    c924:	4294      	cmp	r4, r2
    c926:	bf94      	ite	ls
    c928:	600c      	strls	r4, [r1, #0]
    c92a:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    c92c:	e9d3 5400 	ldrd	r5, r4, [r3]
    c930:	f7ff ffde 	bl	c8f0 <net_buf_id>
}
    c934:	fb05 4000 	mla	r0, r5, r0, r4
    c938:	bd38      	pop	{r3, r4, r5, pc}
    c93a:	bf00      	nop
    c93c:	20000438 	.word	0x20000438

0000c940 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    c940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c944:	4605      	mov	r5, r0
    c946:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    c948:	4610      	mov	r0, r2
    c94a:	4619      	mov	r1, r3
{
    c94c:	4691      	mov	r9, r2
    c94e:	4698      	mov	r8, r3
    c950:	4617      	mov	r7, r2
    c952:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    c954:	f005 f9b6 	bl	11cc4 <sys_clock_timeout_end_calc>
    c958:	4682      	mov	sl, r0
    c95a:	468b      	mov	fp, r1
	__asm__ volatile(
    c95c:	f04f 0340 	mov.w	r3, #64	; 0x40
    c960:	f3ef 8111 	mrs	r1, BASEPRI
    c964:	f383 8812 	msr	BASEPRI_MAX, r3
    c968:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    c96c:	8b6b      	ldrh	r3, [r5, #26]
    c96e:	2b00      	cmp	r3, #0
    c970:	d058      	beq.n	ca24 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    c972:	8b2a      	ldrh	r2, [r5, #24]
    c974:	429a      	cmp	r2, r3
    c976:	d93c      	bls.n	c9f2 <net_buf_alloc_len+0xb2>
    c978:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
    c97a:	2200      	movs	r2, #0
    c97c:	2300      	movs	r3, #0
    c97e:	4628      	mov	r0, r5
    c980:	f002 fcf4 	bl	f36c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    c984:	9900      	ldr	r1, [sp, #0]
    c986:	4604      	mov	r4, r0
    c988:	2800      	cmp	r0, #0
    c98a:	d032      	beq.n	c9f2 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
    c98c:	f381 8811 	msr	BASEPRI, r1
    c990:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    c994:	9b01      	ldr	r3, [sp, #4]
    c996:	2b00      	cmp	r3, #0
    c998:	d055      	beq.n	ca46 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    c99a:	ea58 0309 	orrs.w	r3, r8, r9
    c99e:	d00f      	beq.n	c9c0 <net_buf_alloc_len+0x80>
    c9a0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    c9a4:	bf08      	it	eq
    c9a6:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    c9aa:	d009      	beq.n	c9c0 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
    c9ac:	f003 fb5c 	bl	10068 <sys_clock_tick_get>
    c9b0:	ebba 0700 	subs.w	r7, sl, r0
    c9b4:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
    c9b8:	2e00      	cmp	r6, #0
    c9ba:	bfbc      	itt	lt
    c9bc:	2700      	movlt	r7, #0
    c9be:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    c9c0:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    c9c2:	4d26      	ldr	r5, [pc, #152]	; (ca5c <net_buf_alloc_len+0x11c>)
    c9c4:	f04f 082c 	mov.w	r8, #44	; 0x2c
    c9c8:	fb08 5303 	mla	r3, r8, r3, r5
    c9cc:	463a      	mov	r2, r7
    c9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c9d0:	681b      	ldr	r3, [r3, #0]
    c9d2:	a901      	add	r1, sp, #4
    c9d4:	f8d3 9000 	ldr.w	r9, [r3]
    c9d8:	4620      	mov	r0, r4
    c9da:	4633      	mov	r3, r6
    c9dc:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    c9de:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    c9e0:	2800      	cmp	r0, #0
    c9e2:	d131      	bne.n	ca48 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
    c9e4:	79a0      	ldrb	r0, [r4, #6]
    c9e6:	4621      	mov	r1, r4
    c9e8:	fb00 5008 	mla	r0, r0, r8, r5
    c9ec:	f004 fef0 	bl	117d0 <k_queue_prepend>
}
    c9f0:	e024      	b.n	ca3c <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
    c9f2:	8b68      	ldrh	r0, [r5, #26]
    c9f4:	1e43      	subs	r3, r0, #1
    c9f6:	836b      	strh	r3, [r5, #26]
    c9f8:	f381 8811 	msr	BASEPRI, r1
    c9fc:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    ca00:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
    ca02:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
    ca04:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    ca06:	3317      	adds	r3, #23
    ca08:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
    ca0c:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
    ca0e:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
    ca12:	4b12      	ldr	r3, [pc, #72]	; (ca5c <net_buf_alloc_len+0x11c>)
    ca14:	4a12      	ldr	r2, [pc, #72]	; (ca60 <net_buf_alloc_len+0x120>)
    ca16:	1aeb      	subs	r3, r5, r3
    ca18:	109b      	asrs	r3, r3, #2
    ca1a:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
    ca1c:	71a3      	strb	r3, [r4, #6]
	buf->user_data_size = pool->user_data_size;
    ca1e:	7f2b      	ldrb	r3, [r5, #28]
    ca20:	71e3      	strb	r3, [r4, #7]
		goto success;
    ca22:	e7b7      	b.n	c994 <net_buf_alloc_len+0x54>
    ca24:	f381 8811 	msr	BASEPRI, r1
    ca28:	f3bf 8f6f 	isb	sy
    ca2c:	464a      	mov	r2, r9
    ca2e:	4643      	mov	r3, r8
    ca30:	4628      	mov	r0, r5
    ca32:	f002 fc9b 	bl	f36c <z_impl_k_queue_get>
	if (!buf) {
    ca36:	4604      	mov	r4, r0
    ca38:	2800      	cmp	r0, #0
    ca3a:	d1ab      	bne.n	c994 <net_buf_alloc_len+0x54>
		return NULL;
    ca3c:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
    ca3e:	4620      	mov	r0, r4
    ca40:	b003      	add	sp, #12
    ca42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
    ca46:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    ca48:	2300      	movs	r3, #0
    ca4a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
    ca4c:	2201      	movs	r2, #1
    ca4e:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
    ca50:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
    ca52:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    ca54:	6923      	ldr	r3, [r4, #16]
    ca56:	81e2      	strh	r2, [r4, #14]
    ca58:	60a3      	str	r3, [r4, #8]
	return buf;
    ca5a:	e7f0      	b.n	ca3e <net_buf_alloc_len+0xfe>
    ca5c:	20000438 	.word	0x20000438
    ca60:	ba2e8ba3 	.word	0xba2e8ba3

0000ca64 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    ca64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca68:	4d16      	ldr	r5, [pc, #88]	; (cac4 <net_buf_unref+0x60>)
    ca6a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    ca6c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
    ca6e:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
    ca70:	b90c      	cbnz	r4, ca76 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    ca72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
    ca76:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    ca78:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
    ca7c:	3b01      	subs	r3, #1
    ca7e:	b2db      	uxtb	r3, r3
    ca80:	7123      	strb	r3, [r4, #4]
    ca82:	2b00      	cmp	r3, #0
    ca84:	d1f5      	bne.n	ca72 <net_buf_unref+0xe>
		if (buf->__buf) {
    ca86:	6921      	ldr	r1, [r4, #16]
    ca88:	b159      	cbz	r1, caa2 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    ca8a:	7963      	ldrb	r3, [r4, #5]
    ca8c:	079b      	lsls	r3, r3, #30
    ca8e:	d407      	bmi.n	caa0 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    ca90:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    ca92:	fb07 5303 	mla	r3, r7, r3, r5
    ca96:	4620      	mov	r0, r4
    ca98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ca9a:	681b      	ldr	r3, [r3, #0]
    ca9c:	689b      	ldr	r3, [r3, #8]
    ca9e:	4798      	blx	r3
			buf->__buf = NULL;
    caa0:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
    caa2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    caa4:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
    caa6:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
    caaa:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    caac:	6a1b      	ldr	r3, [r3, #32]
    caae:	b11b      	cbz	r3, cab8 <net_buf_unref+0x54>
			pool->destroy(buf);
    cab0:	4620      	mov	r0, r4
    cab2:	4798      	blx	r3
{
    cab4:	4644      	mov	r4, r8
    cab6:	e7db      	b.n	ca70 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
    cab8:	4621      	mov	r1, r4
    caba:	fb00 5007 	mla	r0, r0, r7, r5
    cabe:	f004 fe87 	bl	117d0 <k_queue_prepend>
}
    cac2:	e7f7      	b.n	cab4 <net_buf_unref+0x50>
    cac4:	20000438 	.word	0x20000438

0000cac8 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
    cac8:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    caca:	4804      	ldr	r0, [pc, #16]	; (cadc <xoshiro128_initialize+0x14>)
    cacc:	f004 fd4c 	bl	11568 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
    cad0:	2800      	cmp	r0, #0
}
    cad2:	bf0c      	ite	eq
    cad4:	f06f 0012 	mvneq.w	r0, #18
    cad8:	2000      	movne	r0, #0
    cada:	bd08      	pop	{r3, pc}
    cadc:	00012080 	.word	0x00012080

0000cae0 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    cae0:	4b05      	ldr	r3, [pc, #20]	; (caf8 <adc_context_start_sampling+0x18>)
    cae2:	2201      	movs	r2, #1
    cae4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    cae8:	f890 108e 	ldrb.w	r1, [r0, #142]	; 0x8e
    caec:	b109      	cbz	r1, caf2 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    caee:	60da      	str	r2, [r3, #12]
}
    caf0:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    caf2:	601a      	str	r2, [r3, #0]
    caf4:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    caf6:	4770      	bx	lr
    caf8:	40007000 	.word	0x40007000

0000cafc <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    cafc:	7908      	ldrb	r0, [r1, #4]
{
    cafe:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    cb00:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    cb04:	2c07      	cmp	r4, #7
    cb06:	d820      	bhi.n	cb4a <adc_nrfx_channel_setup+0x4e>
	switch (channel_cfg->gain) {
    cb08:	780b      	ldrb	r3, [r1, #0]
    cb0a:	2b0b      	cmp	r3, #11
    cb0c:	d81d      	bhi.n	cb4a <adc_nrfx_channel_setup+0x4e>
    cb0e:	e8df f003 	tbb	[pc, r3]
    cb12:	0707      	.short	0x0707
    cb14:	061c0707 	.word	0x061c0707
    cb18:	211f1c1c 	.word	0x211f1c1c
    cb1c:	231c      	.short	0x231c
		config.gain = NRF_SAADC_GAIN1_2;
    cb1e:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
    cb20:	784a      	ldrb	r2, [r1, #1]
    cb22:	2a03      	cmp	r2, #3
    cb24:	d01a      	beq.n	cb5c <adc_nrfx_channel_setup+0x60>
    cb26:	2a04      	cmp	r2, #4
    cb28:	d10f      	bne.n	cb4a <adc_nrfx_channel_setup+0x4e>
	nrf_saadc_channel_config_t config = {
    cb2a:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    cb2c:	884a      	ldrh	r2, [r1, #2]
    cb2e:	f244 060a 	movw	r6, #16394	; 0x400a
    cb32:	42b2      	cmp	r2, r6
    cb34:	d046      	beq.n	cbc4 <adc_nrfx_channel_setup+0xc8>
    cb36:	d813      	bhi.n	cb60 <adc_nrfx_channel_setup+0x64>
    cb38:	f244 0603 	movw	r6, #16387	; 0x4003
    cb3c:	42b2      	cmp	r2, r6
    cb3e:	d03d      	beq.n	cbbc <adc_nrfx_channel_setup+0xc0>
    cb40:	f244 0605 	movw	r6, #16389	; 0x4005
    cb44:	42b2      	cmp	r2, r6
    cb46:	d03b      	beq.n	cbc0 <adc_nrfx_channel_setup+0xc4>
    cb48:	b3e2      	cbz	r2, cbc4 <adc_nrfx_channel_setup+0xc8>
    cb4a:	f06f 0015 	mvn.w	r0, #21
    cb4e:	e034      	b.n	cbba <adc_nrfx_channel_setup+0xbe>
		config.gain = NRF_SAADC_GAIN1;
    cb50:	2305      	movs	r3, #5
		break;
    cb52:	e7e5      	b.n	cb20 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
    cb54:	2306      	movs	r3, #6
		break;
    cb56:	e7e3      	b.n	cb20 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
    cb58:	2307      	movs	r3, #7
		break;
    cb5a:	e7e1      	b.n	cb20 <adc_nrfx_channel_setup+0x24>
	switch (channel_cfg->reference) {
    cb5c:	2501      	movs	r5, #1
    cb5e:	e7e5      	b.n	cb2c <adc_nrfx_channel_setup+0x30>
	switch (channel_cfg->acquisition_time) {
    cb60:	f244 0614 	movw	r6, #16404	; 0x4014
    cb64:	42b2      	cmp	r2, r6
    cb66:	d02f      	beq.n	cbc8 <adc_nrfx_channel_setup+0xcc>
    cb68:	f244 0628 	movw	r6, #16424	; 0x4028
    cb6c:	42b2      	cmp	r2, r6
    cb6e:	d02d      	beq.n	cbcc <adc_nrfx_channel_setup+0xd0>
    cb70:	f244 060f 	movw	r6, #16399	; 0x400f
    cb74:	42b2      	cmp	r2, r6
    cb76:	d1e8      	bne.n	cb4a <adc_nrfx_channel_setup+0x4e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    cb78:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    cb7a:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    cb7e:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    cb80:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    cb84:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    cb88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    cb8c:	0122      	lsls	r2, r4, #4
    cb8e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    cb92:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    cb96:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    cb98:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    cb9c:	0123      	lsls	r3, r4, #4
    cb9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cba2:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    cba6:	798a      	ldrb	r2, [r1, #6]
    cba8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    cbac:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    cbb0:	4b07      	ldr	r3, [pc, #28]	; (cbd0 <adc_nrfx_channel_setup+0xd4>)
    cbb2:	794a      	ldrb	r2, [r1, #5]
    cbb4:	4423      	add	r3, r4
    cbb6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
    cbba:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
    cbbc:	2200      	movs	r2, #0
    cbbe:	e7dc      	b.n	cb7a <adc_nrfx_channel_setup+0x7e>
	switch (channel_cfg->acquisition_time) {
    cbc0:	2201      	movs	r2, #1
    cbc2:	e7da      	b.n	cb7a <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    cbc4:	2202      	movs	r2, #2
    cbc6:	e7d8      	b.n	cb7a <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    cbc8:	2204      	movs	r2, #4
    cbca:	e7d6      	b.n	cb7a <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    cbcc:	2205      	movs	r2, #5
    cbce:	e7d4      	b.n	cb7a <adc_nrfx_channel_setup+0x7e>
    cbd0:	200002c0 	.word	0x200002c0

0000cbd4 <start_read.constprop.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
    cbd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
    cbd6:	6846      	ldr	r6, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    cbd8:	1e73      	subs	r3, r6, #1
    cbda:	2bfe      	cmp	r3, #254	; 0xfe
static int start_read(const struct device *dev,
    cbdc:	4605      	mov	r5, r0
	if (!selected_channels ||
    cbde:	d83c      	bhi.n	cc5a <start_read.constprop.0+0x86>
    cbe0:	2300      	movs	r3, #0
    p_reg->CH[channel].PSELP = pselp;
    cbe2:	4852      	ldr	r0, [pc, #328]	; (cd2c <start_read.constprop.0+0x158>)
	do {
		if (selected_channels & BIT(channel_id)) {
			/* Signal an error if a selected channel has not been
			 * configured yet.
			 */
			if (m_data.positive_inputs[channel_id] == 0U) {
    cbe4:	4f52      	ldr	r7, [pc, #328]	; (cd30 <start_read.constprop.0+0x15c>)
	active_channels = 0U;
    cbe6:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
    cbe8:	fa26 f103 	lsr.w	r1, r6, r3
    cbec:	f011 0101 	ands.w	r1, r1, #1
    cbf0:	d026      	beq.n	cc40 <start_read.constprop.0+0x6c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    cbf2:	f817 c003 	ldrb.w	ip, [r7, r3]
    cbf6:	f1bc 0f00 	cmp.w	ip, #0
    cbfa:	d02e      	beq.n	cc5a <start_read.constprop.0+0x86>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    cbfc:	eb00 1e03 	add.w	lr, r0, r3, lsl #4
			 * event is not generated) after switching to a single
			 * channel sampling and back. Thus, when oversampling
			 * is not used (hence, the multiple channel sampling is
			 * possible), the burst mode have to be deactivated.
			 */
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    cc00:	7c6c      	ldrb	r4, [r5, #17]
    cc02:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
    cc06:	3c00      	subs	r4, #0
    cc08:	bf18      	it	ne
    cc0a:	2401      	movne	r4, #1
    cc0c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
    cc10:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
    cc14:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    cc18:	f103 0151 	add.w	r1, r3, #81	; 0x51
    cc1c:	0109      	lsls	r1, r1, #4
					NRF_SAADC_BURST_DISABLED));
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				m_data.positive_inputs[channel_id]);
			++active_channels;
    cc1e:	3201      	adds	r2, #1
    cc20:	f840 c001 	str.w	ip, [r0, r1]
    cc24:	b2d2      	uxtb	r2, r2
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
    cc26:	3301      	adds	r3, #1
    cc28:	2b08      	cmp	r3, #8
    cc2a:	d1dd      	bne.n	cbe8 <start_read.constprop.0+0x14>
	switch (sequence->resolution) {
    cc2c:	7c2b      	ldrb	r3, [r5, #16]
    cc2e:	3b08      	subs	r3, #8
    cc30:	2b06      	cmp	r3, #6
    cc32:	d812      	bhi.n	cc5a <start_read.constprop.0+0x86>
    cc34:	e8df f003 	tbb	[pc, r3]
    cc38:	11191109 	.word	0x11191109
    cc3c:	1115      	.short	0x1115
    cc3e:	17          	.byte	0x17
    cc3f:	00          	.byte	0x00
    cc40:	f103 0451 	add.w	r4, r3, #81	; 0x51
    cc44:	0124      	lsls	r4, r4, #4
    cc46:	5101      	str	r1, [r0, r4]
}
    cc48:	e7ed      	b.n	cc26 <start_read.constprop.0+0x52>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    cc4a:	2300      	movs	r3, #0
    p_reg->RESOLUTION = resolution;
    cc4c:	4937      	ldr	r1, [pc, #220]	; (cd2c <start_read.constprop.0+0x158>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    cc4e:	2a01      	cmp	r2, #1
    cc50:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_resolution(sequence);
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
    cc54:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    cc56:	d90a      	bls.n	cc6e <start_read.constprop.0+0x9a>
    cc58:	b15b      	cbz	r3, cc72 <start_read.constprop.0+0x9e>
		return -EINVAL;
    cc5a:	f06f 0015 	mvn.w	r0, #21

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    cc5e:	b003      	add	sp, #12
    cc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    cc62:	2302      	movs	r3, #2
		break;
    cc64:	e7f2      	b.n	cc4c <start_read.constprop.0+0x78>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    cc66:	2303      	movs	r3, #3
		break;
    cc68:	e7f0      	b.n	cc4c <start_read.constprop.0+0x78>
	switch (sequence->resolution) {
    cc6a:	2301      	movs	r3, #1
    cc6c:	e7ee      	b.n	cc4c <start_read.constprop.0+0x78>
	switch (sequence->oversampling) {
    cc6e:	2b08      	cmp	r3, #8
    cc70:	d8f3      	bhi.n	cc5a <start_read.constprop.0+0x86>
    p_reg->OVERSAMPLE = oversample;
    cc72:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
    cc76:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    cc78:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
    cc7a:	b111      	cbz	r1, cc82 <start_read.constprop.0+0xae>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    cc7c:	8989      	ldrh	r1, [r1, #12]
    cc7e:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    cc82:	68e9      	ldr	r1, [r5, #12]
    cc84:	4299      	cmp	r1, r3
    cc86:	d34d      	bcc.n	cd24 <start_read.constprop.0+0x150>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    cc88:	4b28      	ldr	r3, [pc, #160]	; (cd2c <start_read.constprop.0+0x158>)
    cc8a:	68a9      	ldr	r1, [r5, #8]
    cc8c:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    cc90:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    cc92:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
    cc96:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    cc98:	4c26      	ldr	r4, [pc, #152]	; (cd34 <start_read.constprop.0+0x160>)
    cc9a:	f104 067c 	add.w	r6, r4, #124	; 0x7c
    cc9e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    cca0:	683b      	ldr	r3, [r7, #0]
    cca2:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
    cca4:	2600      	movs	r6, #0
    cca6:	6726      	str	r6, [r4, #112]	; 0x70

	if (sequence->options) {
    cca8:	682b      	ldr	r3, [r5, #0]
    ccaa:	4627      	mov	r7, r4
    ccac:	b3a3      	cbz	r3, cd18 <start_read.constprop.0+0x144>
		ctx->options = *sequence->options;
    ccae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    ccb0:	f104 0590 	add.w	r5, r4, #144	; 0x90
    ccb4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    ccb8:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
    ccba:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
    ccbe:	b358      	cbz	r0, cd18 <start_read.constprop.0+0x144>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ccc0:	f3bf 8f5b 	dmb	ish
    ccc4:	e857 3f00 	ldrex	r3, [r7]
    ccc8:	e847 6200 	strex	r2, r6, [r7]
    cccc:	2a00      	cmp	r2, #0
    ccce:	d1f9      	bne.n	ccc4 <start_read.constprop.0+0xf0>
    ccd0:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    ccd4:	4918      	ldr	r1, [pc, #96]	; (cd38 <start_read.constprop.0+0x164>)
    ccd6:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    ccda:	4a18      	ldr	r2, [pc, #96]	; (cd3c <start_read.constprop.0+0x168>)
    ccdc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    cce0:	460f      	mov	r7, r1
    cce2:	4631      	mov	r1, r6
    cce4:	fbe5 7100 	umlal	r7, r1, r5, r0
    cce8:	2300      	movs	r3, #0
    ccea:	4638      	mov	r0, r7
    ccec:	f7f3 f9e4 	bl	b8 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    ccf0:	2200      	movs	r2, #0
    ccf2:	e9cd 0100 	strd	r0, r1, [sp]
    ccf6:	2300      	movs	r3, #0
    ccf8:	f104 0008 	add.w	r0, r4, #8
    ccfc:	f003 fa38 	bl	10170 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
    cd00:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cd04:	b963      	cbnz	r3, cd20 <start_read.constprop.0+0x14c>
	return z_impl_k_sem_take(sem, timeout);
    cd06:	480e      	ldr	r0, [pc, #56]	; (cd40 <start_read.constprop.0+0x16c>)
    cd08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cd0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cd10:	f002 fb86 	bl	f420 <z_impl_k_sem_take>
	return ctx->status;
    cd14:	6f20      	ldr	r0, [r4, #112]	; 0x70
    cd16:	e7a2      	b.n	cc5e <start_read.constprop.0+0x8a>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    cd18:	4806      	ldr	r0, [pc, #24]	; (cd34 <start_read.constprop.0+0x160>)
    cd1a:	f7ff fee1 	bl	cae0 <adc_context_start_sampling>
    cd1e:	e7ef      	b.n	cd00 <start_read.constprop.0+0x12c>
		return 0;
    cd20:	2000      	movs	r0, #0
	return error;
    cd22:	e79c      	b.n	cc5e <start_read.constprop.0+0x8a>
		return -ENOMEM;
    cd24:	f06f 000b 	mvn.w	r0, #11
    cd28:	e799      	b.n	cc5e <start_read.constprop.0+0x8a>
    cd2a:	bf00      	nop
    cd2c:	40007000 	.word	0x40007000
    cd30:	20000368 	.word	0x20000368
    cd34:	200002c0 	.word	0x200002c0
    cd38:	000f423f 	.word	0x000f423f
    cd3c:	000f4240 	.word	0x000f4240
    cd40:	20000318 	.word	0x20000318

0000cd44 <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
    cd44:	b570      	push	{r4, r5, r6, lr}
    cd46:	460c      	mov	r4, r1
    cd48:	4616      	mov	r6, r2
	ctx->asynchronous = asynchronous;
    cd4a:	4d0c      	ldr	r5, [pc, #48]	; (cd7c <adc_nrfx_read_async+0x38>)
    cd4c:	480c      	ldr	r0, [pc, #48]	; (cd80 <adc_nrfx_read_async+0x3c>)
    cd4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cd52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cd56:	f002 fb63 	bl	f420 <z_impl_k_sem_take>
    cd5a:	2301      	movs	r3, #1
    cd5c:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
    cd60:	4620      	mov	r0, r4
	ctx->signal = signal;
    cd62:	676e      	str	r6, [r5, #116]	; 0x74
    cd64:	f7ff ff36 	bl	cbd4 <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
    cd68:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    cd6c:	4604      	mov	r4, r0
    cd6e:	b103      	cbz	r3, cd72 <adc_nrfx_read_async+0x2e>
    cd70:	b110      	cbz	r0, cd78 <adc_nrfx_read_async+0x34>
	z_impl_k_sem_give(sem);
    cd72:	4803      	ldr	r0, [pc, #12]	; (cd80 <adc_nrfx_read_async+0x3c>)
    cd74:	f002 fb2e 	bl	f3d4 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    cd78:	4620      	mov	r0, r4
    cd7a:	bd70      	pop	{r4, r5, r6, pc}
    cd7c:	200002c0 	.word	0x200002c0
    cd80:	20000300 	.word	0x20000300

0000cd84 <adc_nrfx_read>:
{
    cd84:	b538      	push	{r3, r4, r5, lr}
    cd86:	460c      	mov	r4, r1
	ctx->asynchronous = asynchronous;
    cd88:	4d0c      	ldr	r5, [pc, #48]	; (cdbc <adc_nrfx_read+0x38>)
	return z_impl_k_sem_take(sem, timeout);
    cd8a:	480d      	ldr	r0, [pc, #52]	; (cdc0 <adc_nrfx_read+0x3c>)
    cd8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cd90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cd94:	f002 fb44 	bl	f420 <z_impl_k_sem_take>
    cd98:	2300      	movs	r3, #0
    cd9a:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    cd9e:	676b      	str	r3, [r5, #116]	; 0x74
	error = start_read(dev, sequence);
    cda0:	4620      	mov	r0, r4
    cda2:	f7ff ff17 	bl	cbd4 <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
    cda6:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    cdaa:	4604      	mov	r4, r0
    cdac:	b103      	cbz	r3, cdb0 <adc_nrfx_read+0x2c>
    cdae:	b110      	cbz	r0, cdb6 <adc_nrfx_read+0x32>
	z_impl_k_sem_give(sem);
    cdb0:	4803      	ldr	r0, [pc, #12]	; (cdc0 <adc_nrfx_read+0x3c>)
    cdb2:	f002 fb0f 	bl	f3d4 <z_impl_k_sem_give>
}
    cdb6:	4620      	mov	r0, r4
    cdb8:	bd38      	pop	{r3, r4, r5, pc}
    cdba:	bf00      	nop
    cdbc:	200002c0 	.word	0x200002c0
    cdc0:	20000300 	.word	0x20000300

0000cdc4 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    cdc4:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cdc6:	4b0e      	ldr	r3, [pc, #56]	; (ce00 <init_saadc+0x3c>)
    cdc8:	2400      	movs	r4, #0
    cdca:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    cdce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    cdd2:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    cdd6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    cdda:	2212      	movs	r2, #18
    cddc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    cde0:	2007      	movs	r0, #7
    cde2:	f7fe fa2b 	bl	b23c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    cde6:	4622      	mov	r2, r4
    cde8:	2101      	movs	r1, #1
    cdea:	2007      	movs	r0, #7
    cdec:	f7fe fa56 	bl	b29c <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    cdf0:	4804      	ldr	r0, [pc, #16]	; (ce04 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
    cdf2:	6c83      	ldr	r3, [r0, #72]	; 0x48
    cdf4:	b913      	cbnz	r3, cdfc <init_saadc+0x38>
    cdf6:	3040      	adds	r0, #64	; 0x40
    cdf8:	f002 faec 	bl	f3d4 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    cdfc:	2000      	movs	r0, #0
    cdfe:	bd10      	pop	{r4, pc}
    ce00:	40007000 	.word	0x40007000
    ce04:	200002c0 	.word	0x200002c0

0000ce08 <saadc_irq_handler>:
{
    ce08:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ce0a:	4b34      	ldr	r3, [pc, #208]	; (cedc <saadc_irq_handler+0xd4>)
    ce0c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    ce10:	2a00      	cmp	r2, #0
    ce12:	d056      	beq.n	cec2 <saadc_irq_handler+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ce14:	2200      	movs	r2, #0
    ce16:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    ce1a:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    ce1e:	4c30      	ldr	r4, [pc, #192]	; (cee0 <saadc_irq_handler+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ce20:	2101      	movs	r1, #1
    ce22:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    ce24:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    ce28:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    ce2a:	4625      	mov	r5, r4
    ce2c:	b3d3      	cbz	r3, cea4 <saadc_irq_handler+0x9c>
		adc_sequence_callback callback = ctx->options.callback;
    ce2e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
    ce32:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
		if (callback) {
    ce36:	b133      	cbz	r3, ce46 <saadc_irq_handler+0x3e>
			action = callback(dev,
    ce38:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    ce3c:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    ce3e:	2801      	cmp	r0, #1
    ce40:	d014      	beq.n	ce6c <saadc_irq_handler+0x64>
    ce42:	2802      	cmp	r0, #2
    ce44:	d028      	beq.n	ce98 <saadc_irq_handler+0x90>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    ce46:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    ce4a:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    ce4e:	429a      	cmp	r2, r3
    ce50:	d922      	bls.n	ce98 <saadc_irq_handler+0x90>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    ce52:	3301      	adds	r3, #1
    ce54:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    ce58:	4b20      	ldr	r3, [pc, #128]	; (cedc <saadc_irq_handler+0xd4>)
    ce5a:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    ce5e:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    ce62:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    ce64:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    ce68:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    ce6c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    ce70:	b923      	cbnz	r3, ce7c <saadc_irq_handler+0x74>
}
    ce72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
    ce76:	481a      	ldr	r0, [pc, #104]	; (cee0 <saadc_irq_handler+0xd8>)
    ce78:	f7ff be32 	b.w	cae0 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ce7c:	f3bf 8f5b 	dmb	ish
    ce80:	e855 3f00 	ldrex	r3, [r5]
    ce84:	1e5a      	subs	r2, r3, #1
    ce86:	e845 2100 	strex	r1, r2, [r5]
    ce8a:	2900      	cmp	r1, #0
    ce8c:	d1f8      	bne.n	ce80 <saadc_irq_handler+0x78>
    ce8e:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    ce92:	2b01      	cmp	r3, #1
    ce94:	dced      	bgt.n	ce72 <saadc_irq_handler+0x6a>
    ce96:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    ce98:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    ce9c:	b113      	cbz	r3, cea4 <saadc_irq_handler+0x9c>
	z_impl_k_timer_stop(timer);
    ce9e:	4811      	ldr	r0, [pc, #68]	; (cee4 <saadc_irq_handler+0xdc>)
    cea0:	f004 ff32 	bl	11d08 <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
    cea4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cea8:	b14b      	cbz	r3, cebe <saadc_irq_handler+0xb6>
		if (ctx->signal) {
    ceaa:	6f60      	ldr	r0, [r4, #116]	; 0x74
    ceac:	b110      	cbz	r0, ceb4 <saadc_irq_handler+0xac>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    ceae:	2100      	movs	r1, #0
    ceb0:	f003 fa06 	bl	102c0 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
    ceb4:	480c      	ldr	r0, [pc, #48]	; (cee8 <saadc_irq_handler+0xe0>)
    ceb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ceba:	f002 ba8b 	b.w	f3d4 <z_impl_k_sem_give>
    cebe:	480b      	ldr	r0, [pc, #44]	; (ceec <saadc_irq_handler+0xe4>)
    cec0:	e7f9      	b.n	ceb6 <saadc_irq_handler+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    cec2:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    cec6:	2900      	cmp	r1, #0
    cec8:	d0e5      	beq.n	ce96 <saadc_irq_handler+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ceca:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    cece:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ced2:	2201      	movs	r2, #1
    ced4:	609a      	str	r2, [r3, #8]
    ced6:	601a      	str	r2, [r3, #0]
    ced8:	605a      	str	r2, [r3, #4]
}
    ceda:	e7dc      	b.n	ce96 <saadc_irq_handler+0x8e>
    cedc:	40007000 	.word	0x40007000
    cee0:	200002c0 	.word	0x200002c0
    cee4:	200002c8 	.word	0x200002c8
    cee8:	20000300 	.word	0x20000300
    ceec:	20000318 	.word	0x20000318

0000cef0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    cef0:	4b08      	ldr	r3, [pc, #32]	; (cf14 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    cef2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    cef4:	1ac3      	subs	r3, r0, r3
{
    cef6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    cef8:	4907      	ldr	r1, [pc, #28]	; (cf18 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    cefa:	109b      	asrs	r3, r3, #2
{
    cefc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    cefe:	4359      	muls	r1, r3
    cf00:	4806      	ldr	r0, [pc, #24]	; (cf1c <onoff_stop+0x2c>)
    cf02:	2240      	movs	r2, #64	; 0x40
    cf04:	f004 f879 	bl	10ffa <stop>
	notify(mgr, res);
    cf08:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    cf0a:	4601      	mov	r1, r0
	notify(mgr, res);
    cf0c:	4620      	mov	r0, r4
}
    cf0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    cf12:	4718      	bx	r3
    cf14:	2000154c 	.word	0x2000154c
    cf18:	b6db6db7 	.word	0xb6db6db7
    cf1c:	00012050 	.word	0x00012050

0000cf20 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    cf20:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    cf22:	4c0c      	ldr	r4, [pc, #48]	; (cf54 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    cf24:	4a0c      	ldr	r2, [pc, #48]	; (cf58 <onoff_start+0x38>)
    cf26:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    cf28:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    cf2a:	9300      	str	r3, [sp, #0]
{
    cf2c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    cf2e:	460b      	mov	r3, r1
    cf30:	490a      	ldr	r1, [pc, #40]	; (cf5c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    cf32:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    cf34:	4361      	muls	r1, r4
{
    cf36:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    cf38:	4809      	ldr	r0, [pc, #36]	; (cf60 <onoff_start+0x40>)
    cf3a:	f004 f88b 	bl	11054 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    cf3e:	1e01      	subs	r1, r0, #0
    cf40:	da05      	bge.n	cf4e <onoff_start+0x2e>
		notify(mgr, err);
    cf42:	4630      	mov	r0, r6
    cf44:	462b      	mov	r3, r5
	}
}
    cf46:	b002      	add	sp, #8
    cf48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    cf4c:	4718      	bx	r3
}
    cf4e:	b002      	add	sp, #8
    cf50:	bd70      	pop	{r4, r5, r6, pc}
    cf52:	bf00      	nop
    cf54:	2000154c 	.word	0x2000154c
    cf58:	000110c1 	.word	0x000110c1
    cf5c:	b6db6db7 	.word	0xb6db6db7
    cf60:	00012050 	.word	0x00012050

0000cf64 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    cf64:	2200      	movs	r2, #0
{
    cf66:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    cf68:	2101      	movs	r1, #1
{
    cf6a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    cf6c:	4610      	mov	r0, r2
    cf6e:	f7fe f995 	bl	b29c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    cf72:	480f      	ldr	r0, [pc, #60]	; (cfb0 <clk_init+0x4c>)
    cf74:	f001 fa3e 	bl	e3f4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    cf78:	4b0e      	ldr	r3, [pc, #56]	; (cfb4 <clk_init+0x50>)
    cf7a:	4298      	cmp	r0, r3
    cf7c:	d115      	bne.n	cfaa <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    cf7e:	f004 fa96 	bl	114ae <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    cf82:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    cf84:	490c      	ldr	r1, [pc, #48]	; (cfb8 <clk_init+0x54>)
    cf86:	4630      	mov	r0, r6
    cf88:	f003 fc50 	bl	1082c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    cf8c:	2800      	cmp	r0, #0
    cf8e:	db0b      	blt.n	cfa8 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    cf90:	2501      	movs	r5, #1
    cf92:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    cf94:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    cf96:	4908      	ldr	r1, [pc, #32]	; (cfb8 <clk_init+0x54>)
    cf98:	f104 001c 	add.w	r0, r4, #28
    cf9c:	f003 fc46 	bl	1082c <onoff_manager_init>
		if (err < 0) {
    cfa0:	2800      	cmp	r0, #0
    cfa2:	db01      	blt.n	cfa8 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    cfa4:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    cfa6:	2000      	movs	r0, #0
}
    cfa8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    cfaa:	f06f 0004 	mvn.w	r0, #4
    cfae:	e7fb      	b.n	cfa8 <clk_init+0x44>
    cfb0:	0000cff1 	.word	0x0000cff1
    cfb4:	0bad0000 	.word	0x0bad0000
    cfb8:	0001230c 	.word	0x0001230c

0000cfbc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    cfbc:	b570      	push	{r4, r5, r6, lr}
    cfbe:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    cfc0:	230c      	movs	r3, #12
    cfc2:	4809      	ldr	r0, [pc, #36]	; (cfe8 <clkstarted_handle.constprop.0+0x2c>)
    cfc4:	434b      	muls	r3, r1
    cfc6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    cfc8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    cfcc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    cfce:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    cfd0:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    cfd2:	4418      	add	r0, r3
    cfd4:	f003 fffe 	bl	10fd4 <set_on_state>
	if (callback) {
    cfd8:	b12d      	cbz	r5, cfe6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    cfda:	4632      	mov	r2, r6
    cfdc:	462b      	mov	r3, r5
    cfde:	4803      	ldr	r0, [pc, #12]	; (cfec <clkstarted_handle.constprop.0+0x30>)
}
    cfe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    cfe4:	4718      	bx	r3
}
    cfe6:	bd70      	pop	{r4, r5, r6, pc}
    cfe8:	2000154c 	.word	0x2000154c
    cfec:	00012050 	.word	0x00012050

0000cff0 <clock_event_handler>:
	switch (event) {
    cff0:	b110      	cbz	r0, cff8 <clock_event_handler+0x8>
    cff2:	2801      	cmp	r0, #1
    cff4:	d004      	beq.n	d000 <clock_event_handler+0x10>
    cff6:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    cff8:	4b03      	ldr	r3, [pc, #12]	; (d008 <clock_event_handler+0x18>)
    cffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    cffc:	075b      	lsls	r3, r3, #29
    cffe:	d101      	bne.n	d004 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d000:	f7ff bfdc 	b.w	cfbc <clkstarted_handle.constprop.0>
}
    d004:	4770      	bx	lr
    d006:	bf00      	nop
    d008:	2000154c 	.word	0x2000154c

0000d00c <generic_hfclk_start>:
{
    d00c:	b508      	push	{r3, lr}
	__asm__ volatile(
    d00e:	f04f 0340 	mov.w	r3, #64	; 0x40
    d012:	f3ef 8111 	mrs	r1, BASEPRI
    d016:	f383 8812 	msr	BASEPRI_MAX, r3
    d01a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    d01e:	4a12      	ldr	r2, [pc, #72]	; (d068 <generic_hfclk_start+0x5c>)
    d020:	6813      	ldr	r3, [r2, #0]
    d022:	f043 0002 	orr.w	r0, r3, #2
    d026:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    d028:	07da      	lsls	r2, r3, #31
    d02a:	d408      	bmi.n	d03e <generic_hfclk_start+0x32>
	__asm__ volatile(
    d02c:	f381 8811 	msr	BASEPRI, r1
    d030:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    d034:	2001      	movs	r0, #1
}
    d036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d03a:	f001 b9cb 	b.w	e3d4 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    d03e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d042:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d046:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    d04a:	07d3      	lsls	r3, r2, #31
    d04c:	d5ee      	bpl.n	d02c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    d04e:	4807      	ldr	r0, [pc, #28]	; (d06c <generic_hfclk_start+0x60>)
    d050:	f003 ffc0 	bl	10fd4 <set_on_state>
    d054:	f381 8811 	msr	BASEPRI, r1
    d058:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    d05c:	2000      	movs	r0, #0
}
    d05e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    d062:	f7ff bfab 	b.w	cfbc <clkstarted_handle.constprop.0>
    d066:	bf00      	nop
    d068:	2000159c 	.word	0x2000159c
    d06c:	2000158c 	.word	0x2000158c

0000d070 <api_blocking_start>:
{
    d070:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d072:	2200      	movs	r2, #0
    d074:	2301      	movs	r3, #1
    d076:	e9cd 2302 	strd	r2, r3, [sp, #8]
    d07a:	ab04      	add	r3, sp, #16
    d07c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d080:	4a09      	ldr	r2, [pc, #36]	; (d0a8 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d082:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d086:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d088:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d08c:	f004 f811 	bl	110b2 <api_start>
	if (err < 0) {
    d090:	2800      	cmp	r0, #0
    d092:	db05      	blt.n	d0a0 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    d094:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d098:	2300      	movs	r3, #0
    d09a:	4668      	mov	r0, sp
    d09c:	f002 f9c0 	bl	f420 <z_impl_k_sem_take>
}
    d0a0:	b007      	add	sp, #28
    d0a2:	f85d fb04 	ldr.w	pc, [sp], #4
    d0a6:	bf00      	nop
    d0a8:	000110df 	.word	0x000110df

0000d0ac <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d0ac:	4b09      	ldr	r3, [pc, #36]	; (d0d4 <generic_hfclk_stop+0x28>)
    d0ae:	f3bf 8f5b 	dmb	ish
    d0b2:	e853 2f00 	ldrex	r2, [r3]
    d0b6:	f022 0102 	bic.w	r1, r2, #2
    d0ba:	e843 1000 	strex	r0, r1, [r3]
    d0be:	2800      	cmp	r0, #0
    d0c0:	d1f7      	bne.n	d0b2 <generic_hfclk_stop+0x6>
    d0c2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    d0c6:	07d3      	lsls	r3, r2, #31
    d0c8:	d402      	bmi.n	d0d0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    d0ca:	2001      	movs	r0, #1
    d0cc:	f004 b9ea 	b.w	114a4 <nrfx_clock_stop>
}
    d0d0:	4770      	bx	lr
    d0d2:	bf00      	nop
    d0d4:	2000159c 	.word	0x2000159c

0000d0d8 <z_nrf_clock_control_lf_on>:
{
    d0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d0da:	4928      	ldr	r1, [pc, #160]	; (d17c <z_nrf_clock_control_lf_on+0xa4>)
    d0dc:	f3bf 8f5b 	dmb	ish
    d0e0:	4606      	mov	r6, r0
    d0e2:	2201      	movs	r2, #1
    d0e4:	e851 3f00 	ldrex	r3, [r1]
    d0e8:	e841 2000 	strex	r0, r2, [r1]
    d0ec:	2800      	cmp	r0, #0
    d0ee:	d1f9      	bne.n	d0e4 <z_nrf_clock_control_lf_on+0xc>
    d0f0:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    d0f4:	b933      	cbnz	r3, d104 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    d0f6:	4922      	ldr	r1, [pc, #136]	; (d180 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
    d0f8:	4822      	ldr	r0, [pc, #136]	; (d184 <z_nrf_clock_control_lf_on+0xac>)
    d0fa:	604b      	str	r3, [r1, #4]
    d0fc:	60cb      	str	r3, [r1, #12]
    d0fe:	608a      	str	r2, [r1, #8]
    d100:	f003 fba7 	bl	10852 <onoff_request>
	switch (start_mode) {
    d104:	1e73      	subs	r3, r6, #1
    d106:	2b01      	cmp	r3, #1
    d108:	d81d      	bhi.n	d146 <z_nrf_clock_control_lf_on+0x6e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d10a:	f004 fac9 	bl	116a0 <k_is_in_isr>
    d10e:	4604      	mov	r4, r0
    d110:	b9d0      	cbnz	r0, d148 <z_nrf_clock_control_lf_on+0x70>
	return !z_sys_post_kernel;
    d112:	4b1d      	ldr	r3, [pc, #116]	; (d188 <z_nrf_clock_control_lf_on+0xb0>)
    d114:	781b      	ldrb	r3, [r3, #0]
    d116:	b1bb      	cbz	r3, d148 <z_nrf_clock_control_lf_on+0x70>
    p_reg->INTENCLR = mask;
    d118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d11c:	2202      	movs	r2, #2
    d11e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    d122:	4605      	mov	r5, r0
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d124:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    d128:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d12c:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    d130:	03d2      	lsls	r2, r2, #15
    d132:	d513      	bpl.n	d15c <z_nrf_clock_control_lf_on+0x84>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    d134:	079b      	lsls	r3, r3, #30
    d136:	d001      	beq.n	d13c <z_nrf_clock_control_lf_on+0x64>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    d138:	2e01      	cmp	r6, #1
    d13a:	d10f      	bne.n	d15c <z_nrf_clock_control_lf_on+0x84>
	if (isr_mode) {
    d13c:	b1c4      	cbz	r4, d170 <z_nrf_clock_control_lf_on+0x98>
    d13e:	f385 8811 	msr	BASEPRI, r5
    d142:	f3bf 8f6f 	isb	sy
}
    d146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    d148:	f04f 0340 	mov.w	r3, #64	; 0x40
    d14c:	f3ef 8511 	mrs	r5, BASEPRI
    d150:	f383 8812 	msr	BASEPRI_MAX, r3
    d154:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d158:	2401      	movs	r4, #1
    d15a:	e7e3      	b.n	d124 <z_nrf_clock_control_lf_on+0x4c>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    d15c:	b11c      	cbz	r4, d166 <z_nrf_clock_control_lf_on+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    d15e:	4628      	mov	r0, r5
    d160:	f7fe f862 	bl	b228 <arch_cpu_atomic_idle>
}
    d164:	e7e0      	b.n	d128 <z_nrf_clock_control_lf_on+0x50>
	return z_impl_k_sleep(timeout);
    d166:	2100      	movs	r1, #0
    d168:	2021      	movs	r0, #33	; 0x21
    d16a:	f002 fdab 	bl	fcc4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    d16e:	e7db      	b.n	d128 <z_nrf_clock_control_lf_on+0x50>
    p_reg->INTENSET = mask;
    d170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d174:	2202      	movs	r2, #2
    d176:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    d17a:	e7e4      	b.n	d146 <z_nrf_clock_control_lf_on+0x6e>
    d17c:	20001548 	.word	0x20001548
    d180:	20001538 	.word	0x20001538
    d184:	20001568 	.word	0x20001568
    d188:	2000194f 	.word	0x2000194f

0000d18c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    d18c:	b530      	push	{r4, r5, lr}
	return port->config;
    d18e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    d190:	7b05      	ldrb	r5, [r0, #12]
    d192:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    d196:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    d19a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    d19c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    d1a0:	d105      	bne.n	d1ae <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    d1a2:	4620      	mov	r0, r4
    d1a4:	f001 fc80 	bl	eaa8 <nrfx_gpiote_trigger_disable>

		return 0;
    d1a8:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    d1aa:	b005      	add	sp, #20
    d1ac:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    d1ae:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    d1b0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    d1b4:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    d1b8:	d114      	bne.n	d1e4 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    d1ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    d1be:	bf0c      	ite	eq
    d1c0:	2304      	moveq	r3, #4
    d1c2:	2305      	movne	r3, #5
    d1c4:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d1c8:	2300      	movs	r3, #0
    d1ca:	4619      	mov	r1, r3
    d1cc:	aa02      	add	r2, sp, #8
    d1ce:	4620      	mov	r0, r4
    d1d0:	f001 faa0 	bl	e714 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    d1d4:	4b1d      	ldr	r3, [pc, #116]	; (d24c <gpio_nrfx_pin_interrupt_configure+0xc0>)
    d1d6:	4298      	cmp	r0, r3
    d1d8:	d135      	bne.n	d246 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    d1da:	2101      	movs	r1, #1
    d1dc:	4620      	mov	r0, r4
    d1de:	f001 fc1f 	bl	ea20 <nrfx_gpiote_trigger_enable>
	return 0;
    d1e2:	e7e1      	b.n	d1a8 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    d1e4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    d1e8:	d022      	beq.n	d230 <gpio_nrfx_pin_interrupt_configure+0xa4>
    d1ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    d1ee:	bf14      	ite	ne
    d1f0:	2301      	movne	r3, #1
    d1f2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    d1f4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    d1f8:	6883      	ldr	r3, [r0, #8]
    d1fa:	40cb      	lsrs	r3, r1
    d1fc:	07d9      	lsls	r1, r3, #31
    d1fe:	d4e3      	bmi.n	d1c8 <gpio_nrfx_pin_interrupt_configure+0x3c>
    d200:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    d204:	d1e0      	bne.n	d1c8 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    d206:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    d20a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    d20e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    d212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    d216:	07db      	lsls	r3, r3, #31
    d218:	d4d6      	bmi.n	d1c8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d21a:	f10d 0507 	add.w	r5, sp, #7
    d21e:	4629      	mov	r1, r5
    d220:	4620      	mov	r0, r4
    d222:	f001 fba9 	bl	e978 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    d226:	4b0a      	ldr	r3, [pc, #40]	; (d250 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    d228:	4298      	cmp	r0, r3
    d22a:	d003      	beq.n	d234 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    d22c:	9503      	str	r5, [sp, #12]
    d22e:	e7cb      	b.n	d1c8 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    d230:	2303      	movs	r3, #3
    d232:	e7df      	b.n	d1f4 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    d234:	4628      	mov	r0, r5
    d236:	f001 fbed 	bl	ea14 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    d23a:	4b04      	ldr	r3, [pc, #16]	; (d24c <gpio_nrfx_pin_interrupt_configure+0xc0>)
    d23c:	4298      	cmp	r0, r3
    d23e:	d0f5      	beq.n	d22c <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
    d240:	f06f 000b 	mvn.w	r0, #11
    d244:	e7b1      	b.n	d1aa <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    d246:	f06f 0015 	mvn.w	r0, #21
    d24a:	e7ae      	b.n	d1aa <gpio_nrfx_pin_interrupt_configure+0x1e>
    d24c:	0bad0000 	.word	0x0bad0000
    d250:	0bad0004 	.word	0x0bad0004

0000d254 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    d254:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    d256:	f001 fbcd 	bl	e9f4 <nrfx_gpiote_is_init>
    d25a:	4604      	mov	r4, r0
    d25c:	b968      	cbnz	r0, d27a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    d25e:	f001 fba1 	bl	e9a4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    d262:	4b08      	ldr	r3, [pc, #32]	; (d284 <gpio_nrfx_init+0x30>)
    d264:	4298      	cmp	r0, r3
    d266:	d10a      	bne.n	d27e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    d268:	4807      	ldr	r0, [pc, #28]	; (d288 <gpio_nrfx_init+0x34>)
    d26a:	4621      	mov	r1, r4
    d26c:	f001 fb7e 	bl	e96c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    d270:	4622      	mov	r2, r4
    d272:	2105      	movs	r1, #5
    d274:	2006      	movs	r0, #6
    d276:	f7fe f811 	bl	b29c <z_arm_irq_priority_set>
		return 0;
    d27a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    d27c:	bd10      	pop	{r4, pc}
		return -EIO;
    d27e:	f06f 0004 	mvn.w	r0, #4
    d282:	e7fb      	b.n	d27c <gpio_nrfx_init+0x28>
    d284:	0bad0000 	.word	0x0bad0000
    d288:	0000d28d 	.word	0x0000d28d

0000d28c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d28c:	0943      	lsrs	r3, r0, #5
{
    d28e:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d290:	d107      	bne.n	d2a2 <nrfx_gpio_handler+0x16>
    d292:	4b0b      	ldr	r3, [pc, #44]	; (d2c0 <nrfx_gpio_handler+0x34>)
    d294:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d296:	b121      	cbz	r1, d2a2 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    d298:	2501      	movs	r5, #1
	return node->next;
    d29a:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    d29c:	4e09      	ldr	r6, [pc, #36]	; (d2c4 <nrfx_gpio_handler+0x38>)
    d29e:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d2a0:	b901      	cbnz	r1, d2a4 <nrfx_gpio_handler+0x18>
}
    d2a2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    d2a4:	688a      	ldr	r2, [r1, #8]
    d2a6:	402a      	ands	r2, r5
    d2a8:	d002      	beq.n	d2b0 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    d2aa:	684b      	ldr	r3, [r1, #4]
    d2ac:	4630      	mov	r0, r6
    d2ae:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d2b0:	b11c      	cbz	r4, d2ba <nrfx_gpio_handler+0x2e>
    d2b2:	6823      	ldr	r3, [r4, #0]
    d2b4:	4621      	mov	r1, r4
    d2b6:	461c      	mov	r4, r3
    d2b8:	e7f2      	b.n	d2a0 <nrfx_gpio_handler+0x14>
    d2ba:	4623      	mov	r3, r4
    d2bc:	e7fa      	b.n	d2b4 <nrfx_gpio_handler+0x28>
    d2be:	bf00      	nop
    d2c0:	200015a0 	.word	0x200015a0
    d2c4:	00012068 	.word	0x00012068

0000d2c8 <gpio_nrfx_pin_configure>:
{
    d2c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    d2cc:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d2ce:	7b3b      	ldrb	r3, [r7, #12]
    d2d0:	f001 051f 	and.w	r5, r1, #31
    d2d4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    d2d8:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d2da:	4628      	mov	r0, r5
    d2dc:	f10d 0103 	add.w	r1, sp, #3
{
    d2e0:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d2e2:	f001 fb49 	bl	e978 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    d2e6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d2ea:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    d2ec:	d10b      	bne.n	d306 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    d2ee:	4628      	mov	r0, r5
    d2f0:	f001 fc02 	bl	eaf8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    d2f4:	4b3d      	ldr	r3, [pc, #244]	; (d3ec <gpio_nrfx_pin_configure+0x124>)
    d2f6:	4598      	cmp	r8, r3
    d2f8:	d103      	bne.n	d302 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    d2fa:	f89d 0003 	ldrb.w	r0, [sp, #3]
    d2fe:	f001 fb83 	bl	ea08 <nrfx_gpiote_channel_free>
		return 0;
    d302:	2000      	movs	r0, #0
    d304:	e00c      	b.n	d320 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    d306:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d308:	4619      	mov	r1, r3
    d30a:	aa02      	add	r2, sp, #8
    d30c:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    d30e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d312:	f001 f9ff 	bl	e714 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    d316:	4b35      	ldr	r3, [pc, #212]	; (d3ec <gpio_nrfx_pin_configure+0x124>)
    d318:	4298      	cmp	r0, r3
    d31a:	d004      	beq.n	d326 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    d31c:	f06f 0015 	mvn.w	r0, #21
}
    d320:	b004      	add	sp, #16
    d322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    d326:	4580      	cmp	r8, r0
    d328:	d103      	bne.n	d332 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    d32a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    d32e:	f001 fb6b 	bl	ea08 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    d332:	03a3      	lsls	r3, r4, #14
    d334:	d54b      	bpl.n	d3ce <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d336:	f240 3306 	movw	r3, #774	; 0x306
    d33a:	4023      	ands	r3, r4
    d33c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    d340:	d019      	beq.n	d376 <gpio_nrfx_pin_configure+0xae>
    d342:	d80c      	bhi.n	d35e <gpio_nrfx_pin_configure+0x96>
    d344:	2b06      	cmp	r3, #6
    d346:	d017      	beq.n	d378 <gpio_nrfx_pin_configure+0xb0>
    d348:	d804      	bhi.n	d354 <gpio_nrfx_pin_configure+0x8c>
    d34a:	b1ab      	cbz	r3, d378 <gpio_nrfx_pin_configure+0xb0>
    d34c:	2b02      	cmp	r3, #2
    d34e:	d1e5      	bne.n	d31c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    d350:	2304      	movs	r3, #4
    d352:	e011      	b.n	d378 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    d358:	d1e0      	bne.n	d31c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    d35a:	2301      	movs	r3, #1
    d35c:	e00c      	b.n	d378 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d35e:	f240 2202 	movw	r2, #514	; 0x202
    d362:	4293      	cmp	r3, r2
    d364:	d027      	beq.n	d3b6 <gpio_nrfx_pin_configure+0xee>
    d366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    d36a:	d026      	beq.n	d3ba <gpio_nrfx_pin_configure+0xf2>
    d36c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    d370:	d1d4      	bne.n	d31c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    d372:	2302      	movs	r3, #2
    d374:	e000      	b.n	d378 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    d376:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    d378:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    d37c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    d380:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    d384:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    d386:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    d38a:	bf54      	ite	pl
    d38c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    d390:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    d392:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    d394:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    d398:	d511      	bpl.n	d3be <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    d39a:	687a      	ldr	r2, [r7, #4]
    d39c:	2301      	movs	r3, #1
    d39e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    d3a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    d3a4:	2200      	movs	r2, #0
    d3a6:	a901      	add	r1, sp, #4
    d3a8:	4628      	mov	r0, r5
    d3aa:	f001 fa61 	bl	e870 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    d3ae:	4b0f      	ldr	r3, [pc, #60]	; (d3ec <gpio_nrfx_pin_configure+0x124>)
    d3b0:	4298      	cmp	r0, r3
    d3b2:	d0a6      	beq.n	d302 <gpio_nrfx_pin_configure+0x3a>
    d3b4:	e7b2      	b.n	d31c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    d3b6:	2305      	movs	r3, #5
    d3b8:	e7de      	b.n	d378 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    d3ba:	2303      	movs	r3, #3
    d3bc:	e7dc      	b.n	d378 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    d3be:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    d3c0:	bf41      	itttt	mi
    d3c2:	2301      	movmi	r3, #1
    d3c4:	687a      	ldrmi	r2, [r7, #4]
    d3c6:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    d3c8:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    d3cc:	e7ea      	b.n	d3a4 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    d3ce:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    d3d0:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    d3d4:	bf54      	ite	pl
    d3d6:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    d3da:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    d3dc:	461a      	mov	r2, r3
    d3de:	a901      	add	r1, sp, #4
    d3e0:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    d3e2:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    d3e6:	f001 f995 	bl	e714 <nrfx_gpiote_input_configure>
    d3ea:	e7e0      	b.n	d3ae <gpio_nrfx_pin_configure+0xe6>
    d3ec:	0bad0000 	.word	0x0bad0000

0000d3f0 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    d3f0:	4802      	ldr	r0, [pc, #8]	; (d3fc <pwm_nrfx_get_cycles_per_sec+0xc>)
    d3f2:	2100      	movs	r1, #0
    d3f4:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    d3f8:	2000      	movs	r0, #0
    d3fa:	4770      	bx	lr
    d3fc:	00f42400 	.word	0x00f42400

0000d400 <pwm_nrfx_init>:
	.set_cycles = pwm_nrfx_set_cycles,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    d400:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct pwm_nrfx_config *config = dev->config;
    d402:	6844      	ldr	r4, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    d404:	6905      	ldr	r5, [r0, #16]

#ifdef CONFIG_PINCTRL
	int ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
    d406:	6aa6      	ldr	r6, [r4, #40]	; 0x28
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    d408:	aa01      	add	r2, sp, #4
    d40a:	2100      	movs	r1, #0
    d40c:	4630      	mov	r0, r6
    d40e:	f003 ff67 	bl	112e0 <pinctrl_lookup_state>
	if (ret < 0) {
    d412:	2800      	cmp	r0, #0
    d414:	db3f      	blt.n	d496 <pwm_nrfx_init+0x96>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    d416:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    d418:	6832      	ldr	r2, [r6, #0]
    d41a:	7919      	ldrb	r1, [r3, #4]
    d41c:	6818      	ldr	r0, [r3, #0]
    d41e:	f003 ff75 	bl	1130c <pinctrl_configure_pins>

	if (ret < 0) {
    d422:	2800      	cmp	r0, #0
    d424:	db37      	blt.n	d496 <pwm_nrfx_init+0x96>
		return ret;
	}

	data->initially_inverted = 0;
    d426:	2200      	movs	r2, #0
    d428:	73aa      	strb	r2, [r5, #14]
    return p_reg->OUT;
    d42a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
	*psel = nrf_pwm_pin_get(config->pwm.p_registers, (uint8_t)channel);
    d42e:	6823      	ldr	r3, [r4, #0]
}

NRF_STATIC_INLINE uint32_t nrf_pwm_pin_get(NRF_PWM_Type const * p_reg, uint8_t channel)
{
    NRFX_ASSERT(channel < NRF_PWM_CHANNEL_COUNT);
    return p_reg->PSEL.OUT[channel];
    d430:	f502 71ac 	add.w	r1, r2, #344	; 0x158
    d434:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
		uint32_t psel;

		if (channel_psel_get(i, &psel, config)) {
    d438:	2900      	cmp	r1, #0
    d43a:	db0c      	blt.n	d456 <pwm_nrfx_init+0x56>
    d43c:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    *p_pin = pin_number & 0x1F;
    d440:	f001 011f 	and.w	r1, r1, #31
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
    d444:	40cb      	lsrs	r3, r1
			/* Mark channels as inverted according to what initial
			 * state of their outputs has been set by pinctrl (high
			 * idle state means that the channel is inverted).
			 */
			data->initially_inverted |=
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
    d446:	f013 0301 	ands.w	r3, r3, #1
			data->initially_inverted |=
    d44a:	7ba9      	ldrb	r1, [r5, #14]
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
    d44c:	bf1c      	itt	ne
    d44e:	2301      	movne	r3, #1
    d450:	4093      	lslne	r3, r2
			data->initially_inverted |=
    d452:	430b      	orrs	r3, r1
    d454:	73ab      	strb	r3, [r5, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    d456:	3201      	adds	r2, #1
    d458:	2a04      	cmp	r2, #4
    d45a:	d1e8      	bne.n	d42e <pwm_nrfx_init+0x2e>
		}
	}
#endif

	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
		bool inverted = data->initially_inverted & BIT(i);
    d45c:	7ba9      	ldrb	r1, [r5, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    d45e:	2300      	movs	r3, #0
    d460:	3502      	adds	r5, #2
		bool inverted = data->initially_inverted & BIT(i);
    d462:	2001      	movs	r0, #1
    d464:	fa00 f203 	lsl.w	r2, r0, r3

		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
    d468:	420a      	tst	r2, r1
    d46a:	bf0c      	ite	eq
    d46c:	2201      	moveq	r2, #1
    d46e:	2200      	movne	r2, #0
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    d470:	3301      	adds	r3, #1
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
    d472:	03d2      	lsls	r2, r2, #15
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    d474:	2b04      	cmp	r3, #4
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
    d476:	f825 2f02 	strh.w	r2, [r5, #2]!
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    d47a:	d1f3      	bne.n	d464 <pwm_nrfx_init+0x64>
	}

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    d47c:	2300      	movs	r3, #0
    d47e:	461a      	mov	r2, r3
    d480:	f104 0108 	add.w	r1, r4, #8
    d484:	4620      	mov	r0, r4
    d486:	f001 fc03 	bl	ec90 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    d48a:	4b04      	ldr	r3, [pc, #16]	; (d49c <pwm_nrfx_init+0x9c>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
	}

	return 0;
    d48c:	4298      	cmp	r0, r3
    d48e:	bf14      	ite	ne
    d490:	f06f 000f 	mvnne.w	r0, #15
    d494:	2000      	moveq	r0, #0
}
    d496:	b002      	add	sp, #8
    d498:	bd70      	pop	{r4, r5, r6, pc}
    d49a:	bf00      	nop
    d49c:	0bad0000 	.word	0x0bad0000

0000d4a0 <random_byte_get>:
    d4a0:	f04f 0340 	mov.w	r3, #64	; 0x40
    d4a4:	f3ef 8211 	mrs	r2, BASEPRI
    d4a8:	f383 8812 	msr	BASEPRI_MAX, r3
    d4ac:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    d4b0:	4b09      	ldr	r3, [pc, #36]	; (d4d8 <random_byte_get+0x38>)
    d4b2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
    d4b6:	b161      	cbz	r1, d4d2 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    d4b8:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
    d4ba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    d4be:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    d4c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
    d4c6:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    d4c8:	f382 8811 	msr	BASEPRI, r2
    d4cc:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
    d4d0:	4770      	bx	lr
	int retval = -EAGAIN;
    d4d2:	f06f 000a 	mvn.w	r0, #10
    d4d6:	e7f7      	b.n	d4c8 <random_byte_get+0x28>
    d4d8:	4000d000 	.word	0x4000d000

0000d4dc <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
    d4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4de:	4603      	mov	r3, r0
    d4e0:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
    d4e2:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
    d4e4:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
    d4e8:	f04f 0540 	mov.w	r5, #64	; 0x40
    d4ec:	f3ef 8211 	mrs	r2, BASEPRI
    d4f0:	f385 8812 	msr	BASEPRI_MAX, r5
    d4f4:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    d4f8:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    d4fa:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
    d4fe:	1be4      	subs	r4, r4, r7
    d500:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
    d504:	42a0      	cmp	r0, r4
		len = available;
    d506:	bf88      	it	hi
    d508:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    d50a:	183e      	adds	r6, r7, r0
    d50c:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
    d510:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
    d512:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
    d514:	f382 8811 	msr	BASEPRI, r2
    d518:	f3bf 8f6f 	isb	sy
    d51c:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
    d51e:	428a      	cmp	r2, r1
    d520:	d117      	bne.n	d552 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    d522:	4577      	cmp	r7, lr
    d524:	d10d      	bne.n	d542 <rng_pool_get+0x66>
	__asm__ volatile(
    d526:	f04f 0140 	mov.w	r1, #64	; 0x40
    d52a:	f3ef 8211 	mrs	r2, BASEPRI
    d52e:	f381 8812 	msr	BASEPRI_MAX, r1
    d532:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    d536:	7819      	ldrb	r1, [r3, #0]
    d538:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
    d53a:	f382 8811 	msr	BASEPRI, r2
    d53e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
    d542:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
    d544:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
    d546:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    d548:	bf22      	ittt	cs
    d54a:	4b06      	ldrcs	r3, [pc, #24]	; (d564 <rng_pool_get+0x88>)
    d54c:	2201      	movcs	r2, #1
    d54e:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
    d550:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
    d552:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
    d554:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
    d556:	7976      	ldrb	r6, [r6, #5]
    d558:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
    d55c:	ea05 050c 	and.w	r5, r5, ip
    d560:	e7dd      	b.n	d51e <rng_pool_get+0x42>
    d562:	bf00      	nop
    d564:	4000d000 	.word	0x4000d000

0000d568 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    d568:	43db      	mvns	r3, r3
{
    d56a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    d56e:	f013 0501 	ands.w	r5, r3, #1
{
    d572:	460e      	mov	r6, r1
    d574:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    d576:	d004      	beq.n	d582 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    d578:	4821      	ldr	r0, [pc, #132]	; (d600 <entropy_nrf5_get_entropy_isr+0x98>)
    d57a:	f7ff ffaf 	bl	d4dc <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
    d57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
    d582:	b3a2      	cbz	r2, d5ee <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
    d584:	f04f 0340 	mov.w	r3, #64	; 0x40
    d588:	f3ef 8811 	mrs	r8, BASEPRI
    d58c:	f383 8812 	msr	BASEPRI_MAX, r3
    d590:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
    d594:	200d      	movs	r0, #13
    d596:	f7fd fe73 	bl	b280 <arch_irq_is_enabled>
    d59a:	4607      	mov	r7, r0
		irq_disable(IRQN);
    d59c:	200d      	movs	r0, #13
    d59e:	f7fd fe5b 	bl	b258 <arch_irq_disable>
	__asm__ volatile(
    d5a2:	f388 8811 	msr	BASEPRI, r8
    d5a6:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    d5aa:	f8df 8058 	ldr.w	r8, [pc, #88]	; d604 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d5ae:	f8df 9058 	ldr.w	r9, [pc, #88]	; d608 <entropy_nrf5_get_entropy_isr+0xa0>
    d5b2:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
    d5b6:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
    d5ba:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    d5be:	2301      	movs	r3, #1
    d5c0:	f8c8 3000 	str.w	r3, [r8]
    d5c4:	4625      	mov	r5, r4
    d5c6:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    d5ca:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
    d5ce:	b183      	cbz	r3, d5f2 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
    d5d0:	f7ff ff66 	bl	d4a0 <random_byte_get>
			if (byte < 0) {
    d5d4:	1e03      	subs	r3, r0, #0
    d5d6:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    d5da:	dbf6      	blt.n	d5ca <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
    d5dc:	3d01      	subs	r5, #1
    d5de:	b2ad      	uxth	r5, r5
    d5e0:	5573      	strb	r3, [r6, r5]
		} while (len);
    d5e2:	2d00      	cmp	r5, #0
    d5e4:	d1f1      	bne.n	d5ca <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
    d5e6:	b117      	cbz	r7, d5ee <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
    d5e8:	200d      	movs	r0, #13
    d5ea:	f7fd fe27 	bl	b23c <arch_irq_enable>
	return cnt;
    d5ee:	4620      	mov	r0, r4
    d5f0:	e7c5      	b.n	d57e <entropy_nrf5_get_entropy_isr+0x16>
    d5f2:	f3bf 8f4f 	dsb	sy
				__WFE();
    d5f6:	bf20      	wfe
				__SEV();
    d5f8:	bf40      	sev
				__WFE();
    d5fa:	bf20      	wfe
    d5fc:	e7e5      	b.n	d5ca <entropy_nrf5_get_entropy_isr+0x62>
    d5fe:	bf00      	nop
    d600:	200015ec 	.word	0x200015ec
    d604:	4000d000 	.word	0x4000d000
    d608:	e000e100 	.word	0xe000e100

0000d60c <entropy_nrf5_get_entropy>:
{
    d60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    d610:	4f12      	ldr	r7, [pc, #72]	; (d65c <entropy_nrf5_get_entropy+0x50>)
    d612:	460d      	mov	r5, r1
    d614:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    d616:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
    d61a:	b914      	cbnz	r4, d622 <entropy_nrf5_get_entropy+0x16>
}
    d61c:	4620      	mov	r0, r4
    d61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d62a:	4638      	mov	r0, r7
    d62c:	f001 fef8 	bl	f420 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    d630:	4622      	mov	r2, r4
    d632:	4629      	mov	r1, r5
    d634:	4640      	mov	r0, r8
    d636:	f7ff ff51 	bl	d4dc <rng_pool_get>
    d63a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
    d63c:	4638      	mov	r0, r7
    d63e:	f001 fec9 	bl	f3d4 <z_impl_k_sem_give>
		if (bytes == 0U) {
    d642:	b93e      	cbnz	r6, d654 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
    d644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d64c:	4804      	ldr	r0, [pc, #16]	; (d660 <entropy_nrf5_get_entropy+0x54>)
    d64e:	f001 fee7 	bl	f420 <z_impl_k_sem_take>
	while (len) {
    d652:	e7e6      	b.n	d622 <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
    d654:	1ba4      	subs	r4, r4, r6
    d656:	b2a4      	uxth	r4, r4
		buf += bytes;
    d658:	4435      	add	r5, r6
    d65a:	e7de      	b.n	d61a <entropy_nrf5_get_entropy+0xe>
    d65c:	200015bc 	.word	0x200015bc
    d660:	200015d4 	.word	0x200015d4

0000d664 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
    d664:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    d666:	4c19      	ldr	r4, [pc, #100]	; (d6cc <entropy_nrf5_init+0x68>)
    d668:	2201      	movs	r2, #1
    d66a:	4611      	mov	r1, r2
    d66c:	4620      	mov	r0, r4
    d66e:	f004 f8f8 	bl	11862 <z_impl_k_sem_init>
    d672:	2201      	movs	r2, #1
    d674:	2100      	movs	r1, #0
    d676:	f104 0018 	add.w	r0, r4, #24
    d67a:	f004 f8f2 	bl	11862 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
    d67e:	f240 4307 	movw	r3, #1031	; 0x407
    d682:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
    d686:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    d68a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
    d68c:	230c      	movs	r3, #12
    d68e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
    d692:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
    d694:	4b0e      	ldr	r3, [pc, #56]	; (d6d0 <entropy_nrf5_init+0x6c>)
    d696:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
    d69a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
    d69e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    d6a2:	f022 0201 	bic.w	r2, r2, #1
    d6a6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
    d6aa:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    d6ac:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
    d6b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    d6b4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
    d6b8:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    d6ba:	6019      	str	r1, [r3, #0]
    d6bc:	200d      	movs	r0, #13
    d6be:	f7fd fded 	bl	b29c <z_arm_irq_priority_set>
	irq_enable(IRQN);
    d6c2:	200d      	movs	r0, #13
    d6c4:	f7fd fdba 	bl	b23c <arch_irq_enable>

	return 0;
}
    d6c8:	4628      	mov	r0, r5
    d6ca:	bd38      	pop	{r3, r4, r5, pc}
    d6cc:	200015bc 	.word	0x200015bc
    d6d0:	4000d000 	.word	0x4000d000

0000d6d4 <isr>:
{
    d6d4:	b510      	push	{r4, lr}
	byte = random_byte_get();
    d6d6:	f7ff fee3 	bl	d4a0 <random_byte_get>
	if (byte < 0) {
    d6da:	2800      	cmp	r0, #0
    d6dc:	db20      	blt.n	d720 <isr+0x4c>
	uint8_t last  = rngp->last;
    d6de:	4b17      	ldr	r3, [pc, #92]	; (d73c <isr+0x68>)
    d6e0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
    d6e4:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
    d6e8:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
    d6ec:	1b14      	subs	r4, r2, r4
    d6ee:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    d6f2:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
    d6f4:	d10d      	bne.n	d712 <isr+0x3e>
	uint8_t last  = rngp->last;
    d6f6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
    d6fa:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
    d6fe:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
    d702:	1b14      	subs	r4, r2, r4
    d704:	ea31 0404 	bics.w	r4, r1, r4
    d708:	d10b      	bne.n	d722 <isr+0x4e>
    d70a:	4b0d      	ldr	r3, [pc, #52]	; (d740 <isr+0x6c>)
    d70c:	2201      	movs	r2, #1
    d70e:	605a      	str	r2, [r3, #4]
}
    d710:	e00e      	b.n	d730 <isr+0x5c>
	rngp->buffer[last] = byte;
    d712:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    d714:	3201      	adds	r2, #1
    d716:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
    d718:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
    d71c:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
    d720:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
    d722:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    d724:	3201      	adds	r2, #1
    d726:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
    d728:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
    d72c:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
    d730:	4804      	ldr	r0, [pc, #16]	; (d744 <isr+0x70>)
}
    d732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d736:	f001 be4d 	b.w	f3d4 <z_impl_k_sem_give>
    d73a:	bf00      	nop
    d73c:	200015bc 	.word	0x200015bc
    d740:	4000d000 	.word	0x4000d000
    d744:	200015d4 	.word	0x200015d4

0000d748 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    d748:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    d74a:	2301      	movs	r3, #1
    d74c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d74e:	4a0e      	ldr	r2, [pc, #56]	; (d788 <compare_int_lock+0x40>)
    d750:	f3bf 8f5b 	dmb	ish
    d754:	43dc      	mvns	r4, r3
    d756:	e852 1f00 	ldrex	r1, [r2]
    d75a:	ea01 0504 	and.w	r5, r1, r4
    d75e:	e842 5600 	strex	r6, r5, [r2]
    d762:	2e00      	cmp	r6, #0
    d764:	d1f7      	bne.n	d756 <compare_int_lock+0xe>
    d766:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    d76a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    d76e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    d770:	4806      	ldr	r0, [pc, #24]	; (d78c <compare_int_lock+0x44>)
    d772:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    d776:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d77a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    d77e:	420b      	tst	r3, r1
}
    d780:	bf14      	ite	ne
    d782:	2001      	movne	r0, #1
    d784:	2000      	moveq	r0, #0
    d786:	bd70      	pop	{r4, r5, r6, pc}
    d788:	20001614 	.word	0x20001614
    d78c:	40011000 	.word	0x40011000

0000d790 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    d790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    d792:	491b      	ldr	r1, [pc, #108]	; (d800 <sys_clock_timeout_handler+0x70>)
{
    d794:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    d796:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    d79a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    d79c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    d7a0:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    d7a4:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    d7a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    d7aa:	d30f      	bcc.n	d7cc <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    d7ac:	f002 fc02 	bl	ffb4 <sys_clock_announce>
    return p_reg->CC[ch];
    d7b0:	00a3      	lsls	r3, r4, #2
    d7b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d7b6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    d7ba:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    d7be:	4295      	cmp	r5, r2
    d7c0:	d11d      	bne.n	d7fe <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    d7c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    d7c6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    d7ca:	e012      	b.n	d7f2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    d7cc:	4b0d      	ldr	r3, [pc, #52]	; (d804 <sys_clock_timeout_handler+0x74>)
    d7ce:	681b      	ldr	r3, [r3, #0]
    d7d0:	0a1a      	lsrs	r2, r3, #8
    d7d2:	061b      	lsls	r3, r3, #24
    d7d4:	195e      	adds	r6, r3, r5
    d7d6:	4b0c      	ldr	r3, [pc, #48]	; (d808 <sys_clock_timeout_handler+0x78>)
    d7d8:	f142 0700 	adc.w	r7, r2, #0
    d7dc:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    d7e0:	f002 fbe8 	bl	ffb4 <sys_clock_announce>
    return p_reg->CC[ch];
    d7e4:	4a09      	ldr	r2, [pc, #36]	; (d80c <sys_clock_timeout_handler+0x7c>)
    d7e6:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    d7ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    d7ee:	429d      	cmp	r5, r3
    d7f0:	d105      	bne.n	d7fe <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    d7f2:	4a06      	ldr	r2, [pc, #24]	; (d80c <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    d7f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    d7f8:	40a3      	lsls	r3, r4
    d7fa:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    d7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d800:	200012c0 	.word	0x200012c0
    d804:	20001618 	.word	0x20001618
    d808:	200012c8 	.word	0x200012c8
    d80c:	40011000 	.word	0x40011000

0000d810 <compare_int_unlock>:
	if (key) {
    d810:	b311      	cbz	r1, d858 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d812:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    d816:	2301      	movs	r3, #1
    d818:	4a10      	ldr	r2, [pc, #64]	; (d85c <compare_int_unlock+0x4c>)
    d81a:	4083      	lsls	r3, r0
    d81c:	e852 cf00 	ldrex	ip, [r2]
    d820:	ea4c 0c03 	orr.w	ip, ip, r3
    d824:	e842 c100 	strex	r1, ip, [r2]
    d828:	2900      	cmp	r1, #0
    d82a:	d1f7      	bne.n	d81c <compare_int_unlock+0xc>
    d82c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    d830:	4a0b      	ldr	r2, [pc, #44]	; (d860 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    d832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    d836:	4083      	lsls	r3, r0
    d838:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d83c:	4b09      	ldr	r3, [pc, #36]	; (d864 <compare_int_unlock+0x54>)
    d83e:	f3bf 8f5b 	dmb	ish
    d842:	681b      	ldr	r3, [r3, #0]
    d844:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    d848:	40c3      	lsrs	r3, r0
    d84a:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d84c:	bf42      	ittt	mi
    d84e:	4b06      	ldrmi	r3, [pc, #24]	; (d868 <compare_int_unlock+0x58>)
    d850:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    d854:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    d858:	4770      	bx	lr
    d85a:	bf00      	nop
    d85c:	20001614 	.word	0x20001614
    d860:	40011000 	.word	0x40011000
    d864:	20001610 	.word	0x20001610
    d868:	e000e100 	.word	0xe000e100

0000d86c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    d86c:	4b0d      	ldr	r3, [pc, #52]	; (d8a4 <z_nrf_rtc_timer_read+0x38>)
    d86e:	6818      	ldr	r0, [r3, #0]
    d870:	0a01      	lsrs	r1, r0, #8
    d872:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    d874:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    d878:	4b0b      	ldr	r3, [pc, #44]	; (d8a8 <z_nrf_rtc_timer_read+0x3c>)
    d87a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    d87e:	1818      	adds	r0, r3, r0
    d880:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    d884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    d888:	d20a      	bcs.n	d8a0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    d88a:	4b08      	ldr	r3, [pc, #32]	; (d8ac <z_nrf_rtc_timer_read+0x40>)
    d88c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d890:	4290      	cmp	r0, r2
    d892:	eb71 0303 	sbcs.w	r3, r1, r3
    d896:	d203      	bcs.n	d8a0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    d898:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    d89c:	f141 0100 	adc.w	r1, r1, #0
}
    d8a0:	4770      	bx	lr
    d8a2:	bf00      	nop
    d8a4:	20001618 	.word	0x20001618
    d8a8:	40011000 	.word	0x40011000
    d8ac:	200012c8 	.word	0x200012c8

0000d8b0 <compare_set>:
{
    d8b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8b4:	4614      	mov	r4, r2
    d8b6:	461d      	mov	r5, r3
    d8b8:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    d8ba:	f7ff ff45 	bl	d748 <compare_int_lock>
    d8be:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    d8c0:	f7ff ffd4 	bl	d86c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    d8c4:	42a0      	cmp	r0, r4
    d8c6:	eb71 0305 	sbcs.w	r3, r1, r5
    d8ca:	d27a      	bcs.n	d9c2 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    d8cc:	4b46      	ldr	r3, [pc, #280]	; (d9e8 <compare_set+0x138>)
    d8ce:	1a20      	subs	r0, r4, r0
    d8d0:	eb65 0101 	sbc.w	r1, r5, r1
    d8d4:	4298      	cmp	r0, r3
    d8d6:	f171 0100 	sbcs.w	r1, r1, #0
    d8da:	f080 8081 	bcs.w	d9e0 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    d8de:	4b43      	ldr	r3, [pc, #268]	; (d9ec <compare_set+0x13c>)
    d8e0:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    d8e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    d8e8:	429d      	cmp	r5, r3
    d8ea:	bf08      	it	eq
    d8ec:	4294      	cmpeq	r4, r2
    d8ee:	d053      	beq.n	d998 <compare_set+0xe8>
    d8f0:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    d8f4:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    d8f8:	f107 0950 	add.w	r9, r7, #80	; 0x50
    d8fc:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    d900:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d904:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    d908:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    d90c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    d910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    d914:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    d918:	4a35      	ldr	r2, [pc, #212]	; (d9f0 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d91a:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    d91e:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    d920:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    d922:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    d926:	eba0 000b 	sub.w	r0, r0, fp
    d92a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    d92e:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    d932:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    d934:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    d938:	d105      	bne.n	d946 <compare_set+0x96>
    d93a:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    d93c:	2013      	movs	r0, #19
    d93e:	f004 f9bd 	bl	11cbc <z_impl_k_busy_wait>
    d942:	4a2b      	ldr	r2, [pc, #172]	; (d9f0 <compare_set+0x140>)
    d944:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    d946:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    d94a:	eba6 000c 	sub.w	r0, r6, ip
    d94e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    d952:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    d956:	bf88      	it	hi
    d958:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d95a:	2000      	movs	r0, #0
    d95c:	f8c9 0000 	str.w	r0, [r9]
    d960:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    d964:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    d968:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    d96c:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    d970:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    d974:	4583      	cmp	fp, r0
    d976:	d006      	beq.n	d986 <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    d978:	1a30      	subs	r0, r6, r0
    d97a:	3802      	subs	r0, #2
    d97c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    d980:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    d984:	d81b      	bhi.n	d9be <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    d986:	eba6 0608 	sub.w	r6, r6, r8
    d98a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    d98e:	1936      	adds	r6, r6, r4
    d990:	f145 0300 	adc.w	r3, r5, #0
    d994:	4634      	mov	r4, r6
    d996:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    d998:	4914      	ldr	r1, [pc, #80]	; (d9ec <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    d99a:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    d99c:	013b      	lsls	r3, r7, #4
    d99e:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    d9a2:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    d9a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d9a6:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    d9a8:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    d9ac:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    d9ae:	4638      	mov	r0, r7
    d9b0:	9900      	ldr	r1, [sp, #0]
    d9b2:	f7ff ff2d 	bl	d810 <compare_int_unlock>
}
    d9b6:	4620      	mov	r0, r4
    d9b8:	b003      	add	sp, #12
    d9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9be:	4630      	mov	r0, r6
    d9c0:	e7af      	b.n	d922 <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    d9c2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d9c4:	4a0b      	ldr	r2, [pc, #44]	; (d9f4 <compare_set+0x144>)
    d9c6:	f3bf 8f5b 	dmb	ish
    d9ca:	40bb      	lsls	r3, r7
    d9cc:	e852 0f00 	ldrex	r0, [r2]
    d9d0:	4318      	orrs	r0, r3
    d9d2:	e842 0100 	strex	r1, r0, [r2]
    d9d6:	2900      	cmp	r1, #0
    d9d8:	d1f8      	bne.n	d9cc <compare_set+0x11c>
    d9da:	f3bf 8f5b 	dmb	ish
    d9de:	e7db      	b.n	d998 <compare_set+0xe8>
			return -EINVAL;
    d9e0:	f06f 0415 	mvn.w	r4, #21
    d9e4:	e7e3      	b.n	d9ae <compare_set+0xfe>
    d9e6:	bf00      	nop
    d9e8:	01000001 	.word	0x01000001
    d9ec:	200012b0 	.word	0x200012b0
    d9f0:	40011000 	.word	0x40011000
    d9f4:	20001610 	.word	0x20001610

0000d9f8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    d9f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    d9fa:	4b19      	ldr	r3, [pc, #100]	; (da60 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    d9fc:	4d19      	ldr	r5, [pc, #100]	; (da64 <sys_clock_driver_init+0x6c>)
    d9fe:	2400      	movs	r4, #0
    da00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    da04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    da08:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    da0c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    da10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    da14:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    da18:	4b13      	ldr	r3, [pc, #76]	; (da68 <sys_clock_driver_init+0x70>)
    da1a:	2602      	movs	r6, #2
    da1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    da20:	2101      	movs	r1, #1
    da22:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    da26:	2011      	movs	r0, #17
    da28:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    da2c:	4622      	mov	r2, r4
    da2e:	f7fd fc35 	bl	b29c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    da32:	2011      	movs	r0, #17
    da34:	f7fd fc02 	bl	b23c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    da38:	4a0c      	ldr	r2, [pc, #48]	; (da6c <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    da3a:	2301      	movs	r3, #1
    da3c:	60ab      	str	r3, [r5, #8]
    da3e:	602b      	str	r3, [r5, #0]
    da40:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    da42:	4b0b      	ldr	r3, [pc, #44]	; (da70 <sys_clock_driver_init+0x78>)
    da44:	4a0b      	ldr	r2, [pc, #44]	; (da74 <sys_clock_driver_init+0x7c>)
    da46:	9300      	str	r3, [sp, #0]
    da48:	9401      	str	r4, [sp, #4]
    da4a:	2300      	movs	r3, #0
    da4c:	4620      	mov	r0, r4
    da4e:	f7ff ff2f 	bl	d8b0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    da52:	4630      	mov	r0, r6
    da54:	f7ff fb40 	bl	d0d8 <z_nrf_clock_control_lf_on>

	return 0;
}
    da58:	4620      	mov	r0, r4
    da5a:	b002      	add	sp, #8
    da5c:	bd70      	pop	{r4, r5, r6, pc}
    da5e:	bf00      	nop
    da60:	200012b0 	.word	0x200012b0
    da64:	40011000 	.word	0x40011000
    da68:	e000e100 	.word	0xe000e100
    da6c:	20001614 	.word	0x20001614
    da70:	0000d791 	.word	0x0000d791
    da74:	007fffff 	.word	0x007fffff

0000da78 <rtc_nrf_isr>:
{
    da78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    da7c:	4c2b      	ldr	r4, [pc, #172]	; (db2c <rtc_nrf_isr+0xb4>)
    da7e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    da82:	079a      	lsls	r2, r3, #30
    da84:	d50b      	bpl.n	da9e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    da86:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    da8a:	b143      	cbz	r3, da9e <rtc_nrf_isr+0x26>
		overflow_cnt++;
    da8c:	4a28      	ldr	r2, [pc, #160]	; (db30 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    da8e:	2300      	movs	r3, #0
    da90:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    da94:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    da98:	6813      	ldr	r3, [r2, #0]
    da9a:	3301      	adds	r3, #1
    da9c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    da9e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    daa2:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
    daa4:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    daa8:	03db      	lsls	r3, r3, #15
    daaa:	d522      	bpl.n	daf2 <rtc_nrf_isr+0x7a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    daac:	f3bf 8f5b 	dmb	ish
    dab0:	4b20      	ldr	r3, [pc, #128]	; (db34 <rtc_nrf_isr+0xbc>)
    dab2:	e853 1f00 	ldrex	r1, [r3]
    dab6:	f021 0001 	bic.w	r0, r1, #1
    daba:	e843 0500 	strex	r5, r0, [r3]
    dabe:	2d00      	cmp	r5, #0
    dac0:	d1f7      	bne.n	dab2 <rtc_nrf_isr+0x3a>
    dac2:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    dac6:	b911      	cbnz	r1, dace <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dac8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    dacc:	b18b      	cbz	r3, daf2 <rtc_nrf_isr+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    dace:	2500      	movs	r5, #0
    dad0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    dad4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    dad8:	f382 8810 	msr	PRIMASK, r2
		curr_time = z_nrf_rtc_timer_read();
    dadc:	f7ff fec6 	bl	d86c <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    dae0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    dae4:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
    dae6:	4b14      	ldr	r3, [pc, #80]	; (db38 <rtc_nrf_isr+0xc0>)
    dae8:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    daec:	42b0      	cmp	r0, r6
    daee:	41b9      	sbcs	r1, r7
    daf0:	d204      	bcs.n	dafc <rtc_nrf_isr+0x84>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    daf2:	f382 8810 	msr	PRIMASK, r2
}
    daf6:	b003      	add	sp, #12
    daf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    dafc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    db00:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    db04:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    db08:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    db0c:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    db0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    db12:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    db16:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
    db1a:	2900      	cmp	r1, #0
    db1c:	d0eb      	beq.n	daf6 <rtc_nrf_isr+0x7e>
			handler(chan, expire_time, user_context);
    db1e:	9000      	str	r0, [sp, #0]
    db20:	4632      	mov	r2, r6
    db22:	463b      	mov	r3, r7
    db24:	4628      	mov	r0, r5
    db26:	4788      	blx	r1
}
    db28:	e7e5      	b.n	daf6 <rtc_nrf_isr+0x7e>
    db2a:	bf00      	nop
    db2c:	40011000 	.word	0x40011000
    db30:	20001618 	.word	0x20001618
    db34:	20001610 	.word	0x20001610
    db38:	200012b0 	.word	0x200012b0

0000db3c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    db3c:	1c43      	adds	r3, r0, #1
{
    db3e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    db40:	d021      	beq.n	db86 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    db42:	2801      	cmp	r0, #1
    db44:	dd21      	ble.n	db8a <sys_clock_set_timeout+0x4e>
    db46:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    db4a:	da20      	bge.n	db8e <sys_clock_set_timeout+0x52>
    db4c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    db4e:	f7ff fe8d 	bl	d86c <z_nrf_rtc_timer_read>
    db52:	4b10      	ldr	r3, [pc, #64]	; (db94 <sys_clock_set_timeout+0x58>)
    db54:	e9d3 1300 	ldrd	r1, r3, [r3]
    db58:	1a42      	subs	r2, r0, r1
		ticks = 0;
    db5a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    db5e:	480e      	ldr	r0, [pc, #56]	; (db98 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    db60:	bf28      	it	cs
    db62:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    db64:	3201      	adds	r2, #1
    db66:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    db68:	4282      	cmp	r2, r0
    db6a:	bf28      	it	cs
    db6c:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    db6e:	1852      	adds	r2, r2, r1
    db70:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    db74:	4909      	ldr	r1, [pc, #36]	; (db9c <sys_clock_set_timeout+0x60>)
    db76:	9001      	str	r0, [sp, #4]
    db78:	9100      	str	r1, [sp, #0]
    db7a:	f143 0300 	adc.w	r3, r3, #0
    db7e:	f7ff fe97 	bl	d8b0 <compare_set>
}
    db82:	b002      	add	sp, #8
    db84:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    db86:	4804      	ldr	r0, [pc, #16]	; (db98 <sys_clock_set_timeout+0x5c>)
    db88:	e7e0      	b.n	db4c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    db8a:	2400      	movs	r4, #0
    db8c:	e7df      	b.n	db4e <sys_clock_set_timeout+0x12>
    db8e:	4c02      	ldr	r4, [pc, #8]	; (db98 <sys_clock_set_timeout+0x5c>)
    db90:	e7dd      	b.n	db4e <sys_clock_set_timeout+0x12>
    db92:	bf00      	nop
    db94:	200012c0 	.word	0x200012c0
    db98:	007fffff 	.word	0x007fffff
    db9c:	0000d791 	.word	0x0000d791

0000dba0 <sys_clock_elapsed>:
{
    dba0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    dba2:	f7ff fe63 	bl	d86c <z_nrf_rtc_timer_read>
    dba6:	4b02      	ldr	r3, [pc, #8]	; (dbb0 <sys_clock_elapsed+0x10>)
    dba8:	681b      	ldr	r3, [r3, #0]
}
    dbaa:	1ac0      	subs	r0, r0, r3
    dbac:	bd08      	pop	{r3, pc}
    dbae:	bf00      	nop
    dbb0:	200012c0 	.word	0x200012c0

0000dbb4 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
    dbb4:	4602      	mov	r2, r0
    dbb6:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    dbb8:	4801      	ldr	r0, [pc, #4]	; (dbc0 <multithreading_lock_acquire+0xc>)
    dbba:	f001 bb21 	b.w	f200 <z_impl_k_mutex_lock>
    dbbe:	bf00      	nop
    dbc0:	20000424 	.word	0x20000424

0000dbc4 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
    dbc4:	4801      	ldr	r0, [pc, #4]	; (dbcc <multithreading_lock_release+0x8>)
    dbc6:	f001 bb95 	b.w	f2f4 <z_impl_k_mutex_unlock>
    dbca:	bf00      	nop
    dbcc:	20000424 	.word	0x20000424

0000dbd0 <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
    dbd0:	b510      	push	{r4, lr}
	BT_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
    dbd2:	4916      	ldr	r1, [pc, #88]	; (dc2c <hci_driver_open+0x5c>)
    dbd4:	4816      	ldr	r0, [pc, #88]	; (dc30 <hci_driver_open+0x60>)
{
    dbd6:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
    dbd8:	f003 febf 	bl	1195a <k_work_init>
		hci_ecdh_init();
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
    dbdc:	a803      	add	r0, sp, #12
    dbde:	f7f5 ff37 	bl	3a50 <sdc_build_revision_get>
    dbe2:	4814      	ldr	r0, [pc, #80]	; (dc34 <hci_driver_open+0x64>)
    dbe4:	f003 fcc0 	bl	11568 <z_device_is_ready>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
    dbe8:	b1d0      	cbz	r0, dc20 <hci_driver_open+0x50>
		BT_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
    dbea:	4a13      	ldr	r2, [pc, #76]	; (dc38 <hci_driver_open+0x68>)
    dbec:	ca07      	ldmia	r2, {r0, r1, r2}
    dbee:	466b      	mov	r3, sp
    dbf0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
    dbf4:	4618      	mov	r0, r3
    dbf6:	f7f6 f899 	bl	3d2c <sdc_rand_source_register>
	if (err) {
    dbfa:	b9a0      	cbnz	r0, dc26 <hci_driver_open+0x56>
		BT_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
    dbfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dc00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dc04:	f7ff ffd6 	bl	dbb4 <multithreading_lock_acquire>
	if (err) {
    dc08:	4604      	mov	r4, r0
    dc0a:	b930      	cbnz	r0, dc1a <hci_driver_open+0x4a>
				return err;
			}
		}
	}

	err = sdc_enable(receive_signal_raise, sdc_mempool);
    dc0c:	490b      	ldr	r1, [pc, #44]	; (dc3c <hci_driver_open+0x6c>)
    dc0e:	480c      	ldr	r0, [pc, #48]	; (dc40 <hci_driver_open+0x70>)
    dc10:	f7f5 ff90 	bl	3b34 <sdc_enable>
	if (err) {
    dc14:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
		return err;
	}

	MULTITHREADING_LOCK_RELEASE();
    dc16:	f7ff ffd5 	bl	dbc4 <multithreading_lock_release>

	return 0;
}
    dc1a:	4620      	mov	r0, r4
    dc1c:	b008      	add	sp, #32
    dc1e:	bd10      	pop	{r4, pc}
		return -ENODEV;
    dc20:	f06f 0412 	mvn.w	r4, #18
    dc24:	e7f9      	b.n	dc1a <hci_driver_open+0x4a>
		return -EINVAL;
    dc26:	f06f 0415 	mvn.w	r4, #21
    dc2a:	e7f6      	b.n	dc1a <hci_driver_open+0x4a>
    dc2c:	00011419 	.word	0x00011419
    dc30:	2000161c 	.word	0x2000161c
    dc34:	00012080 	.word	0x00012080
    dc38:	00012214 	.word	0x00012214
    dc3c:	200016d6 	.word	0x200016d6
    dc40:	0000dd29 	.word	0x0000dd29

0000dc44 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
    dc44:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
    dc46:	482b      	ldr	r0, [pc, #172]	; (dcf4 <hci_driver_init+0xb0>)
    dc48:	f7fe fa0e 	bl	c068 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
    dc4c:	482a      	ldr	r0, [pc, #168]	; (dcf8 <hci_driver_init+0xb4>)
    dc4e:	f7f5 ff99 	bl	3b84 <sdc_init>
			err = sdc_support_adv();
    dc52:	f7f6 f815 	bl	3c80 <sdc_support_adv>
			if (err) {
    dc56:	4604      	mov	r4, r0
    dc58:	2800      	cmp	r0, #0
    dc5a:	d147      	bne.n	dcec <hci_driver_init+0xa8>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    dc5c:	aa01      	add	r2, sp, #4
    dc5e:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
    dc60:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    dc64:	f7f5 ff02 	bl	3a6c <sdc_cfg_set>
	if (required_memory < 0) {
    dc68:	2800      	cmp	r0, #0
    dc6a:	db3b      	blt.n	dce4 <hci_driver_init+0xa0>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    dc6c:	aa01      	add	r2, sp, #4
    dc6e:	2102      	movs	r1, #2
    dc70:	4620      	mov	r0, r4
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
    dc72:	f88d 4004 	strb.w	r4, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    dc76:	f7f5 fef9 	bl	3a6c <sdc_cfg_set>
	if (required_memory < 0) {
    dc7a:	2800      	cmp	r0, #0
    dc7c:	db32      	blt.n	dce4 <hci_driver_init+0xa0>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
    dc7e:	4b1f      	ldr	r3, [pc, #124]	; (dcfc <hci_driver_init+0xb8>)
    dc80:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    dc82:	aa01      	add	r2, sp, #4
    dc84:	2103      	movs	r1, #3
    dc86:	4620      	mov	r0, r4
    dc88:	f7f5 fef0 	bl	3a6c <sdc_cfg_set>
	if (required_memory < 0) {
    dc8c:	2800      	cmp	r0, #0
    dc8e:	db29      	blt.n	dce4 <hci_driver_init+0xa0>
	cfg.event_length.event_length_us =
    dc90:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    dc94:	aa01      	add	r2, sp, #4
    dc96:	2104      	movs	r1, #4
    dc98:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
    dc9a:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    dc9c:	f7f5 fee6 	bl	3a6c <sdc_cfg_set>
	if (required_memory < 0) {
    dca0:	2800      	cmp	r0, #0
    dca2:	db1f      	blt.n	dce4 <hci_driver_init+0xa0>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
    dca4:	2301      	movs	r3, #1
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    dca6:	aa01      	add	r2, sp, #4
    dca8:	2105      	movs	r1, #5
    dcaa:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
    dcac:	f88d 3004 	strb.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    dcb0:	f7f5 fedc 	bl	3a6c <sdc_cfg_set>
	if (required_memory < 0) {
    dcb4:	2800      	cmp	r0, #0
    dcb6:	db15      	blt.n	dce4 <hci_driver_init+0xa0>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
    dcb8:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    dcba:	aa01      	add	r2, sp, #4
    dcbc:	2107      	movs	r1, #7
    dcbe:	4620      	mov	r0, r4
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
    dcc0:	f8ad 3004 	strh.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    dcc4:	f7f5 fed2 	bl	3a6c <sdc_cfg_set>
		if (required_memory < 0) {
    dcc8:	2800      	cmp	r0, #0
    dcca:	db0b      	blt.n	dce4 <hci_driver_init+0xa0>
	if (required_memory > sizeof(sdc_mempool)) {
    dccc:	f240 2332 	movw	r3, #562	; 0x232
    dcd0:	4298      	cmp	r0, r3
    dcd2:	dd09      	ble.n	dce8 <hci_driver_init+0xa4>
		k_panic();
    dcd4:	4040      	eors	r0, r0
    dcd6:	f380 8811 	msr	BASEPRI, r0
    dcda:	f04f 0004 	mov.w	r0, #4
    dcde:	df02      	svc	2
		return -ENOMEM;
    dce0:	f06f 000b 	mvn.w	r0, #11
	if (err) {
		return err;
	}

	return err;
}
    dce4:	b002      	add	sp, #8
    dce6:	bd10      	pop	{r4, pc}
	return 0;
    dce8:	4620      	mov	r0, r4
	if (err) {
    dcea:	e7fb      	b.n	dce4 <hci_driver_init+0xa0>
				return -ENOTSUP;
    dcec:	f06f 0085 	mvn.w	r0, #133	; 0x85
    dcf0:	e7f8      	b.n	dce4 <hci_driver_init+0xa0>
    dcf2:	bf00      	nop
    dcf4:	000123d4 	.word	0x000123d4
    dcf8:	000113a9 	.word	0x000113a9
    dcfc:	02031b1b 	.word	0x02031b1b

0000dd00 <rand_prio_low_vector_get>:
{
    dd00:	b538      	push	{r3, r4, r5, lr}
    dd02:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
    dd04:	4807      	ldr	r0, [pc, #28]	; (dd24 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
    dd06:	6883      	ldr	r3, [r0, #8]
    dd08:	685d      	ldr	r5, [r3, #4]
    dd0a:	460a      	mov	r2, r1
    dd0c:	b135      	cbz	r5, dd1c <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    dd0e:	2300      	movs	r3, #0
    dd10:	4621      	mov	r1, r4
    dd12:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
    dd14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
    dd18:	b2c0      	uxtb	r0, r0
    dd1a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
    dd1c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    dd20:	e7f8      	b.n	dd14 <rand_prio_low_vector_get+0x14>
    dd22:	bf00      	nop
    dd24:	00012080 	.word	0x00012080

0000dd28 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
    dd28:	4901      	ldr	r1, [pc, #4]	; (dd30 <receive_signal_raise+0x8>)
    dd2a:	4802      	ldr	r0, [pc, #8]	; (dd34 <receive_signal_raise+0xc>)
    dd2c:	f003 be32 	b.w	11994 <k_work_submit_to_queue>
    dd30:	2000161c 	.word	0x2000161c
    dd34:	200012d0 	.word	0x200012d0

0000dd38 <rand_prio_low_vector_get_blocking>:
{
    dd38:	b410      	push	{r4}
    dd3a:	4603      	mov	r3, r0
    dd3c:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
    dd3e:	4803      	ldr	r0, [pc, #12]	; (dd4c <rand_prio_low_vector_get_blocking+0x14>)
    dd40:	6881      	ldr	r1, [r0, #8]
    dd42:	680c      	ldr	r4, [r1, #0]
    dd44:	4619      	mov	r1, r3
    dd46:	4623      	mov	r3, r4
}
    dd48:	bc10      	pop	{r4}
    dd4a:	4718      	bx	r3
    dd4c:	00012080 	.word	0x00012080

0000dd50 <hci_driver_receive_process>:
{
    dd50:	b537      	push	{r0, r1, r2, r4, r5, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
    dd52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dd56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dd5a:	f7ff ff2b 	bl	dbb4 <multithreading_lock_acquire>
	if (!errcode) {
    dd5e:	2800      	cmp	r0, #0
    dd60:	d145      	bne.n	ddee <hci_driver_receive_process+0x9e>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
    dd62:	4d24      	ldr	r5, [pc, #144]	; (ddf4 <hci_driver_receive_process+0xa4>)
    dd64:	f10d 0107 	add.w	r1, sp, #7
    dd68:	4628      	mov	r0, r5
    dd6a:	f000 faa9 	bl	e2c0 <hci_internal_msg_get>
    dd6e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
    dd70:	f7ff ff28 	bl	dbc4 <multithreading_lock_release>
	if (errcode) {
    dd74:	2c00      	cmp	r4, #0
    dd76:	d13a      	bne.n	ddee <hci_driver_receive_process+0x9e>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
    dd78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd7c:	2b04      	cmp	r3, #4
    dd7e:	d126      	bne.n	ddce <hci_driver_receive_process+0x7e>
	switch (hdr->evt) {
    dd80:	7828      	ldrb	r0, [r5, #0]
    dd82:	283e      	cmp	r0, #62	; 0x3e
    dd84:	d019      	beq.n	ddba <hci_driver_receive_process+0x6a>
    dd86:	28ff      	cmp	r0, #255	; 0xff
    dd88:	d01e      	beq.n	ddc8 <hci_driver_receive_process+0x78>
		switch (subevent) {
    dd8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dd8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
    dd92:	4621      	mov	r1, r4
    dd94:	f7fd fd28 	bl	b7e8 <bt_buf_get_evt>
	if (!evt_buf) {
    dd98:	4604      	mov	r4, r0
    dd9a:	b148      	cbz	r0, ddb0 <hci_driver_receive_process+0x60>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
    dd9c:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    dd9e:	4915      	ldr	r1, [pc, #84]	; (ddf4 <hci_driver_receive_process+0xa4>)
    dda0:	3202      	adds	r2, #2
    dda2:	f104 0008 	add.w	r0, r4, #8
    dda6:	f003 f8d8 	bl	10f5a <net_buf_simple_add_mem>
	bt_recv(data_buf);
    ddaa:	4620      	mov	r0, r4
    ddac:	f7fe f936 	bl	c01c <bt_recv>
}
    ddb0:	b003      	add	sp, #12
    ddb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		receive_signal_raise();
    ddb6:	f7ff bfb7 	b.w	dd28 <receive_signal_raise>
		switch (me->subevent) {
    ddba:	78ab      	ldrb	r3, [r5, #2]
    ddbc:	2b02      	cmp	r3, #2
		switch (subevent) {
    ddbe:	d1e4      	bne.n	dd8a <hci_driver_receive_process+0x3a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
    ddc0:	2200      	movs	r2, #0
    ddc2:	2300      	movs	r3, #0
			return true;
    ddc4:	2401      	movs	r4, #1
    ddc6:	e7e4      	b.n	dd92 <hci_driver_receive_process+0x42>
		switch (subevent) {
    ddc8:	78ab      	ldrb	r3, [r5, #2]
    ddca:	2b80      	cmp	r3, #128	; 0x80
    ddcc:	e7f7      	b.n	ddbe <hci_driver_receive_process+0x6e>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
    ddce:	2b02      	cmp	r3, #2
    ddd0:	d10d      	bne.n	ddee <hci_driver_receive_process+0x9e>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    ddd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ddd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ddda:	2003      	movs	r0, #3
    dddc:	f7fd fcda 	bl	b794 <bt_buf_get_rx>
	if (!data_buf) {
    dde0:	4604      	mov	r4, r0
    dde2:	2800      	cmp	r0, #0
    dde4:	d0e4      	beq.n	ddb0 <hci_driver_receive_process+0x60>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
    dde6:	886a      	ldrh	r2, [r5, #2]
    dde8:	4629      	mov	r1, r5
    ddea:	3204      	adds	r2, #4
    ddec:	e7d9      	b.n	dda2 <hci_driver_receive_process+0x52>
}
    ddee:	b003      	add	sp, #12
    ddf0:	bd30      	pop	{r4, r5, pc}
    ddf2:	bf00      	nop
    ddf4:	20001690 	.word	0x20001690

0000ddf8 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
    ddf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
    ddfa:	4dbb      	ldr	r5, [pc, #748]	; (e0e8 <hci_internal_cmd_put+0x2f0>)
    ddfc:	782b      	ldrb	r3, [r5, #0]
{
    ddfe:	4606      	mov	r6, r0
	if (cmd_complete_or_status.occurred) {
    de00:	2b00      	cmp	r3, #0
    de02:	f040 8256 	bne.w	e2b2 <hci_internal_cmd_put+0x4ba>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
    de06:	2304      	movs	r3, #4
    de08:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
    de0c:	4bb7      	ldr	r3, [pc, #732]	; (e0ec <hci_internal_cmd_put+0x2f4>)
    de0e:	8804      	ldrh	r4, [r0, #0]
    de10:	681f      	ldr	r7, [r3, #0]
    de12:	b1b7      	cbz	r7, de42 <hci_internal_cmd_put+0x4a>
		status = user_cmd_handler(cmd_in,
    de14:	f10d 0306 	add.w	r3, sp, #6
    de18:	f10d 0207 	add.w	r2, sp, #7
    de1c:	1c69      	adds	r1, r5, #1
    de1e:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
    de20:	2801      	cmp	r0, #1
    de22:	d00e      	beq.n	de42 <hci_internal_cmd_put+0x4a>
	if (generate_command_status_event ||
    de24:	f89d 3006 	ldrb.w	r3, [sp, #6]
    de28:	2b00      	cmp	r3, #0
    de2a:	f040 822b 	bne.w	e284 <hci_internal_cmd_put+0x48c>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
    de2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
    de32:	70ab      	strb	r3, [r5, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    de34:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
    de36:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    de38:	706a      	strb	r2, [r5, #1]
	evt_data->ncmd = 1;
    de3a:	70eb      	strb	r3, [r5, #3]
	evt_data->opcode = hci_opcode;
    de3c:	80ac      	strh	r4, [r5, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
    de3e:	71a8      	strb	r0, [r5, #6]
}
    de40:	e229      	b.n	e296 <hci_internal_cmd_put+0x49e>
		switch (BT_OGF(opcode)) {
    de42:	0aa3      	lsrs	r3, r4, #10
    de44:	2b08      	cmp	r3, #8
    de46:	f000 80aa 	beq.w	df9e <hci_internal_cmd_put+0x1a6>
    de4a:	d805      	bhi.n	de58 <hci_internal_cmd_put+0x60>
    de4c:	2b03      	cmp	r3, #3
    de4e:	d00a      	beq.n	de66 <hci_internal_cmd_put+0x6e>
    de50:	2b04      	cmp	r3, #4
    de52:	d019      	beq.n	de88 <hci_internal_cmd_put+0x90>
    de54:	2001      	movs	r0, #1
    de56:	e215      	b.n	e284 <hci_internal_cmd_put+0x48c>
    de58:	2b3f      	cmp	r3, #63	; 0x3f
    de5a:	f000 815e 	beq.w	e11a <hci_internal_cmd_put+0x322>
    de5e:	2001      	movs	r0, #1
	if (generate_command_status_event ||
    de60:	2801      	cmp	r0, #1
    de62:	d0f7      	beq.n	de54 <hci_internal_cmd_put+0x5c>
    de64:	e7e3      	b.n	de2e <hci_internal_cmd_put+0x36>
	return ((uint16_t)src[1] << 8) | src[0];
    de66:	f9b6 3000 	ldrsh.w	r3, [r6]
	switch (opcode)	{
    de6a:	f640 4201 	movw	r2, #3073	; 0xc01
    de6e:	4293      	cmp	r3, r2
    de70:	d006      	beq.n	de80 <hci_internal_cmd_put+0x88>
    de72:	f640 4203 	movw	r2, #3075	; 0xc03
    de76:	4293      	cmp	r3, r2
    de78:	d1ec      	bne.n	de54 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_reset();
    de7a:	f7f6 f851 	bl	3f20 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
    de7e:	e7ef      	b.n	de60 <hci_internal_cmd_put+0x68>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
    de80:	1cf0      	adds	r0, r6, #3
    de82:	f7fa fae9 	bl	8458 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
    de86:	e7eb      	b.n	de60 <hci_internal_cmd_put+0x68>
	switch (opcode)	{
    de88:	8833      	ldrh	r3, [r6, #0]
    de8a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    de8e:	3b01      	subs	r3, #1
    de90:	2b08      	cmp	r3, #8
    de92:	d8df      	bhi.n	de54 <hci_internal_cmd_put+0x5c>
    de94:	a201      	add	r2, pc, #4	; (adr r2, de9c <hci_internal_cmd_put+0xa4>)
    de96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    de9a:	bf00      	nop
    de9c:	0000dec1 	.word	0x0000dec1
    dea0:	0000ded3 	.word	0x0000ded3
    dea4:	0000df6b 	.word	0x0000df6b
    dea8:	0000de55 	.word	0x0000de55
    deac:	0000de55 	.word	0x0000de55
    deb0:	0000de55 	.word	0x0000de55
    deb4:	0000de55 	.word	0x0000de55
    deb8:	0000de55 	.word	0x0000de55
    debc:	0000df8d 	.word	0x0000df8d
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
    dec0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
    dec4:	488a      	ldr	r0, [pc, #552]	; (e0f0 <hci_internal_cmd_put+0x2f8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
    dec6:	3308      	adds	r3, #8
    dec8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
    decc:	f7fa fb92 	bl	85f4 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
    ded0:	e7c6      	b.n	de60 <hci_internal_cmd_put+0x68>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
    ded2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    ded6:	4886      	ldr	r0, [pc, #536]	; (e0f0 <hci_internal_cmd_put+0x2f8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
    ded8:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
    deda:	222f      	movs	r2, #47	; 0x2f
    dedc:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
    dede:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    dee2:	f002 fdec 	bl	10abe <memset>
	cmds->hci_set_event_mask = 1;
    dee6:	7b2b      	ldrb	r3, [r5, #12]
    dee8:	f063 033f 	orn	r3, r3, #63	; 0x3f
    deec:	732b      	strb	r3, [r5, #12]
	cmds->hci_read_local_version_information = 1;
    deee:	7d6b      	ldrb	r3, [r5, #21]
    def0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
    def4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    def8:	756b      	strb	r3, [r5, #21]
	cmds->hci_read_bd_addr = 1;
    defa:	7dab      	ldrb	r3, [r5, #22]
    defc:	f043 0302 	orr.w	r3, r3, #2
    df00:	75ab      	strb	r3, [r5, #22]
	cmds->hci_le_set_event_mask = 1;
    df02:	f895 3020 	ldrb.w	r3, [r5, #32]
    df06:	f063 0308 	orn	r3, r3, #8
    df0a:	f885 3020 	strb.w	r3, [r5, #32]
	cmds->hci_le_set_scan_response_data = 1;
    df0e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    df12:	f063 033c 	orn	r3, r3, #60	; 0x3c
    df16:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
    df1a:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
    df1e:	f063 033c 	orn	r3, r3, #60	; 0x3c
    df22:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	cmds->hci_le_read_supported_states = 1;
    df26:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    df2a:	f023 0378 	bic.w	r3, r3, #120	; 0x78
    df2e:	f043 0378 	orr.w	r3, r3, #120	; 0x78
    df32:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
    df36:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
    df3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    df3e:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
    df42:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    df46:	f043 0301 	orr.w	r3, r3, #1
    df4a:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
    df4e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
    df52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    df56:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	cmds->hci_le_set_data_related_address_changes = 1;
    df5a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    df5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    df62:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
		return 0;
    df66:	2000      	movs	r0, #0
    df68:	e761      	b.n	de2e <hci_internal_cmd_put+0x36>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
    df6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
    df6e:	4860      	ldr	r0, [pc, #384]	; (e0f0 <hci_internal_cmd_put+0x2f8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
    df70:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
    df72:	2208      	movs	r2, #8
    df74:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
    df76:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
    df7a:	f002 fda0 	bl	10abe <memset>
	features->bdedr_not_supported = 1;
    df7e:	7aeb      	ldrb	r3, [r5, #11]
    df80:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    df84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    df88:	72eb      	strb	r3, [r5, #11]
	if (generate_command_status_event ||
    df8a:	e7ec      	b.n	df66 <hci_internal_cmd_put+0x16e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
    df8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
    df90:	4857      	ldr	r0, [pc, #348]	; (e0f0 <hci_internal_cmd_put+0x2f8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
    df92:	3306      	adds	r3, #6
    df94:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
    df98:	f7fa fb2a 	bl	85f0 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
    df9c:	e760      	b.n	de60 <hci_internal_cmd_put+0x68>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
    df9e:	4630      	mov	r0, r6
	switch (opcode)	{
    dfa0:	f242 011c 	movw	r1, #8220	; 0x201c
    dfa4:	f830 3b03 	ldrh.w	r3, [r0], #3
    dfa8:	b21a      	sxth	r2, r3
    dfaa:	428a      	cmp	r2, r1
    dfac:	dc19      	bgt.n	dfe2 <hci_internal_cmd_put+0x1ea>
    dfae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    dfb2:	f242 0626 	movw	r6, #8230	; 0x2026
    dfb6:	dd1f      	ble.n	dff8 <hci_internal_cmd_put+0x200>
    dfb8:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    dfbc:	3b01      	subs	r3, #1
    dfbe:	2b1b      	cmp	r3, #27
    dfc0:	d81a      	bhi.n	dff8 <hci_internal_cmd_put+0x200>
    dfc2:	e8df f003 	tbb	[pc, r3]
    dfc6:	2b20      	.short	0x2b20
    dfc8:	55521937 	.word	0x55521937
    dfcc:	67646158 	.word	0x67646158
    dfd0:	19191919 	.word	0x19191919
    dfd4:	7c79766d 	.word	0x7c79766d
    dfd8:	19191919 	.word	0x19191919
    dfdc:	1919887f 	.word	0x1919887f
    dfe0:	9719      	.short	0x9719
    dfe2:	f242 034b 	movw	r3, #8267	; 0x204b
    dfe6:	429a      	cmp	r2, r3
    dfe8:	f000 808e 	beq.w	e108 <hci_internal_cmd_put+0x310>
    dfec:	f242 037c 	movw	r3, #8316	; 0x207c
    dff0:	429a      	cmp	r2, r3
    dff2:	f242 0626 	movw	r6, #8230	; 0x2026
    dff6:	d050      	beq.n	e09a <hci_internal_cmd_put+0x2a2>
	switch (hci_opcode) {
    dff8:	42b4      	cmp	r4, r6
    dffa:	f200 8151 	bhi.w	e2a0 <hci_internal_cmd_put+0x4a8>
    dffe:	f242 030c 	movw	r3, #8204	; 0x200c
    e002:	2001      	movs	r0, #1
    e004:	e12a      	b.n	e25c <hci_internal_cmd_put+0x464>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
    e006:	f7fa fb15 	bl	8634 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
    e00a:	42b4      	cmp	r4, r6
    e00c:	f240 812d 	bls.w	e26a <hci_internal_cmd_put+0x472>
    e010:	f242 0377 	movw	r3, #8311	; 0x2077
    e014:	429c      	cmp	r4, r3
    e016:	f040 80b5 	bne.w	e184 <hci_internal_cmd_put+0x38c>
    e01a:	e133      	b.n	e284 <hci_internal_cmd_put+0x48c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
    e01c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
    e020:	4833      	ldr	r0, [pc, #204]	; (e0f0 <hci_internal_cmd_put+0x2f8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
    e022:	3303      	adds	r3, #3
    e024:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
    e028:	f7fa faf4 	bl	8614 <sdc_hci_cmd_le_read_buffer_size>
	switch (hci_opcode) {
    e02c:	f242 0326 	movw	r3, #8230	; 0x2026
    e030:	429c      	cmp	r4, r3
    e032:	e7eb      	b.n	e00c <hci_internal_cmd_put+0x214>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
    e034:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
    e038:	482d      	ldr	r0, [pc, #180]	; (e0f0 <hci_internal_cmd_put+0x2f8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
    e03a:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
    e03c:	2205      	movs	r2, #5
    e03e:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
    e040:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
    e044:	f002 fd3b 	bl	10abe <memset>
	features->le_encryption = 1;
    e048:	79eb      	ldrb	r3, [r5, #7]
    e04a:	f023 031d 	bic.w	r3, r3, #29
    e04e:	f043 031d 	orr.w	r3, r3, #29
    e052:	71eb      	strb	r3, [r5, #7]
	features->channel_selection_algorithm_2 = 1;
    e054:	7a2b      	ldrb	r3, [r5, #8]
    e056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e05a:	722b      	strb	r3, [r5, #8]
	switch (hci_opcode) {
    e05c:	f242 0326 	movw	r3, #8230	; 0x2026
    e060:	429c      	cmp	r4, r3
    e062:	f240 80f8 	bls.w	e256 <hci_internal_cmd_put+0x45e>
		return 0;
    e066:	2000      	movs	r0, #0
    e068:	e7d2      	b.n	e010 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
    e06a:	f7fa fae8 	bl	863e <sdc_hci_cmd_le_set_random_address>
	switch (hci_opcode) {
    e06e:	e7cc      	b.n	e00a <hci_internal_cmd_put+0x212>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
    e070:	f7fa fadc 	bl	862c <sdc_hci_cmd_le_set_adv_params>
    e074:	e7c9      	b.n	e00a <hci_internal_cmd_put+0x212>
		*param_length_out +=
    e076:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
    e07a:	481d      	ldr	r0, [pc, #116]	; (e0f0 <hci_internal_cmd_put+0x2f8>)
		*param_length_out +=
    e07c:	3301      	adds	r3, #1
    e07e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
    e082:	f7fa fac5 	bl	8610 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
	switch (hci_opcode) {
    e086:	e7d1      	b.n	e02c <hci_internal_cmd_put+0x234>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
    e088:	f7fa facc 	bl	8624 <sdc_hci_cmd_le_set_adv_data>
	switch (hci_opcode) {
    e08c:	e7bd      	b.n	e00a <hci_internal_cmd_put+0x212>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
    e08e:	f7fa fad8 	bl	8642 <sdc_hci_cmd_le_set_scan_response_data>
	switch (hci_opcode) {
    e092:	e7ba      	b.n	e00a <hci_internal_cmd_put+0x212>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
    e094:	f7fa fac8 	bl	8628 <sdc_hci_cmd_le_set_adv_enable>
	switch (hci_opcode) {
    e098:	e7b7      	b.n	e00a <hci_internal_cmd_put+0x212>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
    e09a:	f7fa fac9 	bl	8630 <sdc_hci_cmd_le_set_data_related_address_changes>
	switch (hci_opcode) {
    e09e:	e7b4      	b.n	e00a <hci_internal_cmd_put+0x212>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
    e0a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
    e0a4:	4812      	ldr	r0, [pc, #72]	; (e0f0 <hci_internal_cmd_put+0x2f8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
    e0a6:	3301      	adds	r3, #1
    e0a8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
    e0ac:	f7fa fab4 	bl	8618 <sdc_hci_cmd_le_read_filter_accept_list_size>
	switch (hci_opcode) {
    e0b0:	e7bc      	b.n	e02c <hci_internal_cmd_put+0x234>
		return sdc_hci_cmd_le_clear_filter_accept_list();
    e0b2:	f7fa faa3 	bl	85fc <sdc_hci_cmd_le_clear_filter_accept_list>
	switch (hci_opcode) {
    e0b6:	e7a8      	b.n	e00a <hci_internal_cmd_put+0x212>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
    e0b8:	f7fa fa9e 	bl	85f8 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
	switch (hci_opcode) {
    e0bc:	e7a5      	b.n	e00a <hci_internal_cmd_put+0x212>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
    e0be:	f7fa faaf 	bl	8620 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
	switch (hci_opcode) {
    e0c2:	e7a2      	b.n	e00a <hci_internal_cmd_put+0x212>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
    e0c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
    e0c8:	4909      	ldr	r1, [pc, #36]	; (e0f0 <hci_internal_cmd_put+0x2f8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
    e0ca:	3310      	adds	r3, #16
    e0cc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
    e0d0:	f7fa fa96 	bl	8600 <sdc_hci_cmd_le_encrypt>
	switch (hci_opcode) {
    e0d4:	e7aa      	b.n	e02c <hci_internal_cmd_put+0x234>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
    e0d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
    e0da:	4805      	ldr	r0, [pc, #20]	; (e0f0 <hci_internal_cmd_put+0x2f8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
    e0dc:	3308      	adds	r3, #8
    e0de:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
    e0e2:	f7fa fa93 	bl	860c <sdc_hci_cmd_le_rand>
    e0e6:	e7a1      	b.n	e02c <hci_internal_cmd_put+0x234>
    e0e8:	20001908 	.word	0x20001908
    e0ec:	2000162c 	.word	0x2000162c
    e0f0:	2000190f 	.word	0x2000190f
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
    e0f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0f8:	3308      	adds	r3, #8
    e0fa:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
    e0fe:	2303      	movs	r3, #3
    e100:	71eb      	strb	r3, [r5, #7]
	*(buf + 4) = states2;
    e102:	2300      	movs	r3, #0
    e104:	72eb      	strb	r3, [r5, #11]
    e106:	e7a9      	b.n	e05c <hci_internal_cmd_put+0x264>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
    e108:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
    e10c:	486a      	ldr	r0, [pc, #424]	; (e2b8 <hci_internal_cmd_put+0x4c0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
    e10e:	3302      	adds	r3, #2
    e110:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
    e114:	f7fa fa82 	bl	861c <sdc_hci_cmd_le_read_transmit_power>
	switch (hci_opcode) {
    e118:	e788      	b.n	e02c <hci_internal_cmd_put+0x234>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
    e11a:	4630      	mov	r0, r6
	switch (opcode)	{
    e11c:	f64f 420b 	movw	r2, #64523	; 0xfc0b
    e120:	f830 3b03 	ldrh.w	r3, [r0], #3
    e124:	4293      	cmp	r3, r2
    e126:	d812      	bhi.n	e14e <hci_internal_cmd_put+0x356>
    e128:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
    e12c:	d801      	bhi.n	e132 <hci_internal_cmd_put+0x33a>
    e12e:	2001      	movs	r0, #1
	switch (hci_opcode) {
    e130:	e028      	b.n	e184 <hci_internal_cmd_put+0x38c>
	switch (opcode)	{
    e132:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
    e136:	3b01      	subs	r3, #1
    e138:	2b0a      	cmp	r3, #10
    e13a:	f200 80b3 	bhi.w	e2a4 <hci_internal_cmd_put+0x4ac>
    e13e:	e8df f003 	tbb	[pc, r3]
    e142:	3119      	.short	0x3119
    e144:	5bb1b1b1 	.word	0x5bb1b1b1
    e148:	5249b1b1 	.word	0x5249b1b1
    e14c:	5e          	.byte	0x5e
    e14d:	00          	.byte	0x00
    e14e:	f503 7240 	add.w	r2, r3, #768	; 0x300
    e152:	b292      	uxth	r2, r2
    e154:	2a0c      	cmp	r2, #12
    e156:	d8ea      	bhi.n	e12e <hci_internal_cmd_put+0x336>
    e158:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
    e15c:	2b0c      	cmp	r3, #12
    e15e:	f200 809f 	bhi.w	e2a0 <hci_internal_cmd_put+0x4a8>
    e162:	e8df f003 	tbb	[pc, r3]
    e166:	6655      	.short	0x6655
    e168:	726f6c69 	.word	0x726f6c69
    e16c:	9d9d9d9d 	.word	0x9d9d9d9d
    e170:	9d9d      	.short	0x9d9d
    e172:	75          	.byte	0x75
    e173:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
    e174:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
    e178:	484f      	ldr	r0, [pc, #316]	; (e2b8 <hci_internal_cmd_put+0x4c0>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
    e17a:	330c      	adds	r3, #12
    e17c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
    e180:	f7f5 fee2 	bl	3f48 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
    e184:	f242 0377 	movw	r3, #8311	; 0x2077
    e188:	429c      	cmp	r4, r3
    e18a:	f200 808c 	bhi.w	e2a6 <hci_internal_cmd_put+0x4ae>
    e18e:	f242 0332 	movw	r3, #8242	; 0x2032
    e192:	429c      	cmp	r4, r3
    e194:	d076      	beq.n	e284 <hci_internal_cmd_put+0x48c>
    e196:	f5a4 5301 	sub.w	r3, r4, #8256	; 0x2040
    e19a:	3b03      	subs	r3, #3
    e19c:	2b01      	cmp	r3, #1
    e19e:	f63f ae5f 	bhi.w	de60 <hci_internal_cmd_put+0x68>
    e1a2:	e06f      	b.n	e284 <hci_internal_cmd_put+0x48c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
    e1a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    e1a8:	4843      	ldr	r0, [pc, #268]	; (e2b8 <hci_internal_cmd_put+0x4c0>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
    e1aa:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
    e1ac:	2202      	movs	r2, #2
    e1ae:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
    e1b0:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    e1b4:	f002 fc83 	bl	10abe <memset>
	cmds->read_version_info = 1;
    e1b8:	79eb      	ldrb	r3, [r5, #7]
    e1ba:	f023 0323 	bic.w	r3, r3, #35	; 0x23
    e1be:	f043 0323 	orr.w	r3, r3, #35	; 0x23
    e1c2:	71eb      	strb	r3, [r5, #7]
	cmds->read_static_addresses = 1;
    e1c4:	7a2b      	ldrb	r3, [r5, #8]
    e1c6:	f023 0307 	bic.w	r3, r3, #7
    e1ca:	f043 0307 	orr.w	r3, r3, #7
    e1ce:	722b      	strb	r3, [r5, #8]
		return 0;
    e1d0:	2000      	movs	r0, #0
    e1d2:	e7d7      	b.n	e184 <hci_internal_cmd_put+0x38c>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
    e1d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
    e1d8:	4837      	ldr	r0, [pc, #220]	; (e2b8 <hci_internal_cmd_put+0x4c0>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
    e1da:	3317      	adds	r3, #23
    e1dc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
    e1e0:	f7fa f9b5 	bl	854e <sdc_hci_cmd_vs_zephyr_read_static_addresses>
    e1e4:	e7ce      	b.n	e184 <hci_internal_cmd_put+0x38c>
		*param_length_out +=
    e1e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
    e1ea:	4833      	ldr	r0, [pc, #204]	; (e2b8 <hci_internal_cmd_put+0x4c0>)
		*param_length_out +=
    e1ec:	3320      	adds	r3, #32
    e1ee:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
    e1f2:	f7fa f95f 	bl	84b4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
    e1f6:	e7c5      	b.n	e184 <hci_internal_cmd_put+0x38c>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
    e1f8:	f7fa f9f8 	bl	85ec <sdc_hci_cmd_vs_zephyr_write_bd_addr>
    e1fc:	e7c2      	b.n	e184 <hci_internal_cmd_put+0x38c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
    e1fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
    e202:	482d      	ldr	r0, [pc, #180]	; (e2b8 <hci_internal_cmd_put+0x4c0>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
    e204:	3301      	adds	r3, #1
    e206:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
    e20a:	f7fa f93f 	bl	848c <sdc_hci_cmd_vs_zephyr_read_chip_temp>
    e20e:	e7b9      	b.n	e184 <hci_internal_cmd_put+0x38c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
    e210:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    e214:	4828      	ldr	r0, [pc, #160]	; (e2b8 <hci_internal_cmd_put+0x4c0>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
    e216:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
    e218:	2202      	movs	r2, #2
    e21a:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
    e21c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    e220:	f002 fc4d 	bl	10abe <memset>
	cmds->read_supported_vs_commands = 1;
    e224:	79eb      	ldrb	r3, [r5, #7]
    e226:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    e22a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
    e22e:	71eb      	strb	r3, [r5, #7]
}
    e230:	e7ce      	b.n	e1d0 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
    e232:	f7fa f922 	bl	847a <sdc_hci_cmd_vs_llpm_mode_set>
    e236:	e7a5      	b.n	e184 <hci_internal_cmd_put+0x38c>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
    e238:	f7fa f91b 	bl	8472 <sdc_hci_cmd_vs_conn_update>
    e23c:	e7a2      	b.n	e184 <hci_internal_cmd_put+0x38c>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
    e23e:	f7fa f910 	bl	8462 <sdc_hci_cmd_vs_conn_event_extend>
    e242:	e79f      	b.n	e184 <hci_internal_cmd_put+0x38c>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
    e244:	f7fa f91b 	bl	847e <sdc_hci_cmd_vs_qos_conn_event_report_enable>
    e248:	e79c      	b.n	e184 <hci_internal_cmd_put+0x38c>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
    e24a:	f7fa f914 	bl	8476 <sdc_hci_cmd_vs_event_length_set>
    e24e:	e799      	b.n	e184 <hci_internal_cmd_put+0x38c>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
    e250:	f7fa f91a 	bl	8488 <sdc_hci_cmd_vs_set_adv_randomness>
    e254:	e796      	b.n	e184 <hci_internal_cmd_put+0x38c>
	switch (hci_opcode) {
    e256:	f242 030c 	movw	r3, #8204	; 0x200c
		return 0;
    e25a:	2000      	movs	r0, #0
	switch (hci_opcode) {
    e25c:	429c      	cmp	r4, r3
    e25e:	d807      	bhi.n	e270 <hci_internal_cmd_put+0x478>
    e260:	f240 431d 	movw	r3, #1053	; 0x41d
    e264:	429c      	cmp	r4, r3
    e266:	d00d      	beq.n	e284 <hci_internal_cmd_put+0x48c>
    e268:	e5fa      	b.n	de60 <hci_internal_cmd_put+0x68>
    e26a:	f242 030c 	movw	r3, #8204	; 0x200c
    e26e:	e7f5      	b.n	e25c <hci_internal_cmd_put+0x464>
    e270:	f5a4 5300 	sub.w	r3, r4, #8192	; 0x2000
    e274:	4a11      	ldr	r2, [pc, #68]	; (e2bc <hci_internal_cmd_put+0x4c4>)
    e276:	3b0d      	subs	r3, #13
    e278:	b29b      	uxth	r3, r3
    e27a:	fa22 f303 	lsr.w	r3, r2, r3
    e27e:	07db      	lsls	r3, r3, #31
    e280:	f57f adee 	bpl.w	de60 <hci_internal_cmd_put+0x68>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    e284:	230f      	movs	r3, #15
    e286:	706b      	strb	r3, [r5, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    e288:	2304      	movs	r3, #4
    e28a:	70ab      	strb	r3, [r5, #2]
	evt_data->ncmd = 1;
    e28c:	2301      	movs	r3, #1
	evt_data->status = status_code;
    e28e:	70e8      	strb	r0, [r5, #3]
	evt_data->ncmd = 1;
    e290:	712b      	strb	r3, [r5, #4]
	evt_data->opcode = hci_opcode;
    e292:	f8a5 4005 	strh.w	r4, [r5, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
    e296:	2301      	movs	r3, #1
    e298:	702b      	strb	r3, [r5, #0]
	}

	return 0;
    e29a:	2000      	movs	r0, #0
}
    e29c:	b003      	add	sp, #12
    e29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (hci_opcode) {
    e2a0:	2001      	movs	r0, #1
    e2a2:	e6b5      	b.n	e010 <hci_internal_cmd_put+0x218>
	switch (opcode)	{
    e2a4:	2001      	movs	r0, #1
	switch (hci_opcode) {
    e2a6:	f024 0308 	bic.w	r3, r4, #8
    e2aa:	f64f 5202 	movw	r2, #64770	; 0xfd02
    e2ae:	4293      	cmp	r3, r2
    e2b0:	e7d9      	b.n	e266 <hci_internal_cmd_put+0x46e>
		return -NRF_EPERM;
    e2b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e2b6:	e7f1      	b.n	e29c <hci_internal_cmd_put+0x4a4>
    e2b8:	2000190f 	.word	0x2000190f
    e2bc:	03001241 	.word	0x03001241

0000e2c0 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
    e2c0:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
    e2c2:	4c09      	ldr	r4, [pc, #36]	; (e2e8 <hci_internal_msg_get+0x28>)
    e2c4:	7823      	ldrb	r3, [r4, #0]
{
    e2c6:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
    e2c8:	b91b      	cbnz	r3, e2d2 <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
    e2ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
    e2ce:	f7fa b8b3 	b.w	8438 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
    e2d2:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
    e2d4:	1c61      	adds	r1, r4, #1
    e2d6:	3202      	adds	r2, #2
    e2d8:	f002 fbe6 	bl	10aa8 <memcpy>
		cmd_complete_or_status.occurred = false;
    e2dc:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
    e2de:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
    e2e0:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
    e2e2:	702b      	strb	r3, [r5, #0]
}
    e2e4:	bd38      	pop	{r3, r4, r5, pc}
    e2e6:	bf00      	nop
    e2e8:	20001908 	.word	0x20001908

0000e2ec <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
    e2ec:	b570      	push	{r4, r5, r6, lr}
    e2ee:	4605      	mov	r5, r0
    e2f0:	460e      	mov	r6, r1
    e2f2:	4c08      	ldr	r4, [pc, #32]	; (e314 <bt_rand+0x28>)
    e2f4:	4620      	mov	r0, r4
    e2f6:	f003 f937 	bl	11568 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
    e2fa:	b138      	cbz	r0, e30c <bt_rand+0x20>
    e2fc:	68a3      	ldr	r3, [r4, #8]
    e2fe:	b2b2      	uxth	r2, r6
    e300:	4629      	mov	r1, r5
    e302:	4620      	mov	r0, r4
    e304:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
    e306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e30a:	4718      	bx	r3
    e30c:	f06f 0012 	mvn.w	r0, #18
    e310:	bd70      	pop	{r4, r5, r6, pc}
    e312:	bf00      	nop
    e314:	00012080 	.word	0x00012080

0000e318 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
    e318:	4901      	ldr	r1, [pc, #4]	; (e320 <mpsl_low_prio_irq_handler+0x8>)
    e31a:	4802      	ldr	r0, [pc, #8]	; (e324 <mpsl_low_prio_irq_handler+0xc>)
    e31c:	f003 bb3a 	b.w	11994 <k_work_submit_to_queue>
    e320:	20001630 	.word	0x20001630
    e324:	200012d0 	.word	0x200012d0

0000e328 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
    e328:	b513      	push	{r0, r1, r4, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
    e32a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    e32e:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
    e332:	2300      	movs	r3, #0
    e334:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
    e338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    e33c:	f8ad 3000 	strh.w	r3, [sp]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    e340:	4a0d      	ldr	r2, [pc, #52]	; (e378 <mpsl_lib_init_sys+0x50>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
    e342:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    e344:	2119      	movs	r1, #25
    e346:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
    e348:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    e34c:	f7f5 f9aa 	bl	36a4 <mpsl_init>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
    e350:	4604      	mov	r4, r0
    e352:	b970      	cbnz	r0, e372 <mpsl_lib_init_sys+0x4a>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    e354:	4601      	mov	r1, r0
    e356:	2201      	movs	r2, #1
    e358:	2008      	movs	r0, #8
    e35a:	f7fc ff9f 	bl	b29c <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    e35e:	2201      	movs	r2, #1
    e360:	4621      	mov	r1, r4
    e362:	200b      	movs	r0, #11
    e364:	f7fc ff9a 	bl	b29c <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    e368:	2201      	movs	r2, #1
    e36a:	4621      	mov	r1, r4
    e36c:	4610      	mov	r0, r2
    e36e:	f7fc ff95 	bl	b29c <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
    e372:	4620      	mov	r0, r4
    e374:	b002      	add	sp, #8
    e376:	bd10      	pop	{r4, pc}
    e378:	0001141d 	.word	0x0001141d

0000e37c <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
    e37c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
    e37e:	4d0d      	ldr	r5, [pc, #52]	; (e3b4 <mpsl_low_prio_init+0x38>)
    e380:	490d      	ldr	r1, [pc, #52]	; (e3b8 <mpsl_low_prio_init+0x3c>)
    e382:	2400      	movs	r4, #0
    e384:	9400      	str	r4, [sp, #0]
    e386:	f06f 0309 	mvn.w	r3, #9
    e38a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e38e:	4628      	mov	r0, r5
    e390:	f001 f964 	bl	f65c <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    e394:	4909      	ldr	r1, [pc, #36]	; (e3bc <mpsl_low_prio_init+0x40>)
    e396:	4628      	mov	r0, r5
    e398:	f003 f988 	bl	116ac <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
    e39c:	4908      	ldr	r1, [pc, #32]	; (e3c0 <mpsl_low_prio_init+0x44>)
    e39e:	4809      	ldr	r0, [pc, #36]	; (e3c4 <mpsl_low_prio_init+0x48>)
    e3a0:	f003 fadb 	bl	1195a <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
    e3a4:	4622      	mov	r2, r4
    e3a6:	2104      	movs	r1, #4
    e3a8:	2019      	movs	r0, #25
    e3aa:	f7fc ff77 	bl	b29c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
    e3ae:	4620      	mov	r0, r4
    e3b0:	b003      	add	sp, #12
    e3b2:	bd30      	pop	{r4, r5, pc}
    e3b4:	200012d0 	.word	0x200012d0
    e3b8:	20002350 	.word	0x20002350
    e3bc:	000125c9 	.word	0x000125c9
    e3c0:	00011449 	.word	0x00011449
    e3c4:	20001630 	.word	0x20001630

0000e3c8 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    e3c8:	4b01      	ldr	r3, [pc, #4]	; (e3d0 <mpsl_hfclk_callback+0x8>)
    e3ca:	2000      	movs	r0, #0
    e3cc:	681b      	ldr	r3, [r3, #0]
    e3ce:	4718      	bx	r3
    e3d0:	20001640 	.word	0x20001640

0000e3d4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
    e3d4:	b120      	cbz	r0, e3e0 <nrfx_clock_start+0xc>
    e3d6:	2801      	cmp	r0, #1
    e3d8:	d106      	bne.n	e3e8 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
    e3da:	4804      	ldr	r0, [pc, #16]	; (e3ec <nrfx_clock_start+0x18>)
    e3dc:	f7f4 bff6 	b.w	33cc <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    e3e0:	4b03      	ldr	r3, [pc, #12]	; (e3f0 <nrfx_clock_start+0x1c>)
    e3e2:	2001      	movs	r0, #1
    e3e4:	681b      	ldr	r3, [r3, #0]
    e3e6:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
    e3e8:	4770      	bx	lr
    e3ea:	bf00      	nop
    e3ec:	0000e3c9 	.word	0x0000e3c9
    e3f0:	20001640 	.word	0x20001640

0000e3f4 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
    e3f4:	4b01      	ldr	r3, [pc, #4]	; (e3fc <nrfx_clock_init+0x8>)
    e3f6:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
    e3f8:	4801      	ldr	r0, [pc, #4]	; (e400 <nrfx_clock_init+0xc>)
    e3fa:	4770      	bx	lr
    e3fc:	20001640 	.word	0x20001640
    e400:	0bad0000 	.word	0x0bad0000

0000e404 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    e404:	4a02      	ldr	r2, [pc, #8]	; (e410 <nvmc_wait+0xc>)
    e406:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    e40a:	2b00      	cmp	r3, #0
    e40c:	d0fb      	beq.n	e406 <nvmc_wait+0x2>
}
    e40e:	4770      	bx	lr
    e410:	4001e000 	.word	0x4001e000

0000e414 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    e414:	b510      	push	{r4, lr}
                var2 = *(uint32_t *)0x10000134ul;
            }
        #elif defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    e416:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            if (var1 == 0x0E)
    e41a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    e41e:	2a0e      	cmp	r2, #14
    e420:	d15d      	bne.n	e4de <SystemInit+0xca>

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    e422:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
    e426:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    e42a:	f3c2 3242 	ubfx	r2, r2, #13, #3
    e42e:	f8c1 253c 	str.w	r2, [r1, #1340]	; 0x53c

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    e432:	2200      	movs	r2, #0
    e434:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    e438:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    e43c:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    e440:	4a57      	ldr	r2, [pc, #348]	; (e5a0 <SystemInit+0x18c>)
    e442:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
    e446:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    e44a:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
    e44e:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    e452:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    e456:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    e45a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
    e45e:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    e462:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
    e466:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    e46a:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
    e46e:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    e472:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
    e476:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    e47a:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
    e47e:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    e482:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
    e486:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    e48a:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
    e48e:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    e492:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
    e496:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    e49a:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    e49e:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    e4a2:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
    e4a6:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    e4aa:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
    e4ae:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    e4b2:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
    e4b6:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    e4ba:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
    e4be:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    e4c2:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    e4c6:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    e4ca:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    e4ce:	07db      	lsls	r3, r3, #31
    e4d0:	d45d      	bmi.n	e58e <SystemInit+0x17a>

    #if NRF52_ERRATA_217_ENABLE_WORKAROUND
        /* Workaround for Errata 217 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_217()){
            *(volatile uint32_t *)0x40000EE4ul |= 0x0000000Ful;
    e4d2:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    e4d6:	f043 030f 	orr.w	r3, r3, #15
    e4da:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    e4de:	f002 ffe9 	bl	114b4 <nrf52_configuration_249>
    e4e2:	b338      	cbz	r0, e534 <SystemInit+0x120>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    e4e4:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    e4e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e4ec:	f8d1 2208 	ldr.w	r2, [r1, #520]	; 0x208
    e4f0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #endif

    nrf52_handle_approtect();

    #if NRF52_CONFIGURATION_249_ENABLE && (defined(NRF52805_XXAA) || defined(NRF52810_XXAA) || defined(NRF52811_XXAA))
        if (nrf52_configuration_249() && (NRF_UICR->NRFMDK[0] == 0xFFFFFFFF || NRF_UICR->NRFMDK[1] == 0xFFFFFFFF))
    e4f4:	f002 ffde 	bl	114b4 <nrf52_configuration_249>
    e4f8:	b1e0      	cbz	r0, e534 <SystemInit+0x120>
    e4fa:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    e4fe:	3301      	adds	r3, #1
    e500:	d003      	beq.n	e50a <SystemInit+0xf6>
    e502:	f8d1 3104 	ldr.w	r3, [r1, #260]	; 0x104
    e506:	3301      	adds	r3, #1
    e508:	d114      	bne.n	e534 <SystemInit+0x120>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    e50a:	4826      	ldr	r0, [pc, #152]	; (e5a4 <SystemInit+0x190>)
    e50c:	2301      	movs	r3, #1
        {
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NRFMDK[0] = 0;
    e50e:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    e512:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
            NRF_UICR->NRFMDK[0] = 0;
    e516:	2100      	movs	r1, #0
    nvmc_wait();
    e518:	f7ff ff74 	bl	e404 <nvmc_wait>
            NRF_UICR->NRFMDK[0] = 0;
    e51c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
            nvmc_wait();
    e520:	f7ff ff70 	bl	e404 <nvmc_wait>
            NRF_UICR->NRFMDK[1] = 0;
    e524:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
            nvmc_wait();
    e528:	f7ff ff6c 	bl	e404 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    e52c:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    nvmc_wait();
    e530:	f7ff ff68 	bl	e404 <nvmc_wait>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    e534:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    e538:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    e53c:	2a00      	cmp	r2, #0
    e53e:	db03      	blt.n	e548 <SystemInit+0x134>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    e540:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    e544:	2b00      	cmp	r3, #0
    e546:	da27      	bge.n	e598 <SystemInit+0x184>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    e548:	4916      	ldr	r1, [pc, #88]	; (e5a4 <SystemInit+0x190>)
    e54a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    e54c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    e550:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    e554:	2415      	movs	r4, #21
    nvmc_wait();
    e556:	f7ff ff55 	bl	e404 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    e55a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    e55e:	f7ff ff51 	bl	e404 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    e562:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    e566:	f7ff ff4d 	bl	e404 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    e56a:	2300      	movs	r3, #0
    e56c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    e570:	f7ff ff48 	bl	e404 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    e574:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e578:	490b      	ldr	r1, [pc, #44]	; (e5a8 <SystemInit+0x194>)
    e57a:	4b0c      	ldr	r3, [pc, #48]	; (e5ac <SystemInit+0x198>)
    e57c:	68ca      	ldr	r2, [r1, #12]
    e57e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e582:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e584:	60cb      	str	r3, [r1, #12]
    e586:	f3bf 8f4f 	dsb	sy
    __NOP();
    e58a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    e58c:	e7fd      	b.n	e58a <SystemInit+0x176>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    e58e:	f06f 0301 	mvn.w	r3, #1
    e592:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
    e596:	e79c      	b.n	e4d2 <SystemInit+0xbe>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    e598:	4b05      	ldr	r3, [pc, #20]	; (e5b0 <SystemInit+0x19c>)
    e59a:	4a06      	ldr	r2, [pc, #24]	; (e5b4 <SystemInit+0x1a0>)
    e59c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    e59e:	bd10      	pop	{r4, pc}
    e5a0:	4000c000 	.word	0x4000c000
    e5a4:	4001e000 	.word	0x4001e000
    e5a8:	e000ed00 	.word	0xe000ed00
    e5ac:	05fa0004 	.word	0x05fa0004
    e5b0:	2000039c 	.word	0x2000039c
    e5b4:	03d09000 	.word	0x03d09000

0000e5b8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    e5b8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    e5ba:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    e5bc:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    e5be:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    e5c2:	fab2 f382 	clz	r3, r2
    e5c6:	f1c3 031f 	rsb	r3, r3, #31
    e5ca:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    e5cc:	fa05 f403 	lsl.w	r4, r5, r3
    e5d0:	ea22 0404 	bic.w	r4, r2, r4
    e5d4:	e850 6f00 	ldrex	r6, [r0]
    e5d8:	4296      	cmp	r6, r2
    e5da:	d104      	bne.n	e5e6 <nrfx_flag32_alloc+0x2e>
    e5dc:	e840 4c00 	strex	ip, r4, [r0]
    e5e0:	f1bc 0f00 	cmp.w	ip, #0
    e5e4:	d1f6      	bne.n	e5d4 <nrfx_flag32_alloc+0x1c>
    e5e6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    e5ea:	d1e7      	bne.n	e5bc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    e5ec:	4801      	ldr	r0, [pc, #4]	; (e5f4 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    e5ee:	700b      	strb	r3, [r1, #0]
}
    e5f0:	bd70      	pop	{r4, r5, r6, pc}
    e5f2:	bf00      	nop
    e5f4:	0bad0000 	.word	0x0bad0000

0000e5f8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    e5f8:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    e5fa:	6803      	ldr	r3, [r0, #0]
    e5fc:	40cb      	lsrs	r3, r1
    e5fe:	07db      	lsls	r3, r3, #31
    e600:	d414      	bmi.n	e62c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    e602:	2301      	movs	r3, #1
    e604:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    e606:	6802      	ldr	r2, [r0, #0]
    e608:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    e60c:	ea43 0102 	orr.w	r1, r3, r2
    e610:	e850 4f00 	ldrex	r4, [r0]
    e614:	4294      	cmp	r4, r2
    e616:	d104      	bne.n	e622 <nrfx_flag32_free+0x2a>
    e618:	e840 1c00 	strex	ip, r1, [r0]
    e61c:	f1bc 0f00 	cmp.w	ip, #0
    e620:	d1f6      	bne.n	e610 <nrfx_flag32_free+0x18>
    e622:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    e626:	d1ee      	bne.n	e606 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    e628:	4801      	ldr	r0, [pc, #4]	; (e630 <nrfx_flag32_free+0x38>)
}
    e62a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    e62c:	4801      	ldr	r0, [pc, #4]	; (e634 <nrfx_flag32_free+0x3c>)
    e62e:	e7fc      	b.n	e62a <nrfx_flag32_free+0x32>
    e630:	0bad0000 	.word	0x0bad0000
    e634:	0bad0004 	.word	0x0bad0004

0000e638 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    e638:	4b03      	ldr	r3, [pc, #12]	; (e648 <pin_in_use_by_te+0x10>)
    e63a:	3008      	adds	r0, #8
    e63c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    e640:	f3c0 1040 	ubfx	r0, r0, #5, #1
    e644:	4770      	bx	lr
    e646:	bf00      	nop
    e648:	200003a0 	.word	0x200003a0

0000e64c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    e64c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    e64e:	f100 0308 	add.w	r3, r0, #8
    e652:	4c0c      	ldr	r4, [pc, #48]	; (e684 <call_handler+0x38>)
    e654:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    e658:	05da      	lsls	r2, r3, #23
{
    e65a:	4605      	mov	r5, r0
    e65c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    e65e:	d507      	bpl.n	e670 <call_handler+0x24>
    e660:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    e664:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    e668:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    e66c:	6852      	ldr	r2, [r2, #4]
    e66e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    e670:	68a3      	ldr	r3, [r4, #8]
    e672:	b12b      	cbz	r3, e680 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    e674:	68e2      	ldr	r2, [r4, #12]
    e676:	4631      	mov	r1, r6
    e678:	4628      	mov	r0, r5
    }
}
    e67a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    e67e:	4718      	bx	r3
}
    e680:	bd70      	pop	{r4, r5, r6, pc}
    e682:	bf00      	nop
    e684:	200003a0 	.word	0x200003a0

0000e688 <release_handler>:
{
    e688:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    e68a:	4a12      	ldr	r2, [pc, #72]	; (e6d4 <release_handler+0x4c>)
    e68c:	3008      	adds	r0, #8
    e68e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    e692:	05d9      	lsls	r1, r3, #23
    e694:	d51b      	bpl.n	e6ce <release_handler+0x46>
    e696:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    e69a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    e69e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    e6a2:	f102 040e 	add.w	r4, r2, #14
    e6a6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    e6a8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    e6ac:	f413 7f80 	tst.w	r3, #256	; 0x100
    e6b0:	d003      	beq.n	e6ba <release_handler+0x32>
    e6b2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    e6b6:	4299      	cmp	r1, r3
    e6b8:	d009      	beq.n	e6ce <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    e6ba:	3001      	adds	r0, #1
    e6bc:	2820      	cmp	r0, #32
    e6be:	d1f3      	bne.n	e6a8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    e6c0:	2300      	movs	r3, #0
    e6c2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    e6c6:	4804      	ldr	r0, [pc, #16]	; (e6d8 <release_handler+0x50>)
}
    e6c8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    e6ca:	f7ff bf95 	b.w	e5f8 <nrfx_flag32_free>
}
    e6ce:	bc10      	pop	{r4}
    e6d0:	4770      	bx	lr
    e6d2:	bf00      	nop
    e6d4:	200003a0 	.word	0x200003a0
    e6d8:	200003f4 	.word	0x200003f4

0000e6dc <pin_handler_trigger_uninit>:
{
    e6dc:	b538      	push	{r3, r4, r5, lr}
    e6de:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    e6e0:	f7ff ffaa 	bl	e638 <pin_in_use_by_te>
    e6e4:	4c09      	ldr	r4, [pc, #36]	; (e70c <pin_handler_trigger_uninit+0x30>)
    e6e6:	f102 0508 	add.w	r5, r2, #8
    e6ea:	b140      	cbz	r0, e6fe <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    e6ec:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    e6f0:	4907      	ldr	r1, [pc, #28]	; (e710 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    e6f2:	0b5b      	lsrs	r3, r3, #13
    e6f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    e6f8:	2000      	movs	r0, #0
    e6fa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    e6fe:	4610      	mov	r0, r2
    e700:	f7ff ffc2 	bl	e688 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    e704:	2300      	movs	r3, #0
    e706:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    e70a:	bd38      	pop	{r3, r4, r5, pc}
    e70c:	200003a0 	.word	0x200003a0
    e710:	40006000 	.word	0x40006000

0000e714 <nrfx_gpiote_input_configure>:
{
    e714:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e718:	4604      	mov	r4, r0
    e71a:	461d      	mov	r5, r3
    if (p_input_config)
    e71c:	b309      	cbz	r1, e762 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    e71e:	4f4f      	ldr	r7, [pc, #316]	; (e85c <nrfx_gpiote_input_configure+0x148>)
    e720:	f100 0808 	add.w	r8, r0, #8
    e724:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    e728:	07b3      	lsls	r3, r6, #30
    e72a:	d506      	bpl.n	e73a <nrfx_gpiote_input_configure+0x26>
    e72c:	f7ff ff84 	bl	e638 <pin_in_use_by_te>
    e730:	b118      	cbz	r0, e73a <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    e732:	484b      	ldr	r0, [pc, #300]	; (e860 <nrfx_gpiote_input_configure+0x14c>)
}
    e734:	b002      	add	sp, #8
    e736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    e73a:	f004 031f 	and.w	r3, r4, #31
    e73e:	009b      	lsls	r3, r3, #2
    e740:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    e744:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    e746:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    e74a:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    e74e:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    e752:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    e756:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    e75a:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    e75e:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    e762:	b19a      	cbz	r2, e78c <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    e764:	4b3d      	ldr	r3, [pc, #244]	; (e85c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    e766:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    e768:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    e76a:	f104 0608 	add.w	r6, r4, #8
    e76e:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    e772:	f011 0f02 	tst.w	r1, #2
    e776:	d00d      	beq.n	e794 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    e778:	2800      	cmp	r0, #0
    e77a:	d1da      	bne.n	e732 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    e77c:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    e780:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    e784:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    e788:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    e78c:	2d00      	cmp	r5, #0
    e78e:	d13b      	bne.n	e808 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
    e790:	4834      	ldr	r0, [pc, #208]	; (e864 <nrfx_gpiote_input_configure+0x150>)
    e792:	e7cf      	b.n	e734 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    e794:	f021 0120 	bic.w	r1, r1, #32
    e798:	04c9      	lsls	r1, r1, #19
    e79a:	0cc9      	lsrs	r1, r1, #19
    e79c:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    e7a0:	2800      	cmp	r0, #0
    e7a2:	d0eb      	beq.n	e77c <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    e7a4:	2f03      	cmp	r7, #3
    e7a6:	d8c4      	bhi.n	e732 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    e7a8:	6852      	ldr	r2, [r2, #4]
    e7aa:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    e7ae:	b92f      	cbnz	r7, e7bc <nrfx_gpiote_input_configure+0xa8>
    e7b0:	4a2d      	ldr	r2, [pc, #180]	; (e868 <nrfx_gpiote_input_configure+0x154>)
    e7b2:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    e7b6:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    e7ba:	e7df      	b.n	e77c <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    e7bc:	ea4f 028c 	mov.w	r2, ip, lsl #2
    e7c0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    e7c4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    e7c8:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    e7cc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    e7d0:	f020 0003 	bic.w	r0, r0, #3
    e7d4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    e7d8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    e7dc:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    e7e0:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    e7e4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e7e8:	0220      	lsls	r0, r4, #8
    e7ea:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    e7ee:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    e7f2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    e7f6:	ea40 000e 	orr.w	r0, r0, lr
    e7fa:	f041 0120 	orr.w	r1, r1, #32
    e7fe:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    e802:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    e806:	e7b9      	b.n	e77c <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    e808:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    e80c:	4620      	mov	r0, r4
    e80e:	f7ff ff3b 	bl	e688 <release_handler>
    if (!handler)
    e812:	2e00      	cmp	r6, #0
    e814:	d0bc      	beq.n	e790 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    e816:	4d11      	ldr	r5, [pc, #68]	; (e85c <nrfx_gpiote_input_configure+0x148>)
    e818:	e9d5 2300 	ldrd	r2, r3, [r5]
    e81c:	4296      	cmp	r6, r2
    e81e:	d101      	bne.n	e824 <nrfx_gpiote_input_configure+0x110>
    e820:	429f      	cmp	r7, r3
    e822:	d019      	beq.n	e858 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    e824:	4811      	ldr	r0, [pc, #68]	; (e86c <nrfx_gpiote_input_configure+0x158>)
    e826:	f10d 0107 	add.w	r1, sp, #7
    e82a:	f7ff fec5 	bl	e5b8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    e82e:	4b0d      	ldr	r3, [pc, #52]	; (e864 <nrfx_gpiote_input_configure+0x150>)
    e830:	4298      	cmp	r0, r3
    e832:	f47f af7f 	bne.w	e734 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    e836:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    e83a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    e83e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    e842:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    e844:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    e846:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    e84a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    e84e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e852:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    e856:	e79b      	b.n	e790 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    e858:	2200      	movs	r2, #0
    e85a:	e7ee      	b.n	e83a <nrfx_gpiote_input_configure+0x126>
    e85c:	200003a0 	.word	0x200003a0
    e860:	0bad0004 	.word	0x0bad0004
    e864:	0bad0000 	.word	0x0bad0000
    e868:	40006000 	.word	0x40006000
    e86c:	200003f4 	.word	0x200003f4

0000e870 <nrfx_gpiote_output_configure>:
{
    e870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e872:	4604      	mov	r4, r0
    if (p_config)
    e874:	b389      	cbz	r1, e8da <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    e876:	4e3a      	ldr	r6, [pc, #232]	; (e960 <nrfx_gpiote_output_configure+0xf0>)
    e878:	f100 0708 	add.w	r7, r0, #8
    e87c:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    e880:	07ab      	lsls	r3, r5, #30
    e882:	d404      	bmi.n	e88e <nrfx_gpiote_output_configure+0x1e>
    e884:	f7ff fed8 	bl	e638 <pin_in_use_by_te>
    e888:	b108      	cbz	r0, e88e <nrfx_gpiote_output_configure+0x1e>
{
    e88a:	4836      	ldr	r0, [pc, #216]	; (e964 <nrfx_gpiote_output_configure+0xf4>)
}
    e88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    e88e:	f015 0f1c 	tst.w	r5, #28
    e892:	784b      	ldrb	r3, [r1, #1]
    e894:	d124      	bne.n	e8e0 <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    e896:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    e89a:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    e89e:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    e8a2:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    e8a4:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    e8a8:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    e8ac:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    e8ae:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    e8b2:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    e8b6:	f02c 0c07 	bic.w	ip, ip, #7
    e8ba:	ea43 030c 	orr.w	r3, r3, ip
    e8be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    e8c2:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    e8c6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    e8ca:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    e8ce:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    e8d2:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    e8d6:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    e8da:	b922      	cbnz	r2, e8e6 <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    e8dc:	4822      	ldr	r0, [pc, #136]	; (e968 <nrfx_gpiote_output_configure+0xf8>)
    e8de:	e7d5      	b.n	e88c <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    e8e0:	2b01      	cmp	r3, #1
    e8e2:	d1d8      	bne.n	e896 <nrfx_gpiote_output_configure+0x26>
    e8e4:	e7d1      	b.n	e88a <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    e8e6:	4e1e      	ldr	r6, [pc, #120]	; (e960 <nrfx_gpiote_output_configure+0xf0>)
    e8e8:	f104 0708 	add.w	r7, r4, #8
    e8ec:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    e8f0:	0783      	lsls	r3, r0, #30
    e8f2:	d5ca      	bpl.n	e88a <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    e8f4:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    e8f8:	4661      	mov	r1, ip
    e8fa:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    e8fc:	f020 0020 	bic.w	r0, r0, #32
    e900:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    e904:	04c0      	lsls	r0, r0, #19
    e906:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    e90a:	0cc0      	lsrs	r0, r0, #19
    e90c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    e910:	2300      	movs	r3, #0
    e912:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    e916:	7855      	ldrb	r5, [r2, #1]
    e918:	2d00      	cmp	r5, #0
    e91a:	d0df      	beq.n	e8dc <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    e91c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    e920:	7892      	ldrb	r2, [r2, #2]
    e922:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    e926:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    e92a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e92e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    e932:	0223      	lsls	r3, r4, #8
    e934:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    e938:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e93a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    e93e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    e942:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e944:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    e946:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    e94a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e94e:	4313      	orrs	r3, r2
    e950:	f040 0020 	orr.w	r0, r0, #32
    e954:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    e958:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    e95c:	e7be      	b.n	e8dc <nrfx_gpiote_output_configure+0x6c>
    e95e:	bf00      	nop
    e960:	200003a0 	.word	0x200003a0
    e964:	0bad0004 	.word	0x0bad0004
    e968:	0bad0000 	.word	0x0bad0000

0000e96c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    e96c:	4b01      	ldr	r3, [pc, #4]	; (e974 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    e96e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    e972:	4770      	bx	lr
    e974:	200003a0 	.word	0x200003a0

0000e978 <nrfx_gpiote_channel_get>:
{
    e978:	b508      	push	{r3, lr}
    e97a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    e97c:	f7ff fe5c 	bl	e638 <pin_in_use_by_te>
    e980:	b138      	cbz	r0, e992 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    e982:	4b05      	ldr	r3, [pc, #20]	; (e998 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    e984:	4805      	ldr	r0, [pc, #20]	; (e99c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    e986:	3208      	adds	r2, #8
    e988:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    e98c:	0b5b      	lsrs	r3, r3, #13
    e98e:	700b      	strb	r3, [r1, #0]
}
    e990:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    e992:	4803      	ldr	r0, [pc, #12]	; (e9a0 <nrfx_gpiote_channel_get+0x28>)
    e994:	e7fc      	b.n	e990 <nrfx_gpiote_channel_get+0x18>
    e996:	bf00      	nop
    e998:	200003a0 	.word	0x200003a0
    e99c:	0bad0000 	.word	0x0bad0000
    e9a0:	0bad0004 	.word	0x0bad0004

0000e9a4 <nrfx_gpiote_init>:
{
    e9a4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    e9a6:	4c0f      	ldr	r4, [pc, #60]	; (e9e4 <nrfx_gpiote_init+0x40>)
    e9a8:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    e9ac:	b9bd      	cbnz	r5, e9de <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    e9ae:	2240      	movs	r2, #64	; 0x40
    e9b0:	4629      	mov	r1, r5
    e9b2:	f104 0010 	add.w	r0, r4, #16
    e9b6:	f002 f882 	bl	10abe <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    e9ba:	2006      	movs	r0, #6
    e9bc:	f7fc fc3e 	bl	b23c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    e9c0:	4b09      	ldr	r3, [pc, #36]	; (e9e8 <nrfx_gpiote_init+0x44>)
    return err_code;
    e9c2:	480a      	ldr	r0, [pc, #40]	; (e9ec <nrfx_gpiote_init+0x48>)
    e9c4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    e9c8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    e9cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    e9d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    e9d4:	2301      	movs	r3, #1
    e9d6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    e9da:	6563      	str	r3, [r4, #84]	; 0x54
}
    e9dc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    e9de:	4804      	ldr	r0, [pc, #16]	; (e9f0 <nrfx_gpiote_init+0x4c>)
    e9e0:	e7fc      	b.n	e9dc <nrfx_gpiote_init+0x38>
    e9e2:	bf00      	nop
    e9e4:	200003a0 	.word	0x200003a0
    e9e8:	40006000 	.word	0x40006000
    e9ec:	0bad0000 	.word	0x0bad0000
    e9f0:	0bad0005 	.word	0x0bad0005

0000e9f4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    e9f4:	4b03      	ldr	r3, [pc, #12]	; (ea04 <nrfx_gpiote_is_init+0x10>)
    e9f6:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    e9fa:	3800      	subs	r0, #0
    e9fc:	bf18      	it	ne
    e9fe:	2001      	movne	r0, #1
    ea00:	4770      	bx	lr
    ea02:	bf00      	nop
    ea04:	200003a0 	.word	0x200003a0

0000ea08 <nrfx_gpiote_channel_free>:
{
    ea08:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    ea0a:	4801      	ldr	r0, [pc, #4]	; (ea10 <nrfx_gpiote_channel_free+0x8>)
    ea0c:	f7ff bdf4 	b.w	e5f8 <nrfx_flag32_free>
    ea10:	200003f0 	.word	0x200003f0

0000ea14 <nrfx_gpiote_channel_alloc>:
{
    ea14:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    ea16:	4801      	ldr	r0, [pc, #4]	; (ea1c <nrfx_gpiote_channel_alloc+0x8>)
    ea18:	f7ff bdce 	b.w	e5b8 <nrfx_flag32_alloc>
    ea1c:	200003f0 	.word	0x200003f0

0000ea20 <nrfx_gpiote_trigger_enable>:
{
    ea20:	b510      	push	{r4, lr}
    ea22:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    ea24:	f7ff fe08 	bl	e638 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    ea28:	f102 0408 	add.w	r4, r2, #8
    ea2c:	4b1c      	ldr	r3, [pc, #112]	; (eaa0 <nrfx_gpiote_trigger_enable+0x80>)
    ea2e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    ea32:	b1e0      	cbz	r0, ea6e <nrfx_gpiote_trigger_enable+0x4e>
    ea34:	f013 0402 	ands.w	r4, r3, #2
    ea38:	d119      	bne.n	ea6e <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    ea3a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    ea3c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    ea3e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    ea42:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    ea46:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    ea4a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ea4e:	6004      	str	r4, [r0, #0]
    ea50:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    ea52:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    ea56:	f040 0001 	orr.w	r0, r0, #1
    ea5a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    ea5e:	b129      	cbz	r1, ea6c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    ea60:	2201      	movs	r2, #1
    ea62:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    ea66:	4a0f      	ldr	r2, [pc, #60]	; (eaa4 <nrfx_gpiote_trigger_enable+0x84>)
    ea68:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    ea6c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    ea6e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    ea72:	2b04      	cmp	r3, #4
    ea74:	d010      	beq.n	ea98 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    ea76:	2b05      	cmp	r3, #5
    ea78:	d010      	beq.n	ea9c <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    ea7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    ea7e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    ea82:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    ea86:	40d9      	lsrs	r1, r3
    ea88:	f001 0101 	and.w	r1, r1, #1
    ea8c:	3102      	adds	r1, #2
}
    ea8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    ea92:	4610      	mov	r0, r2
    ea94:	f002 bd1d 	b.w	114d2 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    ea98:	2103      	movs	r1, #3
    ea9a:	e7f8      	b.n	ea8e <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    ea9c:	2102      	movs	r1, #2
    ea9e:	e7f6      	b.n	ea8e <nrfx_gpiote_trigger_enable+0x6e>
    eaa0:	200003a0 	.word	0x200003a0
    eaa4:	40006000 	.word	0x40006000

0000eaa8 <nrfx_gpiote_trigger_disable>:
{
    eaa8:	b508      	push	{r3, lr}
    eaaa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    eaac:	f7ff fdc4 	bl	e638 <pin_in_use_by_te>
    eab0:	b1c0      	cbz	r0, eae4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    eab2:	f102 0108 	add.w	r1, r2, #8
    eab6:	4b0e      	ldr	r3, [pc, #56]	; (eaf0 <nrfx_gpiote_trigger_disable+0x48>)
    eab8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    eabc:	0799      	lsls	r1, r3, #30
    eabe:	d411      	bmi.n	eae4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    eac0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    eac2:	2201      	movs	r2, #1
    eac4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    eac6:	009b      	lsls	r3, r3, #2
    eac8:	490a      	ldr	r1, [pc, #40]	; (eaf4 <nrfx_gpiote_trigger_disable+0x4c>)
    eaca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    eace:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    ead2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    ead6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    eada:	f022 0203 	bic.w	r2, r2, #3
    eade:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    eae2:	bd08      	pop	{r3, pc}
    eae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    eae8:	2100      	movs	r1, #0
    eaea:	4610      	mov	r0, r2
    eaec:	f002 bcf1 	b.w	114d2 <nrf_gpio_cfg_sense_set>
    eaf0:	200003a0 	.word	0x200003a0
    eaf4:	40006000 	.word	0x40006000

0000eaf8 <nrfx_gpiote_pin_uninit>:
{
    eaf8:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    eafa:	4b0d      	ldr	r3, [pc, #52]	; (eb30 <nrfx_gpiote_pin_uninit+0x38>)
    eafc:	f100 0208 	add.w	r2, r0, #8
{
    eb00:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    eb02:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    eb06:	07db      	lsls	r3, r3, #31
    eb08:	d50f      	bpl.n	eb2a <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    eb0a:	f7ff ffcd 	bl	eaa8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    eb0e:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    eb10:	f004 041f 	and.w	r4, r4, #31
    eb14:	f7ff fde2 	bl	e6dc <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    eb18:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    eb1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    eb20:	2202      	movs	r2, #2
    eb22:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    eb26:	4803      	ldr	r0, [pc, #12]	; (eb34 <nrfx_gpiote_pin_uninit+0x3c>)
}
    eb28:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    eb2a:	4803      	ldr	r0, [pc, #12]	; (eb38 <nrfx_gpiote_pin_uninit+0x40>)
    eb2c:	e7fc      	b.n	eb28 <nrfx_gpiote_pin_uninit+0x30>
    eb2e:	bf00      	nop
    eb30:	200003a0 	.word	0x200003a0
    eb34:	0bad0000 	.word	0x0bad0000
    eb38:	0bad0004 	.word	0x0bad0004

0000eb3c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    eb3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb40:	4b4f      	ldr	r3, [pc, #316]	; (ec80 <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
    eb42:	4850      	ldr	r0, [pc, #320]	; (ec84 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    eb44:	4950      	ldr	r1, [pc, #320]	; (ec88 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
    eb46:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    eb48:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    eb4a:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    eb4c:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    eb4e:	b136      	cbz	r6, eb5e <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    eb50:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    eb54:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    eb56:	bf1e      	ittt	ne
    eb58:	601c      	strne	r4, [r3, #0]
    eb5a:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    eb5c:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    eb5e:	3304      	adds	r3, #4
    eb60:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    eb62:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    eb66:	d1f1      	bne.n	eb4c <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    eb68:	4b46      	ldr	r3, [pc, #280]	; (ec84 <nrfx_gpiote_irq_handler+0x148>)
    eb6a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    eb6e:	b1bb      	cbz	r3, eba0 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    eb70:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    eb74:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    eb78:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    eb7a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    eb7e:	af01      	add	r7, sp, #4
    eb80:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    eb84:	9c01      	ldr	r4, [sp, #4]
    eb86:	b98c      	cbnz	r4, ebac <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    eb88:	4b3e      	ldr	r3, [pc, #248]	; (ec84 <nrfx_gpiote_irq_handler+0x148>)
    eb8a:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    eb8e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    eb92:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    eb96:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    eb98:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    eb9c:	2b00      	cmp	r3, #0
    eb9e:	d1ee      	bne.n	eb7e <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    eba0:	2401      	movs	r4, #1
    while (mask)
    eba2:	2d00      	cmp	r5, #0
    eba4:	d153      	bne.n	ec4e <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    eba6:	b003      	add	sp, #12
    eba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    ebac:	fa94 f4a4 	rbit	r4, r4
    ebb0:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    ebb4:	4a35      	ldr	r2, [pc, #212]	; (ec8c <nrfx_gpiote_irq_handler+0x150>)
    ebb6:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    ebba:	08e0      	lsrs	r0, r4, #3
    ebbc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    ebc0:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    ebc2:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    ebc6:	fa08 f202 	lsl.w	r2, r8, r2
    ebca:	ea23 0302 	bic.w	r3, r3, r2
    ebce:	543b      	strb	r3, [r7, r0]
    ebd0:	00a3      	lsls	r3, r4, #2
    ebd2:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    ebd6:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    ebda:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    ebde:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    ebe0:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    ebe2:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    ebe6:	d518      	bpl.n	ec1a <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
    ebe8:	4659      	mov	r1, fp
    ebea:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    ebec:	fa5f fa82 	uxtb.w	sl, r2
    ebf0:	f7ff fd2c 	bl	e64c <call_handler>
    ebf4:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    ebf8:	f3c3 4301 	ubfx	r3, r3, #16, #2
    ebfc:	459a      	cmp	sl, r3
    ebfe:	d107      	bne.n	ec10 <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    ec00:	2100      	movs	r1, #0
    ec02:	4620      	mov	r0, r4
    ec04:	f002 fc65 	bl	114d2 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    ec08:	4651      	mov	r1, sl
    ec0a:	4620      	mov	r0, r4
    ec0c:	f002 fc61 	bl	114d2 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    ec10:	fa08 f404 	lsl.w	r4, r8, r4
    ec14:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    ec18:	e7b4      	b.n	eb84 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    ec1a:	2a02      	cmp	r2, #2
    ec1c:	d10c      	bne.n	ec38 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    ec1e:	2103      	movs	r1, #3
    ec20:	4620      	mov	r0, r4
    ec22:	f002 fc56 	bl	114d2 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    ec26:	f00a 0305 	and.w	r3, sl, #5
    ec2a:	2b01      	cmp	r3, #1
    ec2c:	d1f0      	bne.n	ec10 <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
    ec2e:	4659      	mov	r1, fp
    ec30:	4620      	mov	r0, r4
    ec32:	f7ff fd0b 	bl	e64c <call_handler>
    ec36:	e7eb      	b.n	ec10 <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    ec38:	2102      	movs	r1, #2
    ec3a:	4620      	mov	r0, r4
    ec3c:	f002 fc49 	bl	114d2 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    ec40:	f1ba 0f03 	cmp.w	sl, #3
    ec44:	d0f3      	beq.n	ec2e <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    ec46:	2a03      	cmp	r2, #3
    ec48:	d1e2      	bne.n	ec10 <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    ec4a:	458a      	cmp	sl, r1
    ec4c:	e7ee      	b.n	ec2c <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    ec4e:	fa95 f3a5 	rbit	r3, r5
    ec52:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    ec56:	fa04 f203 	lsl.w	r2, r4, r3
    ec5a:	009b      	lsls	r3, r3, #2
    ec5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ec60:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    ec64:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    ec68:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    ec6c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    ec70:	f3c0 2004 	ubfx	r0, r0, #8, #5
    ec74:	f3c1 4101 	ubfx	r1, r1, #16, #2
    ec78:	f7ff fce8 	bl	e64c <call_handler>
    ec7c:	e791      	b.n	eba2 <nrfx_gpiote_irq_handler+0x66>
    ec7e:	bf00      	nop
    ec80:	40006100 	.word	0x40006100
    ec84:	40006000 	.word	0x40006000
    ec88:	40006120 	.word	0x40006120
    ec8c:	200003a0 	.word	0x200003a0

0000ec90 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    ec90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    ec94:	7907      	ldrb	r7, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    ec96:	4c49      	ldr	r4, [pc, #292]	; (edbc <nrfx_pwm_init+0x12c>)
    ec98:	250c      	movs	r5, #12
    ec9a:	437d      	muls	r5, r7
    ec9c:	1966      	adds	r6, r4, r5
{
    ec9e:	b085      	sub	sp, #20
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    eca0:	f896 c008 	ldrb.w	ip, [r6, #8]
    eca4:	f1bc 0f00 	cmp.w	ip, #0
    eca8:	f040 8085 	bne.w	edb6 <nrfx_pwm_init+0x126>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    ecac:	6073      	str	r3, [r6, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    ecae:	7b0b      	ldrb	r3, [r1, #12]
    p_cb->handler = handler;
    ecb0:	5162      	str	r2, [r4, r5]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    ecb2:	72b3      	strb	r3, [r6, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    ecb4:	2b00      	cmp	r3, #0
    ecb6:	d03b      	beq.n	ed30 <nrfx_pwm_init+0xa0>
    ecb8:	7b4b      	ldrb	r3, [r1, #13]
    ecba:	2b00      	cmp	r3, #0
    ecbc:	d038      	beq.n	ed30 <nrfx_pwm_init+0xa0>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    ecbe:	6803      	ldr	r3, [r0, #0]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    ecc0:	2501      	movs	r5, #1
    ecc2:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    nrf_pwm_configure(p_instance->p_registers,
    ecc6:	6803      	ldr	r3, [r0, #0]
        p_config->base_clock, p_config->count_mode, p_config->top_value);
    ecc8:	798e      	ldrb	r6, [r1, #6]
    ecca:	890d      	ldrh	r5, [r1, #8]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
    eccc:	f891 c005 	ldrb.w	ip, [r1, #5]
    ecd0:	f8c3 c50c 	str.w	ip, [r3, #1292]	; 0x50c
    p_reg->MODE       = mode;
    ecd4:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    ecd8:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    nrf_pwm_decoder_set(p_instance->p_registers,
    ecdc:	6803      	ldr	r3, [r0, #0]

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    ecde:	8949      	ldrh	r1, [r1, #10]
    ece0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
        p_config->load_mode, p_config->step_mode);

    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    ece4:	6801      	ldr	r1, [r0, #0]
    p_reg->SHORTS = mask;
    ece6:	2300      	movs	r3, #0
    ece8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    nrf_pwm_int_set(p_instance->p_registers, 0);
    ecec:	6801      	ldr	r1, [r0, #0]
    p_reg->INTEN = mask;
    ecee:	f8c1 3300 	str.w	r3, [r1, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
    ecf2:	6801      	ldr	r1, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ecf4:	f8c1 311c 	str.w	r3, [r1, #284]	; 0x11c
    ecf8:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
    ecfc:	6801      	ldr	r1, [r0, #0]
    ecfe:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
    ed02:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
    ed06:	6801      	ldr	r1, [r0, #0]
    ed08:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
    ed0c:	f8d1 1114 	ldr.w	r1, [r1, #276]	; 0x114
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    ed10:	6801      	ldr	r1, [r0, #0]
    ed12:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
    ed16:	f8d1 3104 	ldr.w	r3, [r1, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    ed1a:	2a00      	cmp	r2, #0
    ed1c:	d145      	bne.n	edaa <nrfx_pwm_init+0x11a>
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    ed1e:	230c      	movs	r3, #12
    ed20:	fb03 4407 	mla	r4, r3, r7, r4

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    ed24:	4826      	ldr	r0, [pc, #152]	; (edc0 <nrfx_pwm_init+0x130>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    ed26:	2301      	movs	r3, #1
    ed28:	7223      	strb	r3, [r4, #8]
}
    ed2a:	b005      	add	sp, #20
    ed2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ed30:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    ed34:	466b      	mov	r3, sp
    ed36:	f101 0803 	add.w	r8, r1, #3
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    ed3a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
        uint8_t output_pin = p_config->output_pins[i];
    ed3e:	f81e cf01 	ldrb.w	ip, [lr, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    ed42:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    ed46:	d02d      	beq.n	eda4 <nrfx_pwm_init+0x114>
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    ed48:	f02c 0580 	bic.w	r5, ip, #128	; 0x80
    ed4c:	601d      	str	r5, [r3, #0]
            if (!p_config->skip_gpio_cfg)
    ed4e:	7b0d      	ldrb	r5, [r1, #12]
    ed50:	b99d      	cbnz	r5, ed7a <nrfx_pwm_init+0xea>
    *p_pin = pin_number & 0x1F;
    ed52:	f00c 051f 	and.w	r5, ip, #31
    if (value == 0)
    ed56:	f01c 0f80 	tst.w	ip, #128	; 0x80
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    ed5a:	f04f 0601 	mov.w	r6, #1
    ed5e:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    ed62:	fa06 f605 	lsl.w	r6, r6, r5
    reg->PIN_CNF[pin_number] = cnf;
    ed66:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    p_reg->OUTCLR = clr_mask;
    ed6a:	bf0c      	ite	eq
    ed6c:	f8cc 650c 	streq.w	r6, [ip, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    ed70:	f8cc 6508 	strne.w	r6, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    ed74:	2603      	movs	r6, #3
    ed76:	f84c 6025 	str.w	r6, [ip, r5, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    ed7a:	45f0      	cmp	r8, lr
    ed7c:	f103 0304 	add.w	r3, r3, #4
    ed80:	d1dd      	bne.n	ed3e <nrfx_pwm_init+0xae>
    if (!p_config->skip_psel_cfg)
    ed82:	7b4b      	ldrb	r3, [r1, #13]
    ed84:	2b00      	cmp	r3, #0
    ed86:	d19a      	bne.n	ecbe <nrfx_pwm_init+0x2e>
        nrf_pwm_pins_set(p_instance->p_registers, out_pins);
    ed88:	6803      	ldr	r3, [r0, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    ed8a:	9d00      	ldr	r5, [sp, #0]
    ed8c:	f8c3 5560 	str.w	r5, [r3, #1376]	; 0x560
    ed90:	9d01      	ldr	r5, [sp, #4]
    ed92:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
    ed96:	9d02      	ldr	r5, [sp, #8]
    ed98:	f8c3 5568 	str.w	r5, [r3, #1384]	; 0x568
    ed9c:	9d03      	ldr	r5, [sp, #12]
    ed9e:	f8c3 556c 	str.w	r5, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    eda2:	e78c      	b.n	ecbe <nrfx_pwm_init+0x2e>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    eda4:	f8c3 9000 	str.w	r9, [r3]
    eda8:	e7e7      	b.n	ed7a <nrfx_pwm_init+0xea>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    edaa:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    edac:	f340 3007 	sbfx	r0, r0, #12, #8
    edb0:	f7fc fa44 	bl	b23c <arch_irq_enable>
    edb4:	e7b3      	b.n	ed1e <nrfx_pwm_init+0x8e>
        return err_code;
    edb6:	4803      	ldr	r0, [pc, #12]	; (edc4 <nrfx_pwm_init+0x134>)
    edb8:	e7b7      	b.n	ed2a <nrfx_pwm_init+0x9a>
    edba:	bf00      	nop
    edbc:	20001644 	.word	0x20001644
    edc0:	0bad0000 	.word	0x0bad0000
    edc4:	0bad0005 	.word	0x0bad0005

0000edc8 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    edc8:	b470      	push	{r4, r5, r6}
    edca:	460c      	mov	r4, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    edcc:	7901      	ldrb	r1, [r0, #4]
    edce:	4d20      	ldr	r5, [pc, #128]	; (ee50 <nrfx_pwm_simple_playback+0x88>)
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    edd0:	6826      	ldr	r6, [r4, #0]
    edd2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    edd6:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    edda:	6805      	ldr	r5, [r0, #0]
    eddc:	f8c5 6520 	str.w	r6, [r5, #1312]	; 0x520
    p_reg->SEQ[seq_id].CNT = length;
    ede0:	88a6      	ldrh	r6, [r4, #4]
    ede2:	f8c5 6524 	str.w	r6, [r5, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    ede6:	68a6      	ldr	r6, [r4, #8]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    ede8:	f8c5 6528 	str.w	r6, [r5, #1320]	; 0x528
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    edec:	68e6      	ldr	r6, [r4, #12]
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    edee:	f8c5 652c 	str.w	r6, [r5, #1324]	; 0x52c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    edf2:	6805      	ldr	r5, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    edf4:	6826      	ldr	r6, [r4, #0]
    edf6:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
    edfa:	88a6      	ldrh	r6, [r4, #4]
    edfc:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    ee00:	68a6      	ldr	r6, [r4, #8]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    ee02:	f8c5 6548 	str.w	r6, [r5, #1352]	; 0x548
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    ee06:	68e4      	ldr	r4, [r4, #12]
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    ee08:	f8c5 454c 	str.w	r4, [r5, #1356]	; 0x54c
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
    ee0c:	6805      	ldr	r5, [r0, #0]
    ee0e:	f002 0401 	and.w	r4, r2, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    ee12:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    ee16:	f8c5 2514 	str.w	r2, [r5, #1300]	; 0x514
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    ee1a:	f013 0f01 	tst.w	r3, #1
    ee1e:	6805      	ldr	r5, [r0, #0]
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    ee20:	b2da      	uxtb	r2, r3
    if (flags & NRFX_PWM_FLAG_STOP)
    ee22:	d10f      	bne.n	ee44 <nrfx_pwm_simple_playback+0x7c>
    else if (flags & NRFX_PWM_FLAG_LOOP)
    ee24:	f013 0302 	ands.w	r3, r3, #2
    ee28:	d00d      	beq.n	ee46 <nrfx_pwm_simple_playback+0x7e>
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    ee2a:	b934      	cbnz	r4, ee3a <nrfx_pwm_simple_playback+0x72>
    p_reg->SHORTS = mask;
    ee2c:	2304      	movs	r3, #4
    ee2e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
    return start_playback(p_instance, p_cb, flags,
    ee32:	2308      	movs	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    ee34:	bc70      	pop	{r4, r5, r6}
    return start_playback(p_instance, p_cb, flags,
    ee36:	f002 bb5a 	b.w	114ee <start_playback>
    ee3a:	2308      	movs	r3, #8
    ee3c:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
    ee40:	230c      	movs	r3, #12
    ee42:	e7f7      	b.n	ee34 <nrfx_pwm_simple_playback+0x6c>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    ee44:	2310      	movs	r3, #16
    ee46:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
    return start_playback(p_instance, p_cb, flags,
    ee4a:	2c00      	cmp	r4, #0
    ee4c:	d1f8      	bne.n	ee40 <nrfx_pwm_simple_playback+0x78>
    ee4e:	e7f0      	b.n	ee32 <nrfx_pwm_simple_playback+0x6a>
    ee50:	20001644 	.word	0x20001644

0000ee54 <nrfx_pwm_is_stopped>:
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    ee54:	7903      	ldrb	r3, [r0, #4]

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    ee56:	4a08      	ldr	r2, [pc, #32]	; (ee78 <nrfx_pwm_is_stopped+0x24>)
    ee58:	210c      	movs	r1, #12
    ee5a:	fb01 2203 	mla	r2, r1, r3, r2
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    ee5e:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    ee60:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ee62:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    ee66:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    ee68:	b919      	cbnz	r1, ee72 <nrfx_pwm_is_stopped+0x1e>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    ee6a:	1e98      	subs	r0, r3, #2
    ee6c:	bf18      	it	ne
    ee6e:	2001      	movne	r0, #1
    ee70:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    ee72:	2001      	movs	r0, #1
    ee74:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    ee76:	4770      	bx	lr
    ee78:	20001644 	.word	0x20001644

0000ee7c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ee7c:	4b0f      	ldr	r3, [pc, #60]	; (eebc <z_sys_init_run_level+0x40>)
{
    ee7e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ee80:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    ee84:	3001      	adds	r0, #1
    ee86:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    ee8a:	42a6      	cmp	r6, r4
    ee8c:	d800      	bhi.n	ee90 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    ee8e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    ee90:	e9d4 3500 	ldrd	r3, r5, [r4]
    ee94:	4628      	mov	r0, r5
    ee96:	4798      	blx	r3
		if (dev != NULL) {
    ee98:	b16d      	cbz	r5, eeb6 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    ee9a:	b138      	cbz	r0, eeac <z_sys_init_run_level+0x30>
				if (rc < 0) {
    ee9c:	2800      	cmp	r0, #0
    ee9e:	bfb8      	it	lt
    eea0:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    eea2:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    eea4:	28ff      	cmp	r0, #255	; 0xff
    eea6:	bfa8      	it	ge
    eea8:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    eeaa:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    eeac:	68ea      	ldr	r2, [r5, #12]
    eeae:	7853      	ldrb	r3, [r2, #1]
    eeb0:	f043 0301 	orr.w	r3, r3, #1
    eeb4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    eeb6:	3408      	adds	r4, #8
    eeb8:	e7e7      	b.n	ee8a <z_sys_init_run_level+0xe>
    eeba:	bf00      	nop
    eebc:	000123f0 	.word	0x000123f0

0000eec0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    eec0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    eec2:	4b0a      	ldr	r3, [pc, #40]	; (eeec <bg_thread_main+0x2c>)
    eec4:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    eec6:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    eec8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    eeca:	f7ff ffd7 	bl	ee7c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    eece:	f001 fa3f 	bl	10350 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    eed2:	2004      	movs	r0, #4
    eed4:	f7ff ffd2 	bl	ee7c <z_sys_init_run_level>

	z_init_static_threads();
    eed8:	f000 f91a 	bl	f110 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    eedc:	f7fb fb3e 	bl	a55c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    eee0:	4a03      	ldr	r2, [pc, #12]	; (eef0 <bg_thread_main+0x30>)
    eee2:	7b13      	ldrb	r3, [r2, #12]
    eee4:	f023 0301 	bic.w	r3, r3, #1
    eee8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    eeea:	bd08      	pop	{r3, pc}
    eeec:	2000194f 	.word	0x2000194f
    eef0:	200013e0 	.word	0x200013e0

0000eef4 <z_bss_zero>:
{
    eef4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    eef6:	4803      	ldr	r0, [pc, #12]	; (ef04 <z_bss_zero+0x10>)
    eef8:	4a03      	ldr	r2, [pc, #12]	; (ef08 <z_bss_zero+0x14>)
    eefa:	2100      	movs	r1, #0
    eefc:	1a12      	subs	r2, r2, r0
    eefe:	f002 fb59 	bl	115b4 <z_early_memset>
}
    ef02:	bd08      	pop	{r3, pc}
    ef04:	200004c0 	.word	0x200004c0
    ef08:	20001950 	.word	0x20001950

0000ef0c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    ef0c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    ef0e:	4e14      	ldr	r6, [pc, #80]	; (ef60 <z_init_cpu+0x54>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    ef10:	4d14      	ldr	r5, [pc, #80]	; (ef64 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
    ef12:	4915      	ldr	r1, [pc, #84]	; (ef68 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    ef14:	2378      	movs	r3, #120	; 0x78
{
    ef16:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    ef18:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    ef1c:	2201      	movs	r2, #1
    ef1e:	2300      	movs	r3, #0
    ef20:	e9cd 2304 	strd	r2, r3, [sp, #16]
    ef24:	220f      	movs	r2, #15
    ef26:	e9cd 3202 	strd	r3, r2, [sp, #8]
    ef2a:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    ef2c:	2318      	movs	r3, #24
    ef2e:	fb03 5500 	mla	r5, r3, r0, r5
{
    ef32:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    ef34:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    ef38:	4b0c      	ldr	r3, [pc, #48]	; (ef6c <z_init_cpu+0x60>)
    ef3a:	9500      	str	r5, [sp, #0]
    ef3c:	f44f 7280 	mov.w	r2, #256	; 0x100
    ef40:	4630      	mov	r0, r6
    ef42:	f000 f88f 	bl	f064 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ef46:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    ef48:	752c      	strb	r4, [r5, #20]
    ef4a:	f023 0304 	bic.w	r3, r3, #4
    ef4e:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    ef50:	4b07      	ldr	r3, [pc, #28]	; (ef70 <z_init_cpu+0x64>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    ef52:	60ee      	str	r6, [r5, #12]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    ef54:	3401      	adds	r4, #1
    ef56:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].irq_stack =
    ef5a:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    ef5c:	b006      	add	sp, #24
    ef5e:	bd70      	pop	{r4, r5, r6, pc}
    ef60:	20001368 	.word	0x20001368
    ef64:	20001650 	.word	0x20001650
    ef68:	20002f50 	.word	0x20002f50
    ef6c:	0000f1c9 	.word	0x0000f1c9
    ef70:	20002750 	.word	0x20002750

0000ef74 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    ef74:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    ef76:	2000      	movs	r0, #0
{
    ef78:	b0a4      	sub	sp, #144	; 0x90
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    ef7a:	f7ff ff7f 	bl	ee7c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    ef7e:	4b29      	ldr	r3, [pc, #164]	; (f024 <z_cstart+0xb0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    ef80:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    ef84:	4c28      	ldr	r4, [pc, #160]	; (f028 <z_cstart+0xb4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    ef86:	4e29      	ldr	r6, [pc, #164]	; (f02c <z_cstart+0xb8>)
    ef88:	6963      	ldr	r3, [r4, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    ef8a:	4f29      	ldr	r7, [pc, #164]	; (f030 <z_cstart+0xbc>)
    ef8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ef90:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ef92:	23e0      	movs	r3, #224	; 0xe0
    ef94:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    ef98:	2500      	movs	r5, #0
    ef9a:	2320      	movs	r3, #32
    ef9c:	77e3      	strb	r3, [r4, #31]
    ef9e:	7625      	strb	r5, [r4, #24]
    efa0:	7665      	strb	r5, [r4, #25]
    efa2:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    efa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    efa6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    efaa:	6263      	str	r3, [r4, #36]	; 0x24
    efac:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    efb0:	f7fc fb2e 	bl	b610 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    efb4:	f7fc f924 	bl	b200 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    efb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    efbc:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    efbe:	62e3      	str	r3, [r4, #44]	; 0x2c
	dummy_thread->base.user_options = K_ESSENTIAL;
    efc0:	f240 1301 	movw	r3, #257	; 0x101
    efc4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    efc8:	ab06      	add	r3, sp, #24
    efca:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
    efcc:	9520      	str	r5, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    efce:	f002 faca 	bl	11566 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    efd2:	2001      	movs	r0, #1
    efd4:	f7ff ff52 	bl	ee7c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    efd8:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    efda:	4c16      	ldr	r4, [pc, #88]	; (f034 <z_cstart+0xc0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    efdc:	f7ff ff4e 	bl	ee7c <z_sys_init_run_level>
	z_sched_init();
    efe0:	f000 fde2 	bl	fba8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    efe4:	4b14      	ldr	r3, [pc, #80]	; (f038 <z_cstart+0xc4>)
	_kernel.ready_q.cache = &z_main_thread;
    efe6:	61f4      	str	r4, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    efe8:	9305      	str	r3, [sp, #20]
    efea:	2301      	movs	r3, #1
    efec:	4913      	ldr	r1, [pc, #76]	; (f03c <z_cstart+0xc8>)
    efee:	9500      	str	r5, [sp, #0]
    eff0:	e9cd 5303 	strd	r5, r3, [sp, #12]
    eff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    eff8:	463b      	mov	r3, r7
    effa:	e9cd 5501 	strd	r5, r5, [sp, #4]
    effe:	4620      	mov	r0, r4
    f000:	f000 f830 	bl	f064 <z_setup_new_thread>
    f004:	7b62      	ldrb	r2, [r4, #13]
    f006:	4606      	mov	r6, r0
    f008:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    f00c:	4620      	mov	r0, r4
    f00e:	7362      	strb	r2, [r4, #13]
    f010:	f002 fd5c 	bl	11acc <z_ready_thread>
	z_init_cpu(0);
    f014:	4628      	mov	r0, r5
    f016:	f7ff ff79 	bl	ef0c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    f01a:	463a      	mov	r2, r7
    f01c:	4631      	mov	r1, r6
    f01e:	4620      	mov	r0, r4
    f020:	f7fc f9e8 	bl	b3f4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    f024:	20002f50 	.word	0x20002f50
    f028:	e000ed00 	.word	0xe000ed00
    f02c:	20001650 	.word	0x20001650
    f030:	0000eec1 	.word	0x0000eec1
    f034:	200013e0 	.word	0x200013e0
    f038:	000125d3 	.word	0x000125d3
    f03c:	20003050 	.word	0x20003050

0000f040 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    f040:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    f042:	4c06      	ldr	r4, [pc, #24]	; (f05c <statics_init+0x1c>)
    f044:	4d06      	ldr	r5, [pc, #24]	; (f060 <statics_init+0x20>)
    f046:	42ac      	cmp	r4, r5
    f048:	d301      	bcc.n	f04e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    f04a:	2000      	movs	r0, #0
    f04c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    f04e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    f052:	4620      	mov	r0, r4
    f054:	f002 fab2 	bl	115bc <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    f058:	3414      	adds	r4, #20
    f05a:	e7f4      	b.n	f046 <statics_init+0x6>
    f05c:	20000423 	.word	0x20000423
    f060:	20000423 	.word	0x20000423

0000f064 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    f064:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    f066:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f068:	7306      	strb	r6, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    f06a:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    f06c:	2604      	movs	r6, #4
    f06e:	7346      	strb	r6, [r0, #13]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    f070:	f100 0558 	add.w	r5, r0, #88	; 0x58

	thread_base->prio = priority;
    f074:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    f076:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    f078:	f022 0207 	bic.w	r2, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    f07c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	stack_ptr = (char *)stack + stack_obj_size;
    f080:	188e      	adds	r6, r1, r2
	thread_base->pended_on = NULL;
    f082:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
    f086:	6085      	str	r5, [r0, #8]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    f088:	e9c0 5506 	strd	r5, r5, [r0, #24]

	thread_base->sched_locked = 0U;
    f08c:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f08e:	9202      	str	r2, [sp, #8]
    f090:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f092:	9201      	str	r2, [sp, #4]
    f094:	9a08      	ldr	r2, [sp, #32]
    f096:	9200      	str	r2, [sp, #0]
    f098:	4632      	mov	r2, r6
{
    f09a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f09c:	f7fc f98e 	bl	b3bc <arch_new_thread>
	if (!_current) {
    f0a0:	4b04      	ldr	r3, [pc, #16]	; (f0b4 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
    f0a2:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    f0a4:	689b      	ldr	r3, [r3, #8]
    f0a6:	b103      	cbz	r3, f0aa <z_setup_new_thread+0x46>
	new_thread->resource_pool = _current->resource_pool;
    f0a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	return stack_ptr;
    f0aa:	66a3      	str	r3, [r4, #104]	; 0x68
}
    f0ac:	4630      	mov	r0, r6
    f0ae:	b004      	add	sp, #16
    f0b0:	bd70      	pop	{r4, r5, r6, pc}
    f0b2:	bf00      	nop
    f0b4:	20001650 	.word	0x20001650

0000f0b8 <z_impl_k_thread_create>:
{
    f0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f0ba:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    f0bc:	2500      	movs	r5, #0
    f0be:	9505      	str	r5, [sp, #20]
    f0c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f0c2:	9504      	str	r5, [sp, #16]
    f0c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    f0c6:	9503      	str	r5, [sp, #12]
    f0c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    f0ca:	9502      	str	r5, [sp, #8]
{
    f0cc:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    f0d0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f0d2:	9501      	str	r5, [sp, #4]
    f0d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    f0d6:	9500      	str	r5, [sp, #0]
{
    f0d8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    f0da:	f7ff ffc3 	bl	f064 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    f0de:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    f0e2:	bf08      	it	eq
    f0e4:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    f0e8:	d005      	beq.n	f0f6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f0ea:	ea56 0307 	orrs.w	r3, r6, r7
    f0ee:	d105      	bne.n	f0fc <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    f0f0:	4620      	mov	r0, r4
    f0f2:	f000 fcd9 	bl	faa8 <z_sched_start>
}
    f0f6:	4620      	mov	r0, r4
    f0f8:	b007      	add	sp, #28
    f0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    f0fc:	4903      	ldr	r1, [pc, #12]	; (f10c <z_impl_k_thread_create+0x54>)
    f0fe:	463a      	mov	r2, r7
    f100:	4633      	mov	r3, r6
    f102:	f104 0018 	add.w	r0, r4, #24
    f106:	f000 fed7 	bl	feb8 <z_add_timeout>
    f10a:	e7f4      	b.n	f0f6 <z_impl_k_thread_create+0x3e>
    f10c:	00011a39 	.word	0x00011a39

0000f110 <z_init_static_threads>:
{
    f110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f114:	4c29      	ldr	r4, [pc, #164]	; (f1bc <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    f116:	4d2a      	ldr	r5, [pc, #168]	; (f1c0 <z_init_static_threads+0xb0>)
{
    f118:	b087      	sub	sp, #28
    f11a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    f11c:	42ae      	cmp	r6, r5
    f11e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    f122:	d30f      	bcc.n	f144 <z_init_static_threads+0x34>
	k_sched_lock();
    f124:	f000 fd10 	bl	fb48 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    f128:	4c24      	ldr	r4, [pc, #144]	; (f1bc <z_init_static_threads+0xac>)
    f12a:	f8df 9098 	ldr.w	r9, [pc, #152]	; f1c4 <z_init_static_threads+0xb4>
    f12e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    f132:	f240 37e7 	movw	r7, #999	; 0x3e7
    f136:	42ac      	cmp	r4, r5
    f138:	d320      	bcc.n	f17c <z_init_static_threads+0x6c>
}
    f13a:	b007      	add	sp, #28
    f13c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    f140:	f000 bd16 	b.w	fb70 <k_sched_unlock>
		z_setup_new_thread(
    f144:	f854 3c04 	ldr.w	r3, [r4, #-4]
    f148:	9305      	str	r3, [sp, #20]
    f14a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    f14e:	9304      	str	r3, [sp, #16]
    f150:	f854 3c14 	ldr.w	r3, [r4, #-20]
    f154:	9303      	str	r3, [sp, #12]
    f156:	f854 3c18 	ldr.w	r3, [r4, #-24]
    f15a:	9302      	str	r3, [sp, #8]
    f15c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    f160:	9301      	str	r3, [sp, #4]
    f162:	f854 3c20 	ldr.w	r3, [r4, #-32]
    f166:	9300      	str	r3, [sp, #0]
    f168:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    f16c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    f170:	f7ff ff78 	bl	f064 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    f174:	f854 3c30 	ldr.w	r3, [r4, #-48]
    f178:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    f17a:	e7ce      	b.n	f11a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    f17c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f17e:	1c5a      	adds	r2, r3, #1
    f180:	d00d      	beq.n	f19e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    f182:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f186:	2100      	movs	r1, #0
    f188:	4638      	mov	r0, r7
    f18a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f18e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    f192:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f196:	d104      	bne.n	f1a2 <z_init_static_threads+0x92>
	z_sched_start(thread);
    f198:	4640      	mov	r0, r8
    f19a:	f000 fc85 	bl	faa8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    f19e:	3430      	adds	r4, #48	; 0x30
    f1a0:	e7c9      	b.n	f136 <z_init_static_threads+0x26>
    f1a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f1a6:	2300      	movs	r3, #0
    f1a8:	f7f0 ff86 	bl	b8 <__aeabi_uldivmod>
    f1ac:	4602      	mov	r2, r0
    f1ae:	460b      	mov	r3, r1
    f1b0:	f108 0018 	add.w	r0, r8, #24
    f1b4:	4649      	mov	r1, r9
    f1b6:	f000 fe7f 	bl	feb8 <z_add_timeout>
    f1ba:	e7f0      	b.n	f19e <z_init_static_threads+0x8e>
    f1bc:	000121d0 	.word	0x000121d0
    f1c0:	000121d0 	.word	0x000121d0
    f1c4:	00011a39 	.word	0x00011a39

0000f1c8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    f1c8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    f1ca:	4c0b      	ldr	r4, [pc, #44]	; (f1f8 <idle+0x30>)
	return !z_sys_post_kernel;
    f1cc:	4d0b      	ldr	r5, [pc, #44]	; (f1fc <idle+0x34>)
	__asm__ volatile(
    f1ce:	f04f 0240 	mov.w	r2, #64	; 0x40
    f1d2:	f3ef 8311 	mrs	r3, BASEPRI
    f1d6:	f382 8812 	msr	BASEPRI_MAX, r2
    f1da:	f3bf 8f6f 	isb	sy
    f1de:	f002 fd3b 	bl	11c58 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    f1e2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    f1e4:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    f1e6:	b913      	cbnz	r3, f1ee <idle+0x26>
	arch_cpu_idle();
    f1e8:	f7fc f810 	bl	b20c <arch_cpu_idle>
}
    f1ec:	e7ef      	b.n	f1ce <idle+0x6>
    f1ee:	f7fb ff39 	bl	b064 <pm_system_suspend>
    f1f2:	2800      	cmp	r0, #0
    f1f4:	d1eb      	bne.n	f1ce <idle+0x6>
    f1f6:	e7f7      	b.n	f1e8 <idle+0x20>
    f1f8:	20001650 	.word	0x20001650
    f1fc:	2000194f 	.word	0x2000194f

0000f200 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    f200:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f204:	4604      	mov	r4, r0
    f206:	4617      	mov	r7, r2
    f208:	461e      	mov	r6, r3
    f20a:	f04f 0340 	mov.w	r3, #64	; 0x40
    f20e:	f3ef 8811 	mrs	r8, BASEPRI
    f212:	f383 8812 	msr	BASEPRI_MAX, r3
    f216:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    f21a:	68c3      	ldr	r3, [r0, #12]
    f21c:	4a33      	ldr	r2, [pc, #204]	; (f2ec <z_impl_k_mutex_lock+0xec>)
    f21e:	b17b      	cbz	r3, f240 <z_impl_k_mutex_lock+0x40>
    f220:	6880      	ldr	r0, [r0, #8]
    f222:	6891      	ldr	r1, [r2, #8]
    f224:	4288      	cmp	r0, r1
    f226:	d019      	beq.n	f25c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    f228:	ea57 0306 	orrs.w	r3, r7, r6
    f22c:	d118      	bne.n	f260 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    f22e:	f388 8811 	msr	BASEPRI, r8
    f232:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    f236:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    f23a:	b002      	add	sp, #8
    f23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    f240:	6891      	ldr	r1, [r2, #8]
    f242:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    f246:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    f248:	3301      	adds	r3, #1
    f24a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    f24c:	6893      	ldr	r3, [r2, #8]
    f24e:	60a3      	str	r3, [r4, #8]
    f250:	f388 8811 	msr	BASEPRI, r8
    f254:	f3bf 8f6f 	isb	sy
		return 0;
    f258:	2000      	movs	r0, #0
    f25a:	e7ee      	b.n	f23a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    f25c:	6921      	ldr	r1, [r4, #16]
    f25e:	e7f2      	b.n	f246 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    f260:	f991 100e 	ldrsb.w	r1, [r1, #14]
    f264:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    f268:	4299      	cmp	r1, r3
    f26a:	bfa8      	it	ge
    f26c:	4619      	movge	r1, r3
    f26e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    f272:	4291      	cmp	r1, r2
    f274:	bfb8      	it	lt
    f276:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    f278:	428b      	cmp	r3, r1
    f27a:	dd2e      	ble.n	f2da <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    f27c:	f002 fa22 	bl	116c4 <adjust_owner_prio.isra.0>
    f280:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    f282:	e9cd 7600 	strd	r7, r6, [sp]
    f286:	481a      	ldr	r0, [pc, #104]	; (f2f0 <z_impl_k_mutex_lock+0xf0>)
    f288:	4622      	mov	r2, r4
    f28a:	4641      	mov	r1, r8
    f28c:	f000 fb96 	bl	f9bc <z_pend_curr>
	if (got_mutex == 0) {
    f290:	2800      	cmp	r0, #0
    f292:	d0e1      	beq.n	f258 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    f294:	f04f 0340 	mov.w	r3, #64	; 0x40
    f298:	f3ef 8611 	mrs	r6, BASEPRI
    f29c:	f383 8812 	msr	BASEPRI_MAX, r3
    f2a0:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    f2a4:	68a0      	ldr	r0, [r4, #8]
    f2a6:	b1d0      	cbz	r0, f2de <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f2a8:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    f2aa:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f2ac:	429c      	cmp	r4, r3
    f2ae:	d00a      	beq.n	f2c6 <z_impl_k_mutex_lock+0xc6>
    f2b0:	b14b      	cbz	r3, f2c6 <z_impl_k_mutex_lock+0xc6>
    f2b2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    f2b6:	4299      	cmp	r1, r3
    f2b8:	bfa8      	it	ge
    f2ba:	4619      	movge	r1, r3
    f2bc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    f2c0:	4299      	cmp	r1, r3
    f2c2:	bfb8      	it	lt
    f2c4:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    f2c6:	f002 f9fd 	bl	116c4 <adjust_owner_prio.isra.0>
    f2ca:	b140      	cbz	r0, f2de <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    f2cc:	4808      	ldr	r0, [pc, #32]	; (f2f0 <z_impl_k_mutex_lock+0xf0>)
    f2ce:	4631      	mov	r1, r6
    f2d0:	f000 fbd8 	bl	fa84 <z_reschedule>
	return -EAGAIN;
    f2d4:	f06f 000a 	mvn.w	r0, #10
    f2d8:	e7af      	b.n	f23a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    f2da:	2500      	movs	r5, #0
    f2dc:	e7d1      	b.n	f282 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    f2de:	2d00      	cmp	r5, #0
    f2e0:	d1f4      	bne.n	f2cc <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    f2e2:	f386 8811 	msr	BASEPRI, r6
    f2e6:	f3bf 8f6f 	isb	sy
    f2ea:	e7f3      	b.n	f2d4 <z_impl_k_mutex_lock+0xd4>
    f2ec:	20001650 	.word	0x20001650
    f2f0:	20001950 	.word	0x20001950

0000f2f4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    f2f4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    f2f6:	6883      	ldr	r3, [r0, #8]
{
    f2f8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    f2fa:	b36b      	cbz	r3, f358 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    f2fc:	4a19      	ldr	r2, [pc, #100]	; (f364 <z_impl_k_mutex_unlock+0x70>)
    f2fe:	6892      	ldr	r2, [r2, #8]
    f300:	4293      	cmp	r3, r2
    f302:	d12c      	bne.n	f35e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    f304:	68c3      	ldr	r3, [r0, #12]
    f306:	2b01      	cmp	r3, #1
    f308:	d903      	bls.n	f312 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    f30a:	3b01      	subs	r3, #1
    f30c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    f30e:	2000      	movs	r0, #0
}
    f310:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    f312:	f04f 0340 	mov.w	r3, #64	; 0x40
    f316:	f3ef 8511 	mrs	r5, BASEPRI
    f31a:	f383 8812 	msr	BASEPRI_MAX, r3
    f31e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    f322:	6901      	ldr	r1, [r0, #16]
    f324:	6880      	ldr	r0, [r0, #8]
    f326:	f002 f9cd 	bl	116c4 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    f32a:	4620      	mov	r0, r4
    f32c:	f002 fc05 	bl	11b3a <z_unpend_first_thread>
	mutex->owner = new_owner;
    f330:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    f332:	b158      	cbz	r0, f34c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    f334:	f990 200e 	ldrsb.w	r2, [r0, #14]
    f338:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    f33a:	2200      	movs	r2, #0
    f33c:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
    f33e:	f002 fbc5 	bl	11acc <z_ready_thread>
		z_reschedule(&lock, key);
    f342:	4809      	ldr	r0, [pc, #36]	; (f368 <z_impl_k_mutex_unlock+0x74>)
    f344:	4629      	mov	r1, r5
    f346:	f000 fb9d 	bl	fa84 <z_reschedule>
    f34a:	e7e0      	b.n	f30e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    f34c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    f34e:	f385 8811 	msr	BASEPRI, r5
    f352:	f3bf 8f6f 	isb	sy
    f356:	e7da      	b.n	f30e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    f358:	f06f 0015 	mvn.w	r0, #21
    f35c:	e7d8      	b.n	f310 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    f35e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f362:	e7d5      	b.n	f310 <z_impl_k_mutex_unlock+0x1c>
    f364:	20001650 	.word	0x20001650
    f368:	20001950 	.word	0x20001950

0000f36c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    f36c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f36e:	4611      	mov	r1, r2
	__asm__ volatile(
    f370:	f04f 0240 	mov.w	r2, #64	; 0x40
    f374:	f3ef 8511 	mrs	r5, BASEPRI
    f378:	f382 8812 	msr	BASEPRI_MAX, r2
    f37c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    f380:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    f382:	b19c      	cbz	r4, f3ac <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    f384:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    f386:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    f388:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    f38c:	4294      	cmp	r4, r2
	list->head = node;
    f38e:	6003      	str	r3, [r0, #0]
	list->tail = node;
    f390:	bf08      	it	eq
    f392:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    f394:	2101      	movs	r1, #1
    f396:	4620      	mov	r0, r4
    f398:	f002 fa02 	bl	117a0 <z_queue_node_peek>
    f39c:	4604      	mov	r4, r0
	__asm__ volatile(
    f39e:	f385 8811 	msr	BASEPRI, r5
    f3a2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    f3a6:	4620      	mov	r0, r4
    f3a8:	b003      	add	sp, #12
    f3aa:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f3ac:	ea51 0203 	orrs.w	r2, r1, r3
    f3b0:	d0f5      	beq.n	f39e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    f3b2:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    f3b6:	e9cd 1300 	strd	r1, r3, [sp]
    f3ba:	4610      	mov	r0, r2
    f3bc:	4629      	mov	r1, r5
    f3be:	f000 fafd 	bl	f9bc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    f3c2:	2800      	cmp	r0, #0
    f3c4:	d1ef      	bne.n	f3a6 <z_impl_k_queue_get+0x3a>
    f3c6:	4b02      	ldr	r3, [pc, #8]	; (f3d0 <z_impl_k_queue_get+0x64>)
    f3c8:	689b      	ldr	r3, [r3, #8]
    f3ca:	695c      	ldr	r4, [r3, #20]
    f3cc:	e7eb      	b.n	f3a6 <z_impl_k_queue_get+0x3a>
    f3ce:	bf00      	nop
    f3d0:	20001650 	.word	0x20001650

0000f3d4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    f3d4:	b538      	push	{r3, r4, r5, lr}
    f3d6:	4604      	mov	r4, r0
	__asm__ volatile(
    f3d8:	f04f 0340 	mov.w	r3, #64	; 0x40
    f3dc:	f3ef 8511 	mrs	r5, BASEPRI
    f3e0:	f383 8812 	msr	BASEPRI_MAX, r3
    f3e4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    f3e8:	f002 fba7 	bl	11b3a <z_unpend_first_thread>

	if (thread != NULL) {
    f3ec:	b148      	cbz	r0, f402 <z_impl_k_sem_give+0x2e>
    f3ee:	2200      	movs	r2, #0
    f3f0:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    f3f2:	f002 fb6b 	bl	11acc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    f3f6:	4629      	mov	r1, r5
    f3f8:	4808      	ldr	r0, [pc, #32]	; (f41c <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    f3fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    f3fe:	f000 bb41 	b.w	fa84 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    f402:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    f406:	429a      	cmp	r2, r3
    f408:	bf18      	it	ne
    f40a:	3301      	addne	r3, #1
    f40c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    f40e:	2102      	movs	r1, #2
    f410:	f104 0010 	add.w	r0, r4, #16
    f414:	f002 fdc6 	bl	11fa4 <z_handle_obj_poll_events>
}
    f418:	e7ed      	b.n	f3f6 <z_impl_k_sem_give+0x22>
    f41a:	bf00      	nop
    f41c:	20001950 	.word	0x20001950

0000f420 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    f420:	b513      	push	{r0, r1, r4, lr}
    f422:	f04f 0440 	mov.w	r4, #64	; 0x40
    f426:	f3ef 8111 	mrs	r1, BASEPRI
    f42a:	f384 8812 	msr	BASEPRI_MAX, r4
    f42e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    f432:	6884      	ldr	r4, [r0, #8]
    f434:	b144      	cbz	r4, f448 <z_impl_k_sem_take+0x28>
		sem->count--;
    f436:	3c01      	subs	r4, #1
    f438:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    f43a:	f381 8811 	msr	BASEPRI, r1
    f43e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    f442:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    f444:	b002      	add	sp, #8
    f446:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f448:	ea52 0403 	orrs.w	r4, r2, r3
    f44c:	d106      	bne.n	f45c <z_impl_k_sem_take+0x3c>
    f44e:	f381 8811 	msr	BASEPRI, r1
    f452:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    f456:	f06f 000f 	mvn.w	r0, #15
    f45a:	e7f3      	b.n	f444 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    f45c:	e9cd 2300 	strd	r2, r3, [sp]
    f460:	4602      	mov	r2, r0
    f462:	4802      	ldr	r0, [pc, #8]	; (f46c <z_impl_k_sem_take+0x4c>)
    f464:	f000 faaa 	bl	f9bc <z_pend_curr>
	return ret;
    f468:	e7ec      	b.n	f444 <z_impl_k_sem_take+0x24>
    f46a:	bf00      	nop
    f46c:	20001950 	.word	0x20001950

0000f470 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    f470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    f474:	4e48      	ldr	r6, [pc, #288]	; (f598 <work_queue_main+0x128>)
    f476:	b085      	sub	sp, #20
    f478:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    f47a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    f47e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    f482:	f04f 0340 	mov.w	r3, #64	; 0x40
    f486:	f3ef 8711 	mrs	r7, BASEPRI
    f48a:	f383 8812 	msr	BASEPRI_MAX, r3
    f48e:	f3bf 8f6f 	isb	sy
    f492:	6fa5      	ldr	r5, [r4, #120]	; 0x78
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    f494:	b98d      	cbnz	r5, f4ba <work_queue_main+0x4a>
		} else if (flag_test_and_clear(&queue->flags,
    f496:	2102      	movs	r1, #2
    f498:	f104 0090 	add.w	r0, r4, #144	; 0x90
    f49c:	f002 f9f1 	bl	11882 <flag_test_and_clear>
    f4a0:	2800      	cmp	r0, #0
    f4a2:	d140      	bne.n	f526 <work_queue_main+0xb6>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    f4a4:	2300      	movs	r3, #0
    f4a6:	e9cd 8900 	strd	r8, r9, [sp]
    f4aa:	9302      	str	r3, [sp, #8]
    f4ac:	f104 0280 	add.w	r2, r4, #128	; 0x80
    f4b0:	4639      	mov	r1, r7
    f4b2:	483a      	ldr	r0, [pc, #232]	; (f59c <work_queue_main+0x12c>)
    f4b4:	f000 fc86 	bl	fdc4 <z_sched_wait>
			continue;
    f4b8:	e7e3      	b.n	f482 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f4ba:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
	return node->next;
    f4bc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    f4be:	67a3      	str	r3, [r4, #120]	; 0x78
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f4c0:	4295      	cmp	r5, r2
	list->tail = node;
    f4c2:	bf08      	it	eq
    f4c4:	67e3      	streq	r3, [r4, #124]	; 0x7c
	*flagp |= BIT(bit);
    f4c6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    f4ca:	f043 0302 	orr.w	r3, r3, #2
    f4ce:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	*flagp &= ~BIT(bit);
    f4d2:	68eb      	ldr	r3, [r5, #12]
    f4d4:	f023 0304 	bic.w	r3, r3, #4
    f4d8:	f043 0301 	orr.w	r3, r3, #1
    f4dc:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    f4de:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    f4e0:	f387 8811 	msr	BASEPRI, r7
    f4e4:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    f4e8:	4628      	mov	r0, r5
    f4ea:	4798      	blx	r3
	__asm__ volatile(
    f4ec:	f04f 0340 	mov.w	r3, #64	; 0x40
    f4f0:	f3ef 8b11 	mrs	fp, BASEPRI
    f4f4:	f383 8812 	msr	BASEPRI_MAX, r3
    f4f8:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    f4fc:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    f4fe:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    f500:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    f504:	d419      	bmi.n	f53a <work_queue_main+0xca>
	*flagp &= ~BIT(bit);
    f506:	60ea      	str	r2, [r5, #12]
    f508:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    f50c:	f023 0302 	bic.w	r3, r3, #2
    f510:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	__asm__ volatile(
    f514:	f38b 8811 	msr	BASEPRI, fp
    f518:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    f51c:	05db      	lsls	r3, r3, #23
    f51e:	d4b0      	bmi.n	f482 <work_queue_main+0x12>
	z_impl_k_yield();
    f520:	f000 fb4e 	bl	fbc0 <z_impl_k_yield>
}
    f524:	e7ad      	b.n	f482 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    f526:	f104 0588 	add.w	r5, r4, #136	; 0x88
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    f52a:	2200      	movs	r2, #0
    f52c:	2101      	movs	r1, #1
    f52e:	4628      	mov	r0, r5
    f530:	f002 fb59 	bl	11be6 <z_sched_wake>
    f534:	2800      	cmp	r0, #0
    f536:	d1f8      	bne.n	f52a <work_queue_main+0xba>
    f538:	e7b4      	b.n	f4a4 <work_queue_main+0x34>
	return list->head;
    f53a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    f53c:	f023 0303 	bic.w	r3, r3, #3
    f540:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    f542:	2800      	cmp	r0, #0
    f544:	d0e0      	beq.n	f508 <work_queue_main+0x98>
	return node->next;
    f546:	2700      	movs	r7, #0
    f548:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    f54c:	463b      	mov	r3, r7
    f54e:	2800      	cmp	r0, #0
    f550:	d0da      	beq.n	f508 <work_queue_main+0x98>
		if (wc->work == work) {
    f552:	6842      	ldr	r2, [r0, #4]
    f554:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    f556:	4601      	mov	r1, r0
		if (wc->work == work) {
    f558:	d10c      	bne.n	f574 <work_queue_main+0x104>
	return node->next;
    f55a:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    f55c:	b99f      	cbnz	r7, f586 <work_queue_main+0x116>
    f55e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    f560:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    f562:	4282      	cmp	r2, r0
    f564:	d100      	bne.n	f568 <work_queue_main+0xf8>
	list->tail = node;
    f566:	6071      	str	r1, [r6, #4]
	parent->next = child;
    f568:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    f56c:	f7ff ff32 	bl	f3d4 <z_impl_k_sem_give>
}
    f570:	4639      	mov	r1, r7
    f572:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    f574:	f1ba 0f00 	cmp.w	sl, #0
    f578:	d00b      	beq.n	f592 <work_queue_main+0x122>
	return node->next;
    f57a:	f8da 2000 	ldr.w	r2, [sl]
    f57e:	4650      	mov	r0, sl
    f580:	460f      	mov	r7, r1
    f582:	4692      	mov	sl, r2
    f584:	e7e3      	b.n	f54e <work_queue_main+0xde>
	parent->next = child;
    f586:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    f588:	6872      	ldr	r2, [r6, #4]
    f58a:	4282      	cmp	r2, r0
	list->tail = node;
    f58c:	bf08      	it	eq
    f58e:	6077      	streq	r7, [r6, #4]
}
    f590:	e7ea      	b.n	f568 <work_queue_main+0xf8>
    f592:	4652      	mov	r2, sl
    f594:	e7f3      	b.n	f57e <work_queue_main+0x10e>
    f596:	bf00      	nop
    f598:	20001678 	.word	0x20001678
    f59c:	20001950 	.word	0x20001950

0000f5a0 <submit_to_queue_locked>:
{
    f5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    f5a2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    f5a4:	079a      	lsls	r2, r3, #30
{
    f5a6:	4604      	mov	r4, r0
    f5a8:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    f5aa:	f3c3 0640 	ubfx	r6, r3, #1, #1
    f5ae:	d42c      	bmi.n	f60a <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    f5b0:	075b      	lsls	r3, r3, #29
    f5b2:	d41a      	bmi.n	f5ea <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    f5b4:	680b      	ldr	r3, [r1, #0]
    f5b6:	b90b      	cbnz	r3, f5bc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    f5b8:	6883      	ldr	r3, [r0, #8]
    f5ba:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    f5bc:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    f5be:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    f5c0:	bf44      	itt	mi
    f5c2:	68a3      	ldrmi	r3, [r4, #8]
    f5c4:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    f5c6:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    f5c8:	bf4c      	ite	mi
    f5ca:	2602      	movmi	r6, #2
		ret = 1;
    f5cc:	2601      	movpl	r6, #1
	if (queue == NULL) {
    f5ce:	2d00      	cmp	r5, #0
    f5d0:	d038      	beq.n	f644 <submit_to_queue_locked+0xa4>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    f5d2:	4b1e      	ldr	r3, [pc, #120]	; (f64c <submit_to_queue_locked+0xac>)
    f5d4:	689b      	ldr	r3, [r3, #8]
    f5d6:	42ab      	cmp	r3, r5
    f5d8:	d00a      	beq.n	f5f0 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    f5da:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    f5de:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    f5e0:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    f5e4:	d414      	bmi.n	f610 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    f5e6:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    f5ea:	2300      	movs	r3, #0
    f5ec:	603b      	str	r3, [r7, #0]
	return ret;
    f5ee:	e024      	b.n	f63a <submit_to_queue_locked+0x9a>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    f5f0:	f002 f856 	bl	116a0 <k_is_in_isr>
    f5f4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    f5f8:	2800      	cmp	r0, #0
    f5fa:	d1f0      	bne.n	f5de <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    f5fc:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    f5fe:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    f602:	d5f0      	bpl.n	f5e6 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    f604:	b152      	cbz	r2, f61c <submit_to_queue_locked+0x7c>
    f606:	075b      	lsls	r3, r3, #29
    f608:	d408      	bmi.n	f61c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    f60a:	f06f 060f 	mvn.w	r6, #15
    f60e:	e7ec      	b.n	f5ea <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    f610:	2a00      	cmp	r2, #0
    f612:	d1fa      	bne.n	f60a <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    f614:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    f618:	2b00      	cmp	r3, #0
    f61a:	d1f6      	bne.n	f60a <submit_to_queue_locked+0x6a>
	parent->next = child;
    f61c:	2300      	movs	r3, #0
    f61e:	6023      	str	r3, [r4, #0]
	return list->tail;
    f620:	6feb      	ldr	r3, [r5, #124]	; 0x7c
Z_GENLIST_APPEND(slist, snode)
    f622:	b963      	cbnz	r3, f63e <submit_to_queue_locked+0x9e>
	list->head = node;
    f624:	e9c5 441e 	strd	r4, r4, [r5, #120]	; 0x78
		(void)notify_queue_locked(queue);
    f628:	4628      	mov	r0, r5
    f62a:	f002 f943 	bl	118b4 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    f62e:	68e3      	ldr	r3, [r4, #12]
    f630:	f043 0304 	orr.w	r3, r3, #4
    f634:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    f636:	683b      	ldr	r3, [r7, #0]
    f638:	60a3      	str	r3, [r4, #8]
}
    f63a:	4630      	mov	r0, r6
    f63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    f63e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    f640:	67ec      	str	r4, [r5, #124]	; 0x7c
}
    f642:	e7f1      	b.n	f628 <submit_to_queue_locked+0x88>
		return -EINVAL;
    f644:	f06f 0615 	mvn.w	r6, #21
    f648:	e7cf      	b.n	f5ea <submit_to_queue_locked+0x4a>
    f64a:	bf00      	nop
    f64c:	20001650 	.word	0x20001650

0000f650 <k_work_submit>:
{
    f650:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    f652:	4801      	ldr	r0, [pc, #4]	; (f658 <k_work_submit+0x8>)
    f654:	f002 b99e 	b.w	11994 <k_work_submit_to_queue>
    f658:	20001460 	.word	0x20001460

0000f65c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    f65c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f65e:	b089      	sub	sp, #36	; 0x24
    f660:	4604      	mov	r4, r0
	list->head = NULL;
    f662:	2000      	movs	r0, #0
	list->tail = NULL;
    f664:	e9c4 001e 	strd	r0, r0, [r4, #120]	; 0x78
    f668:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    f66a:	f104 0080 	add.w	r0, r4, #128	; 0x80
	list->tail = (sys_dnode_t *)list;
    f66e:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    f672:	f104 0088 	add.w	r0, r4, #136	; 0x88
    f676:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    f67a:	b31d      	cbz	r5, f6c4 <k_work_queue_start+0x68>
    f67c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    f67e:	2800      	cmp	r0, #0
    f680:	f240 1001 	movw	r0, #257	; 0x101
    f684:	bf08      	it	eq
    f686:	2001      	moveq	r0, #1
	*flagp = flags;
    f688:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f68c:	2000      	movs	r0, #0
    f68e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    f692:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    f696:	e9cd 3003 	strd	r3, r0, [sp, #12]
    f69a:	e9cd 0001 	strd	r0, r0, [sp, #4]
    f69e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    f6a2:	4b09      	ldr	r3, [pc, #36]	; (f6c8 <k_work_queue_start+0x6c>)
    f6a4:	9400      	str	r4, [sp, #0]
    f6a6:	4620      	mov	r0, r4
    f6a8:	f7ff fd06 	bl	f0b8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    f6ac:	b125      	cbz	r5, f6b8 <k_work_queue_start+0x5c>
    f6ae:	6829      	ldr	r1, [r5, #0]
    f6b0:	b111      	cbz	r1, f6b8 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    f6b2:	4620      	mov	r0, r4
    f6b4:	f001 fffa 	bl	116ac <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    f6b8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    f6ba:	b009      	add	sp, #36	; 0x24
    f6bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    f6c0:	f001 bff7 	b.w	116b2 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    f6c4:	2001      	movs	r0, #1
    f6c6:	e7df      	b.n	f688 <k_work_queue_start+0x2c>
    f6c8:	0000f471 	.word	0x0000f471

0000f6cc <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
    f6cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f6ce:	460c      	mov	r4, r1
    f6d0:	9001      	str	r0, [sp, #4]
    f6d2:	4616      	mov	r6, r2
    f6d4:	461d      	mov	r5, r3
	__asm__ volatile(
    f6d6:	f04f 0340 	mov.w	r3, #64	; 0x40
    f6da:	f3ef 8711 	mrs	r7, BASEPRI
    f6de:	f383 8812 	msr	BASEPRI_MAX, r3
    f6e2:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
    f6e6:	4608      	mov	r0, r1
    f6e8:	f002 f8d6 	bl	11898 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f6ec:	ea55 0306 	orrs.w	r3, r5, r6
    f6f0:	d109      	bne.n	f706 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
    f6f2:	a901      	add	r1, sp, #4
    f6f4:	4620      	mov	r0, r4
    f6f6:	f7ff ff53 	bl	f5a0 <submit_to_queue_locked>
	__asm__ volatile(
    f6fa:	f387 8811 	msr	BASEPRI, r7
    f6fe:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    f702:	b003      	add	sp, #12
    f704:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
    f706:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    f708:	4906      	ldr	r1, [pc, #24]	; (f724 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
    f70a:	f043 0308 	orr.w	r3, r3, #8
    f70e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
    f710:	9b01      	ldr	r3, [sp, #4]
    f712:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    f714:	f104 0010 	add.w	r0, r4, #16
    f718:	4632      	mov	r2, r6
    f71a:	462b      	mov	r3, r5
    f71c:	f000 fbcc 	bl	feb8 <z_add_timeout>
	return ret;
    f720:	2001      	movs	r0, #1
    f722:	e7ea      	b.n	f6fa <k_work_reschedule_for_queue+0x2e>
    f724:	0001191d 	.word	0x0001191d

0000f728 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
    f728:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    f72a:	4801      	ldr	r0, [pc, #4]	; (f730 <k_work_reschedule+0x8>)
    f72c:	f7ff bfce 	b.w	f6cc <k_work_reschedule_for_queue>
    f730:	20001460 	.word	0x20001460

0000f734 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    f734:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    f736:	4d07      	ldr	r5, [pc, #28]	; (f754 <z_reset_time_slice+0x20>)
    f738:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    f73a:	b154      	cbz	r4, f752 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    f73c:	f7fe fa30 	bl	dba0 <sys_clock_elapsed>
    f740:	4b05      	ldr	r3, [pc, #20]	; (f758 <z_reset_time_slice+0x24>)
    f742:	4404      	add	r4, r0
    f744:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    f746:	6828      	ldr	r0, [r5, #0]
    f748:	2100      	movs	r1, #0
	}
}
    f74a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    f74e:	f002 ba93 	b.w	11c78 <z_set_timeout_expiry>
}
    f752:	bd38      	pop	{r3, r4, r5, pc}
    f754:	20001688 	.word	0x20001688
    f758:	20001650 	.word	0x20001650

0000f75c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    f75c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    f75e:	4d0d      	ldr	r5, [pc, #52]	; (f794 <update_cache+0x38>)
    f760:	462b      	mov	r3, r5
    f762:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f766:	429c      	cmp	r4, r3
    f768:	d000      	beq.n	f76c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    f76a:	b904      	cbnz	r4, f76e <update_cache+0x12>
    f76c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    f76e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    f770:	b938      	cbnz	r0, f782 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    f772:	7b5a      	ldrb	r2, [r3, #13]
    f774:	06d2      	lsls	r2, r2, #27
    f776:	d104      	bne.n	f782 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    f778:	69a2      	ldr	r2, [r4, #24]
    f77a:	b912      	cbnz	r2, f782 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    f77c:	89da      	ldrh	r2, [r3, #14]
    f77e:	2a7f      	cmp	r2, #127	; 0x7f
    f780:	d805      	bhi.n	f78e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    f782:	429c      	cmp	r4, r3
    f784:	d002      	beq.n	f78c <update_cache+0x30>
			z_reset_time_slice(thread);
    f786:	4620      	mov	r0, r4
    f788:	f7ff ffd4 	bl	f734 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    f78c:	4623      	mov	r3, r4
    f78e:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    f790:	bd38      	pop	{r3, r4, r5, pc}
    f792:	bf00      	nop
    f794:	20001650 	.word	0x20001650

0000f798 <move_thread_to_end_of_prio_q>:
{
    f798:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    f79a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    f79e:	7b43      	ldrb	r3, [r0, #13]
    f7a0:	2a00      	cmp	r2, #0
{
    f7a2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    f7a4:	da04      	bge.n	f7b0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f7aa:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    f7ac:	f002 f929 	bl	11a02 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    f7b0:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    f7b2:	4a15      	ldr	r2, [pc, #84]	; (f808 <move_thread_to_end_of_prio_q+0x70>)
    f7b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f7b8:	4610      	mov	r0, r2
    f7ba:	734b      	strb	r3, [r1, #13]
    f7bc:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    f7c0:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f7c2:	4283      	cmp	r3, r0
    f7c4:	bf08      	it	eq
    f7c6:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f7c8:	b923      	cbnz	r3, f7d4 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    f7ca:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    f7ce:	6021      	str	r1, [r4, #0]
	list->tail = node;
    f7d0:	6251      	str	r1, [r2, #36]	; 0x24
}
    f7d2:	e00c      	b.n	f7ee <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    f7d4:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    f7d8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    f7dc:	42b5      	cmp	r5, r6
    f7de:	d00e      	beq.n	f7fe <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f7e0:	42ae      	cmp	r6, r5
    f7e2:	dd0c      	ble.n	f7fe <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    f7e4:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    f7e6:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    f7ea:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    f7ec:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    f7ee:	6890      	ldr	r0, [r2, #8]
    f7f0:	1a43      	subs	r3, r0, r1
    f7f2:	4258      	negs	r0, r3
}
    f7f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    f7f8:	4158      	adcs	r0, r3
    f7fa:	f7ff bfaf 	b.w	f75c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    f7fe:	429c      	cmp	r4, r3
    f800:	d0e3      	beq.n	f7ca <move_thread_to_end_of_prio_q+0x32>
    f802:	681b      	ldr	r3, [r3, #0]
    f804:	e7e0      	b.n	f7c8 <move_thread_to_end_of_prio_q+0x30>
    f806:	bf00      	nop
    f808:	20001650 	.word	0x20001650

0000f80c <ready_thread>:
{
    f80c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    f80e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    f812:	7b42      	ldrb	r2, [r0, #13]
    f814:	2b00      	cmp	r3, #0
    f816:	db29      	blt.n	f86c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    f818:	06d3      	lsls	r3, r2, #27
    f81a:	d127      	bne.n	f86c <ready_thread+0x60>
	return node->next != NULL;
    f81c:	6983      	ldr	r3, [r0, #24]
    f81e:	bb2b      	cbnz	r3, f86c <ready_thread+0x60>
	return list->head == list;
    f820:	4913      	ldr	r1, [pc, #76]	; (f870 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    f822:	f062 027f 	orn	r2, r2, #127	; 0x7f
    f826:	7342      	strb	r2, [r0, #13]
    f828:	460a      	mov	r2, r1
    f82a:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f82e:	4294      	cmp	r4, r2
    f830:	bf18      	it	ne
    f832:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    f834:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f836:	b923      	cbnz	r3, f842 <ready_thread+0x36>
	node->prev = tail;
    f838:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    f83c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    f83e:	6248      	str	r0, [r1, #36]	; 0x24
}
    f840:	e00c      	b.n	f85c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    f842:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    f846:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    f84a:	42b5      	cmp	r5, r6
    f84c:	d00a      	beq.n	f864 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f84e:	42ae      	cmp	r6, r5
    f850:	dd08      	ble.n	f864 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    f852:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    f854:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    f858:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    f85a:	6058      	str	r0, [r3, #4]
}
    f85c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    f85e:	2000      	movs	r0, #0
    f860:	f7ff bf7c 	b.w	f75c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    f864:	42a3      	cmp	r3, r4
    f866:	d0e7      	beq.n	f838 <ready_thread+0x2c>
    f868:	681b      	ldr	r3, [r3, #0]
    f86a:	e7e4      	b.n	f836 <ready_thread+0x2a>
}
    f86c:	bc70      	pop	{r4, r5, r6}
    f86e:	4770      	bx	lr
    f870:	20001650 	.word	0x20001650

0000f874 <unready_thread>:
{
    f874:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    f876:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    f87a:	7b43      	ldrb	r3, [r0, #13]
    f87c:	2a00      	cmp	r2, #0
{
    f87e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    f880:	da04      	bge.n	f88c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f886:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    f888:	f002 f8bb 	bl	11a02 <sys_dlist_remove>
	update_cache(thread == _current);
    f88c:	4b04      	ldr	r3, [pc, #16]	; (f8a0 <unready_thread+0x2c>)
    f88e:	6898      	ldr	r0, [r3, #8]
    f890:	1a43      	subs	r3, r0, r1
    f892:	4258      	negs	r0, r3
    f894:	4158      	adcs	r0, r3
}
    f896:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    f89a:	f7ff bf5f 	b.w	f75c <update_cache>
    f89e:	bf00      	nop
    f8a0:	20001650 	.word	0x20001650

0000f8a4 <pend_locked>:
{
    f8a4:	b570      	push	{r4, r5, r6, lr}
    f8a6:	4615      	mov	r5, r2
    f8a8:	461c      	mov	r4, r3
    f8aa:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    f8ac:	f002 f8e6 	bl	11a7c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f8b0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    f8b4:	bf08      	it	eq
    f8b6:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    f8ba:	d008      	beq.n	f8ce <pend_locked+0x2a>
    f8bc:	462a      	mov	r2, r5
    f8be:	4623      	mov	r3, r4
    f8c0:	f106 0018 	add.w	r0, r6, #24
    f8c4:	4902      	ldr	r1, [pc, #8]	; (f8d0 <pend_locked+0x2c>)
}
    f8c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f8ca:	f000 baf5 	b.w	feb8 <z_add_timeout>
    f8ce:	bd70      	pop	{r4, r5, r6, pc}
    f8d0:	00011a39 	.word	0x00011a39

0000f8d4 <k_sched_time_slice_set>:
{
    f8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f8d6:	4604      	mov	r4, r0
    f8d8:	460d      	mov	r5, r1
	__asm__ volatile(
    f8da:	f04f 0340 	mov.w	r3, #64	; 0x40
    f8de:	f3ef 8711 	mrs	r7, BASEPRI
    f8e2:	f383 8812 	msr	BASEPRI_MAX, r3
    f8e6:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    f8ea:	2600      	movs	r6, #0
    f8ec:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    f8f0:	f240 30e7 	movw	r0, #999	; 0x3e7
    f8f4:	4631      	mov	r1, r6
    f8f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f8fa:	2300      	movs	r3, #0
    f8fc:	fbe4 010c 	umlal	r0, r1, r4, ip
    f900:	f7f0 fbda 	bl	b8 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    f904:	42b4      	cmp	r4, r6
    f906:	dd02      	ble.n	f90e <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    f908:	2802      	cmp	r0, #2
    f90a:	bfb8      	it	lt
    f90c:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    f90e:	4a07      	ldr	r2, [pc, #28]	; (f92c <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    f910:	4b07      	ldr	r3, [pc, #28]	; (f930 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    f912:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    f914:	4a07      	ldr	r2, [pc, #28]	; (f934 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    f916:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    f918:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    f91a:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    f91c:	f7ff ff0a 	bl	f734 <z_reset_time_slice>
	__asm__ volatile(
    f920:	f387 8811 	msr	BASEPRI, r7
    f924:	f3bf 8f6f 	isb	sy
}
    f928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f92a:	bf00      	nop
    f92c:	20001688 	.word	0x20001688
    f930:	20001650 	.word	0x20001650
    f934:	20001684 	.word	0x20001684

0000f938 <z_time_slice>:
{
    f938:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    f93a:	f04f 0340 	mov.w	r3, #64	; 0x40
    f93e:	f3ef 8511 	mrs	r5, BASEPRI
    f942:	f383 8812 	msr	BASEPRI_MAX, r3
    f946:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    f94a:	4b17      	ldr	r3, [pc, #92]	; (f9a8 <z_time_slice+0x70>)
    f94c:	4a17      	ldr	r2, [pc, #92]	; (f9ac <z_time_slice+0x74>)
    f94e:	689c      	ldr	r4, [r3, #8]
    f950:	6811      	ldr	r1, [r2, #0]
    f952:	428c      	cmp	r4, r1
    f954:	d107      	bne.n	f966 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    f956:	4620      	mov	r0, r4
    f958:	f7ff feec 	bl	f734 <z_reset_time_slice>
	__asm__ volatile(
    f95c:	f385 8811 	msr	BASEPRI, r5
    f960:	f3bf 8f6f 	isb	sy
}
    f964:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    f966:	2100      	movs	r1, #0
    f968:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    f96a:	4a11      	ldr	r2, [pc, #68]	; (f9b0 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    f96c:	6812      	ldr	r2, [r2, #0]
    f96e:	b1c2      	cbz	r2, f9a2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    f970:	89e2      	ldrh	r2, [r4, #14]
    f972:	2a7f      	cmp	r2, #127	; 0x7f
    f974:	d815      	bhi.n	f9a2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    f976:	7b62      	ldrb	r2, [r4, #13]
    f978:	06d2      	lsls	r2, r2, #27
    f97a:	d112      	bne.n	f9a2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    f97c:	4a0d      	ldr	r2, [pc, #52]	; (f9b4 <z_time_slice+0x7c>)
    f97e:	f994 100e 	ldrsb.w	r1, [r4, #14]
    f982:	6812      	ldr	r2, [r2, #0]
    f984:	4291      	cmp	r1, r2
    f986:	db0c      	blt.n	f9a2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    f988:	4a0b      	ldr	r2, [pc, #44]	; (f9b8 <z_time_slice+0x80>)
    f98a:	4294      	cmp	r4, r2
    f98c:	d009      	beq.n	f9a2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    f98e:	691a      	ldr	r2, [r3, #16]
    f990:	4282      	cmp	r2, r0
    f992:	dc03      	bgt.n	f99c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    f994:	4620      	mov	r0, r4
    f996:	f7ff feff 	bl	f798 <move_thread_to_end_of_prio_q>
    f99a:	e7dc      	b.n	f956 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    f99c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    f99e:	611a      	str	r2, [r3, #16]
    f9a0:	e7dc      	b.n	f95c <z_time_slice+0x24>
    f9a2:	2200      	movs	r2, #0
    f9a4:	e7fb      	b.n	f99e <z_time_slice+0x66>
    f9a6:	bf00      	nop
    f9a8:	20001650 	.word	0x20001650
    f9ac:	20001680 	.word	0x20001680
    f9b0:	20001688 	.word	0x20001688
    f9b4:	20001684 	.word	0x20001684
    f9b8:	20001368 	.word	0x20001368

0000f9bc <z_pend_curr>:
{
    f9bc:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    f9be:	480c      	ldr	r0, [pc, #48]	; (f9f0 <z_pend_curr+0x34>)
    f9c0:	4d0c      	ldr	r5, [pc, #48]	; (f9f4 <z_pend_curr+0x38>)
    f9c2:	6886      	ldr	r6, [r0, #8]
    f9c4:	602e      	str	r6, [r5, #0]
{
    f9c6:	460c      	mov	r4, r1
    f9c8:	4611      	mov	r1, r2
    f9ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    f9ce:	f04f 0640 	mov.w	r6, #64	; 0x40
    f9d2:	f3ef 8511 	mrs	r5, BASEPRI
    f9d6:	f386 8812 	msr	BASEPRI_MAX, r6
    f9da:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    f9de:	6880      	ldr	r0, [r0, #8]
    f9e0:	f7ff ff60 	bl	f8a4 <pend_locked>
	ret = arch_swap(key);
    f9e4:	4620      	mov	r0, r4
}
    f9e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f9ea:	f7fb bc99 	b.w	b320 <arch_swap>
    f9ee:	bf00      	nop
    f9f0:	20001650 	.word	0x20001650
    f9f4:	20001680 	.word	0x20001680

0000f9f8 <z_set_prio>:
{
    f9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f9fa:	4604      	mov	r4, r0
    f9fc:	f04f 0340 	mov.w	r3, #64	; 0x40
    fa00:	f3ef 8611 	mrs	r6, BASEPRI
    fa04:	f383 8812 	msr	BASEPRI_MAX, r3
    fa08:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    fa0c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    fa0e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    fa10:	b249      	sxtb	r1, r1
    fa12:	d119      	bne.n	fa48 <z_set_prio+0x50>
	return node->next != NULL;
    fa14:	6985      	ldr	r5, [r0, #24]
    fa16:	b9bd      	cbnz	r5, fa48 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fa18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    fa1c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    fa1e:	f001 fff0 	bl	11a02 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    fa22:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    fa24:	4a16      	ldr	r2, [pc, #88]	; (fa80 <z_set_prio+0x88>)
				thread->base.prio = prio;
    fa26:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    fa28:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fa2c:	7343      	strb	r3, [r0, #13]
    fa2e:	4613      	mov	r3, r2
    fa30:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fa34:	4298      	cmp	r0, r3
    fa36:	bf18      	it	ne
    fa38:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    fa3a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fa3c:	b95d      	cbnz	r5, fa56 <z_set_prio+0x5e>
	node->prev = tail;
    fa3e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    fa42:	6004      	str	r4, [r0, #0]
	list->tail = node;
    fa44:	6254      	str	r4, [r2, #36]	; 0x24
}
    fa46:	e011      	b.n	fa6c <z_set_prio+0x74>
			thread->base.prio = prio;
    fa48:	73a1      	strb	r1, [r4, #14]
    fa4a:	2000      	movs	r0, #0
	__asm__ volatile(
    fa4c:	f386 8811 	msr	BASEPRI, r6
    fa50:	f3bf 8f6f 	isb	sy
}
    fa54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    fa56:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    fa5a:	42b9      	cmp	r1, r7
    fa5c:	d00b      	beq.n	fa76 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    fa5e:	428f      	cmp	r7, r1
    fa60:	dd09      	ble.n	fa76 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    fa62:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    fa64:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    fa68:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    fa6a:	606c      	str	r4, [r5, #4]
			update_cache(1);
    fa6c:	2001      	movs	r0, #1
    fa6e:	f7ff fe75 	bl	f75c <update_cache>
    fa72:	2001      	movs	r0, #1
    fa74:	e7ea      	b.n	fa4c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    fa76:	42a8      	cmp	r0, r5
    fa78:	d0e1      	beq.n	fa3e <z_set_prio+0x46>
    fa7a:	682d      	ldr	r5, [r5, #0]
    fa7c:	e7de      	b.n	fa3c <z_set_prio+0x44>
    fa7e:	bf00      	nop
    fa80:	20001650 	.word	0x20001650

0000fa84 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    fa84:	b949      	cbnz	r1, fa9a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    fa86:	f3ef 8005 	mrs	r0, IPSR
    fa8a:	b930      	cbnz	r0, fa9a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    fa8c:	4b05      	ldr	r3, [pc, #20]	; (faa4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    fa8e:	69da      	ldr	r2, [r3, #28]
    fa90:	689b      	ldr	r3, [r3, #8]
    fa92:	429a      	cmp	r2, r3
    fa94:	d001      	beq.n	fa9a <z_reschedule+0x16>
    fa96:	f7fb bc43 	b.w	b320 <arch_swap>
    fa9a:	f381 8811 	msr	BASEPRI, r1
    fa9e:	f3bf 8f6f 	isb	sy
}
    faa2:	4770      	bx	lr
    faa4:	20001650 	.word	0x20001650

0000faa8 <z_sched_start>:
{
    faa8:	b510      	push	{r4, lr}
	__asm__ volatile(
    faaa:	f04f 0240 	mov.w	r2, #64	; 0x40
    faae:	f3ef 8411 	mrs	r4, BASEPRI
    fab2:	f382 8812 	msr	BASEPRI_MAX, r2
    fab6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    faba:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    fabc:	0751      	lsls	r1, r2, #29
    fabe:	d404      	bmi.n	faca <z_sched_start+0x22>
	__asm__ volatile(
    fac0:	f384 8811 	msr	BASEPRI, r4
    fac4:	f3bf 8f6f 	isb	sy
}
    fac8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    faca:	f022 0204 	bic.w	r2, r2, #4
    face:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    fad0:	f7ff fe9c 	bl	f80c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    fad4:	4621      	mov	r1, r4
    fad6:	4802      	ldr	r0, [pc, #8]	; (fae0 <z_sched_start+0x38>)
}
    fad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    fadc:	f7ff bfd2 	b.w	fa84 <z_reschedule>
    fae0:	20001950 	.word	0x20001950

0000fae4 <z_impl_k_thread_suspend>:
{
    fae4:	b570      	push	{r4, r5, r6, lr}
    fae6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    fae8:	3018      	adds	r0, #24
    faea:	f002 f89f 	bl	11c2c <z_abort_timeout>
	__asm__ volatile(
    faee:	f04f 0340 	mov.w	r3, #64	; 0x40
    faf2:	f3ef 8611 	mrs	r6, BASEPRI
    faf6:	f383 8812 	msr	BASEPRI_MAX, r3
    fafa:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    fafe:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    fb02:	7b63      	ldrb	r3, [r4, #13]
    fb04:	2a00      	cmp	r2, #0
    fb06:	da05      	bge.n	fb14 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fb08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    fb0c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    fb0e:	4620      	mov	r0, r4
    fb10:	f001 ff77 	bl	11a02 <sys_dlist_remove>
		update_cache(thread == _current);
    fb14:	4d0b      	ldr	r5, [pc, #44]	; (fb44 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    fb16:	7b63      	ldrb	r3, [r4, #13]
    fb18:	68a8      	ldr	r0, [r5, #8]
    fb1a:	f043 0310 	orr.w	r3, r3, #16
    fb1e:	7363      	strb	r3, [r4, #13]
    fb20:	1b03      	subs	r3, r0, r4
    fb22:	4258      	negs	r0, r3
    fb24:	4158      	adcs	r0, r3
    fb26:	f7ff fe19 	bl	f75c <update_cache>
	__asm__ volatile(
    fb2a:	f386 8811 	msr	BASEPRI, r6
    fb2e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    fb32:	68ab      	ldr	r3, [r5, #8]
    fb34:	42a3      	cmp	r3, r4
    fb36:	d103      	bne.n	fb40 <z_impl_k_thread_suspend+0x5c>
}
    fb38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    fb3c:	f002 b839 	b.w	11bb2 <z_reschedule_unlocked>
}
    fb40:	bd70      	pop	{r4, r5, r6, pc}
    fb42:	bf00      	nop
    fb44:	20001650 	.word	0x20001650

0000fb48 <k_sched_lock>:
	__asm__ volatile(
    fb48:	f04f 0340 	mov.w	r3, #64	; 0x40
    fb4c:	f3ef 8111 	mrs	r1, BASEPRI
    fb50:	f383 8812 	msr	BASEPRI_MAX, r3
    fb54:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    fb58:	4b04      	ldr	r3, [pc, #16]	; (fb6c <k_sched_lock+0x24>)
    fb5a:	689a      	ldr	r2, [r3, #8]
    fb5c:	7bd3      	ldrb	r3, [r2, #15]
    fb5e:	3b01      	subs	r3, #1
    fb60:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    fb62:	f381 8811 	msr	BASEPRI, r1
    fb66:	f3bf 8f6f 	isb	sy
}
    fb6a:	4770      	bx	lr
    fb6c:	20001650 	.word	0x20001650

0000fb70 <k_sched_unlock>:
{
    fb70:	b510      	push	{r4, lr}
	__asm__ volatile(
    fb72:	f04f 0340 	mov.w	r3, #64	; 0x40
    fb76:	f3ef 8411 	mrs	r4, BASEPRI
    fb7a:	f383 8812 	msr	BASEPRI_MAX, r3
    fb7e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    fb82:	4b08      	ldr	r3, [pc, #32]	; (fba4 <k_sched_unlock+0x34>)
    fb84:	689a      	ldr	r2, [r3, #8]
    fb86:	7bd3      	ldrb	r3, [r2, #15]
    fb88:	3301      	adds	r3, #1
    fb8a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    fb8c:	2000      	movs	r0, #0
    fb8e:	f7ff fde5 	bl	f75c <update_cache>
	__asm__ volatile(
    fb92:	f384 8811 	msr	BASEPRI, r4
    fb96:	f3bf 8f6f 	isb	sy
}
    fb9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    fb9e:	f002 b808 	b.w	11bb2 <z_reschedule_unlocked>
    fba2:	bf00      	nop
    fba4:	20001650 	.word	0x20001650

0000fba8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    fba8:	4b04      	ldr	r3, [pc, #16]	; (fbbc <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    fbaa:	2100      	movs	r1, #0
    fbac:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    fbb0:	e9c3 2208 	strd	r2, r2, [r3, #32]
    fbb4:	4608      	mov	r0, r1
    fbb6:	f7ff be8d 	b.w	f8d4 <k_sched_time_slice_set>
    fbba:	bf00      	nop
    fbbc:	20001650 	.word	0x20001650

0000fbc0 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    fbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    fbc2:	f04f 0340 	mov.w	r3, #64	; 0x40
    fbc6:	f3ef 8511 	mrs	r5, BASEPRI
    fbca:	f383 8812 	msr	BASEPRI_MAX, r3
    fbce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    fbd2:	4919      	ldr	r1, [pc, #100]	; (fc38 <z_impl_k_yield+0x78>)
    fbd4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fbd6:	7b43      	ldrb	r3, [r0, #13]
    fbd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    fbdc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    fbde:	f001 ff10 	bl	11a02 <sys_dlist_remove>
	}
	queue_thread(_current);
    fbe2:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    fbe4:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    fbe6:	4608      	mov	r0, r1
    fbe8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    fbec:	735a      	strb	r2, [r3, #13]
    fbee:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    fbf2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fbf4:	4282      	cmp	r2, r0
    fbf6:	bf08      	it	eq
    fbf8:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fbfa:	b922      	cbnz	r2, fc06 <z_impl_k_yield+0x46>
	node->prev = tail;
    fbfc:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    fc00:	6023      	str	r3, [r4, #0]
	list->tail = node;
    fc02:	624b      	str	r3, [r1, #36]	; 0x24
}
    fc04:	e00c      	b.n	fc20 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    fc06:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    fc0a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    fc0e:	42be      	cmp	r6, r7
    fc10:	d00e      	beq.n	fc30 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    fc12:	42b7      	cmp	r7, r6
    fc14:	dd0c      	ble.n	fc30 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    fc16:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    fc18:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    fc1c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    fc1e:	6053      	str	r3, [r2, #4]
	update_cache(1);
    fc20:	2001      	movs	r0, #1
    fc22:	f7ff fd9b 	bl	f75c <update_cache>
    fc26:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    fc28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    fc2c:	f7fb bb78 	b.w	b320 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    fc30:	42a2      	cmp	r2, r4
    fc32:	d0e3      	beq.n	fbfc <z_impl_k_yield+0x3c>
    fc34:	6812      	ldr	r2, [r2, #0]
    fc36:	e7e0      	b.n	fbfa <z_impl_k_yield+0x3a>
    fc38:	20001650 	.word	0x20001650

0000fc3c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    fc3c:	ea50 0301 	orrs.w	r3, r0, r1
{
    fc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc44:	4605      	mov	r5, r0
    fc46:	460e      	mov	r6, r1
	if (ticks == 0) {
    fc48:	d103      	bne.n	fc52 <z_tick_sleep+0x16>
	z_impl_k_yield();
    fc4a:	f7ff ffb9 	bl	fbc0 <z_impl_k_yield>
		k_yield();
		return 0;
    fc4e:	2000      	movs	r0, #0
    fc50:	e02c      	b.n	fcac <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    fc52:	1c83      	adds	r3, r0, #2
    fc54:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    fc58:	db2a      	blt.n	fcb0 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    fc5a:	f002 f829 	bl	11cb0 <sys_clock_tick_get_32>
    fc5e:	1944      	adds	r4, r0, r5
    fc60:	f04f 0340 	mov.w	r3, #64	; 0x40
    fc64:	f3ef 8811 	mrs	r8, BASEPRI
    fc68:	f383 8812 	msr	BASEPRI_MAX, r3
    fc6c:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    fc70:	4f11      	ldr	r7, [pc, #68]	; (fcb8 <z_tick_sleep+0x7c>)
    fc72:	4b12      	ldr	r3, [pc, #72]	; (fcbc <z_tick_sleep+0x80>)
    fc74:	68b8      	ldr	r0, [r7, #8]
    fc76:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    fc78:	f7ff fdfc 	bl	f874 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    fc7c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    fc7e:	4910      	ldr	r1, [pc, #64]	; (fcc0 <z_tick_sleep+0x84>)
    fc80:	462a      	mov	r2, r5
    fc82:	4633      	mov	r3, r6
    fc84:	3018      	adds	r0, #24
    fc86:	f000 f917 	bl	feb8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    fc8a:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    fc8c:	7b53      	ldrb	r3, [r2, #13]
    fc8e:	f043 0310 	orr.w	r3, r3, #16
    fc92:	7353      	strb	r3, [r2, #13]
    fc94:	4640      	mov	r0, r8
    fc96:	f7fb fb43 	bl	b320 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    fc9a:	f002 f809 	bl	11cb0 <sys_clock_tick_get_32>
    fc9e:	1a20      	subs	r0, r4, r0
    fca0:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    fca4:	2801      	cmp	r0, #1
    fca6:	f173 0300 	sbcs.w	r3, r3, #0
    fcaa:	dbd0      	blt.n	fc4e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    fcac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    fcb0:	f06f 0401 	mvn.w	r4, #1
    fcb4:	1a24      	subs	r4, r4, r0
    fcb6:	e7d3      	b.n	fc60 <z_tick_sleep+0x24>
    fcb8:	20001650 	.word	0x20001650
    fcbc:	20001680 	.word	0x20001680
    fcc0:	00011a39 	.word	0x00011a39

0000fcc4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    fcc4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    fcc8:	bf08      	it	eq
    fcca:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    fcce:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    fcd0:	d106      	bne.n	fce0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    fcd2:	4b08      	ldr	r3, [pc, #32]	; (fcf4 <z_impl_k_sleep+0x30>)
    fcd4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    fcd6:	f7ff ff05 	bl	fae4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    fcda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    fcde:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    fce0:	f7ff ffac 	bl	fc3c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    fce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    fce8:	fb80 0303 	smull	r0, r3, r0, r3
    fcec:	0bc0      	lsrs	r0, r0, #15
    fcee:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    fcf2:	e7f4      	b.n	fcde <z_impl_k_sleep+0x1a>
    fcf4:	20001650 	.word	0x20001650

0000fcf8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    fcf8:	4b01      	ldr	r3, [pc, #4]	; (fd00 <z_impl_z_current_get+0x8>)
    fcfa:	6898      	ldr	r0, [r3, #8]
    fcfc:	4770      	bx	lr
    fcfe:	bf00      	nop
    fd00:	20001650 	.word	0x20001650

0000fd04 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    fd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd08:	4604      	mov	r4, r0
    fd0a:	f04f 0340 	mov.w	r3, #64	; 0x40
    fd0e:	f3ef 8611 	mrs	r6, BASEPRI
    fd12:	f383 8812 	msr	BASEPRI_MAX, r3
    fd16:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    fd1a:	7b03      	ldrb	r3, [r0, #12]
    fd1c:	07d9      	lsls	r1, r3, #31
    fd1e:	d50b      	bpl.n	fd38 <z_thread_abort+0x34>
	__asm__ volatile(
    fd20:	f386 8811 	msr	BASEPRI, r6
    fd24:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    fd28:	4040      	eors	r0, r0
    fd2a:	f380 8811 	msr	BASEPRI, r0
    fd2e:	f04f 0004 	mov.w	r0, #4
    fd32:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    fd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    fd38:	7b43      	ldrb	r3, [r0, #13]
    fd3a:	071a      	lsls	r2, r3, #28
    fd3c:	d504      	bpl.n	fd48 <z_thread_abort+0x44>
    fd3e:	f386 8811 	msr	BASEPRI, r6
    fd42:	f3bf 8f6f 	isb	sy
    fd46:	e7f5      	b.n	fd34 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    fd48:	f023 0220 	bic.w	r2, r3, #32
    fd4c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    fd50:	09d2      	lsrs	r2, r2, #7
    fd52:	d120      	bne.n	fd96 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    fd54:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    fd56:	68a3      	ldr	r3, [r4, #8]
    fd58:	b113      	cbz	r3, fd60 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    fd5a:	4620      	mov	r0, r4
    fd5c:	f001 fe59 	bl	11a12 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    fd60:	f104 0018 	add.w	r0, r4, #24
    fd64:	f001 ff62 	bl	11c2c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    fd68:	f104 0758 	add.w	r7, r4, #88	; 0x58
    fd6c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    fd70:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fd72:	42bd      	cmp	r5, r7
    fd74:	d000      	beq.n	fd78 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    fd76:	b9b5      	cbnz	r5, fda6 <z_thread_abort+0xa2>
		update_cache(1);
    fd78:	2001      	movs	r0, #1
    fd7a:	f7ff fcef 	bl	f75c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    fd7e:	4b10      	ldr	r3, [pc, #64]	; (fdc0 <z_thread_abort+0xbc>)
    fd80:	689b      	ldr	r3, [r3, #8]
    fd82:	42a3      	cmp	r3, r4
    fd84:	d1db      	bne.n	fd3e <z_thread_abort+0x3a>
    fd86:	f3ef 8305 	mrs	r3, IPSR
    fd8a:	2b00      	cmp	r3, #0
    fd8c:	d1d7      	bne.n	fd3e <z_thread_abort+0x3a>
    fd8e:	4630      	mov	r0, r6
    fd90:	f7fb fac6 	bl	b320 <arch_swap>
	return ret;
    fd94:	e7d3      	b.n	fd3e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fd96:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    fd9a:	f043 0308 	orr.w	r3, r3, #8
    fd9e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    fda0:	f001 fe2f 	bl	11a02 <sys_dlist_remove>
}
    fda4:	e7d7      	b.n	fd56 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    fda6:	4628      	mov	r0, r5
    fda8:	f001 fe33 	bl	11a12 <unpend_thread_no_timeout>
    fdac:	f105 0018 	add.w	r0, r5, #24
    fdb0:	f001 ff3c 	bl	11c2c <z_abort_timeout>
    fdb4:	f8c5 8070 	str.w	r8, [r5, #112]	; 0x70
		ready_thread(thread);
    fdb8:	4628      	mov	r0, r5
    fdba:	f7ff fd27 	bl	f80c <ready_thread>
    fdbe:	e7d7      	b.n	fd70 <z_thread_abort+0x6c>
    fdc0:	20001650 	.word	0x20001650

0000fdc4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    fdc4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    fdc6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    fdca:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    fdcc:	e9cd 6700 	strd	r6, r7, [sp]
    fdd0:	f7ff fdf4 	bl	f9bc <z_pend_curr>

	if (data != NULL) {
    fdd4:	b11c      	cbz	r4, fdde <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    fdd6:	4b03      	ldr	r3, [pc, #12]	; (fde4 <z_sched_wait+0x20>)
    fdd8:	689b      	ldr	r3, [r3, #8]
    fdda:	695b      	ldr	r3, [r3, #20]
    fddc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    fdde:	b002      	add	sp, #8
    fde0:	bdd0      	pop	{r4, r6, r7, pc}
    fde2:	bf00      	nop
    fde4:	20001650 	.word	0x20001650

0000fde8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    fde8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    fdea:	4806      	ldr	r0, [pc, #24]	; (fe04 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    fdec:	4a06      	ldr	r2, [pc, #24]	; (fe08 <z_data_copy+0x20>)
    fdee:	4907      	ldr	r1, [pc, #28]	; (fe0c <z_data_copy+0x24>)
    fdf0:	1a12      	subs	r2, r2, r0
    fdf2:	f001 fbe1 	bl	115b8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    fdf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    fdfa:	4a05      	ldr	r2, [pc, #20]	; (fe10 <z_data_copy+0x28>)
    fdfc:	4905      	ldr	r1, [pc, #20]	; (fe14 <z_data_copy+0x2c>)
    fdfe:	4806      	ldr	r0, [pc, #24]	; (fe18 <z_data_copy+0x30>)
    fe00:	f001 bbda 	b.w	115b8 <z_early_memcpy>
    fe04:	20000000 	.word	0x20000000
    fe08:	200004bc 	.word	0x200004bc
    fe0c:	00012610 	.word	0x00012610
    fe10:	00000000 	.word	0x00000000
    fe14:	00012610 	.word	0x00012610
    fe18:	20000000 	.word	0x20000000

0000fe1c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    fe1c:	4b03      	ldr	r3, [pc, #12]	; (fe2c <elapsed+0x10>)
    fe1e:	681b      	ldr	r3, [r3, #0]
    fe20:	b90b      	cbnz	r3, fe26 <elapsed+0xa>
    fe22:	f7fd bebd 	b.w	dba0 <sys_clock_elapsed>
}
    fe26:	2000      	movs	r0, #0
    fe28:	4770      	bx	lr
    fe2a:	bf00      	nop
    fe2c:	2000168c 	.word	0x2000168c

0000fe30 <next_timeout>:

static int32_t next_timeout(void)
{
    fe30:	b510      	push	{r4, lr}
	return list->head == list;
    fe32:	4b11      	ldr	r3, [pc, #68]	; (fe78 <next_timeout+0x48>)
    fe34:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fe36:	429c      	cmp	r4, r3
    fe38:	d10a      	bne.n	fe50 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    fe3a:	f7ff ffef 	bl	fe1c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    fe3e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    fe42:	4b0e      	ldr	r3, [pc, #56]	; (fe7c <next_timeout+0x4c>)
    fe44:	691b      	ldr	r3, [r3, #16]
    fe46:	b113      	cbz	r3, fe4e <next_timeout+0x1e>
    fe48:	4298      	cmp	r0, r3
    fe4a:	bfa8      	it	ge
    fe4c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    fe4e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    fe50:	f7ff ffe4 	bl	fe1c <elapsed>
	if ((to == NULL) ||
    fe54:	2c00      	cmp	r4, #0
    fe56:	d0f2      	beq.n	fe3e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    fe58:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    fe5c:	1a1b      	subs	r3, r3, r0
    fe5e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    fe62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    fe66:	f172 0100 	sbcs.w	r1, r2, #0
    fe6a:	dae8      	bge.n	fe3e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    fe6c:	2a00      	cmp	r2, #0
    fe6e:	bfac      	ite	ge
    fe70:	4618      	movge	r0, r3
    fe72:	2000      	movlt	r0, #0
    fe74:	e7e5      	b.n	fe42 <next_timeout+0x12>
    fe76:	bf00      	nop
    fe78:	200003fc 	.word	0x200003fc
    fe7c:	20001650 	.word	0x20001650

0000fe80 <remove_timeout>:
{
    fe80:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fe82:	b170      	cbz	r0, fea2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    fe84:	4b0b      	ldr	r3, [pc, #44]	; (feb4 <remove_timeout+0x34>)
    fe86:	685b      	ldr	r3, [r3, #4]
    fe88:	4298      	cmp	r0, r3
    fe8a:	d00a      	beq.n	fea2 <remove_timeout+0x22>
    fe8c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    fe8e:	b143      	cbz	r3, fea2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    fe90:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    fe94:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    fe98:	1912      	adds	r2, r2, r4
    fe9a:	eb41 0105 	adc.w	r1, r1, r5
    fe9e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    fea2:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    fea6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    fea8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    feaa:	2300      	movs	r3, #0
	node->prev = NULL;
    feac:	e9c0 3300 	strd	r3, r3, [r0]
}
    feb0:	bd30      	pop	{r4, r5, pc}
    feb2:	bf00      	nop
    feb4:	200003fc 	.word	0x200003fc

0000feb8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    feb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    febc:	bf08      	it	eq
    febe:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    fec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fec4:	4604      	mov	r4, r0
    fec6:	461d      	mov	r5, r3
    fec8:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    feca:	d061      	beq.n	ff90 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    fecc:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    fece:	f04f 0340 	mov.w	r3, #64	; 0x40
    fed2:	f3ef 8711 	mrs	r7, BASEPRI
    fed6:	f383 8812 	msr	BASEPRI_MAX, r3
    feda:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    fede:	3201      	adds	r2, #1
    fee0:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    fee4:	da24      	bge.n	ff30 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    fee6:	4930      	ldr	r1, [pc, #192]	; (ffa8 <z_add_timeout+0xf0>)
    fee8:	e9d1 2000 	ldrd	r2, r0, [r1]
    feec:	f06f 0301 	mvn.w	r3, #1
    fef0:	1a9b      	subs	r3, r3, r2
    fef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fef6:	eb62 0000 	sbc.w	r0, r2, r0
    fefa:	1b9e      	subs	r6, r3, r6
    fefc:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    ff00:	2e01      	cmp	r6, #1
    ff02:	f170 0300 	sbcs.w	r3, r0, #0
    ff06:	da01      	bge.n	ff0c <z_add_timeout+0x54>
    ff08:	2601      	movs	r6, #1
    ff0a:	2000      	movs	r0, #0
    ff0c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    ff10:	4e26      	ldr	r6, [pc, #152]	; (ffac <z_add_timeout+0xf4>)
    ff12:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    ff16:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ff18:	45b4      	cmp	ip, r6
    ff1a:	bf08      	it	eq
    ff1c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    ff20:	f1bc 0f00 	cmp.w	ip, #0
    ff24:	d10d      	bne.n	ff42 <z_add_timeout+0x8a>
	node->prev = tail;
    ff26:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    ff2a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    ff2c:	6074      	str	r4, [r6, #4]
}
    ff2e:	e01c      	b.n	ff6a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    ff30:	f7ff ff74 	bl	fe1c <elapsed>
    ff34:	3601      	adds	r6, #1
    ff36:	f145 0500 	adc.w	r5, r5, #0
    ff3a:	1836      	adds	r6, r6, r0
    ff3c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    ff40:	e7e4      	b.n	ff0c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    ff42:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    ff46:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    ff4a:	4293      	cmp	r3, r2
    ff4c:	eb71 0e00 	sbcs.w	lr, r1, r0
    ff50:	da1f      	bge.n	ff92 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    ff52:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    ff54:	f8dc 3004 	ldr.w	r3, [ip, #4]
    ff58:	eb60 0001 	sbc.w	r0, r0, r1
    ff5c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    ff60:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    ff64:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    ff66:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    ff6a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ff6c:	42b3      	cmp	r3, r6
    ff6e:	d00b      	beq.n	ff88 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    ff70:	429c      	cmp	r4, r3
    ff72:	d109      	bne.n	ff88 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    ff74:	f7ff ff5c 	bl	fe30 <next_timeout>

			if (next_time == 0 ||
    ff78:	b118      	cbz	r0, ff82 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    ff7a:	4b0d      	ldr	r3, [pc, #52]	; (ffb0 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    ff7c:	691b      	ldr	r3, [r3, #16]
    ff7e:	4283      	cmp	r3, r0
    ff80:	d002      	beq.n	ff88 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    ff82:	2100      	movs	r1, #0
    ff84:	f7fd fdda 	bl	db3c <sys_clock_set_timeout>
	__asm__ volatile(
    ff88:	f387 8811 	msr	BASEPRI, r7
    ff8c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    ff90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    ff92:	1a9b      	subs	r3, r3, r2
    ff94:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    ff98:	45ac      	cmp	ip, r5
    ff9a:	e9c4 3104 	strd	r3, r1, [r4, #16]
    ff9e:	d0c2      	beq.n	ff26 <z_add_timeout+0x6e>
    ffa0:	f8dc c000 	ldr.w	ip, [ip]
    ffa4:	e7bc      	b.n	ff20 <z_add_timeout+0x68>
    ffa6:	bf00      	nop
    ffa8:	20001458 	.word	0x20001458
    ffac:	200003fc 	.word	0x200003fc
    ffb0:	20001650 	.word	0x20001650

0000ffb4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    ffb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ffb8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    ffba:	f7ff fcbd 	bl	f938 <z_time_slice>
	__asm__ volatile(
    ffbe:	f04f 0340 	mov.w	r3, #64	; 0x40
    ffc2:	f3ef 8611 	mrs	r6, BASEPRI
    ffc6:	f383 8812 	msr	BASEPRI_MAX, r3
    ffca:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    ffce:	4f23      	ldr	r7, [pc, #140]	; (1005c <sys_clock_announce+0xa8>)
	return list->head == list;
    ffd0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 10060 <sys_clock_announce+0xac>
    ffd4:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    ffd8:	4a22      	ldr	r2, [pc, #136]	; (10064 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
    ffda:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ffdc:	4540      	cmp	r0, r8
		curr_tick += dt;
    ffde:	e9d2 3e00 	ldrd	r3, lr, [r2]
    ffe2:	ea4f 71e4 	mov.w	r1, r4, asr #31
    ffe6:	d00b      	beq.n	10000 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    ffe8:	b150      	cbz	r0, 10000 <sys_clock_announce+0x4c>
    ffea:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    ffee:	42ac      	cmp	r4, r5
    fff0:	eb71 090c 	sbcs.w	r9, r1, ip
    fff4:	da16      	bge.n	10024 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    fff6:	1b2d      	subs	r5, r5, r4
    fff8:	eb6c 0c01 	sbc.w	ip, ip, r1
    fffc:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   10000:	18e3      	adds	r3, r4, r3
   10002:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   10006:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   10008:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   1000c:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1000e:	f7ff ff0f 	bl	fe30 <next_timeout>
   10012:	4621      	mov	r1, r4
   10014:	f7fd fd92 	bl	db3c <sys_clock_set_timeout>
	__asm__ volatile(
   10018:	f386 8811 	msr	BASEPRI, r6
   1001c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   10020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   10024:	18eb      	adds	r3, r5, r3
   10026:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   1002a:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   1002e:	2200      	movs	r2, #0
   10030:	2300      	movs	r3, #0
   10032:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   10036:	f7ff ff23 	bl	fe80 <remove_timeout>
   1003a:	f386 8811 	msr	BASEPRI, r6
   1003e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   10042:	6883      	ldr	r3, [r0, #8]
   10044:	4798      	blx	r3
	__asm__ volatile(
   10046:	f04f 0340 	mov.w	r3, #64	; 0x40
   1004a:	f3ef 8611 	mrs	r6, BASEPRI
   1004e:	f383 8812 	msr	BASEPRI_MAX, r3
   10052:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   10056:	683c      	ldr	r4, [r7, #0]
   10058:	1b64      	subs	r4, r4, r5
   1005a:	e7bb      	b.n	ffd4 <sys_clock_announce+0x20>
   1005c:	2000168c 	.word	0x2000168c
   10060:	200003fc 	.word	0x200003fc
   10064:	20001458 	.word	0x20001458

00010068 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   10068:	b510      	push	{r4, lr}
   1006a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1006e:	f3ef 8411 	mrs	r4, BASEPRI
   10072:	f383 8812 	msr	BASEPRI_MAX, r3
   10076:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   1007a:	f7ff fecf 	bl	fe1c <elapsed>
   1007e:	4a06      	ldr	r2, [pc, #24]	; (10098 <sys_clock_tick_get+0x30>)
   10080:	4603      	mov	r3, r0
   10082:	e9d2 0100 	ldrd	r0, r1, [r2]
   10086:	1818      	adds	r0, r3, r0
   10088:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   1008c:	f384 8811 	msr	BASEPRI, r4
   10090:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   10094:	bd10      	pop	{r4, pc}
   10096:	bf00      	nop
   10098:	20001458 	.word	0x20001458

0001009c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1009c:	b570      	push	{r4, r5, r6, lr}
   1009e:	4604      	mov	r4, r0
	__asm__ volatile(
   100a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   100a4:	f3ef 8511 	mrs	r5, BASEPRI
   100a8:	f383 8812 	msr	BASEPRI_MAX, r3
   100ac:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   100b0:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   100b4:	3301      	adds	r3, #1
   100b6:	f142 0200 	adc.w	r2, r2, #0
   100ba:	2b02      	cmp	r3, #2
   100bc:	f172 0200 	sbcs.w	r2, r2, #0
   100c0:	d322      	bcc.n	10108 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   100c2:	f001 fdf9 	bl	11cb8 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   100c6:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   100ca:	3001      	adds	r0, #1
   100cc:	f141 0100 	adc.w	r1, r1, #0
   100d0:	18c0      	adds	r0, r0, r3
   100d2:	eb41 0102 	adc.w	r1, r1, r2
   100d6:	2801      	cmp	r0, #1
   100d8:	f171 0100 	sbcs.w	r1, r1, #0
   100dc:	db32      	blt.n	10144 <z_timer_expiration_handler+0xa8>
   100de:	f001 fdeb 	bl	11cb8 <z_impl_k_uptime_ticks>
   100e2:	3001      	adds	r0, #1
   100e4:	f141 0300 	adc.w	r3, r1, #0
   100e8:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   100ec:	1880      	adds	r0, r0, r2
   100ee:	f06f 0201 	mvn.w	r2, #1
   100f2:	eb43 0301 	adc.w	r3, r3, r1
   100f6:	1a12      	subs	r2, r2, r0
   100f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   100fc:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10100:	491a      	ldr	r1, [pc, #104]	; (1016c <z_timer_expiration_handler+0xd0>)
   10102:	4620      	mov	r0, r4
   10104:	f7ff fed8 	bl	feb8 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   10108:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1010a:	3301      	adds	r3, #1
   1010c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1010e:	6a23      	ldr	r3, [r4, #32]
   10110:	b173      	cbz	r3, 10130 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   10112:	f385 8811 	msr	BASEPRI, r5
   10116:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1011a:	6a23      	ldr	r3, [r4, #32]
   1011c:	4620      	mov	r0, r4
   1011e:	4798      	blx	r3
	__asm__ volatile(
   10120:	f04f 0340 	mov.w	r3, #64	; 0x40
   10124:	f3ef 8511 	mrs	r5, BASEPRI
   10128:	f383 8812 	msr	BASEPRI_MAX, r3
   1012c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   10130:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10134:	42a6      	cmp	r6, r4
   10136:	d000      	beq.n	1013a <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   10138:	b94e      	cbnz	r6, 1014e <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   1013a:	f385 8811 	msr	BASEPRI, r5
   1013e:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   10142:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   10144:	f06f 0201 	mvn.w	r2, #1
   10148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1014c:	e7d8      	b.n	10100 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   1014e:	4630      	mov	r0, r6
   10150:	f001 fccc 	bl	11aec <z_unpend_thread_no_timeout>
   10154:	2300      	movs	r3, #0
   10156:	6733      	str	r3, [r6, #112]	; 0x70
   10158:	f385 8811 	msr	BASEPRI, r5
   1015c:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   10160:	4630      	mov	r0, r6
}
   10162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   10166:	f001 bcb1 	b.w	11acc <z_ready_thread>
   1016a:	bf00      	nop
   1016c:	0001009d 	.word	0x0001009d

00010170 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   10170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   10174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10178:	bf08      	it	eq
   1017a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1017e:	4605      	mov	r5, r0
   10180:	4614      	mov	r4, r2
   10182:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   10186:	4619      	mov	r1, r3
   10188:	4691      	mov	r9, r2
   1018a:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1018c:	d037      	beq.n	101fe <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1018e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   10192:	bf08      	it	eq
   10194:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   10198:	4637      	mov	r7, r6
   1019a:	4682      	mov	sl, r0
   1019c:	d011      	beq.n	101c2 <z_impl_k_timer_start+0x52>
   1019e:	ea50 0306 	orrs.w	r3, r0, r6
   101a2:	d00e      	beq.n	101c2 <z_impl_k_timer_start+0x52>
   101a4:	1c72      	adds	r2, r6, #1
   101a6:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
   101aa:	db0a      	blt.n	101c2 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   101ac:	2e02      	cmp	r6, #2
   101ae:	4684      	mov	ip, r0
   101b0:	f170 0000 	sbcs.w	r0, r0, #0
   101b4:	bfbc      	itt	lt
   101b6:	2702      	movlt	r7, #2
   101b8:	f04f 0c00 	movlt.w	ip, #0
   101bc:	3f01      	subs	r7, #1
   101be:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   101c2:	1c63      	adds	r3, r4, #1
   101c4:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   101c8:	db0a      	blt.n	101e0 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   101ca:	2c01      	cmp	r4, #1
   101cc:	f171 0300 	sbcs.w	r3, r1, #0
   101d0:	4622      	mov	r2, r4
   101d2:	bfbc      	itt	lt
   101d4:	2201      	movlt	r2, #1
   101d6:	2100      	movlt	r1, #0
   101d8:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   101dc:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   101e0:	4628      	mov	r0, r5
   101e2:	f001 fd23 	bl	11c2c <z_abort_timeout>
	timer->period = period;
   101e6:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   101ea:	2300      	movs	r3, #0
   101ec:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   101ee:	464a      	mov	r2, r9
   101f0:	4643      	mov	r3, r8
   101f2:	4628      	mov	r0, r5
   101f4:	4903      	ldr	r1, [pc, #12]	; (10204 <z_impl_k_timer_start+0x94>)
		     duration);
}
   101f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   101fa:	f7ff be5d 	b.w	feb8 <z_add_timeout>
}
   101fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10202:	bf00      	nop
   10204:	0001009d 	.word	0x0001009d

00010208 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   10208:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1020c:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1020e:	4b29      	ldr	r3, [pc, #164]	; (102b4 <z_impl_k_poll+0xac>)
   10210:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   10212:	2301      	movs	r3, #1
   10214:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   10218:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1021c:	ea52 0305 	orrs.w	r3, r2, r5
{
   10220:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   10222:	bf0c      	ite	eq
   10224:	2301      	moveq	r3, #1
   10226:	2300      	movne	r3, #0
   10228:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1022c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1022e:	f001 fdb9 	bl	11da4 <register_events>
   10232:	4681      	mov	r9, r0
	__asm__ volatile(
   10234:	f04f 0340 	mov.w	r3, #64	; 0x40
   10238:	f3ef 8a11 	mrs	sl, BASEPRI
   1023c:	f383 8812 	msr	BASEPRI_MAX, r3
   10240:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   10244:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   10248:	b964      	cbnz	r4, 10264 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1024a:	4601      	mov	r1, r0
   1024c:	4652      	mov	r2, sl
   1024e:	4640      	mov	r0, r8
   10250:	f001 fe79 	bl	11f46 <clear_event_registrations>
	__asm__ volatile(
   10254:	f38a 8811 	msr	BASEPRI, sl
   10258:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1025c:	4620      	mov	r0, r4
   1025e:	b002      	add	sp, #8
   10260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   10264:	2300      	movs	r3, #0
   10266:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1026a:	ea56 0305 	orrs.w	r3, r6, r5
   1026e:	d106      	bne.n	1027e <z_impl_k_poll+0x76>
   10270:	f38a 8811 	msr	BASEPRI, sl
   10274:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   10278:	f06f 040a 	mvn.w	r4, #10
   1027c:	e7ee      	b.n	1025c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1027e:	e9cd 6500 	strd	r6, r5, [sp]
   10282:	4a0d      	ldr	r2, [pc, #52]	; (102b8 <z_impl_k_poll+0xb0>)
   10284:	480d      	ldr	r0, [pc, #52]	; (102bc <z_impl_k_poll+0xb4>)
   10286:	4651      	mov	r1, sl
   10288:	f7ff fb98 	bl	f9bc <z_pend_curr>
   1028c:	4604      	mov	r4, r0
	__asm__ volatile(
   1028e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10292:	f3ef 8511 	mrs	r5, BASEPRI
   10296:	f383 8812 	msr	BASEPRI_MAX, r3
   1029a:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1029e:	462a      	mov	r2, r5
   102a0:	4649      	mov	r1, r9
   102a2:	4640      	mov	r0, r8
   102a4:	f001 fe4f 	bl	11f46 <clear_event_registrations>
	__asm__ volatile(
   102a8:	f385 8811 	msr	BASEPRI, r5
   102ac:	f3bf 8f6f 	isb	sy
	return swap_rc;
   102b0:	e7d4      	b.n	1025c <z_impl_k_poll+0x54>
   102b2:	bf00      	nop
   102b4:	20001650 	.word	0x20001650
   102b8:	20000404 	.word	0x20000404
   102bc:	20001950 	.word	0x20001950

000102c0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   102c0:	b538      	push	{r3, r4, r5, lr}
   102c2:	4603      	mov	r3, r0
	__asm__ volatile(
   102c4:	f04f 0240 	mov.w	r2, #64	; 0x40
   102c8:	f3ef 8511 	mrs	r5, BASEPRI
   102cc:	f382 8812 	msr	BASEPRI_MAX, r2
   102d0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   102d4:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   102d6:	2101      	movs	r1, #1
   102d8:	6081      	str	r1, [r0, #8]
	return list->head == list;
   102da:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   102dc:	4283      	cmp	r3, r0
   102de:	d106      	bne.n	102ee <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   102e0:	f385 8811 	msr	BASEPRI, r5
   102e4:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   102e8:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   102ea:	4620      	mov	r0, r4
   102ec:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   102ee:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   102f2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   102f4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   102f6:	2300      	movs	r3, #0
	node->prev = NULL;
   102f8:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   102fc:	f001 fdc9 	bl	11e92 <signal_poll_event>
	z_reschedule(&lock, key);
   10300:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   10302:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   10304:	4801      	ldr	r0, [pc, #4]	; (1030c <z_impl_k_poll_signal_raise+0x4c>)
   10306:	f7ff fbbd 	bl	fa84 <z_reschedule>
	return rc;
   1030a:	e7ee      	b.n	102ea <z_impl_k_poll_signal_raise+0x2a>
   1030c:	20001950 	.word	0x20001950

00010310 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   10310:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10312:	4606      	mov	r6, r0
   10314:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   10316:	f001 f9c3 	bl	116a0 <k_is_in_isr>
   1031a:	b978      	cbnz	r0, 1033c <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1031c:	4b0b      	ldr	r3, [pc, #44]	; (1034c <z_thread_aligned_alloc+0x3c>)
   1031e:	689b      	ldr	r3, [r3, #8]
   10320:	6e9c      	ldr	r4, [r3, #104]	; 0x68
	}

	if (heap != NULL) {
   10322:	b17c      	cbz	r4, 10344 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   10324:	1d2a      	adds	r2, r5, #4
   10326:	d209      	bcs.n	1033c <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   10328:	2000      	movs	r0, #0
   1032a:	2100      	movs	r1, #0
   1032c:	e9cd 0100 	strd	r0, r1, [sp]
   10330:	f046 0104 	orr.w	r1, r6, #4
   10334:	4620      	mov	r0, r4
   10336:	f001 f949 	bl	115cc <k_heap_aligned_alloc>
	if (mem == NULL) {
   1033a:	b908      	cbnz	r0, 10340 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1033c:	2400      	movs	r4, #0
	}

	return ret;
   1033e:	e001      	b.n	10344 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   10340:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   10342:	1d04      	adds	r4, r0, #4
}
   10344:	4620      	mov	r0, r4
   10346:	b002      	add	sp, #8
   10348:	bd70      	pop	{r4, r5, r6, pc}
   1034a:	bf00      	nop
   1034c:	20001650 	.word	0x20001650

00010350 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   10350:	4801      	ldr	r0, [pc, #4]	; (10358 <boot_banner+0x8>)
   10352:	f000 b832 	b.w	103ba <printk>
   10356:	bf00      	nop
   10358:	000125d8 	.word	0x000125d8

0001035c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1035c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1035e:	4b09      	ldr	r3, [pc, #36]	; (10384 <k_sys_work_q_init+0x28>)
   10360:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   10362:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   10364:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   10366:	9300      	str	r3, [sp, #0]
   10368:	4907      	ldr	r1, [pc, #28]	; (10388 <k_sys_work_q_init+0x2c>)
   1036a:	4808      	ldr	r0, [pc, #32]	; (1038c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1036c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   10370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10374:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10378:	f7ff f970 	bl	f65c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1037c:	4620      	mov	r0, r4
   1037e:	b004      	add	sp, #16
   10380:	bd10      	pop	{r4, pc}
   10382:	bf00      	nop
   10384:	00012606 	.word	0x00012606
   10388:	20003450 	.word	0x20003450
   1038c:	20001460 	.word	0x20001460

00010390 <arch_printk_char_out>:
}
   10390:	2000      	movs	r0, #0
   10392:	4770      	bx	lr

00010394 <str_out>:
{
   10394:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   10396:	688a      	ldr	r2, [r1, #8]
   10398:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1039a:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1039c:	b114      	cbz	r4, 103a4 <str_out+0x10>
   1039e:	684b      	ldr	r3, [r1, #4]
   103a0:	4293      	cmp	r3, r2
   103a2:	dc01      	bgt.n	103a8 <str_out+0x14>
		ctx->count++;
   103a4:	608d      	str	r5, [r1, #8]
}
   103a6:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   103a8:	3b01      	subs	r3, #1
   103aa:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   103ac:	bf08      	it	eq
   103ae:	2200      	moveq	r2, #0
   103b0:	608d      	str	r5, [r1, #8]
   103b2:	bf0c      	ite	eq
   103b4:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   103b6:	54a0      	strbne	r0, [r4, r2]
   103b8:	e7f5      	b.n	103a6 <str_out+0x12>

000103ba <printk>:
{
   103ba:	b40f      	push	{r0, r1, r2, r3}
   103bc:	b507      	push	{r0, r1, r2, lr}
   103be:	a904      	add	r1, sp, #16
   103c0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   103c4:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   103c6:	f7fa f8fd 	bl	a5c4 <vprintk>
}
   103ca:	b003      	add	sp, #12
   103cc:	f85d eb04 	ldr.w	lr, [sp], #4
   103d0:	b004      	add	sp, #16
   103d2:	4770      	bx	lr

000103d4 <snprintk>:
{
   103d4:	b40c      	push	{r2, r3}
   103d6:	b507      	push	{r0, r1, r2, lr}
   103d8:	ab04      	add	r3, sp, #16
   103da:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   103de:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   103e0:	f7fa f8fe 	bl	a5e0 <vsnprintk>
}
   103e4:	b003      	add	sp, #12
   103e6:	f85d eb04 	ldr.w	lr, [sp], #4
   103ea:	b002      	add	sp, #8
   103ec:	4770      	bx	lr

000103ee <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   103ee:	4604      	mov	r4, r0
   103f0:	b508      	push	{r3, lr}
   103f2:	4608      	mov	r0, r1
   103f4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   103f6:	461a      	mov	r2, r3
   103f8:	47a0      	blx	r4
	return z_impl_z_current_get();
   103fa:	f7ff fc7d 	bl	fcf8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   103fe:	f7fb f993 	bl	b728 <z_impl_k_thread_abort>

00010402 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   10402:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   10406:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   10408:	0840      	lsrs	r0, r0, #1
   1040a:	4770      	bx	lr

0001040c <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1040e:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   10410:	f7ff fff7 	bl	10402 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   10414:	fab0 f080 	clz	r0, r0
   10418:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1041c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   10420:	00ca      	lsls	r2, r1, #3
   10422:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   10426:	1d17      	adds	r7, r2, #4
{
   10428:	460c      	mov	r4, r1
   1042a:	3206      	adds	r2, #6
   1042c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1042e:	b956      	cbnz	r6, 10446 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   10430:	2101      	movs	r1, #1
   10432:	fa01 f000 	lsl.w	r0, r1, r0
   10436:	68d9      	ldr	r1, [r3, #12]
   10438:	4301      	orrs	r1, r0
   1043a:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1043c:	f8cc 4010 	str.w	r4, [ip, #16]
   10440:	53dd      	strh	r5, [r3, r7]
   10442:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   10444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   10446:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   10448:	3104      	adds	r1, #4
   1044a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1044c:	53d8      	strh	r0, [r3, r7]
   1044e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   10452:	529e      	strh	r6, [r3, r2]
   10454:	80c5      	strh	r5, [r0, #6]
   10456:	525d      	strh	r5, [r3, r1]
   10458:	e7f4      	b.n	10444 <free_list_add+0x38>

0001045a <free_list_remove_bidx>:
{
   1045a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1045c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   10460:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   10462:	4299      	cmp	r1, r3
   10464:	f102 0104 	add.w	r1, r2, #4
   10468:	d10a      	bne.n	10480 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1046a:	2301      	movs	r3, #1
   1046c:	fa03 f202 	lsl.w	r2, r3, r2
   10470:	68c3      	ldr	r3, [r0, #12]
   10472:	ea23 0302 	bic.w	r3, r3, r2
   10476:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   10478:	2300      	movs	r3, #0
   1047a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1047e:	bd10      	pop	{r4, pc}
   10480:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   10482:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   10486:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1048a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1048e:	80cb      	strh	r3, [r1, #6]
   10490:	8082      	strh	r2, [r0, #4]
}
   10492:	e7f4      	b.n	1047e <free_list_remove_bidx+0x24>

00010494 <free_list_remove>:
{
   10494:	b508      	push	{r3, lr}
   10496:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   10498:	f7ff ffb3 	bl	10402 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1049c:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   104a0:	f1c2 021f 	rsb	r2, r2, #31
   104a4:	4618      	mov	r0, r3
}
   104a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   104aa:	f7ff bfd6 	b.w	1045a <free_list_remove_bidx>

000104ae <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   104ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   104b2:	fab1 f581 	clz	r5, r1
   104b6:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   104ba:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   104be:	4603      	mov	r3, r0
	if (b->next) {
   104c0:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   104c4:	460e      	mov	r6, r1
	if (b->next) {
   104c6:	b1c2      	cbz	r2, 104fa <alloc_chunk+0x4c>
   104c8:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   104ca:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   104ce:	4618      	mov	r0, r3
   104d0:	4621      	mov	r1, r4
   104d2:	f7ff ff96 	bl	10402 <chunk_size>
   104d6:	42b0      	cmp	r0, r6
   104d8:	d306      	bcc.n	104e8 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   104da:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   104dc:	4618      	mov	r0, r3
   104de:	f7ff ffbc 	bl	1045a <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   104e2:	4620      	mov	r0, r4
   104e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   104e8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   104ec:	3f01      	subs	r7, #1
   104ee:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   104f0:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   104f4:	d001      	beq.n	104fa <alloc_chunk+0x4c>
   104f6:	4282      	cmp	r2, r0
   104f8:	d1e7      	bne.n	104ca <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   104fa:	f1c5 0220 	rsb	r2, r5, #32
   104fe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10502:	4094      	lsls	r4, r2
   10504:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   10506:	4014      	ands	r4, r2
   10508:	d0eb      	beq.n	104e2 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1050a:	fa94 f2a4 	rbit	r2, r4
   1050e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   10512:	1d11      	adds	r1, r2, #4
   10514:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   10518:	4621      	mov	r1, r4
   1051a:	e7df      	b.n	104dc <alloc_chunk+0x2e>

0001051c <merge_chunks>:
{
   1051c:	b538      	push	{r3, r4, r5, lr}
   1051e:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   10520:	f7ff ff6f 	bl	10402 <chunk_size>
{
   10524:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   10526:	4604      	mov	r4, r0
   10528:	4611      	mov	r1, r2
   1052a:	4618      	mov	r0, r3
   1052c:	f7ff ff69 	bl	10402 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   10530:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   10534:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10536:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   10538:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1053a:	4618      	mov	r0, r3
   1053c:	f7ff ff61 	bl	10402 <chunk_size>
	void *cmem = &buf[c];
   10540:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   10542:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   10546:	bd38      	pop	{r3, r4, r5, pc}

00010548 <split_chunks>:
{
   10548:	b538      	push	{r3, r4, r5, lr}
   1054a:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1054c:	f7ff ff59 	bl	10402 <chunk_size>
{
   10550:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   10552:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   10554:	1a51      	subs	r1, r2, r1
   10556:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   1055a:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1055c:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1055e:	8060      	strh	r0, [r4, #2]
   10560:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10564:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   10566:	8044      	strh	r4, [r0, #2]
   10568:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1056c:	4618      	mov	r0, r3
   1056e:	4611      	mov	r1, r2
   10570:	f7ff ff47 	bl	10402 <chunk_size>
	void *cmem = &buf[c];
   10574:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   10576:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1057a:	bd38      	pop	{r3, r4, r5, pc}

0001057c <free_chunk>:
{
   1057c:	b538      	push	{r3, r4, r5, lr}
   1057e:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   10580:	f7ff ff3f 	bl	10402 <chunk_size>
   10584:	460c      	mov	r4, r1
   10586:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   10588:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1058c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1058e:	07da      	lsls	r2, r3, #31
   10590:	d40a      	bmi.n	105a8 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   10592:	4628      	mov	r0, r5
   10594:	f7ff ff7e 	bl	10494 <free_list_remove>
	return c + chunk_size(h, c);
   10598:	4621      	mov	r1, r4
   1059a:	4628      	mov	r0, r5
   1059c:	f7ff ff31 	bl	10402 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   105a0:	1822      	adds	r2, r4, r0
   105a2:	4628      	mov	r0, r5
   105a4:	f7ff ffba 	bl	1051c <merge_chunks>
		return ((uint16_t *)cmem)[f];
   105a8:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   105ac:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   105ae:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   105b2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   105b4:	07db      	lsls	r3, r3, #31
   105b6:	d40c      	bmi.n	105d2 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   105b8:	4628      	mov	r0, r5
   105ba:	f7ff ff6b 	bl	10494 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   105be:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   105c2:	4622      	mov	r2, r4
   105c4:	1a61      	subs	r1, r4, r1
   105c6:	4628      	mov	r0, r5
   105c8:	f7ff ffa8 	bl	1051c <merge_chunks>
   105cc:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   105d0:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   105d2:	4621      	mov	r1, r4
   105d4:	4628      	mov	r0, r5
}
   105d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   105da:	f7ff bf17 	b.w	1040c <free_list_add>

000105de <sys_heap_free>:
	if (mem == NULL) {
   105de:	b161      	cbz	r1, 105fa <sys_heap_free+0x1c>
   105e0:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   105e2:	3904      	subs	r1, #4
   105e4:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   105e6:	f021 0307 	bic.w	r3, r1, #7
   105ea:	4403      	add	r3, r0
	free_chunk(h, c);
   105ec:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   105ee:	885a      	ldrh	r2, [r3, #2]
   105f0:	f022 0201 	bic.w	r2, r2, #1
   105f4:	805a      	strh	r2, [r3, #2]
   105f6:	f7ff bfc1 	b.w	1057c <free_chunk>
}
   105fa:	4770      	bx	lr

000105fc <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   105fc:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   105fe:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   10600:	b909      	cbnz	r1, 10606 <sys_heap_alloc+0xa>
		return NULL;
   10602:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   10604:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   10606:	68ab      	ldr	r3, [r5, #8]
   10608:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1060c:	d9f9      	bls.n	10602 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1060e:	310b      	adds	r1, #11
   10610:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   10612:	4621      	mov	r1, r4
   10614:	4628      	mov	r0, r5
   10616:	f7ff ff4a 	bl	104ae <alloc_chunk>
	if (c == 0U) {
   1061a:	4606      	mov	r6, r0
   1061c:	2800      	cmp	r0, #0
   1061e:	d0f0      	beq.n	10602 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   10620:	4601      	mov	r1, r0
   10622:	4628      	mov	r0, r5
   10624:	f7ff feed 	bl	10402 <chunk_size>
   10628:	42a0      	cmp	r0, r4
   1062a:	d907      	bls.n	1063c <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1062c:	1932      	adds	r2, r6, r4
   1062e:	4628      	mov	r0, r5
   10630:	f7ff ff8a 	bl	10548 <split_chunks>
		free_list_add(h, c + chunk_sz);
   10634:	4611      	mov	r1, r2
   10636:	4628      	mov	r0, r5
   10638:	f7ff fee8 	bl	1040c <free_list_add>
	void *cmem = &buf[c];
   1063c:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   10640:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   10642:	8853      	ldrh	r3, [r2, #2]
   10644:	f043 0301 	orr.w	r3, r3, #1
   10648:	8053      	strh	r3, [r2, #2]
   1064a:	3004      	adds	r0, #4
	return mem;
   1064c:	e7da      	b.n	10604 <sys_heap_alloc+0x8>

0001064e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1064e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10652:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   10656:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   1065a:	6806      	ldr	r6, [r0, #0]
{
   1065c:	460f      	mov	r7, r1
   1065e:	4614      	mov	r4, r2
	if (align != rew) {
   10660:	d00c      	beq.n	1067c <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   10662:	424b      	negs	r3, r1
   10664:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   10666:	2b04      	cmp	r3, #4
   10668:	461a      	mov	r2, r3
   1066a:	464f      	mov	r7, r9
   1066c:	bf28      	it	cs
   1066e:	2204      	movcs	r2, #4
	rew = align & -align;
   10670:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   10672:	b964      	cbnz	r4, 1068e <sys_heap_aligned_alloc+0x40>
		return NULL;
   10674:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   10676:	4628      	mov	r0, r5
   10678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1067c:	2904      	cmp	r1, #4
   1067e:	d804      	bhi.n	1068a <sys_heap_aligned_alloc+0x3c>
}
   10680:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   10684:	4611      	mov	r1, r2
   10686:	f7ff bfb9 	b.w	105fc <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   1068a:	2204      	movs	r2, #4
   1068c:	e7f1      	b.n	10672 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1068e:	68b3      	ldr	r3, [r6, #8]
   10690:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   10694:	d9ee      	bls.n	10674 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10696:	f104 010b 	add.w	r1, r4, #11
   1069a:	4439      	add	r1, r7
   1069c:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1069e:	08c9      	lsrs	r1, r1, #3
   106a0:	4630      	mov	r0, r6
   106a2:	f7ff ff04 	bl	104ae <alloc_chunk>
	if (c0 == 0) {
   106a6:	4680      	mov	r8, r0
   106a8:	2800      	cmp	r0, #0
   106aa:	d0e3      	beq.n	10674 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   106ac:	f109 0504 	add.w	r5, r9, #4
   106b0:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   106b4:	1e7b      	subs	r3, r7, #1
   106b6:	4435      	add	r5, r6
   106b8:	441d      	add	r5, r3
   106ba:	427f      	negs	r7, r7
   106bc:	403d      	ands	r5, r7
   106be:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   106c2:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   106c4:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   106c6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   106c8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   106ca:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   106ce:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   106d0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   106d4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   106d8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   106dc:	d208      	bcs.n	106f0 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   106de:	4601      	mov	r1, r0
   106e0:	463a      	mov	r2, r7
   106e2:	4630      	mov	r0, r6
   106e4:	f7ff ff30 	bl	10548 <split_chunks>
		free_list_add(h, c0);
   106e8:	4641      	mov	r1, r8
   106ea:	4630      	mov	r0, r6
   106ec:	f7ff fe8e 	bl	1040c <free_list_add>
	return c + chunk_size(h, c);
   106f0:	4639      	mov	r1, r7
   106f2:	4630      	mov	r0, r6
   106f4:	f7ff fe85 	bl	10402 <chunk_size>
   106f8:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   106fa:	4284      	cmp	r4, r0
   106fc:	d207      	bcs.n	1070e <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   106fe:	4630      	mov	r0, r6
   10700:	4622      	mov	r2, r4
   10702:	f7ff ff21 	bl	10548 <split_chunks>
		free_list_add(h, c_end);
   10706:	4621      	mov	r1, r4
   10708:	4630      	mov	r0, r6
   1070a:	f7ff fe7f 	bl	1040c <free_list_add>
	void *cmem = &buf[c];
   1070e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   10712:	8873      	ldrh	r3, [r6, #2]
   10714:	f043 0301 	orr.w	r3, r3, #1
   10718:	8073      	strh	r3, [r6, #2]
   1071a:	e7ac      	b.n	10676 <sys_heap_aligned_alloc+0x28>

0001071c <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1071c:	3a04      	subs	r2, #4
{
   1071e:	b4f0      	push	{r4, r5, r6, r7}
   10720:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   10722:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   10724:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   10726:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1072a:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1072e:	1a0e      	subs	r6, r1, r0
   10730:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   10732:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   10734:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   10738:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1073a:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   1073e:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   10740:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   10742:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   10744:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10748:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1074a:	f1c2 0220 	rsb	r2, r2, #32
   1074e:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   10750:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   10754:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   10758:	4294      	cmp	r4, r2
   1075a:	d1fb      	bne.n	10754 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1075c:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1075e:	f042 0201 	orr.w	r2, r2, #1
   10762:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   10764:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   10768:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1076a:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   1076c:	8007      	strh	r7, [r0, #0]
   1076e:	8065      	strh	r5, [r4, #2]
   10770:	1984      	adds	r4, r0, r6
   10772:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   10776:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   1077a:	8067      	strh	r7, [r4, #2]
   1077c:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1077e:	885a      	ldrh	r2, [r3, #2]
   10780:	f042 0201 	orr.w	r2, r2, #1
   10784:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   10786:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   10788:	f7ff be40 	b.w	1040c <free_list_add>

0001078c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1078c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1078e:	f013 0307 	ands.w	r3, r3, #7
   10792:	d105      	bne.n	107a0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   10794:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   10796:	2b00      	cmp	r3, #0
   10798:	bf0c      	ite	eq
   1079a:	2000      	moveq	r0, #0
   1079c:	2003      	movne	r0, #3
   1079e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   107a0:	2b02      	cmp	r3, #2
   107a2:	d105      	bne.n	107b0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   107a4:	8b40      	ldrh	r0, [r0, #26]
   107a6:	fab0 f080 	clz	r0, r0
   107aa:	0940      	lsrs	r0, r0, #5
   107ac:	0080      	lsls	r0, r0, #2
   107ae:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   107b0:	2b01      	cmp	r3, #1
   107b2:	d105      	bne.n	107c0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   107b4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   107b6:	2b00      	cmp	r3, #0
   107b8:	bf0c      	ite	eq
   107ba:	2000      	moveq	r0, #0
   107bc:	2005      	movne	r0, #5
   107be:	4770      	bx	lr
	int evt = EVT_NOP;
   107c0:	2000      	movs	r0, #0
}
   107c2:	4770      	bx	lr

000107c4 <validate_args>:
{
   107c4:	b510      	push	{r4, lr}
   107c6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   107c8:	b100      	cbz	r0, 107cc <validate_args+0x8>
   107ca:	b911      	cbnz	r1, 107d2 <validate_args+0xe>
		return -EINVAL;
   107cc:	f06f 0015 	mvn.w	r0, #21
}
   107d0:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   107d2:	1d08      	adds	r0, r1, #4
   107d4:	f000 f895 	bl	10902 <sys_notify_validate>
	if ((rv == 0)
   107d8:	2800      	cmp	r0, #0
   107da:	d1f9      	bne.n	107d0 <validate_args+0xc>
	    && ((cli->notify.flags
   107dc:	68a3      	ldr	r3, [r4, #8]
   107de:	2b03      	cmp	r3, #3
   107e0:	d9f6      	bls.n	107d0 <validate_args+0xc>
   107e2:	e7f3      	b.n	107cc <validate_args+0x8>

000107e4 <notify_one>:
{
   107e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   107e8:	460d      	mov	r5, r1
   107ea:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   107ec:	4619      	mov	r1, r3
   107ee:	1d28      	adds	r0, r5, #4
{
   107f0:	4690      	mov	r8, r2
   107f2:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   107f4:	f000 f899 	bl	1092a <sys_notify_finalize>
	if (cb) {
   107f8:	4604      	mov	r4, r0
   107fa:	b138      	cbz	r0, 1080c <notify_one+0x28>
		cb(mgr, cli, state, res);
   107fc:	4633      	mov	r3, r6
   107fe:	4642      	mov	r2, r8
   10800:	4629      	mov	r1, r5
   10802:	4638      	mov	r0, r7
   10804:	46a4      	mov	ip, r4
}
   10806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1080a:	4760      	bx	ip
}
   1080c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010810 <transition_complete>:
{
   10810:	b410      	push	{r4}
	__asm__ volatile(
   10812:	f04f 0440 	mov.w	r4, #64	; 0x40
   10816:	f3ef 8211 	mrs	r2, BASEPRI
   1081a:	f384 8812 	msr	BASEPRI_MAX, r4
   1081e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   10822:	6141      	str	r1, [r0, #20]
}
   10824:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   10826:	2101      	movs	r1, #1
   10828:	f7f9 bef0 	b.w	a60c <process_event>

0001082c <onoff_manager_init>:
{
   1082c:	b538      	push	{r3, r4, r5, lr}
   1082e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   10830:	4605      	mov	r5, r0
   10832:	b158      	cbz	r0, 1084c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   10834:	b151      	cbz	r1, 1084c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   10836:	680b      	ldr	r3, [r1, #0]
   10838:	b143      	cbz	r3, 1084c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1083a:	684b      	ldr	r3, [r1, #4]
   1083c:	b133      	cbz	r3, 1084c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1083e:	221c      	movs	r2, #28
   10840:	2100      	movs	r1, #0
   10842:	f000 f93c 	bl	10abe <memset>
   10846:	612c      	str	r4, [r5, #16]
	return 0;
   10848:	2000      	movs	r0, #0
}
   1084a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1084c:	f06f 0015 	mvn.w	r0, #21
   10850:	e7fb      	b.n	1084a <onoff_manager_init+0x1e>

00010852 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   10852:	b570      	push	{r4, r5, r6, lr}
   10854:	4605      	mov	r5, r0
   10856:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   10858:	f7ff ffb4 	bl	107c4 <validate_args>

	if (rv < 0) {
   1085c:	1e04      	subs	r4, r0, #0
   1085e:	db15      	blt.n	1088c <onoff_request+0x3a>
   10860:	f04f 0340 	mov.w	r3, #64	; 0x40
   10864:	f3ef 8211 	mrs	r2, BASEPRI
   10868:	f383 8812 	msr	BASEPRI_MAX, r3
   1086c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   10870:	8b6b      	ldrh	r3, [r5, #26]
   10872:	8b2c      	ldrh	r4, [r5, #24]
   10874:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10878:	428b      	cmp	r3, r1
   1087a:	f004 0407 	and.w	r4, r4, #7
   1087e:	d107      	bne.n	10890 <onoff_request+0x3e>
	__asm__ volatile(
   10880:	f382 8811 	msr	BASEPRI, r2
   10884:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   10888:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1088c:	4620      	mov	r0, r4
   1088e:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   10890:	2c02      	cmp	r4, #2
   10892:	d10c      	bne.n	108ae <onoff_request+0x5c>
		mgr->refs += 1U;
   10894:	3301      	adds	r3, #1
   10896:	836b      	strh	r3, [r5, #26]
   10898:	f382 8811 	msr	BASEPRI, r2
   1089c:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   108a0:	2300      	movs	r3, #0
   108a2:	4622      	mov	r2, r4
   108a4:	4631      	mov	r1, r6
   108a6:	4628      	mov	r0, r5
   108a8:	f7ff ff9c 	bl	107e4 <notify_one>
   108ac:	e7ee      	b.n	1088c <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   108ae:	2c06      	cmp	r4, #6
   108b0:	d814      	bhi.n	108dc <onoff_request+0x8a>
   108b2:	e8df f004 	tbb	[pc, r4]
   108b6:	1304      	.short	0x1304
   108b8:	1a041313 	.word	0x1a041313
   108bc:	04          	.byte	0x04
   108bd:	00          	.byte	0x00
	parent->next = child;
   108be:	2300      	movs	r3, #0
   108c0:	6033      	str	r3, [r6, #0]
	return list->tail;
   108c2:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   108c4:	b93b      	cbnz	r3, 108d6 <onoff_request+0x84>
	list->head = node;
   108c6:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   108ca:	b9ac      	cbnz	r4, 108f8 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   108cc:	2102      	movs	r1, #2
   108ce:	4628      	mov	r0, r5
   108d0:	f7f9 fe9c 	bl	a60c <process_event>
   108d4:	e7da      	b.n	1088c <onoff_request+0x3a>
	parent->next = child;
   108d6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   108d8:	606e      	str	r6, [r5, #4]
}
   108da:	e7f6      	b.n	108ca <onoff_request+0x78>
   108dc:	f382 8811 	msr	BASEPRI, r2
   108e0:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   108e4:	f06f 0404 	mvn.w	r4, #4
   108e8:	e7d0      	b.n	1088c <onoff_request+0x3a>
   108ea:	f382 8811 	msr	BASEPRI, r2
   108ee:	f3bf 8f6f 	isb	sy
   108f2:	f06f 0485 	mvn.w	r4, #133	; 0x85
   108f6:	e7c9      	b.n	1088c <onoff_request+0x3a>
   108f8:	f382 8811 	msr	BASEPRI, r2
   108fc:	f3bf 8f6f 	isb	sy
		if (notify) {
   10900:	e7c4      	b.n	1088c <onoff_request+0x3a>

00010902 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   10902:	4603      	mov	r3, r0
   10904:	b140      	cbz	r0, 10918 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   10906:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   10908:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1090c:	2a02      	cmp	r2, #2
   1090e:	d006      	beq.n	1091e <sys_notify_validate+0x1c>
   10910:	2a03      	cmp	r2, #3
   10912:	d004      	beq.n	1091e <sys_notify_validate+0x1c>
   10914:	2a01      	cmp	r2, #1
   10916:	d005      	beq.n	10924 <sys_notify_validate+0x22>
   10918:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1091c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1091e:	681a      	ldr	r2, [r3, #0]
   10920:	2a00      	cmp	r2, #0
   10922:	d0f9      	beq.n	10918 <sys_notify_validate+0x16>
		notify->result = 0;
   10924:	2000      	movs	r0, #0
   10926:	6098      	str	r0, [r3, #8]
   10928:	4770      	bx	lr

0001092a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1092a:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1092c:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1092e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   10930:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   10934:	2a02      	cmp	r2, #2
{
   10936:	4603      	mov	r3, r0
	switch (method) {
   10938:	f04f 0400 	mov.w	r4, #0
   1093c:	d007      	beq.n	1094e <sys_notify_finalize+0x24>
   1093e:	2a03      	cmp	r2, #3
   10940:	d002      	beq.n	10948 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   10942:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   10944:	2000      	movs	r0, #0
   10946:	e001      	b.n	1094c <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   10948:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1094a:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1094c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1094e:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   10950:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   10952:	2800      	cmp	r0, #0
   10954:	d0f6      	beq.n	10944 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   10956:	f7ff fcb3 	bl	102c0 <z_impl_k_poll_signal_raise>
   1095a:	e7f3      	b.n	10944 <sys_notify_finalize+0x1a>

0001095c <encode_uint>:
{
   1095c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10960:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   10962:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   10964:	2b6f      	cmp	r3, #111	; 0x6f
{
   10966:	4680      	mov	r8, r0
   10968:	460f      	mov	r7, r1
   1096a:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1096c:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   10970:	d029      	beq.n	109c6 <encode_uint+0x6a>
   10972:	d824      	bhi.n	109be <encode_uint+0x62>
		return 10;
   10974:	2b58      	cmp	r3, #88	; 0x58
   10976:	bf0c      	ite	eq
   10978:	2610      	moveq	r6, #16
   1097a:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   1097c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   10980:	4632      	mov	r2, r6
   10982:	2300      	movs	r3, #0
   10984:	4640      	mov	r0, r8
   10986:	4639      	mov	r1, r7
   10988:	f7ef fb96 	bl	b8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1098c:	2a09      	cmp	r2, #9
   1098e:	b2d4      	uxtb	r4, r2
   10990:	d81e      	bhi.n	109d0 <encode_uint+0x74>
   10992:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   10994:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10996:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   10998:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1099c:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   109a0:	d301      	bcc.n	109a6 <encode_uint+0x4a>
   109a2:	45d1      	cmp	r9, sl
   109a4:	d811      	bhi.n	109ca <encode_uint+0x6e>
	if (conv->flag_hash) {
   109a6:	782b      	ldrb	r3, [r5, #0]
   109a8:	069b      	lsls	r3, r3, #26
   109aa:	d505      	bpl.n	109b8 <encode_uint+0x5c>
		if (radix == 8) {
   109ac:	2e08      	cmp	r6, #8
   109ae:	d115      	bne.n	109dc <encode_uint+0x80>
			conv->altform_0 = true;
   109b0:	78ab      	ldrb	r3, [r5, #2]
   109b2:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   109b6:	70ab      	strb	r3, [r5, #2]
}
   109b8:	4648      	mov	r0, r9
   109ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   109be:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   109c2:	2b70      	cmp	r3, #112	; 0x70
   109c4:	e7d7      	b.n	10976 <encode_uint+0x1a>
	switch (specifier) {
   109c6:	2608      	movs	r6, #8
   109c8:	e7d8      	b.n	1097c <encode_uint+0x20>
		value /= radix;
   109ca:	4680      	mov	r8, r0
   109cc:	460f      	mov	r7, r1
   109ce:	e7d7      	b.n	10980 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   109d0:	f1bb 0f19 	cmp.w	fp, #25
   109d4:	bf94      	ite	ls
   109d6:	3437      	addls	r4, #55	; 0x37
   109d8:	3457      	addhi	r4, #87	; 0x57
   109da:	e7db      	b.n	10994 <encode_uint+0x38>
		} else if (radix == 16) {
   109dc:	2e10      	cmp	r6, #16
   109de:	d1eb      	bne.n	109b8 <encode_uint+0x5c>
			conv->altform_0c = true;
   109e0:	78ab      	ldrb	r3, [r5, #2]
   109e2:	f043 0310 	orr.w	r3, r3, #16
   109e6:	e7e6      	b.n	109b6 <encode_uint+0x5a>

000109e8 <outs>:
{
   109e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   109ec:	4607      	mov	r7, r0
   109ee:	4688      	mov	r8, r1
   109f0:	4615      	mov	r5, r2
   109f2:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   109f4:	4614      	mov	r4, r2
   109f6:	42b4      	cmp	r4, r6
   109f8:	d305      	bcc.n	10a06 <outs+0x1e>
   109fa:	b10e      	cbz	r6, 10a00 <outs+0x18>
	return (int)count;
   109fc:	1b60      	subs	r0, r4, r5
   109fe:	e008      	b.n	10a12 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   10a00:	7823      	ldrb	r3, [r4, #0]
   10a02:	2b00      	cmp	r3, #0
   10a04:	d0fa      	beq.n	109fc <outs+0x14>
		int rc = out((int)*sp++, ctx);
   10a06:	f814 0b01 	ldrb.w	r0, [r4], #1
   10a0a:	4641      	mov	r1, r8
   10a0c:	47b8      	blx	r7
		if (rc < 0) {
   10a0e:	2800      	cmp	r0, #0
   10a10:	daf1      	bge.n	109f6 <outs+0xe>
}
   10a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010a16 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   10a16:	b40f      	push	{r0, r1, r2, r3}
   10a18:	b507      	push	{r0, r1, r2, lr}
   10a1a:	a904      	add	r1, sp, #16
   10a1c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   10a20:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   10a22:	f7f9 fdcf 	bl	a5c4 <vprintk>

	va_end(ap);
}
   10a26:	b003      	add	sp, #12
   10a28:	f85d eb04 	ldr.w	lr, [sp], #4
   10a2c:	b004      	add	sp, #16
   10a2e:	4770      	bx	lr

00010a30 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   10a30:	4770      	bx	lr

00010a32 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   10a32:	f000 bda4 	b.w	1157e <z_fatal_error>

00010a36 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   10a36:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   10a38:	6800      	ldr	r0, [r0, #0]
   10a3a:	f000 bda0 	b.w	1157e <z_fatal_error>

00010a3e <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   10a3e:	2100      	movs	r1, #0
   10a40:	2001      	movs	r0, #1
   10a42:	f7ff bff6 	b.w	10a32 <z_arm_fatal_error>

00010a46 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   10a46:	b508      	push	{r3, lr}
	handler();
   10a48:	f7fa fc50 	bl	b2ec <z_SysNmiOnReset>
	z_arm_int_exit();
}
   10a4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   10a50:	f7fa bd02 	b.w	b458 <z_arm_exc_exit>

00010a54 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   10a54:	3901      	subs	r1, #1
   10a56:	4603      	mov	r3, r0
   10a58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   10a5c:	b90a      	cbnz	r2, 10a62 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   10a5e:	701a      	strb	r2, [r3, #0]

	return dest;
}
   10a60:	4770      	bx	lr
		*d = *s;
   10a62:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   10a66:	e7f7      	b.n	10a58 <strcpy+0x4>

00010a68 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   10a68:	4603      	mov	r3, r0
	size_t n = 0;
   10a6a:	2000      	movs	r0, #0

	while (*s != '\0') {
   10a6c:	5c1a      	ldrb	r2, [r3, r0]
   10a6e:	b902      	cbnz	r2, 10a72 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   10a70:	4770      	bx	lr
		n++;
   10a72:	3001      	adds	r0, #1
   10a74:	e7fa      	b.n	10a6c <strlen+0x4>

00010a76 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   10a76:	4603      	mov	r3, r0
	size_t n = 0;
   10a78:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   10a7a:	5c1a      	ldrb	r2, [r3, r0]
   10a7c:	b10a      	cbz	r2, 10a82 <strnlen+0xc>
   10a7e:	4288      	cmp	r0, r1
   10a80:	d100      	bne.n	10a84 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   10a82:	4770      	bx	lr
		n++;
   10a84:	3001      	adds	r0, #1
   10a86:	e7f8      	b.n	10a7a <strnlen+0x4>

00010a88 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   10a88:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   10a8a:	b15a      	cbz	r2, 10aa4 <memcmp+0x1c>
   10a8c:	3901      	subs	r1, #1
   10a8e:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   10a90:	f810 2b01 	ldrb.w	r2, [r0], #1
   10a94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   10a98:	42a0      	cmp	r0, r4
   10a9a:	d001      	beq.n	10aa0 <memcmp+0x18>
   10a9c:	429a      	cmp	r2, r3
   10a9e:	d0f7      	beq.n	10a90 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   10aa0:	1ad0      	subs	r0, r2, r3
}
   10aa2:	bd10      	pop	{r4, pc}
		return 0;
   10aa4:	4610      	mov	r0, r2
   10aa6:	e7fc      	b.n	10aa2 <memcmp+0x1a>

00010aa8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   10aa8:	b510      	push	{r4, lr}
   10aaa:	1e43      	subs	r3, r0, #1
   10aac:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   10aae:	4291      	cmp	r1, r2
   10ab0:	d100      	bne.n	10ab4 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   10ab2:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   10ab4:	f811 4b01 	ldrb.w	r4, [r1], #1
   10ab8:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   10abc:	e7f7      	b.n	10aae <memcpy+0x6>

00010abe <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   10abe:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   10ac0:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   10ac2:	4603      	mov	r3, r0
	while (n > 0) {
   10ac4:	4293      	cmp	r3, r2
   10ac6:	d100      	bne.n	10aca <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   10ac8:	4770      	bx	lr
		*(d_byte++) = c_byte;
   10aca:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   10ace:	e7f9      	b.n	10ac4 <memset+0x6>

00010ad0 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   10ad0:	f04f 0240 	mov.w	r2, #64	; 0x40
   10ad4:	f3ef 8311 	mrs	r3, BASEPRI
   10ad8:	f382 8812 	msr	BASEPRI_MAX, r2
   10adc:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   10ae0:	f383 8811 	msr	BASEPRI, r3
   10ae4:	f3bf 8f6f 	isb	sy
}
   10ae8:	2000      	movs	r0, #0
   10aea:	4770      	bx	lr

00010aec <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   10aec:	2806      	cmp	r0, #6
   10aee:	d108      	bne.n	10b02 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   10af0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10af4:	2201      	movs	r2, #1
   10af6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   10afa:	f3bf 8f4f 	dsb	sy
        __WFE();
   10afe:	bf20      	wfe
    while (true)
   10b00:	e7fd      	b.n	10afe <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   10b02:	4770      	bx	lr

00010b04 <pm_state_exit_post_ops>:
   10b04:	2300      	movs	r3, #0
   10b06:	f383 8811 	msr	BASEPRI, r3
   10b0a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   10b0e:	4770      	bx	lr

00010b10 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   10b10:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   10b12:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   10b14:	2106      	movs	r1, #6
{
   10b16:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   10b18:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   10b1c:	f7fd fbe6 	bl	e2ec <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   10b20:	b918      	cbnz	r0, 10b2a <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   10b22:	79a3      	ldrb	r3, [r4, #6]
   10b24:	f063 033f 	orn	r3, r3, #63	; 0x3f
   10b28:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   10b2a:	bd10      	pop	{r4, pc}

00010b2c <hci_vendor_event>:
}
   10b2c:	4770      	bx	lr

00010b2e <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   10b2e:	2101      	movs	r1, #1
   10b30:	3008      	adds	r0, #8
   10b32:	f000 ba23 	b.w	10f7c <net_buf_simple_pull_mem>

00010b36 <handle_event_common.isra.0>:
static int handle_event_common(uint8_t event, struct net_buf *buf,
   10b36:	b430      	push	{r4, r5}
   10b38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   10b3c:	4604      	mov	r4, r0
   10b3e:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   10b40:	429a      	cmp	r2, r3
   10b42:	d101      	bne.n	10b48 <handle_event_common.isra.0+0x12>
}
   10b44:	bc30      	pop	{r4, r5}
   10b46:	4770      	bx	lr
		if (handler->event != event) {
   10b48:	4611      	mov	r1, r2
   10b4a:	f811 5b08 	ldrb.w	r5, [r1], #8
   10b4e:	42a5      	cmp	r5, r4
   10b50:	d106      	bne.n	10b60 <handle_event_common.isra.0+0x2a>
		if (buf->len < handler->min_len) {
   10b52:	8981      	ldrh	r1, [r0, #12]
   10b54:	7853      	ldrb	r3, [r2, #1]
   10b56:	4299      	cmp	r1, r3
   10b58:	d3f4      	bcc.n	10b44 <handle_event_common.isra.0+0xe>
}
   10b5a:	bc30      	pop	{r4, r5}
		handler->handler(buf);
   10b5c:	6853      	ldr	r3, [r2, #4]
   10b5e:	4718      	bx	r3
   10b60:	460a      	mov	r2, r1
   10b62:	e7ed      	b.n	10b40 <handle_event_common.isra.0+0xa>

00010b64 <bt_addr_le_eq>:
{
   10b64:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   10b66:	2207      	movs	r2, #7
   10b68:	f7ff ff8e 	bl	10a88 <memcmp>
}
   10b6c:	fab0 f080 	clz	r0, r0
   10b70:	0940      	lsrs	r0, r0, #5
   10b72:	bd08      	pop	{r3, pc}

00010b74 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   10b74:	b118      	cbz	r0, 10b7e <bt_id_set_adv_random_addr+0xa>
   10b76:	b111      	cbz	r1, 10b7e <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   10b78:	4608      	mov	r0, r1
   10b7a:	f7fb bb57 	b.w	c22c <set_random_address>
}
   10b7e:	f06f 0015 	mvn.w	r0, #21
   10b82:	4770      	bx	lr

00010b84 <bt_id_set_adv_private_addr>:
{
   10b84:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   10b86:	4604      	mov	r4, r0
   10b88:	b180      	cbz	r0, 10bac <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   10b8a:	2106      	movs	r1, #6
   10b8c:	4668      	mov	r0, sp
   10b8e:	f7fd fbad 	bl	e2ec <bt_rand>
	if (err) {
   10b92:	b948      	cbnz	r0, 10ba8 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   10b94:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   10b98:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   10b9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   10b9e:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   10ba0:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   10ba4:	f7ff ffe6 	bl	10b74 <bt_id_set_adv_random_addr>
}
   10ba8:	b002      	add	sp, #8
   10baa:	bd10      	pop	{r4, pc}
		return -EINVAL;
   10bac:	f06f 0015 	mvn.w	r0, #21
   10bb0:	e7fa      	b.n	10ba8 <bt_id_set_adv_private_addr+0x24>

00010bb2 <bt_id_adv_random_addr_check>:
}
   10bb2:	3800      	subs	r0, #0
   10bb4:	bf18      	it	ne
   10bb6:	2001      	movne	r0, #1
   10bb8:	4770      	bx	lr

00010bba <get_adv_channel_map>:
{
   10bba:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   10bbc:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   10bc0:	bf0c      	ite	eq
   10bc2:	2007      	moveq	r0, #7
   10bc4:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   10bc6:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   10bc8:	bf48      	it	mi
   10bca:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   10bce:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   10bd0:	bf48      	it	mi
   10bd2:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   10bd6:	4770      	bx	lr

00010bd8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10bd8:	f3bf 8f5b 	dmb	ish
   10bdc:	6800      	ldr	r0, [r0, #0]
   10bde:	f3bf 8f5b 	dmb	ish
}
   10be2:	4770      	bx	lr

00010be4 <atomic_and>:
{
   10be4:	b510      	push	{r4, lr}
   10be6:	4603      	mov	r3, r0
}
   10be8:	f3bf 8f5b 	dmb	ish
   10bec:	e853 0f00 	ldrex	r0, [r3]
   10bf0:	ea00 0201 	and.w	r2, r0, r1
   10bf4:	e843 2400 	strex	r4, r2, [r3]
   10bf8:	2c00      	cmp	r4, #0
   10bfa:	d1f7      	bne.n	10bec <atomic_and+0x8>
   10bfc:	f3bf 8f5b 	dmb	ish
   10c00:	bd10      	pop	{r4, pc}

00010c02 <hci_set_ad>:
{
   10c02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c06:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   10c08:	2120      	movs	r1, #32
{
   10c0a:	9000      	str	r0, [sp, #0]
   10c0c:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   10c0e:	f7fa ff23 	bl	ba58 <bt_hci_cmd_create>
	if (!buf) {
   10c12:	4605      	mov	r5, r0
   10c14:	2800      	cmp	r0, #0
   10c16:	d050      	beq.n	10cba <hci_set_ad+0xb8>
	return net_buf_simple_add(&buf->b, len);
   10c18:	2120      	movs	r1, #32
   10c1a:	3008      	adds	r0, #8
   10c1c:	f000 f997 	bl	10f4e <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   10c20:	2220      	movs	r2, #32
   10c22:	2100      	movs	r1, #0
   10c24:	4681      	mov	r9, r0
   10c26:	f7ff ff4a 	bl	10abe <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   10c2a:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   10c2e:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   10c32:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   10c34:	f8d4 8000 	ldr.w	r8, [r4]
   10c38:	2300      	movs	r3, #0
   10c3a:	6862      	ldr	r2, [r4, #4]
   10c3c:	4293      	cmp	r3, r2
   10c3e:	d30c      	bcc.n	10c5a <hci_set_ad+0x58>
	for (size_t i = 0; i < ad_len; i++) {
   10c40:	3408      	adds	r4, #8
   10c42:	45a2      	cmp	sl, r4
   10c44:	d1f6      	bne.n	10c34 <hci_set_ad+0x32>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   10c46:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   10c48:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   10c4c:	2200      	movs	r2, #0
   10c4e:	4629      	mov	r1, r5
}
   10c50:	b003      	add	sp, #12
   10c52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   10c56:	f7fa bf39 	b.w	bacc <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   10c5a:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   10c5e:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   10c62:	1cb0      	adds	r0, r6, #2
   10c64:	1811      	adds	r1, r2, r0
   10c66:	291f      	cmp	r1, #31
   10c68:	d908      	bls.n	10c7c <hci_set_ad+0x7a>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   10c6a:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   10c6e:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   10c72:	d11a      	bne.n	10caa <hci_set_ad+0xa8>
   10c74:	2a00      	cmp	r2, #0
   10c76:	dd18      	ble.n	10caa <hci_set_ad+0xa8>
				type = BT_DATA_NAME_SHORTENED;
   10c78:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   10c7c:	b2d7      	uxtb	r7, r2
   10c7e:	1c79      	adds	r1, r7, #1
   10c80:	f80b 1006 	strb.w	r1, [fp, r6]
   10c84:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   10c86:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   10c88:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   10c8c:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   10c90:	f8d8 1004 	ldr.w	r1, [r8, #4]
   10c94:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   10c96:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   10c98:	f7ff ff06 	bl	10aa8 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   10c9c:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   10c9e:	4437      	add	r7, r6
   10ca0:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   10ca2:	3301      	adds	r3, #1
   10ca4:	f108 0808 	add.w	r8, r8, #8
   10ca8:	e7c7      	b.n	10c3a <hci_set_ad+0x38>
		net_buf_unref(buf);
   10caa:	4628      	mov	r0, r5
   10cac:	f7fb feda 	bl	ca64 <net_buf_unref>
		return err;
   10cb0:	f06f 0015 	mvn.w	r0, #21
}
   10cb4:	b003      	add	sp, #12
   10cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
   10cba:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10cbe:	e7f9      	b.n	10cb4 <hci_set_ad+0xb2>

00010cc0 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   10cc0:	2301      	movs	r3, #1
{
   10cc2:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   10cc4:	fa03 f101 	lsl.w	r1, r3, r1
{
   10cc8:	4604      	mov	r4, r0
	if (val) {
   10cca:	b162      	cbz	r2, 10ce6 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10ccc:	f3bf 8f5b 	dmb	ish
   10cd0:	e854 3f00 	ldrex	r3, [r4]
   10cd4:	430b      	orrs	r3, r1
   10cd6:	e844 3200 	strex	r2, r3, [r4]
   10cda:	2a00      	cmp	r2, #0
   10cdc:	d1f8      	bne.n	10cd0 <atomic_set_bit_to+0x10>
   10cde:	f3bf 8f5b 	dmb	ish
	}
}
   10ce2:	bc10      	pop	{r4}
   10ce4:	4770      	bx	lr
   10ce6:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10ce8:	43c9      	mvns	r1, r1
   10cea:	f7ff bf7b 	b.w	10be4 <atomic_and>

00010cee <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   10cee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cf2:	b087      	sub	sp, #28
   10cf4:	4605      	mov	r5, r0
   10cf6:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   10cfa:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   10cfe:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   10d02:	460c      	mov	r4, r1
   10d04:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   10d06:	2100      	movs	r1, #0
   10d08:	2210      	movs	r2, #16
   10d0a:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   10d0c:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   10d0e:	f7ff fed6 	bl	10abe <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   10d12:	b9ee      	cbnz	r6, 10d50 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   10d14:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   10d18:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   10d1a:	a902      	add	r1, sp, #8
   10d1c:	f242 0008 	movw	r0, #8200	; 0x2008
   10d20:	f7ff ff6f 	bl	10c02 <hci_set_ad>
		if (err) {
   10d24:	4604      	mov	r4, r0
   10d26:	b978      	cbnz	r0, 10d48 <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   10d28:	f1ba 0f00 	cmp.w	sl, #0
   10d2c:	d13e      	bne.n	10dac <le_adv_update.constprop.0+0xbe>
   10d2e:	3510      	adds	r5, #16
   10d30:	f3bf 8f5b 	dmb	ish
   10d34:	e855 3f00 	ldrex	r3, [r5]
   10d38:	f043 0304 	orr.w	r3, r3, #4
   10d3c:	e845 3200 	strex	r2, r3, [r5]
   10d40:	2a00      	cmp	r2, #0
   10d42:	d1f7      	bne.n	10d34 <le_adv_update.constprop.0+0x46>
   10d44:	f3bf 8f5b 	dmb	ish
}
   10d48:	4620      	mov	r0, r4
   10d4a:	b007      	add	sp, #28
   10d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   10d50:	f7fb fa50 	bl	c1f4 <bt_get_name>
   10d54:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   10d56:	b9e4      	cbnz	r4, 10d92 <le_adv_update.constprop.0+0xa4>
   10d58:	bb37      	cbnz	r7, 10da8 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   10d5a:	4658      	mov	r0, fp
   10d5c:	f7ff fe84 	bl	10a68 <strlen>
   10d60:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   10d62:	2e01      	cmp	r6, #1
		d[0].data = ad;
   10d64:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   10d68:	f88d 3000 	strb.w	r3, [sp]
   10d6c:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   10d70:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   10d74:	d1d0      	bne.n	10d18 <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   10d76:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   10d7a:	9605      	str	r6, [sp, #20]
			d_len = 2;
   10d7c:	2202      	movs	r2, #2
   10d7e:	e7cc      	b.n	10d1a <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   10d80:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   10d84:	3a08      	subs	r2, #8
   10d86:	2a01      	cmp	r2, #1
   10d88:	d925      	bls.n	10dd6 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   10d8a:	3301      	adds	r3, #1
   10d8c:	4598      	cmp	r8, r3
   10d8e:	d1f7      	bne.n	10d80 <le_adv_update.constprop.0+0x92>
   10d90:	e7e2      	b.n	10d58 <le_adv_update.constprop.0+0x6a>
   10d92:	2300      	movs	r3, #0
   10d94:	e7fa      	b.n	10d8c <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   10d96:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   10d9a:	3a08      	subs	r2, #8
   10d9c:	2a01      	cmp	r2, #1
   10d9e:	d91a      	bls.n	10dd6 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   10da0:	3301      	adds	r3, #1
   10da2:	4599      	cmp	r9, r3
   10da4:	d1f7      	bne.n	10d96 <le_adv_update.constprop.0+0xa8>
   10da6:	e7d8      	b.n	10d5a <le_adv_update.constprop.0+0x6c>
   10da8:	2300      	movs	r3, #0
   10daa:	e7fa      	b.n	10da2 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   10dac:	2e02      	cmp	r6, #2
   10dae:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   10db2:	bf08      	it	eq
   10db4:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   10db6:	a902      	add	r1, sp, #8
			d_len = 2;
   10db8:	bf08      	it	eq
   10dba:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   10dbc:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   10dc0:	bf08      	it	eq
   10dc2:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   10dc6:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   10dca:	f7ff ff1a 	bl	10c02 <hci_set_ad>
		if (err) {
   10dce:	2800      	cmp	r0, #0
   10dd0:	d0ad      	beq.n	10d2e <le_adv_update.constprop.0+0x40>
   10dd2:	4604      	mov	r4, r0
   10dd4:	e7b8      	b.n	10d48 <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   10dd6:	f06f 0415 	mvn.w	r4, #21
   10dda:	e7b5      	b.n	10d48 <le_adv_update.constprop.0+0x5a>

00010ddc <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   10ddc:	6843      	ldr	r3, [r0, #4]
   10dde:	f013 0008 	ands.w	r0, r3, #8
   10de2:	d00a      	beq.n	10dfa <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   10de4:	035a      	lsls	r2, r3, #13
   10de6:	d407      	bmi.n	10df8 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   10de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   10dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   10df0:	bf14      	ite	ne
   10df2:	2002      	movne	r0, #2
   10df4:	2001      	moveq	r0, #1
   10df6:	4770      	bx	lr
   10df8:	2001      	movs	r0, #1
}
   10dfa:	4770      	bx	lr

00010dfc <bt_le_adv_set_enable_legacy>:
{
   10dfc:	b570      	push	{r4, r5, r6, lr}
   10dfe:	4606      	mov	r6, r0
   10e00:	b086      	sub	sp, #24
   10e02:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   10e04:	f242 000a 	movw	r0, #8202	; 0x200a
   10e08:	2101      	movs	r1, #1
   10e0a:	f7fa fe25 	bl	ba58 <bt_hci_cmd_create>
	if (!buf) {
   10e0e:	4604      	mov	r4, r0
   10e10:	b1b0      	cbz	r0, 10e40 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   10e12:	3008      	adds	r0, #8
	if (enable) {
   10e14:	b195      	cbz	r5, 10e3c <bt_le_adv_set_enable_legacy+0x40>
   10e16:	2101      	movs	r1, #1
   10e18:	f000 f8a8 	bl	10f6c <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   10e1c:	f106 0210 	add.w	r2, r6, #16
   10e20:	a903      	add	r1, sp, #12
   10e22:	4620      	mov	r0, r4
   10e24:	9500      	str	r5, [sp, #0]
   10e26:	2307      	movs	r3, #7
   10e28:	f7fa fe04 	bl	ba34 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   10e2c:	2200      	movs	r2, #0
   10e2e:	4621      	mov	r1, r4
   10e30:	f242 000a 	movw	r0, #8202	; 0x200a
   10e34:	f7fa fe4a 	bl	bacc <bt_hci_cmd_send_sync>
}
   10e38:	b006      	add	sp, #24
   10e3a:	bd70      	pop	{r4, r5, r6, pc}
   10e3c:	4629      	mov	r1, r5
   10e3e:	e7eb      	b.n	10e18 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   10e40:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10e44:	e7f8      	b.n	10e38 <bt_le_adv_set_enable_legacy+0x3c>

00010e46 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   10e46:	3018      	adds	r0, #24
   10e48:	f000 bdc7 	b.w	119da <k_work_cancel_delayable>

00010e4c <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   10e4c:	f7fb bd2c 	b.w	c8a8 <bt_le_adv_stop>

00010e50 <fixed_data_unref>:
}
   10e50:	4770      	bx	lr

00010e52 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   10e52:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   10e54:	6849      	ldr	r1, [r1, #4]
   10e56:	6809      	ldr	r1, [r1, #0]
   10e58:	f7fb bd72 	b.w	c940 <net_buf_alloc_len>

00010e5c <net_buf_get>:
{
   10e5c:	b570      	push	{r4, r5, r6, lr}
   10e5e:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   10e60:	f7fe fa84 	bl	f36c <z_impl_k_queue_get>
	if (!buf) {
   10e64:	4605      	mov	r5, r0
   10e66:	b128      	cbz	r0, 10e74 <net_buf_get+0x18>
   10e68:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   10e6a:	7963      	ldrb	r3, [r4, #5]
   10e6c:	f013 0301 	ands.w	r3, r3, #1
   10e70:	d102      	bne.n	10e78 <net_buf_get+0x1c>
	frag->frags = NULL;
   10e72:	6023      	str	r3, [r4, #0]
}
   10e74:	4628      	mov	r0, r5
   10e76:	bd70      	pop	{r4, r5, r6, pc}
   10e78:	2300      	movs	r3, #0
   10e7a:	2200      	movs	r2, #0
   10e7c:	4630      	mov	r0, r6
   10e7e:	f7fe fa75 	bl	f36c <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   10e82:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   10e84:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   10e86:	f023 0301 	bic.w	r3, r3, #1
   10e8a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   10e8c:	4604      	mov	r4, r0
   10e8e:	e7ec      	b.n	10e6a <net_buf_get+0xe>

00010e90 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   10e90:	6883      	ldr	r3, [r0, #8]
   10e92:	440b      	add	r3, r1
   10e94:	6003      	str	r3, [r0, #0]
}
   10e96:	4770      	bx	lr

00010e98 <net_buf_slist_put>:
{
   10e98:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   10e9a:	460b      	mov	r3, r1
   10e9c:	681c      	ldr	r4, [r3, #0]
   10e9e:	b98c      	cbnz	r4, 10ec4 <net_buf_slist_put+0x2c>
	__asm__ volatile(
   10ea0:	f04f 0240 	mov.w	r2, #64	; 0x40
   10ea4:	f3ef 8411 	mrs	r4, BASEPRI
   10ea8:	f382 8812 	msr	BASEPRI_MAX, r2
   10eac:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   10eb0:	b119      	cbz	r1, 10eba <net_buf_slist_put+0x22>
	return list->tail;
   10eb2:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   10eb4:	b962      	cbnz	r2, 10ed0 <net_buf_slist_put+0x38>
	list->head = node;
   10eb6:	6001      	str	r1, [r0, #0]
	list->tail = node;
   10eb8:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   10eba:	f384 8811 	msr	BASEPRI, r4
   10ebe:	f3bf 8f6f 	isb	sy
}
   10ec2:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   10ec4:	795a      	ldrb	r2, [r3, #5]
   10ec6:	f042 0201 	orr.w	r2, r2, #1
   10eca:	715a      	strb	r2, [r3, #5]
   10ecc:	4623      	mov	r3, r4
   10ece:	e7e5      	b.n	10e9c <net_buf_slist_put+0x4>
	parent->next = child;
   10ed0:	6011      	str	r1, [r2, #0]
}
   10ed2:	e7f1      	b.n	10eb8 <net_buf_slist_put+0x20>

00010ed4 <net_buf_slist_get>:
{
   10ed4:	b570      	push	{r4, r5, r6, lr}
   10ed6:	4603      	mov	r3, r0
	__asm__ volatile(
   10ed8:	f04f 0240 	mov.w	r2, #64	; 0x40
   10edc:	f3ef 8511 	mrs	r5, BASEPRI
   10ee0:	f382 8812 	msr	BASEPRI_MAX, r2
   10ee4:	f3bf 8f6f 	isb	sy
	return list->head;
   10ee8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   10eea:	b158      	cbz	r0, 10f04 <net_buf_slist_get+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10eec:	6859      	ldr	r1, [r3, #4]
	return node->next;
   10eee:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   10ef0:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10ef2:	4288      	cmp	r0, r1
	list->tail = node;
   10ef4:	bf08      	it	eq
   10ef6:	605a      	streq	r2, [r3, #4]
   10ef8:	4602      	mov	r2, r0
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   10efa:	7951      	ldrb	r1, [r2, #5]
   10efc:	f011 0101 	ands.w	r1, r1, #1
   10f00:	d105      	bne.n	10f0e <net_buf_slist_get+0x3a>
		frag->frags = NULL;
   10f02:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   10f04:	f385 8811 	msr	BASEPRI, r5
   10f08:	f3bf 8f6f 	isb	sy
}
   10f0c:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   10f0e:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET(slist, snode)
   10f10:	b129      	cbz	r1, 10f1e <net_buf_slist_get+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10f12:	685e      	ldr	r6, [r3, #4]
	return node->next;
   10f14:	680c      	ldr	r4, [r1, #0]
	list->head = node;
   10f16:	601c      	str	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10f18:	42b1      	cmp	r1, r6
	list->tail = node;
   10f1a:	bf08      	it	eq
   10f1c:	605c      	streq	r4, [r3, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   10f1e:	7954      	ldrb	r4, [r2, #5]
			frag->frags = (void *)sys_slist_get(list);
   10f20:	6011      	str	r1, [r2, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   10f22:	f024 0401 	bic.w	r4, r4, #1
   10f26:	7154      	strb	r4, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   10f28:	460a      	mov	r2, r1
   10f2a:	e7e6      	b.n	10efa <net_buf_slist_get+0x26>

00010f2c <net_buf_put>:
{
   10f2c:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   10f2e:	460a      	mov	r2, r1
   10f30:	6814      	ldr	r4, [r2, #0]
   10f32:	b914      	cbnz	r4, 10f3a <net_buf_put+0xe>
}
   10f34:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   10f36:	f000 bc55 	b.w	117e4 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   10f3a:	7953      	ldrb	r3, [r2, #5]
   10f3c:	f043 0301 	orr.w	r3, r3, #1
   10f40:	7153      	strb	r3, [r2, #5]
   10f42:	4622      	mov	r2, r4
   10f44:	e7f4      	b.n	10f30 <net_buf_put+0x4>

00010f46 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   10f46:	7902      	ldrb	r2, [r0, #4]
   10f48:	3201      	adds	r2, #1
   10f4a:	7102      	strb	r2, [r0, #4]
	return buf;
}
   10f4c:	4770      	bx	lr

00010f4e <net_buf_simple_add>:
	return buf->data + buf->len;
   10f4e:	8883      	ldrh	r3, [r0, #4]
   10f50:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   10f52:	4419      	add	r1, r3
   10f54:	8081      	strh	r1, [r0, #4]
	return tail;
}
   10f56:	18d0      	adds	r0, r2, r3
   10f58:	4770      	bx	lr

00010f5a <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   10f5a:	b430      	push	{r4, r5}
   10f5c:	8884      	ldrh	r4, [r0, #4]
   10f5e:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   10f60:	18a3      	adds	r3, r4, r2
   10f62:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   10f64:	1928      	adds	r0, r5, r4
}
   10f66:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   10f68:	f7ff bd9e 	b.w	10aa8 <memcpy>

00010f6c <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   10f6c:	b510      	push	{r4, lr}
   10f6e:	8883      	ldrh	r3, [r0, #4]
   10f70:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   10f72:	1c5c      	adds	r4, r3, #1
   10f74:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   10f76:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   10f78:	18d0      	adds	r0, r2, r3
   10f7a:	bd10      	pop	{r4, pc}

00010f7c <net_buf_simple_pull_mem>:
	buf->len -= len;
	return buf->data += len;
}

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   10f7c:	4603      	mov	r3, r0
	void *data = buf->data;
   10f7e:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   10f80:	889a      	ldrh	r2, [r3, #4]
   10f82:	1a52      	subs	r2, r2, r1
	buf->data += len;
   10f84:	4401      	add	r1, r0
	buf->len -= len;
   10f86:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   10f88:	6019      	str	r1, [r3, #0]

	return data;
}
   10f8a:	4770      	bx	lr

00010f8c <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   10f8c:	6802      	ldr	r2, [r0, #0]
   10f8e:	6880      	ldr	r0, [r0, #8]
}
   10f90:	1a10      	subs	r0, r2, r0
   10f92:	4770      	bx	lr

00010f94 <adc_context_on_timer_expired>:
{
   10f94:	b410      	push	{r4}
   10f96:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10f98:	3808      	subs	r0, #8
   10f9a:	f3bf 8f5b 	dmb	ish
   10f9e:	e850 2f00 	ldrex	r2, [r0]
   10fa2:	1c51      	adds	r1, r2, #1
   10fa4:	e840 1400 	strex	r4, r1, [r0]
   10fa8:	2c00      	cmp	r4, #0
   10faa:	d1f8      	bne.n	10f9e <adc_context_on_timer_expired+0xa>
   10fac:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   10fb0:	b912      	cbnz	r2, 10fb8 <adc_context_on_timer_expired+0x24>
}
   10fb2:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   10fb4:	f7fb bd94 	b.w	cae0 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   10fb8:	f06f 020f 	mvn.w	r2, #15
}
   10fbc:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   10fbe:	669a      	str	r2, [r3, #104]	; 0x68
}
   10fc0:	4770      	bx	lr

00010fc2 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   10fc2:	6903      	ldr	r3, [r0, #16]
   10fc4:	b2c9      	uxtb	r1, r1
   10fc6:	220c      	movs	r2, #12
   10fc8:	fb01 3302 	mla	r3, r1, r2, r3
   10fcc:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   10fce:	f000 0007 	and.w	r0, r0, #7
   10fd2:	4770      	bx	lr

00010fd4 <set_on_state>:
	__asm__ volatile(
   10fd4:	f04f 0340 	mov.w	r3, #64	; 0x40
   10fd8:	f3ef 8211 	mrs	r2, BASEPRI
   10fdc:	f383 8812 	msr	BASEPRI_MAX, r3
   10fe0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   10fe4:	6803      	ldr	r3, [r0, #0]
   10fe6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10fea:	f043 0302 	orr.w	r3, r3, #2
   10fee:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   10ff0:	f382 8811 	msr	BASEPRI, r2
   10ff4:	f3bf 8f6f 	isb	sy
}
   10ff8:	4770      	bx	lr

00010ffa <stop>:
{
   10ffa:	b570      	push	{r4, r5, r6, lr}
   10ffc:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   10ffe:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   11000:	f04f 0440 	mov.w	r4, #64	; 0x40
   11004:	f3ef 8511 	mrs	r5, BASEPRI
   11008:	f384 8812 	msr	BASEPRI_MAX, r4
   1100c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   11010:	260c      	movs	r6, #12
   11012:	fb06 3401 	mla	r4, r6, r1, r3
   11016:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   11018:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1101c:	d008      	beq.n	11030 <stop+0x36>
   1101e:	42a2      	cmp	r2, r4
   11020:	d006      	beq.n	11030 <stop+0x36>
	__asm__ volatile(
   11022:	f385 8811 	msr	BASEPRI, r5
   11026:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1102a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1102e:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   11030:	fb06 3301 	mla	r3, r6, r1, r3
   11034:	2201      	movs	r2, #1
   11036:	641a      	str	r2, [r3, #64]	; 0x40
   11038:	f385 8811 	msr	BASEPRI, r5
   1103c:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   11040:	6843      	ldr	r3, [r0, #4]
   11042:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   11046:	685b      	ldr	r3, [r3, #4]
   11048:	4798      	blx	r3
	return 0;
   1104a:	2000      	movs	r0, #0
   1104c:	e7ef      	b.n	1102e <stop+0x34>

0001104e <api_stop>:
	return stop(dev, subsys, CTX_API);
   1104e:	2280      	movs	r2, #128	; 0x80
   11050:	f7ff bfd3 	b.w	10ffa <stop>

00011054 <async_start>:
{
   11054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11056:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   11058:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1105a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1105c:	f04f 0540 	mov.w	r5, #64	; 0x40
   11060:	f3ef 8611 	mrs	r6, BASEPRI
   11064:	f385 8812 	msr	BASEPRI_MAX, r5
   11068:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1106c:	250c      	movs	r5, #12
   1106e:	fb05 4401 	mla	r4, r5, r1, r4
   11072:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   11074:	f005 0c07 	and.w	ip, r5, #7
   11078:	f1bc 0f01 	cmp.w	ip, #1
   1107c:	d10c      	bne.n	11098 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1107e:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   11080:	f386 8811 	msr	BASEPRI, r6
   11084:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   11088:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1108c:	6843      	ldr	r3, [r0, #4]
   1108e:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   11092:	4798      	blx	r3
	return 0;
   11094:	2000      	movs	r0, #0
}
   11096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   11098:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1109c:	42af      	cmp	r7, r5
   1109e:	f386 8811 	msr	BASEPRI, r6
   110a2:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   110a6:	bf0c      	ite	eq
   110a8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   110ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   110b0:	e7f1      	b.n	11096 <async_start+0x42>

000110b2 <api_start>:
{
   110b2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   110b4:	2480      	movs	r4, #128	; 0x80
   110b6:	9400      	str	r4, [sp, #0]
   110b8:	f7ff ffcc 	bl	11054 <async_start>
}
   110bc:	b002      	add	sp, #8
   110be:	bd10      	pop	{r4, pc}

000110c0 <onoff_started_callback>:
{
   110c0:	b410      	push	{r4}
	return &data->mgr[type];
   110c2:	6900      	ldr	r0, [r0, #16]
   110c4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   110c6:	241c      	movs	r4, #28
   110c8:	fb03 0004 	mla	r0, r3, r4, r0
   110cc:	2100      	movs	r1, #0
}
   110ce:	bc10      	pop	{r4}
	notify(mgr, 0);
   110d0:	4710      	bx	r2

000110d2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   110d2:	2000      	movs	r0, #0
   110d4:	f7fd b97e 	b.w	e3d4 <nrfx_clock_start>

000110d8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   110d8:	2000      	movs	r0, #0
   110da:	f000 b9e3 	b.w	114a4 <nrfx_clock_stop>

000110de <blocking_start_callback>:
{
   110de:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   110e0:	f7fe b978 	b.w	f3d4 <z_impl_k_sem_give>

000110e4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   110e4:	6843      	ldr	r3, [r0, #4]
   110e6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   110e8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   110ec:	600b      	str	r3, [r1, #0]
}
   110ee:	2000      	movs	r0, #0
   110f0:	4770      	bx	lr

000110f2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   110f2:	6843      	ldr	r3, [r0, #4]
   110f4:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   110f6:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   110fa:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   110fe:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   11102:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   11106:	2000      	movs	r0, #0
   11108:	4770      	bx	lr

0001110a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1110a:	6843      	ldr	r3, [r0, #4]
   1110c:	685b      	ldr	r3, [r3, #4]
}
   1110e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   11110:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   11114:	4770      	bx	lr

00011116 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11116:	6843      	ldr	r3, [r0, #4]
   11118:	685b      	ldr	r3, [r3, #4]
}
   1111a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1111c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   11120:	4770      	bx	lr

00011122 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11122:	6843      	ldr	r3, [r0, #4]
   11124:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   11126:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   1112a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1112e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   11130:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   11134:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   11138:	2000      	movs	r0, #0
   1113a:	4770      	bx	lr

0001113c <gpio_nrfx_manage_callback>:
{
   1113c:	b510      	push	{r4, lr}
	return port->data;
   1113e:	6903      	ldr	r3, [r0, #16]
	return list->head;
   11140:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   11142:	b1f8      	cbz	r0, 11184 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11144:	4288      	cmp	r0, r1
   11146:	d119      	bne.n	1117c <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   11148:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1114a:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   1114c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1114e:	42a1      	cmp	r1, r4
   11150:	d100      	bne.n	11154 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   11152:	6098      	str	r0, [r3, #8]
	parent->next = child;
   11154:	2000      	movs	r0, #0
   11156:	6008      	str	r0, [r1, #0]
	if (set) {
   11158:	b12a      	cbz	r2, 11166 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   1115a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1115c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1115e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   11160:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   11162:	b902      	cbnz	r2, 11166 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   11164:	6099      	str	r1, [r3, #8]
	return 0;
   11166:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   11168:	e010      	b.n	1118c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1116a:	4281      	cmp	r1, r0
   1116c:	d106      	bne.n	1117c <gpio_nrfx_manage_callback+0x40>
	return node->next;
   1116e:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   11170:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   11172:	6898      	ldr	r0, [r3, #8]
   11174:	4281      	cmp	r1, r0
   11176:	d1ed      	bne.n	11154 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   11178:	609c      	str	r4, [r3, #8]
}
   1117a:	e7eb      	b.n	11154 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   1117c:	4604      	mov	r4, r0
   1117e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11180:	2800      	cmp	r0, #0
   11182:	d1f2      	bne.n	1116a <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   11184:	2a00      	cmp	r2, #0
   11186:	d1e8      	bne.n	1115a <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   11188:	f06f 0015 	mvn.w	r0, #21
}
   1118c:	bd10      	pop	{r4, pc}

0001118e <pwm_nrfx_set_cycles>:
{
   1118e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11190:	f8bd c018 	ldrh.w	ip, [sp, #24]
	const struct pwm_nrfx_config *config = dev->config;
   11194:	6845      	ldr	r5, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   11196:	6904      	ldr	r4, [r0, #16]
	if (channel >= NRF_PWM_CHANNEL_COUNT) {
   11198:	2903      	cmp	r1, #3
   1119a:	f00c 0c01 	and.w	ip, ip, #1
   1119e:	d834      	bhi.n	1120a <pwm_nrfx_set_cycles+0x7c>
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   111a0:	7ba8      	ldrb	r0, [r5, #14]
   111a2:	2801      	cmp	r0, #1
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   111a4:	f04f 0601 	mov.w	r6, #1
		pulse_cycles /= 2;
   111a8:	bf04      	itt	eq
   111aa:	085b      	lsreq	r3, r3, #1
		period_cycles /= 2;
   111ac:	0852      	lsreq	r2, r2, #1
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   111ae:	408e      	lsls	r6, r1
	if (pulse_cycles == 0) {
   111b0:	2b00      	cmp	r3, #0
   111b2:	d05d      	beq.n	11270 <pwm_nrfx_set_cycles+0xe2>
	} else if (pulse_cycles >= period_cycles) {
   111b4:	429a      	cmp	r2, r3
   111b6:	d92b      	bls.n	11210 <pwm_nrfx_set_cycles+0x82>
	if (period_cycles == data->period_cycles) {
   111b8:	6827      	ldr	r7, [r4, #0]
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   111ba:	7b20      	ldrb	r0, [r4, #12]
	if (period_cycles == data->period_cycles) {
   111bc:	42ba      	cmp	r2, r7
   111be:	d010      	beq.n	111e2 <pwm_nrfx_set_cycles+0x54>
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   111c0:	43b0      	bics	r0, r6
   111c2:	d122      	bne.n	1120a <pwm_nrfx_set_cycles+0x7c>
   111c4:	4617      	mov	r7, r2
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   111c6:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   111ca:	d219      	bcs.n	11200 <pwm_nrfx_set_cycles+0x72>
			data->period_cycles = period_cycles;
   111cc:	6022      	str	r2, [r4, #0]
			data->prescaler     = prescaler;
   111ce:	7360      	strb	r0, [r4, #13]
			nrf_pwm_configure(config->pwm.p_registers,
   111d0:	682a      	ldr	r2, [r5, #0]
					  config->initial_config.count_mode,
   111d2:	f895 e00e 	ldrb.w	lr, [r5, #14]
    p_reg->PRESCALER  = base_clock;
   111d6:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->MODE       = mode;
   111da:	f8c2 e504 	str.w	lr, [r2, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   111de:	f8c2 7508 	str.w	r7, [r2, #1288]	; 0x508
		compare_value = (uint16_t)(pulse_cycles >> data->prescaler);
   111e2:	7b62      	ldrb	r2, [r4, #13]
   111e4:	40d3      	lsrs	r3, r2
   111e6:	b29b      	uxth	r3, r3
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   111e8:	f1bc 0f00 	cmp.w	ip, #0
   111ec:	d101      	bne.n	111f2 <pwm_nrfx_set_cycles+0x64>
   111ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	if (!needs_pwm) {
   111f2:	eb04 0141 	add.w	r1, r4, r1, lsl #1
   111f6:	808b      	strh	r3, [r1, #4]
		data->pwm_needed |= BIT(channel);
   111f8:	7b23      	ldrb	r3, [r4, #12]
   111fa:	4333      	orrs	r3, r6
   111fc:	7323      	strb	r3, [r4, #12]
	if (data->pwm_needed == 0) {
   111fe:	e02d      	b.n	1125c <pwm_nrfx_set_cycles+0xce>
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   11200:	3001      	adds	r0, #1
   11202:	2808      	cmp	r0, #8
		countertop >>= 1;
   11204:	ea4f 0757 	mov.w	r7, r7, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   11208:	d1dd      	bne.n	111c6 <pwm_nrfx_set_cycles+0x38>
		return -EINVAL;
   1120a:	f06f 0015 	mvn.w	r0, #21
   1120e:	e04c      	b.n	112aa <pwm_nrfx_set_cycles+0x11c>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   11210:	004b      	lsls	r3, r1, #1
   11212:	4423      	add	r3, r4
   11214:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   11218:	f1bc 0f00 	cmp.w	ip, #0
   1121c:	d011      	beq.n	11242 <pwm_nrfx_set_cycles+0xb4>
   1121e:	f647 72ff 	movw	r2, #32767	; 0x7fff
   11222:	809a      	strh	r2, [r3, #4]
	*psel = nrf_pwm_pin_get(config->pwm.p_registers, (uint8_t)channel);
   11224:	682b      	ldr	r3, [r5, #0]
    return p_reg->PSEL.OUT[channel];
   11226:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (channel_psel_get(channel, &psel, config)) {
   1122a:	2b00      	cmp	r3, #0
   1122c:	db11      	blt.n	11252 <pwm_nrfx_set_cycles+0xc4>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1122e:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   11230:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   11234:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTCLR = clr_mask;
   11238:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1123c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   11240:	e007      	b.n	11252 <pwm_nrfx_set_cycles+0xc4>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   11242:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11246:	809a      	strh	r2, [r3, #4]
	*psel = nrf_pwm_pin_get(config->pwm.p_registers, (uint8_t)channel);
   11248:	682b      	ldr	r3, [r5, #0]
   1124a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (channel_psel_get(channel, &psel, config)) {
   1124e:	2b00      	cmp	r3, #0
   11250:	da1b      	bge.n	1128a <pwm_nrfx_set_cycles+0xfc>
		data->pwm_needed &= ~BIT(channel);
   11252:	7b21      	ldrb	r1, [r4, #12]
   11254:	ea21 0106 	bic.w	r1, r1, r6
   11258:	7321      	strb	r1, [r4, #12]
	if (data->pwm_needed == 0) {
   1125a:	b301      	cbz	r1, 1129e <pwm_nrfx_set_cycles+0x110>
		if (data->stop_requested) {
   1125c:	7be3      	ldrb	r3, [r4, #15]
   1125e:	bb2b      	cbnz	r3, 112ac <pwm_nrfx_set_cycles+0x11e>
		nrfx_pwm_simple_playback(&config->pwm, &config->seq, 1, 0);
   11260:	2300      	movs	r3, #0
   11262:	2201      	movs	r2, #1
   11264:	f105 0118 	add.w	r1, r5, #24
   11268:	4628      	mov	r0, r5
   1126a:	f7fd fdad 	bl	edc8 <nrfx_pwm_simple_playback>
   1126e:	e01b      	b.n	112a8 <pwm_nrfx_set_cycles+0x11a>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   11270:	004a      	lsls	r2, r1, #1
   11272:	4422      	add	r2, r4
   11274:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   11278:	f1bc 0f00 	cmp.w	ip, #0
   1127c:	d001      	beq.n	11282 <pwm_nrfx_set_cycles+0xf4>
   1127e:	8093      	strh	r3, [r2, #4]
   11280:	e7e2      	b.n	11248 <pwm_nrfx_set_cycles+0xba>
   11282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11286:	8093      	strh	r3, [r2, #4]
   11288:	e7cc      	b.n	11224 <pwm_nrfx_set_cycles+0x96>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1128a:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   1128c:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11290:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
   11294:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   11298:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   1129c:	e7d9      	b.n	11252 <pwm_nrfx_set_cycles+0xc4>
		nrfx_pwm_stop(&config->pwm, false);
   1129e:	4628      	mov	r0, r5
   112a0:	f000 f94a 	bl	11538 <nrfx_pwm_stop>
		data->stop_requested = true;
   112a4:	2301      	movs	r3, #1
   112a6:	73e3      	strb	r3, [r4, #15]
	return 0;
   112a8:	2000      	movs	r0, #0
}
   112aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->stop_requested = false;
   112ac:	2300      	movs	r3, #0
   112ae:	73e3      	strb	r3, [r4, #15]
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   112b0:	4628      	mov	r0, r5
   112b2:	f7fd fdcf 	bl	ee54 <nrfx_pwm_is_stopped>
   112b6:	2800      	cmp	r0, #0
   112b8:	d0fa      	beq.n	112b0 <pwm_nrfx_set_cycles+0x122>
   112ba:	e7d1      	b.n	11260 <pwm_nrfx_set_cycles+0xd2>

000112bc <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   112bc:	2000      	movs	r0, #0
   112be:	4770      	bx	lr

000112c0 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   112c0:	b538      	push	{r3, r4, r5, lr}
   112c2:	460c      	mov	r4, r1
   112c4:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   112c6:	f7fa ff89 	bl	c1dc <bt_is_ready>
   112ca:	b128      	cbz	r0, 112d8 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   112cc:	4629      	mov	r1, r5
   112ce:	4620      	mov	r0, r4
}
   112d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   112d4:	f7fa bd9c 	b.w	be10 <bt_hci_le_rand>
}
   112d8:	f06f 000a 	mvn.w	r0, #10
   112dc:	bd38      	pop	{r3, r4, r5, pc}

000112de <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   112de:	4770      	bx	lr

000112e0 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   112e0:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
   112e2:	6843      	ldr	r3, [r0, #4]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   112e4:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
   112e8:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   112ea:	7a05      	ldrb	r5, [r0, #8]
   112ec:	6844      	ldr	r4, [r0, #4]
   112ee:	4435      	add	r5, r6
   112f0:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   112f4:	42a3      	cmp	r3, r4
   112f6:	d902      	bls.n	112fe <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
   112f8:	f06f 0001 	mvn.w	r0, #1
}
   112fc:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   112fe:	795c      	ldrb	r4, [r3, #5]
   11300:	428c      	cmp	r4, r1
   11302:	d001      	beq.n	11308 <pinctrl_lookup_state+0x28>
		(*state)++;
   11304:	3308      	adds	r3, #8
   11306:	e7ef      	b.n	112e8 <pinctrl_lookup_state+0x8>
			return 0;
   11308:	2000      	movs	r0, #0
   1130a:	e7f7      	b.n	112fc <pinctrl_lookup_state+0x1c>

0001130c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1130c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1130e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   11312:	2601      	movs	r6, #1
   11314:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   11318:	4281      	cmp	r1, r0
   1131a:	d101      	bne.n	11320 <pinctrl_configure_pins+0x14>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1131c:	2000      	movs	r0, #0
}
   1131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   11320:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   11322:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   11326:	f3c4 2743 	ubfx	r7, r4, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
   1132a:	0c24      	lsrs	r4, r4, #16
			pin = 0xFFFFFFFFU;
   1132c:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1132e:	f1a4 0416 	sub.w	r4, r4, #22
			pin = 0xFFFFFFFFU;
   11332:	bf08      	it	eq
   11334:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
   11338:	2c03      	cmp	r4, #3
   1133a:	d82e      	bhi.n	1139a <pinctrl_configure_pins+0x8e>
   1133c:	e8df f004 	tbb	[pc, r4]
   11340:	27242102 	.word	0x27242102
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   11344:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   11348:	6804      	ldr	r4, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1134a:	f003 031f 	and.w	r3, r3, #31
   1134e:	f3c4 3480 	ubfx	r4, r4, #14, #1
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   11352:	fa06 fc03 	lsl.w	ip, r6, r3
    if (value == 0)
   11356:	b9ec      	cbnz	r4, 11394 <pinctrl_configure_pins+0x88>
    p_reg->OUTCLR = clr_mask;
   11358:	f8c5 c50c 	str.w	ip, [r5, #1292]	; 0x50c
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1135c:	f850 cb04 	ldr.w	ip, [r0], #4
   11360:	f48c 5400 	eor.w	r4, ip, #8192	; 0x2000
   11364:	f3c4 3440 	ubfx	r4, r4, #13, #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   11368:	f044 0402 	orr.w	r4, r4, #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1136c:	f3cc 1cc1 	ubfx	ip, ip, #7, #2
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   11370:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   11374:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   11378:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   1137c:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   11380:	e7ca      	b.n	11318 <pinctrl_configure_pins+0xc>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   11382:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   11386:	e7df      	b.n	11348 <pinctrl_configure_pins+0x3c>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   11388:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1138c:	e7dc      	b.n	11348 <pinctrl_configure_pins+0x3c>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1138e:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   11392:	e7d9      	b.n	11348 <pinctrl_configure_pins+0x3c>
    p_reg->OUTSET = set_mask;
   11394:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
}
   11398:	e7e0      	b.n	1135c <pinctrl_configure_pins+0x50>
		switch (NRF_GET_FUN(pins[i])) {
   1139a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1139e:	e7be      	b.n	1131e <pinctrl_configure_pins+0x12>

000113a0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   113a0:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   113a2:	2000      	movs	r0, #0
   113a4:	f7fa f9d6 	bl	b754 <sys_arch_reboot>

000113a8 <sdc_assertion_handler>:
	k_oops();
   113a8:	4040      	eors	r0, r0
   113aa:	f380 8811 	msr	BASEPRI, r0
   113ae:	f04f 0003 	mov.w	r0, #3
   113b2:	df02      	svc	2
}
   113b4:	4770      	bx	lr

000113b6 <hci_driver_close>:
{
   113b6:	b510      	push	{r4, lr}
	err = MULTITHREADING_LOCK_ACQUIRE();
   113b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   113bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   113c0:	f7fc fbf8 	bl	dbb4 <multithreading_lock_acquire>
	if (err) {
   113c4:	4604      	mov	r4, r0
   113c6:	b920      	cbnz	r0, 113d2 <hci_driver_close+0x1c>
	err = sdc_disable();
   113c8:	f7f2 fba2 	bl	3b10 <sdc_disable>
	if (err) {
   113cc:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   113ce:	f7fc fbf9 	bl	dbc4 <multithreading_lock_release>
}
   113d2:	4620      	mov	r0, r4
   113d4:	bd10      	pop	{r4, pc}

000113d6 <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   113d6:	f7fc bc93 	b.w	dd00 <rand_prio_low_vector_get>

000113da <hci_driver_send>:
{
   113da:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   113dc:	8983      	ldrh	r3, [r0, #12]
{
   113de:	4605      	mov	r5, r0
	if (!buf->len) {
   113e0:	b1bb      	cbz	r3, 11412 <hci_driver_send+0x38>
	switch (type) {
   113e2:	7d03      	ldrb	r3, [r0, #20]
   113e4:	b9ab      	cbnz	r3, 11412 <hci_driver_send+0x38>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   113e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   113ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   113ee:	f7fc fbe1 	bl	dbb4 <multithreading_lock_acquire>
	if (!errcode) {
   113f2:	4604      	mov	r4, r0
   113f4:	b958      	cbnz	r0, 1140e <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   113f6:	68a8      	ldr	r0, [r5, #8]
   113f8:	f7fc fcfe 	bl	ddf8 <hci_internal_cmd_put>
   113fc:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   113fe:	f7fc fbe1 	bl	dbc4 <multithreading_lock_release>
	if (errcode) {
   11402:	b924      	cbnz	r4, 1140e <hci_driver_send+0x34>
	receive_signal_raise();
   11404:	f7fc fc90 	bl	dd28 <receive_signal_raise>
		net_buf_unref(buf);
   11408:	4628      	mov	r0, r5
   1140a:	f7fb fb2b 	bl	ca64 <net_buf_unref>
}
   1140e:	4620      	mov	r0, r4
   11410:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11412:	f06f 0415 	mvn.w	r4, #21
   11416:	e7fa      	b.n	1140e <hci_driver_send+0x34>

00011418 <receive_work_handler>:
	hci_driver_receive_process();
   11418:	f7fc bc9a 	b.w	dd50 <hci_driver_receive_process>

0001141c <m_assert_handler>:
	k_oops();
   1141c:	4040      	eors	r0, r0
   1141e:	f380 8811 	msr	BASEPRI, r0
   11422:	f04f 0003 	mov.w	r0, #3
   11426:	df02      	svc	2
}
   11428:	4770      	bx	lr

0001142a <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1142a:	4668      	mov	r0, sp
   1142c:	f020 0107 	bic.w	r1, r0, #7
   11430:	468d      	mov	sp, r1
   11432:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   11434:	f7f1 f960 	bl	26f8 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   11438:	f7f9 ff4a 	bl	b2d0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1143c:	f7fa f80c 	bl	b458 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   11440:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   11444:	4685      	mov	sp, r0
   11446:	4770      	bx	lr

00011448 <mpsl_low_prio_work_handler>:
{
   11448:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1144a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1144e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11452:	f7fc fbaf 	bl	dbb4 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   11456:	f7f6 fbd3 	bl	7c00 <mpsl_low_priority_process>
}
   1145a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   1145e:	f7fc bbb1 	b.w	dbc4 <multithreading_lock_release>

00011462 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   11462:	4668      	mov	r0, sp
   11464:	f020 0107 	bic.w	r1, r0, #7
   11468:	468d      	mov	sp, r1
   1146a:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1146c:	f7f1 f8ba 	bl	25e4 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   11470:	f7f9 ff2e 	bl	b2d0 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   11474:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   11478:	4685      	mov	sp, r0
   1147a:	4770      	bx	lr

0001147c <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1147c:	4668      	mov	r0, sp
   1147e:	f020 0107 	bic.w	r1, r0, #7
   11482:	468d      	mov	sp, r1
   11484:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   11486:	f7ee feb5 	bl	1f4 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1148a:	f7f9 ff21 	bl	b2d0 <_arch_isr_direct_pm>
   1148e:	f7f9 ffe3 	bl	b458 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   11492:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   11496:	4685      	mov	sp, r0
   11498:	4770      	bx	lr

0001149a <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   1149a:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   1149c:	f7f6 fd2c 	bl	7ef8 <mpsl_fem_init>

	return 0;
}
   114a0:	2000      	movs	r0, #0
   114a2:	bd08      	pop	{r3, pc}

000114a4 <nrfx_clock_stop>:
	switch (domain) {
   114a4:	2801      	cmp	r0, #1
   114a6:	d101      	bne.n	114ac <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   114a8:	f7f1 bf82 	b.w	33b0 <mpsl_clock_hfclk_release>
}
   114ac:	4770      	bx	lr

000114ae <nrfx_clock_enable>:
}
   114ae:	4770      	bx	lr

000114b0 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   114b0:	f7f1 bd92 	b.w	2fd8 <MPSL_IRQ_CLOCK_Handler>

000114b4 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   114b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            if (var1 == 0x0E)
   114b8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   114bc:	2a0e      	cmp	r2, #14
   114be:	d105      	bne.n	114cc <nrf52_configuration_249+0x18>
            {
                switch(var2)
   114c0:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
   114c4:	3800      	subs	r0, #0
   114c6:	bf18      	it	ne
   114c8:	2001      	movne	r0, #1
   114ca:	4770      	bx	lr
                {
                    case 0x00ul:
                        return false;
   114cc:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
   114ce:	4770      	bx	lr

000114d0 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   114d0:	4700      	bx	r0

000114d2 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   114d2:	f000 001f 	and.w	r0, r0, #31
   114d6:	0080      	lsls	r0, r0, #2
   114d8:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   114dc:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   114e0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   114e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   114e8:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   114ec:	4770      	bx	lr

000114ee <start_playback>:
{
   114ee:	b510      	push	{r4, lr}
   114f0:	4604      	mov	r4, r0
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   114f2:	2002      	movs	r0, #2
   114f4:	7208      	strb	r0, [r1, #8]
    p_cb->flags = flags;
   114f6:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
   114f8:	6809      	ldr	r1, [r1, #0]
   114fa:	b179      	cbz	r1, 1151c <start_playback+0x2e>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   114fc:	f012 0f04 	tst.w	r2, #4
   11500:	bf0c      	ite	eq
   11502:	2182      	moveq	r1, #130	; 0x82
   11504:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   11506:	0710      	lsls	r0, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   11508:	bf48      	it	mi
   1150a:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   1150e:	06d0      	lsls	r0, r2, #27
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
   11510:	6820      	ldr	r0, [r4, #0]
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   11512:	bf48      	it	mi
   11514:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   11518:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   1151c:	6821      	ldr	r1, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1151e:	2000      	movs	r0, #0
   11520:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   11524:	f012 0f80 	tst.w	r2, #128	; 0x80
   11528:	6822      	ldr	r2, [r4, #0]
   1152a:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1152e:	bf06      	itte	eq
   11530:	2101      	moveq	r1, #1
   11532:	50d1      	streq	r1, [r2, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   11534:	18d0      	addne	r0, r2, r3
}
   11536:	bd10      	pop	{r4, pc}

00011538 <nrfx_pwm_stop>:
{
   11538:	b538      	push	{r3, r4, r5, lr}
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   1153a:	6803      	ldr	r3, [r0, #0]
    p_reg->SHORTS = mask;
   1153c:	2200      	movs	r2, #0
   1153e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
   11542:	6803      	ldr	r3, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11544:	2201      	movs	r2, #1
   11546:	605a      	str	r2, [r3, #4]
{
   11548:	4605      	mov	r5, r0
   1154a:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
   1154c:	f7fd fc82 	bl	ee54 <nrfx_pwm_is_stopped>
   11550:	b938      	cbnz	r0, 11562 <nrfx_pwm_stop+0x2a>
            if (nrfx_pwm_is_stopped(p_instance))
   11552:	4628      	mov	r0, r5
   11554:	f7fd fc7e 	bl	ee54 <nrfx_pwm_is_stopped>
   11558:	b918      	cbnz	r0, 11562 <nrfx_pwm_stop+0x2a>
        } while (wait_until_stopped);
   1155a:	2c00      	cmp	r4, #0
   1155c:	d1f9      	bne.n	11552 <nrfx_pwm_stop+0x1a>
}
   1155e:	4620      	mov	r0, r4
   11560:	bd38      	pop	{r3, r4, r5, pc}
                ret_val = true;
   11562:	2401      	movs	r4, #1
   11564:	e7fb      	b.n	1155e <nrfx_pwm_stop+0x26>

00011566 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   11566:	4770      	bx	lr

00011568 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   11568:	b140      	cbz	r0, 1157c <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1156a:	68c3      	ldr	r3, [r0, #12]
   1156c:	7858      	ldrb	r0, [r3, #1]
   1156e:	f010 0001 	ands.w	r0, r0, #1
   11572:	bf1e      	ittt	ne
   11574:	7818      	ldrbne	r0, [r3, #0]
   11576:	fab0 f080 	clzne	r0, r0
   1157a:	0940      	lsrne	r0, r0, #5
}
   1157c:	4770      	bx	lr

0001157e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1157e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11580:	4605      	mov	r5, r0
   11582:	460e      	mov	r6, r1
	__asm__ volatile(
   11584:	f04f 0340 	mov.w	r3, #64	; 0x40
   11588:	f3ef 8711 	mrs	r7, BASEPRI
   1158c:	f383 8812 	msr	BASEPRI_MAX, r3
   11590:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   11594:	f7fe fbb0 	bl	fcf8 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   11598:	4631      	mov	r1, r6
   1159a:	4604      	mov	r4, r0
   1159c:	4628      	mov	r0, r5
   1159e:	f7ff feff 	bl	113a0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   115a2:	f387 8811 	msr	BASEPRI, r7
   115a6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   115aa:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   115ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   115b0:	f7fa b8ba 	b.w	b728 <z_impl_k_thread_abort>

000115b4 <z_early_memset>:
	(void) memset(dst, c, n);
   115b4:	f7ff ba83 	b.w	10abe <memset>

000115b8 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   115b8:	f7ff ba76 	b.w	10aa8 <memcpy>

000115bc <k_heap_init>:
{
   115bc:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   115be:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   115c2:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   115c6:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   115c8:	f7ff b8a8 	b.w	1071c <sys_heap_init>

000115cc <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   115cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115d0:	b085      	sub	sp, #20
   115d2:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   115d6:	4607      	mov	r7, r0
   115d8:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   115da:	4650      	mov	r0, sl
   115dc:	4621      	mov	r1, r4
{
   115de:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   115e0:	f000 fb70 	bl	11cc4 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   115e4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   115e8:	bf08      	it	eq
   115ea:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   115ee:	4605      	mov	r5, r0
   115f0:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   115f2:	bf04      	itt	eq
   115f4:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   115f8:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   115fc:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   11600:	f04f 0340 	mov.w	r3, #64	; 0x40
   11604:	f3ef 8411 	mrs	r4, BASEPRI
   11608:	f383 8812 	msr	BASEPRI_MAX, r3
   1160c:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   11610:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   11614:	464a      	mov	r2, r9
   11616:	4641      	mov	r1, r8
   11618:	4638      	mov	r0, r7
   1161a:	f7ff f818 	bl	1064e <sys_heap_aligned_alloc>
   1161e:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   11620:	f7fe fd22 	bl	10068 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   11624:	9b03      	ldr	r3, [sp, #12]
   11626:	b13b      	cbz	r3, 11638 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   11628:	f384 8811 	msr	BASEPRI, r4
   1162c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   11630:	4618      	mov	r0, r3
   11632:	b005      	add	sp, #20
   11634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   11638:	1a28      	subs	r0, r5, r0
   1163a:	eb66 0101 	sbc.w	r1, r6, r1
   1163e:	2801      	cmp	r0, #1
   11640:	f171 0200 	sbcs.w	r2, r1, #0
   11644:	dbf0      	blt.n	11628 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   11646:	e9cd 0100 	strd	r0, r1, [sp]
   1164a:	465a      	mov	r2, fp
   1164c:	4621      	mov	r1, r4
   1164e:	4650      	mov	r0, sl
   11650:	f7fe f9b4 	bl	f9bc <z_pend_curr>
	__asm__ volatile(
   11654:	f04f 0340 	mov.w	r3, #64	; 0x40
   11658:	f3ef 8411 	mrs	r4, BASEPRI
   1165c:	f383 8812 	msr	BASEPRI_MAX, r3
   11660:	f3bf 8f6f 	isb	sy
	return k;
   11664:	e7d6      	b.n	11614 <k_heap_aligned_alloc+0x48>

00011666 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   11666:	b538      	push	{r3, r4, r5, lr}
   11668:	4604      	mov	r4, r0
   1166a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1166e:	f3ef 8511 	mrs	r5, BASEPRI
   11672:	f383 8812 	msr	BASEPRI_MAX, r3
   11676:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1167a:	f7fe ffb0 	bl	105de <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1167e:	f104 000c 	add.w	r0, r4, #12
   11682:	f000 faa0 	bl	11bc6 <z_unpend_all>
   11686:	b130      	cbz	r0, 11696 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   11688:	4629      	mov	r1, r5
   1168a:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1168e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   11692:	f7fe b9f7 	b.w	fa84 <z_reschedule>
	__asm__ volatile(
   11696:	f385 8811 	msr	BASEPRI, r5
   1169a:	f3bf 8f6f 	isb	sy
}
   1169e:	bd38      	pop	{r3, r4, r5, pc}

000116a0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   116a0:	f3ef 8005 	mrs	r0, IPSR
}
   116a4:	3800      	subs	r0, #0
   116a6:	bf18      	it	ne
   116a8:	2001      	movne	r0, #1
   116aa:	4770      	bx	lr

000116ac <z_impl_k_thread_name_set>:
}
   116ac:	f06f 0057 	mvn.w	r0, #87	; 0x57
   116b0:	4770      	bx	lr

000116b2 <z_impl_k_thread_start>:
	z_sched_start(thread);
   116b2:	f7fe b9f9 	b.w	faa8 <z_sched_start>

000116b6 <z_pm_save_idle_exit>:
{
   116b6:	b508      	push	{r3, lr}
	pm_system_resume();
   116b8:	f7f9 fc98 	bl	afec <pm_system_resume>
}
   116bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   116c0:	f7ff be0d 	b.w	112de <sys_clock_idle_exit>

000116c4 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   116c4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   116c8:	428b      	cmp	r3, r1
   116ca:	d001      	beq.n	116d0 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   116cc:	f7fe b994 	b.w	f9f8 <z_set_prio>
}
   116d0:	2000      	movs	r0, #0
   116d2:	4770      	bx	lr

000116d4 <queue_insert>:
{
   116d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   116d8:	4699      	mov	r9, r3
   116da:	4604      	mov	r4, r0
   116dc:	f89d 3020 	ldrb.w	r3, [sp, #32]
   116e0:	460d      	mov	r5, r1
   116e2:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   116e4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   116e8:	f04f 0240 	mov.w	r2, #64	; 0x40
   116ec:	f3ef 8711 	mrs	r7, BASEPRI
   116f0:	f382 8812 	msr	BASEPRI_MAX, r2
   116f4:	f3bf 8f6f 	isb	sy
	if (is_append) {
   116f8:	b103      	cbz	r3, 116fc <queue_insert+0x28>
	return list->tail;
   116fa:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   116fc:	4630      	mov	r0, r6
   116fe:	f000 fa1c 	bl	11b3a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   11702:	b158      	cbz	r0, 1171c <queue_insert+0x48>
   11704:	2300      	movs	r3, #0
   11706:	6703      	str	r3, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   11708:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1170c:	f000 f9de 	bl	11acc <z_ready_thread>
	z_reschedule(&queue->lock, key);
   11710:	4630      	mov	r0, r6
   11712:	4639      	mov	r1, r7
   11714:	f7fe f9b6 	bl	fa84 <z_reschedule>
		return 0;
   11718:	2000      	movs	r0, #0
   1171a:	e00c      	b.n	11736 <queue_insert+0x62>
	if (alloc) {
   1171c:	f1b9 0f00 	cmp.w	r9, #0
   11720:	d01b      	beq.n	1175a <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   11722:	2108      	movs	r1, #8
   11724:	f7fe fdf4 	bl	10310 <z_thread_aligned_alloc>
		if (anode == NULL) {
   11728:	b938      	cbnz	r0, 1173a <queue_insert+0x66>
	__asm__ volatile(
   1172a:	f387 8811 	msr	BASEPRI, r7
   1172e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   11732:	f06f 000b 	mvn.w	r0, #11
}
   11736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1173a:	2201      	movs	r2, #1
		anode->data = data;
   1173c:	f8c0 8004 	str.w	r8, [r0, #4]
   11740:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   11742:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   11744:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   11748:	b95d      	cbnz	r5, 11762 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1174a:	6822      	ldr	r2, [r4, #0]
   1174c:	430a      	orrs	r2, r1
   1174e:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   11750:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   11752:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   11754:	b96a      	cbnz	r2, 11772 <queue_insert+0x9e>
	list->tail = node;
   11756:	6060      	str	r0, [r4, #4]
}
   11758:	e00b      	b.n	11772 <queue_insert+0x9e>
	node->next_and_flags = flags;
   1175a:	f8c8 9000 	str.w	r9, [r8]
}
   1175e:	4640      	mov	r0, r8
   11760:	e7ef      	b.n	11742 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   11762:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   11764:	2a03      	cmp	r2, #3
   11766:	d810      	bhi.n	1178a <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   11768:	6001      	str	r1, [r0, #0]
	return list->tail;
   1176a:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1176c:	b939      	cbnz	r1, 1177e <queue_insert+0xaa>
	list->head = node;
   1176e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   11772:	2104      	movs	r1, #4
   11774:	f104 0010 	add.w	r0, r4, #16
   11778:	f000 fc14 	bl	11fa4 <z_handle_obj_poll_events>
   1177c:	e7c8      	b.n	11710 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1177e:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   11780:	f002 0203 	and.w	r2, r2, #3
   11784:	4302      	orrs	r2, r0
   11786:	600a      	str	r2, [r1, #0]
   11788:	e7e5      	b.n	11756 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1178a:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1178e:	430a      	orrs	r2, r1
   11790:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   11792:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   11794:	f002 0203 	and.w	r2, r2, #3
   11798:	ea40 0302 	orr.w	r3, r0, r2
   1179c:	602b      	str	r3, [r5, #0]
}
   1179e:	e7e8      	b.n	11772 <queue_insert+0x9e>

000117a0 <z_queue_node_peek>:
{
   117a0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   117a2:	4604      	mov	r4, r0
   117a4:	b130      	cbz	r0, 117b4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   117a6:	6802      	ldr	r2, [r0, #0]
   117a8:	0793      	lsls	r3, r2, #30
   117aa:	d003      	beq.n	117b4 <z_queue_node_peek+0x14>
		ret = anode->data;
   117ac:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   117ae:	b109      	cbz	r1, 117b4 <z_queue_node_peek+0x14>
			k_free(anode);
   117b0:	f000 fc06 	bl	11fc0 <k_free>
}
   117b4:	4620      	mov	r0, r4
   117b6:	bd10      	pop	{r4, pc}

000117b8 <z_impl_k_queue_init>:
	list->head = NULL;
   117b8:	2300      	movs	r3, #0
	list->tail = NULL;
   117ba:	e9c0 3300 	strd	r3, r3, [r0]
   117be:	f100 0308 	add.w	r3, r0, #8
   117c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   117c6:	f100 0310 	add.w	r3, r0, #16
   117ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   117ce:	4770      	bx	lr

000117d0 <k_queue_prepend>:
{
   117d0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   117d2:	2300      	movs	r3, #0
{
   117d4:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   117d6:	9300      	str	r3, [sp, #0]
   117d8:	4619      	mov	r1, r3
   117da:	f7ff ff7b 	bl	116d4 <queue_insert>
}
   117de:	b003      	add	sp, #12
   117e0:	f85d fb04 	ldr.w	pc, [sp], #4

000117e4 <k_queue_append_list>:
{
   117e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   117e8:	4680      	mov	r8, r0
   117ea:	4615      	mov	r5, r2
	CHECKIF(head == NULL || tail == NULL) {
   117ec:	460c      	mov	r4, r1
   117ee:	b3a9      	cbz	r1, 1185c <k_queue_append_list+0x78>
   117f0:	b3a2      	cbz	r2, 1185c <k_queue_append_list+0x78>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   117f2:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   117f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   117fa:	f3ef 8711 	mrs	r7, BASEPRI
   117fe:	f383 8812 	msr	BASEPRI_MAX, r3
   11802:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   11806:	4630      	mov	r0, r6
   11808:	f000 f997 	bl	11b3a <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1180c:	b168      	cbz	r0, 1182a <k_queue_append_list+0x46>
   1180e:	f04f 0900 	mov.w	r9, #0
	thread->base.swap_data = data;
   11812:	6144      	str	r4, [r0, #20]
   11814:	f8c0 9070 	str.w	r9, [r0, #112]	; 0x70
	z_ready_thread(thread);
   11818:	f000 f958 	bl	11acc <z_ready_thread>
		head = *(void **)head;
   1181c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1181e:	4630      	mov	r0, r6
   11820:	f000 f98b 	bl	11b3a <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   11824:	b144      	cbz	r4, 11838 <k_queue_append_list+0x54>
   11826:	2800      	cmp	r0, #0
   11828:	d1f3      	bne.n	11812 <k_queue_append_list+0x2e>
	return list->tail;
   1182a:	f8d8 3004 	ldr.w	r3, [r8, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1182e:	b97b      	cbnz	r3, 11850 <k_queue_append_list+0x6c>
	list->head = node;
   11830:	f8c8 4000 	str.w	r4, [r8]
	list->tail = node;
   11834:	f8c8 5004 	str.w	r5, [r8, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   11838:	2104      	movs	r1, #4
   1183a:	f108 0010 	add.w	r0, r8, #16
   1183e:	f000 fbb1 	bl	11fa4 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   11842:	4630      	mov	r0, r6
   11844:	4639      	mov	r1, r7
   11846:	f7fe f91d 	bl	fa84 <z_reschedule>
	return 0;
   1184a:	2000      	movs	r0, #0
}
   1184c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   11850:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   11852:	f002 0203 	and.w	r2, r2, #3
   11856:	4314      	orrs	r4, r2
   11858:	601c      	str	r4, [r3, #0]
}
   1185a:	e7eb      	b.n	11834 <k_queue_append_list+0x50>
		return -EINVAL;
   1185c:	f06f 0015 	mvn.w	r0, #21
   11860:	e7f4      	b.n	1184c <k_queue_append_list+0x68>

00011862 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   11862:	b15a      	cbz	r2, 1187c <z_impl_k_sem_init+0x1a>
   11864:	428a      	cmp	r2, r1
   11866:	d309      	bcc.n	1187c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   11868:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1186c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   11870:	e9c0 0000 	strd	r0, r0, [r0]
   11874:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   11878:	2000      	movs	r0, #0
   1187a:	4770      	bx	lr
		return -EINVAL;
   1187c:	f06f 0015 	mvn.w	r0, #21
}
   11880:	4770      	bx	lr

00011882 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   11882:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   11884:	2301      	movs	r3, #1
   11886:	408b      	lsls	r3, r1
   11888:	ea22 0303 	bic.w	r3, r2, r3
   1188c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1188e:	fa22 f001 	lsr.w	r0, r2, r1
}
   11892:	f000 0001 	and.w	r0, r0, #1
   11896:	4770      	bx	lr

00011898 <unschedule_locked>:
{
   11898:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1189a:	2103      	movs	r1, #3
{
   1189c:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1189e:	300c      	adds	r0, #12
   118a0:	f7ff ffef 	bl	11882 <flag_test_and_clear>
   118a4:	4604      	mov	r4, r0
   118a6:	b118      	cbz	r0, 118b0 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   118a8:	f105 0010 	add.w	r0, r5, #16
   118ac:	f000 f9be 	bl	11c2c <z_abort_timeout>
}
   118b0:	4620      	mov	r0, r4
   118b2:	bd38      	pop	{r3, r4, r5, pc}

000118b4 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   118b4:	b120      	cbz	r0, 118c0 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   118b6:	2200      	movs	r2, #0
   118b8:	4611      	mov	r1, r2
   118ba:	3080      	adds	r0, #128	; 0x80
   118bc:	f000 b993 	b.w	11be6 <z_sched_wake>
}
   118c0:	4770      	bx	lr

000118c2 <cancel_async_locked>:
{
   118c2:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   118c4:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   118c6:	f3c3 0640 	ubfx	r6, r3, #1, #1
   118ca:	079b      	lsls	r3, r3, #30
{
   118cc:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   118ce:	d412      	bmi.n	118f6 <cancel_async_locked+0x34>
		queue_remove_locked(work->queue, work);
   118d0:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   118d2:	2102      	movs	r1, #2
   118d4:	300c      	adds	r0, #12
   118d6:	f7ff ffd4 	bl	11882 <flag_test_and_clear>
   118da:	b160      	cbz	r0, 118f6 <cancel_async_locked+0x34>
	return list->head;
   118dc:	6faa      	ldr	r2, [r5, #120]	; 0x78
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   118de:	b152      	cbz	r2, 118f6 <cancel_async_locked+0x34>
   118e0:	4294      	cmp	r4, r2
   118e2:	d118      	bne.n	11916 <cancel_async_locked+0x54>
	return node->next;
   118e4:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   118e6:	b986      	cbnz	r6, 1190a <cancel_async_locked+0x48>
   118e8:	6feb      	ldr	r3, [r5, #124]	; 0x7c
	list->head = node;
   118ea:	67aa      	str	r2, [r5, #120]	; 0x78
Z_GENLIST_REMOVE(slist, snode)
   118ec:	429c      	cmp	r4, r3
   118ee:	d100      	bne.n	118f2 <cancel_async_locked+0x30>
	list->tail = node;
   118f0:	67ea      	str	r2, [r5, #124]	; 0x7c
	parent->next = child;
   118f2:	2300      	movs	r3, #0
   118f4:	6023      	str	r3, [r4, #0]
	return *flagp;
   118f6:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   118f8:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   118fc:	bf1e      	ittt	ne
   118fe:	f043 0302 	orrne.w	r3, r3, #2
   11902:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   11904:	f040 0002 	orrne.w	r0, r0, #2
}
   11908:	bd70      	pop	{r4, r5, r6, pc}
   1190a:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1190c:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   1190e:	4294      	cmp	r4, r2
	list->tail = node;
   11910:	bf08      	it	eq
   11912:	67ee      	streq	r6, [r5, #124]	; 0x7c
}
   11914:	e7ed      	b.n	118f2 <cancel_async_locked+0x30>
	return node->next;
   11916:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11918:	6812      	ldr	r2, [r2, #0]
   1191a:	e7e0      	b.n	118de <cancel_async_locked+0x1c>

0001191c <work_timeout>:
{
   1191c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1191e:	4604      	mov	r4, r0
   11920:	f04f 0340 	mov.w	r3, #64	; 0x40
   11924:	f3ef 8511 	mrs	r5, BASEPRI
   11928:	f383 8812 	msr	BASEPRI_MAX, r3
   1192c:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   11930:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   11932:	f1a0 0610 	sub.w	r6, r0, #16
   11936:	2103      	movs	r1, #3
   11938:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1193a:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1193c:	f7ff ffa1 	bl	11882 <flag_test_and_clear>
   11940:	b128      	cbz	r0, 1194e <work_timeout+0x32>
		queue = dw->queue;
   11942:	69a3      	ldr	r3, [r4, #24]
   11944:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   11946:	a901      	add	r1, sp, #4
   11948:	4630      	mov	r0, r6
   1194a:	f7fd fe29 	bl	f5a0 <submit_to_queue_locked>
	__asm__ volatile(
   1194e:	f385 8811 	msr	BASEPRI, r5
   11952:	f3bf 8f6f 	isb	sy
}
   11956:	b002      	add	sp, #8
   11958:	bd70      	pop	{r4, r5, r6, pc}

0001195a <k_work_init>:
{
   1195a:	b538      	push	{r3, r4, r5, lr}
   1195c:	4604      	mov	r4, r0
   1195e:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   11960:	2210      	movs	r2, #16
   11962:	2100      	movs	r1, #0
   11964:	f7ff f8ab 	bl	10abe <memset>
   11968:	6065      	str	r5, [r4, #4]
}
   1196a:	bd38      	pop	{r3, r4, r5, pc}

0001196c <z_work_submit_to_queue>:
{
   1196c:	b513      	push	{r0, r1, r4, lr}
   1196e:	9001      	str	r0, [sp, #4]
   11970:	4608      	mov	r0, r1
	__asm__ volatile(
   11972:	f04f 0340 	mov.w	r3, #64	; 0x40
   11976:	f3ef 8411 	mrs	r4, BASEPRI
   1197a:	f383 8812 	msr	BASEPRI_MAX, r3
   1197e:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   11982:	a901      	add	r1, sp, #4
   11984:	f7fd fe0c 	bl	f5a0 <submit_to_queue_locked>
	__asm__ volatile(
   11988:	f384 8811 	msr	BASEPRI, r4
   1198c:	f3bf 8f6f 	isb	sy
}
   11990:	b002      	add	sp, #8
   11992:	bd10      	pop	{r4, pc}

00011994 <k_work_submit_to_queue>:
{
   11994:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   11996:	f7ff ffe9 	bl	1196c <z_work_submit_to_queue>
	if (ret > 0) {
   1199a:	1e04      	subs	r4, r0, #0
   1199c:	dd09      	ble.n	119b2 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   1199e:	f04f 0340 	mov.w	r3, #64	; 0x40
   119a2:	f3ef 8011 	mrs	r0, BASEPRI
   119a6:	f383 8812 	msr	BASEPRI_MAX, r3
   119aa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   119ae:	f000 f8f4 	bl	11b9a <z_reschedule_irqlock>
}
   119b2:	4620      	mov	r0, r4
   119b4:	bd10      	pop	{r4, pc}

000119b6 <k_work_queue_init>:
{
   119b6:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   119b8:	2298      	movs	r2, #152	; 0x98
   119ba:	2100      	movs	r1, #0
   119bc:	f7ff f87f 	bl	10abe <memset>
}
   119c0:	bd08      	pop	{r3, pc}

000119c2 <k_work_init_delayable>:
{
   119c2:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   119c4:	2230      	movs	r2, #48	; 0x30
{
   119c6:	4604      	mov	r4, r0
   119c8:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   119ca:	2100      	movs	r1, #0
   119cc:	f7ff f877 	bl	10abe <memset>
   119d0:	f44f 7380 	mov.w	r3, #256	; 0x100
   119d4:	6065      	str	r5, [r4, #4]
   119d6:	60e3      	str	r3, [r4, #12]
}
   119d8:	bd38      	pop	{r3, r4, r5, pc}

000119da <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   119da:	b538      	push	{r3, r4, r5, lr}
   119dc:	4604      	mov	r4, r0
   119de:	f04f 0340 	mov.w	r3, #64	; 0x40
   119e2:	f3ef 8511 	mrs	r5, BASEPRI
   119e6:	f383 8812 	msr	BASEPRI_MAX, r3
   119ea:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   119ee:	f7ff ff53 	bl	11898 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   119f2:	4620      	mov	r0, r4
   119f4:	f7ff ff65 	bl	118c2 <cancel_async_locked>
	__asm__ volatile(
   119f8:	f385 8811 	msr	BASEPRI, r5
   119fc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   11a00:	bd38      	pop	{r3, r4, r5, pc}

00011a02 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   11a02:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   11a06:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   11a08:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11a0a:	2300      	movs	r3, #0
	node->prev = NULL;
   11a0c:	e9c0 3300 	strd	r3, r3, [r0]
}
   11a10:	4770      	bx	lr

00011a12 <unpend_thread_no_timeout>:
{
   11a12:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   11a14:	f7ff fff5 	bl	11a02 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   11a18:	7b43      	ldrb	r3, [r0, #13]
   11a1a:	f023 0302 	bic.w	r3, r3, #2
   11a1e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   11a20:	2300      	movs	r3, #0
   11a22:	6083      	str	r3, [r0, #8]
}
   11a24:	bd08      	pop	{r3, pc}

00011a26 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   11a26:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   11a2a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   11a2e:	4283      	cmp	r3, r0
		return b2 - b1;
   11a30:	bf14      	ite	ne
   11a32:	1ac0      	subne	r0, r0, r3
	return 0;
   11a34:	2000      	moveq	r0, #0
}
   11a36:	4770      	bx	lr

00011a38 <z_thread_timeout>:
{
   11a38:	b510      	push	{r4, lr}
   11a3a:	4601      	mov	r1, r0
	__asm__ volatile(
   11a3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11a40:	f3ef 8411 	mrs	r4, BASEPRI
   11a44:	f383 8812 	msr	BASEPRI_MAX, r3
   11a48:	f3bf 8f6f 	isb	sy
		if (!killed) {
   11a4c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   11a50:	f013 0f28 	tst.w	r3, #40	; 0x28
   11a54:	d10d      	bne.n	11a72 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   11a56:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   11a5a:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   11a5c:	b10b      	cbz	r3, 11a62 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   11a5e:	f7ff ffd8 	bl	11a12 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   11a62:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   11a66:	f023 0314 	bic.w	r3, r3, #20
   11a6a:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   11a6e:	f7fd fecd 	bl	f80c <ready_thread>
	__asm__ volatile(
   11a72:	f384 8811 	msr	BASEPRI, r4
   11a76:	f3bf 8f6f 	isb	sy
}
   11a7a:	bd10      	pop	{r4, pc}

00011a7c <add_to_waitq_locked>:
{
   11a7c:	b538      	push	{r3, r4, r5, lr}
   11a7e:	4604      	mov	r4, r0
   11a80:	460d      	mov	r5, r1
	unready_thread(thread);
   11a82:	f7fd fef7 	bl	f874 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   11a86:	7b63      	ldrb	r3, [r4, #13]
   11a88:	f043 0302 	orr.w	r3, r3, #2
   11a8c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   11a8e:	b1e5      	cbz	r5, 11aca <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   11a90:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   11a92:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11a94:	429d      	cmp	r5, r3
   11a96:	d109      	bne.n	11aac <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   11a98:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   11a9a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   11a9e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   11aa0:	606c      	str	r4, [r5, #4]
}
   11aa2:	e012      	b.n	11aca <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   11aa4:	686a      	ldr	r2, [r5, #4]
   11aa6:	4293      	cmp	r3, r2
   11aa8:	d0f6      	beq.n	11a98 <add_to_waitq_locked+0x1c>
   11aaa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11aac:	2b00      	cmp	r3, #0
   11aae:	d0f3      	beq.n	11a98 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   11ab0:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   11ab4:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   11ab8:	428a      	cmp	r2, r1
   11aba:	d0f3      	beq.n	11aa4 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11abc:	4291      	cmp	r1, r2
   11abe:	ddf1      	ble.n	11aa4 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   11ac0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   11ac2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   11ac6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   11ac8:	605c      	str	r4, [r3, #4]
}
   11aca:	bd38      	pop	{r3, r4, r5, pc}

00011acc <z_ready_thread>:
{
   11acc:	b510      	push	{r4, lr}
	__asm__ volatile(
   11ace:	f04f 0340 	mov.w	r3, #64	; 0x40
   11ad2:	f3ef 8411 	mrs	r4, BASEPRI
   11ad6:	f383 8812 	msr	BASEPRI_MAX, r3
   11ada:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   11ade:	f7fd fe95 	bl	f80c <ready_thread>
	__asm__ volatile(
   11ae2:	f384 8811 	msr	BASEPRI, r4
   11ae6:	f3bf 8f6f 	isb	sy
}
   11aea:	bd10      	pop	{r4, pc}

00011aec <z_unpend_thread_no_timeout>:
{
   11aec:	b508      	push	{r3, lr}
	__asm__ volatile(
   11aee:	f04f 0340 	mov.w	r3, #64	; 0x40
   11af2:	f3ef 8111 	mrs	r1, BASEPRI
   11af6:	f383 8812 	msr	BASEPRI_MAX, r3
   11afa:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   11afe:	f7ff ff88 	bl	11a12 <unpend_thread_no_timeout>
	__asm__ volatile(
   11b02:	f381 8811 	msr	BASEPRI, r1
   11b06:	f3bf 8f6f 	isb	sy
}
   11b0a:	bd08      	pop	{r3, pc}

00011b0c <z_unpend1_no_timeout>:
{
   11b0c:	b508      	push	{r3, lr}
   11b0e:	4603      	mov	r3, r0
	__asm__ volatile(
   11b10:	f04f 0240 	mov.w	r2, #64	; 0x40
   11b14:	f3ef 8111 	mrs	r1, BASEPRI
   11b18:	f382 8812 	msr	BASEPRI_MAX, r2
   11b1c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   11b20:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11b22:	4283      	cmp	r3, r0
   11b24:	d007      	beq.n	11b36 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   11b26:	b108      	cbz	r0, 11b2c <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   11b28:	f7ff ff73 	bl	11a12 <unpend_thread_no_timeout>
	__asm__ volatile(
   11b2c:	f381 8811 	msr	BASEPRI, r1
   11b30:	f3bf 8f6f 	isb	sy
}
   11b34:	bd08      	pop	{r3, pc}
   11b36:	2000      	movs	r0, #0
   11b38:	e7f8      	b.n	11b2c <z_unpend1_no_timeout+0x20>

00011b3a <z_unpend_first_thread>:
{
   11b3a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   11b3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11b40:	f3ef 8511 	mrs	r5, BASEPRI
   11b44:	f383 8812 	msr	BASEPRI_MAX, r3
   11b48:	f3bf 8f6f 	isb	sy
	return list->head == list;
   11b4c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11b4e:	42a0      	cmp	r0, r4
   11b50:	d00d      	beq.n	11b6e <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   11b52:	b134      	cbz	r4, 11b62 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   11b54:	4620      	mov	r0, r4
   11b56:	f7ff ff5c 	bl	11a12 <unpend_thread_no_timeout>
   11b5a:	f104 0018 	add.w	r0, r4, #24
   11b5e:	f000 f865 	bl	11c2c <z_abort_timeout>
	__asm__ volatile(
   11b62:	f385 8811 	msr	BASEPRI, r5
   11b66:	f3bf 8f6f 	isb	sy
}
   11b6a:	4620      	mov	r0, r4
   11b6c:	bd38      	pop	{r3, r4, r5, pc}
   11b6e:	2400      	movs	r4, #0
   11b70:	e7f7      	b.n	11b62 <z_unpend_first_thread+0x28>

00011b72 <z_unpend_thread>:
{
   11b72:	b510      	push	{r4, lr}
	__asm__ volatile(
   11b74:	f04f 0340 	mov.w	r3, #64	; 0x40
   11b78:	f3ef 8411 	mrs	r4, BASEPRI
   11b7c:	f383 8812 	msr	BASEPRI_MAX, r3
   11b80:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   11b84:	f7ff ff45 	bl	11a12 <unpend_thread_no_timeout>
	__asm__ volatile(
   11b88:	f384 8811 	msr	BASEPRI, r4
   11b8c:	f3bf 8f6f 	isb	sy
}
   11b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11b94:	3018      	adds	r0, #24
   11b96:	f000 b849 	b.w	11c2c <z_abort_timeout>

00011b9a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   11b9a:	4603      	mov	r3, r0
   11b9c:	b920      	cbnz	r0, 11ba8 <z_reschedule_irqlock+0xe>
   11b9e:	f3ef 8205 	mrs	r2, IPSR
   11ba2:	b90a      	cbnz	r2, 11ba8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   11ba4:	f7f9 bbbc 	b.w	b320 <arch_swap>
   11ba8:	f383 8811 	msr	BASEPRI, r3
   11bac:	f3bf 8f6f 	isb	sy
}
   11bb0:	4770      	bx	lr

00011bb2 <z_reschedule_unlocked>:
	__asm__ volatile(
   11bb2:	f04f 0340 	mov.w	r3, #64	; 0x40
   11bb6:	f3ef 8011 	mrs	r0, BASEPRI
   11bba:	f383 8812 	msr	BASEPRI_MAX, r3
   11bbe:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   11bc2:	f7ff bfea 	b.w	11b9a <z_reschedule_irqlock>

00011bc6 <z_unpend_all>:
{
   11bc6:	b538      	push	{r3, r4, r5, lr}
   11bc8:	4605      	mov	r5, r0
	int need_sched = 0;
   11bca:	2000      	movs	r0, #0
	return list->head == list;
   11bcc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11bce:	42a5      	cmp	r5, r4
   11bd0:	d000      	beq.n	11bd4 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   11bd2:	b904      	cbnz	r4, 11bd6 <z_unpend_all+0x10>
}
   11bd4:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   11bd6:	4620      	mov	r0, r4
   11bd8:	f7ff ffcb 	bl	11b72 <z_unpend_thread>
		z_ready_thread(thread);
   11bdc:	4620      	mov	r0, r4
   11bde:	f7ff ff75 	bl	11acc <z_ready_thread>
		need_sched = 1;
   11be2:	2001      	movs	r0, #1
   11be4:	e7f2      	b.n	11bcc <z_unpend_all+0x6>

00011be6 <z_sched_wake>:
{
   11be6:	b538      	push	{r3, r4, r5, lr}
   11be8:	f04f 0340 	mov.w	r3, #64	; 0x40
   11bec:	f3ef 8511 	mrs	r5, BASEPRI
   11bf0:	f383 8812 	msr	BASEPRI_MAX, r3
   11bf4:	f3bf 8f6f 	isb	sy
	return list->head == list;
   11bf8:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11bfa:	42a0      	cmp	r0, r4
   11bfc:	d012      	beq.n	11c24 <z_sched_wake+0x3e>
		if (thread != NULL) {
   11bfe:	b19c      	cbz	r4, 11c28 <z_sched_wake+0x42>
   11c00:	6721      	str	r1, [r4, #112]	; 0x70
   11c02:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   11c04:	4620      	mov	r0, r4
   11c06:	f7ff ff04 	bl	11a12 <unpend_thread_no_timeout>
   11c0a:	f104 0018 	add.w	r0, r4, #24
   11c0e:	f000 f80d 	bl	11c2c <z_abort_timeout>
			ready_thread(thread);
   11c12:	4620      	mov	r0, r4
   11c14:	f7fd fdfa 	bl	f80c <ready_thread>
			ret = true;
   11c18:	2001      	movs	r0, #1
	__asm__ volatile(
   11c1a:	f385 8811 	msr	BASEPRI, r5
   11c1e:	f3bf 8f6f 	isb	sy
}
   11c22:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   11c24:	2000      	movs	r0, #0
   11c26:	e7f8      	b.n	11c1a <z_sched_wake+0x34>
   11c28:	4620      	mov	r0, r4
   11c2a:	e7f6      	b.n	11c1a <z_sched_wake+0x34>

00011c2c <z_abort_timeout>:
{
   11c2c:	b510      	push	{r4, lr}
	__asm__ volatile(
   11c2e:	f04f 0240 	mov.w	r2, #64	; 0x40
   11c32:	f3ef 8411 	mrs	r4, BASEPRI
   11c36:	f382 8812 	msr	BASEPRI_MAX, r2
   11c3a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   11c3e:	6803      	ldr	r3, [r0, #0]
   11c40:	b13b      	cbz	r3, 11c52 <z_abort_timeout+0x26>
			remove_timeout(to);
   11c42:	f7fe f91d 	bl	fe80 <remove_timeout>
			ret = 0;
   11c46:	2000      	movs	r0, #0
	__asm__ volatile(
   11c48:	f384 8811 	msr	BASEPRI, r4
   11c4c:	f3bf 8f6f 	isb	sy
}
   11c50:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   11c52:	f06f 0015 	mvn.w	r0, #21
   11c56:	e7f7      	b.n	11c48 <z_abort_timeout+0x1c>

00011c58 <z_get_next_timeout_expiry>:
{
   11c58:	b510      	push	{r4, lr}
	__asm__ volatile(
   11c5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   11c5e:	f3ef 8411 	mrs	r4, BASEPRI
   11c62:	f383 8812 	msr	BASEPRI_MAX, r3
   11c66:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   11c6a:	f7fe f8e1 	bl	fe30 <next_timeout>
	__asm__ volatile(
   11c6e:	f384 8811 	msr	BASEPRI, r4
   11c72:	f3bf 8f6f 	isb	sy
}
   11c76:	bd10      	pop	{r4, pc}

00011c78 <z_set_timeout_expiry>:
{
   11c78:	b570      	push	{r4, r5, r6, lr}
   11c7a:	4604      	mov	r4, r0
   11c7c:	460d      	mov	r5, r1
	__asm__ volatile(
   11c7e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11c82:	f3ef 8611 	mrs	r6, BASEPRI
   11c86:	f383 8812 	msr	BASEPRI_MAX, r3
   11c8a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   11c8e:	f7fe f8cf 	bl	fe30 <next_timeout>
			      || (ticks <= next_to);
   11c92:	2801      	cmp	r0, #1
   11c94:	dd07      	ble.n	11ca6 <z_set_timeout_expiry+0x2e>
   11c96:	42a0      	cmp	r0, r4
   11c98:	db05      	blt.n	11ca6 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   11c9a:	42a0      	cmp	r0, r4
   11c9c:	4629      	mov	r1, r5
   11c9e:	bfa8      	it	ge
   11ca0:	4620      	movge	r0, r4
   11ca2:	f7fb ff4b 	bl	db3c <sys_clock_set_timeout>
	__asm__ volatile(
   11ca6:	f386 8811 	msr	BASEPRI, r6
   11caa:	f3bf 8f6f 	isb	sy
}
   11cae:	bd70      	pop	{r4, r5, r6, pc}

00011cb0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   11cb0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   11cb2:	f7fe f9d9 	bl	10068 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   11cb6:	bd08      	pop	{r3, pc}

00011cb8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   11cb8:	f7fe b9d6 	b.w	10068 <sys_clock_tick_get>

00011cbc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   11cbc:	b108      	cbz	r0, 11cc2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   11cbe:	f7f9 bd5f 	b.w	b780 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   11cc2:	4770      	bx	lr

00011cc4 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11cc4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   11cc8:	bf08      	it	eq
   11cca:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   11cce:	b538      	push	{r3, r4, r5, lr}
   11cd0:	460c      	mov	r4, r1
   11cd2:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11cd4:	d014      	beq.n	11d00 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   11cd6:	4308      	orrs	r0, r1
   11cd8:	d103      	bne.n	11ce2 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   11cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   11cde:	f7fe b9c3 	b.w	10068 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   11ce2:	f06f 0001 	mvn.w	r0, #1
   11ce6:	1b40      	subs	r0, r0, r5
   11ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11cec:	eb63 0101 	sbc.w	r1, r3, r1
   11cf0:	2900      	cmp	r1, #0
   11cf2:	da04      	bge.n	11cfe <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   11cf4:	f7fe f9b8 	bl	10068 <sys_clock_tick_get>
   11cf8:	1940      	adds	r0, r0, r5
   11cfa:	eb41 0104 	adc.w	r1, r1, r4
}
   11cfe:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   11d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11d04:	4601      	mov	r1, r0
   11d06:	e7fa      	b.n	11cfe <sys_clock_timeout_end_calc+0x3a>

00011d08 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   11d08:	b510      	push	{r4, lr}
   11d0a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   11d0c:	f7ff ff8e 	bl	11c2c <z_abort_timeout>

	if (inactive) {
   11d10:	b9b0      	cbnz	r0, 11d40 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   11d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11d14:	b10b      	cbz	r3, 11d1a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   11d16:	4620      	mov	r0, r4
   11d18:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   11d1a:	f104 0018 	add.w	r0, r4, #24
   11d1e:	f7ff fef5 	bl	11b0c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   11d22:	b168      	cbz	r0, 11d40 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   11d24:	f7ff fed2 	bl	11acc <z_ready_thread>
	__asm__ volatile(
   11d28:	f04f 0340 	mov.w	r3, #64	; 0x40
   11d2c:	f3ef 8011 	mrs	r0, BASEPRI
   11d30:	f383 8812 	msr	BASEPRI_MAX, r3
   11d34:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   11d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11d3c:	f7ff bf2d 	b.w	11b9a <z_reschedule_irqlock>
   11d40:	bd10      	pop	{r4, pc}

00011d42 <add_event>:
{
   11d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d44:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   11d46:	e9d0 1300 	ldrd	r1, r3, [r0]
   11d4a:	4288      	cmp	r0, r1
   11d4c:	4604      	mov	r4, r0
   11d4e:	d105      	bne.n	11d5c <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   11d50:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   11d52:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   11d56:	601d      	str	r5, [r3, #0]
	list->tail = node;
   11d58:	6065      	str	r5, [r4, #4]
   11d5a:	e01d      	b.n	11d98 <add_event+0x56>
	if ((pending == NULL) ||
   11d5c:	2b00      	cmp	r3, #0
   11d5e:	d0f7      	beq.n	11d50 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   11d60:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   11d62:	b100      	cbz	r0, 11d66 <add_event+0x24>
   11d64:	3860      	subs	r0, #96	; 0x60
   11d66:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   11d6a:	4639      	mov	r1, r7
   11d6c:	f7ff fe5b 	bl	11a26 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   11d70:	2800      	cmp	r0, #0
   11d72:	dced      	bgt.n	11d50 <add_event+0xe>
	return list->head == list;
   11d74:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11d76:	42b4      	cmp	r4, r6
   11d78:	d0ea      	beq.n	11d50 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   11d7a:	2e00      	cmp	r6, #0
   11d7c:	d0e8      	beq.n	11d50 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   11d7e:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   11d80:	b101      	cbz	r1, 11d84 <add_event+0x42>
   11d82:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   11d84:	4638      	mov	r0, r7
   11d86:	f7ff fe4e 	bl	11a26 <z_sched_prio_cmp>
   11d8a:	2800      	cmp	r0, #0
   11d8c:	dd05      	ble.n	11d9a <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   11d8e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   11d90:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   11d94:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   11d96:	6075      	str	r5, [r6, #4]
}
   11d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   11d9a:	6863      	ldr	r3, [r4, #4]
   11d9c:	429e      	cmp	r6, r3
   11d9e:	d0d7      	beq.n	11d50 <add_event+0xe>
   11da0:	6836      	ldr	r6, [r6, #0]
   11da2:	e7ea      	b.n	11d7a <add_event+0x38>

00011da4 <register_events>:
{
   11da4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   11da8:	2500      	movs	r5, #0
{
   11daa:	468b      	mov	fp, r1
   11dac:	4614      	mov	r4, r2
   11dae:	461f      	mov	r7, r3
   11db0:	4682      	mov	sl, r0
	int events_registered = 0;
   11db2:	462e      	mov	r6, r5
	event->poller = NULL;
   11db4:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   11db6:	455d      	cmp	r5, fp
   11db8:	db02      	blt.n	11dc0 <register_events+0x1c>
}
   11dba:	4630      	mov	r0, r6
   11dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   11dc4:	f3ef 8911 	mrs	r9, BASEPRI
   11dc8:	f383 8812 	msr	BASEPRI_MAX, r3
   11dcc:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   11dd0:	f89a 300d 	ldrb.w	r3, [sl, #13]
   11dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11dd8:	3b01      	subs	r3, #1
   11dda:	2b07      	cmp	r3, #7
   11ddc:	d80f      	bhi.n	11dfe <register_events+0x5a>
   11dde:	e8df f003 	tbb	[pc, r3]
   11de2:	041e      	.short	0x041e
   11de4:	0e0e0a0e 	.word	0x0e0e0a0e
   11de8:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   11dea:	f8da 3010 	ldr.w	r3, [sl, #16]
   11dee:	689b      	ldr	r3, [r3, #8]
   11df0:	b12b      	cbz	r3, 11dfe <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   11df2:	2302      	movs	r3, #2
   11df4:	e020      	b.n	11e38 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   11df6:	f8da 3010 	ldr.w	r3, [sl, #16]
   11dfa:	681b      	ldr	r3, [r3, #0]
   11dfc:	bb8b      	cbnz	r3, 11e62 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   11dfe:	bb47      	cbnz	r7, 11e52 <register_events+0xae>
   11e00:	7823      	ldrb	r3, [r4, #0]
   11e02:	b333      	cbz	r3, 11e52 <register_events+0xae>
	switch (event->type) {
   11e04:	f89a 300d 	ldrb.w	r3, [sl, #13]
   11e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11e0c:	3b01      	subs	r3, #1
   11e0e:	2b07      	cmp	r3, #7
   11e10:	d830      	bhi.n	11e74 <register_events+0xd0>
   11e12:	e8df f003 	tbb	[pc, r3]
   11e16:	2833      	.short	0x2833
   11e18:	2f2f282f 	.word	0x2f2f282f
   11e1c:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   11e1e:	f8da 3010 	ldr.w	r3, [sl, #16]
   11e22:	689b      	ldr	r3, [r3, #8]
   11e24:	2b00      	cmp	r3, #0
   11e26:	d0ea      	beq.n	11dfe <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   11e28:	2301      	movs	r3, #1
   11e2a:	e005      	b.n	11e38 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   11e2c:	f8da 3010 	ldr.w	r3, [sl, #16]
   11e30:	6a1b      	ldr	r3, [r3, #32]
   11e32:	2b00      	cmp	r3, #0
   11e34:	d0e3      	beq.n	11dfe <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   11e36:	2310      	movs	r3, #16
	event->state |= state;
   11e38:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   11e3c:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   11e40:	f3c2 3186 	ubfx	r1, r2, #14, #7
   11e44:	430b      	orrs	r3, r1
   11e46:	f363 3294 	bfi	r2, r3, #14, #7
   11e4a:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   11e4e:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   11e52:	f389 8811 	msr	BASEPRI, r9
   11e56:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   11e5a:	3501      	adds	r5, #1
   11e5c:	f10a 0a14 	add.w	sl, sl, #20
   11e60:	e7a9      	b.n	11db6 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   11e62:	2304      	movs	r3, #4
   11e64:	e7e8      	b.n	11e38 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   11e66:	f8da 0010 	ldr.w	r0, [sl, #16]
   11e6a:	4622      	mov	r2, r4
   11e6c:	4651      	mov	r1, sl
   11e6e:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   11e70:	f7ff ff67 	bl	11d42 <add_event>
	event->poller = poller;
   11e74:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   11e78:	3601      	adds	r6, #1
   11e7a:	e7ea      	b.n	11e52 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   11e7c:	f8da 0010 	ldr.w	r0, [sl, #16]
   11e80:	4622      	mov	r2, r4
   11e82:	4651      	mov	r1, sl
   11e84:	e7f4      	b.n	11e70 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   11e86:	f8da 0010 	ldr.w	r0, [sl, #16]
   11e8a:	4622      	mov	r2, r4
   11e8c:	4651      	mov	r1, sl
   11e8e:	3024      	adds	r0, #36	; 0x24
   11e90:	e7ee      	b.n	11e70 <register_events+0xcc>

00011e92 <signal_poll_event>:
{
   11e92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   11e96:	6884      	ldr	r4, [r0, #8]
{
   11e98:	4605      	mov	r5, r0
   11e9a:	460e      	mov	r6, r1
	if (poller != NULL) {
   11e9c:	b144      	cbz	r4, 11eb0 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   11e9e:	7863      	ldrb	r3, [r4, #1]
   11ea0:	2b01      	cmp	r3, #1
   11ea2:	d12e      	bne.n	11f02 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   11ea4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   11ea8:	f013 0302 	ands.w	r3, r3, #2
   11eac:	d10a      	bne.n	11ec4 <signal_poll_event+0x32>
		poller->is_polling = false;
   11eae:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   11eb0:	68eb      	ldr	r3, [r5, #12]
   11eb2:	f3c3 3286 	ubfx	r2, r3, #14, #7
   11eb6:	4316      	orrs	r6, r2
	event->poller = NULL;
   11eb8:	2000      	movs	r0, #0
	event->state |= state;
   11eba:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   11ebe:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   11ec0:	60eb      	str	r3, [r5, #12]
	return retcode;
   11ec2:	e03e      	b.n	11f42 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   11ec4:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   11ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11ecc:	bf08      	it	eq
   11ece:	f112 0f02 	cmneq.w	r2, #2
   11ed2:	d032      	beq.n	11f3a <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   11ed4:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   11ed8:	4640      	mov	r0, r8
   11eda:	f7ff fe4a 	bl	11b72 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   11ede:	2e08      	cmp	r6, #8
   11ee0:	bf0c      	ite	eq
   11ee2:	f06f 0303 	mvneq.w	r3, #3
   11ee6:	2300      	movne	r3, #0
   11ee8:	6123      	str	r3, [r4, #16]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   11eea:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   11eee:	06db      	lsls	r3, r3, #27
   11ef0:	d109      	bne.n	11f06 <signal_poll_event+0x74>
   11ef2:	f854 7c48 	ldr.w	r7, [r4, #-72]
   11ef6:	b937      	cbnz	r7, 11f06 <signal_poll_event+0x74>
	z_ready_thread(thread);
   11ef8:	4640      	mov	r0, r8
   11efa:	f7ff fde7 	bl	11acc <z_ready_thread>
		poller->is_polling = false;
   11efe:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   11f00:	e7d6      	b.n	11eb0 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   11f02:	2b02      	cmp	r3, #2
   11f04:	d001      	beq.n	11f0a <signal_poll_event+0x78>
		poller->is_polling = false;
   11f06:	2300      	movs	r3, #0
   11f08:	e7d1      	b.n	11eae <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   11f0a:	7823      	ldrb	r3, [r4, #0]
   11f0c:	2b00      	cmp	r3, #0
   11f0e:	d0cf      	beq.n	11eb0 <signal_poll_event+0x1e>
   11f10:	f854 7c04 	ldr.w	r7, [r4, #-4]
   11f14:	2f00      	cmp	r7, #0
   11f16:	d0f2      	beq.n	11efe <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   11f18:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   11f1c:	f1a4 0914 	sub.w	r9, r4, #20
   11f20:	f104 0014 	add.w	r0, r4, #20
   11f24:	f7ff fe82 	bl	11c2c <z_abort_timeout>
		twork->poll_result = 0;
   11f28:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   11f2c:	4649      	mov	r1, r9
   11f2e:	4638      	mov	r0, r7
   11f30:	f7ff fd1c 	bl	1196c <z_work_submit_to_queue>
		poller->is_polling = false;
   11f34:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   11f38:	e7ba      	b.n	11eb0 <signal_poll_event+0x1e>
		poller->is_polling = false;
   11f3a:	2300      	movs	r3, #0
   11f3c:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   11f3e:	f06f 000a 	mvn.w	r0, #10
}
   11f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011f46 <clear_event_registrations>:
	while (num_events--) {
   11f46:	2314      	movs	r3, #20
{
   11f48:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f4a:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   11f4e:	2400      	movs	r4, #0
	switch (event->type) {
   11f50:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   11f54:	b901      	cbnz	r1, 11f58 <clear_event_registrations+0x12>
}
   11f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   11f58:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   11f5c:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   11f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11f64:	2b08      	cmp	r3, #8
   11f66:	f1a0 0714 	sub.w	r7, r0, #20
   11f6a:	d80c      	bhi.n	11f86 <clear_event_registrations+0x40>
   11f6c:	fa26 f303 	lsr.w	r3, r6, r3
   11f70:	07db      	lsls	r3, r3, #31
   11f72:	d508      	bpl.n	11f86 <clear_event_registrations+0x40>
	return node->next != NULL;
   11f74:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   11f78:	b12b      	cbz	r3, 11f86 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   11f7a:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   11f7e:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   11f80:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   11f82:	e940 4405 	strd	r4, r4, [r0, #-20]
   11f86:	f382 8811 	msr	BASEPRI, r2
   11f8a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   11f8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11f92:	f3ef 8211 	mrs	r2, BASEPRI
   11f96:	f383 8812 	msr	BASEPRI_MAX, r3
   11f9a:	f3bf 8f6f 	isb	sy
   11f9e:	3901      	subs	r1, #1
   11fa0:	4638      	mov	r0, r7
   11fa2:	e7d7      	b.n	11f54 <clear_event_registrations+0xe>

00011fa4 <z_handle_obj_poll_events>:
{
   11fa4:	4603      	mov	r3, r0
	return list->head == list;
   11fa6:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   11fa8:	4283      	cmp	r3, r0
   11faa:	d008      	beq.n	11fbe <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   11fac:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   11fb0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   11fb2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11fb4:	2300      	movs	r3, #0
	node->prev = NULL;
   11fb6:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   11fba:	f7ff bf6a 	b.w	11e92 <signal_poll_event>
}
   11fbe:	4770      	bx	lr

00011fc0 <k_free>:
	if (ptr != NULL) {
   11fc0:	b120      	cbz	r0, 11fcc <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   11fc2:	1f01      	subs	r1, r0, #4
   11fc4:	f850 0c04 	ldr.w	r0, [r0, #-4]
   11fc8:	f7ff bb4d 	b.w	11666 <k_heap_free>
}
   11fcc:	4770      	bx	lr

00011fce <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   11fce:	4770      	bx	lr
