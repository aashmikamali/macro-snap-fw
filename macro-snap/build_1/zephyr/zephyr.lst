
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	e8 4b 00 20 d5 14 01 00 83 a0 01 00 a9 14 01 00     .K. ............
  10:	a9 14 01 00 a9 14 01 00 a9 14 01 00 00 00 00 00     ................
	...
  2c:	19 12 01 00 a9 14 01 00 00 00 00 00 d1 11 01 00     ................
  3c:	a9 14 01 00                                         ....

00000040 <_irq_vector_table>:
  40:	95 12 01 00 27 c5 01 00 95 12 01 00 95 12 01 00     ....'...........
  50:	95 12 01 00 95 12 01 00 95 12 01 00 95 12 01 00     ................
  60:	d5 c4 01 00 95 12 01 00 95 12 01 00 0d c5 01 00     ................
  70:	95 12 01 00 95 12 01 00 95 12 01 00 95 12 01 00     ................
  80:	95 12 01 00 95 12 01 00 95 12 01 00 95 12 01 00     ................
  90:	95 12 01 00 95 12 01 00 95 12 01 00 95 12 01 00     ................
  a0:	95 12 01 00 95 12 01 00 95 12 01 00 95 12 01 00     ................
  b0:	95 12 01 00 95 12 01 00                             ........

Disassembly of section text:

000000b8 <__aeabi_uldivmod>:
      b8:	b953      	cbnz	r3, d0 <CONFIG_FLASH_SIZE+0x10>
      ba:	b94a      	cbnz	r2, d0 <CONFIG_FLASH_SIZE+0x10>
      bc:	2900      	cmp	r1, #0
      be:	bf08      	it	eq
      c0:	2800      	cmpeq	r0, #0
      c2:	bf1c      	itt	ne
      c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      cc:	f000 b80c 	b.w	e8 <__aeabi_idiv0>
      d0:	f1ad 0c08 	sub.w	ip, sp, #8
      d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      d8:	f00b fbf4 	bl	b8c4 <__udivmoddi4>
      dc:	f8dd e004 	ldr.w	lr, [sp, #4]
      e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      e4:	b004      	add	sp, #16
      e6:	4770      	bx	lr

000000e8 <__aeabi_idiv0>:
      e8:	4770      	bx	lr
      ea:	bf00      	nop

000000ec <ocrypto_bigint_add256>:
      ec:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
      f0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
      f4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
      f8:	185b      	adds	r3, r3, r1
      fa:	eb54 040c 	adcs.w	r4, r4, ip
      fe:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     102:	414d      	adcs	r5, r1
     104:	eb56 060c 	adcs.w	r6, r6, ip
     108:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     10c:	414f      	adcs	r7, r1
     10e:	eb58 080c 	adcs.w	r8, r8, ip
     112:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     116:	eb59 0901 	adcs.w	r9, r9, r1
     11a:	eb5a 0a0c 	adcs.w	sl, sl, ip
     11e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     122:	4180      	sbcs	r0, r0
     124:	3001      	adds	r0, #1
     126:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     12a:	4770      	bx	lr

0000012c <ocrypto_bigint_sub256>:
     12c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     130:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     134:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     138:	1a5b      	subs	r3, r3, r1
     13a:	eb74 040c 	sbcs.w	r4, r4, ip
     13e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     142:	418d      	sbcs	r5, r1
     144:	eb76 060c 	sbcs.w	r6, r6, ip
     148:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     14c:	418f      	sbcs	r7, r1
     14e:	eb78 080c 	sbcs.w	r8, r8, ip
     152:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     156:	eb79 0901 	sbcs.w	r9, r9, r1
     15a:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     15e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     162:	4180      	sbcs	r0, r0
     164:	4240      	negs	r0, r0
     166:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     16a:	4770      	bx	lr

0000016c <ocrypto_bigint_cadd256>:
     16c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     170:	4252      	negs	r2, r2
     172:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     176:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     17a:	4017      	ands	r7, r2
     17c:	19db      	adds	r3, r3, r7
     17e:	ea18 0802 	ands.w	r8, r8, r2
     182:	eb54 0408 	adcs.w	r4, r4, r8
     186:	ea19 0902 	ands.w	r9, r9, r2
     18a:	eb55 0509 	adcs.w	r5, r5, r9
     18e:	ea1a 0a02 	ands.w	sl, sl, r2
     192:	eb56 060a 	adcs.w	r6, r6, sl
     196:	c078      	stmia	r0!, {r3, r4, r5, r6}
     198:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     19c:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1a0:	4017      	ands	r7, r2
     1a2:	417b      	adcs	r3, r7
     1a4:	ea18 0802 	ands.w	r8, r8, r2
     1a8:	eb54 0408 	adcs.w	r4, r4, r8
     1ac:	ea19 0902 	ands.w	r9, r9, r2
     1b0:	eb55 0509 	adcs.w	r5, r5, r9
     1b4:	ea1a 0a02 	ands.w	sl, sl, r2
     1b8:	eb56 060a 	adcs.w	r6, r6, sl
     1bc:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1be:	4180      	sbcs	r0, r0
     1c0:	3001      	adds	r0, #1
     1c2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1c6:	4770      	bx	lr

000001c8 <ocrypto_bigint_csub256>:
     1c8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1cc:	4252      	negs	r2, r2
     1ce:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1d2:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1d6:	4017      	ands	r7, r2
     1d8:	1bdb      	subs	r3, r3, r7
     1da:	ea18 0802 	ands.w	r8, r8, r2
     1de:	eb74 0408 	sbcs.w	r4, r4, r8
     1e2:	ea19 0902 	ands.w	r9, r9, r2
     1e6:	eb75 0509 	sbcs.w	r5, r5, r9
     1ea:	ea1a 0a02 	ands.w	sl, sl, r2
     1ee:	eb76 060a 	sbcs.w	r6, r6, sl
     1f2:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1f4:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1f8:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1fc:	4017      	ands	r7, r2
     1fe:	41bb      	sbcs	r3, r7
     200:	ea18 0802 	ands.w	r8, r8, r2
     204:	eb74 0408 	sbcs.w	r4, r4, r8
     208:	ea19 0902 	ands.w	r9, r9, r2
     20c:	eb75 0509 	sbcs.w	r5, r5, r9
     210:	ea1a 0a02 	ands.w	sl, sl, r2
     214:	eb76 060a 	sbcs.w	r6, r6, sl
     218:	c078      	stmia	r0!, {r3, r4, r5, r6}
     21a:	4180      	sbcs	r0, r0
     21c:	4240      	negs	r0, r0
     21e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     222:	4770      	bx	lr

00000224 <ocrypto_bigint_cswap256>:
     224:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     228:	4252      	negs	r2, r2
     22a:	f04f 0804 	mov.w	r8, #4

0000022e <cswap256_loop>:
     22e:	e890 0030 	ldmia.w	r0, {r4, r5}
     232:	e891 00c0 	ldmia.w	r1, {r6, r7}
     236:	1ba3      	subs	r3, r4, r6
     238:	4013      	ands	r3, r2
     23a:	1ae4      	subs	r4, r4, r3
     23c:	18f6      	adds	r6, r6, r3
     23e:	1beb      	subs	r3, r5, r7
     240:	4013      	ands	r3, r2
     242:	1aed      	subs	r5, r5, r3
     244:	18ff      	adds	r7, r7, r3
     246:	c030      	stmia	r0!, {r4, r5}
     248:	c1c0      	stmia	r1!, {r6, r7}
     24a:	f1b8 0801 	subs.w	r8, r8, #1
     24e:	d1ee      	bne.n	22e <cswap256_loop>
     250:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     254:	4770      	bx	lr
     256:	bf00      	nop

00000258 <ocrypto_mul256_noframe>:
     258:	b500      	push	{lr}
     25a:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     25e:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     262:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     266:	b402      	push	{r1}
     268:	fba7 5102 	umull	r5, r1, r7, r2
     26c:	950a      	str	r5, [sp, #40]	; 0x28
     26e:	fba8 0b02 	umull	r0, fp, r8, r2
     272:	fbe7 1063 	umaal	r1, r0, r7, r3
     276:	fbe9 b062 	umaal	fp, r0, r9, r2
     27a:	910b      	str	r1, [sp, #44]	; 0x2c
     27c:	fba8 5103 	umull	r5, r1, r8, r3
     280:	fbea 0162 	umaal	r0, r1, sl, r2
     284:	fbe7 b564 	umaal	fp, r5, r7, r4
     288:	fbe7 0566 	umaal	r0, r5, r7, r6
     28c:	fbe8 1566 	umaal	r1, r5, r8, r6
     290:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     294:	fba9 b603 	umull	fp, r6, r9, r3
     298:	fbea 1663 	umaal	r1, r6, sl, r3
     29c:	fbec 5663 	umaal	r5, r6, ip, r3
     2a0:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2a4:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2a8:	fbea 5b64 	umaal	r5, fp, sl, r4
     2ac:	fbec 6b64 	umaal	r6, fp, ip, r4
     2b0:	900d      	str	r0, [sp, #52]	; 0x34
     2b2:	fbac 3002 	umull	r3, r0, ip, r2
     2b6:	9c05      	ldr	r4, [sp, #20]
     2b8:	fbee 5062 	umaal	r5, r0, lr, r2
     2bc:	fbe9 6064 	umaal	r6, r0, r9, r4
     2c0:	fbea b064 	umaal	fp, r0, sl, r4
     2c4:	fbe7 3164 	umaal	r3, r1, r7, r4
     2c8:	fbe8 5164 	umaal	r5, r1, r8, r4
     2cc:	9c06      	ldr	r4, [sp, #24]
     2ce:	fbe8 6164 	umaal	r6, r1, r8, r4
     2d2:	fbe9 b164 	umaal	fp, r1, r9, r4
     2d6:	fbea 0164 	umaal	r0, r1, sl, r4
     2da:	930e      	str	r3, [sp, #56]	; 0x38
     2dc:	fba7 3204 	umull	r3, r2, r7, r4
     2e0:	9c07      	ldr	r4, [sp, #28]
     2e2:	fbe7 6264 	umaal	r6, r2, r7, r4
     2e6:	fbe8 b264 	umaal	fp, r2, r8, r4
     2ea:	fbe9 0264 	umaal	r0, r2, r9, r4
     2ee:	fbea 1264 	umaal	r1, r2, sl, r4
     2f2:	9c04      	ldr	r4, [sp, #16]
     2f4:	fbe9 5364 	umaal	r5, r3, r9, r4
     2f8:	fbea 6364 	umaal	r6, r3, sl, r4
     2fc:	9c08      	ldr	r4, [sp, #32]
     2fe:	fbe7 b364 	umaal	fp, r3, r7, r4
     302:	fbe8 0364 	umaal	r0, r3, r8, r4
     306:	fbe9 1364 	umaal	r1, r3, r9, r4
     30a:	fbea 2364 	umaal	r2, r3, sl, r4
     30e:	950f      	str	r5, [sp, #60]	; 0x3c
     310:	f85d 9b04 	ldr.w	r9, [sp], #4
     314:	e899 0600 	ldmia.w	r9, {r9, sl}
     318:	f8dd 8000 	ldr.w	r8, [sp]
     31c:	fba9 5408 	umull	r5, r4, r9, r8
     320:	fbea b468 	umaal	fp, r4, sl, r8
     324:	f8dd 8010 	ldr.w	r8, [sp, #16]
     328:	fbec 0468 	umaal	r0, r4, ip, r8
     32c:	fbee 1468 	umaal	r1, r4, lr, r8
     330:	fbe9 2468 	umaal	r2, r4, r9, r8
     334:	fbea 3468 	umaal	r3, r4, sl, r8
     338:	f8dd 8004 	ldr.w	r8, [sp, #4]
     33c:	fbee 6568 	umaal	r6, r5, lr, r8
     340:	fbe9 b568 	umaal	fp, r5, r9, r8
     344:	fbea 0568 	umaal	r0, r5, sl, r8
     348:	f8dd 8014 	ldr.w	r8, [sp, #20]
     34c:	fbec 1568 	umaal	r1, r5, ip, r8
     350:	fbee 2568 	umaal	r2, r5, lr, r8
     354:	fbe9 3568 	umaal	r3, r5, r9, r8
     358:	fbea 4568 	umaal	r4, r5, sl, r8
     35c:	960f      	str	r6, [sp, #60]	; 0x3c
     35e:	f8dd 8008 	ldr.w	r8, [sp, #8]
     362:	fbae 7608 	umull	r7, r6, lr, r8
     366:	fbe9 0668 	umaal	r0, r6, r9, r8
     36a:	fbea 1668 	umaal	r1, r6, sl, r8
     36e:	f8dd 8018 	ldr.w	r8, [sp, #24]
     372:	fbec 2668 	umaal	r2, r6, ip, r8
     376:	fbee 3668 	umaal	r3, r6, lr, r8
     37a:	fbe9 4668 	umaal	r4, r6, r9, r8
     37e:	fbea 5668 	umaal	r5, r6, sl, r8
     382:	f8dd 800c 	ldr.w	r8, [sp, #12]
     386:	fbec b768 	umaal	fp, r7, ip, r8
     38a:	fbee 0768 	umaal	r0, r7, lr, r8
     38e:	fbe9 1768 	umaal	r1, r7, r9, r8
     392:	fbea 2768 	umaal	r2, r7, sl, r8
     396:	f8dd 801c 	ldr.w	r8, [sp, #28]
     39a:	fbec 3768 	umaal	r3, r7, ip, r8
     39e:	fbee 4768 	umaal	r4, r7, lr, r8
     3a2:	fbe9 5768 	umaal	r5, r7, r9, r8
     3a6:	fbea 6768 	umaal	r6, r7, sl, r8
     3aa:	b008      	add	sp, #32
     3ac:	bd00      	pop	{pc}
     3ae:	bf00      	nop

000003b0 <ocrypto_bigint_mul256>:
     3b0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3b4:	b087      	sub	sp, #28
     3b6:	f7ff ff4f 	bl	258 <ocrypto_mul256_noframe>
     3ba:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3be:	f108 0820 	add.w	r8, r8, #32
     3c2:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     3c6:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     3c8:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000003d0 <ocrypto_sqr256_noframe>:
     3d0:	b500      	push	{lr}
     3d2:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     3d6:	fba3 5203 	umull	r5, r2, r3, r3
     3da:	9501      	str	r5, [sp, #4]
     3dc:	fba3 0104 	umull	r0, r1, r3, r4
     3e0:	fbe3 2064 	umaal	r2, r0, r3, r4
     3e4:	fbe3 1067 	umaal	r1, r0, r3, r7
     3e8:	9202      	str	r2, [sp, #8]
     3ea:	fba3 5207 	umull	r5, r2, r3, r7
     3ee:	fbe3 0268 	umaal	r0, r2, r3, r8
     3f2:	fbe4 1564 	umaal	r1, r5, r4, r4
     3f6:	fbe3 0568 	umaal	r0, r5, r3, r8
     3fa:	fbe3 2569 	umaal	r2, r5, r3, r9
     3fe:	9103      	str	r1, [sp, #12]
     400:	fba4 b607 	umull	fp, r6, r4, r7
     404:	fbe3 2669 	umaal	r2, r6, r3, r9
     408:	fbe3 566a 	umaal	r5, r6, r3, sl
     40c:	fbe4 0b67 	umaal	r0, fp, r4, r7
     410:	fbe4 2b68 	umaal	r2, fp, r4, r8
     414:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     418:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     41c:	9004      	str	r0, [sp, #16]
     41e:	fba4 1008 	umull	r1, r0, r4, r8
     422:	fbe4 5069 	umaal	r5, r0, r4, r9
     426:	fbe3 606c 	umaal	r6, r0, r3, ip
     42a:	fbe3 b06e 	umaal	fp, r0, r3, lr
     42e:	fbe7 2167 	umaal	r2, r1, r7, r7
     432:	fbe4 5169 	umaal	r5, r1, r4, r9
     436:	fbe4 616a 	umaal	r6, r1, r4, sl
     43a:	fbe3 b16e 	umaal	fp, r1, r3, lr
     43e:	fbe4 016e 	umaal	r0, r1, r4, lr
     442:	9205      	str	r2, [sp, #20]
     444:	fba7 3208 	umull	r3, r2, r7, r8
     448:	fbe4 626a 	umaal	r6, r2, r4, sl
     44c:	fbe4 b26c 	umaal	fp, r2, r4, ip
     450:	fbe4 026e 	umaal	r0, r2, r4, lr
     454:	fbe7 126e 	umaal	r1, r2, r7, lr
     458:	fbe7 5368 	umaal	r5, r3, r7, r8
     45c:	fbe7 6369 	umaal	r6, r3, r7, r9
     460:	fbe4 b36c 	umaal	fp, r3, r4, ip
     464:	fbe7 036c 	umaal	r0, r3, r7, ip
     468:	fbe7 136e 	umaal	r1, r3, r7, lr
     46c:	fbe8 236e 	umaal	r2, r3, r8, lr
     470:	9506      	str	r5, [sp, #24]
     472:	fba7 5409 	umull	r5, r4, r7, r9
     476:	fbe7 b46a 	umaal	fp, r4, r7, sl
     47a:	fbe7 046c 	umaal	r0, r4, r7, ip
     47e:	fbe8 146c 	umaal	r1, r4, r8, ip
     482:	fbe8 246e 	umaal	r2, r4, r8, lr
     486:	fbe9 346e 	umaal	r3, r4, r9, lr
     48a:	fbe8 6568 	umaal	r6, r5, r8, r8
     48e:	fbe7 b56a 	umaal	fp, r5, r7, sl
     492:	fbe8 056a 	umaal	r0, r5, r8, sl
     496:	fbe8 156c 	umaal	r1, r5, r8, ip
     49a:	fbe9 256c 	umaal	r2, r5, r9, ip
     49e:	fbe9 356e 	umaal	r3, r5, r9, lr
     4a2:	fbea 456e 	umaal	r4, r5, sl, lr
     4a6:	9607      	str	r6, [sp, #28]
     4a8:	fba8 7609 	umull	r7, r6, r8, r9
     4ac:	fbe8 066a 	umaal	r0, r6, r8, sl
     4b0:	fbe9 166a 	umaal	r1, r6, r9, sl
     4b4:	fbe9 266c 	umaal	r2, r6, r9, ip
     4b8:	fbea 366c 	umaal	r3, r6, sl, ip
     4bc:	fbea 466e 	umaal	r4, r6, sl, lr
     4c0:	fbec 566e 	umaal	r5, r6, ip, lr
     4c4:	fbe8 b769 	umaal	fp, r7, r8, r9
     4c8:	fbe9 0769 	umaal	r0, r7, r9, r9
     4cc:	fbe9 176a 	umaal	r1, r7, r9, sl
     4d0:	fbea 276a 	umaal	r2, r7, sl, sl
     4d4:	fbea 376c 	umaal	r3, r7, sl, ip
     4d8:	fbec 476c 	umaal	r4, r7, ip, ip
     4dc:	fbec 576e 	umaal	r5, r7, ip, lr
     4e0:	fbee 676e 	umaal	r6, r7, lr, lr
     4e4:	bd00      	pop	{pc}
     4e6:	bf00      	nop

000004e8 <ocrypto_bigint_sqr256>:
     4e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4ec:	b087      	sub	sp, #28
     4ee:	f7ff ff6f 	bl	3d0 <ocrypto_sqr256_noframe>
     4f2:	f8dd 801c 	ldr.w	r8, [sp, #28]
     4f6:	f108 0820 	add.w	r8, r8, #32
     4fa:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     4fe:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     500:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000508 <ocrypto_constant_time_equal>:
     508:	b430      	push	{r4, r5}
     50a:	f04f 0300 	mov.w	r3, #0

0000050e <constant_time_equal_loop>:
     50e:	f810 4b01 	ldrb.w	r4, [r0], #1
     512:	f811 5b01 	ldrb.w	r5, [r1], #1
     516:	3a01      	subs	r2, #1
     518:	ea84 0405 	eor.w	r4, r4, r5
     51c:	ea43 0304 	orr.w	r3, r3, r4
     520:	d1f5      	bne.n	50e <constant_time_equal_loop>
     522:	f1a3 0301 	sub.w	r3, r3, #1
     526:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     52a:	bc30      	pop	{r4, r5}
     52c:	4770      	bx	lr
     52e:	bf00      	nop

00000530 <ocrypto_constant_time_is_zero>:
     530:	f04f 0300 	mov.w	r3, #0

00000534 <constant_time_is_zero_loop>:
     534:	f810 2b01 	ldrb.w	r2, [r0], #1
     538:	3901      	subs	r1, #1
     53a:	ea43 0302 	orr.w	r3, r3, r2
     53e:	d1f9      	bne.n	534 <constant_time_is_zero_loop>
     540:	f1a3 0301 	sub.w	r3, r3, #1
     544:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <ocrypto_constant_time_xor>:
     54c:	b430      	push	{r4, r5}

0000054e <constant_time_xor_loop>:
     54e:	f811 4b01 	ldrb.w	r4, [r1], #1
     552:	f812 5b01 	ldrb.w	r5, [r2], #1
     556:	406c      	eors	r4, r5
     558:	f800 4b01 	strb.w	r4, [r0], #1
     55c:	3b01      	subs	r3, #1
     55e:	d1f6      	bne.n	54e <constant_time_xor_loop>
     560:	bc30      	pop	{r4, r5}
     562:	4770      	bx	lr

00000564 <ocrypto_mod_p256_add>:
     564:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     568:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     56c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     570:	185b      	adds	r3, r3, r1
     572:	eb54 040c 	adcs.w	r4, r4, ip
     576:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     57a:	414d      	adcs	r5, r1
     57c:	eb56 060c 	adcs.w	r6, r6, ip
     580:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     584:	414f      	adcs	r7, r1
     586:	eb58 080c 	adcs.w	r8, r8, ip
     58a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     58e:	eb59 0901 	adcs.w	r9, r9, r1
     592:	eb5a 0a0c 	adcs.w	sl, sl, ip
     596:	4189      	sbcs	r1, r1
     598:	f1b3 33ff 	subs.w	r3, r3, #4294967295	; 0xffffffff
     59c:	f174 34ff 	sbcs.w	r4, r4, #4294967295	; 0xffffffff
     5a0:	f175 35ff 	sbcs.w	r5, r5, #4294967295	; 0xffffffff
     5a4:	f176 0600 	sbcs.w	r6, r6, #0
     5a8:	f177 0700 	sbcs.w	r7, r7, #0
     5ac:	f178 0800 	sbcs.w	r8, r8, #0
     5b0:	f179 0901 	sbcs.w	r9, r9, #1
     5b4:	f17a 3aff 	sbcs.w	sl, sl, #4294967295	; 0xffffffff
     5b8:	f151 0100 	adcs.w	r1, r1, #0
     5bc:	185b      	adds	r3, r3, r1
     5be:	414c      	adcs	r4, r1
     5c0:	414d      	adcs	r5, r1
     5c2:	f156 0600 	adcs.w	r6, r6, #0
     5c6:	f157 0700 	adcs.w	r7, r7, #0
     5ca:	f158 0800 	adcs.w	r8, r8, #0
     5ce:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     5d2:	eb5a 0a01 	adcs.w	sl, sl, r1
     5d6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     5da:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5de:	4770      	bx	lr

000005e0 <ocrypto_mod_p256_sub>:
     5e0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5e4:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5e8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5ec:	1a5b      	subs	r3, r3, r1
     5ee:	eb74 040c 	sbcs.w	r4, r4, ip
     5f2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5f6:	418d      	sbcs	r5, r1
     5f8:	eb76 060c 	sbcs.w	r6, r6, ip
     5fc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     600:	418f      	sbcs	r7, r1
     602:	eb78 080c 	sbcs.w	r8, r8, ip
     606:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     60a:	eb79 0901 	sbcs.w	r9, r9, r1
     60e:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     612:	4189      	sbcs	r1, r1
     614:	185b      	adds	r3, r3, r1
     616:	414c      	adcs	r4, r1
     618:	414d      	adcs	r5, r1
     61a:	f156 0600 	adcs.w	r6, r6, #0
     61e:	f157 0700 	adcs.w	r7, r7, #0
     622:	f158 0800 	adcs.w	r8, r8, #0
     626:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     62a:	eb5a 0a01 	adcs.w	sl, sl, r1
     62e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     632:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     636:	4770      	bx	lr

00000638 <mul_reduce>:
     638:	eb18 0804 	adds.w	r8, r8, r4
     63c:	eb59 0905 	adcs.w	r9, r9, r5
     640:	eb5a 0a06 	adcs.w	sl, sl, r6
     644:	eb5b 0b07 	adcs.w	fp, fp, r7
     648:	f05f 0c00 	movs.w	ip, #0
     64c:	f14c 0c00 	adc.w	ip, ip, #0
     650:	eb18 0805 	adds.w	r8, r8, r5
     654:	eb59 0906 	adcs.w	r9, r9, r6
     658:	eb5a 0a07 	adcs.w	sl, sl, r7
     65c:	eb5b 0b07 	adcs.w	fp, fp, r7
     660:	eb50 000c 	adcs.w	r0, r0, ip
     664:	f05f 0c00 	movs.w	ip, #0
     668:	eb51 010c 	adcs.w	r1, r1, ip
     66c:	eb52 020c 	adcs.w	r2, r2, ip
     670:	4163      	adcs	r3, r4
     672:	f14c 0c00 	adc.w	ip, ip, #0
     676:	ebb8 0807 	subs.w	r8, r8, r7
     67a:	f179 0900 	sbcs.w	r9, r9, #0
     67e:	f17a 0a00 	sbcs.w	sl, sl, #0
     682:	eb7b 0b04 	sbcs.w	fp, fp, r4
     686:	41a8      	sbcs	r0, r5
     688:	41b1      	sbcs	r1, r6
     68a:	41a2      	sbcs	r2, r4
     68c:	41b3      	sbcs	r3, r6
     68e:	f16c 0c00 	sbc.w	ip, ip, #0
     692:	ebbb 0b05 	subs.w	fp, fp, r5
     696:	41b0      	sbcs	r0, r6
     698:	41b9      	sbcs	r1, r7
     69a:	41aa      	sbcs	r2, r5
     69c:	41bb      	sbcs	r3, r7
     69e:	f16c 0c00 	sbc.w	ip, ip, #0
     6a2:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     6a6:	ebb8 0804 	subs.w	r8, r8, r4
     6aa:	eb79 0904 	sbcs.w	r9, r9, r4
     6ae:	eb7a 0a04 	sbcs.w	sl, sl, r4
     6b2:	f17b 0b00 	sbcs.w	fp, fp, #0
     6b6:	f170 0000 	sbcs.w	r0, r0, #0
     6ba:	f171 0100 	sbcs.w	r1, r1, #0
     6be:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     6c2:	41a3      	sbcs	r3, r4
     6c4:	f16c 0c00 	sbc.w	ip, ip, #0
     6c8:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     6cc:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     6d0:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     6d4:	f15b 0b00 	adcs.w	fp, fp, #0
     6d8:	f150 0400 	adcs.w	r4, r0, #0
     6dc:	f151 0500 	adcs.w	r5, r1, #0
     6e0:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     6e4:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     6e8:	f14c 0c00 	adc.w	ip, ip, #0
     6ec:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     6f0:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     6f4:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     6f8:	f15b 0300 	adcs.w	r3, fp, #0
     6fc:	f154 0400 	adcs.w	r4, r4, #0
     700:	f155 0500 	adcs.w	r5, r5, #0
     704:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     708:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     70c:	4770      	bx	lr
     70e:	bf00      	nop

00000710 <ocrypto_mod_p256_mul>:
     710:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     714:	b087      	sub	sp, #28
     716:	f7ff fd9f 	bl	258 <ocrypto_mul256_noframe>
     71a:	f8dd 8010 	ldr.w	r8, [sp, #16]
     71e:	f8dd 9014 	ldr.w	r9, [sp, #20]
     722:	f8dd a018 	ldr.w	sl, [sp, #24]
     726:	f7ff ff87 	bl	638 <mul_reduce>
     72a:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     72e:	f7ff ff83 	bl	638 <mul_reduce>
     732:	b003      	add	sp, #12
     734:	f85d 8b04 	ldr.w	r8, [sp], #4
     738:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000740 <ocrypto_mod_p256_sqr>:
     740:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     744:	b087      	sub	sp, #28
     746:	f7ff fe43 	bl	3d0 <ocrypto_sqr256_noframe>
     74a:	f8dd 8010 	ldr.w	r8, [sp, #16]
     74e:	f8dd 9014 	ldr.w	r9, [sp, #20]
     752:	f8dd a018 	ldr.w	sl, [sp, #24]
     756:	f7ff ff6f 	bl	638 <mul_reduce>
     75a:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     75e:	f7ff ff6b 	bl	638 <mul_reduce>
     762:	b003      	add	sp, #12
     764:	f85d 8b04 	ldr.w	r8, [sp], #4
     768:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000770 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
     770:	4801      	ldr	r0, [pc, #4]	; (778 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
     772:	7800      	ldrb	r0, [r0, #0]
     774:	4770      	bx	lr
     776:	0000      	.short	0x0000
     778:	20000028 	.word	0x20000028

0000077c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     77c:	b570      	push	{r4, r5, r6, lr}
     77e:	4c17      	ldr	r4, [pc, #92]	; (7dc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
     780:	7860      	ldrb	r0, [r4, #1]
     782:	2800      	cmp	r0, #0
     784:	d123      	bne.n	7ce <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
     786:	2001      	movs	r0, #1
     788:	7060      	strb	r0, [r4, #1]
     78a:	f00b fb3a 	bl	be02 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     78e:	f06f 0527 	mvn.w	r5, #39	; 0x27
     792:	b928      	cbnz	r0, 7a0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     794:	f00b fb6b 	bl	be6e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     798:	b910      	cbnz	r0, 7a0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     79a:	f00b fb72 	bl	be82 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     79e:	b120      	cbz	r0, 7aa <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
     7a0:	480f      	ldr	r0, [pc, #60]	; (7e0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
     7a2:	6060      	str	r0, [r4, #4]
     7a4:	70a5      	strb	r5, [r4, #2]
     7a6:	2008      	movs	r0, #8
     7a8:	e010      	b.n	7cc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
     7aa:	f00b faff 	bl	bdac <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     7ae:	b940      	cbnz	r0, 7c2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     7b0:	f00b fb06 	bl	bdc0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     7b4:	b928      	cbnz	r0, 7c2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     7b6:	f00b fb1a 	bl	bdee <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     7ba:	b910      	cbnz	r0, 7c2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     7bc:	f00b fb2b 	bl	be16 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     7c0:	b130      	cbz	r0, 7d0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
     7c2:	4807      	ldr	r0, [pc, #28]	; (7e0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
     7c4:	3031      	adds	r0, #49	; 0x31
     7c6:	6060      	str	r0, [r4, #4]
     7c8:	70a5      	strb	r5, [r4, #2]
     7ca:	2004      	movs	r0, #4
     7cc:	70e0      	strb	r0, [r4, #3]
     7ce:	bd70      	pop	{r4, r5, r6, pc}
     7d0:	f44f 718f 	mov.w	r1, #286	; 0x11e
     7d4:	2074      	movs	r0, #116	; 0x74
     7d6:	f003 fb23 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     7da:	0000      	.short	0x0000
     7dc:	20000028 	.word	0x20000028
     7e0:	000100f6 	.word	0x000100f6

000007e4 <mpsl_tx_power_radio_supported_power_adjust>:
     7e4:	4908      	ldr	r1, [pc, #32]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7e6:	f991 2003 	ldrsb.w	r2, [r1, #3]
     7ea:	4290      	cmp	r0, r2
     7ec:	da03      	bge.n	7f6 <mpsl_tx_power_radio_supported_power_adjust+0x12>
     7ee:	f991 2002 	ldrsb.w	r2, [r1, #2]
     7f2:	4290      	cmp	r0, r2
     7f4:	dc01      	bgt.n	7fa <mpsl_tx_power_radio_supported_power_adjust+0x16>
     7f6:	4610      	mov	r0, r2
     7f8:	4770      	bx	lr
     7fa:	6849      	ldr	r1, [r1, #4]
     7fc:	1a80      	subs	r0, r0, r2
     7fe:	5c08      	ldrb	r0, [r1, r0]
     800:	4902      	ldr	r1, [pc, #8]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     802:	5608      	ldrsb	r0, [r1, r0]
     804:	4770      	bx	lr
     806:	0000      	.short	0x0000
     808:	20000028 	.word	0x20000028
     80c:	000100e8 	.word	0x000100e8

00000810 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
     810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     814:	461c      	mov	r4, r3
     816:	4690      	mov	r8, r2
     818:	460d      	mov	r5, r1
     81a:	4606      	mov	r6, r0
     81c:	f06f 0715 	mvn.w	r7, #21
     820:	2804      	cmp	r0, #4
     822:	d804      	bhi.n	82e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     824:	b11c      	cbz	r4, 82e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     826:	f00b f9a5 	bl	bb74 <strlen+0x10>
     82a:	42a8      	cmp	r0, r5
     82c:	d802      	bhi.n	834 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
     82e:	4638      	mov	r0, r7
     830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     834:	4805      	ldr	r0, [pc, #20]	; (84c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
     836:	4642      	mov	r2, r8
     838:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     83c:	b118      	cbz	r0, 846 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     83e:	5740      	ldrsb	r0, [r0, r5]
     840:	4282      	cmp	r2, r0
     842:	dd00      	ble.n	846 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     844:	4602      	mov	r2, r0
     846:	7022      	strb	r2, [r4, #0]
     848:	2000      	movs	r0, #0
     84a:	e7f1      	b.n	830 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
     84c:	20000a40 	.word	0x20000a40

00000850 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     850:	4801      	ldr	r0, [pc, #4]	; (858 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     852:	7800      	ldrb	r0, [r0, #0]
     854:	4770      	bx	lr
     856:	0000      	.short	0x0000
     858:	20000030 	.word	0x20000030

0000085c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     85c:	4905      	ldr	r1, [pc, #20]	; (874 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     85e:	780a      	ldrb	r2, [r1, #0]
     860:	4290      	cmp	r0, r2
     862:	d301      	bcc.n	868 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     864:	2000      	movs	r0, #0
     866:	4770      	bx	lr
     868:	6849      	ldr	r1, [r1, #4]
     86a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     86e:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     872:	4770      	bx	lr
     874:	20000030 	.word	0x20000030

00000878 <MPSL_IRQ_RADIO_Handler>:
     878:	490e      	ldr	r1, [pc, #56]	; (8b4 <MPSL_IRQ_RADIO_Handler+0x3c>)
     87a:	b510      	push	{r4, lr}
     87c:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     880:	2820      	cmp	r0, #32
     882:	d012      	beq.n	8aa <MPSL_IRQ_RADIO_Handler+0x32>
     884:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     888:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
     88c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     890:	eb02 0080 	add.w	r0, r2, r0, lsl #2
     894:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
     898:	6840      	ldr	r0, [r0, #4]
     89a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     89e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
     8a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     8a6:	2104      	movs	r1, #4
     8a8:	4710      	bx	r2
     8aa:	f640 01bc 	movw	r1, #2236	; 0x8bc
     8ae:	2070      	movs	r0, #112	; 0x70
     8b0:	f003 fab6 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     8b4:	20000e54 	.word	0x20000e54
     8b8:	b570      	push	{r4, r5, r6, lr}
     8ba:	4605      	mov	r5, r0
     8bc:	2a20      	cmp	r2, #32
     8be:	d028      	beq.n	912 <MPSL_IRQ_RADIO_Handler+0x9a>
     8c0:	4819      	ldr	r0, [pc, #100]	; (928 <MPSL_IRQ_RADIO_Handler+0xb0>)
     8c2:	4c1a      	ldr	r4, [pc, #104]	; (92c <MPSL_IRQ_RADIO_Handler+0xb4>)
     8c4:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     8c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     8cc:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     8d0:	4423      	add	r3, r4
     8d2:	2920      	cmp	r1, #32
     8d4:	d022      	beq.n	91c <MPSL_IRQ_RADIO_Handler+0xa4>
     8d6:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     8da:	7840      	ldrb	r0, [r0, #1]
     8dc:	784c      	ldrb	r4, [r1, #1]
     8de:	7048      	strb	r0, [r1, #1]
     8e0:	4620      	mov	r0, r4
     8e2:	4601      	mov	r1, r0
     8e4:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     8e8:	4291      	cmp	r1, r2
     8ea:	7005      	strb	r5, [r0, #0]
     8ec:	7840      	ldrb	r0, [r0, #1]
     8ee:	d1f8      	bne.n	8e2 <MPSL_IRQ_RADIO_Handler+0x6a>
     8f0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     8f4:	2a20      	cmp	r2, #32
     8f6:	bf1a      	itte	ne
     8f8:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     8fc:	7054      	strbne	r4, [r2, #1]
     8fe:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     902:	2220      	movs	r2, #32
     904:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     908:	f88c 2001 	strb.w	r2, [ip, #1]
     90c:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     910:	bd70      	pop	{r4, r5, r6, pc}
     912:	f44f 7126 	mov.w	r1, #664	; 0x298
     916:	2070      	movs	r0, #112	; 0x70
     918:	f003 fa82 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     91c:	f893 4020 	ldrb.w	r4, [r3, #32]
     920:	7840      	ldrb	r0, [r0, #1]
     922:	f883 0020 	strb.w	r0, [r3, #32]
     926:	e7db      	b.n	8e0 <MPSL_IRQ_RADIO_Handler+0x68>
     928:	20000dd4 	.word	0x20000dd4
     92c:	20000e54 	.word	0x20000e54
     930:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     934:	b08d      	sub	sp, #52	; 0x34
     936:	4615      	mov	r5, r2
     938:	460c      	mov	r4, r1
     93a:	f002 f9cd 	bl	2cd8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     93e:	4428      	add	r0, r5
     940:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     944:	9008      	str	r0, [sp, #32]
     946:	6821      	ldr	r1, [r4, #0]
     948:	1a08      	subs	r0, r1, r0
     94a:	0200      	lsls	r0, r0, #8
     94c:	17c1      	asrs	r1, r0, #31
     94e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     952:	1200      	asrs	r0, r0, #8
     954:	2800      	cmp	r0, #0
     956:	f300 80f0 	bgt.w	b3a <MPSL_IRQ_RADIO_Handler+0x2c2>
     95a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
     95e:	48cd      	ldr	r0, [pc, #820]	; (c94 <MPSL_IRQ_RADIO_Handler+0x41c>)
     960:	eb08 0148 	add.w	r1, r8, r8, lsl #1
     964:	4408      	add	r0, r1
     966:	9009      	str	r0, [sp, #36]	; 0x24
     968:	f890 5020 	ldrb.w	r5, [r0, #32]
     96c:	2020      	movs	r0, #32
     96e:	4eca      	ldr	r6, [pc, #808]	; (c98 <MPSL_IRQ_RADIO_Handler+0x420>)
     970:	f10d 0a18 	add.w	sl, sp, #24
     974:	f10d 091c 	add.w	r9, sp, #28
     978:	f88d 0018 	strb.w	r0, [sp, #24]
     97c:	2d20      	cmp	r5, #32
     97e:	bf1c      	itt	ne
     980:	48c6      	ldrne	r0, [pc, #792]	; (c9c <MPSL_IRQ_RADIO_Handler+0x424>)
     982:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     986:	d038      	beq.n	9fa <MPSL_IRQ_RADIO_Handler+0x182>
     988:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     98c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     990:	f100 0108 	add.w	r1, r0, #8
     994:	68c0      	ldr	r0, [r0, #12]
     996:	6827      	ldr	r7, [r4, #0]
     998:	1a38      	subs	r0, r7, r0
     99a:	0200      	lsls	r0, r0, #8
     99c:	17c2      	asrs	r2, r0, #31
     99e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     9a2:	1200      	asrs	r0, r0, #8
     9a4:	d429      	bmi.n	9fa <MPSL_IRQ_RADIO_Handler+0x182>
     9a6:	89e0      	ldrh	r0, [r4, #14]
     9a8:	b300      	cbz	r0, 9ec <MPSL_IRQ_RADIO_Handler+0x174>
     9aa:	89c8      	ldrh	r0, [r1, #14]
     9ac:	b9f0      	cbnz	r0, 9ec <MPSL_IRQ_RADIO_Handler+0x174>
     9ae:	6808      	ldr	r0, [r1, #0]
     9b0:	9003      	str	r0, [sp, #12]
     9b2:	f003 f88b 	bl	3acc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     9b6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     9ba:	bf08      	it	eq
     9bc:	200d      	moveq	r0, #13
     9be:	d00b      	beq.n	9d8 <MPSL_IRQ_RADIO_Handler+0x160>
     9c0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     9c4:	3856      	subs	r0, #86	; 0x56
     9c6:	bf08      	it	eq
     9c8:	201c      	moveq	r0, #28
     9ca:	d005      	beq.n	9d8 <MPSL_IRQ_RADIO_Handler+0x160>
     9cc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     9d0:	389f      	subs	r0, #159	; 0x9f
     9d2:	bf14      	ite	ne
     9d4:	2000      	movne	r0, #0
     9d6:	2032      	moveq	r0, #50	; 0x32
     9d8:	1c41      	adds	r1, r0, #1
     9da:	9803      	ldr	r0, [sp, #12]
     9dc:	1a38      	subs	r0, r7, r0
     9de:	0200      	lsls	r0, r0, #8
     9e0:	17c2      	asrs	r2, r0, #31
     9e2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     9e6:	1200      	asrs	r0, r0, #8
     9e8:	4288      	cmp	r0, r1
     9ea:	db06      	blt.n	9fa <MPSL_IRQ_RADIO_Handler+0x182>
     9ec:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     9f0:	f88a 5000 	strb.w	r5, [sl]
     9f4:	7845      	ldrb	r5, [r0, #1]
     9f6:	2d20      	cmp	r5, #32
     9f8:	d1c6      	bne.n	988 <MPSL_IRQ_RADIO_Handler+0x110>
     9fa:	f89a 0000 	ldrb.w	r0, [sl]
     9fe:	f889 0000 	strb.w	r0, [r9]
     a02:	2d20      	cmp	r5, #32
     a04:	bf1c      	itt	ne
     a06:	48a5      	ldrne	r0, [pc, #660]	; (c9c <MPSL_IRQ_RADIO_Handler+0x424>)
     a08:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     a0c:	f000 813e 	beq.w	c8c <MPSL_IRQ_RADIO_Handler+0x414>
     a10:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     a14:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     a18:	6861      	ldr	r1, [r4, #4]
     a1a:	f8d7 8008 	ldr.w	r8, [r7, #8]
     a1e:	f107 0008 	add.w	r0, r7, #8
     a22:	eba8 0101 	sub.w	r1, r8, r1
     a26:	0209      	lsls	r1, r1, #8
     a28:	17ca      	asrs	r2, r1, #31
     a2a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     a2e:	1209      	asrs	r1, r1, #8
     a30:	d427      	bmi.n	a82 <MPSL_IRQ_RADIO_Handler+0x20a>
     a32:	89c0      	ldrh	r0, [r0, #14]
     a34:	2800      	cmp	r0, #0
     a36:	f000 8129 	beq.w	c8c <MPSL_IRQ_RADIO_Handler+0x414>
     a3a:	89e0      	ldrh	r0, [r4, #14]
     a3c:	2800      	cmp	r0, #0
     a3e:	f040 8125 	bne.w	c8c <MPSL_IRQ_RADIO_Handler+0x414>
     a42:	f8d4 a000 	ldr.w	sl, [r4]
     a46:	f003 f841 	bl	3acc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     a4a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     a4e:	bf08      	it	eq
     a50:	200d      	moveq	r0, #13
     a52:	d00b      	beq.n	a6c <MPSL_IRQ_RADIO_Handler+0x1f4>
     a54:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     a58:	3856      	subs	r0, #86	; 0x56
     a5a:	bf08      	it	eq
     a5c:	201c      	moveq	r0, #28
     a5e:	d005      	beq.n	a6c <MPSL_IRQ_RADIO_Handler+0x1f4>
     a60:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     a64:	389f      	subs	r0, #159	; 0x9f
     a66:	bf14      	ite	ne
     a68:	2000      	movne	r0, #0
     a6a:	2032      	moveq	r0, #50	; 0x32
     a6c:	1c41      	adds	r1, r0, #1
     a6e:	eba8 000a 	sub.w	r0, r8, sl
     a72:	0200      	lsls	r0, r0, #8
     a74:	17c2      	asrs	r2, r0, #31
     a76:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     a7a:	1200      	asrs	r0, r0, #8
     a7c:	4288      	cmp	r0, r1
     a7e:	f280 8105 	bge.w	c8c <MPSL_IRQ_RADIO_Handler+0x414>
     a82:	f889 5000 	strb.w	r5, [r9]
     a86:	7e38      	ldrb	r0, [r7, #24]
     a88:	7c21      	ldrb	r1, [r4, #16]
     a8a:	4288      	cmp	r0, r1
     a8c:	d906      	bls.n	a9c <MPSL_IRQ_RADIO_Handler+0x224>
     a8e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     a92:	7845      	ldrb	r5, [r0, #1]
     a94:	2d20      	cmp	r5, #32
     a96:	d1bb      	bne.n	a10 <MPSL_IRQ_RADIO_Handler+0x198>
     a98:	f000 b8f8 	b.w	c8c <MPSL_IRQ_RADIO_Handler+0x414>
     a9c:	f89d 001c 	ldrb.w	r0, [sp, #28]
     aa0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     aa4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     aa8:	8ac1      	ldrh	r1, [r0, #22]
     aaa:	68c5      	ldr	r5, [r0, #12]
     aac:	bbe1      	cbnz	r1, b28 <MPSL_IRQ_RADIO_Handler+0x2b0>
     aae:	89e1      	ldrh	r1, [r4, #14]
     ab0:	b3d1      	cbz	r1, b28 <MPSL_IRQ_RADIO_Handler+0x2b0>
     ab2:	6887      	ldr	r7, [r0, #8]
     ab4:	f003 f80a 	bl	3acc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     ab8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     abc:	bf08      	it	eq
     abe:	200d      	moveq	r0, #13
     ac0:	d00b      	beq.n	ada <MPSL_IRQ_RADIO_Handler+0x262>
     ac2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     ac6:	3856      	subs	r0, #86	; 0x56
     ac8:	bf08      	it	eq
     aca:	201c      	moveq	r0, #28
     acc:	d005      	beq.n	ada <MPSL_IRQ_RADIO_Handler+0x262>
     ace:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     ad2:	389f      	subs	r0, #159	; 0x9f
     ad4:	bf14      	ite	ne
     ad6:	2000      	movne	r0, #0
     ad8:	2032      	moveq	r0, #50	; 0x32
     ada:	1c41      	adds	r1, r0, #1
     adc:	1be8      	subs	r0, r5, r7
     ade:	0200      	lsls	r0, r0, #8
     ae0:	17c2      	asrs	r2, r0, #31
     ae2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     ae6:	1200      	asrs	r0, r0, #8
     ae8:	4288      	cmp	r0, r1
     aea:	da1d      	bge.n	b28 <MPSL_IRQ_RADIO_Handler+0x2b0>
     aec:	f002 ffee 	bl	3acc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     af0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     af4:	bf08      	it	eq
     af6:	200d      	moveq	r0, #13
     af8:	d00b      	beq.n	b12 <MPSL_IRQ_RADIO_Handler+0x29a>
     afa:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     afe:	3856      	subs	r0, #86	; 0x56
     b00:	bf08      	it	eq
     b02:	201c      	moveq	r0, #28
     b04:	d005      	beq.n	b12 <MPSL_IRQ_RADIO_Handler+0x29a>
     b06:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     b0a:	389f      	subs	r0, #159	; 0x9f
     b0c:	bf14      	ite	ne
     b0e:	2000      	movne	r0, #0
     b10:	2032      	moveq	r0, #50	; 0x32
     b12:	f89d 101c 	ldrb.w	r1, [sp, #28]
     b16:	1c40      	adds	r0, r0, #1
     b18:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     b1c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
     b20:	6889      	ldr	r1, [r1, #8]
     b22:	4408      	add	r0, r1
     b24:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
     b28:	9808      	ldr	r0, [sp, #32]
     b2a:	1a28      	subs	r0, r5, r0
     b2c:	0200      	lsls	r0, r0, #8
     b2e:	17c1      	asrs	r1, r0, #31
     b30:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b34:	1200      	asrs	r0, r0, #8
     b36:	2800      	cmp	r0, #0
     b38:	dd03      	ble.n	b42 <MPSL_IRQ_RADIO_Handler+0x2ca>
     b3a:	b011      	add	sp, #68	; 0x44
     b3c:	2000      	movs	r0, #0
     b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b42:	6820      	ldr	r0, [r4, #0]
     b44:	42a8      	cmp	r0, r5
     b46:	d902      	bls.n	b4e <MPSL_IRQ_RADIO_Handler+0x2d6>
     b48:	68a1      	ldr	r1, [r4, #8]
     b4a:	1c49      	adds	r1, r1, #1
     b4c:	60a1      	str	r1, [r4, #8]
     b4e:	6861      	ldr	r1, [r4, #4]
     b50:	f10d 0a18 	add.w	sl, sp, #24
     b54:	1a08      	subs	r0, r1, r0
     b56:	4428      	add	r0, r5
     b58:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
     b5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b60:	e9c4 1000 	strd	r1, r0, [r4]
     b64:	9810      	ldr	r0, [sp, #64]	; 0x40
     b66:	900b      	str	r0, [sp, #44]	; 0x2c
     b68:	9809      	ldr	r0, [sp, #36]	; 0x24
     b6a:	f10d 081c 	add.w	r8, sp, #28
     b6e:	f890 5020 	ldrb.w	r5, [r0, #32]
     b72:	2020      	movs	r0, #32
     b74:	f88d 0018 	strb.w	r0, [sp, #24]
     b78:	2d20      	cmp	r5, #32
     b7a:	d03c      	beq.n	bf6 <MPSL_IRQ_RADIO_Handler+0x37e>
     b7c:	4947      	ldr	r1, [pc, #284]	; (c9c <MPSL_IRQ_RADIO_Handler+0x424>)
     b7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
     b80:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
     b84:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     b88:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     b8c:	f100 0108 	add.w	r1, r0, #8
     b90:	68c0      	ldr	r0, [r0, #12]
     b92:	6827      	ldr	r7, [r4, #0]
     b94:	1a38      	subs	r0, r7, r0
     b96:	0200      	lsls	r0, r0, #8
     b98:	17c2      	asrs	r2, r0, #31
     b9a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     b9e:	1200      	asrs	r0, r0, #8
     ba0:	d429      	bmi.n	bf6 <MPSL_IRQ_RADIO_Handler+0x37e>
     ba2:	89e0      	ldrh	r0, [r4, #14]
     ba4:	b300      	cbz	r0, be8 <MPSL_IRQ_RADIO_Handler+0x370>
     ba6:	89c8      	ldrh	r0, [r1, #14]
     ba8:	b9f0      	cbnz	r0, be8 <MPSL_IRQ_RADIO_Handler+0x370>
     baa:	f8d1 9000 	ldr.w	r9, [r1]
     bae:	f002 ff8d 	bl	3acc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     bb2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     bb6:	bf08      	it	eq
     bb8:	200d      	moveq	r0, #13
     bba:	d00b      	beq.n	bd4 <MPSL_IRQ_RADIO_Handler+0x35c>
     bbc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     bc0:	3856      	subs	r0, #86	; 0x56
     bc2:	bf08      	it	eq
     bc4:	201c      	moveq	r0, #28
     bc6:	d005      	beq.n	bd4 <MPSL_IRQ_RADIO_Handler+0x35c>
     bc8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     bcc:	389f      	subs	r0, #159	; 0x9f
     bce:	bf14      	ite	ne
     bd0:	2000      	movne	r0, #0
     bd2:	2032      	moveq	r0, #50	; 0x32
     bd4:	1c41      	adds	r1, r0, #1
     bd6:	eba7 0009 	sub.w	r0, r7, r9
     bda:	0200      	lsls	r0, r0, #8
     bdc:	17c2      	asrs	r2, r0, #31
     bde:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     be2:	1200      	asrs	r0, r0, #8
     be4:	4288      	cmp	r0, r1
     be6:	db06      	blt.n	bf6 <MPSL_IRQ_RADIO_Handler+0x37e>
     be8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     bec:	f88a 5000 	strb.w	r5, [sl]
     bf0:	7845      	ldrb	r5, [r0, #1]
     bf2:	2d20      	cmp	r5, #32
     bf4:	d1c6      	bne.n	b84 <MPSL_IRQ_RADIO_Handler+0x30c>
     bf6:	f89a 0000 	ldrb.w	r0, [sl]
     bfa:	f888 0000 	strb.w	r0, [r8]
     bfe:	980b      	ldr	r0, [sp, #44]	; 0x2c
     c00:	2d20      	cmp	r5, #32
     c02:	bf1c      	itt	ne
     c04:	4925      	ldrne	r1, [pc, #148]	; (c9c <MPSL_IRQ_RADIO_Handler+0x424>)
     c06:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
     c0a:	d03f      	beq.n	c8c <MPSL_IRQ_RADIO_Handler+0x414>
     c0c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     c10:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     c14:	6860      	ldr	r0, [r4, #4]
     c16:	f8d7 9008 	ldr.w	r9, [r7, #8]
     c1a:	f107 0108 	add.w	r1, r7, #8
     c1e:	eba9 0000 	sub.w	r0, r9, r0
     c22:	0200      	lsls	r0, r0, #8
     c24:	17c2      	asrs	r2, r0, #31
     c26:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     c2a:	1200      	asrs	r0, r0, #8
     c2c:	d422      	bmi.n	c74 <MPSL_IRQ_RADIO_Handler+0x3fc>
     c2e:	89c8      	ldrh	r0, [r1, #14]
     c30:	b360      	cbz	r0, c8c <MPSL_IRQ_RADIO_Handler+0x414>
     c32:	89e0      	ldrh	r0, [r4, #14]
     c34:	bb50      	cbnz	r0, c8c <MPSL_IRQ_RADIO_Handler+0x414>
     c36:	f8d4 a000 	ldr.w	sl, [r4]
     c3a:	f002 ff47 	bl	3acc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     c3e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     c42:	bf08      	it	eq
     c44:	200d      	moveq	r0, #13
     c46:	d00b      	beq.n	c60 <MPSL_IRQ_RADIO_Handler+0x3e8>
     c48:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     c4c:	3856      	subs	r0, #86	; 0x56
     c4e:	bf08      	it	eq
     c50:	201c      	moveq	r0, #28
     c52:	d005      	beq.n	c60 <MPSL_IRQ_RADIO_Handler+0x3e8>
     c54:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     c58:	389f      	subs	r0, #159	; 0x9f
     c5a:	bf14      	ite	ne
     c5c:	2000      	movne	r0, #0
     c5e:	2032      	moveq	r0, #50	; 0x32
     c60:	1c41      	adds	r1, r0, #1
     c62:	eba9 000a 	sub.w	r0, r9, sl
     c66:	0200      	lsls	r0, r0, #8
     c68:	17c2      	asrs	r2, r0, #31
     c6a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     c6e:	1200      	asrs	r0, r0, #8
     c70:	4288      	cmp	r0, r1
     c72:	da0b      	bge.n	c8c <MPSL_IRQ_RADIO_Handler+0x414>
     c74:	f888 5000 	strb.w	r5, [r8]
     c78:	7e38      	ldrb	r0, [r7, #24]
     c7a:	7c21      	ldrb	r1, [r4, #16]
     c7c:	4288      	cmp	r0, r1
     c7e:	f67f af0d 	bls.w	a9c <MPSL_IRQ_RADIO_Handler+0x224>
     c82:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     c86:	7845      	ldrb	r5, [r0, #1]
     c88:	2d20      	cmp	r5, #32
     c8a:	d1bf      	bne.n	c0c <MPSL_IRQ_RADIO_Handler+0x394>
     c8c:	b011      	add	sp, #68	; 0x44
     c8e:	2001      	movs	r0, #1
     c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c94:	20000e54 	.word	0x20000e54
     c98:	20000a54 	.word	0x20000a54
     c9c:	20000dd4 	.word	0x20000dd4
     ca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ca4:	460f      	mov	r7, r1
     ca6:	4606      	mov	r6, r0
     ca8:	eb01 0047 	add.w	r0, r1, r7, lsl #1
     cac:	494b      	ldr	r1, [pc, #300]	; (ddc <MPSL_IRQ_RADIO_Handler+0x564>)
     cae:	4699      	mov	r9, r3
     cb0:	4408      	add	r0, r1
     cb2:	4692      	mov	sl, r2
     cb4:	f890 4020 	ldrb.w	r4, [r0, #32]
     cb8:	2020      	movs	r0, #32
     cba:	7010      	strb	r0, [r2, #0]
     cbc:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
     cc0:	2c20      	cmp	r4, #32
     cc2:	bf1c      	itt	ne
     cc4:	4846      	ldrne	r0, [pc, #280]	; (de0 <MPSL_IRQ_RADIO_Handler+0x568>)
     cc6:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     cca:	d038      	beq.n	d3e <MPSL_IRQ_RADIO_Handler+0x4c6>
     ccc:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     cd0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
     cd4:	f100 0108 	add.w	r1, r0, #8
     cd8:	68c0      	ldr	r0, [r0, #12]
     cda:	6835      	ldr	r5, [r6, #0]
     cdc:	1a28      	subs	r0, r5, r0
     cde:	0200      	lsls	r0, r0, #8
     ce0:	17c2      	asrs	r2, r0, #31
     ce2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     ce6:	1200      	asrs	r0, r0, #8
     ce8:	d429      	bmi.n	d3e <MPSL_IRQ_RADIO_Handler+0x4c6>
     cea:	89f0      	ldrh	r0, [r6, #14]
     cec:	b300      	cbz	r0, d30 <MPSL_IRQ_RADIO_Handler+0x4b8>
     cee:	89c8      	ldrh	r0, [r1, #14]
     cf0:	b9f0      	cbnz	r0, d30 <MPSL_IRQ_RADIO_Handler+0x4b8>
     cf2:	6808      	ldr	r0, [r1, #0]
     cf4:	9000      	str	r0, [sp, #0]
     cf6:	f002 fee9 	bl	3acc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     cfa:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     cfe:	bf08      	it	eq
     d00:	200d      	moveq	r0, #13
     d02:	d00b      	beq.n	d1c <MPSL_IRQ_RADIO_Handler+0x4a4>
     d04:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     d08:	3856      	subs	r0, #86	; 0x56
     d0a:	bf08      	it	eq
     d0c:	201c      	moveq	r0, #28
     d0e:	d005      	beq.n	d1c <MPSL_IRQ_RADIO_Handler+0x4a4>
     d10:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     d14:	389f      	subs	r0, #159	; 0x9f
     d16:	bf14      	ite	ne
     d18:	2000      	movne	r0, #0
     d1a:	2032      	moveq	r0, #50	; 0x32
     d1c:	1c41      	adds	r1, r0, #1
     d1e:	9800      	ldr	r0, [sp, #0]
     d20:	1a28      	subs	r0, r5, r0
     d22:	0200      	lsls	r0, r0, #8
     d24:	17c2      	asrs	r2, r0, #31
     d26:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d2a:	1200      	asrs	r0, r0, #8
     d2c:	4288      	cmp	r0, r1
     d2e:	db06      	blt.n	d3e <MPSL_IRQ_RADIO_Handler+0x4c6>
     d30:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
     d34:	f88a 4000 	strb.w	r4, [sl]
     d38:	7844      	ldrb	r4, [r0, #1]
     d3a:	2c20      	cmp	r4, #32
     d3c:	d1c6      	bne.n	ccc <MPSL_IRQ_RADIO_Handler+0x454>
     d3e:	f89a 0000 	ldrb.w	r0, [sl]
     d42:	f889 0000 	strb.w	r0, [r9]
     d46:	2c20      	cmp	r4, #32
     d48:	bf1c      	itt	ne
     d4a:	4825      	ldrne	r0, [pc, #148]	; (de0 <MPSL_IRQ_RADIO_Handler+0x568>)
     d4c:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
     d50:	d040      	beq.n	dd4 <MPSL_IRQ_RADIO_Handler+0x55c>
     d52:	bf00      	nop
     d54:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     d58:	eb08 0780 	add.w	r7, r8, r0, lsl #2
     d5c:	6870      	ldr	r0, [r6, #4]
     d5e:	68bd      	ldr	r5, [r7, #8]
     d60:	f107 0108 	add.w	r1, r7, #8
     d64:	1a28      	subs	r0, r5, r0
     d66:	0200      	lsls	r0, r0, #8
     d68:	17c2      	asrs	r2, r0, #31
     d6a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d6e:	1200      	asrs	r0, r0, #8
     d70:	d422      	bmi.n	db8 <MPSL_IRQ_RADIO_Handler+0x540>
     d72:	89c8      	ldrh	r0, [r1, #14]
     d74:	b370      	cbz	r0, dd4 <MPSL_IRQ_RADIO_Handler+0x55c>
     d76:	89f0      	ldrh	r0, [r6, #14]
     d78:	bb60      	cbnz	r0, dd4 <MPSL_IRQ_RADIO_Handler+0x55c>
     d7a:	f8d6 b000 	ldr.w	fp, [r6]
     d7e:	f002 fea5 	bl	3acc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     d82:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     d86:	bf08      	it	eq
     d88:	200d      	moveq	r0, #13
     d8a:	d00b      	beq.n	da4 <MPSL_IRQ_RADIO_Handler+0x52c>
     d8c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     d90:	3856      	subs	r0, #86	; 0x56
     d92:	bf08      	it	eq
     d94:	201c      	moveq	r0, #28
     d96:	d005      	beq.n	da4 <MPSL_IRQ_RADIO_Handler+0x52c>
     d98:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     d9c:	389f      	subs	r0, #159	; 0x9f
     d9e:	bf14      	ite	ne
     da0:	2000      	movne	r0, #0
     da2:	2032      	moveq	r0, #50	; 0x32
     da4:	1c41      	adds	r1, r0, #1
     da6:	eba5 000b 	sub.w	r0, r5, fp
     daa:	0200      	lsls	r0, r0, #8
     dac:	17c2      	asrs	r2, r0, #31
     dae:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     db2:	1200      	asrs	r0, r0, #8
     db4:	4288      	cmp	r0, r1
     db6:	da0d      	bge.n	dd4 <MPSL_IRQ_RADIO_Handler+0x55c>
     db8:	f889 4000 	strb.w	r4, [r9]
     dbc:	7e38      	ldrb	r0, [r7, #24]
     dbe:	7c31      	ldrb	r1, [r6, #16]
     dc0:	4288      	cmp	r0, r1
     dc2:	d802      	bhi.n	dca <MPSL_IRQ_RADIO_Handler+0x552>
     dc4:	2000      	movs	r0, #0
     dc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dca:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
     dce:	7844      	ldrb	r4, [r0, #1]
     dd0:	2c20      	cmp	r4, #32
     dd2:	d1bf      	bne.n	d54 <MPSL_IRQ_RADIO_Handler+0x4dc>
     dd4:	2001      	movs	r0, #1
     dd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dda:	0000      	.short	0x0000
     ddc:	20000e54 	.word	0x20000e54
     de0:	20000dd4 	.word	0x20000dd4
     de4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     de8:	b098      	sub	sp, #96	; 0x60
     dea:	4615      	mov	r5, r2
     dec:	468b      	mov	fp, r1
     dee:	f002 fa21 	bl	3234 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     df2:	4604      	mov	r4, r0
     df4:	f002 fc9c 	bl	3730 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     df8:	4606      	mov	r6, r0
     dfa:	f1bb 0f01 	cmp.w	fp, #1
     dfe:	bf18      	it	ne
     e00:	f1bb 0f02 	cmpne.w	fp, #2
     e04:	d005      	beq.n	e12 <MPSL_IRQ_RADIO_Handler+0x59a>
     e06:	f640 1192 	movw	r1, #2450	; 0x992
     e0a:	f04f 0070 	mov.w	r0, #112	; 0x70
     e0e:	f003 f807 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e12:	49ff      	ldr	r1, [pc, #1020]	; (1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>)
     e14:	2001      	movs	r0, #1
     e16:	6008      	str	r0, [r1, #0]
     e18:	49fe      	ldr	r1, [pc, #1016]	; (1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>)
     e1a:	6889      	ldr	r1, [r1, #8]
     e1c:	6008      	str	r0, [r1, #0]
     e1e:	2000      	movs	r0, #0
     e20:	f88d 0056 	strb.w	r0, [sp, #86]	; 0x56
     e24:	900e      	str	r0, [sp, #56]	; 0x38
     e26:	1e40      	subs	r0, r0, #1
     e28:	900f      	str	r0, [sp, #60]	; 0x3c
     e2a:	49fb      	ldr	r1, [pc, #1004]	; (1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>)
     e2c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     e30:	eb01 0180 	add.w	r1, r1, r0, lsl #2
     e34:	e9d1 0c02 	ldrd	r0, ip, [r1, #8]
     e38:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     e3c:	e9cd 0c10 	strd	r0, ip, [sp, #64]	; 0x40
     e40:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
     e44:	6989      	ldr	r1, [r1, #24]
     e46:	9114      	str	r1, [sp, #80]	; 0x50
     e48:	f00a fecb 	bl	bbe2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     e4c:	4601      	mov	r1, r0
     e4e:	f8bd 804e 	ldrh.w	r8, [sp, #78]	; 0x4e
     e52:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     e56:	4bf1      	ldr	r3, [pc, #964]	; (121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>)
     e58:	4440      	add	r0, r8
     e5a:	1c42      	adds	r2, r0, #1
     e5c:	1888      	adds	r0, r1, r2
     e5e:	4299      	cmp	r1, r3
     e60:	d84f      	bhi.n	f02 <MPSL_IRQ_RADIO_Handler+0x68a>
     e62:	4def      	ldr	r5, [pc, #956]	; (1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>)
     e64:	42aa      	cmp	r2, r5
     e66:	dc53      	bgt.n	f10 <MPSL_IRQ_RADIO_Handler+0x698>
     e68:	4269      	negs	r1, r5
     e6a:	428a      	cmp	r2, r1
     e6c:	db58      	blt.n	f20 <MPSL_IRQ_RADIO_Handler+0x6a8>
     e6e:	1c59      	adds	r1, r3, #1
     e70:	4281      	cmp	r1, r0
     e72:	bfdc      	itt	le
     e74:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     e78:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     e7c:	dd05      	ble.n	e8a <MPSL_IRQ_RADIO_Handler+0x612>
     e7e:	2800      	cmp	r0, #0
     e80:	bfbc      	itt	lt
     e82:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     e86:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     e8a:	900c      	str	r0, [sp, #48]	; 0x30
     e8c:	48e5      	ldr	r0, [pc, #916]	; (1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>)
     e8e:	f1b8 0f00 	cmp.w	r8, #0
     e92:	8b80      	ldrh	r0, [r0, #28]
     e94:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
     e98:	bf04      	itt	eq
     e9a:	2000      	moveq	r0, #0
     e9c:	900b      	streq	r0, [sp, #44]	; 0x2c
     e9e:	d00b      	beq.n	eb8 <MPSL_IRQ_RADIO_Handler+0x640>
     ea0:	2001      	movs	r0, #1
     ea2:	900b      	str	r0, [sp, #44]	; 0x2c
     ea4:	48df      	ldr	r0, [pc, #892]	; (1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>)
     ea6:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
     eaa:	b928      	cbnz	r0, eb8 <MPSL_IRQ_RADIO_Handler+0x640>
     eac:	f002 ff40 	bl	3d30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     eb0:	2800      	cmp	r0, #0
     eb2:	bf08      	it	eq
     eb4:	2701      	moveq	r7, #1
     eb6:	d000      	beq.n	eba <MPSL_IRQ_RADIO_Handler+0x642>
     eb8:	2700      	movs	r7, #0
     eba:	f002 fe07 	bl	3acc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     ebe:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     ec2:	bf08      	it	eq
     ec4:	200d      	moveq	r0, #13
     ec6:	d00b      	beq.n	ee0 <MPSL_IRQ_RADIO_Handler+0x668>
     ec8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     ecc:	3856      	subs	r0, #86	; 0x56
     ece:	bf08      	it	eq
     ed0:	201c      	moveq	r0, #28
     ed2:	d005      	beq.n	ee0 <MPSL_IRQ_RADIO_Handler+0x668>
     ed4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     ed8:	389f      	subs	r0, #159	; 0x9f
     eda:	bf14      	ite	ne
     edc:	2000      	movne	r0, #0
     ede:	2032      	moveq	r0, #50	; 0x32
     ee0:	f04f 0900 	mov.w	r9, #0
     ee4:	46ca      	mov	sl, r9
     ee6:	9009      	str	r0, [sp, #36]	; 0x24
     ee8:	4546      	cmp	r6, r8
     eea:	d937      	bls.n	f5c <MPSL_IRQ_RADIO_Handler+0x6e4>
     eec:	990c      	ldr	r1, [sp, #48]	; 0x30
     eee:	f8df 932c 	ldr.w	r9, [pc, #812]	; 121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>
     ef2:	ea6f 0c06 	mvn.w	ip, r6
     ef6:	466b      	mov	r3, sp
     ef8:	aa16      	add	r2, sp, #88	; 0x58
     efa:	eb01 000c 	add.w	r0, r1, ip
     efe:	4549      	cmp	r1, r9
     f00:	d904      	bls.n	f0c <MPSL_IRQ_RADIO_Handler+0x694>
     f02:	f240 519e 	movw	r1, #1438	; 0x59e
     f06:	2070      	movs	r0, #112	; 0x70
     f08:	f002 ff8a 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f0c:	45ac      	cmp	ip, r5
     f0e:	dd04      	ble.n	f1a <MPSL_IRQ_RADIO_Handler+0x6a2>
     f10:	f240 519f 	movw	r1, #1439	; 0x59f
     f14:	2070      	movs	r0, #112	; 0x70
     f16:	f002 ff83 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f1a:	49c3      	ldr	r1, [pc, #780]	; (1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>)
     f1c:	458c      	cmp	ip, r1
     f1e:	da04      	bge.n	f2a <MPSL_IRQ_RADIO_Handler+0x6b2>
     f20:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
     f24:	2070      	movs	r0, #112	; 0x70
     f26:	f002 ff7b 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f2a:	49c0      	ldr	r1, [pc, #768]	; (122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>)
     f2c:	4281      	cmp	r1, r0
     f2e:	bfdc      	itt	le
     f30:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     f34:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     f38:	dd05      	ble.n	f46 <MPSL_IRQ_RADIO_Handler+0x6ce>
     f3a:	2800      	cmp	r0, #0
     f3c:	bfbc      	itt	lt
     f3e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     f42:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     f46:	4619      	mov	r1, r3
     f48:	f001 fee2 	bl	2d10 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     f4c:	9800      	ldr	r0, [sp, #0]
     f4e:	9910      	ldr	r1, [sp, #64]	; 0x40
     f50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f54:	9000      	str	r0, [sp, #0]
     f56:	1a08      	subs	r0, r1, r0
     f58:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
     f5c:	2f00      	cmp	r7, #0
     f5e:	bf18      	it	ne
     f60:	f8dd a024 	ldrne.w	sl, [sp, #36]	; 0x24
     f64:	d105      	bne.n	f72 <MPSL_IRQ_RADIO_Handler+0x6fa>
     f66:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
     f6a:	2800      	cmp	r0, #0
     f6c:	bf18      	it	ne
     f6e:	f04f 0a02 	movne.w	sl, #2
     f72:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     f76:	d008      	beq.n	f8a <MPSL_IRQ_RADIO_Handler+0x712>
     f78:	9810      	ldr	r0, [sp, #64]	; 0x40
     f7a:	1b00      	subs	r0, r0, r4
     f7c:	0200      	lsls	r0, r0, #8
     f7e:	17c1      	asrs	r1, r0, #31
     f80:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     f84:	1200      	asrs	r0, r0, #8
     f86:	2801      	cmp	r0, #1
     f88:	da02      	bge.n	f90 <MPSL_IRQ_RADIO_Handler+0x718>
     f8a:	2003      	movs	r0, #3
     f8c:	9d18      	ldr	r5, [sp, #96]	; 0x60
     f8e:	e00d      	b.n	fac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0xc>
     f90:	b157      	cbz	r7, fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     f92:	48a4      	ldr	r0, [pc, #656]	; (1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>)
     f94:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
     f98:	b130      	cbz	r0, fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     f9a:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
     f9e:	f110 0a00 	adds.w	sl, r0, #0
     fa2:	bf18      	it	ne
     fa4:	f04f 0a02 	movne.w	sl, #2
     fa8:	4625      	mov	r5, r4
     faa:	2000      	movs	r0, #0
     fac:	4482      	add	sl, r0
     fae:	9810      	ldr	r0, [sp, #64]	; 0x40
     fb0:	eba0 0009 	sub.w	r0, r0, r9
     fb4:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     fb8:	1e50      	subs	r0, r2, #1
     fba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     fbe:	1b41      	subs	r1, r0, r5
     fc0:	0209      	lsls	r1, r1, #8
     fc2:	17cb      	asrs	r3, r1, #31
     fc4:	eb01 6113 	add.w	r1, r1, r3, lsr #24
     fc8:	1209      	asrs	r1, r1, #8
     fca:	4551      	cmp	r1, sl
     fcc:	db04      	blt.n	fd8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x38>
     fce:	f1b9 0f00 	cmp.w	r9, #0
     fd2:	bf18      	it	ne
     fd4:	9210      	strne	r2, [sp, #64]	; 0x40
     fd6:	e02d      	b.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
     fd8:	f1b9 0f00 	cmp.w	r9, #0
     fdc:	d005      	beq.n	fea <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4a>
     fde:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
     fe2:	b920      	cbnz	r0, fee <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4e>
     fe4:	f002 fb9a 	bl	371c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
     fe8:	b108      	cbz	r0, fee <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4e>
     fea:	b9af      	cbnz	r7, 1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
     fec:	e00c      	b.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
     fee:	b92f      	cbnz	r7, ffc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x5c>
     ff0:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
     ff4:	2800      	cmp	r0, #0
     ff6:	bf18      	it	ne
     ff8:	f1aa 0a02 	subne.w	sl, sl, #2
     ffc:	f04f 0900 	mov.w	r9, #0
    1000:	f88d 9054 	strb.w	r9, [sp, #84]	; 0x54
    1004:	464e      	mov	r6, r9
    1006:	e007      	b.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
    1008:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    100c:	b120      	cbz	r0, 1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
    100e:	2000      	movs	r0, #0
    1010:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    1014:	f1aa 0a02 	sub.w	sl, sl, #2
    1018:	9810      	ldr	r0, [sp, #64]	; 0x40
    101a:	eba0 0009 	sub.w	r0, r0, r9
    101e:	1e40      	subs	r0, r0, #1
    1020:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1024:	1b41      	subs	r1, r0, r5
    1026:	0209      	lsls	r1, r1, #8
    1028:	17ca      	asrs	r2, r1, #31
    102a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    102e:	1209      	asrs	r1, r1, #8
    1030:	4551      	cmp	r1, sl
    1032:	db7c      	blt.n	112e <CONFIG_FPROTECT_BLOCK_SIZE+0x12e>
    1034:	970a      	str	r7, [sp, #40]	; 0x28
    1036:	4605      	mov	r5, r0
    1038:	f04f 0900 	mov.w	r9, #0
    103c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    103e:	f001 ffd1 	bl	2fe4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1042:	1a28      	subs	r0, r5, r0
    1044:	0200      	lsls	r0, r0, #8
    1046:	17c1      	asrs	r1, r0, #31
    1048:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    104c:	ea4f 2a20 	mov.w	sl, r0, asr #8
    1050:	f002 fd3c 	bl	3acc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1054:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1058:	bf08      	it	eq
    105a:	200d      	moveq	r0, #13
    105c:	d00b      	beq.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    105e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1062:	3856      	subs	r0, #86	; 0x56
    1064:	bf08      	it	eq
    1066:	201c      	moveq	r0, #28
    1068:	d005      	beq.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    106a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    106e:	389f      	subs	r0, #159	; 0x9f
    1070:	bf14      	ite	ne
    1072:	2000      	movne	r0, #0
    1074:	2032      	moveq	r0, #50	; 0x32
    1076:	300b      	adds	r0, #11
    1078:	4582      	cmp	sl, r0
    107a:	da20      	bge.n	10be <CONFIG_FPROTECT_BLOCK_SIZE+0xbe>
    107c:	f1bb 0f01 	cmp.w	fp, #1
    1080:	d002      	beq.n	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
    1082:	980a      	ldr	r0, [sp, #40]	; 0x28
    1084:	b140      	cbz	r0, 1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    1086:	e012      	b.n	10ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>
    1088:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    108c:	d11c      	bne.n	10c8 <CONFIG_FPROTECT_BLOCK_SIZE+0xc8>
    108e:	f640 1113 	movw	r1, #2323	; 0x913
    1092:	2070      	movs	r0, #112	; 0x70
    1094:	f002 fec4 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1098:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    109c:	d007      	beq.n	10ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>
    109e:	1b60      	subs	r0, r4, r5
    10a0:	0200      	lsls	r0, r0, #8
    10a2:	17c1      	asrs	r1, r0, #31
    10a4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    10a8:	1200      	asrs	r0, r0, #8
    10aa:	2804      	cmp	r0, #4
    10ac:	dd04      	ble.n	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
    10ae:	462c      	mov	r4, r5
    10b0:	4620      	mov	r0, r4
    10b2:	f001 ffbd 	bl	3030 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    10b6:	e007      	b.n	10c8 <CONFIG_FPROTECT_BLOCK_SIZE+0xc8>
    10b8:	2800      	cmp	r0, #0
    10ba:	dc64      	bgt.n	1186 <CONFIG_FPROTECT_BLOCK_SIZE+0x186>
    10bc:	e004      	b.n	10c8 <CONFIG_FPROTECT_BLOCK_SIZE+0xc8>
    10be:	462c      	mov	r4, r5
    10c0:	4620      	mov	r0, r4
    10c2:	f001 ffb5 	bl	3030 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    10c6:	46b9      	mov	r9, r7
    10c8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    10cc:	d056      	beq.n	117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>
    10ce:	9810      	ldr	r0, [sp, #64]	; 0x40
    10d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    10d2:	1b00      	subs	r0, r0, r4
    10d4:	1b12      	subs	r2, r2, r4
    10d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    10da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    10de:	2801      	cmp	r0, #1
    10e0:	d351      	bcc.n	1186 <CONFIG_FPROTECT_BLOCK_SIZE+0x186>
    10e2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    10e6:	bf98      	it	ls
    10e8:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    10ec:	d84b      	bhi.n	1186 <CONFIG_FPROTECT_BLOCK_SIZE+0x186>
    10ee:	4620      	mov	r0, r4
    10f0:	f00a fd77 	bl	bbe2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    10f4:	990c      	ldr	r1, [sp, #48]	; 0x30
    10f6:	4a4a      	ldr	r2, [pc, #296]	; (1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>)
    10f8:	1a0d      	subs	r5, r1, r0
    10fa:	f04f 0a00 	mov.w	sl, #0
    10fe:	1aaa      	subs	r2, r5, r2
    1100:	f17a 0200 	sbcs.w	r2, sl, #0
    1104:	d318      	bcc.n	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
    1106:	4b46      	ldr	r3, [pc, #280]	; (1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>)
    1108:	1a42      	subs	r2, r0, r1
    110a:	1ad3      	subs	r3, r2, r3
    110c:	f17a 0300 	sbcs.w	r3, sl, #0
    1110:	d312      	bcc.n	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
    1112:	4b42      	ldr	r3, [pc, #264]	; (121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>)
    1114:	42ab      	cmp	r3, r5
    1116:	bf3e      	ittt	cc
    1118:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    111c:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    1120:	1845      	addcc	r5, r0, r1
    1122:	d309      	bcc.n	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
    1124:	4293      	cmp	r3, r2
    1126:	d232      	bcs.n	118e <CONFIG_FPROTECT_BLOCK_SIZE+0x18e>
    1128:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    112c:	e000      	b.n	1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>
    112e:	e02a      	b.n	1186 <CONFIG_FPROTECT_BLOCK_SIZE+0x186>
    1130:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    1134:	4408      	add	r0, r1
    1136:	4245      	negs	r5, r0
    1138:	4f3a      	ldr	r7, [pc, #232]	; (1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>)
    113a:	7fb8      	ldrb	r0, [r7, #30]
    113c:	b360      	cbz	r0, 1198 <CONFIG_FPROTECT_BLOCK_SIZE+0x198>
    113e:	bf00      	nop
    1140:	f1bb 0f01 	cmp.w	fp, #1
    1144:	d005      	beq.n	1152 <CONFIG_FPROTECT_BLOCK_SIZE+0x152>
    1146:	2002      	movs	r0, #2
    1148:	f002 f9ae 	bl	34a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    114c:	2001      	movs	r0, #1
    114e:	f002 f9ab 	bl	34a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1152:	45b0      	cmp	r8, r6
    1154:	d22c      	bcs.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
    1156:	eba5 0106 	sub.w	r1, r5, r6
    115a:	f04f 0002 	mov.w	r0, #2
    115e:	f002 f8ed 	bl	333c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1162:	b390      	cbz	r0, 11ca <CONFIG_FPROTECT_BLOCK_SIZE+0x1ca>
    1164:	f1b8 0f00 	cmp.w	r8, #0
    1168:	bf1c      	itt	ne
    116a:	eba5 0108 	subne.w	r1, r5, r8
    116e:	2001      	movne	r0, #1
    1170:	d034      	beq.n	11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
    1172:	bf00      	nop
    1174:	f002 f8e2 	bl	333c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1178:	b338      	cbz	r0, 11ca <CONFIG_FPROTECT_BLOCK_SIZE+0x1ca>
    117a:	e02f      	b.n	11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
    117c:	f640 2126 	movw	r1, #2598	; 0xa26
    1180:	2070      	movs	r0, #112	; 0x70
    1182:	f002 fe4d 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1186:	b01b      	add	sp, #108	; 0x6c
    1188:	2000      	movs	r0, #0
    118a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    118e:	f640 21fa 	movw	r1, #2810	; 0xafa
    1192:	2070      	movs	r0, #112	; 0x70
    1194:	f002 fe44 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1198:	45b0      	cmp	r8, r6
    119a:	bf34      	ite	cc
    119c:	4630      	movcc	r0, r6
    119e:	4640      	movcs	r0, r8
    11a0:	301e      	adds	r0, #30
    11a2:	42a8      	cmp	r0, r5
    11a4:	dbcc      	blt.n	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
    11a6:	f640 213a 	movw	r1, #2618	; 0xa3a
    11aa:	2070      	movs	r0, #112	; 0x70
    11ac:	f002 fe38 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11b0:	d90c      	bls.n	11cc <CONFIG_FPROTECT_BLOCK_SIZE+0x1cc>
    11b2:	eba5 0108 	sub.w	r1, r5, r8
    11b6:	2001      	movs	r0, #1
    11b8:	f002 f8c0 	bl	333c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    11bc:	b128      	cbz	r0, 11ca <CONFIG_FPROTECT_BLOCK_SIZE+0x1ca>
    11be:	2e00      	cmp	r6, #0
    11c0:	bf1c      	itt	ne
    11c2:	1ba9      	subne	r1, r5, r6
    11c4:	2002      	movne	r0, #2
    11c6:	d009      	beq.n	11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
    11c8:	e7d4      	b.n	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    11ca:	e041      	b.n	1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
    11cc:	ea56 0008 	orrs.w	r0, r6, r8
    11d0:	d004      	beq.n	11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
    11d2:	f640 1176 	movw	r1, #2422	; 0x976
    11d6:	2070      	movs	r0, #112	; 0x70
    11d8:	f002 fe22 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11dc:	4629      	mov	r1, r5
    11de:	2000      	movs	r0, #0
    11e0:	f002 f8ac 	bl	333c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    11e4:	b3a0      	cbz	r0, 1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
    11e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    11e8:	2601      	movs	r6, #1
    11ea:	2800      	cmp	r0, #0
    11ec:	bf04      	itt	eq
    11ee:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    11f2:	2800      	cmpeq	r0, #0
    11f4:	d002      	beq.n	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
    11f6:	f1b9 0f00 	cmp.w	r9, #0
    11fa:	d034      	beq.n	1266 <CONFIG_FPROTECT_BLOCK_SIZE+0x266>
    11fc:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    1200:	b118      	cbz	r0, 120a <CONFIG_FPROTECT_BLOCK_SIZE+0x20a>
    1202:	f002 fc69 	bl	3ad8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1206:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    120a:	f1b9 0f00 	cmp.w	r9, #0
    120e:	e00f      	b.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    1210:	40000508 	.word	0x40000508
    1214:	20000038 	.word	0x20000038
    1218:	20000a54 	.word	0x20000a54
    121c:	1e847fff 	.word	0x1e847fff
    1220:	0f424000 	.word	0x0f424000
    1224:	20000e54 	.word	0x20000e54
    1228:	f0bdc000 	.word	0xf0bdc000
    122c:	1e848000 	.word	0x1e848000
    1230:	d01c      	beq.n	126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>
    1232:	9809      	ldr	r0, [sp, #36]	; 0x24
    1234:	1a20      	subs	r0, r4, r0
    1236:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    123a:	2005      	movs	r0, #5
    123c:	f002 f87e 	bl	333c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1240:	b360      	cbz	r0, 129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>
    1242:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    1246:	2800      	cmp	r0, #0
    1248:	bf08      	it	eq
    124a:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    124e:	e015      	b.n	127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
    1250:	e7ff      	b.n	1252 <CONFIG_FPROTECT_BLOCK_SIZE+0x252>
    1252:	2002      	movs	r0, #2
    1254:	f002 f928 	bl	34a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1258:	2001      	movs	r0, #1
    125a:	f002 f925 	bl	34a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    125e:	b01b      	add	sp, #108	; 0x6c
    1260:	2000      	movs	r0, #0
    1262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1266:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    126a:	b190      	cbz	r0, 1292 <CONFIG_FPROTECT_BLOCK_SIZE+0x292>
    126c:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    1270:	b120      	cbz	r0, 127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
    1272:	2005      	movs	r0, #5
    1274:	f002 f918 	bl	34a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1278:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    127c:	eba5 0008 	sub.w	r0, r5, r8
    1280:	f1a0 0119 	sub.w	r1, r0, #25
    1284:	2900      	cmp	r1, #0
    1286:	dc0e      	bgt.n	12a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a6>
    1288:	f640 2163 	movw	r1, #2659	; 0xa63
    128c:	2070      	movs	r0, #112	; 0x70
    128e:	f002 fdc7 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1292:	f002 fc3d 	bl	3b10 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1296:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    129a:	e7b6      	b.n	120a <CONFIG_FPROTECT_BLOCK_SIZE+0x20a>
    129c:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    12a0:	2070      	movs	r0, #112	; 0x70
    12a2:	f002 fdbd 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12a6:	2003      	movs	r0, #3
    12a8:	f002 f848 	bl	333c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    12ac:	b1c0      	cbz	r0, 12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>
    12ae:	480f      	ldr	r0, [pc, #60]	; (12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>)
    12b0:	6880      	ldr	r0, [r0, #8]
    12b2:	f8c0 a000 	str.w	sl, [r0]
    12b6:	480e      	ldr	r0, [pc, #56]	; (12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>)
    12b8:	f8c0 a000 	str.w	sl, [r0]
    12bc:	ac0e      	add	r4, sp, #56	; 0x38
    12be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    12c2:	6038      	str	r0, [r7, #0]
    12c4:	6079      	str	r1, [r7, #4]
    12c6:	60ba      	str	r2, [r7, #8]
    12c8:	60fb      	str	r3, [r7, #12]
    12ca:	ac12      	add	r4, sp, #72	; 0x48
    12cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    12d0:	6138      	str	r0, [r7, #16]
    12d2:	6179      	str	r1, [r7, #20]
    12d4:	61ba      	str	r2, [r7, #24]
    12d6:	61fb      	str	r3, [r7, #28]
    12d8:	b01b      	add	sp, #108	; 0x6c
    12da:	2001      	movs	r0, #1
    12dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12e0:	f640 216b 	movw	r1, #2667	; 0xa6b
    12e4:	2070      	movs	r0, #112	; 0x70
    12e6:	f002 fd9b 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12ea:	0000      	.short	0x0000
    12ec:	20000038 	.word	0x20000038
    12f0:	40000508 	.word	0x40000508
    12f4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12f8:	4614      	mov	r4, r2
    12fa:	460d      	mov	r5, r1
    12fc:	f04f 0a00 	mov.w	sl, #0
    1300:	890a      	ldrh	r2, [r1, #8]
    1302:	4651      	mov	r1, sl
    1304:	f362 411f 	bfi	r1, r2, #16, #16
    1308:	7aaa      	ldrb	r2, [r5, #10]
    130a:	46d1      	mov	r9, sl
    130c:	f362 0907 	bfi	r9, r2, #0, #8
    1310:	7aea      	ldrb	r2, [r5, #11]
    1312:	4606      	mov	r6, r0
    1314:	f362 290f 	bfi	r9, r2, #8, #8
    1318:	782a      	ldrb	r2, [r5, #0]
    131a:	b083      	sub	sp, #12
    131c:	6840      	ldr	r0, [r0, #4]
    131e:	f8c4 a000 	str.w	sl, [r4]
    1322:	f362 4917 	bfi	r9, r2, #16, #8
    1326:	f8c4 a004 	str.w	sl, [r4, #4]
    132a:	f8c4 9010 	str.w	r9, [r4, #16]
    132e:	e9c4 0102 	strd	r0, r1, [r4, #8]
    1332:	4f9d      	ldr	r7, [pc, #628]	; (15a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x220>)
    1334:	6870      	ldr	r0, [r6, #4]
    1336:	fba0 8907 	umull	r8, r9, r0, r7
    133a:	6830      	ldr	r0, [r6, #0]
    133c:	f00a fc51 	bl	bbe2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1340:	eb10 0108 	adds.w	r1, r0, r8
    1344:	eb4a 0209 	adc.w	r2, sl, r9
    1348:	7828      	ldrb	r0, [r5, #0]
    134a:	ea4f 0967 	mov.w	r9, r7, asr #1
    134e:	f1c9 0b00 	rsb	fp, r9, #0
    1352:	b170      	cbz	r0, 1372 <CONFIG_FPROTECT_BLOCK_SIZE+0x372>
    1354:	89e0      	ldrh	r0, [r4, #14]
    1356:	f894 8011 	ldrb.w	r8, [r4, #17]
    135a:	43c0      	mvns	r0, r0
    135c:	f8d5 a004 	ldr.w	sl, [r5, #4]
    1360:	f104 020c 	add.w	r2, r4, #12
    1364:	4548      	cmp	r0, r9
    1366:	dd7c      	ble.n	1462 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xda>
    1368:	f240 519f 	movw	r1, #1439	; 0x59f
    136c:	2070      	movs	r0, #112	; 0x70
    136e:	f002 fd57 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1372:	f8df c238 	ldr.w	ip, [pc, #568]	; 15ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x224>
    1376:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    137a:	eb11 0a0c 	adds.w	sl, r1, ip
    137e:	f142 0c00 	adc.w	ip, r2, #0
    1382:	ebb0 0a0a 	subs.w	sl, r0, sl
    1386:	eb73 0c0c 	sbcs.w	ip, r3, ip
    138a:	d272      	bcs.n	1472 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xea>
    138c:	1a41      	subs	r1, r0, r1
    138e:	eb73 0102 	sbcs.w	r1, r3, r2
    1392:	d36e      	bcc.n	1472 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xea>
    1394:	ebb0 0608 	subs.w	r6, r0, r8
    1398:	42b7      	cmp	r7, r6
    139a:	d82b      	bhi.n	13f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c>
    139c:	89e0      	ldrh	r0, [r4, #14]
    139e:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    13a2:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    13a6:	43c1      	mvns	r1, r0
    13a8:	4a81      	ldr	r2, [pc, #516]	; (15b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x228>)
    13aa:	eb08 0001 	add.w	r0, r8, r1
    13ae:	4542      	cmp	r2, r8
    13b0:	d32b      	bcc.n	140a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x82>
    13b2:	4549      	cmp	r1, r9
    13b4:	dcd8      	bgt.n	1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>
    13b6:	4559      	cmp	r1, fp
    13b8:	db66      	blt.n	1488 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x100>
    13ba:	4287      	cmp	r7, r0
    13bc:	bfdc      	itt	le
    13be:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    13c2:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    13c6:	dd05      	ble.n	13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
    13c8:	2800      	cmp	r0, #0
    13ca:	bfbc      	itt	lt
    13cc:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    13d0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    13d4:	466a      	mov	r2, sp
    13d6:	a901      	add	r1, sp, #4
    13d8:	f001 fc9a 	bl	2d10 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    13dc:	89e0      	ldrh	r0, [r4, #14]
    13de:	f89d 1000 	ldrb.w	r1, [sp]
    13e2:	1a30      	subs	r0, r6, r0
    13e4:	1a40      	subs	r0, r0, r1
    13e6:	1e40      	subs	r0, r0, #1
    13e8:	42b8      	cmp	r0, r7
    13ea:	d302      	bcc.n	13f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a>
    13ec:	68a0      	ldr	r0, [r4, #8]
    13ee:	1c40      	adds	r0, r0, #1
    13f0:	60a0      	str	r0, [r4, #8]
    13f2:	4646      	mov	r6, r8
    13f4:	89e0      	ldrh	r0, [r4, #14]
    13f6:	4b6e      	ldr	r3, [pc, #440]	; (15b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x228>)
    13f8:	43c1      	mvns	r1, r0
    13fa:	686d      	ldr	r5, [r5, #4]
    13fc:	f894 8011 	ldrb.w	r8, [r4, #17]
    1400:	1870      	adds	r0, r6, r1
    1402:	f104 020c 	add.w	r2, r4, #12
    1406:	429e      	cmp	r6, r3
    1408:	d904      	bls.n	1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>
    140a:	f240 519e 	movw	r1, #1438	; 0x59e
    140e:	2070      	movs	r0, #112	; 0x70
    1410:	f002 fd06 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1414:	4549      	cmp	r1, r9
    1416:	dca7      	bgt.n	1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>
    1418:	4559      	cmp	r1, fp
    141a:	db35      	blt.n	1488 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x100>
    141c:	4287      	cmp	r7, r0
    141e:	bfdc      	itt	le
    1420:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1424:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1428:	dd05      	ble.n	1436 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xae>
    142a:	2800      	cmp	r0, #0
    142c:	bfbc      	itt	lt
    142e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1432:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1436:	4621      	mov	r1, r4
    1438:	f001 fc6a 	bl	2d10 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    143c:	6820      	ldr	r0, [r4, #0]
    143e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1442:	1970      	adds	r0, r6, r5
    1444:	1c40      	adds	r0, r0, #1
    1446:	6021      	str	r1, [r4, #0]
    1448:	f1b8 0f00 	cmp.w	r8, #0
    144c:	bf08      	it	eq
    144e:	307a      	addeq	r0, #122	; 0x7a
    1450:	d004      	beq.n	145c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd4>
    1452:	f1b8 0f01 	cmp.w	r8, #1
    1456:	bf08      	it	eq
    1458:	3048      	addeq	r0, #72	; 0x48
    145a:	d13a      	bne.n	14d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14a>
    145c:	f001 fc3c 	bl	2cd8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1460:	e001      	b.n	1466 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xde>
    1462:	e00e      	b.n	1482 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfa>
    1464:	e005      	b.n	1472 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xea>
    1466:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    146a:	6060      	str	r0, [r4, #4]
    146c:	b007      	add	sp, #28
    146e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1472:	6830      	ldr	r0, [r6, #0]
    1474:	1e40      	subs	r0, r0, #1
    1476:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    147a:	6020      	str	r0, [r4, #0]
    147c:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    1480:	e7f3      	b.n	146a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe2>
    1482:	4601      	mov	r1, r0
    1484:	4558      	cmp	r0, fp
    1486:	da04      	bge.n	1492 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10a>
    1488:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    148c:	2070      	movs	r0, #112	; 0x70
    148e:	f002 fcc7 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1492:	4287      	cmp	r7, r0
    1494:	bfdc      	itt	le
    1496:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    149a:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    149e:	dd05      	ble.n	14ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124>
    14a0:	2800      	cmp	r0, #0
    14a2:	bfbc      	itt	lt
    14a4:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    14a8:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    14ac:	4621      	mov	r1, r4
    14ae:	f001 fc2f 	bl	2d10 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    14b2:	6820      	ldr	r0, [r4, #0]
    14b4:	f1b8 0f00 	cmp.w	r8, #0
    14b8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    14bc:	f10a 0001 	add.w	r0, sl, #1
    14c0:	6021      	str	r1, [r4, #0]
    14c2:	bf08      	it	eq
    14c4:	307a      	addeq	r0, #122	; 0x7a
    14c6:	d009      	beq.n	14dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x154>
    14c8:	f1b8 0f01 	cmp.w	r8, #1
    14cc:	bf08      	it	eq
    14ce:	3048      	addeq	r0, #72	; 0x48
    14d0:	d004      	beq.n	14dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x154>
    14d2:	f240 6139 	movw	r1, #1593	; 0x639
    14d6:	2070      	movs	r0, #112	; 0x70
    14d8:	f002 fca2 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14dc:	f001 fbfc 	bl	2cd8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    14e0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    14e4:	6061      	str	r1, [r4, #4]
    14e6:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    14ea:	aa01      	add	r2, sp, #4
    14ec:	4669      	mov	r1, sp
    14ee:	4648      	mov	r0, r9
    14f0:	6837      	ldr	r7, [r6, #0]
    14f2:	f001 fc0d 	bl	2d10 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    14f6:	f002 f91b 	bl	3730 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    14fa:	f001 fbed 	bl	2cd8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    14fe:	4680      	mov	r8, r0
    1500:	482c      	ldr	r0, [pc, #176]	; (15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>)
    1502:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    1506:	2920      	cmp	r1, #32
    1508:	d02a      	beq.n	1560 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d8>
    150a:	68c0      	ldr	r0, [r0, #12]
    150c:	1d40      	adds	r0, r0, #5
    150e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1512:	bf00      	nop
    1514:	e9d4 2100 	ldrd	r2, r1, [r4]
    1518:	1a89      	subs	r1, r1, r2
    151a:	4401      	add	r1, r0
    151c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1520:	e9c4 0100 	strd	r0, r1, [r4]
    1524:	6831      	ldr	r1, [r6, #0]
    1526:	4281      	cmp	r1, r0
    1528:	d902      	bls.n	1530 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a8>
    152a:	68a0      	ldr	r0, [r4, #8]
    152c:	1c40      	adds	r0, r0, #1
    152e:	60a0      	str	r0, [r4, #8]
    1530:	6832      	ldr	r2, [r6, #0]
    1532:	6928      	ldr	r0, [r5, #16]
    1534:	4621      	mov	r1, r4
    1536:	9b06      	ldr	r3, [sp, #24]
    1538:	f7ff f9fa 	bl	930 <MPSL_IRQ_RADIO_Handler+0xb8>
    153c:	2800      	cmp	r0, #0
    153e:	bf1c      	itt	ne
    1540:	b007      	addne	sp, #28
    1542:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1546:	e9d4 1000 	ldrd	r1, r0, [r4]
    154a:	1a40      	subs	r0, r0, r1
    154c:	6831      	ldr	r1, [r6, #0]
    154e:	6021      	str	r1, [r4, #0]
    1550:	6831      	ldr	r1, [r6, #0]
    1552:	4408      	add	r0, r1
    1554:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1558:	6060      	str	r0, [r4, #4]
    155a:	b007      	add	sp, #28
    155c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1560:	3709      	adds	r7, #9
    1562:	f1b9 0f00 	cmp.w	r9, #0
    1566:	d016      	beq.n	1596 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20e>
    1568:	f002 fbe2 	bl	3d30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    156c:	b998      	cbnz	r0, 1596 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20e>
    156e:	f002 faad 	bl	3acc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1572:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1576:	bf08      	it	eq
    1578:	200d      	moveq	r0, #13
    157a:	d00b      	beq.n	1594 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20c>
    157c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1580:	3856      	subs	r0, #86	; 0x56
    1582:	bf08      	it	eq
    1584:	201c      	moveq	r0, #28
    1586:	d005      	beq.n	1594 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20c>
    1588:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    158c:	389f      	subs	r0, #159	; 0x9f
    158e:	bf14      	ite	ne
    1590:	2000      	movne	r0, #0
    1592:	2032      	moveq	r0, #50	; 0x32
    1594:	4407      	add	r7, r0
    1596:	9800      	ldr	r0, [sp, #0]
    1598:	4580      	cmp	r8, r0
    159a:	bf84      	itt	hi
    159c:	eba8 0000 	subhi.w	r0, r8, r0
    15a0:	4407      	addhi	r7, r0
    15a2:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    15a6:	e7b5      	b.n	1514 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18c>
    15a8:	1e848000 	.word	0x1e848000
    15ac:	0f424000 	.word	0x0f424000
    15b0:	1e847fff 	.word	0x1e847fff
    15b4:	20000e54 	.word	0x20000e54
    15b8:	b570      	push	{r4, r5, r6, lr}
    15ba:	4d1e      	ldr	r5, [pc, #120]	; (1634 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ac>)
    15bc:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    15c0:	2820      	cmp	r0, #32
    15c2:	bf18      	it	ne
    15c4:	bd70      	popne	{r4, r5, r6, pc}
    15c6:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    15ca:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    15ce:	4428      	add	r0, r5
    15d0:	f890 4020 	ldrb.w	r4, [r0, #32]
    15d4:	2c20      	cmp	r4, #32
    15d6:	d027      	beq.n	1628 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a0>
    15d8:	4b17      	ldr	r3, [pc, #92]	; (1638 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b0>)
    15da:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    15de:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    15e2:	7849      	ldrb	r1, [r1, #1]
    15e4:	f880 1020 	strb.w	r1, [r0, #32]
    15e8:	20ff      	movs	r0, #255	; 0xff
    15ea:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    15ee:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    15f2:	4621      	mov	r1, r4
    15f4:	2002      	movs	r0, #2
    15f6:	f000 f891 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    15fa:	2000      	movs	r0, #0
    15fc:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    1600:	77a8      	strb	r0, [r5, #30]
    1602:	490e      	ldr	r1, [pc, #56]	; (163c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b4>)
    1604:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1608:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    160c:	7e00      	ldrb	r0, [r0, #24]
    160e:	2800      	cmp	r0, #0
    1610:	bf08      	it	eq
    1612:	f002 fd6f 	bleq	40f4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    1616:	2000      	movs	r0, #0
    1618:	4909      	ldr	r1, [pc, #36]	; (1640 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b8>)
    161a:	6849      	ldr	r1, [r1, #4]
    161c:	2900      	cmp	r1, #0
    161e:	bf08      	it	eq
    1620:	bd70      	popeq	{r4, r5, r6, pc}
    1622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1626:	4708      	bx	r1
    1628:	f240 3132 	movw	r1, #818	; 0x332
    162c:	2070      	movs	r0, #112	; 0x70
    162e:	f002 fbf7 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1632:	0000      	.short	0x0000
    1634:	20000e54 	.word	0x20000e54
    1638:	20000dd4 	.word	0x20000dd4
    163c:	20000a54 	.word	0x20000a54
    1640:	20000038 	.word	0x20000038
    1644:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1648:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 170c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x384>
    164c:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1650:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1654:	4440      	add	r0, r8
    1656:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    165a:	2c20      	cmp	r4, #32
    165c:	bf08      	it	eq
    165e:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1662:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1710 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x388>
    1666:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1714 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38c>
    166a:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    166e:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1672:	2607      	movs	r6, #7
    1674:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    1678:	2801      	cmp	r0, #1
    167a:	d00e      	beq.n	169a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x312>
    167c:	2804      	cmp	r0, #4
    167e:	bf08      	it	eq
    1680:	2602      	moveq	r6, #2
    1682:	d00a      	beq.n	169a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x312>
    1684:	2805      	cmp	r0, #5
    1686:	bf0c      	ite	eq
    1688:	2603      	moveq	r6, #3
    168a:	2806      	cmpne	r0, #6
    168c:	d005      	beq.n	169a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x312>
    168e:	f640 01dd 	movw	r1, #2269	; 0x8dd
    1692:	f04f 0070 	mov.w	r0, #112	; 0x70
    1696:	f002 fbc3 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    169a:	f1bb 0f00 	cmp.w	fp, #0
    169e:	bf18      	it	ne
    16a0:	f3af 8000 	nopne.w
    16a4:	f3ef 8010 	mrs	r0, PRIMASK
    16a8:	b672      	cpsid	i
    16aa:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    16ae:	784a      	ldrb	r2, [r1, #1]
    16b0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    16b4:	4441      	add	r1, r8
    16b6:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    16ba:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    16be:	42a2      	cmp	r2, r4
    16c0:	bf04      	itt	eq
    16c2:	2220      	moveq	r2, #32
    16c4:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    16c8:	b1c0      	cbz	r0, 16fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x374>
    16ca:	462a      	mov	r2, r5
    16cc:	4621      	mov	r1, r4
    16ce:	2001      	movs	r0, #1
    16d0:	f000 f824 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    16d4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    16d8:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    16dc:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    16e0:	6840      	ldr	r0, [r0, #4]
    16e2:	4631      	mov	r1, r6
    16e4:	4790      	blx	r2
    16e6:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    16ea:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    16ee:	4440      	add	r0, r8
    16f0:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    16f4:	2c20      	cmp	r4, #32
    16f6:	d1ba      	bne.n	166e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e6>
    16f8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    16fc:	4806      	ldr	r0, [pc, #24]	; (1718 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x390>)
    16fe:	2800      	cmp	r0, #0
    1700:	bf18      	it	ne
    1702:	f3af 8000 	nopne.w
    1706:	b662      	cpsie	i
    1708:	e7df      	b.n	16ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x342>
    170a:	0000      	.short	0x0000
    170c:	20000e54 	.word	0x20000e54
    1710:	00000000 	.word	0x00000000
    1714:	20000dd4 	.word	0x20000dd4
    1718:	00000000 	.word	0x00000000
    171c:	f8df c058 	ldr.w	ip, [pc, #88]	; 1778 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f0>
    1720:	b510      	push	{r4, lr}
    1722:	2300      	movs	r3, #0
    1724:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1728:	2807      	cmp	r0, #7
    172a:	d21f      	bcs.n	176c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e4>
    172c:	e8df f000 	tbb	[pc, r0]
    1730:	05050505 	.word	0x05050505
    1734:	00040404 	.word	0x00040404
    1738:	2301      	movs	r3, #1
    173a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    173e:	2b00      	cmp	r3, #0
    1740:	bf08      	it	eq
    1742:	bd10      	popeq	{r4, pc}
    1744:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1748:	480c      	ldr	r0, [pc, #48]	; (177c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f4>)
    174a:	4402      	add	r2, r0
    174c:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1750:	2820      	cmp	r0, #32
    1752:	bf0e      	itee	eq
    1754:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1758:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    175c:	7041      	strbne	r1, [r0, #1]
    175e:	2020      	movs	r0, #32
    1760:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1764:	7058      	strb	r0, [r3, #1]
    1766:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    176a:	bd10      	pop	{r4, pc}
    176c:	f240 216e 	movw	r1, #622	; 0x26e
    1770:	2070      	movs	r0, #112	; 0x70
    1772:	f002 fb55 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1776:	0000      	.short	0x0000
    1778:	20000dd4 	.word	0x20000dd4
    177c:	20000e54 	.word	0x20000e54
    1780:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1784:	460f      	mov	r7, r1
    1786:	4680      	mov	r8, r0
    1788:	f8df a158 	ldr.w	sl, [pc, #344]	; 18e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x55c>
    178c:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    1790:	4450      	add	r0, sl
    1792:	f1b8 0f01 	cmp.w	r8, #1
    1796:	f890 4020 	ldrb.w	r4, [r0, #32]
    179a:	4625      	mov	r5, r4
    179c:	bf18      	it	ne
    179e:	f1b8 0f02 	cmpne.w	r8, #2
    17a2:	d005      	beq.n	17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
    17a4:	f640 21a1 	movw	r1, #2721	; 0xaa1
    17a8:	f04f 0070 	mov.w	r0, #112	; 0x70
    17ac:	f002 fb38 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17b0:	f04f 0b00 	mov.w	fp, #0
    17b4:	2d20      	cmp	r5, #32
    17b6:	d042      	beq.n	183e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b6>
    17b8:	f89a 001e 	ldrb.w	r0, [sl, #30]
    17bc:	2600      	movs	r6, #0
    17be:	2800      	cmp	r0, #0
    17c0:	bf08      	it	eq
    17c2:	2602      	moveq	r6, #2
    17c4:	f001 fc0e 	bl	2fe4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    17c8:	f8df c11c 	ldr.w	ip, [pc, #284]	; 18e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x560>
    17cc:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    17d0:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    17d4:	688a      	ldr	r2, [r1, #8]
    17d6:	68c9      	ldr	r1, [r1, #12]
    17d8:	1a12      	subs	r2, r2, r0
    17da:	1a09      	subs	r1, r1, r0
    17dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    17e0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    17e4:	4296      	cmp	r6, r2
    17e6:	bf99      	ittee	ls
    17e8:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    17ec:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    17f0:	4a3e      	ldrhi	r2, [pc, #248]	; (18ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x564>)
    17f2:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    17f6:	d920      	bls.n	183a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b2>
    17f8:	4622      	mov	r2, r4
    17fa:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    17fe:	784c      	ldrb	r4, [r1, #1]
    1800:	2c20      	cmp	r4, #32
    1802:	d012      	beq.n	182a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a2>
    1804:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1808:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    180c:	688b      	ldr	r3, [r1, #8]
    180e:	68c9      	ldr	r1, [r1, #12]
    1810:	1a1b      	subs	r3, r3, r0
    1812:	1a09      	subs	r1, r1, r0
    1814:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1818:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    181c:	429e      	cmp	r6, r3
    181e:	bf9c      	itt	ls
    1820:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    1824:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1828:	d8e6      	bhi.n	17f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x470>
    182a:	2a20      	cmp	r2, #32
    182c:	d005      	beq.n	183a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b2>
    182e:	463b      	mov	r3, r7
    1830:	2120      	movs	r1, #32
    1832:	2004      	movs	r0, #4
    1834:	f7ff f840 	bl	8b8 <MPSL_IRQ_RADIO_Handler+0x40>
    1838:	4604      	mov	r4, r0
    183a:	42ac      	cmp	r4, r5
    183c:	d116      	bne.n	186c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e4>
    183e:	482c      	ldr	r0, [pc, #176]	; (18f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x568>)
    1840:	2800      	cmp	r0, #0
    1842:	bf18      	it	ne
    1844:	f3af 8000 	nopne.w
    1848:	f001 fbcc 	bl	2fe4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    184c:	4603      	mov	r3, r0
    184e:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    1852:	2820      	cmp	r0, #32
    1854:	d00d      	beq.n	1872 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ea>
    1856:	f8da 0008 	ldr.w	r0, [sl, #8]
    185a:	1c99      	adds	r1, r3, #2
    185c:	1a08      	subs	r0, r1, r0
    185e:	0200      	lsls	r0, r0, #8
    1860:	17c1      	asrs	r1, r0, #31
    1862:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1866:	1200      	asrs	r0, r0, #8
    1868:	2800      	cmp	r0, #0
    186a:	dd02      	ble.n	1872 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ea>
    186c:	2000      	movs	r0, #0
    186e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1872:	2d20      	cmp	r5, #32
    1874:	d014      	beq.n	18a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x518>
    1876:	462a      	mov	r2, r5
    1878:	4641      	mov	r1, r8
    187a:	4618      	mov	r0, r3
    187c:	f7ff fab2 	bl	de4 <MPSL_IRQ_RADIO_Handler+0x56c>
    1880:	2800      	cmp	r0, #0
    1882:	bf1e      	ittt	ne
    1884:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    1888:	2002      	movne	r0, #2
    188a:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    188e:	463b      	mov	r3, r7
    1890:	462a      	mov	r2, r5
    1892:	2120      	movs	r1, #32
    1894:	2004      	movs	r0, #4
    1896:	f7ff f80f 	bl	8b8 <MPSL_IRQ_RADIO_Handler+0x40>
    189a:	2000      	movs	r0, #0
    189c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    18a0:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    18a4:	b118      	cbz	r0, 18ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x526>
    18a6:	f002 f917 	bl	3ad8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    18aa:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    18ae:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    18b2:	b120      	cbz	r0, 18be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x536>
    18b4:	2005      	movs	r0, #5
    18b6:	f001 fdf7 	bl	34a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    18ba:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    18be:	2004      	movs	r0, #4
    18c0:	f001 fdf2 	bl	34a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    18c4:	f001 fe60 	bl	3588 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    18c8:	2020      	movs	r0, #32
    18ca:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    18ce:	4809      	ldr	r0, [pc, #36]	; (18f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x56c>)
    18d0:	6880      	ldr	r0, [r0, #8]
    18d2:	f8c0 b000 	str.w	fp, [r0]
    18d6:	4808      	ldr	r0, [pc, #32]	; (18f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x570>)
    18d8:	f8c0 b000 	str.w	fp, [r0]
    18dc:	2001      	movs	r0, #1
    18de:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    18e2:	0000      	.short	0x0000
    18e4:	20000e54 	.word	0x20000e54
    18e8:	20000a54 	.word	0x20000a54
    18ec:	20000dd4 	.word	0x20000dd4
    18f0:	00000000 	.word	0x00000000
    18f4:	20000038 	.word	0x20000038
    18f8:	40000508 	.word	0x40000508

000018fc <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    18fc:	4906      	ldr	r1, [pc, #24]	; (1918 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    18fe:	b510      	push	{r4, lr}
    1900:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    1904:	2a20      	cmp	r2, #32
    1906:	bf1c      	itt	ne
    1908:	7788      	strbne	r0, [r1, #30]
    190a:	bd10      	popne	{r4, pc}
    190c:	f240 319a 	movw	r1, #922	; 0x39a
    1910:	2070      	movs	r0, #112	; 0x70
    1912:	f002 fa85 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1916:	0000      	.short	0x0000
    1918:	20000e54 	.word	0x20000e54

0000191c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    191c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1920:	4e69      	ldr	r6, [pc, #420]	; (1ac8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1922:	4607      	mov	r7, r0
    1924:	b08d      	sub	sp, #52	; 0x34
    1926:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    192a:	4688      	mov	r8, r1
    192c:	2820      	cmp	r0, #32
    192e:	d055      	beq.n	19dc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    1930:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1934:	f106 0408 	add.w	r4, r6, #8
    1938:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    193c:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    1940:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    1944:	2020      	movs	r0, #32
    1946:	f88d 0020 	strb.w	r0, [sp, #32]
    194a:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    194e:	aa0a      	add	r2, sp, #40	; 0x28
    1950:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1954:	4430      	add	r0, r6
    1956:	a909      	add	r1, sp, #36	; 0x24
    1958:	f890 5020 	ldrb.w	r5, [r0, #32]
    195c:	68f0      	ldr	r0, [r6, #12]
    195e:	9002      	str	r0, [sp, #8]
    1960:	6830      	ldr	r0, [r6, #0]
    1962:	4438      	add	r0, r7
    1964:	f001 f9d4 	bl	2d10 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1968:	f8da 000c 	ldr.w	r0, [sl, #12]
    196c:	9909      	ldr	r1, [sp, #36]	; 0x24
    196e:	2f65      	cmp	r7, #101	; 0x65
    1970:	4408      	add	r0, r1
    1972:	d338      	bcc.n	19e6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1974:	4a55      	ldr	r2, [pc, #340]	; (1acc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    1976:	2100      	movs	r1, #0
    1978:	1bd2      	subs	r2, r2, r7
    197a:	eb71 0201 	sbcs.w	r2, r1, r1
    197e:	d332      	bcc.n	19e6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1980:	6822      	ldr	r2, [r4, #0]
    1982:	1a82      	subs	r2, r0, r2
    1984:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1988:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    198c:	d82b      	bhi.n	19e6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    198e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1992:	6060      	str	r0, [r4, #4]
    1994:	4630      	mov	r0, r6
    1996:	f884 8010 	strb.w	r8, [r4, #16]
    199a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    199e:	f10d 0a20 	add.w	sl, sp, #32
    19a2:	2d20      	cmp	r5, #32
    19a4:	bf1c      	itt	ne
    19a6:	494a      	ldrne	r1, [pc, #296]	; (1ad0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    19a8:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    19ac:	d050      	beq.n	1a50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    19ae:	bf00      	nop
    19b0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    19b4:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    19b8:	6861      	ldr	r1, [r4, #4]
    19ba:	f8d8 6008 	ldr.w	r6, [r8, #8]
    19be:	f108 0008 	add.w	r0, r8, #8
    19c2:	1a71      	subs	r1, r6, r1
    19c4:	0209      	lsls	r1, r1, #8
    19c6:	17ca      	asrs	r2, r1, #31
    19c8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    19cc:	1209      	asrs	r1, r1, #8
    19ce:	d42d      	bmi.n	1a2c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    19d0:	89c0      	ldrh	r0, [r0, #14]
    19d2:	2800      	cmp	r0, #0
    19d4:	d03c      	beq.n	1a50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    19d6:	89e0      	ldrh	r0, [r4, #14]
    19d8:	b148      	cbz	r0, 19ee <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    19da:	e039      	b.n	1a50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    19dc:	f640 3168 	movw	r1, #2920	; 0xb68
    19e0:	2070      	movs	r0, #112	; 0x70
    19e2:	f002 fa1d 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19e6:	b00d      	add	sp, #52	; 0x34
    19e8:	2001      	movs	r0, #1
    19ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19ee:	6820      	ldr	r0, [r4, #0]
    19f0:	900c      	str	r0, [sp, #48]	; 0x30
    19f2:	f002 f86b 	bl	3acc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    19f6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    19fa:	bf08      	it	eq
    19fc:	200d      	moveq	r0, #13
    19fe:	d00b      	beq.n	1a18 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1a00:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1a04:	3856      	subs	r0, #86	; 0x56
    1a06:	bf08      	it	eq
    1a08:	201c      	moveq	r0, #28
    1a0a:	d005      	beq.n	1a18 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1a0c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1a10:	389f      	subs	r0, #159	; 0x9f
    1a12:	bf14      	ite	ne
    1a14:	2000      	movne	r0, #0
    1a16:	2032      	moveq	r0, #50	; 0x32
    1a18:	1c41      	adds	r1, r0, #1
    1a1a:	980c      	ldr	r0, [sp, #48]	; 0x30
    1a1c:	1a30      	subs	r0, r6, r0
    1a1e:	0200      	lsls	r0, r0, #8
    1a20:	17c2      	asrs	r2, r0, #31
    1a22:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1a26:	1200      	asrs	r0, r0, #8
    1a28:	4288      	cmp	r0, r1
    1a2a:	da11      	bge.n	1a50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1a2c:	f88a 5000 	strb.w	r5, [sl]
    1a30:	f898 1018 	ldrb.w	r1, [r8, #24]
    1a34:	7c20      	ldrb	r0, [r4, #16]
    1a36:	4281      	cmp	r1, r0
    1a38:	d805      	bhi.n	1a46 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    1a3a:	9802      	ldr	r0, [sp, #8]
    1a3c:	6060      	str	r0, [r4, #4]
    1a3e:	b00d      	add	sp, #52	; 0x34
    1a40:	2002      	movs	r0, #2
    1a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a46:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1a4a:	7845      	ldrb	r5, [r0, #1]
    1a4c:	2d20      	cmp	r5, #32
    1a4e:	d1af      	bne.n	19b0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    1a50:	2005      	movs	r0, #5
    1a52:	f001 fd29 	bl	34a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a56:	4c1c      	ldr	r4, [pc, #112]	; (1ac8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a5c:	6060      	str	r0, [r4, #4]
    1a5e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    1a62:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1a66:	2120      	movs	r1, #32
    1a68:	2a20      	cmp	r2, #32
    1a6a:	d003      	beq.n	1a74 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    1a6c:	2005      	movs	r0, #5
    1a6e:	f7fe ff23 	bl	8b8 <MPSL_IRQ_RADIO_Handler+0x40>
    1a72:	e004      	b.n	1a7e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    1a74:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    1a78:	4420      	add	r0, r4
    1a7a:	f890 0020 	ldrb.w	r0, [r0, #32]
    1a7e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    1a82:	4913      	ldr	r1, [pc, #76]	; (1ad0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    1a84:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1a88:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    1a8c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1a90:	7048      	strb	r0, [r1, #1]
    1a92:	6820      	ldr	r0, [r4, #0]
    1a94:	4438      	add	r0, r7
    1a96:	6020      	str	r0, [r4, #0]
    1a98:	20ff      	movs	r0, #255	; 0xff
    1a9a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    1a9e:	7e60      	ldrb	r0, [r4, #25]
    1aa0:	2801      	cmp	r0, #1
    1aa2:	d105      	bne.n	1ab0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    1aa4:	68e0      	ldr	r0, [r4, #12]
    1aa6:	1e40      	subs	r0, r0, #1
    1aa8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1aac:	f001 fb60 	bl	3170 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1ab0:	f89d 0020 	ldrb.w	r0, [sp, #32]
    1ab4:	2820      	cmp	r0, #32
    1ab6:	d003      	beq.n	1ac0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    1ab8:	4806      	ldr	r0, [pc, #24]	; (1ad4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    1aba:	7840      	ldrb	r0, [r0, #1]
    1abc:	f002 fa84 	bl	3fc8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1ac0:	b00d      	add	sp, #52	; 0x34
    1ac2:	2000      	movs	r0, #0
    1ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ac8:	20000e54 	.word	0x20000e54
    1acc:	0f424000 	.word	0x0f424000
    1ad0:	20000dd4 	.word	0x20000dd4
    1ad4:	20000038 	.word	0x20000038

00001ad8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    1ad8:	4806      	ldr	r0, [pc, #24]	; (1af4 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    1ada:	b510      	push	{r4, lr}
    1adc:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    1ae0:	2920      	cmp	r1, #32
    1ae2:	bf1c      	itt	ne
    1ae4:	7e00      	ldrbne	r0, [r0, #24]
    1ae6:	bd10      	popne	{r4, pc}
    1ae8:	f640 3162 	movw	r1, #2914	; 0xb62
    1aec:	2070      	movs	r0, #112	; 0x70
    1aee:	f002 f997 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1af2:	0000      	.short	0x0000
    1af4:	20000e54 	.word	0x20000e54

00001af8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1afa:	4d6b      	ldr	r5, [pc, #428]	; (1ca8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    1afc:	4a6b      	ldr	r2, [pc, #428]	; (1cac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    1afe:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    1b02:	2601      	movs	r6, #1
    1b04:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    1b08:	2808      	cmp	r0, #8
    1b0a:	d27c      	bcs.n	1c06 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    1b0c:	e8df f000 	tbb	[pc, r0]
    1b10:	a9977004 	.word	0xa9977004
    1b14:	b3ae41c7 	.word	0xb3ae41c7
    1b18:	b919      	cbnz	r1, 1b22 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1b1a:	f001 fff9 	bl	3b10 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1b1e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1b22:	8ae0      	ldrh	r0, [r4, #22]
    1b24:	b110      	cbz	r0, 1b2c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1b26:	f002 f903 	bl	3d30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1b2a:	b180      	cbz	r0, 1b4e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    1b2c:	f7ff fd44 	bl	15b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x230>
    1b30:	20ff      	movs	r0, #255	; 0xff
    1b32:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    1b36:	6861      	ldr	r1, [r4, #4]
    1b38:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    1b3c:	d003      	beq.n	1b46 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    1b3e:	2005      	movs	r0, #5
    1b40:	f001 fbfc 	bl	333c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1b44:	b140      	cbz	r0, 1b58 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    1b46:	7e60      	ldrb	r0, [r4, #25]
    1b48:	2801      	cmp	r0, #1
    1b4a:	d110      	bne.n	1b6e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    1b4c:	e009      	b.n	1b62 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    1b4e:	f640 0169 	movw	r1, #2153	; 0x869
    1b52:	2070      	movs	r0, #112	; 0x70
    1b54:	f002 f964 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b58:	f640 016e 	movw	r1, #2158	; 0x86e
    1b5c:	2070      	movs	r0, #112	; 0x70
    1b5e:	f002 f95f 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b62:	68e0      	ldr	r0, [r4, #12]
    1b64:	1e40      	subs	r0, r0, #1
    1b66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b6a:	f001 fb01 	bl	3170 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1b6e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1b72:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1b76:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1b7a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1b7e:	6840      	ldr	r0, [r0, #4]
    1b80:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1b84:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1b88:	b001      	add	sp, #4
    1b8a:	2101      	movs	r1, #1
    1b8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1b90:	4710      	bx	r2
    1b92:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1b96:	b140      	cbz	r0, 1baa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    1b98:	b919      	cbnz	r1, 1ba2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    1b9a:	f001 ffb9 	bl	3b10 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1b9e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1ba2:	2000      	movs	r0, #0
    1ba4:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1baa:	f7ff fd05 	bl	15b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x230>
    1bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1bb2:	6060      	str	r0, [r4, #4]
    1bb4:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    1bb8:	f88d 0000 	strb.w	r0, [sp]
    1bbc:	f89d 0000 	ldrb.w	r0, [sp]
    1bc0:	b188      	cbz	r0, 1be6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    1bc2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1bc6:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1bca:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1bce:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1bd2:	6840      	ldr	r0, [r0, #4]
    1bd4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1bd8:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1bdc:	b001      	add	sp, #4
    1bde:	2106      	movs	r1, #6
    1be0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1be4:	4710      	bx	r2
    1be6:	f640 0185 	movw	r1, #2181	; 0x885
    1bea:	2070      	movs	r0, #112	; 0x70
    1bec:	f002 f918 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bf0:	f7ff fce2 	bl	15b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x230>
    1bf4:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    1bf8:	f002 f89a 	bl	3d30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1bfc:	b120      	cbz	r0, 1c08 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    1bfe:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    1c02:	b130      	cbz	r0, 1c12 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    1c04:	e009      	b.n	1c1a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    1c06:	e04a      	b.n	1c9e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a6>
    1c08:	f640 0193 	movw	r1, #2195	; 0x893
    1c0c:	2070      	movs	r0, #112	; 0x70
    1c0e:	f002 f907 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c12:	f001 ff7d 	bl	3b10 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1c16:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1c1a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1c1e:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1c22:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1c26:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1c2a:	6840      	ldr	r0, [r0, #4]
    1c2c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1c30:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1c34:	b001      	add	sp, #4
    1c36:	2100      	movs	r1, #0
    1c38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1c3c:	4710      	bx	r2
    1c3e:	f001 fd59 	bl	36f4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    1c42:	8ae0      	ldrh	r0, [r4, #22]
    1c44:	b110      	cbz	r0, 1c4c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x154>
    1c46:	f002 f873 	bl	3d30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1c4a:	b128      	cbz	r0, 1c58 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x160>
    1c4c:	f001 fd66 	bl	371c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    1c50:	2800      	cmp	r0, #0
    1c52:	bf18      	it	ne
    1c54:	7766      	strbne	r6, [r4, #29]
    1c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c58:	f640 019d 	movw	r1, #2205	; 0x89d
    1c5c:	2070      	movs	r0, #112	; 0x70
    1c5e:	f002 f8df 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c62:	4813      	ldr	r0, [pc, #76]	; (1cb0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1c64:	6006      	str	r6, [r0, #0]
    1c66:	6890      	ldr	r0, [r2, #8]
    1c68:	6006      	str	r6, [r0, #0]
    1c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c6c:	7810      	ldrb	r0, [r2, #0]
    1c6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1c72:	f002 b9a9 	b.w	3fc8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1c76:	f7ff fc9f 	bl	15b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x230>
    1c7a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1c7e:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1c82:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1c86:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1c8a:	6840      	ldr	r0, [r0, #4]
    1c8c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1c90:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1c94:	b001      	add	sp, #4
    1c96:	2105      	movs	r1, #5
    1c98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1c9c:	4710      	bx	r2
    1c9e:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    1ca2:	2070      	movs	r0, #112	; 0x70
    1ca4:	f002 f8bc 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ca8:	20000a54 	.word	0x20000a54
    1cac:	20000038 	.word	0x20000038
    1cb0:	40000508 	.word	0x40000508

00001cb4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1cb4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cb8:	4682      	mov	sl, r0
    1cba:	48ef      	ldr	r0, [pc, #956]	; (2078 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>)
    1cbc:	b095      	sub	sp, #84	; 0x54
    1cbe:	6800      	ldr	r0, [r0, #0]
    1cc0:	4dee      	ldr	r5, [pc, #952]	; (207c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x330>)
    1cc2:	05c0      	lsls	r0, r0, #23
    1cc4:	0dc0      	lsrs	r0, r0, #23
    1cc6:	d00e      	beq.n	1ce6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1cc8:	3810      	subs	r0, #16
    1cca:	b240      	sxtb	r0, r0
    1ccc:	2800      	cmp	r0, #0
    1cce:	bfb8      	it	lt
    1cd0:	f000 000f 	andlt.w	r0, r0, #15
    1cd4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1cd8:	bfac      	ite	ge
    1cda:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1cde:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1ce2:	0940      	lsrs	r0, r0, #5
    1ce4:	d00d      	beq.n	1d02 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1ce6:	9816      	ldr	r0, [sp, #88]	; 0x58
    1ce8:	f04f 0b00 	mov.w	fp, #0
    1cec:	7800      	ldrb	r0, [r0, #0]
    1cee:	2800      	cmp	r0, #0
    1cf0:	bf18      	it	ne
    1cf2:	2801      	cmpne	r0, #1
    1cf4:	d018      	beq.n	1d28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1cf6:	f240 713b 	movw	r1, #1851	; 0x73b
    1cfa:	f04f 0070 	mov.w	r0, #112	; 0x70
    1cfe:	f002 f88f 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d02:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1d06:	f04f 0b01 	mov.w	fp, #1
    1d0a:	2820      	cmp	r0, #32
    1d0c:	d007      	beq.n	1d1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1d0e:	9816      	ldr	r0, [sp, #88]	; 0x58
    1d10:	7800      	ldrb	r0, [r0, #0]
    1d12:	b148      	cbz	r0, 1d28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1d14:	f240 7137 	movw	r1, #1847	; 0x737
    1d18:	2070      	movs	r0, #112	; 0x70
    1d1a:	f002 f881 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d1e:	f240 7134 	movw	r1, #1844	; 0x734
    1d22:	2070      	movs	r0, #112	; 0x70
    1d24:	f002 f87c 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d28:	4cd5      	ldr	r4, [pc, #852]	; (2080 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x334>)
    1d2a:	b124      	cbz	r4, 1d36 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1d2c:	2100      	movs	r1, #0
    1d2e:	f240 703e 	movw	r0, #1854	; 0x73e
    1d32:	f3af 8000 	nop.w
    1d36:	2000      	movs	r0, #0
    1d38:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    1d3c:	49d1      	ldr	r1, [pc, #836]	; (2084 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x338>)
    1d3e:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    1d42:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1d46:	f04f 0901 	mov.w	r9, #1
    1d4a:	9000      	str	r0, [sp, #0]
    1d4c:	b124      	cbz	r4, 1d58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>
    1d4e:	2100      	movs	r1, #0
    1d50:	f240 7049 	movw	r0, #1865	; 0x749
    1d54:	f3af 8000 	nop.w
    1d58:	f1b9 0f00 	cmp.w	r9, #0
    1d5c:	d00a      	beq.n	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1d5e:	bf00      	nop
    1d60:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    1d64:	f04f 0800 	mov.w	r8, #0
    1d68:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    1d6c:	f1bb 0f00 	cmp.w	fp, #0
    1d70:	d007      	beq.n	1d82 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36>
    1d72:	e038      	b.n	1de6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9a>
    1d74:	48c4      	ldr	r0, [pc, #784]	; (2088 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x33c>)
    1d76:	2800      	cmp	r0, #0
    1d78:	bf18      	it	ne
    1d7a:	f3af 8000 	nopne.w
    1d7e:	b662      	cpsie	i
    1d80:	e7ee      	b.n	1d60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14>
    1d82:	4637      	mov	r7, r6
    1d84:	2001      	movs	r0, #1
    1d86:	ea20 0607 	bic.w	r6, r0, r7
    1d8a:	48c0      	ldr	r0, [pc, #768]	; (208c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x340>)
    1d8c:	2240      	movs	r2, #64	; 0x40
    1d8e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1d92:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1d96:	f00a f87e 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1d9a:	b124      	cbz	r4, 1da6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a>
    1d9c:	2100      	movs	r1, #0
    1d9e:	f240 505e 	movw	r0, #1374	; 0x55e
    1da2:	f3af 8000 	nop.w
    1da6:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    1daa:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1dae:	4429      	add	r1, r5
    1db0:	4428      	add	r0, r5
    1db2:	8c0a      	ldrh	r2, [r1, #32]
    1db4:	8402      	strh	r2, [r0, #32]
    1db6:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    1dba:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    1dbe:	b124      	cbz	r4, 1dca <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7e>
    1dc0:	2100      	movs	r1, #0
    1dc2:	f240 5062 	movw	r0, #1378	; 0x562
    1dc6:	f3af 8000 	nop.w
    1dca:	b124      	cbz	r4, 1dd6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8a>
    1dcc:	2100      	movs	r1, #0
    1dce:	f240 7053 	movw	r0, #1875	; 0x753
    1dd2:	f3af 8000 	nop.w
    1dd6:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1dda:	f88d 0008 	strb.w	r0, [sp, #8]
    1dde:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1de2:	2800      	cmp	r0, #0
    1de4:	d1b2      	bne.n	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1de6:	b124      	cbz	r4, 1df2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa6>
    1de8:	2100      	movs	r1, #0
    1dea:	f240 705d 	movw	r0, #1885	; 0x75d
    1dee:	f3af 8000 	nop.w
    1df2:	a802      	add	r0, sp, #8
    1df4:	f001 f8fc 	bl	2ff0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    1df8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1dfc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    1e00:	4633      	mov	r3, r6
    1e02:	aa09      	add	r2, sp, #36	; 0x24
    1e04:	a80e      	add	r0, sp, #56	; 0x38
    1e06:	9916      	ldr	r1, [sp, #88]	; 0x58
    1e08:	f7ff fa74 	bl	12f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f4>
    1e0c:	b124      	cbz	r4, 1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    1e0e:	2100      	movs	r1, #0
    1e10:	f240 7064 	movw	r0, #1892	; 0x764
    1e14:	f3af 8000 	nop.w
    1e18:	4a9c      	ldr	r2, [pc, #624]	; (208c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x340>)
    1e1a:	990e      	ldr	r1, [sp, #56]	; 0x38
    1e1c:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    1e20:	a809      	add	r0, sp, #36	; 0x24
    1e22:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    1e26:	2a01      	cmp	r2, #1
    1e28:	bf18      	it	ne
    1e2a:	2a02      	cmpne	r2, #2
    1e2c:	d138      	bne.n	1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>
    1e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e32:	eba2 0201 	sub.w	r2, r2, r1
    1e36:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1e3a:	eba3 0101 	sub.w	r1, r3, r1
    1e3e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    1e42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e46:	2a02      	cmp	r2, #2
    1e48:	d364      	bcc.n	1f14 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c8>
    1e4a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1e4e:	bf98      	it	ls
    1e50:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1e54:	d85e      	bhi.n	1f14 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c8>
    1e56:	f04f 0801 	mov.w	r8, #1
    1e5a:	ab14      	add	r3, sp, #80	; 0x50
    1e5c:	aa13      	add	r2, sp, #76	; 0x4c
    1e5e:	4631      	mov	r1, r6
    1e60:	f7fe ff1e 	bl	ca0 <MPSL_IRQ_RADIO_Handler+0x428>
    1e64:	2800      	cmp	r0, #0
    1e66:	d05d      	beq.n	1f24 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d8>
    1e68:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1e6c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    1e70:	4633      	mov	r3, r6
    1e72:	428a      	cmp	r2, r1
    1e74:	d05a      	beq.n	1f2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>
    1e76:	2005      	movs	r0, #5
    1e78:	f7fe fd1e 	bl	8b8 <MPSL_IRQ_RADIO_Handler+0x40>
    1e7c:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    1e80:	7048      	strb	r0, [r1, #1]
    1e82:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1e86:	2820      	cmp	r0, #32
    1e88:	bf1c      	itt	ne
    1e8a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1e8e:	f880 a001 	strbne.w	sl, [r0, #1]
    1e92:	d057      	beq.n	1f44 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f8>
    1e94:	4632      	mov	r2, r6
    1e96:	4651      	mov	r1, sl
    1e98:	f05f 0003 	movs.w	r0, #3
    1e9c:	f7ff fc3e 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    1ea0:	b124      	cbz	r4, 1eac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x160>
    1ea2:	2100      	movs	r1, #0
    1ea4:	f240 7069 	movw	r0, #1897	; 0x769
    1ea8:	f3af 8000 	nop.w
    1eac:	4878      	ldr	r0, [pc, #480]	; (2090 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x344>)
    1eae:	2800      	cmp	r0, #0
    1eb0:	bf18      	it	ne
    1eb2:	f3af 8000 	nopne.w
    1eb6:	f3ef 8910 	mrs	r9, PRIMASK
    1eba:	b672      	cpsid	i
    1ebc:	b124      	cbz	r4, 1ec8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17c>
    1ebe:	2100      	movs	r1, #0
    1ec0:	f240 706f 	movw	r0, #1903	; 0x76f
    1ec4:	f3af 8000 	nop.w
    1ec8:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1ecc:	f88d 0008 	strb.w	r0, [sp, #8]
    1ed0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1ed4:	2800      	cmp	r0, #0
    1ed6:	f47f af39 	bne.w	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1eda:	b124      	cbz	r4, 1ee6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19a>
    1edc:	2100      	movs	r1, #0
    1ede:	f240 7077 	movw	r0, #1911	; 0x777
    1ee2:	f3af 8000 	nop.w
    1ee6:	af09      	add	r7, sp, #36	; 0x24
    1ee8:	9800      	ldr	r0, [sp, #0]
    1eea:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    1eee:	f100 0708 	add.w	r7, r0, #8
    1ef2:	f1b8 0f00 	cmp.w	r8, #0
    1ef6:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    1efa:	990d      	ldr	r1, [sp, #52]	; 0x34
    1efc:	6181      	str	r1, [r0, #24]
    1efe:	d051      	beq.n	1fa4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x258>
    1f00:	b124      	cbz	r4, 1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>
    1f02:	2100      	movs	r1, #0
    1f04:	f240 7084 	movw	r0, #1924	; 0x784
    1f08:	f3af 8000 	nop.w
    1f0c:	f1bb 0f00 	cmp.w	fp, #0
    1f10:	d139      	bne.n	1f86 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23a>
    1f12:	e01f      	b.n	1f54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x208>
    1f14:	4632      	mov	r2, r6
    1f16:	4651      	mov	r1, sl
    1f18:	2004      	movs	r0, #4
    1f1a:	f7ff fbff 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    1f1e:	f04f 0801 	mov.w	r8, #1
    1f22:	e7bd      	b.n	1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>
    1f24:	4632      	mov	r2, r6
    1f26:	4651      	mov	r1, sl
    1f28:	2004      	movs	r0, #4
    1f2a:	e7b7      	b.n	1e9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x150>
    1f2c:	2920      	cmp	r1, #32
    1f2e:	bf19      	ittee	ne
    1f30:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1f34:	7840      	ldrbne	r0, [r0, #1]
    1f36:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    1f3a:	4428      	addeq	r0, r5
    1f3c:	bf08      	it	eq
    1f3e:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1f42:	e79b      	b.n	1e7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>
    1f44:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    1f48:	4429      	add	r1, r5
    1f4a:	f881 a020 	strb.w	sl, [r1, #32]
    1f4e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    1f52:	e79f      	b.n	1e94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>
    1f54:	9811      	ldr	r0, [sp, #68]	; 0x44
    1f56:	f010 0fff 	tst.w	r0, #255	; 0xff
    1f5a:	d014      	beq.n	1f86 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23a>
    1f5c:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1f60:	2820      	cmp	r0, #32
    1f62:	d110      	bne.n	1f86 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23a>
    1f64:	b124      	cbz	r4, 1f70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x224>
    1f66:	2100      	movs	r1, #0
    1f68:	f240 7089 	movw	r0, #1929	; 0x789
    1f6c:	f3af 8000 	nop.w
    1f70:	4631      	mov	r1, r6
    1f72:	2002      	movs	r0, #2
    1f74:	f7ff fc04 	bl	1780 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f8>
    1f78:	9010      	str	r0, [sp, #64]	; 0x40
    1f7a:	b920      	cbnz	r0, 1f86 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23a>
    1f7c:	9816      	ldr	r0, [sp, #88]	; 0x58
    1f7e:	7800      	ldrb	r0, [r0, #0]
    1f80:	b1e8      	cbz	r0, 1fbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x272>
    1f82:	2801      	cmp	r0, #1
    1f84:	d02a      	beq.n	1fdc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x290>
    1f86:	b124      	cbz	r4, 1f92 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x246>
    1f88:	2100      	movs	r1, #0
    1f8a:	f240 70a6 	movw	r0, #1958	; 0x7a6
    1f8e:	f3af 8000 	nop.w
    1f92:	20ff      	movs	r0, #255	; 0xff
    1f94:	f1bb 0f00 	cmp.w	fp, #0
    1f98:	bf18      	it	ne
    1f9a:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    1f9e:	d026      	beq.n	1fee <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a2>
    1fa0:	f04f 0801 	mov.w	r8, #1
    1fa4:	b124      	cbz	r4, 1fb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x264>
    1fa6:	2100      	movs	r1, #0
    1fa8:	f240 70b7 	movw	r0, #1975	; 0x7b7
    1fac:	f3af 8000 	nop.w
    1fb0:	9810      	ldr	r0, [sp, #64]	; 0x40
    1fb2:	4e38      	ldr	r6, [pc, #224]	; (2094 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x348>)
    1fb4:	2802      	cmp	r0, #2
    1fb6:	d023      	beq.n	2000 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2b4>
    1fb8:	2801      	cmp	r0, #1
    1fba:	d029      	beq.n	2010 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c4>
    1fbc:	e02d      	b.n	201a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ce>
    1fbe:	b124      	cbz	r4, 1fca <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27e>
    1fc0:	2100      	movs	r1, #0
    1fc2:	f240 7091 	movw	r0, #1937	; 0x791
    1fc6:	f3af 8000 	nop.w
    1fca:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1fce:	4651      	mov	r1, sl
    1fd0:	2004      	movs	r0, #4
    1fd2:	f7ff fba3 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    1fd6:	f04f 0801 	mov.w	r8, #1
    1fda:	e7e3      	b.n	1fa4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x258>
    1fdc:	2c00      	cmp	r4, #0
    1fde:	f43f aeb5 	beq.w	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1fe2:	2100      	movs	r1, #0
    1fe4:	f240 709c 	movw	r0, #1948	; 0x79c
    1fe8:	f3af 8000 	nop.w
    1fec:	e6ae      	b.n	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1fee:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1ff2:	2101      	movs	r1, #1
    1ff4:	4391      	bics	r1, r2
    1ff6:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    1ffa:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    1ffe:	e7cf      	b.n	1fa0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>
    2000:	68a8      	ldr	r0, [r5, #8]
    2002:	990e      	ldr	r1, [sp, #56]	; 0x38
    2004:	1a40      	subs	r0, r0, r1
    2006:	f009 fdec 	bl	bbe2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    200a:	6871      	ldr	r1, [r6, #4]
    200c:	b921      	cbnz	r1, 2018 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2cc>
    200e:	e004      	b.n	201a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ce>
    2010:	6871      	ldr	r1, [r6, #4]
    2012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2016:	b101      	cbz	r1, 201a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ce>
    2018:	4788      	blx	r1
    201a:	f1b9 0f00 	cmp.w	r9, #0
    201e:	d024      	beq.n	206a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x31e>
    2020:	b124      	cbz	r4, 202c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e0>
    2022:	2100      	movs	r1, #0
    2024:	f240 70c7 	movw	r0, #1991	; 0x7c7
    2028:	f3af 8000 	nop.w
    202c:	f1b8 0f00 	cmp.w	r8, #0
    2030:	d011      	beq.n	2056 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30a>
    2032:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2036:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    203a:	4428      	add	r0, r5
    203c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2040:	2820      	cmp	r0, #32
    2042:	d008      	beq.n	2056 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30a>
    2044:	b124      	cbz	r4, 2050 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x304>
    2046:	2100      	movs	r1, #0
    2048:	f240 70ce 	movw	r0, #1998	; 0x7ce
    204c:	f3af 8000 	nop.w
    2050:	7870      	ldrb	r0, [r6, #1]
    2052:	f001 ffb9 	bl	3fc8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2056:	b124      	cbz	r4, 2062 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x316>
    2058:	2100      	movs	r1, #0
    205a:	f240 70d3 	movw	r0, #2003	; 0x7d3
    205e:	f3af 8000 	nop.w
    2062:	b017      	add	sp, #92	; 0x5c
    2064:	4640      	mov	r0, r8
    2066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    206a:	4807      	ldr	r0, [pc, #28]	; (2088 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x33c>)
    206c:	2800      	cmp	r0, #0
    206e:	bf18      	it	ne
    2070:	f3af 8000 	nopne.w
    2074:	b662      	cpsie	i
    2076:	e7d3      	b.n	2020 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d4>
    2078:	e000ed04 	.word	0xe000ed04
    207c:	20000e54 	.word	0x20000e54
    2080:	00000000 	.word	0x00000000
    2084:	20000a54 	.word	0x20000a54
    2088:	00000000 	.word	0x00000000
    208c:	20000dd4 	.word	0x20000dd4
    2090:	00000000 	.word	0x00000000
    2094:	20000038 	.word	0x20000038

00002098 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    209c:	4606      	mov	r6, r0
    209e:	7800      	ldrb	r0, [r0, #0]
    20a0:	b08d      	sub	sp, #52	; 0x34
    20a2:	b118      	cbz	r0, 20ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    20a4:	b00d      	add	sp, #52	; 0x34
    20a6:	2000      	movs	r0, #0
    20a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20ac:	488c      	ldr	r0, [pc, #560]	; (22e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    20ae:	6800      	ldr	r0, [r0, #0]
    20b0:	05c0      	lsls	r0, r0, #23
    20b2:	0dc0      	lsrs	r0, r0, #23
    20b4:	d00e      	beq.n	20d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    20b6:	3810      	subs	r0, #16
    20b8:	b240      	sxtb	r0, r0
    20ba:	2800      	cmp	r0, #0
    20bc:	bfb8      	it	lt
    20be:	f000 000f 	andlt.w	r0, r0, #15
    20c2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    20c6:	bfac      	ite	ge
    20c8:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    20cc:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    20d0:	0940      	lsrs	r0, r0, #5
    20d2:	d0e7      	beq.n	20a4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    20d4:	4d83      	ldr	r5, [pc, #524]	; (22e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    20d6:	4c84      	ldr	r4, [pc, #528]	; (22e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    20d8:	f04f 0b01 	mov.w	fp, #1
    20dc:	2700      	movs	r7, #0
    20de:	b125      	cbz	r5, 20ea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    20e0:	2100      	movs	r1, #0
    20e2:	f240 50e5 	movw	r0, #1509	; 0x5e5
    20e6:	f3af 8000 	nop.w
    20ea:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
    20ee:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    20f2:	f04f 0900 	mov.w	r9, #0
    20f6:	b125      	cbz	r5, 2102 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    20f8:	2100      	movs	r1, #0
    20fa:	f240 50ea 	movw	r0, #1514	; 0x5ea
    20fe:	f3af 8000 	nop.w
    2102:	487a      	ldr	r0, [pc, #488]	; (22ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    2104:	ea2b 080a 	bic.w	r8, fp, sl
    2108:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    210c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    2110:	2240      	movs	r2, #64	; 0x40
    2112:	f009 fec0 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2116:	b125      	cbz	r5, 2122 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    2118:	2100      	movs	r1, #0
    211a:	f240 505e 	movw	r0, #1374	; 0x55e
    211e:	f3af 8000 	nop.w
    2122:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    2126:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    212a:	4421      	add	r1, r4
    212c:	4420      	add	r0, r4
    212e:	8c0a      	ldrh	r2, [r1, #32]
    2130:	8402      	strh	r2, [r0, #32]
    2132:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2136:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    213a:	b125      	cbz	r5, 2146 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    213c:	2100      	movs	r1, #0
    213e:	f240 5062 	movw	r0, #1378	; 0x562
    2142:	f3af 8000 	nop.w
    2146:	b125      	cbz	r5, 2152 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    2148:	2100      	movs	r1, #0
    214a:	f240 50ef 	movw	r0, #1519	; 0x5ef
    214e:	f3af 8000 	nop.w
    2152:	a808      	add	r0, sp, #32
    2154:	f000 ff4c 	bl	2ff0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2158:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    215c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    2160:	4643      	mov	r3, r8
    2162:	466a      	mov	r2, sp
    2164:	4631      	mov	r1, r6
    2166:	a80a      	add	r0, sp, #40	; 0x28
    2168:	f7ff f8c4 	bl	12f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f4>
    216c:	b125      	cbz	r5, 2178 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    216e:	2100      	movs	r1, #0
    2170:	f240 50f5 	movw	r0, #1525	; 0x5f5
    2174:	f3af 8000 	nop.w
    2178:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    217c:	2820      	cmp	r0, #32
    217e:	d01a      	beq.n	21b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    2180:	68e0      	ldr	r0, [r4, #12]
    2182:	9900      	ldr	r1, [sp, #0]
    2184:	1a09      	subs	r1, r1, r0
    2186:	0209      	lsls	r1, r1, #8
    2188:	17ca      	asrs	r2, r1, #31
    218a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    218e:	1209      	asrs	r1, r1, #8
    2190:	d511      	bpl.n	21b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    2192:	9900      	ldr	r1, [sp, #0]
    2194:	4281      	cmp	r1, r0
    2196:	d902      	bls.n	219e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    2198:	9902      	ldr	r1, [sp, #8]
    219a:	1c49      	adds	r1, r1, #1
    219c:	9102      	str	r1, [sp, #8]
    219e:	e9dd 2100 	ldrd	r2, r1, [sp]
    21a2:	1a89      	subs	r1, r1, r2
    21a4:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    21a8:	4408      	add	r0, r1
    21aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21ae:	e9cd 2000 	strd	r2, r0, [sp]
    21b2:	f04f 0901 	mov.w	r9, #1
    21b6:	b125      	cbz	r5, 21c2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    21b8:	2100      	movs	r1, #0
    21ba:	f240 50ff 	movw	r0, #1535	; 0x5ff
    21be:	f3af 8000 	nop.w
    21c2:	9900      	ldr	r1, [sp, #0]
    21c4:	980a      	ldr	r0, [sp, #40]	; 0x28
    21c6:	9a01      	ldr	r2, [sp, #4]
    21c8:	1a09      	subs	r1, r1, r0
    21ca:	1a10      	subs	r0, r2, r0
    21cc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    21d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    21d8:	bf98      	it	ls
    21da:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    21de:	d809      	bhi.n	21f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    21e0:	4643      	mov	r3, r8
    21e2:	4669      	mov	r1, sp
    21e4:	4842      	ldr	r0, [pc, #264]	; (22f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    21e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    21e8:	f7fe fba2 	bl	930 <MPSL_IRQ_RADIO_Handler+0xb8>
    21ec:	ea59 0000 	orrs.w	r0, r9, r0
    21f0:	d129      	bne.n	2246 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    21f2:	e042      	b.n	227a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    21f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    21f6:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    21fa:	9002      	str	r0, [sp, #8]
    21fc:	aa09      	add	r2, sp, #36	; 0x24
    21fe:	a907      	add	r1, sp, #28
    2200:	4650      	mov	r0, sl
    2202:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    2206:	f000 fd83 	bl	2d10 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    220a:	f001 fa91 	bl	3730 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    220e:	f000 fd63 	bl	2cd8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2212:	4681      	mov	r9, r0
    2214:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2218:	2820      	cmp	r0, #32
    221a:	d03b      	beq.n	2294 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    221c:	68e0      	ldr	r0, [r4, #12]
    221e:	1d40      	adds	r0, r0, #5
    2220:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2224:	9900      	ldr	r1, [sp, #0]
    2226:	4281      	cmp	r1, r0
    2228:	d902      	bls.n	2230 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    222a:	9902      	ldr	r1, [sp, #8]
    222c:	1c49      	adds	r1, r1, #1
    222e:	9102      	str	r1, [sp, #8]
    2230:	e9dd 2100 	ldrd	r2, r1, [sp]
    2234:	1a89      	subs	r1, r1, r2
    2236:	9000      	str	r0, [sp, #0]
    2238:	4408      	add	r0, r1
    223a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    223e:	9001      	str	r0, [sp, #4]
    2240:	201f      	movs	r0, #31
    2242:	f88d 000c 	strb.w	r0, [sp, #12]
    2246:	9800      	ldr	r0, [sp, #0]
    2248:	f009 fccb 	bl	bbe2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    224c:	1c41      	adds	r1, r0, #1
    224e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    2252:	f89d 200c 	ldrb.w	r2, [sp, #12]
    2256:	4410      	add	r0, r2
    2258:	4408      	add	r0, r1
    225a:	e9c6 0704 	strd	r0, r7, [r6, #16]
    225e:	b125      	cbz	r5, 226a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    2260:	2100      	movs	r1, #0
    2262:	f240 601a 	movw	r0, #1562	; 0x61a
    2266:	f3af 8000 	nop.w
    226a:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    226e:	4a21      	ldr	r2, [pc, #132]	; (22f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    2270:	9b02      	ldr	r3, [sp, #8]
    2272:	fbe3 1002 	umlal	r1, r0, r3, r2
    2276:	e9c6 1004 	strd	r1, r0, [r6, #16]
    227a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    227e:	f88d 0014 	strb.w	r0, [sp, #20]
    2282:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2286:	2800      	cmp	r0, #0
    2288:	f47f af29 	bne.w	20de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    228c:	b00d      	add	sp, #52	; 0x34
    228e:	2001      	movs	r0, #1
    2290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2294:	f108 0809 	add.w	r8, r8, #9
    2298:	f1ba 0f00 	cmp.w	sl, #0
    229c:	d016      	beq.n	22cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    229e:	f001 fd47 	bl	3d30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    22a2:	b998      	cbnz	r0, 22cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    22a4:	f001 fc12 	bl	3acc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    22a8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    22ac:	bf08      	it	eq
    22ae:	200d      	moveq	r0, #13
    22b0:	d00b      	beq.n	22ca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    22b2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    22b6:	3856      	subs	r0, #86	; 0x56
    22b8:	bf08      	it	eq
    22ba:	201c      	moveq	r0, #28
    22bc:	d005      	beq.n	22ca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    22be:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    22c2:	389f      	subs	r0, #159	; 0x9f
    22c4:	bf14      	ite	ne
    22c6:	4638      	movne	r0, r7
    22c8:	2032      	moveq	r0, #50	; 0x32
    22ca:	4480      	add	r8, r0
    22cc:	9807      	ldr	r0, [sp, #28]
    22ce:	4581      	cmp	r9, r0
    22d0:	bf84      	itt	hi
    22d2:	eba9 0000 	subhi.w	r0, r9, r0
    22d6:	4480      	addhi	r8, r0
    22d8:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    22dc:	e7a2      	b.n	2224 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    22de:	0000      	.short	0x0000
    22e0:	e000ed04 	.word	0xe000ed04
    22e4:	00000000 	.word	0x00000000
    22e8:	20000e54 	.word	0x20000e54
    22ec:	20000dd4 	.word	0x20000dd4
    22f0:	0f424000 	.word	0x0f424000
    22f4:	1e848000 	.word	0x1e848000

000022f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    22f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22fc:	4d92      	ldr	r5, [pc, #584]	; (2548 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    22fe:	b08c      	sub	sp, #48	; 0x30
    2300:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2304:	2000      	movs	r0, #0
    2306:	9008      	str	r0, [sp, #32]
    2308:	9006      	str	r0, [sp, #24]
    230a:	2001      	movs	r0, #1
    230c:	4c8f      	ldr	r4, [pc, #572]	; (254c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    230e:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    2312:	f04f 0800 	mov.w	r8, #0
    2316:	4607      	mov	r7, r0
    2318:	9007      	str	r0, [sp, #28]
    231a:	b124      	cbz	r4, 2326 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    231c:	2100      	movs	r1, #0
    231e:	f240 70e4 	movw	r0, #2020	; 0x7e4
    2322:	f3af 8000 	nop.w
    2326:	9807      	ldr	r0, [sp, #28]
    2328:	2800      	cmp	r0, #0
    232a:	d03c      	beq.n	23a6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    232c:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    2330:	b124      	cbz	r4, 233c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    2332:	2100      	movs	r1, #0
    2334:	f240 70e9 	movw	r0, #2025	; 0x7e9
    2338:	f3af 8000 	nop.w
    233c:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    2340:	2240      	movs	r2, #64	; 0x40
    2342:	ea27 060a 	bic.w	r6, r7, sl
    2346:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    234a:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    234e:	4683      	mov	fp, r0
    2350:	f009 fda1 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2354:	b124      	cbz	r4, 2360 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    2356:	2100      	movs	r1, #0
    2358:	f240 505e 	movw	r0, #1374	; 0x55e
    235c:	f3af 8000 	nop.w
    2360:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2364:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    2368:	4428      	add	r0, r5
    236a:	4429      	add	r1, r5
    236c:	9000      	str	r0, [sp, #0]
    236e:	8c0a      	ldrh	r2, [r1, #32]
    2370:	8402      	strh	r2, [r0, #32]
    2372:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2376:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    237a:	b124      	cbz	r4, 2386 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    237c:	2100      	movs	r1, #0
    237e:	f240 5062 	movw	r0, #1378	; 0x562
    2382:	f3af 8000 	nop.w
    2386:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    238a:	f88d 0008 	strb.w	r0, [sp, #8]
    238e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2392:	b178      	cbz	r0, 23b4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    2394:	2c00      	cmp	r4, #0
    2396:	bf1c      	itt	ne
    2398:	2100      	movne	r1, #0
    239a:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    239e:	d0bc      	beq.n	231a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    23a0:	f3af 8000 	nop.w
    23a4:	e7b9      	b.n	231a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    23a6:	486a      	ldr	r0, [pc, #424]	; (2550 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    23a8:	2800      	cmp	r0, #0
    23aa:	bf18      	it	ne
    23ac:	f3af 8000 	nopne.w
    23b0:	b662      	cpsie	i
    23b2:	e7bb      	b.n	232c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    23b4:	b124      	cbz	r4, 23c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    23b6:	2100      	movs	r1, #0
    23b8:	f240 70f3 	movw	r0, #2035	; 0x7f3
    23bc:	f3af 8000 	nop.w
    23c0:	980c      	ldr	r0, [sp, #48]	; 0x30
    23c2:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    23c6:	2803      	cmp	r0, #3
    23c8:	d17e      	bne.n	24c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    23ca:	9a00      	ldr	r2, [sp, #0]
    23cc:	990c      	ldr	r1, [sp, #48]	; 0x30
    23ce:	f892 0020 	ldrb.w	r0, [r2, #32]
    23d2:	4288      	cmp	r0, r1
    23d4:	bf14      	ite	ne
    23d6:	f04f 0a00 	movne.w	sl, #0
    23da:	f04f 0a01 	moveq.w	sl, #1
    23de:	f102 0c20 	add.w	ip, r2, #32
    23e2:	4683      	mov	fp, r0
    23e4:	2220      	movs	r2, #32
    23e6:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    23ea:	e003      	b.n	23f4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    23ec:	4602      	mov	r2, r0
    23ee:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    23f2:	7840      	ldrb	r0, [r0, #1]
    23f4:	4288      	cmp	r0, r1
    23f6:	d002      	beq.n	23fe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    23f8:	2820      	cmp	r0, #32
    23fa:	d00a      	beq.n	2412 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    23fc:	e7f6      	b.n	23ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    23fe:	2820      	cmp	r0, #32
    2400:	d007      	beq.n	2412 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    2402:	4583      	cmp	fp, r0
    2404:	d107      	bne.n	2416 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    2406:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    240a:	7840      	ldrb	r0, [r0, #1]
    240c:	f88c 0000 	strb.w	r0, [ip]
    2410:	e007      	b.n	2422 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    2412:	4640      	mov	r0, r8
    2414:	e00c      	b.n	2430 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    2416:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    241a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    241e:	7840      	ldrb	r0, [r0, #1]
    2420:	7048      	strb	r0, [r1, #1]
    2422:	b124      	cbz	r4, 242e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    2424:	2100      	movs	r1, #0
    2426:	f240 40c9 	movw	r0, #1225	; 0x4c9
    242a:	f3af 8000 	nop.w
    242e:	4638      	mov	r0, r7
    2430:	46c3      	mov	fp, r8
    2432:	ea10 0f0a 	tst.w	r0, sl
    2436:	bf18      	it	ne
    2438:	46bb      	movne	fp, r7
    243a:	2800      	cmp	r0, #0
    243c:	d04e      	beq.n	24dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    243e:	b124      	cbz	r4, 244a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    2440:	2100      	movs	r1, #0
    2442:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    2446:	f3af 8000 	nop.w
    244a:	4632      	mov	r2, r6
    244c:	2001      	movs	r0, #1
    244e:	990c      	ldr	r1, [sp, #48]	; 0x30
    2450:	f7ff f964 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    2454:	b124      	cbz	r4, 2460 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    2456:	2100      	movs	r1, #0
    2458:	f640 0001 	movw	r0, #2049	; 0x801
    245c:	f3af 8000 	nop.w
    2460:	483c      	ldr	r0, [pc, #240]	; (2554 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    2462:	2800      	cmp	r0, #0
    2464:	bf18      	it	ne
    2466:	f3af 8000 	nopne.w
    246a:	f3ef 8010 	mrs	r0, PRIMASK
    246e:	b672      	cpsid	i
    2470:	9007      	str	r0, [sp, #28]
    2472:	b124      	cbz	r4, 247e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    2474:	2100      	movs	r1, #0
    2476:	f640 0006 	movw	r0, #2054	; 0x806
    247a:	f3af 8000 	nop.w
    247e:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2482:	f88d 0008 	strb.w	r0, [sp, #8]
    2486:	f89d 0008 	ldrb.w	r0, [sp, #8]
    248a:	b138      	cbz	r0, 249c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    248c:	2c00      	cmp	r4, #0
    248e:	bf1c      	itt	ne
    2490:	2100      	movne	r1, #0
    2492:	f640 000a 	movwne	r0, #2058	; 0x80a
    2496:	f43f af40 	beq.w	231a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    249a:	e781      	b.n	23a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    249c:	f1bb 0f00 	cmp.w	fp, #0
    24a0:	d009      	beq.n	24b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    24a2:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    24a6:	2820      	cmp	r0, #32
    24a8:	d105      	bne.n	24b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    24aa:	4631      	mov	r1, r6
    24ac:	2002      	movs	r0, #2
    24ae:	f7ff f967 	bl	1780 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f8>
    24b2:	9006      	str	r0, [sp, #24]
    24b4:	b1f8      	cbz	r0, 24f6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    24b6:	b124      	cbz	r4, 24c2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    24b8:	2100      	movs	r1, #0
    24ba:	f640 001e 	movw	r0, #2078	; 0x81e
    24be:	f3af 8000 	nop.w
    24c2:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    24c6:	e000      	b.n	24ca <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    24c8:	e008      	b.n	24dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    24ca:	ea27 0000 	bic.w	r0, r7, r0
    24ce:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    24d2:	20ff      	movs	r0, #255	; 0xff
    24d4:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    24d8:	2001      	movs	r0, #1
    24da:	9008      	str	r0, [sp, #32]
    24dc:	b124      	cbz	r4, 24e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    24de:	2100      	movs	r1, #0
    24e0:	f640 0027 	movw	r0, #2087	; 0x827
    24e4:	f3af 8000 	nop.w
    24e8:	9806      	ldr	r0, [sp, #24]
    24ea:	4e1b      	ldr	r6, [pc, #108]	; (2558 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    24ec:	2802      	cmp	r0, #2
    24ee:	d009      	beq.n	2504 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    24f0:	2801      	cmp	r0, #1
    24f2:	d010      	beq.n	2516 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    24f4:	e014      	b.n	2520 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    24f6:	b19c      	cbz	r4, 2520 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    24f8:	2100      	movs	r1, #0
    24fa:	f640 0019 	movw	r0, #2073	; 0x819
    24fe:	f3af 8000 	nop.w
    2502:	e7ec      	b.n	24de <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2504:	f000 fd6e 	bl	2fe4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2508:	68a9      	ldr	r1, [r5, #8]
    250a:	1a08      	subs	r0, r1, r0
    250c:	f009 fb69 	bl	bbe2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2510:	6871      	ldr	r1, [r6, #4]
    2512:	b921      	cbnz	r1, 251e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    2514:	e004      	b.n	2520 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2516:	6871      	ldr	r1, [r6, #4]
    2518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    251c:	b101      	cbz	r1, 2520 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    251e:	4788      	blx	r1
    2520:	9807      	ldr	r0, [sp, #28]
    2522:	b148      	cbz	r0, 2538 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    2524:	b124      	cbz	r4, 2530 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    2526:	2100      	movs	r1, #0
    2528:	f640 003c 	movw	r0, #2108	; 0x83c
    252c:	f3af 8000 	nop.w
    2530:	9808      	ldr	r0, [sp, #32]
    2532:	b00d      	add	sp, #52	; 0x34
    2534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2538:	4805      	ldr	r0, [pc, #20]	; (2550 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    253a:	2800      	cmp	r0, #0
    253c:	bf18      	it	ne
    253e:	f3af 8000 	nopne.w
    2542:	b662      	cpsie	i
    2544:	e7ee      	b.n	2524 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    2546:	0000      	.short	0x0000
    2548:	20000e54 	.word	0x20000e54
	...
    2558:	20000038 	.word	0x20000038

0000255c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    255c:	2820      	cmp	r0, #32
    255e:	bf24      	itt	cs
    2560:	2000      	movcs	r0, #0
    2562:	4770      	bxcs	lr
    2564:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2568:	4b03      	ldr	r3, [pc, #12]	; (2578 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    256a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    256e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2572:	6042      	str	r2, [r0, #4]
    2574:	2001      	movs	r0, #1
    2576:	4770      	bx	lr
    2578:	20000a54 	.word	0x20000a54

0000257c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    257c:	b510      	push	{r4, lr}
    257e:	2820      	cmp	r0, #32
    2580:	d211      	bcs.n	25a6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2582:	490e      	ldr	r1, [pc, #56]	; (25bc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2584:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2588:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    258c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2590:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2594:	b13b      	cbz	r3, 25a6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2596:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    259a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    259e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    25a2:	2a01      	cmp	r2, #1
    25a4:	d001      	beq.n	25aa <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    25a6:	2000      	movs	r0, #0
    25a8:	bd10      	pop	{r4, pc}
    25aa:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    25ae:	4601      	mov	r1, r0
    25b0:	2000      	movs	r0, #0
    25b2:	f7ff f8b3 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    25b6:	2001      	movs	r0, #1
    25b8:	bd10      	pop	{r4, pc}
    25ba:	0000      	.short	0x0000
    25bc:	20000e54 	.word	0x20000e54

000025c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    25c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25c4:	4e86      	ldr	r6, [pc, #536]	; (27e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    25c6:	4680      	mov	r8, r0
    25c8:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    25cc:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    25d0:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    25d4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    25d8:	2800      	cmp	r0, #0
    25da:	d071      	beq.n	26c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    25dc:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    25e0:	4d80      	ldr	r5, [pc, #512]	; (27e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    25e2:	b125      	cbz	r5, 25ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    25e4:	2100      	movs	r1, #0
    25e6:	f640 30ae 	movw	r0, #2990	; 0xbae
    25ea:	f3af 8000 	nop.w
    25ee:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    25f2:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    25f6:	2801      	cmp	r0, #1
    25f8:	d018      	beq.n	262c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    25fa:	b2c0      	uxtb	r0, r0
    25fc:	2804      	cmp	r0, #4
    25fe:	bf1c      	itt	ne
    2600:	2805      	cmpne	r0, #5
    2602:	2806      	cmpne	r0, #6
    2604:	d061      	beq.n	26ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    2606:	b12d      	cbz	r5, 2614 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2608:	f04f 0100 	mov.w	r1, #0
    260c:	f640 30ba 	movw	r0, #3002	; 0xbba
    2610:	f3af 8000 	nop.w
    2614:	f001 fd3e 	bl	4094 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2618:	b125      	cbz	r5, 2624 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    261a:	2100      	movs	r1, #0
    261c:	f640 30be 	movw	r0, #3006	; 0xbbe
    2620:	f3af 8000 	nop.w
    2624:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2628:	2801      	cmp	r0, #1
    262a:	d1e6      	bne.n	25fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    262c:	2401      	movs	r4, #1
    262e:	b125      	cbz	r5, 263a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2630:	2100      	movs	r1, #0
    2632:	f640 30c5 	movw	r0, #3013	; 0xbc5
    2636:	f3af 8000 	nop.w
    263a:	2c00      	cmp	r4, #0
    263c:	d04b      	beq.n	26d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    263e:	2000      	movs	r0, #0
    2640:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2644:	b125      	cbz	r5, 2650 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    2646:	2100      	movs	r1, #0
    2648:	f640 30ca 	movw	r0, #3018	; 0xbca
    264c:	f3af 8000 	nop.w
    2650:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    2654:	2001      	movs	r0, #1
    2656:	ea20 090b 	bic.w	r9, r0, fp
    265a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    265e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2662:	2240      	movs	r2, #64	; 0x40
    2664:	f009 fc17 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2668:	b125      	cbz	r5, 2674 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    266a:	2100      	movs	r1, #0
    266c:	f240 505e 	movw	r0, #1374	; 0x55e
    2670:	f3af 8000 	nop.w
    2674:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    2678:	eb00 0a06 	add.w	sl, r0, r6
    267c:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    2680:	4430      	add	r0, r6
    2682:	8c01      	ldrh	r1, [r0, #32]
    2684:	f8aa 1020 	strh.w	r1, [sl, #32]
    2688:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    268c:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    2690:	b125      	cbz	r5, 269c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    2692:	2100      	movs	r1, #0
    2694:	f240 5062 	movw	r0, #1378	; 0x562
    2698:	f3af 8000 	nop.w
    269c:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    26a0:	f88d 0000 	strb.w	r0, [sp]
    26a4:	f89d 0000 	ldrb.w	r0, [sp]
    26a8:	b1e0      	cbz	r0, 26e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    26aa:	2d00      	cmp	r5, #0
    26ac:	bf1c      	itt	ne
    26ae:	2100      	movne	r1, #0
    26b0:	f44f 603d 	movne.w	r0, #3024	; 0xbd0
    26b4:	d0bb      	beq.n	262e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    26b6:	bf00      	nop
    26b8:	f3af 8000 	nop.w
    26bc:	e7b7      	b.n	262e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    26be:	e7ff      	b.n	26c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    26c0:	f640 31a5 	movw	r1, #2981	; 0xba5
    26c4:	2070      	movs	r0, #112	; 0x70
    26c6:	f001 fbab 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26ca:	464a      	mov	r2, r9
    26cc:	4641      	mov	r1, r8
    26ce:	2001      	movs	r0, #1
    26d0:	f7ff f824 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    26d4:	e7a0      	b.n	2618 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    26d6:	4844      	ldr	r0, [pc, #272]	; (27e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    26d8:	2800      	cmp	r0, #0
    26da:	bf18      	it	ne
    26dc:	f3af 8000 	nopne.w
    26e0:	b662      	cpsie	i
    26e2:	e7ac      	b.n	263e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    26e4:	b125      	cbz	r5, 26f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    26e6:	2100      	movs	r1, #0
    26e8:	f640 30d4 	movw	r0, #3028	; 0xbd4
    26ec:	f3af 8000 	nop.w
    26f0:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    26f4:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    26f8:	4640      	mov	r0, r8
    26fa:	461c      	mov	r4, r3
    26fc:	f04f 0b20 	mov.w	fp, #32
    2700:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2704:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2708:	e004      	b.n	2714 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    270a:	46a3      	mov	fp, r4
    270c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2710:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2714:	4284      	cmp	r4, r0
    2716:	d002      	beq.n	271e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    2718:	2c20      	cmp	r4, #32
    271a:	d02b      	beq.n	2774 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    271c:	e7f5      	b.n	270a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    271e:	2c20      	cmp	r4, #32
    2720:	d028      	beq.n	2774 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    2722:	42a3      	cmp	r3, r4
    2724:	d104      	bne.n	2730 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    2726:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    272a:	7840      	ldrb	r0, [r0, #1]
    272c:	7008      	strb	r0, [r1, #0]
    272e:	e005      	b.n	273c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    2730:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2734:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2738:	7840      	ldrb	r0, [r0, #1]
    273a:	7048      	strb	r0, [r1, #1]
    273c:	f1ba 0f00 	cmp.w	sl, #0
    2740:	d011      	beq.n	2766 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    2742:	b125      	cbz	r5, 274e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2744:	2100      	movs	r1, #0
    2746:	f240 40c1 	movw	r0, #1217	; 0x4c1
    274a:	f3af 8000 	nop.w
    274e:	f89a 0000 	ldrb.w	r0, [sl]
    2752:	42a0      	cmp	r0, r4
    2754:	d107      	bne.n	2766 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    2756:	b125      	cbz	r5, 2762 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    2758:	2100      	movs	r1, #0
    275a:	f240 40c4 	movw	r0, #1220	; 0x4c4
    275e:	f3af 8000 	nop.w
    2762:	f88a b000 	strb.w	fp, [sl]
    2766:	b15d      	cbz	r5, 2780 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2768:	2100      	movs	r1, #0
    276a:	f240 40c9 	movw	r0, #1225	; 0x4c9
    276e:	f3af 8000 	nop.w
    2772:	e000      	b.n	2776 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    2774:	b125      	cbz	r5, 2780 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2776:	2100      	movs	r1, #0
    2778:	f640 30d8 	movw	r0, #3032	; 0xbd8
    277c:	f3af 8000 	nop.w
    2780:	481a      	ldr	r0, [pc, #104]	; (27ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    2782:	2800      	cmp	r0, #0
    2784:	bf18      	it	ne
    2786:	f3af 8000 	nopne.w
    278a:	f3ef 8410 	mrs	r4, PRIMASK
    278e:	b672      	cpsid	i
    2790:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2794:	f88d 0000 	strb.w	r0, [sp]
    2798:	f89d 0000 	ldrb.w	r0, [sp]
    279c:	b138      	cbz	r0, 27ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    279e:	2d00      	cmp	r5, #0
    27a0:	bf1c      	itt	ne
    27a2:	2100      	movne	r1, #0
    27a4:	f640 30de 	movwne	r0, #3038	; 0xbde
    27a8:	f43f af41 	beq.w	262e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    27ac:	e784      	b.n	26b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    27ae:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    27b2:	20ff      	movs	r0, #255	; 0xff
    27b4:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    27b8:	b154      	cbz	r4, 27d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    27ba:	2d00      	cmp	r5, #0
    27bc:	bf08      	it	eq
    27be:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27c2:	2100      	movs	r1, #0
    27c4:	f640 30eb 	movw	r0, #3051	; 0xbeb
    27c8:	f3af 8000 	nop.w
    27cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27d0:	4805      	ldr	r0, [pc, #20]	; (27e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    27d2:	2800      	cmp	r0, #0
    27d4:	bf18      	it	ne
    27d6:	f3af 8000 	nopne.w
    27da:	b662      	cpsie	i
    27dc:	e7ed      	b.n	27ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    27de:	0000      	.short	0x0000
    27e0:	20000e54 	.word	0x20000e54
	...

000027f0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    27f0:	b570      	push	{r4, r5, r6, lr}
    27f2:	460d      	mov	r5, r1
    27f4:	4606      	mov	r6, r0
    27f6:	f001 fa89 	bl	3d0c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    27fa:	480f      	ldr	r0, [pc, #60]	; (2838 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    27fc:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    2800:	2400      	movs	r4, #0
    2802:	3880      	subs	r0, #128	; 0x80
    2804:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2808:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    280c:	b129      	cbz	r1, 281a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    280e:	1c61      	adds	r1, r4, #1
    2810:	b2cc      	uxtb	r4, r1
    2812:	2c20      	cmp	r4, #32
    2814:	d3f8      	bcc.n	2808 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2816:	2020      	movs	r0, #32
    2818:	bd70      	pop	{r4, r5, r6, pc}
    281a:	4808      	ldr	r0, [pc, #32]	; (283c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    281c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    2820:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    2824:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2828:	4621      	mov	r1, r4
    282a:	6045      	str	r5, [r0, #4]
    282c:	2001      	movs	r0, #1
    282e:	f7fe ff75 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    2832:	4620      	mov	r0, r4
    2834:	bd70      	pop	{r4, r5, r6, pc}
    2836:	0000      	.short	0x0000
    2838:	20000e54 	.word	0x20000e54
    283c:	20000a54 	.word	0x20000a54

00002840 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2844:	b083      	sub	sp, #12
    2846:	f000 fbcd 	bl	2fe4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    284a:	4605      	mov	r5, r0
    284c:	f000 fe9c 	bl	3588 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2850:	4c84      	ldr	r4, [pc, #528]	; (2a64 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    2852:	6860      	ldr	r0, [r4, #4]
    2854:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2858:	bf1c      	itt	ne
    285a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    285e:	6060      	strne	r0, [r4, #4]
    2860:	7fa0      	ldrb	r0, [r4, #30]
    2862:	f8df 9204 	ldr.w	r9, [pc, #516]	; 2a68 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    2866:	b990      	cbnz	r0, 288e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    2868:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    286c:	1a40      	subs	r0, r0, r1
    286e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2872:	f44f 710c 	mov.w	r1, #560	; 0x230
    2876:	f009 f9df 	bl	bc38 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    287a:	68e1      	ldr	r1, [r4, #12]
    287c:	4408      	add	r0, r1
    287e:	1a28      	subs	r0, r5, r0
    2880:	0200      	lsls	r0, r0, #8
    2882:	17c1      	asrs	r1, r0, #31
    2884:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2888:	1200      	asrs	r0, r0, #8
    288a:	0fc0      	lsrs	r0, r0, #31
    288c:	d012      	beq.n	28b4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    288e:	7e60      	ldrb	r0, [r4, #25]
    2890:	b320      	cbz	r0, 28dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    2892:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2896:	f88d 0000 	strb.w	r0, [sp]
    289a:	f89d 0000 	ldrb.w	r0, [sp]
    289e:	b1e8      	cbz	r0, 28dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    28a0:	f000 fcce 	bl	3240 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    28a4:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    28a8:	b1f0      	cbz	r0, 28e8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    28aa:	f240 31f5 	movw	r1, #1013	; 0x3f5
    28ae:	2070      	movs	r0, #112	; 0x70
    28b0:	f001 fab6 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28b4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    28b8:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    28bc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    28c0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    28c4:	6840      	ldr	r0, [r0, #4]
    28c6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    28ca:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    28ce:	2108      	movs	r1, #8
    28d0:	4790      	blx	r2
    28d2:	f240 31dd 	movw	r1, #989	; 0x3dd
    28d6:	2070      	movs	r0, #112	; 0x70
    28d8:	f001 faa2 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28dc:	1ce8      	adds	r0, r5, #3
    28de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28e2:	f000 fba5 	bl	3030 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    28e6:	e7dd      	b.n	28a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    28e8:	2001      	movs	r0, #1
    28ea:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    28ee:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    28f2:	2820      	cmp	r0, #32
    28f4:	d021      	beq.n	293a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    28f6:	f894 802d 	ldrb.w	r8, [r4, #45]	; 0x2d
    28fa:	2020      	movs	r0, #32
    28fc:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2900:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2904:	2000      	movs	r0, #0
    2906:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    290a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    290e:	6020      	str	r0, [r4, #0]
    2910:	f000 ff14 	bl	373c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    2914:	7720      	strb	r0, [r4, #28]
    2916:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    291a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    291e:	1907      	adds	r7, r0, r4
    2920:	f897 0020 	ldrb.w	r0, [r7, #32]
    2924:	2820      	cmp	r0, #32
    2926:	d058      	beq.n	29da <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2928:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    292c:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    2930:	f899 001a 	ldrb.w	r0, [r9, #26]
    2934:	2801      	cmp	r0, #1
    2936:	d005      	beq.n	2944 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    2938:	e04f      	b.n	29da <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    293a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    293e:	2070      	movs	r0, #112	; 0x70
    2940:	f001 fa6e 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2944:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    2948:	aa01      	add	r2, sp, #4
    294a:	4669      	mov	r1, sp
    294c:	4658      	mov	r0, fp
    294e:	f000 f9df 	bl	2d10 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2952:	f000 feed 	bl	3730 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    2956:	f000 f9bf 	bl	2cd8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    295a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    295e:	2820      	cmp	r0, #32
    2960:	d004      	beq.n	296c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    2962:	68e0      	ldr	r0, [r4, #12]
    2964:	1d40      	adds	r0, r0, #5
    2966:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    296a:	e01d      	b.n	29a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    296c:	f105 0a09 	add.w	sl, r5, #9
    2970:	f1bb 0f00 	cmp.w	fp, #0
    2974:	d016      	beq.n	29a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    2976:	f001 f9db 	bl	3d30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    297a:	b998      	cbnz	r0, 29a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    297c:	f001 f8a6 	bl	3acc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2980:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2984:	bf08      	it	eq
    2986:	200d      	moveq	r0, #13
    2988:	d00b      	beq.n	29a2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    298a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    298e:	3856      	subs	r0, #86	; 0x56
    2990:	bf08      	it	eq
    2992:	201c      	moveq	r0, #28
    2994:	d005      	beq.n	29a2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    2996:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    299a:	389f      	subs	r0, #159	; 0x9f
    299c:	bf14      	ite	ne
    299e:	2000      	movne	r0, #0
    29a0:	2032      	moveq	r0, #50	; 0x32
    29a2:	4482      	add	sl, r0
    29a4:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    29a8:	f8d9 2008 	ldr.w	r2, [r9, #8]
    29ac:	1a81      	subs	r1, r0, r2
    29ae:	0209      	lsls	r1, r1, #8
    29b0:	17cb      	asrs	r3, r1, #31
    29b2:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    29b6:	1209      	asrs	r1, r1, #8
    29b8:	2900      	cmp	r1, #0
    29ba:	dc0e      	bgt.n	29da <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    29bc:	f109 0308 	add.w	r3, r9, #8
    29c0:	4282      	cmp	r2, r0
    29c2:	d202      	bcs.n	29ca <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    29c4:	6899      	ldr	r1, [r3, #8]
    29c6:	1e49      	subs	r1, r1, #1
    29c8:	6099      	str	r1, [r3, #8]
    29ca:	e9d3 2100 	ldrd	r2, r1, [r3]
    29ce:	1a89      	subs	r1, r1, r2
    29d0:	6018      	str	r0, [r3, #0]
    29d2:	4408      	add	r0, r1
    29d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    29d8:	6058      	str	r0, [r3, #4]
    29da:	4631      	mov	r1, r6
    29dc:	2001      	movs	r0, #1
    29de:	f7fe fecf 	bl	1780 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f8>
    29e2:	ea5f 0900 	movs.w	r9, r0
    29e6:	d0f8      	beq.n	29da <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    29e8:	4820      	ldr	r0, [pc, #128]	; (2a6c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    29ea:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    29ee:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    29f2:	2802      	cmp	r0, #2
    29f4:	d104      	bne.n	2a00 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    29f6:	4632      	mov	r2, r6
    29f8:	4641      	mov	r1, r8
    29fa:	2006      	movs	r0, #6
    29fc:	f7fe fe8e 	bl	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
    2a00:	20ff      	movs	r0, #255	; 0xff
    2a02:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2a06:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    2a0a:	4e19      	ldr	r6, [pc, #100]	; (2a70 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    2a0c:	2820      	cmp	r0, #32
    2a0e:	bf1c      	itt	ne
    2a10:	7870      	ldrbne	r0, [r6, #1]
    2a12:	f001 fad9 	blne	3fc8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2a16:	7f20      	ldrb	r0, [r4, #28]
    2a18:	b120      	cbz	r0, 2a24 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    2a1a:	f000 fe6b 	bl	36f4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2a1e:	2000      	movs	r0, #0
    2a20:	7720      	strb	r0, [r4, #28]
    2a22:	7760      	strb	r0, [r4, #29]
    2a24:	f1b9 0f02 	cmp.w	r9, #2
    2a28:	d011      	beq.n	2a4e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    2a2a:	f1b9 0f01 	cmp.w	r9, #1
    2a2e:	bf1c      	itt	ne
    2a30:	b003      	addne	sp, #12
    2a32:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2a3a:	6871      	ldr	r1, [r6, #4]
    2a3c:	2900      	cmp	r1, #0
    2a3e:	bf04      	itt	eq
    2a40:	b003      	addeq	sp, #12
    2a42:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a46:	b003      	add	sp, #12
    2a48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a4c:	4708      	bx	r1
    2a4e:	68a0      	ldr	r0, [r4, #8]
    2a50:	1b40      	subs	r0, r0, r5
    2a52:	f009 f8c6 	bl	bbe2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2a56:	6871      	ldr	r1, [r6, #4]
    2a58:	2900      	cmp	r1, #0
    2a5a:	d1f4      	bne.n	2a46 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    2a5c:	b003      	add	sp, #12
    2a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a62:	0000      	.short	0x0000
    2a64:	20000e54 	.word	0x20000e54
    2a68:	20000a54 	.word	0x20000a54
    2a6c:	20000dd4 	.word	0x20000dd4
    2a70:	20000038 	.word	0x20000038

00002a74 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2a74:	b570      	push	{r4, r5, r6, lr}
    2a76:	4c42      	ldr	r4, [pc, #264]	; (2b80 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    2a78:	4605      	mov	r5, r0
    2a7a:	b082      	sub	sp, #8
    2a7c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2a80:	2820      	cmp	r0, #32
    2a82:	d008      	beq.n	2a96 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    2a84:	6860      	ldr	r0, [r4, #4]
    2a86:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2a8a:	d009      	beq.n	2aa0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    2a8c:	f640 21d9 	movw	r1, #2777	; 0xad9
    2a90:	2070      	movs	r0, #112	; 0x70
    2a92:	f001 f9c5 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a96:	f640 21d8 	movw	r1, #2776	; 0xad8
    2a9a:	2070      	movs	r0, #112	; 0x70
    2a9c:	f001 f9c0 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2aa0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2aa4:	4937      	ldr	r1, [pc, #220]	; (2b84 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    2aa6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2aaa:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    2aae:	68b0      	ldr	r0, [r6, #8]
    2ab0:	f009 f897 	bl	bbe2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2ab4:	4602      	mov	r2, r0
    2ab6:	8af0      	ldrh	r0, [r6, #22]
    2ab8:	7d31      	ldrb	r1, [r6, #20]
    2aba:	4b33      	ldr	r3, [pc, #204]	; (2b88 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    2abc:	4408      	add	r0, r1
    2abe:	1c40      	adds	r0, r0, #1
    2ac0:	1811      	adds	r1, r2, r0
    2ac2:	429a      	cmp	r2, r3
    2ac4:	d817      	bhi.n	2af6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    2ac6:	4a31      	ldr	r2, [pc, #196]	; (2b8c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    2ac8:	4290      	cmp	r0, r2
    2aca:	dc1b      	bgt.n	2b04 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    2acc:	f1c2 0c00 	rsb	ip, r2, #0
    2ad0:	4560      	cmp	r0, ip
    2ad2:	db1e      	blt.n	2b12 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    2ad4:	0056      	lsls	r6, r2, #1
    2ad6:	428e      	cmp	r6, r1
    2ad8:	bfdc      	itt	le
    2ada:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2ade:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2ae2:	dd05      	ble.n	2af0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2ae4:	2900      	cmp	r1, #0
    2ae6:	bfbc      	itt	lt
    2ae8:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2aec:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2af0:	1948      	adds	r0, r1, r5
    2af2:	4299      	cmp	r1, r3
    2af4:	d904      	bls.n	2b00 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    2af6:	f240 519e 	movw	r1, #1438	; 0x59e
    2afa:	2070      	movs	r0, #112	; 0x70
    2afc:	f001 f990 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b00:	4295      	cmp	r5, r2
    2b02:	dd04      	ble.n	2b0e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    2b04:	f240 519f 	movw	r1, #1439	; 0x59f
    2b08:	2070      	movs	r0, #112	; 0x70
    2b0a:	f001 f989 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b0e:	4565      	cmp	r5, ip
    2b10:	da04      	bge.n	2b1c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    2b12:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    2b16:	2070      	movs	r0, #112	; 0x70
    2b18:	f001 f982 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b1c:	4286      	cmp	r6, r0
    2b1e:	bfdc      	itt	le
    2b20:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2b24:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2b28:	dd05      	ble.n	2b36 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    2b2a:	2800      	cmp	r0, #0
    2b2c:	bfbc      	itt	lt
    2b2e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2b32:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2b36:	aa01      	add	r2, sp, #4
    2b38:	4669      	mov	r1, sp
    2b3a:	f000 f8e9 	bl	2d10 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2b3e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2b42:	280f      	cmp	r0, #15
    2b44:	bf8c      	ite	hi
    2b46:	2001      	movhi	r0, #1
    2b48:	2000      	movls	r0, #0
    2b4a:	9900      	ldr	r1, [sp, #0]
    2b4c:	4408      	add	r0, r1
    2b4e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2b52:	6061      	str	r1, [r4, #4]
    2b54:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2b58:	f88d 0000 	strb.w	r0, [sp]
    2b5c:	f89d 0000 	ldrb.w	r0, [sp]
    2b60:	2800      	cmp	r0, #0
    2b62:	bf04      	itt	eq
    2b64:	b002      	addeq	sp, #8
    2b66:	bd70      	popeq	{r4, r5, r6, pc}
    2b68:	2005      	movs	r0, #5
    2b6a:	f000 fbe7 	bl	333c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2b6e:	2800      	cmp	r0, #0
    2b70:	bf1c      	itt	ne
    2b72:	b002      	addne	sp, #8
    2b74:	bd70      	popne	{r4, r5, r6, pc}
    2b76:	f44f 612e 	mov.w	r1, #2784	; 0xae0
    2b7a:	2070      	movs	r0, #112	; 0x70
    2b7c:	f001 f950 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b80:	20000e54 	.word	0x20000e54
    2b84:	20000a54 	.word	0x20000a54
    2b88:	1e847fff 	.word	0x1e847fff
    2b8c:	0f424000 	.word	0x0f424000

00002b90 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2b90:	b570      	push	{r4, r5, r6, lr}
    2b92:	4c1c      	ldr	r4, [pc, #112]	; (2c04 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    2b94:	2120      	movs	r1, #32
    2b96:	f884 1020 	strb.w	r1, [r4, #32]
    2b9a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2b9e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2ba2:	2000      	movs	r0, #0
    2ba4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2ba8:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    2bac:	1e42      	subs	r2, r0, #1
    2bae:	e9c4 0200 	strd	r0, r2, [r4]
    2bb2:	77a0      	strb	r0, [r4, #30]
    2bb4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    2bb8:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2bbc:	7720      	strb	r0, [r4, #28]
    2bbe:	7760      	strb	r0, [r4, #29]
    2bc0:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    2bc4:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    2bc8:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2bcc:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2bd0:	2210      	movs	r2, #16
    2bd2:	7088      	strb	r0, [r1, #2]
    2bd4:	f801 0f04 	strb.w	r0, [r1, #4]!
    2bd8:	1e52      	subs	r2, r2, #1
    2bda:	d1fa      	bne.n	2bd2 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    2bdc:	f000 fdb8 	bl	3750 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    2be0:	4d09      	ldr	r5, [pc, #36]	; (2c08 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    2be2:	2601      	movs	r6, #1
    2be4:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2be8:	20ff      	movs	r0, #255	; 0xff
    2bea:	7028      	strb	r0, [r5, #0]
    2bec:	4807      	ldr	r0, [pc, #28]	; (2c0c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2bee:	f001 f9cd 	bl	3f8c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2bf2:	7068      	strb	r0, [r5, #1]
    2bf4:	f001 fa38 	bl	4068 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2bf8:	60a8      	str	r0, [r5, #8]
    2bfa:	f000 fd33 	bl	3664 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2bfe:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    2c02:	bd70      	pop	{r4, r5, r6, pc}
    2c04:	20000e54 	.word	0x20000e54
    2c08:	20000038 	.word	0x20000038
    2c0c:	00001645 	.word	0x00001645

00002c10 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    2c10:	b500      	push	{lr}
    2c12:	b083      	sub	sp, #12
    2c14:	4668      	mov	r0, sp
    2c16:	f000 f9eb 	bl	2ff0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2c1a:	9800      	ldr	r0, [sp, #0]
    2c1c:	f008 ffe1 	bl	bbe2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2c20:	9a01      	ldr	r2, [sp, #4]
    2c22:	4b03      	ldr	r3, [pc, #12]	; (2c30 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    2c24:	2100      	movs	r1, #0
    2c26:	fbe2 0103 	umlal	r0, r1, r2, r3
    2c2a:	b003      	add	sp, #12
    2c2c:	bd00      	pop	{pc}
    2c2e:	0000      	.short	0x0000
    2c30:	1e848000 	.word	0x1e848000

00002c34 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    2c34:	b570      	push	{r4, r5, r6, lr}
    2c36:	4606      	mov	r6, r0
    2c38:	b082      	sub	sp, #8
    2c3a:	461d      	mov	r5, r3
    2c3c:	4610      	mov	r0, r2
    2c3e:	f008 ffd0 	bl	bbe2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2c42:	4604      	mov	r4, r0
    2c44:	4668      	mov	r0, sp
    2c46:	f000 f9d3 	bl	2ff0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2c4a:	4920      	ldr	r1, [pc, #128]	; (2ccc <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    2c4c:	9801      	ldr	r0, [sp, #4]
    2c4e:	fba0 0201 	umull	r0, r2, r0, r1
    2c52:	1a30      	subs	r0, r6, r0
    2c54:	bf44      	itt	mi
    2c56:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    2c5a:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    2c5e:	d504      	bpl.n	2c6a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    2c60:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2c64:	2070      	movs	r0, #112	; 0x70
    2c66:	f001 f8db 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c6a:	4288      	cmp	r0, r1
    2c6c:	db04      	blt.n	2c78 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    2c6e:	f640 4101 	movw	r1, #3073	; 0xc01
    2c72:	2070      	movs	r0, #112	; 0x70
    2c74:	f001 f8d4 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c78:	4a15      	ldr	r2, [pc, #84]	; (2cd0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    2c7a:	1a21      	subs	r1, r4, r0
    2c7c:	2300      	movs	r3, #0
    2c7e:	1a8a      	subs	r2, r1, r2
    2c80:	f173 0200 	sbcs.w	r2, r3, #0
    2c84:	d318      	bcc.n	2cb8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    2c86:	f8df c048 	ldr.w	ip, [pc, #72]	; 2cd0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    2c8a:	1b02      	subs	r2, r0, r4
    2c8c:	ebb2 0c0c 	subs.w	ip, r2, ip
    2c90:	f173 0300 	sbcs.w	r3, r3, #0
    2c94:	d310      	bcc.n	2cb8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    2c96:	4b0f      	ldr	r3, [pc, #60]	; (2cd4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    2c98:	428b      	cmp	r3, r1
    2c9a:	bf3e      	ittt	cc
    2c9c:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    2ca0:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    2ca4:	1901      	addcc	r1, r0, r4
    2ca6:	d307      	bcc.n	2cb8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    2ca8:	4293      	cmp	r3, r2
    2caa:	d20a      	bcs.n	2cc2 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    2cac:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    2cb0:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    2cb4:	4408      	add	r0, r1
    2cb6:	4241      	negs	r1, r0
    2cb8:	f101 000f 	add.w	r0, r1, #15
    2cbc:	b002      	add	sp, #8
    2cbe:	1a28      	subs	r0, r5, r0
    2cc0:	bd70      	pop	{r4, r5, r6, pc}
    2cc2:	f640 21fa 	movw	r1, #2810	; 0xafa
    2cc6:	2070      	movs	r0, #112	; 0x70
    2cc8:	f001 f8aa 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ccc:	1e848000 	.word	0x1e848000
    2cd0:	0f424000 	.word	0x0f424000
    2cd4:	1e847fff 	.word	0x1e847fff

00002cd8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2cd8:	0b41      	lsrs	r1, r0, #13
    2cda:	f248 6237 	movw	r2, #34359	; 0x8637
    2cde:	4351      	muls	r1, r2
    2ce0:	0c0a      	lsrs	r2, r1, #16
    2ce2:	4b09      	ldr	r3, [pc, #36]	; (2d08 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2ce4:	0251      	lsls	r1, r2, #9
    2ce6:	fb02 0203 	mla	r2, r2, r3, r0
    2cea:	4808      	ldr	r0, [pc, #32]	; (2d0c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2cec:	4350      	muls	r0, r2
    2cee:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    2cf2:	306e      	adds	r0, #110	; 0x6e
    2cf4:	0d40      	lsrs	r0, r0, #21
    2cf6:	425b      	negs	r3, r3
    2cf8:	fb10 f303 	smulbb	r3, r0, r3
    2cfc:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2d00:	bf88      	it	hi
    2d02:	1c49      	addhi	r1, r1, #1
    2d04:	4408      	add	r0, r1
    2d06:	4770      	bx	lr
    2d08:	ffffc2f7 	.word	0xffffc2f7
    2d0c:	00010c6f 	.word	0x00010c6f

00002d10 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2d10:	0b43      	lsrs	r3, r0, #13
    2d12:	f248 6c37 	movw	ip, #34359	; 0x8637
    2d16:	fb03 f30c 	mul.w	r3, r3, ip
    2d1a:	b430      	push	{r4, r5}
    2d1c:	0c1b      	lsrs	r3, r3, #16
    2d1e:	f8df c044 	ldr.w	ip, [pc, #68]	; 2d64 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    2d22:	025c      	lsls	r4, r3, #9
    2d24:	fb03 030c 	mla	r3, r3, ip, r0
    2d28:	480f      	ldr	r0, [pc, #60]	; (2d68 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2d2a:	4358      	muls	r0, r3
    2d2c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2d30:	eb04 000c 	add.w	r0, r4, ip
    2d34:	f643 5409 	movw	r4, #15625	; 0x3d09
    2d38:	fb1c f404 	smulbb	r4, ip, r4
    2d3c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2d40:	f643 5508 	movw	r5, #15624	; 0x3d08
    2d44:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2d48:	442c      	add	r4, r5
    2d4a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2d4e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2d52:	bf84      	itt	hi
    2d54:	f04f 0c00 	movhi.w	ip, #0
    2d58:	1c40      	addhi	r0, r0, #1
    2d5a:	6008      	str	r0, [r1, #0]
    2d5c:	f882 c000 	strb.w	ip, [r2]
    2d60:	bc30      	pop	{r4, r5}
    2d62:	4770      	bx	lr
    2d64:	ffffc2f7 	.word	0xffffc2f7
    2d68:	00010c6f 	.word	0x00010c6f

00002d6c <MPSL_IRQ_RTC0_Handler>:
    2d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d70:	4d3b      	ldr	r5, [pc, #236]	; (2e60 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2d72:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2d76:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 2e64 <MPSL_IRQ_RTC0_Handler+0xf8>
    2d7a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2d7e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2d82:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2d86:	f04f 0400 	mov.w	r4, #0
    2d8a:	d019      	beq.n	2dc0 <MPSL_IRQ_RTC0_Handler+0x54>
    2d8c:	4836      	ldr	r0, [pc, #216]	; (2e68 <MPSL_IRQ_RTC0_Handler+0xfc>)
    2d8e:	6800      	ldr	r0, [r0, #0]
    2d90:	b1b0      	cbz	r0, 2dc0 <MPSL_IRQ_RTC0_Handler+0x54>
    2d92:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    2d96:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2d9a:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    2d9e:	f8d8 1000 	ldr.w	r1, [r8]
    2da2:	1a40      	subs	r0, r0, r1
    2da4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2da8:	2802      	cmp	r0, #2
    2daa:	d302      	bcc.n	2db2 <MPSL_IRQ_RTC0_Handler+0x46>
    2dac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2db0:	d906      	bls.n	2dc0 <MPSL_IRQ_RTC0_Handler+0x54>
    2db2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2db6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2dba:	2004      	movs	r0, #4
    2dbc:	f7fe fe9c 	bl	1af8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2dc0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2dc4:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2dc8:	d01a      	beq.n	2e00 <MPSL_IRQ_RTC0_Handler+0x94>
    2dca:	4828      	ldr	r0, [pc, #160]	; (2e6c <MPSL_IRQ_RTC0_Handler+0x100>)
    2dcc:	6800      	ldr	r0, [r0, #0]
    2dce:	b1b8      	cbz	r0, 2e00 <MPSL_IRQ_RTC0_Handler+0x94>
    2dd0:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    2dd4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2dd8:	4825      	ldr	r0, [pc, #148]	; (2e70 <MPSL_IRQ_RTC0_Handler+0x104>)
    2dda:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2dde:	f8d8 1000 	ldr.w	r1, [r8]
    2de2:	1a40      	subs	r0, r0, r1
    2de4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2de8:	2802      	cmp	r0, #2
    2dea:	d302      	bcc.n	2df2 <MPSL_IRQ_RTC0_Handler+0x86>
    2dec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2df0:	d906      	bls.n	2e00 <MPSL_IRQ_RTC0_Handler+0x94>
    2df2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2df6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2dfa:	2005      	movs	r0, #5
    2dfc:	f7fe fe7c 	bl	1af8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2e00:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2e04:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2e08:	d01a      	beq.n	2e40 <MPSL_IRQ_RTC0_Handler+0xd4>
    2e0a:	481a      	ldr	r0, [pc, #104]	; (2e74 <MPSL_IRQ_RTC0_Handler+0x108>)
    2e0c:	6800      	ldr	r0, [r0, #0]
    2e0e:	b1b8      	cbz	r0, 2e40 <MPSL_IRQ_RTC0_Handler+0xd4>
    2e10:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    2e14:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2e18:	4817      	ldr	r0, [pc, #92]	; (2e78 <MPSL_IRQ_RTC0_Handler+0x10c>)
    2e1a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2e1e:	f8d8 1000 	ldr.w	r1, [r8]
    2e22:	1a40      	subs	r0, r0, r1
    2e24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2e28:	2802      	cmp	r0, #2
    2e2a:	d302      	bcc.n	2e32 <MPSL_IRQ_RTC0_Handler+0xc6>
    2e2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2e30:	d906      	bls.n	2e40 <MPSL_IRQ_RTC0_Handler+0xd4>
    2e32:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2e36:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2e3a:	2006      	movs	r0, #6
    2e3c:	f7fe fe5c 	bl	1af8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2e40:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    2e44:	2800      	cmp	r0, #0
    2e46:	bf08      	it	eq
    2e48:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e4c:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    2e50:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2e54:	4809      	ldr	r0, [pc, #36]	; (2e7c <MPSL_IRQ_RTC0_Handler+0x110>)
    2e56:	68c1      	ldr	r1, [r0, #12]
    2e58:	1c49      	adds	r1, r1, #1
    2e5a:	60c1      	str	r1, [r0, #12]
    2e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e60:	4000b000 	.word	0x4000b000
    2e64:	4000b504 	.word	0x4000b504
    2e68:	4000b140 	.word	0x4000b140
    2e6c:	4000b144 	.word	0x4000b144
    2e70:	4000b004 	.word	0x4000b004
    2e74:	4000b148 	.word	0x4000b148
    2e78:	4000b008 	.word	0x4000b008
    2e7c:	20000044 	.word	0x20000044

00002e80 <MPSL_IRQ_TIMER0_Handler>:
    2e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e84:	4d38      	ldr	r5, [pc, #224]	; (2f68 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    2e86:	7828      	ldrb	r0, [r5, #0]
    2e88:	2804      	cmp	r0, #4
    2e8a:	d068      	beq.n	2f5e <MPSL_IRQ_TIMER0_Handler+0xde>
    2e8c:	1ca8      	adds	r0, r5, #2
    2e8e:	2201      	movs	r2, #1
    2e90:	7801      	ldrb	r1, [r0, #0]
    2e92:	b159      	cbz	r1, 2eac <MPSL_IRQ_TIMER0_Handler+0x2c>
    2e94:	2901      	cmp	r1, #1
    2e96:	bf08      	it	eq
    2e98:	706a      	strbeq	r2, [r5, #1]
    2e9a:	d002      	beq.n	2ea2 <MPSL_IRQ_TIMER0_Handler+0x22>
    2e9c:	7869      	ldrb	r1, [r5, #1]
    2e9e:	2900      	cmp	r1, #0
    2ea0:	d058      	beq.n	2f54 <MPSL_IRQ_TIMER0_Handler+0xd4>
    2ea2:	2102      	movs	r1, #2
    2ea4:	7001      	strb	r1, [r0, #0]
    2ea6:	7840      	ldrb	r0, [r0, #1]
    2ea8:	f000 fafe 	bl	34a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2eac:	4c2f      	ldr	r4, [pc, #188]	; (2f6c <MPSL_IRQ_TIMER0_Handler+0xec>)
    2eae:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2eb2:	f04f 0800 	mov.w	r8, #0
    2eb6:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    2eba:	f44f 7780 	mov.w	r7, #256	; 0x100
    2ebe:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    2ec2:	d00a      	beq.n	2eda <MPSL_IRQ_TIMER0_Handler+0x5a>
    2ec4:	482a      	ldr	r0, [pc, #168]	; (2f70 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2ec6:	6800      	ldr	r0, [r0, #0]
    2ec8:	b138      	cbz	r0, 2eda <MPSL_IRQ_TIMER0_Handler+0x5a>
    2eca:	2003      	movs	r0, #3
    2ecc:	f000 faec 	bl	34a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2ed0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2ed4:	2003      	movs	r0, #3
    2ed6:	f7fe fe0f 	bl	1af8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2eda:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2ede:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2ee2:	d00a      	beq.n	2efa <MPSL_IRQ_TIMER0_Handler+0x7a>
    2ee4:	4823      	ldr	r0, [pc, #140]	; (2f74 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    2ee6:	6800      	ldr	r0, [r0, #0]
    2ee8:	b138      	cbz	r0, 2efa <MPSL_IRQ_TIMER0_Handler+0x7a>
    2eea:	2002      	movs	r0, #2
    2eec:	f000 fadc 	bl	34a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2ef0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2ef4:	2002      	movs	r0, #2
    2ef6:	f7fe fdff 	bl	1af8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2efa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2efe:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2f02:	d00a      	beq.n	2f1a <MPSL_IRQ_TIMER0_Handler+0x9a>
    2f04:	481c      	ldr	r0, [pc, #112]	; (2f78 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    2f06:	6800      	ldr	r0, [r0, #0]
    2f08:	b138      	cbz	r0, 2f1a <MPSL_IRQ_TIMER0_Handler+0x9a>
    2f0a:	2001      	movs	r0, #1
    2f0c:	f000 facc 	bl	34a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2f10:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2f14:	2001      	movs	r0, #1
    2f16:	f7fe fdef 	bl	1af8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f1a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2f1e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2f22:	bf08      	it	eq
    2f24:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f28:	4814      	ldr	r0, [pc, #80]	; (2f7c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    2f2a:	6800      	ldr	r0, [r0, #0]
    2f2c:	2800      	cmp	r0, #0
    2f2e:	bf08      	it	eq
    2f30:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f34:	2000      	movs	r0, #0
    2f36:	f000 fab7 	bl	34a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2f3a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2f3e:	2004      	movs	r0, #4
    2f40:	7028      	strb	r0, [r5, #0]
    2f42:	f8c5 8004 	str.w	r8, [r5, #4]
    2f46:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    2f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2f4e:	2000      	movs	r0, #0
    2f50:	f7fe bdd2 	b.w	1af8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f54:	f240 41a3 	movw	r1, #1187	; 0x4a3
    2f58:	206c      	movs	r0, #108	; 0x6c
    2f5a:	f000 ff61 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2f62:	2007      	movs	r0, #7
    2f64:	f7fe bdc8 	b.w	1af8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f68:	20000044 	.word	0x20000044
    2f6c:	40008000 	.word	0x40008000
    2f70:	4000814c 	.word	0x4000814c
    2f74:	40008148 	.word	0x40008148
    2f78:	40008144 	.word	0x40008144
    2f7c:	40008140 	.word	0x40008140
    2f80:	2201      	movs	r2, #1
    2f82:	0211      	lsls	r1, r2, #8
    2f84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2f88:	2000      	movs	r0, #0
    2f8a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2f8e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    2f92:	f3bf 8f4f 	dsb	sy
    2f96:	f3bf 8f6f 	isb	sy
    2f9a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    2f9e:	490e      	ldr	r1, [pc, #56]	; (2fd8 <MPSL_IRQ_TIMER0_Handler+0x158>)
    2fa0:	f841 2f04 	str.w	r2, [r1, #4]!
    2fa4:	1e43      	subs	r3, r0, #1
    2fa6:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    2faa:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    2fae:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    2fb2:	4b0a      	ldr	r3, [pc, #40]	; (2fdc <MPSL_IRQ_TIMER0_Handler+0x15c>)
    2fb4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2fb8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2fbc:	1d1b      	adds	r3, r3, #4
    2fbe:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2fc2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fc6:	1d1b      	adds	r3, r3, #4
    2fc8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2fcc:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2fd0:	60ca      	str	r2, [r1, #12]
    2fd2:	4903      	ldr	r1, [pc, #12]	; (2fe0 <MPSL_IRQ_TIMER0_Handler+0x160>)
    2fd4:	7048      	strb	r0, [r1, #1]
    2fd6:	4770      	bx	lr
    2fd8:	40008000 	.word	0x40008000
    2fdc:	40008004 	.word	0x40008004
    2fe0:	20000044 	.word	0x20000044

00002fe4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2fe4:	4801      	ldr	r0, [pc, #4]	; (2fec <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2fe6:	6800      	ldr	r0, [r0, #0]
    2fe8:	4770      	bx	lr
    2fea:	0000      	.short	0x0000
    2fec:	4000b504 	.word	0x4000b504

00002ff0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    2ff0:	b430      	push	{r4, r5}
    2ff2:	f3ef 8c10 	mrs	ip, PRIMASK
    2ff6:	b672      	cpsid	i
    2ff8:	2500      	movs	r5, #0
    2ffa:	4b0b      	ldr	r3, [pc, #44]	; (3028 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    2ffc:	4a0b      	ldr	r2, [pc, #44]	; (302c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    2ffe:	bf00      	nop
    3000:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    3004:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    3008:	b12c      	cbz	r4, 3016 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    300a:	68d1      	ldr	r1, [r2, #12]
    300c:	1c49      	adds	r1, r1, #1
    300e:	60d1      	str	r1, [r2, #12]
    3010:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    3014:	e7f4      	b.n	3000 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    3016:	68d2      	ldr	r2, [r2, #12]
    3018:	f1bc 0f00 	cmp.w	ip, #0
    301c:	d100      	bne.n	3020 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    301e:	b662      	cpsie	i
    3020:	e9c0 1200 	strd	r1, r2, [r0]
    3024:	bc30      	pop	{r4, r5}
    3026:	4770      	bx	lr
    3028:	4000b000 	.word	0x4000b000
    302c:	20000044 	.word	0x20000044

00003030 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    3030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3034:	4e46      	ldr	r6, [pc, #280]	; (3150 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    3036:	4605      	mov	r5, r0
    3038:	1eb7      	subs	r7, r6, #2
    303a:	7833      	ldrb	r3, [r6, #0]
    303c:	68b9      	ldr	r1, [r7, #8]
    303e:	2b01      	cmp	r3, #1
    3040:	bf04      	itt	eq
    3042:	42a9      	cmpeq	r1, r5
    3044:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3048:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    304c:	4a41      	ldr	r2, [pc, #260]	; (3154 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    304e:	6010      	str	r0, [r2, #0]
    3050:	4a42      	ldr	r2, [pc, #264]	; (315c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    3052:	4841      	ldr	r0, [pc, #260]	; (3158 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    3054:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3058:	f102 0c04 	add.w	ip, r2, #4
    305c:	f04f 0400 	mov.w	r4, #0
    3060:	2b00      	cmp	r3, #0
    3062:	d062      	beq.n	312a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    3064:	483e      	ldr	r0, [pc, #248]	; (3160 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3066:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    306a:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    306e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3072:	bf00      	nop
    3074:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    3078:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    307c:	f04f 0801 	mov.w	r8, #1
    3080:	2800      	cmp	r0, #0
    3082:	bf01      	itttt	eq
    3084:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    3088:	2800      	cmpeq	r0, #0
    308a:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    308e:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    3092:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3096:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    309a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    309e:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    30a2:	4830      	ldr	r0, [pc, #192]	; (3164 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    30a4:	f8d0 c000 	ldr.w	ip, [r0]
    30a8:	eba5 0c0c 	sub.w	ip, r5, ip
    30ac:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    30b0:	f1bc 0f02 	cmp.w	ip, #2
    30b4:	d344      	bcc.n	3140 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    30b6:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    30ba:	d841      	bhi.n	3140 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    30bc:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    30c0:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    30c4:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    30c8:	b12b      	cbz	r3, 30d6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    30ca:	6802      	ldr	r2, [r0, #0]
    30cc:	1a8a      	subs	r2, r1, r2
    30ce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    30d2:	2a02      	cmp	r2, #2
    30d4:	d3f9      	bcc.n	30ca <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    30d6:	f8c7 8004 	str.w	r8, [r7, #4]
    30da:	703c      	strb	r4, [r7, #0]
    30dc:	f7ff ff50 	bl	2f80 <MPSL_IRQ_TIMER0_Handler+0x100>
    30e0:	4821      	ldr	r0, [pc, #132]	; (3168 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    30e2:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    30e6:	f364 0101 	bfi	r1, r4, #0, #2
    30ea:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    30ee:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    30f2:	2102      	movs	r1, #2
    30f4:	f361 0201 	bfi	r2, r1, #0, #2
    30f8:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    30fc:	2104      	movs	r1, #4
    30fe:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    3102:	f8c0 800c 	str.w	r8, [r0, #12]
    3106:	6879      	ldr	r1, [r7, #4]
    3108:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    310c:	1580      	asrs	r0, r0, #22
    310e:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    3112:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    3116:	4915      	ldr	r1, [pc, #84]	; (316c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    3118:	05c0      	lsls	r0, r0, #23
    311a:	6008      	str	r0, [r1, #0]
    311c:	2004      	movs	r0, #4
    311e:	60bd      	str	r5, [r7, #8]
    3120:	7070      	strb	r0, [r6, #1]
    3122:	f886 8000 	strb.w	r8, [r6]
    3126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    312a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    312e:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    3132:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3136:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    313a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    313e:	e799      	b.n	3074 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    3140:	2000      	movs	r0, #0
    3142:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3146:	f240 2197 	movw	r1, #663	; 0x297
    314a:	206c      	movs	r0, #108	; 0x6c
    314c:	f000 fe68 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3150:	20000046 	.word	0x20000046
    3154:	4001f508 	.word	0x4001f508
    3158:	fffbfffd 	.word	0xfffbfffd
    315c:	4000b000 	.word	0x4000b000
    3160:	fffafffd 	.word	0xfffafffd
    3164:	4000b504 	.word	0x4000b504
    3168:	40008000 	.word	0x40008000
    316c:	4001f504 	.word	0x4001f504

00003170 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3170:	b570      	push	{r4, r5, r6, lr}
    3172:	4c2a      	ldr	r4, [pc, #168]	; (321c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    3174:	68a1      	ldr	r1, [r4, #8]
    3176:	4281      	cmp	r1, r0
    3178:	bf14      	ite	ne
    317a:	2201      	movne	r2, #1
    317c:	2200      	moveq	r2, #0
    317e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 3220 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    3182:	f89c 5000 	ldrb.w	r5, [ip]
    3186:	2d02      	cmp	r5, #2
    3188:	d002      	beq.n	3190 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    318a:	2a00      	cmp	r2, #0
    318c:	d034      	beq.n	31f8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    318e:	e002      	b.n	3196 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3190:	2a00      	cmp	r2, #0
    3192:	bf08      	it	eq
    3194:	bd70      	popeq	{r4, r5, r6, pc}
    3196:	7862      	ldrb	r2, [r4, #1]
    3198:	b39a      	cbz	r2, 3202 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    319a:	4b22      	ldr	r3, [pc, #136]	; (3224 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    319c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    31a0:	601a      	str	r2, [r3, #0]
    31a2:	4b21      	ldr	r3, [pc, #132]	; (3228 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    31a4:	1392      	asrs	r2, r2, #14
    31a6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    31aa:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    31ae:	2200      	movs	r2, #0
    31b0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    31b4:	4a1d      	ldr	r2, [pc, #116]	; (322c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    31b6:	6816      	ldr	r6, [r2, #0]
    31b8:	1b86      	subs	r6, r0, r6
    31ba:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    31be:	2e02      	cmp	r6, #2
    31c0:	d324      	bcc.n	320c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    31c2:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    31c6:	d821      	bhi.n	320c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    31c8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    31cc:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    31d0:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    31d4:	b12d      	cbz	r5, 31e2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    31d6:	6813      	ldr	r3, [r2, #0]
    31d8:	1acb      	subs	r3, r1, r3
    31da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    31de:	2b02      	cmp	r3, #2
    31e0:	d3f9      	bcc.n	31d6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    31e2:	4b13      	ldr	r3, [pc, #76]	; (3230 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    31e4:	2102      	movs	r1, #2
    31e6:	074a      	lsls	r2, r1, #29
    31e8:	601a      	str	r2, [r3, #0]
    31ea:	60a0      	str	r0, [r4, #8]
    31ec:	2004      	movs	r0, #4
    31ee:	f88c 0001 	strb.w	r0, [ip, #1]
    31f2:	f88c 1000 	strb.w	r1, [ip]
    31f6:	bd70      	pop	{r4, r5, r6, pc}
    31f8:	f240 21a5 	movw	r1, #677	; 0x2a5
    31fc:	206c      	movs	r0, #108	; 0x6c
    31fe:	f000 fe0f 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3202:	f240 21a9 	movw	r1, #681	; 0x2a9
    3206:	206c      	movs	r0, #108	; 0x6c
    3208:	f000 fe0a 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    320c:	2000      	movs	r0, #0
    320e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3212:	f240 21b5 	movw	r1, #693	; 0x2b5
    3216:	206c      	movs	r0, #108	; 0x6c
    3218:	f000 fe02 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    321c:	20000044 	.word	0x20000044
    3220:	20000046 	.word	0x20000046
    3224:	4001f508 	.word	0x4001f508
    3228:	4000b000 	.word	0x4000b000
    322c:	4000b504 	.word	0x4000b504
    3230:	4001f504 	.word	0x4001f504

00003234 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3234:	4801      	ldr	r0, [pc, #4]	; (323c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    3236:	6880      	ldr	r0, [r0, #8]
    3238:	4770      	bx	lr
    323a:	0000      	.short	0x0000
    323c:	20000044 	.word	0x20000044

00003240 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3244:	4836      	ldr	r0, [pc, #216]	; (3320 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    3246:	4a35      	ldr	r2, [pc, #212]	; (331c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    3248:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    324c:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 3324 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    3250:	1d03      	adds	r3, r0, #4
    3252:	2100      	movs	r1, #0
    3254:	f89c 4000 	ldrb.w	r4, [ip]
    3258:	b184      	cbz	r4, 327c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    325a:	4a33      	ldr	r2, [pc, #204]	; (3328 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    325c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3260:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3264:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3268:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    326c:	2301      	movs	r3, #1
    326e:	2a00      	cmp	r2, #0
    3270:	bf04      	itt	eq
    3272:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    3276:	2800      	cmpeq	r0, #0
    3278:	d111      	bne.n	329e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    327a:	e00a      	b.n	3292 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    327c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3280:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3284:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3288:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    328c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3290:	e7ea      	b.n	3268 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    3292:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3296:	f44f 6000 	mov.w	r0, #2048	; 0x800
    329a:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    329e:	2c02      	cmp	r4, #2
    32a0:	d004      	beq.n	32ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    32a2:	f240 21c1 	movw	r1, #705	; 0x2c1
    32a6:	206c      	movs	r0, #108	; 0x6c
    32a8:	f000 fdba 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32ac:	4e1f      	ldr	r6, [pc, #124]	; (332c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    32ae:	6830      	ldr	r0, [r6, #0]
    32b0:	4c1f      	ldr	r4, [pc, #124]	; (3330 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    32b2:	1cc0      	adds	r0, r0, #3
    32b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    32b8:	68a2      	ldr	r2, [r4, #8]
    32ba:	4d1e      	ldr	r5, [pc, #120]	; (3334 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    32bc:	4290      	cmp	r0, r2
    32be:	d00b      	beq.n	32d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    32c0:	6837      	ldr	r7, [r6, #0]
    32c2:	1bd7      	subs	r7, r2, r7
    32c4:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    32c8:	2f04      	cmp	r7, #4
    32ca:	d305      	bcc.n	32d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    32cc:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    32d0:	d802      	bhi.n	32d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    32d2:	f7ff fead 	bl	3030 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    32d6:	e01b      	b.n	3310 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    32d8:	6830      	ldr	r0, [r6, #0]
    32da:	1a10      	subs	r0, r2, r0
    32dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    32e0:	2802      	cmp	r0, #2
    32e2:	d313      	bcc.n	330c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    32e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    32e8:	d810      	bhi.n	330c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    32ea:	4a13      	ldr	r2, [pc, #76]	; (3338 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    32ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    32f0:	6010      	str	r0, [r2, #0]
    32f2:	6063      	str	r3, [r4, #4]
    32f4:	7021      	strb	r1, [r4, #0]
    32f6:	606b      	str	r3, [r5, #4]
    32f8:	60eb      	str	r3, [r5, #12]
    32fa:	0040      	lsls	r0, r0, #1
    32fc:	1f11      	subs	r1, r2, #4
    32fe:	6008      	str	r0, [r1, #0]
    3300:	2004      	movs	r0, #4
    3302:	f88c 0001 	strb.w	r0, [ip, #1]
    3306:	f88c 3000 	strb.w	r3, [ip]
    330a:	e001      	b.n	3310 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    330c:	6063      	str	r3, [r4, #4]
    330e:	7021      	strb	r1, [r4, #0]
    3310:	6860      	ldr	r0, [r4, #4]
    3312:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    331a:	0000      	.short	0x0000
    331c:	fffbfffd 	.word	0xfffbfffd
    3320:	4000b000 	.word	0x4000b000
    3324:	20000046 	.word	0x20000046
    3328:	fffafffd 	.word	0xfffafffd
    332c:	4000b504 	.word	0x4000b504
    3330:	20000044 	.word	0x20000044
    3334:	40008000 	.word	0x40008000
    3338:	4001f508 	.word	0x4001f508

0000333c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    333c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3340:	4a54      	ldr	r2, [pc, #336]	; (3494 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    3342:	2500      	movs	r5, #0
    3344:	2401      	movs	r4, #1
    3346:	f892 c000 	ldrb.w	ip, [r2]
    334a:	7853      	ldrb	r3, [r2, #1]
    334c:	f44f 76a0 	mov.w	r6, #320	; 0x140
    3350:	2807      	cmp	r0, #7
    3352:	d27d      	bcs.n	3450 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    3354:	e8df f000 	tbb	[pc, r0]
    3358:	04040404 	.word	0x04040404
    335c:	00585858 	.word	0x00585858
    3360:	4a4d      	ldr	r2, [pc, #308]	; (3498 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    3362:	6897      	ldr	r7, [r2, #8]
    3364:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    3368:	bf04      	itt	eq
    336a:	7852      	ldrbeq	r2, [r2, #1]
    336c:	2a00      	cmpeq	r2, #0
    336e:	d003      	beq.n	3378 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    3370:	f1bc 0f02 	cmp.w	ip, #2
    3374:	d005      	beq.n	3382 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3376:	e026      	b.n	33c6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    3378:	f240 3151 	movw	r1, #849	; 0x351
    337c:	206c      	movs	r0, #108	; 0x6c
    337e:	f000 fd4f 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3382:	1f1a      	subs	r2, r3, #4
    3384:	b2d2      	uxtb	r2, r2
    3386:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    338a:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    338e:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    3392:	2200      	movs	r2, #0
    3394:	f1bc 0f01 	cmp.w	ip, #1
    3398:	d003      	beq.n	33a2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    339a:	f1bc 0f02 	cmp.w	ip, #2
    339e:	d008      	beq.n	33b2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    33a0:	e00e      	b.n	33c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    33a2:	2b04      	cmp	r3, #4
    33a4:	bf24      	itt	cs
    33a6:	6837      	ldrcs	r7, [r6, #0]
    33a8:	2f00      	cmpcs	r7, #0
    33aa:	bf08      	it	eq
    33ac:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    33b0:	e006      	b.n	33c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    33b2:	2b04      	cmp	r3, #4
    33b4:	bf24      	itt	cs
    33b6:	6837      	ldrcs	r7, [r6, #0]
    33b8:	2f00      	cmpcs	r7, #0
    33ba:	bf08      	it	eq
    33bc:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    33c0:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    33c4:	d1e5      	bne.n	3392 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    33c6:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 349c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    33ca:	f100 0210 	add.w	r2, r0, #16
    33ce:	fa04 f202 	lsl.w	r2, r4, r2
    33d2:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    33d6:	f04f 0340 	mov.w	r3, #64	; 0x40
    33da:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    33de:	b2db      	uxtb	r3, r3
    33e0:	4463      	add	r3, ip
    33e2:	601c      	str	r4, [r3, #0]
    33e4:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    33e8:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    33ec:	eba1 0303 	sub.w	r3, r1, r3
    33f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    33f4:	2b03      	cmp	r3, #3
    33f6:	bf26      	itte	cs
    33f8:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    33fc:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    3400:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    3404:	d237      	bcs.n	3476 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    3406:	e03c      	b.n	3482 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    3408:	f1bc 0f00 	cmp.w	ip, #0
    340c:	d006      	beq.n	341c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    340e:	4283      	cmp	r3, r0
    3410:	d104      	bne.n	341c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3412:	f240 3171 	movw	r1, #881	; 0x371
    3416:	206c      	movs	r0, #108	; 0x6c
    3418:	f000 fd02 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    341c:	1f02      	subs	r2, r0, #4
    341e:	b2d3      	uxtb	r3, r2
    3420:	2b03      	cmp	r3, #3
    3422:	d304      	bcc.n	342e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    3424:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    3428:	206c      	movs	r0, #108	; 0x6c
    342a:	f000 fcf9 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    342e:	f8df c070 	ldr.w	ip, [pc, #112]	; 34a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    3432:	f103 0210 	add.w	r2, r3, #16
    3436:	fa04 f202 	lsl.w	r2, r4, r2
    343a:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    343e:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    3442:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3446:	f84c 5003 	str.w	r5, [ip, r3]
    344a:	4b16      	ldr	r3, [pc, #88]	; (34a4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    344c:	681b      	ldr	r3, [r3, #0]
    344e:	e000      	b.n	3452 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    3450:	e01a      	b.n	3488 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    3452:	1f00      	subs	r0, r0, #4
    3454:	1acb      	subs	r3, r1, r3
    3456:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    345a:	b2c0      	uxtb	r0, r0
    345c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3460:	2b02      	cmp	r3, #2
    3462:	d30b      	bcc.n	347c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    3464:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3468:	d808      	bhi.n	347c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    346a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    346e:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    3472:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    3476:	2001      	movs	r0, #1
    3478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    347c:	2100      	movs	r1, #0
    347e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3482:	2000      	movs	r0, #0
    3484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3488:	f240 3175 	movw	r1, #885	; 0x375
    348c:	206c      	movs	r0, #108	; 0x6c
    348e:	f000 fcc7 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3492:	0000      	.short	0x0000
    3494:	20000046 	.word	0x20000046
    3498:	20000044 	.word	0x20000044
    349c:	40008000 	.word	0x40008000
    34a0:	4000b000 	.word	0x4000b000
    34a4:	4000b504 	.word	0x4000b504

000034a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    34a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    34ac:	2601      	movs	r6, #1
    34ae:	2700      	movs	r7, #0
    34b0:	f44f 78a0 	mov.w	r8, #320	; 0x140
    34b4:	2807      	cmp	r0, #7
    34b6:	d251      	bcs.n	355c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    34b8:	e8df f000 	tbb	[pc, r0]
    34bc:	04040404 	.word	0x04040404
    34c0:	00191919 	.word	0x00191919
    34c4:	f100 0110 	add.w	r1, r0, #16
    34c8:	fa06 f201 	lsl.w	r2, r6, r1
    34cc:	4926      	ldr	r1, [pc, #152]	; (3568 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    34ce:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    34d2:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    34d6:	2200      	movs	r2, #0
    34d8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    34dc:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    34e0:	508f      	str	r7, [r1, r2]
    34e2:	4922      	ldr	r1, [pc, #136]	; (356c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    34e4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    34e8:	9000      	str	r0, [sp, #0]
    34ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    34ee:	4d20      	ldr	r5, [pc, #128]	; (3570 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    34f0:	1f01      	subs	r1, r0, #4
    34f2:	b2cc      	uxtb	r4, r1
    34f4:	7829      	ldrb	r1, [r5, #0]
    34f6:	b179      	cbz	r1, 3518 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    34f8:	786a      	ldrb	r2, [r5, #1]
    34fa:	4282      	cmp	r2, r0
    34fc:	d10c      	bne.n	3518 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    34fe:	4a1d      	ldr	r2, [pc, #116]	; (3574 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3500:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3504:	6010      	str	r0, [r2, #0]
    3506:	2901      	cmp	r1, #1
    3508:	bf08      	it	eq
    350a:	f7ff fd39 	bleq	2f80 <MPSL_IRQ_TIMER0_Handler+0x100>
    350e:	702f      	strb	r7, [r5, #0]
    3510:	4919      	ldr	r1, [pc, #100]	; (3578 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    3512:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3516:	6088      	str	r0, [r1, #8]
    3518:	4918      	ldr	r1, [pc, #96]	; (357c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    351a:	f104 0010 	add.w	r0, r4, #16
    351e:	fa06 f000 	lsl.w	r0, r6, r0
    3522:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3526:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    352a:	00a0      	lsls	r0, r4, #2
    352c:	4408      	add	r0, r1
    352e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3532:	4a13      	ldr	r2, [pc, #76]	; (3580 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3534:	6812      	ldr	r2, [r2, #0]
    3536:	1a80      	subs	r0, r0, r2
    3538:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    353c:	2802      	cmp	r0, #2
    353e:	d307      	bcc.n	3550 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    3540:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    3544:	2000      	movs	r0, #0
    3546:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    354a:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    354e:	500f      	str	r7, [r1, r0]
    3550:	480c      	ldr	r0, [pc, #48]	; (3584 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    3552:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    3556:	9000      	str	r0, [sp, #0]
    3558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    355c:	f240 31f9 	movw	r1, #1017	; 0x3f9
    3560:	206c      	movs	r0, #108	; 0x6c
    3562:	f000 fc5d 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3566:	0000      	.short	0x0000
    3568:	40008000 	.word	0x40008000
    356c:	40008140 	.word	0x40008140
    3570:	20000046 	.word	0x20000046
    3574:	4001f508 	.word	0x4001f508
    3578:	20000044 	.word	0x20000044
    357c:	4000b000 	.word	0x4000b000
    3580:	4000b504 	.word	0x4000b504
    3584:	4000b140 	.word	0x4000b140

00003588 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3588:	4825      	ldr	r0, [pc, #148]	; (3620 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    358a:	4a24      	ldr	r2, [pc, #144]	; (361c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    358c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3590:	4924      	ldr	r1, [pc, #144]	; (3624 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    3592:	1d03      	adds	r3, r0, #4
    3594:	f891 c000 	ldrb.w	ip, [r1]
    3598:	2100      	movs	r1, #0
    359a:	f1bc 0f00 	cmp.w	ip, #0
    359e:	d010      	beq.n	35c2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    35a0:	4a21      	ldr	r2, [pc, #132]	; (3628 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    35a2:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    35a6:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    35aa:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    35ae:	bf00      	nop
    35b0:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    35b4:	2a00      	cmp	r2, #0
    35b6:	bf04      	itt	eq
    35b8:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    35bc:	2800      	cmpeq	r0, #0
    35be:	d111      	bne.n	35e4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    35c0:	e00a      	b.n	35d8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    35c2:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    35c6:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    35ca:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    35ce:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    35d2:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    35d6:	e7eb      	b.n	35b0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    35d8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    35dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
    35e0:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    35e4:	4811      	ldr	r0, [pc, #68]	; (362c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    35e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    35ea:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    35ee:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    35f2:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    35f6:	f100 0204 	add.w	r2, r0, #4
    35fa:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    35fe:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3602:	f102 0204 	add.w	r2, r2, #4
    3606:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    360a:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    360e:	f102 0204 	add.w	r2, r2, #4
    3612:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3616:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    361a:	4770      	bx	lr
    361c:	fffbfffd 	.word	0xfffbfffd
    3620:	4000b000 	.word	0x4000b000
    3624:	20000046 	.word	0x20000046
    3628:	fffafffd 	.word	0xfffafffd
    362c:	40008000 	.word	0x40008000

00003630 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    3630:	b510      	push	{r4, lr}
    3632:	2807      	cmp	r0, #7
    3634:	d20d      	bcs.n	3652 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    3636:	e8df f000 	tbb	[pc, r0]
    363a:	0404      	.short	0x0404
    363c:	06060404 	.word	0x06060404
    3640:	0006      	.short	0x0006
    3642:	4906      	ldr	r1, [pc, #24]	; (365c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    3644:	e002      	b.n	364c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    3646:	1f00      	subs	r0, r0, #4
    3648:	4905      	ldr	r1, [pc, #20]	; (3660 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    364a:	b2c0      	uxtb	r0, r0
    364c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3650:	bd10      	pop	{r4, pc}
    3652:	f240 3199 	movw	r1, #921	; 0x399
    3656:	206c      	movs	r0, #108	; 0x6c
    3658:	f000 fbe2 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    365c:	40008140 	.word	0x40008140
    3660:	4000b140 	.word	0x4000b140

00003664 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3664:	b570      	push	{r4, r5, r6, lr}
    3666:	481f      	ldr	r0, [pc, #124]	; (36e4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    3668:	2400      	movs	r4, #0
    366a:	2104      	movs	r1, #4
    366c:	7004      	strb	r4, [r0, #0]
    366e:	1e80      	subs	r0, r0, #2
    3670:	7001      	strb	r1, [r0, #0]
    3672:	0589      	lsls	r1, r1, #22
    3674:	60c4      	str	r4, [r0, #12]
    3676:	6081      	str	r1, [r0, #8]
    3678:	f7ff fc82 	bl	2f80 <MPSL_IRQ_TIMER0_Handler+0x100>
    367c:	2501      	movs	r5, #1
    367e:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3682:	02eb      	lsls	r3, r5, #11
    3684:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    3688:	f3bf 8f4f 	dsb	sy
    368c:	f3bf 8f6f 	isb	sy
    3690:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3694:	4814      	ldr	r0, [pc, #80]	; (36e8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    3696:	6045      	str	r5, [r0, #4]
    3698:	6085      	str	r5, [r0, #8]
    369a:	4914      	ldr	r1, [pc, #80]	; (36ec <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    369c:	680a      	ldr	r2, [r1, #0]
    369e:	2a00      	cmp	r2, #0
    36a0:	d1fc      	bne.n	369c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    36a2:	1e51      	subs	r1, r2, #1
    36a4:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    36a8:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    36ac:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    36b0:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    36b4:	490e      	ldr	r1, [pc, #56]	; (36f0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    36b6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    36ba:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    36be:	1d09      	adds	r1, r1, #4
    36c0:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    36c4:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    36c8:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    36cc:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    36d0:	6005      	str	r5, [r0, #0]
    36d2:	f44f 7182 	mov.w	r1, #260	; 0x104
    36d6:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    36da:	2102      	movs	r1, #2
    36dc:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    36e0:	bd70      	pop	{r4, r5, r6, pc}
    36e2:	0000      	.short	0x0000
    36e4:	20000046 	.word	0x20000046
    36e8:	4000b000 	.word	0x4000b000
    36ec:	4000b504 	.word	0x4000b504
    36f0:	4000b004 	.word	0x4000b004

000036f4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    36f4:	4808      	ldr	r0, [pc, #32]	; (3718 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    36f6:	f990 0000 	ldrsb.w	r0, [r0]
    36fa:	2800      	cmp	r0, #0
    36fc:	bfb8      	it	lt
    36fe:	4770      	bxlt	lr
    3700:	f000 011f 	and.w	r1, r0, #31
    3704:	2201      	movs	r2, #1
    3706:	fa02 f101 	lsl.w	r1, r2, r1
    370a:	0940      	lsrs	r0, r0, #5
    370c:	0080      	lsls	r0, r0, #2
    370e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3712:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3716:	4770      	bx	lr
    3718:	20000350 	.word	0x20000350

0000371c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    371c:	4803      	ldr	r0, [pc, #12]	; (372c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    371e:	7800      	ldrb	r0, [r0, #0]
    3720:	2803      	cmp	r0, #3
    3722:	bf0c      	ite	eq
    3724:	2001      	moveq	r0, #1
    3726:	2000      	movne	r0, #0
    3728:	4770      	bx	lr
    372a:	0000      	.short	0x0000
    372c:	2000033c 	.word	0x2000033c

00003730 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    3730:	4801      	ldr	r0, [pc, #4]	; (3738 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    3732:	8840      	ldrh	r0, [r0, #2]
    3734:	4770      	bx	lr
    3736:	0000      	.short	0x0000
    3738:	2000033c 	.word	0x2000033c

0000373c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    373c:	4803      	ldr	r0, [pc, #12]	; (374c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    373e:	7800      	ldrb	r0, [r0, #0]
    3740:	2802      	cmp	r0, #2
    3742:	bf16      	itet	ne
    3744:	2803      	cmpne	r0, #3
    3746:	2001      	moveq	r0, #1
    3748:	2000      	movne	r0, #0
    374a:	4770      	bx	lr
    374c:	2000033c 	.word	0x2000033c

00003750 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    3750:	4802      	ldr	r0, [pc, #8]	; (375c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    3752:	2100      	movs	r1, #0
    3754:	7001      	strb	r1, [r0, #0]
    3756:	8041      	strh	r1, [r0, #2]
    3758:	4770      	bx	lr
    375a:	0000      	.short	0x0000
    375c:	2000033c 	.word	0x2000033c

00003760 <MPSL_IRQ_CLOCK_Handler>:
    3760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3764:	4c16      	ldr	r4, [pc, #88]	; (37c0 <MPSL_IRQ_CLOCK_Handler+0x60>)
    3766:	7a60      	ldrb	r0, [r4, #9]
    3768:	2800      	cmp	r0, #0
    376a:	d027      	beq.n	37bc <MPSL_IRQ_CLOCK_Handler+0x5c>
    376c:	f44f 7180 	mov.w	r1, #256	; 0x100
    3770:	058d      	lsls	r5, r1, #22
    3772:	4628      	mov	r0, r5
    3774:	f008 fa84 	bl	bc80 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3778:	4680      	mov	r8, r0
    377a:	f44f 7182 	mov.w	r1, #260	; 0x104
    377e:	4628      	mov	r0, r5
    3780:	f008 fa7e 	bl	bc80 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3784:	2600      	movs	r6, #0
    3786:	4607      	mov	r7, r0
    3788:	f1b8 0f00 	cmp.w	r8, #0
    378c:	d009      	beq.n	37a2 <MPSL_IRQ_CLOCK_Handler+0x42>
    378e:	2001      	movs	r0, #1
    3790:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3794:	7920      	ldrb	r0, [r4, #4]
    3796:	b120      	cbz	r0, 37a2 <MPSL_IRQ_CLOCK_Handler+0x42>
    3798:	7126      	strb	r6, [r4, #4]
    379a:	69e0      	ldr	r0, [r4, #28]
    379c:	b108      	cbz	r0, 37a2 <MPSL_IRQ_CLOCK_Handler+0x42>
    379e:	4780      	blx	r0
    37a0:	61e6      	str	r6, [r4, #28]
    37a2:	b137      	cbz	r7, 37b2 <MPSL_IRQ_CLOCK_Handler+0x52>
    37a4:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    37a8:	2002      	movs	r0, #2
    37aa:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    37ae:	f000 fa6b 	bl	3c88 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    37b2:	4640      	mov	r0, r8
    37b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    37b8:	f000 b858 	b.w	386c <MPSL_IRQ_CLOCK_Handler+0x10c>
    37bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37c0:	20000054 	.word	0x20000054
    37c4:	b510      	push	{r4, lr}
    37c6:	f008 fb05 	bl	bdd4 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    37ca:	b930      	cbnz	r0, 37da <MPSL_IRQ_CLOCK_Handler+0x7a>
    37cc:	f008 fb23 	bl	be16 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    37d0:	b918      	cbnz	r0, 37da <MPSL_IRQ_CLOCK_Handler+0x7a>
    37d2:	f008 fb56 	bl	be82 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    37d6:	2800      	cmp	r0, #0
    37d8:	d002      	beq.n	37e0 <MPSL_IRQ_CLOCK_Handler+0x80>
    37da:	4902      	ldr	r1, [pc, #8]	; (37e4 <MPSL_IRQ_CLOCK_Handler+0x84>)
    37dc:	2002      	movs	r0, #2
    37de:	6008      	str	r0, [r1, #0]
    37e0:	bd10      	pop	{r4, pc}
    37e2:	0000      	.short	0x0000
    37e4:	40000c34 	.word	0x40000c34
    37e8:	b570      	push	{r4, r5, r6, lr}
    37ea:	f000 f991 	bl	3b10 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    37ee:	f000 fa9f 	bl	3d30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    37f2:	4c09      	ldr	r4, [pc, #36]	; (3818 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    37f4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    37f8:	b130      	cbz	r0, 3808 <MPSL_IRQ_CLOCK_Handler+0xa8>
    37fa:	f7ff ffe3 	bl	37c4 <MPSL_IRQ_CLOCK_Handler+0x64>
    37fe:	2001      	movs	r0, #1
    3800:	6128      	str	r0, [r5, #16]
    3802:	2004      	movs	r0, #4
    3804:	72a0      	strb	r0, [r4, #10]
    3806:	e004      	b.n	3812 <MPSL_IRQ_CLOCK_Handler+0xb2>
    3808:	2003      	movs	r0, #3
    380a:	72a0      	strb	r0, [r4, #10]
    380c:	2001      	movs	r0, #1
    380e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3812:	2000      	movs	r0, #0
    3814:	71e0      	strb	r0, [r4, #7]
    3816:	bd70      	pop	{r4, r5, r6, pc}
    3818:	20000054 	.word	0x20000054
    381c:	b570      	push	{r4, r5, r6, lr}
    381e:	4c12      	ldr	r4, [pc, #72]	; (3868 <MPSL_IRQ_CLOCK_Handler+0x108>)
    3820:	79a0      	ldrb	r0, [r4, #6]
    3822:	b1e0      	cbz	r0, 385e <MPSL_IRQ_CLOCK_Handler+0xfe>
    3824:	79e1      	ldrb	r1, [r4, #7]
    3826:	1e40      	subs	r0, r0, #1
    3828:	4281      	cmp	r1, r0
    382a:	da18      	bge.n	385e <MPSL_IRQ_CLOCK_Handler+0xfe>
    382c:	f000 fa80 	bl	3d30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3830:	4605      	mov	r5, r0
    3832:	f000 fb69 	bl	3f08 <mpsl_temperature_get>
    3836:	79a1      	ldrb	r1, [r4, #6]
    3838:	2901      	cmp	r1, #1
    383a:	d902      	bls.n	3842 <MPSL_IRQ_CLOCK_Handler+0xe2>
    383c:	79e1      	ldrb	r1, [r4, #7]
    383e:	1c49      	adds	r1, r1, #1
    3840:	71e1      	strb	r1, [r4, #7]
    3842:	b10d      	cbz	r5, 3848 <MPSL_IRQ_CLOCK_Handler+0xe8>
    3844:	6961      	ldr	r1, [r4, #20]
    3846:	e000      	b.n	384a <MPSL_IRQ_CLOCK_Handler+0xea>
    3848:	6921      	ldr	r1, [r4, #16]
    384a:	1a41      	subs	r1, r0, r1
    384c:	2902      	cmp	r1, #2
    384e:	da02      	bge.n	3856 <MPSL_IRQ_CLOCK_Handler+0xf6>
    3850:	f111 0f02 	cmn.w	r1, #2
    3854:	dc07      	bgt.n	3866 <MPSL_IRQ_CLOCK_Handler+0x106>
    3856:	b10d      	cbz	r5, 385c <MPSL_IRQ_CLOCK_Handler+0xfc>
    3858:	6160      	str	r0, [r4, #20]
    385a:	e000      	b.n	385e <MPSL_IRQ_CLOCK_Handler+0xfe>
    385c:	6120      	str	r0, [r4, #16]
    385e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3862:	f7ff bfc1 	b.w	37e8 <MPSL_IRQ_CLOCK_Handler+0x88>
    3866:	bd70      	pop	{r4, r5, r6, pc}
    3868:	20000054 	.word	0x20000054
    386c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3870:	4606      	mov	r6, r0
    3872:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3876:	f44f 7186 	mov.w	r1, #268	; 0x10c
    387a:	4628      	mov	r0, r5
    387c:	f008 fa00 	bl	bc80 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3880:	4680      	mov	r8, r0
    3882:	f44f 7188 	mov.w	r1, #272	; 0x110
    3886:	4628      	mov	r0, r5
    3888:	f008 f9fa 	bl	bc80 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    388c:	4c27      	ldr	r4, [pc, #156]	; (392c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    388e:	4682      	mov	sl, r0
    3890:	7827      	ldrb	r7, [r4, #0]
    3892:	f104 0008 	add.w	r0, r4, #8
    3896:	f008 fa67 	bl	bd68 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    389a:	b110      	cbz	r0, 38a2 <MPSL_IRQ_CLOCK_Handler+0x142>
    389c:	f240 11b9 	movw	r1, #441	; 0x1b9
    38a0:	e016      	b.n	38d0 <MPSL_IRQ_CLOCK_Handler+0x170>
    38a2:	f04f 0901 	mov.w	r9, #1
    38a6:	b146      	cbz	r6, 38ba <MPSL_IRQ_CLOCK_Handler+0x15a>
    38a8:	7aa0      	ldrb	r0, [r4, #10]
    38aa:	2803      	cmp	r0, #3
    38ac:	d105      	bne.n	38ba <MPSL_IRQ_CLOCK_Handler+0x15a>
    38ae:	2004      	movs	r0, #4
    38b0:	72a0      	strb	r0, [r4, #10]
    38b2:	f7ff ff87 	bl	37c4 <MPSL_IRQ_CLOCK_Handler+0x64>
    38b6:	f8c5 9010 	str.w	r9, [r5, #16]
    38ba:	2600      	movs	r6, #0
    38bc:	f1b8 0f00 	cmp.w	r8, #0
    38c0:	d018      	beq.n	38f4 <MPSL_IRQ_CLOCK_Handler+0x194>
    38c2:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    38c6:	7aa0      	ldrb	r0, [r4, #10]
    38c8:	2804      	cmp	r0, #4
    38ca:	d004      	beq.n	38d6 <MPSL_IRQ_CLOCK_Handler+0x176>
    38cc:	f240 11cb 	movw	r1, #459	; 0x1cb
    38d0:	206d      	movs	r0, #109	; 0x6d
    38d2:	f000 faa5 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38d6:	f008 fa7d 	bl	bdd4 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    38da:	b928      	cbnz	r0, 38e8 <MPSL_IRQ_CLOCK_Handler+0x188>
    38dc:	f008 fa9b 	bl	be16 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    38e0:	b910      	cbnz	r0, 38e8 <MPSL_IRQ_CLOCK_Handler+0x188>
    38e2:	f008 face 	bl	be82 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    38e6:	b108      	cbz	r0, 38ec <MPSL_IRQ_CLOCK_Handler+0x18c>
    38e8:	4811      	ldr	r0, [pc, #68]	; (3930 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    38ea:	6006      	str	r6, [r0, #0]
    38ec:	2002      	movs	r0, #2
    38ee:	72a0      	strb	r0, [r4, #10]
    38f0:	f000 f8f2 	bl	3ad8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    38f4:	f1ba 0f00 	cmp.w	sl, #0
    38f8:	d008      	beq.n	390c <MPSL_IRQ_CLOCK_Handler+0x1ac>
    38fa:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    38fe:	7aa0      	ldrb	r0, [r4, #10]
    3900:	2802      	cmp	r0, #2
    3902:	d101      	bne.n	3908 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    3904:	f7ff ff8a 	bl	381c <MPSL_IRQ_CLOCK_Handler+0xbc>
    3908:	f8c5 9014 	str.w	r9, [r5, #20]
    390c:	b13f      	cbz	r7, 391e <MPSL_IRQ_CLOCK_Handler+0x1be>
    390e:	7026      	strb	r6, [r4, #0]
    3910:	7aa0      	ldrb	r0, [r4, #10]
    3912:	2802      	cmp	r0, #2
    3914:	d101      	bne.n	391a <MPSL_IRQ_CLOCK_Handler+0x1ba>
    3916:	f7ff ff67 	bl	37e8 <MPSL_IRQ_CLOCK_Handler+0x88>
    391a:	f000 f8dd 	bl	3ad8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    391e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3922:	4802      	ldr	r0, [pc, #8]	; (392c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    3924:	3008      	adds	r0, #8
    3926:	f008 ba36 	b.w	bd96 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    392a:	0000      	.short	0x0000
    392c:	20000054 	.word	0x20000054
    3930:	40000c34 	.word	0x40000c34
    3934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3938:	4c5f      	ldr	r4, [pc, #380]	; (3ab8 <MPSL_IRQ_CLOCK_Handler+0x358>)
    393a:	2700      	movs	r7, #0
    393c:	4606      	mov	r6, r0
    393e:	61a7      	str	r7, [r4, #24]
    3940:	7842      	ldrb	r2, [r0, #1]
    3942:	7881      	ldrb	r1, [r0, #2]
    3944:	7800      	ldrb	r0, [r0, #0]
    3946:	72e0      	strb	r0, [r4, #11]
    3948:	7162      	strb	r2, [r4, #5]
    394a:	71a1      	strb	r1, [r4, #6]
    394c:	71e7      	strb	r7, [r4, #7]
    394e:	f04f 0801 	mov.w	r8, #1
    3952:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3956:	2805      	cmp	r0, #5
    3958:	d225      	bcs.n	39a6 <MPSL_IRQ_CLOCK_Handler+0x246>
    395a:	e8df f000 	tbb	[pc, r0]
    395e:	0310      	.short	0x0310
    3960:	00222006 	.word	0x00222006
    3964:	f8c4 8018 	str.w	r8, [r4, #24]
    3968:	e009      	b.n	397e <MPSL_IRQ_CLOCK_Handler+0x21e>
    396a:	f000 f8d1 	bl	3b10 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    396e:	2101      	movs	r1, #1
    3970:	4628      	mov	r0, r5
    3972:	f008 f98a 	bl	bc8a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3976:	2800      	cmp	r0, #0
    3978:	d0f9      	beq.n	396e <MPSL_IRQ_CLOCK_Handler+0x20e>
    397a:	2002      	movs	r0, #2
    397c:	61a0      	str	r0, [r4, #24]
    397e:	f008 f9b0 	bl	bce2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3982:	b1b0      	cbz	r0, 39b2 <MPSL_IRQ_CLOCK_Handler+0x252>
    3984:	f000 f9ee 	bl	3d64 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3988:	7e21      	ldrb	r1, [r4, #24]
    398a:	f001 0103 	and.w	r1, r1, #3
    398e:	4288      	cmp	r0, r1
    3990:	d10f      	bne.n	39b2 <MPSL_IRQ_CLOCK_Handler+0x252>
    3992:	79b0      	ldrb	r0, [r6, #6]
    3994:	b150      	cbz	r0, 39ac <MPSL_IRQ_CLOCK_Handler+0x24c>
    3996:	2002      	movs	r0, #2
    3998:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    399c:	e070      	b.n	3a80 <MPSL_IRQ_CLOCK_Handler+0x320>
    399e:	4847      	ldr	r0, [pc, #284]	; (3abc <MPSL_IRQ_CLOCK_Handler+0x35c>)
    39a0:	e7ec      	b.n	397c <MPSL_IRQ_CLOCK_Handler+0x21c>
    39a2:	4847      	ldr	r0, [pc, #284]	; (3ac0 <MPSL_IRQ_CLOCK_Handler+0x360>)
    39a4:	e7ea      	b.n	397c <MPSL_IRQ_CLOCK_Handler+0x21c>
    39a6:	f240 313a 	movw	r1, #826	; 0x33a
    39aa:	e04d      	b.n	3a48 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    39ac:	f000 f9ae 	bl	3d0c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    39b0:	e066      	b.n	3a80 <MPSL_IRQ_CLOCK_Handler+0x320>
    39b2:	f8c5 800c 	str.w	r8, [r5, #12]
    39b6:	f44f 7a82 	mov.w	sl, #260	; 0x104
    39ba:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    39be:	69a0      	ldr	r0, [r4, #24]
    39c0:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    39c4:	f008 f9f2 	bl	bdac <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    39c8:	b940      	cbnz	r0, 39dc <MPSL_IRQ_CLOCK_Handler+0x27c>
    39ca:	f008 f9f9 	bl	bdc0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    39ce:	b928      	cbnz	r0, 39dc <MPSL_IRQ_CLOCK_Handler+0x27c>
    39d0:	f008 fa0d 	bl	bdee <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    39d4:	b910      	cbnz	r0, 39dc <MPSL_IRQ_CLOCK_Handler+0x27c>
    39d6:	f008 fa1e 	bl	be16 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    39da:	b138      	cbz	r0, 39ec <MPSL_IRQ_CLOCK_Handler+0x28c>
    39dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    39e0:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    39e4:	4937      	ldr	r1, [pc, #220]	; (3ac4 <MPSL_IRQ_CLOCK_Handler+0x364>)
    39e6:	f3c0 3042 	ubfx	r0, r0, #13, #3
    39ea:	6008      	str	r0, [r1, #0]
    39ec:	f008 f9de 	bl	bdac <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    39f0:	b940      	cbnz	r0, 3a04 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    39f2:	f008 f9e5 	bl	bdc0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    39f6:	b928      	cbnz	r0, 3a04 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    39f8:	f008 f9f9 	bl	bdee <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    39fc:	b910      	cbnz	r0, 3a04 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    39fe:	f008 fa0a 	bl	be16 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a02:	b118      	cbz	r0, 3a0c <MPSL_IRQ_CLOCK_Handler+0x2ac>
    3a04:	492f      	ldr	r1, [pc, #188]	; (3ac4 <MPSL_IRQ_CLOCK_Handler+0x364>)
    3a06:	3110      	adds	r1, #16
    3a08:	f8c1 8000 	str.w	r8, [r1]
    3a0c:	f8c5 8008 	str.w	r8, [r5, #8]
    3a10:	2002      	movs	r0, #2
    3a12:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3a16:	79b0      	ldrb	r0, [r6, #6]
    3a18:	bb90      	cbnz	r0, 3a80 <MPSL_IRQ_CLOCK_Handler+0x320>
    3a1a:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3a1e:	f010 0f02 	tst.w	r0, #2
    3a22:	d00f      	beq.n	3a44 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3a24:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 3ac8 <MPSL_IRQ_CLOCK_Handler+0x368>
    3a28:	f8d9 1000 	ldr.w	r1, [r9]
    3a2c:	43c9      	mvns	r1, r1
    3a2e:	f341 1100 	sbfx	r1, r1, #4, #1
    3a32:	f101 0801 	add.w	r8, r1, #1
    3a36:	f8d9 1000 	ldr.w	r1, [r9]
    3a3a:	f041 0110 	orr.w	r1, r1, #16
    3a3e:	f8c9 1000 	str.w	r1, [r9]
    3a42:	e007      	b.n	3a54 <MPSL_IRQ_CLOCK_Handler+0x2f4>
    3a44:	f240 21fb 	movw	r1, #763	; 0x2fb
    3a48:	206d      	movs	r0, #109	; 0x6d
    3a4a:	f000 f9e9 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a4e:	bf00      	nop
    3a50:	f000 fb20 	bl	4094 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3a54:	4651      	mov	r1, sl
    3a56:	4628      	mov	r0, r5
    3a58:	f008 f912 	bl	bc80 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3a5c:	2800      	cmp	r0, #0
    3a5e:	d0f7      	beq.n	3a50 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3a60:	f000 f954 	bl	3d0c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3a64:	f1b8 0f00 	cmp.w	r8, #0
    3a68:	d105      	bne.n	3a76 <MPSL_IRQ_CLOCK_Handler+0x316>
    3a6a:	f8d9 1000 	ldr.w	r1, [r9]
    3a6e:	f021 0110 	bic.w	r1, r1, #16
    3a72:	f8c9 1000 	str.w	r1, [r9]
    3a76:	2002      	movs	r0, #2
    3a78:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3a7c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3a80:	79a0      	ldrb	r0, [r4, #6]
    3a82:	b170      	cbz	r0, 3aa2 <MPSL_IRQ_CLOCK_Handler+0x342>
    3a84:	7830      	ldrb	r0, [r6, #0]
    3a86:	b960      	cbnz	r0, 3aa2 <MPSL_IRQ_CLOCK_Handler+0x342>
    3a88:	f000 f952 	bl	3d30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3a8c:	4606      	mov	r6, r0
    3a8e:	f000 fa3b 	bl	3f08 <mpsl_temperature_get>
    3a92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3a96:	b116      	cbz	r6, 3a9e <MPSL_IRQ_CLOCK_Handler+0x33e>
    3a98:	e9c4 1004 	strd	r1, r0, [r4, #16]
    3a9c:	e001      	b.n	3aa2 <MPSL_IRQ_CLOCK_Handler+0x342>
    3a9e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    3aa2:	2101      	movs	r1, #1
    3aa4:	4628      	mov	r0, r5
    3aa6:	f008 f8f0 	bl	bc8a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3aaa:	b108      	cbz	r0, 3ab0 <MPSL_IRQ_CLOCK_Handler+0x350>
    3aac:	f000 f93a 	bl	3d24 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3ab0:	72a7      	strb	r7, [r4, #10]
    3ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ab6:	0000      	.short	0x0000
    3ab8:	20000054 	.word	0x20000054
    3abc:	00020001 	.word	0x00020001
    3ac0:	00030001 	.word	0x00030001
    3ac4:	4000053c 	.word	0x4000053c
    3ac8:	e000ed10 	.word	0xe000ed10

00003acc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    3acc:	4801      	ldr	r0, [pc, #4]	; (3ad4 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    3ace:	89c0      	ldrh	r0, [r0, #14]
    3ad0:	4770      	bx	lr
    3ad2:	0000      	.short	0x0000
    3ad4:	20000054 	.word	0x20000054

00003ad8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3ad8:	b510      	push	{r4, lr}
    3ada:	f3ef 8410 	mrs	r4, PRIMASK
    3ade:	b672      	cpsid	i
    3ae0:	480a      	ldr	r0, [pc, #40]	; (3b0c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3ae2:	7841      	ldrb	r1, [r0, #1]
    3ae4:	b129      	cbz	r1, 3af2 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3ae6:	7841      	ldrb	r1, [r0, #1]
    3ae8:	1e49      	subs	r1, r1, #1
    3aea:	7041      	strb	r1, [r0, #1]
    3aec:	7841      	ldrb	r1, [r0, #1]
    3aee:	b129      	cbz	r1, 3afc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3af0:	e008      	b.n	3b04 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3af2:	f44f 718e 	mov.w	r1, #284	; 0x11c
    3af6:	206d      	movs	r0, #109	; 0x6d
    3af8:	f000 f992 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3afc:	7880      	ldrb	r0, [r0, #2]
    3afe:	b908      	cbnz	r0, 3b04 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3b00:	f000 f924 	bl	3d4c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3b04:	2c00      	cmp	r4, #0
    3b06:	d100      	bne.n	3b0a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3b08:	b662      	cpsie	i
    3b0a:	bd10      	pop	{r4, pc}
    3b0c:	20000054 	.word	0x20000054

00003b10 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3b10:	b510      	push	{r4, lr}
    3b12:	f3ef 8410 	mrs	r4, PRIMASK
    3b16:	b672      	cpsid	i
    3b18:	4806      	ldr	r0, [pc, #24]	; (3b34 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3b1a:	7841      	ldrb	r1, [r0, #1]
    3b1c:	1c49      	adds	r1, r1, #1
    3b1e:	7041      	strb	r1, [r0, #1]
    3b20:	7840      	ldrb	r0, [r0, #1]
    3b22:	2801      	cmp	r0, #1
    3b24:	d101      	bne.n	3b2a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3b26:	f008 f8c7 	bl	bcb8 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3b2a:	2c00      	cmp	r4, #0
    3b2c:	d100      	bne.n	3b30 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3b2e:	b662      	cpsie	i
    3b30:	bd10      	pop	{r4, pc}
    3b32:	0000      	.short	0x0000
    3b34:	20000054 	.word	0x20000054

00003b38 <mpsl_clock_hfclk_release>:
    3b38:	4805      	ldr	r0, [pc, #20]	; (3b50 <mpsl_clock_hfclk_release+0x18>)
    3b3a:	b510      	push	{r4, lr}
    3b3c:	78c1      	ldrb	r1, [r0, #3]
    3b3e:	b121      	cbz	r1, 3b4a <mpsl_clock_hfclk_release+0x12>
    3b40:	2100      	movs	r1, #0
    3b42:	7101      	strb	r1, [r0, #4]
    3b44:	70c1      	strb	r1, [r0, #3]
    3b46:	f7ff ffc7 	bl	3ad8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3b4a:	2000      	movs	r0, #0
    3b4c:	bd10      	pop	{r4, pc}
    3b4e:	0000      	.short	0x0000
    3b50:	20000054 	.word	0x20000054

00003b54 <mpsl_clock_hfclk_request>:
    3b54:	b570      	push	{r4, r5, r6, lr}
    3b56:	4c0c      	ldr	r4, [pc, #48]	; (3b88 <mpsl_clock_hfclk_request+0x34>)
    3b58:	78e1      	ldrb	r1, [r4, #3]
    3b5a:	b961      	cbnz	r1, 3b76 <mpsl_clock_hfclk_request+0x22>
    3b5c:	2501      	movs	r5, #1
    3b5e:	70e5      	strb	r5, [r4, #3]
    3b60:	61e0      	str	r0, [r4, #28]
    3b62:	f7ff ffd5 	bl	3b10 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3b66:	f000 f8e3 	bl	3d30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3b6a:	b130      	cbz	r0, 3b7a <mpsl_clock_hfclk_request+0x26>
    3b6c:	69e0      	ldr	r0, [r4, #28]
    3b6e:	b110      	cbz	r0, 3b76 <mpsl_clock_hfclk_request+0x22>
    3b70:	4780      	blx	r0
    3b72:	2000      	movs	r0, #0
    3b74:	61e0      	str	r0, [r4, #28]
    3b76:	2000      	movs	r0, #0
    3b78:	bd70      	pop	{r4, r5, r6, pc}
    3b7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3b7e:	7125      	strb	r5, [r4, #4]
    3b80:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3b84:	e7f7      	b.n	3b76 <mpsl_clock_hfclk_request+0x22>
    3b86:	0000      	.short	0x0000
    3b88:	20000054 	.word	0x20000054

00003b8c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b90:	0005      	movs	r5, r0
    3b92:	f06f 0015 	mvn.w	r0, #21
    3b96:	d03f      	beq.n	3c18 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3b98:	7829      	ldrb	r1, [r5, #0]
    3b9a:	2904      	cmp	r1, #4
    3b9c:	d83c      	bhi.n	3c18 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3b9e:	2900      	cmp	r1, #0
    3ba0:	7869      	ldrb	r1, [r5, #1]
    3ba2:	d03b      	beq.n	3c1c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    3ba4:	2900      	cmp	r1, #0
    3ba6:	d137      	bne.n	3c18 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3ba8:	78a9      	ldrb	r1, [r5, #2]
    3baa:	2900      	cmp	r1, #0
    3bac:	d134      	bne.n	3c18 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3bae:	2000      	movs	r0, #0
    3bb0:	f008 f831 	bl	bc16 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    3bb4:	2000      	movs	r0, #0
    3bb6:	f008 f821 	bl	bbfc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    3bba:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3bbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3bc2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3bc6:	2600      	movs	r6, #0
    3bc8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3bcc:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3bd0:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3bd4:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3bd8:	4c14      	ldr	r4, [pc, #80]	; (3c2c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3bda:	7066      	strb	r6, [r4, #1]
    3bdc:	88a8      	ldrh	r0, [r5, #4]
    3bde:	81a0      	strh	r0, [r4, #12]
    3be0:	f008 f861 	bl	bca6 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3be4:	2701      	movs	r7, #1
    3be6:	b108      	cbz	r0, 3bec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3be8:	70e7      	strb	r7, [r4, #3]
    3bea:	7067      	strb	r7, [r4, #1]
    3bec:	2101      	movs	r1, #1
    3bee:	4640      	mov	r0, r8
    3bf0:	f008 f84b 	bl	bc8a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3bf4:	b108      	cbz	r0, 3bfa <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3bf6:	f000 f895 	bl	3d24 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3bfa:	f240 50f5 	movw	r0, #1525	; 0x5f5
    3bfe:	81e0      	strh	r0, [r4, #14]
    3c00:	4628      	mov	r0, r5
    3c02:	f7ff fe97 	bl	3934 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    3c06:	7267      	strb	r7, [r4, #9]
    3c08:	2000      	movs	r0, #0
    3c0a:	f007 fff7 	bl	bbfc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    3c0e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3c12:	4630      	mov	r0, r6
    3c14:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    3c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c1c:	2900      	cmp	r1, #0
    3c1e:	d0fb      	beq.n	3c18 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3c20:	2920      	cmp	r1, #32
    3c22:	d8f9      	bhi.n	3c18 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3c24:	78a9      	ldrb	r1, [r5, #2]
    3c26:	2921      	cmp	r1, #33	; 0x21
    3c28:	d9c1      	bls.n	3bae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3c2a:	e7f5      	b.n	3c18 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3c2c:	20000054 	.word	0x20000054

00003c30 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3c30:	4801      	ldr	r0, [pc, #4]	; (3c38 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3c32:	8980      	ldrh	r0, [r0, #12]
    3c34:	4770      	bx	lr
    3c36:	0000      	.short	0x0000
    3c38:	20000054 	.word	0x20000054

00003c3c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    3c3c:	b510      	push	{r4, lr}
    3c3e:	480d      	ldr	r0, [pc, #52]	; (3c74 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3c40:	f008 f892 	bl	bd68 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3c44:	490b      	ldr	r1, [pc, #44]	; (3c74 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3c46:	3908      	subs	r1, #8
    3c48:	b148      	cbz	r0, 3c5e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    3c4a:	2001      	movs	r0, #1
    3c4c:	7008      	strb	r0, [r1, #0]
    3c4e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3c52:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    3c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3c5a:	f7ff bf59 	b.w	3b10 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3c5e:	7a88      	ldrb	r0, [r1, #10]
    3c60:	2802      	cmp	r0, #2
    3c62:	d101      	bne.n	3c68 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3c64:	f7ff fdc0 	bl	37e8 <MPSL_IRQ_CLOCK_Handler+0x88>
    3c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3c6c:	4801      	ldr	r0, [pc, #4]	; (3c74 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3c6e:	f008 b892 	b.w	bd96 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3c72:	0000      	.short	0x0000
    3c74:	2000005c 	.word	0x2000005c

00003c78 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3c78:	4802      	ldr	r0, [pc, #8]	; (3c84 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3c7a:	7a80      	ldrb	r0, [r0, #10]
    3c7c:	2800      	cmp	r0, #0
    3c7e:	d000      	beq.n	3c82 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3c80:	2001      	movs	r0, #1
    3c82:	4770      	bx	lr
    3c84:	20000054 	.word	0x20000054

00003c88 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c8a:	4d1f      	ldr	r5, [pc, #124]	; (3d08 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3c8c:	7ae8      	ldrb	r0, [r5, #11]
    3c8e:	2800      	cmp	r0, #0
    3c90:	d10f      	bne.n	3cb2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3c92:	7e28      	ldrb	r0, [r5, #24]
    3c94:	f000 0003 	and.w	r0, r0, #3
    3c98:	f008 f813 	bl	bcc2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3c9c:	2800      	cmp	r0, #0
    3c9e:	d008      	beq.n	3cb2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3ca0:	f3ef 8110 	mrs	r1, PRIMASK
    3ca4:	b672      	cpsid	i
    3ca6:	f7ff ffe7 	bl	3c78 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3caa:	b118      	cbz	r0, 3cb4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3cac:	2900      	cmp	r1, #0
    3cae:	d100      	bne.n	3cb2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3cb0:	b662      	cpsie	i
    3cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cb4:	2601      	movs	r6, #1
    3cb6:	72ae      	strb	r6, [r5, #10]
    3cb8:	b901      	cbnz	r1, 3cbc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3cba:	b662      	cpsie	i
    3cbc:	2018      	movs	r0, #24
    3cbe:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3cc2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3cc6:	61a6      	str	r6, [r4, #24]
    3cc8:	f44f 7020 	mov.w	r0, #640	; 0x280
    3ccc:	f8ad 0000 	strh.w	r0, [sp]
    3cd0:	f8bd 0000 	ldrh.w	r0, [sp]
    3cd4:	1e41      	subs	r1, r0, #1
    3cd6:	f8ad 1000 	strh.w	r1, [sp]
    3cda:	d2f9      	bcs.n	3cd0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3cdc:	2700      	movs	r7, #0
    3cde:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3ce2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3ce6:	4808      	ldr	r0, [pc, #32]	; (3d08 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3ce8:	3008      	adds	r0, #8
    3cea:	f008 f850 	bl	bd8e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3cee:	702f      	strb	r7, [r5, #0]
    3cf0:	f7ff fd7a 	bl	37e8 <MPSL_IRQ_CLOCK_Handler+0x88>
    3cf4:	6166      	str	r6, [r4, #20]
    3cf6:	7968      	ldrb	r0, [r5, #5]
    3cf8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3cfc:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3d00:	2018      	movs	r0, #24
    3d02:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d08:	20000054 	.word	0x20000054

00003d0c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3d0c:	b510      	push	{r4, lr}
    3d0e:	4c04      	ldr	r4, [pc, #16]	; (3d20 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3d10:	7e20      	ldrb	r0, [r4, #24]
    3d12:	f000 0003 	and.w	r0, r0, #3
    3d16:	f007 ffd4 	bl	bcc2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3d1a:	2800      	cmp	r0, #0
    3d1c:	d0f8      	beq.n	3d10 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3d1e:	bd10      	pop	{r4, pc}
    3d20:	20000054 	.word	0x20000054

00003d24 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3d24:	4901      	ldr	r1, [pc, #4]	; (3d2c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3d26:	2001      	movs	r0, #1
    3d28:	7008      	strb	r0, [r1, #0]
    3d2a:	4770      	bx	lr
    3d2c:	20000351 	.word	0x20000351

00003d30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3d30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3d34:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3d38:	b918      	cbnz	r0, 3d42 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    3d3a:	4803      	ldr	r0, [pc, #12]	; (3d48 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3d3c:	7800      	ldrb	r0, [r0, #0]
    3d3e:	2800      	cmp	r0, #0
    3d40:	d000      	beq.n	3d44 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3d42:	2001      	movs	r0, #1
    3d44:	4770      	bx	lr
    3d46:	0000      	.short	0x0000
    3d48:	20000351 	.word	0x20000351

00003d4c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3d4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3d50:	2101      	movs	r1, #1
    3d52:	6041      	str	r1, [r0, #4]
    3d54:	2100      	movs	r1, #0
    3d56:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3d5a:	4801      	ldr	r0, [pc, #4]	; (3d60 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3d5c:	7001      	strb	r1, [r0, #0]
    3d5e:	4770      	bx	lr
    3d60:	20000351 	.word	0x20000351

00003d64 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3d64:	4802      	ldr	r0, [pc, #8]	; (3d70 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3d66:	6800      	ldr	r0, [r0, #0]
    3d68:	f000 0003 	and.w	r0, r0, #3
    3d6c:	4770      	bx	lr
    3d6e:	0000      	.short	0x0000
    3d70:	4000041c 	.word	0x4000041c
    3d74:	b510      	push	{r4, lr}
    3d76:	b131      	cbz	r1, 3d86 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3d78:	2901      	cmp	r1, #1
    3d7a:	d007      	beq.n	3d8c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3d7c:	f240 3102 	movw	r1, #770	; 0x302
    3d80:	a005      	add	r0, pc, #20	; (adr r0, 3d98 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3d82:	f000 f821 	bl	3dc8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3d86:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3d8a:	e001      	b.n	3d90 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3d8c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3d90:	f000 0001 	and.w	r0, r0, #1
    3d94:	bd10      	pop	{r4, pc}
    3d96:	0000      	.short	0x0000
    3d98:	5f66726e 	.word	0x5f66726e
    3d9c:	636f6c63 	.word	0x636f6c63
    3da0:	00682e6b 	.word	0x00682e6b
    3da4:	f3bf 8f4f 	dsb	sy
    3da8:	4805      	ldr	r0, [pc, #20]	; (3dc0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    3daa:	6801      	ldr	r1, [r0, #0]
    3dac:	4a05      	ldr	r2, [pc, #20]	; (3dc4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3dae:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3db2:	4311      	orrs	r1, r2
    3db4:	6001      	str	r1, [r0, #0]
    3db6:	f3bf 8f4f 	dsb	sy
    3dba:	bf00      	nop
    3dbc:	e7fd      	b.n	3dba <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3dbe:	0000      	.short	0x0000
    3dc0:	e000ed0c 	.word	0xe000ed0c
    3dc4:	05fa0004 	.word	0x05fa0004

00003dc8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3dc8:	b672      	cpsid	i
    3dca:	4a03      	ldr	r2, [pc, #12]	; (3dd8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3dcc:	6852      	ldr	r2, [r2, #4]
    3dce:	b102      	cbz	r2, 3dd2 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3dd0:	4790      	blx	r2
    3dd2:	f7ff ffe7 	bl	3da4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3dd6:	0000      	.short	0x0000
    3dd8:	20000074 	.word	0x20000074
    3ddc:	4806      	ldr	r0, [pc, #24]	; (3df8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    3dde:	b510      	push	{r4, lr}
    3de0:	2100      	movs	r1, #0
    3de2:	6001      	str	r1, [r0, #0]
    3de4:	2101      	movs	r1, #1
    3de6:	6001      	str	r1, [r0, #0]
    3de8:	4608      	mov	r0, r1
    3dea:	f007 ff91 	bl	bd10 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3df2:	2001      	movs	r0, #1
    3df4:	f007 bf7f 	b.w	bcf6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3df8:	40001ffc 	.word	0x40001ffc
    3dfc:	4807      	ldr	r0, [pc, #28]	; (3e1c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    3dfe:	b510      	push	{r4, lr}
    3e00:	2101      	movs	r1, #1
    3e02:	6041      	str	r1, [r0, #4]
    3e04:	1e89      	subs	r1, r1, #2
    3e06:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3e0a:	200c      	movs	r0, #12
    3e0c:	f007 ff80 	bl	bd10 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e14:	200c      	movs	r0, #12
    3e16:	f007 bf6e 	b.w	bcf6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3e1a:	0000      	.short	0x0000
    3e1c:	4000c000 	.word	0x4000c000

00003e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3e20:	b50e      	push	{r1, r2, r3, lr}
    3e22:	b672      	cpsid	i
    3e24:	4a0f      	ldr	r2, [pc, #60]	; (3e64 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3e26:	6855      	ldr	r5, [r2, #4]
    3e28:	b1d5      	cbz	r5, 3e60 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    3e2a:	2200      	movs	r2, #0
    3e2c:	4603      	mov	r3, r0
    3e2e:	466e      	mov	r6, sp
    3e30:	240a      	movs	r4, #10
    3e32:	e003      	b.n	3e3c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    3e34:	fbb0 f0f4 	udiv	r0, r0, r4
    3e38:	1c52      	adds	r2, r2, #1
    3e3a:	b2d2      	uxtb	r2, r2
    3e3c:	2800      	cmp	r0, #0
    3e3e:	d1f9      	bne.n	3e34 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    3e40:	54b0      	strb	r0, [r6, r2]
    3e42:	e009      	b.n	3e58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3e44:	fbb3 f0f4 	udiv	r0, r3, r4
    3e48:	fb04 3010 	mls	r0, r4, r0, r3
    3e4c:	fbb3 f3f4 	udiv	r3, r3, r4
    3e50:	1e52      	subs	r2, r2, #1
    3e52:	b2d2      	uxtb	r2, r2
    3e54:	3030      	adds	r0, #48	; 0x30
    3e56:	54b0      	strb	r0, [r6, r2]
    3e58:	2a00      	cmp	r2, #0
    3e5a:	d1f3      	bne.n	3e44 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3e5c:	4630      	mov	r0, r6
    3e5e:	47a8      	blx	r5
    3e60:	f7ff ffa0 	bl	3da4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3e64:	20000074 	.word	0x20000074

00003e68 <mpsl_init>:
    3e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e6c:	4c18      	ldr	r4, [pc, #96]	; (3ed0 <mpsl_init+0x68>)
    3e6e:	4606      	mov	r6, r0
    3e70:	4617      	mov	r7, r2
    3e72:	7860      	ldrb	r0, [r4, #1]
    3e74:	460d      	mov	r5, r1
    3e76:	b118      	cbz	r0, 3e80 <mpsl_init+0x18>
    3e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e80:	f7fc fc7c 	bl	77c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    3e84:	b906      	cbnz	r6, 3e88 <mpsl_init+0x20>
    3e86:	4e13      	ldr	r6, [pc, #76]	; (3ed4 <mpsl_init+0x6c>)
    3e88:	6067      	str	r7, [r4, #4]
    3e8a:	7025      	strb	r5, [r4, #0]
    3e8c:	f7ff ffa6 	bl	3ddc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    3e90:	f7ff ffb4 	bl	3dfc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    3e94:	4630      	mov	r0, r6
    3e96:	f7ff fe79 	bl	3b8c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3e9a:	0006      	movs	r6, r0
    3e9c:	d1ee      	bne.n	3e7c <mpsl_init+0x14>
    3e9e:	f7fe fe77 	bl	2b90 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3ea2:	f7ff fef1 	bl	3c88 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3ea6:	f007 fe78 	bl	bb9a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3eaa:	4628      	mov	r0, r5
    3eac:	f007 ff23 	bl	bcf6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3eb0:	2001      	movs	r0, #1
    3eb2:	2d00      	cmp	r5, #0
    3eb4:	db09      	blt.n	3eca <mpsl_init+0x62>
    3eb6:	f005 011f 	and.w	r1, r5, #31
    3eba:	fa00 f101 	lsl.w	r1, r0, r1
    3ebe:	096a      	lsrs	r2, r5, #5
    3ec0:	0092      	lsls	r2, r2, #2
    3ec2:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3ec6:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3eca:	7060      	strb	r0, [r4, #1]
    3ecc:	4630      	mov	r0, r6
    3ece:	e7d5      	b.n	3e7c <mpsl_init+0x14>
    3ed0:	20000074 	.word	0x20000074
    3ed4:	0000bd32 	.word	0x0000bd32

00003ed8 <mpsl_is_initialized>:
    3ed8:	4801      	ldr	r0, [pc, #4]	; (3ee0 <mpsl_is_initialized+0x8>)
    3eda:	7840      	ldrb	r0, [r0, #1]
    3edc:	4770      	bx	lr
    3ede:	0000      	.short	0x0000
    3ee0:	20000074 	.word	0x20000074

00003ee4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3ee4:	4807      	ldr	r0, [pc, #28]	; (3f04 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    3ee6:	f990 0000 	ldrsb.w	r0, [r0]
    3eea:	2800      	cmp	r0, #0
    3eec:	db09      	blt.n	3f02 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3eee:	f000 021f 	and.w	r2, r0, #31
    3ef2:	2101      	movs	r1, #1
    3ef4:	4091      	lsls	r1, r2
    3ef6:	0940      	lsrs	r0, r0, #5
    3ef8:	0080      	lsls	r0, r0, #2
    3efa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3efe:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3f02:	4770      	bx	lr
    3f04:	20000074 	.word	0x20000074

00003f08 <mpsl_temperature_get>:
    3f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f0c:	2601      	movs	r6, #1
    3f0e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3f12:	0331      	lsls	r1, r6, #12
    3f14:	f04f 0800 	mov.w	r8, #0
    3f18:	4640      	mov	r0, r8
    3f1a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    3f1e:	f3bf 8f4f 	dsb	sy
    3f22:	f3bf 8f6f 	isb	sy
    3f26:	4c16      	ldr	r4, [pc, #88]	; (3f80 <mpsl_temperature_get+0x78>)
    3f28:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    3f2c:	200c      	movs	r0, #12
    3f2e:	f007 ff0e 	bl	bd4e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3f32:	4d14      	ldr	r5, [pc, #80]	; (3f84 <mpsl_temperature_get+0x7c>)
    3f34:	6828      	ldr	r0, [r5, #0]
    3f36:	43c0      	mvns	r0, r0
    3f38:	f340 1700 	sbfx	r7, r0, #4, #1
    3f3c:	6828      	ldr	r0, [r5, #0]
    3f3e:	f040 0010 	orr.w	r0, r0, #16
    3f42:	6028      	str	r0, [r5, #0]
    3f44:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3f48:	6026      	str	r6, [r4, #0]
    3f4a:	1c7f      	adds	r7, r7, #1
    3f4c:	e002      	b.n	3f54 <mpsl_temperature_get+0x4c>
    3f4e:	bf00      	nop
    3f50:	f000 f8a0 	bl	4094 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3f54:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3f58:	2800      	cmp	r0, #0
    3f5a:	d0f9      	beq.n	3f50 <mpsl_temperature_get+0x48>
    3f5c:	b91f      	cbnz	r7, 3f66 <mpsl_temperature_get+0x5e>
    3f5e:	6828      	ldr	r0, [r5, #0]
    3f60:	f020 0010 	bic.w	r0, r0, #16
    3f64:	6028      	str	r0, [r5, #0]
    3f66:	4808      	ldr	r0, [pc, #32]	; (3f88 <mpsl_temperature_get+0x80>)
    3f68:	6805      	ldr	r5, [r0, #0]
    3f6a:	6066      	str	r6, [r4, #4]
    3f6c:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3f70:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3f74:	200c      	movs	r0, #12
    3f76:	f007 feea 	bl	bd4e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3f7a:	4628      	mov	r0, r5
    3f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f80:	4000c000 	.word	0x4000c000
    3f84:	e000ed10 	.word	0xe000ed10
    3f88:	4000c508 	.word	0x4000c508

00003f8c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3f8c:	b510      	push	{r4, lr}
    3f8e:	4602      	mov	r2, r0
    3f90:	2005      	movs	r0, #5
    3f92:	490c      	ldr	r1, [pc, #48]	; (3fc4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3f94:	e004      	b.n	3fa0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    3f96:	bf00      	nop
    3f98:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3f9c:	791b      	ldrb	r3, [r3, #4]
    3f9e:	b133      	cbz	r3, 3fae <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3fa0:	1e40      	subs	r0, r0, #1
    3fa2:	b2c0      	uxtb	r0, r0
    3fa4:	d2f8      	bcs.n	3f98 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    3fa6:	2148      	movs	r1, #72	; 0x48
    3fa8:	2069      	movs	r0, #105	; 0x69
    3faa:	f7ff ff39 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3fae:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3fb2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    3fb6:	2200      	movs	r2, #0
    3fb8:	714a      	strb	r2, [r1, #5]
    3fba:	718a      	strb	r2, [r1, #6]
    3fbc:	2201      	movs	r2, #1
    3fbe:	710a      	strb	r2, [r1, #4]
    3fc0:	bd10      	pop	{r4, pc}
    3fc2:	0000      	.short	0x0000
    3fc4:	20000e84 	.word	0x20000e84

00003fc8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3fc8:	b510      	push	{r4, lr}
    3fca:	2805      	cmp	r0, #5
    3fcc:	d301      	bcc.n	3fd2 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3fce:	2158      	movs	r1, #88	; 0x58
    3fd0:	e006      	b.n	3fe0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3fd2:	490a      	ldr	r1, [pc, #40]	; (3ffc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3fd4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3fd8:	7901      	ldrb	r1, [r0, #4]
    3fda:	2901      	cmp	r1, #1
    3fdc:	d003      	beq.n	3fe6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3fde:	2159      	movs	r1, #89	; 0x59
    3fe0:	2069      	movs	r0, #105	; 0x69
    3fe2:	f7ff ff1d 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3fe6:	7941      	ldrb	r1, [r0, #5]
    3fe8:	7982      	ldrb	r2, [r0, #6]
    3fea:	1c49      	adds	r1, r1, #1
    3fec:	b2c9      	uxtb	r1, r1
    3fee:	428a      	cmp	r2, r1
    3ff0:	d000      	beq.n	3ff4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3ff2:	7141      	strb	r1, [r0, #5]
    3ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ff8:	f7ff bf74 	b.w	3ee4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3ffc:	20000e84 	.word	0x20000e84

00004000 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    4000:	b510      	push	{r4, lr}
    4002:	2805      	cmp	r0, #5
    4004:	d303      	bcc.n	400e <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    4006:	214f      	movs	r1, #79	; 0x4f
    4008:	2069      	movs	r0, #105	; 0x69
    400a:	f7ff ff09 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    400e:	4a03      	ldr	r2, [pc, #12]	; (401c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    4010:	2100      	movs	r1, #0
    4012:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    4016:	7101      	strb	r1, [r0, #4]
    4018:	bd10      	pop	{r4, pc}
    401a:	0000      	.short	0x0000
    401c:	20000e84 	.word	0x20000e84

00004020 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4020:	b570      	push	{r4, r5, r6, lr}
    4022:	2505      	movs	r5, #5
    4024:	4e0e      	ldr	r6, [pc, #56]	; (4060 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    4026:	4c0f      	ldr	r4, [pc, #60]	; (4064 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4028:	e016      	b.n	4058 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    402a:	7821      	ldrb	r1, [r4, #0]
    402c:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4030:	7902      	ldrb	r2, [r0, #4]
    4032:	2a01      	cmp	r2, #1
    4034:	d108      	bne.n	4048 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4036:	7942      	ldrb	r2, [r0, #5]
    4038:	7983      	ldrb	r3, [r0, #6]
    403a:	429a      	cmp	r2, r3
    403c:	d004      	beq.n	4048 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    403e:	7942      	ldrb	r2, [r0, #5]
    4040:	7182      	strb	r2, [r0, #6]
    4042:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    4046:	4780      	blx	r0
    4048:	7820      	ldrb	r0, [r4, #0]
    404a:	1c40      	adds	r0, r0, #1
    404c:	b2c0      	uxtb	r0, r0
    404e:	7020      	strb	r0, [r4, #0]
    4050:	2805      	cmp	r0, #5
    4052:	d301      	bcc.n	4058 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4054:	2000      	movs	r0, #0
    4056:	7020      	strb	r0, [r4, #0]
    4058:	1e6d      	subs	r5, r5, #1
    405a:	b2ed      	uxtb	r5, r5
    405c:	d2e5      	bcs.n	402a <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    405e:	bd70      	pop	{r4, r5, r6, pc}
    4060:	20000e84 	.word	0x20000e84
    4064:	20000352 	.word	0x20000352

00004068 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    4068:	b500      	push	{lr}
    406a:	f007 fe9f 	bl	bdac <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    406e:	b940      	cbnz	r0, 4082 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4070:	f007 fea6 	bl	bdc0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4074:	b928      	cbnz	r0, 4082 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4076:	f007 feba 	bl	bdee <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    407a:	b910      	cbnz	r0, 4082 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    407c:	f007 fecb 	bl	be16 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4080:	b108      	cbz	r0, 4086 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    4082:	4802      	ldr	r0, [pc, #8]	; (408c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    4084:	bd00      	pop	{pc}
    4086:	4802      	ldr	r0, [pc, #8]	; (4090 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    4088:	bd00      	pop	{pc}
    408a:	0000      	.short	0x0000
    408c:	4000050c 	.word	0x4000050c
    4090:	4001e700 	.word	0x4001e700

00004094 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4094:	b510      	push	{r4, lr}
    4096:	f007 febe 	bl	be16 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    409a:	b330      	cbz	r0, 40ea <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    409c:	f3ef 8010 	mrs	r0, PRIMASK
    40a0:	b1c8      	cbz	r0, 40d6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    40a2:	2100      	movs	r1, #0
    40a4:	b672      	cpsid	i
    40a6:	4812      	ldr	r0, [pc, #72]	; (40f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    40a8:	6802      	ldr	r2, [r0, #0]
    40aa:	6803      	ldr	r3, [r0, #0]
    40ac:	f3c2 1200 	ubfx	r2, r2, #4, #1
    40b0:	f043 0310 	orr.w	r3, r3, #16
    40b4:	6003      	str	r3, [r0, #0]
    40b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    40ba:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    40be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    40c2:	431c      	orrs	r4, r3
    40c4:	d000      	beq.n	40c8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    40c6:	bf40      	sev
    40c8:	bf20      	wfe
    40ca:	bf00      	nop
    40cc:	bf00      	nop
    40ce:	bf00      	nop
    40d0:	bf00      	nop
    40d2:	b112      	cbz	r2, 40da <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    40d4:	e005      	b.n	40e2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    40d6:	2101      	movs	r1, #1
    40d8:	e7e4      	b.n	40a4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    40da:	6802      	ldr	r2, [r0, #0]
    40dc:	f022 0210 	bic.w	r2, r2, #16
    40e0:	6002      	str	r2, [r0, #0]
    40e2:	2900      	cmp	r1, #0
    40e4:	d000      	beq.n	40e8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    40e6:	b662      	cpsie	i
    40e8:	bd10      	pop	{r4, pc}
    40ea:	bf20      	wfe
    40ec:	bd10      	pop	{r4, pc}
    40ee:	0000      	.short	0x0000
    40f0:	e000ed10 	.word	0xe000ed10

000040f4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    40f4:	4901      	ldr	r1, [pc, #4]	; (40fc <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    40f6:	2001      	movs	r0, #1
    40f8:	7088      	strb	r0, [r1, #2]
    40fa:	4770      	bx	lr
    40fc:	2000007c 	.word	0x2000007c

00004100 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4100:	0000c063 0000c09b 0000c085 0000c073     c...........s...
    4110:	0000c07f 0000c06d 0000c061 0000c05f     ....m...a..._...
    4120:	0000c097 0000c08b 0000c079 0000c067     ........y...g...
    4130:	0000c059 0000c051 0000c055 0000c04b     Y...Q...U...K...

00004140 <mpsl_fem_disable>:
    4140:	4801      	ldr	r0, [pc, #4]	; (4148 <mpsl_fem_disable+0x8>)
    4142:	6800      	ldr	r0, [r0, #0]
    4144:	6800      	ldr	r0, [r0, #0]
    4146:	4700      	bx	r0
    4148:	20000090 	.word	0x20000090

0000414c <mpsl_fem_lna_configuration_clear>:
    414c:	4801      	ldr	r0, [pc, #4]	; (4154 <mpsl_fem_lna_configuration_clear+0x8>)
    414e:	6800      	ldr	r0, [r0, #0]
    4150:	6940      	ldr	r0, [r0, #20]
    4152:	4700      	bx	r0
    4154:	20000090 	.word	0x20000090

00004158 <mpsl_fem_lna_configuration_set>:
    4158:	4a01      	ldr	r2, [pc, #4]	; (4160 <mpsl_fem_lna_configuration_set+0x8>)
    415a:	6812      	ldr	r2, [r2, #0]
    415c:	68d2      	ldr	r2, [r2, #12]
    415e:	4710      	bx	r2
    4160:	20000090 	.word	0x20000090

00004164 <mpsl_fem_lna_is_configured>:
    4164:	4901      	ldr	r1, [pc, #4]	; (416c <mpsl_fem_lna_is_configured+0x8>)
    4166:	6809      	ldr	r1, [r1, #0]
    4168:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    416a:	4708      	bx	r1
    416c:	20000090 	.word	0x20000090

00004170 <mpsl_fem_pa_configuration_clear>:
    4170:	4801      	ldr	r0, [pc, #4]	; (4178 <mpsl_fem_pa_configuration_clear+0x8>)
    4172:	6800      	ldr	r0, [r0, #0]
    4174:	6900      	ldr	r0, [r0, #16]
    4176:	4700      	bx	r0
    4178:	20000090 	.word	0x20000090

0000417c <mpsl_fem_pa_configuration_set>:
    417c:	4a01      	ldr	r2, [pc, #4]	; (4184 <mpsl_fem_pa_configuration_set+0x8>)
    417e:	6812      	ldr	r2, [r2, #0]
    4180:	6892      	ldr	r2, [r2, #8]
    4182:	4710      	bx	r2
    4184:	20000090 	.word	0x20000090

00004188 <mpsl_fem_pa_gain_set>:
    4188:	4901      	ldr	r1, [pc, #4]	; (4190 <mpsl_fem_pa_gain_set+0x8>)
    418a:	6809      	ldr	r1, [r1, #0]
    418c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    418e:	4708      	bx	r1
    4190:	20000090 	.word	0x20000090

00004194 <mpsl_fem_pa_is_configured>:
    4194:	4901      	ldr	r1, [pc, #4]	; (419c <mpsl_fem_pa_is_configured+0x8>)
    4196:	6809      	ldr	r1, [r1, #0]
    4198:	6a89      	ldr	r1, [r1, #40]	; 0x28
    419a:	4708      	bx	r1
    419c:	20000090 	.word	0x20000090

000041a0 <mpsl_fem_tx_power_split>:
    41a0:	4b01      	ldr	r3, [pc, #4]	; (41a8 <mpsl_fem_tx_power_split+0x8>)
    41a2:	681b      	ldr	r3, [r3, #0]
    41a4:	685b      	ldr	r3, [r3, #4]
    41a6:	4718      	bx	r3
    41a8:	20000090 	.word	0x20000090

000041ac <mpsl_fem_device_config_254_apply_get>:
    41ac:	4801      	ldr	r0, [pc, #4]	; (41b4 <mpsl_fem_device_config_254_apply_get+0x8>)
    41ae:	7800      	ldrb	r0, [r0, #0]
    41b0:	4770      	bx	lr
    41b2:	0000      	.short	0x0000
    41b4:	20000353 	.word	0x20000353
    41b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    41ba:	4c14      	ldr	r4, [pc, #80]	; (420c <mpsl_fem_device_config_254_apply_get+0x60>)
    41bc:	7a20      	ldrb	r0, [r4, #8]
    41be:	f88d 0001 	strb.w	r0, [sp, #1]
    41c2:	79e0      	ldrb	r0, [r4, #7]
    41c4:	f88d 0000 	strb.w	r0, [sp]
    41c8:	79a0      	ldrb	r0, [r4, #6]
    41ca:	f8ad 0004 	strh.w	r0, [sp, #4]
    41ce:	7960      	ldrb	r0, [r4, #5]
    41d0:	f8ad 0002 	strh.w	r0, [sp, #2]
    41d4:	4668      	mov	r0, sp
    41d6:	f005 fe73 	bl	9ec0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    41da:	b108      	cbz	r0, 41e0 <mpsl_fem_device_config_254_apply_get+0x34>
    41dc:	2190      	movs	r1, #144	; 0x90
    41de:	e010      	b.n	4202 <mpsl_fem_device_config_254_apply_get+0x56>
    41e0:	68e0      	ldr	r0, [r4, #12]
    41e2:	9002      	str	r0, [sp, #8]
    41e4:	a802      	add	r0, sp, #8
    41e6:	f005 fe81 	bl	9eec <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    41ea:	b108      	cbz	r0, 41f0 <mpsl_fem_device_config_254_apply_get+0x44>
    41ec:	2194      	movs	r1, #148	; 0x94
    41ee:	e008      	b.n	4202 <mpsl_fem_device_config_254_apply_get+0x56>
    41f0:	4807      	ldr	r0, [pc, #28]	; (4210 <mpsl_fem_device_config_254_apply_get+0x64>)
    41f2:	6800      	ldr	r0, [r0, #0]
    41f4:	9003      	str	r0, [sp, #12]
    41f6:	a803      	add	r0, sp, #12
    41f8:	f00b fb04 	bl	f804 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    41fc:	2800      	cmp	r0, #0
    41fe:	d003      	beq.n	4208 <mpsl_fem_device_config_254_apply_get+0x5c>
    4200:	2198      	movs	r1, #152	; 0x98
    4202:	2003      	movs	r0, #3
    4204:	f000 f8ea 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4208:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    420a:	0000      	.short	0x0000
    420c:	20000eac 	.word	0x20000eac
    4210:	000044e4 	.word	0x000044e4

00004214 <sdc_build_revision_get>:
    4214:	b510      	push	{r4, lr}
    4216:	b128      	cbz	r0, 4224 <sdc_build_revision_get+0x10>
    4218:	2214      	movs	r2, #20
    421a:	4904      	ldr	r1, [pc, #16]	; (422c <sdc_build_revision_get+0x18>)
    421c:	f007 fe3b 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4220:	2000      	movs	r0, #0
    4222:	bd10      	pop	{r4, pc}
    4224:	f06f 0015 	mvn.w	r0, #21
    4228:	bd10      	pop	{r4, pc}
    422a:	0000      	.short	0x0000
    422c:	00004508 	.word	0x00004508

00004230 <sdc_cfg_set>:
    4230:	b570      	push	{r4, r5, r6, lr}
    4232:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    4236:	bb90      	cbnz	r0, 429e <sdc_cfg_set+0x6e>
    4238:	4c24      	ldr	r4, [pc, #144]	; (42cc <sdc_cfg_set+0x9c>)
    423a:	7860      	ldrb	r0, [r4, #1]
    423c:	b108      	cbz	r0, 4242 <sdc_cfg_set+0x12>
    423e:	1198      	asrs	r0, r3, #6
    4240:	bd70      	pop	{r4, r5, r6, pc}
    4242:	b309      	cbz	r1, 4288 <sdc_cfg_set+0x58>
    4244:	f06f 0515 	mvn.w	r5, #21
    4248:	b33a      	cbz	r2, 429a <sdc_cfg_set+0x6a>
    424a:	4821      	ldr	r0, [pc, #132]	; (42d0 <sdc_cfg_set+0xa0>)
    424c:	2908      	cmp	r1, #8
    424e:	d237      	bcs.n	42c0 <sdc_cfg_set+0x90>
    4250:	e8df f001 	tbb	[pc, r1]
    4254:	0a070436 	.word	0x0a070436
    4258:	291e1b18 	.word	0x291e1b18
    425c:	7811      	ldrb	r1, [r2, #0]
    425e:	7001      	strb	r1, [r0, #0]
    4260:	e023      	b.n	42aa <sdc_cfg_set+0x7a>
    4262:	7811      	ldrb	r1, [r2, #0]
    4264:	7041      	strb	r1, [r0, #1]
    4266:	e020      	b.n	42aa <sdc_cfg_set+0x7a>
    4268:	7891      	ldrb	r1, [r2, #2]
    426a:	b1b1      	cbz	r1, 429a <sdc_cfg_set+0x6a>
    426c:	78d1      	ldrb	r1, [r2, #3]
    426e:	b1a1      	cbz	r1, 429a <sdc_cfg_set+0x6a>
    4270:	7811      	ldrb	r1, [r2, #0]
    4272:	291b      	cmp	r1, #27
    4274:	d311      	bcc.n	429a <sdc_cfg_set+0x6a>
    4276:	7851      	ldrb	r1, [r2, #1]
    4278:	291b      	cmp	r1, #27
    427a:	d30e      	bcc.n	429a <sdc_cfg_set+0x6a>
    427c:	6811      	ldr	r1, [r2, #0]
    427e:	f8c0 1005 	str.w	r1, [r0, #5]
    4282:	e012      	b.n	42aa <sdc_cfg_set+0x7a>
    4284:	6811      	ldr	r1, [r2, #0]
    4286:	60c1      	str	r1, [r0, #12]
    4288:	e00f      	b.n	42aa <sdc_cfg_set+0x7a>
    428a:	7811      	ldrb	r1, [r2, #0]
    428c:	7081      	strb	r1, [r0, #2]
    428e:	e00c      	b.n	42aa <sdc_cfg_set+0x7a>
    4290:	78e1      	ldrb	r1, [r4, #3]
    4292:	b129      	cbz	r1, 42a0 <sdc_cfg_set+0x70>
    4294:	7811      	ldrb	r1, [r2, #0]
    4296:	2902      	cmp	r1, #2
    4298:	d202      	bcs.n	42a0 <sdc_cfg_set+0x70>
    429a:	4628      	mov	r0, r5
    429c:	bd70      	pop	{r4, r5, r6, pc}
    429e:	e00f      	b.n	42c0 <sdc_cfg_set+0x90>
    42a0:	7811      	ldrb	r1, [r2, #0]
    42a2:	7401      	strb	r1, [r0, #16]
    42a4:	e001      	b.n	42aa <sdc_cfg_set+0x7a>
    42a6:	8811      	ldrh	r1, [r2, #0]
    42a8:	8241      	strh	r1, [r0, #18]
    42aa:	2201      	movs	r2, #1
    42ac:	4908      	ldr	r1, [pc, #32]	; (42d0 <sdc_cfg_set+0xa0>)
    42ae:	2000      	movs	r0, #0
    42b0:	f007 ff0f 	bl	c0d2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    42b4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    42b8:	db04      	blt.n	42c4 <sdc_cfg_set+0x94>
    42ba:	f06f 000b 	mvn.w	r0, #11
    42be:	e7ed      	b.n	429c <sdc_cfg_set+0x6c>
    42c0:	4618      	mov	r0, r3
    42c2:	e7eb      	b.n	429c <sdc_cfg_set+0x6c>
    42c4:	2101      	movs	r1, #1
    42c6:	70a1      	strb	r1, [r4, #2]
    42c8:	e7e8      	b.n	429c <sdc_cfg_set+0x6c>
    42ca:	0000      	.short	0x0000
    42cc:	20000094 	.word	0x20000094
    42d0:	20000eac 	.word	0x20000eac

000042d4 <sdc_disable>:
    42d4:	b510      	push	{r4, lr}
    42d6:	4c07      	ldr	r4, [pc, #28]	; (42f4 <sdc_disable+0x20>)
    42d8:	7860      	ldrb	r0, [r4, #1]
    42da:	b120      	cbz	r0, 42e6 <sdc_disable+0x12>
    42dc:	f006 f8aa 	bl	a434 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    42e0:	7820      	ldrb	r0, [r4, #0]
    42e2:	f7ff fe8d 	bl	4000 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    42e6:	f000 fd85 	bl	4df4 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    42ea:	f000 fe5f 	bl	4fac <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    42ee:	2000      	movs	r0, #0
    42f0:	7060      	strb	r0, [r4, #1]
    42f2:	bd10      	pop	{r4, pc}
    42f4:	20000094 	.word	0x20000094

000042f8 <sdc_enable>:
    42f8:	b570      	push	{r4, r5, r6, lr}
    42fa:	460c      	mov	r4, r1
    42fc:	0005      	movs	r5, r0
    42fe:	d019      	beq.n	4334 <sdc_enable+0x3c>
    4300:	b1c4      	cbz	r4, 4334 <sdc_enable+0x3c>
    4302:	f000 f927 	bl	4554 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4306:	b1c0      	cbz	r0, 433a <sdc_enable+0x42>
    4308:	4628      	mov	r0, r5
    430a:	f7ff fe3f 	bl	3f8c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    430e:	4d0c      	ldr	r5, [pc, #48]	; (4340 <sdc_enable+0x48>)
    4310:	2200      	movs	r2, #0
    4312:	490c      	ldr	r1, [pc, #48]	; (4344 <sdc_enable+0x4c>)
    4314:	7028      	strb	r0, [r5, #0]
    4316:	4620      	mov	r0, r4
    4318:	f007 fedb 	bl	c0d2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    431c:	f00b fe75 	bl	1000a <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4320:	2100      	movs	r1, #0
    4322:	7828      	ldrb	r0, [r5, #0]
    4324:	f006 f876 	bl	a414 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4328:	f7ff ff46 	bl	41b8 <mpsl_fem_device_config_254_apply_get+0xc>
    432c:	2001      	movs	r0, #1
    432e:	7068      	strb	r0, [r5, #1]
    4330:	2000      	movs	r0, #0
    4332:	bd70      	pop	{r4, r5, r6, pc}
    4334:	f06f 0015 	mvn.w	r0, #21
    4338:	bd70      	pop	{r4, r5, r6, pc}
    433a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    433e:	bd70      	pop	{r4, r5, r6, pc}
    4340:	20000094 	.word	0x20000094
    4344:	20000eac 	.word	0x20000eac

00004348 <sdc_init>:
    4348:	b530      	push	{r4, r5, lr}
    434a:	b089      	sub	sp, #36	; 0x24
    434c:	0005      	movs	r5, r0
    434e:	d00c      	beq.n	436a <sdc_init+0x22>
    4350:	f7ff fdc2 	bl	3ed8 <mpsl_is_initialized>
    4354:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    4358:	b120      	cbz	r0, 4364 <sdc_init+0x1c>
    435a:	f7ff fc69 	bl	3c30 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    435e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4362:	d905      	bls.n	4370 <sdc_init+0x28>
    4364:	4620      	mov	r0, r4
    4366:	b009      	add	sp, #36	; 0x24
    4368:	bd30      	pop	{r4, r5, pc}
    436a:	f06f 0015 	mvn.w	r0, #21
    436e:	e7fa      	b.n	4366 <sdc_init+0x1e>
    4370:	4c15      	ldr	r4, [pc, #84]	; (43c8 <sdc_init+0x80>)
    4372:	4816      	ldr	r0, [pc, #88]	; (43cc <sdc_init+0x84>)
    4374:	6065      	str	r5, [r4, #4]
    4376:	f000 fa0b 	bl	4790 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    437a:	2000      	movs	r0, #0
    437c:	7060      	strb	r0, [r4, #1]
    437e:	70a0      	strb	r0, [r4, #2]
    4380:	70e0      	strb	r0, [r4, #3]
    4382:	4601      	mov	r1, r0
    4384:	2220      	movs	r2, #32
    4386:	4668      	mov	r0, sp
    4388:	f007 fdff 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    438c:	2220      	movs	r2, #32
    438e:	4910      	ldr	r1, [pc, #64]	; (43d0 <sdc_init+0x88>)
    4390:	4668      	mov	r0, sp
    4392:	f007 fd80 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4396:	2220      	movs	r2, #32
    4398:	4669      	mov	r1, sp
    439a:	480e      	ldr	r0, [pc, #56]	; (43d4 <sdc_init+0x8c>)
    439c:	f007 fd7b 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    43a0:	f3ef 8410 	mrs	r4, PRIMASK
    43a4:	b672      	cpsid	i
    43a6:	f06f 000c 	mvn.w	r0, #12
    43aa:	f000 fd31 	bl	4e10 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    43ae:	480a      	ldr	r0, [pc, #40]	; (43d8 <sdc_init+0x90>)
    43b0:	f000 fe08 	bl	4fc4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    43b4:	b118      	cbz	r0, 43be <sdc_init+0x76>
    43b6:	21ab      	movs	r1, #171	; 0xab
    43b8:	2003      	movs	r0, #3
    43ba:	f000 f80f 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43be:	b904      	cbnz	r4, 43c2 <sdc_init+0x7a>
    43c0:	b662      	cpsie	i
    43c2:	2000      	movs	r0, #0
    43c4:	e7cf      	b.n	4366 <sdc_init+0x1e>
    43c6:	0000      	.short	0x0000
    43c8:	20000094 	.word	0x20000094
    43cc:	000041b9 	.word	0x000041b9
    43d0:	000044e8 	.word	0x000044e8
    43d4:	20000eac 	.word	0x20000eac
    43d8:	00004581 	.word	0x00004581

000043dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    43dc:	b50e      	push	{r1, r2, r3, lr}
    43de:	b672      	cpsid	i
    43e0:	4a15      	ldr	r2, [pc, #84]	; (4438 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    43e2:	6855      	ldr	r5, [r2, #4]
    43e4:	b1dd      	cbz	r5, 441e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    43e6:	2200      	movs	r2, #0
    43e8:	4603      	mov	r3, r0
    43ea:	466e      	mov	r6, sp
    43ec:	240a      	movs	r4, #10
    43ee:	e003      	b.n	43f8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    43f0:	fbb0 f0f4 	udiv	r0, r0, r4
    43f4:	1c52      	adds	r2, r2, #1
    43f6:	b2d2      	uxtb	r2, r2
    43f8:	2800      	cmp	r0, #0
    43fa:	d1f9      	bne.n	43f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    43fc:	54b0      	strb	r0, [r6, r2]
    43fe:	e00a      	b.n	4416 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    4400:	b2d8      	uxtb	r0, r3
    4402:	fbb0 f7f4 	udiv	r7, r0, r4
    4406:	fbb3 f3f4 	udiv	r3, r3, r4
    440a:	fb04 0017 	mls	r0, r4, r7, r0
    440e:	1e52      	subs	r2, r2, #1
    4410:	b2d2      	uxtb	r2, r2
    4412:	3030      	adds	r0, #48	; 0x30
    4414:	54b0      	strb	r0, [r6, r2]
    4416:	2a00      	cmp	r2, #0
    4418:	d1f2      	bne.n	4400 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    441a:	4630      	mov	r0, r6
    441c:	47a8      	blx	r5
    441e:	f3bf 8f4f 	dsb	sy
    4422:	4806      	ldr	r0, [pc, #24]	; (443c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4424:	6801      	ldr	r1, [r0, #0]
    4426:	4a06      	ldr	r2, [pc, #24]	; (4440 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4428:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    442c:	4311      	orrs	r1, r2
    442e:	6001      	str	r1, [r0, #0]
    4430:	f3bf 8f4f 	dsb	sy
    4434:	bf00      	nop
    4436:	e7fd      	b.n	4434 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    4438:	20000094 	.word	0x20000094
    443c:	e000ed0c 	.word	0xe000ed0c
    4440:	05fa0004 	.word	0x05fa0004

00004444 <sdc_support_adv>:
    4444:	4806      	ldr	r0, [pc, #24]	; (4460 <sdc_support_adv+0x1c>)
    4446:	b510      	push	{r4, lr}
    4448:	7881      	ldrb	r1, [r0, #2]
    444a:	7840      	ldrb	r0, [r0, #1]
    444c:	4301      	orrs	r1, r0
    444e:	d002      	beq.n	4456 <sdc_support_adv+0x12>
    4450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4454:	bd10      	pop	{r4, pc}
    4456:	f005 fffb 	bl	a450 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    445a:	2000      	movs	r0, #0
    445c:	bd10      	pop	{r4, pc}
    445e:	0000      	.short	0x0000
    4460:	20000094 	.word	0x20000094

00004464 <sdc_support_dle_peripheral>:
    4464:	4806      	ldr	r0, [pc, #24]	; (4480 <sdc_support_dle_peripheral+0x1c>)
    4466:	b510      	push	{r4, lr}
    4468:	7881      	ldrb	r1, [r0, #2]
    446a:	7840      	ldrb	r0, [r0, #1]
    446c:	4301      	orrs	r1, r0
    446e:	d002      	beq.n	4476 <sdc_support_dle_peripheral+0x12>
    4470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4474:	bd10      	pop	{r4, pc}
    4476:	f005 fd51 	bl	9f1c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    447a:	2000      	movs	r0, #0
    447c:	bd10      	pop	{r4, pc}
    447e:	0000      	.short	0x0000
    4480:	20000094 	.word	0x20000094

00004484 <sdc_support_le_2m_phy>:
    4484:	4806      	ldr	r0, [pc, #24]	; (44a0 <sdc_support_le_2m_phy+0x1c>)
    4486:	b510      	push	{r4, lr}
    4488:	7881      	ldrb	r1, [r0, #2]
    448a:	7840      	ldrb	r0, [r0, #1]
    448c:	4301      	orrs	r1, r0
    448e:	d002      	beq.n	4496 <sdc_support_le_2m_phy+0x12>
    4490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4494:	bd10      	pop	{r4, pc}
    4496:	f00b fb80 	bl	fb9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    449a:	2000      	movs	r0, #0
    449c:	bd10      	pop	{r4, pc}
    449e:	0000      	.short	0x0000
    44a0:	20000094 	.word	0x20000094

000044a4 <sdc_support_peripheral>:
    44a4:	4806      	ldr	r0, [pc, #24]	; (44c0 <sdc_support_peripheral+0x1c>)
    44a6:	b510      	push	{r4, lr}
    44a8:	7881      	ldrb	r1, [r0, #2]
    44aa:	7840      	ldrb	r0, [r0, #1]
    44ac:	4301      	orrs	r1, r0
    44ae:	d002      	beq.n	44b6 <sdc_support_peripheral+0x12>
    44b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    44b4:	bd10      	pop	{r4, pc}
    44b6:	f005 ffdd 	bl	a474 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    44ba:	2000      	movs	r0, #0
    44bc:	bd10      	pop	{r4, pc}
    44be:	0000      	.short	0x0000
    44c0:	20000094 	.word	0x20000094

000044c4 <sdc_support_phy_update_peripheral>:
    44c4:	4806      	ldr	r0, [pc, #24]	; (44e0 <sdc_support_phy_update_peripheral+0x1c>)
    44c6:	b510      	push	{r4, lr}
    44c8:	7881      	ldrb	r1, [r0, #2]
    44ca:	7840      	ldrb	r0, [r0, #1]
    44cc:	4301      	orrs	r1, r0
    44ce:	d002      	beq.n	44d6 <sdc_support_phy_update_peripheral+0x12>
    44d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    44d4:	bd10      	pop	{r4, pc}
    44d6:	f00b fb70 	bl	fbba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    44da:	2000      	movs	r0, #0
    44dc:	bd10      	pop	{r4, pc}
    44de:	0000      	.short	0x0000
    44e0:	20000094 	.word	0x20000094
    44e4:	00000001 	.word	0x00000001
    44e8:	00010101 	.word	0x00010101
    44ec:	031b1b00 	.word	0x031b1b00
    44f0:	00000002 	.word	0x00000002
    44f4:	00001d4c 	.word	0x00001d4c
    44f8:	001f0003 	.word	0x001f0003
	...
    4508:	2a41906d 	.word	0x2a41906d
    450c:	17ade838 	.word	0x17ade838
    4510:	3803a529 	.word	0x3803a529
    4514:	85d72739 	.word	0x85d72739
    4518:	e1d8851f 	.word	0xe1d8851f

0000451c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    451c:	4a05      	ldr	r2, [pc, #20]	; (4534 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    451e:	b510      	push	{r4, lr}
    4520:	6852      	ldr	r2, [r2, #4]
    4522:	b112      	cbz	r2, 452a <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4528:	4710      	bx	r2
    452a:	2192      	movs	r1, #146	; 0x92
    452c:	2004      	movs	r0, #4
    452e:	f7ff ff55 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4532:	0000      	.short	0x0000
    4534:	20000ecc 	.word	0x20000ecc

00004538 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4538:	4a05      	ldr	r2, [pc, #20]	; (4550 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    453a:	b510      	push	{r4, lr}
    453c:	6892      	ldr	r2, [r2, #8]
    453e:	b112      	cbz	r2, 4546 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4544:	4710      	bx	r2
    4546:	2198      	movs	r1, #152	; 0x98
    4548:	2004      	movs	r0, #4
    454a:	f7ff ff47 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    454e:	0000      	.short	0x0000
    4550:	20000ecc 	.word	0x20000ecc

00004554 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4554:	4805      	ldr	r0, [pc, #20]	; (456c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4556:	6801      	ldr	r1, [r0, #0]
    4558:	b129      	cbz	r1, 4566 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    455a:	6841      	ldr	r1, [r0, #4]
    455c:	b119      	cbz	r1, 4566 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    455e:	6880      	ldr	r0, [r0, #8]
    4560:	b108      	cbz	r0, 4566 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4562:	2001      	movs	r0, #1
    4564:	4770      	bx	lr
    4566:	2000      	movs	r0, #0
    4568:	4770      	bx	lr
    456a:	0000      	.short	0x0000
    456c:	20000ecc 	.word	0x20000ecc

00004570 <sdc_rand_source_register>:
    4570:	4902      	ldr	r1, [pc, #8]	; (457c <sdc_rand_source_register+0xc>)
    4572:	c80d      	ldmia	r0, {r0, r2, r3}
    4574:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4578:	2000      	movs	r0, #0
    457a:	4770      	bx	lr
    457c:	20000ecc 	.word	0x20000ecc

00004580 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4582:	4c12      	ldr	r4, [pc, #72]	; (45cc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4584:	2600      	movs	r6, #0
    4586:	6825      	ldr	r5, [r4, #0]
    4588:	e011      	b.n	45ae <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    458a:	9800      	ldr	r0, [sp, #0]
    458c:	2802      	cmp	r0, #2
    458e:	d002      	beq.n	4596 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4590:	2803      	cmp	r0, #3
    4592:	d10c      	bne.n	45ae <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4594:	e006      	b.n	45a4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4596:	6820      	ldr	r0, [r4, #0]
    4598:	b110      	cbz	r0, 45a0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    459a:	2000      	movs	r0, #0
    459c:	6026      	str	r6, [r4, #0]
    459e:	e005      	b.n	45ac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    45a0:	2128      	movs	r1, #40	; 0x28
    45a2:	e00c      	b.n	45be <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    45a4:	6820      	ldr	r0, [r4, #0]
    45a6:	b168      	cbz	r0, 45c4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    45a8:	2001      	movs	r0, #1
    45aa:	6026      	str	r6, [r4, #0]
    45ac:	47a8      	blx	r5
    45ae:	4668      	mov	r0, sp
    45b0:	f000 fcce 	bl	4f50 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    45b4:	2800      	cmp	r0, #0
    45b6:	d0e8      	beq.n	458a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    45b8:	2805      	cmp	r0, #5
    45ba:	d005      	beq.n	45c8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    45bc:	2135      	movs	r1, #53	; 0x35
    45be:	2004      	movs	r0, #4
    45c0:	f7ff ff0c 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45c4:	212d      	movs	r1, #45	; 0x2d
    45c6:	e7fa      	b.n	45be <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    45c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45ca:	0000      	.short	0x0000
    45cc:	2000009c 	.word	0x2000009c

000045d0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    45d0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    45d4:	4c29      	ldr	r4, [pc, #164]	; (467c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    45d6:	4605      	mov	r5, r0
    45d8:	1d00      	adds	r0, r0, #4
    45da:	f504 7782 	add.w	r7, r4, #260	; 0x104
    45de:	60a0      	str	r0, [r4, #8]
    45e0:	7838      	ldrb	r0, [r7, #0]
    45e2:	b158      	cbz	r0, 45fc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
    45e4:	78ba      	ldrb	r2, [r7, #2]
    45e6:	463c      	mov	r4, r7
    45e8:	1c79      	adds	r1, r7, #1
    45ea:	4628      	mov	r0, r5
    45ec:	1c92      	adds	r2, r2, #2
    45ee:	f007 fc52 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    45f2:	2000      	movs	r0, #0
    45f4:	7020      	strb	r0, [r4, #0]
    45f6:	2004      	movs	r0, #4
    45f8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    45fc:	481f      	ldr	r0, [pc, #124]	; (467c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    45fe:	f001 fe97 	bl	6330 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4602:	4606      	mov	r6, r0
    4604:	2802      	cmp	r0, #2
    4606:	d002      	beq.n	460e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x3e>
    4608:	2e04      	cmp	r6, #4
    460a:	d005      	beq.n	4618 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x48>
    460c:	e026      	b.n	465c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
    460e:	491b      	ldr	r1, [pc, #108]	; (467c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    4610:	4628      	mov	r0, r5
    4612:	f007 fddd 	bl	c1d0 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    4616:	e021      	b.n	465c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
    4618:	7820      	ldrb	r0, [r4, #0]
    461a:	2811      	cmp	r0, #17
    461c:	d104      	bne.n	4628 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x58>
    461e:	210a      	movs	r1, #10
    4620:	203e      	movs	r0, #62	; 0x3e
    4622:	f007 fda7 	bl	c174 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    4626:	b118      	cbz	r0, 4630 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x60>
    4628:	7820      	ldrb	r0, [r4, #0]
    462a:	2808      	cmp	r0, #8
    462c:	d005      	beq.n	463a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6a>
    462e:	e009      	b.n	4644 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x74>
    4630:	4912      	ldr	r1, [pc, #72]	; (467c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    4632:	4628      	mov	r0, r5
    4634:	f007 ffc4 	bl	c5c0 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4638:	e00a      	b.n	4650 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x80>
    463a:	2105      	movs	r1, #5
    463c:	203e      	movs	r0, #62	; 0x3e
    463e:	f007 fd99 	bl	c174 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    4642:	b168      	cbz	r0, 4660 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
    4644:	490d      	ldr	r1, [pc, #52]	; (467c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    4646:	4628      	mov	r0, r5
    4648:	f007 fdf0 	bl	c22c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    464c:	2800      	cmp	r0, #0
    464e:	d0c7      	beq.n	45e0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    4650:	78a9      	ldrb	r1, [r5, #2]
    4652:	7828      	ldrb	r0, [r5, #0]
    4654:	f007 fd8e 	bl	c174 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    4658:	2800      	cmp	r0, #0
    465a:	d0c1      	beq.n	45e0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    465c:	4630      	mov	r0, r6
    465e:	e7cb      	b.n	45f8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    4660:	88a0      	ldrh	r0, [r4, #4]
    4662:	f8ad 0000 	strh.w	r0, [sp]
    4666:	a901      	add	r1, sp, #4
    4668:	4668      	mov	r0, sp
    466a:	f008 f8dc 	bl	c826 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    466e:	2800      	cmp	r0, #0
    4670:	d0b6      	beq.n	45e0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    4672:	21aa      	movs	r1, #170	; 0xaa
    4674:	2008      	movs	r0, #8
    4676:	f7ff feb1 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    467a:	0000      	.short	0x0000
    467c:	20000ed8 	.word	0x20000ed8
    4680:	b570      	push	{r4, r5, r6, lr}
    4682:	780a      	ldrb	r2, [r1, #0]
    4684:	7082      	strb	r2, [r0, #2]
    4686:	b33a      	cbz	r2, 46d8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x108>
    4688:	2a01      	cmp	r2, #1
    468a:	d825      	bhi.n	46d8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x108>
    468c:	2313      	movs	r3, #19
    468e:	7003      	strb	r3, [r0, #0]
    4690:	2300      	movs	r3, #0
    4692:	e00a      	b.n	46aa <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xda>
    4694:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4698:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    469c:	78a6      	ldrb	r6, [r4, #2]
    469e:	70ee      	strb	r6, [r5, #3]
    46a0:	8864      	ldrh	r4, [r4, #2]
    46a2:	0a24      	lsrs	r4, r4, #8
    46a4:	1c5b      	adds	r3, r3, #1
    46a6:	712c      	strb	r4, [r5, #4]
    46a8:	b2db      	uxtb	r3, r3
    46aa:	4293      	cmp	r3, r2
    46ac:	d3f2      	bcc.n	4694 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc4>
    46ae:	2300      	movs	r3, #0
    46b0:	e00b      	b.n	46ca <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xfa>
    46b2:	bf00      	nop
    46b4:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    46b8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    46bc:	792e      	ldrb	r6, [r5, #4]
    46be:	7166      	strb	r6, [r4, #5]
    46c0:	88ad      	ldrh	r5, [r5, #4]
    46c2:	0a2d      	lsrs	r5, r5, #8
    46c4:	1c5b      	adds	r3, r3, #1
    46c6:	71a5      	strb	r5, [r4, #6]
    46c8:	b2db      	uxtb	r3, r3
    46ca:	4293      	cmp	r3, r2
    46cc:	d3f2      	bcc.n	46b4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe4>
    46ce:	2101      	movs	r1, #1
    46d0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    46d4:	b2c0      	uxtb	r0, r0
    46d6:	bd70      	pop	{r4, r5, r6, pc}
    46d8:	2000      	movs	r0, #0
    46da:	bd70      	pop	{r4, r5, r6, pc}

000046dc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    46dc:	2840      	cmp	r0, #64	; 0x40
    46de:	d203      	bcs.n	46e8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    46e0:	1e40      	subs	r0, r0, #1
    46e2:	b2c1      	uxtb	r1, r0
    46e4:	4805      	ldr	r0, [pc, #20]	; (46fc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    46e6:	e005      	b.n	46f4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    46e8:	28ff      	cmp	r0, #255	; 0xff
    46ea:	d005      	beq.n	46f8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    46ec:	3840      	subs	r0, #64	; 0x40
    46ee:	b2c1      	uxtb	r1, r0
    46f0:	4802      	ldr	r0, [pc, #8]	; (46fc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    46f2:	3008      	adds	r0, #8
    46f4:	f007 bf8e 	b.w	c614 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    46f8:	2001      	movs	r0, #1
    46fa:	4770      	bx	lr
    46fc:	200000a0 	.word	0x200000a0

00004700 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4700:	1e40      	subs	r0, r0, #1
    4702:	b2c1      	uxtb	r1, r0
    4704:	4801      	ldr	r0, [pc, #4]	; (470c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    4706:	f007 bf85 	b.w	c614 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    470a:	0000      	.short	0x0000
    470c:	200000b0 	.word	0x200000b0

00004710 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4710:	4902      	ldr	r1, [pc, #8]	; (471c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    4712:	6802      	ldr	r2, [r0, #0]
    4714:	610a      	str	r2, [r1, #16]
    4716:	6840      	ldr	r0, [r0, #4]
    4718:	6148      	str	r0, [r1, #20]
    471a:	4770      	bx	lr
    471c:	200000a0 	.word	0x200000a0

00004720 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4720:	4905      	ldr	r1, [pc, #20]	; (4738 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4722:	6802      	ldr	r2, [r0, #0]
    4724:	600a      	str	r2, [r1, #0]
    4726:	6840      	ldr	r0, [r0, #4]
    4728:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    472c:	600a      	str	r2, [r1, #0]
    472e:	4a03      	ldr	r2, [pc, #12]	; (473c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    4730:	4310      	orrs	r0, r2
    4732:	6048      	str	r0, [r1, #4]
    4734:	4770      	bx	lr
    4736:	0000      	.short	0x0000
    4738:	200000a0 	.word	0x200000a0
    473c:	024007f8 	.word	0x024007f8

00004740 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4740:	4902      	ldr	r1, [pc, #8]	; (474c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    4742:	6802      	ldr	r2, [r0, #0]
    4744:	608a      	str	r2, [r1, #8]
    4746:	6840      	ldr	r0, [r0, #4]
    4748:	60c8      	str	r0, [r1, #12]
    474a:	4770      	bx	lr
    474c:	200000a0 	.word	0x200000a0

00004750 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4750:	4807      	ldr	r0, [pc, #28]	; (4770 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    4752:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4756:	2200      	movs	r2, #0
    4758:	6001      	str	r1, [r0, #0]
    475a:	0cc9      	lsrs	r1, r1, #19
    475c:	6041      	str	r1, [r0, #4]
    475e:	f100 0108 	add.w	r1, r0, #8
    4762:	201f      	movs	r0, #31
    4764:	600a      	str	r2, [r1, #0]
    4766:	604a      	str	r2, [r1, #4]
    4768:	3108      	adds	r1, #8
    476a:	e9c1 0200 	strd	r0, r2, [r1]
    476e:	4770      	bx	lr
    4770:	200000a0 	.word	0x200000a0

00004774 <sdc_hci_cmd_cb_reset>:
    4774:	b510      	push	{r4, lr}
    4776:	f7ff ffeb 	bl	4750 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    477a:	f00b f987 	bl	fa8c <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    477e:	4604      	mov	r4, r0
    4780:	4802      	ldr	r0, [pc, #8]	; (478c <sdc_hci_cmd_cb_reset+0x18>)
    4782:	6800      	ldr	r0, [r0, #0]
    4784:	b100      	cbz	r0, 4788 <sdc_hci_cmd_cb_reset+0x14>
    4786:	4780      	blx	r0
    4788:	4620      	mov	r0, r4
    478a:	bd10      	pop	{r4, pc}
    478c:	200000b8 	.word	0x200000b8

00004790 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4790:	4901      	ldr	r1, [pc, #4]	; (4798 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4792:	6008      	str	r0, [r1, #0]
    4794:	4770      	bx	lr
    4796:	0000      	.short	0x0000
    4798:	200000b8 	.word	0x200000b8

0000479c <sdc_hci_cmd_vs_zephyr_read_version_info>:
    479c:	2102      	movs	r1, #2
    479e:	8001      	strh	r1, [r0, #0]
    47a0:	8041      	strh	r1, [r0, #2]
    47a2:	2100      	movs	r1, #0
    47a4:	7101      	strb	r1, [r0, #4]
    47a6:	216d      	movs	r1, #109	; 0x6d
    47a8:	7141      	strb	r1, [r0, #5]
    47aa:	f244 1190 	movw	r1, #16784	; 0x4190
    47ae:	80c1      	strh	r1, [r0, #6]
    47b0:	4901      	ldr	r1, [pc, #4]	; (47b8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    47b2:	6081      	str	r1, [r0, #8]
    47b4:	2000      	movs	r0, #0
    47b6:	4770      	bx	lr
    47b8:	ade8382a 	.word	0xade8382a

000047bc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    47bc:	b510      	push	{r4, lr}
    47be:	2802      	cmp	r0, #2
    47c0:	d304      	bcc.n	47cc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    47c2:	f44f 7101 	mov.w	r1, #516	; 0x204
    47c6:	2017      	movs	r0, #23
    47c8:	f7ff fe08 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47cc:	4901      	ldr	r1, [pc, #4]	; (47d4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    47ce:	5c08      	ldrb	r0, [r1, r0]
    47d0:	bd10      	pop	{r4, pc}
    47d2:	0000      	.short	0x0000
    47d4:	200010e0 	.word	0x200010e0

000047d8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    47d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47da:	0005      	movs	r5, r0
    47dc:	9500      	str	r5, [sp, #0]
    47de:	d00d      	beq.n	47fc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x24>
    47e0:	2600      	movs	r6, #0
    47e2:	7808      	ldrb	r0, [r1, #0]
    47e4:	7849      	ldrb	r1, [r1, #1]
    47e6:	4604      	mov	r4, r0
    47e8:	42a1      	cmp	r1, r4
    47ea:	d900      	bls.n	47ee <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    47ec:	460c      	mov	r4, r1
    47ee:	07aa      	lsls	r2, r5, #30
    47f0:	d006      	beq.n	4800 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    47f2:	f240 11cb 	movw	r1, #459	; 0x1cb
    47f6:	2017      	movs	r0, #23
    47f8:	f7ff fdf0 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47fc:	2601      	movs	r6, #1
    47fe:	e7f0      	b.n	47e2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    4800:	4f12      	ldr	r7, [pc, #72]	; (484c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    4802:	7038      	strb	r0, [r7, #0]
    4804:	7079      	strb	r1, [r7, #1]
    4806:	4631      	mov	r1, r6
    4808:	4668      	mov	r0, sp
    480a:	f000 f8d3 	bl	49b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    480e:	2100      	movs	r1, #0
    4810:	460b      	mov	r3, r1
    4812:	9800      	ldr	r0, [sp, #0]
    4814:	1cc0      	adds	r0, r0, #3
    4816:	f020 0003 	bic.w	r0, r0, #3
    481a:	9000      	str	r0, [sp, #0]
    481c:	b966      	cbnz	r6, 4838 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    481e:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    4822:	60d0      	str	r0, [r2, #12]
    4824:	2000      	movs	r0, #0
    4826:	e005      	b.n	4834 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>
    4828:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    482c:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    4830:	1c40      	adds	r0, r0, #1
    4832:	b2c0      	uxtb	r0, r0
    4834:	42a0      	cmp	r0, r4
    4836:	d3f7      	bcc.n	4828 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    4838:	9800      	ldr	r0, [sp, #0]
    483a:	1c49      	adds	r1, r1, #1
    483c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4840:	b2c9      	uxtb	r1, r1
    4842:	9000      	str	r0, [sp, #0]
    4844:	2902      	cmp	r1, #2
    4846:	d3e4      	bcc.n	4812 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    4848:	1b40      	subs	r0, r0, r5
    484a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    484c:	200010e0 	.word	0x200010e0

00004850 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4850:	b570      	push	{r4, r5, r6, lr}
    4852:	4604      	mov	r4, r0
    4854:	7985      	ldrb	r5, [r0, #6]
    4856:	f000 f8e9 	bl	4a2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    485a:	4a0c      	ldr	r2, [pc, #48]	; (488c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
    485c:	79e1      	ldrb	r1, [r4, #7]
    485e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    4862:	e00e      	b.n	4882 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
    4864:	68d3      	ldr	r3, [r2, #12]
    4866:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    486a:	b143      	cbz	r3, 487e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
    486c:	1c48      	adds	r0, r1, #1
    486e:	71e0      	strb	r0, [r4, #7]
    4870:	80a1      	strh	r1, [r4, #4]
    4872:	68d0      	ldr	r0, [r2, #12]
    4874:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4878:	6020      	str	r0, [r4, #0]
    487a:	2000      	movs	r0, #0
    487c:	bd70      	pop	{r4, r5, r6, pc}
    487e:	1c49      	adds	r1, r1, #1
    4880:	b2c9      	uxtb	r1, r1
    4882:	4281      	cmp	r1, r0
    4884:	d3ee      	bcc.n	4864 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
    4886:	71e1      	strb	r1, [r4, #7]
    4888:	2005      	movs	r0, #5
    488a:	bd70      	pop	{r4, r5, r6, pc}
    488c:	200010e0 	.word	0x200010e0

00004890 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4890:	b4f0      	push	{r4, r5, r6, r7}
    4892:	b121      	cbz	r1, 489e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4894:	2901      	cmp	r1, #1
    4896:	d002      	beq.n	489e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4898:	bcf0      	pop	{r4, r5, r6, r7}
    489a:	2000      	movs	r0, #0
    489c:	4770      	bx	lr
    489e:	4a0f      	ldr	r2, [pc, #60]	; (48dc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    48a0:	2500      	movs	r5, #0
    48a2:	462b      	mov	r3, r5
    48a4:	f64f 74ff 	movw	r4, #65535	; 0xffff
    48a8:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    48ac:	5c57      	ldrb	r7, [r2, r1]
    48ae:	e00a      	b.n	48c6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    48b0:	195a      	adds	r2, r3, r5
    48b2:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    48b6:	b292      	uxth	r2, r2
    48b8:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
    48bc:	f1bc 0f00 	cmp.w	ip, #0
    48c0:	d004      	beq.n	48cc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    48c2:	1c5b      	adds	r3, r3, #1
    48c4:	b29b      	uxth	r3, r3
    48c6:	429f      	cmp	r7, r3
    48c8:	d8f2      	bhi.n	48b0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    48ca:	4622      	mov	r2, r4
    48cc:	8002      	strh	r2, [r0, #0]
    48ce:	4610      	mov	r0, r2
    48d0:	42a2      	cmp	r2, r4
    48d2:	d0e1      	beq.n	4898 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8>
    48d4:	bcf0      	pop	{r4, r5, r6, r7}
    48d6:	f000 b835 	b.w	4944 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    48da:	0000      	.short	0x0000
    48dc:	200010e0 	.word	0x200010e0

000048e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    48e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48e4:	4606      	mov	r6, r0
    48e6:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    48ea:	460c      	mov	r4, r1
    48ec:	f243 0702 	movw	r7, #12290	; 0x3002
    48f0:	38ff      	subs	r0, #255	; 0xff
    48f2:	d020      	beq.n	4936 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    48f4:	2c02      	cmp	r4, #2
    48f6:	d302      	bcc.n	48fe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    48f8:	2007      	movs	r0, #7
    48fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    48fe:	4630      	mov	r0, r6
    4900:	f000 f848 	bl	4994 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4904:	0005      	movs	r5, r0
    4906:	d016      	beq.n	4936 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4908:	480c      	ldr	r0, [pc, #48]	; (493c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    490a:	4629      	mov	r1, r5
    490c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4910:	4630      	mov	r0, r6
    4912:	4790      	blx	r2
    4914:	480a      	ldr	r0, [pc, #40]	; (4940 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4916:	2100      	movs	r1, #0
    4918:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    491c:	68f8      	ldr	r0, [r7, #12]
    491e:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    4922:	4620      	mov	r0, r4
    4924:	f000 f878 	bl	4a18 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4928:	4602      	mov	r2, r0
    492a:	4629      	mov	r1, r5
    492c:	6878      	ldr	r0, [r7, #4]
    492e:	f008 fa0c 	bl	cd4a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4932:	2000      	movs	r0, #0
    4934:	e7e1      	b.n	48fa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4936:	4638      	mov	r0, r7
    4938:	e7df      	b.n	48fa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    493a:	0000      	.short	0x0000
    493c:	00004a44 	.word	0x00004a44
    4940:	200010e0 	.word	0x200010e0
    4944:	b570      	push	{r4, r5, r6, lr}
    4946:	460e      	mov	r6, r1
    4948:	4605      	mov	r5, r0
    494a:	f008 fa38 	bl	cdbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    494e:	b158      	cbz	r0, 4968 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4950:	480f      	ldr	r0, [pc, #60]	; (4990 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb0>)
    4952:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    4956:	68e0      	ldr	r0, [r4, #12]
    4958:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    495c:	b138      	cbz	r0, 496e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    495e:	f240 118b 	movw	r1, #395	; 0x18b
    4962:	2017      	movs	r0, #23
    4964:	f7ff fd3a 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4968:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    496c:	e7f9      	b.n	4962 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x82>
    496e:	6860      	ldr	r0, [r4, #4]
    4970:	2800      	cmp	r0, #0
    4972:	d00b      	beq.n	498c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    4974:	4630      	mov	r0, r6
    4976:	f000 f84f 	bl	4a18 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    497a:	4601      	mov	r1, r0
    497c:	6860      	ldr	r0, [r4, #4]
    497e:	f008 f98c 	bl	cc9a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4982:	2800      	cmp	r0, #0
    4984:	d002      	beq.n	498c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    4986:	68e1      	ldr	r1, [r4, #12]
    4988:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
    498c:	bd70      	pop	{r4, r5, r6, pc}
    498e:	0000      	.short	0x0000
    4990:	200010e0 	.word	0x200010e0
    4994:	b570      	push	{r4, r5, r6, lr}
    4996:	460c      	mov	r4, r1
    4998:	4605      	mov	r5, r0
    499a:	f008 fa10 	bl	cdbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    499e:	2800      	cmp	r0, #0
    49a0:	d005      	beq.n	49ae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xce>
    49a2:	4803      	ldr	r0, [pc, #12]	; (49b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    49a4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    49a8:	68c0      	ldr	r0, [r0, #12]
    49aa:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    49ae:	bd70      	pop	{r4, r5, r6, pc}
    49b0:	200010e0 	.word	0x200010e0
    49b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    49b8:	4e16      	ldr	r6, [pc, #88]	; (4a14 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>)
    49ba:	4688      	mov	r8, r1
    49bc:	4605      	mov	r5, r0
    49be:	2400      	movs	r4, #0
    49c0:	6828      	ldr	r0, [r5, #0]
    49c2:	1cc0      	adds	r0, r0, #3
    49c4:	f020 0003 	bic.w	r0, r0, #3
    49c8:	6028      	str	r0, [r5, #0]
    49ca:	4620      	mov	r0, r4
    49cc:	f000 f824 	bl	4a18 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    49d0:	5d31      	ldrb	r1, [r6, r4]
    49d2:	4348      	muls	r0, r1
    49d4:	f1b8 0f00 	cmp.w	r8, #0
    49d8:	d001      	beq.n	49de <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfe>
    49da:	2200      	movs	r2, #0
    49dc:	e000      	b.n	49e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    49de:	682a      	ldr	r2, [r5, #0]
    49e0:	4601      	mov	r1, r0
    49e2:	9200      	str	r2, [sp, #0]
    49e4:	b132      	cbz	r2, 49f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x114>
    49e6:	2700      	movs	r7, #0
    49e8:	ea4f 000d 	mov.w	r0, sp
    49ec:	f008 f986 	bl	ccfc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    49f0:	b11f      	cbz	r7, 49fa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11a>
    49f2:	e006      	b.n	4a02 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    49f4:	2701      	movs	r7, #1
    49f6:	2000      	movs	r0, #0
    49f8:	e7f8      	b.n	49ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    49fa:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    49fe:	9a00      	ldr	r2, [sp, #0]
    4a00:	604a      	str	r2, [r1, #4]
    4a02:	6829      	ldr	r1, [r5, #0]
    4a04:	1c64      	adds	r4, r4, #1
    4a06:	4408      	add	r0, r1
    4a08:	b2e4      	uxtb	r4, r4
    4a0a:	6028      	str	r0, [r5, #0]
    4a0c:	2c02      	cmp	r4, #2
    4a0e:	d3d7      	bcc.n	49c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    4a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4a14:	200010e0 	.word	0x200010e0
    4a18:	4903      	ldr	r1, [pc, #12]	; (4a28 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>)
    4a1a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4a1e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4a22:	1cc0      	adds	r0, r0, #3
    4a24:	4008      	ands	r0, r1
    4a26:	4770      	bx	lr
    4a28:	00004a40 	.word	0x00004a40
    4a2c:	4903      	ldr	r1, [pc, #12]	; (4a3c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>)
    4a2e:	7808      	ldrb	r0, [r1, #0]
    4a30:	7849      	ldrb	r1, [r1, #1]
    4a32:	4288      	cmp	r0, r1
    4a34:	d200      	bcs.n	4a38 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>
    4a36:	4608      	mov	r0, r1
    4a38:	4770      	bx	lr
    4a3a:	0000      	.short	0x0000
    4a3c:	200010e0 	.word	0x200010e0
    4a40:	011802e8 	.word	0x011802e8
    4a44:	0000ebeb 	.word	0x0000ebeb
    4a48:	0000df5f 	.word	0x0000df5f

00004a4c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4a4c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a50:	4c24      	ldr	r4, [pc, #144]	; (4ae4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    4a52:	4606      	mov	r6, r0
    4a54:	b081      	sub	sp, #4
    4a56:	6820      	ldr	r0, [r4, #0]
    4a58:	469a      	mov	sl, r3
    4a5a:	4693      	mov	fp, r2
    4a5c:	b158      	cbz	r0, 4a76 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4a5e:	7a01      	ldrb	r1, [r0, #8]
    4a60:	42b1      	cmp	r1, r6
    4a62:	d903      	bls.n	4a6c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4a64:	6840      	ldr	r0, [r0, #4]
    4a66:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    4a6a:	b140      	cbz	r0, 4a7e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4a6c:	f243 0002 	movw	r0, #12290	; 0x3002
    4a70:	b005      	add	sp, #20
    4a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a76:	21a5      	movs	r1, #165	; 0xa5
    4a78:	2018      	movs	r0, #24
    4a7a:	f7ff fcaf 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a7e:	4619      	mov	r1, r3
    4a80:	9802      	ldr	r0, [sp, #8]
    4a82:	f008 f9bf 	bl	ce04 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    4a86:	4680      	mov	r8, r0
    4a88:	4658      	mov	r0, fp
    4a8a:	990e      	ldr	r1, [sp, #56]	; 0x38
    4a8c:	f008 f9b0 	bl	cdf0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    4a90:	4605      	mov	r5, r0
    4a92:	eb08 0005 	add.w	r0, r8, r5
    4a96:	1d00      	adds	r0, r0, #4
    4a98:	b287      	uxth	r7, r0
    4a9a:	6820      	ldr	r0, [r4, #0]
    4a9c:	46a1      	mov	r9, r4
    4a9e:	4639      	mov	r1, r7
    4aa0:	6800      	ldr	r0, [r0, #0]
    4aa2:	f008 f8fa 	bl	cc9a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4aa6:	0004      	movs	r4, r0
    4aa8:	d01a      	beq.n	4ae0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    4aaa:	8067      	strh	r7, [r4, #2]
    4aac:	8025      	strh	r5, [r4, #0]
    4aae:	4629      	mov	r1, r5
    4ab0:	1d20      	adds	r0, r4, #4
    4ab2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4ab4:	4607      	mov	r7, r0
    4ab6:	465a      	mov	r2, fp
    4ab8:	2309      	movs	r3, #9
    4aba:	9500      	str	r5, [sp, #0]
    4abc:	f008 f863 	bl	cb86 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4ac0:	8820      	ldrh	r0, [r4, #0]
    4ac2:	4641      	mov	r1, r8
    4ac4:	4438      	add	r0, r7
    4ac6:	230a      	movs	r3, #10
    4ac8:	9a02      	ldr	r2, [sp, #8]
    4aca:	f8cd a000 	str.w	sl, [sp]
    4ace:	f008 f85a 	bl	cb86 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4ad2:	f8d9 0000 	ldr.w	r0, [r9]
    4ad6:	6840      	ldr	r0, [r0, #4]
    4ad8:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    4adc:	2000      	movs	r0, #0
    4ade:	e7c7      	b.n	4a70 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4ae0:	2004      	movs	r0, #4
    4ae2:	e7c5      	b.n	4a70 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4ae4:	200000bc 	.word	0x200000bc

00004ae8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4ae8:	b570      	push	{r4, r5, r6, lr}
    4aea:	4c14      	ldr	r4, [pc, #80]	; (4b3c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4aec:	6823      	ldr	r3, [r4, #0]
    4aee:	b18b      	cbz	r3, 4b14 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4af0:	7a19      	ldrb	r1, [r3, #8]
    4af2:	4281      	cmp	r1, r0
    4af4:	d912      	bls.n	4b1c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4af6:	685a      	ldr	r2, [r3, #4]
    4af8:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4afc:	b171      	cbz	r1, 4b1c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4afe:	2500      	movs	r5, #0
    4b00:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4b04:	884a      	ldrh	r2, [r1, #2]
    4b06:	6818      	ldr	r0, [r3, #0]
    4b08:	f008 f91f 	bl	cd4a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4b0c:	6821      	ldr	r1, [r4, #0]
    4b0e:	2000      	movs	r0, #0
    4b10:	7a0a      	ldrb	r2, [r1, #8]
    4b12:	e00c      	b.n	4b2e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4b14:	21c6      	movs	r1, #198	; 0xc6
    4b16:	2018      	movs	r0, #24
    4b18:	f7ff fc60 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b1c:	f243 0002 	movw	r0, #12290	; 0x3002
    4b20:	bd70      	pop	{r4, r5, r6, pc}
    4b22:	684b      	ldr	r3, [r1, #4]
    4b24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4b28:	b933      	cbnz	r3, 4b38 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4b2a:	1c40      	adds	r0, r0, #1
    4b2c:	b2c0      	uxtb	r0, r0
    4b2e:	4282      	cmp	r2, r0
    4b30:	d8f7      	bhi.n	4b22 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4b32:	6808      	ldr	r0, [r1, #0]
    4b34:	f008 f8fe 	bl	cd34 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4b38:	2000      	movs	r0, #0
    4b3a:	bd70      	pop	{r4, r5, r6, pc}
    4b3c:	200000bc 	.word	0x200000bc

00004b40 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b44:	460d      	mov	r5, r1
    4b46:	0004      	movs	r4, r0
    4b48:	4690      	mov	r8, r2
    4b4a:	f04f 0600 	mov.w	r6, #0
    4b4e:	d006      	beq.n	4b5e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    4b50:	2700      	movs	r7, #0
    4b52:	07a0      	lsls	r0, r4, #30
    4b54:	d005      	beq.n	4b62 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    4b56:	2186      	movs	r1, #134	; 0x86
    4b58:	2018      	movs	r0, #24
    4b5a:	f7ff fc3f 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b5e:	2701      	movs	r7, #1
    4b60:	e7f7      	b.n	4b52 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4b62:	b1cd      	cbz	r5, 4b98 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    4b64:	4611      	mov	r1, r2
    4b66:	2000      	movs	r0, #0
    4b68:	f008 f8c8 	bl	ccfc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4b6c:	300c      	adds	r0, #12
    4b6e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4b72:	b98f      	cbnz	r7, 4b98 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    4b74:	4f0a      	ldr	r7, [pc, #40]	; (4ba0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    4b76:	f104 000c 	add.w	r0, r4, #12
    4b7a:	00aa      	lsls	r2, r5, #2
    4b7c:	603c      	str	r4, [r7, #0]
    4b7e:	7225      	strb	r5, [r4, #8]
    4b80:	6060      	str	r0, [r4, #4]
    4b82:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4b86:	6020      	str	r0, [r4, #0]
    4b88:	2100      	movs	r1, #0
    4b8a:	6860      	ldr	r0, [r4, #4]
    4b8c:	f007 f9fd 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4b90:	4641      	mov	r1, r8
    4b92:	6838      	ldr	r0, [r7, #0]
    4b94:	f008 f8b2 	bl	ccfc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4b98:	4630      	mov	r0, r6
    4b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b9e:	0000      	.short	0x0000
    4ba0:	200000bc 	.word	0x200000bc

00004ba4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4ba4:	b570      	push	{r4, r5, r6, lr}
    4ba6:	4d08      	ldr	r5, [pc, #32]	; (4bc8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4ba8:	6828      	ldr	r0, [r5, #0]
    4baa:	2800      	cmp	r0, #0
    4bac:	d00a      	beq.n	4bc4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    4bae:	2400      	movs	r4, #0
    4bb0:	e004      	b.n	4bbc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4bb2:	4620      	mov	r0, r4
    4bb4:	f7ff ff98 	bl	4ae8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4bb8:	1c64      	adds	r4, r4, #1
    4bba:	b2e4      	uxtb	r4, r4
    4bbc:	6828      	ldr	r0, [r5, #0]
    4bbe:	7a00      	ldrb	r0, [r0, #8]
    4bc0:	42a0      	cmp	r0, r4
    4bc2:	d8f6      	bhi.n	4bb2 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4bc4:	bd70      	pop	{r4, r5, r6, pc}
    4bc6:	0000      	.short	0x0000
    4bc8:	200000bc 	.word	0x200000bc

00004bcc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4bcc:	4909      	ldr	r1, [pc, #36]	; (4bf4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4bce:	b510      	push	{r4, lr}
    4bd0:	4602      	mov	r2, r0
    4bd2:	6809      	ldr	r1, [r1, #0]
    4bd4:	2000      	movs	r0, #0
    4bd6:	b149      	cbz	r1, 4bec <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4bd8:	7a0b      	ldrb	r3, [r1, #8]
    4bda:	4293      	cmp	r3, r2
    4bdc:	d905      	bls.n	4bea <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4bde:	6849      	ldr	r1, [r1, #4]
    4be0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4be4:	2900      	cmp	r1, #0
    4be6:	d000      	beq.n	4bea <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4be8:	1d08      	adds	r0, r1, #4
    4bea:	bd10      	pop	{r4, pc}
    4bec:	21ec      	movs	r1, #236	; 0xec
    4bee:	2018      	movs	r0, #24
    4bf0:	f7ff fbf4 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4bf4:	200000bc 	.word	0x200000bc

00004bf8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4bf8:	490a      	ldr	r1, [pc, #40]	; (4c24 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4bfa:	b510      	push	{r4, lr}
    4bfc:	4602      	mov	r2, r0
    4bfe:	6809      	ldr	r1, [r1, #0]
    4c00:	2000      	movs	r0, #0
    4c02:	b159      	cbz	r1, 4c1c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4c04:	7a0b      	ldrb	r3, [r1, #8]
    4c06:	4293      	cmp	r3, r2
    4c08:	d907      	bls.n	4c1a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4c0a:	6849      	ldr	r1, [r1, #4]
    4c0c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4c10:	2900      	cmp	r1, #0
    4c12:	d002      	beq.n	4c1a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4c14:	f831 0b04 	ldrh.w	r0, [r1], #4
    4c18:	4408      	add	r0, r1
    4c1a:	bd10      	pop	{r4, pc}
    4c1c:	21fa      	movs	r1, #250	; 0xfa
    4c1e:	2018      	movs	r0, #24
    4c20:	f7ff fbdc 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c24:	200000bc 	.word	0x200000bc
    4c28:	b570      	push	{r4, r5, r6, lr}
    4c2a:	4b1e      	ldr	r3, [pc, #120]	; (4ca4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    4c2c:	6845      	ldr	r5, [r0, #4]
    4c2e:	4604      	mov	r4, r0
    4c30:	2200      	movs	r2, #0
    4c32:	b1a1      	cbz	r1, 4c5e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    4c34:	2001      	movs	r0, #1
    4c36:	7060      	strb	r0, [r4, #1]
    4c38:	8858      	ldrh	r0, [r3, #2]
    4c3a:	0881      	lsrs	r1, r0, #2
    4c3c:	f05f 0000 	movs.w	r0, #0
    4c40:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    4c44:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    4c48:	831a      	strh	r2, [r3, #24]
    4c4a:	8419      	strh	r1, [r3, #32]
    4c4c:	fb00 5301 	mla	r3, r0, r1, r5
    4c50:	6073      	str	r3, [r6, #4]
    4c52:	1823      	adds	r3, r4, r0
    4c54:	1c40      	adds	r0, r0, #1
    4c56:	751a      	strb	r2, [r3, #20]
    4c58:	2804      	cmp	r0, #4
    4c5a:	d3f1      	bcc.n	4c40 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    4c5c:	bd70      	pop	{r4, r5, r6, pc}
    4c5e:	7062      	strb	r2, [r4, #1]
    4c60:	f05f 0000 	movs.w	r0, #0
    4c64:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    4c68:	830a      	strh	r2, [r1, #24]
    4c6a:	840a      	strh	r2, [r1, #32]
    4c6c:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    4c70:	604a      	str	r2, [r1, #4]
    4c72:	1821      	adds	r1, r4, r0
    4c74:	1c40      	adds	r0, r0, #1
    4c76:	750a      	strb	r2, [r1, #20]
    4c78:	2804      	cmp	r0, #4
    4c7a:	d3f3      	bcc.n	4c64 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    4c7c:	8858      	ldrh	r0, [r3, #2]
    4c7e:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    4c82:	d201      	bcs.n	4c88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    4c84:	0846      	lsrs	r6, r0, #1
    4c86:	e000      	b.n	4c8a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    4c88:	26ff      	movs	r6, #255	; 0xff
    4c8a:	f008 f92f 	bl	ceec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    4c8e:	6065      	str	r5, [r4, #4]
    4c90:	8420      	strh	r0, [r4, #32]
    4c92:	1829      	adds	r1, r5, r0
    4c94:	60a1      	str	r1, [r4, #8]
    4c96:	8466      	strh	r6, [r4, #34]	; 0x22
    4c98:	60e5      	str	r5, [r4, #12]
    4c9a:	84a0      	strh	r0, [r4, #36]	; 0x24
    4c9c:	6121      	str	r1, [r4, #16]
    4c9e:	84e6      	strh	r6, [r4, #38]	; 0x26
    4ca0:	bd70      	pop	{r4, r5, r6, pc}
    4ca2:	0000      	.short	0x0000
    4ca4:	200000c0 	.word	0x200000c0

00004ca8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    4ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cac:	b158      	cbz	r0, 4cc6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    4cae:	2500      	movs	r5, #0
    4cb0:	4411      	add	r1, r2
    4cb2:	4e24      	ldr	r6, [pc, #144]	; (4d44 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    4cb4:	b2cc      	uxtb	r4, r1
    4cb6:	2700      	movs	r7, #0
    4cb8:	7034      	strb	r4, [r6, #0]
    4cba:	0781      	lsls	r1, r0, #30
    4cbc:	d005      	beq.n	4cca <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    4cbe:	214e      	movs	r1, #78	; 0x4e
    4cc0:	2009      	movs	r0, #9
    4cc2:	f7ff fb8b 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cc6:	2501      	movs	r5, #1
    4cc8:	e7f2      	b.n	4cb0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    4cca:	2b1f      	cmp	r3, #31
    4ccc:	d804      	bhi.n	4cd8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    4cce:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4cd2:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    4cd6:	e009      	b.n	4cec <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    4cd8:	0059      	lsls	r1, r3, #1
    4cda:	2bff      	cmp	r3, #255	; 0xff
    4cdc:	d90c      	bls.n	4cf8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    4cde:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    4ce2:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4ce6:	d200      	bcs.n	4cea <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4ce8:	4611      	mov	r1, r2
    4cea:	b289      	uxth	r1, r1
    4cec:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    4cf0:	1cc9      	adds	r1, r1, #3
    4cf2:	4011      	ands	r1, r2
    4cf4:	b135      	cbz	r5, 4d04 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    4cf6:	e007      	b.n	4d08 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    4cf8:	227c      	movs	r2, #124	; 0x7c
    4cfa:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4cfe:	d3f4      	bcc.n	4cea <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4d00:	217c      	movs	r1, #124	; 0x7c
    4d02:	e7f2      	b.n	4cea <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4d04:	6070      	str	r0, [r6, #4]
    4d06:	8071      	strh	r1, [r6, #2]
    4d08:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    4d0c:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    4d10:	2200      	movs	r2, #0
    4d12:	6876      	ldr	r6, [r6, #4]
    4d14:	f04f 0c01 	mov.w	ip, #1
    4d18:	e00d      	b.n	4d36 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    4d1a:	b94d      	cbnz	r5, 4d30 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    4d1c:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    4d20:	eb00 0e03 	add.w	lr, r0, r3
    4d24:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    4d28:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    4d2c:	f8c7 e004 	str.w	lr, [r7, #4]
    4d30:	1c52      	adds	r2, r2, #1
    4d32:	440b      	add	r3, r1
    4d34:	b2d2      	uxtb	r2, r2
    4d36:	42a2      	cmp	r2, r4
    4d38:	d3ef      	bcc.n	4d1a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    4d3a:	1ddb      	adds	r3, r3, #7
    4d3c:	f023 0007 	bic.w	r0, r3, #7
    4d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d44:	200000c0 	.word	0x200000c0

00004d48 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    4d48:	b570      	push	{r4, r5, r6, lr}
    4d4a:	4a10      	ldr	r2, [pc, #64]	; (4d8c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    4d4c:	2000      	movs	r0, #0
    4d4e:	6851      	ldr	r1, [r2, #4]
    4d50:	7812      	ldrb	r2, [r2, #0]
    4d52:	e014      	b.n	4d7e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    4d54:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4d58:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    4d5c:	b16b      	cbz	r3, 4d7a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    4d5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4d62:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    4d66:	d00c      	beq.n	4d82 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    4d68:	2500      	movs	r5, #0
    4d6a:	70a5      	strb	r5, [r4, #2]
    4d6c:	2101      	movs	r1, #1
    4d6e:	4620      	mov	r0, r4
    4d70:	f7ff ff5a 	bl	4c28 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    4d74:	7025      	strb	r5, [r4, #0]
    4d76:	4620      	mov	r0, r4
    4d78:	bd70      	pop	{r4, r5, r6, pc}
    4d7a:	1c40      	adds	r0, r0, #1
    4d7c:	b2c0      	uxtb	r0, r0
    4d7e:	4290      	cmp	r0, r2
    4d80:	d3e8      	bcc.n	4d54 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    4d82:	21a9      	movs	r1, #169	; 0xa9
    4d84:	2009      	movs	r0, #9
    4d86:	f7ff fb29 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d8a:	0000      	.short	0x0000
    4d8c:	200000c0 	.word	0x200000c0

00004d90 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    4d90:	4804      	ldr	r0, [pc, #16]	; (4da4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    4d92:	b510      	push	{r4, lr}
    4d94:	8840      	ldrh	r0, [r0, #2]
    4d96:	0884      	lsrs	r4, r0, #2
    4d98:	f008 f8a8 	bl	ceec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    4d9c:	4284      	cmp	r4, r0
    4d9e:	d300      	bcc.n	4da2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    4da0:	4620      	mov	r0, r4
    4da2:	bd10      	pop	{r4, pc}
    4da4:	200000c0 	.word	0x200000c0
    4da8:	b530      	push	{r4, r5, lr}
    4daa:	490d      	ldr	r1, [pc, #52]	; (4de0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    4dac:	2001      	movs	r0, #1
    4dae:	6048      	str	r0, [r1, #4]
    4db0:	1e82      	subs	r2, r0, #2
    4db2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4db6:	490b      	ldr	r1, [pc, #44]	; (4de4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    4db8:	6088      	str	r0, [r1, #8]
    4dba:	2300      	movs	r3, #0
    4dbc:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    4dc0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4dc4:	4c08      	ldr	r4, [pc, #32]	; (4de8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    4dc6:	6023      	str	r3, [r4, #0]
    4dc8:	1d25      	adds	r5, r4, #4
    4dca:	6028      	str	r0, [r5, #0]
    4dcc:	6088      	str	r0, [r1, #8]
    4dce:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4dd2:	6023      	str	r3, [r4, #0]
    4dd4:	6028      	str	r0, [r5, #0]
    4dd6:	4906      	ldr	r1, [pc, #24]	; (4df0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    4dd8:	4804      	ldr	r0, [pc, #16]	; (4dec <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    4dda:	6008      	str	r0, [r1, #0]
    4ddc:	bd30      	pop	{r4, r5, pc}
    4dde:	0000      	.short	0x0000
    4de0:	4000e000 	.word	0x4000e000
    4de4:	4000f000 	.word	0x4000f000
    4de8:	4000f500 	.word	0x4000f500
    4dec:	3ff60000 	.word	0x3ff60000
    4df0:	4001f508 	.word	0x4001f508

00004df4 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    4df4:	b510      	push	{r4, lr}
    4df6:	f7ff ffd7 	bl	4da8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    4dfa:	f008 f94a 	bl	d092 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    4dfe:	4903      	ldr	r1, [pc, #12]	; (4e0c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    4e00:	4801      	ldr	r0, [pc, #4]	; (4e08 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    4e02:	6008      	str	r0, [r1, #0]
    4e04:	bd10      	pop	{r4, pc}
    4e06:	0000      	.short	0x0000
    4e08:	3ff60000 	.word	0x3ff60000
    4e0c:	4001f508 	.word	0x4001f508

00004e10 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4e10:	b510      	push	{r4, lr}
    4e12:	4604      	mov	r4, r0
    4e14:	f7ff ffc8 	bl	4da8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    4e18:	f008 f93b 	bl	d092 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    4e1c:	f000 f888 	bl	4f30 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4e20:	4905      	ldr	r1, [pc, #20]	; (4e38 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    4e22:	4804      	ldr	r0, [pc, #16]	; (4e34 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    4e24:	6008      	str	r0, [r1, #0]
    4e26:	4620      	mov	r0, r4
    4e28:	f000 f8b8 	bl	4f9c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e30:	f000 b8dc 	b.w	4fec <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4e34:	3ff60000 	.word	0x3ff60000
    4e38:	4001f508 	.word	0x4001f508
    4e3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e40:	4682      	mov	sl, r0
    4e42:	4838      	ldr	r0, [pc, #224]	; (4f24 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    4e44:	f006 ff90 	bl	bd68 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4e48:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 4f24 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    4e4c:	b128      	cbz	r0, 4e5a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    4e4e:	2601      	movs	r6, #1
    4e50:	f10b 0001 	add.w	r0, fp, #1
    4e54:	21ff      	movs	r1, #255	; 0xff
    4e56:	7001      	strb	r1, [r0, #0]
    4e58:	e000      	b.n	4e5c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    4e5a:	2600      	movs	r6, #0
    4e5c:	f44f 7580 	mov.w	r5, #256	; 0x100
    4e60:	4c31      	ldr	r4, [pc, #196]	; (4f28 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    4e62:	f04f 0800 	mov.w	r8, #0
    4e66:	1d2f      	adds	r7, r5, #4
    4e68:	2101      	movs	r1, #1
    4e6a:	6061      	str	r1, [r4, #4]
    4e6c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4e70:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4e74:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    4e78:	6021      	str	r1, [r4, #0]
    4e7a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 4f2c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    4e7e:	e01c      	b.n	4eba <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4e80:	f8d9 0000 	ldr.w	r0, [r9]
    4e84:	06c0      	lsls	r0, r0, #27
    4e86:	d518      	bpl.n	4eba <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4e88:	200e      	movs	r0, #14
    4e8a:	f008 f911 	bl	d0b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    4e8e:	f3ef 8010 	mrs	r0, PRIMASK
    4e92:	9000      	str	r0, [sp, #0]
    4e94:	b672      	cpsid	i
    4e96:	2103      	movs	r1, #3
    4e98:	4620      	mov	r0, r4
    4e9a:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    4e9e:	4629      	mov	r1, r5
    4ea0:	f008 f913 	bl	d0ca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4ea4:	b930      	cbnz	r0, 4eb4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    4ea6:	4639      	mov	r1, r7
    4ea8:	4620      	mov	r0, r4
    4eaa:	f008 f90e 	bl	d0ca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4eae:	b908      	cbnz	r0, 4eb4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    4eb0:	f7ff f8f0 	bl	4094 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4eb4:	9800      	ldr	r0, [sp, #0]
    4eb6:	b900      	cbnz	r0, 4eba <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4eb8:	b662      	cpsie	i
    4eba:	4629      	mov	r1, r5
    4ebc:	4620      	mov	r0, r4
    4ebe:	f008 f904 	bl	d0ca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4ec2:	b928      	cbnz	r0, 4ed0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    4ec4:	4639      	mov	r1, r7
    4ec6:	4620      	mov	r0, r4
    4ec8:	f008 f8ff 	bl	d0ca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4ecc:	2800      	cmp	r0, #0
    4ece:	d0d7      	beq.n	4e80 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    4ed0:	4639      	mov	r1, r7
    4ed2:	4620      	mov	r0, r4
    4ed4:	f008 f8f9 	bl	d0ca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    4ed8:	2800      	cmp	r0, #0
    4eda:	d1c5      	bne.n	4e68 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    4edc:	bb06      	cbnz	r6, 4f20 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    4ede:	f89b 1001 	ldrb.w	r1, [fp, #1]
    4ee2:	f88d 1000 	strb.w	r1, [sp]
    4ee6:	9900      	ldr	r1, [sp, #0]
    4ee8:	9100      	str	r1, [sp, #0]
    4eea:	f89d 1000 	ldrb.w	r1, [sp]
    4eee:	b109      	cbz	r1, 4ef4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    4ef0:	2501      	movs	r5, #1
    4ef2:	e000      	b.n	4ef6 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    4ef4:	2500      	movs	r5, #0
    4ef6:	f10b 0001 	add.w	r0, fp, #1
    4efa:	f880 8000 	strb.w	r8, [r0]
    4efe:	2003      	movs	r0, #3
    4f00:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4f04:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4f08:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4f0c:	200e      	movs	r0, #14
    4f0e:	f008 f8cf 	bl	d0b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    4f12:	4804      	ldr	r0, [pc, #16]	; (4f24 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    4f14:	f006 ff3f 	bl	bd96 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4f18:	b115      	cbz	r5, 4f20 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    4f1a:	2011      	movs	r0, #17
    4f1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f20:	2000      	movs	r0, #0
    4f22:	e7fb      	b.n	4f1c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    4f24:	20000354 	.word	0x20000354
    4f28:	4000e000 	.word	0x4000e000
    4f2c:	e000ed10 	.word	0xe000ed10

00004f30 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4f30:	b510      	push	{r4, lr}
    4f32:	4806      	ldr	r0, [pc, #24]	; (4f4c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    4f34:	f006 ff2b 	bl	bd8e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4f38:	b118      	cbz	r0, 4f42 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    4f3a:	2127      	movs	r1, #39	; 0x27
    4f3c:	201d      	movs	r0, #29
    4f3e:	f7ff fa4d 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f42:	4802      	ldr	r0, [pc, #8]	; (4f4c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    4f44:	2100      	movs	r1, #0
    4f46:	7041      	strb	r1, [r0, #1]
    4f48:	bd10      	pop	{r4, pc}
    4f4a:	0000      	.short	0x0000
    4f4c:	20000354 	.word	0x20000354

00004f50 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4f50:	b570      	push	{r4, r5, r6, lr}
    4f52:	4911      	ldr	r1, [pc, #68]	; (4f98 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4f54:	680a      	ldr	r2, [r1, #0]
    4f56:	b1ea      	cbz	r2, 4f94 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4f58:	2300      	movs	r3, #0
    4f5a:	461d      	mov	r5, r3
    4f5c:	2401      	movs	r4, #1
    4f5e:	684a      	ldr	r2, [r1, #4]
    4f60:	1c52      	adds	r2, r2, #1
    4f62:	604a      	str	r2, [r1, #4]
    4f64:	2a09      	cmp	r2, #9
    4f66:	d300      	bcc.n	4f6a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4f68:	604d      	str	r5, [r1, #4]
    4f6a:	790e      	ldrb	r6, [r1, #4]
    4f6c:	fa04 f206 	lsl.w	r2, r4, r6
    4f70:	680e      	ldr	r6, [r1, #0]
    4f72:	4216      	tst	r6, r2
    4f74:	d00b      	beq.n	4f8e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4f76:	f3ef 8310 	mrs	r3, PRIMASK
    4f7a:	b672      	cpsid	i
    4f7c:	680c      	ldr	r4, [r1, #0]
    4f7e:	4394      	bics	r4, r2
    4f80:	600c      	str	r4, [r1, #0]
    4f82:	b903      	cbnz	r3, 4f86 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4f84:	b662      	cpsie	i
    4f86:	6849      	ldr	r1, [r1, #4]
    4f88:	6001      	str	r1, [r0, #0]
    4f8a:	2000      	movs	r0, #0
    4f8c:	bd70      	pop	{r4, r5, r6, pc}
    4f8e:	1c5b      	adds	r3, r3, #1
    4f90:	2b09      	cmp	r3, #9
    4f92:	d3e4      	bcc.n	4f5e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4f94:	2005      	movs	r0, #5
    4f96:	bd70      	pop	{r4, r5, r6, pc}
    4f98:	200000c8 	.word	0x200000c8

00004f9c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4f9c:	4802      	ldr	r0, [pc, #8]	; (4fa8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    4f9e:	2100      	movs	r1, #0
    4fa0:	6001      	str	r1, [r0, #0]
    4fa2:	6041      	str	r1, [r0, #4]
    4fa4:	4770      	bx	lr
    4fa6:	0000      	.short	0x0000
    4fa8:	200000c8 	.word	0x200000c8

00004fac <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    4fac:	b510      	push	{r4, lr}
    4fae:	4c04      	ldr	r4, [pc, #16]	; (4fc0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    4fb0:	7820      	ldrb	r0, [r4, #0]
    4fb2:	28ff      	cmp	r0, #255	; 0xff
    4fb4:	d003      	beq.n	4fbe <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    4fb6:	f7ff f823 	bl	4000 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    4fba:	20ff      	movs	r0, #255	; 0xff
    4fbc:	7020      	strb	r0, [r4, #0]
    4fbe:	bd10      	pop	{r4, pc}
    4fc0:	20000000 	.word	0x20000000

00004fc4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4fc4:	b510      	push	{r4, lr}
    4fc6:	4c08      	ldr	r4, [pc, #32]	; (4fe8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4fc8:	7861      	ldrb	r1, [r4, #1]
    4fca:	b109      	cbz	r1, 4fd0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4fcc:	200f      	movs	r0, #15
    4fce:	bd10      	pop	{r4, pc}
    4fd0:	f7fe ffdc 	bl	3f8c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4fd4:	7020      	strb	r0, [r4, #0]
    4fd6:	28ff      	cmp	r0, #255	; 0xff
    4fd8:	d001      	beq.n	4fde <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4fda:	2000      	movs	r0, #0
    4fdc:	bd10      	pop	{r4, pc}
    4fde:	2178      	movs	r1, #120	; 0x78
    4fe0:	201f      	movs	r0, #31
    4fe2:	f7ff f9fb 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4fe6:	0000      	.short	0x0000
    4fe8:	20000000 	.word	0x20000000

00004fec <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4fec:	4901      	ldr	r1, [pc, #4]	; (4ff4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4fee:	2000      	movs	r0, #0
    4ff0:	7048      	strb	r0, [r1, #1]
    4ff2:	4770      	bx	lr
    4ff4:	20000000 	.word	0x20000000

00004ff8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4ff8:	4806      	ldr	r0, [pc, #24]	; (5014 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    4ffa:	4a07      	ldr	r2, [pc, #28]	; (5018 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4ffc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4ffe:	8852      	ldrh	r2, [r2, #2]
    5000:	4291      	cmp	r1, r2
    5002:	d104      	bne.n	500e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5004:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5008:	b108      	cbz	r0, 500e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    500a:	2000      	movs	r0, #0
    500c:	4770      	bx	lr
    500e:	2001      	movs	r0, #1
    5010:	4770      	bx	lr
    5012:	0000      	.short	0x0000
    5014:	20001190 	.word	0x20001190
    5018:	20000340 	.word	0x20000340

0000501c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    501c:	4901      	ldr	r1, [pc, #4]	; (5024 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    501e:	8048      	strh	r0, [r1, #2]
    5020:	4770      	bx	lr
    5022:	0000      	.short	0x0000
    5024:	20000340 	.word	0x20000340

00005028 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    5028:	4808      	ldr	r0, [pc, #32]	; (504c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    502a:	4a09      	ldr	r2, [pc, #36]	; (5050 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    502c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    502e:	8852      	ldrh	r2, [r2, #2]
    5030:	4291      	cmp	r1, r2
    5032:	d109      	bne.n	5048 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5034:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5038:	8481      	strh	r1, [r0, #36]	; 0x24
    503a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    503e:	b119      	cbz	r1, 5048 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5040:	2100      	movs	r1, #0
    5042:	7001      	strb	r1, [r0, #0]
    5044:	2001      	movs	r0, #1
    5046:	4770      	bx	lr
    5048:	2000      	movs	r0, #0
    504a:	4770      	bx	lr
    504c:	20001190 	.word	0x20001190
    5050:	20000340 	.word	0x20000340

00005054 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    5054:	4807      	ldr	r0, [pc, #28]	; (5074 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5056:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    505a:	2901      	cmp	r1, #1
    505c:	d007      	beq.n	506e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    505e:	2101      	movs	r1, #1
    5060:	7001      	strb	r1, [r0, #0]
    5062:	4805      	ldr	r0, [pc, #20]	; (5078 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    5064:	4903      	ldr	r1, [pc, #12]	; (5074 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5066:	8800      	ldrh	r0, [r0, #0]
    5068:	8488      	strh	r0, [r1, #36]	; 0x24
    506a:	2001      	movs	r0, #1
    506c:	4770      	bx	lr
    506e:	2000      	movs	r0, #0
    5070:	4770      	bx	lr
    5072:	0000      	.short	0x0000
    5074:	20001190 	.word	0x20001190
    5078:	20000340 	.word	0x20000340

0000507c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    507c:	4906      	ldr	r1, [pc, #24]	; (5098 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    507e:	4b07      	ldr	r3, [pc, #28]	; (509c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5080:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5082:	885b      	ldrh	r3, [r3, #2]
    5084:	429a      	cmp	r2, r3
    5086:	d105      	bne.n	5094 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5088:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    508c:	b112      	cbz	r2, 5094 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    508e:	6001      	str	r1, [r0, #0]
    5090:	2001      	movs	r0, #1
    5092:	4770      	bx	lr
    5094:	2000      	movs	r0, #0
    5096:	4770      	bx	lr
    5098:	20001190 	.word	0x20001190
    509c:	20000340 	.word	0x20000340

000050a0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    50a0:	4909      	ldr	r1, [pc, #36]	; (50c8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    50a2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    50a4:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    50a8:	3bff      	subs	r3, #255	; 0xff
    50aa:	d002      	beq.n	50b2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    50ac:	2100      	movs	r1, #0
    50ae:	6001      	str	r1, [r0, #0]
    50b0:	e007      	b.n	50c2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    50b2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    50b6:	4904      	ldr	r1, [pc, #16]	; (50c8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    50b8:	2a01      	cmp	r2, #1
    50ba:	d002      	beq.n	50c2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    50bc:	6001      	str	r1, [r0, #0]
    50be:	2001      	movs	r0, #1
    50c0:	4770      	bx	lr
    50c2:	2000      	movs	r0, #0
    50c4:	4770      	bx	lr
    50c6:	0000      	.short	0x0000
    50c8:	20001190 	.word	0x20001190

000050cc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    50cc:	4901      	ldr	r1, [pc, #4]	; (50d4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    50ce:	8008      	strh	r0, [r1, #0]
    50d0:	4770      	bx	lr
    50d2:	0000      	.short	0x0000
    50d4:	20000340 	.word	0x20000340

000050d8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    50d8:	4905      	ldr	r1, [pc, #20]	; (50f0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    50da:	2000      	movs	r0, #0
    50dc:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    50e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    50e4:	8488      	strh	r0, [r1, #36]	; 0x24
    50e6:	4903      	ldr	r1, [pc, #12]	; (50f4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    50e8:	8008      	strh	r0, [r1, #0]
    50ea:	8048      	strh	r0, [r1, #2]
    50ec:	4770      	bx	lr
    50ee:	0000      	.short	0x0000
    50f0:	20001190 	.word	0x20001190
    50f4:	20000340 	.word	0x20000340
    50f8:	4905      	ldr	r1, [pc, #20]	; (5110 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    50fa:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    50fc:	4282      	cmp	r2, r0
    50fe:	d105      	bne.n	510c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5100:	2000      	movs	r0, #0
    5102:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5106:	f64f 70ff 	movw	r0, #65535	; 0xffff
    510a:	8488      	strh	r0, [r1, #36]	; 0x24
    510c:	4770      	bx	lr
    510e:	0000      	.short	0x0000
    5110:	20001190 	.word	0x20001190

00005114 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5114:	4a0a      	ldr	r2, [pc, #40]	; (5140 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    5116:	b110      	cbz	r0, 511e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    5118:	2801      	cmp	r0, #1
    511a:	d007      	beq.n	512c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    511c:	e00e      	b.n	513c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    511e:	7850      	ldrb	r0, [r2, #1]
    5120:	b160      	cbz	r0, 513c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5122:	f8d2 0002 	ldr.w	r0, [r2, #2]
    5126:	6008      	str	r0, [r1, #0]
    5128:	88d0      	ldrh	r0, [r2, #6]
    512a:	e004      	b.n	5136 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    512c:	7810      	ldrb	r0, [r2, #0]
    512e:	b128      	cbz	r0, 513c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5130:	6890      	ldr	r0, [r2, #8]
    5132:	6008      	str	r0, [r1, #0]
    5134:	8990      	ldrh	r0, [r2, #12]
    5136:	8088      	strh	r0, [r1, #4]
    5138:	2001      	movs	r0, #1
    513a:	4770      	bx	lr
    513c:	2000      	movs	r0, #0
    513e:	4770      	bx	lr
    5140:	20000356 	.word	0x20000356

00005144 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    5144:	4a08      	ldr	r2, [pc, #32]	; (5168 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    5146:	2301      	movs	r3, #1
    5148:	b138      	cbz	r0, 515a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    514a:	2801      	cmp	r0, #1
    514c:	d104      	bne.n	5158 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    514e:	7013      	strb	r3, [r2, #0]
    5150:	6808      	ldr	r0, [r1, #0]
    5152:	6090      	str	r0, [r2, #8]
    5154:	8888      	ldrh	r0, [r1, #4]
    5156:	8190      	strh	r0, [r2, #12]
    5158:	4770      	bx	lr
    515a:	7053      	strb	r3, [r2, #1]
    515c:	6808      	ldr	r0, [r1, #0]
    515e:	f8c2 0002 	str.w	r0, [r2, #2]
    5162:	8888      	ldrh	r0, [r1, #4]
    5164:	80d0      	strh	r0, [r2, #6]
    5166:	4770      	bx	lr
    5168:	20000356 	.word	0x20000356

0000516c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    516c:	4906      	ldr	r1, [pc, #24]	; (5188 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    516e:	b110      	cbz	r0, 5176 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5170:	2801      	cmp	r0, #1
    5172:	d002      	beq.n	517a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5174:	e005      	b.n	5182 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5176:	7848      	ldrb	r0, [r1, #1]
    5178:	e000      	b.n	517c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    517a:	7808      	ldrb	r0, [r1, #0]
    517c:	b108      	cbz	r0, 5182 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    517e:	2001      	movs	r0, #1
    5180:	4770      	bx	lr
    5182:	2000      	movs	r0, #0
    5184:	4770      	bx	lr
    5186:	0000      	.short	0x0000
    5188:	20000356 	.word	0x20000356

0000518c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    518c:	4901      	ldr	r1, [pc, #4]	; (5194 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    518e:	7708      	strb	r0, [r1, #28]
    5190:	4770      	bx	lr
    5192:	0000      	.short	0x0000
    5194:	20000a1a 	.word	0x20000a1a

00005198 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    5198:	4801      	ldr	r0, [pc, #4]	; (51a0 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    519a:	78c0      	ldrb	r0, [r0, #3]
    519c:	4770      	bx	lr
    519e:	0000      	.short	0x0000
    51a0:	200000d0 	.word	0x200000d0

000051a4 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    51a4:	4801      	ldr	r0, [pc, #4]	; (51ac <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    51a6:	7900      	ldrb	r0, [r0, #4]
    51a8:	4770      	bx	lr
    51aa:	0000      	.short	0x0000
    51ac:	200000d0 	.word	0x200000d0

000051b0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    51b0:	b510      	push	{r4, lr}
    51b2:	4604      	mov	r4, r0
    51b4:	f000 f944 	bl	5440 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    51b8:	b118      	cbz	r0, 51c2 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    51ba:	21c5      	movs	r1, #197	; 0xc5
    51bc:	2027      	movs	r0, #39	; 0x27
    51be:	f7ff f90d 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51c2:	4803      	ldr	r0, [pc, #12]	; (51d0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    51c4:	2101      	movs	r1, #1
    51c6:	f008 fba5 	bl	d914 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    51ca:	4802      	ldr	r0, [pc, #8]	; (51d4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    51cc:	62c4      	str	r4, [r0, #44]	; 0x2c
    51ce:	bd10      	pop	{r4, pc}
    51d0:	200009f8 	.word	0x200009f8
    51d4:	200000d0 	.word	0x200000d0

000051d8 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    51d8:	4901      	ldr	r1, [pc, #4]	; (51e0 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    51da:	2001      	movs	r0, #1
    51dc:	7188      	strb	r0, [r1, #6]
    51de:	4770      	bx	lr
    51e0:	200000d0 	.word	0x200000d0

000051e4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    51e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51e8:	4c5d      	ldr	r4, [pc, #372]	; (5360 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    51ea:	9d06      	ldr	r5, [sp, #24]
    51ec:	7826      	ldrb	r6, [r4, #0]
    51ee:	2e00      	cmp	r6, #0
    51f0:	d16a      	bne.n	52c8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    51f2:	2a00      	cmp	r2, #0
    51f4:	d068      	beq.n	52c8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    51f6:	2b00      	cmp	r3, #0
    51f8:	d066      	beq.n	52c8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    51fa:	2d00      	cmp	r5, #0
    51fc:	d064      	beq.n	52c8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    51fe:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    5202:	f104 0614 	add.w	r6, r4, #20
    5206:	2000      	movs	r0, #0
    5208:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    520c:	71a0      	strb	r0, [r4, #6]
    520e:	7160      	strb	r0, [r4, #5]
    5210:	70e0      	strb	r0, [r4, #3]
    5212:	70a0      	strb	r0, [r4, #2]
    5214:	7120      	strb	r0, [r4, #4]
    5216:	81a0      	strh	r0, [r4, #12]
    5218:	81e0      	strh	r0, [r4, #14]
    521a:	f000 f955 	bl	54c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    521e:	4606      	mov	r6, r0
    5220:	f000 f94c 	bl	54bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5224:	4605      	mov	r5, r0
    5226:	f005 fd87 	bl	ad38 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    522a:	f005 fadf 	bl	a7ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    522e:	f995 006e 	ldrsb.w	r0, [r5, #110]	; 0x6e
    5232:	f005 fe05 	bl	ae40 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5236:	69e8      	ldr	r0, [r5, #28]
    5238:	f005 fed8 	bl	afec <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    523c:	6968      	ldr	r0, [r5, #20]
    523e:	f005 fecb 	bl	afd8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5242:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    5246:	f005 ff01 	bl	b04c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    524a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    524e:	6840      	ldr	r0, [r0, #4]
    5250:	f890 020c 	ldrb.w	r0, [r0, #524]	; 0x20c
    5254:	b108      	cbz	r0, 525a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x76>
    5256:	f005 fcef 	bl	ac38 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    525a:	f895 106b 	ldrb.w	r1, [r5, #107]	; 0x6b
    525e:	2001      	movs	r0, #1
    5260:	f005 fc2e 	bl	aac0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5264:	2800      	cmp	r0, #0
    5266:	d074      	beq.n	5352 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    5268:	483e      	ldr	r0, [pc, #248]	; (5364 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    526a:	f005 fc95 	bl	ab98 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    526e:	8828      	ldrh	r0, [r5, #0]
    5270:	f7ff fcc2 	bl	4bf8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5274:	6320      	str	r0, [r4, #48]	; 0x30
    5276:	8828      	ldrh	r0, [r5, #0]
    5278:	f7ff fca8 	bl	4bcc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    527c:	6360      	str	r0, [r4, #52]	; 0x34
    527e:	f106 0080 	add.w	r0, r6, #128	; 0x80
    5282:	3680      	adds	r6, #128	; 0x80
    5284:	4938      	ldr	r1, [pc, #224]	; (5368 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5286:	e896 108c 	ldmia.w	r6, {r2, r3, r7, ip}
    528a:	f101 0808 	add.w	r8, r1, #8
    528e:	3e80      	subs	r6, #128	; 0x80
    5290:	e888 108c 	stmia.w	r8, {r2, r3, r7, ip}
    5294:	6902      	ldr	r2, [r0, #16]
    5296:	f8c1 2021 	str.w	r2, [r1, #33]	; 0x21
    529a:	6940      	ldr	r0, [r0, #20]
    529c:	f8c1 0025 	str.w	r0, [r1, #37]	; 0x25
    52a0:	f000 f972 	bl	5588 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12c>
    52a4:	4601      	mov	r1, r0
    52a6:	8f28      	ldrh	r0, [r5, #56]	; 0x38
    52a8:	f008 f896 	bl	d3d8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    52ac:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
    52ae:	4281      	cmp	r1, r0
    52b0:	d200      	bcs.n	52b4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd0>
    52b2:	4608      	mov	r0, r1
    52b4:	7220      	strb	r0, [r4, #8]
    52b6:	46a0      	mov	r8, r4
    52b8:	f895 106b 	ldrb.w	r1, [r5, #107]	; 0x6b
    52bc:	8fe8      	ldrh	r0, [r5, #62]	; 0x3e
    52be:	7ef7      	ldrb	r7, [r6, #27]
    52c0:	8fac      	ldrh	r4, [r5, #60]	; 0x3c
    52c2:	2908      	cmp	r1, #8
    52c4:	d104      	bne.n	52d0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    52c6:	e002      	b.n	52ce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xea>
    52c8:	f240 111d 	movw	r1, #285	; 0x11d
    52cc:	e045      	b.n	535a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    52ce:	2104      	movs	r1, #4
    52d0:	f008 f882 	bl	d3d8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    52d4:	b90f      	cbnz	r7, 52da <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf6>
    52d6:	1d00      	adds	r0, r0, #4
    52d8:	b280      	uxth	r0, r0
    52da:	4284      	cmp	r4, r0
    52dc:	d200      	bcs.n	52e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    52de:	4620      	mov	r0, r4
    52e0:	b2c4      	uxtb	r4, r0
    52e2:	f888 4009 	strb.w	r4, [r8, #9]
    52e6:	7ef1      	ldrb	r1, [r6, #27]
    52e8:	2900      	cmp	r1, #0
    52ea:	d001      	beq.n	52f0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x10c>
    52ec:	f04f 0104 	mov.w	r1, #4
    52f0:	4421      	add	r1, r4
    52f2:	f888 1007 	strb.w	r1, [r8, #7]
    52f6:	d014      	beq.n	5322 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x13e>
    52f8:	481b      	ldr	r0, [pc, #108]	; (5368 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    52fa:	f04f 0701 	mov.w	r7, #1
    52fe:	f100 0008 	add.w	r0, r0, #8
    5302:	7607      	strb	r7, [r0, #24]
    5304:	e9d6 121e 	ldrd	r1, r2, [r6, #120]	; 0x78
    5308:	e9c0 1204 	strd	r1, r2, [r0, #16]
    530c:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    5310:	f007 ff67 	bl	d1e2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5314:	4914      	ldr	r1, [pc, #80]	; (5368 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5316:	4603      	mov	r3, r0
    5318:	4622      	mov	r2, r4
    531a:	3108      	adds	r1, #8
    531c:	4638      	mov	r0, r7
    531e:	f005 f9d1 	bl	a6c4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5322:	2001      	movs	r0, #1
    5324:	f000 fb88 	bl	5a38 <__kernel_ram_size+0x300>
    5328:	4810      	ldr	r0, [pc, #64]	; (536c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    532a:	6800      	ldr	r0, [r0, #0]
    532c:	2803      	cmp	r0, #3
    532e:	d012      	beq.n	5356 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5330:	280b      	cmp	r0, #11
    5332:	d010      	beq.n	5356 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5334:	480c      	ldr	r0, [pc, #48]	; (5368 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5336:	220e      	movs	r2, #14
    5338:	2100      	movs	r1, #0
    533a:	3052      	adds	r0, #82	; 0x52
    533c:	f006 fe25 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5340:	4809      	ldr	r0, [pc, #36]	; (5368 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5342:	89b1      	ldrh	r1, [r6, #12]
    5344:	3052      	adds	r0, #82	; 0x52
    5346:	8041      	strh	r1, [r0, #2]
    5348:	8829      	ldrh	r1, [r5, #0]
    534a:	8001      	strh	r1, [r0, #0]
    534c:	f896 102b 	ldrb.w	r1, [r6, #43]	; 0x2b
    5350:	7101      	strb	r1, [r0, #4]
    5352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5356:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    535a:	2027      	movs	r0, #39	; 0x27
    535c:	f7ff f83e 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5360:	200000d0 	.word	0x200000d0
    5364:	00005c38 	.word	0x00005c38
    5368:	200009c8 	.word	0x200009c8
    536c:	40001550 	.word	0x40001550

00005370 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5370:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5374:	468a      	mov	sl, r1
    5376:	4606      	mov	r6, r0
    5378:	f000 f8a6 	bl	54c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    537c:	4d2b      	ldr	r5, [pc, #172]	; (542c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbc>)
    537e:	4604      	mov	r4, r0
    5380:	f04f 0800 	mov.w	r8, #0
    5384:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5386:	7847      	ldrb	r7, [r0, #1]
    5388:	b10e      	cbz	r6, 538e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1e>
    538a:	2e01      	cmp	r6, #1
    538c:	d101      	bne.n	5392 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x22>
    538e:	f885 8001 	strb.w	r8, [r5, #1]
    5392:	7868      	ldrb	r0, [r5, #1]
    5394:	f04f 0901 	mov.w	r9, #1
    5398:	b150      	cbz	r0, 53b0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x40>
    539a:	2801      	cmp	r0, #1
    539c:	d021      	beq.n	53e2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x72>
    539e:	2802      	cmp	r0, #2
    53a0:	d02b      	beq.n	53fa <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x8a>
    53a2:	2803      	cmp	r0, #3
    53a4:	d03a      	beq.n	541c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    53a6:	f240 411d 	movw	r1, #1053	; 0x41d
    53aa:	2027      	movs	r0, #39	; 0x27
    53ac:	f7ff f816 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53b0:	2e01      	cmp	r6, #1
    53b2:	d028      	beq.n	5406 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    53b4:	f000 f8d4 	bl	5560 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    53b8:	4669      	mov	r1, sp
    53ba:	aa01      	add	r2, sp, #4
    53bc:	6b68      	ldr	r0, [r5, #52]	; 0x34
    53be:	f007 fb5f 	bl	ca80 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    53c2:	9800      	ldr	r0, [sp, #0]
    53c4:	f007 fb12 	bl	c9ec <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    53c8:	f8ca 0000 	str.w	r0, [sl]
    53cc:	4639      	mov	r1, r7
    53ce:	2201      	movs	r2, #1
    53d0:	6b68      	ldr	r0, [r5, #52]	; 0x34
    53d2:	e00d      	b.n	53f0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x80>
    53d4:	f884 8010 	strb.w	r8, [r4, #16]
    53d8:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    53dc:	f884 9010 	strb.w	r9, [r4, #16]
    53e0:	e7fa      	b.n	53d8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x68>
    53e2:	2e01      	cmp	r6, #1
    53e4:	d00f      	beq.n	5406 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    53e6:	f000 f8bb 	bl	5560 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    53ea:	4639      	mov	r1, r7
    53ec:	2200      	movs	r2, #0
    53ee:	6b68      	ldr	r0, [r5, #52]	; 0x34
    53f0:	f007 fab3 	bl	c95a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    53f4:	2e02      	cmp	r6, #2
    53f6:	d106      	bne.n	5406 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    53f8:	e7ee      	b.n	53d8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x68>
    53fa:	2e01      	cmp	r6, #1
    53fc:	d003      	beq.n	5406 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    53fe:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5400:	f007 fc47 	bl	cc92 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5404:	e7f6      	b.n	53f4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x84>
    5406:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    540a:	1c40      	adds	r0, r0, #1
    540c:	f141 0100 	adc.w	r1, r1, #0
    5410:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    5414:	7c20      	ldrb	r0, [r4, #16]
    5416:	2801      	cmp	r0, #1
    5418:	d1e0      	bne.n	53dc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6c>
    541a:	e7db      	b.n	53d4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    541c:	2e01      	cmp	r6, #1
    541e:	d0db      	beq.n	53d8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x68>
    5420:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5422:	e8bd 47fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5426:	f007 bc34 	b.w	cc92 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    542a:	0000      	.short	0x0000
    542c:	200000d0 	.word	0x200000d0

00005430 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    5430:	4802      	ldr	r0, [pc, #8]	; (543c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    5432:	89c0      	ldrh	r0, [r0, #14]
    5434:	f3c0 2080 	ubfx	r0, r0, #10, #1
    5438:	4770      	bx	lr
    543a:	0000      	.short	0x0000
    543c:	200000d0 	.word	0x200000d0

00005440 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5440:	4804      	ldr	r0, [pc, #16]	; (5454 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5442:	7800      	ldrb	r0, [r0, #0]
    5444:	b108      	cbz	r0, 544a <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    5446:	200c      	movs	r0, #12
    5448:	4770      	bx	lr
    544a:	4903      	ldr	r1, [pc, #12]	; (5458 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    544c:	2000      	movs	r0, #0
    544e:	7708      	strb	r0, [r1, #28]
    5450:	4770      	bx	lr
    5452:	0000      	.short	0x0000
    5454:	200000d0 	.word	0x200000d0
    5458:	20000a1a 	.word	0x20000a1a

0000545c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    545c:	480c      	ldr	r0, [pc, #48]	; (5490 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    545e:	b510      	push	{r4, lr}
    5460:	7801      	ldrb	r1, [r0, #0]
    5462:	b149      	cbz	r1, 5478 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5464:	f100 0138 	add.w	r1, r0, #56	; 0x38
    5468:	7800      	ldrb	r0, [r0, #0]
    546a:	2802      	cmp	r0, #2
    546c:	d008      	beq.n	5480 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    546e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    5472:	2027      	movs	r0, #39	; 0x27
    5474:	f7fe ffb2 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    547c:	f000 b9f8 	b.w	5870 <__kernel_ram_size+0x138>
    5480:	6848      	ldr	r0, [r1, #4]
    5482:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
    5486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    548a:	f005 bb8d 	b.w	aba8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    548e:	0000      	.short	0x0000
    5490:	200000d0 	.word	0x200000d0
    5494:	4608      	mov	r0, r1
    5496:	2100      	movs	r1, #0
    5498:	7041      	strb	r1, [r0, #1]
    549a:	211c      	movs	r1, #28
    549c:	f800 1b04 	strb.w	r1, [r0], #4
    54a0:	220e      	movs	r2, #14
    54a2:	4901      	ldr	r1, [pc, #4]	; (54a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    54a4:	f006 bcf7 	b.w	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    54a8:	20000a28 	.word	0x20000a28
    54ac:	4a02      	ldr	r2, [pc, #8]	; (54b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    54ae:	8993      	ldrh	r3, [r2, #12]
    54b0:	4303      	orrs	r3, r0
    54b2:	8193      	strh	r3, [r2, #12]
    54b4:	6952      	ldr	r2, [r2, #20]
    54b6:	4710      	bx	r2
    54b8:	200000d0 	.word	0x200000d0
    54bc:	4801      	ldr	r0, [pc, #4]	; (54c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    54be:	6840      	ldr	r0, [r0, #4]
    54c0:	4770      	bx	lr
    54c2:	0000      	.short	0x0000
    54c4:	20000108 	.word	0x20000108
    54c8:	4801      	ldr	r0, [pc, #4]	; (54d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    54ca:	6840      	ldr	r0, [r0, #4]
    54cc:	3080      	adds	r0, #128	; 0x80
    54ce:	4770      	bx	lr
    54d0:	20000108 	.word	0x20000108
    54d4:	4a01      	ldr	r2, [pc, #4]	; (54dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    54d6:	2100      	movs	r1, #0
    54d8:	6952      	ldr	r2, [r2, #20]
    54da:	4710      	bx	r2
    54dc:	200000d0 	.word	0x200000d0
    54e0:	b570      	push	{r4, r5, r6, lr}
    54e2:	4605      	mov	r5, r0
    54e4:	2901      	cmp	r1, #1
    54e6:	d818      	bhi.n	551a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    54e8:	4c12      	ldr	r4, [pc, #72]	; (5534 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>)
    54ea:	69a1      	ldr	r1, [r4, #24]
    54ec:	4788      	blx	r1
    54ee:	b1a0      	cbz	r0, 551a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    54f0:	7960      	ldrb	r0, [r4, #5]
    54f2:	b990      	cbnz	r0, 551a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    54f4:	b9e5      	cbnz	r5, 5530 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd4>
    54f6:	f104 0010 	add.w	r0, r4, #16
    54fa:	7801      	ldrb	r1, [r0, #0]
    54fc:	06c8      	lsls	r0, r1, #27
    54fe:	d405      	bmi.n	550c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    5500:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5502:	7800      	ldrb	r0, [r0, #0]
    5504:	06c0      	lsls	r0, r0, #27
    5506:	d401      	bmi.n	550c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    5508:	2001      	movs	r0, #1
    550a:	e000      	b.n	550e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    550c:	2000      	movs	r0, #0
    550e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5510:	b92a      	cbnz	r2, 551e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc2>
    5512:	8962      	ldrh	r2, [r4, #10]
    5514:	b11a      	cbz	r2, 551e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc2>
    5516:	06c9      	lsls	r1, r1, #27
    5518:	d401      	bmi.n	551e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc2>
    551a:	2001      	movs	r0, #1
    551c:	bd70      	pop	{r4, r5, r6, pc}
    551e:	89a1      	ldrh	r1, [r4, #12]
    5520:	078a      	lsls	r2, r1, #30
    5522:	d503      	bpl.n	552c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    5524:	6a22      	ldr	r2, [r4, #32]
    5526:	78d2      	ldrb	r2, [r2, #3]
    5528:	2a02      	cmp	r2, #2
    552a:	d001      	beq.n	5530 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd4>
    552c:	4308      	orrs	r0, r1
    552e:	d1f4      	bne.n	551a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    5530:	2000      	movs	r0, #0
    5532:	bd70      	pop	{r4, r5, r6, pc}
    5534:	200000d0 	.word	0x200000d0
    5538:	b530      	push	{r4, r5, lr}
    553a:	4b08      	ldr	r3, [pc, #32]	; (555c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>)
    553c:	88dd      	ldrh	r5, [r3, #6]
    553e:	891c      	ldrh	r4, [r3, #8]
    5540:	b12a      	cbz	r2, 554e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5542:	b908      	cbnz	r0, 5548 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>
    5544:	b905      	cbnz	r5, 5548 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>
    5546:	b114      	cbz	r4, 554e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5548:	8958      	ldrh	r0, [r3, #10]
    554a:	1c40      	adds	r0, r0, #1
    554c:	8158      	strh	r0, [r3, #10]
    554e:	b111      	cbz	r1, 5556 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    5550:	1c6d      	adds	r5, r5, #1
    5552:	80dd      	strh	r5, [r3, #6]
    5554:	bd30      	pop	{r4, r5, pc}
    5556:	1c64      	adds	r4, r4, #1
    5558:	811c      	strh	r4, [r3, #8]
    555a:	bd30      	pop	{r4, r5, pc}
    555c:	20000a1a 	.word	0x20000a1a
    5560:	b510      	push	{r4, lr}
    5562:	4c08      	ldr	r4, [pc, #32]	; (5584 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>)
    5564:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5566:	b138      	cbz	r0, 5578 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    5568:	8962      	ldrh	r2, [r4, #10]
    556a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    556c:	1cd2      	adds	r2, r2, #3
    556e:	f006 fc92 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5572:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5574:	6260      	str	r0, [r4, #36]	; 0x24
    5576:	bd10      	pop	{r4, pc}
    5578:	f240 4163 	movw	r1, #1123	; 0x463
    557c:	2027      	movs	r0, #39	; 0x27
    557e:	f7fe ff2d 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5582:	0000      	.short	0x0000
    5584:	200000d0 	.word	0x200000d0
    5588:	b510      	push	{r4, lr}
    558a:	f7ff ff97 	bl	54bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    558e:	4604      	mov	r4, r0
    5590:	f7ff ff9a 	bl	54c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5594:	4602      	mov	r2, r0
    5596:	7d41      	ldrb	r1, [r0, #21]
    5598:	4816      	ldr	r0, [pc, #88]	; (55f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>)
    559a:	2926      	cmp	r1, #38	; 0x26
    559c:	d010      	beq.n	55c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>
    559e:	2927      	cmp	r1, #39	; 0x27
    55a0:	d00e      	beq.n	55c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>
    55a2:	7d92      	ldrb	r2, [r2, #22]
    55a4:	2a26      	cmp	r2, #38	; 0x26
    55a6:	d00b      	beq.n	55c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>
    55a8:	2921      	cmp	r1, #33	; 0x21
    55aa:	d00d      	beq.n	55c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    55ac:	2922      	cmp	r1, #34	; 0x22
    55ae:	d00b      	beq.n	55c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    55b0:	2a24      	cmp	r2, #36	; 0x24
    55b2:	d00f      	beq.n	55d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    55b4:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    55b8:	2804      	cmp	r0, #4
    55ba:	d100      	bne.n	55be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x162>
    55bc:	2008      	movs	r0, #8
    55be:	bd10      	pop	{r4, pc}
    55c0:	6840      	ldr	r0, [r0, #4]
    55c2:	f890 12be 	ldrb.w	r1, [r0, #702]	; 0x2be
    55c6:	e00e      	b.n	55e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18a>
    55c8:	2a24      	cmp	r2, #36	; 0x24
    55ca:	d003      	beq.n	55d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    55cc:	6840      	ldr	r0, [r0, #4]
    55ce:	f890 0136 	ldrb.w	r0, [r0, #310]	; 0x136
    55d2:	e005      	b.n	55e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x184>
    55d4:	6841      	ldr	r1, [r0, #4]
    55d6:	f891 0136 	ldrb.w	r0, [r1, #310]	; 0x136
    55da:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    55de:	4008      	ands	r0, r1
    55e0:	f007 fdf5 	bl	d1ce <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    55e4:	4601      	mov	r1, r0
    55e6:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    55ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    55ee:	f007 be06 	b.w	d1fe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    55f2:	0000      	.short	0x0000
    55f4:	20000108 	.word	0x20000108
    55f8:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55fc:	468b      	mov	fp, r1
    55fe:	4607      	mov	r7, r0
    5600:	f7ff ff62 	bl	54c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5604:	f04f 0900 	mov.w	r9, #0
    5608:	4c69      	ldr	r4, [pc, #420]	; (57b0 <__kernel_ram_size+0x78>)
    560a:	4606      	mov	r6, r0
    560c:	f88d 9004 	strb.w	r9, [sp, #4]
    5610:	f8cd 9008 	str.w	r9, [sp, #8]
    5614:	f8cd 9000 	str.w	r9, [sp]
    5618:	7820      	ldrb	r0, [r4, #0]
    561a:	464d      	mov	r5, r9
    561c:	2802      	cmp	r0, #2
    561e:	d004      	beq.n	562a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ce>
    5620:	f240 41ee 	movw	r1, #1262	; 0x4ee
    5624:	2027      	movs	r0, #39	; 0x27
    5626:	f7fe fed9 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    562a:	7ba0      	ldrb	r0, [r4, #14]
    562c:	0640      	lsls	r0, r0, #25
    562e:	d406      	bmi.n	563e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1e2>
    5630:	2040      	movs	r0, #64	; 0x40
    5632:	f7ff ff4f 	bl	54d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5636:	89e0      	ldrh	r0, [r4, #14]
    5638:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    563c:	81e0      	strh	r0, [r4, #14]
    563e:	7ef0      	ldrb	r0, [r6, #27]
    5640:	b3df      	cbz	r7, 56ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25e>
    5642:	b180      	cbz	r0, 5666 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    5644:	f005 f90c 	bl	a860 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5648:	f005 f8e6 	bl	a818 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    564c:	b958      	cbnz	r0, 5666 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    564e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5650:	7841      	ldrb	r1, [r0, #1]
    5652:	b141      	cbz	r1, 5666 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    5654:	7800      	ldrb	r0, [r0, #0]
    5656:	7c31      	ldrb	r1, [r6, #16]
    5658:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    565c:	4288      	cmp	r0, r1
    565e:	d102      	bne.n	5666 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    5660:	2001      	movs	r0, #1
    5662:	70a0      	strb	r0, [r4, #2]
    5664:	e0a0      	b.n	57a8 <__kernel_ram_size+0x70>
    5666:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5668:	7841      	ldrb	r1, [r0, #1]
    566a:	8161      	strh	r1, [r4, #10]
    566c:	b121      	cbz	r1, 5678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    566e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5670:	f007 fadc 	bl	cc2c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5674:	62a0      	str	r0, [r4, #40]	; 0x28
    5676:	e000      	b.n	567a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21e>
    5678:	62a5      	str	r5, [r4, #40]	; 0x28
    567a:	89e0      	ldrh	r0, [r4, #14]
    567c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5680:	81e0      	strh	r0, [r4, #14]
    5682:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5684:	7bf1      	ldrb	r1, [r6, #15]
    5686:	7800      	ldrb	r0, [r0, #0]
    5688:	f3c0 0080 	ubfx	r0, r0, #2, #1
    568c:	4288      	cmp	r0, r1
    568e:	d007      	beq.n	56a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    5690:	a802      	add	r0, sp, #8
    5692:	f000 f983 	bl	599c <__kernel_ram_size+0x264>
    5696:	89e0      	ldrh	r0, [r4, #14]
    5698:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    569c:	81e0      	strh	r0, [r4, #14]
    569e:	e001      	b.n	56a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x248>
    56a0:	f04f 0901 	mov.w	r9, #1
    56a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    56a6:	7c31      	ldrb	r1, [r6, #16]
    56a8:	7800      	ldrb	r0, [r0, #0]
    56aa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    56ae:	4288      	cmp	r0, r1
    56b0:	d10e      	bne.n	56d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x274>
    56b2:	a801      	add	r0, sp, #4
    56b4:	f000 f934 	bl	5920 <__kernel_ram_size+0x1e8>
    56b8:	e00a      	b.n	56d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x274>
    56ba:	e7ff      	b.n	56bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x260>
    56bc:	b108      	cbz	r0, 56c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x266>
    56be:	f005 f8c9 	bl	a854 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    56c2:	78e0      	ldrb	r0, [r4, #3]
    56c4:	1c40      	adds	r0, r0, #1
    56c6:	70e0      	strb	r0, [r4, #3]
    56c8:	89e0      	ldrh	r0, [r4, #14]
    56ca:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    56ce:	81e0      	strh	r0, [r4, #14]
    56d0:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 57b0 <__kernel_ram_size+0x78>
    56d4:	7eb0      	ldrb	r0, [r6, #26]
    56d6:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
    56da:	b188      	cbz	r0, 5700 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a4>
    56dc:	f7ff feee 	bl	54bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    56e0:	4934      	ldr	r1, [pc, #208]	; (57b4 <__kernel_ram_size+0x7c>)
    56e2:	760d      	strb	r5, [r1, #24]
    56e4:	e9d6 231c 	ldrd	r2, r3, [r6, #112]	; 0x70
    56e8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    56ec:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    56f0:	f007 fd77 	bl	d1e2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    56f4:	4603      	mov	r3, r0
    56f6:	22fb      	movs	r2, #251	; 0xfb
    56f8:	492e      	ldr	r1, [pc, #184]	; (57b4 <__kernel_ram_size+0x7c>)
    56fa:	4628      	mov	r0, r5
    56fc:	f004 ffe2 	bl	a6c4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5700:	f04f 0800 	mov.w	r8, #0
    5704:	f1bb 0f00 	cmp.w	fp, #0
    5708:	d104      	bne.n	5714 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b8>
    570a:	78e1      	ldrb	r1, [r4, #3]
    570c:	2001      	movs	r0, #1
    570e:	f7ff fee7 	bl	54e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    5712:	b1b0      	cbz	r0, 5742 <__kernel_ram_size+0xa>
    5714:	f005 fc4c 	bl	afb0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5718:	f89d 0004 	ldrb.w	r0, [sp, #4]
    571c:	b118      	cbz	r0, 5726 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    571e:	4669      	mov	r1, sp
    5720:	2000      	movs	r0, #0
    5722:	f7ff fe25 	bl	5370 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5726:	89b0      	ldrh	r0, [r6, #12]
    5728:	464a      	mov	r2, r9
    572a:	4639      	mov	r1, r7
    572c:	f7ff ff04 	bl	5538 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xdc>
    5730:	b127      	cbz	r7, 573c <__kernel_ram_size+0x4>
    5732:	481f      	ldr	r0, [pc, #124]	; (57b0 <__kernel_ram_size+0x78>)
    5734:	70e5      	strb	r5, [r4, #3]
    5736:	3038      	adds	r0, #56	; 0x38
    5738:	f008 fb68 	bl	de0c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    573c:	f04f 0801 	mov.w	r8, #1
    5740:	e01b      	b.n	577a <__kernel_ram_size+0x42>
    5742:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5746:	b118      	cbz	r0, 5750 <__kernel_ram_size+0x18>
    5748:	4669      	mov	r1, sp
    574a:	2001      	movs	r0, #1
    574c:	f7ff fe10 	bl	5370 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5750:	2000      	movs	r0, #0
    5752:	f000 f9ad 	bl	5ab0 <__kernel_ram_size+0x378>
    5756:	f89d 0004 	ldrb.w	r0, [sp, #4]
    575a:	b118      	cbz	r0, 5764 <__kernel_ram_size+0x2c>
    575c:	4669      	mov	r1, sp
    575e:	2002      	movs	r0, #2
    5760:	f7ff fe06 	bl	5370 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5764:	89b0      	ldrh	r0, [r6, #12]
    5766:	464a      	mov	r2, r9
    5768:	4639      	mov	r1, r7
    576a:	f7ff fee5 	bl	5538 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xdc>
    576e:	b127      	cbz	r7, 577a <__kernel_ram_size+0x42>
    5770:	480f      	ldr	r0, [pc, #60]	; (57b0 <__kernel_ram_size+0x78>)
    5772:	70e5      	strb	r5, [r4, #3]
    5774:	3038      	adds	r0, #56	; 0x38
    5776:	f008 fb49 	bl	de0c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    577a:	9802      	ldr	r0, [sp, #8]
    577c:	b140      	cbz	r0, 5790 <__kernel_ram_size+0x58>
    577e:	f007 f935 	bl	c9ec <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    5782:	f8da 1004 	ldr.w	r1, [sl, #4]
    5786:	1c40      	adds	r0, r0, #1
    5788:	7205      	strb	r5, [r0, #8]
    578a:	220d      	movs	r2, #13
    578c:	f000 fd98 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5790:	9800      	ldr	r0, [sp, #0]
    5792:	b130      	cbz	r0, 57a2 <__kernel_ram_size+0x6a>
    5794:	f8da 1004 	ldr.w	r1, [sl, #4]
    5798:	7205      	strb	r5, [r0, #8]
    579a:	2227      	movs	r2, #39	; 0x27
    579c:	9800      	ldr	r0, [sp, #0]
    579e:	f000 fd8f 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    57a2:	f1b8 0f00 	cmp.w	r8, #0
    57a6:	d001      	beq.n	57ac <__kernel_ram_size+0x74>
    57a8:	f000 f862 	bl	5870 <__kernel_ram_size+0x138>
    57ac:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57b0:	200000d0 	.word	0x200000d0
    57b4:	200009d0 	.word	0x200009d0
    57b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57bc:	460f      	mov	r7, r1
    57be:	4680      	mov	r8, r0
    57c0:	f7ff fe82 	bl	54c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    57c4:	4d28      	ldr	r5, [pc, #160]	; (5868 <__kernel_ram_size+0x130>)
    57c6:	4604      	mov	r4, r0
    57c8:	7828      	ldrb	r0, [r5, #0]
    57ca:	2801      	cmp	r0, #1
    57cc:	d004      	beq.n	57d8 <__kernel_ram_size+0xa0>
    57ce:	f240 4172 	movw	r1, #1138	; 0x472
    57d2:	2027      	movs	r0, #39	; 0x27
    57d4:	f7fe fe02 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57d8:	7a21      	ldrb	r1, [r4, #8]
    57da:	2000      	movs	r0, #0
    57dc:	2601      	movs	r6, #1
    57de:	b129      	cbz	r1, 57ec <__kernel_ram_size+0xb4>
    57e0:	7220      	strb	r0, [r4, #8]
    57e2:	2100      	movs	r1, #0
    57e4:	2004      	movs	r0, #4
    57e6:	f7ff fe61 	bl	54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    57ea:	72a6      	strb	r6, [r4, #10]
    57ec:	6a29      	ldr	r1, [r5, #32]
    57ee:	7808      	ldrb	r0, [r1, #0]
    57f0:	43c0      	mvns	r0, r0
    57f2:	0780      	lsls	r0, r0, #30
    57f4:	d109      	bne.n	580a <__kernel_ram_size+0xd2>
    57f6:	7ba0      	ldrb	r0, [r4, #14]
    57f8:	bb78      	cbnz	r0, 585a <__kernel_ram_size+0x122>
    57fa:	2002      	movs	r0, #2
    57fc:	f7ff fe56 	bl	54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5800:	6a28      	ldr	r0, [r5, #32]
    5802:	7800      	ldrb	r0, [r0, #0]
    5804:	43c0      	mvns	r0, r0
    5806:	0780      	lsls	r0, r0, #30
    5808:	d027      	beq.n	585a <__kernel_ram_size+0x122>
    580a:	6a28      	ldr	r0, [r5, #32]
    580c:	7840      	ldrb	r0, [r0, #1]
    580e:	b110      	cbz	r0, 5816 <__kernel_ram_size+0xde>
    5810:	2002      	movs	r0, #2
    5812:	73a0      	strb	r0, [r4, #14]
    5814:	e000      	b.n	5818 <__kernel_ram_size+0xe0>
    5816:	73a6      	strb	r6, [r4, #14]
    5818:	7ee0      	ldrb	r0, [r4, #27]
    581a:	b190      	cbz	r0, 5842 <__kernel_ram_size+0x10a>
    581c:	f7ff fe4e 	bl	54bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5820:	4912      	ldr	r1, [pc, #72]	; (586c <__kernel_ram_size+0x134>)
    5822:	7a6d      	ldrb	r5, [r5, #9]
    5824:	760e      	strb	r6, [r1, #24]
    5826:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	; 0x78
    582a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    582e:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5832:	f007 fcd6 	bl	d1e2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5836:	4603      	mov	r3, r0
    5838:	462a      	mov	r2, r5
    583a:	490c      	ldr	r1, [pc, #48]	; (586c <__kernel_ram_size+0x134>)
    583c:	4630      	mov	r0, r6
    583e:	f004 ff41 	bl	a6c4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5842:	ea37 0708 	bics.w	r7, r7, r8
    5846:	d004      	beq.n	5852 <__kernel_ram_size+0x11a>
    5848:	2100      	movs	r1, #0
    584a:	4608      	mov	r0, r1
    584c:	f7ff fe48 	bl	54e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    5850:	b128      	cbz	r0, 585e <__kernel_ram_size+0x126>
    5852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5856:	f000 b80b 	b.w	5870 <__kernel_ram_size+0x138>
    585a:	2003      	movs	r0, #3
    585c:	e7d9      	b.n	5812 <__kernel_ram_size+0xda>
    585e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5862:	2000      	movs	r0, #0
    5864:	f000 b8e8 	b.w	5a38 <__kernel_ram_size+0x300>
    5868:	200000d0 	.word	0x200000d0
    586c:	200009d0 	.word	0x200009d0
    5870:	b510      	push	{r4, lr}
    5872:	f005 f89b 	bl	a9ac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5876:	f004 ffb9 	bl	a7ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    587a:	4c0d      	ldr	r4, [pc, #52]	; (58b0 <__kernel_ram_size+0x178>)
    587c:	89e0      	ldrh	r0, [r4, #14]
    587e:	f7ff fe29 	bl	54d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5882:	480c      	ldr	r0, [pc, #48]	; (58b4 <__kernel_ram_size+0x17c>)
    5884:	7f00      	ldrb	r0, [r0, #28]
    5886:	b158      	cbz	r0, 58a0 <__kernel_ram_size+0x168>
    5888:	490a      	ldr	r1, [pc, #40]	; (58b4 <__kernel_ram_size+0x17c>)
    588a:	220e      	movs	r2, #14
    588c:	f101 000e 	add.w	r0, r1, #14
    5890:	f006 fb01 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5894:	4807      	ldr	r0, [pc, #28]	; (58b4 <__kernel_ram_size+0x17c>)
    5896:	2221      	movs	r2, #33	; 0x21
    5898:	4907      	ldr	r1, [pc, #28]	; (58b8 <__kernel_ram_size+0x180>)
    589a:	301d      	adds	r0, #29
    589c:	f000 fd10 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    58a0:	69e2      	ldr	r2, [r4, #28]
    58a2:	7961      	ldrb	r1, [r4, #5]
    58a4:	78a0      	ldrb	r0, [r4, #2]
    58a6:	4790      	blx	r2
    58a8:	2000      	movs	r0, #0
    58aa:	7020      	strb	r0, [r4, #0]
    58ac:	bd10      	pop	{r4, pc}
    58ae:	0000      	.short	0x0000
    58b0:	200000d0 	.word	0x200000d0
    58b4:	20000a1a 	.word	0x20000a1a
    58b8:	00005495 	.word	0x00005495
    58bc:	4808      	ldr	r0, [pc, #32]	; (58e0 <__kernel_ram_size+0x1a8>)
    58be:	b510      	push	{r4, lr}
    58c0:	7800      	ldrb	r0, [r0, #0]
    58c2:	2802      	cmp	r0, #2
    58c4:	d004      	beq.n	58d0 <__kernel_ram_size+0x198>
    58c6:	f240 211e 	movw	r1, #542	; 0x21e
    58ca:	2027      	movs	r0, #39	; 0x27
    58cc:	f7fe fd86 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    58d0:	4904      	ldr	r1, [pc, #16]	; (58e4 <__kernel_ram_size+0x1ac>)
    58d2:	2001      	movs	r0, #1
    58d4:	7308      	strb	r0, [r1, #12]
    58d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    58da:	f7ff bfc9 	b.w	5870 <__kernel_ram_size+0x138>
    58de:	0000      	.short	0x0000
    58e0:	200000d0 	.word	0x200000d0
    58e4:	20000a1a 	.word	0x20000a1a
    58e8:	4b0c      	ldr	r3, [pc, #48]	; (591c <__kernel_ram_size+0x1e4>)
    58ea:	b430      	push	{r4, r5}
    58ec:	79db      	ldrb	r3, [r3, #7]
    58ee:	b93a      	cbnz	r2, 5900 <__kernel_ram_size+0x1c8>
    58f0:	2bff      	cmp	r3, #255	; 0xff
    58f2:	d105      	bne.n	5900 <__kernel_ram_size+0x1c8>
    58f4:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    58f8:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    58fc:	42a2      	cmp	r2, r4
    58fe:	d00a      	beq.n	5916 <__kernel_ram_size+0x1de>
    5900:	b129      	cbz	r1, 590e <__kernel_ram_size+0x1d6>
    5902:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5906:	bc30      	pop	{r4, r5}
    5908:	4618      	mov	r0, r3
    590a:	f005 bb75 	b.w	aff8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    590e:	23ff      	movs	r3, #255	; 0xff
    5910:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    5914:	e7f7      	b.n	5906 <__kernel_ram_size+0x1ce>
    5916:	bc30      	pop	{r4, r5}
    5918:	4770      	bx	lr
    591a:	0000      	.short	0x0000
    591c:	200000d0 	.word	0x200000d0
    5920:	b570      	push	{r4, r5, r6, lr}
    5922:	4606      	mov	r6, r0
    5924:	f7ff fdd0 	bl	54c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5928:	4a1b      	ldr	r2, [pc, #108]	; (5998 <__kernel_ram_size+0x260>)
    592a:	4604      	mov	r4, r0
    592c:	2501      	movs	r5, #1
    592e:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5930:	7808      	ldrb	r0, [r1, #0]
    5932:	f000 0003 	and.w	r0, r0, #3
    5936:	2801      	cmp	r0, #1
    5938:	d00c      	beq.n	5954 <__kernel_ram_size+0x21c>
    593a:	2802      	cmp	r0, #2
    593c:	d00a      	beq.n	5954 <__kernel_ram_size+0x21c>
    593e:	2803      	cmp	r0, #3
    5940:	d121      	bne.n	5986 <__kernel_ram_size+0x24e>
    5942:	7225      	strb	r5, [r4, #8]
    5944:	89d0      	ldrh	r0, [r2, #14]
    5946:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    594a:	81d0      	strh	r0, [r2, #14]
    594c:	2001      	movs	r0, #1
    594e:	f7ff fdad 	bl	54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5952:	e018      	b.n	5986 <__kernel_ram_size+0x24e>
    5954:	7848      	ldrb	r0, [r1, #1]
    5956:	b1b0      	cbz	r0, 5986 <__kernel_ram_size+0x24e>
    5958:	89d1      	ldrh	r1, [r2, #14]
    595a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    595e:	81d1      	strh	r1, [r2, #14]
    5960:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5962:	2900      	cmp	r1, #0
    5964:	d009      	beq.n	597a <__kernel_ram_size+0x242>
    5966:	28fb      	cmp	r0, #251	; 0xfb
    5968:	d808      	bhi.n	597c <__kernel_ram_size+0x244>
    596a:	7990      	ldrb	r0, [r2, #6]
    596c:	b120      	cbz	r0, 5978 <__kernel_ram_size+0x240>
    596e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5972:	2020      	movs	r0, #32
    5974:	f7ff bdae 	b.w	54d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5978:	7035      	strb	r5, [r6, #0]
    597a:	bd70      	pop	{r4, r5, r6, pc}
    597c:	7950      	ldrb	r0, [r2, #5]
    597e:	f040 0010 	orr.w	r0, r0, #16
    5982:	7150      	strb	r0, [r2, #5]
    5984:	bd70      	pop	{r4, r5, r6, pc}
    5986:	7c20      	ldrb	r0, [r4, #16]
    5988:	2801      	cmp	r0, #1
    598a:	d001      	beq.n	5990 <__kernel_ram_size+0x258>
    598c:	7425      	strb	r5, [r4, #16]
    598e:	bd70      	pop	{r4, r5, r6, pc}
    5990:	2000      	movs	r0, #0
    5992:	7420      	strb	r0, [r4, #16]
    5994:	bd70      	pop	{r4, r5, r6, pc}
    5996:	0000      	.short	0x0000
    5998:	200000d0 	.word	0x200000d0
    599c:	b570      	push	{r4, r5, r6, lr}
    599e:	4605      	mov	r5, r0
    59a0:	f7ff fd92 	bl	54c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    59a4:	4604      	mov	r4, r0
    59a6:	7b80      	ldrb	r0, [r0, #14]
    59a8:	2800      	cmp	r0, #0
    59aa:	d02d      	beq.n	5a08 <__kernel_ram_size+0x2d0>
    59ac:	2802      	cmp	r0, #2
    59ae:	d10c      	bne.n	59ca <__kernel_ram_size+0x292>
    59b0:	481b      	ldr	r0, [pc, #108]	; (5a20 <__kernel_ram_size+0x2e8>)
    59b2:	4629      	mov	r1, r5
    59b4:	6b00      	ldr	r0, [r0, #48]	; 0x30
    59b6:	f006 ffa8 	bl	c90a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    59ba:	b330      	cbz	r0, 5a0a <__kernel_ram_size+0x2d2>
    59bc:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    59c0:	1c40      	adds	r0, r0, #1
    59c2:	f141 0100 	adc.w	r1, r1, #0
    59c6:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    59ca:	2500      	movs	r5, #0
    59cc:	73a5      	strb	r5, [r4, #14]
    59ce:	7aa0      	ldrb	r0, [r4, #10]
    59d0:	b120      	cbz	r0, 59dc <__kernel_ram_size+0x2a4>
    59d2:	72a5      	strb	r5, [r4, #10]
    59d4:	2100      	movs	r1, #0
    59d6:	2010      	movs	r0, #16
    59d8:	f7ff fd68 	bl	54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    59dc:	7a60      	ldrb	r0, [r4, #9]
    59de:	b170      	cbz	r0, 59fe <__kernel_ram_size+0x2c6>
    59e0:	7265      	strb	r5, [r4, #9]
    59e2:	f7ff fb21 	bl	5028 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    59e6:	b198      	cbz	r0, 5a10 <__kernel_ram_size+0x2d8>
    59e8:	2100      	movs	r1, #0
    59ea:	2008      	movs	r0, #8
    59ec:	f7ff fd5e 	bl	54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    59f0:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    59f4:	1c40      	adds	r0, r0, #1
    59f6:	f141 0100 	adc.w	r1, r1, #0
    59fa:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    59fe:	7be0      	ldrb	r0, [r4, #15]
    5a00:	2801      	cmp	r0, #1
    5a02:	d00a      	beq.n	5a1a <__kernel_ram_size+0x2e2>
    5a04:	2001      	movs	r0, #1
    5a06:	73e0      	strb	r0, [r4, #15]
    5a08:	bd70      	pop	{r4, r5, r6, pc}
    5a0a:	f240 31b9 	movw	r1, #953	; 0x3b9
    5a0e:	e001      	b.n	5a14 <__kernel_ram_size+0x2dc>
    5a10:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    5a14:	2027      	movs	r0, #39	; 0x27
    5a16:	f7fe fce1 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a1a:	73e5      	strb	r5, [r4, #15]
    5a1c:	bd70      	pop	{r4, r5, r6, pc}
    5a1e:	0000      	.short	0x0000
    5a20:	200000d0 	.word	0x200000d0
    5a24:	4803      	ldr	r0, [pc, #12]	; (5a34 <__kernel_ram_size+0x2fc>)
    5a26:	7800      	ldrb	r0, [r0, #0]
    5a28:	2800      	cmp	r0, #0
    5a2a:	d001      	beq.n	5a30 <__kernel_ram_size+0x2f8>
    5a2c:	f7ff bf20 	b.w	5870 <__kernel_ram_size+0x138>
    5a30:	4770      	bx	lr
    5a32:	0000      	.short	0x0000
    5a34:	200000d0 	.word	0x200000d0
    5a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a3c:	4606      	mov	r6, r0
    5a3e:	f7ff fd3d 	bl	54bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5a42:	4680      	mov	r8, r0
    5a44:	f7ff fd40 	bl	54c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5a48:	4c16      	ldr	r4, [pc, #88]	; (5aa4 <__kernel_ram_size+0x36c>)
    5a4a:	4605      	mov	r5, r0
    5a4c:	4632      	mov	r2, r6
    5a4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5a50:	6260      	str	r0, [r4, #36]	; 0x24
    5a52:	2101      	movs	r1, #1
    5a54:	4640      	mov	r0, r8
    5a56:	f7ff ff47 	bl	58e8 <__kernel_ram_size+0x1b0>
    5a5a:	7ee8      	ldrb	r0, [r5, #27]
    5a5c:	2700      	movs	r7, #0
    5a5e:	b170      	cbz	r0, 5a7e <__kernel_ram_size+0x346>
    5a60:	4811      	ldr	r0, [pc, #68]	; (5aa8 <__kernel_ram_size+0x370>)
    5a62:	f005 fa0f 	bl	ae84 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5a66:	4811      	ldr	r0, [pc, #68]	; (5aac <__kernel_ram_size+0x374>)
    5a68:	2101      	movs	r1, #1
    5a6a:	7601      	strb	r1, [r0, #24]
    5a6c:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    5a70:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5a74:	490c      	ldr	r1, [pc, #48]	; (5aa8 <__kernel_ram_size+0x370>)
    5a76:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5a78:	f004 fe76 	bl	a768 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    5a7c:	e004      	b.n	5a88 <__kernel_ram_size+0x350>
    5a7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5a80:	f005 fa00 	bl	ae84 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5a84:	f004 feb2 	bl	a7ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5a88:	b916      	cbnz	r6, 5a90 <__kernel_ram_size+0x358>
    5a8a:	4638      	mov	r0, r7
    5a8c:	f005 f8b0 	bl	abf0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5a90:	2100      	movs	r1, #0
    5a92:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    5a96:	4608      	mov	r0, r1
    5a98:	f005 fa6c 	bl	af74 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5a9c:	2002      	movs	r0, #2
    5a9e:	7020      	strb	r0, [r4, #0]
    5aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5aa4:	200000d0 	.word	0x200000d0
    5aa8:	200008c8 	.word	0x200008c8
    5aac:	200009d0 	.word	0x200009d0
    5ab0:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5ab4:	4604      	mov	r4, r0
    5ab6:	f7ff fd07 	bl	54c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5aba:	4605      	mov	r5, r0
    5abc:	f7ff fcfe 	bl	54bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5ac0:	2700      	movs	r7, #0
    5ac2:	4606      	mov	r6, r0
    5ac4:	f8df 9164 	ldr.w	r9, [pc, #356]	; 5c2c <__kernel_ram_size+0x4f4>
    5ac8:	f88d 7000 	strb.w	r7, [sp]
    5acc:	4622      	mov	r2, r4
    5ace:	4639      	mov	r1, r7
    5ad0:	f7ff ff0a 	bl	58e8 <__kernel_ram_size+0x1b0>
    5ad4:	7ba8      	ldrb	r0, [r5, #14]
    5ad6:	f04f 0801 	mov.w	r8, #1
    5ada:	f1a9 0420 	sub.w	r4, r9, #32
    5ade:	b140      	cbz	r0, 5af2 <__kernel_ram_size+0x3ba>
    5ae0:	2801      	cmp	r0, #1
    5ae2:	d020      	beq.n	5b26 <__kernel_ram_size+0x3ee>
    5ae4:	2802      	cmp	r0, #2
    5ae6:	d02f      	beq.n	5b48 <__kernel_ram_size+0x410>
    5ae8:	2803      	cmp	r0, #3
    5aea:	d03b      	beq.n	5b64 <__kernel_ram_size+0x42c>
    5aec:	f240 21d5 	movw	r1, #725	; 0x2d5
    5af0:	e057      	b.n	5ba2 <__kernel_ram_size+0x46a>
    5af2:	7a20      	ldrb	r0, [r4, #8]
    5af4:	2150      	movs	r1, #80	; 0x50
    5af6:	f8ad 0004 	strh.w	r0, [sp, #4]
    5afa:	5388      	strh	r0, [r1, r6]
    5afc:	4648      	mov	r0, r9
    5afe:	f7ff fabd 	bl	507c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5b02:	b130      	cbz	r0, 5b12 <__kernel_ram_size+0x3da>
    5b04:	2080      	movs	r0, #128	; 0x80
    5b06:	6a21      	ldr	r1, [r4, #32]
    5b08:	f7ff fcd0 	bl	54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5b0c:	f885 8009 	strb.w	r8, [r5, #9]
    5b10:	e02c      	b.n	5b6c <__kernel_ram_size+0x434>
    5b12:	466a      	mov	r2, sp
    5b14:	a901      	add	r1, sp, #4
    5b16:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5b18:	f007 fb7b 	bl	d212 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5b1c:	6220      	str	r0, [r4, #32]
    5b1e:	b110      	cbz	r0, 5b26 <__kernel_ram_size+0x3ee>
    5b20:	f895 1053 	ldrb.w	r1, [r5, #83]	; 0x53
    5b24:	b111      	cbz	r1, 5b2c <__kernel_ram_size+0x3f4>
    5b26:	4842      	ldr	r0, [pc, #264]	; (5c30 <__kernel_ram_size+0x4f8>)
    5b28:	6220      	str	r0, [r4, #32]
    5b2a:	e01f      	b.n	5b6c <__kernel_ram_size+0x434>
    5b2c:	f89d 1000 	ldrb.w	r1, [sp]
    5b30:	b921      	cbnz	r1, 5b3c <__kernel_ram_size+0x404>
    5b32:	8007      	strh	r7, [r0, #0]
    5b34:	7087      	strb	r7, [r0, #2]
    5b36:	2101      	movs	r1, #1
    5b38:	f007 feec 	bl	d914 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    5b3c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5b40:	6a20      	ldr	r0, [r4, #32]
    5b42:	f007 fe6f 	bl	d824 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    5b46:	e011      	b.n	5b6c <__kernel_ram_size+0x434>
    5b48:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    5b4c:	f8ad 0004 	strh.w	r0, [sp, #4]
    5b50:	466a      	mov	r2, sp
    5b52:	a901      	add	r1, sp, #4
    5b54:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5b56:	f007 fb5c 	bl	d212 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5b5a:	6220      	str	r0, [r4, #32]
    5b5c:	b930      	cbnz	r0, 5b6c <__kernel_ram_size+0x434>
    5b5e:	f240 21bf 	movw	r1, #703	; 0x2bf
    5b62:	e01e      	b.n	5ba2 <__kernel_ram_size+0x46a>
    5b64:	4648      	mov	r0, r9
    5b66:	f7ff fa89 	bl	507c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5b6a:	b1c0      	cbz	r0, 5b9e <__kernel_ram_size+0x466>
    5b6c:	6a20      	ldr	r0, [r4, #32]
    5b6e:	2308      	movs	r3, #8
    5b70:	7801      	ldrb	r1, [r0, #0]
    5b72:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    5b76:	7001      	strb	r1, [r0, #0]
    5b78:	7bea      	ldrb	r2, [r5, #15]
    5b7a:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    5b7e:	4311      	orrs	r1, r2
    5b80:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    5b84:	7001      	strb	r1, [r0, #0]
    5b86:	7c2a      	ldrb	r2, [r5, #16]
    5b88:	2304      	movs	r3, #4
    5b8a:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    5b8e:	4311      	orrs	r1, r2
    5b90:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5b94:	7001      	strb	r1, [r0, #0]
    5b96:	43c9      	mvns	r1, r1
    5b98:	0789      	lsls	r1, r1, #30
    5b9a:	d005      	beq.n	5ba8 <__kernel_ram_size+0x470>
    5b9c:	e007      	b.n	5bae <__kernel_ram_size+0x476>
    5b9e:	f44f 7132 	mov.w	r1, #712	; 0x2c8
    5ba2:	2027      	movs	r0, #39	; 0x27
    5ba4:	f7fe fc1a 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ba8:	78c0      	ldrb	r0, [r0, #3]
    5baa:	2802      	cmp	r0, #2
    5bac:	d00f      	beq.n	5bce <__kernel_ram_size+0x496>
    5bae:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5bb0:	f006 ffa9 	bl	cb06 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    5bb4:	b108      	cbz	r0, 5bba <__kernel_ram_size+0x482>
    5bb6:	2101      	movs	r1, #1
    5bb8:	e00a      	b.n	5bd0 <__kernel_ram_size+0x498>
    5bba:	6a20      	ldr	r0, [r4, #32]
    5bbc:	7800      	ldrb	r0, [r0, #0]
    5bbe:	43c0      	mvns	r0, r0
    5bc0:	0780      	lsls	r0, r0, #30
    5bc2:	d004      	beq.n	5bce <__kernel_ram_size+0x496>
    5bc4:	f7ff fa18 	bl	4ff8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5bc8:	f080 0101 	eor.w	r1, r0, #1
    5bcc:	e000      	b.n	5bd0 <__kernel_ram_size+0x498>
    5bce:	2100      	movs	r1, #0
    5bd0:	6a20      	ldr	r0, [r4, #32]
    5bd2:	7802      	ldrb	r2, [r0, #0]
    5bd4:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    5bd8:	7001      	strb	r1, [r0, #0]
    5bda:	7ea9      	ldrb	r1, [r5, #26]
    5bdc:	b181      	cbz	r1, 5c00 <__kernel_ram_size+0x4c8>
    5bde:	7841      	ldrb	r1, [r0, #1]
    5be0:	b171      	cbz	r1, 5c00 <__kernel_ram_size+0x4c8>
    5be2:	4814      	ldr	r0, [pc, #80]	; (5c34 <__kernel_ram_size+0x4fc>)
    5be4:	f005 f94e 	bl	ae84 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5be8:	4811      	ldr	r0, [pc, #68]	; (5c30 <__kernel_ram_size+0x4f8>)
    5bea:	3828      	subs	r0, #40	; 0x28
    5bec:	7607      	strb	r7, [r0, #24]
    5bee:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    5bf2:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5bf6:	480f      	ldr	r0, [pc, #60]	; (5c34 <__kernel_ram_size+0x4fc>)
    5bf8:	6a21      	ldr	r1, [r4, #32]
    5bfa:	f004 fdb5 	bl	a768 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    5bfe:	e003      	b.n	5c08 <__kernel_ram_size+0x4d0>
    5c00:	f005 f940 	bl	ae84 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5c04:	f004 fdf2 	bl	a7ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5c08:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    5c0c:	2101      	movs	r1, #1
    5c0e:	2000      	movs	r0, #0
    5c10:	f005 f9b0 	bl	af74 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5c14:	f884 8004 	strb.w	r8, [r4, #4]
    5c18:	6a21      	ldr	r1, [r4, #32]
    5c1a:	880a      	ldrh	r2, [r1, #0]
    5c1c:	8222      	strh	r2, [r4, #16]
    5c1e:	7889      	ldrb	r1, [r1, #2]
    5c20:	74a1      	strb	r1, [r4, #18]
    5c22:	f884 8000 	strb.w	r8, [r4]
    5c26:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5c2a:	0000      	.short	0x0000
    5c2c:	200000f0 	.word	0x200000f0
    5c30:	200009f8 	.word	0x200009f8
    5c34:	200008c8 	.word	0x200008c8
    5c38:	000058bd 	.word	0x000058bd
    5c3c:	000055f9 	.word	0x000055f9
    5c40:	000057b9 	.word	0x000057b9
    5c44:	00005a25 	.word	0x00005a25

00005c48 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5c48:	4800      	ldr	r0, [pc, #0]	; (5c4c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5c4a:	4770      	bx	lr
    5c4c:	20001389 	.word	0x20001389

00005c50 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5c50:	4904      	ldr	r1, [pc, #16]	; (5c64 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5c52:	788a      	ldrb	r2, [r1, #2]
    5c54:	4282      	cmp	r2, r0
    5c56:	d903      	bls.n	5c60 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5c58:	4408      	add	r0, r1
    5c5a:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5c5e:	4770      	bx	lr
    5c60:	2000      	movs	r0, #0
    5c62:	4770      	bx	lr
    5c64:	200011b6 	.word	0x200011b6

00005c68 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5c68:	4904      	ldr	r1, [pc, #16]	; (5c7c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5c6a:	788a      	ldrb	r2, [r1, #2]
    5c6c:	4282      	cmp	r2, r0
    5c6e:	d903      	bls.n	5c78 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5c70:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5c74:	3083      	adds	r0, #131	; 0x83
    5c76:	4770      	bx	lr
    5c78:	2000      	movs	r0, #0
    5c7a:	4770      	bx	lr
    5c7c:	200011b6 	.word	0x200011b6

00005c80 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5c80:	4a05      	ldr	r2, [pc, #20]	; (5c98 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5c82:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5c86:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5c8a:	6802      	ldr	r2, [r0, #0]
    5c8c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5c90:	8880      	ldrh	r0, [r0, #4]
    5c92:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5c96:	4770      	bx	lr
    5c98:	200011b6 	.word	0x200011b6

00005c9c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5c9c:	4904      	ldr	r1, [pc, #16]	; (5cb0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5c9e:	788a      	ldrb	r2, [r1, #2]
    5ca0:	4282      	cmp	r2, r0
    5ca2:	d903      	bls.n	5cac <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5ca4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5ca8:	1cc0      	adds	r0, r0, #3
    5caa:	4770      	bx	lr
    5cac:	2000      	movs	r0, #0
    5cae:	4770      	bx	lr
    5cb0:	200011b6 	.word	0x200011b6

00005cb4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5cb4:	b510      	push	{r4, lr}
    5cb6:	f240 12d3 	movw	r2, #467	; 0x1d3
    5cba:	2100      	movs	r1, #0
    5cbc:	4808      	ldr	r0, [pc, #32]	; (5ce0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5cbe:	f006 f964 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5cc2:	2208      	movs	r2, #8
    5cc4:	21ff      	movs	r1, #255	; 0xff
    5cc6:	4807      	ldr	r0, [pc, #28]	; (5ce4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5cc8:	f006 f95f 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5ccc:	4805      	ldr	r0, [pc, #20]	; (5ce4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5cce:	2100      	movs	r1, #0
    5cd0:	1f00      	subs	r0, r0, #4
    5cd2:	7001      	strb	r1, [r0, #0]
    5cd4:	7041      	strb	r1, [r0, #1]
    5cd6:	f44f 7161 	mov.w	r1, #900	; 0x384
    5cda:	8041      	strh	r1, [r0, #2]
    5cdc:	bd10      	pop	{r4, pc}
    5cde:	0000      	.short	0x0000
    5ce0:	200011b6 	.word	0x200011b6
    5ce4:	20000348 	.word	0x20000348

00005ce8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5ce8:	4b0b      	ldr	r3, [pc, #44]	; (5d18 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5cea:	b510      	push	{r4, lr}
    5cec:	789c      	ldrb	r4, [r3, #2]
    5cee:	4284      	cmp	r4, r0
    5cf0:	d90f      	bls.n	5d12 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5cf2:	4418      	add	r0, r3
    5cf4:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5cf8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5cfc:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5d00:	700b      	strb	r3, [r1, #0]
    5d02:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    5d06:	6011      	str	r1, [r2, #0]
    5d08:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5d0c:	8090      	strh	r0, [r2, #4]
    5d0e:	2001      	movs	r0, #1
    5d10:	bd10      	pop	{r4, pc}
    5d12:	2000      	movs	r0, #0
    5d14:	bd10      	pop	{r4, pc}
    5d16:	0000      	.short	0x0000
    5d18:	200011b6 	.word	0x200011b6

00005d1c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5d1c:	4907      	ldr	r1, [pc, #28]	; (5d3c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5d1e:	788a      	ldrb	r2, [r1, #2]
    5d20:	4282      	cmp	r2, r0
    5d22:	d909      	bls.n	5d38 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5d24:	4408      	add	r0, r1
    5d26:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5d2a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5d2e:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5d32:	f000 0001 	and.w	r0, r0, #1
    5d36:	4770      	bx	lr
    5d38:	2000      	movs	r0, #0
    5d3a:	4770      	bx	lr
    5d3c:	200011b6 	.word	0x200011b6

00005d40 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5d40:	4801      	ldr	r0, [pc, #4]	; (5d48 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5d42:	8840      	ldrh	r0, [r0, #2]
    5d44:	4770      	bx	lr
    5d46:	0000      	.short	0x0000
    5d48:	20000344 	.word	0x20000344

00005d4c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    5d4c:	4905      	ldr	r1, [pc, #20]	; (5d64 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    5d4e:	788a      	ldrb	r2, [r1, #2]
    5d50:	4282      	cmp	r2, r0
    5d52:	d903      	bls.n	5d5c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    5d54:	4408      	add	r0, r1
    5d56:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5d5a:	b108      	cbz	r0, 5d60 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    5d5c:	2000      	movs	r0, #0
    5d5e:	4770      	bx	lr
    5d60:	2001      	movs	r0, #1
    5d62:	4770      	bx	lr
    5d64:	200011b6 	.word	0x200011b6

00005d68 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5d68:	b570      	push	{r4, r5, r6, lr}
    5d6a:	460d      	mov	r5, r1
    5d6c:	4606      	mov	r6, r0
    5d6e:	f000 f8c1 	bl	5ef4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5d72:	4c10      	ldr	r4, [pc, #64]	; (5db4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    5d74:	2810      	cmp	r0, #16
    5d76:	d007      	beq.n	5d88 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5d78:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    5d7c:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5d80:	07c9      	lsls	r1, r1, #31
    5d82:	d001      	beq.n	5d88 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5d84:	2001      	movs	r0, #1
    5d86:	bd70      	pop	{r4, r5, r6, pc}
    5d88:	7861      	ldrb	r1, [r4, #1]
    5d8a:	2908      	cmp	r1, #8
    5d8c:	d210      	bcs.n	5db0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5d8e:	2810      	cmp	r0, #16
    5d90:	d008      	beq.n	5da4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    5d92:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    5d96:	2101      	movs	r1, #1
    5d98:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5d9c:	7860      	ldrb	r0, [r4, #1]
    5d9e:	1c40      	adds	r0, r0, #1
    5da0:	7060      	strb	r0, [r4, #1]
    5da2:	e7ef      	b.n	5d84 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    5da4:	2201      	movs	r2, #1
    5da6:	4629      	mov	r1, r5
    5da8:	4630      	mov	r0, r6
    5daa:	f000 f887 	bl	5ebc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5dae:	e7f5      	b.n	5d9c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5db0:	2000      	movs	r0, #0
    5db2:	bd70      	pop	{r4, r5, r6, pc}
    5db4:	200011b6 	.word	0x200011b6

00005db8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5db8:	b570      	push	{r4, r5, r6, lr}
    5dba:	4d0b      	ldr	r5, [pc, #44]	; (5de8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5dbc:	7828      	ldrb	r0, [r5, #0]
    5dbe:	1e40      	subs	r0, r0, #1
    5dc0:	b244      	sxtb	r4, r0
    5dc2:	e00a      	b.n	5dda <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5dc4:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5dc8:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5dcc:	07c0      	lsls	r0, r0, #31
    5dce:	d002      	beq.n	5dd6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5dd0:	b2e0      	uxtb	r0, r4
    5dd2:	f000 f8ed 	bl	5fb0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    5dd6:	1e64      	subs	r4, r4, #1
    5dd8:	b264      	sxtb	r4, r4
    5dda:	2c00      	cmp	r4, #0
    5ddc:	daf2      	bge.n	5dc4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    5dde:	4903      	ldr	r1, [pc, #12]	; (5dec <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5de0:	2000      	movs	r0, #0
    5de2:	7048      	strb	r0, [r1, #1]
    5de4:	bd70      	pop	{r4, r5, r6, pc}
    5de6:	0000      	.short	0x0000
    5de8:	200011b6 	.word	0x200011b6
    5dec:	20000344 	.word	0x20000344

00005df0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5df4:	2400      	movs	r4, #0
    5df6:	4625      	mov	r5, r4
    5df8:	4e18      	ldr	r6, [pc, #96]	; (5e5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5dfa:	e029      	b.n	5e50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5dfc:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5e00:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5e04:	07c0      	lsls	r0, r0, #31
    5e06:	d021      	beq.n	5e4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5e08:	4628      	mov	r0, r5
    5e0a:	f000 f843 	bl	5e94 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5e0e:	4603      	mov	r3, r0
    5e10:	f7ff ff44 	bl	5c9c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5e14:	4601      	mov	r1, r0
    5e16:	2000      	movs	r0, #0
    5e18:	2b10      	cmp	r3, #16
    5e1a:	d009      	beq.n	5e30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5e1c:	18f2      	adds	r2, r6, r3
    5e1e:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    5e22:	f1bc 0f01 	cmp.w	ip, #1
    5e26:	d002      	beq.n	5e2e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5e28:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5e2c:	b102      	cbz	r2, 5e30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5e2e:	2001      	movs	r0, #1
    5e30:	1e40      	subs	r0, r0, #1
    5e32:	4201      	tst	r1, r0
    5e34:	d10a      	bne.n	5e4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5e36:	480a      	ldr	r0, [pc, #40]	; (5e60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5e38:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5e3c:	5503      	strb	r3, [r0, r4]
    5e3e:	4620      	mov	r0, r4
    5e40:	1c64      	adds	r4, r4, #1
    5e42:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5e46:	b2e4      	uxtb	r4, r4
    5e48:	f005 f9b8 	bl	b1bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5e4c:	1c6d      	adds	r5, r5, #1
    5e4e:	b2ed      	uxtb	r5, r5
    5e50:	7830      	ldrb	r0, [r6, #0]
    5e52:	42a8      	cmp	r0, r5
    5e54:	d8d2      	bhi.n	5dfc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e5a:	0000      	.short	0x0000
    5e5c:	200011b6 	.word	0x200011b6
    5e60:	20000348 	.word	0x20000348
    5e64:	4602      	mov	r2, r0
    5e66:	4809      	ldr	r0, [pc, #36]	; (5e8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5e68:	b510      	push	{r4, lr}
    5e6a:	7800      	ldrb	r0, [r0, #0]
    5e6c:	460b      	mov	r3, r1
    5e6e:	b158      	cbz	r0, 5e88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5e70:	4807      	ldr	r0, [pc, #28]	; (5e90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5e72:	7881      	ldrb	r1, [r0, #2]
    5e74:	b141      	cbz	r1, 5e88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5e76:	b10b      	cbz	r3, 5e7c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5e78:	1cc0      	adds	r0, r0, #3
    5e7a:	e001      	b.n	5e80 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5e7c:	4804      	ldr	r0, [pc, #16]	; (5e90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5e7e:	3083      	adds	r0, #131	; 0x83
    5e80:	f004 fb7a 	bl	a578 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5e84:	2001      	movs	r0, #1
    5e86:	bd10      	pop	{r4, pc}
    5e88:	2000      	movs	r0, #0
    5e8a:	bd10      	pop	{r4, pc}
    5e8c:	20000344 	.word	0x20000344
    5e90:	200011b6 	.word	0x200011b6
    5e94:	4908      	ldr	r1, [pc, #32]	; (5eb8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    5e96:	b510      	push	{r4, lr}
    5e98:	4603      	mov	r3, r0
    5e9a:	2000      	movs	r0, #0
    5e9c:	788a      	ldrb	r2, [r1, #2]
    5e9e:	e006      	b.n	5eae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    5ea0:	180c      	adds	r4, r1, r0
    5ea2:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    5ea6:	429c      	cmp	r4, r3
    5ea8:	d004      	beq.n	5eb4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    5eaa:	1c40      	adds	r0, r0, #1
    5eac:	b2c0      	uxtb	r0, r0
    5eae:	4282      	cmp	r2, r0
    5eb0:	d8f6      	bhi.n	5ea0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    5eb2:	2010      	movs	r0, #16
    5eb4:	bd10      	pop	{r4, pc}
    5eb6:	0000      	.short	0x0000
    5eb8:	200011b6 	.word	0x200011b6
    5ebc:	b570      	push	{r4, r5, r6, lr}
    5ebe:	4b0c      	ldr	r3, [pc, #48]	; (5ef0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    5ec0:	4604      	mov	r4, r0
    5ec2:	7818      	ldrb	r0, [r3, #0]
    5ec4:	1c45      	adds	r5, r0, #1
    5ec6:	701d      	strb	r5, [r3, #0]
    5ec8:	2810      	cmp	r0, #16
    5eca:	d303      	bcc.n	5ed4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    5ecc:	2146      	movs	r1, #70	; 0x46
    5ece:	2028      	movs	r0, #40	; 0x28
    5ed0:	f7fe fa84 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ed4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5ed8:	680d      	ldr	r5, [r1, #0]
    5eda:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    5ede:	8889      	ldrh	r1, [r1, #4]
    5ee0:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5ee4:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5ee8:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5eec:	bd70      	pop	{r4, r5, r6, pc}
    5eee:	0000      	.short	0x0000
    5ef0:	200011b6 	.word	0x200011b6
    5ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ef6:	4c1a      	ldr	r4, [pc, #104]	; (5f60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    5ef8:	4603      	mov	r3, r0
    5efa:	2000      	movs	r0, #0
    5efc:	7825      	ldrb	r5, [r4, #0]
    5efe:	e02a      	b.n	5f56 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    5f00:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5f04:	780f      	ldrb	r7, [r1, #0]
    5f06:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    5f0a:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    5f0e:	ea87 070c 	eor.w	r7, r7, ip
    5f12:	405e      	eors	r6, r3
    5f14:	443e      	add	r6, r7
    5f16:	784f      	ldrb	r7, [r1, #1]
    5f18:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    5f1c:	ea87 070c 	eor.w	r7, r7, ip
    5f20:	443e      	add	r6, r7
    5f22:	788f      	ldrb	r7, [r1, #2]
    5f24:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    5f28:	ea87 070c 	eor.w	r7, r7, ip
    5f2c:	443e      	add	r6, r7
    5f2e:	78cf      	ldrb	r7, [r1, #3]
    5f30:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    5f34:	ea87 070c 	eor.w	r7, r7, ip
    5f38:	443e      	add	r6, r7
    5f3a:	790f      	ldrb	r7, [r1, #4]
    5f3c:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    5f40:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    5f44:	ea87 070c 	eor.w	r7, r7, ip
    5f48:	443e      	add	r6, r7
    5f4a:	794f      	ldrb	r7, [r1, #5]
    5f4c:	4057      	eors	r7, r2
    5f4e:	42f7      	cmn	r7, r6
    5f50:	d004      	beq.n	5f5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    5f52:	1c40      	adds	r0, r0, #1
    5f54:	b2c0      	uxtb	r0, r0
    5f56:	4285      	cmp	r5, r0
    5f58:	d8d2      	bhi.n	5f00 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    5f5a:	2010      	movs	r0, #16
    5f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f5e:	0000      	.short	0x0000
    5f60:	200011b6 	.word	0x200011b6
    5f64:	b570      	push	{r4, r5, r6, lr}
    5f66:	4605      	mov	r5, r0
    5f68:	f7ff ff94 	bl	5e94 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5f6c:	2810      	cmp	r0, #16
    5f6e:	d11c      	bne.n	5faa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    5f70:	4c0e      	ldr	r4, [pc, #56]	; (5fac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    5f72:	7820      	ldrb	r0, [r4, #0]
    5f74:	1e40      	subs	r0, r0, #1
    5f76:	b2c0      	uxtb	r0, r0
    5f78:	7020      	strb	r0, [r4, #0]
    5f7a:	42a8      	cmp	r0, r5
    5f7c:	d015      	beq.n	5faa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    5f7e:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5f82:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5f86:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5f8a:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5f8e:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5f92:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5f96:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5f9a:	7820      	ldrb	r0, [r4, #0]
    5f9c:	f7ff ff7a 	bl	5e94 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5fa0:	2810      	cmp	r0, #16
    5fa2:	d002      	beq.n	5faa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    5fa4:	4420      	add	r0, r4
    5fa6:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5faa:	bd70      	pop	{r4, r5, r6, pc}
    5fac:	200011b6 	.word	0x200011b6
    5fb0:	4905      	ldr	r1, [pc, #20]	; (5fc8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    5fb2:	784a      	ldrb	r2, [r1, #1]
    5fb4:	1e52      	subs	r2, r2, #1
    5fb6:	704a      	strb	r2, [r1, #1]
    5fb8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5fbc:	2200      	movs	r2, #0
    5fbe:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5fc2:	f7ff bfcf 	b.w	5f64 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    5fc6:	0000      	.short	0x0000
    5fc8:	200011b6 	.word	0x200011b6

00005fcc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    5fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5fd0:	4604      	mov	r4, r0
    5fd2:	f100 0580 	add.w	r5, r0, #128	; 0x80
    5fd6:	f04f 0901 	mov.w	r9, #1
    5fda:	b171      	cbz	r1, 5ffa <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    5fdc:	f104 079e 	add.w	r7, r4, #158	; 0x9e
    5fe0:	1e7e      	subs	r6, r7, #1
    5fe2:	2901      	cmp	r1, #1
    5fe4:	d020      	beq.n	6028 <CONFIG_PM_SRAM_SIZE+0x28>
    5fe6:	2902      	cmp	r1, #2
    5fe8:	d045      	beq.n	6076 <CONFIG_PM_SRAM_SIZE+0x76>
    5fea:	2903      	cmp	r1, #3
    5fec:	d11a      	bne.n	6024 <CONFIG_PM_SRAM_SIZE+0x24>
    5fee:	4639      	mov	r1, r7
    5ff0:	4630      	mov	r0, r6
    5ff2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ff6:	f007 bb11 	b.w	d61c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5ffa:	f44f 723a 	mov.w	r2, #744	; 0x2e8
    5ffe:	2100      	movs	r1, #0
    6000:	f005 ffc3 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6004:	f885 901d 	strb.w	r9, [r5, #29]
    6008:	4820      	ldr	r0, [pc, #128]	; (608c <CONFIG_PM_SRAM_SIZE+0x8c>)
    600a:	6668      	str	r0, [r5, #100]	; 0x64
    600c:	2007      	movs	r0, #7
    600e:	66a8      	str	r0, [r5, #104]	; 0x68
    6010:	f814 0fe4 	ldrb.w	r0, [r4, #228]!
    6014:	f020 0004 	bic.w	r0, r0, #4
    6018:	7020      	strb	r0, [r4, #0]
    601a:	20fe      	movs	r0, #254	; 0xfe
    601c:	f885 009c 	strb.w	r0, [r5, #156]	; 0x9c
    6020:	207f      	movs	r0, #127	; 0x7f
    6022:	7468      	strb	r0, [r5, #17]
    6024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6028:	f04f 0800 	mov.w	r8, #0
    602c:	f8a4 8226 	strh.w	r8, [r4, #550]	; 0x226
    6030:	f884 821b 	strb.w	r8, [r4, #539]	; 0x21b
    6034:	6921      	ldr	r1, [r4, #16]
    6036:	4816      	ldr	r0, [pc, #88]	; (6090 <CONFIG_PM_SRAM_SIZE+0x90>)
    6038:	460a      	mov	r2, r1
    603a:	4408      	add	r0, r1
    603c:	fbb0 f0f1 	udiv	r0, r0, r1
    6040:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    6044:	f640 30b8 	movw	r0, #3000	; 0xbb8
    6048:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    604c:	8b63      	ldrh	r3, [r4, #26]
    604e:	4628      	mov	r0, r5
    6050:	f000 f820 	bl	6094 <CONFIG_PM_SRAM_SIZE+0x94>
    6054:	4639      	mov	r1, r7
    6056:	4630      	mov	r0, r6
    6058:	f007 fae0 	bl	d61c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    605c:	f005 fef7 	bl	be4e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6060:	b118      	cbz	r0, 606a <CONFIG_PM_SRAM_SIZE+0x6a>
    6062:	6960      	ldr	r0, [r4, #20]
    6064:	f000 fb82 	bl	676c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    6068:	b110      	cbz	r0, 6070 <CONFIG_PM_SRAM_SIZE+0x70>
    606a:	f884 820c 	strb.w	r8, [r4, #524]	; 0x20c
    606e:	e7d9      	b.n	6024 <CONFIG_PM_SRAM_SIZE+0x24>
    6070:	f884 920c 	strb.w	r9, [r4, #524]	; 0x20c
    6074:	e7d6      	b.n	6024 <CONFIG_PM_SRAM_SIZE+0x24>
    6076:	6901      	ldr	r1, [r0, #16]
    6078:	f8b4 32ca 	ldrh.w	r3, [r4, #714]	; 0x2ca
    607c:	f8d4 22c4 	ldr.w	r2, [r4, #708]	; 0x2c4
    6080:	4628      	mov	r0, r5
    6082:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6086:	f000 b805 	b.w	6094 <CONFIG_PM_SRAM_SIZE+0x94>
    608a:	0000      	.short	0x0000
    608c:	3004492f 	.word	0x3004492f
    6090:	01c9c37f 	.word	0x01c9c37f
    6094:	b510      	push	{r4, lr}
    6096:	2400      	movs	r4, #0
    6098:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
    609c:	f830 4f48 	ldrh.w	r4, [r0, #72]!
    60a0:	434c      	muls	r4, r1
    60a2:	fbb4 f4f2 	udiv	r4, r4, r2
    60a6:	f820 4910 	strh.w	r4, [r0], #-16
    60aa:	f240 2471 	movw	r4, #625	; 0x271
    60ae:	4363      	muls	r3, r4
    60b0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    60b4:	1e5b      	subs	r3, r3, #1
    60b6:	fbb3 f3f2 	udiv	r3, r3, r2
    60ba:	81c3      	strh	r3, [r0, #14]
    60bc:	4b09      	ldr	r3, [pc, #36]	; (60e4 <CONFIG_PM_SRAM_SIZE+0xe4>)
    60be:	fbb3 f3f2 	udiv	r3, r3, r2
    60c2:	1c5b      	adds	r3, r3, #1
    60c4:	8283      	strh	r3, [r0, #20]
    60c6:	8903      	ldrh	r3, [r0, #8]
    60c8:	4363      	muls	r3, r4
    60ca:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    60ce:	1e5b      	subs	r3, r3, #1
    60d0:	fbb3 f3f2 	udiv	r3, r3, r2
    60d4:	6043      	str	r3, [r0, #4]
    60d6:	6803      	ldr	r3, [r0, #0]
    60d8:	434b      	muls	r3, r1
    60da:	fbb3 f1f2 	udiv	r1, r3, r2
    60de:	6001      	str	r1, [r0, #0]
    60e0:	bd10      	pop	{r4, pc}
    60e2:	0000      	.short	0x0000
    60e4:	02625a00 	.word	0x02625a00

000060e8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    60e8:	b570      	push	{r4, r5, r6, lr}
    60ea:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    60ee:	b28b      	uxth	r3, r1
    60f0:	7ac5      	ldrb	r5, [r0, #11]
    60f2:	ea83 0102 	eor.w	r1, r3, r2
    60f6:	2200      	movs	r2, #0
    60f8:	b2cc      	uxtb	r4, r1
    60fa:	0a09      	lsrs	r1, r1, #8
    60fc:	fa94 f4a4 	rbit	r4, r4
    6100:	fa91 f1a1 	rbit	r1, r1
    6104:	0e24      	lsrs	r4, r4, #24
    6106:	0e09      	lsrs	r1, r1, #24
    6108:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    610c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6110:	1c52      	adds	r2, r2, #1
    6112:	4419      	add	r1, r3
    6114:	b2d2      	uxtb	r2, r2
    6116:	b289      	uxth	r1, r1
    6118:	2a03      	cmp	r2, #3
    611a:	d3ed      	bcc.n	60f8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    611c:	4059      	eors	r1, r3
    611e:	2225      	movs	r2, #37	; 0x25
    6120:	fbb1 f3f2 	udiv	r3, r1, r2
    6124:	fb02 1213 	mls	r2, r2, r3, r1
    6128:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    612c:	f002 0607 	and.w	r6, r2, #7
    6130:	785b      	ldrb	r3, [r3, #1]
    6132:	2401      	movs	r4, #1
    6134:	fa04 f606 	lsl.w	r6, r4, r6
    6138:	4233      	tst	r3, r6
    613a:	d001      	beq.n	6140 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    613c:	4610      	mov	r0, r2
    613e:	bd70      	pop	{r4, r5, r6, pc}
    6140:	434d      	muls	r5, r1
    6142:	0c29      	lsrs	r1, r5, #16
    6144:	1c49      	adds	r1, r1, #1
    6146:	b2c9      	uxtb	r1, r1
    6148:	2200      	movs	r2, #0
    614a:	1885      	adds	r5, r0, r2
    614c:	79ab      	ldrb	r3, [r5, #6]
    614e:	428b      	cmp	r3, r1
    6150:	d312      	bcc.n	6178 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6152:	f895 5001 	ldrb.w	r5, [r5, #1]
    6156:	2300      	movs	r3, #0
    6158:	fa04 f603 	lsl.w	r6, r4, r3
    615c:	4235      	tst	r5, r6
    615e:	d001      	beq.n	6164 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    6160:	1e49      	subs	r1, r1, #1
    6162:	b2c9      	uxtb	r1, r1
    6164:	b121      	cbz	r1, 6170 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6166:	1c5b      	adds	r3, r3, #1
    6168:	b2db      	uxtb	r3, r3
    616a:	2b08      	cmp	r3, #8
    616c:	d3f4      	bcc.n	6158 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    616e:	e005      	b.n	617c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6170:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6174:	b2c0      	uxtb	r0, r0
    6176:	bd70      	pop	{r4, r5, r6, pc}
    6178:	1ac9      	subs	r1, r1, r3
    617a:	b2c9      	uxtb	r1, r1
    617c:	1c52      	adds	r2, r2, #1
    617e:	b2d2      	uxtb	r2, r2
    6180:	2a05      	cmp	r2, #5
    6182:	d3e2      	bcc.n	614a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6184:	21f9      	movs	r1, #249	; 0xf9
    6186:	2046      	movs	r0, #70	; 0x46
    6188:	f7fe f928 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000618c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    618c:	7841      	ldrb	r1, [r0, #1]
    618e:	b141      	cbz	r1, 61a2 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    6190:	78c0      	ldrb	r0, [r0, #3]
    6192:	282b      	cmp	r0, #43	; 0x2b
    6194:	d203      	bcs.n	619e <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    6196:	4a04      	ldr	r2, [pc, #16]	; (61a8 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    6198:	5c10      	ldrb	r0, [r2, r0]
    619a:	4288      	cmp	r0, r1
    619c:	d101      	bne.n	61a2 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    619e:	2001      	movs	r0, #1
    61a0:	4770      	bx	lr
    61a2:	2000      	movs	r0, #0
    61a4:	4770      	bx	lr
    61a6:	0000      	.short	0x0000
    61a8:	00010154 	.word	0x00010154

000061ac <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    61ac:	b510      	push	{r4, lr}
    61ae:	2201      	movs	r2, #1
    61b0:	70c1      	strb	r1, [r0, #3]
    61b2:	292b      	cmp	r1, #43	; 0x2b
    61b4:	d202      	bcs.n	61bc <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    61b6:	4a06      	ldr	r2, [pc, #24]	; (61d0 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    61b8:	5c52      	ldrb	r2, [r2, r1]
    61ba:	e006      	b.n	61ca <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    61bc:	29ff      	cmp	r1, #255	; 0xff
    61be:	d004      	beq.n	61ca <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    61c0:	f44f 618f 	mov.w	r1, #1144	; 0x478
    61c4:	202a      	movs	r0, #42	; 0x2a
    61c6:	f7fe f909 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61ca:	7042      	strb	r2, [r0, #1]
    61cc:	bd10      	pop	{r4, pc}
    61ce:	0000      	.short	0x0000
    61d0:	00010154 	.word	0x00010154

000061d4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    61d4:	4904      	ldr	r1, [pc, #16]	; (61e8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    61d6:	7c89      	ldrb	r1, [r1, #18]
    61d8:	0749      	lsls	r1, r1, #29
    61da:	d400      	bmi.n	61de <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    61dc:	b108      	cbz	r0, 61e2 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    61de:	2000      	movs	r0, #0
    61e0:	4770      	bx	lr
    61e2:	2001      	movs	r0, #1
    61e4:	4770      	bx	lr
    61e6:	0000      	.short	0x0000
    61e8:	200010f4 	.word	0x200010f4

000061ec <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    61ec:	4803      	ldr	r0, [pc, #12]	; (61fc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    61ee:	7c80      	ldrb	r0, [r0, #18]
    61f0:	0780      	lsls	r0, r0, #30
    61f2:	d401      	bmi.n	61f8 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    61f4:	2001      	movs	r0, #1
    61f6:	4770      	bx	lr
    61f8:	2000      	movs	r0, #0
    61fa:	4770      	bx	lr
    61fc:	200010f4 	.word	0x200010f4

00006200 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    6200:	4803      	ldr	r0, [pc, #12]	; (6210 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    6202:	7c80      	ldrb	r0, [r0, #18]
    6204:	07c0      	lsls	r0, r0, #31
    6206:	d001      	beq.n	620c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    6208:	2000      	movs	r0, #0
    620a:	4770      	bx	lr
    620c:	2001      	movs	r0, #1
    620e:	4770      	bx	lr
    6210:	200010f4 	.word	0x200010f4
    6214:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    6218:	4688      	mov	r8, r1
    621a:	4699      	mov	r9, r3
    621c:	4615      	mov	r5, r2
    621e:	4604      	mov	r4, r0
    6220:	4669      	mov	r1, sp
    6222:	f007 f839 	bl	d298 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6226:	bbc8      	cbnz	r0, 629c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    6228:	9e01      	ldr	r6, [sp, #4]
    622a:	2700      	movs	r7, #0
    622c:	3680      	adds	r6, #128	; 0x80
    622e:	b17d      	cbz	r5, 6250 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    6230:	4620      	mov	r0, r4
    6232:	f7fe fce1 	bl	4bf8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6236:	0004      	movs	r4, r0
    6238:	d00d      	beq.n	6256 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x56>
    623a:	4629      	mov	r1, r5
    623c:	f006 fc35 	bl	caaa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6240:	b118      	cbz	r0, 624a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    6242:	4919      	ldr	r1, [pc, #100]	; (62a8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>)
    6244:	8849      	ldrh	r1, [r1, #2]
    6246:	42a9      	cmp	r1, r5
    6248:	d207      	bcs.n	625a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5a>
    624a:	2000      	movs	r0, #0
    624c:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    6250:	2001      	movs	r0, #1
    6252:	7730      	strb	r0, [r6, #28]
    6254:	e022      	b.n	629c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    6256:	2168      	movs	r1, #104	; 0x68
    6258:	e023      	b.n	62a2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    625a:	4601      	mov	r1, r0
    625c:	aa02      	add	r2, sp, #8
    625e:	4620      	mov	r0, r4
    6260:	f006 fc1c 	bl	ca9c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6264:	9802      	ldr	r0, [sp, #8]
    6266:	8007      	strh	r7, [r0, #0]
    6268:	7087      	strb	r7, [r0, #2]
    626a:	7f31      	ldrb	r1, [r6, #28]
    626c:	b109      	cbz	r1, 6272 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x72>
    626e:	f04f 0802 	mov.w	r8, #2
    6272:	4641      	mov	r1, r8
    6274:	f007 fb4e 	bl	d914 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    6278:	9802      	ldr	r0, [sp, #8]
    627a:	462a      	mov	r2, r5
    627c:	4649      	mov	r1, r9
    627e:	1cc0      	adds	r0, r0, #3
    6280:	f005 fe09 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6284:	4620      	mov	r0, r4
    6286:	4629      	mov	r1, r5
    6288:	f006 fbc6 	bl	ca18 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    628c:	b140      	cbz	r0, 62a0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa0>
    628e:	4668      	mov	r0, sp
    6290:	f007 fb9b 	bl	d9ca <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6294:	9801      	ldr	r0, [sp, #4]
    6296:	f8a0 7212 	strh.w	r7, [r0, #530]	; 0x212
    629a:	7737      	strb	r7, [r6, #28]
    629c:	2001      	movs	r0, #1
    629e:	e7d5      	b.n	624c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    62a0:	217d      	movs	r1, #125	; 0x7d
    62a2:	202b      	movs	r0, #43	; 0x2b
    62a4:	f7fe f89a 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62a8:	200010f4 	.word	0x200010f4

000062ac <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    62ac:	2202      	movs	r2, #2
    62ae:	4902      	ldr	r1, [pc, #8]	; (62b8 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0xc>)
    62b0:	4802      	ldr	r0, [pc, #8]	; (62bc <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x10>)
    62b2:	f000 b805 	b.w	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    62b6:	0000      	.short	0x0000
    62b8:	0000db09 	.word	0x0000db09
    62bc:	2000110c 	.word	0x2000110c

000062c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    62c0:	b538      	push	{r3, r4, r5, lr}
    62c2:	b318      	cbz	r0, 630c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x4c>
    62c4:	7a03      	ldrb	r3, [r0, #8]
    62c6:	f88d 3000 	strb.w	r3, [sp]
    62ca:	9b00      	ldr	r3, [sp, #0]
    62cc:	9300      	str	r3, [sp, #0]
    62ce:	f89d 3000 	ldrb.w	r3, [sp]
    62d2:	2b00      	cmp	r3, #0
    62d4:	d126      	bne.n	6324 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x64>
    62d6:	6041      	str	r1, [r0, #4]
    62d8:	f100 0108 	add.w	r1, r0, #8
    62dc:	700a      	strb	r2, [r1, #0]
    62de:	f3ef 8210 	mrs	r2, PRIMASK
    62e2:	b672      	cpsid	i
    62e4:	4b10      	ldr	r3, [pc, #64]	; (6328 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x68>)
    62e6:	6003      	str	r3, [r0, #0]
    62e8:	1f19      	subs	r1, r3, #4
    62ea:	684c      	ldr	r4, [r1, #4]
    62ec:	7a24      	ldrb	r4, [r4, #8]
    62ee:	f88d 4000 	strb.w	r4, [sp]
    62f2:	9c00      	ldr	r4, [sp, #0]
    62f4:	9400      	str	r4, [sp, #0]
    62f6:	f89d 5000 	ldrb.w	r5, [sp]
    62fa:	2d01      	cmp	r5, #1
    62fc:	d004      	beq.n	6308 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x48>
    62fe:	680b      	ldr	r3, [r1, #0]
    6300:	6018      	str	r0, [r3, #0]
    6302:	6008      	str	r0, [r1, #0]
    6304:	b13a      	cbz	r2, 6316 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x56>
    6306:	e007      	b.n	6318 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x58>
    6308:	600b      	str	r3, [r1, #0]
    630a:	e7f9      	b.n	6300 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x40>
    630c:	f44f 6192 	mov.w	r1, #1168	; 0x490
    6310:	2010      	movs	r0, #16
    6312:	f7fe f863 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6316:	b662      	cpsie	i
    6318:	4804      	ldr	r0, [pc, #16]	; (632c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x6c>)
    631a:	7800      	ldrb	r0, [r0, #0]
    631c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6320:	f7fd be52 	b.w	3fc8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6324:	bd38      	pop	{r3, r4, r5, pc}
    6326:	0000      	.short	0x0000
    6328:	20001124 	.word	0x20001124
    632c:	20000364 	.word	0x20000364

00006330 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    6330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6334:	4f47      	ldr	r7, [pc, #284]	; (6454 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x124>)
    6336:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6458 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    633a:	4682      	mov	sl, r0
    633c:	2600      	movs	r6, #0
    633e:	6878      	ldr	r0, [r7, #4]
    6340:	7a00      	ldrb	r0, [r0, #8]
    6342:	f88d 0000 	strb.w	r0, [sp]
    6346:	9800      	ldr	r0, [sp, #0]
    6348:	9000      	str	r0, [sp, #0]
    634a:	f89d 1000 	ldrb.w	r1, [sp]
    634e:	2927      	cmp	r1, #39	; 0x27
    6350:	d106      	bne.n	6360 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>
    6352:	f899 1013 	ldrb.w	r1, [r9, #19]
    6356:	b119      	cbz	r1, 6360 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>
    6358:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    635c:	2800      	cmp	r0, #0
    635e:	d06c      	beq.n	643a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    6360:	f88d 6000 	strb.w	r6, [sp]
    6364:	4668      	mov	r0, sp
    6366:	f000 f8f3 	bl	6550 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
    636a:	f89d 1000 	ldrb.w	r1, [sp]
    636e:	2900      	cmp	r1, #0
    6370:	d1f8      	bne.n	6364 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    6372:	2800      	cmp	r0, #0
    6374:	d061      	beq.n	643a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    6376:	4604      	mov	r4, r0
    6378:	7a00      	ldrb	r0, [r0, #8]
    637a:	f88d 0000 	strb.w	r0, [sp]
    637e:	9800      	ldr	r0, [sp, #0]
    6380:	9000      	str	r0, [sp, #0]
    6382:	f89d 5000 	ldrb.w	r5, [sp]
    6386:	1ea8      	subs	r0, r5, #2
    6388:	2826      	cmp	r0, #38	; 0x26
    638a:	d25d      	bcs.n	6448 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    638c:	e8df f000 	tbb	[pc, r0]
    6390:	1a5c2213 	.word	0x1a5c2213
    6394:	3e22225c 	.word	0x3e22225c
    6398:	22222222 	.word	0x22222222
    639c:	5c1a5c22 	.word	0x5c1a5c22
    63a0:	5c1a2222 	.word	0x5c1a2222
    63a4:	225c5c5c 	.word	0x225c5c5c
    63a8:	1a225c5c 	.word	0x1a225c5c
    63ac:	435c2222 	.word	0x435c2222
    63b0:	2f5c5c1a 	.word	0x2f5c5c1a
    63b4:	4c34      	.short	0x4c34
    63b6:	6862      	ldr	r2, [r4, #4]
    63b8:	bb7a      	cbnz	r2, 641a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    63ba:	f240 318a 	movw	r1, #906	; 0x38a
    63be:	e040      	b.n	6442 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    63c0:	7226      	strb	r6, [r4, #8]
    63c2:	e044      	b.n	644e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    63c4:	4825      	ldr	r0, [pc, #148]	; (645c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12c>)
    63c6:	6803      	ldr	r3, [r0, #0]
    63c8:	b11b      	cbz	r3, 63d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    63ca:	6860      	ldr	r0, [r4, #4]
    63cc:	462a      	mov	r2, r5
    63ce:	4651      	mov	r1, sl
    63d0:	4798      	blx	r3
    63d2:	e7f5      	b.n	63c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    63d4:	462a      	mov	r2, r5
    63d6:	4621      	mov	r1, r4
    63d8:	4650      	mov	r0, sl
    63da:	f000 f8e1 	bl	65a0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x120>
    63de:	b110      	cbz	r0, 63e6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    63e0:	2d0d      	cmp	r5, #13
    63e2:	d034      	beq.n	644e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    63e4:	e7ec      	b.n	63c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    63e6:	2d0d      	cmp	r5, #13
    63e8:	d031      	beq.n	644e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    63ea:	7226      	strb	r6, [r4, #8]
    63ec:	e7a7      	b.n	633e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe>
    63ee:	6862      	ldr	r2, [r4, #4]
    63f0:	b99a      	cbnz	r2, 641a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    63f2:	f240 412b 	movw	r1, #1067	; 0x42b
    63f6:	e024      	b.n	6442 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    63f8:	f88a 6001 	strb.w	r6, [sl, #1]
    63fc:	2115      	movs	r1, #21
    63fe:	f88a 1000 	strb.w	r1, [sl]
    6402:	f8d4 1009 	ldr.w	r1, [r4, #9]
    6406:	f8ca 1004 	str.w	r1, [sl, #4]
    640a:	e7d9      	b.n	63c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    640c:	6862      	ldr	r2, [r4, #4]
    640e:	b922      	cbnz	r2, 641a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    6410:	f240 413d 	movw	r1, #1085	; 0x43d
    6414:	e015      	b.n	6442 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    6416:	6862      	ldr	r2, [r4, #4]
    6418:	b11a      	cbz	r2, 6422 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf2>
    641a:	4651      	mov	r1, sl
    641c:	4620      	mov	r0, r4
    641e:	4790      	blx	r2
    6420:	e7ce      	b.n	63c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    6422:	f240 4147 	movw	r1, #1095	; 0x447
    6426:	e00c      	b.n	6442 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    6428:	480d      	ldr	r0, [pc, #52]	; (6460 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>)
    642a:	6802      	ldr	r2, [r0, #0]
    642c:	b122      	cbz	r2, 6438 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    642e:	6860      	ldr	r0, [r4, #4]
    6430:	b128      	cbz	r0, 643e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    6432:	8800      	ldrh	r0, [r0, #0]
    6434:	4651      	mov	r1, sl
    6436:	4790      	blx	r2
    6438:	2002      	movs	r0, #2
    643a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    643e:	f44f 618a 	mov.w	r1, #1104	; 0x450
    6442:	2010      	movs	r0, #16
    6444:	f7fd ffca 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6448:	f240 416b 	movw	r1, #1131	; 0x46b
    644c:	e7f9      	b.n	6442 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    644e:	2004      	movs	r0, #4
    6450:	e7f3      	b.n	643a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    6452:	0000      	.short	0x0000
    6454:	20001120 	.word	0x20001120
    6458:	200010f4 	.word	0x200010f4
    645c:	20000110 	.word	0x20000110
    6460:	20000114 	.word	0x20000114

00006464 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    6464:	4901      	ldr	r1, [pc, #4]	; (646c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    6466:	7008      	strb	r0, [r1, #0]
    6468:	f000 b96a 	b.w	6740 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c0>
    646c:	20000364 	.word	0x20000364

00006470 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    6470:	4902      	ldr	r1, [pc, #8]	; (647c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    6472:	4801      	ldr	r0, [pc, #4]	; (6478 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    6474:	6008      	str	r0, [r1, #0]
    6476:	4770      	bx	lr
    6478:	0000dfdd 	.word	0x0000dfdd
    647c:	20000110 	.word	0x20000110

00006480 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    6480:	4905      	ldr	r1, [pc, #20]	; (6498 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    6482:	4804      	ldr	r0, [pc, #16]	; (6494 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    6484:	6008      	str	r0, [r1, #0]
    6486:	4906      	ldr	r1, [pc, #24]	; (64a0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    6488:	4804      	ldr	r0, [pc, #16]	; (649c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    648a:	6008      	str	r0, [r1, #0]
    648c:	4906      	ldr	r1, [pc, #24]	; (64a8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    648e:	4805      	ldr	r0, [pc, #20]	; (64a4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    6490:	6008      	str	r0, [r1, #0]
    6492:	4770      	bx	lr
    6494:	0000dfdd 	.word	0x0000dfdd
    6498:	20000110 	.word	0x20000110
    649c:	0000da15 	.word	0x0000da15
    64a0:	20000118 	.word	0x20000118
    64a4:	000064ad 	.word	0x000064ad
    64a8:	20000114 	.word	0x20000114
    64ac:	b538      	push	{r3, r4, r5, lr}
    64ae:	000d      	movs	r5, r1
    64b0:	d014      	beq.n	64dc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x5c>
    64b2:	8028      	strh	r0, [r5, #0]
    64b4:	2100      	movs	r1, #0
    64b6:	7169      	strb	r1, [r5, #5]
    64b8:	f7fe fb88 	bl	4bcc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    64bc:	4604      	mov	r4, r0
    64be:	f006 facf 	bl	ca60 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    64c2:	b170      	cbz	r0, 64e2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x62>
    64c4:	4601      	mov	r1, r0
    64c6:	466a      	mov	r2, sp
    64c8:	4620      	mov	r0, r4
    64ca:	f006 fae7 	bl	ca9c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    64ce:	8068      	strh	r0, [r5, #2]
    64d0:	b150      	cbz	r0, 64e8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    64d2:	28fb      	cmp	r0, #251	; 0xfb
    64d4:	d90b      	bls.n	64ee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x6e>
    64d6:	f240 21c2 	movw	r1, #706	; 0x2c2
    64da:	e033      	b.n	6544 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    64dc:	f240 21b1 	movw	r1, #689	; 0x2b1
    64e0:	e030      	b.n	6544 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    64e2:	f240 21ba 	movw	r1, #698	; 0x2ba
    64e6:	e02d      	b.n	6544 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    64e8:	f240 21bf 	movw	r1, #703	; 0x2bf
    64ec:	e02a      	b.n	6544 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    64ee:	9800      	ldr	r0, [sp, #0]
    64f0:	f007 f9bc 	bl	d86c <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    64f4:	2801      	cmp	r0, #1
    64f6:	d004      	beq.n	6502 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x82>
    64f8:	2802      	cmp	r0, #2
    64fa:	d002      	beq.n	6502 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x82>
    64fc:	f240 21d3 	movw	r1, #723	; 0x2d3
    6500:	e020      	b.n	6544 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6502:	7128      	strb	r0, [r5, #4]
    6504:	68a8      	ldr	r0, [r5, #8]
    6506:	b1a8      	cbz	r0, 6534 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb4>
    6508:	9900      	ldr	r1, [sp, #0]
    650a:	886a      	ldrh	r2, [r5, #2]
    650c:	1cc9      	adds	r1, r1, #3
    650e:	f005 fcc2 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6512:	4620      	mov	r0, r4
    6514:	f006 fa6c 	bl	c9f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    6518:	b178      	cbz	r0, 653a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xba>
    651a:	4620      	mov	r0, r4
    651c:	2100      	movs	r1, #0
    651e:	f006 fb5b 	bl	cbd8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6522:	b168      	cbz	r0, 6540 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc0>
    6524:	4809      	ldr	r0, [pc, #36]	; (654c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xcc>)
    6526:	7cc1      	ldrb	r1, [r0, #19]
    6528:	2900      	cmp	r1, #0
    652a:	d002      	beq.n	6532 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
    652c:	8a81      	ldrh	r1, [r0, #20]
    652e:	1e49      	subs	r1, r1, #1
    6530:	8281      	strh	r1, [r0, #20]
    6532:	bd38      	pop	{r3, r4, r5, pc}
    6534:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    6538:	e004      	b.n	6544 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    653a:	f240 21e1 	movw	r1, #737	; 0x2e1
    653e:	e001      	b.n	6544 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6540:	f240 21e6 	movw	r1, #742	; 0x2e6
    6544:	2010      	movs	r0, #16
    6546:	f7fd ff49 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    654a:	0000      	.short	0x0000
    654c:	200010f4 	.word	0x200010f4
    6550:	b538      	push	{r3, r4, r5, lr}
    6552:	4602      	mov	r2, r0
    6554:	4b11      	ldr	r3, [pc, #68]	; (659c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>)
    6556:	2000      	movs	r0, #0
    6558:	7010      	strb	r0, [r2, #0]
    655a:	6858      	ldr	r0, [r3, #4]
    655c:	7a01      	ldrb	r1, [r0, #8]
    655e:	f88d 1000 	strb.w	r1, [sp]
    6562:	9900      	ldr	r1, [sp, #0]
    6564:	9100      	str	r1, [sp, #0]
    6566:	f89d 5000 	ldrb.w	r5, [sp]
    656a:	2401      	movs	r4, #1
    656c:	2d01      	cmp	r5, #1
    656e:	d006      	beq.n	657e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfe>
    6570:	f3ef 8110 	mrs	r1, PRIMASK
    6574:	b672      	cpsid	i
    6576:	6805      	ldr	r5, [r0, #0]
    6578:	605d      	str	r5, [r3, #4]
    657a:	b111      	cbz	r1, 6582 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x102>
    657c:	e002      	b.n	6584 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x104>
    657e:	2000      	movs	r0, #0
    6580:	bd38      	pop	{r3, r4, r5, pc}
    6582:	b662      	cpsie	i
    6584:	7a01      	ldrb	r1, [r0, #8]
    6586:	f88d 1000 	strb.w	r1, [sp]
    658a:	9900      	ldr	r1, [sp, #0]
    658c:	9100      	str	r1, [sp, #0]
    658e:	f89d 3000 	ldrb.w	r3, [sp]
    6592:	2b00      	cmp	r3, #0
    6594:	d1f4      	bne.n	6580 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x100>
    6596:	7014      	strb	r4, [r2, #0]
    6598:	bd38      	pop	{r3, r4, r5, pc}
    659a:	0000      	.short	0x0000
    659c:	20001120 	.word	0x20001120
    65a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    65a4:	b086      	sub	sp, #24
    65a6:	000f      	movs	r7, r1
    65a8:	4604      	mov	r4, r0
    65aa:	4691      	mov	r9, r2
    65ac:	d013      	beq.n	65d6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    65ae:	6878      	ldr	r0, [r7, #4]
    65b0:	b188      	cbz	r0, 65d6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    65b2:	f100 0580 	add.w	r5, r0, #128	; 0x80
    65b6:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    65ba:	8806      	ldrh	r6, [r0, #0]
    65bc:	4610      	mov	r0, r2
    65be:	f04f 0800 	mov.w	r8, #0
    65c2:	2a12      	cmp	r2, #18
    65c4:	d078      	beq.n	66b8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x238>
    65c6:	dc09      	bgt.n	65dc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    65c8:	f04f 0a01 	mov.w	sl, #1
    65cc:	2803      	cmp	r0, #3
    65ce:	d00a      	beq.n	65e6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x166>
    65d0:	2a0d      	cmp	r2, #13
    65d2:	d170      	bne.n	66b6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    65d4:	e01a      	b.n	660c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18c>
    65d6:	f240 210b 	movw	r1, #523	; 0x20b
    65da:	e0ac      	b.n	6736 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    65dc:	281e      	cmp	r0, #30
    65de:	d04c      	beq.n	667a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1fa>
    65e0:	2a1f      	cmp	r2, #31
    65e2:	d17f      	bne.n	66e4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x264>
    65e4:	e026      	b.n	6634 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1b4>
    65e6:	2d00      	cmp	r5, #0
    65e8:	d00f      	beq.n	660a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18a>
    65ea:	f884 8001 	strb.w	r8, [r4, #1]
    65ee:	f884 a000 	strb.w	sl, [r4]
    65f2:	f884 8004 	strb.w	r8, [r4, #4]
    65f6:	f8a4 6005 	strh.w	r6, [r4, #5]
    65fa:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
    65fe:	71e0      	strb	r0, [r4, #7]
    6600:	f835 0f60 	ldrh.w	r0, [r5, #96]!
    6604:	8120      	strh	r0, [r4, #8]
    6606:	8868      	ldrh	r0, [r5, #2]
    6608:	8160      	strh	r0, [r4, #10]
    660a:	e075      	b.n	66f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    660c:	4630      	mov	r0, r6
    660e:	f7fe faf3 	bl	4bf8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6612:	b160      	cbz	r0, 662e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1ae>
    6614:	f884 8001 	strb.w	r8, [r4, #1]
    6618:	220d      	movs	r2, #13
    661a:	7022      	strb	r2, [r4, #0]
    661c:	80e6      	strh	r6, [r4, #6]
    661e:	f8a4 a008 	strh.w	sl, [r4, #8]
    6622:	4641      	mov	r1, r8
    6624:	f884 a004 	strb.w	sl, [r4, #4]
    6628:	f006 fad6 	bl	cbd8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    662c:	e064      	b.n	66f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    662e:	f240 1153 	movw	r1, #339	; 0x153
    6632:	e080      	b.n	6736 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    6634:	f7ff fde4 	bl	6200 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    6638:	b3e8      	cbz	r0, 66b6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    663a:	f887 8008 	strb.w	r8, [r7, #8]
    663e:	4630      	mov	r0, r6
    6640:	f8ad 6000 	strh.w	r6, [sp]
    6644:	a902      	add	r1, sp, #8
    6646:	f006 fe27 	bl	d298 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    664a:	b110      	cbz	r0, 6652 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d2>
    664c:	f240 1125 	movw	r1, #293	; 0x125
    6650:	e071      	b.n	6736 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    6652:	9803      	ldr	r0, [sp, #12]
    6654:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    6658:	f88d 1002 	strb.w	r1, [sp, #2]
    665c:	7841      	ldrb	r1, [r0, #1]
    665e:	f88d 1003 	strb.w	r1, [sp, #3]
    6662:	8840      	ldrh	r0, [r0, #2]
    6664:	f8ad 0004 	strh.w	r0, [sp, #4]
    6668:	2102      	movs	r1, #2
    666a:	4668      	mov	r0, sp
    666c:	f009 fa35 	bl	fada <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6670:	2800      	cmp	r0, #0
    6672:	d034      	beq.n	66de <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x25e>
    6674:	f240 113b 	movw	r1, #315	; 0x13b
    6678:	e05d      	b.n	6736 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    667a:	f7ff fdb7 	bl	61ec <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    667e:	b1d0      	cbz	r0, 66b6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    6680:	f887 8008 	strb.w	r8, [r7, #8]
    6684:	a903      	add	r1, sp, #12
    6686:	4630      	mov	r0, r6
    6688:	f009 f88b 	bl	f7a2 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    668c:	b110      	cbz	r0, 6694 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x214>
    668e:	f44f 71a1 	mov.w	r1, #322	; 0x142
    6692:	e050      	b.n	6736 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    6694:	f8ad 6000 	strh.w	r6, [sp]
    6698:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    669c:	f8ad 0002 	strh.w	r0, [sp, #2]
    66a0:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    66a4:	f8ad 0004 	strh.w	r0, [sp, #4]
    66a8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    66ac:	f8ad 0006 	strh.w	r0, [sp, #6]
    66b0:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    66b4:	e001      	b.n	66ba <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x23a>
    66b6:	e015      	b.n	66e4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x264>
    66b8:	e009      	b.n	66ce <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24e>
    66ba:	f8ad 0008 	strh.w	r0, [sp, #8]
    66be:	4668      	mov	r0, sp
    66c0:	f009 f8a8 	bl	f814 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    66c4:	2800      	cmp	r0, #0
    66c6:	d00a      	beq.n	66de <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x25e>
    66c8:	f240 114b 	movw	r1, #331	; 0x14b
    66cc:	e033      	b.n	6736 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    66ce:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    66d2:	f000 0001 	and.w	r0, r0, #1
    66d6:	f7ff fd7d 	bl	61d4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    66da:	b130      	cbz	r0, 66ea <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26a>
    66dc:	2000      	movs	r0, #0
    66de:	b006      	add	sp, #24
    66e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    66e4:	f1b9 0f0a 	cmp.w	r9, #10
    66e8:	d008      	beq.n	66fc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x27c>
    66ea:	4814      	ldr	r0, [pc, #80]	; (673c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2bc>)
    66ec:	6803      	ldr	r3, [r0, #0]
    66ee:	b11b      	cbz	r3, 66f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    66f0:	6878      	ldr	r0, [r7, #4]
    66f2:	464a      	mov	r2, r9
    66f4:	4621      	mov	r1, r4
    66f6:	4798      	blx	r3
    66f8:	2001      	movs	r0, #1
    66fa:	e7f0      	b.n	66de <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x25e>
    66fc:	4630      	mov	r0, r6
    66fe:	f7fe fa65 	bl	4bcc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6702:	f006 f8fa 	bl	c8fa <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6706:	b1a0      	cbz	r0, 6732 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b2>
    6708:	4630      	mov	r0, r6
    670a:	f006 fcf5 	bl	d0f8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    670e:	2100      	movs	r1, #0
    6710:	4630      	mov	r0, r6
    6712:	f7fe f8e5 	bl	48e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6716:	2d00      	cmp	r5, #0
    6718:	d0ee      	beq.n	66f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    671a:	f884 8001 	strb.w	r8, [r4, #1]
    671e:	210a      	movs	r1, #10
    6720:	7021      	strb	r1, [r4, #0]
    6722:	f884 8004 	strb.w	r8, [r4, #4]
    6726:	f8a4 6005 	strh.w	r6, [r4, #5]
    672a:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
    672e:	71e0      	strb	r0, [r4, #7]
    6730:	e7e2      	b.n	66f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    6732:	f44f 7113 	mov.w	r1, #588	; 0x24c
    6736:	2010      	movs	r0, #16
    6738:	f7fd fe50 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    673c:	20000118 	.word	0x20000118
    6740:	4809      	ldr	r0, [pc, #36]	; (6768 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2e8>)
    6742:	b510      	push	{r4, lr}
    6744:	2100      	movs	r1, #0
    6746:	6141      	str	r1, [r0, #20]
    6748:	6181      	str	r1, [r0, #24]
    674a:	61c1      	str	r1, [r0, #28]
    674c:	6201      	str	r1, [r0, #32]
    674e:	2212      	movs	r2, #18
    6750:	f005 fc1b 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6754:	4804      	ldr	r0, [pc, #16]	; (6768 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2e8>)
    6756:	3018      	adds	r0, #24
    6758:	1f02      	subs	r2, r0, #4
    675a:	1f01      	subs	r1, r0, #4
    675c:	2301      	movs	r3, #1
    675e:	6050      	str	r0, [r2, #4]
    6760:	730b      	strb	r3, [r1, #12]
    6762:	6010      	str	r0, [r2, #0]
    6764:	bd10      	pop	{r4, pc}
    6766:	0000      	.short	0x0000
    6768:	2000110c 	.word	0x2000110c

0000676c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    676c:	b5f0      	push	{r4, r5, r6, r7, lr}
    676e:	f06f 021f 	mvn.w	r2, #31
    6772:	0c01      	lsrs	r1, r0, #16
    6774:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    6778:	251f      	movs	r5, #31
    677a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    677e:	3854      	subs	r0, #84	; 0x54
    6780:	d00d      	beq.n	679e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6782:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6786:	3855      	subs	r0, #85	; 0x55
    6788:	d009      	beq.n	679e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    678a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    678e:	38aa      	subs	r0, #170	; 0xaa
    6790:	d005      	beq.n	679e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6792:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    6796:	38aa      	subs	r0, #170	; 0xaa
    6798:	d001      	beq.n	679e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    679a:	2001      	movs	r0, #1
    679c:	e000      	b.n	67a0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    679e:	2000      	movs	r0, #0
    67a0:	2200      	movs	r2, #0
    67a2:	4613      	mov	r3, r2
    67a4:	ea4f 0402 	mov.w	r4, r2
    67a8:	ea82 0701 	eor.w	r7, r2, r1
    67ac:	43ff      	mvns	r7, r7
    67ae:	431f      	orrs	r7, r3
    67b0:	1c7f      	adds	r7, r7, #1
    67b2:	d00f      	beq.n	67d4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    67b4:	f006 0701 	and.w	r7, r6, #1
    67b8:	0852      	lsrs	r2, r2, #1
    67ba:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    67be:	f005 0701 	and.w	r7, r5, #1
    67c2:	085b      	lsrs	r3, r3, #1
    67c4:	0876      	lsrs	r6, r6, #1
    67c6:	086d      	lsrs	r5, r5, #1
    67c8:	1c64      	adds	r4, r4, #1
    67ca:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    67ce:	2c16      	cmp	r4, #22
    67d0:	d3ea      	bcc.n	67a8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    67d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67d4:	2000      	movs	r0, #0
    67d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000067d8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    67d8:	b510      	push	{r4, lr}
    67da:	4804      	ldr	r0, [pc, #16]	; (67ec <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    67dc:	f007 facc 	bl	dd78 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    67e0:	4802      	ldr	r0, [pc, #8]	; (67ec <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    67e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67e6:	3008      	adds	r0, #8
    67e8:	f007 bac6 	b.w	dd78 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    67ec:	2000011c 	.word	0x2000011c

000067f0 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    67f0:	4801      	ldr	r0, [pc, #4]	; (67f8 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    67f2:	f000 b809 	b.w	6808 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    67f6:	0000      	.short	0x0000
    67f8:	2000011c 	.word	0x2000011c

000067fc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    67fc:	4801      	ldr	r0, [pc, #4]	; (6804 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    67fe:	f000 b803 	b.w	6808 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    6802:	0000      	.short	0x0000
    6804:	20000124 	.word	0x20000124
    6808:	b510      	push	{r4, lr}
    680a:	e9d0 2100 	ldrd	r2, r1, [r0]
    680e:	4b09      	ldr	r3, [pc, #36]	; (6834 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    6810:	4c09      	ldr	r4, [pc, #36]	; (6838 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    6812:	4353      	muls	r3, r2
    6814:	4354      	muls	r4, r2
    6816:	4051      	eors	r1, r2
    6818:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    681c:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    6820:	ea4f 41f1 	mov.w	r1, r1, ror #19
    6824:	e9c0 2100 	strd	r2, r1, [r0]
    6828:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    682c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6830:	4618      	mov	r0, r3
    6832:	bd10      	pop	{r4, pc}
    6834:	c6ef3760 	.word	0xc6ef3760
    6838:	9e3779bb 	.word	0x9e3779bb

0000683c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    683c:	b510      	push	{r4, lr}
    683e:	6840      	ldr	r0, [r0, #4]
    6840:	2200      	movs	r2, #0
    6842:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    6846:	3080      	adds	r0, #128	; 0x80
    6848:	1d09      	adds	r1, r1, #4
    684a:	07db      	lsls	r3, r3, #31
    684c:	d001      	beq.n	6852 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    684e:	2001      	movs	r0, #1
    6850:	bd10      	pop	{r4, pc}
    6852:	790c      	ldrb	r4, [r1, #4]
    6854:	680b      	ldr	r3, [r1, #0]
    6856:	4909      	ldr	r1, [pc, #36]	; (687c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>)
    6858:	400b      	ands	r3, r1
    685a:	f004 0107 	and.w	r1, r4, #7
    685e:	6643      	str	r3, [r0, #100]	; 0x64
    6860:	6681      	str	r1, [r0, #104]	; 0x68
    6862:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    6866:	f890 1052 	ldrb.w	r1, [r0, #82]	; 0x52
    686a:	1c49      	adds	r1, r1, #1
    686c:	f880 1052 	strb.w	r1, [r0, #82]	; 0x52
    6870:	6841      	ldr	r1, [r0, #4]
    6872:	f041 0101 	orr.w	r1, r1, #1
    6876:	6041      	str	r1, [r0, #4]
    6878:	2000      	movs	r0, #0
    687a:	bd10      	pop	{r4, pc}
    687c:	3304492f 	.word	0x3304492f

00006880 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    6880:	b510      	push	{r4, lr}
    6882:	1d04      	adds	r4, r0, #4
    6884:	f003 fe48 	bl	a518 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6888:	4a03      	ldr	r2, [pc, #12]	; (6898 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    688a:	f001 0107 	and.w	r1, r1, #7
    688e:	4010      	ands	r0, r2
    6890:	6020      	str	r0, [r4, #0]
    6892:	6061      	str	r1, [r4, #4]
    6894:	bd10      	pop	{r4, pc}
    6896:	0000      	.short	0x0000
    6898:	3304492f 	.word	0x3304492f

0000689c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    689c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68a0:	4605      	mov	r5, r0
    68a2:	7803      	ldrb	r3, [r0, #0]
    68a4:	6840      	ldr	r0, [r0, #4]
    68a6:	1d0f      	adds	r7, r1, #4
    68a8:	f100 0680 	add.w	r6, r0, #128	; 0x80
    68ac:	f500 74a2 	add.w	r4, r0, #324	; 0x144
    68b0:	4680      	mov	r8, r0
    68b2:	f04f 0900 	mov.w	r9, #0
    68b6:	7d72      	ldrb	r2, [r6, #21]
    68b8:	2107      	movs	r1, #7
    68ba:	4630      	mov	r0, r6
    68bc:	f006 fd16 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68c0:	b300      	cbz	r0, 6904 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x68>
    68c2:	6838      	ldr	r0, [r7, #0]
    68c4:	4a10      	ldr	r2, [pc, #64]	; (6908 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x6c>)
    68c6:	7939      	ldrb	r1, [r7, #4]
    68c8:	4010      	ands	r0, r2
    68ca:	6670      	str	r0, [r6, #100]	; 0x64
    68cc:	f001 0107 	and.w	r1, r1, #7
    68d0:	66b1      	str	r1, [r6, #104]	; 0x68
    68d2:	f886 904e 	strb.w	r9, [r6, #78]	; 0x4e
    68d6:	f886 9015 	strb.w	r9, [r6, #21]
    68da:	f8b8 1000 	ldrh.w	r1, [r8]
    68de:	f8a4 106c 	strh.w	r1, [r4, #108]	; 0x6c
    68e2:	f884 906a 	strb.w	r9, [r4, #106]	; 0x6a
    68e6:	6839      	ldr	r1, [r7, #0]
    68e8:	f8c4 106e 	str.w	r1, [r4, #110]	; 0x6e
    68ec:	6879      	ldr	r1, [r7, #4]
    68ee:	f8c4 1072 	str.w	r1, [r4, #114]	; 0x72
    68f2:	2207      	movs	r2, #7
    68f4:	f104 0060 	add.w	r0, r4, #96	; 0x60
    68f8:	6869      	ldr	r1, [r5, #4]
    68fa:	f7ff fce1 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    68fe:	2000      	movs	r0, #0
    6900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6904:	2001      	movs	r0, #1
    6906:	e7fb      	b.n	6900 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
    6908:	3304492f 	.word	0x3304492f

0000690c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    690c:	b570      	push	{r4, r5, r6, lr}
    690e:	1d0d      	adds	r5, r1, #4
    6910:	6844      	ldr	r4, [r0, #4]
    6912:	f003 fe01 	bl	a518 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6916:	4a06      	ldr	r2, [pc, #24]	; (6930 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    6918:	4010      	ands	r0, r2
    691a:	f001 0207 	and.w	r2, r1, #7
    691e:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
    6922:	4001      	ands	r1, r0
    6924:	f361 0007 	bfi	r0, r1, #0, #8
    6928:	6028      	str	r0, [r5, #0]
    692a:	606a      	str	r2, [r5, #4]
    692c:	bd70      	pop	{r4, r5, r6, pc}
    692e:	0000      	.short	0x0000
    6930:	3304492f 	.word	0x3304492f

00006934 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    6934:	4a04      	ldr	r2, [pc, #16]	; (6948 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    6936:	6812      	ldr	r2, [r2, #0]
    6938:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    693c:	434b      	muls	r3, r1
    693e:	4342      	muls	r2, r0
    6940:	eb03 3022 	add.w	r0, r3, r2, asr #12
    6944:	4770      	bx	lr
    6946:	0000      	.short	0x0000
    6948:	2000012c 	.word	0x2000012c

0000694c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    694c:	b570      	push	{r4, r5, r6, lr}
    694e:	4604      	mov	r4, r0
    6950:	7c00      	ldrb	r0, [r0, #16]
    6952:	b300      	cbz	r0, 6996 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6954:	2802      	cmp	r0, #2
    6956:	d01e      	beq.n	6996 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6958:	f05f 0001 	movs.w	r0, #1
    695c:	f104 0151 	add.w	r1, r4, #81	; 0x51
    6960:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    6964:	460d      	mov	r5, r1
    6966:	b1c0      	cbz	r0, 699a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    6968:	7de0      	ldrb	r0, [r4, #23]
    696a:	b1f0      	cbz	r0, 69aa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    696c:	f8d4 0011 	ldr.w	r0, [r4, #17]
    6970:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    6974:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    6978:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    697c:	7c20      	ldrb	r0, [r4, #16]
    697e:	f007 fab5 	bl	deec <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xe0>
    6982:	7620      	strb	r0, [r4, #24]
    6984:	2008      	movs	r0, #8
    6986:	7660      	strb	r0, [r4, #25]
    6988:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    698c:	4629      	mov	r1, r5
    698e:	f007 fa99 	bl	dec4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xb8>
    6992:	b9a8      	cbnz	r0, 69c0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    6994:	e00e      	b.n	69b4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    6996:	2000      	movs	r0, #0
    6998:	e7e0      	b.n	695c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    699a:	2000      	movs	r0, #0
    699c:	f7fe fbba 	bl	5114 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    69a0:	2800      	cmp	r0, #0
    69a2:	d1eb      	bne.n	697c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    69a4:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
    69a8:	e001      	b.n	69ae <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    69aa:	f240 41bc 	movw	r1, #1212	; 0x4bc
    69ae:	202d      	movs	r0, #45	; 0x2d
    69b0:	f7fd fd14 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69b4:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    69b8:	4629      	mov	r1, r5
    69ba:	f007 fa8c 	bl	ded6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xca>
    69be:	b100      	cbz	r0, 69c2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    69c0:	2001      	movs	r0, #1
    69c2:	76a0      	strb	r0, [r4, #26]
    69c4:	7e20      	ldrb	r0, [r4, #24]
    69c6:	b130      	cbz	r0, 69d6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    69c8:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    69cc:	f104 0158 	add.w	r1, r4, #88	; 0x58
    69d0:	f006 fc2e 	bl	d230 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    69d4:	7660      	strb	r0, [r4, #25]
    69d6:	f7ff f9b3 	bl	5d40 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    69da:	490c      	ldr	r1, [pc, #48]	; (6a0c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    69dc:	fba0 2301 	umull	r2, r3, r0, r1
    69e0:	f104 0048 	add.w	r0, r4, #72	; 0x48
    69e4:	f007 fc4c 	bl	e280 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    69e8:	2100      	movs	r1, #0
    69ea:	4620      	mov	r0, r4
    69ec:	f007 fbf6 	bl	e1dc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4e>
    69f0:	2000      	movs	r0, #0
    69f2:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    69f6:	78a0      	ldrb	r0, [r4, #2]
    69f8:	0740      	lsls	r0, r0, #29
    69fa:	d505      	bpl.n	6a08 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    69fc:	4620      	mov	r0, r4
    69fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6a02:	2100      	movs	r1, #0
    6a04:	f000 bda8 	b.w	7558 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x558>
    6a08:	bd70      	pop	{r4, r5, r6, pc}
    6a0a:	0000      	.short	0x0000
    6a0c:	000f4240 	.word	0x000f4240

00006a10 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6a10:	b530      	push	{r4, r5, lr}
    6a12:	460c      	mov	r4, r1
    6a14:	b08d      	sub	sp, #52	; 0x34
    6a16:	4605      	mov	r5, r0
    6a18:	4601      	mov	r1, r0
    6a1a:	2224      	movs	r2, #36	; 0x24
    6a1c:	a802      	add	r0, sp, #8
    6a1e:	f005 fa3a 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6a22:	a80b      	add	r0, sp, #44	; 0x2c
    6a24:	f007 fc89 	bl	e33a <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    6a28:	7aa0      	ldrb	r0, [r4, #10]
    6a2a:	f88d 0018 	strb.w	r0, [sp, #24]
    6a2e:	7820      	ldrb	r0, [r4, #0]
    6a30:	f88d 0008 	strb.w	r0, [sp, #8]
    6a34:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6a38:	f8ad 0000 	strh.w	r0, [sp]
    6a3c:	f89d 0000 	ldrb.w	r0, [sp]
    6a40:	f000 0101 	and.w	r1, r0, #1
    6a44:	f3c0 0240 	ubfx	r2, r0, #1, #1
    6a48:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    6a4c:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6a50:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    6a54:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    6a58:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    6a5c:	f3c0 1200 	ubfx	r2, r0, #4, #1
    6a60:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6a64:	f3c0 1240 	ubfx	r2, r0, #5, #1
    6a68:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    6a6c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6a70:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    6a74:	f8ad 000a 	strh.w	r0, [sp, #10]
    6a78:	7d20      	ldrb	r0, [r4, #20]
    6a7a:	2801      	cmp	r0, #1
    6a7c:	d006      	beq.n	6a8c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6a7e:	2802      	cmp	r0, #2
    6a80:	d004      	beq.n	6a8c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6a82:	f240 21e2 	movw	r1, #738	; 0x2e2
    6a86:	2006      	movs	r0, #6
    6a88:	f7fd fca8 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a8c:	f88d 000c 	strb.w	r0, [sp, #12]
    6a90:	7a61      	ldrb	r1, [r4, #9]
    6a92:	a80b      	add	r0, sp, #44	; 0x2c
    6a94:	f007 fc38 	bl	e308 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    6a98:	7d20      	ldrb	r0, [r4, #20]
    6a9a:	2101      	movs	r1, #1
    6a9c:	2802      	cmp	r0, #2
    6a9e:	d102      	bne.n	6aa6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    6aa0:	7d60      	ldrb	r0, [r4, #21]
    6aa2:	1c40      	adds	r0, r0, #1
    6aa4:	b2c1      	uxtb	r1, r0
    6aa6:	7ea0      	ldrb	r0, [r4, #26]
    6aa8:	1c40      	adds	r0, r0, #1
    6aaa:	b2c2      	uxtb	r2, r0
    6aac:	a80b      	add	r0, sp, #44	; 0x2c
    6aae:	f007 fbf2 	bl	e296 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    6ab2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    6ab6:	0700      	lsls	r0, r0, #28
    6ab8:	d501      	bpl.n	6abe <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    6aba:	2000      	movs	r0, #0
    6abc:	e020      	b.n	6b00 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    6abe:	a80b      	add	r0, sp, #44	; 0x2c
    6ac0:	f007 fbfb 	bl	e2ba <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6ac4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    6ac8:	2228      	movs	r2, #40	; 0x28
    6aca:	f000 fde9 	bl	76a0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    6ace:	f240 2171 	movw	r1, #625	; 0x271
    6ad2:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    6ad6:	fbb0 f0f1 	udiv	r0, r0, r1
    6ada:	4348      	muls	r0, r1
    6adc:	f8d4 1002 	ldr.w	r1, [r4, #2]
    6ae0:	f240 2371 	movw	r3, #625	; 0x271
    6ae4:	0a0a      	lsrs	r2, r1, #8
    6ae6:	f240 2171 	movw	r1, #625	; 0x271
    6aea:	434a      	muls	r2, r1
    6aec:	f8d4 1005 	ldr.w	r1, [r4, #5]
    6af0:	0a09      	lsrs	r1, r1, #8
    6af2:	4359      	muls	r1, r3
    6af4:	4290      	cmp	r0, r2
    6af6:	d801      	bhi.n	6afc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    6af8:	9204      	str	r2, [sp, #16]
    6afa:	e004      	b.n	6b06 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6afc:	4288      	cmp	r0, r1
    6afe:	d801      	bhi.n	6b04 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    6b00:	9004      	str	r0, [sp, #16]
    6b02:	e000      	b.n	6b06 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6b04:	9104      	str	r1, [sp, #16]
    6b06:	7ca0      	ldrb	r0, [r4, #18]
    6b08:	f88d 0017 	strb.w	r0, [sp, #23]
    6b0c:	7e20      	ldrb	r0, [r4, #24]
    6b0e:	2801      	cmp	r0, #1
    6b10:	d000      	beq.n	6b14 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    6b12:	2000      	movs	r0, #0
    6b14:	f88d 0014 	strb.w	r0, [sp, #20]
    6b18:	6b68      	ldr	r0, [r5, #52]	; 0x34
    6b1a:	f006 f9f5 	bl	cf08 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    6b1e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    6b20:	f006 fa96 	bl	d050 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    6b24:	2224      	movs	r2, #36	; 0x24
    6b26:	a902      	add	r1, sp, #8
    6b28:	4628      	mov	r0, r5
    6b2a:	f005 f9b4 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6b2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6b30:	62a8      	str	r0, [r5, #40]	; 0x28
    6b32:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    6b36:	85a8      	strh	r0, [r5, #44]	; 0x2c
    6b38:	7ae0      	ldrb	r0, [r4, #11]
    6b3a:	b168      	cbz	r0, 6b58 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    6b3c:	2802      	cmp	r0, #2
    6b3e:	d00b      	beq.n	6b58 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    6b40:	f05f 0001 	movs.w	r0, #1
    6b44:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    6b48:	68e0      	ldr	r0, [r4, #12]
    6b4a:	65a8      	str	r0, [r5, #88]	; 0x58
    6b4c:	8a20      	ldrh	r0, [r4, #16]
    6b4e:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    6b52:	b00d      	add	sp, #52	; 0x34
    6b54:	2000      	movs	r0, #0
    6b56:	bd30      	pop	{r4, r5, pc}
    6b58:	2000      	movs	r0, #0
    6b5a:	e7f3      	b.n	6b44 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00006b5c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    6b5c:	4a0a      	ldr	r2, [pc, #40]	; (6b88 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    6b5e:	b510      	push	{r4, lr}
    6b60:	2100      	movs	r1, #0
    6b62:	7011      	strb	r1, [r2, #0]
    6b64:	4c09      	ldr	r4, [pc, #36]	; (6b8c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    6b66:	6060      	str	r0, [r4, #4]
    6b68:	f000 f822 	bl	6bb0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    6b6c:	b110      	cbz	r0, 6b74 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    6b6e:	f44f 714b 	mov.w	r1, #812	; 0x32c
    6b72:	e004      	b.n	6b7e <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    6b74:	68a0      	ldr	r0, [r4, #8]
    6b76:	2800      	cmp	r0, #0
    6b78:	d104      	bne.n	6b84 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    6b7a:	f240 312f 	movw	r1, #815	; 0x32f
    6b7e:	202d      	movs	r0, #45	; 0x2d
    6b80:	f7fd fc2c 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b84:	bd10      	pop	{r4, pc}
    6b86:	0000      	.short	0x0000
    6b88:	20001130 	.word	0x20001130
    6b8c:	20000130 	.word	0x20000130

00006b90 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    6b90:	4902      	ldr	r1, [pc, #8]	; (6b9c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    6b92:	4801      	ldr	r0, [pc, #4]	; (6b98 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    6b94:	6088      	str	r0, [r1, #8]
    6b96:	4770      	bx	lr
    6b98:	00007688 	.word	0x00007688
    6b9c:	20000130 	.word	0x20000130

00006ba0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    6ba0:	4902      	ldr	r1, [pc, #8]	; (6bac <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    6ba2:	6008      	str	r0, [r1, #0]
    6ba4:	6889      	ldr	r1, [r1, #8]
    6ba6:	6809      	ldr	r1, [r1, #0]
    6ba8:	4708      	bx	r1
    6baa:	0000      	.short	0x0000
    6bac:	20000130 	.word	0x20000130

00006bb0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    6bb0:	4808      	ldr	r0, [pc, #32]	; (6bd4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    6bb2:	b510      	push	{r4, lr}
    6bb4:	7800      	ldrb	r0, [r0, #0]
    6bb6:	b110      	cbz	r0, 6bbe <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    6bb8:	240c      	movs	r4, #12
    6bba:	4620      	mov	r0, r4
    6bbc:	bd10      	pop	{r4, pc}
    6bbe:	2400      	movs	r4, #0
    6bc0:	2218      	movs	r2, #24
    6bc2:	4621      	mov	r1, r4
    6bc4:	4803      	ldr	r0, [pc, #12]	; (6bd4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    6bc6:	f005 f9e0 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6bca:	f003 fec7 	bl	a95c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6bce:	f003 fceb 	bl	a5a8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6bd2:	e7f2      	b.n	6bba <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    6bd4:	20001130 	.word	0x20001130

00006bd8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    6bd8:	4904      	ldr	r1, [pc, #16]	; (6bec <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    6bda:	b510      	push	{r4, lr}
    6bdc:	7809      	ldrb	r1, [r1, #0]
    6bde:	2901      	cmp	r1, #1
    6be0:	d101      	bne.n	6be6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    6be2:	f000 fb85 	bl	72f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f0>
    6be6:	2000      	movs	r0, #0
    6be8:	bd10      	pop	{r4, pc}
    6bea:	0000      	.short	0x0000
    6bec:	20001130 	.word	0x20001130

00006bf0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    6bf0:	4902      	ldr	r1, [pc, #8]	; (6bfc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    6bf2:	4801      	ldr	r0, [pc, #4]	; (6bf8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    6bf4:	6008      	str	r0, [r1, #0]
    6bf6:	4770      	bx	lr
    6bf8:	00007421 	.word	0x00007421
    6bfc:	2000013c 	.word	0x2000013c
    6c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c04:	000f      	movs	r7, r1
    6c06:	4604      	mov	r4, r0
    6c08:	d023      	beq.n	6c52 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    6c0a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6c0e:	4605      	mov	r5, r0
    6c10:	f007 fb7c 	bl	e30c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6c14:	b9b0      	cbnz	r0, 6c44 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    6c16:	78a0      	ldrb	r0, [r4, #2]
    6c18:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6c1c:	b350      	cbz	r0, 6c74 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    6c1e:	4628      	mov	r0, r5
    6c20:	f007 fb4b 	bl	e2ba <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6c24:	4606      	mov	r6, r0
    6c26:	4628      	mov	r0, r5
    6c28:	f007 fb70 	bl	e30c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6c2c:	1a30      	subs	r0, r6, r0
    6c2e:	b2c0      	uxtb	r0, r0
    6c30:	f007 fbc1 	bl	e3b6 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    6c34:	4601      	mov	r1, r0
    6c36:	4835      	ldr	r0, [pc, #212]	; (6d0c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    6c38:	6842      	ldr	r2, [r0, #4]
    6c3a:	4411      	add	r1, r2
    6c3c:	6041      	str	r1, [r0, #4]
    6c3e:	4628      	mov	r0, r5
    6c40:	f007 fb82 	bl	e348 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6c44:	4628      	mov	r0, r5
    6c46:	f007 fb44 	bl	e2d2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6c4a:	4601      	mov	r1, r0
    6c4c:	4620      	mov	r0, r4
    6c4e:	f007 fb01 	bl	e254 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    6c52:	4d2f      	ldr	r5, [pc, #188]	; (6d10 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    6c54:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    6c58:	2100      	movs	r1, #0
    6c5a:	6868      	ldr	r0, [r5, #4]
    6c5c:	8001      	strh	r1, [r0, #0]
    6c5e:	f007 fa9b 	bl	e198 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6c62:	8860      	ldrh	r0, [r4, #2]
    6c64:	2813      	cmp	r0, #19
    6c66:	d013      	beq.n	6c90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    6c68:	dc09      	bgt.n	6c7e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    6c6a:	2810      	cmp	r0, #16
    6c6c:	d036      	beq.n	6cdc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    6c6e:	2812      	cmp	r0, #18
    6c70:	d109      	bne.n	6c86 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    6c72:	e031      	b.n	6cd8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    6c74:	4620      	mov	r0, r4
    6c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6c7a:	f000 bb39 	b.w	72f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f0>
    6c7e:	2815      	cmp	r0, #21
    6c80:	d00f      	beq.n	6ca2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6c82:	281d      	cmp	r0, #29
    6c84:	d00d      	beq.n	6ca2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6c86:	f240 6172 	movw	r1, #1650	; 0x672
    6c8a:	202d      	movs	r0, #45	; 0x2d
    6c8c:	f7fd fba6 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c90:	2100      	movs	r1, #0
    6c92:	6868      	ldr	r0, [r5, #4]
    6c94:	f006 fd43 	bl	d71e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    6c98:	2101      	movs	r1, #1
    6c9a:	6868      	ldr	r0, [r5, #4]
    6c9c:	f007 fa7c 	bl	e198 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6ca0:	e020      	b.n	6ce4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6ca2:	2101      	movs	r1, #1
    6ca4:	6868      	ldr	r0, [r5, #4]
    6ca6:	f006 fd3a 	bl	d71e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    6caa:	2101      	movs	r1, #1
    6cac:	6868      	ldr	r0, [r5, #4]
    6cae:	f007 fa73 	bl	e198 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6cb2:	b136      	cbz	r6, 6cc2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    6cb4:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    6cb8:	6868      	ldr	r0, [r5, #4]
    6cba:	f006 fd4b 	bl	d754 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    6cbe:	2101      	movs	r1, #1
    6cc0:	e006      	b.n	6cd0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    6cc2:	f104 0158 	add.w	r1, r4, #88	; 0x58
    6cc6:	6868      	ldr	r0, [r5, #4]
    6cc8:	f006 fd44 	bl	d754 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    6ccc:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    6cd0:	6868      	ldr	r0, [r5, #4]
    6cd2:	f006 fd45 	bl	d760 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    6cd6:	e005      	b.n	6ce4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6cd8:	2106      	movs	r1, #6
    6cda:	e000      	b.n	6cde <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    6cdc:	2102      	movs	r1, #2
    6cde:	6868      	ldr	r0, [r5, #4]
    6ce0:	f006 fd1d 	bl	d71e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    6ce4:	4620      	mov	r0, r4
    6ce6:	f000 fcad 	bl	7644 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x644>
    6cea:	8860      	ldrh	r0, [r4, #2]
    6cec:	281d      	cmp	r0, #29
    6cee:	d007      	beq.n	6d00 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    6cf0:	2815      	cmp	r0, #21
    6cf2:	d005      	beq.n	6d00 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    6cf4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    6cf8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6cfa:	6868      	ldr	r0, [r5, #4]
    6cfc:	f006 fcff 	bl	d6fe <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    6d00:	4639      	mov	r1, r7
    6d02:	4620      	mov	r0, r4
    6d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6d08:	f000 b9f0 	b.w	70ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>
    6d0c:	20001130 	.word	0x20001130
    6d10:	20000130 	.word	0x20000130
    6d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d18:	4d2e      	ldr	r5, [pc, #184]	; (6dd4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    6d1a:	4607      	mov	r7, r0
    6d1c:	7828      	ldrb	r0, [r5, #0]
    6d1e:	2802      	cmp	r0, #2
    6d20:	d005      	beq.n	6d2e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6d22:	7828      	ldrb	r0, [r5, #0]
    6d24:	2803      	cmp	r0, #3
    6d26:	d002      	beq.n	6d2e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6d28:	f640 5129 	movw	r1, #3369	; 0xd29
    6d2c:	e028      	b.n	6d80 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x190>
    6d2e:	4c2a      	ldr	r4, [pc, #168]	; (6dd8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    6d30:	6820      	ldr	r0, [r4, #0]
    6d32:	7b01      	ldrb	r1, [r0, #12]
    6d34:	b109      	cbz	r1, 6d3a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    6d36:	f007 fa98 	bl	e26a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    6d3a:	f8d4 c004 	ldr.w	ip, [r4, #4]
    6d3e:	f04f 0800 	mov.w	r8, #0
    6d42:	f89c 0000 	ldrb.w	r0, [ip]
    6d46:	f000 060f 	and.w	r6, r0, #15
    6d4a:	b33f      	cbz	r7, 6d9c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    6d4c:	6821      	ldr	r1, [r4, #0]
    6d4e:	09c0      	lsrs	r0, r0, #7
    6d50:	f101 0351 	add.w	r3, r1, #81	; 0x51
    6d54:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    6d58:	f10c 0109 	add.w	r1, ip, #9
    6d5c:	f006 f9d0 	bl	d100 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    6d60:	b1e0      	cbz	r0, 6d9c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    6d62:	4641      	mov	r1, r8
    6d64:	6860      	ldr	r0, [r4, #4]
    6d66:	f006 fcba 	bl	d6de <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    6d6a:	b1b8      	cbz	r0, 6d9c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    6d6c:	782a      	ldrb	r2, [r5, #0]
    6d6e:	6820      	ldr	r0, [r4, #0]
    6d70:	4631      	mov	r1, r6
    6d72:	2a02      	cmp	r2, #2
    6d74:	d007      	beq.n	6d86 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    6d76:	782a      	ldrb	r2, [r5, #0]
    6d78:	2a03      	cmp	r2, #3
    6d7a:	d004      	beq.n	6d86 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    6d7c:	f640 5102 	movw	r1, #3330	; 0xd02
    6d80:	202d      	movs	r0, #45	; 0x2d
    6d82:	f7fd fb2b 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d86:	68a2      	ldr	r2, [r4, #8]
    6d88:	782b      	ldrb	r3, [r5, #0]
    6d8a:	6952      	ldr	r2, [r2, #20]
    6d8c:	f06f 0607 	mvn.w	r6, #7
    6d90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    6d94:	58d2      	ldr	r2, [r2, r3]
    6d96:	4790      	blx	r2
    6d98:	4606      	mov	r6, r0
    6d9a:	e000      	b.n	6d9e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    6d9c:	2601      	movs	r6, #1
    6d9e:	7ba8      	ldrb	r0, [r5, #14]
    6da0:	b118      	cbz	r0, 6daa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ba>
    6da2:	f003 fddb 	bl	a95c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6da6:	f003 fbff 	bl	a5a8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6daa:	2e00      	cmp	r6, #0
    6dac:	d00f      	beq.n	6dce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1de>
    6dae:	6820      	ldr	r0, [r4, #0]
    6db0:	f007 fb17 	bl	e3e2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6db4:	b130      	cbz	r0, 6dc4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d4>
    6db6:	f003 fdf9 	bl	a9ac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6dba:	68a0      	ldr	r0, [r4, #8]
    6dbc:	6880      	ldr	r0, [r0, #8]
    6dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6dc2:	4700      	bx	r0
    6dc4:	6820      	ldr	r0, [r4, #0]
    6dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6dca:	f000 ba91 	b.w	72f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f0>
    6dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6dd2:	0000      	.short	0x0000
    6dd4:	20001130 	.word	0x20001130
    6dd8:	20000130 	.word	0x20000130
    6ddc:	b510      	push	{r4, lr}
    6dde:	2903      	cmp	r1, #3
    6de0:	d002      	beq.n	6de8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    6de2:	2905      	cmp	r1, #5
    6de4:	d10a      	bne.n	6dfc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    6de6:	e002      	b.n	6dee <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    6de8:	f000 fb7a 	bl	74e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e0>
    6dec:	e003      	b.n	6df6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    6dee:	4904      	ldr	r1, [pc, #16]	; (6e00 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    6df0:	6809      	ldr	r1, [r1, #0]
    6df2:	b109      	cbz	r1, 6df8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    6df4:	4788      	blx	r1
    6df6:	b108      	cbz	r0, 6dfc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    6df8:	2000      	movs	r0, #0
    6dfa:	bd10      	pop	{r4, pc}
    6dfc:	2001      	movs	r0, #1
    6dfe:	bd10      	pop	{r4, pc}
    6e00:	2000013c 	.word	0x2000013c
    6e04:	4a09      	ldr	r2, [pc, #36]	; (6e2c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    6e06:	0003      	movs	r3, r0
    6e08:	6810      	ldr	r0, [r2, #0]
    6e0a:	d001      	beq.n	6e10 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    6e0c:	f000 ba70 	b.w	72f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f0>
    6e10:	2900      	cmp	r1, #0
    6e12:	d009      	beq.n	6e28 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    6e14:	6891      	ldr	r1, [r2, #8]
    6e16:	4a06      	ldr	r2, [pc, #24]	; (6e30 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    6e18:	6909      	ldr	r1, [r1, #16]
    6e1a:	7812      	ldrb	r2, [r2, #0]
    6e1c:	f06f 030f 	mvn.w	r3, #15
    6e20:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6e24:	5889      	ldr	r1, [r1, r2]
    6e26:	4708      	bx	r1
    6e28:	4770      	bx	lr
    6e2a:	0000      	.short	0x0000
    6e2c:	20000130 	.word	0x20000130
    6e30:	20001130 	.word	0x20001130
    6e34:	b570      	push	{r4, r5, r6, lr}
    6e36:	4604      	mov	r4, r0
    6e38:	8840      	ldrh	r0, [r0, #2]
    6e3a:	2810      	cmp	r0, #16
    6e3c:	d019      	beq.n	6e72 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    6e3e:	4d10      	ldr	r5, [pc, #64]	; (6e80 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    6e40:	7ba8      	ldrb	r0, [r5, #14]
    6e42:	b120      	cbz	r0, 6e4e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    6e44:	f003 fbd0 	bl	a5e8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    6e48:	2040      	movs	r0, #64	; 0x40
    6e4a:	f003 fd95 	bl	a978 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    6e4e:	480d      	ldr	r0, [pc, #52]	; (6e84 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    6e50:	6840      	ldr	r0, [r0, #4]
    6e52:	f004 f817 	bl	ae84 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6e56:	78a0      	ldrb	r0, [r4, #2]
    6e58:	0740      	lsls	r0, r0, #29
    6e5a:	d404      	bmi.n	6e66 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    6e5c:	2100      	movs	r1, #0
    6e5e:	7922      	ldrb	r2, [r4, #4]
    6e60:	4608      	mov	r0, r1
    6e62:	f004 f887 	bl	af74 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6e66:	2000      	movs	r0, #0
    6e68:	f003 fec2 	bl	abf0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6e6c:	2002      	movs	r0, #2
    6e6e:	7028      	strb	r0, [r5, #0]
    6e70:	bd70      	pop	{r4, r5, r6, pc}
    6e72:	4620      	mov	r0, r4
    6e74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e78:	2101      	movs	r1, #1
    6e7a:	f7ff bec1 	b.w	6c00 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6e7e:	0000      	.short	0x0000
    6e80:	20001130 	.word	0x20001130
    6e84:	20000130 	.word	0x20000130
    6e88:	b510      	push	{r4, lr}
    6e8a:	4c12      	ldr	r4, [pc, #72]	; (6ed4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    6e8c:	6820      	ldr	r0, [r4, #0]
    6e8e:	f000 f825 	bl	6edc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    6e92:	6820      	ldr	r0, [r4, #0]
    6e94:	f007 faa5 	bl	e3e2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6e98:	2800      	cmp	r0, #0
    6e9a:	6820      	ldr	r0, [r4, #0]
    6e9c:	d00b      	beq.n	6eb6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    6e9e:	490e      	ldr	r1, [pc, #56]	; (6ed8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    6ea0:	780a      	ldrb	r2, [r1, #0]
    6ea2:	2a02      	cmp	r2, #2
    6ea4:	d00b      	beq.n	6ebe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    6ea6:	780a      	ldrb	r2, [r1, #0]
    6ea8:	2a03      	cmp	r2, #3
    6eaa:	d008      	beq.n	6ebe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    6eac:	f640 4137 	movw	r1, #3127	; 0xc37
    6eb0:	202d      	movs	r0, #45	; 0x2d
    6eb2:	f7fd fa93 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6eba:	f000 ba19 	b.w	72f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f0>
    6ebe:	68a2      	ldr	r2, [r4, #8]
    6ec0:	7809      	ldrb	r1, [r1, #0]
    6ec2:	68d2      	ldr	r2, [r2, #12]
    6ec4:	f06f 0307 	mvn.w	r3, #7
    6ec8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6ecc:	5851      	ldr	r1, [r2, r1]
    6ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6ed2:	4708      	bx	r1
    6ed4:	20000130 	.word	0x20000130
    6ed8:	20001130 	.word	0x20001130
    6edc:	b510      	push	{r4, lr}
    6ede:	7b01      	ldrb	r1, [r0, #12]
    6ee0:	b109      	cbz	r1, 6ee6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    6ee2:	f007 f9c2 	bl	e26a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    6ee6:	4805      	ldr	r0, [pc, #20]	; (6efc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    6ee8:	7b80      	ldrb	r0, [r0, #14]
    6eea:	2800      	cmp	r0, #0
    6eec:	d005      	beq.n	6efa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    6eee:	f003 fd35 	bl	a95c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6ef6:	f003 bb57 	b.w	a5a8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6efa:	bd10      	pop	{r4, pc}
    6efc:	20001130 	.word	0x20001130

00006f00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    6f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f04:	4d5d      	ldr	r5, [pc, #372]	; (707c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>)
    6f06:	4604      	mov	r4, r0
    6f08:	b086      	sub	sp, #24
    6f0a:	7828      	ldrb	r0, [r5, #0]
    6f0c:	2800      	cmp	r0, #0
    6f0e:	d14e      	bne.n	6fae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    6f10:	7820      	ldrb	r0, [r4, #0]
    6f12:	28ff      	cmp	r0, #255	; 0xff
    6f14:	d04b      	beq.n	6fae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    6f16:	f04f 0800 	mov.w	r8, #0
    6f1a:	f8a5 800c 	strh.w	r8, [r5, #12]
    6f1e:	f8c5 8004 	str.w	r8, [r5, #4]
    6f22:	f885 8001 	strb.w	r8, [r5, #1]
    6f26:	f885 8002 	strb.w	r8, [r5, #2]
    6f2a:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    6f2e:	4b54      	ldr	r3, [pc, #336]	; (7080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    6f30:	4e54      	ldr	r6, [pc, #336]	; (7084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    6f32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6f34:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    6f38:	68b0      	ldr	r0, [r6, #8]
    6f3a:	6840      	ldr	r0, [r0, #4]
    6f3c:	9003      	str	r0, [sp, #12]
    6f3e:	4668      	mov	r0, sp
    6f40:	f003 fe2a 	bl	ab98 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    6f44:	f003 fef8 	bl	ad38 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    6f48:	f004 f968 	bl	b21c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    6f4c:	f003 fd06 	bl	a95c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6f50:	f003 fb2a 	bl	a5a8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6f54:	484c      	ldr	r0, [pc, #304]	; (7088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    6f56:	f004 f83f 	bl	afd8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6f5a:	484c      	ldr	r0, [pc, #304]	; (708c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    6f5c:	f004 f846 	bl	afec <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    6f60:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6f64:	4607      	mov	r7, r0
    6f66:	f007 f9ef 	bl	e348 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6f6a:	4638      	mov	r0, r7
    6f6c:	f007 f9b1 	bl	e2d2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6f70:	4601      	mov	r1, r0
    6f72:	4620      	mov	r0, r4
    6f74:	f007 f96e 	bl	e254 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    6f78:	f994 000e 	ldrsb.w	r0, [r4, #14]
    6f7c:	f003 ff60 	bl	ae40 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    6f80:	7921      	ldrb	r1, [r4, #4]
    6f82:	2000      	movs	r0, #0
    6f84:	f003 fd9c 	bl	aac0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6f88:	2101      	movs	r1, #1
    6f8a:	60a8      	str	r0, [r5, #8]
    6f8c:	b198      	cbz	r0, 6fb6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    6f8e:	f104 0138 	add.w	r1, r4, #56	; 0x38
    6f92:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6f94:	f006 f82b 	bl	cfee <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    6f98:	4607      	mov	r7, r0
    6f9a:	f104 0140 	add.w	r1, r4, #64	; 0x40
    6f9e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6fa0:	f006 f828 	bl	cff4 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    6fa4:	b14f      	cbz	r7, 6fba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    6fa6:	f894 1020 	ldrb.w	r1, [r4, #32]
    6faa:	b951      	cbnz	r1, 6fc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc2>
    6fac:	e005      	b.n	6fba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    6fae:	200c      	movs	r0, #12
    6fb0:	b006      	add	sp, #24
    6fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fb6:	7029      	strb	r1, [r5, #0]
    6fb8:	e05e      	b.n	7078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>
    6fba:	b120      	cbz	r0, 6fc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    6fbc:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    6fc0:	b108      	cbz	r0, 6fc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    6fc2:	2701      	movs	r7, #1
    6fc4:	e000      	b.n	6fc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8>
    6fc6:	2700      	movs	r7, #0
    6fc8:	7ea0      	ldrb	r0, [r4, #26]
    6fca:	b920      	cbnz	r0, 6fd6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    6fcc:	7e20      	ldrb	r0, [r4, #24]
    6fce:	b910      	cbnz	r0, 6fd6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    6fd0:	78a0      	ldrb	r0, [r4, #2]
    6fd2:	0740      	lsls	r0, r0, #29
    6fd4:	d523      	bpl.n	701e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    6fd6:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    6fda:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6fde:	4050      	eors	r0, r2
    6fe0:	ea70 0101 	orns	r1, r0, r1
    6fe4:	d006      	beq.n	6ff4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    6fe6:	f7fb fe13 	bl	2c10 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    6fea:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    6fee:	1a80      	subs	r0, r0, r2
    6ff0:	4199      	sbcs	r1, r3
    6ff2:	d200      	bcs.n	6ff6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf6>
    6ff4:	b19f      	cbz	r7, 701e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    6ff6:	f7fe fea3 	bl	5d40 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    6ffa:	4925      	ldr	r1, [pc, #148]	; (7090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    6ffc:	fba0 2301 	umull	r2, r3, r0, r1
    7000:	f104 0048 	add.w	r0, r4, #72	; 0x48
    7004:	f007 f93c 	bl	e280 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    7008:	2101      	movs	r1, #1
    700a:	4620      	mov	r0, r4
    700c:	f007 f8e6 	bl	e1dc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4e>
    7010:	78a0      	ldrb	r0, [r4, #2]
    7012:	0740      	lsls	r0, r0, #29
    7014:	d503      	bpl.n	701e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    7016:	2101      	movs	r1, #1
    7018:	4620      	mov	r0, r4
    701a:	f000 fa9d 	bl	7558 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x558>
    701e:	f7fe fee7 	bl	5df0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7022:	6870      	ldr	r0, [r6, #4]
    7024:	1cc0      	adds	r0, r0, #3
    7026:	f006 f8f6 	bl	d216 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    702a:	73a8      	strb	r0, [r5, #14]
    702c:	78a0      	ldrb	r0, [r4, #2]
    702e:	07c0      	lsls	r0, r0, #31
    7030:	d022      	beq.n	7078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>
    7032:	f8cd 8010 	str.w	r8, [sp, #16]
    7036:	20ff      	movs	r0, #255	; 0xff
    7038:	f8cd 8014 	str.w	r8, [sp, #20]
    703c:	73e8      	strb	r0, [r5, #15]
    703e:	69e6      	ldr	r6, [r4, #28]
    7040:	f106 070a 	add.w	r7, r6, #10
    7044:	e013      	b.n	706e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e>
    7046:	9c04      	ldr	r4, [sp, #16]
    7048:	42b4      	cmp	r4, r6
    704a:	d010      	beq.n	706e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e>
    704c:	7a72      	ldrb	r2, [r6, #9]
    704e:	7a60      	ldrb	r0, [r4, #9]
    7050:	463b      	mov	r3, r7
    7052:	f104 010a 	add.w	r1, r4, #10
    7056:	f006 f853 	bl	d100 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    705a:	b140      	cbz	r0, 706e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e>
    705c:	78a0      	ldrb	r0, [r4, #2]
    705e:	73e8      	strb	r0, [r5, #15]
    7060:	f8d4 0003 	ldr.w	r0, [r4, #3]
    7064:	6128      	str	r0, [r5, #16]
    7066:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    706a:	82a8      	strh	r0, [r5, #20]
    706c:	e004      	b.n	7078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>
    706e:	a804      	add	r0, sp, #16
    7070:	f7fd fbee 	bl	4850 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7074:	2800      	cmp	r0, #0
    7076:	d0e6      	beq.n	7046 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46>
    7078:	2000      	movs	r0, #0
    707a:	e799      	b.n	6fb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb0>
    707c:	20001130 	.word	0x20001130
    7080:	00007668 	.word	0x00007668
    7084:	20000130 	.word	0x20000130
    7088:	8e89bed6 	.word	0x8e89bed6
    708c:	00555555 	.word	0x00555555
    7090:	000f4240 	.word	0x000f4240
    7094:	b510      	push	{r4, lr}
    7096:	4604      	mov	r4, r0
    7098:	f7ff ff32 	bl	6f00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    709c:	2800      	cmp	r0, #0
    709e:	d108      	bne.n	70b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb2>
    70a0:	4804      	ldr	r0, [pc, #16]	; (70b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
    70a2:	7800      	ldrb	r0, [r0, #0]
    70a4:	2801      	cmp	r0, #1
    70a6:	d003      	beq.n	70b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>
    70a8:	2100      	movs	r1, #0
    70aa:	4620      	mov	r0, r4
    70ac:	f7ff fda8 	bl	6c00 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    70b0:	2000      	movs	r0, #0
    70b2:	bd10      	pop	{r4, pc}
    70b4:	20001130 	.word	0x20001130
    70b8:	480a      	ldr	r0, [pc, #40]	; (70e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4>)
    70ba:	b510      	push	{r4, lr}
    70bc:	490a      	ldr	r1, [pc, #40]	; (70e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe8>)
    70be:	6804      	ldr	r4, [r0, #0]
    70c0:	7808      	ldrb	r0, [r1, #0]
    70c2:	2800      	cmp	r0, #0
    70c4:	d00d      	beq.n	70e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe2>
    70c6:	7808      	ldrb	r0, [r1, #0]
    70c8:	2802      	cmp	r0, #2
    70ca:	d002      	beq.n	70d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd2>
    70cc:	7808      	ldrb	r0, [r1, #0]
    70ce:	2803      	cmp	r0, #3
    70d0:	d102      	bne.n	70d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>
    70d2:	4620      	mov	r0, r4
    70d4:	f7ff ff02 	bl	6edc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    70d8:	4620      	mov	r0, r4
    70da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    70de:	f000 b907 	b.w	72f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f0>
    70e2:	bd10      	pop	{r4, pc}
    70e4:	20000130 	.word	0x20000130
    70e8:	20001130 	.word	0x20001130
    70ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70f0:	4604      	mov	r4, r0
    70f2:	4827      	ldr	r0, [pc, #156]	; (7190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190>)
    70f4:	460d      	mov	r5, r1
    70f6:	6840      	ldr	r0, [r0, #4]
    70f8:	f003 fec4 	bl	ae84 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    70fc:	4e25      	ldr	r6, [pc, #148]	; (7194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>)
    70fe:	2004      	movs	r0, #4
    7100:	7030      	strb	r0, [r6, #0]
    7102:	b325      	cbz	r5, 714e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e>
    7104:	8860      	ldrh	r0, [r4, #2]
    7106:	2810      	cmp	r0, #16
    7108:	d02a      	beq.n	7160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
    710a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    710e:	4680      	mov	r8, r0
    7110:	68b5      	ldr	r5, [r6, #8]
    7112:	f007 f8d2 	bl	e2ba <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7116:	4607      	mov	r7, r0
    7118:	4640      	mov	r0, r8
    711a:	f007 f8f7 	bl	e30c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    711e:	1a38      	subs	r0, r7, r0
    7120:	1e40      	subs	r0, r0, #1
    7122:	b2c0      	uxtb	r0, r0
    7124:	8861      	ldrh	r1, [r4, #2]
    7126:	2228      	movs	r2, #40	; 0x28
    7128:	f000 fada 	bl	76e0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    712c:	4405      	add	r5, r0
    712e:	78a0      	ldrb	r0, [r4, #2]
    7130:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7134:	b130      	cbz	r0, 7144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>
    7136:	6870      	ldr	r0, [r6, #4]
    7138:	4405      	add	r5, r0
    713a:	f007 f940 	bl	e3be <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    713e:	4428      	add	r0, r5
    7140:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    7144:	7922      	ldrb	r2, [r4, #4]
    7146:	4629      	mov	r1, r5
    7148:	2000      	movs	r0, #0
    714a:	f003 feb1 	bl	aeb0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    714e:	8860      	ldrh	r0, [r4, #2]
    7150:	2813      	cmp	r0, #19
    7152:	d013      	beq.n	717c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c>
    7154:	dc09      	bgt.n	716a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16a>
    7156:	2810      	cmp	r0, #16
    7158:	d017      	beq.n	718a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18a>
    715a:	2812      	cmp	r0, #18
    715c:	d109      	bne.n	7172 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x172>
    715e:	e00d      	b.n	717c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c>
    7160:	7921      	ldrb	r1, [r4, #4]
    7162:	2000      	movs	r0, #0
    7164:	f003 fc72 	bl	aa4c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7168:	e7f1      	b.n	714e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e>
    716a:	2815      	cmp	r0, #21
    716c:	d006      	beq.n	717c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c>
    716e:	281d      	cmp	r0, #29
    7170:	d004      	beq.n	717c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c>
    7172:	f640 51b8 	movw	r1, #3512	; 0xdb8
    7176:	202d      	movs	r0, #45	; 0x2d
    7178:	f7fd f930 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    717c:	7922      	ldrb	r2, [r4, #4]
    717e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7182:	2101      	movs	r1, #1
    7184:	2000      	movs	r0, #0
    7186:	f003 bef5 	b.w	af74 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    718a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    718e:	0000      	.short	0x0000
    7190:	20000130 	.word	0x20000130
    7194:	20001130 	.word	0x20001130
    7198:	b510      	push	{r4, lr}
    719a:	4604      	mov	r4, r0
    719c:	7800      	ldrb	r0, [r0, #0]
    719e:	460b      	mov	r3, r1
    71a0:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    71a4:	29ff      	cmp	r1, #255	; 0xff
    71a6:	d010      	beq.n	71ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ca>
    71a8:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    71ac:	1e51      	subs	r1, r2, #1
    71ae:	4618      	mov	r0, r3
    71b0:	f7fe fd9a 	bl	5ce8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    71b4:	b130      	cbz	r0, 71c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c4>
    71b6:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    71ba:	f040 0002 	orr.w	r0, r0, #2
    71be:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    71c2:	e011      	b.n	71e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e8>
    71c4:	f241 0102 	movw	r1, #4098	; 0x1002
    71c8:	e021      	b.n	720e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20e>
    71ca:	4812      	ldr	r0, [pc, #72]	; (7214 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x214>)
    71cc:	6840      	ldr	r0, [r0, #4]
    71ce:	7801      	ldrb	r1, [r0, #0]
    71d0:	f3c1 1180 	ubfx	r1, r1, #6, #1
    71d4:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    71d8:	f8d0 1003 	ldr.w	r1, [r0, #3]
    71dc:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    71e0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    71e4:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    71e8:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    71ec:	287f      	cmp	r0, #127	; 0x7f
    71ee:	d00c      	beq.n	720a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20a>
    71f0:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    71f4:	207f      	movs	r0, #127	; 0x7f
    71f6:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    71fa:	4621      	mov	r1, r4
    71fc:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    7200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7204:	221d      	movs	r2, #29
    7206:	f7ff b85b 	b.w	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    720a:	f640 616b 	movw	r1, #3691	; 0xe6b
    720e:	202d      	movs	r0, #45	; 0x2d
    7210:	f7fd f8e4 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7214:	20000130 	.word	0x20000130
    7218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    721c:	4690      	mov	r8, r2
    721e:	460e      	mov	r6, r1
    7220:	4604      	mov	r4, r0
    7222:	2903      	cmp	r1, #3
    7224:	d004      	beq.n	7230 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x230>
    7226:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    722a:	b108      	cbz	r0, 7230 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x230>
    722c:	2001      	movs	r0, #1
    722e:	e000      	b.n	7232 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x232>
    7230:	2000      	movs	r0, #0
    7232:	4681      	mov	r9, r0
    7234:	f003 fbac 	bl	a990 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    7238:	4605      	mov	r5, r0
    723a:	2e03      	cmp	r6, #3
    723c:	d003      	beq.n	7246 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x246>
    723e:	2701      	movs	r7, #1
    7240:	2e05      	cmp	r6, #5
    7242:	d005      	beq.n	7250 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x250>
    7244:	e008      	b.n	7258 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x258>
    7246:	78a0      	ldrb	r0, [r4, #2]
    7248:	2702      	movs	r7, #2
    724a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    724e:	e001      	b.n	7254 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x254>
    7250:	78a0      	ldrb	r0, [r4, #2]
    7252:	07c0      	lsls	r0, r0, #31
    7254:	2800      	cmp	r0, #0
    7256:	d042      	beq.n	72de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2de>
    7258:	f1b9 0f00 	cmp.w	r9, #0
    725c:	d13e      	bne.n	72dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2dc>
    725e:	4822      	ldr	r0, [pc, #136]	; (72e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>)
    7260:	7b80      	ldrb	r0, [r0, #14]
    7262:	b140      	cbz	r0, 7276 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x276>
    7264:	f005 ffda 	bl	d21c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7268:	f888 0000 	strb.w	r0, [r8]
    726c:	28ff      	cmp	r0, #255	; 0xff
    726e:	d002      	beq.n	7276 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x276>
    7270:	f7fe fd54 	bl	5d1c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7274:	4305      	orrs	r5, r0
    7276:	4e1d      	ldr	r6, [pc, #116]	; (72ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>)
    7278:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    727c:	f104 0358 	add.w	r3, r4, #88	; 0x58
    7280:	6871      	ldr	r1, [r6, #4]
    7282:	f811 0b03 	ldrb.w	r0, [r1], #3
    7286:	f3c0 1080 	ubfx	r0, r0, #6, #1
    728a:	f005 ff39 	bl	d100 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    728e:	f898 1000 	ldrb.w	r1, [r8]
    7292:	29ff      	cmp	r1, #255	; 0xff
    7294:	d004      	beq.n	72a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a0>
    7296:	b990      	cbnz	r0, 72be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2be>
    7298:	7e60      	ldrb	r0, [r4, #25]
    729a:	4288      	cmp	r0, r1
    729c:	d00f      	beq.n	72be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2be>
    729e:	e008      	b.n	72b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b2>
    72a0:	b138      	cbz	r0, 72b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b2>
    72a2:	6871      	ldr	r1, [r6, #4]
    72a4:	f811 0b03 	ldrb.w	r0, [r1], #3
    72a8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    72ac:	f006 ff7d 	bl	e1aa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    72b0:	b128      	cbz	r0, 72be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2be>
    72b2:	2000      	movs	r0, #0
    72b4:	78a1      	ldrb	r1, [r4, #2]
    72b6:	0749      	lsls	r1, r1, #29
    72b8:	d503      	bpl.n	72c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c2>
    72ba:	b990      	cbnz	r0, 72e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e2>
    72bc:	e00e      	b.n	72dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2dc>
    72be:	2001      	movs	r0, #1
    72c0:	e7f8      	b.n	72b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b4>
    72c2:	b975      	cbnz	r5, 72e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e2>
    72c4:	7be0      	ldrb	r0, [r4, #15]
    72c6:	b108      	cbz	r0, 72cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2cc>
    72c8:	42b8      	cmp	r0, r7
    72ca:	d107      	bne.n	72dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2dc>
    72cc:	6871      	ldr	r1, [r6, #4]
    72ce:	f811 0b03 	ldrb.w	r0, [r1], #3
    72d2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    72d6:	f006 ff68 	bl	e1aa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    72da:	b110      	cbz	r0, 72e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e2>
    72dc:	2000      	movs	r0, #0
    72de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    72e2:	2001      	movs	r0, #1
    72e4:	e7fb      	b.n	72de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2de>
    72e6:	0000      	.short	0x0000
    72e8:	20001130 	.word	0x20001130
    72ec:	20000130 	.word	0x20000130
    72f0:	b570      	push	{r4, r5, r6, lr}
    72f2:	4604      	mov	r4, r0
    72f4:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    72f6:	4d10      	ldr	r5, [pc, #64]	; (7338 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x338>)
    72f8:	1c40      	adds	r0, r0, #1
    72fa:	8620      	strh	r0, [r4, #48]	; 0x30
    72fc:	7ba8      	ldrb	r0, [r5, #14]
    72fe:	2600      	movs	r6, #0
    7300:	b120      	cbz	r0, 730c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30c>
    7302:	f003 fb2b 	bl	a95c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7306:	f003 f94f 	bl	a5a8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    730a:	73ae      	strb	r6, [r5, #14]
    730c:	702e      	strb	r6, [r5, #0]
    730e:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    7312:	b108      	cbz	r0, 7318 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x318>
    7314:	2101      	movs	r1, #1
    7316:	e00a      	b.n	732e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32e>
    7318:	7b60      	ldrb	r0, [r4, #13]
    731a:	b138      	cbz	r0, 732c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32c>
    731c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    731e:	4288      	cmp	r0, r1
    7320:	d804      	bhi.n	732c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32c>
    7322:	2101      	movs	r1, #1
    7324:	4620      	mov	r0, r4
    7326:	f007 f86e 	bl	e406 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    732a:	bd70      	pop	{r4, r5, r6, pc}
    732c:	2100      	movs	r1, #0
    732e:	4620      	mov	r0, r4
    7330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7334:	f007 b867 	b.w	e406 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7338:	20001130 	.word	0x20001130
    733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    733e:	4604      	mov	r4, r0
    7340:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
    7344:	4616      	mov	r6, r2
    7346:	460d      	mov	r5, r1
    7348:	f88d 0000 	strb.w	r0, [sp]
    734c:	9800      	ldr	r0, [sp, #0]
    734e:	9000      	str	r0, [sp, #0]
    7350:	f89d 0000 	ldrb.w	r0, [sp]
    7354:	b110      	cbz	r0, 735c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x35c>
    7356:	f640 416b 	movw	r1, #3179	; 0xc6b
    735a:	e055      	b.n	7408 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x408>
    735c:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
    7360:	2700      	movs	r7, #0
    7362:	8828      	ldrh	r0, [r5, #0]
    7364:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
    7368:	2b00      	cmp	r3, #0
    736a:	d14a      	bne.n	7402 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x402>
    736c:	6928      	ldr	r0, [r5, #16]
    736e:	f005 ffa4 	bl	d2ba <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7372:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    7376:	8b28      	ldrh	r0, [r5, #24]
    7378:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    737c:	8b68      	ldrh	r0, [r5, #26]
    737e:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    7382:	f895 020d 	ldrb.w	r0, [r5, #525]	; 0x20d
    7386:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    738a:	7e20      	ldrb	r0, [r4, #24]
    738c:	f104 0151 	add.w	r1, r4, #81	; 0x51
    7390:	460d      	mov	r5, r1
    7392:	b120      	cbz	r0, 739e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39e>
    7394:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    7398:	f006 fd9d 	bl	ded6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xca>
    739c:	b940      	cbnz	r0, 73b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b0>
    739e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    73a2:	b170      	cbz	r0, 73c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c2>
    73a4:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    73a8:	4629      	mov	r1, r5
    73aa:	f006 fd8b 	bl	dec4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xb8>
    73ae:	b140      	cbz	r0, 73c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c2>
    73b0:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    73b4:	f8c4 0082 	str.w	r0, [r4, #130]	; 0x82
    73b8:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    73bc:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    73c0:	e003      	b.n	73ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ca>
    73c2:	f8c4 7082 	str.w	r7, [r4, #130]	; 0x82
    73c6:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    73ca:	4814      	ldr	r0, [pc, #80]	; (741c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x41c>)
    73cc:	2eff      	cmp	r6, #255	; 0xff
    73ce:	6840      	ldr	r0, [r0, #4]
    73d0:	7801      	ldrb	r1, [r0, #0]
    73d2:	f3c1 1180 	ubfx	r1, r1, #6, #1
    73d6:	f884 107b 	strb.w	r1, [r4, #123]	; 0x7b
    73da:	f850 1f03 	ldr.w	r1, [r0, #3]!
    73de:	d016      	beq.n	740e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40e>
    73e0:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    73e4:	8880      	ldrh	r0, [r0, #4]
    73e6:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    73ea:	f104 027c 	add.w	r2, r4, #124	; 0x7c
    73ee:	1e51      	subs	r1, r2, #1
    73f0:	4630      	mov	r0, r6
    73f2:	f7fe fc79 	bl	5ce8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    73f6:	b128      	cbz	r0, 7404 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x404>
    73f8:	f814 0f7b 	ldrb.w	r0, [r4, #123]!
    73fc:	f040 0002 	orr.w	r0, r0, #2
    7400:	7020      	strb	r0, [r4, #0]
    7402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7404:	f640 418c 	movw	r1, #3212	; 0xc8c
    7408:	202d      	movs	r0, #45	; 0x2d
    740a:	f7fc ffe7 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    740e:	f844 1f7c 	str.w	r1, [r4, #124]!
    7412:	8880      	ldrh	r0, [r0, #4]
    7414:	80a0      	strh	r0, [r4, #4]
    7416:	60e7      	str	r7, [r4, #12]
    7418:	8227      	strh	r7, [r4, #16]
    741a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    741c:	20000130 	.word	0x20000130
    7420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7422:	4604      	mov	r4, r0
    7424:	20ff      	movs	r0, #255	; 0xff
    7426:	f88d 0000 	strb.w	r0, [sp]
    742a:	2601      	movs	r6, #1
    742c:	466a      	mov	r2, sp
    742e:	2105      	movs	r1, #5
    7430:	4620      	mov	r0, r4
    7432:	f7ff fef1 	bl	7218 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x218>
    7436:	b160      	cbz	r0, 7452 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x452>
    7438:	4d28      	ldr	r5, [pc, #160]	; (74dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4dc>)
    743a:	4f27      	ldr	r7, [pc, #156]	; (74d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d8>)
    743c:	6869      	ldr	r1, [r5, #4]
    743e:	7bfa      	ldrb	r2, [r7, #15]
    7440:	f107 0310 	add.w	r3, r7, #16
    7444:	f811 0b03 	ldrb.w	r0, [r1], #3
    7448:	f3c0 1080 	ubfx	r0, r0, #6, #1
    744c:	f005 fe58 	bl	d100 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7450:	b110      	cbz	r0, 7458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>
    7452:	2600      	movs	r6, #0
    7454:	4630      	mov	r0, r6
    7456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7458:	686a      	ldr	r2, [r5, #4]
    745a:	69e0      	ldr	r0, [r4, #28]
    745c:	7812      	ldrb	r2, [r2, #0]
    745e:	f810 1f9d 	ldrb.w	r1, [r0, #157]!
    7462:	f3c2 1240 	ubfx	r2, r2, #5, #1
    7466:	4011      	ands	r1, r2
    7468:	7001      	strb	r1, [r0, #0]
    746a:	2201      	movs	r2, #1
    746c:	4620      	mov	r0, r4
    746e:	69e1      	ldr	r1, [r4, #28]
    7470:	f000 f8a0 	bl	75b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b4>
    7474:	2300      	movs	r3, #0
    7476:	f89d 2000 	ldrb.w	r2, [sp]
    747a:	4620      	mov	r0, r4
    747c:	69e1      	ldr	r1, [r4, #28]
    747e:	f7ff ff5d 	bl	733c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33c>
    7482:	2210      	movs	r2, #16
    7484:	4621      	mov	r1, r4
    7486:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    748a:	f7fe ff19 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    748e:	69e0      	ldr	r0, [r4, #28]
    7490:	2205      	movs	r2, #5
    7492:	8801      	ldrh	r1, [r0, #0]
    7494:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    7498:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    749c:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    74a0:	4621      	mov	r1, r4
    74a2:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    74a6:	f7fe ff0b 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    74aa:	2100      	movs	r1, #0
    74ac:	69e0      	ldr	r0, [r4, #28]
    74ae:	7039      	strb	r1, [r7, #0]
    74b0:	460a      	mov	r2, r1
    74b2:	4621      	mov	r1, r4
    74b4:	f000 fa8c 	bl	79d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    74b8:	6868      	ldr	r0, [r5, #4]
    74ba:	69e1      	ldr	r1, [r4, #28]
    74bc:	f8d0 2003 	ldr.w	r2, [r0, #3]
    74c0:	f841 2f03 	str.w	r2, [r1, #3]!
    74c4:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    74c8:	808a      	strh	r2, [r1, #4]
    74ca:	7800      	ldrb	r0, [r0, #0]
    74cc:	69e1      	ldr	r1, [r4, #28]
    74ce:	f3c0 1080 	ubfx	r0, r0, #6, #1
    74d2:	7088      	strb	r0, [r1, #2]
    74d4:	e7be      	b.n	7454 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x454>
    74d6:	0000      	.short	0x0000
    74d8:	20001130 	.word	0x20001130
    74dc:	20000130 	.word	0x20000130
    74e0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    74e4:	4604      	mov	r4, r0
    74e6:	20ff      	movs	r0, #255	; 0xff
    74e8:	f88d 0000 	strb.w	r0, [sp]
    74ec:	2501      	movs	r5, #1
    74ee:	466a      	mov	r2, sp
    74f0:	2103      	movs	r1, #3
    74f2:	4620      	mov	r0, r4
    74f4:	f7ff fe90 	bl	7218 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x218>
    74f8:	b330      	cbz	r0, 7548 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x548>
    74fa:	7b20      	ldrb	r0, [r4, #12]
    74fc:	2700      	movs	r7, #0
    74fe:	b168      	cbz	r0, 751c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x51c>
    7500:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    7504:	f88d 0004 	strb.w	r0, [sp, #4]
    7508:	9801      	ldr	r0, [sp, #4]
    750a:	9001      	str	r0, [sp, #4]
    750c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7510:	b920      	cbnz	r0, 751c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x51c>
    7512:	f89d 1000 	ldrb.w	r1, [sp]
    7516:	4620      	mov	r0, r4
    7518:	f7ff fe3e 	bl	7198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    751c:	4e0c      	ldr	r6, [pc, #48]	; (7550 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x550>)
    751e:	2104      	movs	r1, #4
    7520:	6870      	ldr	r0, [r6, #4]
    7522:	8007      	strh	r7, [r0, #0]
    7524:	f006 f8fb 	bl	d71e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    7528:	4620      	mov	r0, r4
    752a:	f000 f88b 	bl	7644 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x644>
    752e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    7532:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7534:	6870      	ldr	r0, [r6, #4]
    7536:	f006 f929 	bl	d78c <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    753a:	4906      	ldr	r1, [pc, #24]	; (7554 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x554>)
    753c:	2005      	movs	r0, #5
    753e:	7008      	strb	r0, [r1, #0]
    7540:	6870      	ldr	r0, [r6, #4]
    7542:	f003 fc9f 	bl	ae84 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7546:	e000      	b.n	754a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54a>
    7548:	2500      	movs	r5, #0
    754a:	4628      	mov	r0, r5
    754c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    7550:	20000130 	.word	0x20000130
    7554:	20001130 	.word	0x20001130
    7558:	b570      	push	{r4, r5, r6, lr}
    755a:	4604      	mov	r4, r0
    755c:	460e      	mov	r6, r1
    755e:	7e40      	ldrb	r0, [r0, #25]
    7560:	f7fe fb9c 	bl	5c9c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7564:	0005      	movs	r5, r0
    7566:	d019      	beq.n	759c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59c>
    7568:	2110      	movs	r1, #16
    756a:	f006 f827 	bl	d5bc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    756e:	2800      	cmp	r0, #0
    7570:	d114      	bne.n	759c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59c>
    7572:	2001      	movs	r0, #1
    7574:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    7578:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    757c:	4632      	mov	r2, r6
    757e:	460c      	mov	r4, r1
    7580:	4628      	mov	r0, r5
    7582:	f005 fded 	bl	d160 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7586:	4621      	mov	r1, r4
    7588:	4c05      	ldr	r4, [pc, #20]	; (75a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a0>)
    758a:	6860      	ldr	r0, [r4, #4]
    758c:	f006 f8e2 	bl	d754 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    7590:	6860      	ldr	r0, [r4, #4]
    7592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7596:	2101      	movs	r1, #1
    7598:	f006 b8e2 	b.w	d760 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    759c:	bd70      	pop	{r4, r5, r6, pc}
    759e:	0000      	.short	0x0000
    75a0:	20000130 	.word	0x20000130
    75a4:	4802      	ldr	r0, [pc, #8]	; (75b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b0>)
    75a6:	2101      	movs	r1, #1
    75a8:	6800      	ldr	r0, [r0, #0]
    75aa:	f7ff bb29 	b.w	6c00 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    75ae:	0000      	.short	0x0000
    75b0:	20000130 	.word	0x20000130
    75b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75b8:	4e21      	ldr	r6, [pc, #132]	; (7640 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x640>)
    75ba:	4680      	mov	r8, r0
    75bc:	460c      	mov	r4, r1
    75be:	6870      	ldr	r0, [r6, #4]
    75c0:	4615      	mov	r5, r2
    75c2:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    75c6:	6161      	str	r1, [r4, #20]
    75c8:	6841      	ldr	r1, [r0, #4]
    75ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    75ce:	61e1      	str	r1, [r4, #28]
    75d0:	8940      	ldrh	r0, [r0, #10]
    75d2:	f005 fe6e 	bl	d2b2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    75d6:	4607      	mov	r7, r0
    75d8:	6120      	str	r0, [r4, #16]
    75da:	6870      	ldr	r0, [r6, #4]
    75dc:	4639      	mov	r1, r7
    75de:	7d80      	ldrb	r0, [r0, #22]
    75e0:	f005 ffe3 	bl	d5aa <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    75e4:	84a0      	strh	r0, [r4, #36]	; 0x24
    75e6:	6870      	ldr	r0, [r6, #4]
    75e8:	4639      	mov	r1, r7
    75ea:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    75ee:	f005 ffd8 	bl	d5a2 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    75f2:	6220      	str	r0, [r4, #32]
    75f4:	6870      	ldr	r0, [r6, #4]
    75f6:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    75fa:	8321      	strh	r1, [r4, #24]
    75fc:	8841      	ldrh	r1, [r0, #2]
    75fe:	8361      	strh	r1, [r4, #26]
    7600:	6841      	ldr	r1, [r0, #4]
    7602:	f8c4 109e 	str.w	r1, [r4, #158]	; 0x9e
    7606:	7a01      	ldrb	r1, [r0, #8]
    7608:	f884 10a2 	strb.w	r1, [r4, #162]	; 0xa2
    760c:	7a41      	ldrb	r1, [r0, #9]
    760e:	f001 011f 	and.w	r1, r1, #31
    7612:	f884 10a9 	strb.w	r1, [r4, #169]	; 0xa9
    7616:	7a40      	ldrb	r0, [r0, #9]
    7618:	0940      	lsrs	r0, r0, #5
    761a:	f884 020d 	strb.w	r0, [r4, #525]	; 0x20d
    761e:	f104 0062 	add.w	r0, r4, #98	; 0x62
    7622:	7205      	strb	r5, [r0, #8]
    7624:	7245      	strb	r5, [r0, #9]
    7626:	21ff      	movs	r1, #255	; 0xff
    7628:	7281      	strb	r1, [r0, #10]
    762a:	2100      	movs	r1, #0
    762c:	3836      	subs	r0, #54	; 0x36
    762e:	f006 fb1f 	bl	dc70 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7632:	f898 000e 	ldrb.w	r0, [r8, #14]
    7636:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    763a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    763e:	0000      	.short	0x0000
    7640:	20000130 	.word	0x20000130
    7644:	b570      	push	{r4, r5, r6, lr}
    7646:	4d07      	ldr	r5, [pc, #28]	; (7664 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x664>)
    7648:	4604      	mov	r4, r0
    764a:	f100 0151 	add.w	r1, r0, #81	; 0x51
    764e:	6868      	ldr	r0, [r5, #4]
    7650:	f006 f88d 	bl	d76e <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    7654:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    7658:	6868      	ldr	r0, [r5, #4]
    765a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    765e:	f006 b88c 	b.w	d77a <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    7662:	0000      	.short	0x0000
    7664:	20000130 	.word	0x20000130
    7668:	00006e89 	.word	0x00006e89
    766c:	00006d15 	.word	0x00006d15
    7670:	00006e05 	.word	0x00006e05
    7674:	00000000 	.word	0x00000000
    7678:	00006ddd 	.word	0x00006ddd
    767c:	00006e35 	.word	0x00006e35
    7680:	0000e1d1 	.word	0x0000e1d1
    7684:	0000e1d7 	.word	0x0000e1d7
    7688:	00007095 	.word	0x00007095
    768c:	000070b9 	.word	0x000070b9
    7690:	000075a5 	.word	0x000075a5
    7694:	00007684 	.word	0x00007684
    7698:	0000767c 	.word	0x0000767c
    769c:	00007678 	.word	0x00007678

000076a0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    76a0:	b510      	push	{r4, lr}
    76a2:	1e42      	subs	r2, r0, #1
    76a4:	2a02      	cmp	r2, #2
    76a6:	d901      	bls.n	76ac <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    76a8:	21ca      	movs	r1, #202	; 0xca
    76aa:	e009      	b.n	76c0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    76ac:	1e40      	subs	r0, r0, #1
    76ae:	2910      	cmp	r1, #16
    76b0:	d009      	beq.n	76c6 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    76b2:	2912      	cmp	r1, #18
    76b4:	d00c      	beq.n	76d0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    76b6:	2913      	cmp	r1, #19
    76b8:	d00a      	beq.n	76d0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    76ba:	2915      	cmp	r1, #21
    76bc:	d005      	beq.n	76ca <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    76be:	21d8      	movs	r1, #216	; 0xd8
    76c0:	202f      	movs	r0, #47	; 0x2f
    76c2:	f7fc fe8b 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76c6:	4905      	ldr	r1, [pc, #20]	; (76dc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    76c8:	e004      	b.n	76d4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    76ca:	4904      	ldr	r1, [pc, #16]	; (76dc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    76cc:	1d89      	adds	r1, r1, #6
    76ce:	e001      	b.n	76d4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    76d0:	4902      	ldr	r1, [pc, #8]	; (76dc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    76d2:	1f89      	subs	r1, r1, #6
    76d4:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    76d8:	bd10      	pop	{r4, pc}
    76da:	0000      	.short	0x0000
    76dc:	0000e3d6 	.word	0x0000e3d6

000076e0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    76e0:	1e42      	subs	r2, r0, #1
    76e2:	b510      	push	{r4, lr}
    76e4:	b2d2      	uxtb	r2, r2
    76e6:	2a01      	cmp	r2, #1
    76e8:	d903      	bls.n	76f2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    76ea:	291d      	cmp	r1, #29
    76ec:	d001      	beq.n	76f2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    76ee:	21ee      	movs	r1, #238	; 0xee
    76f0:	e00d      	b.n	770e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    76f2:	2913      	cmp	r1, #19
    76f4:	d013      	beq.n	771e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    76f6:	dc04      	bgt.n	7702 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    76f8:	2910      	cmp	r1, #16
    76fa:	d00b      	beq.n	7714 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    76fc:	2912      	cmp	r1, #18
    76fe:	d104      	bne.n	770a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    7700:	e00d      	b.n	771e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7702:	2915      	cmp	r1, #21
    7704:	d008      	beq.n	7718 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    7706:	291d      	cmp	r1, #29
    7708:	d00e      	beq.n	7728 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    770a:	f44f 7181 	mov.w	r1, #258	; 0x102
    770e:	202f      	movs	r0, #47	; 0x2f
    7710:	f7fc fe64 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7714:	4807      	ldr	r0, [pc, #28]	; (7734 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7716:	e004      	b.n	7722 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7718:	4806      	ldr	r0, [pc, #24]	; (7734 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    771a:	3008      	adds	r0, #8
    771c:	e001      	b.n	7722 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    771e:	4805      	ldr	r0, [pc, #20]	; (7734 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7720:	1d00      	adds	r0, r0, #4
    7722:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    7726:	bd10      	pop	{r4, pc}
    7728:	f240 315a 	movw	r1, #858	; 0x35a
    772c:	fb10 f001 	smulbb	r0, r0, r1
    7730:	bd10      	pop	{r4, pc}
    7732:	0000      	.short	0x0000
    7734:	0000e3c4 	.word	0x0000e3c4

00007738 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    7738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    773c:	4604      	mov	r4, r0
    773e:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    7742:	4616      	mov	r6, r2
    7744:	460d      	mov	r5, r1
    7746:	2800      	cmp	r0, #0
    7748:	d15e      	bne.n	7808 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    774a:	4621      	mov	r1, r4
    774c:	484c      	ldr	r0, [pc, #304]	; (7880 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x148>)
    774e:	f7fb f84f 	bl	27f0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7752:	4607      	mov	r7, r0
    7754:	2820      	cmp	r0, #32
    7756:	d057      	beq.n	7808 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    7758:	2250      	movs	r2, #80	; 0x50
    775a:	2100      	movs	r1, #0
    775c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    7760:	f004 fc13 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7764:	f884 70c8 	strb.w	r7, [r4, #200]	; 0xc8
    7768:	2701      	movs	r7, #1
    776a:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    776e:	f884 70e0 	strb.w	r7, [r4, #224]	; 0xe0
    7772:	b135      	cbz	r5, 7782 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    7774:	f7ff f842 	bl	67fc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    7778:	f000 0007 	and.w	r0, r0, #7
    777c:	1c40      	adds	r0, r0, #1
    777e:	f885 023c 	strb.w	r0, [r5, #572]	; 0x23c
    7782:	4620      	mov	r0, r4
    7784:	f006 ffdc 	bl	e740 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    7788:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    778c:	2002      	movs	r0, #2
    778e:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    7792:	f884 70f3 	strb.w	r7, [r4, #243]	; 0xf3
    7796:	2500      	movs	r5, #0
    7798:	46b8      	mov	r8, r7
    779a:	f804 5fe8 	strb.w	r5, [r4, #232]!
    779e:	f7fc f995 	bl	3acc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    77a2:	4607      	mov	r7, r0
    77a4:	f004 fa14 	bl	bbd0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    77a8:	8921      	ldrh	r1, [r4, #8]
    77aa:	3ce8      	subs	r4, #232	; 0xe8
    77ac:	4288      	cmp	r0, r1
    77ae:	d800      	bhi.n	77b2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    77b0:	4608      	mov	r0, r1
    77b2:	4438      	add	r0, r7
    77b4:	30cc      	adds	r0, #204	; 0xcc
    77b6:	b287      	uxth	r7, r0
    77b8:	4620      	mov	r0, r4
    77ba:	f006 fc9f 	bl	e0fc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    77be:	b330      	cbz	r0, 780e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    77c0:	f008 fc09 	bl	ffd6 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    77c4:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    77c8:	b281      	uxth	r1, r0
    77ca:	4630      	mov	r0, r6
    77cc:	f004 fa34 	bl	bc38 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    77d0:	4430      	add	r0, r6
    77d2:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    77d6:	3490      	adds	r4, #144	; 0x90
    77d8:	f7fb fa1a 	bl	2c10 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    77dc:	19c0      	adds	r0, r0, r7
    77de:	4169      	adcs	r1, r5
    77e0:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    77e4:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    77e8:	f824 5c6e 	strh.w	r5, [r4, #-110]
    77ec:	2001      	movs	r0, #1
    77ee:	f006 fde2 	bl	e3b6 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    77f2:	f500 7088 	add.w	r0, r0, #272	; 0x110
    77f6:	1a30      	subs	r0, r6, r0
    77f8:	6460      	str	r0, [r4, #68]	; 0x44
    77fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    77fe:	0841      	lsrs	r1, r0, #1
    7800:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    7804:	3c90      	subs	r4, #144	; 0x90
    7806:	e023      	b.n	7850 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    7808:	200c      	movs	r0, #12
    780a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    780e:	2100      	movs	r1, #0
    7810:	4620      	mov	r0, r4
    7812:	f006 fee7 	bl	e5e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    7816:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7884 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>
    781a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    781e:	2000      	movs	r0, #0
    7820:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    7824:	b139      	cbz	r1, 7836 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xfe>
    7826:	f7fe ffe9 	bl	67fc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    782a:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    782e:	fbb0 f2f1 	udiv	r2, r0, r1
    7832:	fb01 0012 	mls	r0, r1, r2, r0
    7836:	4407      	add	r7, r0
    7838:	f7fb f9ea 	bl	2c10 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    783c:	19c0      	adds	r0, r0, r7
    783e:	4169      	adcs	r1, r5
    7840:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    7844:	b19e      	cbz	r6, 786e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x136>
    7846:	1980      	adds	r0, r0, r6
    7848:	eb51 0105 	adcs.w	r1, r1, r5
    784c:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    7850:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    7854:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    7858:	f006 ff70 	bl	e73c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    785c:	b158      	cbz	r0, 7876 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13e>
    785e:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    7862:	2100      	movs	r1, #0
    7864:	4620      	mov	r0, r4
    7866:	f006 fc79 	bl	e15c <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    786a:	2000      	movs	r0, #0
    786c:	e7cd      	b.n	780a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    786e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7872:	0841      	lsrs	r1, r0, #1
    7874:	e7ea      	b.n	784c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x114>
    7876:	f240 11e7 	movw	r1, #487	; 0x1e7
    787a:	2030      	movs	r0, #48	; 0x30
    787c:	f7fc fdae 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7880:	0000e8b9 	.word	0x0000e8b9
    7884:	20000140 	.word	0x20000140

00007888 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    7888:	4901      	ldr	r1, [pc, #4]	; (7890 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    788a:	8088      	strh	r0, [r1, #4]
    788c:	4770      	bx	lr
    788e:	0000      	.short	0x0000
    7890:	20000140 	.word	0x20000140

00007894 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    7894:	4805      	ldr	r0, [pc, #20]	; (78ac <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    7896:	2100      	movs	r1, #0
    7898:	7001      	strb	r1, [r0, #0]
    789a:	2201      	movs	r2, #1
    789c:	7082      	strb	r2, [r0, #2]
    789e:	7041      	strb	r1, [r0, #1]
    78a0:	f242 7110 	movw	r1, #10000	; 0x2710
    78a4:	8081      	strh	r1, [r0, #4]
    78a6:	f000 b803 	b.w	78b0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    78aa:	0000      	.short	0x0000
    78ac:	20000140 	.word	0x20000140

000078b0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    78b0:	b51c      	push	{r2, r3, r4, lr}
    78b2:	4909      	ldr	r1, [pc, #36]	; (78d8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    78b4:	e9d1 0100 	ldrd	r0, r1, [r1]
    78b8:	e9cd 0100 	strd	r0, r1, [sp]
    78bc:	e002      	b.n	78c4 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    78be:	9800      	ldr	r0, [sp, #0]
    78c0:	f006 fdb5 	bl	e42e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    78c4:	4668      	mov	r0, sp
    78c6:	f7fc ffc3 	bl	4850 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    78ca:	2800      	cmp	r0, #0
    78cc:	d0f7      	beq.n	78be <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    78ce:	f000 f8ab 	bl	7a28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    78d2:	2000      	movs	r0, #0
    78d4:	bd1c      	pop	{r2, r3, r4, pc}
    78d6:	0000      	.short	0x0000
    78d8:	00008048 	.word	0x00008048

000078dc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    78dc:	4901      	ldr	r1, [pc, #4]	; (78e4 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    78de:	7008      	strb	r0, [r1, #0]
    78e0:	4770      	bx	lr
    78e2:	0000      	.short	0x0000
    78e4:	20000140 	.word	0x20000140

000078e8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    78e8:	4908      	ldr	r1, [pc, #32]	; (790c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    78ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    78ee:	fbb1 f1f2 	udiv	r1, r1, r2
    78f2:	b510      	push	{r4, lr}
    78f4:	f501 7125 	add.w	r1, r1, #660	; 0x294
    78f8:	f006 f9d3 	bl	dca2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    78fc:	f640 0148 	movw	r1, #2120	; 0x848
    7900:	4288      	cmp	r0, r1
    7902:	d300      	bcc.n	7906 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    7904:	4608      	mov	r0, r1
    7906:	b280      	uxth	r0, r0
    7908:	bd10      	pop	{r4, pc}
    790a:	0000      	.short	0x0000
    790c:	0001527d 	.word	0x0001527d

00007910 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    7910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7914:	4c10      	ldr	r4, [pc, #64]	; (7958 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    7916:	e9d4 5702 	ldrd	r5, r7, [r4, #8]
    791a:	f003 f9cd 	bl	acb8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    791e:	4606      	mov	r6, r0
    7920:	7820      	ldrb	r0, [r4, #0]
    7922:	b128      	cbz	r0, 7930 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    7924:	4632      	mov	r2, r6
    7926:	4639      	mov	r1, r7
    7928:	4628      	mov	r0, r5
    792a:	f005 fccc 	bl	d2c6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    792e:	4605      	mov	r5, r0
    7930:	68a0      	ldr	r0, [r4, #8]
    7932:	4285      	cmp	r5, r0
    7934:	d005      	beq.n	7942 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    7936:	6921      	ldr	r1, [r4, #16]
    7938:	1a28      	subs	r0, r5, r0
    793a:	4408      	add	r0, r1
    793c:	6120      	str	r0, [r4, #16]
    793e:	f7fb f899 	bl	2a74 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7942:	60a5      	str	r5, [r4, #8]
    7944:	42ae      	cmp	r6, r5
    7946:	d801      	bhi.n	794c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    7948:	7860      	ldrb	r0, [r4, #1]
    794a:	b110      	cbz	r0, 7952 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    794c:	2000      	movs	r0, #0
    794e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7952:	2001      	movs	r0, #1
    7954:	e7fb      	b.n	794e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    7956:	0000      	.short	0x0000
    7958:	20000140 	.word	0x20000140

0000795c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    795c:	b510      	push	{r4, lr}
    795e:	4604      	mov	r4, r0
    7960:	2906      	cmp	r1, #6
    7962:	d22e      	bcs.n	79c2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    7964:	e8df f001 	tbb	[pc, r1]
    7968:	14031105 	.word	0x14031105
    796c:	2815      	.short	0x2815
    796e:	2100      	movs	r1, #0
    7970:	e006      	b.n	7980 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    7972:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    7976:	b110      	cbz	r0, 797e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    7978:	4620      	mov	r0, r4
    797a:	f006 fe72 	bl	e662 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1dc>
    797e:	2101      	movs	r1, #1
    7980:	4620      	mov	r0, r4
    7982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7986:	f000 b8f7 	b.w	7b78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    798a:	2003      	movs	r0, #3
    798c:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    7990:	bd10      	pop	{r4, pc}
    7992:	f003 f997 	bl	acc4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    7996:	f8c4 029c 	str.w	r0, [r4, #668]	; 0x29c
    799a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    799e:	f003 fa55 	bl	ae4c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    79a2:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    79a6:	1a09      	subs	r1, r1, r0
    79a8:	4808      	ldr	r0, [pc, #32]	; (79cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    79aa:	6882      	ldr	r2, [r0, #8]
    79ac:	440a      	add	r2, r1
    79ae:	6082      	str	r2, [r0, #8]
    79b0:	68c2      	ldr	r2, [r0, #12]
    79b2:	4411      	add	r1, r2
    79b4:	60c1      	str	r1, [r0, #12]
    79b6:	bd10      	pop	{r4, pc}
    79b8:	4620      	mov	r0, r4
    79ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79be:	f006 be3b 	b.w	e638 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    79c2:	f240 7143 	movw	r1, #1859	; 0x743
    79c6:	2030      	movs	r0, #48	; 0x30
    79c8:	f7fc fd08 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79cc:	20000140 	.word	0x20000140

000079d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    79d0:	b570      	push	{r4, r5, r6, lr}
    79d2:	460c      	mov	r4, r1
    79d4:	4605      	mov	r5, r0
    79d6:	b112      	cbz	r2, 79de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    79d8:	f240 716d 	movw	r1, #1901	; 0x76d
    79dc:	e010      	b.n	7a00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    79de:	f003 f96b 	bl	acb8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    79e2:	4601      	mov	r1, r0
    79e4:	2200      	movs	r2, #0
    79e6:	4620      	mov	r0, r4
    79e8:	f006 ff1a 	bl	e820 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x39a>
    79ec:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    79f0:	462a      	mov	r2, r5
    79f2:	4905      	ldr	r1, [pc, #20]	; (7a08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    79f4:	f7fa fdb2 	bl	255c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    79f8:	2800      	cmp	r0, #0
    79fa:	d104      	bne.n	7a06 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    79fc:	f240 7156 	movw	r1, #1878	; 0x756
    7a00:	2030      	movs	r0, #48	; 0x30
    7a02:	f7fc fceb 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a06:	bd70      	pop	{r4, r5, r6, pc}
    7a08:	0000e95b 	.word	0x0000e95b
    7a0c:	b510      	push	{r4, lr}
    7a0e:	280c      	cmp	r0, #12
    7a10:	d304      	bcc.n	7a1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    7a12:	f240 3183 	movw	r1, #899	; 0x383
    7a16:	2006      	movs	r0, #6
    7a18:	f7fc fce0 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a1c:	4901      	ldr	r1, [pc, #4]	; (7a24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    7a1e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7a22:	bd10      	pop	{r4, pc}
    7a24:	00008064 	.word	0x00008064
    7a28:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7a2c:	4d15      	ldr	r5, [pc, #84]	; (7a84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>)
    7a2e:	2001      	movs	r0, #1
    7a30:	7068      	strb	r0, [r5, #1]
    7a32:	2400      	movs	r4, #0
    7a34:	f64f 76ff 	movw	r6, #65535	; 0xffff
    7a38:	e00b      	b.n	7a52 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x82>
    7a3a:	2100      	movs	r1, #0
    7a3c:	f005 f9b5 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7a40:	0007      	movs	r7, r0
    7a42:	d009      	beq.n	7a58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x88>
    7a44:	f897 0294 	ldrb.w	r0, [r7, #660]	; 0x294
    7a48:	f7fa fdba 	bl	25c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7a4c:	4638      	mov	r0, r7
    7a4e:	f006 feda 	bl	e806 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    7a52:	9400      	str	r4, [sp, #0]
    7a54:	9401      	str	r4, [sp, #4]
    7a56:	e00d      	b.n	7a74 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    7a58:	f240 111f 	movw	r1, #287	; 0x11f
    7a5c:	2030      	movs	r0, #48	; 0x30
    7a5e:	f7fc fcbd 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a62:	9800      	ldr	r0, [sp, #0]
    7a64:	b130      	cbz	r0, 7a74 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    7a66:	f890 124c 	ldrb.w	r1, [r0, #588]	; 0x24c
    7a6a:	b119      	cbz	r1, 7a74 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    7a6c:	8800      	ldrh	r0, [r0, #0]
    7a6e:	42b0      	cmp	r0, r6
    7a70:	d1e3      	bne.n	7a3a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a>
    7a72:	e004      	b.n	7a7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xae>
    7a74:	4668      	mov	r0, sp
    7a76:	f7fc feeb 	bl	4850 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7a7a:	2800      	cmp	r0, #0
    7a7c:	d0f1      	beq.n	7a62 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    7a7e:	706c      	strb	r4, [r5, #1]
    7a80:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    7a84:	20000140 	.word	0x20000140
    7a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7a8c:	4604      	mov	r4, r0
    7a8e:	4839      	ldr	r0, [pc, #228]	; (7b74 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>)
    7a90:	461e      	mov	r6, r3
    7a92:	4690      	mov	r8, r2
    7a94:	7880      	ldrb	r0, [r0, #2]
    7a96:	4689      	mov	r9, r1
    7a98:	2500      	movs	r5, #0
    7a9a:	2800      	cmp	r0, #0
    7a9c:	d063      	beq.n	7b66 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    7a9e:	f7fc f8eb 	bl	3c78 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7aa2:	b3e0      	cbz	r0, 7b1e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    7aa4:	f8b4 0238 	ldrh.w	r0, [r4, #568]	; 0x238
    7aa8:	2802      	cmp	r0, #2
    7aaa:	d35c      	bcc.n	7b66 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    7aac:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7ab0:	2802      	cmp	r0, #2
    7ab2:	d058      	beq.n	7b66 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    7ab4:	f894 0262 	ldrb.w	r0, [r4, #610]	; 0x262
    7ab8:	bb88      	cbnz	r0, 7b1e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    7aba:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    7abe:	f7ff ffa5 	bl	7a0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    7ac2:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7ac6:	b281      	uxth	r1, r0
    7ac8:	8031      	strh	r1, [r6, #0]
    7aca:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7ace:	2700      	movs	r7, #0
    7ad0:	2801      	cmp	r0, #1
    7ad2:	d00d      	beq.n	7af0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x120>
    7ad4:	6920      	ldr	r0, [r4, #16]
    7ad6:	f004 f8af 	bl	bc38 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7ada:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    7ade:	4442      	add	r2, r8
    7ae0:	eba2 0109 	sub.w	r1, r2, r9
    7ae4:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    7ae8:	1a82      	subs	r2, r0, r2
    7aea:	fb01 7502 	mla	r5, r1, r2, r7
    7aee:	e035      	b.n	7b5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x18c>
    7af0:	f894 0099 	ldrb.w	r0, [r4, #153]	; 0x99
    7af4:	2803      	cmp	r0, #3
    7af6:	d039      	beq.n	7b6c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19c>
    7af8:	2101      	movs	r1, #1
    7afa:	2000      	movs	r0, #0
    7afc:	f005 fcae 	bl	d45c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7b00:	6a21      	ldr	r1, [r4, #32]
    7b02:	1847      	adds	r7, r0, r1
    7b04:	8831      	ldrh	r1, [r6, #0]
    7b06:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    7b0a:	f004 f895 	bl	bc38 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7b0e:	f8d4 2240 	ldr.w	r2, [r4, #576]	; 0x240
    7b12:	f8d4 1248 	ldr.w	r1, [r4, #584]	; 0x248
    7b16:	1a82      	subs	r2, r0, r2
    7b18:	fb01 5502 	mla	r5, r1, r2, r5
    7b1c:	e000      	b.n	7b20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x150>
    7b1e:	e022      	b.n	7b66 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    7b20:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
    7b24:	8831      	ldrh	r1, [r6, #0]
    7b26:	4638      	mov	r0, r7
    7b28:	f004 f886 	bl	bc38 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7b2c:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    7b30:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    7b34:	1a41      	subs	r1, r0, r1
    7b36:	440d      	add	r5, r1
    7b38:	8831      	ldrh	r1, [r6, #0]
    7b3a:	6920      	ldr	r0, [r4, #16]
    7b3c:	f004 f87c 	bl	bc38 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7b40:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    7b44:	4442      	add	r2, r8
    7b46:	eba2 0109 	sub.w	r1, r2, r9
    7b4a:	f8d4 2248 	ldr.w	r2, [r4, #584]	; 0x248
    7b4e:	1a89      	subs	r1, r1, r2
    7b50:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    7b54:	1a82      	subs	r2, r0, r2
    7b56:	1e49      	subs	r1, r1, #1
    7b58:	fb01 5502 	mla	r5, r1, r2, r5
    7b5c:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    7b60:	2001      	movs	r0, #1
    7b62:	f884 0262 	strb.w	r0, [r4, #610]	; 0x262
    7b66:	4628      	mov	r0, r5
    7b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b6c:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    7b70:	e7c6      	b.n	7b00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    7b72:	0000      	.short	0x0000
    7b74:	20000140 	.word	0x20000140
    7b78:	b538      	push	{r3, r4, r5, lr}
    7b7a:	2500      	movs	r5, #0
    7b7c:	4604      	mov	r4, r0
    7b7e:	2901      	cmp	r1, #1
    7b80:	d102      	bne.n	7b88 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b8>
    7b82:	4810      	ldr	r0, [pc, #64]	; (7bc4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    7b84:	7840      	ldrb	r0, [r0, #1]
    7b86:	b170      	cbz	r0, 7ba6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d6>
    7b88:	2004      	movs	r0, #4
    7b8a:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    7b8e:	bf00      	nop
    7b90:	f006 fd60 	bl	e654 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    7b94:	f8a4 5292 	strh.w	r5, [r4, #658]	; 0x292
    7b98:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    7b9c:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    7ba0:	f884 5261 	strb.w	r5, [r4, #609]	; 0x261
    7ba4:	bd38      	pop	{r3, r4, r5, pc}
    7ba6:	9500      	str	r5, [sp, #0]
    7ba8:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    7bac:	2301      	movs	r3, #1
    7bae:	2200      	movs	r2, #0
    7bb0:	4620      	mov	r0, r4
    7bb2:	f000 f809 	bl	7bc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    7bb6:	2800      	cmp	r0, #0
    7bb8:	d0ea      	beq.n	7b90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    7bba:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
    7bbe:	2030      	movs	r0, #48	; 0x30
    7bc0:	f7fc fc0c 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bc4:	20000140 	.word	0x20000140
    7bc8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7bcc:	b08b      	sub	sp, #44	; 0x2c
    7bce:	4604      	mov	r4, r0
    7bd0:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    7bd4:	4699      	mov	r9, r3
    7bd6:	460f      	mov	r7, r1
    7bd8:	9307      	str	r3, [sp, #28]
    7bda:	9005      	str	r0, [sp, #20]
    7bdc:	f008 f9fb 	bl	ffd6 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    7be0:	4605      	mov	r5, r0
    7be2:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    7be6:	f7ff ff11 	bl	7a0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    7bea:	4428      	add	r0, r5
    7bec:	f8ad 0004 	strh.w	r0, [sp, #4]
    7bf0:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    7bf4:	280e      	cmp	r0, #14
    7bf6:	d004      	beq.n	7c02 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    7bf8:	2000      	movs	r0, #0
    7bfa:	9008      	str	r0, [sp, #32]
    7bfc:	980d      	ldr	r0, [sp, #52]	; 0x34
    7bfe:	b110      	cbz	r0, 7c06 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    7c00:	e02e      	b.n	7c60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7c02:	2001      	movs	r0, #1
    7c04:	e7f9      	b.n	7bfa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    7c06:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7c0a:	2803      	cmp	r0, #3
    7c0c:	d128      	bne.n	7c60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7c0e:	9808      	ldr	r0, [sp, #32]
    7c10:	b330      	cbz	r0, 7c60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7c12:	f8b4 02bc 	ldrh.w	r0, [r4, #700]	; 0x2bc
    7c16:	42b8      	cmp	r0, r7
    7c18:	d122      	bne.n	7c60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    7c1a:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    7c1e:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
    7c22:	6920      	ldr	r0, [r4, #16]
    7c24:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
    7c28:	f8b4 0292 	ldrh.w	r0, [r4, #658]	; 0x292
    7c2c:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
    7c30:	4408      	add	r0, r1
    7c32:	f8c4 0248 	str.w	r0, [r4, #584]	; 0x248
    7c36:	4620      	mov	r0, r4
    7c38:	f006 ffa7 	bl	eb8a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    7c3c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
    7c40:	6220      	str	r0, [r4, #32]
    7c42:	f8b4 02be 	ldrh.w	r0, [r4, #702]	; 0x2be
    7c46:	84a0      	strh	r0, [r4, #36]	; 0x24
    7c48:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
    7c4c:	6120      	str	r0, [r4, #16]
    7c4e:	f8b4 02c8 	ldrh.w	r0, [r4, #712]	; 0x2c8
    7c52:	8320      	strh	r0, [r4, #24]
    7c54:	f8b4 02ca 	ldrh.w	r0, [r4, #714]	; 0x2ca
    7c58:	8360      	strh	r0, [r4, #26]
    7c5a:	2002      	movs	r0, #2
    7c5c:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    7c60:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    7c64:	f504 751a 	add.w	r5, r4, #616	; 0x268
    7c68:	1a38      	subs	r0, r7, r0
    7c6a:	fa0f fa80 	sxth.w	sl, r0
    7c6e:	f8b4 0290 	ldrh.w	r0, [r4, #656]	; 0x290
    7c72:	1a38      	subs	r0, r7, r0
    7c74:	fa0f f880 	sxth.w	r8, r0
    7c78:	f1b8 0f00 	cmp.w	r8, #0
    7c7c:	da08      	bge.n	7c90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    7c7e:	f8d4 0280 	ldr.w	r0, [r4, #640]	; 0x280
    7c82:	f8d4 1284 	ldr.w	r1, [r4, #644]	; 0x284
    7c86:	46d0      	mov	r8, sl
    7c88:	e9c4 01a2 	strd	r0, r1, [r4, #648]	; 0x288
    7c8c:	2001      	movs	r0, #1
    7c8e:	9007      	str	r0, [sp, #28]
    7c90:	ab01      	add	r3, sp, #4
    7c92:	4652      	mov	r2, sl
    7c94:	4641      	mov	r1, r8
    7c96:	4620      	mov	r0, r4
    7c98:	f7ff fef6 	bl	7a88 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb8>
    7c9c:	9004      	str	r0, [sp, #16]
    7c9e:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7ca2:	f8df b334 	ldr.w	fp, [pc, #820]	; 7fd8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    7ca6:	b140      	cbz	r0, 7cba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2ea>
    7ca8:	2801      	cmp	r0, #1
    7caa:	d07d      	beq.n	7da8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    7cac:	2802      	cmp	r0, #2
    7cae:	d051      	beq.n	7d54 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x384>
    7cb0:	2803      	cmp	r0, #3
    7cb2:	d07a      	beq.n	7daa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3da>
    7cb4:	f240 5146 	movw	r1, #1350	; 0x546
    7cb8:	e18a      	b.n	7fd0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    7cba:	2101      	movs	r1, #1
    7cbc:	2000      	movs	r0, #0
    7cbe:	f005 fbcd 	bl	d45c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7cc2:	4606      	mov	r6, r0
    7cc4:	6a20      	ldr	r0, [r4, #32]
    7cc6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7cca:	4430      	add	r0, r6
    7ccc:	f003 ffb4 	bl	bc38 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7cd0:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    7cd4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7cd8:	6920      	ldr	r0, [r4, #16]
    7cda:	f003 ffad 	bl	bc38 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7cde:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    7ce2:	a907      	add	r1, sp, #28
    7ce4:	a806      	add	r0, sp, #24
    7ce6:	f002 ff4f 	bl	ab88 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    7cea:	e9d4 01a2 	ldrd	r0, r1, [r4, #648]	; 0x288
    7cee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    7cf2:	f7fa ff9f 	bl	2c34 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    7cf6:	4682      	mov	sl, r0
    7cf8:	4620      	mov	r0, r4
    7cfa:	f006 fc9d 	bl	e638 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    7cfe:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7d02:	f8d4 8298 	ldr.w	r8, [r4, #664]	; 0x298
    7d06:	f003 f8cd 	bl	aea4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7d0a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7d0e:	4401      	add	r1, r0
    7d10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7d14:	fbb1 f0f0 	udiv	r0, r1, r0
    7d18:	6a21      	ldr	r1, [r4, #32]
    7d1a:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    7d1e:	4431      	add	r1, r6
    7d20:	1a08      	subs	r0, r1, r0
    7d22:	1a81      	subs	r1, r0, r2
    7d24:	4441      	add	r1, r8
    7d26:	3920      	subs	r1, #32
    7d28:	eba1 060a 	sub.w	r6, r1, sl
    7d2c:	0050      	lsls	r0, r2, #1
    7d2e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    7d30:	3060      	adds	r0, #96	; 0x60
    7d32:	4401      	add	r1, r0
    7d34:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7d38:	f006 fcee 	bl	e718 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    7d3c:	3022      	adds	r0, #34	; 0x22
    7d3e:	f8cb 0014 	str.w	r0, [fp, #20]
    7d42:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
    7d46:	1a30      	subs	r0, r6, r0
    7d48:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    7d4c:	d258      	bcs.n	7e00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    7d4e:	f240 41df 	movw	r1, #1247	; 0x4df
    7d52:	e13d      	b.n	7fd0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    7d54:	6a21      	ldr	r1, [r4, #32]
    7d56:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    7d5a:	4408      	add	r0, r1
    7d5c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7d60:	f003 ff6a 	bl	bc38 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7d64:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    7d68:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7d6c:	6920      	ldr	r0, [r4, #16]
    7d6e:	f003 ff63 	bl	bc38 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7d72:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    7d76:	4620      	mov	r0, r4
    7d78:	f006 fc5e 	bl	e638 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    7d7c:	f8b4 0226 	ldrh.w	r0, [r4, #550]	; 0x226
    7d80:	bb10      	cbnz	r0, 7dc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    7d82:	f1b9 0f00 	cmp.w	r9, #0
    7d86:	d01f      	beq.n	7dc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    7d88:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    7d8c:	4640      	mov	r0, r8
    7d8e:	f003 f889 	bl	aea4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7d92:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7d96:	4401      	add	r1, r0
    7d98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7d9c:	fbb1 f0f0 	udiv	r0, r1, r0
    7da0:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    7da4:	4408      	add	r0, r1
    7da6:	e001      	b.n	7dac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3dc>
    7da8:	e02b      	b.n	7e02 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    7daa:	e047      	b.n	7e3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    7dac:	6a22      	ldr	r2, [r4, #32]
    7dae:	f8d4 1244 	ldr.w	r1, [r4, #580]	; 0x244
    7db2:	4411      	add	r1, r2
    7db4:	1a0e      	subs	r6, r1, r0
    7db6:	4640      	mov	r0, r8
    7db8:	f003 f848 	bl	ae4c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7dbc:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    7dc0:	1a08      	subs	r0, r1, r0
    7dc2:	4406      	add	r6, r0
    7dc4:	3e20      	subs	r6, #32
    7dc6:	e006      	b.n	7dd6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x406>
    7dc8:	6a21      	ldr	r1, [r4, #32]
    7dca:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    7dce:	4408      	add	r0, r1
    7dd0:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    7dd4:	1a46      	subs	r6, r0, r1
    7dd6:	f8d4 2248 	ldr.w	r2, [r4, #584]	; 0x248
    7dda:	f8d4 1240 	ldr.w	r1, [r4, #576]	; 0x240
    7dde:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
    7de2:	fb01 0002 	mla	r0, r1, r2, r0
    7de6:	0040      	lsls	r0, r0, #1
    7de8:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    7dea:	3060      	adds	r0, #96	; 0x60
    7dec:	4401      	add	r1, r0
    7dee:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7df2:	f006 fc91 	bl	e718 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    7df6:	f8cb 0014 	str.w	r0, [fp, #20]
    7dfa:	2001      	movs	r0, #1
    7dfc:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    7e00:	e061      	b.n	7ec6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f6>
    7e02:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    7e06:	6920      	ldr	r0, [r4, #16]
    7e08:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
    7e0c:	1a86      	subs	r6, r0, r2
    7e0e:	eb01 000a 	add.w	r0, r1, sl
    7e12:	f8d4 1248 	ldr.w	r1, [r4, #584]	; 0x248
    7e16:	f8d4 c240 	ldr.w	ip, [r4, #576]	; 0x240
    7e1a:	1a40      	subs	r0, r0, r1
    7e1c:	f8d4 3250 	ldr.w	r3, [r4, #592]	; 0x250
    7e20:	1e40      	subs	r0, r0, #1
    7e22:	fb0c 3101 	mla	r1, ip, r1, r3
    7e26:	fb00 1002 	mla	r0, r0, r2, r1
    7e2a:	0040      	lsls	r0, r0, #1
    7e2c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    7e2e:	3060      	adds	r0, #96	; 0x60
    7e30:	4401      	add	r1, r0
    7e32:	fb06 f608 	mul.w	r6, r6, r8
    7e36:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7e3a:	e040      	b.n	7ebe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    7e3c:	6920      	ldr	r0, [r4, #16]
    7e3e:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    7e42:	fb00 f008 	mul.w	r0, r0, r8
    7e46:	fb08 0611 	mls	r6, r8, r1, r0
    7e4a:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
    7e4e:	2826      	cmp	r0, #38	; 0x26
    7e50:	d003      	beq.n	7e5a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    7e52:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    7e56:	2826      	cmp	r0, #38	; 0x26
    7e58:	d109      	bne.n	7e6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    7e5a:	f8b4 02bc 	ldrh.w	r0, [r4, #700]	; 0x2bc
    7e5e:	1a38      	subs	r0, r7, r0
    7e60:	b200      	sxth	r0, r0
    7e62:	2800      	cmp	r0, #0
    7e64:	db03      	blt.n	7e6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    7e66:	f894 02bf 	ldrb.w	r0, [r4, #703]	; 0x2bf
    7e6a:	b100      	cbz	r0, 7e6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    7e6c:	9005      	str	r0, [sp, #20]
    7e6e:	9807      	ldr	r0, [sp, #28]
    7e70:	b1d8      	cbz	r0, 7eaa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    7e72:	f8b4 0226 	ldrh.w	r0, [r4, #550]	; 0x226
    7e76:	b9c0      	cbnz	r0, 7eaa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    7e78:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    7e7c:	2800      	cmp	r0, #0
    7e7e:	d07d      	beq.n	7f7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    7e80:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7e84:	f003 f80e 	bl	aea4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7e88:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7e8c:	4401      	add	r1, r0
    7e8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7e92:	fbb1 f0f0 	udiv	r0, r1, r0
    7e96:	1a36      	subs	r6, r6, r0
    7e98:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7e9c:	f002 ffd6 	bl	ae4c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7ea0:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    7ea4:	1a08      	subs	r0, r1, r0
    7ea6:	4406      	add	r6, r0
    7ea8:	3e20      	subs	r6, #32
    7eaa:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
    7eae:	eb01 000a 	add.w	r0, r1, sl
    7eb2:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    7eb6:	4348      	muls	r0, r1
    7eb8:	0041      	lsls	r1, r0, #1
    7eba:	3160      	adds	r1, #96	; 0x60
    7ebc:	9805      	ldr	r0, [sp, #20]
    7ebe:	f006 fc2b 	bl	e718 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    7ec2:	f8cb 0014 	str.w	r0, [fp, #20]
    7ec6:	9804      	ldr	r0, [sp, #16]
    7ec8:	f8db 2014 	ldr.w	r2, [fp, #20]
    7ecc:	1a31      	subs	r1, r6, r0
    7ece:	f8d4 6254 	ldr.w	r6, [r4, #596]	; 0x254
    7ed2:	6920      	ldr	r0, [r4, #16]
    7ed4:	1b80      	subs	r0, r0, r6
    7ed6:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    7eda:	f8cb 0018 	str.w	r0, [fp, #24]
    7ede:	4282      	cmp	r2, r0
    7ee0:	d800      	bhi.n	7ee4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    7ee2:	4610      	mov	r0, r2
    7ee4:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
    7ee8:	2600      	movs	r6, #0
    7eea:	702e      	strb	r6, [r5, #0]
    7eec:	2064      	movs	r0, #100	; 0x64
    7eee:	8128      	strh	r0, [r5, #8]
    7ef0:	e9d4 20a2 	ldrd	r2, r0, [r4, #648]	; 0x288
    7ef4:	1851      	adds	r1, r2, r1
    7ef6:	4170      	adcs	r0, r6
    7ef8:	e9c5 1004 	strd	r1, r0, [r5, #16]
    7efc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7f00:	f005 fea0 	bl	dc44 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    7f04:	f8d4 1220 	ldr.w	r1, [r4, #544]	; 0x220
    7f08:	4408      	add	r0, r1
    7f0a:	6068      	str	r0, [r5, #4]
    7f0c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    7f10:	e9c4 01a2 	strd	r0, r1, [r4, #648]	; 0x288
    7f14:	f8a4 7290 	strh.w	r7, [r4, #656]	; 0x290
    7f18:	72ae      	strb	r6, [r5, #10]
    7f1a:	f8b4 0210 	ldrh.w	r0, [r4, #528]	; 0x210
    7f1e:	1bc0      	subs	r0, r0, r7
    7f20:	b200      	sxth	r0, r0
    7f22:	2800      	cmp	r0, #0
    7f24:	dd01      	ble.n	7f2a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x55a>
    7f26:	2002      	movs	r0, #2
    7f28:	72a8      	strb	r0, [r5, #10]
    7f2a:	9808      	ldr	r0, [sp, #32]
    7f2c:	b338      	cbz	r0, 7f7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    7f2e:	f1b9 0f00 	cmp.w	r9, #0
    7f32:	d01c      	beq.n	7f6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    7f34:	f8b4 1238 	ldrh.w	r1, [r4, #568]	; 0x238
    7f38:	b3f1      	cbz	r1, 7fb8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5e8>
    7f3a:	f8b4 023a 	ldrh.w	r0, [r4, #570]	; 0x23a
    7f3e:	bf00      	nop
    7f40:	f8a4 023a 	strh.w	r0, [r4, #570]	; 0x23a
    7f44:	f894 223c 	ldrb.w	r2, [r4, #572]	; 0x23c
    7f48:	1c40      	adds	r0, r0, #1
    7f4a:	4342      	muls	r2, r0
    7f4c:	428a      	cmp	r2, r1
    7f4e:	d20e      	bcs.n	7f6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    7f50:	7aa8      	ldrb	r0, [r5, #10]
    7f52:	b160      	cbz	r0, 7f6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    7f54:	72ae      	strb	r6, [r5, #10]
    7f56:	f8b4 023a 	ldrh.w	r0, [r4, #570]	; 0x23a
    7f5a:	1c40      	adds	r0, r0, #1
    7f5c:	f8a4 023a 	strh.w	r0, [r4, #570]	; 0x23a
    7f60:	f7fe fc46 	bl	67f0 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    7f64:	f000 0007 	and.w	r0, r0, #7
    7f68:	1c40      	adds	r0, r0, #1
    7f6a:	f884 023c 	strb.w	r0, [r4, #572]	; 0x23c
    7f6e:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    7f72:	4629      	mov	r1, r5
    7f74:	f006 fbe2 	bl	e73c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    7f78:	b340      	cbz	r0, 7fcc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    7f7a:	e001      	b.n	7f80 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    7f7c:	e009      	b.n	7f92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c2>
    7f7e:	e00b      	b.n	7f98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
    7f80:	980d      	ldr	r0, [sp, #52]	; 0x34
    7f82:	f080 0001 	eor.w	r0, r0, #1
    7f86:	f884 0260 	strb.w	r0, [r4, #608]	; 0x260
    7f8a:	2000      	movs	r0, #0
    7f8c:	b00f      	add	sp, #60	; 0x3c
    7f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f92:	f240 5131 	movw	r1, #1329	; 0x531
    7f96:	e01b      	b.n	7fd0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    7f98:	f1b9 0f00 	cmp.w	r9, #0
    7f9c:	d1ca      	bne.n	7f34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    7f9e:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    7fa2:	2800      	cmp	r0, #0
    7fa4:	d0e3      	beq.n	7f6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    7fa6:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    7faa:	6920      	ldr	r0, [r4, #16]
    7fac:	1a41      	subs	r1, r0, r1
    7fae:	4628      	mov	r0, r5
    7fb0:	f005 fa66 	bl	d480 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    7fb4:	0400      	lsls	r0, r0, #16
    7fb6:	e000      	b.n	7fba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ea>
    7fb8:	e006      	b.n	7fc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    7fba:	0c00      	lsrs	r0, r0, #16
    7fbc:	d0d7      	beq.n	7f6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    7fbe:	9918      	ldr	r1, [sp, #96]	; 0x60
    7fc0:	b101      	cbz	r1, 7fc4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f4>
    7fc2:	8008      	strh	r0, [r1, #0]
    7fc4:	2001      	movs	r0, #1
    7fc6:	e7e1      	b.n	7f8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5bc>
    7fc8:	2000      	movs	r0, #0
    7fca:	e7b9      	b.n	7f40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    7fcc:	f240 518f 	movw	r1, #1423	; 0x58f
    7fd0:	2030      	movs	r0, #48	; 0x30
    7fd2:	f7fc fa03 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fd6:	0000      	.short	0x0000
    7fd8:	20000140 	.word	0x20000140
    7fdc:	b570      	push	{r4, r5, r6, lr}
    7fde:	4604      	mov	r4, r0
    7fe0:	f003 fdf6 	bl	bbd0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7fe4:	2864      	cmp	r0, #100	; 0x64
    7fe6:	d901      	bls.n	7fec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61c>
    7fe8:	4605      	mov	r5, r0
    7fea:	e000      	b.n	7fee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61e>
    7fec:	2564      	movs	r5, #100	; 0x64
    7fee:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7ff2:	2128      	movs	r1, #40	; 0x28
    7ff4:	f006 faae 	bl	e554 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    7ff8:	4428      	add	r0, r5
    7ffa:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    7ffe:	f500 7010 	add.w	r0, r0, #576	; 0x240
    8002:	180e      	adds	r6, r1, r0
    8004:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8008:	2128      	movs	r1, #40	; 0x28
    800a:	f006 faa3 	bl	e554 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    800e:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    8012:	4620      	mov	r0, r4
    8014:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8016:	f005 fdb4 	bl	db82 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    801a:	4605      	mov	r5, r0
    801c:	4632      	mov	r2, r6
    801e:	4620      	mov	r0, r4
    8020:	6921      	ldr	r1, [r4, #16]
    8022:	f005 fdae 	bl	db82 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8026:	4907      	ldr	r1, [pc, #28]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
    8028:	4285      	cmp	r5, r0
    802a:	60c8      	str	r0, [r1, #12]
    802c:	d200      	bcs.n	8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>
    802e:	4628      	mov	r0, r5
    8030:	6088      	str	r0, [r1, #8]
    8032:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    8036:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    803a:	6108      	str	r0, [r1, #16]
    803c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8040:	f7fa bd18 	b.w	2a74 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8044:	20000140 	.word	0x20000140
    8048:	00000000 	.word	0x00000000
    804c:	00010000 	.word	0x00010000
    8050:	00000000 	.word	0x00000000
    8054:	00010000 	.word	0x00010000
    8058:	00000000 	.word	0x00000000
    805c:	00001e14 	.word	0x00001e14
    8060:	00001130 	.word	0x00001130
    8064:	00fa01f4 	.word	0x00fa01f4
    8068:	00640096 	.word	0x00640096
    806c:	0032004b 	.word	0x0032004b
    8070:	0014001e 	.word	0x0014001e
    8074:	0005000a 	.word	0x0005000a
    8078:	00010002 	.word	0x00010002

0000807c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    807c:	4806      	ldr	r0, [pc, #24]	; (8098 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    807e:	4905      	ldr	r1, [pc, #20]	; (8094 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    8080:	6501      	str	r1, [r0, #80]	; 0x50
    8082:	4906      	ldr	r1, [pc, #24]	; (809c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    8084:	6541      	str	r1, [r0, #84]	; 0x54
    8086:	4807      	ldr	r0, [pc, #28]	; (80a4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    8088:	4905      	ldr	r1, [pc, #20]	; (80a0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    808a:	6501      	str	r1, [r0, #80]	; 0x50
    808c:	4906      	ldr	r1, [pc, #24]	; (80a8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    808e:	6541      	str	r1, [r0, #84]	; 0x54
    8090:	4770      	bx	lr
    8092:	0000      	.short	0x0000
    8094:	00009411 	.word	0x00009411
    8098:	20000174 	.word	0x20000174
    809c:	000094f5 	.word	0x000094f5
    80a0:	0000ee39 	.word	0x0000ee39
    80a4:	20000220 	.word	0x20000220
    80a8:	0000ee63 	.word	0x0000ee63

000080ac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    80ac:	481e      	ldr	r0, [pc, #120]	; (8128 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    80ae:	491d      	ldr	r1, [pc, #116]	; (8124 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    80b0:	6081      	str	r1, [r0, #8]
    80b2:	491e      	ldr	r1, [pc, #120]	; (812c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    80b4:	6041      	str	r1, [r0, #4]
    80b6:	491e      	ldr	r1, [pc, #120]	; (8130 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    80b8:	6001      	str	r1, [r0, #0]
    80ba:	491e      	ldr	r1, [pc, #120]	; (8134 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    80bc:	6281      	str	r1, [r0, #40]	; 0x28
    80be:	491e      	ldr	r1, [pc, #120]	; (8138 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    80c0:	62c1      	str	r1, [r0, #44]	; 0x2c
    80c2:	491e      	ldr	r1, [pc, #120]	; (813c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    80c4:	60c1      	str	r1, [r0, #12]
    80c6:	491e      	ldr	r1, [pc, #120]	; (8140 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    80c8:	6181      	str	r1, [r0, #24]
    80ca:	491e      	ldr	r1, [pc, #120]	; (8144 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    80cc:	6301      	str	r1, [r0, #48]	; 0x30
    80ce:	491e      	ldr	r1, [pc, #120]	; (8148 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    80d0:	6201      	str	r1, [r0, #32]
    80d2:	491e      	ldr	r1, [pc, #120]	; (814c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    80d4:	64c1      	str	r1, [r0, #76]	; 0x4c
    80d6:	491e      	ldr	r1, [pc, #120]	; (8150 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    80d8:	6481      	str	r1, [r0, #72]	; 0x48
    80da:	491e      	ldr	r1, [pc, #120]	; (8154 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    80dc:	6441      	str	r1, [r0, #68]	; 0x44
    80de:	491e      	ldr	r1, [pc, #120]	; (8158 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    80e0:	6341      	str	r1, [r0, #52]	; 0x34
    80e2:	491e      	ldr	r1, [pc, #120]	; (815c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    80e4:	61c1      	str	r1, [r0, #28]
    80e6:	491e      	ldr	r1, [pc, #120]	; (8160 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    80e8:	6241      	str	r1, [r0, #36]	; 0x24
    80ea:	481f      	ldr	r0, [pc, #124]	; (8168 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    80ec:	491d      	ldr	r1, [pc, #116]	; (8164 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    80ee:	6081      	str	r1, [r0, #8]
    80f0:	491e      	ldr	r1, [pc, #120]	; (816c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    80f2:	61c1      	str	r1, [r0, #28]
    80f4:	491e      	ldr	r1, [pc, #120]	; (8170 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    80f6:	6241      	str	r1, [r0, #36]	; 0x24
    80f8:	491e      	ldr	r1, [pc, #120]	; (8174 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    80fa:	62c1      	str	r1, [r0, #44]	; 0x2c
    80fc:	491e      	ldr	r1, [pc, #120]	; (8178 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    80fe:	6101      	str	r1, [r0, #16]
    8100:	491e      	ldr	r1, [pc, #120]	; (817c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    8102:	6141      	str	r1, [r0, #20]
    8104:	491e      	ldr	r1, [pc, #120]	; (8180 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    8106:	6441      	str	r1, [r0, #68]	; 0x44
    8108:	491e      	ldr	r1, [pc, #120]	; (8184 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    810a:	6341      	str	r1, [r0, #52]	; 0x34
    810c:	491e      	ldr	r1, [pc, #120]	; (8188 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    810e:	6181      	str	r1, [r0, #24]
    8110:	491e      	ldr	r1, [pc, #120]	; (818c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    8112:	6301      	str	r1, [r0, #48]	; 0x30
    8114:	491e      	ldr	r1, [pc, #120]	; (8190 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    8116:	6481      	str	r1, [r0, #72]	; 0x48
    8118:	491e      	ldr	r1, [pc, #120]	; (8194 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    811a:	64c1      	str	r1, [r0, #76]	; 0x4c
    811c:	491e      	ldr	r1, [pc, #120]	; (8198 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    811e:	6381      	str	r1, [r0, #56]	; 0x38
    8120:	4770      	bx	lr
    8122:	0000      	.short	0x0000
    8124:	000097f9 	.word	0x000097f9
    8128:	20000174 	.word	0x20000174
    812c:	000091ed 	.word	0x000091ed
    8130:	00009255 	.word	0x00009255
    8134:	0000ecfb 	.word	0x0000ecfb
    8138:	0000ed45 	.word	0x0000ed45
    813c:	00009311 	.word	0x00009311
    8140:	0000ed5d 	.word	0x0000ed5d
    8144:	00009929 	.word	0x00009929
    8148:	000093c9 	.word	0x000093c9
    814c:	0000eccd 	.word	0x0000eccd
    8150:	0000eca7 	.word	0x0000eca7
    8154:	00009799 	.word	0x00009799
    8158:	000097c9 	.word	0x000097c9
    815c:	00009831 	.word	0x00009831
    8160:	000093d5 	.word	0x000093d5
    8164:	0000f02f 	.word	0x0000f02f
    8168:	20000220 	.word	0x20000220
    816c:	00009a39 	.word	0x00009a39
    8170:	0000ee35 	.word	0x0000ee35
    8174:	0000eecd 	.word	0x0000eecd
    8178:	0000ee0f 	.word	0x0000ee0f
    817c:	0000ef8f 	.word	0x0000ef8f
    8180:	0000ef3d 	.word	0x0000ef3d
    8184:	0000ef6d 	.word	0x0000ef6d
    8188:	0000efad 	.word	0x0000efad
    818c:	0000f051 	.word	0x0000f051
    8190:	0000ee93 	.word	0x0000ee93
    8194:	0000eebd 	.word	0x0000eebd
    8198:	0000ef8b 	.word	0x0000ef8b

0000819c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    819c:	4806      	ldr	r0, [pc, #24]	; (81b8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    819e:	4905      	ldr	r1, [pc, #20]	; (81b4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    81a0:	6581      	str	r1, [r0, #88]	; 0x58
    81a2:	4906      	ldr	r1, [pc, #24]	; (81bc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    81a4:	6601      	str	r1, [r0, #96]	; 0x60
    81a6:	4807      	ldr	r0, [pc, #28]	; (81c4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    81a8:	4905      	ldr	r1, [pc, #20]	; (81c0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    81aa:	6581      	str	r1, [r0, #88]	; 0x58
    81ac:	4906      	ldr	r1, [pc, #24]	; (81c8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    81ae:	65c1      	str	r1, [r0, #92]	; 0x5c
    81b0:	4770      	bx	lr
    81b2:	0000      	.short	0x0000
    81b4:	0000956d 	.word	0x0000956d
    81b8:	20000174 	.word	0x20000174
    81bc:	00009649 	.word	0x00009649
    81c0:	0000eef3 	.word	0x0000eef3
    81c4:	20000220 	.word	0x20000220
    81c8:	0000ef1d 	.word	0x0000ef1d

000081cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    81cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81ce:	4c7c      	ldr	r4, [pc, #496]	; (83c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    81d0:	2101      	movs	r1, #1
    81d2:	f1a4 0610 	sub.w	r6, r4, #16
    81d6:	7021      	strb	r1, [r4, #0]
    81d8:	2500      	movs	r5, #0
    81da:	6060      	str	r0, [r4, #4]
    81dc:	8075      	strh	r5, [r6, #2]
    81de:	7075      	strb	r5, [r6, #1]
    81e0:	7035      	strb	r5, [r6, #0]
    81e2:	f880 121b 	strb.w	r1, [r0, #539]	; 0x21b
    81e6:	8800      	ldrh	r0, [r0, #0]
    81e8:	f7fc fd06 	bl	4bf8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    81ec:	b180      	cbz	r0, 8210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    81ee:	6860      	ldr	r0, [r4, #4]
    81f0:	8800      	ldrh	r0, [r0, #0]
    81f2:	f7fc ff6b 	bl	50cc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    81f6:	6860      	ldr	r0, [r4, #4]
    81f8:	8800      	ldrh	r0, [r0, #0]
    81fa:	f7fc ff0f 	bl	501c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    81fe:	6860      	ldr	r0, [r4, #4]
    8200:	f8b0 1212 	ldrh.w	r1, [r0, #530]	; 0x212
    8204:	b1c9      	cbz	r1, 823a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    8206:	3080      	adds	r0, #128	; 0x80
    8208:	f006 fd04 	bl	ec14 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    820c:	b118      	cbz	r0, 8216 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    820e:	e014      	b.n	823a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    8210:	f640 41dc 	movw	r1, #3292	; 0xcdc
    8214:	e06c      	b.n	82f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    8216:	6860      	ldr	r0, [r4, #4]
    8218:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    821c:	f88d 1000 	strb.w	r1, [sp]
    8220:	9900      	ldr	r1, [sp, #0]
    8222:	9100      	str	r1, [sp, #0]
    8224:	f89d 1000 	ldrb.w	r1, [sp]
    8228:	b139      	cbz	r1, 823a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    822a:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    822e:	2301      	movs	r3, #1
    8230:	4619      	mov	r1, r3
    8232:	3080      	adds	r0, #128	; 0x80
    8234:	f005 f85a 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8238:	b180      	cbz	r0, 825c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    823a:	6860      	ldr	r0, [r4, #4]
    823c:	3080      	adds	r0, #128	; 0x80
    823e:	f006 fce9 	bl	ec14 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8242:	b128      	cbz	r0, 8250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    8244:	6860      	ldr	r0, [r4, #4]
    8246:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
    824a:	bf00      	nop
    824c:	f000 fbbc 	bl	89c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fc>
    8250:	6860      	ldr	r0, [r4, #4]
    8252:	f890 121d 	ldrb.w	r1, [r0, #541]	; 0x21d
    8256:	b189      	cbz	r1, 827c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    8258:	80b5      	strh	r5, [r6, #4]
    825a:	e01e      	b.n	829a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    825c:	6860      	ldr	r0, [r4, #4]
    825e:	f8a0 50c8 	strh.w	r5, [r0, #200]	; 0xc8
    8262:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    8266:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    826a:	2100      	movs	r1, #0
    826c:	2002      	movs	r0, #2
    826e:	f000 fe69 	bl	8f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8272:	6860      	ldr	r0, [r4, #4]
    8274:	f880 521a 	strb.w	r5, [r0, #538]	; 0x21a
    8278:	2002      	movs	r0, #2
    827a:	e7e7      	b.n	824c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    827c:	f890 11c2 	ldrb.w	r1, [r0, #450]	; 0x1c2
    8280:	f88d 1000 	strb.w	r1, [sp]
    8284:	9900      	ldr	r1, [sp, #0]
    8286:	9100      	str	r1, [sp, #0]
    8288:	f89d 1000 	ldrb.w	r1, [sp]
    828c:	b919      	cbnz	r1, 8296 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    828e:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    8290:	8b02      	ldrh	r2, [r0, #24]
    8292:	4291      	cmp	r1, r2
    8294:	d800      	bhi.n	8298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    8296:	8b01      	ldrh	r1, [r0, #24]
    8298:	80b1      	strh	r1, [r6, #4]
    829a:	f8b0 1216 	ldrh.w	r1, [r0, #534]	; 0x216
    829e:	1e49      	subs	r1, r1, #1
    82a0:	b28f      	uxth	r7, r1
    82a2:	f8b0 1218 	ldrh.w	r1, [r0, #536]	; 0x218
    82a6:	4439      	add	r1, r7
    82a8:	f8a0 1218 	strh.w	r1, [r0, #536]	; 0x218
    82ac:	f830 1fc4 	ldrh.w	r1, [r0, #196]!
    82b0:	4439      	add	r1, r7
    82b2:	8001      	strh	r1, [r0, #0]
    82b4:	f001 fbee 	bl	9a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    82b8:	b120      	cbz	r0, 82c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    82ba:	6860      	ldr	r0, [r4, #4]
    82bc:	f850 1fb8 	ldr.w	r1, [r0, #184]!
    82c0:	4439      	add	r1, r7
    82c2:	6001      	str	r1, [r0, #0]
    82c4:	6861      	ldr	r1, [r4, #4]
    82c6:	f8b1 0212 	ldrh.w	r0, [r1, #530]	; 0x212
    82ca:	2801      	cmp	r0, #1
    82cc:	d802      	bhi.n	82d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    82ce:	1c40      	adds	r0, r0, #1
    82d0:	f8a1 0212 	strh.w	r0, [r1, #530]	; 0x212
    82d4:	b10f      	cbz	r7, 82da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    82d6:	f881 5224 	strb.w	r5, [r1, #548]	; 0x224
    82da:	f881 521a 	strb.w	r5, [r1, #538]	; 0x21a
    82de:	f8b1 2216 	ldrh.w	r2, [r1, #534]	; 0x216
    82e2:	f101 0080 	add.w	r0, r1, #128	; 0x80
    82e6:	f005 f978 	bl	d5da <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    82ea:	b120      	cbz	r0, 82f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    82ec:	f640 5123 	movw	r1, #3363	; 0xd23
    82f0:	2031      	movs	r0, #49	; 0x31
    82f2:	f7fc f873 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82f6:	6860      	ldr	r0, [r4, #4]
    82f8:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    82fc:	290b      	cmp	r1, #11
    82fe:	d001      	beq.n	8304 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    8300:	290c      	cmp	r1, #12
    8302:	d119      	bne.n	8338 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8304:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
    8308:	f8b0 32bc 	ldrh.w	r3, [r0, #700]	; 0x2bc
    830c:	1ad2      	subs	r2, r2, r3
    830e:	b212      	sxth	r2, r2
    8310:	2a00      	cmp	r2, #0
    8312:	db11      	blt.n	8338 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8314:	f8d0 12be 	ldr.w	r1, [r0, #702]	; 0x2be
    8318:	f8c0 109e 	str.w	r1, [r0, #158]	; 0x9e
    831c:	f890 12c2 	ldrb.w	r1, [r0, #706]	; 0x2c2
    8320:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
    8324:	2103      	movs	r1, #3
    8326:	f7fd fe51 	bl	5fcc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    832a:	6860      	ldr	r0, [r4, #4]
    832c:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    8330:	21ff      	movs	r1, #255	; 0xff
    8332:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    8336:	e026      	b.n	8386 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8338:	2926      	cmp	r1, #38	; 0x26
    833a:	d111      	bne.n	8360 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    833c:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
    8340:	f8b0 22bc 	ldrh.w	r2, [r0, #700]	; 0x2bc
    8344:	1a89      	subs	r1, r1, r2
    8346:	b209      	sxth	r1, r1
    8348:	2900      	cmp	r1, #0
    834a:	db09      	blt.n	8360 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    834c:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    8350:	f000 feb2 	bl	90b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeec>
    8354:	2800      	cmp	r0, #0
    8356:	6860      	ldr	r0, [r4, #4]
    8358:	f880 5134 	strb.w	r5, [r0, #308]	; 0x134
    835c:	d029      	beq.n	83b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    835e:	e012      	b.n	8386 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8360:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    8364:	2926      	cmp	r1, #38	; 0x26
    8366:	d001      	beq.n	836c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    8368:	2928      	cmp	r1, #40	; 0x28
    836a:	d10c      	bne.n	8386 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    836c:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
    8370:	f8b0 22bc 	ldrh.w	r2, [r0, #700]	; 0x2bc
    8374:	1a89      	subs	r1, r1, r2
    8376:	b209      	sxth	r1, r1
    8378:	2900      	cmp	r1, #0
    837a:	db04      	blt.n	8386 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    837c:	f880 5095 	strb.w	r5, [r0, #149]	; 0x95
    8380:	f000 fe9a 	bl	90b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeec>
    8384:	b1a8      	cbz	r0, 83b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8386:	480f      	ldr	r0, [pc, #60]	; (83c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    8388:	9000      	str	r0, [sp, #0]
    838a:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    838e:	4b0e      	ldr	r3, [pc, #56]	; (83c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    8390:	4a0e      	ldr	r2, [pc, #56]	; (83cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    8392:	f7fc ff27 	bl	51e4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8396:	6860      	ldr	r0, [r4, #4]
    8398:	2301      	movs	r3, #1
    839a:	2105      	movs	r1, #5
    839c:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    83a0:	3080      	adds	r0, #128	; 0x80
    83a2:	f004 ffa3 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    83a6:	2800      	cmp	r0, #0
    83a8:	d009      	beq.n	83be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    83aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    83ae:	f7fc bf13 	b.w	51d8 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    83b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    83b6:	2100      	movs	r1, #0
    83b8:	4608      	mov	r0, r1
    83ba:	f000 bbd1 	b.w	8b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x994>
    83be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    83c0:	2000016c 	.word	0x2000016c
    83c4:	00008b61 	.word	0x00008b61
    83c8:	00008685 	.word	0x00008685
    83cc:	00009005 	.word	0x00009005
    83d0:	4804      	ldr	r0, [pc, #16]	; (83e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    83d2:	2100      	movs	r1, #0
    83d4:	6840      	ldr	r0, [r0, #4]
    83d6:	f820 1fd0 	strh.w	r1, [r0, #208]!
    83da:	7881      	ldrb	r1, [r0, #2]
    83dc:	1c49      	adds	r1, r1, #1
    83de:	7081      	strb	r1, [r0, #2]
    83e0:	4770      	bx	lr
    83e2:	0000      	.short	0x0000
    83e4:	2000016c 	.word	0x2000016c
    83e8:	4807      	ldr	r0, [pc, #28]	; (8408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    83ea:	b510      	push	{r4, lr}
    83ec:	6841      	ldr	r1, [r0, #4]
    83ee:	f811 0fd2 	ldrb.w	r0, [r1, #210]!
    83f2:	1e40      	subs	r0, r0, #1
    83f4:	b240      	sxtb	r0, r0
    83f6:	7008      	strb	r0, [r1, #0]
    83f8:	2800      	cmp	r0, #0
    83fa:	da04      	bge.n	8406 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    83fc:	f240 11f3 	movw	r1, #499	; 0x1f3
    8400:	2031      	movs	r0, #49	; 0x31
    8402:	f7fb ffeb 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8406:	bd10      	pop	{r4, pc}
    8408:	2000016c 	.word	0x2000016c
    840c:	491d      	ldr	r1, [pc, #116]	; (8484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    840e:	b508      	push	{r3, lr}
    8410:	6849      	ldr	r1, [r1, #4]
    8412:	f891 2096 	ldrb.w	r2, [r1, #150]	; 0x96
    8416:	b1c0      	cbz	r0, 844a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27e>
    8418:	2a12      	cmp	r2, #18
    841a:	d006      	beq.n	842a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    841c:	2a16      	cmp	r2, #22
    841e:	d007      	beq.n	8430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    8420:	2a17      	cmp	r2, #23
    8422:	d009      	beq.n	8438 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26c>
    8424:	2a1d      	cmp	r2, #29
    8426:	d128      	bne.n	847a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    8428:	e009      	b.n	843e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    842a:	2101      	movs	r1, #1
    842c:	200b      	movs	r0, #11
    842e:	e008      	b.n	8442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    8430:	4814      	ldr	r0, [pc, #80]	; (8484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    8432:	f006 fca4 	bl	ed7e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    8436:	e006      	b.n	8446 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    8438:	f000 fda2 	bl	8f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdb4>
    843c:	e003      	b.n	8446 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    843e:	2101      	movs	r1, #1
    8440:	2006      	movs	r0, #6
    8442:	f000 fd7f 	bl	8f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8446:	2001      	movs	r0, #1
    8448:	bd08      	pop	{r3, pc}
    844a:	2a23      	cmp	r2, #35	; 0x23
    844c:	d004      	beq.n	8458 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28c>
    844e:	2a2f      	cmp	r2, #47	; 0x2f
    8450:	d113      	bne.n	847a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    8452:	2101      	movs	r1, #1
    8454:	2011      	movs	r0, #17
    8456:	e7f4      	b.n	8442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    8458:	f891 0134 	ldrb.w	r0, [r1, #308]	; 0x134
    845c:	2802      	cmp	r0, #2
    845e:	d00e      	beq.n	847e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    8460:	f891 0134 	ldrb.w	r0, [r1, #308]	; 0x134
    8464:	2801      	cmp	r0, #1
    8466:	d108      	bne.n	847a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    8468:	f891 0135 	ldrb.w	r0, [r1, #309]	; 0x135
    846c:	f88d 0000 	strb.w	r0, [sp]
    8470:	9800      	ldr	r0, [sp, #0]
    8472:	9000      	str	r0, [sp, #0]
    8474:	f89d 0000 	ldrb.w	r0, [sp]
    8478:	b108      	cbz	r0, 847e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    847a:	2000      	movs	r0, #0
    847c:	bd08      	pop	{r3, pc}
    847e:	2101      	movs	r1, #1
    8480:	2017      	movs	r0, #23
    8482:	e7de      	b.n	8442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    8484:	2000016c 	.word	0x2000016c
    8488:	b538      	push	{r3, r4, r5, lr}
    848a:	2800      	cmp	r0, #0
    848c:	d172      	bne.n	8574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    848e:	4c3a      	ldr	r4, [pc, #232]	; (8578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ac>)
    8490:	6860      	ldr	r0, [r4, #4]
    8492:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
    8496:	07ca      	lsls	r2, r1, #31
    8498:	d002      	beq.n	84a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    849a:	2101      	movs	r1, #1
    849c:	2009      	movs	r0, #9
    849e:	e065      	b.n	856c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    84a0:	078a      	lsls	r2, r1, #30
    84a2:	d50a      	bpl.n	84ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    84a4:	2101      	movs	r1, #1
    84a6:	200c      	movs	r0, #12
    84a8:	f000 fd4c 	bl	8f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    84ac:	6860      	ldr	r0, [r4, #4]
    84ae:	f810 1fd5 	ldrb.w	r1, [r0, #213]!
    84b2:	f041 0101 	orr.w	r1, r1, #1
    84b6:	7001      	strb	r1, [r0, #0]
    84b8:	e05a      	b.n	8570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a4>
    84ba:	074a      	lsls	r2, r1, #29
    84bc:	d502      	bpl.n	84c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    84be:	2101      	movs	r1, #1
    84c0:	2013      	movs	r0, #19
    84c2:	e053      	b.n	856c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    84c4:	070a      	lsls	r2, r1, #28
    84c6:	d506      	bpl.n	84d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    84c8:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    84cc:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    84d0:	2101      	movs	r1, #1
    84d2:	2007      	movs	r0, #7
    84d4:	e04a      	b.n	856c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    84d6:	f011 0f30 	tst.w	r1, #48	; 0x30
    84da:	d043      	beq.n	8564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x398>
    84dc:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    84e0:	f88d 1000 	strb.w	r1, [sp]
    84e4:	9900      	ldr	r1, [sp, #0]
    84e6:	9100      	str	r1, [sp, #0]
    84e8:	f89d 1000 	ldrb.w	r1, [sp]
    84ec:	bbb9      	cbnz	r1, 855e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x392>
    84ee:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    84f2:	2500      	movs	r5, #0
    84f4:	f88d 1000 	strb.w	r1, [sp]
    84f8:	9900      	ldr	r1, [sp, #0]
    84fa:	9100      	str	r1, [sp, #0]
    84fc:	f89d 1000 	ldrb.w	r1, [sp]
    8500:	b1c1      	cbz	r1, 8534 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    8502:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    8506:	2926      	cmp	r1, #38	; 0x26
    8508:	d02a      	beq.n	8560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    850a:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    850e:	2926      	cmp	r1, #38	; 0x26
    8510:	d026      	beq.n	8560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    8512:	2300      	movs	r3, #0
    8514:	f200 22be 	addw	r2, r0, #702	; 0x2be
    8518:	f500 7195 	add.w	r1, r0, #298	; 0x12a
    851c:	f005 fb23 	bl	db66 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8520:	6860      	ldr	r0, [r4, #4]
    8522:	f850 1f84 	ldr.w	r1, [r0, #132]!
    8526:	f021 0120 	bic.w	r1, r1, #32
    852a:	f041 0110 	orr.w	r1, r1, #16
    852e:	6001      	str	r1, [r0, #0]
    8530:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    8534:	6860      	ldr	r0, [r4, #4]
    8536:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    853a:	06c9      	lsls	r1, r1, #27
    853c:	d51a      	bpl.n	8574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    853e:	f005 fb2d 	bl	db9c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8542:	f000 f925 	bl	8790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c4>
    8546:	6861      	ldr	r1, [r4, #4]
    8548:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    854c:	8bc2      	ldrh	r2, [r0, #30]
    854e:	f8a1 211e 	strh.w	r2, [r1, #286]	; 0x11e
    8552:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8554:	f8a1 0120 	strh.w	r0, [r1, #288]	; 0x120
    8558:	2101      	movs	r1, #1
    855a:	2015      	movs	r0, #21
    855c:	e006      	b.n	856c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    855e:	e009      	b.n	8574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    8560:	2301      	movs	r3, #1
    8562:	e7d7      	b.n	8514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    8564:	0648      	lsls	r0, r1, #25
    8566:	d505      	bpl.n	8574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    8568:	2101      	movs	r1, #1
    856a:	2024      	movs	r0, #36	; 0x24
    856c:	f000 fcea 	bl	8f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8570:	2001      	movs	r0, #1
    8572:	bd38      	pop	{r3, r4, r5, pc}
    8574:	2000      	movs	r0, #0
    8576:	bd38      	pop	{r3, r4, r5, pc}
    8578:	2000016c 	.word	0x2000016c
    857c:	b570      	push	{r4, r5, r6, lr}
    857e:	460d      	mov	r5, r1
    8580:	4606      	mov	r6, r0
    8582:	f005 f9ad 	bl	d8e0 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    8586:	4604      	mov	r4, r0
    8588:	4630      	mov	r0, r6
    858a:	f005 f9ab 	bl	d8e4 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    858e:	4629      	mov	r1, r5
    8590:	f000 f81e 	bl	85d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x404>
    8594:	b1b8      	cbz	r0, 85c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fa>
    8596:	4620      	mov	r0, r4
    8598:	f004 ff52 	bl	d440 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    859c:	0001      	movs	r1, r0
    859e:	d00d      	beq.n	85bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    85a0:	480a      	ldr	r0, [pc, #40]	; (85cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x400>)
    85a2:	6840      	ldr	r0, [r0, #4]
    85a4:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    85a8:	428a      	cmp	r2, r1
    85aa:	d007      	beq.n	85bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    85ac:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    85b0:	2901      	cmp	r1, #1
    85b2:	d005      	beq.n	85c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f4>
    85b4:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    85b8:	4220      	tst	r0, r4
    85ba:	d004      	beq.n	85c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fa>
    85bc:	2001      	movs	r0, #1
    85be:	bd70      	pop	{r4, r5, r6, pc}
    85c0:	f890 0137 	ldrb.w	r0, [r0, #311]	; 0x137
    85c4:	e7f8      	b.n	85b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ec>
    85c6:	2000      	movs	r0, #0
    85c8:	bd70      	pop	{r4, r5, r6, pc}
    85ca:	0000      	.short	0x0000
    85cc:	2000016c 	.word	0x2000016c
    85d0:	b570      	push	{r4, r5, r6, lr}
    85d2:	460d      	mov	r5, r1
    85d4:	4604      	mov	r4, r0
    85d6:	f004 ff33 	bl	d440 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    85da:	b350      	cbz	r0, 8632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    85dc:	4916      	ldr	r1, [pc, #88]	; (8638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46c>)
    85de:	6849      	ldr	r1, [r1, #4]
    85e0:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    85e4:	4282      	cmp	r2, r0
    85e6:	d024      	beq.n	8632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    85e8:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
    85ec:	2b01      	cmp	r3, #1
    85ee:	d005      	beq.n	85fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>
    85f0:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    85f4:	4223      	tst	r3, r4
    85f6:	d013      	beq.n	8620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x454>
    85f8:	b11d      	cbz	r5, 8602 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x436>
    85fa:	e01a      	b.n	8632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    85fc:	f891 3136 	ldrb.w	r3, [r1, #310]	; 0x136
    8600:	e7f8      	b.n	85f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    8602:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    8606:	4221      	tst	r1, r4
    8608:	d113      	bne.n	8632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    860a:	b15a      	cbz	r2, 8624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x458>
    860c:	2a04      	cmp	r2, #4
    860e:	d00e      	beq.n	862e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    8610:	2804      	cmp	r0, #4
    8612:	d00c      	beq.n	862e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    8614:	2a08      	cmp	r2, #8
    8616:	d00a      	beq.n	862e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    8618:	2808      	cmp	r0, #8
    861a:	d008      	beq.n	862e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    861c:	4282      	cmp	r2, r0
    861e:	d908      	bls.n	8632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    8620:	2000      	movs	r0, #0
    8622:	bd70      	pop	{r4, r5, r6, pc}
    8624:	f240 1193 	movw	r1, #403	; 0x193
    8628:	2006      	movs	r0, #6
    862a:	f7fb fed7 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    862e:	4282      	cmp	r2, r0
    8630:	d3f6      	bcc.n	8620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x454>
    8632:	2001      	movs	r0, #1
    8634:	bd70      	pop	{r4, r5, r6, pc}
    8636:	0000      	.short	0x0000
    8638:	2000016c 	.word	0x2000016c
    863c:	b510      	push	{r4, lr}
    863e:	4c10      	ldr	r4, [pc, #64]	; (8680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b4>)
    8640:	2301      	movs	r3, #1
    8642:	2100      	movs	r1, #0
    8644:	6860      	ldr	r0, [r4, #4]
    8646:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    864a:	3080      	adds	r0, #128	; 0x80
    864c:	f004 fe4e 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8650:	b140      	cbz	r0, 8664 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x498>
    8652:	6860      	ldr	r0, [r4, #4]
    8654:	2301      	movs	r3, #1
    8656:	2104      	movs	r1, #4
    8658:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    865c:	3080      	adds	r0, #128	; 0x80
    865e:	f004 fe45 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8662:	b108      	cbz	r0, 8668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49c>
    8664:	2000      	movs	r0, #0
    8666:	bd10      	pop	{r4, pc}
    8668:	6860      	ldr	r0, [r4, #4]
    866a:	f890 00c2 	ldrb.w	r0, [r0, #194]	; 0xc2
    866e:	2800      	cmp	r0, #0
    8670:	d0f9      	beq.n	8666 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    8672:	2100      	movs	r1, #0
    8674:	2012      	movs	r0, #18
    8676:	f000 fc65 	bl	8f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    867a:	2001      	movs	r0, #1
    867c:	bd10      	pop	{r4, pc}
    867e:	0000      	.short	0x0000
    8680:	2000016c 	.word	0x2000016c
    8684:	490d      	ldr	r1, [pc, #52]	; (86bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f0>)
    8686:	4602      	mov	r2, r0
    8688:	7848      	ldrb	r0, [r1, #1]
    868a:	b9a0      	cbnz	r0, 86b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ea>
    868c:	f101 0010 	add.w	r0, r1, #16
    8690:	6840      	ldr	r0, [r0, #4]
    8692:	b142      	cbz	r2, 86a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4da>
    8694:	7889      	ldrb	r1, [r1, #2]
    8696:	0709      	lsls	r1, r1, #28
    8698:	d503      	bpl.n	86a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d6>
    869a:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
    869e:	2808      	cmp	r0, #8
    86a0:	d009      	beq.n	86b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ea>
    86a2:	2001      	movs	r0, #1
    86a4:	4770      	bx	lr
    86a6:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    86aa:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    86ac:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    86ae:	428a      	cmp	r2, r1
    86b0:	d801      	bhi.n	86b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ea>
    86b2:	f7ff b92d 	b.w	7910 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    86b6:	2000      	movs	r0, #0
    86b8:	4770      	bx	lr
    86ba:	0000      	.short	0x0000
    86bc:	2000015c 	.word	0x2000015c
    86c0:	b538      	push	{r3, r4, r5, lr}
    86c2:	4c32      	ldr	r4, [pc, #200]	; (878c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c0>)
    86c4:	4605      	mov	r5, r0
    86c6:	6860      	ldr	r0, [r4, #4]
    86c8:	3080      	adds	r0, #128	; 0x80
    86ca:	f006 faa3 	bl	ec14 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    86ce:	2800      	cmp	r0, #0
    86d0:	d15b      	bne.n	878a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    86d2:	2d00      	cmp	r5, #0
    86d4:	d159      	bne.n	878a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    86d6:	6860      	ldr	r0, [r4, #4]
    86d8:	2301      	movs	r3, #1
    86da:	4619      	mov	r1, r3
    86dc:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    86e0:	3080      	adds	r0, #128	; 0x80
    86e2:	f004 fe03 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    86e6:	2800      	cmp	r0, #0
    86e8:	d14f      	bne.n	878a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    86ea:	6860      	ldr	r0, [r4, #4]
    86ec:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    86f0:	f88d 1000 	strb.w	r1, [sp]
    86f4:	9900      	ldr	r1, [sp, #0]
    86f6:	9100      	str	r1, [sp, #0]
    86f8:	f89d 2000 	ldrb.w	r2, [sp]
    86fc:	2100      	movs	r1, #0
    86fe:	b142      	cbz	r2, 8712 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x546>
    8700:	f8a0 10c8 	strh.w	r1, [r0, #200]	; 0xc8
    8704:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    8708:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    870c:	2100      	movs	r1, #0
    870e:	2002      	movs	r0, #2
    8710:	e030      	b.n	8774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a8>
    8712:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8716:	2301      	movs	r3, #1
    8718:	2104      	movs	r1, #4
    871a:	3080      	adds	r0, #128	; 0x80
    871c:	f004 fde6 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8720:	4605      	mov	r5, r0
    8722:	f7ff feb1 	bl	8488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    8726:	2800      	cmp	r0, #0
    8728:	d12f      	bne.n	878a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    872a:	4628      	mov	r0, r5
    872c:	f7ff fe6e 	bl	840c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    8730:	2800      	cmp	r0, #0
    8732:	d12a      	bne.n	878a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8734:	f7ff ff82 	bl	863c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x470>
    8738:	2800      	cmp	r0, #0
    873a:	d126      	bne.n	878a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    873c:	6860      	ldr	r0, [r4, #4]
    873e:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    8742:	290a      	cmp	r1, #10
    8744:	d01a      	beq.n	877c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b0>
    8746:	2d00      	cmp	r5, #0
    8748:	d11f      	bne.n	878a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    874a:	f000 fb27 	bl	8d9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd0>
    874e:	2800      	cmp	r0, #0
    8750:	d11b      	bne.n	878a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8752:	6860      	ldr	r0, [r4, #4]
    8754:	2301      	movs	r3, #1
    8756:	2100      	movs	r1, #0
    8758:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    875c:	3080      	adds	r0, #128	; 0x80
    875e:	f004 fdc5 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8762:	2800      	cmp	r0, #0
    8764:	d011      	beq.n	878a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8766:	6860      	ldr	r0, [r4, #4]
    8768:	f890 02b4 	ldrb.w	r0, [r0, #692]	; 0x2b4
    876c:	2800      	cmp	r0, #0
    876e:	d00c      	beq.n	878a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8770:	2100      	movs	r1, #0
    8772:	20ff      	movs	r0, #255	; 0xff
    8774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8778:	f000 bbe4 	b.w	8f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    877c:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    8780:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    8784:	2100      	movs	r1, #0
    8786:	2007      	movs	r0, #7
    8788:	e7f4      	b.n	8774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a8>
    878a:	bd38      	pop	{r3, r4, r5, pc}
    878c:	2000016c 	.word	0x2000016c
    8790:	4808      	ldr	r0, [pc, #32]	; (87b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e8>)
    8792:	6843      	ldr	r3, [r0, #4]
    8794:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    8798:	2801      	cmp	r0, #1
    879a:	d006      	beq.n	87aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5de>
    879c:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
    87a0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    87a4:	8818      	ldrh	r0, [r3, #0]
    87a6:	f005 b9b6 	b.w	db16 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    87aa:	2002      	movs	r0, #2
    87ac:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    87b0:	4770      	bx	lr
    87b2:	0000      	.short	0x0000
    87b4:	2000016c 	.word	0x2000016c
    87b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87ba:	4d2b      	ldr	r5, [pc, #172]	; (8868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    87bc:	0006      	movs	r6, r0
    87be:	f105 0410 	add.w	r4, r5, #16
    87c2:	d133      	bne.n	882c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    87c4:	f000 f8b6 	bl	8934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x768>
    87c8:	f000 f852 	bl	8870 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>
    87cc:	0006      	movs	r6, r0
    87ce:	d12d      	bne.n	882c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    87d0:	8869      	ldrh	r1, [r5, #2]
    87d2:	0748      	lsls	r0, r1, #29
    87d4:	d506      	bpl.n	87e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x618>
    87d6:	6860      	ldr	r0, [r4, #4]
    87d8:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
    87dc:	2807      	cmp	r0, #7
    87de:	d101      	bne.n	87e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x618>
    87e0:	2001      	movs	r0, #1
    87e2:	7028      	strb	r0, [r5, #0]
    87e4:	0788      	lsls	r0, r1, #30
    87e6:	d516      	bpl.n	8816 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64a>
    87e8:	68a8      	ldr	r0, [r5, #8]
    87ea:	78c0      	ldrb	r0, [r0, #3]
    87ec:	282b      	cmp	r0, #43	; 0x2b
    87ee:	d207      	bcs.n	8800 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    87f0:	491e      	ldr	r1, [pc, #120]	; (886c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>)
    87f2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    87f6:	b119      	cbz	r1, 8800 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    87f8:	481b      	ldr	r0, [pc, #108]	; (8868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    87fa:	3010      	adds	r0, #16
    87fc:	4788      	blx	r1
    87fe:	e00a      	b.n	8816 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64a>
    8800:	28ff      	cmp	r0, #255	; 0xff
    8802:	d004      	beq.n	880e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x642>
    8804:	f640 01c1 	movw	r1, #2241	; 0x8c1
    8808:	2031      	movs	r0, #49	; 0x31
    880a:	f7fb fde7 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    880e:	4816      	ldr	r0, [pc, #88]	; (8868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    8810:	3010      	adds	r0, #16
    8812:	f006 faf3 	bl	edfc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x206>
    8816:	78a8      	ldrb	r0, [r5, #2]
    8818:	06c0      	lsls	r0, r0, #27
    881a:	d507      	bpl.n	882c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    881c:	6860      	ldr	r0, [r4, #4]
    881e:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    8822:	290b      	cmp	r1, #11
    8824:	d102      	bne.n	882c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    8826:	210c      	movs	r1, #12
    8828:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    882c:	7868      	ldrb	r0, [r5, #1]
    882e:	0700      	lsls	r0, r0, #28
    8830:	d518      	bpl.n	8864 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    8832:	6860      	ldr	r0, [r4, #4]
    8834:	2301      	movs	r3, #1
    8836:	2105      	movs	r1, #5
    8838:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    883c:	3080      	adds	r0, #128	; 0x80
    883e:	f004 fd55 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8842:	b108      	cbz	r0, 8848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67c>
    8844:	2608      	movs	r6, #8
    8846:	e00d      	b.n	8864 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    8848:	2500      	movs	r5, #0
    884a:	4669      	mov	r1, sp
    884c:	4628      	mov	r0, r5
    884e:	9500      	str	r5, [sp, #0]
    8850:	f7fc fd8e 	bl	5370 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    8854:	9800      	ldr	r0, [sp, #0]
    8856:	b128      	cbz	r0, 8864 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    8858:	7205      	strb	r5, [r0, #8]
    885a:	2227      	movs	r2, #39	; 0x27
    885c:	6861      	ldr	r1, [r4, #4]
    885e:	9800      	ldr	r0, [sp, #0]
    8860:	f7fd fd2e 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    8864:	4630      	mov	r0, r6
    8866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8868:	2000015c 	.word	0x2000015c
    886c:	20000220 	.word	0x20000220
    8870:	b570      	push	{r4, r5, r6, lr}
    8872:	4d2e      	ldr	r5, [pc, #184]	; (892c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8874:	2000      	movs	r0, #0
    8876:	78a9      	ldrb	r1, [r5, #2]
    8878:	07c9      	lsls	r1, r1, #31
    887a:	d017      	beq.n	88ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e0>
    887c:	68e8      	ldr	r0, [r5, #12]
    887e:	f105 0410 	add.w	r4, r5, #16
    8882:	2301      	movs	r3, #1
    8884:	78c6      	ldrb	r6, [r0, #3]
    8886:	6860      	ldr	r0, [r4, #4]
    8888:	2105      	movs	r1, #5
    888a:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    888e:	3080      	adds	r0, #128	; 0x80
    8890:	f004 fd2c 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8894:	b158      	cbz	r0, 88ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    8896:	1eb6      	subs	r6, r6, #2
    8898:	2e0a      	cmp	r6, #10
    889a:	d206      	bcs.n	88aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    889c:	e8df f006 	tbb	[pc, r6]
    88a0:	05050707 	.word	0x05050707
    88a4:	05050707 	.word	0x05050707
    88a8:	0707      	.short	0x0707
    88aa:	2008      	movs	r0, #8
    88ac:	bd70      	pop	{r4, r5, r6, pc}
    88ae:	68e8      	ldr	r0, [r5, #12]
    88b0:	f7fd fc6c 	bl	618c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    88b4:	b138      	cbz	r0, 88c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    88b6:	68e8      	ldr	r0, [r5, #12]
    88b8:	78c5      	ldrb	r5, [r0, #3]
    88ba:	b155      	cbz	r5, 88d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    88bc:	2d01      	cmp	r5, #1
    88be:	d008      	beq.n	88d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    88c0:	2d16      	cmp	r5, #22
    88c2:	d11a      	bne.n	88fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    88c4:	e005      	b.n	88d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    88c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    88ca:	4818      	ldr	r0, [pc, #96]	; (892c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    88cc:	3010      	adds	r0, #16
    88ce:	f000 bd87 	b.w	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    88d2:	6860      	ldr	r0, [r4, #4]
    88d4:	f890 0095 	ldrb.w	r0, [r0, #149]	; 0x95
    88d8:	f004 fd60 	bl	d39c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    88dc:	b168      	cbz	r0, 88fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    88de:	6860      	ldr	r0, [r4, #4]
    88e0:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    88e4:	2921      	cmp	r1, #33	; 0x21
    88e6:	d008      	beq.n	88fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    88e8:	2922      	cmp	r1, #34	; 0x22
    88ea:	d003      	beq.n	88f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    88ec:	2d16      	cmp	r5, #22
    88ee:	d00e      	beq.n	890e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    88f0:	2002      	movs	r0, #2
    88f2:	bd70      	pop	{r4, r5, r6, pc}
    88f4:	212e      	movs	r1, #46	; 0x2e
    88f6:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    88fa:	2d2b      	cmp	r5, #43	; 0x2b
    88fc:	d209      	bcs.n	8912 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x746>
    88fe:	480c      	ldr	r0, [pc, #48]	; (8930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x764>)
    8900:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    8904:	b129      	cbz	r1, 8912 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x746>
    8906:	4809      	ldr	r0, [pc, #36]	; (892c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8908:	3010      	adds	r0, #16
    890a:	4788      	blx	r1
    890c:	e005      	b.n	891a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x74e>
    890e:	2020      	movs	r0, #32
    8910:	bd70      	pop	{r4, r5, r6, pc}
    8912:	4806      	ldr	r0, [pc, #24]	; (892c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8914:	3010      	adds	r0, #16
    8916:	f000 fd63 	bl	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    891a:	6862      	ldr	r2, [r4, #4]
    891c:	e9f2 133e 	ldrd	r1, r3, [r2, #248]!	; 0xf8
    8920:	1c49      	adds	r1, r1, #1
    8922:	f143 0300 	adc.w	r3, r3, #0
    8926:	e9c2 1300 	strd	r1, r3, [r2]
    892a:	bd70      	pop	{r4, r5, r6, pc}
    892c:	2000015c 	.word	0x2000015c
    8930:	20000174 	.word	0x20000174
    8934:	b570      	push	{r4, r5, r6, lr}
    8936:	4e23      	ldr	r6, [pc, #140]	; (89c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f8>)
    8938:	78b0      	ldrb	r0, [r6, #2]
    893a:	0700      	lsls	r0, r0, #28
    893c:	d540      	bpl.n	89c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f4>
    893e:	f106 0410 	add.w	r4, r6, #16
    8942:	6860      	ldr	r0, [r4, #4]
    8944:	3080      	adds	r0, #128	; 0x80
    8946:	f006 f965 	bl	ec14 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    894a:	b148      	cbz	r0, 8960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x794>
    894c:	6860      	ldr	r0, [r4, #4]
    894e:	21fe      	movs	r1, #254	; 0xfe
    8950:	2500      	movs	r5, #0
    8952:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    8956:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    895a:	291b      	cmp	r1, #27
    895c:	d10c      	bne.n	8978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ac>
    895e:	e004      	b.n	896a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x79e>
    8960:	f640 01cd 	movw	r1, #2253	; 0x8cd
    8964:	2031      	movs	r0, #49	; 0x31
    8966:	f7fb fd39 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    896a:	f880 50d3 	strb.w	r5, [r0, #211]	; 0xd3
    896e:	f7ff fd3b 	bl	83e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    8972:	6860      	ldr	r0, [r4, #4]
    8974:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    8978:	6860      	ldr	r0, [r4, #4]
    897a:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    897e:	2921      	cmp	r1, #33	; 0x21
    8980:	d002      	beq.n	8988 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7bc>
    8982:	2930      	cmp	r1, #48	; 0x30
    8984:	d113      	bne.n	89ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    8986:	e00b      	b.n	89a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d4>
    8988:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    898c:	f004 fd06 	bl	d39c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8990:	b108      	cbz	r0, 8996 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ca>
    8992:	202e      	movs	r0, #46	; 0x2e
    8994:	e000      	b.n	8998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7cc>
    8996:	2022      	movs	r0, #34	; 0x22
    8998:	6861      	ldr	r1, [r4, #4]
    899a:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    899e:	e006      	b.n	89ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    89a0:	2101      	movs	r1, #1
    89a2:	f880 12b5 	strb.w	r1, [r0, #693]	; 0x2b5
    89a6:	f880 5095 	strb.w	r5, [r0, #149]	; 0x95
    89aa:	f880 50ce 	strb.w	r5, [r0, #206]	; 0xce
    89ae:	6860      	ldr	r0, [r4, #4]
    89b0:	f890 1097 	ldrb.w	r1, [r0, #151]	; 0x97
    89b4:	2908      	cmp	r1, #8
    89b6:	d103      	bne.n	89c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f4>
    89b8:	2102      	movs	r1, #2
    89ba:	7031      	strb	r1, [r6, #0]
    89bc:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    89c0:	bd70      	pop	{r4, r5, r6, pc}
    89c2:	0000      	.short	0x0000
    89c4:	2000015c 	.word	0x2000015c
    89c8:	b538      	push	{r3, r4, r5, lr}
    89ca:	4605      	mov	r5, r0
    89cc:	4668      	mov	r0, sp
    89ce:	f7fc fb67 	bl	50a0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    89d2:	b308      	cbz	r0, 8a18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84c>
    89d4:	2222      	movs	r2, #34	; 0x22
    89d6:	2100      	movs	r1, #0
    89d8:	9800      	ldr	r0, [sp, #0]
    89da:	f003 fad6 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    89de:	2103      	movs	r1, #3
    89e0:	9800      	ldr	r0, [sp, #0]
    89e2:	f004 ff97 	bl	d914 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    89e6:	9800      	ldr	r0, [sp, #0]
    89e8:	7801      	ldrb	r1, [r0, #0]
    89ea:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    89ee:	7001      	strb	r1, [r0, #0]
    89f0:	4629      	mov	r1, r5
    89f2:	f7fd fbdb 	bl	61ac <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    89f6:	4c59      	ldr	r4, [pc, #356]	; (8b5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>)
    89f8:	2d11      	cmp	r5, #17
    89fa:	d02d      	beq.n	8a58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88c>
    89fc:	dc0f      	bgt.n	8a1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x852>
    89fe:	f1a5 0502 	sub.w	r5, r5, #2
    8a02:	2d0d      	cmp	r5, #13
    8a04:	d21f      	bcs.n	8a46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87a>
    8a06:	e8df f005 	tbb	[pc, r5]
    8a0a:	1e21      	.short	0x1e21
    8a0c:	219e9e51 	.word	0x219e9e51
    8a10:	9e1e5e1e 	.word	0x9e1e5e1e
    8a14:	008c343a 	.word	0x008c343a
    8a18:	f640 314c 	movw	r1, #2892	; 0xb4c
    8a1c:	e099      	b.n	8b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x986>
    8a1e:	2d17      	cmp	r5, #23
    8a20:	d070      	beq.n	8b04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x938>
    8a22:	dc08      	bgt.n	8a36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86a>
    8a24:	f1a5 0512 	sub.w	r5, r5, #18
    8a28:	2d05      	cmp	r5, #5
    8a2a:	d20c      	bcs.n	8a46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87a>
    8a2c:	e8df f005 	tbb	[pc, r5]
    8a30:	50508b8b 	.word	0x50508b8b
    8a34:	0033      	.short	0x0033
    8a36:	2d23      	cmp	r5, #35	; 0x23
    8a38:	d077      	beq.n	8b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    8a3a:	2d24      	cmp	r5, #36	; 0x24
    8a3c:	d075      	beq.n	8b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    8a3e:	2d25      	cmp	r5, #37	; 0x25
    8a40:	d073      	beq.n	8b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    8a42:	2dff      	cmp	r5, #255	; 0xff
    8a44:	d077      	beq.n	8b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    8a46:	f640 31e3 	movw	r1, #3043	; 0xbe3
    8a4a:	e082      	b.n	8b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x986>
    8a4c:	6860      	ldr	r0, [r4, #4]
    8a4e:	9900      	ldr	r1, [sp, #0]
    8a50:	f890 011e 	ldrb.w	r0, [r0, #286]	; 0x11e
    8a54:	7108      	strb	r0, [r1, #4]
    8a56:	e076      	b.n	8b46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8a58:	6860      	ldr	r0, [r4, #4]
    8a5a:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    8a5e:	9800      	ldr	r0, [sp, #0]
    8a60:	f004 ff44 	bl	d8ec <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    8a64:	6860      	ldr	r0, [r4, #4]
    8a66:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    8a6a:	9800      	ldr	r0, [sp, #0]
    8a6c:	f004 ff42 	bl	d8f4 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    8a70:	e069      	b.n	8b46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8a72:	6861      	ldr	r1, [r4, #4]
    8a74:	9800      	ldr	r0, [sp, #0]
    8a76:	f891 111a 	ldrb.w	r1, [r1, #282]	; 0x11a
    8a7a:	7101      	strb	r1, [r0, #4]
    8a7c:	e063      	b.n	8b46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8a7e:	9800      	ldr	r0, [sp, #0]
    8a80:	210c      	movs	r1, #12
    8a82:	7101      	strb	r1, [r0, #4]
    8a84:	2159      	movs	r1, #89	; 0x59
    8a86:	7141      	strb	r1, [r0, #5]
    8a88:	2100      	movs	r1, #0
    8a8a:	7181      	strb	r1, [r0, #6]
    8a8c:	21fa      	movs	r1, #250	; 0xfa
    8a8e:	71c1      	strb	r1, [r0, #7]
    8a90:	2111      	movs	r1, #17
    8a92:	7201      	strb	r1, [r0, #8]
    8a94:	e057      	b.n	8b46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8a96:	9800      	ldr	r0, [sp, #0]
    8a98:	f8d4 1004 	ldr.w	r1, [r4, #4]
    8a9c:	f891 1136 	ldrb.w	r1, [r1, #310]	; 0x136
    8aa0:	7101      	strb	r1, [r0, #4]
    8aa2:	6861      	ldr	r1, [r4, #4]
    8aa4:	f891 1137 	ldrb.w	r1, [r1, #311]	; 0x137
    8aa8:	7141      	strb	r1, [r0, #5]
    8aaa:	e04c      	b.n	8b46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8aac:	6861      	ldr	r1, [r4, #4]
    8aae:	9800      	ldr	r0, [sp, #0]
    8ab0:	f501 710c 	add.w	r1, r1, #560	; 0x230
    8ab4:	f004 fed5 	bl	d862 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    8ab8:	6861      	ldr	r1, [r4, #4]
    8aba:	9800      	ldr	r0, [sp, #0]
    8abc:	f501 718a 	add.w	r1, r1, #276	; 0x114
    8ac0:	f004 fecc 	bl	d85c <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    8ac4:	e03f      	b.n	8b46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8ac6:	4825      	ldr	r0, [pc, #148]	; (8b5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>)
    8ac8:	9900      	ldr	r1, [sp, #0]
    8aca:	f7fd ff1f 	bl	690c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    8ace:	e03a      	b.n	8b46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8ad0:	6860      	ldr	r0, [r4, #4]
    8ad2:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    8ad6:	9800      	ldr	r0, [sp, #0]
    8ad8:	f004 ff24 	bl	d924 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    8adc:	6860      	ldr	r0, [r4, #4]
    8ade:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
    8ae2:	9800      	ldr	r0, [sp, #0]
    8ae4:	f004 ff22 	bl	d92c <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    8ae8:	6860      	ldr	r0, [r4, #4]
    8aea:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    8aee:	9800      	ldr	r0, [sp, #0]
    8af0:	f004 ff20 	bl	d934 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    8af4:	6860      	ldr	r0, [r4, #4]
    8af6:	f8b0 111e 	ldrh.w	r1, [r0, #286]	; 0x11e
    8afa:	9800      	ldr	r0, [sp, #0]
    8afc:	f004 ff1e 	bl	d93c <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    8b00:	e021      	b.n	8b46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8b02:	e7ff      	b.n	8b04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x938>
    8b04:	6861      	ldr	r1, [r4, #4]
    8b06:	f891 0134 	ldrb.w	r0, [r1, #308]	; 0x134
    8b0a:	2801      	cmp	r0, #1
    8b0c:	9800      	ldr	r0, [sp, #0]
    8b0e:	d0c5      	beq.n	8a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d0>
    8b10:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    8b14:	7101      	strb	r1, [r0, #4]
    8b16:	6861      	ldr	r1, [r4, #4]
    8b18:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    8b1c:	e7c4      	b.n	8aa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8dc>
    8b1e:	e004      	b.n	8b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    8b20:	e009      	b.n	8b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    8b22:	9800      	ldr	r0, [sp, #0]
    8b24:	f7fd feac 	bl	6880 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    8b28:	e00d      	b.n	8b46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8b2a:	4a0c      	ldr	r2, [pc, #48]	; (8b5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>)
    8b2c:	4628      	mov	r0, r5
    8b2e:	9900      	ldr	r1, [sp, #0]
    8b30:	f006 fabb 	bl	f0aa <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    8b34:	e007      	b.n	8b46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    8b36:	6860      	ldr	r0, [r4, #4]
    8b38:	f890 22b7 	ldrb.w	r2, [r0, #695]	; 0x2b7
    8b3c:	f8d0 12b8 	ldr.w	r1, [r0, #696]	; 0x2b8
    8b40:	9800      	ldr	r0, [sp, #0]
    8b42:	f004 fed9 	bl	d8f8 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    8b46:	f7fc fa85 	bl	5054 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    8b4a:	2800      	cmp	r0, #0
    8b4c:	d104      	bne.n	8b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98c>
    8b4e:	f640 31e7 	movw	r1, #3047	; 0xbe7
    8b52:	2031      	movs	r0, #49	; 0x31
    8b54:	f7fb fc42 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b58:	bd38      	pop	{r3, r4, r5, pc}
    8b5a:	0000      	.short	0x0000
    8b5c:	2000016c 	.word	0x2000016c
    8b60:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8b64:	4e8c      	ldr	r6, [pc, #560]	; (8d98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbcc>)
    8b66:	468a      	mov	sl, r1
    8b68:	6870      	ldr	r0, [r6, #4]
    8b6a:	8800      	ldrh	r0, [r0, #0]
    8b6c:	f7fc f844 	bl	4bf8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8b70:	0007      	movs	r7, r0
    8b72:	d00c      	beq.n	8b8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c2>
    8b74:	f1a6 0510 	sub.w	r5, r6, #16
    8b78:	f04f 0400 	mov.w	r4, #0
    8b7c:	8868      	ldrh	r0, [r5, #2]
    8b7e:	05c0      	lsls	r0, r0, #23
    8b80:	d50a      	bpl.n	8b98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9cc>
    8b82:	6870      	ldr	r0, [r6, #4]
    8b84:	f8a0 40c4 	strh.w	r4, [r0, #196]	; 0xc4
    8b88:	f880 4224 	strb.w	r4, [r0, #548]	; 0x224
    8b8c:	e009      	b.n	8ba2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d6>
    8b8e:	f640 61d2 	movw	r1, #3794	; 0xed2
    8b92:	2031      	movs	r0, #49	; 0x31
    8b94:	f7fb fc22 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b98:	6871      	ldr	r1, [r6, #4]
    8b9a:	f831 0fc4 	ldrh.w	r0, [r1, #196]!
    8b9e:	1c40      	adds	r0, r0, #1
    8ba0:	8008      	strh	r0, [r1, #0]
    8ba2:	f000 ff77 	bl	9a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    8ba6:	f04f 0901 	mov.w	r9, #1
    8baa:	b338      	cbz	r0, 8bfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    8bac:	8868      	ldrh	r0, [r5, #2]
    8bae:	0500      	lsls	r0, r0, #20
    8bb0:	d506      	bpl.n	8bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f4>
    8bb2:	6870      	ldr	r0, [r6, #4]
    8bb4:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
    8bb8:	b111      	cbz	r1, 8bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f4>
    8bba:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8
    8bbe:	e01d      	b.n	8bfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    8bc0:	6871      	ldr	r1, [r6, #4]
    8bc2:	f8d1 00b8 	ldr.w	r0, [r1, #184]	; 0xb8
    8bc6:	1c40      	adds	r0, r0, #1
    8bc8:	f8c1 00b8 	str.w	r0, [r1, #184]	; 0xb8
    8bcc:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    8bd0:	4282      	cmp	r2, r0
    8bd2:	d301      	bcc.n	8bd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0c>
    8bd4:	1a13      	subs	r3, r2, r0
    8bd6:	e000      	b.n	8bda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    8bd8:	2300      	movs	r3, #0
    8bda:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    8bde:	f10c 0c05 	add.w	ip, ip, #5
    8be2:	4563      	cmp	r3, ip
    8be4:	d801      	bhi.n	8bea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    8be6:	f881 90c2 	strb.w	r9, [r1, #194]	; 0xc2
    8bea:	4290      	cmp	r0, r2
    8bec:	d306      	bcc.n	8bfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    8bee:	f501 70a9 	add.w	r0, r1, #338	; 0x152
    8bf2:	220e      	movs	r2, #14
    8bf4:	f8c1 40b8 	str.w	r4, [r1, #184]	; 0xb8
    8bf8:	f7fd fb62 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    8bfc:	8868      	ldrh	r0, [r5, #2]
    8bfe:	f04f 0b02 	mov.w	fp, #2
    8c02:	f410 7f40 	tst.w	r0, #768	; 0x300
    8c06:	d00e      	beq.n	8c26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    8c08:	6870      	ldr	r0, [r6, #4]
    8c0a:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    8c0e:	b111      	cbz	r1, 8c16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4a>
    8c10:	2903      	cmp	r1, #3
    8c12:	d108      	bne.n	8c26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    8c14:	e002      	b.n	8c1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa50>
    8c16:	f880 9099 	strb.w	r9, [r0, #153]	; 0x99
    8c1a:	e001      	b.n	8c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa54>
    8c1c:	f880 b099 	strb.w	fp, [r0, #153]	; 0x99
    8c20:	2101      	movs	r1, #1
    8c22:	f7fe fe9b 	bl	795c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8c26:	6870      	ldr	r0, [r6, #4]
    8c28:	46b0      	mov	r8, r6
    8c2a:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    8c2e:	2901      	cmp	r1, #1
    8c30:	d104      	bne.n	8c3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa70>
    8c32:	8869      	ldrh	r1, [r5, #2]
    8c34:	0549      	lsls	r1, r1, #21
    8c36:	d501      	bpl.n	8c3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa70>
    8c38:	f880 b099 	strb.w	fp, [r0, #153]	; 0x99
    8c3c:	9900      	ldr	r1, [sp, #0]
    8c3e:	2900      	cmp	r1, #0
    8c40:	d179      	bne.n	8d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6a>
    8c42:	78a9      	ldrb	r1, [r5, #2]
    8c44:	0649      	lsls	r1, r1, #25
    8c46:	d502      	bpl.n	8c4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    8c48:	f8a0 4238 	strh.w	r4, [r0, #568]	; 0x238
    8c4c:	e004      	b.n	8c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa8c>
    8c4e:	f8b0 1238 	ldrh.w	r1, [r0, #568]	; 0x238
    8c52:	1c49      	adds	r1, r1, #1
    8c54:	f8a0 1238 	strh.w	r1, [r0, #568]	; 0x238
    8c58:	4650      	mov	r0, sl
    8c5a:	f7ff fdad 	bl	87b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ec>
    8c5e:	ea40 000a 	orr.w	r0, r0, sl
    8c62:	4682      	mov	sl, r0
    8c64:	f7ff fd2c 	bl	86c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f4>
    8c68:	f8d8 6004 	ldr.w	r6, [r8, #4]
    8c6c:	f8b6 0218 	ldrh.w	r0, [r6, #536]	; 0x218
    8c70:	1c40      	adds	r0, r0, #1
    8c72:	f8a6 0218 	strh.w	r0, [r6, #536]	; 0x218
    8c76:	f896 021c 	ldrb.w	r0, [r6, #540]	; 0x21c
    8c7a:	b128      	cbz	r0, 8c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xabc>
    8c7c:	f7fc fbd8 	bl	5430 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    8c80:	b1b0      	cbz	r0, 8cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    8c82:	f8a6 4218 	strh.w	r4, [r6, #536]	; 0x218
    8c86:	e013      	b.n	8cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    8c88:	f7fc fa8c 	bl	51a4 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    8c8c:	b108      	cbz	r0, 8c92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac6>
    8c8e:	f8a6 4218 	strh.w	r4, [r6, #536]	; 0x218
    8c92:	f7fc fa81 	bl	5198 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    8c96:	b158      	cbz	r0, 8cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    8c98:	f896 0224 	ldrb.w	r0, [r6, #548]	; 0x224
    8c9c:	1c40      	adds	r0, r0, #1
    8c9e:	b2c0      	uxtb	r0, r0
    8ca0:	f886 0224 	strb.w	r0, [r6, #548]	; 0x224
    8ca4:	2802      	cmp	r0, #2
    8ca6:	d903      	bls.n	8cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    8ca8:	f8a6 4218 	strh.w	r4, [r6, #536]	; 0x218
    8cac:	f886 4224 	strb.w	r4, [r6, #548]	; 0x224
    8cb0:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8cb4:	4646      	mov	r6, r8
    8cb6:	2301      	movs	r3, #1
    8cb8:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8cbc:	2100      	movs	r1, #0
    8cbe:	3080      	adds	r0, #128	; 0x80
    8cc0:	f004 fb14 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8cc4:	b920      	cbnz	r0, 8cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    8cc6:	6870      	ldr	r0, [r6, #4]
    8cc8:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    8ccc:	280c      	cmp	r0, #12
    8cce:	d160      	bne.n	8d92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    8cd0:	6870      	ldr	r0, [r6, #4]
    8cd2:	2301      	movs	r3, #1
    8cd4:	2100      	movs	r1, #0
    8cd6:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    8cda:	3080      	adds	r0, #128	; 0x80
    8cdc:	f004 fb06 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ce0:	b350      	cbz	r0, 8d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8ce2:	6870      	ldr	r0, [r6, #4]
    8ce4:	2301      	movs	r3, #1
    8ce6:	2100      	movs	r1, #0
    8ce8:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    8cec:	3080      	adds	r0, #128	; 0x80
    8cee:	f004 fafd 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8cf2:	b308      	cbz	r0, 8d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8cf4:	6870      	ldr	r0, [r6, #4]
    8cf6:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    8cfa:	2902      	cmp	r1, #2
    8cfc:	d149      	bne.n	8d92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    8cfe:	f890 0224 	ldrb.w	r0, [r0, #548]	; 0x224
    8d02:	b9c8      	cbnz	r0, 8d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8d04:	4638      	mov	r0, r7
    8d06:	f003 fdf8 	bl	c8fa <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    8d0a:	b1a8      	cbz	r0, 8d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8d0c:	6870      	ldr	r0, [r6, #4]
    8d0e:	3080      	adds	r0, #128	; 0x80
    8d10:	f005 ff80 	bl	ec14 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8d14:	b980      	cbnz	r0, 8d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    8d16:	6871      	ldr	r1, [r6, #4]
    8d18:	f8b1 0212 	ldrh.w	r0, [r1, #530]	; 0x212
    8d1c:	2801      	cmp	r0, #1
    8d1e:	d938      	bls.n	8d92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    8d20:	f881 921a 	strb.w	r9, [r1, #538]	; 0x21a
    8d24:	f8b1 00c6 	ldrh.w	r0, [r1, #198]	; 0xc6
    8d28:	f8b1 20c4 	ldrh.w	r2, [r1, #196]	; 0xc4
    8d2c:	1e83      	subs	r3, r0, #2
    8d2e:	429a      	cmp	r2, r3
    8d30:	db03      	blt.n	8d3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6e>
    8d32:	2001      	movs	r0, #1
    8d34:	e004      	b.n	8d40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb74>
    8d36:	e01d      	b.n	8d74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    8d38:	e02b      	b.n	8d92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    8d3a:	1a80      	subs	r0, r0, r2
    8d3c:	1e40      	subs	r0, r0, #1
    8d3e:	b280      	uxth	r0, r0
    8d40:	f8b1 2218 	ldrh.w	r2, [r1, #536]	; 0x218
    8d44:	88ab      	ldrh	r3, [r5, #4]
    8d46:	429a      	cmp	r2, r3
    8d48:	d301      	bcc.n	8d4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb82>
    8d4a:	2201      	movs	r2, #1
    8d4c:	e002      	b.n	8d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    8d4e:	1a9a      	subs	r2, r3, r2
    8d50:	1c52      	adds	r2, r2, #1
    8d52:	b292      	uxth	r2, r2
    8d54:	4290      	cmp	r0, r2
    8d56:	d900      	bls.n	8d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8e>
    8d58:	4610      	mov	r0, r2
    8d5a:	2801      	cmp	r0, #1
    8d5c:	d102      	bne.n	8d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb98>
    8d5e:	bf00      	nop
    8d60:	f881 421a 	strb.w	r4, [r1, #538]	; 0x21a
    8d64:	6871      	ldr	r1, [r6, #4]
    8d66:	f8b1 208c 	ldrh.w	r2, [r1, #140]	; 0x8c
    8d6a:	4410      	add	r0, r2
    8d6c:	f8a1 0214 	strh.w	r0, [r1, #532]	; 0x214
    8d70:	f000 ff64 	bl	9c3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a70>
    8d74:	78a8      	ldrb	r0, [r5, #2]
    8d76:	4652      	mov	r2, sl
    8d78:	f3c0 1180 	ubfx	r1, r0, #6, #1
    8d7c:	9800      	ldr	r0, [sp, #0]
    8d7e:	f000 fe9d 	bl	9abc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f0>
    8d82:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8d86:	f880 421b 	strb.w	r4, [r0, #539]	; 0x21b
    8d8a:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8d8e:	f7fc b94b 	b.w	5028 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    8d92:	2001      	movs	r0, #1
    8d94:	6871      	ldr	r1, [r6, #4]
    8d96:	e7e3      	b.n	8d60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb94>
    8d98:	2000016c 	.word	0x2000016c
    8d9c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8d9e:	4c68      	ldr	r4, [pc, #416]	; (8f40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd74>)
    8da0:	2301      	movs	r3, #1
    8da2:	2100      	movs	r1, #0
    8da4:	6860      	ldr	r0, [r4, #4]
    8da6:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    8daa:	3080      	adds	r0, #128	; 0x80
    8dac:	f004 fa9e 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8db0:	2800      	cmp	r0, #0
    8db2:	d07a      	beq.n	8eaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcde>
    8db4:	6860      	ldr	r0, [r4, #4]
    8db6:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    8dba:	2500      	movs	r5, #0
    8dbc:	b139      	cbz	r1, 8dce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc02>
    8dbe:	2100      	movs	r1, #0
    8dc0:	200e      	movs	r0, #14
    8dc2:	f000 f8bf 	bl	8f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8dc6:	6860      	ldr	r0, [r4, #4]
    8dc8:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    8dcc:	e0b5      	b.n	8f3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    8dce:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    8dd2:	b119      	cbz	r1, 8ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc10>
    8dd4:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
    8dd8:	0789      	lsls	r1, r1, #30
    8dda:	d016      	beq.n	8e0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3e>
    8ddc:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    8de0:	f88d 1004 	strb.w	r1, [sp, #4]
    8de4:	9901      	ldr	r1, [sp, #4]
    8de6:	9101      	str	r1, [sp, #4]
    8de8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8dec:	b141      	cbz	r1, 8e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc34>
    8dee:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    8df2:	f88d 1000 	strb.w	r1, [sp]
    8df6:	9900      	ldr	r1, [sp, #0]
    8df8:	9100      	str	r1, [sp, #0]
    8dfa:	f89d 1000 	ldrb.w	r1, [sp]
    8dfe:	b189      	cbz	r1, 8e24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc58>
    8e00:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    8e04:	2901      	cmp	r1, #1
    8e06:	d030      	beq.n	8e6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc9e>
    8e08:	e040      	b.n	8e8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc0>
    8e0a:	2100      	movs	r1, #0
    8e0c:	200c      	movs	r0, #12
    8e0e:	f000 f899 	bl	8f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8e12:	6860      	ldr	r0, [r4, #4]
    8e14:	f810 1fd5 	ldrb.w	r1, [r0, #213]!
    8e18:	f041 0101 	orr.w	r1, r1, #1
    8e1c:	7001      	strb	r1, [r0, #0]
    8e1e:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    8e22:	e08a      	b.n	8f3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    8e24:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    8e28:	2926      	cmp	r1, #38	; 0x26
    8e2a:	d01c      	beq.n	8e66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc9a>
    8e2c:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    8e30:	2926      	cmp	r1, #38	; 0x26
    8e32:	d018      	beq.n	8e66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc9a>
    8e34:	f05f 0300 	movs.w	r3, #0
    8e38:	f200 22be 	addw	r2, r0, #702	; 0x2be
    8e3c:	f500 7195 	add.w	r1, r0, #298	; 0x12a
    8e40:	f004 fe91 	bl	db66 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8e44:	6860      	ldr	r0, [r4, #4]
    8e46:	f880 512a 	strb.w	r5, [r0, #298]	; 0x12a
    8e4a:	2100      	movs	r1, #0
    8e4c:	2014      	movs	r0, #20
    8e4e:	f000 f879 	bl	8f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8e52:	6861      	ldr	r1, [r4, #4]
    8e54:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8e58:	8bc2      	ldrh	r2, [r0, #30]
    8e5a:	f8a1 211e 	strh.w	r2, [r1, #286]	; 0x11e
    8e5e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8e60:	f8a1 0120 	strh.w	r0, [r1, #288]	; 0x120
    8e64:	e069      	b.n	8f3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    8e66:	2301      	movs	r3, #1
    8e68:	e7e6      	b.n	8e38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    8e6a:	f890 1135 	ldrb.w	r1, [r0, #309]	; 0x135
    8e6e:	f88d 1000 	strb.w	r1, [sp]
    8e72:	9900      	ldr	r1, [sp, #0]
    8e74:	9100      	str	r1, [sp, #0]
    8e76:	f89d 1000 	ldrb.w	r1, [sp]
    8e7a:	b939      	cbnz	r1, 8e8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc0>
    8e7c:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8e80:	2301      	movs	r3, #1
    8e82:	210b      	movs	r1, #11
    8e84:	3080      	adds	r0, #128	; 0x80
    8e86:	f004 fa31 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e8a:	b178      	cbz	r0, 8eac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    8e8c:	6860      	ldr	r0, [r4, #4]
    8e8e:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    8e92:	f88d 1000 	strb.w	r1, [sp]
    8e96:	9900      	ldr	r1, [sp, #0]
    8e98:	9100      	str	r1, [sp, #0]
    8e9a:	f89d 1000 	ldrb.w	r1, [sp]
    8e9e:	b3b9      	cbz	r1, 8f10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    8ea0:	2100      	movs	r1, #0
    8ea2:	2023      	movs	r0, #35	; 0x23
    8ea4:	f000 f84e 	bl	8f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8ea8:	e047      	b.n	8f3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    8eaa:	e030      	b.n	8f0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd42>
    8eac:	6860      	ldr	r0, [r4, #4]
    8eae:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    8eb2:	f005 feb7 	bl	ec24 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8eb6:	4605      	mov	r5, r0
    8eb8:	6860      	ldr	r0, [r4, #4]
    8eba:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    8ebe:	f005 feb1 	bl	ec24 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8ec2:	4606      	mov	r6, r0
    8ec4:	6860      	ldr	r0, [r4, #4]
    8ec6:	f890 1136 	ldrb.w	r1, [r0, #310]	; 0x136
    8eca:	4628      	mov	r0, r5
    8ecc:	f005 feb5 	bl	ec3a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8ed0:	b150      	cbz	r0, 8ee8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1c>
    8ed2:	6860      	ldr	r0, [r4, #4]
    8ed4:	f890 1137 	ldrb.w	r1, [r0, #311]	; 0x137
    8ed8:	4630      	mov	r0, r6
    8eda:	f005 feae 	bl	ec3a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8ede:	b118      	cbz	r0, 8ee8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1c>
    8ee0:	2000      	movs	r0, #0
    8ee2:	f000 f93f 	bl	9164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    8ee6:	e011      	b.n	8f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd40>
    8ee8:	6860      	ldr	r0, [r4, #4]
    8eea:	2301      	movs	r3, #1
    8eec:	2103      	movs	r1, #3
    8eee:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8ef2:	3080      	adds	r0, #128	; 0x80
    8ef4:	f004 f9fa 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ef8:	b940      	cbnz	r0, 8f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd40>
    8efa:	6860      	ldr	r0, [r4, #4]
    8efc:	2301      	movs	r3, #1
    8efe:	2102      	movs	r1, #2
    8f00:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8f04:	3080      	adds	r0, #128	; 0x80
    8f06:	f004 f9f1 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f0a:	b110      	cbz	r0, 8f12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd46>
    8f0c:	2000      	movs	r0, #0
    8f0e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8f10:	e002      	b.n	8f18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    8f12:	2100      	movs	r1, #0
    8f14:	2016      	movs	r0, #22
    8f16:	e7c5      	b.n	8ea4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd8>
    8f18:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    8f1c:	f88d 0000 	strb.w	r0, [sp]
    8f20:	9800      	ldr	r0, [sp, #0]
    8f22:	9000      	str	r0, [sp, #0]
    8f24:	f89d 0000 	ldrb.w	r0, [sp]
    8f28:	2800      	cmp	r0, #0
    8f2a:	d0f0      	beq.n	8f0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd42>
    8f2c:	2100      	movs	r1, #0
    8f2e:	2025      	movs	r0, #37	; 0x25
    8f30:	f000 f808 	bl	8f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8f34:	6860      	ldr	r0, [r4, #4]
    8f36:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    8f3a:	2001      	movs	r0, #1
    8f3c:	e7e7      	b.n	8f0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd42>
    8f3e:	0000      	.short	0x0000
    8f40:	2000016c 	.word	0x2000016c
    8f44:	b570      	push	{r4, r5, r6, lr}
    8f46:	4c0d      	ldr	r4, [pc, #52]	; (8f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdb0>)
    8f48:	4606      	mov	r6, r0
    8f4a:	460d      	mov	r5, r1
    8f4c:	6860      	ldr	r0, [r4, #4]
    8f4e:	3080      	adds	r0, #128	; 0x80
    8f50:	f005 fe60 	bl	ec14 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8f54:	b120      	cbz	r0, 8f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd94>
    8f56:	f640 31ec 	movw	r1, #3052	; 0xbec
    8f5a:	2031      	movs	r0, #49	; 0x31
    8f5c:	f7fb fa3e 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f60:	6862      	ldr	r2, [r4, #4]
    8f62:	2000      	movs	r0, #0
    8f64:	2d01      	cmp	r5, #1
    8f66:	f882 611c 	strb.w	r6, [r2, #284]	; 0x11c
    8f6a:	d004      	beq.n	8f76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdaa>
    8f6c:	f822 0fca 	strh.w	r0, [r2, #202]!
    8f70:	2001      	movs	r0, #1
    8f72:	7110      	strb	r0, [r2, #4]
    8f74:	bd70      	pop	{r4, r5, r6, pc}
    8f76:	f8a2 00d0 	strh.w	r0, [r2, #208]	; 0xd0
    8f7a:	bd70      	pop	{r4, r5, r6, pc}
    8f7c:	2000016c 	.word	0x2000016c
    8f80:	b538      	push	{r3, r4, r5, lr}
    8f82:	4c1f      	ldr	r4, [pc, #124]	; (9000 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe34>)
    8f84:	2500      	movs	r5, #0
    8f86:	6860      	ldr	r0, [r4, #4]
    8f88:	f890 12a0 	ldrb.w	r1, [r0, #672]	; 0x2a0
    8f8c:	2901      	cmp	r1, #1
    8f8e:	d00c      	beq.n	8faa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdde>
    8f90:	2902      	cmp	r1, #2
    8f92:	d133      	bne.n	8ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe30>
    8f94:	f890 10d4 	ldrb.w	r1, [r0, #212]	; 0xd4
    8f98:	2900      	cmp	r1, #0
    8f9a:	f04f 0106 	mov.w	r1, #6
    8f9e:	d01a      	beq.n	8fd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0a>
    8fa0:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    8fa4:	2101      	movs	r1, #1
    8fa6:	2002      	movs	r0, #2
    8fa8:	e023      	b.n	8ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
    8faa:	f890 1205 	ldrb.w	r1, [r0, #517]	; 0x205
    8fae:	f88d 1000 	strb.w	r1, [sp]
    8fb2:	9900      	ldr	r1, [sp, #0]
    8fb4:	9100      	str	r1, [sp, #0]
    8fb6:	f89d 1000 	ldrb.w	r1, [sp]
    8fba:	2900      	cmp	r1, #0
    8fbc:	d11e      	bne.n	8ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe30>
    8fbe:	f500 7380 	add.w	r3, r0, #256	; 0x100
    8fc2:	f500 710a 	add.w	r1, r0, #552	; 0x228
    8fc6:	2200      	movs	r2, #0
    8fc8:	f200 20a1 	addw	r0, r0, #673	; 0x2a1
    8fcc:	f004 f946 	bl	d25c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    8fd0:	2101      	movs	r1, #1
    8fd2:	2005      	movs	r0, #5
    8fd4:	e00d      	b.n	8ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
    8fd6:	2003      	movs	r0, #3
    8fd8:	f000 fd24 	bl	9a24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1858>
    8fdc:	6860      	ldr	r0, [r4, #4]
    8fde:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    8fe2:	0880      	lsrs	r0, r0, #2
    8fe4:	f010 0f01 	tst.w	r0, #1
    8fe8:	d001      	beq.n	8fee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe22>
    8fea:	2011      	movs	r0, #17
    8fec:	e000      	b.n	8ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    8fee:	200d      	movs	r0, #13
    8ff0:	2101      	movs	r1, #1
    8ff2:	f7ff ffa7 	bl	8f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8ff6:	6860      	ldr	r0, [r4, #4]
    8ff8:	f880 52a0 	strb.w	r5, [r0, #672]	; 0x2a0
    8ffc:	bd38      	pop	{r3, r4, r5, pc}
    8ffe:	0000      	.short	0x0000
    9000:	2000016c 	.word	0x2000016c
    9004:	b570      	push	{r4, r5, r6, lr}
    9006:	4b2b      	ldr	r3, [pc, #172]	; (90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee8>)
    9008:	4602      	mov	r2, r0
    900a:	8858      	ldrh	r0, [r3, #2]
    900c:	4310      	orrs	r0, r2
    900e:	8058      	strh	r0, [r3, #2]
    9010:	f103 0010 	add.w	r0, r3, #16
    9014:	2a40      	cmp	r2, #64	; 0x40
    9016:	6840      	ldr	r0, [r0, #4]
    9018:	d00d      	beq.n	9036 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6a>
    901a:	0796      	lsls	r6, r2, #30
    901c:	f04f 0500 	mov.w	r5, #0
    9020:	f04f 0401 	mov.w	r4, #1
    9024:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    9028:	d50c      	bpl.n	9044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe78>
    902a:	b14e      	cbz	r6, 9040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe74>
    902c:	f640 613f 	movw	r1, #3647	; 0xe3f
    9030:	2031      	movs	r0, #49	; 0x31
    9032:	f7fb f9d3 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    903a:	2104      	movs	r1, #4
    903c:	f7fe bc8e 	b.w	795c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9040:	6099      	str	r1, [r3, #8]
    9042:	e01c      	b.n	907e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    9044:	b1c6      	cbz	r6, 9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    9046:	60d9      	str	r1, [r3, #12]
    9048:	78c9      	ldrb	r1, [r1, #3]
    904a:	2906      	cmp	r1, #6
    904c:	d002      	beq.n	9054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>
    904e:	290b      	cmp	r1, #11
    9050:	d112      	bne.n	9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    9052:	e009      	b.n	9068 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe9c>
    9054:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    9058:	2919      	cmp	r1, #25
    905a:	d10d      	bne.n	9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    905c:	2100      	movs	r1, #0
    905e:	e9c0 113c 	strd	r1, r1, [r0, #240]	; 0xf0
    9062:	f880 409a 	strb.w	r4, [r0, #154]	; 0x9a
    9066:	e007      	b.n	9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    9068:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    906c:	2913      	cmp	r1, #19
    906e:	d103      	bne.n	9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    9070:	f880 509a 	strb.w	r5, [r0, #154]	; 0x9a
    9074:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
    9078:	0791      	lsls	r1, r2, #30
    907a:	d516      	bpl.n	90aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    907c:	6899      	ldr	r1, [r3, #8]
    907e:	78c9      	ldrb	r1, [r1, #3]
    9080:	2905      	cmp	r1, #5
    9082:	d002      	beq.n	908a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xebe>
    9084:	290b      	cmp	r1, #11
    9086:	d110      	bne.n	90aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    9088:	e009      	b.n	909e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    908a:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    908e:	2917      	cmp	r1, #23
    9090:	d10b      	bne.n	90aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    9092:	2100      	movs	r1, #0
    9094:	e9e0 113e 	strd	r1, r1, [r0, #248]!	; 0xf8
    9098:	f800 4c5d 	strb.w	r4, [r0, #-93]
    909c:	e005      	b.n	90aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    909e:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    90a2:	2912      	cmp	r1, #18
    90a4:	d101      	bne.n	90aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    90a6:	f880 509b 	strb.w	r5, [r0, #155]	; 0x9b
    90aa:	0690      	lsls	r0, r2, #26
    90ac:	d501      	bpl.n	90b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee6>
    90ae:	2008      	movs	r0, #8
    90b0:	7058      	strb	r0, [r3, #1]
    90b2:	bd70      	pop	{r4, r5, r6, pc}
    90b4:	2000015c 	.word	0x2000015c
    90b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90bc:	4c28      	ldr	r4, [pc, #160]	; (9160 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf94>)
    90be:	2701      	movs	r7, #1
    90c0:	6860      	ldr	r0, [r4, #4]
    90c2:	f890 12be 	ldrb.w	r1, [r0, #702]	; 0x2be
    90c6:	b109      	cbz	r1, 90cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf00>
    90c8:	2601      	movs	r6, #1
    90ca:	e000      	b.n	90ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf02>
    90cc:	2600      	movs	r6, #0
    90ce:	f890 22bf 	ldrb.w	r2, [r0, #703]	; 0x2bf
    90d2:	b10a      	cbz	r2, 90d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>
    90d4:	2501      	movs	r5, #1
    90d6:	e000      	b.n	90da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0e>
    90d8:	2500      	movs	r5, #0
    90da:	b90e      	cbnz	r6, 90e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf14>
    90dc:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    90e0:	b90d      	cbnz	r5, 90e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1a>
    90e2:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    90e6:	f100 0362 	add.w	r3, r0, #98	; 0x62
    90ea:	7219      	strb	r1, [r3, #8]
    90ec:	725a      	strb	r2, [r3, #9]
    90ee:	22ff      	movs	r2, #255	; 0xff
    90f0:	729a      	strb	r2, [r3, #10]
    90f2:	f006 f88a 	bl	f20a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    90f6:	6860      	ldr	r0, [r4, #4]
    90f8:	f890 0134 	ldrb.w	r0, [r0, #308]	; 0x134
    90fc:	2801      	cmp	r0, #1
    90fe:	d001      	beq.n	9104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    9100:	b906      	cbnz	r6, 9104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    9102:	b115      	cbz	r5, 910a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3e>
    9104:	2000      	movs	r0, #0
    9106:	f000 f82d 	bl	9164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    910a:	6860      	ldr	r0, [r4, #4]
    910c:	302c      	adds	r0, #44	; 0x2c
    910e:	f004 fd99 	bl	dc44 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9112:	4606      	mov	r6, r0
    9114:	2105      	movs	r1, #5
    9116:	6860      	ldr	r0, [r4, #4]
    9118:	f7fe fc20 	bl	795c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    911c:	6860      	ldr	r0, [r4, #4]
    911e:	302c      	adds	r0, #44	; 0x2c
    9120:	f004 fd90 	bl	dc44 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9124:	4605      	mov	r5, r0
    9126:	42ae      	cmp	r6, r5
    9128:	d20a      	bcs.n	9140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf74>
    912a:	f7f8 fcd5 	bl	1ad8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    912e:	4601      	mov	r1, r0
    9130:	1ba8      	subs	r0, r5, r6
    9132:	2865      	cmp	r0, #101	; 0x65
    9134:	d200      	bcs.n	9138 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6c>
    9136:	2065      	movs	r0, #101	; 0x65
    9138:	f7f8 fbf0 	bl	191c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    913c:	b100      	cbz	r0, 9140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf74>
    913e:	2700      	movs	r7, #0
    9140:	6860      	ldr	r0, [r4, #4]
    9142:	f004 fd2b 	bl	db9c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9146:	b138      	cbz	r0, 9158 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>
    9148:	6863      	ldr	r3, [r4, #4]
    914a:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
    914e:	8818      	ldrh	r0, [r3, #0]
    9150:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    9154:	f004 fcdf 	bl	db16 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9158:	4638      	mov	r0, r7
    915a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    915e:	0000      	.short	0x0000
    9160:	2000016c 	.word	0x2000016c
    9164:	b510      	push	{r4, lr}
    9166:	4c0f      	ldr	r4, [pc, #60]	; (91a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd8>)
    9168:	6861      	ldr	r1, [r4, #4]
    916a:	880a      	ldrh	r2, [r1, #0]
    916c:	f8a1 21a0 	strh.w	r2, [r1, #416]	; 0x1a0
    9170:	f881 019e 	strb.w	r0, [r1, #414]	; 0x19e
    9174:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    9178:	f005 fd54 	bl	ec24 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    917c:	6861      	ldr	r1, [r4, #4]
    917e:	f881 01a2 	strb.w	r0, [r1, #418]	; 0x1a2
    9182:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    9186:	f005 fd4d 	bl	ec24 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    918a:	6861      	ldr	r1, [r4, #4]
    918c:	2213      	movs	r2, #19
    918e:	f881 01a3 	strb.w	r0, [r1, #419]	; 0x1a3
    9192:	f501 70ca 	add.w	r0, r1, #404	; 0x194
    9196:	f7fd f893 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    919a:	6861      	ldr	r1, [r4, #4]
    919c:	2000      	movs	r0, #0
    919e:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    91a2:	bd10      	pop	{r4, pc}
    91a4:	2000016c 	.word	0x2000016c
    91a8:	b570      	push	{r4, r5, r6, lr}
    91aa:	4d0f      	ldr	r5, [pc, #60]	; (91e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101c>)
    91ac:	686c      	ldr	r4, [r5, #4]
    91ae:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
    91b2:	2922      	cmp	r1, #34	; 0x22
    91b4:	d002      	beq.n	91bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    91b6:	292e      	cmp	r1, #46	; 0x2e
    91b8:	d003      	beq.n	91c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff6>
    91ba:	e011      	b.n	91e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1014>
    91bc:	f7ff ffd2 	bl	9164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    91c0:	e008      	b.n	91d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1008>
    91c2:	f894 2096 	ldrb.w	r2, [r4, #150]	; 0x96
    91c6:	f104 0080 	add.w	r0, r4, #128	; 0x80
    91ca:	2301      	movs	r3, #1
    91cc:	210b      	movs	r1, #11
    91ce:	f004 f88d 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    91d2:	b138      	cbz	r0, 91e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1018>
    91d4:	6869      	ldr	r1, [r5, #4]
    91d6:	2000      	movs	r0, #0
    91d8:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    91dc:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    91e0:	2000      	movs	r0, #0
    91e2:	bd70      	pop	{r4, r5, r6, pc}
    91e4:	202a      	movs	r0, #42	; 0x2a
    91e6:	e7e9      	b.n	91bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    91e8:	2000016c 	.word	0x2000016c
    91ec:	b570      	push	{r4, r5, r6, lr}
    91ee:	4604      	mov	r4, r0
    91f0:	6840      	ldr	r0, [r0, #4]
    91f2:	2301      	movs	r3, #1
    91f4:	2100      	movs	r1, #0
    91f6:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    91fa:	3080      	adds	r0, #128	; 0x80
    91fc:	f004 f876 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9200:	b1b8      	cbz	r0, 9232 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1066>
    9202:	4d13      	ldr	r5, [pc, #76]	; (9250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1084>)
    9204:	68e8      	ldr	r0, [r5, #12]
    9206:	f004 fad7 	bl	d7b8 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    920a:	6861      	ldr	r1, [r4, #4]
    920c:	f8a1 02bc 	strh.w	r0, [r1, #700]	; 0x2bc
    9210:	6861      	ldr	r1, [r4, #4]
    9212:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
    9216:	f005 fd1e 	bl	ec56 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    921a:	b160      	cbz	r0, 9236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x106a>
    921c:	6861      	ldr	r1, [r4, #4]
    921e:	2028      	movs	r0, #40	; 0x28
    9220:	220a      	movs	r2, #10
    9222:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    9226:	6861      	ldr	r1, [r4, #4]
    9228:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    922c:	f7fd f848 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9230:	e00b      	b.n	924a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x107e>
    9232:	2001      	movs	r0, #1
    9234:	bd70      	pop	{r4, r5, r6, pc}
    9236:	6861      	ldr	r1, [r4, #4]
    9238:	68e8      	ldr	r0, [r5, #12]
    923a:	f201 21be 	addw	r1, r1, #702	; 0x2be
    923e:	f004 fab6 	bl	d7ae <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    9242:	6861      	ldr	r1, [r4, #4]
    9244:	200b      	movs	r0, #11
    9246:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    924a:	2000      	movs	r0, #0
    924c:	bd70      	pop	{r4, r5, r6, pc}
    924e:	0000      	.short	0x0000
    9250:	2000015c 	.word	0x2000015c
    9254:	b570      	push	{r4, r5, r6, lr}
    9256:	4604      	mov	r4, r0
    9258:	6840      	ldr	r0, [r0, #4]
    925a:	2301      	movs	r3, #1
    925c:	2100      	movs	r1, #0
    925e:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9262:	3080      	adds	r0, #128	; 0x80
    9264:	f004 f842 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9268:	b1e0      	cbz	r0, 92a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10d8>
    926a:	4d28      	ldr	r5, [pc, #160]	; (930c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>)
    926c:	2100      	movs	r1, #0
    926e:	68e8      	ldr	r0, [r5, #12]
    9270:	f004 faa5 	bl	d7be <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    9274:	b1c0      	cbz	r0, 92a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10dc>
    9276:	68e8      	ldr	r0, [r5, #12]
    9278:	6861      	ldr	r1, [r4, #4]
    927a:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    927e:	f8a1 02bc 	strh.w	r0, [r1, #700]	; 0x2bc
    9282:	6861      	ldr	r1, [r4, #4]
    9284:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
    9288:	f005 fce5 	bl	ec56 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    928c:	b188      	cbz	r0, 92b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e6>
    928e:	6861      	ldr	r1, [r4, #4]
    9290:	2028      	movs	r0, #40	; 0x28
    9292:	220a      	movs	r2, #10
    9294:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    9298:	6861      	ldr	r1, [r4, #4]
    929a:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    929e:	f7fd f80f 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    92a2:	e030      	b.n	9306 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113a>
    92a4:	2001      	movs	r0, #1
    92a6:	bd70      	pop	{r4, r5, r6, pc}
    92a8:	4620      	mov	r0, r4
    92aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    92ae:	f000 b897 	b.w	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    92b2:	68e8      	ldr	r0, [r5, #12]
    92b4:	f004 faad 	bl	d812 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    92b8:	f003 fffb 	bl	d2b2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    92bc:	4606      	mov	r6, r0
    92be:	6860      	ldr	r0, [r4, #4]
    92c0:	4631      	mov	r1, r6
    92c2:	f8c0 62c4 	str.w	r6, [r0, #708]	; 0x2c4
    92c6:	68e8      	ldr	r0, [r5, #12]
    92c8:	7900      	ldrb	r0, [r0, #4]
    92ca:	f004 f96e 	bl	d5aa <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    92ce:	6861      	ldr	r1, [r4, #4]
    92d0:	f8a1 02be 	strh.w	r0, [r1, #702]	; 0x2be
    92d4:	68e8      	ldr	r0, [r5, #12]
    92d6:	4631      	mov	r1, r6
    92d8:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    92dc:	f004 f961 	bl	d5a2 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    92e0:	6861      	ldr	r1, [r4, #4]
    92e2:	f8c1 02c0 	str.w	r0, [r1, #704]	; 0x2c0
    92e6:	68e8      	ldr	r0, [r5, #12]
    92e8:	f004 fa96 	bl	d818 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    92ec:	6861      	ldr	r1, [r4, #4]
    92ee:	f8a1 02c8 	strh.w	r0, [r1, #712]	; 0x2c8
    92f2:	68e8      	ldr	r0, [r5, #12]
    92f4:	f004 fa93 	bl	d81e <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    92f8:	6861      	ldr	r1, [r4, #4]
    92fa:	f8a1 02ca 	strh.w	r0, [r1, #714]	; 0x2ca
    92fe:	6861      	ldr	r1, [r4, #4]
    9300:	200e      	movs	r0, #14
    9302:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    9306:	2000      	movs	r0, #0
    9308:	bd70      	pop	{r4, r5, r6, pc}
    930a:	0000      	.short	0x0000
    930c:	2000015c 	.word	0x2000015c
    9310:	b538      	push	{r3, r4, r5, lr}
    9312:	4604      	mov	r4, r0
    9314:	6840      	ldr	r0, [r0, #4]
    9316:	2301      	movs	r3, #1
    9318:	2100      	movs	r1, #0
    931a:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    931e:	3080      	adds	r0, #128	; 0x80
    9320:	f003 ffe4 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9324:	b970      	cbnz	r0, 9344 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    9326:	6860      	ldr	r0, [r4, #4]
    9328:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    932c:	2a14      	cmp	r2, #20
    932e:	d009      	beq.n	9344 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    9330:	2301      	movs	r3, #1
    9332:	2105      	movs	r1, #5
    9334:	3080      	adds	r0, #128	; 0x80
    9336:	f003 ffd9 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    933a:	b108      	cbz	r0, 9340 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    933c:	2008      	movs	r0, #8
    933e:	bd38      	pop	{r3, r4, r5, pc}
    9340:	2001      	movs	r0, #1
    9342:	bd38      	pop	{r3, r4, r5, pc}
    9344:	6860      	ldr	r0, [r4, #4]
    9346:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    934a:	b908      	cbnz	r0, 9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
    934c:	f7ff f840 	bl	83d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9350:	4d1b      	ldr	r5, [pc, #108]	; (93c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11f4>)
    9352:	6861      	ldr	r1, [r4, #4]
    9354:	f501 710a 	add.w	r1, r1, #552	; 0x228
    9358:	68e8      	ldr	r0, [r5, #12]
    935a:	f004 fa79 	bl	d850 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    935e:	6861      	ldr	r1, [r4, #4]
    9360:	68e8      	ldr	r0, [r5, #12]
    9362:	f501 7188 	add.w	r1, r1, #272	; 0x110
    9366:	f004 fa6a 	bl	d83e <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    936a:	6860      	ldr	r0, [r4, #4]
    936c:	f890 12d4 	ldrb.w	r1, [r0, #724]	; 0x2d4
    9370:	f88d 1000 	strb.w	r1, [sp]
    9374:	9900      	ldr	r1, [sp, #0]
    9376:	9100      	str	r1, [sp, #0]
    9378:	f89d 1000 	ldrb.w	r1, [sp]
    937c:	b121      	cbz	r1, 9388 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    937e:	f240 3117 	movw	r1, #791	; 0x317
    9382:	2031      	movs	r0, #49	; 0x31
    9384:	f7fb f82a 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9388:	8801      	ldrh	r1, [r0, #0]
    938a:	f8a0 12d6 	strh.w	r1, [r0, #726]	; 0x2d6
    938e:	6861      	ldr	r1, [r4, #4]
    9390:	68e8      	ldr	r0, [r5, #12]
    9392:	f501 7136 	add.w	r1, r1, #728	; 0x2d8
    9396:	f004 fa56 	bl	d846 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    939a:	6861      	ldr	r1, [r4, #4]
    939c:	68e8      	ldr	r0, [r5, #12]
    939e:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
    93a2:	f004 fa49 	bl	d838 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    93a6:	6860      	ldr	r0, [r4, #4]
    93a8:	2209      	movs	r2, #9
    93aa:	4906      	ldr	r1, [pc, #24]	; (93c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11f8>)
    93ac:	f500 7033 	add.w	r0, r0, #716	; 0x2cc
    93b0:	f7fc ff86 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    93b4:	6861      	ldr	r1, [r4, #4]
    93b6:	2016      	movs	r0, #22
    93b8:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    93bc:	2000      	movs	r0, #0
    93be:	bd38      	pop	{r3, r4, r5, pc}
    93c0:	2000015c 	.word	0x2000015c
    93c4:	0000ec6f 	.word	0x0000ec6f
    93c8:	4901      	ldr	r1, [pc, #4]	; (93d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1204>)
    93ca:	68c9      	ldr	r1, [r1, #12]
    93cc:	f7fd ba36 	b.w	683c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    93d0:	2000015c 	.word	0x2000015c
    93d4:	4901      	ldr	r1, [pc, #4]	; (93dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>)
    93d6:	68c9      	ldr	r1, [r1, #12]
    93d8:	f7fd ba60 	b.w	689c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    93dc:	2000015c 	.word	0x2000015c
    93e0:	b510      	push	{r4, lr}
    93e2:	6842      	ldr	r2, [r0, #4]
    93e4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
    93e8:	070b      	lsls	r3, r1, #28
    93ea:	d501      	bpl.n	93f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1224>
    93ec:	2001      	movs	r0, #1
    93ee:	bd10      	pop	{r4, pc}
    93f0:	f041 0108 	orr.w	r1, r1, #8
    93f4:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    93f8:	4904      	ldr	r1, [pc, #16]	; (940c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1240>)
    93fa:	6840      	ldr	r0, [r0, #4]
    93fc:	68c9      	ldr	r1, [r1, #12]
    93fe:	78c9      	ldrb	r1, [r1, #3]
    9400:	f880 1118 	strb.w	r1, [r0, #280]	; 0x118
    9404:	f7fe ffe4 	bl	83d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9408:	2000      	movs	r0, #0
    940a:	bd10      	pop	{r4, pc}
    940c:	2000015c 	.word	0x2000015c
    9410:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9414:	4605      	mov	r5, r0
    9416:	6840      	ldr	r0, [r0, #4]
    9418:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    941c:	f010 0f30 	tst.w	r0, #48	; 0x30
    9420:	d002      	beq.n	9428 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x125c>
    9422:	2001      	movs	r0, #1
    9424:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9428:	4c31      	ldr	r4, [pc, #196]	; (94f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1324>)
    942a:	68e0      	ldr	r0, [r4, #12]
    942c:	f004 fa2a 	bl	d884 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    9430:	b330      	cbz	r0, 9480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b4>
    9432:	68e0      	ldr	r0, [r4, #12]
    9434:	f004 fa20 	bl	d878 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    9438:	4680      	mov	r8, r0
    943a:	68e0      	ldr	r0, [r4, #12]
    943c:	f004 fa20 	bl	d880 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    9440:	4607      	mov	r7, r0
    9442:	68e0      	ldr	r0, [r4, #12]
    9444:	f004 fa16 	bl	d874 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    9448:	4606      	mov	r6, r0
    944a:	68e0      	ldr	r0, [r4, #12]
    944c:	f004 fa16 	bl	d87c <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    9450:	4601      	mov	r1, r0
    9452:	f8cd 8000 	str.w	r8, [sp]
    9456:	6868      	ldr	r0, [r5, #4]
    9458:	463b      	mov	r3, r7
    945a:	4632      	mov	r2, r6
    945c:	302c      	adds	r0, #44	; 0x2c
    945e:	f004 fc2b 	bl	dcb8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9462:	78a0      	ldrb	r0, [r4, #2]
    9464:	0781      	lsls	r1, r0, #30
    9466:	f04f 0001 	mov.w	r0, #1
    946a:	d503      	bpl.n	9474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a8>
    946c:	68a1      	ldr	r1, [r4, #8]
    946e:	78c9      	ldrb	r1, [r1, #3]
    9470:	2914      	cmp	r1, #20
    9472:	d00a      	beq.n	948a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12be>
    9474:	6869      	ldr	r1, [r5, #4]
    9476:	f891 1095 	ldrb.w	r1, [r1, #149]	; 0x95
    947a:	291e      	cmp	r1, #30
    947c:	d005      	beq.n	948a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12be>
    947e:	e007      	b.n	9490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c4>
    9480:	4628      	mov	r0, r5
    9482:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9486:	f7ff bfab 	b.w	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    948a:	6869      	ldr	r1, [r5, #4]
    948c:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9490:	6868      	ldr	r0, [r5, #4]
    9492:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    9496:	2901      	cmp	r1, #1
    9498:	d011      	beq.n	94be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f2>
    949a:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    949e:	f88d 1004 	strb.w	r1, [sp, #4]
    94a2:	9901      	ldr	r1, [sp, #4]
    94a4:	9101      	str	r1, [sp, #4]
    94a6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    94aa:	b941      	cbnz	r1, 94be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f2>
    94ac:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    94b0:	f88d 1000 	strb.w	r1, [sp]
    94b4:	9900      	ldr	r1, [sp, #0]
    94b6:	9100      	str	r1, [sp, #0]
    94b8:	f89d 1000 	ldrb.w	r1, [sp]
    94bc:	b141      	cbz	r1, 94d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1304>
    94be:	f850 1f84 	ldr.w	r1, [r0, #132]!
    94c2:	f041 0110 	orr.w	r1, r1, #16
    94c6:	6001      	str	r1, [r0, #0]
    94c8:	f7fe ff82 	bl	83d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    94cc:	2000      	movs	r0, #0
    94ce:	e7a9      	b.n	9424 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1258>
    94d0:	f850 1f84 	ldr.w	r1, [r0, #132]!
    94d4:	f041 0120 	orr.w	r1, r1, #32
    94d8:	6001      	str	r1, [r0, #0]
    94da:	4805      	ldr	r0, [pc, #20]	; (94f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1324>)
    94dc:	3010      	adds	r0, #16
    94de:	6843      	ldr	r3, [r0, #4]
    94e0:	f503 72b9 	add.w	r2, r3, #370	; 0x172
    94e4:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    94e8:	8818      	ldrh	r0, [r3, #0]
    94ea:	f004 fbec 	bl	dcc6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    94ee:	e7eb      	b.n	94c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12fc>
    94f0:	2000015c 	.word	0x2000015c
    94f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    94f8:	4604      	mov	r4, r0
    94fa:	6840      	ldr	r0, [r0, #4]
    94fc:	2301      	movs	r3, #1
    94fe:	210a      	movs	r1, #10
    9500:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    9504:	3080      	adds	r0, #128	; 0x80
    9506:	f003 fef1 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    950a:	b350      	cbz	r0, 9562 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    950c:	4d16      	ldr	r5, [pc, #88]	; (9568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x139c>)
    950e:	68e8      	ldr	r0, [r5, #12]
    9510:	f004 f9b8 	bl	d884 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    9514:	b1c8      	cbz	r0, 954a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137e>
    9516:	68e8      	ldr	r0, [r5, #12]
    9518:	f004 f9ae 	bl	d878 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    951c:	4607      	mov	r7, r0
    951e:	68e8      	ldr	r0, [r5, #12]
    9520:	f004 f9ae 	bl	d880 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    9524:	4680      	mov	r8, r0
    9526:	68e8      	ldr	r0, [r5, #12]
    9528:	f004 f9a4 	bl	d874 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    952c:	4606      	mov	r6, r0
    952e:	68e8      	ldr	r0, [r5, #12]
    9530:	f004 f9a4 	bl	d87c <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    9534:	4601      	mov	r1, r0
    9536:	9700      	str	r7, [sp, #0]
    9538:	6860      	ldr	r0, [r4, #4]
    953a:	4643      	mov	r3, r8
    953c:	4632      	mov	r2, r6
    953e:	302c      	adds	r0, #44	; 0x2c
    9540:	f004 fbba 	bl	dcb8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9544:	6860      	ldr	r0, [r4, #4]
    9546:	f004 fb29 	bl	db9c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    954a:	6861      	ldr	r1, [r4, #4]
    954c:	2000      	movs	r0, #0
    954e:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    9552:	6861      	ldr	r1, [r4, #4]
    9554:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    9558:	f7ff f91a 	bl	8790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c4>
    955c:	2000      	movs	r0, #0
    955e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9562:	2001      	movs	r0, #1
    9564:	e7fb      	b.n	955e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1392>
    9566:	0000      	.short	0x0000
    9568:	2000015c 	.word	0x2000015c
    956c:	b538      	push	{r3, r4, r5, lr}
    956e:	4604      	mov	r4, r0
    9570:	6840      	ldr	r0, [r0, #4]
    9572:	2301      	movs	r3, #1
    9574:	210b      	movs	r1, #11
    9576:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    957a:	3080      	adds	r0, #128	; 0x80
    957c:	f003 feb6 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9580:	bb60      	cbnz	r0, 95dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1410>
    9582:	6860      	ldr	r0, [r4, #4]
    9584:	2301      	movs	r3, #1
    9586:	2100      	movs	r1, #0
    9588:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    958c:	3080      	adds	r0, #128	; 0x80
    958e:	f003 fead 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9592:	b308      	cbz	r0, 95d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x140c>
    9594:	6860      	ldr	r0, [r4, #4]
    9596:	f890 0095 	ldrb.w	r0, [r0, #149]	; 0x95
    959a:	2826      	cmp	r0, #38	; 0x26
    959c:	d01e      	beq.n	95dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1410>
    959e:	4d29      	ldr	r5, [pc, #164]	; (9644 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1478>)
    95a0:	68e8      	ldr	r0, [r5, #12]
    95a2:	f004 f981 	bl	d8a8 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    95a6:	b1d8      	cbz	r0, 95e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1414>
    95a8:	68e8      	ldr	r0, [r5, #12]
    95aa:	6862      	ldr	r2, [r4, #4]
    95ac:	7941      	ldrb	r1, [r0, #5]
    95ae:	f001 0107 	and.w	r1, r1, #7
    95b2:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    95b6:	7900      	ldrb	r0, [r0, #4]
    95b8:	f000 0107 	and.w	r1, r0, #7
    95bc:	6860      	ldr	r0, [r4, #4]
    95be:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    95c2:	6860      	ldr	r0, [r4, #4]
    95c4:	f890 2135 	ldrb.w	r2, [r0, #309]	; 0x135
    95c8:	f88d 2000 	strb.w	r2, [sp]
    95cc:	9a00      	ldr	r2, [sp, #0]
    95ce:	9200      	str	r2, [sp, #0]
    95d0:	f89d 2000 	ldrb.w	r2, [sp]
    95d4:	bb72      	cbnz	r2, 9634 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1468>
    95d6:	e008      	b.n	95ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x141e>
    95d8:	2001      	movs	r0, #1
    95da:	bd38      	pop	{r3, r4, r5, pc}
    95dc:	2020      	movs	r0, #32
    95de:	bd38      	pop	{r3, r4, r5, pc}
    95e0:	4620      	mov	r0, r4
    95e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    95e6:	f7ff befb 	b.w	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    95ea:	f890 2134 	ldrb.w	r2, [r0, #308]	; 0x134
    95ee:	2a01      	cmp	r2, #1
    95f0:	d020      	beq.n	9634 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1468>
    95f2:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    95f6:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    95fa:	7855      	ldrb	r5, [r2, #1]
    95fc:	428d      	cmp	r5, r1
    95fe:	d106      	bne.n	960e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1442>
    9600:	7811      	ldrb	r1, [r2, #0]
    9602:	4299      	cmp	r1, r3
    9604:	d103      	bne.n	960e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1442>
    9606:	2102      	movs	r1, #2
    9608:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
    960c:	e012      	b.n	9634 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1468>
    960e:	480d      	ldr	r0, [pc, #52]	; (9644 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1478>)
    9610:	3010      	adds	r0, #16
    9612:	6841      	ldr	r1, [r0, #4]
    9614:	f501 70c8 	add.w	r0, r1, #400	; 0x190
    9618:	880a      	ldrh	r2, [r1, #0]
    961a:	f820 2b02 	strh.w	r2, [r0], #2
    961e:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    9622:	f800 2b01 	strb.w	r2, [r0], #1
    9626:	f891 2063 	ldrb.w	r2, [r1, #99]	; 0x63
    962a:	f800 290d 	strb.w	r2, [r0], #-13
    962e:	221f      	movs	r2, #31
    9630:	f7fc fe46 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9634:	6861      	ldr	r1, [r4, #4]
    9636:	2023      	movs	r0, #35	; 0x23
    9638:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    963c:	f7fe fec8 	bl	83d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9640:	2000      	movs	r0, #0
    9642:	bd38      	pop	{r3, r4, r5, pc}
    9644:	2000015c 	.word	0x2000015c
    9648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    964c:	6845      	ldr	r5, [r0, #4]
    964e:	4604      	mov	r4, r0
    9650:	f895 0095 	ldrb.w	r0, [r5, #149]	; 0x95
    9654:	2822      	cmp	r0, #34	; 0x22
    9656:	d008      	beq.n	966a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149e>
    9658:	f05f 0600 	movs.w	r6, #0
    965c:	f895 0096 	ldrb.w	r0, [r5, #150]	; 0x96
    9660:	2824      	cmp	r0, #36	; 0x24
    9662:	d004      	beq.n	966e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a2>
    9664:	b38e      	cbz	r6, 96ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fe>
    9666:	3595      	adds	r5, #149	; 0x95
    9668:	e002      	b.n	9670 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a4>
    966a:	2601      	movs	r6, #1
    966c:	e7f6      	b.n	965c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1490>
    966e:	3596      	adds	r5, #150	; 0x96
    9670:	f8df 8120 	ldr.w	r8, [pc, #288]	; 9794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>
    9674:	f8d8 000c 	ldr.w	r0, [r8, #12]
    9678:	f004 f922 	bl	d8c0 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    967c:	2700      	movs	r7, #0
    967e:	b340      	cbz	r0, 96d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1506>
    9680:	4631      	mov	r1, r6
    9682:	f8d8 000c 	ldr.w	r0, [r8, #12]
    9686:	f7fe ff79 	bl	857c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    968a:	b310      	cbz	r0, 96d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1506>
    968c:	466a      	mov	r2, sp
    968e:	4646      	mov	r6, r8
    9690:	6860      	ldr	r0, [r4, #4]
    9692:	f8d8 100c 	ldr.w	r1, [r8, #12]
    9696:	f003 ff3e 	bl	d516 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    969a:	b3c0      	cbz	r0, 970e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1542>
    969c:	68f0      	ldr	r0, [r6, #12]
    969e:	f004 f90d 	bl	d8bc <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    96a2:	6861      	ldr	r1, [r4, #4]
    96a4:	f8a1 02bc 	strh.w	r0, [r1, #700]	; 0x2bc
    96a8:	6861      	ldr	r1, [r4, #4]
    96aa:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
    96ae:	f005 fad2 	bl	ec56 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    96b2:	b368      	cbz	r0, 9710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1544>
    96b4:	6861      	ldr	r1, [r4, #4]
    96b6:	2028      	movs	r0, #40	; 0x28
    96b8:	220a      	movs	r2, #10
    96ba:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    96be:	6861      	ldr	r1, [r4, #4]
    96c0:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    96c4:	f7fc fdfc 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    96c8:	e058      	b.n	977c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    96ca:	e7ff      	b.n	96cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1500>
    96cc:	2002      	movs	r0, #2
    96ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    96d2:	6860      	ldr	r0, [r4, #4]
    96d4:	f04f 0900 	mov.w	r9, #0
    96d8:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    96dc:	2901      	cmp	r1, #1
    96de:	d018      	beq.n	9712 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1546>
    96e0:	f880 7134 	strb.w	r7, [r0, #308]	; 0x134
    96e4:	b30e      	cbz	r6, 972a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155e>
    96e6:	f8d8 000c 	ldr.w	r0, [r8, #12]
    96ea:	6861      	ldr	r1, [r4, #4]
    96ec:	2201      	movs	r2, #1
    96ee:	78c0      	ldrb	r0, [r0, #3]
    96f0:	f881 0119 	strb.w	r0, [r1, #281]	; 0x119
    96f4:	4082      	lsls	r2, r0
    96f6:	6861      	ldr	r1, [r4, #4]
    96f8:	f3c2 6000 	ubfx	r0, r2, #24, #1
    96fc:	b168      	cbz	r0, 971a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154e>
    96fe:	200a      	movs	r0, #10
    9700:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    9704:	6860      	ldr	r0, [r4, #4]
    9706:	f890 00ce 	ldrb.w	r0, [r0, #206]	; 0xce
    970a:	b9a8      	cbnz	r0, 9738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156c>
    970c:	e008      	b.n	9720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1554>
    970e:	e015      	b.n	973c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1570>
    9710:	e028      	b.n	9764 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1598>
    9712:	201e      	movs	r0, #30
    9714:	f7ff fd26 	bl	9164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9718:	e7e4      	b.n	96e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1518>
    971a:	f240 4163 	movw	r1, #1123	; 0x463
    971e:	e001      	b.n	9724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1558>
    9720:	f240 416b 	movw	r1, #1131	; 0x46b
    9724:	2031      	movs	r0, #49	; 0x31
    9726:	f7fa fe59 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    972a:	702f      	strb	r7, [r5, #0]
    972c:	f7fe fe5c 	bl	83e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9730:	4620      	mov	r0, r4
    9732:	f7ff fe55 	bl	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    9736:	4681      	mov	r9, r0
    9738:	4648      	mov	r0, r9
    973a:	e7c8      	b.n	96ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    973c:	6860      	ldr	r0, [r4, #4]
    973e:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    9742:	2901      	cmp	r1, #1
    9744:	d009      	beq.n	975a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x158e>
    9746:	f880 7134 	strb.w	r7, [r0, #308]	; 0x134
    974a:	6860      	ldr	r0, [r4, #4]
    974c:	f100 0196 	add.w	r1, r0, #150	; 0x96
    9750:	42a9      	cmp	r1, r5
    9752:	d113      	bne.n	977c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    9754:	f880 7096 	strb.w	r7, [r0, #150]	; 0x96
    9758:	e010      	b.n	977c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    975a:	2000      	movs	r0, #0
    975c:	f7ff fd02 	bl	9164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9760:	702f      	strb	r7, [r5, #0]
    9762:	e7f2      	b.n	974a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157e>
    9764:	6861      	ldr	r1, [r4, #4]
    9766:	f89d 0000 	ldrb.w	r0, [sp]
    976a:	f881 02be 	strb.w	r0, [r1, #702]	; 0x2be
    976e:	6861      	ldr	r1, [r4, #4]
    9770:	f89d 0001 	ldrb.w	r0, [sp, #1]
    9774:	f881 02bf 	strb.w	r0, [r1, #703]	; 0x2bf
    9778:	2026      	movs	r0, #38	; 0x26
    977a:	7028      	strb	r0, [r5, #0]
    977c:	6860      	ldr	r0, [r4, #4]
    977e:	f100 0196 	add.w	r1, r0, #150	; 0x96
    9782:	42a9      	cmp	r1, r5
    9784:	d102      	bne.n	978c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    9786:	f7fe fe2f 	bl	83e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    978a:	e001      	b.n	9790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    978c:	f880 70ce 	strb.w	r7, [r0, #206]	; 0xce
    9790:	2000      	movs	r0, #0
    9792:	e79c      	b.n	96ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    9794:	2000015c 	.word	0x2000015c
    9798:	b570      	push	{r4, r5, r6, lr}
    979a:	6840      	ldr	r0, [r0, #4]
    979c:	4d09      	ldr	r5, [pc, #36]	; (97c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>)
    979e:	f810 1fe4 	ldrb.w	r1, [r0, #228]!
    97a2:	f041 0104 	orr.w	r1, r1, #4
    97a6:	7001      	strb	r1, [r0, #0]
    97a8:	68e8      	ldr	r0, [r5, #12]
    97aa:	f004 f89d 	bl	d8e8 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    97ae:	4604      	mov	r4, r0
    97b0:	68e8      	ldr	r0, [r5, #12]
    97b2:	f004 f89d 	bl	d8f0 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    97b6:	4601      	mov	r1, r0
    97b8:	4620      	mov	r0, r4
    97ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    97be:	f000 b91b 	b.w	99f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    97c2:	0000      	.short	0x0000
    97c4:	2000015c 	.word	0x2000015c
    97c8:	480a      	ldr	r0, [pc, #40]	; (97f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1628>)
    97ca:	68c0      	ldr	r0, [r0, #12]
    97cc:	7901      	ldrb	r1, [r0, #4]
    97ce:	4809      	ldr	r0, [pc, #36]	; (97f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1628>)
    97d0:	3010      	adds	r0, #16
    97d2:	6840      	ldr	r0, [r0, #4]
    97d4:	f890 0095 	ldrb.w	r0, [r0, #149]	; 0x95
    97d8:	2822      	cmp	r0, #34	; 0x22
    97da:	d007      	beq.n	97ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1620>
    97dc:	282e      	cmp	r0, #46	; 0x2e
    97de:	d005      	beq.n	97ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1620>
    97e0:	2829      	cmp	r0, #41	; 0x29
    97e2:	d005      	beq.n	97f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1624>
    97e4:	f05f 00fe 	movs.w	r0, #254	; 0xfe
    97e8:	f000 b906 	b.w	99f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    97ec:	2016      	movs	r0, #22
    97ee:	e7fb      	b.n	97e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    97f0:	2023      	movs	r0, #35	; 0x23
    97f2:	e7f9      	b.n	97e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    97f4:	2000015c 	.word	0x2000015c
    97f8:	b510      	push	{r4, lr}
    97fa:	4604      	mov	r4, r0
    97fc:	6840      	ldr	r0, [r0, #4]
    97fe:	2301      	movs	r3, #1
    9800:	4619      	mov	r1, r3
    9802:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    9806:	3080      	adds	r0, #128	; 0x80
    9808:	f003 fd70 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    980c:	b108      	cbz	r0, 9812 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    980e:	2000      	movs	r0, #0
    9810:	bd10      	pop	{r4, pc}
    9812:	4806      	ldr	r0, [pc, #24]	; (982c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1660>)
    9814:	68c0      	ldr	r0, [r0, #12]
    9816:	f004 f895 	bl	d944 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    981a:	6861      	ldr	r1, [r4, #4]
    981c:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    9820:	6861      	ldr	r1, [r4, #4]
    9822:	2007      	movs	r0, #7
    9824:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
    9828:	e7f1      	b.n	980e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1642>
    982a:	0000      	.short	0x0000
    982c:	2000015c 	.word	0x2000015c
    9830:	b570      	push	{r4, r5, r6, lr}
    9832:	4604      	mov	r4, r0
    9834:	483a      	ldr	r0, [pc, #232]	; (9920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    9836:	6861      	ldr	r1, [r4, #4]
    9838:	2500      	movs	r5, #0
    983a:	68c0      	ldr	r0, [r0, #12]
    983c:	7902      	ldrb	r2, [r0, #4]
    983e:	f891 0095 	ldrb.w	r0, [r1, #149]	; 0x95
    9842:	2a16      	cmp	r2, #22
    9844:	d034      	beq.n	98b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
    9846:	dc06      	bgt.n	9856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x168a>
    9848:	2a0e      	cmp	r2, #14
    984a:	d009      	beq.n	9860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>
    984c:	2a12      	cmp	r2, #18
    984e:	d01b      	beq.n	9888 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    9850:	2a14      	cmp	r2, #20
    9852:	d162      	bne.n	991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9854:	e01f      	b.n	9896 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ca>
    9856:	2a17      	cmp	r2, #23
    9858:	d043      	beq.n	98e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1716>
    985a:	2a23      	cmp	r2, #35	; 0x23
    985c:	d15d      	bne.n	991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    985e:	e055      	b.n	990c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1740>
    9860:	2804      	cmp	r0, #4
    9862:	d15a      	bne.n	991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9864:	4620      	mov	r0, r4
    9866:	f005 fa13 	bl	ec90 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    986a:	482d      	ldr	r0, [pc, #180]	; (9920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    986c:	2207      	movs	r2, #7
    986e:	3010      	adds	r0, #16
    9870:	6841      	ldr	r1, [r0, #4]
    9872:	8808      	ldrh	r0, [r1, #0]
    9874:	f8a1 01b0 	strh.w	r0, [r1, #432]	; 0x1b0
    9878:	201a      	movs	r0, #26
    987a:	f881 01ae 	strb.w	r0, [r1, #430]	; 0x1ae
    987e:	f501 70d2 	add.w	r0, r1, #420	; 0x1a4
    9882:	f7fc fd1d 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9886:	e048      	b.n	991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9888:	2810      	cmp	r0, #16
    988a:	d146      	bne.n	991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    988c:	4620      	mov	r0, r4
    988e:	f005 fa1d 	bl	eccc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xd6>
    9892:	4605      	mov	r5, r0
    9894:	e041      	b.n	991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9896:	281e      	cmp	r0, #30
    9898:	d13f      	bne.n	991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    989a:	4620      	mov	r0, r4
    989c:	f005 f9f8 	bl	ec90 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    98a0:	6860      	ldr	r0, [r4, #4]
    98a2:	2105      	movs	r1, #5
    98a4:	30e4      	adds	r0, #228	; 0xe4
    98a6:	f005 f966 	bl	eb76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f0>
    98aa:	f7fe ff71 	bl	8790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c4>
    98ae:	e034      	b.n	991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    98b0:	2822      	cmp	r0, #34	; 0x22
    98b2:	d001      	beq.n	98b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ec>
    98b4:	282e      	cmp	r0, #46	; 0x2e
    98b6:	d130      	bne.n	991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    98b8:	4620      	mov	r0, r4
    98ba:	f005 f9e9 	bl	ec90 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    98be:	6860      	ldr	r0, [r4, #4]
    98c0:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    98c4:	2923      	cmp	r1, #35	; 0x23
    98c6:	d028      	beq.n	991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    98c8:	2108      	movs	r1, #8
    98ca:	30e4      	adds	r0, #228	; 0xe4
    98cc:	f005 f953 	bl	eb76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f0>
    98d0:	6860      	ldr	r0, [r4, #4]
    98d2:	210b      	movs	r1, #11
    98d4:	30e4      	adds	r0, #228	; 0xe4
    98d6:	f005 f94e 	bl	eb76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f0>
    98da:	201a      	movs	r0, #26
    98dc:	f7ff fc42 	bl	9164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    98e0:	e01b      	b.n	991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    98e2:	f891 0096 	ldrb.w	r0, [r1, #150]	; 0x96
    98e6:	2824      	cmp	r0, #36	; 0x24
    98e8:	d117      	bne.n	991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    98ea:	2600      	movs	r6, #0
    98ec:	f881 6096 	strb.w	r6, [r1, #150]	; 0x96
    98f0:	f7fe fd7a 	bl	83e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    98f4:	6860      	ldr	r0, [r4, #4]
    98f6:	f890 0134 	ldrb.w	r0, [r0, #308]	; 0x134
    98fa:	2801      	cmp	r0, #1
    98fc:	d102      	bne.n	9904 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1738>
    98fe:	2000      	movs	r0, #0
    9900:	f7ff fc30 	bl	9164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9904:	6860      	ldr	r0, [r4, #4]
    9906:	f880 6134 	strb.w	r6, [r0, #308]	; 0x134
    990a:	e006      	b.n	991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    990c:	2829      	cmp	r0, #41	; 0x29
    990e:	d104      	bne.n	991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9910:	4804      	ldr	r0, [pc, #16]	; (9924 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1758>)
    9912:	6801      	ldr	r1, [r0, #0]
    9914:	b109      	cbz	r1, 991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9916:	4620      	mov	r0, r4
    9918:	4788      	blx	r1
    991a:	4628      	mov	r0, r5
    991c:	bd70      	pop	{r4, r5, r6, pc}
    991e:	0000      	.short	0x0000
    9920:	2000015c 	.word	0x2000015c
    9924:	200002d0 	.word	0x200002d0
    9928:	b570      	push	{r4, r5, r6, lr}
    992a:	4604      	mov	r4, r0
    992c:	6840      	ldr	r0, [r0, #4]
    992e:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    9932:	0789      	lsls	r1, r1, #30
    9934:	d507      	bpl.n	9946 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x177a>
    9936:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    993a:	2301      	movs	r3, #1
    993c:	2108      	movs	r1, #8
    993e:	3080      	adds	r0, #128	; 0x80
    9940:	f003 fcd4 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9944:	b308      	cbz	r0, 998a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17be>
    9946:	6860      	ldr	r0, [r4, #4]
    9948:	f890 00d5 	ldrb.w	r0, [r0, #213]	; 0xd5
    994c:	0780      	lsls	r0, r0, #30
    994e:	d416      	bmi.n	997e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    9950:	4d28      	ldr	r5, [pc, #160]	; (99f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    9952:	68e8      	ldr	r0, [r5, #12]
    9954:	f003 fff8 	bl	d948 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    9958:	6861      	ldr	r1, [r4, #4]
    995a:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
    995e:	68e8      	ldr	r0, [r5, #12]
    9960:	6862      	ldr	r2, [r4, #4]
    9962:	f830 1f05 	ldrh.w	r1, [r0, #5]!
    9966:	f8a2 10e0 	strh.w	r1, [r2, #224]	; 0xe0
    996a:	6861      	ldr	r1, [r4, #4]
    996c:	8840      	ldrh	r0, [r0, #2]
    996e:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    9972:	6860      	ldr	r0, [r4, #4]
    9974:	f810 1fd5 	ldrb.w	r1, [r0, #213]!
    9978:	f041 0102 	orr.w	r1, r1, #2
    997c:	7001      	strb	r1, [r0, #0]
    997e:	6860      	ldr	r0, [r4, #4]
    9980:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
    9984:	07c9      	lsls	r1, r1, #31
    9986:	d002      	beq.n	998e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c2>
    9988:	e015      	b.n	99b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ea>
    998a:	2001      	movs	r0, #1
    998c:	bd70      	pop	{r4, r5, r6, pc}
    998e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
    9992:	078a      	lsls	r2, r1, #30
    9994:	d504      	bpl.n	99a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d4>
    9996:	f240 3155 	movw	r1, #853	; 0x355
    999a:	2031      	movs	r0, #49	; 0x31
    999c:	f7fa fd1e 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99a0:	f041 0102 	orr.w	r1, r1, #2
    99a4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    99a8:	f7fe fd12 	bl	83d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    99ac:	6860      	ldr	r0, [r4, #4]
    99ae:	f890 00d5 	ldrb.w	r0, [r0, #213]	; 0xd5
    99b2:	07c0      	lsls	r0, r0, #31
    99b4:	d005      	beq.n	99c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f6>
    99b6:	6861      	ldr	r1, [r4, #4]
    99b8:	2203      	movs	r2, #3
    99ba:	f101 00d6 	add.w	r0, r1, #214	; 0xd6
    99be:	f7fc fc7f 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    99c2:	6861      	ldr	r1, [r4, #4]
    99c4:	2000      	movs	r0, #0
    99c6:	f891 2095 	ldrb.w	r2, [r1, #149]	; 0x95
    99ca:	2a06      	cmp	r2, #6
    99cc:	d104      	bne.n	99d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x180c>
    99ce:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    99d2:	6861      	ldr	r1, [r4, #4]
    99d4:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    99d8:	6861      	ldr	r1, [r4, #4]
    99da:	f891 213a 	ldrb.w	r2, [r1, #314]	; 0x13a
    99de:	b13a      	cbz	r2, 99f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1824>
    99e0:	f881 013a 	strb.w	r0, [r1, #314]	; 0x13a
    99e4:	6861      	ldr	r1, [r4, #4]
    99e6:	f891 2095 	ldrb.w	r2, [r1, #149]	; 0x95
    99ea:	b90a      	cbnz	r2, 99f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1824>
    99ec:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    99f0:	2000      	movs	r0, #0
    99f2:	bd70      	pop	{r4, r5, r6, pc}
    99f4:	2000015c 	.word	0x2000015c
    99f8:	4603      	mov	r3, r0
    99fa:	2000      	movs	r0, #0
    99fc:	2b16      	cmp	r3, #22
    99fe:	d00b      	beq.n	9a18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    9a00:	2b23      	cmp	r3, #35	; 0x23
    9a02:	d003      	beq.n	9a0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1840>
    9a04:	2b24      	cmp	r3, #36	; 0x24
    9a06:	d001      	beq.n	9a0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1840>
    9a08:	2b25      	cmp	r3, #37	; 0x25
    9a0a:	d108      	bne.n	9a1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    9a0c:	4a04      	ldr	r2, [pc, #16]	; (9a20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>)
    9a0e:	6812      	ldr	r2, [r2, #0]
    9a10:	2a00      	cmp	r2, #0
    9a12:	d004      	beq.n	9a1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    9a14:	4618      	mov	r0, r3
    9a16:	4710      	bx	r2
    9a18:	4608      	mov	r0, r1
    9a1a:	f7ff bbc5 	b.w	91a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    9a1e:	4770      	bx	lr
    9a20:	200002cc 	.word	0x200002cc
    9a24:	4a03      	ldr	r2, [pc, #12]	; (9a34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>)
    9a26:	6852      	ldr	r2, [r2, #4]
    9a28:	f882 011b 	strb.w	r0, [r2, #283]	; 0x11b
    9a2c:	f882 111a 	strb.w	r1, [r2, #282]	; 0x11a
    9a30:	4770      	bx	lr
    9a32:	0000      	.short	0x0000
    9a34:	2000016c 	.word	0x2000016c
    9a38:	4915      	ldr	r1, [pc, #84]	; (9a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c4>)
    9a3a:	b510      	push	{r4, lr}
    9a3c:	6889      	ldr	r1, [r1, #8]
    9a3e:	790a      	ldrb	r2, [r1, #4]
    9a40:	6841      	ldr	r1, [r0, #4]
    9a42:	f891 3095 	ldrb.w	r3, [r1, #149]	; 0x95
    9a46:	2b0a      	cmp	r3, #10
    9a48:	d10a      	bne.n	9a60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1894>
    9a4a:	f891 3119 	ldrb.w	r3, [r1, #281]	; 0x119
    9a4e:	4293      	cmp	r3, r2
    9a50:	d106      	bne.n	9a60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1894>
    9a52:	2200      	movs	r2, #0
    9a54:	f881 2095 	strb.w	r2, [r1, #149]	; 0x95
    9a58:	6840      	ldr	r0, [r0, #4]
    9a5a:	f880 20ce 	strb.w	r2, [r0, #206]	; 0xce
    9a5e:	bd10      	pop	{r4, pc}
    9a60:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    9a64:	071c      	lsls	r4, r3, #28
    9a66:	d507      	bpl.n	9a78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ac>
    9a68:	f023 0008 	bic.w	r0, r3, #8
    9a6c:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    9a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a74:	f7fe bcb8 	b.w	83e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9a78:	2aff      	cmp	r2, #255	; 0xff
    9a7a:	d004      	beq.n	9a86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ba>
    9a7c:	f240 719c 	movw	r1, #1948	; 0x79c
    9a80:	2031      	movs	r0, #49	; 0x31
    9a82:	f7fa fcab 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a8a:	f005 b9b7 	b.w	edfc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x206>
    9a8e:	0000      	.short	0x0000
    9a90:	2000015c 	.word	0x2000015c
    9a94:	4808      	ldr	r0, [pc, #32]	; (9ab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ec>)
    9a96:	b510      	push	{r4, lr}
    9a98:	6840      	ldr	r0, [r0, #4]
    9a9a:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
    9a9e:	b941      	cbnz	r1, 9ab2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18e6>
    9aa0:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9aa4:	2301      	movs	r3, #1
    9aa6:	2106      	movs	r1, #6
    9aa8:	3080      	adds	r0, #128	; 0x80
    9aaa:	f003 fc1f 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9aae:	2800      	cmp	r0, #0
    9ab0:	d000      	beq.n	9ab4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18e8>
    9ab2:	2001      	movs	r0, #1
    9ab4:	bd10      	pop	{r4, pc}
    9ab6:	0000      	.short	0x0000
    9ab8:	2000016c 	.word	0x2000016c
    9abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9abe:	4c5e      	ldr	r4, [pc, #376]	; (9c38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    9ac0:	4607      	mov	r7, r0
    9ac2:	4615      	mov	r5, r2
    9ac4:	6860      	ldr	r0, [r4, #4]
    9ac6:	2200      	movs	r2, #0
    9ac8:	b111      	cbz	r1, 9ad0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1904>
    9aca:	f8a0 2226 	strh.w	r2, [r0, #550]	; 0x226
    9ace:	e006      	b.n	9ade <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1912>
    9ad0:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    9ad4:	f8b0 2216 	ldrh.w	r2, [r0, #534]	; 0x216
    9ad8:	4411      	add	r1, r2
    9ada:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    9ade:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    9ae2:	f88d 1000 	strb.w	r1, [sp]
    9ae6:	9900      	ldr	r1, [sp, #0]
    9ae8:	9100      	str	r1, [sp, #0]
    9aea:	f89d 1000 	ldrb.w	r1, [sp]
    9aee:	b939      	cbnz	r1, 9b00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1934>
    9af0:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    9af4:	2301      	movs	r3, #1
    9af6:	4619      	mov	r1, r3
    9af8:	3080      	adds	r0, #128	; 0x80
    9afa:	f003 fbf7 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9afe:	b130      	cbz	r0, 9b0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1942>
    9b00:	6860      	ldr	r0, [r4, #4]
    9b02:	f830 1fc8 	ldrh.w	r1, [r0, #200]!
    9b06:	f8b0 214e 	ldrh.w	r2, [r0, #334]	; 0x14e
    9b0a:	4411      	add	r1, r2
    9b0c:	8001      	strh	r1, [r0, #0]
    9b0e:	6861      	ldr	r1, [r4, #4]
    9b10:	f891 00ce 	ldrb.w	r0, [r1, #206]	; 0xce
    9b14:	b130      	cbz	r0, 9b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1958>
    9b16:	f8b1 20ca 	ldrh.w	r2, [r1, #202]	; 0xca
    9b1a:	f8b1 3216 	ldrh.w	r3, [r1, #534]	; 0x216
    9b1e:	441a      	add	r2, r3
    9b20:	f8a1 20ca 	strh.w	r2, [r1, #202]	; 0xca
    9b24:	f991 20d2 	ldrsb.w	r2, [r1, #210]	; 0xd2
    9b28:	2a00      	cmp	r2, #0
    9b2a:	dd06      	ble.n	9b3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    9b2c:	f8b1 30d0 	ldrh.w	r3, [r1, #208]	; 0xd0
    9b30:	f8b1 6216 	ldrh.w	r6, [r1, #534]	; 0x216
    9b34:	4433      	add	r3, r6
    9b36:	f8a1 30d0 	strh.w	r3, [r1, #208]	; 0xd0
    9b3a:	263d      	movs	r6, #61	; 0x3d
    9b3c:	b117      	cbz	r7, 9b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    9b3e:	f881 60b5 	strb.w	r6, [r1, #181]	; 0xb5
    9b42:	e016      	b.n	9b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    9b44:	4b3c      	ldr	r3, [pc, #240]	; (9c38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    9b46:	3b10      	subs	r3, #16
    9b48:	781b      	ldrb	r3, [r3, #0]
    9b4a:	2b02      	cmp	r3, #2
    9b4c:	d00b      	beq.n	9b66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199a>
    9b4e:	2b01      	cmp	r3, #1
    9b50:	d015      	beq.n	9b7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b2>
    9b52:	b36d      	cbz	r5, 9bb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e4>
    9b54:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    9b58:	220a      	movs	r2, #10
    9b5a:	f7fc fbb1 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9b5e:	06e8      	lsls	r0, r5, #27
    9b60:	d510      	bpl.n	9b84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b8>
    9b62:	201e      	movs	r0, #30
    9b64:	e01b      	b.n	9b9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d2>
    9b66:	f891 011e 	ldrb.w	r0, [r1, #286]	; 0x11e
    9b6a:	2806      	cmp	r0, #6
    9b6c:	d048      	beq.n	9c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9b6e:	2016      	movs	r0, #22
    9b70:	e046      	b.n	9c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9b72:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    9b76:	220a      	movs	r2, #10
    9b78:	f7fc fba2 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9b7c:	e049      	b.n	9c12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9b7e:	f891 0098 	ldrb.w	r0, [r1, #152]	; 0x98
    9b82:	e03d      	b.n	9c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9b84:	0728      	lsls	r0, r5, #28
    9b86:	d503      	bpl.n	9b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    9b88:	6860      	ldr	r0, [r4, #4]
    9b8a:	f880 60b5 	strb.w	r6, [r0, #181]	; 0xb5
    9b8e:	e040      	b.n	9c12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9b90:	06a8      	lsls	r0, r5, #26
    9b92:	d501      	bpl.n	9b98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19cc>
    9b94:	2023      	movs	r0, #35	; 0x23
    9b96:	e002      	b.n	9b9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d2>
    9b98:	07a8      	lsls	r0, r5, #30
    9b9a:	d004      	beq.n	9ba6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19da>
    9b9c:	202a      	movs	r0, #42	; 0x2a
    9b9e:	6861      	ldr	r1, [r4, #4]
    9ba0:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    9ba4:	e035      	b.n	9c12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9ba6:	f640 51e9 	movw	r1, #3561	; 0xde9
    9baa:	2031      	movs	r0, #49	; 0x31
    9bac:	f7fa fc16 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bb0:	b128      	cbz	r0, 9bbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f2>
    9bb2:	f8b1 00ca 	ldrh.w	r0, [r1, #202]	; 0xca
    9bb6:	f8b1 30cc 	ldrh.w	r3, [r1, #204]	; 0xcc
    9bba:	4298      	cmp	r0, r3
    9bbc:	d216      	bcs.n	9bec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a20>
    9bbe:	2a00      	cmp	r2, #0
    9bc0:	dd05      	ble.n	9bce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a02>
    9bc2:	f8b1 00d0 	ldrh.w	r0, [r1, #208]	; 0xd0
    9bc6:	f8b1 20cc 	ldrh.w	r2, [r1, #204]	; 0xcc
    9bca:	4290      	cmp	r0, r2
    9bcc:	d20e      	bcs.n	9bec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a20>
    9bce:	f8b1 20c8 	ldrh.w	r2, [r1, #200]	; 0xc8
    9bd2:	f8b1 00c6 	ldrh.w	r0, [r1, #198]	; 0xc6
    9bd6:	4282      	cmp	r2, r0
    9bd8:	d30a      	bcc.n	9bf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    9bda:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
    9bde:	f88d 2000 	strb.w	r2, [sp]
    9be2:	9a00      	ldr	r2, [sp, #0]
    9be4:	9200      	str	r2, [sp, #0]
    9be6:	f89d 2000 	ldrb.w	r2, [sp]
    9bea:	b10a      	cbz	r2, 9bf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    9bec:	2022      	movs	r0, #34	; 0x22
    9bee:	e007      	b.n	9c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9bf0:	f891 2099 	ldrb.w	r2, [r1, #153]	; 0x99
    9bf4:	b13a      	cbz	r2, 9c06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3a>
    9bf6:	f8b1 20c4 	ldrh.w	r2, [r1, #196]	; 0xc4
    9bfa:	4282      	cmp	r2, r0
    9bfc:	d309      	bcc.n	9c12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9bfe:	2008      	movs	r0, #8
    9c00:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    9c04:	e7b5      	b.n	9b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    9c06:	f8b1 00c4 	ldrh.w	r0, [r1, #196]	; 0xc4
    9c0a:	2806      	cmp	r0, #6
    9c0c:	d301      	bcc.n	9c12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    9c0e:	203e      	movs	r0, #62	; 0x3e
    9c10:	e7f6      	b.n	9c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    9c12:	6860      	ldr	r0, [r4, #4]
    9c14:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    9c18:	f88d 1000 	strb.w	r1, [sp]
    9c1c:	9900      	ldr	r1, [sp, #0]
    9c1e:	9100      	str	r1, [sp, #0]
    9c20:	f89d 1000 	ldrb.w	r1, [sp]
    9c24:	b119      	cbz	r1, 9c2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a62>
    9c26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9c2a:	f004 bfe4 	b.w	ebf6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9c2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9c32:	2100      	movs	r1, #0
    9c34:	f7fd be92 	b.w	795c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9c38:	2000016c 	.word	0x2000016c
    9c3c:	b570      	push	{r4, r5, r6, lr}
    9c3e:	4d2e      	ldr	r5, [pc, #184]	; (9cf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b2c>)
    9c40:	6868      	ldr	r0, [r5, #4]
    9c42:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    9c46:	b151      	cbz	r1, 9c5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    9c48:	2901      	cmp	r1, #1
    9c4a:	d008      	beq.n	9c5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    9c4c:	2902      	cmp	r1, #2
    9c4e:	d009      	beq.n	9c64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    9c50:	2903      	cmp	r1, #3
    9c52:	d007      	beq.n	9c64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    9c54:	f640 4159 	movw	r1, #3161	; 0xc59
    9c58:	2031      	movs	r0, #49	; 0x31
    9c5a:	f7fa fbbf 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c5e:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
    9c62:	e037      	b.n	9cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b08>
    9c64:	f890 1097 	ldrb.w	r1, [r0, #151]	; 0x97
    9c68:	2908      	cmp	r1, #8
    9c6a:	d036      	beq.n	9cda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0e>
    9c6c:	f8b0 20c4 	ldrh.w	r2, [r0, #196]	; 0xc4
    9c70:	f8b0 10c6 	ldrh.w	r1, [r0, #198]	; 0xc6
    9c74:	2400      	movs	r4, #0
    9c76:	1c93      	adds	r3, r2, #2
    9c78:	4299      	cmp	r1, r3
    9c7a:	d306      	bcc.n	9c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abe>
    9c7c:	1a89      	subs	r1, r1, r2
    9c7e:	1e89      	subs	r1, r1, #2
    9c80:	040c      	lsls	r4, r1, #16
    9c82:	0c24      	lsrs	r4, r4, #16
    9c84:	d001      	beq.n	9c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abe>
    9c86:	1e64      	subs	r4, r4, #1
    9c88:	b2a4      	uxth	r4, r4
    9c8a:	f890 10c2 	ldrb.w	r1, [r0, #194]	; 0xc2
    9c8e:	b139      	cbz	r1, 9ca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ad4>
    9c90:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    9c94:	2301      	movs	r3, #1
    9c96:	2109      	movs	r1, #9
    9c98:	3080      	adds	r0, #128	; 0x80
    9c9a:	f003 fb27 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c9e:	b340      	cbz	r0, 9cf2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b26>
    9ca0:	f7ff fef8 	bl	9a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    9ca4:	b178      	cbz	r0, 9cc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afa>
    9ca6:	686a      	ldr	r2, [r5, #4]
    9ca8:	2000      	movs	r0, #0
    9caa:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
    9cae:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
    9cb2:	1c93      	adds	r3, r2, #2
    9cb4:	4299      	cmp	r1, r3
    9cb6:	d303      	bcc.n	9cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af4>
    9cb8:	1a88      	subs	r0, r1, r2
    9cba:	1e80      	subs	r0, r0, #2
    9cbc:	d000      	beq.n	9cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af4>
    9cbe:	1e40      	subs	r0, r0, #1
    9cc0:	42a0      	cmp	r0, r4
    9cc2:	d200      	bcs.n	9cc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afa>
    9cc4:	b284      	uxth	r4, r0
    9cc6:	b10c      	cbz	r4, 9ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b00>
    9cc8:	1e64      	subs	r4, r4, #1
    9cca:	b2a4      	uxth	r4, r4
    9ccc:	6868      	ldr	r0, [r5, #4]
    9cce:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
    9cd2:	4421      	add	r1, r4
    9cd4:	f8a0 1210 	strh.w	r1, [r0, #528]	; 0x210
    9cd8:	bd70      	pop	{r4, r5, r6, pc}
    9cda:	f8b0 10c4 	ldrh.w	r1, [r0, #196]	; 0xc4
    9cde:	2903      	cmp	r1, #3
    9ce0:	d3bd      	bcc.n	9c5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    9ce2:	f830 1f8c 	ldrh.w	r1, [r0, #140]!
    9ce6:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    9ce8:	4411      	add	r1, r2
    9cea:	1c49      	adds	r1, r1, #1
    9cec:	f8a0 1184 	strh.w	r1, [r0, #388]	; 0x184
    9cf0:	bd70      	pop	{r4, r5, r6, pc}
    9cf2:	2400      	movs	r4, #0
    9cf4:	e7ea      	b.n	9ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b00>
    9cf6:	0000      	.short	0x0000
    9cf8:	2000016c 	.word	0x2000016c

00009cfc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    9cfc:	4903      	ldr	r1, [pc, #12]	; (9d0c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    9cfe:	884a      	ldrh	r2, [r1, #2]
    9d00:	8002      	strh	r2, [r0, #0]
    9d02:	7809      	ldrb	r1, [r1, #0]
    9d04:	7081      	strb	r1, [r0, #2]
    9d06:	2000      	movs	r0, #0
    9d08:	4770      	bx	lr
    9d0a:	0000      	.short	0x0000
    9d0c:	200010f4 	.word	0x200010f4

00009d10 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    9d10:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9d12:	460c      	mov	r4, r1
    9d14:	4605      	mov	r5, r0
    9d16:	8800      	ldrh	r0, [r0, #0]
    9d18:	4669      	mov	r1, sp
    9d1a:	f003 fabd 	bl	d298 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9d1e:	2200      	movs	r2, #0
    9d20:	b128      	cbz	r0, 9d2e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    9d22:	f8c4 2002 	str.w	r2, [r4, #2]
    9d26:	71a2      	strb	r2, [r4, #6]
    9d28:	8022      	strh	r2, [r4, #0]
    9d2a:	2002      	movs	r0, #2
    9d2c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9d2e:	9901      	ldr	r1, [sp, #4]
    9d30:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    9d34:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    9d38:	f8d1 001e 	ldr.w	r0, [r1, #30]
    9d3c:	f8c4 0002 	str.w	r0, [r4, #2]
    9d40:	f891 0022 	ldrb.w	r0, [r1, #34]	; 0x22
    9d44:	71a0      	strb	r0, [r4, #6]
    9d46:	8828      	ldrh	r0, [r5, #0]
    9d48:	8020      	strh	r0, [r4, #0]
    9d4a:	f891 006c 	ldrb.w	r0, [r1, #108]	; 0x6c
    9d4e:	f88d 0008 	strb.w	r0, [sp, #8]
    9d52:	9802      	ldr	r0, [sp, #8]
    9d54:	9002      	str	r0, [sp, #8]
    9d56:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9d5a:	2800      	cmp	r0, #0
    9d5c:	d1ea      	bne.n	9d34 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    9d5e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00009d60 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    9d60:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    9d62:	460d      	mov	r5, r1
    9d64:	4606      	mov	r6, r0
    9d66:	8800      	ldrh	r0, [r0, #0]
    9d68:	4669      	mov	r1, sp
    9d6a:	f003 fa95 	bl	d298 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9d6e:	2800      	cmp	r0, #0
    9d70:	d11a      	bne.n	9da8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    9d72:	f8dd 4004 	ldr.w	r4, [sp, #4]
    9d76:	2700      	movs	r7, #0
    9d78:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    9d7c:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    9d80:	f005 ff32 	bl	fbe8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    9d84:	70a8      	strb	r0, [r5, #2]
    9d86:	7860      	ldrb	r0, [r4, #1]
    9d88:	f005 ff2e 	bl	fbe8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    9d8c:	70e8      	strb	r0, [r5, #3]
    9d8e:	78a0      	ldrb	r0, [r4, #2]
    9d90:	f88d 0008 	strb.w	r0, [sp, #8]
    9d94:	9802      	ldr	r0, [sp, #8]
    9d96:	9002      	str	r0, [sp, #8]
    9d98:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9d9c:	3c6a      	subs	r4, #106	; 0x6a
    9d9e:	2800      	cmp	r0, #0
    9da0:	d1ea      	bne.n	9d78 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    9da2:	8830      	ldrh	r0, [r6, #0]
    9da4:	8028      	strh	r0, [r5, #0]
    9da6:	2000      	movs	r0, #0
    9da8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00009dac <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    9dac:	4903      	ldr	r1, [pc, #12]	; (9dbc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    9dae:	888a      	ldrh	r2, [r1, #4]
    9db0:	8002      	strh	r2, [r0, #0]
    9db2:	88c9      	ldrh	r1, [r1, #6]
    9db4:	8041      	strh	r1, [r0, #2]
    9db6:	2000      	movs	r0, #0
    9db8:	4770      	bx	lr
    9dba:	0000      	.short	0x0000
    9dbc:	200002dc 	.word	0x200002dc

00009dc0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    9dc0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9dc2:	2400      	movs	r4, #0
    9dc4:	a902      	add	r1, sp, #8
    9dc6:	f88d 4004 	strb.w	r4, [sp, #4]
    9dca:	f88d 4008 	strb.w	r4, [sp, #8]
    9dce:	9100      	str	r1, [sp, #0]
    9dd0:	7882      	ldrb	r2, [r0, #2]
    9dd2:	7841      	ldrb	r1, [r0, #1]
    9dd4:	7800      	ldrb	r0, [r0, #0]
    9dd6:	ab01      	add	r3, sp, #4
    9dd8:	f006 f879 	bl	fece <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
    9ddc:	2800      	cmp	r0, #0
    9dde:	d112      	bne.n	9e06 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    9de0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9de4:	f005 ffb4 	bl	fd50 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    9de8:	b170      	cbz	r0, 9e08 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    9dea:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9dee:	f005 ffaf 	bl	fd50 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    9df2:	b148      	cbz	r0, 9e08 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    9df4:	4805      	ldr	r0, [pc, #20]	; (9e0c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    9df6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9dfa:	7381      	strb	r1, [r0, #14]
    9dfc:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9e00:	73c1      	strb	r1, [r0, #15]
    9e02:	8204      	strh	r4, [r0, #16]
    9e04:	2000      	movs	r0, #0
    9e06:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9e08:	2011      	movs	r0, #17
    9e0a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9e0c:	200010f4 	.word	0x200010f4

00009e10 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    9e10:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9e14:	460f      	mov	r7, r1
    9e16:	4605      	mov	r5, r0
    9e18:	7806      	ldrb	r6, [r0, #0]
    9e1a:	f005 ff4c 	bl	fcb6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    9e1e:	2800      	cmp	r0, #0
    9e20:	d10a      	bne.n	9e38 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    9e22:	4628      	mov	r0, r5
    9e24:	f005 ff21 	bl	fc6a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    9e28:	2800      	cmp	r0, #0
    9e2a:	d105      	bne.n	9e38 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    9e2c:	2001      	movs	r0, #1
    9e2e:	f7fa fcc5 	bl	47bc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    9e32:	4286      	cmp	r6, r0
    9e34:	d302      	bcc.n	9e3c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    9e36:	2007      	movs	r0, #7
    9e38:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9e3c:	2101      	movs	r1, #1
    9e3e:	4630      	mov	r0, r6
    9e40:	f002 ffb3 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9e44:	0004      	movs	r4, r0
    9e46:	d004      	beq.n	9e52 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    9e48:	f004 fb1a 	bl	e480 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9e4c:	b168      	cbz	r0, 9e6a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    9e4e:	200c      	movs	r0, #12
    9e50:	e7f2      	b.n	9e38 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    9e52:	2101      	movs	r1, #1
    9e54:	4630      	mov	r0, r6
    9e56:	f002 ff9e 	bl	cd96 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    9e5a:	0004      	movs	r4, r0
    9e5c:	d013      	beq.n	9e86 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x76>
    9e5e:	4817      	ldr	r0, [pc, #92]	; (9ebc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xac>)
    9e60:	f990 1000 	ldrsb.w	r1, [r0]
    9e64:	4620      	mov	r0, r4
    9e66:	f004 f87f 	bl	df68 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    9e6a:	4620      	mov	r0, r4
    9e6c:	f004 f950 	bl	e110 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    9e70:	7038      	strb	r0, [r7, #0]
    9e72:	74e8      	strb	r0, [r5, #19]
    9e74:	4629      	mov	r1, r5
    9e76:	4620      	mov	r0, r4
    9e78:	f7fc fdca 	bl	6a10 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    9e7c:	4606      	mov	r6, r0
    9e7e:	7e68      	ldrb	r0, [r5, #25]
    9e80:	b1d0      	cbz	r0, 9eb8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    9e82:	b12e      	cbz	r6, 9e90 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x80>
    9e84:	e018      	b.n	9eb8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    9e86:	f241 3162 	movw	r1, #4962	; 0x1362
    9e8a:	2039      	movs	r0, #57	; 0x39
    9e8c:	f7fa faa6 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e90:	2200      	movs	r2, #0
    9e92:	4668      	mov	r0, sp
    9e94:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9e96:	f003 f83a 	bl	cf0e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    9e9a:	2200      	movs	r2, #0
    9e9c:	2101      	movs	r1, #1
    9e9e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9ea0:	f003 f8ab 	bl	cffa <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    9ea4:	2204      	movs	r2, #4
    9ea6:	4668      	mov	r0, sp
    9ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9eaa:	f003 f830 	bl	cf0e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    9eae:	2200      	movs	r2, #0
    9eb0:	4611      	mov	r1, r2
    9eb2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9eb4:	f003 f8a1 	bl	cffa <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    9eb8:	4630      	mov	r0, r6
    9eba:	e7bd      	b.n	9e38 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    9ebc:	200002d4 	.word	0x200002d4

00009ec0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    9ec0:	7801      	ldrb	r1, [r0, #0]
    9ec2:	b171      	cbz	r1, 9ee2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    9ec4:	7841      	ldrb	r1, [r0, #1]
    9ec6:	b161      	cbz	r1, 9ee2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    9ec8:	8841      	ldrh	r1, [r0, #2]
    9eca:	291b      	cmp	r1, #27
    9ecc:	d309      	bcc.n	9ee2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    9ece:	8881      	ldrh	r1, [r0, #4]
    9ed0:	291b      	cmp	r1, #27
    9ed2:	d306      	bcc.n	9ee2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    9ed4:	4904      	ldr	r1, [pc, #16]	; (9ee8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    9ed6:	6802      	ldr	r2, [r0, #0]
    9ed8:	600a      	str	r2, [r1, #0]
    9eda:	8880      	ldrh	r0, [r0, #4]
    9edc:	8088      	strh	r0, [r1, #4]
    9ede:	2000      	movs	r0, #0
    9ee0:	4770      	bx	lr
    9ee2:	2012      	movs	r0, #18
    9ee4:	4770      	bx	lr
    9ee6:	0000      	.short	0x0000
    9ee8:	200010f4 	.word	0x200010f4

00009eec <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    9eec:	6800      	ldr	r0, [r0, #0]
    9eee:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9ef2:	4288      	cmp	r0, r1
    9ef4:	d303      	bcc.n	9efe <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    9ef6:	4903      	ldr	r1, [pc, #12]	; (9f04 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    9ef8:	6088      	str	r0, [r1, #8]
    9efa:	2000      	movs	r0, #0
    9efc:	4770      	bx	lr
    9efe:	2012      	movs	r0, #18
    9f00:	4770      	bx	lr
    9f02:	0000      	.short	0x0000
    9f04:	200010f4 	.word	0x200010f4

00009f08 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    9f08:	4a03      	ldr	r2, [pc, #12]	; (9f18 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    9f0a:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    9f0e:	6001      	str	r1, [r0, #0]
    9f10:	6042      	str	r2, [r0, #4]
    9f12:	2000      	movs	r0, #0
    9f14:	4770      	bx	lr
    9f16:	0000      	.short	0x0000
    9f18:	0000a3ec 	.word	0x0000a3ec

00009f1c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    9f1c:	b510      	push	{r4, lr}
    9f1e:	2005      	movs	r0, #5
    9f20:	f000 faee 	bl	a500 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    9f24:	f7fe f8aa 	bl	807c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    9f28:	4902      	ldr	r1, [pc, #8]	; (9f34 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    9f2a:	4801      	ldr	r0, [pc, #4]	; (9f30 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    9f2c:	6048      	str	r0, [r1, #4]
    9f2e:	bd10      	pop	{r4, pc}
    9f30:	00009f65 	.word	0x00009f65
    9f34:	200002d4 	.word	0x200002d4
    9f38:	b51c      	push	{r2, r3, r4, lr}
    9f3a:	4909      	ldr	r1, [pc, #36]	; (9f60 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    9f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
    9f40:	e9cd 0100 	strd	r0, r1, [sp]
    9f44:	e005      	b.n	9f52 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    9f46:	9800      	ldr	r0, [sp, #0]
    9f48:	f004 fa9a 	bl	e480 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9f4c:	b108      	cbz	r0, 9f52 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    9f4e:	2001      	movs	r0, #1
    9f50:	bd1c      	pop	{r2, r3, r4, pc}
    9f52:	4668      	mov	r0, sp
    9f54:	f7fa fc7c 	bl	4850 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    9f58:	2800      	cmp	r0, #0
    9f5a:	d0f4      	beq.n	9f46 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    9f5c:	2000      	movs	r0, #0
    9f5e:	bd1c      	pop	{r2, r3, r4, pc}
    9f60:	0000a3ec 	.word	0x0000a3ec
    9f64:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    9f68:	4613      	mov	r3, r2
    9f6a:	4a33      	ldr	r2, [pc, #204]	; (a038 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>)
    9f6c:	460f      	mov	r7, r1
    9f6e:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    9f72:	8814      	ldrh	r4, [r2, #0]
    9f74:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    9f78:	428c      	cmp	r4, r1
    9f7a:	d200      	bcs.n	9f7e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x62>
    9f7c:	4621      	mov	r1, r4
    9f7e:	4688      	mov	r8, r1
    9f80:	8891      	ldrh	r1, [r2, #4]
    9f82:	42b1      	cmp	r1, r6
    9f84:	d200      	bcs.n	9f88 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x6c>
    9f86:	460e      	mov	r6, r1
    9f88:	8851      	ldrh	r1, [r2, #2]
    9f8a:	f640 0448 	movw	r4, #2120	; 0x848
    9f8e:	42a1      	cmp	r1, r4
    9f90:	d300      	bcc.n	9f94 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x78>
    9f92:	4621      	mov	r1, r4
    9f94:	88d5      	ldrh	r5, [r2, #6]
    9f96:	42a5      	cmp	r5, r4
    9f98:	d300      	bcc.n	9f9c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>
    9f9a:	4625      	mov	r5, r4
    9f9c:	42a1      	cmp	r1, r4
    9f9e:	d200      	bcs.n	9fa2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x86>
    9fa0:	460c      	mov	r4, r1
    9fa2:	f44f 72a4 	mov.w	r2, #328	; 0x148
    9fa6:	2e1b      	cmp	r6, #27
    9fa8:	d001      	beq.n	9fae <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x92>
    9faa:	4295      	cmp	r5, r2
    9fac:	d104      	bne.n	9fb8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    9fae:	f1b8 0f1b 	cmp.w	r8, #27
    9fb2:	d03e      	beq.n	a032 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    9fb4:	4294      	cmp	r4, r2
    9fb6:	d03c      	beq.n	a032 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    9fb8:	466a      	mov	r2, sp
    9fba:	4619      	mov	r1, r3
    9fbc:	f005 feeb 	bl	fd96 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    9fc0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    9fc4:	4641      	mov	r1, r8
    9fc6:	4540      	cmp	r0, r8
    9fc8:	d900      	bls.n	9fcc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
    9fca:	4608      	mov	r0, r1
    9fcc:	80f8      	strh	r0, [r7, #6]
    9fce:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    9fd2:	42a1      	cmp	r1, r4
    9fd4:	d800      	bhi.n	9fd8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>
    9fd6:	460c      	mov	r4, r1
    9fd8:	813c      	strh	r4, [r7, #8]
    9fda:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    9fde:	42b1      	cmp	r1, r6
    9fe0:	d800      	bhi.n	9fe4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc8>
    9fe2:	460e      	mov	r6, r1
    9fe4:	807e      	strh	r6, [r7, #2]
    9fe6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9fea:	42a9      	cmp	r1, r5
    9fec:	d800      	bhi.n	9ff0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd4>
    9fee:	460d      	mov	r5, r1
    9ff0:	80bd      	strh	r5, [r7, #4]
    9ff2:	21ff      	movs	r1, #255	; 0xff
    9ff4:	7039      	strb	r1, [r7, #0]
    9ff6:	381b      	subs	r0, #27
    9ff8:	28e0      	cmp	r0, #224	; 0xe0
    9ffa:	d902      	bls.n	a002 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe6>
    9ffc:	f640 51a2 	movw	r1, #3490	; 0xda2
    a000:	e014      	b.n	a02c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    a002:	3e1b      	subs	r6, #27
    a004:	2ee0      	cmp	r6, #224	; 0xe0
    a006:	d902      	bls.n	a00e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf2>
    a008:	f640 51a4 	movw	r1, #3492	; 0xda4
    a00c:	e00e      	b.n	a02c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    a00e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    a012:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    a016:	4284      	cmp	r4, r0
    a018:	d902      	bls.n	a020 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x104>
    a01a:	f640 51a6 	movw	r1, #3494	; 0xda6
    a01e:	e005      	b.n	a02c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    a020:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    a024:	4285      	cmp	r5, r0
    a026:	d904      	bls.n	a032 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    a028:	f640 51a8 	movw	r1, #3496	; 0xda8
    a02c:	2039      	movs	r0, #57	; 0x39
    a02e:	f7fa f9d5 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a032:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    a036:	0000      	.short	0x0000
    a038:	200002dc 	.word	0x200002dc
    a03c:	b510      	push	{r4, lr}
    a03e:	480d      	ldr	r0, [pc, #52]	; (a074 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x158>)
    a040:	2100      	movs	r1, #0
    a042:	4b0d      	ldr	r3, [pc, #52]	; (a078 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x15c>)
    a044:	74c1      	strb	r1, [r0, #19]
    a046:	8281      	strh	r1, [r0, #20]
    a048:	221b      	movs	r2, #27
    a04a:	801a      	strh	r2, [r3, #0]
    a04c:	f44f 74a4 	mov.w	r4, #328	; 0x148
    a050:	805c      	strh	r4, [r3, #2]
    a052:	809a      	strh	r2, [r3, #4]
    a054:	80dc      	strh	r4, [r3, #6]
    a056:	7381      	strb	r1, [r0, #14]
    a058:	73c1      	strb	r1, [r0, #15]
    a05a:	2303      	movs	r3, #3
    a05c:	7003      	strb	r3, [r0, #0]
    a05e:	2302      	movs	r3, #2
    a060:	7043      	strb	r3, [r0, #1]
    a062:	8042      	strh	r2, [r0, #2]
    a064:	8082      	strh	r2, [r0, #4]
    a066:	f640 62a6 	movw	r2, #3750	; 0xea6
    a06a:	6082      	str	r2, [r0, #8]
    a06c:	7481      	strb	r1, [r0, #18]
    a06e:	7301      	strb	r1, [r0, #12]
    a070:	bd10      	pop	{r4, pc}
    a072:	0000      	.short	0x0000
    a074:	200010f4 	.word	0x200010f4
    a078:	200002dc 	.word	0x200002dc
    a07c:	b510      	push	{r4, lr}
    a07e:	2101      	movs	r1, #1
    a080:	2000      	movs	r0, #0
    a082:	f002 fe92 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a086:	0004      	movs	r4, r0
    a088:	d10a      	bne.n	a0a0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x184>
    a08a:	2101      	movs	r1, #1
    a08c:	f002 fe83 	bl	cd96 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    a090:	0004      	movs	r4, r0
    a092:	d007      	beq.n	a0a4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x188>
    a094:	4806      	ldr	r0, [pc, #24]	; (a0b0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x194>)
    a096:	f990 1000 	ldrsb.w	r1, [r0]
    a09a:	4620      	mov	r0, r4
    a09c:	f003 ff64 	bl	df68 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    a0a0:	4620      	mov	r0, r4
    a0a2:	bd10      	pop	{r4, pc}
    a0a4:	f240 2167 	movw	r1, #615	; 0x267
    a0a8:	2039      	movs	r0, #57	; 0x39
    a0aa:	f7fa f997 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0ae:	0000      	.short	0x0000
    a0b0:	200002d4 	.word	0x200002d4

0000a0b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    a0b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a0b8:	b087      	sub	sp, #28
    a0ba:	460c      	mov	r4, r1
    a0bc:	4680      	mov	r8, r0
    a0be:	4605      	mov	r5, r0
    a0c0:	f004 f829 	bl	e116 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a0c4:	b198      	cbz	r0, a0ee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a0c6:	4628      	mov	r0, r5
    a0c8:	f004 f818 	bl	e0fc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a0cc:	b130      	cbz	r0, a0dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    a0ce:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a0d2:	2012      	movs	r0, #18
    a0d4:	2900      	cmp	r1, #0
    a0d6:	d00b      	beq.n	a0f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a0d8:	2980      	cmp	r1, #128	; 0x80
    a0da:	d809      	bhi.n	a0f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a0dc:	4628      	mov	r0, r5
    a0de:	f003 fffc 	bl	e0da <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    a0e2:	b140      	cbz	r0, a0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    a0e4:	4640      	mov	r0, r8
    a0e6:	f003 ff09 	bl	defc <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    a0ea:	b130      	cbz	r0, a0fa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    a0ec:	e009      	b.n	a102 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4e>
    a0ee:	2042      	movs	r0, #66	; 0x42
    a0f0:	b007      	add	sp, #28
    a0f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a0f6:	200c      	movs	r0, #12
    a0f8:	e7fa      	b.n	a0f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a0fa:	4640      	mov	r0, r8
    a0fc:	f003 fff8 	bl	e0f0 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    a100:	b3c8      	cbz	r0, a176 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    a102:	4640      	mov	r0, r8
    a104:	f004 f9bc 	bl	e480 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a108:	2800      	cmp	r0, #0
    a10a:	d1f4      	bne.n	a0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    a10c:	4640      	mov	r0, r8
    a10e:	f003 ff10 	bl	df32 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    a112:	2800      	cmp	r0, #0
    a114:	d1ef      	bne.n	a0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    a116:	4640      	mov	r0, r8
    a118:	f7fc fc18 	bl	694c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    a11c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a120:	f242 7110 	movw	r1, #10000	; 0x2710
    a124:	fb00 f901 	mul.w	r9, r0, r1
    a128:	78e1      	ldrb	r1, [r4, #3]
    a12a:	4640      	mov	r0, r8
    a12c:	f003 ffcc 	bl	e0c8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    a130:	4640      	mov	r0, r8
    a132:	f003 ffdf 	bl	e0f4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a136:	b308      	cbz	r0, a17c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc8>
    a138:	2100      	movs	r1, #0
    a13a:	a801      	add	r0, sp, #4
    a13c:	f7fa fba8 	bl	4890 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a140:	0004      	movs	r4, r0
    a142:	d07b      	beq.n	a23c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    a144:	2100      	movs	r1, #0
    a146:	f7fb ff41 	bl	5fcc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    a14a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a14e:	8020      	strh	r0, [r4, #0]
    a150:	4621      	mov	r1, r4
    a152:	4640      	mov	r0, r8
    a154:	f003 fff6 	bl	e144 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    a158:	f000 f9de 	bl	a518 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a15c:	0940      	lsrs	r0, r0, #5
    a15e:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    a162:	07c0      	lsls	r0, r0, #31
    a164:	4d41      	ldr	r5, [pc, #260]	; (a26c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    a166:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a16a:	d011      	beq.n	a190 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    a16c:	8869      	ldrh	r1, [r5, #2]
    a16e:	88aa      	ldrh	r2, [r5, #4]
    a170:	84c1      	strh	r1, [r0, #38]	; 0x26
    a172:	8502      	strh	r2, [r0, #40]	; 0x28
    a174:	e00f      	b.n	a196 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe2>
    a176:	e7ff      	b.n	a178 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    a178:	2012      	movs	r0, #18
    a17a:	e7b9      	b.n	a0f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a17c:	464a      	mov	r2, r9
    a17e:	2100      	movs	r1, #0
    a180:	4640      	mov	r0, r8
    a182:	f7fd fad9 	bl	7738 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a186:	2800      	cmp	r0, #0
    a188:	d0b2      	beq.n	a0f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a18a:	f241 51b5 	movw	r1, #5557	; 0x15b5
    a18e:	e05f      	b.n	a250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    a190:	221b      	movs	r2, #27
    a192:	84c2      	strh	r2, [r0, #38]	; 0x26
    a194:	8502      	strh	r2, [r0, #40]	; 0x28
    a196:	f000 f9bf 	bl	a518 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a19a:	0788      	lsls	r0, r1, #30
    a19c:	f04f 0601 	mov.w	r6, #1
    a1a0:	d505      	bpl.n	a1ae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    a1a2:	f88d 6008 	strb.w	r6, [sp, #8]
    a1a6:	a802      	add	r0, sp, #8
    a1a8:	9403      	str	r4, [sp, #12]
    a1aa:	f004 ffd5 	bl	f158 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    a1ae:	68a8      	ldr	r0, [r5, #8]
    a1b0:	62e0      	str	r0, [r4, #44]	; 0x2c
    a1b2:	f641 574c 	movw	r7, #7500	; 0x1d4c
    a1b6:	4640      	mov	r0, r8
    a1b8:	f003 ffa4 	bl	e104 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a1bc:	b910      	cbnz	r0, a1c4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x110>
    a1be:	4640      	mov	r0, r8
    a1c0:	f003 ffbe 	bl	e140 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a1c4:	6127      	str	r7, [r4, #16]
    a1c6:	8821      	ldrh	r1, [r4, #0]
    a1c8:	f8ad 1008 	strh.w	r1, [sp, #8]
    a1cc:	7ba9      	ldrb	r1, [r5, #14]
    a1ce:	f88d 100a 	strb.w	r1, [sp, #10]
    a1d2:	7be9      	ldrb	r1, [r5, #15]
    a1d4:	f88d 100b 	strb.w	r1, [sp, #11]
    a1d8:	8a29      	ldrh	r1, [r5, #16]
    a1da:	f8ad 100c 	strh.w	r1, [sp, #12]
    a1de:	a905      	add	r1, sp, #20
    a1e0:	9100      	str	r1, [sp, #0]
    a1e2:	4630      	mov	r0, r6
    a1e4:	ab04      	add	r3, sp, #16
    a1e6:	aa02      	add	r2, sp, #8
    a1e8:	4621      	mov	r1, r4
    a1ea:	f005 fe0a 	bl	fe02 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    a1ee:	b140      	cbz	r0, a202 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    a1f0:	2100      	movs	r1, #0
    a1f2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a1f6:	f7fa fb73 	bl	48e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a1fa:	b1f0      	cbz	r0, a23a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    a1fc:	f241 6117 	movw	r1, #5655	; 0x1617
    a200:	e026      	b.n	a250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    a202:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a206:	f88d 0018 	strb.w	r0, [sp, #24]
    a20a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a20e:	f88d 0019 	strb.w	r0, [sp, #25]
    a212:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a216:	f8ad 001a 	strh.w	r0, [sp, #26]
    a21a:	a906      	add	r1, sp, #24
    a21c:	4620      	mov	r0, r4
    a21e:	f003 f90b 	bl	d438 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a222:	7868      	ldrb	r0, [r5, #1]
    a224:	9000      	str	r0, [sp, #0]
    a226:	782b      	ldrb	r3, [r5, #0]
    a228:	88aa      	ldrh	r2, [r5, #4]
    a22a:	8869      	ldrh	r1, [r5, #2]
    a22c:	8820      	ldrh	r0, [r4, #0]
    a22e:	f7fa fc0d 	bl	4a4c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a232:	b128      	cbz	r0, a240 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18c>
    a234:	f241 6122 	movw	r1, #5666	; 0x1622
    a238:	e00a      	b.n	a250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    a23a:	e7ff      	b.n	a23c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    a23c:	2009      	movs	r0, #9
    a23e:	e757      	b.n	a0f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a240:	464a      	mov	r2, r9
    a242:	4621      	mov	r1, r4
    a244:	4640      	mov	r0, r8
    a246:	f7fd fa77 	bl	7738 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a24a:	b120      	cbz	r0, a256 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a2>
    a24c:	f241 6124 	movw	r1, #5668	; 0x1624
    a250:	2039      	movs	r0, #57	; 0x39
    a252:	f7fa f8c3 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a256:	4806      	ldr	r0, [pc, #24]	; (a270 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    a258:	6843      	ldr	r3, [r0, #4]
    a25a:	b123      	cbz	r3, a266 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b2>
    a25c:	2200      	movs	r2, #0
    a25e:	f504 7195 	add.w	r1, r4, #298	; 0x12a
    a262:	4620      	mov	r0, r4
    a264:	4798      	blx	r3
    a266:	2000      	movs	r0, #0
    a268:	e742      	b.n	a0f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a26a:	0000      	.short	0x0000
    a26c:	200010f4 	.word	0x200010f4
    a270:	200002d4 	.word	0x200002d4
    a274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a278:	b088      	sub	sp, #32
    a27a:	4604      	mov	r4, r0
    a27c:	8800      	ldrh	r0, [r0, #0]
    a27e:	a906      	add	r1, sp, #24
    a280:	f003 f80a 	bl	d298 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a284:	2800      	cmp	r0, #0
    a286:	d147      	bne.n	a318 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a288:	9807      	ldr	r0, [sp, #28]
    a28a:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    a28e:	f88d 1008 	strb.w	r1, [sp, #8]
    a292:	9902      	ldr	r1, [sp, #8]
    a294:	9102      	str	r1, [sp, #8]
    a296:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a29a:	3080      	adds	r0, #128	; 0x80
    a29c:	b101      	cbz	r1, a2a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    a29e:	2101      	movs	r1, #1
    a2a0:	f88d 100c 	strb.w	r1, [sp, #12]
    a2a4:	7901      	ldrb	r1, [r0, #4]
    a2a6:	f04f 0800 	mov.w	r8, #0
    a2aa:	0689      	lsls	r1, r1, #26
    a2ac:	d502      	bpl.n	a2b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    a2ae:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a2b2:	b149      	cbz	r1, a2c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x214>
    a2b4:	f05f 0100 	movs.w	r1, #0
    a2b8:	f88d 1004 	strb.w	r1, [sp, #4]
    a2bc:	2105      	movs	r1, #5
    a2be:	3064      	adds	r0, #100	; 0x64
    a2c0:	f004 ffd6 	bl	f270 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x66>
    a2c4:	b110      	cbz	r0, a2cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x218>
    a2c6:	e004      	b.n	a2d2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21e>
    a2c8:	2101      	movs	r1, #1
    a2ca:	e7f5      	b.n	a2b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    a2cc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a2d0:	b308      	cbz	r0, a316 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    a2d2:	8921      	ldrh	r1, [r4, #8]
    a2d4:	88e0      	ldrh	r0, [r4, #6]
    a2d6:	f005 fd50 	bl	fd7a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a2da:	2800      	cmp	r0, #0
    a2dc:	d11c      	bne.n	a318 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a2de:	88a1      	ldrh	r1, [r4, #4]
    a2e0:	8860      	ldrh	r0, [r4, #2]
    a2e2:	f005 fd4a 	bl	fd7a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a2e6:	2800      	cmp	r0, #0
    a2e8:	d116      	bne.n	a318 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a2ea:	8921      	ldrh	r1, [r4, #8]
    a2ec:	88e0      	ldrh	r0, [r4, #6]
    a2ee:	f005 fd3a 	bl	fd66 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    a2f2:	2800      	cmp	r0, #0
    a2f4:	d110      	bne.n	a318 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a2f6:	88a1      	ldrh	r1, [r4, #4]
    a2f8:	8860      	ldrh	r0, [r4, #2]
    a2fa:	f005 fd34 	bl	fd66 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    a2fe:	0006      	movs	r6, r0
    a300:	d10a      	bne.n	a318 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a302:	9807      	ldr	r0, [sp, #28]
    a304:	f500 7595 	add.w	r5, r0, #298	; 0x12a
    a308:	27ff      	movs	r7, #255	; 0xff
    a30a:	706f      	strb	r7, [r5, #1]
    a30c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a310:	b129      	cbz	r1, a31e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26a>
    a312:	263a      	movs	r6, #58	; 0x3a
    a314:	e02e      	b.n	a374 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c0>
    a316:	201a      	movs	r0, #26
    a318:	b008      	add	sp, #32
    a31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a31e:	4641      	mov	r1, r8
    a320:	aa03      	add	r2, sp, #12
    a322:	f005 fd38 	bl	fd96 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    a326:	8861      	ldrh	r1, [r4, #2]
    a328:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    a32c:	4281      	cmp	r1, r0
    a32e:	d200      	bcs.n	a332 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    a330:	4608      	mov	r0, r1
    a332:	80e8      	strh	r0, [r5, #6]
    a334:	88a1      	ldrh	r1, [r4, #4]
    a336:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    a33a:	4281      	cmp	r1, r0
    a33c:	d200      	bcs.n	a340 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    a33e:	4608      	mov	r0, r1
    a340:	8128      	strh	r0, [r5, #8]
    a342:	88e2      	ldrh	r2, [r4, #6]
    a344:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    a348:	428a      	cmp	r2, r1
    a34a:	d200      	bcs.n	a34e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29a>
    a34c:	4611      	mov	r1, r2
    a34e:	8069      	strh	r1, [r5, #2]
    a350:	8922      	ldrh	r2, [r4, #8]
    a352:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    a356:	428a      	cmp	r2, r1
    a358:	d200      	bcs.n	a35c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a8>
    a35a:	4611      	mov	r1, r2
    a35c:	f640 0248 	movw	r2, #2120	; 0x848
    a360:	80a9      	strh	r1, [r5, #4]
    a362:	4291      	cmp	r1, r2
    a364:	d300      	bcc.n	a368 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2b4>
    a366:	4611      	mov	r1, r2
    a368:	80a9      	strh	r1, [r5, #4]
    a36a:	4290      	cmp	r0, r2
    a36c:	d200      	bcs.n	a370 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2bc>
    a36e:	4602      	mov	r2, r0
    a370:	812a      	strh	r2, [r5, #8]
    a372:	702f      	strb	r7, [r5, #0]
    a374:	f885 8001 	strb.w	r8, [r5, #1]
    a378:	4630      	mov	r0, r6
    a37a:	e7cd      	b.n	a318 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a37c:	b51c      	push	{r2, r3, r4, lr}
    a37e:	490c      	ldr	r1, [pc, #48]	; (a3b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2fc>)
    a380:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    a384:	e9cd 0100 	strd	r0, r1, [sp]
    a388:	e00a      	b.n	a3a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    a38a:	9c00      	ldr	r4, [sp, #0]
    a38c:	4620      	mov	r0, r4
    a38e:	f004 f877 	bl	e480 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a392:	b128      	cbz	r0, a3a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    a394:	4620      	mov	r0, r4
    a396:	f003 fefa 	bl	e18e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    a39a:	b108      	cbz	r0, a3a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    a39c:	2001      	movs	r0, #1
    a39e:	bd1c      	pop	{r2, r3, r4, pc}
    a3a0:	4668      	mov	r0, sp
    a3a2:	f7fa fa55 	bl	4850 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a3a6:	2800      	cmp	r0, #0
    a3a8:	d0ef      	beq.n	a38a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d6>
    a3aa:	2000      	movs	r0, #0
    a3ac:	bd1c      	pop	{r2, r3, r4, pc}
    a3ae:	0000      	.short	0x0000
    a3b0:	0000a3ec 	.word	0x0000a3ec
    a3b4:	b510      	push	{r4, lr}
    a3b6:	4604      	mov	r4, r0
    a3b8:	88c1      	ldrh	r1, [r0, #6]
    a3ba:	8880      	ldrh	r0, [r0, #4]
    a3bc:	f005 fcdd 	bl	fd7a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a3c0:	2800      	cmp	r0, #0
    a3c2:	d10f      	bne.n	a3e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    a3c4:	8861      	ldrh	r1, [r4, #2]
    a3c6:	8820      	ldrh	r0, [r4, #0]
    a3c8:	f005 fcd7 	bl	fd7a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a3cc:	2800      	cmp	r0, #0
    a3ce:	d109      	bne.n	a3e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    a3d0:	4805      	ldr	r0, [pc, #20]	; (a3e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x334>)
    a3d2:	88a1      	ldrh	r1, [r4, #4]
    a3d4:	8081      	strh	r1, [r0, #4]
    a3d6:	8821      	ldrh	r1, [r4, #0]
    a3d8:	8001      	strh	r1, [r0, #0]
    a3da:	88e1      	ldrh	r1, [r4, #6]
    a3dc:	80c1      	strh	r1, [r0, #6]
    a3de:	8861      	ldrh	r1, [r4, #2]
    a3e0:	8041      	strh	r1, [r0, #2]
    a3e2:	2000      	movs	r0, #0
    a3e4:	bd10      	pop	{r4, pc}
    a3e6:	0000      	.short	0x0000
    a3e8:	200002dc 	.word	0x200002dc
    a3ec:	00000000 	.word	0x00000000
    a3f0:	00010000 	.word	0x00010000
    a3f4:	00000000 	.word	0x00000000
    a3f8:	00010000 	.word	0x00010000
    a3fc:	0c11fa0c 	.word	0x0c11fa0c
    a400:	11fa0059 	.word	0x11fa0059
    a404:	00000000 	.word	0x00000000
    a408:	00010000 	.word	0x00010000
    a40c:	00000000 	.word	0x00000000
    a410:	00010000 	.word	0x00010000

0000a414 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a414:	b510      	push	{r4, lr}
    a416:	f7fc f825 	bl	6464 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    a41a:	4805      	ldr	r0, [pc, #20]	; (a430 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    a41c:	6840      	ldr	r0, [r0, #4]
    a41e:	f005 fdb3 	bl	ff88 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    a422:	f005 fb58 	bl	fad6 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a42a:	f7fc b9d5 	b.w	67d8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    a42e:	0000      	.short	0x0000
    a430:	200002e4 	.word	0x200002e4

0000a434 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a434:	b510      	push	{r4, lr}
    a436:	4c05      	ldr	r4, [pc, #20]	; (a44c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    a438:	68a0      	ldr	r0, [r4, #8]
    a43a:	f005 fda5 	bl	ff88 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    a43e:	68e0      	ldr	r0, [r4, #12]
    a440:	f005 fda2 	bl	ff88 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    a444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a448:	f005 bbaa 	b.w	fba0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a44c:	200002e4 	.word	0x200002e4

0000a450 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a450:	b510      	push	{r4, lr}
    a452:	4905      	ldr	r1, [pc, #20]	; (a468 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a454:	4805      	ldr	r0, [pc, #20]	; (a46c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a456:	f005 fd8a 	bl	ff6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a45a:	4804      	ldr	r0, [pc, #16]	; (a46c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a460:	4903      	ldr	r1, [pc, #12]	; (a470 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a462:	1d00      	adds	r0, r0, #4
    a464:	f005 bd83 	b.w	ff6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a468:	200002f4 	.word	0x200002f4
    a46c:	200002e8 	.word	0x200002e8
    a470:	200002fc 	.word	0x200002fc

0000a474 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    a474:	b510      	push	{r4, lr}
    a476:	4908      	ldr	r1, [pc, #32]	; (a498 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    a478:	4808      	ldr	r0, [pc, #32]	; (a49c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a47a:	f005 fd78 	bl	ff6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a47e:	4807      	ldr	r0, [pc, #28]	; (a49c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a480:	4907      	ldr	r1, [pc, #28]	; (a4a0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    a482:	1d00      	adds	r0, r0, #4
    a484:	f005 fd73 	bl	ff6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a488:	4804      	ldr	r0, [pc, #16]	; (a49c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a48a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a48e:	4905      	ldr	r1, [pc, #20]	; (a4a4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    a490:	3008      	adds	r0, #8
    a492:	f005 bd6c 	b.w	ff6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    a496:	0000      	.short	0x0000
    a498:	2000030c 	.word	0x2000030c
    a49c:	200002e8 	.word	0x200002e8
    a4a0:	20000314 	.word	0x20000314
    a4a4:	20000304 	.word	0x20000304

0000a4a8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a4a8:	4801      	ldr	r0, [pc, #4]	; (a4b0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a4aa:	7800      	ldrb	r0, [r0, #0]
    a4ac:	4770      	bx	lr
    a4ae:	0000      	.short	0x0000
    a4b0:	200002e4 	.word	0x200002e4
    a4b4:	b510      	push	{r4, lr}
    a4b6:	f7fc fb6b 	bl	6b90 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    a4ba:	f7fd f9eb 	bl	7894 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    a4be:	4803      	ldr	r0, [pc, #12]	; (a4cc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    a4c0:	f7fc fb4c 	bl	6b5c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a4c8:	f7fb bfd2 	b.w	6470 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    a4cc:	20001399 	.word	0x20001399
    a4d0:	4909      	ldr	r1, [pc, #36]	; (a4f8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    a4d2:	b510      	push	{r4, lr}
    a4d4:	2001      	movs	r0, #1
    a4d6:	7008      	strb	r0, [r1, #0]
    a4d8:	f7fc fb8a 	bl	6bf0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    a4dc:	f7fd fde6 	bl	80ac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    a4e0:	f002 fe0c 	bl	d0fc <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    a4e4:	4805      	ldr	r0, [pc, #20]	; (a4fc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    a4e6:	f7fa fe63 	bl	51b0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    a4ea:	2000      	movs	r0, #0
    a4ec:	f002 fc3a 	bl	cd64 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    a4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a4f4:	f7fb bfc4 	b.w	6480 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    a4f8:	200002e4 	.word	0x200002e4
    a4fc:	20001399 	.word	0x20001399

0000a500 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a500:	4a04      	ldr	r2, [pc, #16]	; (a514 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    a502:	08c1      	lsrs	r1, r0, #3
    a504:	f000 0307 	and.w	r3, r0, #7
    a508:	2001      	movs	r0, #1
    a50a:	4098      	lsls	r0, r3
    a50c:	5c53      	ldrb	r3, [r2, r1]
    a50e:	4303      	orrs	r3, r0
    a510:	5453      	strb	r3, [r2, r1]
    a512:	4770      	bx	lr
    a514:	20000020 	.word	0x20000020

0000a518 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a518:	4901      	ldr	r1, [pc, #4]	; (a520 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a51a:	e9d1 0100 	ldrd	r0, r1, [r1]
    a51e:	4770      	bx	lr
    a520:	20000020 	.word	0x20000020

0000a524 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a524:	4806      	ldr	r0, [pc, #24]	; (a540 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    a526:	8801      	ldrh	r1, [r0, #0]
    a528:	7900      	ldrb	r0, [r0, #4]
    a52a:	0602      	lsls	r2, r0, #24
    a52c:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    a530:	f000 0001 	and.w	r0, r0, #1
    a534:	1800      	adds	r0, r0, r0
    a536:	b2c0      	uxtb	r0, r0
    a538:	f040 0001 	orr.w	r0, r0, #1
    a53c:	4770      	bx	lr
    a53e:	0000      	.short	0x0000
    a540:	20000020 	.word	0x20000020

0000a544 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    a544:	b510      	push	{r4, lr}
    a546:	f7f9 fb73 	bl	3c30 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    a54a:	2200      	movs	r2, #0
    a54c:	4b08      	ldr	r3, [pc, #32]	; (a570 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    a54e:	4611      	mov	r1, r2
    a550:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    a554:	4284      	cmp	r4, r0
    a556:	d303      	bcc.n	a560 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    a558:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    a55c:	7882      	ldrb	r2, [r0, #2]
    a55e:	e003      	b.n	a568 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    a560:	1c49      	adds	r1, r1, #1
    a562:	b2c9      	uxtb	r1, r1
    a564:	290c      	cmp	r1, #12
    a566:	d3f3      	bcc.n	a550 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    a568:	4802      	ldr	r0, [pc, #8]	; (a574 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    a56a:	7002      	strb	r2, [r0, #0]
    a56c:	bd10      	pop	{r4, pc}
    a56e:	0000      	.short	0x0000
    a570:	0000ffda 	.word	0x0000ffda
    a574:	20000365 	.word	0x20000365

0000a578 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a578:	b570      	push	{r4, r5, r6, lr}
    a57a:	4605      	mov	r5, r0
    a57c:	4616      	mov	r6, r2
    a57e:	460c      	mov	r4, r1
    a580:	2002      	movs	r0, #2
    a582:	f000 f9b7 	bl	a8f4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a586:	4906      	ldr	r1, [pc, #24]	; (a5a0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a588:	2001      	movs	r0, #1
    a58a:	1ef6      	subs	r6, r6, #3
    a58c:	7008      	strb	r0, [r1, #0]
    a58e:	4805      	ldr	r0, [pc, #20]	; (a5a4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a590:	6006      	str	r6, [r0, #0]
    a592:	4804      	ldr	r0, [pc, #16]	; (a5a4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a594:	3808      	subs	r0, #8
    a596:	6005      	str	r5, [r0, #0]
    a598:	1f00      	subs	r0, r0, #4
    a59a:	6004      	str	r4, [r0, #0]
    a59c:	bd70      	pop	{r4, r5, r6, pc}
    a59e:	0000      	.short	0x0000
    a5a0:	20000366 	.word	0x20000366
    a5a4:	4000f510 	.word	0x4000f510

0000a5a8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a5a8:	b510      	push	{r4, lr}
    a5aa:	4c0c      	ldr	r4, [pc, #48]	; (a5dc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    a5ac:	7820      	ldrb	r0, [r4, #0]
    a5ae:	b180      	cbz	r0, a5d2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    a5b0:	490b      	ldr	r1, [pc, #44]	; (a5e0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    a5b2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a5b6:	6008      	str	r0, [r1, #0]
    a5b8:	f000 f86a 	bl	a690 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a5bc:	2100      	movs	r1, #0
    a5be:	b120      	cbz	r0, a5ca <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    a5c0:	2001      	movs	r0, #1
    a5c2:	7060      	strb	r0, [r4, #1]
    a5c4:	4807      	ldr	r0, [pc, #28]	; (a5e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    a5c6:	6800      	ldr	r0, [r0, #0]
    a5c8:	e001      	b.n	a5ce <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    a5ca:	7061      	strb	r1, [r4, #1]
    a5cc:	2010      	movs	r0, #16
    a5ce:	70a0      	strb	r0, [r4, #2]
    a5d0:	7021      	strb	r1, [r4, #0]
    a5d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5d6:	2000      	movs	r0, #0
    a5d8:	f000 b98c 	b.w	a8f4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a5dc:	20000366 	.word	0x20000366
    a5e0:	4001f508 	.word	0x4001f508
    a5e4:	4000f400 	.word	0x4000f400

0000a5e8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a5e8:	b510      	push	{r4, lr}
    a5ea:	2002      	movs	r0, #2
    a5ec:	f000 f982 	bl	a8f4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a5f0:	4904      	ldr	r1, [pc, #16]	; (a604 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    a5f2:	2001      	movs	r0, #1
    a5f4:	7008      	strb	r0, [r1, #0]
    a5f6:	f000 f859 	bl	a6ac <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    a5fa:	4903      	ldr	r1, [pc, #12]	; (a608 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    a5fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a600:	6008      	str	r0, [r1, #0]
    a602:	bd10      	pop	{r4, pc}
    a604:	20000366 	.word	0x20000366
    a608:	4001f504 	.word	0x4001f504

0000a60c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    a60c:	4803      	ldr	r0, [pc, #12]	; (a61c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    a60e:	2100      	movs	r1, #0
    a610:	7001      	strb	r1, [r0, #0]
    a612:	7041      	strb	r1, [r0, #1]
    a614:	2110      	movs	r1, #16
    a616:	7081      	strb	r1, [r0, #2]
    a618:	4770      	bx	lr
    a61a:	0000      	.short	0x0000
    a61c:	20000366 	.word	0x20000366

0000a620 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    a620:	4807      	ldr	r0, [pc, #28]	; (a640 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    a622:	b510      	push	{r4, lr}
    a624:	7801      	ldrb	r1, [r0, #0]
    a626:	b141      	cbz	r1, a63a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    a628:	f000 f832 	bl	a690 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a62c:	b118      	cbz	r0, a636 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    a62e:	4805      	ldr	r0, [pc, #20]	; (a644 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    a630:	6800      	ldr	r0, [r0, #0]
    a632:	b2c0      	uxtb	r0, r0
    a634:	bd10      	pop	{r4, pc}
    a636:	2010      	movs	r0, #16
    a638:	bd10      	pop	{r4, pc}
    a63a:	7880      	ldrb	r0, [r0, #2]
    a63c:	bd10      	pop	{r4, pc}
    a63e:	0000      	.short	0x0000
    a640:	20000366 	.word	0x20000366
    a644:	4000f400 	.word	0x4000f400

0000a648 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    a648:	4808      	ldr	r0, [pc, #32]	; (a66c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    a64a:	b510      	push	{r4, lr}
    a64c:	7801      	ldrb	r1, [r0, #0]
    a64e:	b159      	cbz	r1, a668 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    a650:	4807      	ldr	r0, [pc, #28]	; (a670 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    a652:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a656:	b128      	cbz	r0, a664 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    a658:	f000 f80c 	bl	a674 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a65c:	2800      	cmp	r0, #0
    a65e:	d000      	beq.n	a662 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    a660:	2001      	movs	r0, #1
    a662:	bd10      	pop	{r4, pc}
    a664:	2002      	movs	r0, #2
    a666:	bd10      	pop	{r4, pc}
    a668:	7840      	ldrb	r0, [r0, #1]
    a66a:	bd10      	pop	{r4, pc}
    a66c:	20000366 	.word	0x20000366
    a670:	4000f000 	.word	0x4000f000
    a674:	4805      	ldr	r0, [pc, #20]	; (a68c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    a676:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    a67a:	b111      	cbz	r1, a682 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    a67c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a680:	b108      	cbz	r0, a686 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    a682:	2000      	movs	r0, #0
    a684:	4770      	bx	lr
    a686:	2001      	movs	r0, #1
    a688:	4770      	bx	lr
    a68a:	0000      	.short	0x0000
    a68c:	4000f000 	.word	0x4000f000
    a690:	4805      	ldr	r0, [pc, #20]	; (a6a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    a692:	b510      	push	{r4, lr}
    a694:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a698:	b120      	cbz	r0, a6a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a69a:	f7ff ffeb 	bl	a674 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a69e:	b108      	cbz	r0, a6a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a6a0:	2001      	movs	r0, #1
    a6a2:	bd10      	pop	{r4, pc}
    a6a4:	2000      	movs	r0, #0
    a6a6:	bd10      	pop	{r4, pc}
    a6a8:	4000f000 	.word	0x4000f000
    a6ac:	4804      	ldr	r0, [pc, #16]	; (a6c0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    a6ae:	2100      	movs	r1, #0
    a6b0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a6b4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a6b8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a6bc:	4770      	bx	lr
    a6be:	0000      	.short	0x0000
    a6c0:	4000f000 	.word	0x4000f000

0000a6c4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    a6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6c8:	4604      	mov	r4, r0
    a6ca:	461e      	mov	r6, r3
    a6cc:	4690      	mov	r8, r2
    a6ce:	460f      	mov	r7, r1
    a6d0:	2001      	movs	r0, #1
    a6d2:	f000 f90f 	bl	a8f4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a6d6:	4d1e      	ldr	r5, [pc, #120]	; (a750 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    a6d8:	481e      	ldr	r0, [pc, #120]	; (a754 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    a6da:	f004 0103 	and.w	r1, r4, #3
    a6de:	712e      	strb	r6, [r5, #4]
    a6e0:	6800      	ldr	r0, [r0, #0]
    a6e2:	0432      	lsls	r2, r6, #16
    a6e4:	f361 0007 	bfi	r0, r1, #0, #8
    a6e8:	f366 200f 	bfi	r0, r6, #8, #8
    a6ec:	0c00      	lsrs	r0, r0, #16
    a6ee:	4e1a      	ldr	r6, [pc, #104]	; (a758 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    a6f0:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    a6f4:	4308      	orrs	r0, r1
    a6f6:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    a6fa:	4818      	ldr	r0, [pc, #96]	; (a75c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    a6fc:	6007      	str	r7, [r0, #0]
    a6fe:	f001 fb8a 	bl	be16 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a702:	b938      	cbnz	r0, a714 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    a704:	4815      	ldr	r0, [pc, #84]	; (a75c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    a706:	3010      	adds	r0, #16
    a708:	6801      	ldr	r1, [r0, #0]
    a70a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a70e:	ea41 0108 	orr.w	r1, r1, r8
    a712:	6001      	str	r1, [r0, #0]
    a714:	f000 f8e4 	bl	a8e0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    a718:	b10c      	cbz	r4, a71e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    a71a:	2c04      	cmp	r4, #4
    a71c:	d107      	bne.n	a72e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    a71e:	4811      	ldr	r0, [pc, #68]	; (a764 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    a720:	490d      	ldr	r1, [pc, #52]	; (a758 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    a722:	4a0f      	ldr	r2, [pc, #60]	; (a760 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    a724:	1d09      	adds	r1, r1, #4
    a726:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    a72a:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    a72e:	2001      	movs	r0, #1
    a730:	7068      	strb	r0, [r5, #1]
    a732:	70ec      	strb	r4, [r5, #3]
    a734:	b11c      	cbz	r4, a73e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    a736:	2c01      	cmp	r4, #1
    a738:	d001      	beq.n	a73e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    a73a:	2c02      	cmp	r4, #2
    a73c:	d106      	bne.n	a74c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    a73e:	7028      	strb	r0, [r5, #0]
    a740:	2100      	movs	r1, #0
    a742:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    a746:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    a74a:	6030      	str	r0, [r6, #0]
    a74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a750:	20000369 	.word	0x20000369
    a754:	0000a8f0 	.word	0x0000a8f0
    a758:	4000f000 	.word	0x4000f000
    a75c:	4000f508 	.word	0x4000f508
    a760:	4000f100 	.word	0x4000f100
    a764:	4001f088 	.word	0x4001f088

0000a768 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    a768:	b570      	push	{r4, r5, r6, lr}
    a76a:	4a1c      	ldr	r2, [pc, #112]	; (a7dc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    a76c:	7853      	ldrb	r3, [r2, #1]
    a76e:	b1a3      	cbz	r3, a79a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    a770:	4b1b      	ldr	r3, [pc, #108]	; (a7e0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    a772:	6019      	str	r1, [r3, #0]
    a774:	1d19      	adds	r1, r3, #4
    a776:	6008      	str	r0, [r1, #0]
    a778:	2501      	movs	r5, #1
    a77a:	7095      	strb	r5, [r2, #2]
    a77c:	4610      	mov	r0, r2
    a77e:	78d6      	ldrb	r6, [r2, #3]
    a780:	4b18      	ldr	r3, [pc, #96]	; (a7e4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    a782:	7800      	ldrb	r0, [r0, #0]
    a784:	4c18      	ldr	r4, [pc, #96]	; (a7e8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    a786:	2100      	movs	r1, #0
    a788:	b156      	cbz	r6, a7a0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    a78a:	2e04      	cmp	r6, #4
    a78c:	d01b      	beq.n	a7c6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    a78e:	b308      	cbz	r0, a7d4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    a790:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    a794:	0668      	lsls	r0, r5, #25
    a796:	6018      	str	r0, [r3, #0]
    a798:	bd70      	pop	{r4, r5, r6, pc}
    a79a:	f44f 71c2 	mov.w	r1, #388	; 0x184
    a79e:	e01a      	b.n	a7d6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    a7a0:	b178      	cbz	r0, a7c2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    a7a2:	4620      	mov	r0, r4
    a7a4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    a7a8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    a7ac:	601e      	str	r6, [r3, #0]
    a7ae:	1271      	asrs	r1, r6, #9
    a7b0:	f005 fc48 	bl	10044 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    a7b4:	2800      	cmp	r0, #0
    a7b6:	d0ef      	beq.n	a798 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    a7b8:	6065      	str	r5, [r4, #4]
    a7ba:	480a      	ldr	r0, [pc, #40]	; (a7e4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    a7bc:	1d00      	adds	r0, r0, #4
    a7be:	6006      	str	r6, [r0, #0]
    a7c0:	bd70      	pop	{r4, r5, r6, pc}
    a7c2:	21b3      	movs	r1, #179	; 0xb3
    a7c4:	e007      	b.n	a7d6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    a7c6:	7015      	strb	r5, [r2, #0]
    a7c8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    a7cc:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    a7d0:	6025      	str	r5, [r4, #0]
    a7d2:	bd70      	pop	{r4, r5, r6, pc}
    a7d4:	21c6      	movs	r1, #198	; 0xc6
    a7d6:	203c      	movs	r0, #60	; 0x3c
    a7d8:	f7f9 fe00 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7dc:	20000369 	.word	0x20000369
    a7e0:	4000f50c 	.word	0x4000f50c
    a7e4:	4001f504 	.word	0x4001f504
    a7e8:	4000f000 	.word	0x4000f000

0000a7ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    a7ec:	b570      	push	{r4, r5, r6, lr}
    a7ee:	4d05      	ldr	r5, [pc, #20]	; (a804 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    a7f0:	2400      	movs	r4, #0
    a7f2:	7828      	ldrb	r0, [r5, #0]
    a7f4:	b110      	cbz	r0, a7fc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    a7f6:	f000 f873 	bl	a8e0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    a7fa:	702c      	strb	r4, [r5, #0]
    a7fc:	706c      	strb	r4, [r5, #1]
    a7fe:	70ac      	strb	r4, [r5, #2]
    a800:	bd70      	pop	{r4, r5, r6, pc}
    a802:	0000      	.short	0x0000
    a804:	20000369 	.word	0x20000369

0000a808 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    a808:	4802      	ldr	r0, [pc, #8]	; (a814 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    a80a:	2100      	movs	r1, #0
    a80c:	7001      	strb	r1, [r0, #0]
    a80e:	7041      	strb	r1, [r0, #1]
    a810:	7081      	strb	r1, [r0, #2]
    a812:	4770      	bx	lr
    a814:	20000369 	.word	0x20000369

0000a818 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    a818:	480b      	ldr	r0, [pc, #44]	; (a848 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    a81a:	b510      	push	{r4, lr}
    a81c:	7800      	ldrb	r0, [r0, #0]
    a81e:	b158      	cbz	r0, a838 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    a820:	f44f 7182 	mov.w	r1, #260	; 0x104
    a824:	4809      	ldr	r0, [pc, #36]	; (a84c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    a826:	f005 fc0d 	bl	10044 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    a82a:	b140      	cbz	r0, a83e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    a82c:	4808      	ldr	r0, [pc, #32]	; (a850 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    a82e:	6800      	ldr	r0, [r0, #0]
    a830:	2800      	cmp	r0, #0
    a832:	d000      	beq.n	a836 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    a834:	2001      	movs	r0, #1
    a836:	bd10      	pop	{r4, pc}
    a838:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    a83c:	e001      	b.n	a842 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    a83e:	f240 11eb 	movw	r1, #491	; 0x1eb
    a842:	203c      	movs	r0, #60	; 0x3c
    a844:	f7f9 fdca 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a848:	20000369 	.word	0x20000369
    a84c:	4000f000 	.word	0x4000f000
    a850:	4000f400 	.word	0x4000f400

0000a854 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    a854:	4801      	ldr	r0, [pc, #4]	; (a85c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    a856:	2101      	movs	r1, #1
    a858:	6081      	str	r1, [r0, #8]
    a85a:	4770      	bx	lr
    a85c:	4000f000 	.word	0x4000f000

0000a860 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    a860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a864:	481b      	ldr	r0, [pc, #108]	; (a8d4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    a866:	7800      	ldrb	r0, [r0, #0]
    a868:	b1d8      	cbz	r0, a8a2 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    a86a:	f8df 806c 	ldr.w	r8, [pc, #108]	; a8d8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    a86e:	f44f 7682 	mov.w	r6, #260	; 0x104
    a872:	4631      	mov	r1, r6
    a874:	4640      	mov	r0, r8
    a876:	f005 fbe5 	bl	10044 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    a87a:	2800      	cmp	r0, #0
    a87c:	d128      	bne.n	a8d0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    a87e:	2002      	movs	r0, #2
    a880:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    a884:	4c15      	ldr	r4, [pc, #84]	; (a8dc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    a886:	6820      	ldr	r0, [r4, #0]
    a888:	43c0      	mvns	r0, r0
    a88a:	f340 1500 	sbfx	r5, r0, #4, #1
    a88e:	6820      	ldr	r0, [r4, #0]
    a890:	f040 0010 	orr.w	r0, r0, #16
    a894:	6020      	str	r0, [r4, #0]
    a896:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    a89a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    a89e:	1c6d      	adds	r5, r5, #1
    a8a0:	e008      	b.n	a8b4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    a8a2:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
    a8a6:	203c      	movs	r0, #60	; 0x3c
    a8a8:	f7f9 fd98 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8ac:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    a8b0:	f7f9 fbf0 	bl	4094 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a8b4:	4631      	mov	r1, r6
    a8b6:	4640      	mov	r0, r8
    a8b8:	f005 fbc4 	bl	10044 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    a8bc:	2800      	cmp	r0, #0
    a8be:	d0f5      	beq.n	a8ac <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    a8c0:	b91d      	cbnz	r5, a8ca <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    a8c2:	6820      	ldr	r0, [r4, #0]
    a8c4:	f020 0010 	bic.w	r0, r0, #16
    a8c8:	6020      	str	r0, [r4, #0]
    a8ca:	2002      	movs	r0, #2
    a8cc:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    a8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a8d4:	20000369 	.word	0x20000369
    a8d8:	4000f000 	.word	0x4000f000
    a8dc:	e000ed10 	.word	0xe000ed10
    a8e0:	4902      	ldr	r1, [pc, #8]	; (a8ec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    a8e2:	4801      	ldr	r0, [pc, #4]	; (a8e8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    a8e4:	6008      	str	r0, [r1, #0]
    a8e6:	4770      	bx	lr
    a8e8:	02020000 	.word	0x02020000
    a8ec:	4001f508 	.word	0x4001f508
    a8f0:	00010000 	.word	0x00010000

0000a8f4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    a8f4:	b510      	push	{r4, lr}
    a8f6:	4604      	mov	r4, r0
    a8f8:	f000 f820 	bl	a93c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    a8fc:	2c00      	cmp	r4, #0
    a8fe:	d00e      	beq.n	a91e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    a900:	4a0b      	ldr	r2, [pc, #44]	; (a930 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    a902:	480b      	ldr	r0, [pc, #44]	; (a930 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    a904:	490b      	ldr	r1, [pc, #44]	; (a934 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a906:	3214      	adds	r2, #20
    a908:	2c01      	cmp	r4, #1
    a90a:	d005      	beq.n	a918 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    a90c:	2c02      	cmp	r4, #2
    a90e:	d007      	beq.n	a920 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    a910:	2182      	movs	r1, #130	; 0x82
    a912:	203d      	movs	r0, #61	; 0x3d
    a914:	f7f9 fd62 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a918:	2302      	movs	r3, #2
    a91a:	6003      	str	r3, [r0, #0]
    a91c:	6011      	str	r1, [r2, #0]
    a91e:	bd10      	pop	{r4, pc}
    a920:	2303      	movs	r3, #3
    a922:	6003      	str	r3, [r0, #0]
    a924:	6011      	str	r1, [r2, #0]
    a926:	4904      	ldr	r1, [pc, #16]	; (a938 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    a928:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a92c:	6008      	str	r0, [r1, #0]
    a92e:	bd10      	pop	{r4, pc}
    a930:	4000f500 	.word	0x4000f500
    a934:	2000149b 	.word	0x2000149b
    a938:	4001f504 	.word	0x4001f504
    a93c:	4805      	ldr	r0, [pc, #20]	; (a954 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    a93e:	b510      	push	{r4, lr}
    a940:	2100      	movs	r1, #0
    a942:	6001      	str	r1, [r0, #0]
    a944:	6001      	str	r1, [r0, #0]
    a946:	f7ff ff51 	bl	a7ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    a94a:	4903      	ldr	r1, [pc, #12]	; (a958 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    a94c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a950:	6008      	str	r0, [r1, #0]
    a952:	bd10      	pop	{r4, pc}
    a954:	4000f500 	.word	0x4000f500
    a958:	4001f508 	.word	0x4001f508

0000a95c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    a95c:	4805      	ldr	r0, [pc, #20]	; (a974 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    a95e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a962:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    a966:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a96a:	2100      	movs	r1, #0
    a96c:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    a970:	4770      	bx	lr
    a972:	0000      	.short	0x0000
    a974:	40001000 	.word	0x40001000

0000a978 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    a978:	4904      	ldr	r1, [pc, #16]	; (a98c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    a97a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    a97e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    a982:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    a986:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    a98a:	4770      	bx	lr
    a98c:	40001000 	.word	0x40001000

0000a990 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    a990:	4801      	ldr	r0, [pc, #4]	; (a998 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    a992:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    a996:	4770      	bx	lr
    a998:	20001158 	.word	0x20001158

0000a99c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    a99c:	4902      	ldr	r1, [pc, #8]	; (a9a8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    a99e:	5c08      	ldrb	r0, [r1, r0]
    a9a0:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    a9a4:	4770      	bx	lr
    a9a6:	0000      	.short	0x0000
    a9a8:	0000b6c2 	.word	0x0000b6c2

0000a9ac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    a9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9ae:	4c24      	ldr	r4, [pc, #144]	; (aa40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    a9b0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    a9b4:	f010 0f10 	tst.w	r0, #16
    a9b8:	d001      	beq.n	a9be <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    a9ba:	2701      	movs	r7, #1
    a9bc:	e000      	b.n	a9c0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    a9be:	2700      	movs	r7, #0
    a9c0:	2010      	movs	r0, #16
    a9c2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    a9c6:	2002      	movs	r0, #2
    a9c8:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    a9cc:	481d      	ldr	r0, [pc, #116]	; (aa44 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    a9ce:	2500      	movs	r5, #0
    a9d0:	491d      	ldr	r1, [pc, #116]	; (aa48 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    a9d2:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    a9d6:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    a9da:	6008      	str	r0, [r1, #0]
    a9dc:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    a9e0:	f44f 7688 	mov.w	r6, #272	; 0x110
    a9e4:	f010 0fff 	tst.w	r0, #255	; 0xff
    a9e8:	d019      	beq.n	aa1e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    a9ea:	20ff      	movs	r0, #255	; 0xff
    a9ec:	f88d 0000 	strb.w	r0, [sp]
    a9f0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a9f4:	2001      	movs	r0, #1
    a9f6:	6120      	str	r0, [r4, #16]
    a9f8:	e005      	b.n	aa06 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    a9fa:	bf00      	nop
    a9fc:	f89d 0000 	ldrb.w	r0, [sp]
    aa00:	1e40      	subs	r0, r0, #1
    aa02:	f88d 0000 	strb.w	r0, [sp]
    aa06:	f89d 0000 	ldrb.w	r0, [sp]
    aa0a:	b128      	cbz	r0, aa18 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    aa0c:	4631      	mov	r1, r6
    aa0e:	4620      	mov	r0, r4
    aa10:	f005 fb47 	bl	100a2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    aa14:	2800      	cmp	r0, #0
    aa16:	d0f1      	beq.n	a9fc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    aa18:	f89d 0000 	ldrb.w	r0, [sp]
    aa1c:	b158      	cbz	r0, aa36 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    aa1e:	f000 fc45 	bl	b2ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    aa22:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    aa26:	f000 fdcd 	bl	b5c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    aa2a:	2f00      	cmp	r7, #0
    aa2c:	d002      	beq.n	aa34 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    aa2e:	2010      	movs	r0, #16
    aa30:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    aa34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa36:	f640 018f 	movw	r1, #2191	; 0x88f
    aa3a:	203e      	movs	r0, #62	; 0x3e
    aa3c:	f7f9 fcce 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa40:	40001000 	.word	0x40001000
    aa44:	20001158 	.word	0x20001158
    aa48:	4001f508 	.word	0x4001f508

0000aa4c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    aa4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa50:	4d18      	ldr	r5, [pc, #96]	; (aab4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    aa52:	4607      	mov	r7, r0
    aa54:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    aa58:	07c2      	lsls	r2, r0, #31
    aa5a:	d00f      	beq.n	aa7c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    aa5c:	4c16      	ldr	r4, [pc, #88]	; (aab8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    aa5e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    aa62:	f042 0201 	orr.w	r2, r2, #1
    aa66:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    aa6a:	f040 0002 	orr.w	r0, r0, #2
    aa6e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    aa72:	2601      	movs	r6, #1
    aa74:	b13f      	cbz	r7, aa86 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    aa76:	2f01      	cmp	r7, #1
    aa78:	d00b      	beq.n	aa92 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    aa7a:	e010      	b.n	aa9e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    aa7c:	f240 717c 	movw	r1, #1916	; 0x77c
    aa80:	203e      	movs	r0, #62	; 0x3e
    aa82:	f7f9 fcab 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa86:	4608      	mov	r0, r1
    aa88:	f000 fdf6 	bl	b678 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    aa8c:	726e      	strb	r6, [r5, #9]
    aa8e:	6026      	str	r6, [r4, #0]
    aa90:	e005      	b.n	aa9e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    aa92:	4608      	mov	r0, r1
    aa94:	f000 fdd6 	bl	b644 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    aa98:	2002      	movs	r0, #2
    aa9a:	7268      	strb	r0, [r5, #9]
    aa9c:	6066      	str	r6, [r4, #4]
    aa9e:	4807      	ldr	r0, [pc, #28]	; (aabc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    aaa0:	64c6      	str	r6, [r0, #76]	; 0x4c
    aaa2:	4806      	ldr	r0, [pc, #24]	; (aabc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    aaa4:	300c      	adds	r0, #12
    aaa6:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    aaaa:	4638      	mov	r0, r7
    aaac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    aab0:	f000 bd5a 	b.w	b568 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    aab4:	20001158 	.word	0x20001158
    aab8:	40001000 	.word	0x40001000
    aabc:	40008000 	.word	0x40008000

0000aac0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    aac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aac4:	4c2c      	ldr	r4, [pc, #176]	; (ab78 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    aac6:	0006      	movs	r6, r0
    aac8:	4d2c      	ldr	r5, [pc, #176]	; (ab7c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    aaca:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    aace:	f8df 80b0 	ldr.w	r8, [pc, #176]	; ab80 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    aad2:	f040 0002 	orr.w	r0, r0, #2
    aad6:	4689      	mov	r9, r1
    aad8:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    aadc:	f04f 0700 	mov.w	r7, #0
    aae0:	d002      	beq.n	aae8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    aae2:	2e01      	cmp	r6, #1
    aae4:	d020      	beq.n	ab28 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    aae6:	e036      	b.n	ab56 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    aae8:	4608      	mov	r0, r1
    aaea:	f000 fdc5 	bl	b678 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    aaee:	2001      	movs	r0, #1
    aaf0:	7260      	strb	r0, [r4, #9]
    aaf2:	79e0      	ldrb	r0, [r4, #7]
    aaf4:	2801      	cmp	r0, #1
    aaf6:	d105      	bne.n	ab04 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    aaf8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    aafc:	f040 0008 	orr.w	r0, r0, #8
    ab00:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    ab04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ab06:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    ab0a:	62a0      	str	r0, [r4, #40]	; 0x28
    ab0c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    ab10:	f8c8 0000 	str.w	r0, [r8]
    ab14:	491b      	ldr	r1, [pc, #108]	; (ab84 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    ab16:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    ab1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ab1e:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    ab22:	fbb0 f7f1 	udiv	r7, r0, r1
    ab26:	e016      	b.n	ab56 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    ab28:	4608      	mov	r0, r1
    ab2a:	f000 fd8b 	bl	b644 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    ab2e:	2002      	movs	r0, #2
    ab30:	7260      	strb	r0, [r4, #9]
    ab32:	79e0      	ldrb	r0, [r4, #7]
    ab34:	2801      	cmp	r0, #1
    ab36:	d105      	bne.n	ab44 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    ab38:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    ab3c:	f040 0004 	orr.w	r0, r0, #4
    ab40:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    ab44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ab46:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    ab4a:	62a0      	str	r0, [r4, #40]	; 0x28
    ab4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    ab50:	f8c8 0000 	str.w	r0, [r8]
    ab54:	2729      	movs	r7, #41	; 0x29
    ab56:	f000 fc15 	bl	b384 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    ab5a:	f001 f830 	bl	bbbe <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    ab5e:	b120      	cbz	r0, ab6a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    ab60:	f7ff ff24 	bl	a9ac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ab64:	2000      	movs	r0, #0
    ab66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab6a:	2100      	movs	r1, #0
    ab6c:	4630      	mov	r0, r6
    ab6e:	f000 fcfb 	bl	b568 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    ab72:	4638      	mov	r0, r7
    ab74:	e7f7      	b.n	ab66 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    ab76:	0000      	.short	0x0000
    ab78:	20001158 	.word	0x20001158
    ab7c:	40001000 	.word	0x40001000
    ab80:	4001f504 	.word	0x4001f504
    ab84:	0000b6bc 	.word	0x0000b6bc

0000ab88 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    ab88:	4a02      	ldr	r2, [pc, #8]	; (ab94 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    ab8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    ab8c:	6003      	str	r3, [r0, #0]
    ab8e:	6b50      	ldr	r0, [r2, #52]	; 0x34
    ab90:	6008      	str	r0, [r1, #0]
    ab92:	4770      	bx	lr
    ab94:	20001158 	.word	0x20001158

0000ab98 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    ab98:	b510      	push	{r4, lr}
    ab9a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    ab9c:	4901      	ldr	r1, [pc, #4]	; (aba4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    ab9e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    aba2:	bd10      	pop	{r4, pc}
    aba4:	20001148 	.word	0x20001148

0000aba8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    aba8:	490f      	ldr	r1, [pc, #60]	; (abe8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    abaa:	b510      	push	{r4, lr}
    abac:	69ca      	ldr	r2, [r1, #28]
    abae:	4282      	cmp	r2, r0
    abb0:	d302      	bcc.n	abb8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    abb2:	f640 111f 	movw	r1, #2335	; 0x91f
    abb6:	e00b      	b.n	abd0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    abb8:	2201      	movs	r2, #1
    abba:	730a      	strb	r2, [r1, #12]
    abbc:	6108      	str	r0, [r1, #16]
    abbe:	490b      	ldr	r1, [pc, #44]	; (abec <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    abc0:	644a      	str	r2, [r1, #68]	; 0x44
    abc2:	1d0a      	adds	r2, r1, #4
    abc4:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    abc8:	4283      	cmp	r3, r0
    abca:	d304      	bcc.n	abd6 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    abcc:	f640 1128 	movw	r1, #2344	; 0x928
    abd0:	203e      	movs	r0, #62	; 0x3e
    abd2:	f7f9 fc03 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abd6:	2300      	movs	r3, #0
    abd8:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    abdc:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    abe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    abe4:	f000 bc94 	b.w	b510 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    abe8:	20001158 	.word	0x20001158
    abec:	40008000 	.word	0x40008000

0000abf0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    abf0:	b570      	push	{r4, r5, r6, lr}
    abf2:	4c0f      	ldr	r4, [pc, #60]	; (ac30 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    abf4:	4603      	mov	r3, r0
    abf6:	2002      	movs	r0, #2
    abf8:	7320      	strb	r0, [r4, #12]
    abfa:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    abfe:	2096      	movs	r0, #150	; 0x96
    ac00:	f894 1020 	ldrb.w	r1, [r4, #32]
    ac04:	7d22      	ldrb	r2, [r4, #20]
    ac06:	2d01      	cmp	r5, #1
    ac08:	d00e      	beq.n	ac28 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    ac0a:	f000 fd93 	bl	b734 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    ac0e:	6120      	str	r0, [r4, #16]
    ac10:	4808      	ldr	r0, [pc, #32]	; (ac34 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    ac12:	2100      	movs	r1, #0
    ac14:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    ac18:	6921      	ldr	r1, [r4, #16]
    ac1a:	69e0      	ldr	r0, [r4, #28]
    ac1c:	4408      	add	r0, r1
    ac1e:	4905      	ldr	r1, [pc, #20]	; (ac34 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    ac20:	1d09      	adds	r1, r1, #4
    ac22:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ac26:	bd70      	pop	{r4, r5, r6, pc}
    ac28:	f000 fda2 	bl	b770 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    ac2c:	e7ef      	b.n	ac0e <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    ac2e:	0000      	.short	0x0000
    ac30:	20001158 	.word	0x20001158
    ac34:	40008000 	.word	0x40008000

0000ac38 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    ac38:	b510      	push	{r4, lr}
    ac3a:	f001 f908 	bl	be4e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ac3e:	2800      	cmp	r0, #0
    ac40:	d006      	beq.n	ac50 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    ac42:	4804      	ldr	r0, [pc, #16]	; (ac54 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    ac44:	6801      	ldr	r1, [r0, #0]
    ac46:	f021 0101 	bic.w	r1, r1, #1
    ac4a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    ac4e:	6001      	str	r1, [r0, #0]
    ac50:	bd10      	pop	{r4, pc}
    ac52:	0000      	.short	0x0000
    ac54:	40001774 	.word	0x40001774

0000ac58 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    ac58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac5c:	2238      	movs	r2, #56	; 0x38
    ac5e:	2100      	movs	r1, #0
    ac60:	4813      	ldr	r0, [pc, #76]	; (acb0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    ac62:	f001 f992 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ac66:	f000 fcad 	bl	b5c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    ac6a:	f001 f8a9 	bl	bdc0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ac6e:	4d11      	ldr	r5, [pc, #68]	; (acb4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ac70:	4e10      	ldr	r6, [pc, #64]	; (acb4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ac72:	2400      	movs	r4, #0
    ac74:	4f0f      	ldr	r7, [pc, #60]	; (acb4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ac76:	3508      	adds	r5, #8
    ac78:	3610      	adds	r6, #16
    ac7a:	b928      	cbnz	r0, ac88 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    ac7c:	f001 f8b7 	bl	bdee <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    ac80:	b910      	cbnz	r0, ac88 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    ac82:	f001 f8be 	bl	be02 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    ac86:	b108      	cbz	r0, ac8c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    ac88:	2224      	movs	r2, #36	; 0x24
    ac8a:	e006      	b.n	ac9a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ac8c:	f001 f8f9 	bl	be82 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    ac90:	b910      	cbnz	r0, ac98 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    ac92:	f001 f8ec 	bl	be6e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    ac96:	b140      	cbz	r0, acaa <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    ac98:	2240      	movs	r2, #64	; 0x40
    ac9a:	21ff      	movs	r1, #255	; 0xff
    ac9c:	4638      	mov	r0, r7
    ac9e:	f001 f974 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    aca2:	602c      	str	r4, [r5, #0]
    aca4:	6034      	str	r4, [r6, #0]
    aca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acaa:	2238      	movs	r2, #56	; 0x38
    acac:	e7f5      	b.n	ac9a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    acae:	0000      	.short	0x0000
    acb0:	20001158 	.word	0x20001158
    acb4:	40000e00 	.word	0x40000e00

0000acb8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    acb8:	4801      	ldr	r0, [pc, #4]	; (acc0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    acba:	69c0      	ldr	r0, [r0, #28]
    acbc:	4770      	bx	lr
    acbe:	0000      	.short	0x0000
    acc0:	20001158 	.word	0x20001158

0000acc4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    acc4:	4801      	ldr	r0, [pc, #4]	; (accc <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    acc6:	6980      	ldr	r0, [r0, #24]
    acc8:	4770      	bx	lr
    acca:	0000      	.short	0x0000
    accc:	20001158 	.word	0x20001158

0000acd0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    acd0:	b510      	push	{r4, lr}
    acd2:	f000 fc2b 	bl	b52c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    acd6:	f7ff fe69 	bl	a9ac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    acda:	f7f9 fa31 	bl	4140 <mpsl_fem_disable>
    acde:	b130      	cbz	r0, acee <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    ace0:	1c40      	adds	r0, r0, #1
    ace2:	d004      	beq.n	acee <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    ace4:	f240 516d 	movw	r1, #1389	; 0x56d
    ace8:	203e      	movs	r0, #62	; 0x3e
    acea:	f7f9 fb77 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acee:	480f      	ldr	r0, [pc, #60]	; (ad2c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    acf0:	4a0f      	ldr	r2, [pc, #60]	; (ad30 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    acf2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    acf4:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    acf8:	6011      	str	r1, [r2, #0]
    acfa:	2400      	movs	r4, #0
    acfc:	6284      	str	r4, [r0, #40]	; 0x28
    acfe:	7304      	strb	r4, [r0, #12]
    ad00:	61c4      	str	r4, [r0, #28]
    ad02:	6184      	str	r4, [r0, #24]
    ad04:	f000 fc12 	bl	b52c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    ad08:	480a      	ldr	r0, [pc, #40]	; (ad34 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    ad0a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    ad0e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    ad12:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    ad16:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    ad1a:	2001      	movs	r0, #1
    ad1c:	f005 f9b0 	bl	10080 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ad20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad24:	2001      	movs	r0, #1
    ad26:	f005 b99e 	b.w	10066 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ad2a:	0000      	.short	0x0000
    ad2c:	20001158 	.word	0x20001158
    ad30:	4001f508 	.word	0x4001f508
    ad34:	40008000 	.word	0x40008000

0000ad38 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    ad38:	b570      	push	{r4, r5, r6, lr}
    ad3a:	2001      	movs	r0, #1
    ad3c:	f005 f9a0 	bl	10080 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ad40:	4c37      	ldr	r4, [pc, #220]	; (ae20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    ad42:	2000      	movs	r0, #0
    ad44:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    ad48:	2001      	movs	r0, #1
    ad4a:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    ad4e:	f001 f86e 	bl	be2e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    ad52:	4d34      	ldr	r5, [pc, #208]	; (ae24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ad54:	b118      	cbz	r0, ad5e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    ad56:	6828      	ldr	r0, [r5, #0]
    ad58:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    ad5c:	6028      	str	r0, [r5, #0]
    ad5e:	f001 f85a 	bl	be16 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ad62:	b128      	cbz	r0, ad70 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    ad64:	6828      	ldr	r0, [r5, #0]
    ad66:	4930      	ldr	r1, [pc, #192]	; (ae28 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    ad68:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    ad6c:	4308      	orrs	r0, r1
    ad6e:	6028      	str	r0, [r5, #0]
    ad70:	f001 f86d 	bl	be4e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ad74:	b138      	cbz	r0, ad86 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    ad76:	482b      	ldr	r0, [pc, #172]	; (ae24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ad78:	1d00      	adds	r0, r0, #4
    ad7a:	6801      	ldr	r1, [r0, #0]
    ad7c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    ad80:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    ad84:	6001      	str	r1, [r0, #0]
    ad86:	4927      	ldr	r1, [pc, #156]	; (ae24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ad88:	4828      	ldr	r0, [pc, #160]	; (ae2c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    ad8a:	313c      	adds	r1, #60	; 0x3c
    ad8c:	6008      	str	r0, [r1, #0]
    ad8e:	f7f9 fa0d 	bl	41ac <mpsl_fem_device_config_254_apply_get>
    ad92:	b140      	cbz	r0, ada6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    ad94:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ad98:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    ad9c:	1c41      	adds	r1, r0, #1
    ad9e:	d002      	beq.n	ada6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    ada0:	4920      	ldr	r1, [pc, #128]	; (ae24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ada2:	3110      	adds	r1, #16
    ada4:	6008      	str	r0, [r1, #0]
    ada6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    adaa:	6e00      	ldr	r0, [r0, #96]	; 0x60
    adac:	1c41      	adds	r1, r0, #1
    adae:	d004      	beq.n	adba <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    adb0:	491f      	ldr	r1, [pc, #124]	; (ae30 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    adb2:	680a      	ldr	r2, [r1, #0]
    adb4:	f360 4217 	bfi	r2, r0, #16, #8
    adb8:	600a      	str	r2, [r1, #0]
    adba:	f240 1103 	movw	r1, #259	; 0x103
    adbe:	f240 605b 	movw	r0, #1627	; 0x65b
    adc2:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    adc6:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    adca:	2001      	movs	r0, #1
    adcc:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    add0:	f000 f842 	bl	ae58 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    add4:	f240 2001 	movw	r0, #513	; 0x201
    add8:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    addc:	2002      	movs	r0, #2
    adde:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    ade2:	4914      	ldr	r1, [pc, #80]	; (ae34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    ade4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    ade8:	6008      	str	r0, [r1, #0]
    adea:	4913      	ldr	r1, [pc, #76]	; (ae38 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    adec:	2000      	movs	r0, #0
    adee:	4d13      	ldr	r5, [pc, #76]	; (ae3c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    adf0:	8608      	strh	r0, [r1, #48]	; 0x30
    adf2:	3110      	adds	r1, #16
    adf4:	61c8      	str	r0, [r1, #28]
    adf6:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    adfa:	7028      	strb	r0, [r5, #0]
    adfc:	2001      	movs	r0, #1
    adfe:	f005 f932 	bl	10066 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ae02:	2010      	movs	r0, #16
    ae04:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    ae08:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ae0c:	2002      	movs	r0, #2
    ae0e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    ae12:	6868      	ldr	r0, [r5, #4]
    ae14:	2800      	cmp	r0, #0
    ae16:	d002      	beq.n	ae1e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    ae18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ae1c:	4700      	bx	r0
    ae1e:	bd70      	pop	{r4, r5, r6, pc}
    ae20:	40001000 	.word	0x40001000
    ae24:	4000173c 	.word	0x4000173c
    ae28:	80000096 	.word	0x80000096
    ae2c:	8900002c 	.word	0x8900002c
    ae30:	4000158c 	.word	0x4000158c
    ae34:	4001f504 	.word	0x4001f504
    ae38:	20001148 	.word	0x20001148
    ae3c:	2000031c 	.word	0x2000031c

0000ae40 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    ae40:	4901      	ldr	r1, [pc, #4]	; (ae48 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    ae42:	7548      	strb	r0, [r1, #21]
    ae44:	4770      	bx	lr
    ae46:	0000      	.short	0x0000
    ae48:	20001158 	.word	0x20001158

0000ae4c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    ae4c:	4901      	ldr	r1, [pc, #4]	; (ae54 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    ae4e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    ae52:	4770      	bx	lr
    ae54:	0000b710 	.word	0x0000b710

0000ae58 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    ae58:	4908      	ldr	r1, [pc, #32]	; (ae7c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    ae5a:	b510      	push	{r4, lr}
    ae5c:	7508      	strb	r0, [r1, #20]
    ae5e:	4908      	ldr	r1, [pc, #32]	; (ae80 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    ae60:	2801      	cmp	r0, #1
    ae62:	d006      	beq.n	ae72 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    ae64:	2802      	cmp	r0, #2
    ae66:	d006      	beq.n	ae76 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    ae68:	f640 5169 	movw	r1, #3433	; 0xd69
    ae6c:	203e      	movs	r0, #62	; 0x3e
    ae6e:	f7f9 fab5 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae72:	2003      	movs	r0, #3
    ae74:	e000      	b.n	ae78 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    ae76:	2004      	movs	r0, #4
    ae78:	6008      	str	r0, [r1, #0]
    ae7a:	bd10      	pop	{r4, pc}
    ae7c:	20001158 	.word	0x20001158
    ae80:	40001510 	.word	0x40001510

0000ae84 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    ae84:	4905      	ldr	r1, [pc, #20]	; (ae9c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    ae86:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    ae8a:	4805      	ldr	r0, [pc, #20]	; (aea0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    ae8c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    ae90:	f041 0101 	orr.w	r1, r1, #1
    ae94:	7001      	strb	r1, [r0, #0]
    ae96:	f000 ba3b 	b.w	b310 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    ae9a:	0000      	.short	0x0000
    ae9c:	40001000 	.word	0x40001000
    aea0:	20001158 	.word	0x20001158

0000aea4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    aea4:	4901      	ldr	r1, [pc, #4]	; (aeac <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    aea6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    aeaa:	4770      	bx	lr
    aeac:	0000b71c 	.word	0x0000b71c

0000aeb0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    aeb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aeb4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; af58 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>
    aeb8:	4d28      	ldr	r5, [pc, #160]	; (af5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xac>)
    aeba:	460f      	mov	r7, r1
    aebc:	0006      	movs	r6, r0
    aebe:	4614      	mov	r4, r2
    aec0:	f04f 0801 	mov.w	r8, #1
    aec4:	d004      	beq.n	aed0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20>
    aec6:	2e01      	cmp	r6, #1
    aec8:	d010      	beq.n	aeec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3c>
    aeca:	f640 0124 	movw	r1, #2084	; 0x824
    aece:	e039      	b.n	af44 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x94>
    aed0:	4610      	mov	r0, r2
    aed2:	f000 fbd1 	bl	b678 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    aed6:	4822      	ldr	r0, [pc, #136]	; (af60 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>)
    aed8:	f885 8009 	strb.w	r8, [r5, #9]
    aedc:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    aee0:	4638      	mov	r0, r7
    aee2:	f000 fb77 	bl	b5d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    aee6:	4604      	mov	r4, r0
    aee8:	4648      	mov	r0, r9
    aeea:	e00c      	b.n	af06 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x56>
    aeec:	4610      	mov	r0, r2
    aeee:	f000 fba9 	bl	b644 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    aef2:	2002      	movs	r0, #2
    aef4:	7268      	strb	r0, [r5, #9]
    aef6:	f649 71ba 	movw	r1, #40890	; 0x9fba
    aefa:	4638      	mov	r0, r7
    aefc:	f000 fb6a 	bl	b5d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    af00:	4604      	mov	r4, r0
    af02:	4815      	ldr	r0, [pc, #84]	; (af58 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>)
    af04:	1d00      	adds	r0, r0, #4
    af06:	f000 fb23 	bl	b550 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    af0a:	4f16      	ldr	r7, [pc, #88]	; (af64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    af0c:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
    af10:	4916      	ldr	r1, [pc, #88]	; (af6c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>)
    af12:	4815      	ldr	r0, [pc, #84]	; (af68 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>)
    af14:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    af18:	2010      	movs	r0, #16
    af1a:	f8c9 0304 	str.w	r0, [r9, #772]	; 0x304
    af1e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    af20:	4913      	ldr	r1, [pc, #76]	; (af70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc0>)
    af22:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    af26:	62a8      	str	r0, [r5, #40]	; 0x28
    af28:	0138      	lsls	r0, r7, #4
    af2a:	6008      	str	r0, [r1, #0]
    af2c:	f000 fa2a 	bl	b384 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    af30:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
    af34:	480b      	ldr	r0, [pc, #44]	; (af64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    af36:	300c      	adds	r0, #12
    af38:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    af3c:	42a0      	cmp	r0, r4
    af3e:	d304      	bcc.n	af4a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9a>
    af40:	f640 013a 	movw	r1, #2106	; 0x83a
    af44:	203e      	movs	r0, #62	; 0x3e
    af46:	f7f9 fa49 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af4a:	4621      	mov	r1, r4
    af4c:	4630      	mov	r0, r6
    af4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    af52:	f000 bb09 	b.w	b568 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    af56:	0000      	.short	0x0000
    af58:	40001000 	.word	0x40001000
    af5c:	20001158 	.word	0x20001158
    af60:	0000b6bc 	.word	0x0000b6bc
    af64:	40008000 	.word	0x40008000
    af68:	40008140 	.word	0x40008140
    af6c:	4001f098 	.word	0x4001f098
    af70:	4001f504 	.word	0x4001f504

0000af74 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    af74:	4b0d      	ldr	r3, [pc, #52]	; (afac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    af76:	b510      	push	{r4, lr}
    af78:	71d8      	strb	r0, [r3, #7]
    af7a:	729a      	strb	r2, [r3, #10]
    af7c:	b151      	cbz	r1, af94 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    af7e:	2002      	movs	r0, #2
    af80:	7218      	strb	r0, [r3, #8]
    af82:	2801      	cmp	r0, #1
    af84:	d008      	beq.n	af98 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    af86:	2802      	cmp	r0, #2
    af88:	d00f      	beq.n	afaa <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    af8a:	f640 2145 	movw	r1, #2629	; 0xa45
    af8e:	203e      	movs	r0, #62	; 0x3e
    af90:	f7f9 fa24 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af94:	2001      	movs	r0, #1
    af96:	e7f3      	b.n	af80 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    af98:	7a58      	ldrb	r0, [r3, #9]
    af9a:	2802      	cmp	r0, #2
    af9c:	d105      	bne.n	afaa <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    af9e:	f000 f97b 	bl	b298 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    afa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afa6:	f000 baa9 	b.w	b4fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    afaa:	bd10      	pop	{r4, pc}
    afac:	20001158 	.word	0x20001158

0000afb0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    afb0:	4902      	ldr	r1, [pc, #8]	; (afbc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    afb2:	2000      	movs	r0, #0
    afb4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    afb8:	4770      	bx	lr
    afba:	0000      	.short	0x0000
    afbc:	40008000 	.word	0x40008000

0000afc0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    afc0:	4904      	ldr	r1, [pc, #16]	; (afd4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    afc2:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    afc6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    afca:	4249      	negs	r1, r1
    afcc:	7001      	strb	r1, [r0, #0]
    afce:	2001      	movs	r0, #1
    afd0:	4770      	bx	lr
    afd2:	0000      	.short	0x0000
    afd4:	40001000 	.word	0x40001000

0000afd8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    afd8:	4903      	ldr	r1, [pc, #12]	; (afe8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    afda:	0e02      	lsrs	r2, r0, #24
    afdc:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    afe0:	0200      	lsls	r0, r0, #8
    afe2:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    afe6:	4770      	bx	lr
    afe8:	40001000 	.word	0x40001000

0000afec <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    afec:	4901      	ldr	r1, [pc, #4]	; (aff4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    afee:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    aff2:	4770      	bx	lr
    aff4:	40001000 	.word	0x40001000

0000aff8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    aff8:	b510      	push	{r4, lr}
    affa:	2200      	movs	r2, #0
    affc:	2901      	cmp	r1, #1
    affe:	d006      	beq.n	b00e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    b000:	2902      	cmp	r1, #2
    b002:	d002      	beq.n	b00a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    b004:	f240 21d9 	movw	r1, #729	; 0x2d9
    b008:	e014      	b.n	b034 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    b00a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b00e:	490b      	ldr	r1, [pc, #44]	; (b03c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    b010:	430a      	orrs	r2, r1
    b012:	490b      	ldr	r1, [pc, #44]	; (b040 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    b014:	600a      	str	r2, [r1, #0]
    b016:	490b      	ldr	r1, [pc, #44]	; (b044 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    b018:	4308      	orrs	r0, r1
    b01a:	4909      	ldr	r1, [pc, #36]	; (b040 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    b01c:	1d09      	adds	r1, r1, #4
    b01e:	6008      	str	r0, [r1, #0]
    b020:	4809      	ldr	r0, [pc, #36]	; (b048 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    b022:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    b026:	b2c0      	uxtb	r0, r0
    b028:	2803      	cmp	r0, #3
    b02a:	d001      	beq.n	b030 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    b02c:	280b      	cmp	r0, #11
    b02e:	d104      	bne.n	b03a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    b030:	f240 21f1 	movw	r1, #753	; 0x2f1
    b034:	203e      	movs	r0, #62	; 0x3e
    b036:	f7f9 f9d1 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b03a:	bd10      	pop	{r4, pc}
    b03c:	00100108 	.word	0x00100108
    b040:	40001514 	.word	0x40001514
    b044:	02030000 	.word	0x02030000
    b048:	40001000 	.word	0x40001000

0000b04c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    b04c:	4901      	ldr	r1, [pc, #4]	; (b054 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    b04e:	7588      	strb	r0, [r1, #22]
    b050:	4770      	bx	lr
    b052:	0000      	.short	0x0000
    b054:	20001158 	.word	0x20001158

0000b058 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    b058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b05c:	4852      	ldr	r0, [pc, #328]	; (b1a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b05e:	f04f 0a01 	mov.w	sl, #1
    b062:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    b066:	4850      	ldr	r0, [pc, #320]	; (b1a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b068:	300c      	adds	r0, #12
    b06a:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    b06e:	f000 fda4 	bl	bbba <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    b072:	4c4e      	ldr	r4, [pc, #312]	; (b1ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b074:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    b078:	f000 f918 	bl	b2ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    b07c:	494c      	ldr	r1, [pc, #304]	; (b1b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    b07e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b080:	6008      	str	r0, [r1, #0]
    b082:	f8df 9130 	ldr.w	r9, [pc, #304]	; b1b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b086:	2000      	movs	r0, #0
    b088:	62a0      	str	r0, [r4, #40]	; 0x28
    b08a:	f8d9 2200 	ldr.w	r2, [r9, #512]	; 0x200
    b08e:	f240 131d 	movw	r3, #285	; 0x11d
    b092:	439a      	bics	r2, r3
    b094:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    b098:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b09c:	f000 f986 	bl	b3ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    b0a0:	4605      	mov	r5, r0
    b0a2:	4841      	ldr	r0, [pc, #260]	; (b1a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b0a4:	3008      	adds	r0, #8
    b0a6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b0aa:	4e3f      	ldr	r6, [pc, #252]	; (b1a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b0ac:	61e0      	str	r0, [r4, #28]
    b0ae:	1d36      	adds	r6, r6, #4
    b0b0:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    b0b4:	61a0      	str	r0, [r4, #24]
    b0b6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    b0ba:	7d21      	ldrb	r1, [r4, #20]
    b0bc:	f884 1020 	strb.w	r1, [r4, #32]
    b0c0:	7a61      	ldrb	r1, [r4, #9]
    b0c2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b0c6:	46a0      	mov	r8, r4
    b0c8:	2400      	movs	r4, #0
    b0ca:	4639      	mov	r1, r7
    b0cc:	4628      	mov	r0, r5
    b0ce:	f000 f9e1 	bl	b494 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    b0d2:	b910      	cbnz	r0, b0da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    b0d4:	f8c9 a010 	str.w	sl, [r9, #16]
    b0d8:	2401      	movs	r4, #1
    b0da:	4f34      	ldr	r7, [pc, #208]	; (b1ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b0dc:	07e8      	lsls	r0, r5, #31
    b0de:	f1a7 0710 	sub.w	r7, r7, #16
    b0e2:	d002      	beq.n	b0ea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    b0e4:	6838      	ldr	r0, [r7, #0]
    b0e6:	4780      	blx	r0
    b0e8:	e032      	b.n	b150 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    b0ea:	07a8      	lsls	r0, r5, #30
    b0ec:	d527      	bpl.n	b13e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    b0ee:	0768      	lsls	r0, r5, #29
    b0f0:	d41f      	bmi.n	b132 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b0f2:	f000 feac 	bl	be4e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b0f6:	b9e0      	cbnz	r0, b132 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b0f8:	f000 fe99 	bl	be2e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b0fc:	b9c8      	cbnz	r0, b132 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b0fe:	482e      	ldr	r0, [pc, #184]	; (b1b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    b100:	6800      	ldr	r0, [r0, #0]
    b102:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    b106:	f3c0 5142 	ubfx	r1, r0, #21, #3
    b10a:	f000 030f 	and.w	r3, r0, #15
    b10e:	f3c0 1203 	ubfx	r2, r0, #4, #4
    b112:	f3c0 2003 	ubfx	r0, r0, #8, #4
    b116:	f1bc 0f00 	cmp.w	ip, #0
    b11a:	d00a      	beq.n	b132 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b11c:	b10b      	cbz	r3, b122 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    b11e:	b102      	cbz	r2, b122 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    b120:	b938      	cbnz	r0, b132 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b122:	4825      	ldr	r0, [pc, #148]	; (b1b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    b124:	1d00      	adds	r0, r0, #4
    b126:	6800      	ldr	r0, [r0, #0]
    b128:	b118      	cbz	r0, b132 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b12a:	2903      	cmp	r1, #3
    b12c:	d201      	bcs.n	b132 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b12e:	f045 0504 	orr.w	r5, r5, #4
    b132:	f345 0080 	sbfx	r0, r5, #2, #1
    b136:	4621      	mov	r1, r4
    b138:	1c40      	adds	r0, r0, #1
    b13a:	687a      	ldr	r2, [r7, #4]
    b13c:	e007      	b.n	b14e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    b13e:	f015 0f28 	tst.w	r5, #40	; 0x28
    b142:	d005      	beq.n	b150 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    b144:	f345 1140 	sbfx	r1, r5, #5, #1
    b148:	68ba      	ldr	r2, [r7, #8]
    b14a:	4620      	mov	r0, r4
    b14c:	1c49      	adds	r1, r1, #1
    b14e:	4790      	blx	r2
    b150:	06e8      	lsls	r0, r5, #27
    b152:	d501      	bpl.n	b158 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    b154:	68f8      	ldr	r0, [r7, #12]
    b156:	4780      	blx	r0
    b158:	f898 1009 	ldrb.w	r1, [r8, #9]
    b15c:	4640      	mov	r0, r8
    b15e:	2902      	cmp	r1, #2
    b160:	d120      	bne.n	b1a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    b162:	7b01      	ldrb	r1, [r0, #12]
    b164:	2900      	cmp	r1, #0
    b166:	d01d      	beq.n	b1a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    b168:	2902      	cmp	r1, #2
    b16a:	d004      	beq.n	b176 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11e>
    b16c:	2901      	cmp	r1, #1
    b16e:	d009      	beq.n	b184 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12c>
    b170:	f640 4148 	movw	r1, #3144	; 0xc48
    b174:	e00d      	b.n	b192 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    b176:	69c1      	ldr	r1, [r0, #28]
    b178:	f8d8 0010 	ldr.w	r0, [r8, #16]
    b17c:	4408      	add	r0, r1
    b17e:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    b182:	e00b      	b.n	b19c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    b184:	6901      	ldr	r1, [r0, #16]
    b186:	f8d8 001c 	ldr.w	r0, [r8, #28]
    b18a:	4281      	cmp	r1, r0
    b18c:	d804      	bhi.n	b198 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    b18e:	f640 4149 	movw	r1, #3145	; 0xc49
    b192:	203e      	movs	r0, #62	; 0x3e
    b194:	f7f9 f922 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b198:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    b19c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b1a0:	f000 b9b6 	b.w	b510 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b1a8:	40008000 	.word	0x40008000
    b1ac:	20001158 	.word	0x20001158
    b1b0:	4001f508 	.word	0x4001f508
    b1b4:	40001000 	.word	0x40001000
    b1b8:	40001450 	.word	0x40001450

0000b1bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    b1bc:	b570      	push	{r4, r5, r6, lr}
    b1be:	4b16      	ldr	r3, [pc, #88]	; (b218 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    b1c0:	888c      	ldrh	r4, [r1, #4]
    b1c2:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    b1c6:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    b1ca:	780c      	ldrb	r4, [r1, #0]
    b1cc:	f8d1 1001 	ldr.w	r1, [r1, #1]
    b1d0:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    b1d4:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    b1d8:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    b1dc:	2401      	movs	r4, #1
    b1de:	4084      	lsls	r4, r0
    b1e0:	b2c9      	uxtb	r1, r1
    b1e2:	b2e5      	uxtb	r5, r4
    b1e4:	4329      	orrs	r1, r5
    b1e6:	b132      	cbz	r2, b1f6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    b1e8:	2a01      	cmp	r2, #1
    b1ea:	d00a      	beq.n	b202 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    b1ec:	f240 51d4 	movw	r1, #1492	; 0x5d4
    b1f0:	203e      	movs	r0, #62	; 0x3e
    b1f2:	f7f9 f8f3 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1f6:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    b1fa:	f3c0 2007 	ubfx	r0, r0, #8, #8
    b1fe:	43a0      	bics	r0, r4
    b200:	e004      	b.n	b20c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b202:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    b206:	f3c0 2007 	ubfx	r0, r0, #8, #8
    b20a:	4328      	orrs	r0, r5
    b20c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b210:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    b214:	bd70      	pop	{r4, r5, r6, pc}
    b216:	0000      	.short	0x0000
    b218:	40001000 	.word	0x40001000

0000b21c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    b21c:	4901      	ldr	r1, [pc, #4]	; (b224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    b21e:	2001      	movs	r0, #1
    b220:	7008      	strb	r0, [r1, #0]
    b222:	4770      	bx	lr
    b224:	2000031c 	.word	0x2000031c
    b228:	480b      	ldr	r0, [pc, #44]	; (b258 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    b22a:	7d81      	ldrb	r1, [r0, #22]
    b22c:	480b      	ldr	r0, [pc, #44]	; (b25c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    b22e:	5c40      	ldrb	r0, [r0, r1]
    b230:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    b234:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    b238:	d204      	bcs.n	b244 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    b23a:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    b23e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    b242:	e001      	b.n	b248 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    b244:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    b248:	4a05      	ldr	r2, [pc, #20]	; (b260 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    b24a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    b24e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    b252:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    b256:	4770      	bx	lr
    b258:	20001158 	.word	0x20001158
    b25c:	0000b6c2 	.word	0x0000b6c2
    b260:	40001000 	.word	0x40001000
    b264:	b508      	push	{r3, lr}
    b266:	490b      	ldr	r1, [pc, #44]	; (b294 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    b268:	466b      	mov	r3, sp
    b26a:	f991 2015 	ldrsb.w	r2, [r1, #21]
    b26e:	7d89      	ldrb	r1, [r1, #22]
    b270:	f000 faca 	bl	b808 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    b274:	f99d 0000 	ldrsb.w	r0, [sp]
    b278:	f000 fa9a 	bl	b7b0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b27c:	f10d 0001 	add.w	r0, sp, #1
    b280:	f7f8 ff82 	bl	4188 <mpsl_fem_pa_gain_set>
    b284:	2800      	cmp	r0, #0
    b286:	d004      	beq.n	b292 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    b288:	f240 6115 	movw	r1, #1557	; 0x615
    b28c:	203e      	movs	r0, #62	; 0x3e
    b28e:	f7f9 f8a5 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b292:	bd08      	pop	{r3, pc}
    b294:	20001158 	.word	0x20001158
    b298:	4803      	ldr	r0, [pc, #12]	; (b2a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    b29a:	7a01      	ldrb	r1, [r0, #8]
    b29c:	2901      	cmp	r1, #1
    b29e:	d102      	bne.n	b2a6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    b2a0:	7a80      	ldrb	r0, [r0, #10]
    b2a2:	f7ff bfdf 	b.w	b264 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    b2a6:	4770      	bx	lr
    b2a8:	20001158 	.word	0x20001158
    b2ac:	480d      	ldr	r0, [pc, #52]	; (b2e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    b2ae:	b510      	push	{r4, lr}
    b2b0:	7a40      	ldrb	r0, [r0, #9]
    b2b2:	2801      	cmp	r0, #1
    b2b4:	d00c      	beq.n	b2d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    b2b6:	2802      	cmp	r0, #2
    b2b8:	d113      	bne.n	b2e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b2ba:	f7f8 ff47 	bl	414c <mpsl_fem_lna_configuration_clear>
    b2be:	2800      	cmp	r0, #0
    b2c0:	d00f      	beq.n	b2e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b2c2:	1c40      	adds	r0, r0, #1
    b2c4:	d00d      	beq.n	b2e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b2c6:	f640 01a6 	movw	r1, #2214	; 0x8a6
    b2ca:	203e      	movs	r0, #62	; 0x3e
    b2cc:	f7f9 f886 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2d0:	f7f8 ff4e 	bl	4170 <mpsl_fem_pa_configuration_clear>
    b2d4:	2800      	cmp	r0, #0
    b2d6:	d004      	beq.n	b2e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b2d8:	1c40      	adds	r0, r0, #1
    b2da:	d002      	beq.n	b2e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b2dc:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    b2e0:	e7f3      	b.n	b2ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    b2e2:	bd10      	pop	{r4, pc}
    b2e4:	20001158 	.word	0x20001158
    b2e8:	4808      	ldr	r0, [pc, #32]	; (b30c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    b2ea:	2100      	movs	r1, #0
    b2ec:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b2f0:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b2f4:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b2f8:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b2fc:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b300:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b304:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b308:	4770      	bx	lr
    b30a:	0000      	.short	0x0000
    b30c:	40001000 	.word	0x40001000
    b310:	4818      	ldr	r0, [pc, #96]	; (b374 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    b312:	b510      	push	{r4, lr}
    b314:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b318:	07c1      	lsls	r1, r0, #31
    b31a:	d029      	beq.n	b370 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b31c:	0781      	lsls	r1, r0, #30
    b31e:	d514      	bpl.n	b34a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    b320:	4815      	ldr	r0, [pc, #84]	; (b378 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    b322:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b326:	f041 0101 	orr.w	r1, r1, #1
    b32a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b32e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    b332:	b2c0      	uxtb	r0, r0
    b334:	280b      	cmp	r0, #11
    b336:	d005      	beq.n	b344 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    b338:	280a      	cmp	r0, #10
    b33a:	d003      	beq.n	b344 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    b33c:	2803      	cmp	r0, #3
    b33e:	d001      	beq.n	b344 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    b340:	2802      	cmp	r0, #2
    b342:	d115      	bne.n	b370 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b344:	f240 613e 	movw	r1, #1598	; 0x63e
    b348:	e00f      	b.n	b36a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    b34a:	0740      	lsls	r0, r0, #29
    b34c:	d510      	bpl.n	b370 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b34e:	480a      	ldr	r0, [pc, #40]	; (b378 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    b350:	490a      	ldr	r1, [pc, #40]	; (b37c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    b352:	3008      	adds	r0, #8
    b354:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b358:	f44f 71a0 	mov.w	r1, #320	; 0x140
    b35c:	4808      	ldr	r0, [pc, #32]	; (b380 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    b35e:	f004 fea5 	bl	100ac <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    b362:	2800      	cmp	r0, #0
    b364:	d004      	beq.n	b370 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b366:	f240 6146 	movw	r1, #1606	; 0x646
    b36a:	203e      	movs	r0, #62	; 0x3e
    b36c:	f7f9 f836 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b370:	bd10      	pop	{r4, pc}
    b372:	0000      	.short	0x0000
    b374:	20001158 	.word	0x20001158
    b378:	40001000 	.word	0x40001000
    b37c:	4001f098 	.word	0x4001f098
    b380:	40008000 	.word	0x40008000
    b384:	4808      	ldr	r0, [pc, #32]	; (b3a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    b386:	4601      	mov	r1, r0
    b388:	79c2      	ldrb	r2, [r0, #7]
    b38a:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    b38e:	b112      	cbz	r2, b396 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    b390:	2a01      	cmp	r2, #1
    b392:	d003      	beq.n	b39c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    b394:	e006      	b.n	b3a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    b396:	f041 0102 	orr.w	r1, r1, #2
    b39a:	e001      	b.n	b3a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    b39c:	f041 0104 	orr.w	r1, r1, #4
    b3a0:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    b3a4:	f7ff bfb4 	b.w	b310 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b3a8:	20001158 	.word	0x20001158
    b3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3b0:	4d34      	ldr	r5, [pc, #208]	; (b484 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    b3b2:	2400      	movs	r4, #0
    b3b4:	7b28      	ldrb	r0, [r5, #12]
    b3b6:	b138      	cbz	r0, b3c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    b3b8:	f44f 71a2 	mov.w	r1, #324	; 0x144
    b3bc:	4832      	ldr	r0, [pc, #200]	; (b488 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    b3be:	f004 fe75 	bl	100ac <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    b3c2:	b108      	cbz	r0, b3c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    b3c4:	2601      	movs	r6, #1
    b3c6:	e000      	b.n	b3ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    b3c8:	2600      	movs	r6, #0
    b3ca:	7a68      	ldrb	r0, [r5, #9]
    b3cc:	4f2f      	ldr	r7, [pc, #188]	; (b48c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    b3ce:	f44f 7186 	mov.w	r1, #268	; 0x10c
    b3d2:	2801      	cmp	r0, #1
    b3d4:	d002      	beq.n	b3dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    b3d6:	2802      	cmp	r0, #2
    b3d8:	d006      	beq.n	b3e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    b3da:	e016      	b.n	b40a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    b3dc:	4638      	mov	r0, r7
    b3de:	f004 fe60 	bl	100a2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b3e2:	b190      	cbz	r0, b40a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    b3e4:	2408      	movs	r4, #8
    b3e6:	e010      	b.n	b40a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    b3e8:	4638      	mov	r0, r7
    b3ea:	f004 fe5a 	bl	100a2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b3ee:	b100      	cbz	r0, b3f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    b3f0:	2402      	movs	r4, #2
    b3f2:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    b3f6:	43c0      	mvns	r0, r0
    b3f8:	f340 0000 	sbfx	r0, r0, #0, #1
    b3fc:	1c40      	adds	r0, r0, #1
    b3fe:	d101      	bne.n	b404 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    b400:	f044 0404 	orr.w	r4, r4, #4
    b404:	b10e      	cbz	r6, b40a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    b406:	f044 0401 	orr.w	r4, r4, #1
    b40a:	f014 0f0b 	tst.w	r4, #11
    b40e:	d107      	bne.n	b420 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    b410:	f44f 7188 	mov.w	r1, #272	; 0x110
    b414:	4638      	mov	r0, r7
    b416:	f004 fe44 	bl	100a2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b41a:	b108      	cbz	r0, b420 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    b41c:	f044 0410 	orr.w	r4, r4, #16
    b420:	481b      	ldr	r0, [pc, #108]	; (b490 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    b422:	7800      	ldrb	r0, [r0, #0]
    b424:	b1f8      	cbz	r0, b466 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    b426:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    b42a:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    b42e:	d007      	beq.n	b440 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    b430:	f44f 718a 	mov.w	r1, #276	; 0x114
    b434:	4638      	mov	r0, r7
    b436:	f004 fe34 	bl	100a2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b43a:	b108      	cbz	r0, b440 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    b43c:	2001      	movs	r0, #1
    b43e:	e000      	b.n	b442 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    b440:	2000      	movs	r0, #0
    b442:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    b446:	b13e      	cbz	r6, b458 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    b448:	f44f 718c 	mov.w	r1, #280	; 0x118
    b44c:	4638      	mov	r0, r7
    b44e:	f004 fe28 	bl	100a2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b452:	b108      	cbz	r0, b458 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    b454:	2001      	movs	r0, #1
    b456:	e000      	b.n	b45a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    b458:	2000      	movs	r0, #0
    b45a:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    b45e:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    b462:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    b466:	f7ff ff3f 	bl	b2e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    b46a:	06e0      	lsls	r0, r4, #27
    b46c:	d506      	bpl.n	b47c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    b46e:	0720      	lsls	r0, r4, #28
    b470:	d404      	bmi.n	b47c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    b472:	7a68      	ldrb	r0, [r5, #9]
    b474:	2801      	cmp	r0, #1
    b476:	d101      	bne.n	b47c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    b478:	f044 0420 	orr.w	r4, r4, #32
    b47c:	4620      	mov	r0, r4
    b47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b482:	0000      	.short	0x0000
    b484:	20001158 	.word	0x20001158
    b488:	40008000 	.word	0x40008000
    b48c:	40001000 	.word	0x40001000
    b490:	2000031c 	.word	0x2000031c
    b494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b498:	4c17      	ldr	r4, [pc, #92]	; (b4f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>)
    b49a:	460d      	mov	r5, r1
    b49c:	7a21      	ldrb	r1, [r4, #8]
    b49e:	b129      	cbz	r1, b4ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    b4a0:	f010 0f11 	tst.w	r0, #17
    b4a4:	d007      	beq.n	b4b6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    b4a6:	f7ff fa81 	bl	a9ac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b4aa:	e023      	b.n	b4f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    b4ac:	f000 f88a 	bl	b5c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    b4b0:	2000      	movs	r0, #0
    b4b2:	7320      	strb	r0, [r4, #12]
    b4b4:	e01e      	b.n	b4f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    b4b6:	2901      	cmp	r1, #1
    b4b8:	d001      	beq.n	b4be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    b4ba:	2601      	movs	r6, #1
    b4bc:	e000      	b.n	b4c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    b4be:	2600      	movs	r6, #0
    b4c0:	79e0      	ldrb	r0, [r4, #7]
    b4c2:	2801      	cmp	r0, #1
    b4c4:	d00e      	beq.n	b4e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    b4c6:	2700      	movs	r7, #0
    b4c8:	f000 f87c 	bl	b5c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    b4cc:	2196      	movs	r1, #150	; 0x96
    b4ce:	4630      	mov	r0, r6
    b4d0:	f000 f88e 	bl	b5f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d4>
    b4d4:	4601      	mov	r1, r0
    b4d6:	b14f      	cbz	r7, b4ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    b4d8:	353b      	adds	r5, #59	; 0x3b
    b4da:	428d      	cmp	r5, r1
    b4dc:	d904      	bls.n	b4e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    b4de:	2000      	movs	r0, #0
    b4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b4e4:	2701      	movs	r7, #1
    b4e6:	e7ef      	b.n	b4c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    b4e8:	2001      	movs	r0, #1
    b4ea:	71e0      	strb	r0, [r4, #7]
    b4ec:	7aa2      	ldrb	r2, [r4, #10]
    b4ee:	4630      	mov	r0, r6
    b4f0:	f7ff fcde 	bl	aeb0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    b4f4:	2001      	movs	r0, #1
    b4f6:	e7f3      	b.n	b4e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    b4f8:	20001158 	.word	0x20001158
    b4fc:	4803      	ldr	r0, [pc, #12]	; (b50c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    b4fe:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b502:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b506:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b50a:	4770      	bx	lr
    b50c:	40001000 	.word	0x40001000
    b510:	4804      	ldr	r0, [pc, #16]	; (b524 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    b512:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b514:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b518:	6281      	str	r1, [r0, #40]	; 0x28
    b51a:	4903      	ldr	r1, [pc, #12]	; (b528 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    b51c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b520:	6008      	str	r0, [r1, #0]
    b522:	4770      	bx	lr
    b524:	20001158 	.word	0x20001158
    b528:	4001f504 	.word	0x4001f504
    b52c:	4a07      	ldr	r2, [pc, #28]	; (b54c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    b52e:	2000      	movs	r0, #0
    b530:	3208      	adds	r2, #8
    b532:	4906      	ldr	r1, [pc, #24]	; (b54c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    b534:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b538:	1d0a      	adds	r2, r1, #4
    b53a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b53e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b542:	4902      	ldr	r1, [pc, #8]	; (b54c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    b544:	310c      	adds	r1, #12
    b546:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b54a:	4770      	bx	lr
    b54c:	40008000 	.word	0x40008000
    b550:	4903      	ldr	r1, [pc, #12]	; (b560 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x344>)
    b552:	79c9      	ldrb	r1, [r1, #7]
    b554:	2900      	cmp	r1, #0
    b556:	d102      	bne.n	b55e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    b558:	4902      	ldr	r1, [pc, #8]	; (b564 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x348>)
    b55a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b55e:	4770      	bx	lr
    b560:	20001158 	.word	0x20001158
    b564:	4001f098 	.word	0x4001f098
    b568:	b510      	push	{r4, lr}
    b56a:	4a14      	ldr	r2, [pc, #80]	; (b5bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    b56c:	b120      	cbz	r0, b578 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    b56e:	2801      	cmp	r0, #1
    b570:	d011      	beq.n	b596 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37a>
    b572:	f44f 61ec 	mov.w	r1, #1888	; 0x760
    b576:	e01c      	b.n	b5b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    b578:	f101 0028 	add.w	r0, r1, #40	; 0x28
    b57c:	e9c2 1002 	strd	r1, r0, [r2, #8]
    b580:	490f      	ldr	r1, [pc, #60]	; (b5c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    b582:	480e      	ldr	r0, [pc, #56]	; (b5bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    b584:	f7f8 fdfa 	bl	417c <mpsl_fem_pa_configuration_set>
    b588:	2800      	cmp	r0, #0
    b58a:	d015      	beq.n	b5b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    b58c:	1c40      	adds	r0, r0, #1
    b58e:	d013      	beq.n	b5b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    b590:	f240 714f 	movw	r1, #1871	; 0x74f
    b594:	e00d      	b.n	b5b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    b596:	f101 0029 	add.w	r0, r1, #41	; 0x29
    b59a:	e9c2 1002 	strd	r1, r0, [r2, #8]
    b59e:	4908      	ldr	r1, [pc, #32]	; (b5c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    b5a0:	4806      	ldr	r0, [pc, #24]	; (b5bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    b5a2:	f7f8 fdd9 	bl	4158 <mpsl_fem_lna_configuration_set>
    b5a6:	2800      	cmp	r0, #0
    b5a8:	d006      	beq.n	b5b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    b5aa:	1c40      	adds	r0, r0, #1
    b5ac:	d004      	beq.n	b5b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    b5ae:	f240 715c 	movw	r1, #1884	; 0x75c
    b5b2:	203e      	movs	r0, #62	; 0x3e
    b5b4:	f7f8 ff12 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5b8:	bd10      	pop	{r4, pc}
    b5ba:	0000      	.short	0x0000
    b5bc:	20000324 	.word	0x20000324
    b5c0:	0000b6ec 	.word	0x0000b6ec
    b5c4:	4802      	ldr	r0, [pc, #8]	; (b5d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    b5c6:	2100      	movs	r1, #0
    b5c8:	71c1      	strb	r1, [r0, #7]
    b5ca:	7201      	strb	r1, [r0, #8]
    b5cc:	7241      	strb	r1, [r0, #9]
    b5ce:	4770      	bx	lr
    b5d0:	20001158 	.word	0x20001158
    b5d4:	4a05      	ldr	r2, [pc, #20]	; (b5ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d0>)
    b5d6:	79d2      	ldrb	r2, [r2, #7]
    b5d8:	2a01      	cmp	r2, #1
    b5da:	d006      	beq.n	b5ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ce>
    b5dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b5e0:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b5e4:	fbb1 f1f2 	udiv	r1, r1, r2
    b5e8:	1a40      	subs	r0, r0, r1
    b5ea:	4770      	bx	lr
    b5ec:	20001158 	.word	0x20001158
    b5f0:	b570      	push	{r4, r5, r6, lr}
    b5f2:	4c13      	ldr	r4, [pc, #76]	; (b640 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x424>)
    b5f4:	4603      	mov	r3, r0
    b5f6:	460d      	mov	r5, r1
    b5f8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    b5fc:	2000      	movs	r0, #0
    b5fe:	b15a      	cbz	r2, b618 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fc>
    b600:	4621      	mov	r1, r4
    b602:	f891 1020 	ldrb.w	r1, [r1, #32]
    b606:	b163      	cbz	r3, b622 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    b608:	2b01      	cmp	r3, #1
    b60a:	d111      	bne.n	b630 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>
    b60c:	2a01      	cmp	r2, #1
    b60e:	4628      	mov	r0, r5
    b610:	d012      	beq.n	b638 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    b612:	f004 fd50 	bl	100b6 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    b616:	e009      	b.n	b62c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    b618:	f640 0153 	movw	r1, #2131	; 0x853
    b61c:	203e      	movs	r0, #62	; 0x3e
    b61e:	f7f8 fedd 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b622:	2a01      	cmp	r2, #1
    b624:	4628      	mov	r0, r5
    b626:	d004      	beq.n	b632 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x416>
    b628:	f004 fd53 	bl	100d2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    b62c:	69e1      	ldr	r1, [r4, #28]
    b62e:	4408      	add	r0, r1
    b630:	bd70      	pop	{r4, r5, r6, pc}
    b632:	f000 f8d1 	bl	b7d8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    b636:	e7f9      	b.n	b62c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    b638:	f000 f8c0 	bl	b7bc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    b63c:	e7f6      	b.n	b62c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    b63e:	0000      	.short	0x0000
    b640:	20001158 	.word	0x20001158
    b644:	b510      	push	{r4, lr}
    b646:	f7ff fc07 	bl	ae58 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    b64a:	f7ff fded 	bl	b228 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b64e:	f7ff fe23 	bl	b298 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    b652:	f7ff ff53 	bl	b4fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    b656:	f000 fbfa 	bl	be4e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b65a:	2800      	cmp	r0, #0
    b65c:	d108      	bne.n	b670 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    b65e:	f000 fbe6 	bl	be2e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b662:	2800      	cmp	r0, #0
    b664:	d104      	bne.n	b670 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    b666:	4803      	ldr	r0, [pc, #12]	; (b674 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x458>)
    b668:	6801      	ldr	r1, [r0, #0]
    b66a:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    b66e:	6001      	str	r1, [r0, #0]
    b670:	bd10      	pop	{r4, pc}
    b672:	0000      	.short	0x0000
    b674:	40001568 	.word	0x40001568
    b678:	b510      	push	{r4, lr}
    b67a:	4604      	mov	r4, r0
    b67c:	f7ff fbec 	bl	ae58 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    b680:	f7ff fdd2 	bl	b228 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b684:	4620      	mov	r0, r4
    b686:	f7ff fded 	bl	b264 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    b68a:	f000 fbe0 	bl	be4e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b68e:	2800      	cmp	r0, #0
    b690:	d00d      	beq.n	b6ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x492>
    b692:	4a09      	ldr	r2, [pc, #36]	; (b6b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49c>)
    b694:	6811      	ldr	r1, [r2, #0]
    b696:	0650      	lsls	r0, r2, #25
    b698:	2c02      	cmp	r4, #2
    b69a:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    b69e:	d007      	beq.n	b6b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    b6a0:	f3c0 2006 	ubfx	r0, r0, #8, #7
    b6a4:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    b6a8:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b6ac:	6010      	str	r0, [r2, #0]
    b6ae:	bd10      	pop	{r4, pc}
    b6b0:	f3c0 6006 	ubfx	r0, r0, #24, #7
    b6b4:	e7f6      	b.n	b6a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    b6b6:	0000      	.short	0x0000
    b6b8:	40001588 	.word	0x40001588
    b6bc:	a62c0000 	.word	0xa62c0000
    b6c0:	0604a1e0 	.word	0x0604a1e0
    b6c4:	0e0c0a08 	.word	0x0e0c0a08
    b6c8:	16141210 	.word	0x16141210
    b6cc:	201e1c18 	.word	0x201e1c18
    b6d0:	28262422 	.word	0x28262422
    b6d4:	302e2c2a 	.word	0x302e2c2a
    b6d8:	38363432 	.word	0x38363432
    b6dc:	403e3c3a 	.word	0x403e3c3a
    b6e0:	48464442 	.word	0x48464442
    b6e4:	024e4c4a 	.word	0x024e4c4a
    b6e8:	0000501a 	.word	0x0000501a
    b6ec:	00000001 	.word	0x00000001
    b6f0:	40001110 	.word	0x40001110
	...
    b708:	00001e14 	.word	0x00001e14
    b70c:	00001130 	.word	0x00001130
    b710:	00000000 	.word	0x00000000
    b714:	00000028 	.word	0x00000028
    b718:	00000018 	.word	0x00000018
    b71c:	00000000 	.word	0x00000000
    b720:	00001e14 	.word	0x00001e14
    b724:	00001130 	.word	0x00001130
    b728:	00000000 	.word	0x00000000
    b72c:	00001770 	.word	0x00001770
    b730:	00000fa0 	.word	0x00000fa0

0000b734 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    b734:	b570      	push	{r4, r5, r6, lr}
    b736:	4605      	mov	r5, r0
    b738:	4614      	mov	r4, r2
    b73a:	4608      	mov	r0, r1
    b73c:	f7ff fbb2 	bl	aea4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    b740:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    b744:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    b748:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    b74c:	4807      	ldr	r0, [pc, #28]	; (b76c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    b74e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    b752:	4408      	add	r0, r1
    b754:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b758:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    b75c:	fbb0 f5f1 	udiv	r5, r0, r1
    b760:	4620      	mov	r0, r4
    b762:	f7ff fb73 	bl	ae4c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    b766:	4428      	add	r0, r5
    b768:	1d40      	adds	r0, r0, #5
    b76a:	bd70      	pop	{r4, r5, r6, pc}
    b76c:	0000b7fc 	.word	0x0000b7fc

0000b770 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    b770:	b570      	push	{r4, r5, r6, lr}
    b772:	4d0e      	ldr	r5, [pc, #56]	; (b7ac <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    b774:	461c      	mov	r4, r3
    b776:	3d08      	subs	r5, #8
    b778:	4b0c      	ldr	r3, [pc, #48]	; (b7ac <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    b77a:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    b77e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    b782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b786:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    b78a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    b78e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    b792:	4418      	add	r0, r3
    b794:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b798:	fbb0 f5f1 	udiv	r5, r0, r1
    b79c:	4610      	mov	r0, r2
    b79e:	f7ff fb55 	bl	ae4c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    b7a2:	4428      	add	r0, r5
    b7a4:	4420      	add	r0, r4
    b7a6:	1d40      	adds	r0, r0, #5
    b7a8:	bd70      	pop	{r4, r5, r6, pc}
    b7aa:	0000      	.short	0x0000
    b7ac:	0000b7fc 	.word	0x0000b7fc

0000b7b0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    b7b0:	4901      	ldr	r1, [pc, #4]	; (b7b8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    b7b2:	b2c0      	uxtb	r0, r0
    b7b4:	6008      	str	r0, [r1, #0]
    b7b6:	4770      	bx	lr
    b7b8:	4000150c 	.word	0x4000150c

0000b7bc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    b7bc:	4a05      	ldr	r2, [pc, #20]	; (b7d4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    b7be:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    b7c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b7c6:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    b7ca:	fbb1 f1f2 	udiv	r1, r1, r2
    b7ce:	4408      	add	r0, r1
    b7d0:	1e80      	subs	r0, r0, #2
    b7d2:	4770      	bx	lr
    b7d4:	0000b7f4 	.word	0x0000b7f4

0000b7d8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    b7d8:	4a05      	ldr	r2, [pc, #20]	; (b7f0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    b7da:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    b7de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b7e2:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    b7e6:	fbb1 f1f2 	udiv	r1, r1, r2
    b7ea:	4408      	add	r0, r1
    b7ec:	4770      	bx	lr
    b7ee:	0000      	.short	0x0000
    b7f0:	0000b7f4 	.word	0x0000b7f4
    b7f4:	05dc0000 	.word	0x05dc0000
    b7f8:	000003e8 	.word	0x000003e8
    b7fc:	00000000 	.word	0x00000000
    b800:	00001e14 	.word	0x00001e14
    b804:	00001130 	.word	0x00001130

0000b808 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    b808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b80c:	461e      	mov	r6, r3
    b80e:	4617      	mov	r7, r2
    b810:	460c      	mov	r4, r1
    b812:	4605      	mov	r5, r0
    b814:	f7f4 ffac 	bl	770 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    b818:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b8c0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    b81c:	4680      	mov	r8, r0
    b81e:	f899 0000 	ldrb.w	r0, [r9]
    b822:	42a8      	cmp	r0, r5
    b824:	d110      	bne.n	b848 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    b826:	f899 1001 	ldrb.w	r1, [r9, #1]
    b82a:	4648      	mov	r0, r9
    b82c:	42a1      	cmp	r1, r4
    b82e:	d10b      	bne.n	b848 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    b830:	f990 1002 	ldrsb.w	r1, [r0, #2]
    b834:	42b9      	cmp	r1, r7
    b836:	d107      	bne.n	b848 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    b838:	78c2      	ldrb	r2, [r0, #3]
    b83a:	4542      	cmp	r2, r8
    b83c:	d104      	bne.n	b848 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    b83e:	8881      	ldrh	r1, [r0, #4]
    b840:	8031      	strh	r1, [r6, #0]
    b842:	7980      	ldrb	r0, [r0, #6]
    b844:	70b0      	strb	r0, [r6, #2]
    b846:	e036      	b.n	b8b6 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xae>
    b848:	463a      	mov	r2, r7
    b84a:	4621      	mov	r1, r4
    b84c:	2d01      	cmp	r5, #1
    b84e:	d009      	beq.n	b864 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    b850:	2d02      	cmp	r5, #2
    b852:	d009      	beq.n	b868 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    b854:	2d04      	cmp	r5, #4
    b856:	d009      	beq.n	b86c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    b858:	2d08      	cmp	r5, #8
    b85a:	d009      	beq.n	b870 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    b85c:	f240 415a 	movw	r1, #1114	; 0x45a
    b860:	2006      	movs	r0, #6
    b862:	e00c      	b.n	b87e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    b864:	2000      	movs	r0, #0
    b866:	e004      	b.n	b872 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    b868:	2001      	movs	r0, #1
    b86a:	e002      	b.n	b872 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    b86c:	2003      	movs	r0, #3
    b86e:	e000      	b.n	b872 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    b870:	2002      	movs	r0, #2
    b872:	466b      	mov	r3, sp
    b874:	f7f4 ffcc 	bl	810 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    b878:	b118      	cbz	r0, b882 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    b87a:	213d      	movs	r1, #61	; 0x3d
    b87c:	2075      	movs	r0, #117	; 0x75
    b87e:	f7f8 fdad 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b882:	4620      	mov	r0, r4
    b884:	f7ff f88a 	bl	a99c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    b888:	4602      	mov	r2, r0
    b88a:	4631      	mov	r1, r6
    b88c:	f99d 0000 	ldrsb.w	r0, [sp]
    b890:	f7f8 fc86 	bl	41a0 <mpsl_fem_tx_power_split>
    b894:	4601      	mov	r1, r0
    b896:	f889 1007 	strb.w	r1, [r9, #7]
    b89a:	8831      	ldrh	r1, [r6, #0]
    b89c:	f8a9 1004 	strh.w	r1, [r9, #4]
    b8a0:	78b1      	ldrb	r1, [r6, #2]
    b8a2:	f889 1006 	strb.w	r1, [r9, #6]
    b8a6:	f889 5000 	strb.w	r5, [r9]
    b8aa:	f889 4001 	strb.w	r4, [r9, #1]
    b8ae:	f889 7002 	strb.w	r7, [r9, #2]
    b8b2:	f889 8003 	strb.w	r8, [r9, #3]
    b8b6:	f999 0007 	ldrsb.w	r0, [r9, #7]
    b8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b8be:	0000      	.short	0x0000
    b8c0:	2000036e 	.word	0x2000036e

0000b8c4 <__udivmoddi4>:
    b8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b8c8:	4686      	mov	lr, r0
    b8ca:	468c      	mov	ip, r1
    b8cc:	4608      	mov	r0, r1
    b8ce:	9e08      	ldr	r6, [sp, #32]
    b8d0:	4615      	mov	r5, r2
    b8d2:	4674      	mov	r4, lr
    b8d4:	4619      	mov	r1, r3
    b8d6:	2b00      	cmp	r3, #0
    b8d8:	f040 80c2 	bne.w	ba60 <__udivmoddi4+0x19c>
    b8dc:	4285      	cmp	r5, r0
    b8de:	fab2 f282 	clz	r2, r2
    b8e2:	d945      	bls.n	b970 <__udivmoddi4+0xac>
    b8e4:	b14a      	cbz	r2, b8fa <__udivmoddi4+0x36>
    b8e6:	f1c2 0320 	rsb	r3, r2, #32
    b8ea:	fa00 fc02 	lsl.w	ip, r0, r2
    b8ee:	fa2e f303 	lsr.w	r3, lr, r3
    b8f2:	4095      	lsls	r5, r2
    b8f4:	ea43 0c0c 	orr.w	ip, r3, ip
    b8f8:	4094      	lsls	r4, r2
    b8fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    b8fe:	b2a8      	uxth	r0, r5
    b900:	fbbc f8fe 	udiv	r8, ip, lr
    b904:	0c23      	lsrs	r3, r4, #16
    b906:	fb0e cc18 	mls	ip, lr, r8, ip
    b90a:	fb08 f900 	mul.w	r9, r8, r0
    b90e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    b912:	4599      	cmp	r9, r3
    b914:	d928      	bls.n	b968 <__udivmoddi4+0xa4>
    b916:	18eb      	adds	r3, r5, r3
    b918:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    b91c:	d204      	bcs.n	b928 <__udivmoddi4+0x64>
    b91e:	4599      	cmp	r9, r3
    b920:	d902      	bls.n	b928 <__udivmoddi4+0x64>
    b922:	f1a8 0702 	sub.w	r7, r8, #2
    b926:	442b      	add	r3, r5
    b928:	eba3 0309 	sub.w	r3, r3, r9
    b92c:	b2a4      	uxth	r4, r4
    b92e:	fbb3 fcfe 	udiv	ip, r3, lr
    b932:	fb0e 331c 	mls	r3, lr, ip, r3
    b936:	fb0c f000 	mul.w	r0, ip, r0
    b93a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    b93e:	42a0      	cmp	r0, r4
    b940:	d914      	bls.n	b96c <__udivmoddi4+0xa8>
    b942:	192c      	adds	r4, r5, r4
    b944:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    b948:	d204      	bcs.n	b954 <__udivmoddi4+0x90>
    b94a:	42a0      	cmp	r0, r4
    b94c:	d902      	bls.n	b954 <__udivmoddi4+0x90>
    b94e:	f1ac 0302 	sub.w	r3, ip, #2
    b952:	442c      	add	r4, r5
    b954:	1a24      	subs	r4, r4, r0
    b956:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    b95a:	b11e      	cbz	r6, b964 <__udivmoddi4+0xa0>
    b95c:	40d4      	lsrs	r4, r2
    b95e:	2300      	movs	r3, #0
    b960:	6034      	str	r4, [r6, #0]
    b962:	6073      	str	r3, [r6, #4]
    b964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b968:	4647      	mov	r7, r8
    b96a:	e7dd      	b.n	b928 <__udivmoddi4+0x64>
    b96c:	4663      	mov	r3, ip
    b96e:	e7f1      	b.n	b954 <__udivmoddi4+0x90>
    b970:	bb92      	cbnz	r2, b9d8 <__udivmoddi4+0x114>
    b972:	1b43      	subs	r3, r0, r5
    b974:	2101      	movs	r1, #1
    b976:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    b97a:	b2af      	uxth	r7, r5
    b97c:	fbb3 fcfe 	udiv	ip, r3, lr
    b980:	0c20      	lsrs	r0, r4, #16
    b982:	fb0e 331c 	mls	r3, lr, ip, r3
    b986:	fb0c f807 	mul.w	r8, ip, r7
    b98a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    b98e:	4598      	cmp	r8, r3
    b990:	d962      	bls.n	ba58 <__udivmoddi4+0x194>
    b992:	18eb      	adds	r3, r5, r3
    b994:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    b998:	d204      	bcs.n	b9a4 <__udivmoddi4+0xe0>
    b99a:	4598      	cmp	r8, r3
    b99c:	d902      	bls.n	b9a4 <__udivmoddi4+0xe0>
    b99e:	f1ac 0002 	sub.w	r0, ip, #2
    b9a2:	442b      	add	r3, r5
    b9a4:	eba3 0308 	sub.w	r3, r3, r8
    b9a8:	b2a4      	uxth	r4, r4
    b9aa:	fbb3 fcfe 	udiv	ip, r3, lr
    b9ae:	fb0e 331c 	mls	r3, lr, ip, r3
    b9b2:	fb0c f707 	mul.w	r7, ip, r7
    b9b6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    b9ba:	42a7      	cmp	r7, r4
    b9bc:	d94e      	bls.n	ba5c <__udivmoddi4+0x198>
    b9be:	192c      	adds	r4, r5, r4
    b9c0:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    b9c4:	d204      	bcs.n	b9d0 <__udivmoddi4+0x10c>
    b9c6:	42a7      	cmp	r7, r4
    b9c8:	d902      	bls.n	b9d0 <__udivmoddi4+0x10c>
    b9ca:	f1ac 0302 	sub.w	r3, ip, #2
    b9ce:	442c      	add	r4, r5
    b9d0:	1be4      	subs	r4, r4, r7
    b9d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    b9d6:	e7c0      	b.n	b95a <__udivmoddi4+0x96>
    b9d8:	f1c2 0320 	rsb	r3, r2, #32
    b9dc:	fa20 f103 	lsr.w	r1, r0, r3
    b9e0:	4095      	lsls	r5, r2
    b9e2:	4090      	lsls	r0, r2
    b9e4:	fa2e f303 	lsr.w	r3, lr, r3
    b9e8:	4303      	orrs	r3, r0
    b9ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    b9ee:	b2af      	uxth	r7, r5
    b9f0:	fbb1 fcfe 	udiv	ip, r1, lr
    b9f4:	fb0e 101c 	mls	r0, lr, ip, r1
    b9f8:	0c19      	lsrs	r1, r3, #16
    b9fa:	fb0c f807 	mul.w	r8, ip, r7
    b9fe:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    ba02:	4588      	cmp	r8, r1
    ba04:	fa04 f402 	lsl.w	r4, r4, r2
    ba08:	d922      	bls.n	ba50 <__udivmoddi4+0x18c>
    ba0a:	1869      	adds	r1, r5, r1
    ba0c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    ba10:	d204      	bcs.n	ba1c <__udivmoddi4+0x158>
    ba12:	4588      	cmp	r8, r1
    ba14:	d902      	bls.n	ba1c <__udivmoddi4+0x158>
    ba16:	f1ac 0002 	sub.w	r0, ip, #2
    ba1a:	4429      	add	r1, r5
    ba1c:	eba1 0108 	sub.w	r1, r1, r8
    ba20:	b29b      	uxth	r3, r3
    ba22:	fbb1 fcfe 	udiv	ip, r1, lr
    ba26:	fb0e 111c 	mls	r1, lr, ip, r1
    ba2a:	fb0c f707 	mul.w	r7, ip, r7
    ba2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    ba32:	429f      	cmp	r7, r3
    ba34:	d90e      	bls.n	ba54 <__udivmoddi4+0x190>
    ba36:	18eb      	adds	r3, r5, r3
    ba38:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    ba3c:	d204      	bcs.n	ba48 <__udivmoddi4+0x184>
    ba3e:	429f      	cmp	r7, r3
    ba40:	d902      	bls.n	ba48 <__udivmoddi4+0x184>
    ba42:	f1ac 0102 	sub.w	r1, ip, #2
    ba46:	442b      	add	r3, r5
    ba48:	1bdb      	subs	r3, r3, r7
    ba4a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    ba4e:	e792      	b.n	b976 <__udivmoddi4+0xb2>
    ba50:	4660      	mov	r0, ip
    ba52:	e7e3      	b.n	ba1c <__udivmoddi4+0x158>
    ba54:	4661      	mov	r1, ip
    ba56:	e7f7      	b.n	ba48 <__udivmoddi4+0x184>
    ba58:	4660      	mov	r0, ip
    ba5a:	e7a3      	b.n	b9a4 <__udivmoddi4+0xe0>
    ba5c:	4663      	mov	r3, ip
    ba5e:	e7b7      	b.n	b9d0 <__udivmoddi4+0x10c>
    ba60:	4283      	cmp	r3, r0
    ba62:	d906      	bls.n	ba72 <__udivmoddi4+0x1ae>
    ba64:	b916      	cbnz	r6, ba6c <__udivmoddi4+0x1a8>
    ba66:	2100      	movs	r1, #0
    ba68:	4608      	mov	r0, r1
    ba6a:	e77b      	b.n	b964 <__udivmoddi4+0xa0>
    ba6c:	e9c6 e000 	strd	lr, r0, [r6]
    ba70:	e7f9      	b.n	ba66 <__udivmoddi4+0x1a2>
    ba72:	fab3 f783 	clz	r7, r3
    ba76:	b98f      	cbnz	r7, ba9c <__udivmoddi4+0x1d8>
    ba78:	4283      	cmp	r3, r0
    ba7a:	d301      	bcc.n	ba80 <__udivmoddi4+0x1bc>
    ba7c:	4572      	cmp	r2, lr
    ba7e:	d808      	bhi.n	ba92 <__udivmoddi4+0x1ce>
    ba80:	ebbe 0402 	subs.w	r4, lr, r2
    ba84:	eb60 0303 	sbc.w	r3, r0, r3
    ba88:	2001      	movs	r0, #1
    ba8a:	469c      	mov	ip, r3
    ba8c:	b91e      	cbnz	r6, ba96 <__udivmoddi4+0x1d2>
    ba8e:	2100      	movs	r1, #0
    ba90:	e768      	b.n	b964 <__udivmoddi4+0xa0>
    ba92:	4638      	mov	r0, r7
    ba94:	e7fa      	b.n	ba8c <__udivmoddi4+0x1c8>
    ba96:	e9c6 4c00 	strd	r4, ip, [r6]
    ba9a:	e7f8      	b.n	ba8e <__udivmoddi4+0x1ca>
    ba9c:	f1c7 0c20 	rsb	ip, r7, #32
    baa0:	40bb      	lsls	r3, r7
    baa2:	fa22 f40c 	lsr.w	r4, r2, ip
    baa6:	431c      	orrs	r4, r3
    baa8:	fa2e f10c 	lsr.w	r1, lr, ip
    baac:	fa20 f30c 	lsr.w	r3, r0, ip
    bab0:	40b8      	lsls	r0, r7
    bab2:	4301      	orrs	r1, r0
    bab4:	ea4f 4914 	mov.w	r9, r4, lsr #16
    bab8:	fa0e f507 	lsl.w	r5, lr, r7
    babc:	fbb3 f8f9 	udiv	r8, r3, r9
    bac0:	fa1f fe84 	uxth.w	lr, r4
    bac4:	fb09 3018 	mls	r0, r9, r8, r3
    bac8:	0c0b      	lsrs	r3, r1, #16
    baca:	fb08 fa0e 	mul.w	sl, r8, lr
    bace:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    bad2:	459a      	cmp	sl, r3
    bad4:	fa02 f207 	lsl.w	r2, r2, r7
    bad8:	d940      	bls.n	bb5c <__udivmoddi4+0x298>
    bada:	18e3      	adds	r3, r4, r3
    badc:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    bae0:	d204      	bcs.n	baec <__udivmoddi4+0x228>
    bae2:	459a      	cmp	sl, r3
    bae4:	d902      	bls.n	baec <__udivmoddi4+0x228>
    bae6:	f1a8 0002 	sub.w	r0, r8, #2
    baea:	4423      	add	r3, r4
    baec:	eba3 030a 	sub.w	r3, r3, sl
    baf0:	b289      	uxth	r1, r1
    baf2:	fbb3 f8f9 	udiv	r8, r3, r9
    baf6:	fb09 3318 	mls	r3, r9, r8, r3
    bafa:	fb08 fe0e 	mul.w	lr, r8, lr
    bafe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    bb02:	458e      	cmp	lr, r1
    bb04:	d92c      	bls.n	bb60 <__udivmoddi4+0x29c>
    bb06:	1861      	adds	r1, r4, r1
    bb08:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    bb0c:	d204      	bcs.n	bb18 <__udivmoddi4+0x254>
    bb0e:	458e      	cmp	lr, r1
    bb10:	d902      	bls.n	bb18 <__udivmoddi4+0x254>
    bb12:	f1a8 0302 	sub.w	r3, r8, #2
    bb16:	4421      	add	r1, r4
    bb18:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    bb1c:	fba0 9802 	umull	r9, r8, r0, r2
    bb20:	eba1 010e 	sub.w	r1, r1, lr
    bb24:	4541      	cmp	r1, r8
    bb26:	46ce      	mov	lr, r9
    bb28:	4643      	mov	r3, r8
    bb2a:	d302      	bcc.n	bb32 <__udivmoddi4+0x26e>
    bb2c:	d106      	bne.n	bb3c <__udivmoddi4+0x278>
    bb2e:	454d      	cmp	r5, r9
    bb30:	d204      	bcs.n	bb3c <__udivmoddi4+0x278>
    bb32:	ebb9 0e02 	subs.w	lr, r9, r2
    bb36:	eb68 0304 	sbc.w	r3, r8, r4
    bb3a:	3801      	subs	r0, #1
    bb3c:	2e00      	cmp	r6, #0
    bb3e:	d0a6      	beq.n	ba8e <__udivmoddi4+0x1ca>
    bb40:	ebb5 020e 	subs.w	r2, r5, lr
    bb44:	eb61 0103 	sbc.w	r1, r1, r3
    bb48:	fa01 fc0c 	lsl.w	ip, r1, ip
    bb4c:	fa22 f307 	lsr.w	r3, r2, r7
    bb50:	ea4c 0303 	orr.w	r3, ip, r3
    bb54:	40f9      	lsrs	r1, r7
    bb56:	e9c6 3100 	strd	r3, r1, [r6]
    bb5a:	e798      	b.n	ba8e <__udivmoddi4+0x1ca>
    bb5c:	4640      	mov	r0, r8
    bb5e:	e7c5      	b.n	baec <__udivmoddi4+0x228>
    bb60:	4643      	mov	r3, r8
    bb62:	e7d9      	b.n	bb18 <__udivmoddi4+0x254>

0000bb64 <strlen>:
    bb64:	4603      	mov	r3, r0
    bb66:	f813 2b01 	ldrb.w	r2, [r3], #1
    bb6a:	2a00      	cmp	r2, #0
    bb6c:	d1fb      	bne.n	bb66 <strlen+0x2>
    bb6e:	1a18      	subs	r0, r3, r0
    bb70:	3801      	subs	r0, #1
    bb72:	4770      	bx	lr
    bb74:	2804      	cmp	r0, #4
    bb76:	d202      	bcs.n	bb7e <strlen+0x1a>
    bb78:	f04f 0028 	mov.w	r0, #40	; 0x28
    bb7c:	4770      	bx	lr
    bb7e:	d102      	bne.n	bb86 <strlen+0x22>
    bb80:	f04f 0010 	mov.w	r0, #16
    bb84:	4770      	bx	lr
    bb86:	f04f 0000 	mov.w	r0, #0
    bb8a:	4770      	bx	lr
    bb8c:	2100      	movs	r1, #0
    bb8e:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    bb92:	f800 1f24 	strb.w	r1, [r0, #36]!
    bb96:	7041      	strb	r1, [r0, #1]
    bb98:	4770      	bx	lr

0000bb9a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    bb9a:	b570      	push	{r4, r5, r6, lr}
    bb9c:	f7f4 fe58 	bl	850 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    bba0:	4605      	mov	r5, r0
    bba2:	2400      	movs	r4, #0
    bba4:	e006      	b.n	bbb4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    bba6:	4620      	mov	r0, r4
    bba8:	f7f4 fe58 	bl	85c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bbac:	f7ff ffee 	bl	bb8c <strlen+0x28>
    bbb0:	1c64      	adds	r4, r4, #1
    bbb2:	b2e4      	uxtb	r4, r4
    bbb4:	42ac      	cmp	r4, r5
    bbb6:	d3f6      	bcc.n	bba6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    bbb8:	bd70      	pop	{r4, r5, r6, pc}

0000bbba <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    bbba:	f7f7 ba13 	b.w	2fe4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000bbbe <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    bbbe:	b510      	push	{r4, lr}
    bbc0:	2000      	movs	r0, #0
    bbc2:	f7f7 fd35 	bl	3630 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    bbc6:	6800      	ldr	r0, [r0, #0]
    bbc8:	2800      	cmp	r0, #0
    bbca:	bf18      	it	ne
    bbcc:	2001      	movne	r0, #1
    bbce:	bd10      	pop	{r4, pc}

0000bbd0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    bbd0:	b510      	push	{r4, lr}
    bbd2:	f7f7 fdad 	bl	3730 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    bbd6:	f7f7 f87f 	bl	2cd8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    bbda:	f000 f802 	bl	bbe2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    bbde:	b280      	uxth	r0, r0
    bbe0:	bd10      	pop	{r4, pc}

0000bbe2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    bbe2:	0a41      	lsrs	r1, r0, #9
    bbe4:	f643 5209 	movw	r2, #15625	; 0x3d09
    bbe8:	4351      	muls	r1, r2
    bbea:	f3c0 0008 	ubfx	r0, r0, #0, #9
    bbee:	fb10 f002 	smulbb	r0, r0, r2
    bbf2:	f500 7080 	add.w	r0, r0, #256	; 0x100
    bbf6:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    bbfa:	4770      	bx	lr
    bbfc:	2800      	cmp	r0, #0
    bbfe:	db09      	blt.n	bc14 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    bc00:	f000 021f 	and.w	r2, r0, #31
    bc04:	2101      	movs	r1, #1
    bc06:	4091      	lsls	r1, r2
    bc08:	0940      	lsrs	r0, r0, #5
    bc0a:	0080      	lsls	r0, r0, #2
    bc0c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bc10:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bc14:	4770      	bx	lr
    bc16:	2800      	cmp	r0, #0
    bc18:	db0d      	blt.n	bc36 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    bc1a:	f000 021f 	and.w	r2, r0, #31
    bc1e:	2101      	movs	r1, #1
    bc20:	4091      	lsls	r1, r2
    bc22:	0940      	lsrs	r0, r0, #5
    bc24:	0080      	lsls	r0, r0, #2
    bc26:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bc2a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    bc2e:	f3bf 8f4f 	dsb	sy
    bc32:	f3bf 8f6f 	isb	sy
    bc36:	4770      	bx	lr

0000bc38 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    bc38:	b570      	push	{r4, r5, r6, lr}
    bc3a:	4602      	mov	r2, r0
    bc3c:	2000      	movs	r0, #0
    bc3e:	2900      	cmp	r1, #0
    bc40:	d01d      	beq.n	bc7e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    bc42:	fba2 0101 	umull	r0, r1, r2, r1
    bc46:	0a40      	lsrs	r0, r0, #9
    bc48:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    bc4c:	0a49      	lsrs	r1, r1, #9
    bc4e:	1c40      	adds	r0, r0, #1
    bc50:	f141 0100 	adc.w	r1, r1, #0
    bc54:	f240 72a1 	movw	r2, #1953	; 0x7a1
    bc58:	1883      	adds	r3, r0, r2
    bc5a:	f141 0100 	adc.w	r1, r1, #0
    bc5e:	1c5b      	adds	r3, r3, #1
    bc60:	f141 0400 	adc.w	r4, r1, #0
    bc64:	2100      	movs	r1, #0
    bc66:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    bc6a:	41a1      	sbcs	r1, r4
    bc6c:	d203      	bcs.n	bc76 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    bc6e:	2172      	movs	r1, #114	; 0x72
    bc70:	206d      	movs	r0, #109	; 0x6d
    bc72:	f7f8 f8d5 	bl	3e20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc76:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    bc7a:	fbb0 f0f2 	udiv	r0, r0, r2
    bc7e:	bd70      	pop	{r4, r5, r6, pc}
    bc80:	5840      	ldr	r0, [r0, r1]
    bc82:	2800      	cmp	r0, #0
    bc84:	d000      	beq.n	bc88 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    bc86:	2001      	movs	r0, #1
    bc88:	4770      	bx	lr
    bc8a:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    bc8e:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    bc92:	f002 0201 	and.w	r2, r2, #1
    bc96:	03c0      	lsls	r0, r0, #15
    bc98:	d503      	bpl.n	bca2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bc9a:	428a      	cmp	r2, r1
    bc9c:	d101      	bne.n	bca2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bc9e:	2001      	movs	r0, #1
    bca0:	4770      	bx	lr
    bca2:	2000      	movs	r0, #0
    bca4:	4770      	bx	lr

0000bca6 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    bca6:	b510      	push	{r4, lr}
    bca8:	2101      	movs	r1, #1
    bcaa:	0788      	lsls	r0, r1, #30
    bcac:	f7f8 f862 	bl	3d74 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bcb0:	2800      	cmp	r0, #0
    bcb2:	d000      	beq.n	bcb6 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    bcb4:	2001      	movs	r0, #1
    bcb6:	bd10      	pop	{r4, pc}

0000bcb8 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    bcb8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bcbc:	2101      	movs	r1, #1
    bcbe:	6001      	str	r1, [r0, #0]
    bcc0:	4770      	bx	lr

0000bcc2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    bcc2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    bcc6:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    bcca:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    bcce:	f002 0203 	and.w	r2, r2, #3
    bcd2:	03c9      	lsls	r1, r1, #15
    bcd4:	d503      	bpl.n	bcde <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bcd6:	4282      	cmp	r2, r0
    bcd8:	d101      	bne.n	bcde <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bcda:	2001      	movs	r0, #1
    bcdc:	4770      	bx	lr
    bcde:	2000      	movs	r0, #0
    bce0:	4770      	bx	lr

0000bce2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    bce2:	b510      	push	{r4, lr}
    bce4:	2100      	movs	r1, #0
    bce6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bcea:	f7f8 f843 	bl	3d74 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bcee:	2800      	cmp	r0, #0
    bcf0:	d000      	beq.n	bcf4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    bcf2:	2001      	movs	r0, #1
    bcf4:	bd10      	pop	{r4, pc}
    bcf6:	2800      	cmp	r0, #0
    bcf8:	db09      	blt.n	bd0e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    bcfa:	f000 021f 	and.w	r2, r0, #31
    bcfe:	2101      	movs	r1, #1
    bd00:	4091      	lsls	r1, r2
    bd02:	0940      	lsrs	r0, r0, #5
    bd04:	0080      	lsls	r0, r0, #2
    bd06:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bd0a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bd0e:	4770      	bx	lr
    bd10:	2800      	cmp	r0, #0
    bd12:	db0d      	blt.n	bd30 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    bd14:	f000 021f 	and.w	r2, r0, #31
    bd18:	2101      	movs	r1, #1
    bd1a:	4091      	lsls	r1, r2
    bd1c:	0940      	lsrs	r0, r0, #5
    bd1e:	0080      	lsls	r0, r0, #2
    bd20:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bd24:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    bd28:	f3bf 8f4f 	dsb	sy
    bd2c:	f3bf 8f6f 	isb	sy
    bd30:	4770      	bx	lr
    bd32:	1000      	.short	0x1000
    bd34:	00fa0002 	.word	0x00fa0002
    bd38:	edb80000 	.word	0xedb80000
    bd3c:	0ef2aa4d 	.word	0x0ef2aa4d
    bd40:	b5ea3202 	.word	0xb5ea3202
    bd44:	d1502fde 	.word	0xd1502fde
    bd48:	d2b55ab7 	.word	0xd2b55ab7
    bd4c:	41c7      	.short	0x41c7
    bd4e:	2800      	cmp	r0, #0
    bd50:	db09      	blt.n	bd66 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    bd52:	f000 021f 	and.w	r2, r0, #31
    bd56:	2101      	movs	r1, #1
    bd58:	4091      	lsls	r1, r2
    bd5a:	0940      	lsrs	r0, r0, #5
    bd5c:	0080      	lsls	r0, r0, #2
    bd5e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bd62:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bd66:	4770      	bx	lr

0000bd68 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    bd68:	f3ef 8110 	mrs	r1, PRIMASK
    bd6c:	b672      	cpsid	i
    bd6e:	7802      	ldrb	r2, [r0, #0]
    bd70:	2a01      	cmp	r2, #1
    bd72:	d001      	beq.n	bd78 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    bd74:	2201      	movs	r2, #1
    bd76:	e000      	b.n	bd7a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    bd78:	2200      	movs	r2, #0
    bd7a:	2301      	movs	r3, #1
    bd7c:	7003      	strb	r3, [r0, #0]
    bd7e:	b901      	cbnz	r1, bd82 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    bd80:	b662      	cpsie	i
    bd82:	b10a      	cbz	r2, bd88 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    bd84:	2000      	movs	r0, #0
    bd86:	4770      	bx	lr
    bd88:	f06f 0022 	mvn.w	r0, #34	; 0x22
    bd8c:	4770      	bx	lr

0000bd8e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    bd8e:	2100      	movs	r1, #0
    bd90:	7001      	strb	r1, [r0, #0]
    bd92:	4608      	mov	r0, r1
    bd94:	4770      	bx	lr

0000bd96 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    bd96:	f3ef 8110 	mrs	r1, PRIMASK
    bd9a:	b672      	cpsid	i
    bd9c:	2200      	movs	r2, #0
    bd9e:	7002      	strb	r2, [r0, #0]
    bda0:	b901      	cbnz	r1, bda4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    bda2:	b662      	cpsie	i
    bda4:	2000      	movs	r0, #0
    bda6:	4770      	bx	lr

0000bda8 <mpsl_low_priority_process>:
    bda8:	f7f8 b93a 	b.w	4020 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000bdac <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    bdac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bdb0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bdb4:	280f      	cmp	r0, #15
    bdb6:	d001      	beq.n	bdbc <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    bdb8:	2000      	movs	r0, #0
    bdba:	4770      	bx	lr
    bdbc:	2001      	movs	r0, #1
    bdbe:	4770      	bx	lr

0000bdc0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    bdc0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bdc4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bdc8:	280a      	cmp	r0, #10
    bdca:	d001      	beq.n	bdd0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    bdcc:	2000      	movs	r0, #0
    bdce:	4770      	bx	lr
    bdd0:	2001      	movs	r0, #1
    bdd2:	4770      	bx	lr

0000bdd4 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    bdd4:	b500      	push	{lr}
    bdd6:	f7ff fff3 	bl	bdc0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bdda:	b120      	cbz	r0, bde6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    bddc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bde0:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    bde4:	b108      	cbz	r0, bdea <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    bde6:	2000      	movs	r0, #0
    bde8:	bd00      	pop	{pc}
    bdea:	2001      	movs	r0, #1
    bdec:	bd00      	pop	{pc}

0000bdee <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    bdee:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bdf2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bdf6:	280e      	cmp	r0, #14
    bdf8:	d001      	beq.n	bdfe <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    bdfa:	2000      	movs	r0, #0
    bdfc:	4770      	bx	lr
    bdfe:	2001      	movs	r0, #1
    be00:	4770      	bx	lr

0000be02 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    be02:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be06:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be0a:	2810      	cmp	r0, #16
    be0c:	d001      	beq.n	be12 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    be0e:	2000      	movs	r0, #0
    be10:	4770      	bx	lr
    be12:	2001      	movs	r0, #1
    be14:	4770      	bx	lr

0000be16 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    be16:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be1a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be1e:	2806      	cmp	r0, #6
    be20:	d003      	beq.n	be2a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    be22:	1c40      	adds	r0, r0, #1
    be24:	d001      	beq.n	be2a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    be26:	2000      	movs	r0, #0
    be28:	4770      	bx	lr
    be2a:	2001      	movs	r0, #1
    be2c:	4770      	bx	lr

0000be2e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    be2e:	b500      	push	{lr}
    be30:	f7ff fff1 	bl	be16 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    be34:	b148      	cbz	r0, be4a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    be36:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be3a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    be3e:	2806      	cmp	r0, #6
    be40:	d303      	bcc.n	be4a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    be42:	1c40      	adds	r0, r0, #1
    be44:	d001      	beq.n	be4a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    be46:	2001      	movs	r0, #1
    be48:	bd00      	pop	{pc}
    be4a:	2000      	movs	r0, #0
    be4c:	bd00      	pop	{pc}

0000be4e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    be4e:	b500      	push	{lr}
    be50:	f7ff ffe1 	bl	be16 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    be54:	b138      	cbz	r0, be66 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    be56:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be5a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    be5e:	2806      	cmp	r0, #6
    be60:	d303      	bcc.n	be6a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    be62:	1c40      	adds	r0, r0, #1
    be64:	d001      	beq.n	be6a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    be66:	2000      	movs	r0, #0
    be68:	bd00      	pop	{pc}
    be6a:	2001      	movs	r0, #1
    be6c:	bd00      	pop	{pc}

0000be6e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    be6e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be72:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be76:	280d      	cmp	r0, #13
    be78:	d001      	beq.n	be7e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    be7a:	2000      	movs	r0, #0
    be7c:	4770      	bx	lr
    be7e:	2001      	movs	r0, #1
    be80:	4770      	bx	lr

0000be82 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    be82:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be86:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be8a:	2808      	cmp	r0, #8
    be8c:	d001      	beq.n	be92 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    be8e:	2000      	movs	r0, #0
    be90:	4770      	bx	lr
    be92:	2001      	movs	r0, #1
    be94:	4770      	bx	lr

0000be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    be96:	b4f0      	push	{r4, r5, r6, r7}
    be98:	ea80 0c01 	eor.w	ip, r0, r1
    be9c:	4603      	mov	r3, r0
    be9e:	f01c 0f03 	tst.w	ip, #3
    bea2:	d13c      	bne.n	bf1e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bea4:	f013 0f03 	tst.w	r3, #3
    bea8:	d00b      	beq.n	bec2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    beaa:	2a00      	cmp	r2, #0
    beac:	bf04      	itt	eq
    beae:	bcf0      	popeq	{r4, r5, r6, r7}
    beb0:	4770      	bxeq	lr
    beb2:	f811 cb01 	ldrb.w	ip, [r1], #1
    beb6:	f803 cb01 	strb.w	ip, [r3], #1
    beba:	1e52      	subs	r2, r2, #1
    bebc:	f013 0f03 	tst.w	r3, #3
    bec0:	d1f3      	bne.n	beaa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    bec2:	2a03      	cmp	r2, #3
    bec4:	d94f      	bls.n	bf66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    bec6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    beca:	d24c      	bcs.n	bf66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    becc:	f1c2 0c00 	rsb	ip, r2, #0
    bed0:	ea4f 74ec 	mov.w	r4, ip, asr #31
    bed4:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    bed8:	ea4f 0cac 	mov.w	ip, ip, asr #2
    bedc:	f1cc 0c00 	rsb	ip, ip, #0
    bee0:	f1bc 0f00 	cmp.w	ip, #0
    bee4:	dd1b      	ble.n	bf1e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bee6:	1f0d      	subs	r5, r1, #4
    bee8:	1f1c      	subs	r4, r3, #4
    beea:	f01c 0f01 	tst.w	ip, #1
    beee:	d003      	beq.n	bef8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    bef0:	f855 6f04 	ldr.w	r6, [r5, #4]!
    bef4:	f844 6f04 	str.w	r6, [r4, #4]!
    bef8:	ea5f 066c 	movs.w	r6, ip, asr #1
    befc:	d007      	beq.n	bf0e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    befe:	686f      	ldr	r7, [r5, #4]
    bf00:	6067      	str	r7, [r4, #4]
    bf02:	f855 7f08 	ldr.w	r7, [r5, #8]!
    bf06:	f844 7f08 	str.w	r7, [r4, #8]!
    bf0a:	1e76      	subs	r6, r6, #1
    bf0c:	d1f7      	bne.n	befe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    bf0e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    bf12:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    bf16:	f1cc 0c00 	rsb	ip, ip, #0
    bf1a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    bf1e:	2a00      	cmp	r2, #0
    bf20:	bf04      	itt	eq
    bf22:	bcf0      	popeq	{r4, r5, r6, r7}
    bf24:	4770      	bxeq	lr
    bf26:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bf2a:	d226      	bcs.n	bf7a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    bf2c:	2a00      	cmp	r2, #0
    bf2e:	bfdc      	itt	le
    bf30:	bcf0      	pople	{r4, r5, r6, r7}
    bf32:	4770      	bxle	lr
    bf34:	1e49      	subs	r1, r1, #1
    bf36:	1e5b      	subs	r3, r3, #1
    bf38:	f012 0f01 	tst.w	r2, #1
    bf3c:	d003      	beq.n	bf46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    bf3e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    bf42:	f803 cf01 	strb.w	ip, [r3, #1]!
    bf46:	1052      	asrs	r2, r2, #1
    bf48:	bf04      	itt	eq
    bf4a:	bcf0      	popeq	{r4, r5, r6, r7}
    bf4c:	4770      	bxeq	lr
    bf4e:	f891 c001 	ldrb.w	ip, [r1, #1]
    bf52:	f883 c001 	strb.w	ip, [r3, #1]
    bf56:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    bf5a:	f803 cf02 	strb.w	ip, [r3, #2]!
    bf5e:	1e52      	subs	r2, r2, #1
    bf60:	d1f5      	bne.n	bf4e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    bf62:	bcf0      	pop	{r4, r5, r6, r7}
    bf64:	4770      	bx	lr
    bf66:	2a04      	cmp	r2, #4
    bf68:	d3d9      	bcc.n	bf1e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bf6a:	f851 cb04 	ldr.w	ip, [r1], #4
    bf6e:	1f12      	subs	r2, r2, #4
    bf70:	f843 cb04 	str.w	ip, [r3], #4
    bf74:	2a04      	cmp	r2, #4
    bf76:	d2f8      	bcs.n	bf6a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    bf78:	e7d1      	b.n	bf1e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bf7a:	f811 cb01 	ldrb.w	ip, [r1], #1
    bf7e:	f803 cb01 	strb.w	ip, [r3], #1
    bf82:	1e52      	subs	r2, r2, #1
    bf84:	d1f9      	bne.n	bf7a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    bf86:	bcf0      	pop	{r4, r5, r6, r7}
    bf88:	4770      	bx	lr

0000bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    bf8a:	b470      	push	{r4, r5, r6}
    bf8c:	4603      	mov	r3, r0
    bf8e:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    bf92:	f010 0f03 	tst.w	r0, #3
    bf96:	d009      	beq.n	bfac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    bf98:	2a00      	cmp	r2, #0
    bf9a:	bf04      	itt	eq
    bf9c:	bc70      	popeq	{r4, r5, r6}
    bf9e:	4770      	bxeq	lr
    bfa0:	f803 cb01 	strb.w	ip, [r3], #1
    bfa4:	1e52      	subs	r2, r2, #1
    bfa6:	f013 0f03 	tst.w	r3, #3
    bfaa:	d1f5      	bne.n	bf98 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    bfac:	b2c9      	uxtb	r1, r1
    bfae:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    bfb2:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    bfb6:	2a03      	cmp	r2, #3
    bfb8:	d939      	bls.n	c02e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    bfba:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bfbe:	d236      	bcs.n	c02e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    bfc0:	4251      	negs	r1, r2
    bfc2:	17cc      	asrs	r4, r1, #31
    bfc4:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    bfc8:	1089      	asrs	r1, r1, #2
    bfca:	424e      	negs	r6, r1
    bfcc:	2e00      	cmp	r6, #0
    bfce:	dd11      	ble.n	bff4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    bfd0:	1f19      	subs	r1, r3, #4
    bfd2:	f016 0f01 	tst.w	r6, #1
    bfd6:	bf18      	it	ne
    bfd8:	f841 5f04 	strne.w	r5, [r1, #4]!
    bfdc:	1074      	asrs	r4, r6, #1
    bfde:	d004      	beq.n	bfea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    bfe0:	604d      	str	r5, [r1, #4]
    bfe2:	f841 5f08 	str.w	r5, [r1, #8]!
    bfe6:	1e64      	subs	r4, r4, #1
    bfe8:	d1fa      	bne.n	bfe0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    bfea:	4271      	negs	r1, r6
    bfec:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    bff0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    bff4:	2a00      	cmp	r2, #0
    bff6:	bf04      	itt	eq
    bff8:	bc70      	popeq	{r4, r5, r6}
    bffa:	4770      	bxeq	lr
    bffc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c000:	d21d      	bcs.n	c03e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c002:	2a00      	cmp	r2, #0
    c004:	bfdc      	itt	le
    c006:	bc70      	pople	{r4, r5, r6}
    c008:	4770      	bxle	lr
    c00a:	1e59      	subs	r1, r3, #1
    c00c:	f012 0f01 	tst.w	r2, #1
    c010:	bf18      	it	ne
    c012:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c016:	1052      	asrs	r2, r2, #1
    c018:	bf04      	itt	eq
    c01a:	bc70      	popeq	{r4, r5, r6}
    c01c:	4770      	bxeq	lr
    c01e:	f881 c001 	strb.w	ip, [r1, #1]
    c022:	f801 cf02 	strb.w	ip, [r1, #2]!
    c026:	1e52      	subs	r2, r2, #1
    c028:	d1f9      	bne.n	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c02a:	bc70      	pop	{r4, r5, r6}
    c02c:	4770      	bx	lr
    c02e:	2a04      	cmp	r2, #4
    c030:	d3e0      	bcc.n	bff4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c032:	1f12      	subs	r2, r2, #4
    c034:	f843 5b04 	str.w	r5, [r3], #4
    c038:	2a04      	cmp	r2, #4
    c03a:	d2fa      	bcs.n	c032 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c03c:	e7da      	b.n	bff4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c03e:	f803 cb01 	strb.w	ip, [r3], #1
    c042:	1e52      	subs	r2, r2, #1
    c044:	d1fb      	bne.n	c03e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c046:	bc70      	pop	{r4, r5, r6}
    c048:	4770      	bx	lr
    c04a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c04e:	4770      	bx	lr
    c050:	2000      	movs	r0, #0
    c052:	4770      	bx	lr
    c054:	2000      	movs	r0, #0
    c056:	4770      	bx	lr
    c058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c05c:	4770      	bx	lr
    c05e:	4770      	bx	lr
    c060:	4770      	bx	lr
    c062:	2000      	movs	r0, #0
    c064:	4770      	bx	lr
    c066:	2100      	movs	r1, #0
    c068:	7001      	strb	r1, [r0, #0]
    c06a:	4770      	bx	lr
    c06c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c070:	4770      	bx	lr
    c072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c076:	4770      	bx	lr
    c078:	2100      	movs	r1, #0
    c07a:	7001      	strb	r1, [r0, #0]
    c07c:	4770      	bx	lr
    c07e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c082:	4770      	bx	lr
    c084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c088:	4770      	bx	lr
    c08a:	7800      	ldrb	r0, [r0, #0]
    c08c:	2800      	cmp	r0, #0
    c08e:	d001      	beq.n	c094 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    c090:	f06f 0015 	mvn.w	r0, #21
    c094:	4770      	bx	lr
    c096:	2000      	movs	r0, #0
    c098:	4770      	bx	lr
    c09a:	2200      	movs	r2, #0
    c09c:	f000 b802 	b.w	c0a4 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000c0a0 <mpsl_fem_init>:
    c0a0:	f7f4 bb6c 	b.w	77c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0000c0a4 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    c0a4:	b570      	push	{r4, r5, r6, lr}
    c0a6:	4614      	mov	r4, r2
    c0a8:	460d      	mov	r5, r1
    c0aa:	1b00      	subs	r0, r0, r4
    c0ac:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    c0b0:	4288      	cmp	r0, r1
    c0b2:	da01      	bge.n	c0b8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    c0b4:	4608      	mov	r0, r1
    c0b6:	e002      	b.n	c0be <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    c0b8:	287f      	cmp	r0, #127	; 0x7f
    c0ba:	dd00      	ble.n	c0be <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    c0bc:	207f      	movs	r0, #127	; 0x7f
    c0be:	b240      	sxtb	r0, r0
    c0c0:	f7f4 fb90 	bl	7e4 <mpsl_tx_power_radio_supported_power_adjust>
    c0c4:	7028      	strb	r0, [r5, #0]
    c0c6:	706c      	strb	r4, [r5, #1]
    c0c8:	2100      	movs	r1, #0
    c0ca:	4420      	add	r0, r4
    c0cc:	70a9      	strb	r1, [r5, #2]
    c0ce:	b240      	sxtb	r0, r0
    c0d0:	bd70      	pop	{r4, r5, r6, pc}
    c0d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0d6:	460c      	mov	r4, r1
    c0d8:	4681      	mov	r9, r0
    c0da:	7849      	ldrb	r1, [r1, #1]
    c0dc:	f100 0003 	add.w	r0, r0, #3
    c0e0:	f88d 1000 	strb.w	r1, [sp]
    c0e4:	f020 0003 	bic.w	r0, r0, #3
    c0e8:	78a1      	ldrb	r1, [r4, #2]
    c0ea:	0016      	movs	r6, r2
    c0ec:	4605      	mov	r5, r0
    c0ee:	f88d 1001 	strb.w	r1, [sp, #1]
    c0f2:	d000      	beq.n	c0f6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x52>
    c0f4:	2000      	movs	r0, #0
    c0f6:	4669      	mov	r1, sp
    c0f8:	f7f8 fb6e 	bl	47d8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c0fc:	4428      	add	r0, r5
    c0fe:	78a1      	ldrb	r1, [r4, #2]
    c100:	4605      	mov	r5, r0
    c102:	b131      	cbz	r1, c112 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    c104:	8a63      	ldrh	r3, [r4, #18]
    c106:	78e2      	ldrb	r2, [r4, #3]
    c108:	b106      	cbz	r6, c10c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x68>
    c10a:	2000      	movs	r0, #0
    c10c:	f7f8 fdcc 	bl	4ca8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c110:	4405      	add	r5, r0
    c112:	7820      	ldrb	r0, [r4, #0]
    c114:	7861      	ldrb	r1, [r4, #1]
    c116:	46b2      	mov	sl, r6
    c118:	2600      	movs	r6, #0
    c11a:	4408      	add	r0, r1
    c11c:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c120:	4637      	mov	r7, r6
    c122:	e008      	b.n	c136 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x92>
    c124:	7a23      	ldrb	r3, [r4, #8]
    c126:	79e2      	ldrb	r2, [r4, #7]
    c128:	79a1      	ldrb	r1, [r4, #6]
    c12a:	7960      	ldrb	r0, [r4, #5]
    c12c:	f000 fe51 	bl	cdd2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c130:	1c7f      	adds	r7, r7, #1
    c132:	4406      	add	r6, r0
    c134:	b2ff      	uxtb	r7, r7
    c136:	4547      	cmp	r7, r8
    c138:	d3f4      	bcc.n	c124 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x80>
    c13a:	1ced      	adds	r5, r5, #3
    c13c:	f025 0003 	bic.w	r0, r5, #3
    c140:	4604      	mov	r4, r0
    c142:	f1ba 0f00 	cmp.w	sl, #0
    c146:	d000      	beq.n	c14a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa6>
    c148:	2000      	movs	r0, #0
    c14a:	4632      	mov	r2, r6
    c14c:	4641      	mov	r1, r8
    c14e:	f7f8 fcf7 	bl	4b40 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c152:	4420      	add	r0, r4
    c154:	1dc0      	adds	r0, r0, #7
    c156:	f020 0007 	bic.w	r0, r0, #7
    c15a:	eba0 0009 	sub.w	r0, r0, r9
    c15e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c162 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c162:	b50e      	push	{r1, r2, r3, lr}
    c164:	4601      	mov	r1, r0
    c166:	4668      	mov	r0, sp
    c168:	f000 f818 	bl	c19c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c16c:	4668      	mov	r0, sp
    c16e:	f001 fc38 	bl	d9e2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c172:	bd0e      	pop	{r1, r2, r3, pc}
    c174:	b570      	push	{r4, r5, r6, lr}
    c176:	460c      	mov	r4, r1
    c178:	4605      	mov	r5, r0
    c17a:	f7f8 faaf 	bl	46dc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c17e:	2800      	cmp	r0, #0
    c180:	d002      	beq.n	c188 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    c182:	2d3e      	cmp	r5, #62	; 0x3e
    c184:	d001      	beq.n	c18a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    c186:	2001      	movs	r0, #1
    c188:	bd70      	pop	{r4, r5, r6, pc}
    c18a:	2c12      	cmp	r4, #18
    c18c:	d004      	beq.n	c198 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    c18e:	4620      	mov	r0, r4
    c190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c194:	f7f8 bab4 	b.w	4700 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c198:	2000      	movs	r0, #0
    c19a:	bd70      	pop	{r4, r5, r6, pc}

0000c19c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c19c:	880a      	ldrh	r2, [r1, #0]
    c19e:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c1a2:	8002      	strh	r2, [r0, #0]
    c1a4:	884a      	ldrh	r2, [r1, #2]
    c1a6:	8042      	strh	r2, [r0, #2]
    c1a8:	784a      	ldrb	r2, [r1, #1]
    c1aa:	0993      	lsrs	r3, r2, #6
    c1ac:	2200      	movs	r2, #0
    c1ae:	7142      	strb	r2, [r0, #5]
    c1b0:	784b      	ldrb	r3, [r1, #1]
    c1b2:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c1b6:	b11b      	cbz	r3, c1c0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c1b8:	2b01      	cmp	r3, #1
    c1ba:	d005      	beq.n	c1c8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c1bc:	2b02      	cmp	r3, #2
    c1be:	d005      	beq.n	c1cc <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c1c0:	7102      	strb	r2, [r0, #4]
    c1c2:	1d09      	adds	r1, r1, #4
    c1c4:	6081      	str	r1, [r0, #8]
    c1c6:	4770      	bx	lr
    c1c8:	2201      	movs	r2, #1
    c1ca:	e7f9      	b.n	c1c0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c1cc:	2202      	movs	r2, #2
    c1ce:	e7f7      	b.n	c1c0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c1d0 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c1d0:	b510      	push	{r4, lr}
    c1d2:	460c      	mov	r4, r1
    c1d4:	7809      	ldrb	r1, [r1, #0]
    c1d6:	7001      	strb	r1, [r0, #0]
    c1d8:	7841      	ldrb	r1, [r0, #1]
    c1da:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    c1de:	7041      	strb	r1, [r0, #1]
    c1e0:	8822      	ldrh	r2, [r4, #0]
    c1e2:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c1e6:	4311      	orrs	r1, r2
    c1e8:	7041      	strb	r1, [r0, #1]
    c1ea:	78a2      	ldrb	r2, [r4, #2]
    c1ec:	7082      	strb	r2, [r0, #2]
    c1ee:	8862      	ldrh	r2, [r4, #2]
    c1f0:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    c1f4:	0a12      	lsrs	r2, r2, #8
    c1f6:	70c2      	strb	r2, [r0, #3]
    c1f8:	7041      	strb	r1, [r0, #1]
    c1fa:	7922      	ldrb	r2, [r4, #4]
    c1fc:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c200:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    c204:	7041      	strb	r1, [r0, #1]
    c206:	7962      	ldrb	r2, [r4, #5]
    c208:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c20c:	7041      	strb	r1, [r0, #1]
    c20e:	68a1      	ldr	r1, [r4, #8]
    c210:	1d02      	adds	r2, r0, #4
    c212:	4291      	cmp	r1, r2
    c214:	d006      	beq.n	c224 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    c216:	8862      	ldrh	r2, [r4, #2]
    c218:	2afb      	cmp	r2, #251	; 0xfb
    c21a:	d300      	bcc.n	c21e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    c21c:	22fb      	movs	r2, #251	; 0xfb
    c21e:	1d00      	adds	r0, r0, #4
    c220:	f7ff fe39 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c224:	78a0      	ldrb	r0, [r4, #2]
    c226:	1d00      	adds	r0, r0, #4
    c228:	b2c0      	uxtb	r0, r0
    c22a:	bd10      	pop	{r4, pc}

0000c22c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c230:	4604      	mov	r4, r0
    c232:	f891 c000 	ldrb.w	ip, [r1]
    c236:	2000      	movs	r0, #0
    c238:	2513      	movs	r5, #19
    c23a:	260c      	movs	r6, #12
    c23c:	2705      	movs	r7, #5
    c23e:	223e      	movs	r2, #62	; 0x3e
    c240:	23ff      	movs	r3, #255	; 0xff
    c242:	f1bc 0f1d 	cmp.w	ip, #29
    c246:	d27d      	bcs.n	c344 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    c248:	e8df f00c 	tbb	[pc, ip]
    c24c:	28260f7c 	.word	0x28260f7c
    c250:	a492882e 	.word	0xa492882e
    c254:	ded3d1be 	.word	0xded3d1be
    c258:	7cf4f5f7 	.word	0x7cf4f5f7
    c25c:	f2f3547c 	.word	0xf2f3547c
    c260:	eeeff0f1 	.word	0xeeeff0f1
    c264:	eaebeced 	.word	0xeaebeced
    c268:	00e9      	.short	0x00e9
    c26a:	7026      	strb	r6, [r4, #0]
    c26c:	7908      	ldrb	r0, [r1, #4]
    c26e:	70a0      	strb	r0, [r4, #2]
    c270:	7948      	ldrb	r0, [r1, #5]
    c272:	70e0      	strb	r0, [r4, #3]
    c274:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c278:	0a00      	lsrs	r0, r0, #8
    c27a:	7120      	strb	r0, [r4, #4]
    c27c:	79c8      	ldrb	r0, [r1, #7]
    c27e:	7160      	strb	r0, [r4, #5]
    c280:	7a08      	ldrb	r0, [r1, #8]
    c282:	71a0      	strb	r0, [r4, #6]
    c284:	8908      	ldrh	r0, [r1, #8]
    c286:	0a00      	lsrs	r0, r0, #8
    c288:	71e0      	strb	r0, [r4, #7]
    c28a:	7a88      	ldrb	r0, [r1, #10]
    c28c:	7220      	strb	r0, [r4, #8]
    c28e:	8948      	ldrh	r0, [r1, #10]
    c290:	0a00      	lsrs	r0, r0, #8
    c292:	7260      	strb	r0, [r4, #9]
    c294:	2008      	movs	r0, #8
    c296:	e190      	b.n	c5ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c298:	2010      	movs	r0, #16
    c29a:	e000      	b.n	c29e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x72>
    c29c:	201a      	movs	r0, #26
    c29e:	7020      	strb	r0, [r4, #0]
    c2a0:	7908      	ldrb	r0, [r1, #4]
    c2a2:	70a0      	strb	r0, [r4, #2]
    c2a4:	2001      	movs	r0, #1
    c2a6:	e188      	b.n	c5ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c2a8:	7022      	strb	r2, [r4, #0]
    c2aa:	2001      	movs	r0, #1
    c2ac:	70a0      	strb	r0, [r4, #2]
    c2ae:	7908      	ldrb	r0, [r1, #4]
    c2b0:	70e0      	strb	r0, [r4, #3]
    c2b2:	7988      	ldrb	r0, [r1, #6]
    c2b4:	7120      	strb	r0, [r4, #4]
    c2b6:	88c8      	ldrh	r0, [r1, #6]
    c2b8:	0a00      	lsrs	r0, r0, #8
    c2ba:	7160      	strb	r0, [r4, #5]
    c2bc:	7a08      	ldrb	r0, [r1, #8]
    c2be:	71a0      	strb	r0, [r4, #6]
    c2c0:	7a48      	ldrb	r0, [r1, #9]
    c2c2:	71e0      	strb	r0, [r4, #7]
    c2c4:	f8d1 000a 	ldr.w	r0, [r1, #10]
    c2c8:	60a0      	str	r0, [r4, #8]
    c2ca:	89c8      	ldrh	r0, [r1, #14]
    c2cc:	81a0      	strh	r0, [r4, #12]
    c2ce:	7c08      	ldrb	r0, [r1, #16]
    c2d0:	73a0      	strb	r0, [r4, #14]
    c2d2:	8a08      	ldrh	r0, [r1, #16]
    c2d4:	0a00      	lsrs	r0, r0, #8
    c2d6:	73e0      	strb	r0, [r4, #15]
    c2d8:	7c88      	ldrb	r0, [r1, #18]
    c2da:	7420      	strb	r0, [r4, #16]
    c2dc:	8a48      	ldrh	r0, [r1, #18]
    c2de:	0a00      	lsrs	r0, r0, #8
    c2e0:	7460      	strb	r0, [r4, #17]
    c2e2:	7d08      	ldrb	r0, [r1, #20]
    c2e4:	74a0      	strb	r0, [r4, #18]
    c2e6:	8a88      	ldrh	r0, [r1, #20]
    c2e8:	0a00      	lsrs	r0, r0, #8
    c2ea:	74e0      	strb	r0, [r4, #19]
    c2ec:	7d88      	ldrb	r0, [r1, #22]
    c2ee:	7520      	strb	r0, [r4, #20]
    c2f0:	4628      	mov	r0, r5
    c2f2:	e162      	b.n	c5ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c2f4:	7022      	strb	r2, [r4, #0]
    c2f6:	200a      	movs	r0, #10
    c2f8:	70a0      	strb	r0, [r4, #2]
    c2fa:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c2fe:	70e0      	strb	r0, [r4, #3]
    c300:	7888      	ldrb	r0, [r1, #2]
    c302:	7120      	strb	r0, [r4, #4]
    c304:	8848      	ldrh	r0, [r1, #2]
    c306:	0a00      	lsrs	r0, r0, #8
    c308:	7160      	strb	r0, [r4, #5]
    c30a:	7908      	ldrb	r0, [r1, #4]
    c30c:	71a0      	strb	r0, [r4, #6]
    c30e:	7948      	ldrb	r0, [r1, #5]
    c310:	71e0      	strb	r0, [r4, #7]
    c312:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c316:	60a0      	str	r0, [r4, #8]
    c318:	8948      	ldrh	r0, [r1, #10]
    c31a:	81a0      	strh	r0, [r4, #12]
    c31c:	68c8      	ldr	r0, [r1, #12]
    c31e:	f8c4 000e 	str.w	r0, [r4, #14]
    c322:	8a08      	ldrh	r0, [r1, #16]
    c324:	8260      	strh	r0, [r4, #18]
    c326:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c32a:	6160      	str	r0, [r4, #20]
    c32c:	8ac8      	ldrh	r0, [r1, #22]
    c32e:	8320      	strh	r0, [r4, #24]
    c330:	7e08      	ldrb	r0, [r1, #24]
    c332:	76a0      	strb	r0, [r4, #26]
    c334:	8b08      	ldrh	r0, [r1, #24]
    c336:	0a00      	lsrs	r0, r0, #8
    c338:	76e0      	strb	r0, [r4, #27]
    c33a:	7e88      	ldrb	r0, [r1, #26]
    c33c:	7720      	strb	r0, [r4, #28]
    c33e:	8b48      	ldrh	r0, [r1, #26]
    c340:	0a00      	lsrs	r0, r0, #8
    c342:	e000      	b.n	c346 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11a>
    c344:	e09a      	b.n	c47c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    c346:	7760      	strb	r0, [r4, #29]
    c348:	7f08      	ldrb	r0, [r1, #28]
    c34a:	77a0      	strb	r0, [r4, #30]
    c34c:	8b88      	ldrh	r0, [r1, #28]
    c34e:	0a00      	lsrs	r0, r0, #8
    c350:	77e0      	strb	r0, [r4, #31]
    c352:	7f88      	ldrb	r0, [r1, #30]
    c354:	f884 0020 	strb.w	r0, [r4, #32]
    c358:	201f      	movs	r0, #31
    c35a:	e12e      	b.n	c5ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c35c:	7022      	strb	r2, [r4, #0]
    c35e:	2014      	movs	r0, #20
    c360:	70a0      	strb	r0, [r4, #2]
    c362:	7908      	ldrb	r0, [r1, #4]
    c364:	70e0      	strb	r0, [r4, #3]
    c366:	8888      	ldrh	r0, [r1, #4]
    c368:	0a00      	lsrs	r0, r0, #8
    c36a:	7120      	strb	r0, [r4, #4]
    c36c:	7988      	ldrb	r0, [r1, #6]
    c36e:	e0c2      	b.n	c4f6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    c370:	7022      	strb	r2, [r4, #0]
    c372:	2004      	movs	r0, #4
    c374:	70a0      	strb	r0, [r4, #2]
    c376:	7908      	ldrb	r0, [r1, #4]
    c378:	70e0      	strb	r0, [r4, #3]
    c37a:	7988      	ldrb	r0, [r1, #6]
    c37c:	7120      	strb	r0, [r4, #4]
    c37e:	88c8      	ldrh	r0, [r1, #6]
    c380:	0a00      	lsrs	r0, r0, #8
    c382:	7160      	strb	r0, [r4, #5]
    c384:	6888      	ldr	r0, [r1, #8]
    c386:	f8c4 0006 	str.w	r0, [r4, #6]
    c38a:	68c8      	ldr	r0, [r1, #12]
    c38c:	f8c4 000a 	str.w	r0, [r4, #10]
    c390:	200c      	movs	r0, #12
    c392:	e112      	b.n	c5ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c394:	7022      	strb	r2, [r4, #0]
    c396:	2003      	movs	r0, #3
    c398:	70a0      	strb	r0, [r4, #2]
    c39a:	7908      	ldrb	r0, [r1, #4]
    c39c:	70e0      	strb	r0, [r4, #3]
    c39e:	7988      	ldrb	r0, [r1, #6]
    c3a0:	7120      	strb	r0, [r4, #4]
    c3a2:	88c8      	ldrh	r0, [r1, #6]
    c3a4:	0a00      	lsrs	r0, r0, #8
    c3a6:	7160      	strb	r0, [r4, #5]
    c3a8:	7a08      	ldrb	r0, [r1, #8]
    c3aa:	71a0      	strb	r0, [r4, #6]
    c3ac:	8908      	ldrh	r0, [r1, #8]
    c3ae:	0a00      	lsrs	r0, r0, #8
    c3b0:	71e0      	strb	r0, [r4, #7]
    c3b2:	7a88      	ldrb	r0, [r1, #10]
    c3b4:	7220      	strb	r0, [r4, #8]
    c3b6:	8948      	ldrh	r0, [r1, #10]
    c3b8:	0a00      	lsrs	r0, r0, #8
    c3ba:	7260      	strb	r0, [r4, #9]
    c3bc:	7b08      	ldrb	r0, [r1, #12]
    c3be:	72a0      	strb	r0, [r4, #10]
    c3c0:	8988      	ldrh	r0, [r1, #12]
    c3c2:	0a00      	lsrs	r0, r0, #8
    c3c4:	72e0      	strb	r0, [r4, #11]
    c3c6:	e0d2      	b.n	c56e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x342>
    c3c8:	7022      	strb	r2, [r4, #0]
    c3ca:	70a7      	strb	r7, [r4, #2]
    c3cc:	7908      	ldrb	r0, [r1, #4]
    c3ce:	70e0      	strb	r0, [r4, #3]
    c3d0:	8888      	ldrh	r0, [r1, #4]
    c3d2:	0a00      	lsrs	r0, r0, #8
    c3d4:	7120      	strb	r0, [r4, #4]
    c3d6:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c3da:	f8c4 0005 	str.w	r0, [r4, #5]
    c3de:	f8d1 000a 	ldr.w	r0, [r1, #10]
    c3e2:	f8c4 0009 	str.w	r0, [r4, #9]
    c3e6:	89c8      	ldrh	r0, [r1, #14]
    c3e8:	f8a4 000d 	strh.w	r0, [r4, #13]
    c3ec:	e0e4      	b.n	c5b8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38c>
    c3ee:	2011      	movs	r0, #17
    c3f0:	e047      	b.n	c482 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x256>
    c3f2:	7027      	strb	r7, [r4, #0]
    c3f4:	7908      	ldrb	r0, [r1, #4]
    c3f6:	70a0      	strb	r0, [r4, #2]
    c3f8:	7948      	ldrb	r0, [r1, #5]
    c3fa:	70e0      	strb	r0, [r4, #3]
    c3fc:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c400:	0a00      	lsrs	r0, r0, #8
    c402:	7120      	strb	r0, [r4, #4]
    c404:	79c8      	ldrb	r0, [r1, #7]
    c406:	e076      	b.n	c4f6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    c408:	2008      	movs	r0, #8
    c40a:	7020      	strb	r0, [r4, #0]
    c40c:	7908      	ldrb	r0, [r1, #4]
    c40e:	70a0      	strb	r0, [r4, #2]
    c410:	7988      	ldrb	r0, [r1, #6]
    c412:	70e0      	strb	r0, [r4, #3]
    c414:	88c8      	ldrh	r0, [r1, #6]
    c416:	0a00      	lsrs	r0, r0, #8
    c418:	7120      	strb	r0, [r4, #4]
    c41a:	7a08      	ldrb	r0, [r1, #8]
    c41c:	e06b      	b.n	c4f6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    c41e:	e0b6      	b.n	c58e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x362>
    c420:	e08a      	b.n	c538 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x30c>
    c422:	e06b      	b.n	c4fc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d0>
    c424:	e096      	b.n	c554 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    c426:	e0a4      	b.n	c572 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x346>
    c428:	e05d      	b.n	c4e6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    c42a:	e045      	b.n	c4b8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x28c>
    c42c:	e041      	b.n	c4b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    c42e:	e030      	b.n	c492 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x266>
    c430:	e011      	b.n	c456 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22a>
    c432:	e00d      	b.n	c450 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x224>
    c434:	e024      	b.n	c480 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x254>
    c436:	e01b      	b.n	c470 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    c438:	e7ff      	b.n	c43a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20e>
    c43a:	2030      	movs	r0, #48	; 0x30
    c43c:	7020      	strb	r0, [r4, #0]
    c43e:	7908      	ldrb	r0, [r1, #4]
    c440:	70a0      	strb	r0, [r4, #2]
    c442:	7988      	ldrb	r0, [r1, #6]
    c444:	70e0      	strb	r0, [r4, #3]
    c446:	88c8      	ldrh	r0, [r1, #6]
    c448:	0a00      	lsrs	r0, r0, #8
    c44a:	7120      	strb	r0, [r4, #4]
    c44c:	2003      	movs	r0, #3
    c44e:	e0b4      	b.n	c5ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c450:	7022      	strb	r2, [r4, #0]
    c452:	2007      	movs	r0, #7
    c454:	e054      	b.n	c500 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d4>
    c456:	7022      	strb	r2, [r4, #0]
    c458:	70a6      	strb	r6, [r4, #2]
    c45a:	7908      	ldrb	r0, [r1, #4]
    c45c:	70e0      	strb	r0, [r4, #3]
    c45e:	7988      	ldrb	r0, [r1, #6]
    c460:	7120      	strb	r0, [r4, #4]
    c462:	88c8      	ldrh	r0, [r1, #6]
    c464:	0a00      	lsrs	r0, r0, #8
    c466:	7160      	strb	r0, [r4, #5]
    c468:	7a08      	ldrb	r0, [r1, #8]
    c46a:	71a0      	strb	r0, [r4, #6]
    c46c:	7a48      	ldrb	r0, [r1, #9]
    c46e:	e01d      	b.n	c4ac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x280>
    c470:	4620      	mov	r0, r4
    c472:	1d09      	adds	r1, r1, #4
    c474:	f7f8 f904 	bl	4680 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb0>
    c478:	2800      	cmp	r0, #0
    c47a:	d109      	bne.n	c490 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x264>
    c47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c480:	2057      	movs	r0, #87	; 0x57
    c482:	7020      	strb	r0, [r4, #0]
    c484:	7908      	ldrb	r0, [r1, #4]
    c486:	70a0      	strb	r0, [r4, #2]
    c488:	8888      	ldrh	r0, [r1, #4]
    c48a:	0a00      	lsrs	r0, r0, #8
    c48c:	70e0      	strb	r0, [r4, #3]
    c48e:	2002      	movs	r0, #2
    c490:	e093      	b.n	c5ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c492:	7022      	strb	r2, [r4, #0]
    c494:	2012      	movs	r0, #18
    c496:	70a0      	strb	r0, [r4, #2]
    c498:	7908      	ldrb	r0, [r1, #4]
    c49a:	70e0      	strb	r0, [r4, #3]
    c49c:	7948      	ldrb	r0, [r1, #5]
    c49e:	7120      	strb	r0, [r4, #4]
    c4a0:	7988      	ldrb	r0, [r1, #6]
    c4a2:	7160      	strb	r0, [r4, #5]
    c4a4:	88c8      	ldrh	r0, [r1, #6]
    c4a6:	0a00      	lsrs	r0, r0, #8
    c4a8:	71a0      	strb	r0, [r4, #6]
    c4aa:	7a08      	ldrb	r0, [r1, #8]
    c4ac:	71e0      	strb	r0, [r4, #7]
    c4ae:	2006      	movs	r0, #6
    c4b0:	e083      	b.n	c5ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c4b2:	7022      	strb	r2, [r4, #0]
    c4b4:	2020      	movs	r0, #32
    c4b6:	e041      	b.n	c53c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x310>
    c4b8:	7022      	strb	r2, [r4, #0]
    c4ba:	2021      	movs	r0, #33	; 0x21
    c4bc:	70a0      	strb	r0, [r4, #2]
    c4be:	7908      	ldrb	r0, [r1, #4]
    c4c0:	70e0      	strb	r0, [r4, #3]
    c4c2:	7948      	ldrb	r0, [r1, #5]
    c4c4:	7120      	strb	r0, [r4, #4]
    c4c6:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c4ca:	0a00      	lsrs	r0, r0, #8
    c4cc:	7160      	strb	r0, [r4, #5]
    c4ce:	79c8      	ldrb	r0, [r1, #7]
    c4d0:	71a0      	strb	r0, [r4, #6]
    c4d2:	7a08      	ldrb	r0, [r1, #8]
    c4d4:	71e0      	strb	r0, [r4, #7]
    c4d6:	7a48      	ldrb	r0, [r1, #9]
    c4d8:	7220      	strb	r0, [r4, #8]
    c4da:	7a88      	ldrb	r0, [r1, #10]
    c4dc:	7260      	strb	r0, [r4, #9]
    c4de:	7ac8      	ldrb	r0, [r1, #11]
    c4e0:	72a0      	strb	r0, [r4, #10]
    c4e2:	2009      	movs	r0, #9
    c4e4:	e069      	b.n	c5ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c4e6:	7023      	strb	r3, [r4, #0]
    c4e8:	20a1      	movs	r0, #161	; 0xa1
    c4ea:	70a0      	strb	r0, [r4, #2]
    c4ec:	7908      	ldrb	r0, [r1, #4]
    c4ee:	70e0      	strb	r0, [r4, #3]
    c4f0:	7948      	ldrb	r0, [r1, #5]
    c4f2:	7120      	strb	r0, [r4, #4]
    c4f4:	2000      	movs	r0, #0
    c4f6:	7160      	strb	r0, [r4, #5]
    c4f8:	2004      	movs	r0, #4
    c4fa:	e05e      	b.n	c5ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c4fc:	7023      	strb	r3, [r4, #0]
    c4fe:	20a2      	movs	r0, #162	; 0xa2
    c500:	70a0      	strb	r0, [r4, #2]
    c502:	7908      	ldrb	r0, [r1, #4]
    c504:	70e0      	strb	r0, [r4, #3]
    c506:	8888      	ldrh	r0, [r1, #4]
    c508:	0a00      	lsrs	r0, r0, #8
    c50a:	7120      	strb	r0, [r4, #4]
    c50c:	7988      	ldrb	r0, [r1, #6]
    c50e:	7160      	strb	r0, [r4, #5]
    c510:	88c8      	ldrh	r0, [r1, #6]
    c512:	0a00      	lsrs	r0, r0, #8
    c514:	71a0      	strb	r0, [r4, #6]
    c516:	7a08      	ldrb	r0, [r1, #8]
    c518:	71e0      	strb	r0, [r4, #7]
    c51a:	8908      	ldrh	r0, [r1, #8]
    c51c:	0a00      	lsrs	r0, r0, #8
    c51e:	7220      	strb	r0, [r4, #8]
    c520:	7a88      	ldrb	r0, [r1, #10]
    c522:	7260      	strb	r0, [r4, #9]
    c524:	8948      	ldrh	r0, [r1, #10]
    c526:	0a00      	lsrs	r0, r0, #8
    c528:	72a0      	strb	r0, [r4, #10]
    c52a:	7b08      	ldrb	r0, [r1, #12]
    c52c:	72e0      	strb	r0, [r4, #11]
    c52e:	8988      	ldrh	r0, [r1, #12]
    c530:	0a00      	lsrs	r0, r0, #8
    c532:	7320      	strb	r0, [r4, #12]
    c534:	200b      	movs	r0, #11
    c536:	e040      	b.n	c5ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c538:	7023      	strb	r3, [r4, #0]
    c53a:	20a3      	movs	r0, #163	; 0xa3
    c53c:	70a0      	strb	r0, [r4, #2]
    c53e:	7908      	ldrb	r0, [r1, #4]
    c540:	70e0      	strb	r0, [r4, #3]
    c542:	8888      	ldrh	r0, [r1, #4]
    c544:	0a00      	lsrs	r0, r0, #8
    c546:	7120      	strb	r0, [r4, #4]
    c548:	7988      	ldrb	r0, [r1, #6]
    c54a:	7160      	strb	r0, [r4, #5]
    c54c:	79c8      	ldrb	r0, [r1, #7]
    c54e:	71a0      	strb	r0, [r4, #6]
    c550:	2005      	movs	r0, #5
    c552:	e032      	b.n	c5ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c554:	7022      	strb	r2, [r4, #0]
    c556:	70a5      	strb	r5, [r4, #2]
    c558:	7908      	ldrb	r0, [r1, #4]
    c55a:	70e0      	strb	r0, [r4, #3]
    c55c:	7948      	ldrb	r0, [r1, #5]
    c55e:	7120      	strb	r0, [r4, #4]
    c560:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c564:	f8c4 0005 	str.w	r0, [r4, #5]
    c568:	8948      	ldrh	r0, [r1, #10]
    c56a:	f8a4 0009 	strh.w	r0, [r4, #9]
    c56e:	200a      	movs	r0, #10
    c570:	e023      	b.n	c5ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c572:	7023      	strb	r3, [r4, #0]
    c574:	20a4      	movs	r0, #164	; 0xa4
    c576:	70a0      	strb	r0, [r4, #2]
    c578:	7908      	ldrb	r0, [r1, #4]
    c57a:	70e0      	strb	r0, [r4, #3]
    c57c:	8888      	ldrh	r0, [r1, #4]
    c57e:	0a00      	lsrs	r0, r0, #8
    c580:	7120      	strb	r0, [r4, #4]
    c582:	7988      	ldrb	r0, [r1, #6]
    c584:	7160      	strb	r0, [r4, #5]
    c586:	79c8      	ldrb	r0, [r1, #7]
    c588:	71a0      	strb	r0, [r4, #6]
    c58a:	2007      	movs	r0, #7
    c58c:	e015      	b.n	c5ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c58e:	7023      	strb	r3, [r4, #0]
    c590:	2080      	movs	r0, #128	; 0x80
    c592:	70a0      	strb	r0, [r4, #2]
    c594:	888a      	ldrh	r2, [r1, #4]
    c596:	f8a4 2003 	strh.w	r2, [r4, #3]
    c59a:	88ca      	ldrh	r2, [r1, #6]
    c59c:	f8a4 2005 	strh.w	r2, [r4, #5]
    c5a0:	7a0a      	ldrb	r2, [r1, #8]
    c5a2:	71e2      	strb	r2, [r4, #7]
    c5a4:	894a      	ldrh	r2, [r1, #10]
    c5a6:	8122      	strh	r2, [r4, #8]
    c5a8:	898a      	ldrh	r2, [r1, #12]
    c5aa:	8162      	strh	r2, [r4, #10]
    c5ac:	89ca      	ldrh	r2, [r1, #14]
    c5ae:	81a2      	strh	r2, [r4, #12]
    c5b0:	7c09      	ldrb	r1, [r1, #16]
    c5b2:	f001 0101 	and.w	r1, r1, #1
    c5b6:	73a1      	strb	r1, [r4, #14]
    c5b8:	200d      	movs	r0, #13
    c5ba:	7060      	strb	r0, [r4, #1]
    c5bc:	1c80      	adds	r0, r0, #2
    c5be:	e75d      	b.n	c47c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>

0000c5c0 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    c5c0:	223e      	movs	r2, #62	; 0x3e
    c5c2:	7002      	strb	r2, [r0, #0]
    c5c4:	2201      	movs	r2, #1
    c5c6:	7082      	strb	r2, [r0, #2]
    c5c8:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    c5cc:	70c2      	strb	r2, [r0, #3]
    c5ce:	788a      	ldrb	r2, [r1, #2]
    c5d0:	7102      	strb	r2, [r0, #4]
    c5d2:	884a      	ldrh	r2, [r1, #2]
    c5d4:	0a12      	lsrs	r2, r2, #8
    c5d6:	7142      	strb	r2, [r0, #5]
    c5d8:	790a      	ldrb	r2, [r1, #4]
    c5da:	7182      	strb	r2, [r0, #6]
    c5dc:	794a      	ldrb	r2, [r1, #5]
    c5de:	71c2      	strb	r2, [r0, #7]
    c5e0:	f8d1 2006 	ldr.w	r2, [r1, #6]
    c5e4:	6082      	str	r2, [r0, #8]
    c5e6:	894a      	ldrh	r2, [r1, #10]
    c5e8:	8182      	strh	r2, [r0, #12]
    c5ea:	7e0a      	ldrb	r2, [r1, #24]
    c5ec:	7382      	strb	r2, [r0, #14]
    c5ee:	8b0a      	ldrh	r2, [r1, #24]
    c5f0:	0a12      	lsrs	r2, r2, #8
    c5f2:	73c2      	strb	r2, [r0, #15]
    c5f4:	7e8a      	ldrb	r2, [r1, #26]
    c5f6:	7402      	strb	r2, [r0, #16]
    c5f8:	8b4a      	ldrh	r2, [r1, #26]
    c5fa:	0a12      	lsrs	r2, r2, #8
    c5fc:	7442      	strb	r2, [r0, #17]
    c5fe:	7f0a      	ldrb	r2, [r1, #28]
    c600:	7482      	strb	r2, [r0, #18]
    c602:	8b8a      	ldrh	r2, [r1, #28]
    c604:	0a12      	lsrs	r2, r2, #8
    c606:	74c2      	strb	r2, [r0, #19]
    c608:	7f89      	ldrb	r1, [r1, #30]
    c60a:	7501      	strb	r1, [r0, #20]
    c60c:	2113      	movs	r1, #19
    c60e:	7041      	strb	r1, [r0, #1]
    c610:	4608      	mov	r0, r1
    c612:	4770      	bx	lr
    c614:	094a      	lsrs	r2, r1, #5
    c616:	f001 011f 	and.w	r1, r1, #31
    c61a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    c61e:	40c8      	lsrs	r0, r1
    c620:	f000 0001 	and.w	r0, r0, #1
    c624:	4770      	bx	lr

0000c626 <sdc_hci_data_put>:
    c626:	b510      	push	{r4, lr}
    c628:	f06f 0415 	mvn.w	r4, #21
    c62c:	b120      	cbz	r0, c638 <sdc_hci_data_put+0x12>
    c62e:	f7ff fd98 	bl	c162 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    c632:	b108      	cbz	r0, c638 <sdc_hci_data_put+0x12>
    c634:	2000      	movs	r0, #0
    c636:	bd10      	pop	{r4, pc}
    c638:	4620      	mov	r0, r4
    c63a:	bd10      	pop	{r4, pc}

0000c63c <sdc_hci_get>:
    c63c:	b510      	push	{r4, lr}
    c63e:	460c      	mov	r4, r1
    c640:	b130      	cbz	r0, c650 <sdc_hci_get+0x14>
    c642:	b12c      	cbz	r4, c650 <sdc_hci_get+0x14>
    c644:	f7f7 ffc4 	bl	45d0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    c648:	b128      	cbz	r0, c656 <sdc_hci_get+0x1a>
    c64a:	7020      	strb	r0, [r4, #0]
    c64c:	2000      	movs	r0, #0
    c64e:	bd10      	pop	{r4, pc}
    c650:	f06f 0015 	mvn.w	r0, #21
    c654:	bd10      	pop	{r4, pc}
    c656:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c65a:	bd10      	pop	{r4, pc}

0000c65c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    c65c:	f003 b9b1 	b.w	f9c2 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000c660 <sdc_hci_cmd_cb_read_transmit_power_level>:
    c660:	f003 b9fd 	b.w	fa5e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000c664 <sdc_hci_cmd_cb_set_event_mask>:
    c664:	b510      	push	{r4, lr}
    c666:	f7f8 f85b 	bl	4720 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    c66a:	2000      	movs	r0, #0
    c66c:	bd10      	pop	{r4, pc}

0000c66e <sdc_hci_cmd_cb_set_event_mask_page_2>:
    c66e:	b510      	push	{r4, lr}
    c670:	f7f8 f866 	bl	4740 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    c674:	2000      	movs	r0, #0
    c676:	bd10      	pop	{r4, pc}

0000c678 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    c678:	f003 ba0d 	b.w	fa96 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000c67c <sdc_hci_cmd_vs_conn_event_extend>:
    c67c:	b508      	push	{r3, lr}
    c67e:	7800      	ldrb	r0, [r0, #0]
    c680:	f88d 0000 	strb.w	r0, [sp]
    c684:	4668      	mov	r0, sp
    c686:	f003 f8bd 	bl	f804 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    c68a:	bd08      	pop	{r3, pc}

0000c68c <sdc_hci_cmd_vs_conn_update>:
    c68c:	2001      	movs	r0, #1
    c68e:	4770      	bx	lr

0000c690 <sdc_hci_cmd_vs_event_length_set>:
    c690:	f7fd bc2c 	b.w	9eec <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000c694 <sdc_hci_cmd_vs_llpm_mode_set>:
    c694:	2001      	movs	r0, #1
    c696:	4770      	bx	lr

0000c698 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    c698:	7881      	ldrb	r1, [r0, #2]
    c69a:	8800      	ldrh	r0, [r0, #0]
    c69c:	f003 b865 	b.w	f76a <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000c6a0 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    c6a0:	7800      	ldrb	r0, [r0, #0]
    c6a2:	b100      	cbz	r0, c6a6 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    c6a4:	2001      	movs	r0, #1
    c6a6:	f003 b85b 	b.w	f760 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000c6aa <sdc_hci_cmd_vs_set_adv_randomness>:
    c6aa:	f003 b888 	b.w	f7be <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000c6ae <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    c6ae:	b510      	push	{r4, lr}
    c6b0:	4604      	mov	r4, r0
    c6b2:	f7f7 fc29 	bl	3f08 <mpsl_temperature_get>
    c6b6:	17c1      	asrs	r1, r0, #31
    c6b8:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    c6bc:	1080      	asrs	r0, r0, #2
    c6be:	287f      	cmp	r0, #127	; 0x7f
    c6c0:	dd01      	ble.n	c6c6 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    c6c2:	207f      	movs	r0, #127	; 0x7f
    c6c4:	e004      	b.n	c6d0 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    c6c6:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    c6ca:	4288      	cmp	r0, r1
    c6cc:	da00      	bge.n	c6d0 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    c6ce:	4608      	mov	r0, r1
    c6d0:	7020      	strb	r0, [r4, #0]
    c6d2:	2000      	movs	r0, #0
    c6d4:	bd10      	pop	{r4, pc}

0000c6d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    c6d6:	b570      	push	{r4, r5, r6, lr}
    c6d8:	4605      	mov	r5, r0
    c6da:	2210      	movs	r2, #16
    c6dc:	2100      	movs	r1, #0
    c6de:	f7ff fc54 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c6e2:	2210      	movs	r2, #16
    c6e4:	2100      	movs	r1, #0
    c6e6:	f105 0010 	add.w	r0, r5, #16
    c6ea:	f7ff fc4e 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c6ee:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    c6f2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c6f6:	1c40      	adds	r0, r0, #1
    c6f8:	d10b      	bne.n	c712 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c6fa:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c6fe:	1c40      	adds	r0, r0, #1
    c700:	d107      	bne.n	c712 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c702:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c706:	1c40      	adds	r0, r0, #1
    c708:	d103      	bne.n	c712 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c70a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c70e:	1c40      	adds	r0, r0, #1
    c710:	d00b      	beq.n	c72a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    c712:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    c716:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c71a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    c71e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    c722:	612a      	str	r2, [r5, #16]
    c724:	6168      	str	r0, [r5, #20]
    c726:	61a9      	str	r1, [r5, #24]
    c728:	61eb      	str	r3, [r5, #28]
    c72a:	2000      	movs	r0, #0
    c72c:	f7f8 fd1e 	bl	516c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c730:	b918      	cbnz	r0, c73a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    c732:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    c736:	07c0      	lsls	r0, r0, #31
    c738:	d118      	bne.n	c76c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c73a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    c73e:	1c40      	adds	r0, r0, #1
    c740:	d10b      	bne.n	c75a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c742:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c746:	1c40      	adds	r0, r0, #1
    c748:	d107      	bne.n	c75a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c74a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    c74e:	1c40      	adds	r0, r0, #1
    c750:	d103      	bne.n	c75a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c752:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    c756:	1c40      	adds	r0, r0, #1
    c758:	d008      	beq.n	c76c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c75a:	f854 0f90 	ldr.w	r0, [r4, #144]!
    c75e:	6861      	ldr	r1, [r4, #4]
    c760:	68a2      	ldr	r2, [r4, #8]
    c762:	68e3      	ldr	r3, [r4, #12]
    c764:	6028      	str	r0, [r5, #0]
    c766:	6069      	str	r1, [r5, #4]
    c768:	60aa      	str	r2, [r5, #8]
    c76a:	60eb      	str	r3, [r5, #12]
    c76c:	2000      	movs	r0, #0
    c76e:	bd70      	pop	{r4, r5, r6, pc}

0000c770 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    c770:	b538      	push	{r3, r4, r5, lr}
    c772:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c776:	4604      	mov	r4, r0
    c778:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c77c:	1c40      	adds	r0, r0, #1
    c77e:	d105      	bne.n	c78c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    c780:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c784:	43c0      	mvns	r0, r0
    c786:	0400      	lsls	r0, r0, #16
    c788:	0c00      	lsrs	r0, r0, #16
    c78a:	d03e      	beq.n	c80a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    c78c:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    c790:	07c0      	lsls	r0, r0, #31
    c792:	d03a      	beq.n	c80a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    c794:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c798:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    c79c:	f8ad 1000 	strh.w	r1, [sp]
    c7a0:	f8c4 0001 	str.w	r0, [r4, #1]
    c7a4:	f8bd 0000 	ldrh.w	r0, [sp]
    c7a8:	f8a4 0005 	strh.w	r0, [r4, #5]
    c7ac:	79a0      	ldrb	r0, [r4, #6]
    c7ae:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    c7b2:	71a0      	strb	r0, [r4, #6]
    c7b4:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    c7b8:	1c40      	adds	r0, r0, #1
    c7ba:	d00f      	beq.n	c7dc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c7bc:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    c7c0:	1c40      	adds	r0, r0, #1
    c7c2:	d00b      	beq.n	c7dc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c7c4:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    c7c8:	1c40      	adds	r0, r0, #1
    c7ca:	d007      	beq.n	c7dc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c7cc:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    c7d0:	1c40      	adds	r0, r0, #1
    c7d2:	d003      	beq.n	c7dc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c7d4:	2000      	movs	r0, #0
    c7d6:	f7f8 fcc9 	bl	516c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c7da:	b140      	cbz	r0, c7ee <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    c7dc:	2210      	movs	r2, #16
    c7de:	2100      	movs	r1, #0
    c7e0:	1de0      	adds	r0, r4, #7
    c7e2:	f7ff fbd2 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c7e6:	2001      	movs	r0, #1
    c7e8:	7020      	strb	r0, [r4, #0]
    c7ea:	2000      	movs	r0, #0
    c7ec:	bd38      	pop	{r3, r4, r5, pc}
    c7ee:	f855 2f90 	ldr.w	r2, [r5, #144]!
    c7f2:	6869      	ldr	r1, [r5, #4]
    c7f4:	68a8      	ldr	r0, [r5, #8]
    c7f6:	68eb      	ldr	r3, [r5, #12]
    c7f8:	f8c4 2007 	str.w	r2, [r4, #7]
    c7fc:	f8c4 100b 	str.w	r1, [r4, #11]
    c800:	f8c4 000f 	str.w	r0, [r4, #15]
    c804:	f8c4 3013 	str.w	r3, [r4, #19]
    c808:	e7ed      	b.n	c7e6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    c80a:	2000      	movs	r0, #0
    c80c:	e7ec      	b.n	c7e8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000c80e <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    c80e:	f002 bfeb 	b.w	f7e8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000c812 <sdc_hci_cmd_ip_read_bd_addr>:
    c812:	f003 b8e7 	b.w	f9e4 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000c816 <sdc_hci_cmd_ip_read_local_version_information>:
    c816:	f7fd bb77 	b.w	9f08 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000c81a <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    c81a:	f002 bd87 	b.w	f32c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000c81e <sdc_hci_cmd_le_clear_filter_accept_list>:
    c81e:	f002 bd9c 	b.w	f35a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000c822 <sdc_hci_cmd_le_encrypt>:
    c822:	f002 bda4 	b.w	f36e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000c826 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    c826:	8802      	ldrh	r2, [r0, #0]
    c828:	800a      	strh	r2, [r1, #0]
    c82a:	f002 bda9 	b.w	f380 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000c82e <sdc_hci_cmd_le_long_term_key_request_reply>:
    c82e:	8802      	ldrh	r2, [r0, #0]
    c830:	800a      	strh	r2, [r1, #0]
    c832:	f002 bdbe 	b.w	f3b2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000c836 <sdc_hci_cmd_le_rand>:
    c836:	f002 bde6 	b.w	f406 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000c83a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    c83a:	f002 bdea 	b.w	f412 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000c83e <sdc_hci_cmd_le_read_buffer_size>:
    c83e:	f7fd ba5d 	b.w	9cfc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000c842 <sdc_hci_cmd_le_read_channel_map>:
    c842:	f7fd ba65 	b.w	9d10 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000c846 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    c846:	f002 be1b 	b.w	f480 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000c84a <sdc_hci_cmd_le_read_max_data_length>:
    c84a:	f002 bdeb 	b.w	f424 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000c84e <sdc_hci_cmd_le_read_phy>:
    c84e:	f7fd ba87 	b.w	9d60 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000c852 <sdc_hci_cmd_le_read_remote_features>:
    c852:	f002 bdf0 	b.w	f436 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000c856 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    c856:	f7fd baa9 	b.w	9dac <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000c85a <sdc_hci_cmd_le_read_transmit_power>:
    c85a:	f002 be08 	b.w	f46e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000c85e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    c85e:	f002 be13 	b.w	f488 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000c862 <sdc_hci_cmd_le_set_adv_data>:
    c862:	f002 be26 	b.w	f4b2 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000c866 <sdc_hci_cmd_le_set_adv_enable>:
    c866:	f002 be39 	b.w	f4dc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000c86a <sdc_hci_cmd_le_set_adv_params>:
    c86a:	f002 be6a 	b.w	f542 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000c86e <sdc_hci_cmd_le_set_data_length>:
    c86e:	f002 befd 	b.w	f66c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000c872 <sdc_hci_cmd_le_set_data_related_address_changes>:
    c872:	f002 bf1b 	b.w	f6ac <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000c876 <sdc_hci_cmd_le_set_default_phy>:
    c876:	f7fd baa3 	b.w	9dc0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000c87a <sdc_hci_cmd_le_set_event_mask>:
    c87a:	b510      	push	{r4, lr}
    c87c:	f7f7 ff48 	bl	4710 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    c880:	2000      	movs	r0, #0
    c882:	bd10      	pop	{r4, pc}

0000c884 <sdc_hci_cmd_le_set_phy>:
    c884:	f002 bf1f 	b.w	f6c6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000c888 <sdc_hci_cmd_le_set_random_address>:
    c888:	f002 bf36 	b.w	f6f8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000c88c <sdc_hci_cmd_le_set_scan_response_data>:
    c88c:	f002 bf42 	b.w	f714 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000c890 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    c890:	f002 bf55 	b.w	f73e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000c894 <sdc_hci_cmd_lc_disconnect>:
    c894:	f002 bcfc 	b.w	f290 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000c898 <sdc_hci_cmd_lc_read_remote_version_information>:
    c898:	f003 b8b0 	b.w	f9fc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    c89c:	b570      	push	{r4, r5, r6, lr}
    c89e:	880b      	ldrh	r3, [r1, #0]
    c8a0:	7cc4      	ldrb	r4, [r0, #19]
    c8a2:	f100 0518 	add.w	r5, r0, #24
    c8a6:	f3c3 060e 	ubfx	r6, r3, #0, #15
    c8aa:	8802      	ldrh	r2, [r0, #0]
    c8ac:	4435      	add	r5, r6
    c8ae:	1d64      	adds	r4, r4, #5
    c8b0:	882d      	ldrh	r5, [r5, #0]
    c8b2:	4422      	add	r2, r4
    c8b4:	b292      	uxth	r2, r2
    c8b6:	4425      	add	r5, r4
    c8b8:	1e54      	subs	r4, r2, #1
    c8ba:	442c      	add	r4, r5
    c8bc:	fb94 f4f2 	sdiv	r4, r4, r2
    c8c0:	fb02 6204 	mla	r2, r2, r4, r6
    c8c4:	8840      	ldrh	r0, [r0, #2]
    c8c6:	b292      	uxth	r2, r2
    c8c8:	4290      	cmp	r0, r2
    c8ca:	d903      	bls.n	c8d4 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    c8cc:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    c8d0:	4310      	orrs	r0, r2
    c8d2:	e002      	b.n	c8da <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    c8d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c8d8:	4398      	bics	r0, r3
    c8da:	8008      	strh	r0, [r1, #0]
    c8dc:	bd70      	pop	{r4, r5, r6, pc}
    c8de:	0442      	lsls	r2, r0, #17
    c8e0:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    c8e4:	d107      	bne.n	c8f6 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    c8e6:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    c8ea:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    c8ee:	4288      	cmp	r0, r1
    c8f0:	d001      	beq.n	c8f6 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    c8f2:	2001      	movs	r0, #1
    c8f4:	4770      	bx	lr
    c8f6:	2000      	movs	r0, #0
    c8f8:	4770      	bx	lr

0000c8fa <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    c8fa:	8881      	ldrh	r1, [r0, #4]
    c8fc:	88c0      	ldrh	r0, [r0, #6]
    c8fe:	4288      	cmp	r0, r1
    c900:	d101      	bne.n	c906 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    c902:	2001      	movs	r0, #1
    c904:	4770      	bx	lr
    c906:	2000      	movs	r0, #0
    c908:	4770      	bx	lr

0000c90a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    c90a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c90e:	460f      	mov	r7, r1
    c910:	4604      	mov	r4, r0
    c912:	f100 0118 	add.w	r1, r0, #24
    c916:	8880      	ldrh	r0, [r0, #4]
    c918:	2600      	movs	r6, #0
    c91a:	f3c0 000e 	ubfx	r0, r0, #0, #15
    c91e:	1845      	adds	r5, r0, r1
    c920:	603e      	str	r6, [r7, #0]
    c922:	89e0      	ldrh	r0, [r4, #14]
    c924:	2800      	cmp	r0, #0
    c926:	d016      	beq.n	c956 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    c928:	8961      	ldrh	r1, [r4, #10]
    c92a:	4408      	add	r0, r1
    c92c:	b280      	uxth	r0, r0
    c92e:	8160      	strh	r0, [r4, #10]
    c930:	8829      	ldrh	r1, [r5, #0]
    c932:	4288      	cmp	r0, r1
    c934:	d905      	bls.n	c942 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    c936:	f44f 71a9 	mov.w	r1, #338	; 0x152
    c93a:	f04f 0014 	mov.w	r0, #20
    c93e:	f7f7 fd4d 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c942:	d106      	bne.n	c952 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    c944:	f104 0104 	add.w	r1, r4, #4
    c948:	4620      	mov	r0, r4
    c94a:	f7ff ffa7 	bl	c89c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c94e:	8166      	strh	r6, [r4, #10]
    c950:	603d      	str	r5, [r7, #0]
    c952:	81e6      	strh	r6, [r4, #14]
    c954:	2001      	movs	r0, #1
    c956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c95a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    c95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c95e:	4604      	mov	r4, r0
    c960:	f100 0318 	add.w	r3, r0, #24
    c964:	88c0      	ldrh	r0, [r0, #6]
    c966:	460e      	mov	r6, r1
    c968:	f3c0 070e 	ubfx	r7, r0, #0, #15
    c96c:	8a20      	ldrh	r0, [r4, #16]
    c96e:	19d9      	adds	r1, r3, r7
    c970:	b108      	cbz	r0, c976 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    c972:	42b0      	cmp	r0, r6
    c974:	d202      	bcs.n	c97c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    c976:	2000      	movs	r0, #0
    c978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c97c:	89a0      	ldrh	r0, [r4, #12]
    c97e:	2500      	movs	r5, #0
    c980:	b140      	cbz	r0, c994 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    c982:	f8b1 c000 	ldrh.w	ip, [r1]
    c986:	4560      	cmp	r0, ip
    c988:	d006      	beq.n	c998 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    c98a:	f240 2105 	movw	r1, #517	; 0x205
    c98e:	2014      	movs	r0, #20
    c990:	f7f7 fd24 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c994:	800d      	strh	r5, [r1, #0]
    c996:	e00e      	b.n	c9b6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    c998:	f894 c013 	ldrb.w	ip, [r4, #19]
    c99c:	4418      	add	r0, r3
    c99e:	f10c 0c05 	add.w	ip, ip, #5
    c9a2:	44bc      	add	ip, r7
    c9a4:	4460      	add	r0, ip
    c9a6:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    c9aa:	f820 cc03 	strh.w	ip, [r0, #-3]
    c9ae:	f894 c016 	ldrb.w	ip, [r4, #22]
    c9b2:	f800 cc01 	strb.w	ip, [r0, #-1]
    c9b6:	89a0      	ldrh	r0, [r4, #12]
    c9b8:	4430      	add	r0, r6
    c9ba:	81a0      	strh	r0, [r4, #12]
    c9bc:	8808      	ldrh	r0, [r1, #0]
    c9be:	4430      	add	r0, r6
    c9c0:	8008      	strh	r0, [r1, #0]
    c9c2:	b12a      	cbz	r2, c9d0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    c9c4:	1da1      	adds	r1, r4, #6
    c9c6:	4620      	mov	r0, r4
    c9c8:	f7ff ff68 	bl	c89c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c9cc:	81a5      	strh	r5, [r4, #12]
    c9ce:	e00a      	b.n	c9e6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    c9d0:	7ce0      	ldrb	r0, [r4, #19]
    c9d2:	89a1      	ldrh	r1, [r4, #12]
    c9d4:	1d40      	adds	r0, r0, #5
    c9d6:	4438      	add	r0, r7
    c9d8:	4419      	add	r1, r3
    c9da:	4408      	add	r0, r1
    c9dc:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    c9e0:	82a1      	strh	r1, [r4, #20]
    c9e2:	7880      	ldrb	r0, [r0, #2]
    c9e4:	75a0      	strb	r0, [r4, #22]
    c9e6:	8225      	strh	r5, [r4, #16]
    c9e8:	2001      	movs	r0, #1
    c9ea:	e7c5      	b.n	c978 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000c9ec <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    c9ec:	1c80      	adds	r0, r0, #2
    c9ee:	4770      	bx	lr

0000c9f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    c9f0:	b510      	push	{r4, lr}
    c9f2:	4604      	mov	r4, r0
    c9f4:	88c0      	ldrh	r0, [r0, #6]
    c9f6:	88a1      	ldrh	r1, [r4, #4]
    c9f8:	4281      	cmp	r1, r0
    c9fa:	d003      	beq.n	ca04 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    c9fc:	8960      	ldrh	r0, [r4, #10]
    c9fe:	b908      	cbnz	r0, ca04 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    ca00:	89e0      	ldrh	r0, [r4, #14]
    ca02:	b108      	cbz	r0, ca08 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    ca04:	2000      	movs	r0, #0
    ca06:	bd10      	pop	{r4, pc}
    ca08:	1d21      	adds	r1, r4, #4
    ca0a:	4620      	mov	r0, r4
    ca0c:	f7ff ff46 	bl	c89c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ca10:	2000      	movs	r0, #0
    ca12:	81e0      	strh	r0, [r4, #14]
    ca14:	2001      	movs	r0, #1
    ca16:	bd10      	pop	{r4, pc}

0000ca18 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    ca18:	b510      	push	{r4, lr}
    ca1a:	4604      	mov	r4, r0
    ca1c:	f100 0218 	add.w	r2, r0, #24
    ca20:	88c0      	ldrh	r0, [r0, #6]
    ca22:	f3c0 000e 	ubfx	r0, r0, #0, #15
    ca26:	4402      	add	r2, r0
    ca28:	8820      	ldrh	r0, [r4, #0]
    ca2a:	2845      	cmp	r0, #69	; 0x45
    ca2c:	d200      	bcs.n	ca30 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    ca2e:	2045      	movs	r0, #69	; 0x45
    ca30:	4288      	cmp	r0, r1
    ca32:	d204      	bcs.n	ca3e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    ca34:	f240 1105 	movw	r1, #261	; 0x105
    ca38:	2014      	movs	r0, #20
    ca3a:	f7f7 fccf 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca3e:	7ca0      	ldrb	r0, [r4, #18]
    ca40:	2800      	cmp	r0, #0
    ca42:	d003      	beq.n	ca4c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    ca44:	8810      	ldrh	r0, [r2, #0]
    ca46:	4288      	cmp	r0, r1
    ca48:	d201      	bcs.n	ca4e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    ca4a:	2000      	movs	r0, #0
    ca4c:	bd10      	pop	{r4, pc}
    ca4e:	8011      	strh	r1, [r2, #0]
    ca50:	1da1      	adds	r1, r4, #6
    ca52:	4620      	mov	r0, r4
    ca54:	f7ff ff22 	bl	c89c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ca58:	2000      	movs	r0, #0
    ca5a:	74a0      	strb	r0, [r4, #18]
    ca5c:	2001      	movs	r0, #1
    ca5e:	bd10      	pop	{r4, pc}

0000ca60 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    ca60:	b510      	push	{r4, lr}
    ca62:	88c4      	ldrh	r4, [r0, #6]
    ca64:	8883      	ldrh	r3, [r0, #4]
    ca66:	4601      	mov	r1, r0
    ca68:	f100 0218 	add.w	r2, r0, #24
    ca6c:	f3c3 000e 	ubfx	r0, r3, #0, #15
    ca70:	4410      	add	r0, r2
    ca72:	42a3      	cmp	r3, r4
    ca74:	d002      	beq.n	ca7c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    ca76:	8949      	ldrh	r1, [r1, #10]
    ca78:	2900      	cmp	r1, #0
    ca7a:	d000      	beq.n	ca7e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    ca7c:	2000      	movs	r0, #0
    ca7e:	bd10      	pop	{r4, pc}

0000ca80 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    ca80:	8803      	ldrh	r3, [r0, #0]
    ca82:	2b45      	cmp	r3, #69	; 0x45
    ca84:	d200      	bcs.n	ca88 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    ca86:	2345      	movs	r3, #69	; 0x45
    ca88:	8013      	strh	r3, [r2, #0]
    ca8a:	88c2      	ldrh	r2, [r0, #6]
    ca8c:	f3c2 030e 	ubfx	r3, r2, #0, #15
    ca90:	f100 0218 	add.w	r2, r0, #24
    ca94:	441a      	add	r2, r3
    ca96:	600a      	str	r2, [r1, #0]
    ca98:	8980      	ldrh	r0, [r0, #12]
    ca9a:	4770      	bx	lr

0000ca9c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    ca9c:	7cc0      	ldrb	r0, [r0, #19]
    ca9e:	1d40      	adds	r0, r0, #5
    caa0:	4408      	add	r0, r1
    caa2:	1ec0      	subs	r0, r0, #3
    caa4:	6010      	str	r0, [r2, #0]
    caa6:	8808      	ldrh	r0, [r1, #0]
    caa8:	4770      	bx	lr

0000caaa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    caaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    caae:	460e      	mov	r6, r1
    cab0:	88c1      	ldrh	r1, [r0, #6]
    cab2:	8902      	ldrh	r2, [r0, #8]
    cab4:	4604      	mov	r4, r0
    cab6:	f100 0818 	add.w	r8, r0, #24
    caba:	8800      	ldrh	r0, [r0, #0]
    cabc:	f3c1 050e 	ubfx	r5, r1, #0, #15
    cac0:	f3c2 070e 	ubfx	r7, r2, #0, #15
    cac4:	2845      	cmp	r0, #69	; 0x45
    cac6:	d200      	bcs.n	caca <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    cac8:	2045      	movs	r0, #69	; 0x45
    caca:	42b0      	cmp	r0, r6
    cacc:	d203      	bcs.n	cad6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    cace:	21c7      	movs	r1, #199	; 0xc7
    cad0:	2014      	movs	r0, #20
    cad2:	f7f7 fc83 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cad6:	4610      	mov	r0, r2
    cad8:	f7ff ff01 	bl	c8de <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    cadc:	b110      	cbz	r0, cae4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    cade:	2000      	movs	r0, #0
    cae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cae4:	42af      	cmp	r7, r5
    cae6:	d908      	bls.n	cafa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    cae8:	7ce1      	ldrb	r1, [r4, #19]
    caea:	1b78      	subs	r0, r7, r5
    caec:	1a40      	subs	r0, r0, r1
    caee:	1f40      	subs	r0, r0, #5
    caf0:	4286      	cmp	r6, r0
    caf2:	dd02      	ble.n	cafa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    caf4:	2000      	movs	r0, #0
    caf6:	74a0      	strb	r0, [r4, #18]
    caf8:	e7f1      	b.n	cade <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    cafa:	eb08 0005 	add.w	r0, r8, r5
    cafe:	2101      	movs	r1, #1
    cb00:	8006      	strh	r6, [r0, #0]
    cb02:	74a1      	strb	r1, [r4, #18]
    cb04:	e7ec      	b.n	cae0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000cb06 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    cb06:	b538      	push	{r3, r4, r5, lr}
    cb08:	88c4      	ldrh	r4, [r0, #6]
    cb0a:	8881      	ldrh	r1, [r0, #4]
    cb0c:	f100 0218 	add.w	r2, r0, #24
    cb10:	f3c1 030e 	ubfx	r3, r1, #0, #15
    cb14:	441a      	add	r2, r3
    cb16:	42a1      	cmp	r1, r4
    cb18:	d010      	beq.n	cb3c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cb1a:	8943      	ldrh	r3, [r0, #10]
    cb1c:	89c5      	ldrh	r5, [r0, #14]
    cb1e:	8812      	ldrh	r2, [r2, #0]
    cb20:	442b      	add	r3, r5
    cb22:	4293      	cmp	r3, r2
    cb24:	d308      	bcc.n	cb38 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    cb26:	f8ad 1000 	strh.w	r1, [sp]
    cb2a:	4669      	mov	r1, sp
    cb2c:	f7ff feb6 	bl	c89c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cb30:	f8bd 0000 	ldrh.w	r0, [sp]
    cb34:	42a0      	cmp	r0, r4
    cb36:	d001      	beq.n	cb3c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cb38:	2001      	movs	r0, #1
    cb3a:	bd38      	pop	{r3, r4, r5, pc}
    cb3c:	2000      	movs	r0, #0
    cb3e:	bd38      	pop	{r3, r4, r5, pc}

0000cb40 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    cb40:	b570      	push	{r4, r5, r6, lr}
    cb42:	88c6      	ldrh	r6, [r0, #6]
    cb44:	8885      	ldrh	r5, [r0, #4]
    cb46:	4603      	mov	r3, r0
    cb48:	f100 0418 	add.w	r4, r0, #24
    cb4c:	f3c5 000e 	ubfx	r0, r5, #0, #15
    cb50:	4420      	add	r0, r4
    cb52:	42b5      	cmp	r5, r6
    cb54:	d102      	bne.n	cb5c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    cb56:	2000      	movs	r0, #0
    cb58:	81d8      	strh	r0, [r3, #14]
    cb5a:	bd70      	pop	{r4, r5, r6, pc}
    cb5c:	8804      	ldrh	r4, [r0, #0]
    cb5e:	895d      	ldrh	r5, [r3, #10]
    cb60:	7cde      	ldrb	r6, [r3, #19]
    cb62:	1b64      	subs	r4, r4, r5
    cb64:	4435      	add	r5, r6
    cb66:	4428      	add	r0, r5
    cb68:	880d      	ldrh	r5, [r1, #0]
    cb6a:	b2a4      	uxth	r4, r4
    cb6c:	1c80      	adds	r0, r0, #2
    cb6e:	42a5      	cmp	r5, r4
    cb70:	d900      	bls.n	cb74 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    cb72:	800c      	strh	r4, [r1, #0]
    cb74:	895c      	ldrh	r4, [r3, #10]
    cb76:	b124      	cbz	r4, cb82 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    cb78:	2400      	movs	r4, #0
    cb7a:	7014      	strb	r4, [r2, #0]
    cb7c:	8809      	ldrh	r1, [r1, #0]
    cb7e:	81d9      	strh	r1, [r3, #14]
    cb80:	bd70      	pop	{r4, r5, r6, pc}
    cb82:	2401      	movs	r4, #1
    cb84:	e7f9      	b.n	cb7a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000cb86 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    cb86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb8a:	461d      	mov	r5, r3
    cb8c:	4616      	mov	r6, r2
    cb8e:	9f06      	ldr	r7, [sp, #24]
    cb90:	460b      	mov	r3, r1
    cb92:	4604      	mov	r4, r0
    cb94:	463a      	mov	r2, r7
    cb96:	4629      	mov	r1, r5
    cb98:	4630      	mov	r0, r6
    cb9a:	f000 f839 	bl	cc10 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cb9e:	4283      	cmp	r3, r0
    cba0:	d201      	bcs.n	cba6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    cba2:	219f      	movs	r1, #159	; 0x9f
    cba4:	e012      	b.n	cbcc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    cba6:	07a0      	lsls	r0, r4, #30
    cba8:	d001      	beq.n	cbae <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    cbaa:	21a0      	movs	r1, #160	; 0xa0
    cbac:	e00e      	b.n	cbcc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    cbae:	2218      	movs	r2, #24
    cbb0:	2100      	movs	r1, #0
    cbb2:	4620      	mov	r0, r4
    cbb4:	f7ff f9e9 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cbb8:	19a8      	adds	r0, r5, r6
    cbba:	1d40      	adds	r0, r0, #5
    cbbc:	4378      	muls	r0, r7
    cbbe:	b280      	uxth	r0, r0
    cbc0:	74e5      	strb	r5, [r4, #19]
    cbc2:	8060      	strh	r0, [r4, #2]
    cbc4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    cbc8:	d903      	bls.n	cbd2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    cbca:	21a5      	movs	r1, #165	; 0xa5
    cbcc:	2014      	movs	r0, #20
    cbce:	f7f7 fc05 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cbd2:	8026      	strh	r6, [r4, #0]
    cbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cbd8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    cbd8:	b570      	push	{r4, r5, r6, lr}
    cbda:	460b      	mov	r3, r1
    cbdc:	4604      	mov	r4, r0
    cbde:	f100 0118 	add.w	r1, r0, #24
    cbe2:	8902      	ldrh	r2, [r0, #8]
    cbe4:	8880      	ldrh	r0, [r0, #4]
    cbe6:	f3c2 050e 	ubfx	r5, r2, #0, #15
    cbea:	440d      	add	r5, r1
    cbec:	4282      	cmp	r2, r0
    cbee:	d101      	bne.n	cbf4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    cbf0:	2000      	movs	r0, #0
    cbf2:	bd70      	pop	{r4, r5, r6, pc}
    cbf4:	b123      	cbz	r3, cc00 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    cbf6:	7ce2      	ldrb	r2, [r4, #19]
    cbf8:	1ca9      	adds	r1, r5, #2
    cbfa:	4618      	mov	r0, r3
    cbfc:	f7ff f94b 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc00:	882d      	ldrh	r5, [r5, #0]
    cc02:	f104 0108 	add.w	r1, r4, #8
    cc06:	4620      	mov	r0, r4
    cc08:	f7ff fe48 	bl	c89c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cc0c:	4628      	mov	r0, r5
    cc0e:	bd70      	pop	{r4, r5, r6, pc}

0000cc10 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    cc10:	4401      	add	r1, r0
    cc12:	1d49      	adds	r1, r1, #5
    cc14:	4351      	muls	r1, r2
    cc16:	b28a      	uxth	r2, r1
    cc18:	2100      	movs	r1, #0
    cc1a:	2845      	cmp	r0, #69	; 0x45
    cc1c:	d202      	bcs.n	cc24 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    cc1e:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    cc22:	b281      	uxth	r1, r0
    cc24:	3218      	adds	r2, #24
    cc26:	1850      	adds	r0, r2, r1
    cc28:	b280      	uxth	r0, r0
    cc2a:	4770      	bx	lr

0000cc2c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    cc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cc30:	4688      	mov	r8, r1
    cc32:	88c1      	ldrh	r1, [r0, #6]
    cc34:	4604      	mov	r4, r0
    cc36:	8900      	ldrh	r0, [r0, #8]
    cc38:	f3c1 060e 	ubfx	r6, r1, #0, #15
    cc3c:	f104 0518 	add.w	r5, r4, #24
    cc40:	f3c0 070e 	ubfx	r7, r0, #0, #15
    cc44:	eb05 0906 	add.w	r9, r5, r6
    cc48:	f7ff fe49 	bl	c8de <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    cc4c:	2200      	movs	r2, #0
    cc4e:	b998      	cbnz	r0, cc78 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    cc50:	8820      	ldrh	r0, [r4, #0]
    cc52:	2845      	cmp	r0, #69	; 0x45
    cc54:	d200      	bcs.n	cc58 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    cc56:	2045      	movs	r0, #69	; 0x45
    cc58:	42b7      	cmp	r7, r6
    cc5a:	d906      	bls.n	cc6a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    cc5c:	7ce3      	ldrb	r3, [r4, #19]
    cc5e:	1bb9      	subs	r1, r7, r6
    cc60:	1ac9      	subs	r1, r1, r3
    cc62:	1f49      	subs	r1, r1, #5
    cc64:	4281      	cmp	r1, r0
    cc66:	da00      	bge.n	cc6a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    cc68:	4608      	mov	r0, r1
    cc6a:	89a1      	ldrh	r1, [r4, #12]
    cc6c:	b111      	cbz	r1, cc74 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    cc6e:	f8b9 3000 	ldrh.w	r3, [r9]
    cc72:	1ac0      	subs	r0, r0, r3
    cc74:	4540      	cmp	r0, r8
    cc76:	da03      	bge.n	cc80 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    cc78:	8222      	strh	r2, [r4, #16]
    cc7a:	2000      	movs	r0, #0
    cc7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc80:	7ce0      	ldrb	r0, [r4, #19]
    cc82:	4429      	add	r1, r5
    cc84:	1d40      	adds	r0, r0, #5
    cc86:	4430      	add	r0, r6
    cc88:	4408      	add	r0, r1
    cc8a:	f8a4 8010 	strh.w	r8, [r4, #16]
    cc8e:	1ec0      	subs	r0, r0, #3
    cc90:	e7f4      	b.n	cc7c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000cc92 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    cc92:	2100      	movs	r1, #0
    cc94:	8181      	strh	r1, [r0, #12]
    cc96:	8201      	strh	r1, [r0, #16]
    cc98:	4770      	bx	lr

0000cc9a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    cc9a:	b570      	push	{r4, r5, r6, lr}
    cc9c:	2300      	movs	r3, #0
    cc9e:	f1a1 0208 	sub.w	r2, r1, #8
    cca2:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    cca6:	42a2      	cmp	r2, r4
    cca8:	d304      	bcc.n	ccb4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    ccaa:	f240 11cd 	movw	r1, #461	; 0x1cd
    ccae:	2015      	movs	r0, #21
    ccb0:	f7f7 fb94 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ccb4:	6802      	ldr	r2, [r0, #0]
    ccb6:	b90a      	cbnz	r2, ccbc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    ccb8:	e01e      	b.n	ccf8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    ccba:	4610      	mov	r0, r2
    ccbc:	6802      	ldr	r2, [r0, #0]
    ccbe:	8893      	ldrh	r3, [r2, #4]
    ccc0:	428b      	cmp	r3, r1
    ccc2:	d002      	beq.n	ccca <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    ccc4:	6813      	ldr	r3, [r2, #0]
    ccc6:	2b00      	cmp	r3, #0
    ccc8:	d1f7      	bne.n	ccba <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    ccca:	8894      	ldrh	r4, [r2, #4]
    cccc:	4613      	mov	r3, r2
    ccce:	428c      	cmp	r4, r1
    ccd0:	d101      	bne.n	ccd6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    ccd2:	6811      	ldr	r1, [r2, #0]
    ccd4:	e00d      	b.n	ccf2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    ccd6:	f101 0508 	add.w	r5, r1, #8
    ccda:	b2ae      	uxth	r6, r5
    ccdc:	2500      	movs	r5, #0
    ccde:	42b4      	cmp	r4, r6
    cce0:	d309      	bcc.n	ccf6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    cce2:	1a64      	subs	r4, r4, r1
    cce4:	4411      	add	r1, r2
    cce6:	600d      	str	r5, [r1, #0]
    cce8:	808c      	strh	r4, [r1, #4]
    ccea:	6802      	ldr	r2, [r0, #0]
    ccec:	6812      	ldr	r2, [r2, #0]
    ccee:	6002      	str	r2, [r0, #0]
    ccf0:	600a      	str	r2, [r1, #0]
    ccf2:	6001      	str	r1, [r0, #0]
    ccf4:	e000      	b.n	ccf8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    ccf6:	2300      	movs	r3, #0
    ccf8:	4618      	mov	r0, r3
    ccfa:	bd70      	pop	{r4, r5, r6, pc}

0000ccfc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    ccfc:	b510      	push	{r4, lr}
    ccfe:	000c      	movs	r4, r1
    cd00:	d004      	beq.n	cd0c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    cd02:	2c08      	cmp	r4, #8
    cd04:	d207      	bcs.n	cd16 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    cd06:	f240 1195 	movw	r1, #405	; 0x195
    cd0a:	e00a      	b.n	cd22 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    cd0c:	b108      	cbz	r0, cd12 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    cd0e:	2100      	movs	r1, #0
    cd10:	6001      	str	r1, [r0, #0]
    cd12:	2000      	movs	r0, #0
    cd14:	bd10      	pop	{r4, pc}
    cd16:	b158      	cbz	r0, cd30 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    cd18:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    cd1c:	d304      	bcc.n	cd28 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    cd1e:	f240 11a7 	movw	r1, #423	; 0x1a7
    cd22:	2015      	movs	r0, #21
    cd24:	f7f7 fb5a 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd28:	b2a1      	uxth	r1, r4
    cd2a:	6800      	ldr	r0, [r0, #0]
    cd2c:	f000 f814 	bl	cd58 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    cd30:	1d20      	adds	r0, r4, #4
    cd32:	bd10      	pop	{r4, pc}

0000cd34 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    cd34:	2100      	movs	r1, #0
    cd36:	6802      	ldr	r2, [r0, #0]
    cd38:	e003      	b.n	cd42 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    cd3a:	8893      	ldrh	r3, [r2, #4]
    cd3c:	6812      	ldr	r2, [r2, #0]
    cd3e:	4419      	add	r1, r3
    cd40:	b289      	uxth	r1, r1
    cd42:	2a00      	cmp	r2, #0
    cd44:	d1f9      	bne.n	cd3a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    cd46:	f000 b807 	b.w	cd58 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000cd4a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    cd4a:	2300      	movs	r3, #0
    cd4c:	600b      	str	r3, [r1, #0]
    cd4e:	808a      	strh	r2, [r1, #4]
    cd50:	6802      	ldr	r2, [r0, #0]
    cd52:	600a      	str	r2, [r1, #0]
    cd54:	6001      	str	r1, [r0, #0]
    cd56:	4770      	bx	lr
    cd58:	2300      	movs	r3, #0
    cd5a:	6043      	str	r3, [r0, #4]
    cd5c:	1d02      	adds	r2, r0, #4
    cd5e:	8101      	strh	r1, [r0, #8]
    cd60:	6002      	str	r2, [r0, #0]
    cd62:	4770      	bx	lr

0000cd64 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    cd64:	b51c      	push	{r2, r3, r4, lr}
    cd66:	4604      	mov	r4, r0
    cd68:	2000      	movs	r0, #0
    cd6a:	9001      	str	r0, [sp, #4]
    cd6c:	9000      	str	r0, [sp, #0]
    cd6e:	f88d 4006 	strb.w	r4, [sp, #6]
    cd72:	e00a      	b.n	cd8a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    cd74:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    cd78:	4621      	mov	r1, r4
    cd7a:	f7f7 fdb1 	bl	48e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    cd7e:	b120      	cbz	r0, cd8a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    cd80:	f240 21a5 	movw	r1, #677	; 0x2a5
    cd84:	2017      	movs	r0, #23
    cd86:	f7f7 fb29 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd8a:	4668      	mov	r0, sp
    cd8c:	f7f7 fd60 	bl	4850 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    cd90:	2800      	cmp	r0, #0
    cd92:	d0ef      	beq.n	cd74 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    cd94:	bd1c      	pop	{r2, r3, r4, pc}

0000cd96 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    cd96:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    cd9a:	3aff      	subs	r2, #255	; 0xff
    cd9c:	d001      	beq.n	cda2 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    cd9e:	2902      	cmp	r1, #2
    cda0:	d301      	bcc.n	cda6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    cda2:	2000      	movs	r0, #0
    cda4:	4770      	bx	lr
    cda6:	f7f7 bdcd 	b.w	4944 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    cdaa:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    cdae:	3aff      	subs	r2, #255	; 0xff
    cdb0:	d001      	beq.n	cdb6 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    cdb2:	2902      	cmp	r1, #2
    cdb4:	d301      	bcc.n	cdba <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    cdb6:	2000      	movs	r0, #0
    cdb8:	4770      	bx	lr
    cdba:	f7f7 bdeb 	b.w	4994 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    cdbe:	b510      	push	{r4, lr}
    cdc0:	4604      	mov	r4, r0
    cdc2:	f7f7 fe33 	bl	4a2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    cdc6:	42a0      	cmp	r0, r4
    cdc8:	d901      	bls.n	cdce <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>
    cdca:	2001      	movs	r0, #1
    cdcc:	bd10      	pop	{r4, pc}
    cdce:	2000      	movs	r0, #0
    cdd0:	bd10      	pop	{r4, pc}

0000cdd2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    cdd2:	b570      	push	{r4, r5, r6, lr}
    cdd4:	460e      	mov	r6, r1
    cdd6:	461d      	mov	r5, r3
    cdd8:	4611      	mov	r1, r2
    cdda:	f000 f813 	bl	ce04 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    cdde:	4604      	mov	r4, r0
    cde0:	4629      	mov	r1, r5
    cde2:	4630      	mov	r0, r6
    cde4:	f000 f804 	bl	cdf0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    cde8:	4420      	add	r0, r4
    cdea:	1d00      	adds	r0, r0, #4
    cdec:	b280      	uxth	r0, r0
    cdee:	bd70      	pop	{r4, r5, r6, pc}
    cdf0:	b510      	push	{r4, lr}
    cdf2:	460a      	mov	r2, r1
    cdf4:	2109      	movs	r1, #9
    cdf6:	f7ff ff0b 	bl	cc10 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cdfa:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    cdfe:	1cc0      	adds	r0, r0, #3
    ce00:	4008      	ands	r0, r1
    ce02:	bd10      	pop	{r4, pc}
    ce04:	b510      	push	{r4, lr}
    ce06:	460a      	mov	r2, r1
    ce08:	210a      	movs	r1, #10
    ce0a:	f7ff ff01 	bl	cc10 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    ce0e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    ce12:	1cc0      	adds	r0, r0, #3
    ce14:	4008      	ands	r0, r1
    ce16:	bd10      	pop	{r4, pc}
    ce18:	b109      	cbz	r1, ce1e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    ce1a:	2100      	movs	r1, #0
    ce1c:	e000      	b.n	ce20 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    ce1e:	2102      	movs	r1, #2
    ce20:	1843      	adds	r3, r0, r1
    ce22:	7d1a      	ldrb	r2, [r3, #20]
    ce24:	2a02      	cmp	r2, #2
    ce26:	d008      	beq.n	ce3a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    ce28:	7d5b      	ldrb	r3, [r3, #21]
    ce2a:	2b02      	cmp	r3, #2
    ce2c:	d009      	beq.n	ce42 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    ce2e:	2a03      	cmp	r2, #3
    ce30:	d003      	beq.n	ce3a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    ce32:	2b03      	cmp	r3, #3
    ce34:	d005      	beq.n	ce42 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    ce36:	2000      	movs	r0, #0
    ce38:	4770      	bx	lr
    ce3a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ce3e:	8b00      	ldrh	r0, [r0, #24]
    ce40:	4770      	bx	lr
    ce42:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ce46:	8b40      	ldrh	r0, [r0, #26]
    ce48:	4770      	bx	lr
    ce4a:	b109      	cbz	r1, ce50 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    ce4c:	2100      	movs	r1, #0
    ce4e:	e000      	b.n	ce52 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    ce50:	2102      	movs	r1, #2
    ce52:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ce56:	8b01      	ldrh	r1, [r0, #24]
    ce58:	b911      	cbnz	r1, ce60 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    ce5a:	8b40      	ldrh	r0, [r0, #26]
    ce5c:	2800      	cmp	r0, #0
    ce5e:	d000      	beq.n	ce62 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    ce60:	2001      	movs	r0, #1
    ce62:	4770      	bx	lr
    ce64:	b538      	push	{r3, r4, r5, lr}
    ce66:	7883      	ldrb	r3, [r0, #2]
    ce68:	f88d 3000 	strb.w	r3, [sp]
    ce6c:	9b00      	ldr	r3, [sp, #0]
    ce6e:	9300      	str	r3, [sp, #0]
    ce70:	f89d 3000 	ldrb.w	r3, [sp]
    ce74:	b95b      	cbnz	r3, ce8e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    ce76:	2400      	movs	r4, #0
    ce78:	b10a      	cbz	r2, ce7e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    ce7a:	2300      	movs	r3, #0
    ce7c:	e000      	b.n	ce80 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    ce7e:	2302      	movs	r3, #2
    ce80:	18c2      	adds	r2, r0, r3
    ce82:	7d15      	ldrb	r5, [r2, #20]
    ce84:	2d02      	cmp	r5, #2
    ce86:	d004      	beq.n	ce92 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    ce88:	7d52      	ldrb	r2, [r2, #21]
    ce8a:	2a02      	cmp	r2, #2
    ce8c:	d004      	beq.n	ce98 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    ce8e:	2000      	movs	r0, #0
    ce90:	bd38      	pop	{r3, r4, r5, pc}
    ce92:	461a      	mov	r2, r3
    ce94:	1c5b      	adds	r3, r3, #1
    ce96:	e000      	b.n	ce9a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    ce98:	1c5a      	adds	r2, r3, #1
    ce9a:	b179      	cbz	r1, cebc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    ce9c:	18c5      	adds	r5, r0, r3
    ce9e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    cea2:	752c      	strb	r4, [r5, #20]
    cea4:	831c      	strh	r4, [r3, #24]
    cea6:	2303      	movs	r3, #3
    cea8:	1884      	adds	r4, r0, r2
    ceaa:	7523      	strb	r3, [r4, #20]
    ceac:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    ceb0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    ceb4:	685b      	ldr	r3, [r3, #4]
    ceb6:	600b      	str	r3, [r1, #0]
    ceb8:	8b00      	ldrh	r0, [r0, #24]
    ceba:	8088      	strh	r0, [r1, #4]
    cebc:	2001      	movs	r0, #1
    cebe:	bd38      	pop	{r3, r4, r5, pc}
    cec0:	b510      	push	{r4, lr}
    cec2:	b109      	cbz	r1, cec8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    cec4:	2100      	movs	r1, #0
    cec6:	e000      	b.n	ceca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    cec8:	2102      	movs	r1, #2
    ceca:	1843      	adds	r3, r0, r1
    cecc:	7d1c      	ldrb	r4, [r3, #20]
    cece:	4294      	cmp	r4, r2
    ced0:	d103      	bne.n	ceda <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    ced2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ced6:	8b00      	ldrh	r0, [r0, #24]
    ced8:	bd10      	pop	{r4, pc}
    ceda:	7d5b      	ldrb	r3, [r3, #21]
    cedc:	4293      	cmp	r3, r2
    cede:	d103      	bne.n	cee8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    cee0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    cee4:	8b40      	ldrh	r0, [r0, #26]
    cee6:	bd10      	pop	{r4, pc}
    cee8:	2000      	movs	r0, #0
    ceea:	bd10      	pop	{r4, pc}
    ceec:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    cef0:	d201      	bcs.n	cef6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    cef2:	0841      	lsrs	r1, r0, #1
    cef4:	e000      	b.n	cef8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    cef6:	21ff      	movs	r1, #255	; 0xff
    cef8:	1a40      	subs	r0, r0, r1
    cefa:	f240 6172 	movw	r1, #1650	; 0x672
    cefe:	4288      	cmp	r0, r1
    cf00:	db00      	blt.n	cf04 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    cf02:	4608      	mov	r0, r1
    cf04:	b280      	uxth	r0, r0
    cf06:	4770      	bx	lr

0000cf08 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    cf08:	2101      	movs	r1, #1
    cf0a:	f7ff bf85 	b.w	ce18 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000cf0e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    cf0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf12:	4606      	mov	r6, r0
    cf14:	f342 0780 	sbfx	r7, r2, #2, #1
    cf18:	7848      	ldrb	r0, [r1, #1]
    cf1a:	460c      	mov	r4, r1
    cf1c:	f022 0504 	bic.w	r5, r2, #4
    cf20:	1c7f      	adds	r7, r7, #1
    cf22:	b100      	cbz	r0, cf26 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    cf24:	b90d      	cbnz	r5, cf2a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    cf26:	4328      	orrs	r0, r5
    cf28:	d104      	bne.n	cf34 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    cf2a:	b145      	cbz	r5, cf3e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    cf2c:	2100      	movs	r1, #0
    cf2e:	4620      	mov	r0, r4
    cf30:	f7f7 fe7a 	bl	4c28 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    cf34:	20ff      	movs	r0, #255	; 0xff
    cf36:	70a0      	strb	r0, [r4, #2]
    cf38:	b11f      	cbz	r7, cf42 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    cf3a:	2000      	movs	r0, #0
    cf3c:	e002      	b.n	cf44 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    cf3e:	2101      	movs	r1, #1
    cf40:	e7f5      	b.n	cf2e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    cf42:	2002      	movs	r0, #2
    cf44:	1821      	adds	r1, r4, r0
    cf46:	7d09      	ldrb	r1, [r1, #20]
    cf48:	2903      	cmp	r1, #3
    cf4a:	d102      	bne.n	cf52 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    cf4c:	2d02      	cmp	r5, #2
    cf4e:	d000      	beq.n	cf52 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    cf50:	1c40      	adds	r0, r0, #1
    cf52:	1822      	adds	r2, r4, r0
    cf54:	2101      	movs	r1, #1
    cf56:	7511      	strb	r1, [r2, #20]
    cf58:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    cf5c:	2200      	movs	r2, #0
    cf5e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    cf62:	830a      	strh	r2, [r1, #24]
    cf64:	6840      	ldr	r0, [r0, #4]
    cf66:	70a2      	strb	r2, [r4, #2]
    cf68:	4631      	mov	r1, r6
    cf6a:	f362 010f 	bfi	r1, r2, #0, #16
    cf6e:	e9c6 0100 	strd	r0, r1, [r6]
    cf72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cf76 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    cf76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf7a:	461e      	mov	r6, r3
    cf7c:	4613      	mov	r3, r2
    cf7e:	4604      	mov	r4, r0
    cf80:	b109      	cbz	r1, cf86 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    cf82:	2000      	movs	r0, #0
    cf84:	e000      	b.n	cf88 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    cf86:	2002      	movs	r0, #2
    cf88:	21ff      	movs	r1, #255	; 0xff
    cf8a:	70a1      	strb	r1, [r4, #2]
    cf8c:	1821      	adds	r1, r4, r0
    cf8e:	7d0a      	ldrb	r2, [r1, #20]
    cf90:	2a01      	cmp	r2, #1
    cf92:	d003      	beq.n	cf9c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    cf94:	7d49      	ldrb	r1, [r1, #21]
    cf96:	2901      	cmp	r1, #1
    cf98:	d10c      	bne.n	cfb4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    cf9a:	1c40      	adds	r0, r0, #1
    cf9c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    cfa0:	2700      	movs	r7, #0
    cfa2:	8b29      	ldrh	r1, [r5, #24]
    cfa4:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    cfa8:	198a      	adds	r2, r1, r6
    cfaa:	4562      	cmp	r2, ip
    cfac:	d905      	bls.n	cfba <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    cfae:	4420      	add	r0, r4
    cfb0:	832f      	strh	r7, [r5, #24]
    cfb2:	7507      	strb	r7, [r0, #20]
    cfb4:	2000      	movs	r0, #0
    cfb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cfba:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    cfbe:	4632      	mov	r2, r6
    cfc0:	6840      	ldr	r0, [r0, #4]
    cfc2:	4408      	add	r0, r1
    cfc4:	4619      	mov	r1, r3
    cfc6:	f7fe ff66 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cfca:	8b28      	ldrh	r0, [r5, #24]
    cfcc:	4430      	add	r0, r6
    cfce:	8328      	strh	r0, [r5, #24]
    cfd0:	70a7      	strb	r7, [r4, #2]
    cfd2:	2001      	movs	r0, #1
    cfd4:	e7ef      	b.n	cfb6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000cfd6 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    cfd6:	2202      	movs	r2, #2
    cfd8:	2100      	movs	r1, #0
    cfda:	f7ff bf71 	b.w	cec0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000cfde <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    cfde:	b510      	push	{r4, lr}
    cfe0:	2101      	movs	r1, #1
    cfe2:	f7ff ff32 	bl	ce4a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    cfe6:	2800      	cmp	r0, #0
    cfe8:	d000      	beq.n	cfec <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    cfea:	2001      	movs	r0, #1
    cfec:	bd10      	pop	{r4, pc}

0000cfee <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    cfee:	2201      	movs	r2, #1
    cff0:	f7ff bf38 	b.w	ce64 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000cff4 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    cff4:	2200      	movs	r2, #0
    cff6:	f7ff bf35 	b.w	ce64 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000cffa <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    cffa:	b570      	push	{r4, r5, r6, lr}
    cffc:	b109      	cbz	r1, d002 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    cffe:	2300      	movs	r3, #0
    d000:	e000      	b.n	d004 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d002:	2302      	movs	r3, #2
    d004:	21ff      	movs	r1, #255	; 0xff
    d006:	7081      	strb	r1, [r0, #2]
    d008:	18c1      	adds	r1, r0, r3
    d00a:	2402      	movs	r4, #2
    d00c:	7d0d      	ldrb	r5, [r1, #20]
    d00e:	2d01      	cmp	r5, #1
    d010:	d007      	beq.n	d022 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d012:	7d4d      	ldrb	r5, [r1, #21]
    d014:	2d01      	cmp	r5, #1
    d016:	d009      	beq.n	d02c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d018:	f44f 718b 	mov.w	r1, #278	; 0x116
    d01c:	2009      	movs	r0, #9
    d01e:	f7f7 f9dd 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d022:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d026:	831a      	strh	r2, [r3, #24]
    d028:	750c      	strb	r4, [r1, #20]
    d02a:	e003      	b.n	d034 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    d02c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d030:	835a      	strh	r2, [r3, #26]
    d032:	754c      	strb	r4, [r1, #21]
    d034:	2100      	movs	r1, #0
    d036:	7081      	strb	r1, [r0, #2]
    d038:	bd70      	pop	{r4, r5, r6, pc}

0000d03a <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    d03a:	2101      	movs	r1, #1
    d03c:	7001      	strb	r1, [r0, #0]
    d03e:	4770      	bx	lr

0000d040 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    d040:	2201      	movs	r2, #1
    d042:	4611      	mov	r1, r2
    d044:	f7ff bf3c 	b.w	cec0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d048 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    d048:	2201      	movs	r2, #1
    d04a:	2100      	movs	r1, #0
    d04c:	f7ff bf38 	b.w	cec0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d050 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    d050:	2100      	movs	r1, #0
    d052:	f7ff bee1 	b.w	ce18 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d056:	2800      	cmp	r0, #0
    d058:	db09      	blt.n	d06e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    d05a:	f000 021f 	and.w	r2, r0, #31
    d05e:	2101      	movs	r1, #1
    d060:	4091      	lsls	r1, r2
    d062:	0940      	lsrs	r0, r0, #5
    d064:	0080      	lsls	r0, r0, #2
    d066:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d06a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d06e:	4770      	bx	lr
    d070:	2800      	cmp	r0, #0
    d072:	db0d      	blt.n	d090 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    d074:	f000 021f 	and.w	r2, r0, #31
    d078:	2101      	movs	r1, #1
    d07a:	4091      	lsls	r1, r2
    d07c:	0940      	lsrs	r0, r0, #5
    d07e:	0080      	lsls	r0, r0, #2
    d080:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d084:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d088:	f3bf 8f4f 	dsb	sy
    d08c:	f3bf 8f6f 	isb	sy
    d090:	4770      	bx	lr
    d092:	b510      	push	{r4, lr}
    d094:	200e      	movs	r0, #14
    d096:	f7ff ffeb 	bl	d070 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d09a:	200e      	movs	r0, #14
    d09c:	f7ff ffdb 	bl	d056 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d0a0:	200f      	movs	r0, #15
    d0a2:	f7ff ffe5 	bl	d070 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d0a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d0aa:	200f      	movs	r0, #15
    d0ac:	f7ff bfd3 	b.w	d056 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d0b0:	2800      	cmp	r0, #0
    d0b2:	db09      	blt.n	d0c8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    d0b4:	f000 021f 	and.w	r2, r0, #31
    d0b8:	2101      	movs	r1, #1
    d0ba:	4091      	lsls	r1, r2
    d0bc:	0940      	lsrs	r0, r0, #5
    d0be:	0080      	lsls	r0, r0, #2
    d0c0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d0c4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d0c8:	4770      	bx	lr
    d0ca:	5840      	ldr	r0, [r0, r1]
    d0cc:	2800      	cmp	r0, #0
    d0ce:	d000      	beq.n	d0d2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    d0d0:	2001      	movs	r0, #1
    d0d2:	4770      	bx	lr

0000d0d4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    d0d4:	b510      	push	{r4, lr}
    d0d6:	4604      	mov	r4, r0
    d0d8:	4620      	mov	r0, r4
    d0da:	f7f7 feaf 	bl	4e3c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    d0de:	2811      	cmp	r0, #17
    d0e0:	d0fa      	beq.n	d0d8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    d0e2:	bd10      	pop	{r4, pc}

0000d0e4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d0e4:	b510      	push	{r4, lr}
    d0e6:	f7ff fff5 	bl	d0d4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d0ea:	2800      	cmp	r0, #0
    d0ec:	d003      	beq.n	d0f6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    d0ee:	21a0      	movs	r1, #160	; 0xa0
    d0f0:	201d      	movs	r0, #29
    d0f2:	f7f7 f973 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0f6:	bd10      	pop	{r4, pc}

0000d0f8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d0f8:	f7f7 bffe 	b.w	50f8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d0fc <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d0fc:	f7f7 bfec 	b.w	50d8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d100 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    d100:	b510      	push	{r4, lr}
    d102:	4050      	eors	r0, r2
    d104:	780a      	ldrb	r2, [r1, #0]
    d106:	781c      	ldrb	r4, [r3, #0]
    d108:	4062      	eors	r2, r4
    d10a:	4410      	add	r0, r2
    d10c:	784a      	ldrb	r2, [r1, #1]
    d10e:	785c      	ldrb	r4, [r3, #1]
    d110:	4062      	eors	r2, r4
    d112:	4410      	add	r0, r2
    d114:	788a      	ldrb	r2, [r1, #2]
    d116:	789c      	ldrb	r4, [r3, #2]
    d118:	4062      	eors	r2, r4
    d11a:	4410      	add	r0, r2
    d11c:	78ca      	ldrb	r2, [r1, #3]
    d11e:	78dc      	ldrb	r4, [r3, #3]
    d120:	4062      	eors	r2, r4
    d122:	4410      	add	r0, r2
    d124:	790a      	ldrb	r2, [r1, #4]
    d126:	791c      	ldrb	r4, [r3, #4]
    d128:	7949      	ldrb	r1, [r1, #5]
    d12a:	4062      	eors	r2, r4
    d12c:	4410      	add	r0, r2
    d12e:	795a      	ldrb	r2, [r3, #5]
    d130:	4051      	eors	r1, r2
    d132:	42c1      	cmn	r1, r0
    d134:	d101      	bne.n	d13a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    d136:	2001      	movs	r0, #1
    d138:	bd10      	pop	{r4, pc}
    d13a:	2000      	movs	r0, #0
    d13c:	bd10      	pop	{r4, pc}

0000d13e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d13e:	b510      	push	{r4, lr}
    d140:	2900      	cmp	r1, #0
    d142:	4604      	mov	r4, r0
    d144:	f04f 0106 	mov.w	r1, #6
    d148:	d002      	beq.n	d150 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d14a:	f7f7 f9e7 	bl	451c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d14e:	e001      	b.n	d154 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d150:	f7f7 f9f2 	bl	4538 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d154:	7960      	ldrb	r0, [r4, #5]
    d156:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d15a:	7160      	strb	r0, [r4, #5]
    d15c:	bd10      	pop	{r4, pc}

0000d15e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d15e:	4770      	bx	lr

0000d160 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d160:	b530      	push	{r4, r5, lr}
    d162:	460c      	mov	r4, r1
    d164:	4605      	mov	r5, r0
    d166:	b08d      	sub	sp, #52	; 0x34
    d168:	f04f 0103 	mov.w	r1, #3
    d16c:	f104 0003 	add.w	r0, r4, #3
    d170:	b112      	cbz	r2, d178 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d172:	f7f7 f9d3 	bl	451c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d176:	e001      	b.n	d17c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d178:	f7f7 f9de 	bl	4538 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d17c:	7960      	ldrb	r0, [r4, #5]
    d17e:	220d      	movs	r2, #13
    d180:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d184:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d188:	7160      	strb	r0, [r4, #5]
    d18a:	2100      	movs	r1, #0
    d18c:	a804      	add	r0, sp, #16
    d18e:	f7fe fefc 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d192:	78e0      	ldrb	r0, [r4, #3]
    d194:	f88d 001f 	strb.w	r0, [sp, #31]
    d198:	7920      	ldrb	r0, [r4, #4]
    d19a:	f88d 001e 	strb.w	r0, [sp, #30]
    d19e:	7960      	ldrb	r0, [r4, #5]
    d1a0:	f88d 001d 	strb.w	r0, [sp, #29]
    d1a4:	2210      	movs	r2, #16
    d1a6:	4629      	mov	r1, r5
    d1a8:	4668      	mov	r0, sp
    d1aa:	f7fe fe74 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d1ae:	4668      	mov	r0, sp
    d1b0:	f7ff ff98 	bl	d0e4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d1b4:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d1b8:	7020      	strb	r0, [r4, #0]
    d1ba:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d1be:	7060      	strb	r0, [r4, #1]
    d1c0:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d1c4:	70a0      	strb	r0, [r4, #2]
    d1c6:	b00d      	add	sp, #52	; 0x34
    d1c8:	bd30      	pop	{r4, r5, pc}

0000d1ca <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d1ca:	f7f8 bb51 	b.w	5870 <__kernel_ram_size+0x138>
    d1ce:	07c1      	lsls	r1, r0, #31
    d1d0:	d001      	beq.n	d1d6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    d1d2:	2001      	movs	r0, #1
    d1d4:	4770      	bx	lr
    d1d6:	0780      	lsls	r0, r0, #30
    d1d8:	d501      	bpl.n	d1de <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    d1da:	2002      	movs	r0, #2
    d1dc:	4770      	bx	lr
    d1de:	2000      	movs	r0, #0
    d1e0:	4770      	bx	lr
    d1e2:	b510      	push	{r4, lr}
    d1e4:	2801      	cmp	r0, #1
    d1e6:	d008      	beq.n	d1fa <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d1e8:	2802      	cmp	r0, #2
    d1ea:	d004      	beq.n	d1f6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    d1ec:	f240 411a 	movw	r1, #1050	; 0x41a
    d1f0:	2006      	movs	r0, #6
    d1f2:	f7f7 f8f3 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1f6:	2001      	movs	r0, #1
    d1f8:	bd10      	pop	{r4, pc}
    d1fa:	2000      	movs	r0, #0
    d1fc:	bd10      	pop	{r4, pc}
    d1fe:	2900      	cmp	r1, #0
    d200:	d004      	beq.n	d20c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    d202:	2801      	cmp	r0, #1
    d204:	d003      	beq.n	d20e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d206:	2901      	cmp	r1, #1
    d208:	d001      	beq.n	d20e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d20a:	2002      	movs	r0, #2
    d20c:	4770      	bx	lr
    d20e:	2001      	movs	r0, #1
    d210:	4770      	bx	lr
    d212:	f7ff bc95 	b.w	cb40 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d216 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d216:	2101      	movs	r1, #1
    d218:	f7f8 be24 	b.w	5e64 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d21c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d21c:	b510      	push	{r4, lr}
    d21e:	f002 feff 	bl	10020 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d222:	b118      	cbz	r0, d22c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d228:	f7fd b9fa 	b.w	a620 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d22c:	20ff      	movs	r0, #255	; 0xff
    d22e:	bd10      	pop	{r4, pc}

0000d230 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d230:	b510      	push	{r4, lr}
    d232:	f7f8 fe5f 	bl	5ef4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d236:	2810      	cmp	r0, #16
    d238:	d003      	beq.n	d242 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d23a:	f7f8 fe2b 	bl	5e94 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d23e:	2810      	cmp	r0, #16
    d240:	d100      	bne.n	d244 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d242:	2008      	movs	r0, #8
    d244:	bd10      	pop	{r4, pc}

0000d246 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d246:	b510      	push	{r4, lr}
    d248:	f7f8 fe54 	bl	5ef4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d24c:	2810      	cmp	r0, #16
    d24e:	d003      	beq.n	d258 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d250:	f7f8 feae 	bl	5fb0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    d254:	2001      	movs	r0, #1
    d256:	bd10      	pop	{r4, pc}
    d258:	2000      	movs	r0, #0
    d25a:	bd10      	pop	{r4, pc}

0000d25c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d25c:	b570      	push	{r4, r5, r6, lr}
    d25e:	460e      	mov	r6, r1
    d260:	b08c      	sub	sp, #48	; 0x30
    d262:	4614      	mov	r4, r2
    d264:	4601      	mov	r1, r0
    d266:	461d      	mov	r5, r3
    d268:	2210      	movs	r2, #16
    d26a:	4668      	mov	r0, sp
    d26c:	f000 f938 	bl	d4e0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d270:	2210      	movs	r2, #16
    d272:	4631      	mov	r1, r6
    d274:	a804      	add	r0, sp, #16
    d276:	f000 f933 	bl	d4e0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d27a:	4668      	mov	r0, sp
    d27c:	f7ff ff32 	bl	d0e4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d280:	a908      	add	r1, sp, #32
    d282:	f04f 0210 	mov.w	r2, #16
    d286:	4628      	mov	r0, r5
    d288:	b11c      	cbz	r4, d292 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d28a:	f000 f929 	bl	d4e0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d28e:	b00c      	add	sp, #48	; 0x30
    d290:	bd70      	pop	{r4, r5, r6, pc}
    d292:	f7fe fe00 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d296:	e7fa      	b.n	d28e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d298 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d298:	b510      	push	{r4, lr}
    d29a:	460c      	mov	r4, r1
    d29c:	2100      	movs	r1, #0
    d29e:	f7ff fd84 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d2a2:	6060      	str	r0, [r4, #4]
    d2a4:	b118      	cbz	r0, d2ae <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d2a6:	2001      	movs	r0, #1
    d2a8:	7020      	strb	r0, [r4, #0]
    d2aa:	2000      	movs	r0, #0
    d2ac:	bd10      	pop	{r4, pc}
    d2ae:	2002      	movs	r0, #2
    d2b0:	bd10      	pop	{r4, pc}

0000d2b2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d2b2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d2b6:	4348      	muls	r0, r1
    d2b8:	4770      	bx	lr

0000d2ba <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d2ba:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d2be:	fbb0 f0f1 	udiv	r0, r0, r1
    d2c2:	b280      	uxth	r0, r0
    d2c4:	4770      	bx	lr

0000d2c6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d2c6:	b570      	push	{r4, r5, r6, lr}
    d2c8:	4604      	mov	r4, r0
    d2ca:	4290      	cmp	r0, r2
    d2cc:	d20b      	bcs.n	d2e6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d2ce:	1b10      	subs	r0, r2, r4
    d2d0:	2865      	cmp	r0, #101	; 0x65
    d2d2:	d200      	bcs.n	d2d6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d2d4:	2065      	movs	r0, #101	; 0x65
    d2d6:	1825      	adds	r5, r4, r0
    d2d8:	428d      	cmp	r5, r1
    d2da:	d803      	bhi.n	d2e4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d2dc:	2103      	movs	r1, #3
    d2de:	f7f4 fb1d 	bl	191c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d2e2:	b108      	cbz	r0, d2e8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d2e4:	4620      	mov	r0, r4
    d2e6:	bd70      	pop	{r4, r5, r6, pc}
    d2e8:	4628      	mov	r0, r5
    d2ea:	bd70      	pop	{r4, r5, r6, pc}

0000d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d2ec:	b510      	push	{r4, lr}
    d2ee:	f1a2 0311 	sub.w	r3, r2, #17
    d2f2:	290d      	cmp	r1, #13
    d2f4:	d24d      	bcs.n	d392 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d2f6:	e8df f001 	tbb	[pc, r1]
    d2fa:	0907      	.short	0x0907
    d2fc:	1d1a150e 	.word	0x1d1a150e
    d300:	4e2c2921 	.word	0x4e2c2921
    d304:	0048362f 	.word	0x0048362f
    d308:	b3f2      	cbz	r2, d388 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    d30a:	e042      	b.n	d392 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d30c:	2a07      	cmp	r2, #7
    d30e:	d03e      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d310:	2a08      	cmp	r2, #8
    d312:	d03c      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d314:	e03d      	b.n	d392 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d316:	2a0c      	cmp	r2, #12
    d318:	d039      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d31a:	2a0d      	cmp	r2, #13
    d31c:	d037      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d31e:	2a0b      	cmp	r2, #11
    d320:	d035      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d322:	e036      	b.n	d392 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d324:	2a0e      	cmp	r2, #14
    d326:	d032      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d328:	2a0f      	cmp	r2, #15
    d32a:	d030      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d32c:	e031      	b.n	d392 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d32e:	2b0c      	cmp	r3, #12
    d330:	d92d      	bls.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d332:	e02e      	b.n	d392 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d334:	3a12      	subs	r2, #18
    d336:	2a0b      	cmp	r2, #11
    d338:	d929      	bls.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d33a:	e02a      	b.n	d392 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d33c:	2b03      	cmp	r3, #3
    d33e:	d926      	bls.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d340:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
    d344:	b1f8      	cbz	r0, d386 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    d346:	2a1d      	cmp	r2, #29
    d348:	d921      	bls.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d34a:	e022      	b.n	d392 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d34c:	2a04      	cmp	r2, #4
    d34e:	d01e      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d350:	e01f      	b.n	d392 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d352:	2a06      	cmp	r2, #6
    d354:	d01b      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d356:	e01c      	b.n	d392 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d358:	2a1e      	cmp	r2, #30
    d35a:	d018      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d35c:	2a1f      	cmp	r2, #31
    d35e:	d016      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d360:	2a20      	cmp	r2, #32
    d362:	d014      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d364:	e015      	b.n	d392 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d366:	2a21      	cmp	r2, #33	; 0x21
    d368:	d011      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d36a:	2a22      	cmp	r2, #34	; 0x22
    d36c:	d00f      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d36e:	2a23      	cmp	r2, #35	; 0x23
    d370:	d00d      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d372:	2a24      	cmp	r2, #36	; 0x24
    d374:	d00b      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d376:	2a25      	cmp	r2, #37	; 0x25
    d378:	d009      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d37a:	2a26      	cmp	r2, #38	; 0x26
    d37c:	d007      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d37e:	2a27      	cmp	r2, #39	; 0x27
    d380:	d005      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d382:	2a2e      	cmp	r2, #46	; 0x2e
    d384:	d003      	beq.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d386:	e004      	b.n	d392 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d388:	e001      	b.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d38a:	2a29      	cmp	r2, #41	; 0x29
    d38c:	d101      	bne.n	d392 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d38e:	2001      	movs	r0, #1
    d390:	bd10      	pop	{r4, pc}
    d392:	2000      	movs	r0, #0
    d394:	bd10      	pop	{r4, pc}
    d396:	2a10      	cmp	r2, #16
    d398:	d1fb      	bne.n	d392 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d39a:	e7f8      	b.n	d38e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000d39c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d39c:	280c      	cmp	r0, #12
    d39e:	d019      	beq.n	d3d4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d3a0:	280d      	cmp	r0, #13
    d3a2:	d017      	beq.n	d3d4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d3a4:	280b      	cmp	r0, #11
    d3a6:	d015      	beq.n	d3d4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d3a8:	280e      	cmp	r0, #14
    d3aa:	d013      	beq.n	d3d4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d3ac:	280f      	cmp	r0, #15
    d3ae:	d011      	beq.n	d3d4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d3b0:	2821      	cmp	r0, #33	; 0x21
    d3b2:	d00f      	beq.n	d3d4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d3b4:	2822      	cmp	r0, #34	; 0x22
    d3b6:	d00d      	beq.n	d3d4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d3b8:	2823      	cmp	r0, #35	; 0x23
    d3ba:	d00b      	beq.n	d3d4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d3bc:	2824      	cmp	r0, #36	; 0x24
    d3be:	d009      	beq.n	d3d4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d3c0:	2825      	cmp	r0, #37	; 0x25
    d3c2:	d007      	beq.n	d3d4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d3c4:	2826      	cmp	r0, #38	; 0x26
    d3c6:	d005      	beq.n	d3d4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d3c8:	2827      	cmp	r0, #39	; 0x27
    d3ca:	d003      	beq.n	d3d4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d3cc:	282e      	cmp	r0, #46	; 0x2e
    d3ce:	d001      	beq.n	d3d4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d3d0:	2000      	movs	r0, #0
    d3d2:	4770      	bx	lr
    d3d4:	2001      	movs	r0, #1
    d3d6:	4770      	bx	lr

0000d3d8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    d3d8:	f011 0f0c 	tst.w	r1, #12
    d3dc:	d018      	beq.n	d410 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    d3de:	074a      	lsls	r2, r1, #29
    d3e0:	f44f 7116 	mov.w	r1, #600	; 0x258
    d3e4:	2a00      	cmp	r2, #0
    d3e6:	da02      	bge.n	d3ee <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    d3e8:	f04f 0210 	mov.w	r2, #16
    d3ec:	e001      	b.n	d3f2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    d3ee:	f04f 0240 	mov.w	r2, #64	; 0x40
    d3f2:	da01      	bge.n	d3f8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    d3f4:	f04f 0196 	mov.w	r1, #150	; 0x96
    d3f8:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    d3fc:	eba0 0301 	sub.w	r3, r0, r1
    d400:	4288      	cmp	r0, r1
    d402:	d903      	bls.n	d40c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d404:	fb93 f0f2 	sdiv	r0, r3, r2
    d408:	b280      	uxth	r0, r0
    d40a:	4770      	bx	lr
    d40c:	2000      	movs	r0, #0
    d40e:	4770      	bx	lr
    d410:	2902      	cmp	r1, #2
    d412:	d008      	beq.n	d426 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d414:	2870      	cmp	r0, #112	; 0x70
    d416:	d9f9      	bls.n	d40c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d418:	3870      	subs	r0, #112	; 0x70
    d41a:	17c1      	asrs	r1, r0, #31
    d41c:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    d420:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    d424:	4770      	bx	lr
    d426:	283c      	cmp	r0, #60	; 0x3c
    d428:	d9f0      	bls.n	d40c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d42a:	383c      	subs	r0, #60	; 0x3c
    d42c:	17c1      	asrs	r1, r0, #31
    d42e:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d432:	f3c0 008f 	ubfx	r0, r0, #2, #16
    d436:	4770      	bx	lr

0000d438 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    d438:	6809      	ldr	r1, [r1, #0]
    d43a:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    d43e:	4770      	bx	lr

0000d440 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    d440:	07c1      	lsls	r1, r0, #31
    d442:	d001      	beq.n	d448 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    d444:	2001      	movs	r0, #1
    d446:	4770      	bx	lr
    d448:	0781      	lsls	r1, r0, #30
    d44a:	d501      	bpl.n	d450 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    d44c:	2002      	movs	r0, #2
    d44e:	4770      	bx	lr
    d450:	0740      	lsls	r0, r0, #29
    d452:	d501      	bpl.n	d458 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    d454:	2008      	movs	r0, #8
    d456:	4770      	bx	lr
    d458:	2000      	movs	r0, #0
    d45a:	4770      	bx	lr

0000d45c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    d45c:	b510      	push	{r4, lr}
    d45e:	f640 12c4 	movw	r2, #2500	; 0x9c4
    d462:	2901      	cmp	r1, #1
    d464:	d006      	beq.n	d474 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    d466:	2902      	cmp	r1, #2
    d468:	d005      	beq.n	d476 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    d46a:	f240 31af 	movw	r1, #943	; 0x3af
    d46e:	2029      	movs	r0, #41	; 0x29
    d470:	f7f6 ffb4 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d474:	b108      	cbz	r0, d47a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    d476:	4610      	mov	r0, r2
    d478:	bd10      	pop	{r4, pc}
    d47a:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d47e:	bd10      	pop	{r4, pc}

0000d480 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    d480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d484:	4607      	mov	r7, r0
    d486:	460e      	mov	r6, r1
    d488:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    d48c:	f7f4 fe04 	bl	2098 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    d490:	b198      	cbz	r0, d4ba <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    d492:	b31e      	cbz	r6, d4dc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    d494:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    d498:	1b40      	subs	r0, r0, r5
    d49a:	2300      	movs	r3, #0
    d49c:	eb61 0104 	sbc.w	r1, r1, r4
    d4a0:	461a      	mov	r2, r3
    d4a2:	1a1b      	subs	r3, r3, r0
    d4a4:	418a      	sbcs	r2, r1
    d4a6:	da19      	bge.n	d4dc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    d4a8:	1c42      	adds	r2, r0, #1
    d4aa:	f171 0100 	sbcs.w	r1, r1, #0
    d4ae:	db07      	blt.n	d4c0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    d4b0:	f240 2129 	movw	r1, #553	; 0x229
    d4b4:	2029      	movs	r0, #41	; 0x29
    d4b6:	f7f6 ff91 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4ba:	f240 211f 	movw	r1, #543	; 0x21f
    d4be:	e7f9      	b.n	d4b4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    d4c0:	4430      	add	r0, r6
    d4c2:	1e40      	subs	r0, r0, #1
    d4c4:	fbb0 f1f6 	udiv	r1, r0, r6
    d4c8:	fb01 f006 	mul.w	r0, r1, r6
    d4cc:	1828      	adds	r0, r5, r0
    d4ce:	f144 0400 	adc.w	r4, r4, #0
    d4d2:	e9c7 0404 	strd	r0, r4, [r7, #16]
    d4d6:	4608      	mov	r0, r1
    d4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4dc:	2000      	movs	r0, #0
    d4de:	e7fb      	b.n	d4d8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000d4e0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    d4e0:	b530      	push	{r4, r5, lr}
    d4e2:	4613      	mov	r3, r2
    d4e4:	e006      	b.n	d4f4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    d4e6:	18cc      	adds	r4, r1, r3
    d4e8:	1ad5      	subs	r5, r2, r3
    d4ea:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    d4ee:	1e5b      	subs	r3, r3, #1
    d4f0:	5544      	strb	r4, [r0, r5]
    d4f2:	b2db      	uxtb	r3, r3
    d4f4:	2b00      	cmp	r3, #0
    d4f6:	d1f6      	bne.n	d4e6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    d4f8:	bd30      	pop	{r4, r5, pc}

0000d4fa <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    d4fa:	2300      	movs	r3, #0
    d4fc:	6383      	str	r3, [r0, #56]	; 0x38
    d4fe:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    d502:	f240 2371 	movw	r3, #625	; 0x271
    d506:	435a      	muls	r2, r3
    d508:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    d50c:	1e52      	subs	r2, r2, #1
    d50e:	fbb2 f1f1 	udiv	r1, r2, r1
    d512:	63c1      	str	r1, [r0, #60]	; 0x3c
    d514:	4770      	bx	lr

0000d516 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    d516:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d51a:	4607      	mov	r7, r0
    d51c:	4690      	mov	r8, r2
    d51e:	468b      	mov	fp, r1
    d520:	2601      	movs	r6, #1
    d522:	4608      	mov	r0, r1
    d524:	f000 f9dc 	bl	d8e0 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    d528:	4682      	mov	sl, r0
    d52a:	4658      	mov	r0, fp
    d52c:	f000 f9da 	bl	d8e4 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    d530:	4681      	mov	r9, r0
    d532:	f7ff ff85 	bl	d440 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d536:	4604      	mov	r4, r0
    d538:	4650      	mov	r0, sl
    d53a:	f7ff ff81 	bl	d440 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d53e:	4605      	mov	r5, r0
    d540:	ea54 0005 	orrs.w	r0, r4, r5
    d544:	d100      	bne.n	d548 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    d546:	2600      	movs	r6, #0
    d548:	f7fc ffec 	bl	a524 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d54c:	ea10 0f09 	tst.w	r0, r9
    d550:	d100      	bne.n	d554 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    d552:	2400      	movs	r4, #0
    d554:	f7fc ffe6 	bl	a524 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d558:	ea10 0f0a 	tst.w	r0, sl
    d55c:	d100      	bne.n	d560 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    d55e:	2500      	movs	r5, #0
    d560:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    d564:	42a0      	cmp	r0, r4
    d566:	d100      	bne.n	d56a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    d568:	2400      	movs	r4, #0
    d56a:	f888 4000 	strb.w	r4, [r8]
    d56e:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    d572:	42a8      	cmp	r0, r5
    d574:	d100      	bne.n	d578 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    d576:	2500      	movs	r5, #0
    d578:	f888 5001 	strb.w	r5, [r8, #1]
    d57c:	b974      	cbnz	r4, d59c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d57e:	b96d      	cbnz	r5, d59c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d580:	4658      	mov	r0, fp
    d582:	f000 f99b 	bl	d8bc <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    d586:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
    d58a:	1a40      	subs	r0, r0, r1
    d58c:	b200      	sxth	r0, r0
    d58e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    d592:	4288      	cmp	r0, r1
    d594:	dc01      	bgt.n	d59a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    d596:	2800      	cmp	r0, #0
    d598:	dc00      	bgt.n	d59c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d59a:	2600      	movs	r6, #0
    d59c:	4630      	mov	r0, r6
    d59e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000d5a2 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    d5a2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d5a6:	4348      	muls	r0, r1
    d5a8:	4770      	bx	lr

0000d5aa <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    d5aa:	f240 2171 	movw	r1, #625	; 0x271
    d5ae:	fb10 f001 	smulbb	r0, r0, r1
    d5b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d5b6:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    d5ba:	4770      	bx	lr

0000d5bc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    d5bc:	b510      	push	{r4, lr}
    d5be:	2300      	movs	r3, #0
    d5c0:	461a      	mov	r2, r3
    d5c2:	e003      	b.n	d5cc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    d5c4:	5c84      	ldrb	r4, [r0, r2]
    d5c6:	4323      	orrs	r3, r4
    d5c8:	1c52      	adds	r2, r2, #1
    d5ca:	b2d2      	uxtb	r2, r2
    d5cc:	428a      	cmp	r2, r1
    d5ce:	d3f9      	bcc.n	d5c4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    d5d0:	b10b      	cbz	r3, d5d6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    d5d2:	2000      	movs	r0, #0
    d5d4:	bd10      	pop	{r4, pc}
    d5d6:	2001      	movs	r0, #1
    d5d8:	bd10      	pop	{r4, pc}

0000d5da <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    d5da:	b510      	push	{r4, lr}
    d5dc:	4604      	mov	r4, r0
    d5de:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    d5e2:	b108      	cbz	r0, d5e8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    d5e4:	2825      	cmp	r0, #37	; 0x25
    d5e6:	d901      	bls.n	d5ec <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    d5e8:	2012      	movs	r0, #18
    d5ea:	bd10      	pop	{r4, pc}
    d5ec:	b12a      	cbz	r2, d5fa <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    d5ee:	7f60      	ldrb	r0, [r4, #29]
    d5f0:	b128      	cbz	r0, d5fe <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    d5f2:	2801      	cmp	r0, #1
    d5f4:	d009      	beq.n	d60a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    d5f6:	201f      	movs	r0, #31
    d5f8:	bd10      	pop	{r4, pc}
    d5fa:	2000      	movs	r0, #0
    d5fc:	bd10      	pop	{r4, pc}
    d5fe:	4620      	mov	r0, r4
    d600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d604:	4611      	mov	r1, r2
    d606:	f000 b827 	b.w	d658 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    d60a:	89a2      	ldrh	r2, [r4, #12]
    d60c:	6949      	ldr	r1, [r1, #20]
    d60e:	f104 001d 	add.w	r0, r4, #29
    d612:	f7f8 fd69 	bl	60e8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    d616:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    d61a:	e7ee      	b.n	d5fa <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000d61c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    d61c:	b570      	push	{r4, r5, r6, lr}
    d61e:	4604      	mov	r4, r0
    d620:	1c40      	adds	r0, r0, #1
    d622:	4288      	cmp	r0, r1
    d624:	d004      	beq.n	d630 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    d626:	6808      	ldr	r0, [r1, #0]
    d628:	f8c4 0001 	str.w	r0, [r4, #1]
    d62c:	7908      	ldrb	r0, [r1, #4]
    d62e:	7160      	strb	r0, [r4, #5]
    d630:	7960      	ldrb	r0, [r4, #5]
    d632:	f000 001f 	and.w	r0, r0, #31
    d636:	7160      	strb	r0, [r4, #5]
    d638:	2000      	movs	r0, #0
    d63a:	72e0      	strb	r0, [r4, #11]
    d63c:	4605      	mov	r5, r0
    d63e:	1966      	adds	r6, r4, r5
    d640:	7870      	ldrb	r0, [r6, #1]
    d642:	f000 fba6 	bl	dd92 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    d646:	71b0      	strb	r0, [r6, #6]
    d648:	7ae1      	ldrb	r1, [r4, #11]
    d64a:	1c6d      	adds	r5, r5, #1
    d64c:	4408      	add	r0, r1
    d64e:	b2ed      	uxtb	r5, r5
    d650:	72e0      	strb	r0, [r4, #11]
    d652:	2d05      	cmp	r5, #5
    d654:	d3f3      	bcc.n	d63e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    d656:	bd70      	pop	{r4, r5, r6, pc}
    d658:	b570      	push	{r4, r5, r6, lr}
    d65a:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
    d65e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    d662:	2401      	movs	r4, #1
    d664:	fb03 2101 	mla	r1, r3, r1, r2
    d668:	2225      	movs	r2, #37	; 0x25
    d66a:	fbb1 f3f2 	udiv	r3, r1, r2
    d66e:	fb02 1113 	mls	r1, r2, r3, r1
    d672:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    d676:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    d67a:	f001 0307 	and.w	r3, r1, #7
    d67e:	7f92      	ldrb	r2, [r2, #30]
    d680:	fa04 f303 	lsl.w	r3, r4, r3
    d684:	421a      	tst	r2, r3
    d686:	d003      	beq.n	d690 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x74>
    d688:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    d68c:	2000      	movs	r0, #0
    d68e:	bd70      	pop	{r4, r5, r6, pc}
    d690:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    d694:	fbb1 f3f2 	udiv	r3, r1, r2
    d698:	fb02 1113 	mls	r1, r2, r3, r1
    d69c:	1c49      	adds	r1, r1, #1
    d69e:	b2c9      	uxtb	r1, r1
    d6a0:	2300      	movs	r3, #0
    d6a2:	18c5      	adds	r5, r0, r3
    d6a4:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
    d6a8:	428a      	cmp	r2, r1
    d6aa:	d310      	bcc.n	d6ce <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb2>
    d6ac:	7fad      	ldrb	r5, [r5, #30]
    d6ae:	2200      	movs	r2, #0
    d6b0:	fa04 f602 	lsl.w	r6, r4, r2
    d6b4:	4235      	tst	r5, r6
    d6b6:	d001      	beq.n	d6bc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xa0>
    d6b8:	1e49      	subs	r1, r1, #1
    d6ba:	b2c9      	uxtb	r1, r1
    d6bc:	b121      	cbz	r1, d6c8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xac>
    d6be:	1c52      	adds	r2, r2, #1
    d6c0:	b2d2      	uxtb	r2, r2
    d6c2:	2a08      	cmp	r2, #8
    d6c4:	d3f4      	bcc.n	d6b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x94>
    d6c6:	e004      	b.n	d6d2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    d6c8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    d6cc:	e7dc      	b.n	d688 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    d6ce:	1a89      	subs	r1, r1, r2
    d6d0:	b2c9      	uxtb	r1, r1
    d6d2:	1c5b      	adds	r3, r3, #1
    d6d4:	b2db      	uxtb	r3, r3
    d6d6:	2b05      	cmp	r3, #5
    d6d8:	d3e3      	bcc.n	d6a2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x86>
    d6da:	201f      	movs	r0, #31
    d6dc:	bd70      	pop	{r4, r5, r6, pc}

0000d6de <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    d6de:	7802      	ldrb	r2, [r0, #0]
    d6e0:	f002 020f 	and.w	r2, r2, #15
    d6e4:	2a03      	cmp	r2, #3
    d6e6:	d003      	beq.n	d6f0 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    d6e8:	2a05      	cmp	r2, #5
    d6ea:	d104      	bne.n	d6f6 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    d6ec:	f000 b92e 	b.w	d94c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    d6f0:	7840      	ldrb	r0, [r0, #1]
    d6f2:	280c      	cmp	r0, #12
    d6f4:	d001      	beq.n	d6fa <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    d6f6:	2000      	movs	r0, #0
    d6f8:	4770      	bx	lr
    d6fa:	2001      	movs	r0, #1
    d6fc:	4770      	bx	lr

0000d6fe <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    d6fe:	b570      	push	{r4, r5, r6, lr}
    d700:	4614      	mov	r4, r2
    d702:	4605      	mov	r5, r0
    d704:	2a1f      	cmp	r2, #31
    d706:	d903      	bls.n	d710 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    d708:	21f1      	movs	r1, #241	; 0xf1
    d70a:	202a      	movs	r0, #42	; 0x2a
    d70c:	f7f6 fe66 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d710:	f105 0009 	add.w	r0, r5, #9
    d714:	f7fe fbbf 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d718:	1da4      	adds	r4, r4, #6
    d71a:	706c      	strb	r4, [r5, #1]
    d71c:	bd70      	pop	{r4, r5, r6, pc}

0000d71e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    d71e:	b510      	push	{r4, lr}
    d720:	7802      	ldrb	r2, [r0, #0]
    d722:	f001 030f 	and.w	r3, r1, #15
    d726:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    d72a:	431a      	orrs	r2, r3
    d72c:	7002      	strb	r2, [r0, #0]
    d72e:	2907      	cmp	r1, #7
    d730:	d20c      	bcs.n	d74c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    d732:	e8df f001 	tbb	[pc, r1]
    d736:	0604      	.short	0x0604
    d738:	08040604 	.word	0x08040604
    d73c:	0004      	.short	0x0004
    d73e:	2106      	movs	r1, #6
    d740:	e002      	b.n	d748 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    d742:	210c      	movs	r1, #12
    d744:	e000      	b.n	d748 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    d746:	2122      	movs	r1, #34	; 0x22
    d748:	7041      	strb	r1, [r0, #1]
    d74a:	bd10      	pop	{r4, pc}
    d74c:	21ab      	movs	r1, #171	; 0xab
    d74e:	202a      	movs	r0, #42	; 0x2a
    d750:	f7f6 fe44 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000d754 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    d754:	680a      	ldr	r2, [r1, #0]
    d756:	f840 2f09 	str.w	r2, [r0, #9]!
    d75a:	8889      	ldrh	r1, [r1, #4]
    d75c:	8081      	strh	r1, [r0, #4]
    d75e:	4770      	bx	lr

0000d760 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    d760:	7802      	ldrb	r2, [r0, #0]
    d762:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    d766:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    d76a:	7002      	strb	r2, [r0, #0]
    d76c:	4770      	bx	lr

0000d76e <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    d76e:	680a      	ldr	r2, [r1, #0]
    d770:	f840 2f03 	str.w	r2, [r0, #3]!
    d774:	8889      	ldrh	r1, [r1, #4]
    d776:	8081      	strh	r1, [r0, #4]
    d778:	4770      	bx	lr

0000d77a <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    d77a:	7802      	ldrb	r2, [r0, #0]
    d77c:	2340      	movs	r3, #64	; 0x40
    d77e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    d782:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    d786:	430a      	orrs	r2, r1
    d788:	7002      	strb	r2, [r0, #0]
    d78a:	4770      	bx	lr

0000d78c <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    d78c:	b570      	push	{r4, r5, r6, lr}
    d78e:	4614      	mov	r4, r2
    d790:	4605      	mov	r5, r0
    d792:	2a1f      	cmp	r2, #31
    d794:	d904      	bls.n	d7a0 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    d796:	f240 1113 	movw	r1, #275	; 0x113
    d79a:	202a      	movs	r0, #42	; 0x2a
    d79c:	f7f6 fe1e 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d7a0:	f105 0009 	add.w	r0, r5, #9
    d7a4:	f7fe fb77 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d7a8:	1da4      	adds	r4, r4, #6
    d7aa:	706c      	strb	r4, [r5, #1]
    d7ac:	bd70      	pop	{r4, r5, r6, pc}

0000d7ae <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    d7ae:	6842      	ldr	r2, [r0, #4]
    d7b0:	600a      	str	r2, [r1, #0]
    d7b2:	7a00      	ldrb	r0, [r0, #8]
    d7b4:	7108      	strb	r0, [r1, #4]
    d7b6:	4770      	bx	lr

0000d7b8 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    d7b8:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d7bc:	4770      	bx	lr

0000d7be <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    d7be:	b570      	push	{r4, r5, r6, lr}
    d7c0:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    d7c4:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    d7c8:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    d7cc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    d7d0:	88c0      	ldrh	r0, [r0, #6]
    d7d2:	b131      	cbz	r1, d7e2 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    d7d4:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d7d8:	d903      	bls.n	d7e2 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    d7da:	f640 5107 	movw	r1, #3335	; 0xd07
    d7de:	428a      	cmp	r2, r1
    d7e0:	d90b      	bls.n	d7fa <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    d7e2:	1f91      	subs	r1, r2, #6
    d7e4:	f640 467a 	movw	r6, #3194	; 0xc7a
    d7e8:	42b1      	cmp	r1, r6
    d7ea:	d810      	bhi.n	d80e <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    d7ec:	b17b      	cbz	r3, d80e <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    d7ee:	2b08      	cmp	r3, #8
    d7f0:	d80d      	bhi.n	d80e <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    d7f2:	4293      	cmp	r3, r2
    d7f4:	d20b      	bcs.n	d80e <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    d7f6:	4295      	cmp	r5, r2
    d7f8:	d809      	bhi.n	d80e <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    d7fa:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    d7fe:	d206      	bcs.n	d80e <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    d800:	f640 4176 	movw	r1, #3190	; 0xc76
    d804:	380a      	subs	r0, #10
    d806:	4288      	cmp	r0, r1
    d808:	d801      	bhi.n	d80e <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    d80a:	2001      	movs	r0, #1
    d80c:	bd70      	pop	{r4, r5, r6, pc}
    d80e:	2000      	movs	r0, #0
    d810:	bd70      	pop	{r4, r5, r6, pc}

0000d812 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    d812:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    d816:	4770      	bx	lr

0000d818 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    d818:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d81c:	4770      	bx	lr

0000d81e <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    d81e:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    d822:	4770      	bx	lr

0000d824 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    d824:	b510      	push	{r4, lr}
    d826:	29fb      	cmp	r1, #251	; 0xfb
    d828:	d904      	bls.n	d834 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    d82a:	f240 61ac 	movw	r1, #1708	; 0x6ac
    d82e:	202a      	movs	r0, #42	; 0x2a
    d830:	f7f6 fdd4 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d834:	7041      	strb	r1, [r0, #1]
    d836:	bd10      	pop	{r4, pc}

0000d838 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    d838:	8980      	ldrh	r0, [r0, #12]
    d83a:	8008      	strh	r0, [r1, #0]
    d83c:	4770      	bx	lr

0000d83e <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    d83e:	f8d0 0016 	ldr.w	r0, [r0, #22]
    d842:	6008      	str	r0, [r1, #0]
    d844:	4770      	bx	lr

0000d846 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    d846:	6842      	ldr	r2, [r0, #4]
    d848:	600a      	str	r2, [r1, #0]
    d84a:	6880      	ldr	r0, [r0, #8]
    d84c:	6048      	str	r0, [r1, #4]
    d84e:	4770      	bx	lr

0000d850 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    d850:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    d854:	600a      	str	r2, [r1, #0]
    d856:	6840      	ldr	r0, [r0, #4]
    d858:	6048      	str	r0, [r1, #4]
    d85a:	4770      	bx	lr

0000d85c <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    d85c:	6809      	ldr	r1, [r1, #0]
    d85e:	60c1      	str	r1, [r0, #12]
    d860:	4770      	bx	lr

0000d862 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    d862:	680a      	ldr	r2, [r1, #0]
    d864:	6042      	str	r2, [r0, #4]
    d866:	6849      	ldr	r1, [r1, #4]
    d868:	6081      	str	r1, [r0, #8]
    d86a:	4770      	bx	lr

0000d86c <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    d86c:	7800      	ldrb	r0, [r0, #0]
    d86e:	f000 0003 	and.w	r0, r0, #3
    d872:	4770      	bx	lr

0000d874 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    d874:	8880      	ldrh	r0, [r0, #4]
    d876:	4770      	bx	lr

0000d878 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    d878:	88c0      	ldrh	r0, [r0, #6]
    d87a:	4770      	bx	lr

0000d87c <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    d87c:	8900      	ldrh	r0, [r0, #8]
    d87e:	4770      	bx	lr

0000d880 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    d880:	8940      	ldrh	r0, [r0, #10]
    d882:	4770      	bx	lr

0000d884 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    d884:	8901      	ldrh	r1, [r0, #8]
    d886:	291b      	cmp	r1, #27
    d888:	d30c      	bcc.n	d8a4 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    d88a:	8941      	ldrh	r1, [r0, #10]
    d88c:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d890:	4291      	cmp	r1, r2
    d892:	d307      	bcc.n	d8a4 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    d894:	8881      	ldrh	r1, [r0, #4]
    d896:	291b      	cmp	r1, #27
    d898:	d304      	bcc.n	d8a4 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    d89a:	88c0      	ldrh	r0, [r0, #6]
    d89c:	4290      	cmp	r0, r2
    d89e:	d301      	bcc.n	d8a4 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    d8a0:	2001      	movs	r0, #1
    d8a2:	4770      	bx	lr
    d8a4:	2000      	movs	r0, #0
    d8a6:	4770      	bx	lr

0000d8a8 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    d8a8:	7901      	ldrb	r1, [r0, #4]
    d8aa:	0749      	lsls	r1, r1, #29
    d8ac:	d004      	beq.n	d8b8 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    d8ae:	7940      	ldrb	r0, [r0, #5]
    d8b0:	0740      	lsls	r0, r0, #29
    d8b2:	d001      	beq.n	d8b8 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    d8b4:	2001      	movs	r0, #1
    d8b6:	4770      	bx	lr
    d8b8:	2000      	movs	r0, #0
    d8ba:	4770      	bx	lr

0000d8bc <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    d8bc:	88c0      	ldrh	r0, [r0, #6]
    d8be:	4770      	bx	lr

0000d8c0 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    d8c0:	7901      	ldrb	r1, [r0, #4]
    d8c2:	7940      	ldrb	r0, [r0, #5]
    d8c4:	f001 0107 	and.w	r1, r1, #7
    d8c8:	1e4a      	subs	r2, r1, #1
    d8ca:	f000 0007 	and.w	r0, r0, #7
    d8ce:	4011      	ands	r1, r2
    d8d0:	1e42      	subs	r2, r0, #1
    d8d2:	4010      	ands	r0, r2
    d8d4:	4301      	orrs	r1, r0
    d8d6:	d001      	beq.n	d8dc <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    d8d8:	2000      	movs	r0, #0
    d8da:	4770      	bx	lr
    d8dc:	2001      	movs	r0, #1
    d8de:	4770      	bx	lr

0000d8e0 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    d8e0:	7900      	ldrb	r0, [r0, #4]
    d8e2:	4770      	bx	lr

0000d8e4 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    d8e4:	7940      	ldrb	r0, [r0, #5]
    d8e6:	4770      	bx	lr

0000d8e8 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    d8e8:	7900      	ldrb	r0, [r0, #4]
    d8ea:	4770      	bx	lr

0000d8ec <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    d8ec:	7101      	strb	r1, [r0, #4]
    d8ee:	4770      	bx	lr

0000d8f0 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    d8f0:	7940      	ldrb	r0, [r0, #5]
    d8f2:	4770      	bx	lr

0000d8f4 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    d8f4:	7141      	strb	r1, [r0, #5]
    d8f6:	4770      	bx	lr

0000d8f8 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    d8f8:	b510      	push	{r4, lr}
    d8fa:	2a1b      	cmp	r2, #27
    d8fc:	d904      	bls.n	d908 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    d8fe:	f240 4182 	movw	r1, #1154	; 0x482
    d902:	202a      	movs	r0, #42	; 0x2a
    d904:	f7f6 fd6a 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d908:	7042      	strb	r2, [r0, #1]
    d90a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d90e:	1cc0      	adds	r0, r0, #3
    d910:	f7fe bac1 	b.w	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000d914 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    d914:	7802      	ldrb	r2, [r0, #0]
    d916:	f001 0103 	and.w	r1, r1, #3
    d91a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    d91e:	430a      	orrs	r2, r1
    d920:	7002      	strb	r2, [r0, #0]
    d922:	4770      	bx	lr

0000d924 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    d924:	7101      	strb	r1, [r0, #4]
    d926:	0a09      	lsrs	r1, r1, #8
    d928:	7141      	strb	r1, [r0, #5]
    d92a:	4770      	bx	lr

0000d92c <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    d92c:	7181      	strb	r1, [r0, #6]
    d92e:	0a09      	lsrs	r1, r1, #8
    d930:	71c1      	strb	r1, [r0, #7]
    d932:	4770      	bx	lr

0000d934 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    d934:	7201      	strb	r1, [r0, #8]
    d936:	0a09      	lsrs	r1, r1, #8
    d938:	7241      	strb	r1, [r0, #9]
    d93a:	4770      	bx	lr

0000d93c <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    d93c:	7281      	strb	r1, [r0, #10]
    d93e:	0a09      	lsrs	r1, r1, #8
    d940:	72c1      	strb	r1, [r0, #11]
    d942:	4770      	bx	lr

0000d944 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    d944:	7900      	ldrb	r0, [r0, #4]
    d946:	4770      	bx	lr

0000d948 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    d948:	7900      	ldrb	r0, [r0, #4]
    d94a:	4770      	bx	lr
    d94c:	b570      	push	{r4, r5, r6, lr}
    d94e:	f8d0 201f 	ldr.w	r2, [r0, #31]
    d952:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    d956:	f012 0fff 	tst.w	r2, #255	; 0xff
    d95a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d95e:	d108      	bne.n	d972 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    d960:	f3c2 2407 	ubfx	r4, r2, #8, #8
    d964:	b92c      	cbnz	r4, d972 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    d966:	f3c2 4407 	ubfx	r4, r2, #16, #8
    d96a:	b914      	cbnz	r4, d972 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    d96c:	0e12      	lsrs	r2, r2, #24
    d96e:	d100      	bne.n	d972 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    d970:	b34b      	cbz	r3, d9c6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    d972:	7846      	ldrb	r6, [r0, #1]
    d974:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    d978:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    d97c:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    d980:	7d83      	ldrb	r3, [r0, #22]
    d982:	2e22      	cmp	r6, #34	; 0x22
    d984:	d11f      	bne.n	d9c6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    d986:	b131      	cbz	r1, d996 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    d988:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d98c:	d903      	bls.n	d996 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    d98e:	f640 5107 	movw	r1, #3335	; 0xd07
    d992:	428a      	cmp	r2, r1
    d994:	d90b      	bls.n	d9ae <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    d996:	1f91      	subs	r1, r2, #6
    d998:	f640 467a 	movw	r6, #3194	; 0xc7a
    d99c:	42b1      	cmp	r1, r6
    d99e:	d812      	bhi.n	d9c6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    d9a0:	b18b      	cbz	r3, d9c6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    d9a2:	2b08      	cmp	r3, #8
    d9a4:	d80f      	bhi.n	d9c6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    d9a6:	4293      	cmp	r3, r2
    d9a8:	d20d      	bcs.n	d9c6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    d9aa:	4295      	cmp	r5, r2
    d9ac:	d80b      	bhi.n	d9c6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    d9ae:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    d9b2:	d208      	bcs.n	d9c6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    d9b4:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    d9b8:	f640 4176 	movw	r1, #3190	; 0xc76
    d9bc:	380a      	subs	r0, #10
    d9be:	4288      	cmp	r0, r1
    d9c0:	d801      	bhi.n	d9c6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    d9c2:	2001      	movs	r0, #1
    d9c4:	bd70      	pop	{r4, r5, r6, pc}
    d9c6:	2000      	movs	r0, #0
    d9c8:	bd70      	pop	{r4, r5, r6, pc}

0000d9ca <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    d9ca:	6841      	ldr	r1, [r0, #4]
    d9cc:	2200      	movs	r2, #0
    d9ce:	f891 321a 	ldrb.w	r3, [r1, #538]	; 0x21a
    d9d2:	2b00      	cmp	r3, #0
    d9d4:	d004      	beq.n	d9e0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    d9d6:	f881 221a 	strb.w	r2, [r1, #538]	; 0x21a
    d9da:	6840      	ldr	r0, [r0, #4]
    d9dc:	f000 bd53 	b.w	e486 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    d9e0:	4770      	bx	lr

0000d9e2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    d9e2:	b510      	push	{r4, lr}
    d9e4:	7901      	ldrb	r1, [r0, #4]
    d9e6:	b119      	cbz	r1, d9f0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    d9e8:	2901      	cmp	r1, #1
    d9ea:	d006      	beq.n	d9fa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    d9ec:	2000      	movs	r0, #0
    d9ee:	bd10      	pop	{r4, pc}
    d9f0:	8842      	ldrh	r2, [r0, #2]
    d9f2:	6883      	ldr	r3, [r0, #8]
    d9f4:	8800      	ldrh	r0, [r0, #0]
    d9f6:	2102      	movs	r1, #2
    d9f8:	e003      	b.n	da02 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    d9fa:	8842      	ldrh	r2, [r0, #2]
    d9fc:	6883      	ldr	r3, [r0, #8]
    d9fe:	8800      	ldrh	r0, [r0, #0]
    da00:	2101      	movs	r1, #1
    da02:	f7f8 fc07 	bl	6214 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    da06:	b908      	cbnz	r0, da0c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    da08:	f7f8 fc50 	bl	62ac <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    da0c:	2001      	movs	r0, #1
    da0e:	bd10      	pop	{r4, pc}

0000da10 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    da10:	f7f8 be96 	b.w	6740 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c0>
    da14:	b570      	push	{r4, r5, r6, lr}
    da16:	b180      	cbz	r0, da3a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2a>
    da18:	4604      	mov	r4, r0
    da1a:	2300      	movs	r3, #0
    da1c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    da20:	2a12      	cmp	r2, #18
    da22:	d047      	beq.n	dab4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xa4>
    da24:	dc0c      	bgt.n	da40 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x30>
    da26:	f1a2 0207 	sub.w	r2, r2, #7
    da2a:	2a08      	cmp	r2, #8
    da2c:	d210      	bcs.n	da50 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
    da2e:	e8df f002 	tbb	[pc, r2]
    da32:	1435      	.short	0x1435
    da34:	212a0f0f 	.word	0x212a0f0f
    da38:	3b0f      	.short	0x3b0f
    da3a:	f240 11d1 	movw	r1, #465	; 0x1d1
    da3e:	e009      	b.n	da54 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    da40:	2a13      	cmp	r2, #19
    da42:	d058      	beq.n	daf6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe6>
    da44:	2a1c      	cmp	r2, #28
    da46:	d04f      	beq.n	dae8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xd8>
    da48:	2a1e      	cmp	r2, #30
    da4a:	d03e      	beq.n	daca <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xba>
    da4c:	2a1f      	cmp	r2, #31
    da4e:	d047      	beq.n	dae0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xd0>
    da50:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    da54:	2010      	movs	r0, #16
    da56:	f7f6 fcc1 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da5a:	704b      	strb	r3, [r1, #1]
    da5c:	2207      	movs	r2, #7
    da5e:	700a      	strb	r2, [r1, #0]
    da60:	84e3      	strh	r3, [r4, #38]	; 0x26
    da62:	f850 2f80 	ldr.w	r2, [r0, #128]!
    da66:	604a      	str	r2, [r1, #4]
    da68:	6842      	ldr	r2, [r0, #4]
    da6a:	608a      	str	r2, [r1, #8]
    da6c:	8900      	ldrh	r0, [r0, #8]
    da6e:	8188      	strh	r0, [r1, #12]
    da70:	710b      	strb	r3, [r1, #4]
    da72:	bd70      	pop	{r4, r5, r6, pc}
    da74:	704b      	strb	r3, [r1, #1]
    da76:	220c      	movs	r2, #12
    da78:	700a      	strb	r2, [r1, #0]
    da7a:	f890 00c2 	ldrb.w	r0, [r0, #194]	; 0xc2
    da7e:	7108      	strb	r0, [r1, #4]
    da80:	8820      	ldrh	r0, [r4, #0]
    da82:	80c8      	strh	r0, [r1, #6]
    da84:	bd70      	pop	{r4, r5, r6, pc}
    da86:	704b      	strb	r3, [r1, #1]
    da88:	220b      	movs	r2, #11
    da8a:	700a      	strb	r2, [r1, #0]
    da8c:	f810 2fc2 	ldrb.w	r2, [r0, #194]!
    da90:	710a      	strb	r2, [r1, #4]
    da92:	8822      	ldrh	r2, [r4, #0]
    da94:	80ca      	strh	r2, [r1, #6]
    da96:	7900      	ldrb	r0, [r0, #4]
    da98:	7208      	strb	r0, [r1, #8]
    da9a:	bd70      	pop	{r4, r5, r6, pc}
    da9c:	704b      	strb	r3, [r1, #1]
    da9e:	2206      	movs	r2, #6
    daa0:	700a      	strb	r2, [r1, #0]
    daa2:	f850 2f6a 	ldr.w	r2, [r0, #106]!
    daa6:	e00a      	b.n	dabe <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xae>
    daa8:	704b      	strb	r3, [r1, #1]
    daaa:	200e      	movs	r0, #14
    daac:	7008      	strb	r0, [r1, #0]
    daae:	8820      	ldrh	r0, [r4, #0]
    dab0:	8088      	strh	r0, [r1, #4]
    dab2:	bd70      	pop	{r4, r5, r6, pc}
    dab4:	704b      	strb	r3, [r1, #1]
    dab6:	2212      	movs	r2, #18
    dab8:	700a      	strb	r2, [r1, #0]
    daba:	f850 2f22 	ldr.w	r2, [r0, #34]!
    dabe:	604a      	str	r2, [r1, #4]
    dac0:	6842      	ldr	r2, [r0, #4]
    dac2:	608a      	str	r2, [r1, #8]
    dac4:	6880      	ldr	r0, [r0, #8]
    dac6:	60c8      	str	r0, [r1, #12]
    dac8:	bd70      	pop	{r4, r5, r6, pc}
    daca:	704b      	strb	r3, [r1, #1]
    dacc:	221a      	movs	r2, #26
    dace:	700a      	strb	r2, [r1, #0]
    dad0:	6b82      	ldr	r2, [r0, #56]	; 0x38
    dad2:	604a      	str	r2, [r1, #4]
    dad4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    dad6:	608a      	str	r2, [r1, #8]
    dad8:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    dadc:	8188      	strh	r0, [r1, #12]
    dade:	bd70      	pop	{r4, r5, r6, pc}
    dae0:	221b      	movs	r2, #27
    dae2:	700a      	strb	r2, [r1, #0]
    dae4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    dae6:	e004      	b.n	daf2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe2>
    dae8:	704b      	strb	r3, [r1, #1]
    daea:	2218      	movs	r2, #24
    daec:	700a      	strb	r2, [r1, #0]
    daee:	f8d0 000a 	ldr.w	r0, [r0, #10]
    daf2:	6048      	str	r0, [r1, #4]
    daf4:	bd70      	pop	{r4, r5, r6, pc}
    daf6:	704b      	strb	r3, [r1, #1]
    daf8:	2213      	movs	r2, #19
    dafa:	700a      	strb	r2, [r1, #0]
    dafc:	f850 2f5a 	ldr.w	r2, [r0, #90]!
    db00:	604a      	str	r2, [r1, #4]
    db02:	8880      	ldrh	r0, [r0, #4]
    db04:	8108      	strh	r0, [r1, #8]
    db06:	bd70      	pop	{r4, r5, r6, pc}
    db08:	2000      	movs	r0, #0
    db0a:	7048      	strb	r0, [r1, #1]
    db0c:	2003      	movs	r0, #3
    db0e:	7008      	strb	r0, [r1, #0]
    db10:	2001      	movs	r0, #1
    db12:	7108      	strb	r0, [r1, #4]
    db14:	4770      	bx	lr

0000db16 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    db16:	b4f0      	push	{r4, r5, r6, r7}
    db18:	8150      	strh	r0, [r2, #10]
    db1a:	890d      	ldrh	r5, [r1, #8]
    db1c:	4614      	mov	r4, r2
    db1e:	8195      	strh	r5, [r2, #12]
    db20:	898a      	ldrh	r2, [r1, #12]
    db22:	81e2      	strh	r2, [r4, #14]
    db24:	8948      	ldrh	r0, [r1, #10]
    db26:	8220      	strh	r0, [r4, #16]
    db28:	89ce      	ldrh	r6, [r1, #14]
    db2a:	8266      	strh	r6, [r4, #18]
    db2c:	8dcf      	ldrh	r7, [r1, #46]	; 0x2e
    db2e:	42b7      	cmp	r7, r6
    db30:	d108      	bne.n	db44 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    db32:	8d4e      	ldrh	r6, [r1, #42]	; 0x2a
    db34:	4286      	cmp	r6, r0
    db36:	d105      	bne.n	db44 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    db38:	8e0e      	ldrh	r6, [r1, #48]	; 0x30
    db3a:	4296      	cmp	r6, r2
    db3c:	d102      	bne.n	db44 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    db3e:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    db40:	42aa      	cmp	r2, r5
    db42:	d001      	beq.n	db48 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    db44:	2201      	movs	r2, #1
    db46:	e000      	b.n	db4a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    db48:	2200      	movs	r2, #0
    db4a:	7522      	strb	r2, [r4, #20]
    db4c:	8548      	strh	r0, [r1, #42]	; 0x2a
    db4e:	8a60      	ldrh	r0, [r4, #18]
    db50:	85c8      	strh	r0, [r1, #46]	; 0x2e
    db52:	89a0      	ldrh	r0, [r4, #12]
    db54:	8588      	strh	r0, [r1, #44]	; 0x2c
    db56:	89e0      	ldrh	r0, [r4, #14]
    db58:	8608      	strh	r0, [r1, #48]	; 0x30
    db5a:	4620      	mov	r0, r4
    db5c:	bcf0      	pop	{r4, r5, r6, r7}
    db5e:	2212      	movs	r2, #18
    db60:	4619      	mov	r1, r3
    db62:	f7f8 bbad 	b.w	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

0000db66 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    db66:	b510      	push	{r4, lr}
    db68:	888c      	ldrh	r4, [r1, #4]
    db6a:	890a      	ldrh	r2, [r1, #8]
    db6c:	884b      	ldrh	r3, [r1, #2]
    db6e:	88c9      	ldrh	r1, [r1, #6]
    db70:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    db74:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    db78:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    db7c:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    db80:	bd10      	pop	{r4, pc}

0000db82 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    db82:	b570      	push	{r4, r5, r6, lr}
    db84:	4615      	mov	r5, r2
    db86:	460c      	mov	r4, r1
    db88:	f000 f8cc 	bl	dd24 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    db8c:	3096      	adds	r0, #150	; 0x96
    db8e:	4428      	add	r0, r5
    db90:	42a0      	cmp	r0, r4
    db92:	d801      	bhi.n	db98 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    db94:	1a20      	subs	r0, r4, r0
    db96:	bd70      	pop	{r4, r5, r6, pc}
    db98:	2000      	movs	r0, #0
    db9a:	bd70      	pop	{r4, r5, r6, pc}

0000db9c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    db9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dba0:	4604      	mov	r4, r0
    dba2:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    dba4:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    dba6:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    dbaa:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    dbae:	4285      	cmp	r5, r0
    dbb0:	d300      	bcc.n	dbb4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    dbb2:	4605      	mov	r5, r0
    dbb4:	4620      	mov	r0, r4
    dbb6:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    dbba:	f000 f8a3 	bl	dd04 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    dbbe:	4601      	mov	r1, r0
    dbc0:	86e5      	strh	r5, [r4, #54]	; 0x36
    dbc2:	8761      	strh	r1, [r4, #58]	; 0x3a
    dbc4:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    dbc6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    dbca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    dbcc:	4680      	mov	r8, r0
    dbce:	42aa      	cmp	r2, r5
    dbd0:	d200      	bcs.n	dbd4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    dbd2:	462a      	mov	r2, r5
    dbd4:	428b      	cmp	r3, r1
    dbd6:	d200      	bcs.n	dbda <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    dbd8:	460b      	mov	r3, r1
    dbda:	8202      	strh	r2, [r0, #16]
    dbdc:	f8a8 3012 	strh.w	r3, [r8, #18]
    dbe0:	42bd      	cmp	r5, r7
    dbe2:	d101      	bne.n	dbe8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    dbe4:	42b1      	cmp	r1, r6
    dbe6:	d001      	beq.n	dbec <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    dbe8:	2001      	movs	r0, #1
    dbea:	e000      	b.n	dbee <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    dbec:	2000      	movs	r0, #0
    dbee:	4681      	mov	r9, r0
    dbf0:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    dbf4:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    dbf8:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    dbfa:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    dbfc:	4285      	cmp	r5, r0
    dbfe:	d300      	bcc.n	dc02 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    dc00:	4605      	mov	r5, r0
    dc02:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    dc06:	4620      	mov	r0, r4
    dc08:	f000 f884 	bl	dd14 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    dc0c:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    dc10:	2902      	cmp	r1, #2
    dc12:	d108      	bne.n	dc26 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    dc14:	42af      	cmp	r7, r5
    dc16:	d200      	bcs.n	dc1a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    dc18:	463d      	mov	r5, r7
    dc1a:	4286      	cmp	r6, r0
    dc1c:	d200      	bcs.n	dc20 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    dc1e:	4630      	mov	r0, r6
    dc20:	2100      	movs	r1, #0
    dc22:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    dc26:	f8a8 5008 	strh.w	r5, [r8, #8]
    dc2a:	f8a8 000c 	strh.w	r0, [r8, #12]
    dc2e:	42bd      	cmp	r5, r7
    dc30:	d101      	bne.n	dc36 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    dc32:	42b0      	cmp	r0, r6
    dc34:	d001      	beq.n	dc3a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    dc36:	2001      	movs	r0, #1
    dc38:	e000      	b.n	dc3c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    dc3a:	2000      	movs	r0, #0
    dc3c:	ea40 0009 	orr.w	r0, r0, r9
    dc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000dc44 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    dc44:	6840      	ldr	r0, [r0, #4]
    dc46:	4770      	bx	lr

0000dc48 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    dc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc4c:	4616      	mov	r6, r2
    dc4e:	460f      	mov	r7, r1
    dc50:	4604      	mov	r4, r0
    dc52:	f000 f867 	bl	dd24 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    dc56:	4605      	mov	r5, r0
    dc58:	463a      	mov	r2, r7
    dc5a:	6921      	ldr	r1, [r4, #16]
    dc5c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    dc5e:	f000 f84c 	bl	dcfa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    dc62:	19a9      	adds	r1, r5, r6
    dc64:	4281      	cmp	r1, r0
    dc66:	d300      	bcc.n	dc6a <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    dc68:	4608      	mov	r0, r1
    dc6a:	6320      	str	r0, [r4, #48]	; 0x30
    dc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dc70 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    dc70:	221b      	movs	r2, #27
    dc72:	8402      	strh	r2, [r0, #32]
    dc74:	8382      	strh	r2, [r0, #28]
    dc76:	82c2      	strh	r2, [r0, #22]
    dc78:	8282      	strh	r2, [r0, #20]
    dc7a:	8142      	strh	r2, [r0, #10]
    dc7c:	8202      	strh	r2, [r0, #16]
    dc7e:	8102      	strh	r2, [r0, #8]
    dc80:	8542      	strh	r2, [r0, #42]	; 0x2a
    dc82:	8582      	strh	r2, [r0, #44]	; 0x2c
    dc84:	8482      	strh	r2, [r0, #36]	; 0x24
    dc86:	2900      	cmp	r1, #0
    dc88:	d10a      	bne.n	dca0 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    dc8a:	f44f 71a4 	mov.w	r1, #328	; 0x148
    dc8e:	8441      	strh	r1, [r0, #34]	; 0x22
    dc90:	83c1      	strh	r1, [r0, #30]
    dc92:	8341      	strh	r1, [r0, #26]
    dc94:	8301      	strh	r1, [r0, #24]
    dc96:	81c1      	strh	r1, [r0, #14]
    dc98:	8241      	strh	r1, [r0, #18]
    dc9a:	8181      	strh	r1, [r0, #12]
    dc9c:	85c1      	strh	r1, [r0, #46]	; 0x2e
    dc9e:	8601      	strh	r1, [r0, #48]	; 0x30
    dca0:	4770      	bx	lr

0000dca2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    dca2:	6800      	ldr	r0, [r0, #0]
    dca4:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    dca8:	4290      	cmp	r0, r2
    dcaa:	d903      	bls.n	dcb4 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    dcac:	1a40      	subs	r0, r0, r1
    dcae:	389c      	subs	r0, #156	; 0x9c
    dcb0:	0840      	lsrs	r0, r0, #1
    dcb2:	4770      	bx	lr
    dcb4:	2000      	movs	r0, #0
    dcb6:	4770      	bx	lr

0000dcb8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    dcb8:	b510      	push	{r4, lr}
    dcba:	9c02      	ldr	r4, [sp, #8]
    dcbc:	8281      	strh	r1, [r0, #20]
    dcbe:	82c2      	strh	r2, [r0, #22]
    dcc0:	8303      	strh	r3, [r0, #24]
    dcc2:	8344      	strh	r4, [r0, #26]
    dcc4:	bd10      	pop	{r4, pc}

0000dcc6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    dcc6:	b430      	push	{r4, r5}
    dcc8:	8150      	strh	r0, [r2, #10]
    dcca:	8a88      	ldrh	r0, [r1, #20]
    dccc:	8190      	strh	r0, [r2, #12]
    dcce:	8ac8      	ldrh	r0, [r1, #22]
    dcd0:	81d0      	strh	r0, [r2, #14]
    dcd2:	8b08      	ldrh	r0, [r1, #24]
    dcd4:	8210      	strh	r0, [r2, #16]
    dcd6:	8b48      	ldrh	r0, [r1, #26]
    dcd8:	4614      	mov	r4, r2
    dcda:	8250      	strh	r0, [r2, #18]
    dcdc:	4620      	mov	r0, r4
    dcde:	bc30      	pop	{r4, r5}
    dce0:	221e      	movs	r2, #30
    dce2:	4619      	mov	r1, r3
    dce4:	f7f8 baec 	b.w	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    dce8:	2902      	cmp	r1, #2
    dcea:	d003      	beq.n	dcf4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2e>
    dcec:	00c0      	lsls	r0, r0, #3
    dcee:	3070      	adds	r0, #112	; 0x70
    dcf0:	b280      	uxth	r0, r0
    dcf2:	4770      	bx	lr
    dcf4:	0080      	lsls	r0, r0, #2
    dcf6:	303c      	adds	r0, #60	; 0x3c
    dcf8:	e7fa      	b.n	dcf0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    dcfa:	4288      	cmp	r0, r1
    dcfc:	d300      	bcc.n	dd00 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    dcfe:	4608      	mov	r0, r1
    dd00:	1a80      	subs	r0, r0, r2
    dd02:	4770      	bx	lr
    dd04:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    dd08:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    dd0c:	4281      	cmp	r1, r0
    dd0e:	d200      	bcs.n	dd12 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4c>
    dd10:	4608      	mov	r0, r1
    dd12:	4770      	bx	lr
    dd14:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    dd18:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    dd1c:	4281      	cmp	r1, r0
    dd1e:	d200      	bcs.n	dd22 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>
    dd20:	4608      	mov	r0, r1
    dd22:	4770      	bx	lr
    dd24:	2196      	movs	r1, #150	; 0x96
    dd26:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    dd2a:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    dd2e:	f000 b800 	b.w	dd32 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x6c>
    dd32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd36:	460d      	mov	r5, r1
    dd38:	4606      	mov	r6, r0
    dd3a:	4698      	mov	r8, r3
    dd3c:	4617      	mov	r7, r2
    dd3e:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    dd40:	4611      	mov	r1, r2
    dd42:	f7ff ffd1 	bl	dce8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    dd46:	4604      	mov	r4, r0
    dd48:	4639      	mov	r1, r7
    dd4a:	4630      	mov	r0, r6
    dd4c:	f7ff ffe2 	bl	dd14 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    dd50:	42a0      	cmp	r0, r4
    dd52:	d200      	bcs.n	dd56 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x90>
    dd54:	4604      	mov	r4, r0
    dd56:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    dd58:	4641      	mov	r1, r8
    dd5a:	f7ff ffc5 	bl	dce8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    dd5e:	4607      	mov	r7, r0
    dd60:	4641      	mov	r1, r8
    dd62:	4630      	mov	r0, r6
    dd64:	f7ff ffce 	bl	dd04 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    dd68:	42b8      	cmp	r0, r7
    dd6a:	d300      	bcc.n	dd6e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    dd6c:	4638      	mov	r0, r7
    dd6e:	4420      	add	r0, r4
    dd70:	4428      	add	r0, r5
    dd72:	1d80      	adds	r0, r0, #6
    dd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd78:	b510      	push	{r4, lr}
    dd7a:	4604      	mov	r4, r0
    dd7c:	2108      	movs	r1, #8
    dd7e:	4620      	mov	r0, r4
    dd80:	f7f6 fbda 	bl	4538 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dd84:	6820      	ldr	r0, [r4, #0]
    dd86:	2800      	cmp	r0, #0
    dd88:	d102      	bne.n	dd90 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xca>
    dd8a:	6860      	ldr	r0, [r4, #4]
    dd8c:	2800      	cmp	r0, #0
    dd8e:	d0f5      	beq.n	dd7c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    dd90:	bd10      	pop	{r4, pc}

0000dd92 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    dd92:	f000 0155 	and.w	r1, r0, #85	; 0x55
    dd96:	2255      	movs	r2, #85	; 0x55
    dd98:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    dd9c:	4408      	add	r0, r1
    dd9e:	f000 0133 	and.w	r1, r0, #51	; 0x33
    dda2:	2233      	movs	r2, #51	; 0x33
    dda4:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    dda8:	4408      	add	r0, r1
    ddaa:	f000 010f 	and.w	r1, r0, #15
    ddae:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    ddb2:	4770      	bx	lr

0000ddb4 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    ddb4:	b510      	push	{r4, lr}
    ddb6:	6844      	ldr	r4, [r0, #4]
    ddb8:	7803      	ldrb	r3, [r0, #0]
    ddba:	2100      	movs	r1, #0
    ddbc:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
    ddc0:	3480      	adds	r4, #128	; 0x80
    ddc2:	4620      	mov	r0, r4
    ddc4:	f7ff fa92 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ddc8:	b110      	cbz	r0, ddd0 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    ddca:	2004      	movs	r0, #4
    ddcc:	7560      	strb	r0, [r4, #21]
    ddce:	bd10      	pop	{r4, pc}
    ddd0:	2188      	movs	r1, #136	; 0x88
    ddd2:	201c      	movs	r0, #28
    ddd4:	f7f6 fb02 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ddd8 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    ddd8:	b510      	push	{r4, lr}
    ddda:	6841      	ldr	r1, [r0, #4]
    dddc:	f891 2084 	ldrb.w	r2, [r1, #132]	; 0x84
    dde0:	07d2      	lsls	r2, r2, #31
    dde2:	d00b      	beq.n	ddfc <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    dde4:	f811 2fd2 	ldrb.w	r2, [r1, #210]!
    dde8:	1e52      	subs	r2, r2, #1
    ddea:	b252      	sxtb	r2, r2
    ddec:	700a      	strb	r2, [r1, #0]
    ddee:	6840      	ldr	r0, [r0, #4]
    ddf0:	2a00      	cmp	r2, #0
    ddf2:	da05      	bge.n	de00 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    ddf4:	2197      	movs	r1, #151	; 0x97
    ddf6:	201c      	movs	r0, #28
    ddf8:	f7f6 faf0 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddfc:	2195      	movs	r1, #149	; 0x95
    ddfe:	e7fa      	b.n	ddf6 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    de00:	f850 1f84 	ldr.w	r1, [r0, #132]!
    de04:	f021 0101 	bic.w	r1, r1, #1
    de08:	6001      	str	r1, [r0, #0]
    de0a:	bd10      	pop	{r4, pc}

0000de0c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    de0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de0e:	6841      	ldr	r1, [r0, #4]
    de10:	4606      	mov	r6, r0
    de12:	460c      	mov	r4, r1
    de14:	3180      	adds	r1, #128	; 0x80
    de16:	460d      	mov	r5, r1
    de18:	4620      	mov	r0, r4
    de1a:	f000 f820 	bl	de5e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x52>
    de1e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    de22:	2901      	cmp	r1, #1
    de24:	d11a      	bne.n	de5c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>
    de26:	2800      	cmp	r0, #0
    de28:	d018      	beq.n	de5c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>
    de2a:	6870      	ldr	r0, [r6, #4]
    de2c:	4601      	mov	r1, r0
    de2e:	f890 214c 	ldrb.w	r2, [r0, #332]	; 0x14c
    de32:	f88d 2000 	strb.w	r2, [sp]
    de36:	9a00      	ldr	r2, [sp, #0]
    de38:	9200      	str	r2, [sp, #0]
    de3a:	f89d 2000 	ldrb.w	r2, [sp]
    de3e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    de42:	2a00      	cmp	r2, #0
    de44:	d10a      	bne.n	de5c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>
    de46:	8822      	ldrh	r2, [r4, #0]
    de48:	8142      	strh	r2, [r0, #10]
    de4a:	7c6a      	ldrb	r2, [r5, #17]
    de4c:	7302      	strb	r2, [r0, #12]
    de4e:	7caa      	ldrb	r2, [r5, #18]
    de50:	7342      	strb	r2, [r0, #13]
    de52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    de56:	221c      	movs	r2, #28
    de58:	f7f8 ba32 	b.w	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    de5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de5e:	b538      	push	{r3, r4, r5, lr}
    de60:	4605      	mov	r5, r0
    de62:	460c      	mov	r4, r1
    de64:	4668      	mov	r0, sp
    de66:	f7fd f8ab 	bl	afc0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    de6a:	b338      	cbz	r0, debc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xb0>
    de6c:	f99d 1000 	ldrsb.w	r1, [sp]
    de70:	7461      	strb	r1, [r4, #17]
    de72:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    de76:	74a0      	strb	r0, [r4, #18]
    de78:	6820      	ldr	r0, [r4, #0]
    de7a:	f7f8 fd5b 	bl	6934 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    de7e:	6020      	str	r0, [r4, #0]
    de80:	f99d 2000 	ldrsb.w	r2, [sp]
    de84:	f994 1013 	ldrsb.w	r1, [r4, #19]
    de88:	2000      	movs	r0, #0
    de8a:	1a51      	subs	r1, r2, r1
    de8c:	d500      	bpl.n	de90 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x84>
    de8e:	4249      	negs	r1, r1
    de90:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    de94:	428b      	cmp	r3, r1
    de96:	dc10      	bgt.n	deba <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xae>
    de98:	2bff      	cmp	r3, #255	; 0xff
    de9a:	d00e      	beq.n	deba <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xae>
    de9c:	7d21      	ldrb	r1, [r4, #20]
    de9e:	1c49      	adds	r1, r1, #1
    dea0:	b2c9      	uxtb	r1, r1
    dea2:	7521      	strb	r1, [r4, #20]
    dea4:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
    dea8:	4299      	cmp	r1, r3
    deaa:	d802      	bhi.n	deb2 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xa6>
    deac:	7ce1      	ldrb	r1, [r4, #19]
    deae:	297f      	cmp	r1, #127	; 0x7f
    deb0:	d103      	bne.n	deba <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xae>
    deb2:	74e2      	strb	r2, [r4, #19]
    deb4:	2000      	movs	r0, #0
    deb6:	7520      	strb	r0, [r4, #20]
    deb8:	2001      	movs	r0, #1
    deba:	bd38      	pop	{r3, r4, r5, pc}
    debc:	207f      	movs	r0, #127	; 0x7f
    debe:	7460      	strb	r0, [r4, #17]
    dec0:	2000      	movs	r0, #0
    dec2:	bd38      	pop	{r3, r4, r5, pc}
    dec4:	2801      	cmp	r0, #1
    dec6:	d102      	bne.n	dece <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xc2>
    dec8:	7948      	ldrb	r0, [r1, #5]
    deca:	0980      	lsrs	r0, r0, #6
    decc:	d001      	beq.n	ded2 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xc6>
    dece:	2000      	movs	r0, #0
    ded0:	4770      	bx	lr
    ded2:	2001      	movs	r0, #1
    ded4:	4770      	bx	lr
    ded6:	2801      	cmp	r0, #1
    ded8:	d106      	bne.n	dee8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xdc>
    deda:	7948      	ldrb	r0, [r1, #5]
    dedc:	2101      	movs	r1, #1
    dede:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    dee2:	d101      	bne.n	dee8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xdc>
    dee4:	2001      	movs	r0, #1
    dee6:	4770      	bx	lr
    dee8:	2000      	movs	r0, #0
    deea:	4770      	bx	lr
    deec:	2802      	cmp	r0, #2
    deee:	d003      	beq.n	def8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xec>
    def0:	2803      	cmp	r0, #3
    def2:	d001      	beq.n	def8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xec>
    def4:	2000      	movs	r0, #0
    def6:	4770      	bx	lr
    def8:	2001      	movs	r0, #1
    defa:	4770      	bx	lr

0000defc <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    defc:	b510      	push	{r4, lr}
    defe:	4604      	mov	r4, r0
    df00:	7c00      	ldrb	r0, [r0, #16]
    df02:	f7ff fff3 	bl	deec <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xe0>
    df06:	b148      	cbz	r0, df1c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    df08:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    df0c:	f104 0158 	add.w	r1, r4, #88	; 0x58
    df10:	f7ff f98e 	bl	d230 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    df14:	2808      	cmp	r0, #8
    df16:	d001      	beq.n	df1c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    df18:	2001      	movs	r0, #1
    df1a:	bd10      	pop	{r4, pc}
    df1c:	7c20      	ldrb	r0, [r4, #16]
    df1e:	b118      	cbz	r0, df28 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    df20:	2802      	cmp	r0, #2
    df22:	d001      	beq.n	df28 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    df24:	7de0      	ldrb	r0, [r4, #23]
    df26:	bd10      	pop	{r4, pc}
    df28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df2c:	2000      	movs	r0, #0
    df2e:	f7f7 b91d 	b.w	516c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000df32 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    df32:	b508      	push	{r3, lr}
    df34:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    df38:	f88d 1000 	strb.w	r1, [sp]
    df3c:	9900      	ldr	r1, [sp, #0]
    df3e:	9100      	str	r1, [sp, #0]
    df40:	f89d 1000 	ldrb.w	r1, [sp]
    df44:	b109      	cbz	r1, df4a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    df46:	2001      	movs	r0, #1
    df48:	bd08      	pop	{r3, pc}
    df4a:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    df4e:	f88d 0000 	strb.w	r0, [sp]
    df52:	9800      	ldr	r0, [sp, #0]
    df54:	9000      	str	r0, [sp, #0]
    df56:	f89d 0000 	ldrb.w	r0, [sp]
    df5a:	2000      	movs	r0, #0
    df5c:	bd08      	pop	{r3, pc}

0000df5e <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    df5e:	20ff      	movs	r0, #255	; 0xff
    df60:	7008      	strb	r0, [r1, #0]
    df62:	6b48      	ldr	r0, [r1, #52]	; 0x34
    df64:	f7ff b869 	b.w	d03a <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000df68 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    df68:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    df6a:	460d      	mov	r5, r1
    df6c:	4604      	mov	r4, r0
    df6e:	f44f 728c 	mov.w	r2, #280	; 0x118
    df72:	2100      	movs	r1, #0
    df74:	f7fe f809 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    df78:	20ff      	movs	r0, #255	; 0xff
    df7a:	7020      	strb	r0, [r4, #0]
    df7c:	207f      	movs	r0, #127	; 0x7f
    df7e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    df82:	2013      	movs	r0, #19
    df84:	8060      	strh	r0, [r4, #2]
    df86:	f242 7010 	movw	r0, #10000	; 0x2710
    df8a:	8460      	strh	r0, [r4, #34]	; 0x22
    df8c:	f7f6 fedc 	bl	4d48 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    df90:	4601      	mov	r1, r0
    df92:	6360      	str	r0, [r4, #52]	; 0x34
    df94:	2200      	movs	r2, #0
    df96:	4668      	mov	r0, sp
    df98:	f7fe ffb9 	bl	cf0e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    df9c:	2200      	movs	r2, #0
    df9e:	2101      	movs	r1, #1
    dfa0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    dfa2:	f7ff f82a 	bl	cffa <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    dfa6:	2204      	movs	r2, #4
    dfa8:	4668      	mov	r0, sp
    dfaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    dfac:	f7fe ffaf 	bl	cf0e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    dfb0:	2200      	movs	r2, #0
    dfb2:	4611      	mov	r1, r2
    dfb4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    dfb6:	f7ff f820 	bl	cffa <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    dfba:	73a5      	strb	r5, [r4, #14]
    dfbc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    dfc0:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    dfc4:	f000 b9b9 	b.w	e33a <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000dfc8 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    dfc8:	7880      	ldrb	r0, [r0, #2]
    dfca:	f3c0 0080 	ubfx	r0, r0, #2, #1
    dfce:	b108      	cbz	r0, dfd4 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    dfd0:	2000      	movs	r0, #0
    dfd2:	4770      	bx	lr
    dfd4:	201f      	movs	r0, #31
    dfd6:	4770      	bx	lr

0000dfd8 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    dfd8:	f7f9 b98a 	b.w	72f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f0>

0000dfdc <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
    dfdc:	b510      	push	{r4, lr}
    dfde:	2300      	movs	r3, #0
    dfe0:	2a05      	cmp	r2, #5
    dfe2:	d013      	beq.n	e00c <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x30>
    dfe4:	2a10      	cmp	r2, #16
    dfe6:	d018      	beq.n	e01a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3e>
    dfe8:	2a14      	cmp	r2, #20
    dfea:	d038      	beq.n	e05e <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x82>
    dfec:	2a1d      	cmp	r2, #29
    dfee:	d002      	beq.n	dff6 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1a>
    dff0:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    dff4:	e056      	b.n	e0a4 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xc8>
    dff6:	704b      	strb	r3, [r1, #1]
    dff8:	2219      	movs	r2, #25
    dffa:	700a      	strb	r2, [r1, #0]
    dffc:	f850 2fbd 	ldr.w	r2, [r0, #189]!
    e000:	604a      	str	r2, [r1, #4]
    e002:	6842      	ldr	r2, [r0, #4]
    e004:	608a      	str	r2, [r1, #8]
    e006:	7a00      	ldrb	r0, [r0, #8]
    e008:	7308      	strb	r0, [r1, #12]
    e00a:	bd10      	pop	{r4, pc}
    e00c:	704b      	strb	r3, [r1, #1]
    e00e:	2205      	movs	r2, #5
    e010:	700a      	strb	r2, [r1, #0]
    e012:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
    e016:	6048      	str	r0, [r1, #4]
    e018:	bd10      	pop	{r4, pc}
    e01a:	460c      	mov	r4, r1
    e01c:	704b      	strb	r3, [r1, #1]
    e01e:	2111      	movs	r1, #17
    e020:	7021      	strb	r1, [r4, #0]
    e022:	f100 0176 	add.w	r1, r0, #118	; 0x76
    e026:	2220      	movs	r2, #32
    e028:	1d20      	adds	r0, r4, #4
    e02a:	f7fd ff34 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e02e:	2001      	movs	r0, #1
    e030:	7220      	strb	r0, [r4, #8]
    e032:	7920      	ldrb	r0, [r4, #4]
    e034:	2800      	cmp	r0, #0
    e036:	d0ef      	beq.n	e018 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e038:	88e4      	ldrh	r4, [r4, #6]
    e03a:	2100      	movs	r1, #0
    e03c:	4620      	mov	r0, r4
    e03e:	f7fe feb4 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e042:	2800      	cmp	r0, #0
    e044:	d0e8      	beq.n	e018 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e046:	8800      	ldrh	r0, [r0, #0]
    e048:	f7ff f856 	bl	d0f8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e04c:	2100      	movs	r1, #0
    e04e:	4620      	mov	r0, r4
    e050:	f7f6 fc46 	bl	48e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e054:	2800      	cmp	r0, #0
    e056:	d0df      	beq.n	e018 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e058:	f240 216a 	movw	r1, #618	; 0x26a
    e05c:	e022      	b.n	e0a4 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xc8>
    e05e:	704b      	strb	r3, [r1, #1]
    e060:	2214      	movs	r2, #20
    e062:	700a      	strb	r2, [r1, #0]
    e064:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    e068:	604a      	str	r2, [r1, #4]
    e06a:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    e06e:	810a      	strh	r2, [r1, #8]
    e070:	790a      	ldrb	r2, [r1, #4]
    e072:	2a00      	cmp	r2, #0
    e074:	d0d0      	beq.n	e018 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e076:	7880      	ldrb	r0, [r0, #2]
    e078:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e07c:	2800      	cmp	r0, #0
    e07e:	d1cb      	bne.n	e018 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e080:	88cc      	ldrh	r4, [r1, #6]
    e082:	2100      	movs	r1, #0
    e084:	4620      	mov	r0, r4
    e086:	f7fe fe90 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e08a:	2800      	cmp	r0, #0
    e08c:	d0c4      	beq.n	e018 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e08e:	8800      	ldrh	r0, [r0, #0]
    e090:	f7ff f832 	bl	d0f8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e094:	2100      	movs	r1, #0
    e096:	4620      	mov	r0, r4
    e098:	f7f6 fc22 	bl	48e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e09c:	2800      	cmp	r0, #0
    e09e:	d0bb      	beq.n	e018 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e0a0:	f240 219a 	movw	r1, #666	; 0x29a
    e0a4:	202d      	movs	r0, #45	; 0x2d
    e0a6:	f7f6 f999 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e0aa <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e0aa:	6880      	ldr	r0, [r0, #8]
    e0ac:	4770      	bx	lr

0000e0ae <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e0ae:	2001      	movs	r0, #1
    e0b0:	4770      	bx	lr

0000e0b2 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e0b2:	b510      	push	{r4, lr}
    e0b4:	4604      	mov	r4, r0
    e0b6:	3028      	adds	r0, #40	; 0x28
    e0b8:	f000 f8ff 	bl	e2ba <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e0bc:	8861      	ldrh	r1, [r4, #2]
    e0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e0c2:	2228      	movs	r2, #40	; 0x28
    e0c4:	f7f9 baec 	b.w	76a0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e0c8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e0c8:	2200      	movs	r2, #0
    e0ca:	8602      	strh	r2, [r0, #48]	; 0x30
    e0cc:	8843      	ldrh	r3, [r0, #2]
    e0ce:	2b1d      	cmp	r3, #29
    e0d0:	d001      	beq.n	e0d6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e0d2:	7341      	strb	r1, [r0, #13]
    e0d4:	4770      	bx	lr
    e0d6:	7342      	strb	r2, [r0, #13]
    e0d8:	4770      	bx	lr

0000e0da <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    e0da:	b510      	push	{r4, lr}
    e0dc:	2400      	movs	r4, #0
    e0de:	6b40      	ldr	r0, [r0, #52]	; 0x34
    e0e0:	f7fe ff79 	bl	cfd6 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    e0e4:	b100      	cbz	r0, e0e8 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    e0e6:	2001      	movs	r0, #1
    e0e8:	4384      	bics	r4, r0
    e0ea:	f084 0001 	eor.w	r0, r4, #1
    e0ee:	bd10      	pop	{r4, pc}

0000e0f0 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e0f0:	2000      	movs	r0, #0
    e0f2:	4770      	bx	lr

0000e0f4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e0f4:	7880      	ldrb	r0, [r0, #2]
    e0f6:	f000 0001 	and.w	r0, r0, #1
    e0fa:	4770      	bx	lr

0000e0fc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e0fc:	7880      	ldrb	r0, [r0, #2]
    e0fe:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e102:	4770      	bx	lr

0000e104 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e104:	2001      	movs	r0, #1
    e106:	4770      	bx	lr

0000e108 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e108:	7880      	ldrb	r0, [r0, #2]
    e10a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e10e:	4770      	bx	lr

0000e110 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e110:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e114:	4770      	bx	lr

0000e116 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e116:	7800      	ldrb	r0, [r0, #0]
    e118:	28ff      	cmp	r0, #255	; 0xff
    e11a:	d001      	beq.n	e120 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e11c:	2001      	movs	r0, #1
    e11e:	4770      	bx	lr
    e120:	2000      	movs	r0, #0
    e122:	4770      	bx	lr

0000e124 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    e124:	f800 1f20 	strb.w	r1, [r0, #32]!
    e128:	7042      	strb	r2, [r0, #1]
    e12a:	4770      	bx	lr

0000e12c <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e12c:	680a      	ldr	r2, [r1, #0]
    e12e:	f840 2f11 	str.w	r2, [r0, #17]!
    e132:	8889      	ldrh	r1, [r1, #4]
    e134:	8081      	strh	r1, [r0, #4]
    e136:	2101      	movs	r1, #1
    e138:	7181      	strb	r1, [r0, #6]
    e13a:	4770      	bx	lr

0000e13c <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e13c:	7b00      	ldrb	r0, [r0, #12]
    e13e:	4770      	bx	lr

0000e140 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e140:	2001      	movs	r0, #1
    e142:	4770      	bx	lr

0000e144 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e144:	61c1      	str	r1, [r0, #28]
    e146:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    e14a:	724a      	strb	r2, [r1, #9]
    e14c:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    e150:	f8c1 200a 	str.w	r2, [r1, #10]
    e154:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    e158:	81c8      	strh	r0, [r1, #14]
    e15a:	4770      	bx	lr

0000e15c <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e15c:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    e160:	4770      	bx	lr

0000e162 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    e162:	b510      	push	{r4, lr}
    e164:	4604      	mov	r4, r0
    e166:	7880      	ldrb	r0, [r0, #2]
    e168:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e16c:	b158      	cbz	r0, e186 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    e16e:	233c      	movs	r3, #60	; 0x3c
    e170:	22ff      	movs	r2, #255	; 0xff
    e172:	4620      	mov	r0, r4
    e174:	69e1      	ldr	r1, [r4, #28]
    e176:	f7f9 f8e1 	bl	733c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33c>
    e17a:	2210      	movs	r2, #16
    e17c:	4621      	mov	r1, r4
    e17e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    e182:	f7f8 f89d 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    e186:	2001      	movs	r0, #1
    e188:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    e18c:	bd10      	pop	{r4, pc}

0000e18e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e18e:	7bc0      	ldrb	r0, [r0, #15]
    e190:	2800      	cmp	r0, #0
    e192:	d000      	beq.n	e196 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e194:	2001      	movs	r0, #1
    e196:	4770      	bx	lr
    e198:	7802      	ldrb	r2, [r0, #0]
    e19a:	2320      	movs	r3, #32
    e19c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    e1a0:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e1a4:	430a      	orrs	r2, r1
    e1a6:	7002      	strb	r2, [r0, #0]
    e1a8:	4770      	bx	lr
    e1aa:	b510      	push	{r4, lr}
    e1ac:	f7ff f840 	bl	d230 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e1b0:	4604      	mov	r4, r0
    e1b2:	f7f7 fdcb 	bl	5d4c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    e1b6:	b138      	cbz	r0, e1c8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    e1b8:	4620      	mov	r0, r4
    e1ba:	f7f7 fd6f 	bl	5c9c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    e1be:	b118      	cbz	r0, e1c8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    e1c0:	2110      	movs	r1, #16
    e1c2:	f7ff f9fb 	bl	d5bc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    e1c6:	b108      	cbz	r0, e1cc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3e>
    e1c8:	2000      	movs	r0, #0
    e1ca:	bd10      	pop	{r4, pc}
    e1cc:	2001      	movs	r0, #1
    e1ce:	bd10      	pop	{r4, pc}
    e1d0:	2101      	movs	r1, #1
    e1d2:	f7f8 bd15 	b.w	6c00 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e1d6:	2101      	movs	r1, #1
    e1d8:	f7f8 bd12 	b.w	6c00 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1e0:	4604      	mov	r4, r0
    e1e2:	460f      	mov	r7, r1
    e1e4:	7e40      	ldrb	r0, [r0, #25]
    e1e6:	f7f7 fd3f 	bl	5c68 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e1ea:	4606      	mov	r6, r0
    e1ec:	7e20      	ldrb	r0, [r4, #24]
    e1ee:	f104 0551 	add.w	r5, r4, #81	; 0x51
    e1f2:	b120      	cbz	r0, e1fe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x70>
    e1f4:	b11e      	cbz	r6, e1fe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x70>
    e1f6:	7e60      	ldrb	r0, [r4, #25]
    e1f8:	f7f7 fd2a 	bl	5c50 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e1fc:	b1a0      	cbz	r0, e228 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x9a>
    e1fe:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    e202:	2800      	cmp	r0, #0
    e204:	d024      	beq.n	e250 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    e206:	7ea0      	ldrb	r0, [r4, #26]
    e208:	2800      	cmp	r0, #0
    e20a:	d021      	beq.n	e250 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    e20c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    e210:	4629      	mov	r1, r5
    e212:	f7ff fe60 	bl	ded6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xca>
    e216:	b1a8      	cbz	r0, e244 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb6>
    e218:	f7f7 fd16 	bl	5c48 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e21c:	463a      	mov	r2, r7
    e21e:	4629      	mov	r1, r5
    e220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e224:	f7fe bf9c 	b.w	d160 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e228:	2001      	movs	r0, #1
    e22a:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    e22e:	463a      	mov	r2, r7
    e230:	4629      	mov	r1, r5
    e232:	4630      	mov	r0, r6
    e234:	f7fe ff94 	bl	d160 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e238:	7e61      	ldrb	r1, [r4, #25]
    e23a:	4628      	mov	r0, r5
    e23c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e240:	f7f7 bd1e 	b.w	5c80 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e244:	4639      	mov	r1, r7
    e246:	4628      	mov	r0, r5
    e248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e24c:	f7fe bf77 	b.w	d13e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e254:	b510      	push	{r4, lr}
    e256:	4604      	mov	r4, r0
    e258:	4608      	mov	r0, r1
    e25a:	f7fc fef7 	bl	b04c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e25e:	7921      	ldrb	r1, [r4, #4]
    e260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e264:	2025      	movs	r0, #37	; 0x25
    e266:	f7fc bec7 	b.w	aff8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    e26a:	b510      	push	{r4, lr}
    e26c:	4604      	mov	r4, r0
    e26e:	302e      	adds	r0, #46	; 0x2e
    e270:	f7fc fea6 	bl	afc0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e274:	2800      	cmp	r0, #0
    e276:	d102      	bne.n	e27e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf0>
    e278:	207f      	movs	r0, #127	; 0x7f
    e27a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    e27e:	bd10      	pop	{r4, pc}
    e280:	b570      	push	{r4, r5, r6, lr}
    e282:	4614      	mov	r4, r2
    e284:	461d      	mov	r5, r3
    e286:	4606      	mov	r6, r0
    e288:	f7f4 fcc2 	bl	2c10 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e28c:	1900      	adds	r0, r0, r4
    e28e:	4169      	adcs	r1, r5
    e290:	e9c6 0100 	strd	r0, r1, [r6]
    e294:	bd70      	pop	{r4, r5, r6, pc}

0000e296 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e296:	b570      	push	{r4, r5, r6, lr}
    e298:	7001      	strb	r1, [r0, #0]
    e29a:	7042      	strb	r2, [r0, #1]
    e29c:	4614      	mov	r4, r2
    e29e:	460d      	mov	r5, r1
    e2a0:	7880      	ldrb	r0, [r0, #2]
    e2a2:	f000 f87f 	bl	e3a4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e2a6:	fb10 f005 	smulbb	r0, r0, r5
    e2aa:	4360      	muls	r0, r4
    e2ac:	28ff      	cmp	r0, #255	; 0xff
    e2ae:	d303      	bcc.n	e2b8 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e2b0:	215c      	movs	r1, #92	; 0x5c
    e2b2:	202e      	movs	r0, #46	; 0x2e
    e2b4:	f7f6 f892 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2b8:	bd70      	pop	{r4, r5, r6, pc}

0000e2ba <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e2ba:	b510      	push	{r4, lr}
    e2bc:	4604      	mov	r4, r0
    e2be:	7880      	ldrb	r0, [r0, #2]
    e2c0:	f000 f870 	bl	e3a4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e2c4:	7861      	ldrb	r1, [r4, #1]
    e2c6:	7822      	ldrb	r2, [r4, #0]
    e2c8:	fb11 f102 	smulbb	r1, r1, r2
    e2cc:	4348      	muls	r0, r1
    e2ce:	b2c0      	uxtb	r0, r0
    e2d0:	bd10      	pop	{r4, pc}

0000e2d2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e2d2:	b510      	push	{r4, lr}
    e2d4:	4604      	mov	r4, r0
    e2d6:	f000 f84d 	bl	e374 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e2da:	7961      	ldrb	r1, [r4, #5]
    e2dc:	1c49      	adds	r1, r1, #1
    e2de:	b2c9      	uxtb	r1, r1
    e2e0:	7161      	strb	r1, [r4, #5]
    e2e2:	7862      	ldrb	r2, [r4, #1]
    e2e4:	4291      	cmp	r1, r2
    e2e6:	d10b      	bne.n	e300 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e2e8:	2200      	movs	r2, #0
    e2ea:	7162      	strb	r2, [r4, #5]
    e2ec:	78e1      	ldrb	r1, [r4, #3]
    e2ee:	4301      	orrs	r1, r0
    e2f0:	70e1      	strb	r1, [r4, #3]
    e2f2:	78a3      	ldrb	r3, [r4, #2]
    e2f4:	4299      	cmp	r1, r3
    e2f6:	d103      	bne.n	e300 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e2f8:	70e2      	strb	r2, [r4, #3]
    e2fa:	7921      	ldrb	r1, [r4, #4]
    e2fc:	1c49      	adds	r1, r1, #1
    e2fe:	7121      	strb	r1, [r4, #4]
    e300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e304:	f000 b825 	b.w	e352 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e308 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e308:	7081      	strb	r1, [r0, #2]
    e30a:	4770      	bx	lr

0000e30c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e30c:	b570      	push	{r4, r5, r6, lr}
    e30e:	4604      	mov	r4, r0
    e310:	7880      	ldrb	r0, [r0, #2]
    e312:	f000 f847 	bl	e3a4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e316:	7861      	ldrb	r1, [r4, #1]
    e318:	fb11 f500 	smulbb	r5, r1, r0
    e31c:	78e0      	ldrb	r0, [r4, #3]
    e31e:	f000 f841 	bl	e3a4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e322:	7861      	ldrb	r1, [r4, #1]
    e324:	7962      	ldrb	r2, [r4, #5]
    e326:	fb10 2001 	smlabb	r0, r0, r1, r2
    e32a:	7821      	ldrb	r1, [r4, #0]
    e32c:	7922      	ldrb	r2, [r4, #4]
    e32e:	1a89      	subs	r1, r1, r2
    e330:	fb11 f105 	smulbb	r1, r1, r5
    e334:	1a08      	subs	r0, r1, r0
    e336:	b2c0      	uxtb	r0, r0
    e338:	bd70      	pop	{r4, r5, r6, pc}

0000e33a <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e33a:	2100      	movs	r1, #0
    e33c:	6001      	str	r1, [r0, #0]
    e33e:	8081      	strh	r1, [r0, #4]
    e340:	2101      	movs	r1, #1
    e342:	7041      	strb	r1, [r0, #1]
    e344:	7001      	strb	r1, [r0, #0]
    e346:	4770      	bx	lr

0000e348 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    e348:	2100      	movs	r1, #0
    e34a:	70c1      	strb	r1, [r0, #3]
    e34c:	7141      	strb	r1, [r0, #5]
    e34e:	7101      	strb	r1, [r0, #4]
    e350:	4770      	bx	lr
    e352:	b510      	push	{r4, lr}
    e354:	2801      	cmp	r0, #1
    e356:	d007      	beq.n	e368 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    e358:	2802      	cmp	r0, #2
    e35a:	d007      	beq.n	e36c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    e35c:	2804      	cmp	r0, #4
    e35e:	d007      	beq.n	e370 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    e360:	2139      	movs	r1, #57	; 0x39
    e362:	202e      	movs	r0, #46	; 0x2e
    e364:	f7f6 f83a 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e368:	2025      	movs	r0, #37	; 0x25
    e36a:	bd10      	pop	{r4, pc}
    e36c:	2026      	movs	r0, #38	; 0x26
    e36e:	bd10      	pop	{r4, pc}
    e370:	2027      	movs	r0, #39	; 0x27
    e372:	bd10      	pop	{r4, pc}
    e374:	4601      	mov	r1, r0
    e376:	2000      	movs	r0, #0
    e378:	788a      	ldrb	r2, [r1, #2]
    e37a:	07d3      	lsls	r3, r2, #31
    e37c:	d002      	beq.n	e384 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    e37e:	78cb      	ldrb	r3, [r1, #3]
    e380:	07db      	lsls	r3, r3, #31
    e382:	d006      	beq.n	e392 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    e384:	0793      	lsls	r3, r2, #30
    e386:	d506      	bpl.n	e396 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e388:	78cb      	ldrb	r3, [r1, #3]
    e38a:	079b      	lsls	r3, r3, #30
    e38c:	d403      	bmi.n	e396 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e38e:	2002      	movs	r0, #2
    e390:	4770      	bx	lr
    e392:	2001      	movs	r0, #1
    e394:	4770      	bx	lr
    e396:	0752      	lsls	r2, r2, #29
    e398:	d5fc      	bpl.n	e394 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e39a:	78c9      	ldrb	r1, [r1, #3]
    e39c:	0749      	lsls	r1, r1, #29
    e39e:	d4f9      	bmi.n	e394 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e3a0:	2004      	movs	r0, #4
    e3a2:	4770      	bx	lr
    e3a4:	f3c0 0180 	ubfx	r1, r0, #2, #1
    e3a8:	f3c0 0240 	ubfx	r2, r0, #1, #1
    e3ac:	4411      	add	r1, r2
    e3ae:	f000 0001 	and.w	r0, r0, #1
    e3b2:	4408      	add	r0, r1
    e3b4:	4770      	bx	lr

0000e3b6 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    e3b6:	f240 315a 	movw	r1, #858	; 0x35a
    e3ba:	4348      	muls	r0, r1
    e3bc:	4770      	bx	lr

0000e3be <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    e3be:	f240 20ef 	movw	r0, #751	; 0x2ef
    e3c2:	4770      	bx	lr
    e3c4:	041c020e 	.word	0x041c020e
    e3c8:	0c600630 	.word	0x0c600630
    e3cc:	06b4035a 	.word	0x06b4035a
    e3d0:	0bf505c5 	.word	0x0bf505c5
    e3d4:	01a31225 	.word	0x01a31225
    e3d8:	05bf03b1 	.word	0x05bf03b1
    e3dc:	064902ef 	.word	0x064902ef
    e3e0:	09a3      	.short	0x09a3

0000e3e2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    e3e2:	b510      	push	{r4, lr}
    e3e4:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    e3e8:	b109      	cbz	r1, e3ee <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    e3ea:	2000      	movs	r0, #0
    e3ec:	bd10      	pop	{r4, pc}
    e3ee:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    e3f2:	b131      	cbz	r1, e402 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    e3f4:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    e3f8:	428a      	cmp	r2, r1
    e3fa:	d902      	bls.n	e402 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    e3fc:	f7ff feb1 	bl	e162 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e400:	e7f3      	b.n	e3ea <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    e402:	2001      	movs	r0, #1
    e404:	bd10      	pop	{r4, pc}

0000e406 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    e406:	b510      	push	{r4, lr}
    e408:	b131      	cbz	r1, e418 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    e40a:	2901      	cmp	r1, #1
    e40c:	d008      	beq.n	e420 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    e40e:	f240 717d 	movw	r1, #1917	; 0x77d
    e412:	2030      	movs	r0, #48	; 0x30
    e414:	f7f5 ffe2 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e41c:	f000 b9b7 	b.w	e78e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x308>
    e420:	2100      	movs	r1, #0
    e422:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    e426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e42a:	f000 b913 	b.w	e654 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>

0000e42e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    e42e:	b510      	push	{r4, lr}
    e430:	4604      	mov	r4, r0
    e432:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    e436:	2800      	cmp	r0, #0
    e438:	d019      	beq.n	e46e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    e43a:	2001      	movs	r0, #1
    e43c:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    e440:	4601      	mov	r1, r0
    e442:	4620      	mov	r0, r4
    e444:	f7ff fe8a 	bl	e15c <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    e448:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    e44c:	b170      	cbz	r0, e46c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    e44e:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    e452:	f7f3 ff51 	bl	22f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e456:	7820      	ldrb	r0, [r4, #0]
    e458:	f7f4 f8b2 	bl	25c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    e45c:	f814 09c8 	ldrb.w	r0, [r4], #-200
    e460:	f7f4 f88c 	bl	257c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e464:	b120      	cbz	r0, e470 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    e466:	2000      	movs	r0, #0
    e468:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    e46c:	2000      	movs	r0, #0
    e46e:	bd10      	pop	{r4, pc}
    e470:	f44f 7101 	mov.w	r1, #516	; 0x204
    e474:	2030      	movs	r0, #48	; 0x30
    e476:	f7f5 ffb1 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e47a <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    e47a:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    e47e:	4770      	bx	lr

0000e480 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    e480:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    e484:	4770      	bx	lr

0000e486 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    e486:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e488:	4604      	mov	r4, r0
    e48a:	f890 021b 	ldrb.w	r0, [r0, #539]	; 0x21b
    e48e:	2800      	cmp	r0, #0
    e490:	d15f      	bne.n	e552 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e492:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    e496:	2803      	cmp	r0, #3
    e498:	d15b      	bne.n	e552 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e49a:	f7f4 fbb9 	bl	2c10 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e49e:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    e4a2:	f8d4 2284 	ldr.w	r2, [r4, #644]	; 0x284
    e4a6:	1ac0      	subs	r0, r0, r3
    e4a8:	eb61 0102 	sbc.w	r1, r1, r2
    e4ac:	2300      	movs	r3, #0
    e4ae:	461a      	mov	r2, r3
    e4b0:	1a1b      	subs	r3, r3, r0
    e4b2:	418a      	sbcs	r2, r1
    e4b4:	da4d      	bge.n	e552 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e4b6:	1c42      	adds	r2, r0, #1
    e4b8:	f171 0100 	sbcs.w	r1, r1, #0
    e4bc:	db02      	blt.n	e4c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    e4be:	f240 51c3 	movw	r1, #1475	; 0x5c3
    e4c2:	e036      	b.n	e532 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    e4c4:	6921      	ldr	r1, [r4, #16]
    e4c6:	b111      	cbz	r1, e4ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    e4c8:	fbb0 f0f1 	udiv	r0, r0, r1
    e4cc:	e000      	b.n	e4d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    e4ce:	2000      	movs	r0, #0
    e4d0:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
    e4d4:	1c40      	adds	r0, r0, #1
    e4d6:	4408      	add	r0, r1
    e4d8:	f8a4 025c 	strh.w	r0, [r4, #604]	; 0x25c
    e4dc:	f8b4 025c 	ldrh.w	r0, [r4, #604]	; 0x25c
    e4e0:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    e4e4:	1a08      	subs	r0, r1, r0
    e4e6:	b200      	sxth	r0, r0
    e4e8:	2800      	cmp	r0, #0
    e4ea:	dd32      	ble.n	e552 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e4ec:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    e4f0:	f7f3 ff02 	bl	22f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e4f4:	2800      	cmp	r0, #0
    e4f6:	d02c      	beq.n	e552 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e4f8:	20ff      	movs	r0, #255	; 0xff
    e4fa:	f884 0261 	strb.w	r0, [r4, #609]	; 0x261
    e4fe:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
    e502:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
    e506:	ae01      	add	r6, sp, #4
    e508:	1a40      	subs	r0, r0, r1
    e50a:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
    e50e:	1e40      	subs	r0, r0, #1
    e510:	4408      	add	r0, r1
    e512:	b285      	uxth	r5, r0
    e514:	e017      	b.n	e546 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    e516:	9600      	str	r6, [sp, #0]
    e518:	f8b4 125c 	ldrh.w	r1, [r4, #604]	; 0x25c
    e51c:	2300      	movs	r3, #0
    e51e:	2201      	movs	r2, #1
    e520:	4620      	mov	r0, r4
    e522:	f7f9 fb51 	bl	7bc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    e526:	2800      	cmp	r0, #0
    e528:	d013      	beq.n	e552 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e52a:	2801      	cmp	r0, #1
    e52c:	d004      	beq.n	e538 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    e52e:	f240 51fc 	movw	r1, #1532	; 0x5fc
    e532:	2030      	movs	r0, #48	; 0x30
    e534:	f7f5 ff52 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e538:	f8b4 025c 	ldrh.w	r0, [r4, #604]	; 0x25c
    e53c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e540:	4408      	add	r0, r1
    e542:	f8a4 025c 	strh.w	r0, [r4, #604]	; 0x25c
    e546:	f8b4 025c 	ldrh.w	r0, [r4, #604]	; 0x25c
    e54a:	1a28      	subs	r0, r5, r0
    e54c:	b200      	sxth	r0, r0
    e54e:	2800      	cmp	r0, #0
    e550:	dae1      	bge.n	e516 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    e552:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e554:	2000      	movs	r0, #0
    e556:	4770      	bx	lr
    e558:	b570      	push	{r4, r5, r6, lr}
    e55a:	4604      	mov	r4, r0
    e55c:	f000 f8f0 	bl	e740 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    e560:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    e564:	2000      	movs	r0, #0
    e566:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
    e56a:	4601      	mov	r1, r0
    e56c:	2501      	movs	r5, #1
    e56e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    e572:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    e576:	4606      	mov	r6, r0
    e578:	f7fe ff82 	bl	d480 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    e57c:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    e580:	1c40      	adds	r0, r0, #1
    e582:	280a      	cmp	r0, #10
    e584:	d201      	bcs.n	e58a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x104>
    e586:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    e58a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    e58e:	b138      	cbz	r0, e5a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    e590:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    e594:	1c40      	adds	r0, r0, #1
    e596:	280a      	cmp	r0, #10
    e598:	d302      	bcc.n	e5a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    e59a:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
    e59e:	e002      	b.n	e5a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x120>
    e5a0:	2002      	movs	r0, #2
    e5a2:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    e5a6:	4620      	mov	r0, r4
    e5a8:	f000 f822 	bl	e5f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    e5ac:	b120      	cbz	r0, e5b8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x132>
    e5ae:	4620      	mov	r0, r4
    e5b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e5b4:	f000 b80d 	b.w	e5d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    e5b8:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    e5bc:	4631      	mov	r1, r6
    e5be:	f000 f8bd 	bl	e73c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    e5c2:	2800      	cmp	r0, #0
    e5c4:	d104      	bne.n	e5d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14a>
    e5c6:	f240 6191 	movw	r1, #1681	; 0x691
    e5ca:	2030      	movs	r0, #48	; 0x30
    e5cc:	f7f5 ff06 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5d0:	bd70      	pop	{r4, r5, r6, pc}
    e5d2:	b510      	push	{r4, lr}
    e5d4:	4604      	mov	r4, r0
    e5d6:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    e5da:	f7f3 ffcf 	bl	257c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e5de:	2000      	movs	r0, #0
    e5e0:	7620      	strb	r0, [r4, #24]
    e5e2:	bd10      	pop	{r4, pc}
    e5e4:	b510      	push	{r4, lr}
    e5e6:	f7ff fd64 	bl	e0b2 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    e5ea:	f500 7088 	add.w	r0, r0, #272	; 0x110
    e5ee:	bd10      	pop	{r4, pc}
    e5f0:	b570      	push	{r4, r5, r6, lr}
    e5f2:	4605      	mov	r5, r0
    e5f4:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    e5f8:	b108      	cbz	r0, e5fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x178>
    e5fa:	2001      	movs	r0, #1
    e5fc:	bd70      	pop	{r4, r5, r6, pc}
    e5fe:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    e602:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e606:	4050      	eors	r0, r2
    e608:	ea70 0101 	orns	r1, r0, r1
    e60c:	d012      	beq.n	e634 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    e60e:	2400      	movs	r4, #0
    e610:	4621      	mov	r1, r4
    e612:	4628      	mov	r0, r5
    e614:	f7ff ffe6 	bl	e5e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    e618:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    e61c:	1840      	adds	r0, r0, r1
    e61e:	4154      	adcs	r4, r2
    e620:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    e624:	3df8      	subs	r5, #248	; 0xf8
    e626:	1a10      	subs	r0, r2, r0
    e628:	41a1      	sbcs	r1, r4
    e62a:	d503      	bpl.n	e634 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    e62c:	4628      	mov	r0, r5
    e62e:	f7ff fd98 	bl	e162 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e632:	e7e2      	b.n	e5fa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x174>
    e634:	2000      	movs	r0, #0
    e636:	bd70      	pop	{r4, r5, r6, pc}
    e638:	b510      	push	{r4, lr}
    e63a:	4604      	mov	r4, r0
    e63c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    e640:	f000 f9ef 	bl	ea22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59c>
    e644:	4602      	mov	r2, r0
    e646:	4620      	mov	r0, r4
    e648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e64c:	f240 111b 	movw	r1, #283	; 0x11b
    e650:	f7ff bafa 	b.w	dc48 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e654:	b510      	push	{r4, lr}
    e656:	f7fc fb3b 	bl	acd0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    e65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e65e:	f7f4 b8ef 	b.w	2840 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    e662:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e666:	4604      	mov	r4, r0
    e668:	f890 0262 	ldrb.w	r0, [r0, #610]	; 0x262
    e66c:	2800      	cmp	r0, #0
    e66e:	d051      	beq.n	e714 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    e670:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    e674:	2803      	cmp	r0, #3
    e676:	d14d      	bne.n	e714 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    e678:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    e67c:	f001 fcab 	bl	ffd6 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    e680:	4605      	mov	r5, r0
    e682:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    e686:	f7f9 f9c1 	bl	7a0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    e68a:	4428      	add	r0, r5
    e68c:	b286      	uxth	r6, r0
    e68e:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    e692:	f7f9 f9bb 	bl	7a0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    e696:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    e69a:	fa1f f880 	uxth.w	r8, r0
    e69e:	4648      	mov	r0, r9
    e6a0:	f7fc fbd4 	bl	ae4c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e6a4:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    e6a8:	1a0d      	subs	r5, r1, r0
    e6aa:	4648      	mov	r0, r9
    e6ac:	f7fc fbfa 	bl	aea4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e6b0:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    e6b4:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    e6b8:	fbb0 f0fa 	udiv	r0, r0, sl
    e6bc:	1a2d      	subs	r5, r5, r0
    e6be:	4648      	mov	r0, r9
    e6c0:	f7fc fbc4 	bl	ae4c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e6c4:	f8d4 1220 	ldr.w	r1, [r4, #544]	; 0x220
    e6c8:	1a0f      	subs	r7, r1, r0
    e6ca:	4648      	mov	r0, r9
    e6cc:	f7fc fbea 	bl	aea4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e6d0:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e6d4:	4401      	add	r1, r0
    e6d6:	fbb1 f0fa 	udiv	r0, r1, sl
    e6da:	1a39      	subs	r1, r7, r0
    e6dc:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    e6e0:	4370      	muls	r0, r6
    e6e2:	fbb0 f2f8 	udiv	r2, r0, r8
    e6e6:	2029      	movs	r0, #41	; 0x29
    e6e8:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    e6ec:	3260      	adds	r2, #96	; 0x60
    e6ee:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    e6f2:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    e6f6:	42a9      	cmp	r1, r5
    e6f8:	d801      	bhi.n	e6fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x278>
    e6fa:	4285      	cmp	r5, r0
    e6fc:	d901      	bls.n	e702 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x27c>
    e6fe:	f7f5 fa9d 	bl	3c3c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    e702:	4631      	mov	r1, r6
    e704:	6920      	ldr	r0, [r4, #16]
    e706:	f7fd fa97 	bl	bc38 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    e70a:	2100      	movs	r1, #0
    e70c:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    e710:	f884 1262 	strb.w	r1, [r4, #610]	; 0x262
    e714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e718:	b570      	push	{r4, r5, r6, lr}
    e71a:	460c      	mov	r4, r1
    e71c:	4605      	mov	r5, r0
    e71e:	f7fc fbc1 	bl	aea4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e722:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e726:	4408      	add	r0, r1
    e728:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e72c:	fbb0 f6f1 	udiv	r6, r0, r1
    e730:	4628      	mov	r0, r5
    e732:	f7fc fb8b 	bl	ae4c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e736:	4430      	add	r0, r6
    e738:	4420      	add	r0, r4
    e73a:	bd70      	pop	{r4, r5, r6, pc}
    e73c:	f7f3 baba 	b.w	1cb4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e740:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e742:	4604      	mov	r4, r0
    e744:	f7ff fcde 	bl	e104 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    e748:	b1f8      	cbz	r0, e78a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    e74a:	4620      	mov	r0, r4
    e74c:	f7ff fcd2 	bl	e0f4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e750:	b918      	cbnz	r0, e75a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d4>
    e752:	4620      	mov	r0, r4
    e754:	f7ff fcd8 	bl	e108 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e758:	b140      	cbz	r0, e76c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e6>
    e75a:	2462      	movs	r4, #98	; 0x62
    e75c:	4668      	mov	r0, sp
    e75e:	f7f5 fd19 	bl	4194 <mpsl_fem_pa_is_configured>
    e762:	f89d 0000 	ldrb.w	r0, [sp]
    e766:	b118      	cbz	r0, e770 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ea>
    e768:	2501      	movs	r5, #1
    e76a:	e002      	b.n	e772 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ec>
    e76c:	245b      	movs	r4, #91	; 0x5b
    e76e:	e7f5      	b.n	e75c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    e770:	2500      	movs	r5, #0
    e772:	a801      	add	r0, sp, #4
    e774:	f7f5 fcf6 	bl	4164 <mpsl_fem_lna_is_configured>
    e778:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e77c:	b100      	cbz	r0, e780 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fa>
    e77e:	2001      	movs	r0, #1
    e780:	4305      	orrs	r5, r0
    e782:	d000      	beq.n	e786 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    e784:	340a      	adds	r4, #10
    e786:	4620      	mov	r0, r4
    e788:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e78a:	2084      	movs	r0, #132	; 0x84
    e78c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e78e:	b570      	push	{r4, r5, r6, lr}
    e790:	4604      	mov	r4, r0
    e792:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    e794:	2500      	movs	r5, #0
    e796:	b130      	cbz	r0, e7a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    e798:	f7f8 f82a 	bl	67f0 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    e79c:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    e79e:	fbb0 f2f1 	udiv	r2, r0, r1
    e7a2:	fb01 0512 	mls	r5, r1, r2, r0
    e7a6:	4620      	mov	r0, r4
    e7a8:	f7ff fc7f 	bl	e0aa <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e7ac:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    e7b0:	4428      	add	r0, r5
    e7b2:	34e8      	adds	r4, #232	; 0xe8
    e7b4:	2500      	movs	r5, #0
    e7b6:	1882      	adds	r2, r0, r2
    e7b8:	eb45 0001 	adc.w	r0, r5, r1
    e7bc:	e9c4 2004 	strd	r2, r0, [r4, #16]
    e7c0:	f804 5b0b 	strb.w	r5, [r4], #11
    e7c4:	2001      	movs	r0, #1
    e7c6:	f804 0901 	strb.w	r0, [r4], #-1
    e7ca:	2002      	movs	r0, #2
    e7cc:	f804 09f2 	strb.w	r0, [r4], #-242
    e7d0:	4620      	mov	r0, r4
    e7d2:	f7ff ffb5 	bl	e740 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    e7d6:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    e7da:	4620      	mov	r0, r4
    e7dc:	f7ff ff08 	bl	e5f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    e7e0:	b930      	cbnz	r0, e7f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x36a>
    e7e2:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    e7e6:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    e7ea:	f7ff ffa7 	bl	e73c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    e7ee:	b128      	cbz	r0, e7fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x376>
    e7f0:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    e7f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e7f8:	f7ff bf2c 	b.w	e654 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    e7fc:	f240 61d7 	movw	r1, #1751	; 0x6d7
    e800:	2030      	movs	r0, #48	; 0x30
    e802:	f7f5 fdeb 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e806:	b510      	push	{r4, lr}
    e808:	4604      	mov	r4, r0
    e80a:	2000      	movs	r0, #0
    e80c:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    e810:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    e814:	f7f3 feb2 	bl	257c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e818:	2020      	movs	r0, #32
    e81a:	f884 0294 	strb.w	r0, [r4, #660]	; 0x294
    e81e:	bd10      	pop	{r4, pc}
    e820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e824:	4604      	mov	r4, r0
    e826:	2500      	movs	r5, #0
    e828:	f880 50d0 	strb.w	r5, [r0, #208]	; 0xd0
    e82c:	e9d4 673e 	ldrd	r6, r7, [r4, #248]	; 0xf8
    e830:	4689      	mov	r9, r1
    e832:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    e836:	f04f 0801 	mov.w	r8, #1
    e83a:	f880 80e1 	strb.w	r8, [r0, #225]	; 0xe1
    e83e:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    e842:	4641      	mov	r1, r8
    e844:	34c8      	adds	r4, #200	; 0xc8
    e846:	f7f7 fbc1 	bl	5fcc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    e84a:	6860      	ldr	r0, [r4, #4]
    e84c:	f8c0 6280 	str.w	r6, [r0, #640]	; 0x280
    e850:	f8c0 7284 	str.w	r7, [r0, #644]	; 0x284
    e854:	6861      	ldr	r1, [r4, #4]
    e856:	7820      	ldrb	r0, [r4, #0]
    e858:	f881 0294 	strb.w	r0, [r1, #660]	; 0x294
    e85c:	6861      	ldr	r1, [r4, #4]
    e85e:	f8c1 9298 	str.w	r9, [r1, #664]	; 0x298
    e862:	6860      	ldr	r0, [r4, #4]
    e864:	e9c0 67a2 	strd	r6, r7, [r0, #648]	; 0x288
    e868:	6864      	ldr	r4, [r4, #4]
    e86a:	f884 524c 	strb.w	r5, [r4, #588]	; 0x24c
    e86e:	2300      	movs	r3, #0
    e870:	f8a4 5290 	strh.w	r5, [r4, #656]	; 0x290
    e874:	461a      	mov	r2, r3
    e876:	4619      	mov	r1, r3
    e878:	4620      	mov	r0, r4
    e87a:	9500      	str	r5, [sp, #0]
    e87c:	f7f9 f9a4 	bl	7bc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    e880:	b120      	cbz	r0, e88c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
    e882:	f44f 7106 	mov.w	r1, #536	; 0x218
    e886:	2030      	movs	r0, #48	; 0x30
    e888:	f7f5 fda8 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e88c:	f8c4 5248 	str.w	r5, [r4, #584]	; 0x248
    e890:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
    e894:	f884 824c 	strb.w	r8, [r4, #588]	; 0x24c
    e898:	f8a4 525e 	strh.w	r5, [r4, #606]	; 0x25e
    e89c:	f8a4 525c 	strh.w	r5, [r4, #604]	; 0x25c
    e8a0:	348c      	adds	r4, #140	; 0x8c
    e8a2:	f884 51d5 	strb.w	r5, [r4, #469]	; 0x1d5
    e8a6:	8820      	ldrh	r0, [r4, #0]
    e8a8:	1e40      	subs	r0, r0, #1
    e8aa:	8020      	strh	r0, [r4, #0]
    e8ac:	f8a4 5206 	strh.w	r5, [r4, #518]	; 0x206
    e8b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e8b4:	f7ff bece 	b.w	e654 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    e8b8:	b570      	push	{r4, r5, r6, lr}
    e8ba:	b140      	cbz	r0, e8ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x448>
    e8bc:	2909      	cmp	r1, #9
    e8be:	d249      	bcs.n	e954 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ce>
    e8c0:	e8df f001 	tbb	[pc, r1]
    e8c4:	3c3c1507 	.word	0x3c3c1507
    e8c8:	402a4838 	.word	0x402a4838
    e8cc:	0044      	.short	0x0044
    e8ce:	21ca      	movs	r1, #202	; 0xca
    e8d0:	e03d      	b.n	e94e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    e8d2:	4604      	mov	r4, r0
    e8d4:	f7f8 f964 	bl	6ba0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    e8d8:	b110      	cbz	r0, e8e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45a>
    e8da:	f44f 711d 	mov.w	r1, #628	; 0x274
    e8de:	e036      	b.n	e94e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    e8e0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    e8e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e8e8:	38ff      	subs	r0, #255	; 0xff
    e8ea:	f7f4 b8c3 	b.w	2a74 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    e8ee:	4605      	mov	r5, r0
    e8f0:	f7ff fc04 	bl	e0fc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    e8f4:	b9b0      	cbnz	r0, e924 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49e>
    e8f6:	2100      	movs	r1, #0
    e8f8:	4628      	mov	r0, r5
    e8fa:	f7ff fe73 	bl	e5e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    e8fe:	4604      	mov	r4, r0
    e900:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    e904:	42a0      	cmp	r0, r4
    e906:	d20b      	bcs.n	e920 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    e908:	1a20      	subs	r0, r4, r0
    e90a:	2103      	movs	r1, #3
    e90c:	f7f3 f806 	bl	191c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e910:	b130      	cbz	r0, e920 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    e912:	4628      	mov	r0, r5
    e914:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    e918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e91c:	f7ff bb5c 	b.w	dfd8 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    e920:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    e924:	4628      	mov	r0, r5
    e926:	f7f8 f957 	bl	6bd8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    e92a:	2800      	cmp	r0, #0
    e92c:	d014      	beq.n	e958 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d2>
    e92e:	f240 21a7 	movw	r1, #679	; 0x2a7
    e932:	e00c      	b.n	e94e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    e934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e938:	f7fc bb8e 	b.w	b058 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    e93c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e940:	f7ff be0a 	b.w	e558 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    e944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e948:	f7ff be43 	b.w	e5d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    e94c:	21ea      	movs	r1, #234	; 0xea
    e94e:	2030      	movs	r0, #48	; 0x30
    e950:	f7f5 fd44 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e954:	21ee      	movs	r1, #238	; 0xee
    e956:	e7fa      	b.n	e94e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    e958:	bd70      	pop	{r4, r5, r6, pc}
    e95a:	b510      	push	{r4, lr}
    e95c:	0004      	movs	r4, r0
    e95e:	d008      	beq.n	e972 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ec>
    e960:	2909      	cmp	r1, #9
    e962:	d25c      	bcs.n	ea1e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x598>
    e964:	e8df f001 	tbb	[pc, r1]
    e968:	40403807 	.word	0x40403807
    e96c:	4c455b3c 	.word	0x4c455b3c
    e970:	0057      	.short	0x0057
    e972:	2196      	movs	r1, #150	; 0x96
    e974:	e050      	b.n	ea18 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    e976:	2100      	movs	r1, #0
    e978:	f8c4 129c 	str.w	r1, [r4, #668]	; 0x29c
    e97c:	f894 1260 	ldrb.w	r1, [r4, #608]	; 0x260
    e980:	4620      	mov	r0, r4
    e982:	b189      	cbz	r1, e9a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x522>
    e984:	f8b0 225e 	ldrh.w	r2, [r0, #606]	; 0x25e
    e988:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
    e98c:	428a      	cmp	r2, r1
    e98e:	d106      	bne.n	e99e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x518>
    e990:	f8b0 2214 	ldrh.w	r2, [r0, #532]	; 0x214
    e994:	1a51      	subs	r1, r2, r1
    e996:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    e99a:	4611      	mov	r1, r2
    e99c:	e00d      	b.n	e9ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    e99e:	1a51      	subs	r1, r2, r1
    e9a0:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    e9a4:	b291      	uxth	r1, r2
    e9a6:	e008      	b.n	e9ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    e9a8:	f8b0 125c 	ldrh.w	r1, [r0, #604]	; 0x25c
    e9ac:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
    e9b0:	1a89      	subs	r1, r1, r2
    e9b2:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    e9b6:	f8b0 125c 	ldrh.w	r1, [r0, #604]	; 0x25c
    e9ba:	f8a0 108c 	strh.w	r1, [r0, #140]	; 0x8c
    e9be:	e9d0 129e 	ldrd	r1, r2, [r0, #632]	; 0x278
    e9c2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e9c6:	f8c0 2284 	str.w	r2, [r0, #644]	; 0x284
    e9ca:	f7f9 fbff 	bl	81cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    e9ce:	4620      	mov	r0, r4
    e9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e9d4:	f7f9 bb02 	b.w	7fdc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    e9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e9dc:	f000 b909 	b.w	ebf2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    e9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e9e4:	f7fc bb38 	b.w	b058 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    e9e8:	4620      	mov	r0, r4
    e9ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e9ee:	f000 b825 	b.w	ea3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    e9f2:	2001      	movs	r0, #1
    e9f4:	f7f2 ff82 	bl	18fc <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    e9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e9fc:	f7fe bbe5 	b.w	d1ca <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    ea00:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    ea04:	2804      	cmp	r0, #4
    ea06:	d001      	beq.n	ea0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x586>
    ea08:	21b8      	movs	r1, #184	; 0xb8
    ea0a:	e005      	b.n	ea18 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    ea0c:	4620      	mov	r0, r4
    ea0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea12:	f7ff bef8 	b.w	e806 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    ea16:	21be      	movs	r1, #190	; 0xbe
    ea18:	2030      	movs	r0, #48	; 0x30
    ea1a:	f7f5 fcdf 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea1e:	21c2      	movs	r1, #194	; 0xc2
    ea20:	e7fa      	b.n	ea18 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    ea22:	b510      	push	{r4, lr}
    ea24:	f7fc fa3e 	bl	aea4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ea28:	f64d 7141 	movw	r1, #57153	; 0xdf41
    ea2c:	4408      	add	r0, r1
    ea2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ea32:	fbb0 f0f1 	udiv	r0, r0, r1
    ea36:	f200 1079 	addw	r0, r0, #377	; 0x179
    ea3a:	bd10      	pop	{r4, pc}
    ea3c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ea3e:	4604      	mov	r4, r0
    ea40:	f7f4 f8e6 	bl	2c10 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ea44:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    ea48:	f8d4 2284 	ldr.w	r2, [r4, #644]	; 0x284
    ea4c:	1ac0      	subs	r0, r0, r3
    ea4e:	eb61 0102 	sbc.w	r1, r1, r2
    ea52:	2200      	movs	r2, #0
    ea54:	4613      	mov	r3, r2
    ea56:	1a12      	subs	r2, r2, r0
    ea58:	418b      	sbcs	r3, r1
    ea5a:	db02      	blt.n	ea62 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5dc>
    ea5c:	f240 610c 	movw	r1, #1548	; 0x60c
    ea60:	e052      	b.n	eb08 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x682>
    ea62:	1c42      	adds	r2, r0, #1
    ea64:	f171 0100 	sbcs.w	r1, r1, #0
    ea68:	db02      	blt.n	ea70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ea>
    ea6a:	f240 610d 	movw	r1, #1549	; 0x60d
    ea6e:	e04b      	b.n	eb08 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x682>
    ea70:	6922      	ldr	r2, [r4, #16]
    ea72:	2100      	movs	r1, #0
    ea74:	b10a      	cbz	r2, ea7a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5f4>
    ea76:	fbb0 f1f2 	udiv	r1, r0, r2
    ea7a:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    ea7e:	280e      	cmp	r0, #14
    ea80:	d00c      	beq.n	ea9c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x616>
    ea82:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    ea86:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
    ea8a:	1843      	adds	r3, r0, r1
    ea8c:	1ad3      	subs	r3, r2, r3
    ea8e:	b21b      	sxth	r3, r3
    ea90:	2b00      	cmp	r3, #0
    ea92:	db06      	blt.n	eaa2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x61c>
    ea94:	1c52      	adds	r2, r2, #1
    ea96:	f8a4 225e 	strh.w	r2, [r4, #606]	; 0x25e
    ea9a:	e006      	b.n	eaaa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x624>
    ea9c:	f8b4 025e 	ldrh.w	r0, [r4, #606]	; 0x25e
    eaa0:	e012      	b.n	eac8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x642>
    eaa2:	1c49      	adds	r1, r1, #1
    eaa4:	4408      	add	r0, r1
    eaa6:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    eaaa:	f894 0261 	ldrb.w	r0, [r4, #609]	; 0x261
    eaae:	f88d 0000 	strb.w	r0, [sp]
    eab2:	9800      	ldr	r0, [sp, #0]
    eab4:	9000      	str	r0, [sp, #0]
    eab6:	f89d 0000 	ldrb.w	r0, [sp]
    eaba:	b940      	cbnz	r0, eace <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x648>
    eabc:	f8b4 025e 	ldrh.w	r0, [r4, #606]	; 0x25e
    eac0:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    eac4:	4288      	cmp	r0, r1
    eac6:	d102      	bne.n	eace <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x648>
    eac8:	1c40      	adds	r0, r0, #1
    eaca:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    eace:	f8b4 0292 	ldrh.w	r0, [r4, #658]	; 0x292
    ead2:	1c40      	adds	r0, r0, #1
    ead4:	f8a4 0292 	strh.w	r0, [r4, #658]	; 0x292
    ead8:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
    eadc:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
    eae0:	1a40      	subs	r0, r0, r1
    eae2:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
    eae6:	1e40      	subs	r0, r0, #1
    eae8:	4408      	add	r0, r1
    eaea:	b285      	uxth	r5, r0
    eaec:	e026      	b.n	eb3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6b6>
    eaee:	a801      	add	r0, sp, #4
    eaf0:	2300      	movs	r3, #0
    eaf2:	9000      	str	r0, [sp, #0]
    eaf4:	461a      	mov	r2, r3
    eaf6:	4620      	mov	r0, r4
    eaf8:	f7f9 f866 	bl	7bc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    eafc:	2800      	cmp	r0, #0
    eafe:	d039      	beq.n	eb74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
    eb00:	2801      	cmp	r0, #1
    eb02:	d004      	beq.n	eb0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x688>
    eb04:	f240 614c 	movw	r1, #1612	; 0x64c
    eb08:	2030      	movs	r0, #48	; 0x30
    eb0a:	f7f5 fc67 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb0e:	f8b4 025e 	ldrh.w	r0, [r4, #606]	; 0x25e
    eb12:	f8b4 1210 	ldrh.w	r1, [r4, #528]	; 0x210
    eb16:	1a42      	subs	r2, r0, r1
    eb18:	b212      	sxth	r2, r2
    eb1a:	2a00      	cmp	r2, #0
    eb1c:	da09      	bge.n	eb32 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ac>
    eb1e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    eb22:	4402      	add	r2, r0
    eb24:	1aaa      	subs	r2, r5, r2
    eb26:	b212      	sxth	r2, r2
    eb28:	2a00      	cmp	r2, #0
    eb2a:	da02      	bge.n	eb32 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ac>
    eb2c:	f8a4 125e 	strh.w	r1, [r4, #606]	; 0x25e
    eb30:	e004      	b.n	eb3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6b6>
    eb32:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    eb36:	4408      	add	r0, r1
    eb38:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    eb3c:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
    eb40:	1a68      	subs	r0, r5, r1
    eb42:	b200      	sxth	r0, r0
    eb44:	2800      	cmp	r0, #0
    eb46:	dad2      	bge.n	eaee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x668>
    eb48:	f894 0099 	ldrb.w	r0, [r4, #153]	; 0x99
    eb4c:	b180      	cbz	r0, eb70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ea>
    eb4e:	2008      	movs	r0, #8
    eb50:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
    eb54:	220a      	movs	r2, #10
    eb56:	4621      	mov	r1, r4
    eb58:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    eb5c:	f7f7 fbb0 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    eb60:	4620      	mov	r0, r4
    eb62:	f000 f848 	bl	ebf6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    eb66:	4620      	mov	r0, r4
    eb68:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    eb6c:	f7ff be4b 	b.w	e806 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    eb70:	203e      	movs	r0, #62	; 0x3e
    eb72:	e7ed      	b.n	eb50 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ca>
    eb74:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    eb76:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    eb7a:	f001 0307 	and.w	r3, r1, #7
    eb7e:	7802      	ldrb	r2, [r0, #0]
    eb80:	2101      	movs	r1, #1
    eb82:	4099      	lsls	r1, r3
    eb84:	438a      	bics	r2, r1
    eb86:	7002      	strb	r2, [r0, #0]
    eb88:	4770      	bx	lr

0000eb8a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    eb8a:	b510      	push	{r4, lr}
    eb8c:	4604      	mov	r4, r0
    eb8e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
    eb92:	6921      	ldr	r1, [r4, #16]
    eb94:	4288      	cmp	r0, r1
    eb96:	d109      	bne.n	ebac <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    eb98:	f8b4 12c8 	ldrh.w	r1, [r4, #712]	; 0x2c8
    eb9c:	8b22      	ldrh	r2, [r4, #24]
    eb9e:	4291      	cmp	r1, r2
    eba0:	d104      	bne.n	ebac <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    eba2:	f8b4 12ca 	ldrh.w	r1, [r4, #714]	; 0x2ca
    eba6:	8b62      	ldrh	r2, [r4, #26]
    eba8:	4291      	cmp	r1, r2
    ebaa:	d014      	beq.n	ebd6 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    ebac:	8821      	ldrh	r1, [r4, #0]
    ebae:	f8a4 11c6 	strh.w	r1, [r4, #454]	; 0x1c6
    ebb2:	f7fe fb82 	bl	d2ba <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    ebb6:	f8a4 01c8 	strh.w	r0, [r4, #456]	; 0x1c8
    ebba:	f8b4 02c8 	ldrh.w	r0, [r4, #712]	; 0x2c8
    ebbe:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    ebc2:	f8b4 02ca 	ldrh.w	r0, [r4, #714]	; 0x2ca
    ebc6:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    ebca:	2208      	movs	r2, #8
    ebcc:	4621      	mov	r1, r4
    ebce:	f504 70dd 	add.w	r0, r4, #442	; 0x1ba
    ebd2:	f7f7 fb75 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    ebd6:	2102      	movs	r1, #2
    ebd8:	4620      	mov	r0, r4
    ebda:	f7f7 f9f7 	bl	5fcc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ebde:	2000      	movs	r0, #0
    ebe0:	f804 0f96 	strb.w	r0, [r4, #150]!
    ebe4:	2003      	movs	r0, #3
    ebe6:	70e0      	strb	r0, [r4, #3]
    ebe8:	bd10      	pop	{r4, pc}

0000ebea <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    ebea:	f7f5 bf7d 	b.w	4ae8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000ebee <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    ebee:	2000      	movs	r0, #0
    ebf0:	4770      	bx	lr

0000ebf2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    ebf2:	f7f6 bc33 	b.w	545c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000ebf6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    ebf6:	2100      	movs	r1, #0
    ebf8:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    ebfc:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    ec00:	f880 1099 	strb.w	r1, [r0, #153]	; 0x99
    ec04:	f890 121b 	ldrb.w	r1, [r0, #539]	; 0x21b
    ec08:	b109      	cbz	r1, ec0e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    ec0a:	2102      	movs	r1, #2
    ec0c:	e000      	b.n	ec10 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    ec0e:	2103      	movs	r1, #3
    ec10:	f7f8 bea4 	b.w	795c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    ec14:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
    ec18:	28fe      	cmp	r0, #254	; 0xfe
    ec1a:	d001      	beq.n	ec20 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    ec1c:	2001      	movs	r0, #1
    ec1e:	4770      	bx	lr
    ec20:	2000      	movs	r0, #0
    ec22:	4770      	bx	lr
    ec24:	b510      	push	{r4, lr}
    ec26:	2801      	cmp	r0, #1
    ec28:	d006      	beq.n	ec38 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    ec2a:	2802      	cmp	r0, #2
    ec2c:	d004      	beq.n	ec38 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    ec2e:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    ec32:	2006      	movs	r0, #6
    ec34:	f7f5 fbd2 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec38:	bd10      	pop	{r4, pc}
    ec3a:	2801      	cmp	r0, #1
    ec3c:	d002      	beq.n	ec44 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    ec3e:	2802      	cmp	r0, #2
    ec40:	d105      	bne.n	ec4e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    ec42:	e002      	b.n	ec4a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    ec44:	2901      	cmp	r1, #1
    ec46:	d004      	beq.n	ec52 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    ec48:	e001      	b.n	ec4e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    ec4a:	2902      	cmp	r1, #2
    ec4c:	d001      	beq.n	ec52 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    ec4e:	2000      	movs	r0, #0
    ec50:	4770      	bx	lr
    ec52:	2001      	movs	r0, #1
    ec54:	4770      	bx	lr
    ec56:	1a40      	subs	r0, r0, r1
    ec58:	b200      	sxth	r0, r0
    ec5a:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    ec5e:	4288      	cmp	r0, r1
    ec60:	dc01      	bgt.n	ec66 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    ec62:	2800      	cmp	r0, #0
    ec64:	dc01      	bgt.n	ec6a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    ec66:	2001      	movs	r0, #1
    ec68:	4770      	bx	lr
    ec6a:	2000      	movs	r0, #0
    ec6c:	4770      	bx	lr
    ec6e:	2200      	movs	r2, #0
    ec70:	704a      	strb	r2, [r1, #1]
    ec72:	2208      	movs	r2, #8
    ec74:	700a      	strb	r2, [r1, #0]
    ec76:	f5a0 7233 	sub.w	r2, r0, #716	; 0x2cc
    ec7a:	8812      	ldrh	r2, [r2, #0]
    ec7c:	808a      	strh	r2, [r1, #4]
    ec7e:	68c2      	ldr	r2, [r0, #12]
    ec80:	f8c1 2006 	str.w	r2, [r1, #6]
    ec84:	6902      	ldr	r2, [r0, #16]
    ec86:	f8c1 200a 	str.w	r2, [r1, #10]
    ec8a:	8a80      	ldrh	r0, [r0, #20]
    ec8c:	81c8      	strh	r0, [r1, #14]
    ec8e:	4770      	bx	lr
    ec90:	6842      	ldr	r2, [r0, #4]
    ec92:	2100      	movs	r1, #0
    ec94:	f882 1095 	strb.w	r1, [r2, #149]	; 0x95
    ec98:	6842      	ldr	r2, [r0, #4]
    ec9a:	f882 10ce 	strb.w	r1, [r2, #206]	; 0xce
    ec9e:	6840      	ldr	r0, [r0, #4]
    eca0:	f8a0 10ca 	strh.w	r1, [r0, #202]	; 0xca
    eca4:	4770      	bx	lr
    eca6:	b510      	push	{r4, lr}
    eca8:	4604      	mov	r4, r0
    ecaa:	6840      	ldr	r0, [r0, #4]
    ecac:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    ecb0:	0740      	lsls	r0, r0, #29
    ecb2:	d501      	bpl.n	ecb8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xc2>
    ecb4:	2001      	movs	r0, #1
    ecb6:	bd10      	pop	{r4, pc}
    ecb8:	f7f9 fb8a 	bl	83d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    ecbc:	6860      	ldr	r0, [r4, #4]
    ecbe:	f850 1f84 	ldr.w	r1, [r0, #132]!
    ecc2:	f041 0104 	orr.w	r1, r1, #4
    ecc6:	6001      	str	r1, [r0, #0]
    ecc8:	2000      	movs	r0, #0
    ecca:	bd10      	pop	{r4, pc}
    eccc:	b510      	push	{r4, lr}
    ecce:	4604      	mov	r4, r0
    ecd0:	6840      	ldr	r0, [r0, #4]
    ecd2:	2301      	movs	r3, #1
    ecd4:	2109      	movs	r1, #9
    ecd6:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    ecda:	3080      	adds	r0, #128	; 0x80
    ecdc:	f7fe fb06 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ece0:	2800      	cmp	r0, #0
    ece2:	d009      	beq.n	ecf8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x102>
    ece4:	6861      	ldr	r1, [r4, #4]
    ece6:	2000      	movs	r0, #0
    ece8:	f881 00c2 	strb.w	r0, [r1, #194]	; 0xc2
    ecec:	6861      	ldr	r1, [r4, #4]
    ecee:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    ecf2:	6861      	ldr	r1, [r4, #4]
    ecf4:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    ecf8:	bd10      	pop	{r4, pc}
    ecfa:	b510      	push	{r4, lr}
    ecfc:	4604      	mov	r4, r0
    ecfe:	6840      	ldr	r0, [r0, #4]
    ed00:	2301      	movs	r3, #1
    ed02:	2100      	movs	r1, #0
    ed04:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    ed08:	3080      	adds	r0, #128	; 0x80
    ed0a:	f7fe faef 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ed0e:	2800      	cmp	r0, #0
    ed10:	6860      	ldr	r0, [r4, #4]
    ed12:	d00b      	beq.n	ed2c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x136>
    ed14:	f890 009b 	ldrb.w	r0, [r0, #155]	; 0x9b
    ed18:	2800      	cmp	r0, #0
    ed1a:	d006      	beq.n	ed2a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x134>
    ed1c:	f7f9 fb58 	bl	83d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    ed20:	6861      	ldr	r1, [r4, #4]
    ed22:	2012      	movs	r0, #18
    ed24:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    ed28:	2000      	movs	r0, #0
    ed2a:	bd10      	pop	{r4, pc}
    ed2c:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    ed30:	2301      	movs	r3, #1
    ed32:	2105      	movs	r1, #5
    ed34:	3080      	adds	r0, #128	; 0x80
    ed36:	f7fe fad9 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ed3a:	b108      	cbz	r0, ed40 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x14a>
    ed3c:	2008      	movs	r0, #8
    ed3e:	bd10      	pop	{r4, pc}
    ed40:	2001      	movs	r0, #1
    ed42:	bd10      	pop	{r4, pc}
    ed44:	6840      	ldr	r0, [r0, #4]
    ed46:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    ed4a:	2913      	cmp	r1, #19
    ed4c:	d001      	beq.n	ed52 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x15c>
    ed4e:	2002      	movs	r0, #2
    ed50:	4770      	bx	lr
    ed52:	2114      	movs	r1, #20
    ed54:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    ed58:	2000      	movs	r0, #0
    ed5a:	4770      	bx	lr
    ed5c:	b510      	push	{r4, lr}
    ed5e:	4604      	mov	r4, r0
    ed60:	6840      	ldr	r0, [r0, #4]
    ed62:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    ed66:	2819      	cmp	r0, #25
    ed68:	d001      	beq.n	ed6e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x178>
    ed6a:	2002      	movs	r0, #2
    ed6c:	bd10      	pop	{r4, pc}
    ed6e:	f7f9 fb3b 	bl	83e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ed72:	6861      	ldr	r1, [r4, #4]
    ed74:	201d      	movs	r0, #29
    ed76:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    ed7a:	2000      	movs	r0, #0
    ed7c:	bd10      	pop	{r4, pc}
    ed7e:	b510      	push	{r4, lr}
    ed80:	6843      	ldr	r3, [r0, #4]
    ed82:	4604      	mov	r4, r0
    ed84:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
    ed88:	2808      	cmp	r0, #8
    ed8a:	d20d      	bcs.n	eda8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1b2>
    ed8c:	f500 720c 	add.w	r2, r0, #560	; 0x230
    ed90:	f1c0 0008 	rsb	r0, r0, #8
    ed94:	b2c1      	uxtb	r1, r0
    ed96:	1898      	adds	r0, r3, r2
    ed98:	f7f5 fbc0 	bl	451c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ed9c:	6861      	ldr	r1, [r4, #4]
    ed9e:	f891 2122 	ldrb.w	r2, [r1, #290]	; 0x122
    eda2:	4410      	add	r0, r2
    eda4:	f881 0122 	strb.w	r0, [r1, #290]	; 0x122
    eda8:	6862      	ldr	r2, [r4, #4]
    edaa:	f892 1122 	ldrb.w	r1, [r2, #290]	; 0x122
    edae:	3908      	subs	r1, #8
    edb0:	2904      	cmp	r1, #4
    edb2:	d20d      	bcs.n	edd0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1da>
    edb4:	f501 708a 	add.w	r0, r1, #276	; 0x114
    edb8:	f1c1 0104 	rsb	r1, r1, #4
    edbc:	b2c9      	uxtb	r1, r1
    edbe:	4410      	add	r0, r2
    edc0:	f7f5 fbac 	bl	451c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    edc4:	6861      	ldr	r1, [r4, #4]
    edc6:	f891 2122 	ldrb.w	r2, [r1, #290]	; 0x122
    edca:	4410      	add	r0, r2
    edcc:	f881 0122 	strb.w	r0, [r1, #290]	; 0x122
    edd0:	6860      	ldr	r0, [r4, #4]
    edd2:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    edd6:	290c      	cmp	r1, #12
    edd8:	d30f      	bcc.n	edfa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x204>
    edda:	d005      	beq.n	ede8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1f2>
    eddc:	f640 1135 	movw	r1, #2357	; 0x935
    ede0:	f04f 0031 	mov.w	r0, #49	; 0x31
    ede4:	f7f5 fafa 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ede8:	2100      	movs	r1, #0
    edea:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
    edee:	2101      	movs	r1, #1
    edf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edf4:	2004      	movs	r0, #4
    edf6:	f7fa b8a5 	b.w	8f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    edfa:	bd10      	pop	{r4, pc}
    edfc:	6842      	ldr	r2, [r0, #4]
    edfe:	2130      	movs	r1, #48	; 0x30
    ee00:	f882 1095 	strb.w	r1, [r2, #149]	; 0x95
    ee04:	6840      	ldr	r0, [r0, #4]
    ee06:	2100      	movs	r1, #0
    ee08:	f880 12b4 	strb.w	r1, [r0, #692]	; 0x2b4
    ee0c:	4770      	bx	lr
    ee0e:	b510      	push	{r4, lr}
    ee10:	6841      	ldr	r1, [r0, #4]
    ee12:	f891 2096 	ldrb.w	r2, [r1, #150]	; 0x96
    ee16:	2a16      	cmp	r2, #22
    ee18:	d004      	beq.n	ee24 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x22e>
    ee1a:	f240 71cc 	movw	r1, #1996	; 0x7cc
    ee1e:	2031      	movs	r0, #49	; 0x31
    ee20:	f7f5 fadc 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee24:	2201      	movs	r2, #1
    ee26:	f881 20d3 	strb.w	r2, [r1, #211]	; 0xd3
    ee2a:	6840      	ldr	r0, [r0, #4]
    ee2c:	2117      	movs	r1, #23
    ee2e:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    ee32:	bd10      	pop	{r4, pc}
    ee34:	f7fe bfd0 	b.w	ddd8 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    ee38:	b510      	push	{r4, lr}
    ee3a:	4604      	mov	r4, r0
    ee3c:	6840      	ldr	r0, [r0, #4]
    ee3e:	2301      	movs	r3, #1
    ee40:	2100      	movs	r1, #0
    ee42:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    ee46:	3080      	adds	r0, #128	; 0x80
    ee48:	f7fe fa50 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ee4c:	b120      	cbz	r0, ee58 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x262>
    ee4e:	6861      	ldr	r1, [r4, #4]
    ee50:	201e      	movs	r0, #30
    ee52:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    ee56:	bd10      	pop	{r4, pc}
    ee58:	f640 0148 	movw	r1, #2120	; 0x848
    ee5c:	2031      	movs	r0, #49	; 0x31
    ee5e:	f7f5 fabd 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee62:	b510      	push	{r4, lr}
    ee64:	6841      	ldr	r1, [r0, #4]
    ee66:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    ee6a:	06c2      	lsls	r2, r0, #27
    ee6c:	d402      	bmi.n	ee74 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x27e>
    ee6e:	f640 014f 	movw	r1, #2127	; 0x84f
    ee72:	e003      	b.n	ee7c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x286>
    ee74:	0682      	lsls	r2, r0, #26
    ee76:	d504      	bpl.n	ee82 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x28c>
    ee78:	f44f 6105 	mov.w	r1, #2128	; 0x850
    ee7c:	2031      	movs	r0, #49	; 0x31
    ee7e:	f7f5 faad 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee82:	f020 0010 	bic.w	r0, r0, #16
    ee86:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    ee8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee8e:	f7f9 baab 	b.w	83e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ee92:	b510      	push	{r4, lr}
    ee94:	4604      	mov	r4, r0
    ee96:	6840      	ldr	r0, [r0, #4]
    ee98:	2301      	movs	r3, #1
    ee9a:	2100      	movs	r1, #0
    ee9c:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    eea0:	3080      	adds	r0, #128	; 0x80
    eea2:	f7fe fa23 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eea6:	b120      	cbz	r0, eeb2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2bc>
    eea8:	6861      	ldr	r1, [r4, #4]
    eeaa:	2010      	movs	r0, #16
    eeac:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    eeb0:	bd10      	pop	{r4, pc}
    eeb2:	f640 013b 	movw	r1, #2107	; 0x83b
    eeb6:	2031      	movs	r0, #49	; 0x31
    eeb8:	f7f5 fa90 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eebc:	6840      	ldr	r0, [r0, #4]
    eebe:	f850 1f84 	ldr.w	r1, [r0, #132]!
    eec2:	f021 0104 	bic.w	r1, r1, #4
    eec6:	6001      	str	r1, [r0, #0]
    eec8:	f7f9 ba8e 	b.w	83e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    eecc:	b510      	push	{r4, lr}
    eece:	6841      	ldr	r1, [r0, #4]
    eed0:	f891 2096 	ldrb.w	r2, [r1, #150]	; 0x96
    eed4:	2a12      	cmp	r2, #18
    eed6:	d004      	beq.n	eee2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2ec>
    eed8:	f240 71c4 	movw	r1, #1988	; 0x7c4
    eedc:	2031      	movs	r0, #49	; 0x31
    eede:	f7f5 fa7d 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eee2:	2201      	movs	r2, #1
    eee4:	f881 20d3 	strb.w	r2, [r1, #211]	; 0xd3
    eee8:	6840      	ldr	r0, [r0, #4]
    eeea:	2113      	movs	r1, #19
    eeec:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    eef0:	bd10      	pop	{r4, pc}
    eef2:	b510      	push	{r4, lr}
    eef4:	4604      	mov	r4, r0
    eef6:	6840      	ldr	r0, [r0, #4]
    eef8:	2301      	movs	r3, #1
    eefa:	2100      	movs	r1, #0
    eefc:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    ef00:	3080      	adds	r0, #128	; 0x80
    ef02:	f7fe f9f3 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ef06:	b120      	cbz	r0, ef12 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x31c>
    ef08:	6861      	ldr	r1, [r4, #4]
    ef0a:	2021      	movs	r0, #33	; 0x21
    ef0c:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    ef10:	bd10      	pop	{r4, pc}
    ef12:	f640 015a 	movw	r1, #2138	; 0x85a
    ef16:	2031      	movs	r0, #49	; 0x31
    ef18:	f7f5 fa60 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef1c:	b510      	push	{r4, lr}
    ef1e:	6841      	ldr	r1, [r0, #4]
    ef20:	f891 0096 	ldrb.w	r0, [r1, #150]	; 0x96
    ef24:	2823      	cmp	r0, #35	; 0x23
    ef26:	d005      	beq.n	ef34 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x33e>
    ef28:	b120      	cbz	r0, ef34 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x33e>
    ef2a:	f640 0161 	movw	r1, #2145	; 0x861
    ef2e:	2031      	movs	r0, #49	; 0x31
    ef30:	f7f5 fa54 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef34:	2024      	movs	r0, #36	; 0x24
    ef36:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    ef3a:	bd10      	pop	{r4, pc}
    ef3c:	b510      	push	{r4, lr}
    ef3e:	6840      	ldr	r0, [r0, #4]
    ef40:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    ef44:	292f      	cmp	r1, #47	; 0x2f
    ef46:	d006      	beq.n	ef56 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x360>
    ef48:	2917      	cmp	r1, #23
    ef4a:	d00b      	beq.n	ef64 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x36e>
    ef4c:	f240 71ee 	movw	r1, #2030	; 0x7ee
    ef50:	2031      	movs	r0, #49	; 0x31
    ef52:	f7f5 fa43 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef56:	2100      	movs	r1, #0
    ef58:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    ef5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef60:	f7f9 ba42 	b.w	83e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ef64:	211b      	movs	r1, #27
    ef66:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    ef6a:	bd10      	pop	{r4, pc}
    ef6c:	b510      	push	{r4, lr}
    ef6e:	6840      	ldr	r0, [r0, #4]
    ef70:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    ef74:	2917      	cmp	r1, #23
    ef76:	d004      	beq.n	ef82 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x38c>
    ef78:	f240 71d9 	movw	r1, #2009	; 0x7d9
    ef7c:	2031      	movs	r0, #49	; 0x31
    ef7e:	f7f5 fa2d 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef82:	211b      	movs	r1, #27
    ef84:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    ef88:	bd10      	pop	{r4, pc}
    ef8a:	f7fe bf13 	b.w	ddb4 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    ef8e:	b510      	push	{r4, lr}
    ef90:	6840      	ldr	r0, [r0, #4]
    ef92:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    ef96:	2917      	cmp	r1, #23
    ef98:	d004      	beq.n	efa4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ae>
    ef9a:	f240 71d3 	movw	r1, #2003	; 0x7d3
    ef9e:	2031      	movs	r0, #49	; 0x31
    efa0:	f7f5 fa1c 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efa4:	2119      	movs	r1, #25
    efa6:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    efaa:	bd10      	pop	{r4, pc}
    efac:	b538      	push	{r3, r4, r5, lr}
    efae:	4604      	mov	r4, r0
    efb0:	6840      	ldr	r0, [r0, #4]
    efb2:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    efb6:	291d      	cmp	r1, #29
    efb8:	d002      	beq.n	efc0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ca>
    efba:	f240 71ff 	movw	r1, #2047	; 0x7ff
    efbe:	e00f      	b.n	efe0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ea>
    efc0:	2500      	movs	r5, #0
    efc2:	f880 50d3 	strb.w	r5, [r0, #211]	; 0xd3
    efc6:	6860      	ldr	r0, [r4, #4]
    efc8:	f890 1205 	ldrb.w	r1, [r0, #517]	; 0x205
    efcc:	f88d 1000 	strb.w	r1, [sp]
    efd0:	9900      	ldr	r1, [sp, #0]
    efd2:	9100      	str	r1, [sp, #0]
    efd4:	f89d 2000 	ldrb.w	r2, [sp]
    efd8:	2101      	movs	r1, #1
    efda:	b122      	cbz	r2, efe6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3f0>
    efdc:	f640 0103 	movw	r1, #2051	; 0x803
    efe0:	2031      	movs	r0, #49	; 0x31
    efe2:	f7f5 f9fb 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efe6:	f890 20d4 	ldrb.w	r2, [r0, #212]	; 0xd4
    efea:	b162      	cbz	r2, f006 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x410>
    efec:	f880 50d4 	strb.w	r5, [r0, #212]	; 0xd4
    eff0:	6860      	ldr	r0, [r4, #4]
    eff2:	220c      	movs	r2, #12
    eff4:	8801      	ldrh	r1, [r0, #0]
    eff6:	f8a0 1208 	strh.w	r1, [r0, #520]	; 0x208
    effa:	6860      	ldr	r0, [r4, #4]
    effc:	f880 5206 	strb.w	r5, [r0, #518]	; 0x206
    f000:	6861      	ldr	r1, [r4, #4]
    f002:	4608      	mov	r0, r1
    f004:	e00b      	b.n	f01e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x428>
    f006:	8802      	ldrh	r2, [r0, #0]
    f008:	f8a0 2208 	strh.w	r2, [r0, #520]	; 0x208
    f00c:	6860      	ldr	r0, [r4, #4]
    f00e:	220b      	movs	r2, #11
    f010:	f880 5206 	strb.w	r5, [r0, #518]	; 0x206
    f014:	6860      	ldr	r0, [r4, #4]
    f016:	f880 120a 	strb.w	r1, [r0, #522]	; 0x20a
    f01a:	6861      	ldr	r1, [r4, #4]
    f01c:	4608      	mov	r0, r1
    f01e:	f200 10fd 	addw	r0, r0, #509	; 0x1fd
    f022:	f7f7 f94d 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f026:	6860      	ldr	r0, [r4, #4]
    f028:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    f02c:	bd38      	pop	{r3, r4, r5, pc}
    f02e:	b510      	push	{r4, lr}
    f030:	4604      	mov	r4, r0
    f032:	6840      	ldr	r0, [r0, #4]
    f034:	2301      	movs	r3, #1
    f036:	4619      	mov	r1, r3
    f038:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    f03c:	3080      	adds	r0, #128	; 0x80
    f03e:	f7fe f955 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f042:	2800      	cmp	r0, #0
    f044:	d103      	bne.n	f04e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x458>
    f046:	6861      	ldr	r1, [r4, #4]
    f048:	2008      	movs	r0, #8
    f04a:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
    f04e:	bd10      	pop	{r4, pc}
    f050:	b510      	push	{r4, lr}
    f052:	4604      	mov	r4, r0
    f054:	6840      	ldr	r0, [r0, #4]
    f056:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
    f05a:	0789      	lsls	r1, r1, #30
    f05c:	d411      	bmi.n	f082 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x48c>
    f05e:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f062:	2301      	movs	r3, #1
    f064:	2100      	movs	r1, #0
    f066:	3080      	adds	r0, #128	; 0x80
    f068:	f7fe f940 	bl	d2ec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f06c:	b120      	cbz	r0, f078 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x482>
    f06e:	6861      	ldr	r1, [r4, #4]
    f070:	2006      	movs	r0, #6
    f072:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f076:	e00a      	b.n	f08e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x498>
    f078:	f640 0127 	movw	r1, #2087	; 0x827
    f07c:	2031      	movs	r0, #49	; 0x31
    f07e:	f7f5 f9ad 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f082:	2100      	movs	r1, #0
    f084:	f880 10ce 	strb.w	r1, [r0, #206]	; 0xce
    f088:	6860      	ldr	r0, [r4, #4]
    f08a:	f880 113a 	strb.w	r1, [r0, #314]	; 0x13a
    f08e:	6860      	ldr	r0, [r4, #4]
    f090:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    f094:	0780      	lsls	r0, r0, #30
    f096:	d507      	bpl.n	f0a8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4b2>
    f098:	f7f9 f9a6 	bl	83e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f09c:	6860      	ldr	r0, [r4, #4]
    f09e:	f850 1f84 	ldr.w	r1, [r0, #132]!
    f0a2:	f021 0102 	bic.w	r1, r1, #2
    f0a6:	6001      	str	r1, [r0, #0]
    f0a8:	bd10      	pop	{r4, pc}

0000f0aa <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    f0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0ae:	6856      	ldr	r6, [r2, #4]
    f0b0:	460c      	mov	r4, r1
    f0b2:	f506 7594 	add.w	r5, r6, #296	; 0x128
    f0b6:	f106 0780 	add.w	r7, r6, #128	; 0x80
    f0ba:	2823      	cmp	r0, #35	; 0x23
    f0bc:	d008      	beq.n	f0d0 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    f0be:	2824      	cmp	r0, #36	; 0x24
    f0c0:	d015      	beq.n	f0ee <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x44>
    f0c2:	2825      	cmp	r0, #37	; 0x25
    f0c4:	d02a      	beq.n	f11c <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    f0c6:	f44f 718a 	mov.w	r1, #276	; 0x114
    f0ca:	2078      	movs	r0, #120	; 0x78
    f0cc:	f7f5 f986 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0d0:	7e68      	ldrb	r0, [r5, #25]
    f0d2:	f000 f8b5 	bl	f240 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f0d6:	7e69      	ldrb	r1, [r5, #25]
    f0d8:	7121      	strb	r1, [r4, #4]
    f0da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f0de:	7ea9      	ldrb	r1, [r5, #26]
    f0e0:	4430      	add	r0, r6
    f0e2:	7161      	strb	r1, [r4, #5]
    f0e4:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    f0e8:	71a0      	strb	r0, [r4, #6]
    f0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f0ee:	7d68      	ldrb	r0, [r5, #21]
    f0f0:	f000 f8a6 	bl	f240 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f0f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f0f8:	4430      	add	r0, r6
    f0fa:	7d79      	ldrb	r1, [r7, #21]
    f0fc:	306f      	adds	r0, #111	; 0x6f
    f0fe:	2929      	cmp	r1, #41	; 0x29
    f100:	d00a      	beq.n	f118 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    f102:	7881      	ldrb	r1, [r0, #2]
    f104:	7802      	ldrb	r2, [r0, #0]
    f106:	7122      	strb	r2, [r4, #4]
    f108:	7daa      	ldrb	r2, [r5, #22]
    f10a:	7162      	strb	r2, [r4, #5]
    f10c:	7840      	ldrb	r0, [r0, #1]
    f10e:	71a0      	strb	r0, [r4, #6]
    f110:	71e1      	strb	r1, [r4, #7]
    f112:	2000      	movs	r0, #0
    f114:	7528      	strb	r0, [r5, #20]
    f116:	e7e8      	b.n	f0ea <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x40>
    f118:	21ff      	movs	r1, #255	; 0xff
    f11a:	e7f3      	b.n	f104 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    f11c:	7d68      	ldrb	r0, [r5, #21]
    f11e:	f000 f88f 	bl	f240 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f122:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f126:	4430      	add	r0, r6
    f128:	7d69      	ldrb	r1, [r5, #21]
    f12a:	7121      	strb	r1, [r4, #4]
    f12c:	f810 1f6f 	ldrb.w	r1, [r0, #111]!
    f130:	7161      	strb	r1, [r4, #5]
    f132:	7da9      	ldrb	r1, [r5, #22]
    f134:	71a1      	strb	r1, [r4, #6]
    f136:	7840      	ldrb	r0, [r0, #1]
    f138:	71e0      	strb	r0, [r4, #7]
    f13a:	e7d6      	b.n	f0ea <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x40>

0000f13c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f13c:	b510      	push	{r4, lr}
    f13e:	2801      	cmp	r0, #1
    f140:	d006      	beq.n	f150 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f142:	2802      	cmp	r0, #2
    f144:	d006      	beq.n	f154 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f146:	f240 2176 	movw	r1, #630	; 0x276
    f14a:	2078      	movs	r0, #120	; 0x78
    f14c:	f7f5 f946 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f150:	2000      	movs	r0, #0
    f152:	bd10      	pop	{r4, pc}
    f154:	2001      	movs	r0, #1
    f156:	bd10      	pop	{r4, pc}

0000f158 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    f158:	b570      	push	{r4, r5, r6, lr}
    f15a:	6844      	ldr	r4, [r0, #4]
    f15c:	220f      	movs	r2, #15
    f15e:	f504 7594 	add.w	r5, r4, #296	; 0x128
    f162:	2100      	movs	r1, #0
    f164:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    f168:	f7fc ff0f 	bl	bf8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f16c:	2100      	movs	r1, #0
    f16e:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
    f172:	61a9      	str	r1, [r5, #24]
    f174:	4608      	mov	r0, r1
    f176:	217f      	movs	r1, #127	; 0x7f
    f178:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    f17c:	4422      	add	r2, r4
    f17e:	1c40      	adds	r0, r0, #1
    f180:	b2c0      	uxtb	r0, r0
    f182:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
    f186:	2802      	cmp	r0, #2
    f188:	d3f6      	bcc.n	f178 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x20>
    f18a:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    f18e:	4620      	mov	r0, r4
    f190:	f000 f814 	bl	f1bc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    f194:	2000      	movs	r0, #0
    f196:	21ff      	movs	r1, #255	; 0xff
    f198:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    f19c:	4422      	add	r2, r4
    f19e:	1c40      	adds	r0, r0, #1
    f1a0:	f802 1f71 	strb.w	r1, [r2, #113]!
    f1a4:	b2c0      	uxtb	r0, r0
    f1a6:	7191      	strb	r1, [r2, #6]
    f1a8:	2802      	cmp	r0, #2
    f1aa:	d3f5      	bcc.n	f198 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x40>
    f1ac:	bd70      	pop	{r4, r5, r6, pc}

0000f1ae <sym_54DHANNB5K66OT2I32HH4FUSWNFM6Y6UROTVO5I>:
    f1ae:	207f      	movs	r0, #127	; 0x7f
    f1b0:	f000 b857 	b.w	f262 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>

0000f1b4 <sym_ORQBLZC6MUX3FYLO7MAZX3V753VQRLBWB2XQIYI>:
    f1b4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f1b8:	f000 b853 	b.w	f262 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>

0000f1bc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1c0:	460d      	mov	r5, r1
    f1c2:	4606      	mov	r6, r0
    f1c4:	f7ff fff3 	bl	f1ae <sym_54DHANNB5K66OT2I32HH4FUSWNFM6Y6UROTVO5I>
    f1c8:	4607      	mov	r7, r0
    f1ca:	f7ff fff3 	bl	f1b4 <sym_ORQBLZC6MUX3FYLO7MAZX3V753VQRLBWB2XQIYI>
    f1ce:	2400      	movs	r4, #0
    f1d0:	4285      	cmp	r5, r0
    f1d2:	d100      	bne.n	f1d6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f1d4:	2401      	movs	r4, #1
    f1d6:	42bd      	cmp	r5, r7
    f1d8:	d101      	bne.n	f1de <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f1da:	f044 0402 	orr.w	r4, r4, #2
    f1de:	f000 f823 	bl	f228 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1e>
    f1e2:	2200      	movs	r2, #0
    f1e4:	4601      	mov	r1, r0
    f1e6:	2301      	movs	r3, #1
    f1e8:	fa03 f002 	lsl.w	r0, r3, r2
    f1ec:	4208      	tst	r0, r1
    f1ee:	d006      	beq.n	f1fe <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x42>
    f1f0:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    f1f4:	4430      	add	r0, r6
    f1f6:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    f1fa:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    f1fe:	1c52      	adds	r2, r2, #1
    f200:	b2d2      	uxtb	r2, r2
    f202:	2a02      	cmp	r2, #2
    f204:	d3f0      	bcc.n	f1e8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f20a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    f20a:	b510      	push	{r4, lr}
    f20c:	4604      	mov	r4, r0
    f20e:	4608      	mov	r0, r1
    f210:	f7ff ff94 	bl	f13c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    f214:	2802      	cmp	r0, #2
    f216:	d206      	bcs.n	f226 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    f218:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f21c:	4420      	add	r0, r4
    f21e:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    f222:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    f226:	bd10      	pop	{r4, pc}
    f228:	b510      	push	{r4, lr}
    f22a:	f7fb f975 	bl	a518 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f22e:	0a00      	lsrs	r0, r0, #8
    f230:	2201      	movs	r2, #1
    f232:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f236:	07c0      	lsls	r0, r0, #31
    f238:	d000      	beq.n	f23c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x32>
    f23a:	2203      	movs	r2, #3
    f23c:	4610      	mov	r0, r2
    f23e:	bd10      	pop	{r4, pc}
    f240:	4601      	mov	r1, r0
    f242:	b510      	push	{r4, lr}
    f244:	2000      	movs	r0, #0
    f246:	2301      	movs	r3, #1
    f248:	fa03 f200 	lsl.w	r2, r3, r0
    f24c:	420a      	tst	r2, r1
    f24e:	d107      	bne.n	f260 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x56>
    f250:	1c40      	adds	r0, r0, #1
    f252:	b2c0      	uxtb	r0, r0
    f254:	2802      	cmp	r0, #2
    f256:	d3f7      	bcc.n	f248 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    f258:	2149      	movs	r1, #73	; 0x49
    f25a:	2078      	movs	r0, #120	; 0x78
    f25c:	f7f5 f8be 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f260:	bd10      	pop	{r4, pc}
    f262:	b508      	push	{r3, lr}
    f264:	f640 1288 	movw	r2, #2440	; 0x988
    f268:	4669      	mov	r1, sp
    f26a:	f7f4 ff99 	bl	41a0 <mpsl_fem_tx_power_split>
    f26e:	bd08      	pop	{r3, pc}
    f270:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f274:	f001 0107 	and.w	r1, r1, #7
    f278:	7800      	ldrb	r0, [r0, #0]
    f27a:	40c8      	lsrs	r0, r1
    f27c:	f000 0001 	and.w	r0, r0, #1
    f280:	4770      	bx	lr
    f282:	b118      	cbz	r0, f28c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x82>
    f284:	2802      	cmp	r0, #2
    f286:	d001      	beq.n	f28c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x82>
    f288:	2001      	movs	r0, #1
    f28a:	4770      	bx	lr
    f28c:	2000      	movs	r0, #0
    f28e:	4770      	bx	lr

0000f290 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f290:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f292:	7881      	ldrb	r1, [r0, #2]
    f294:	2500      	movs	r5, #0
    f296:	4604      	mov	r4, r0
    f298:	291a      	cmp	r1, #26
    f29a:	d024      	beq.n	f2e6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f29c:	dc0e      	bgt.n	f2bc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f29e:	2916      	cmp	r1, #22
    f2a0:	d22b      	bcs.n	f2fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f2a2:	e8df f001 	tbb	[pc, r1]
    f2a6:	2a2a      	.short	0x2a2a
    f2a8:	202a2a2a 	.word	0x202a2a2a
    f2ac:	2a2a2a2a 	.word	0x2a2a2a2a
    f2b0:	2a2a2a2a 	.word	0x2a2a2a2a
    f2b4:	2a2a2a2a 	.word	0x2a2a2a2a
    f2b8:	2020202a 	.word	0x2020202a
    f2bc:	292a      	cmp	r1, #42	; 0x2a
    f2be:	d01c      	beq.n	f2fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f2c0:	dc0b      	bgt.n	f2da <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f2c2:	f1a1 011e 	sub.w	r1, r1, #30
    f2c6:	290c      	cmp	r1, #12
    f2c8:	d217      	bcs.n	f2fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f2ca:	e8df f001 	tbb	[pc, r1]
    f2ce:	1616      	.short	0x1616
    f2d0:	16161616 	.word	0x16161616
    f2d4:	16161616 	.word	0x16161616
    f2d8:	0c16      	.short	0x0c16
    f2da:	393a      	subs	r1, #58	; 0x3a
    f2dc:	2902      	cmp	r1, #2
    f2de:	d20c      	bcs.n	f2fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f2e0:	e8df f001 	tbb	[pc, r1]
    f2e4:	010b      	.short	0x010b
    f2e6:	8820      	ldrh	r0, [r4, #0]
    f2e8:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f2ec:	d205      	bcs.n	f2fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f2ee:	4669      	mov	r1, sp
    f2f0:	f7fd ffd2 	bl	d298 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f2f4:	b118      	cbz	r0, f2fe <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f2f6:	2002      	movs	r0, #2
    f2f8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f2fa:	2012      	movs	r0, #18
    f2fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f2fe:	9901      	ldr	r1, [sp, #4]
    f300:	4668      	mov	r0, sp
    f302:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
    f306:	f88d 2008 	strb.w	r2, [sp, #8]
    f30a:	9a02      	ldr	r2, [sp, #8]
    f30c:	9202      	str	r2, [sp, #8]
    f30e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f312:	f501 7194 	add.w	r1, r1, #296	; 0x128
    f316:	b10a      	cbz	r2, f31c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    f318:	200c      	movs	r0, #12
    f31a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f31c:	78a2      	ldrb	r2, [r4, #2]
    f31e:	704a      	strb	r2, [r1, #1]
    f320:	22ff      	movs	r2, #255	; 0xff
    f322:	700a      	strb	r2, [r1, #0]
    f324:	f7fe fb51 	bl	d9ca <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f328:	4628      	mov	r0, r5
    f32a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f32c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f32c:	b510      	push	{r4, lr}
    f32e:	4604      	mov	r4, r0
    f330:	f7fb f824 	bl	a37c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    f334:	b108      	cbz	r0, f33a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f336:	200c      	movs	r0, #12
    f338:	bd10      	pop	{r4, pc}
    f33a:	7820      	ldrb	r0, [r4, #0]
    f33c:	b118      	cbz	r0, f346 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f33e:	2801      	cmp	r0, #1
    f340:	d001      	beq.n	f346 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f342:	2012      	movs	r0, #18
    f344:	bd10      	pop	{r4, pc}
    f346:	f7ff ff9c 	bl	f282 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x78>
    f34a:	1c61      	adds	r1, r4, #1
    f34c:	f7f6 fd0c 	bl	5d68 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f350:	b108      	cbz	r0, f356 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f352:	2000      	movs	r0, #0
    f354:	bd10      	pop	{r4, pc}
    f356:	2007      	movs	r0, #7
    f358:	bd10      	pop	{r4, pc}

0000f35a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f35a:	b510      	push	{r4, lr}
    f35c:	f7fb f80e 	bl	a37c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    f360:	b108      	cbz	r0, f366 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f362:	200c      	movs	r0, #12
    f364:	bd10      	pop	{r4, pc}
    f366:	f7f6 fd27 	bl	5db8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f36a:	2000      	movs	r0, #0
    f36c:	bd10      	pop	{r4, pc}

0000f36e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f36e:	b510      	push	{r4, lr}
    f370:	460b      	mov	r3, r1
    f372:	2201      	movs	r2, #1
    f374:	f100 0110 	add.w	r1, r0, #16
    f378:	f7fd ff70 	bl	d25c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f37c:	2000      	movs	r0, #0
    f37e:	bd10      	pop	{r4, pc}

0000f380 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    f380:	b510      	push	{r4, lr}
    f382:	8800      	ldrh	r0, [r0, #0]
    f384:	2100      	movs	r1, #0
    f386:	f7fd fd10 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f38a:	b118      	cbz	r0, f394 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    f38c:	f890 12a0 	ldrb.w	r1, [r0, #672]	; 0x2a0
    f390:	b111      	cbz	r1, f398 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    f392:	e007      	b.n	f3a4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    f394:	2002      	movs	r0, #2
    f396:	bd10      	pop	{r4, pc}
    f398:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f39c:	2916      	cmp	r1, #22
    f39e:	d003      	beq.n	f3a8 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f3a0:	2917      	cmp	r1, #23
    f3a2:	d001      	beq.n	f3a8 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f3a4:	200c      	movs	r0, #12
    f3a6:	bd10      	pop	{r4, pc}
    f3a8:	2102      	movs	r1, #2
    f3aa:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
    f3ae:	2000      	movs	r0, #0
    f3b0:	bd10      	pop	{r4, pc}

0000f3b2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    f3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f3b4:	4605      	mov	r5, r0
    f3b6:	8800      	ldrh	r0, [r0, #0]
    f3b8:	2100      	movs	r1, #0
    f3ba:	f7fd fcf6 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f3be:	0004      	movs	r4, r0
    f3c0:	d003      	beq.n	f3ca <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    f3c2:	f894 02a0 	ldrb.w	r0, [r4, #672]	; 0x2a0
    f3c6:	b110      	cbz	r0, f3ce <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    f3c8:	e011      	b.n	f3ee <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    f3ca:	2002      	movs	r0, #2
    f3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3ce:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    f3d2:	2816      	cmp	r0, #22
    f3d4:	d001      	beq.n	f3da <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    f3d6:	2817      	cmp	r0, #23
    f3d8:	d109      	bne.n	f3ee <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    f3da:	f894 02d4 	ldrb.w	r0, [r4, #724]	; 0x2d4
    f3de:	f88d 0000 	strb.w	r0, [sp]
    f3e2:	9800      	ldr	r0, [sp, #0]
    f3e4:	9000      	str	r0, [sp, #0]
    f3e6:	f89d 0000 	ldrb.w	r0, [sp]
    f3ea:	2601      	movs	r6, #1
    f3ec:	b108      	cbz	r0, f3f2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    f3ee:	200c      	movs	r0, #12
    f3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3f2:	2210      	movs	r2, #16
    f3f4:	1ca9      	adds	r1, r5, #2
    f3f6:	f204 20a1 	addw	r0, r4, #673	; 0x2a1
    f3fa:	f7fc fd4c 	bl	be96 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f3fe:	f884 62a0 	strb.w	r6, [r4, #672]	; 0x2a0
    f402:	2000      	movs	r0, #0
    f404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f406 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f406:	b510      	push	{r4, lr}
    f408:	2108      	movs	r1, #8
    f40a:	f7f5 f895 	bl	4538 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f40e:	2000      	movs	r0, #0
    f410:	bd10      	pop	{r4, pc}

0000f412 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    f412:	b510      	push	{r4, lr}
    f414:	4604      	mov	r4, r0
    f416:	f7fa fe31 	bl	a07c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    f41a:	f7fe fe79 	bl	e110 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f41e:	7020      	strb	r0, [r4, #0]
    f420:	2000      	movs	r0, #0
    f422:	bd10      	pop	{r4, pc}

0000f424 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f424:	21fb      	movs	r1, #251	; 0xfb
    f426:	8001      	strh	r1, [r0, #0]
    f428:	f640 0248 	movw	r2, #2120	; 0x848
    f42c:	8042      	strh	r2, [r0, #2]
    f42e:	8081      	strh	r1, [r0, #4]
    f430:	80c2      	strh	r2, [r0, #6]
    f432:	2000      	movs	r0, #0
    f434:	4770      	bx	lr

0000f436 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    f436:	b51c      	push	{r2, r3, r4, lr}
    f438:	8800      	ldrh	r0, [r0, #0]
    f43a:	4669      	mov	r1, sp
    f43c:	f7fd ff2c 	bl	d298 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f440:	2800      	cmp	r0, #0
    f442:	d10d      	bne.n	f460 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    f444:	f89d 0000 	ldrb.w	r0, [sp]
    f448:	9c01      	ldr	r4, [sp, #4]
    f44a:	2801      	cmp	r0, #1
    f44c:	f504 7494 	add.w	r4, r4, #296	; 0x128
    f450:	d103      	bne.n	f45a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    f452:	9801      	ldr	r0, [sp, #4]
    f454:	f000 fcf8 	bl	fe48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    f458:	b118      	cbz	r0, f462 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    f45a:	7ce0      	ldrb	r0, [r4, #19]
    f45c:	b118      	cbz	r0, f466 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    f45e:	203a      	movs	r0, #58	; 0x3a
    f460:	bd1c      	pop	{r2, r3, r4, pc}
    f462:	2002      	movs	r0, #2
    f464:	bd1c      	pop	{r2, r3, r4, pc}
    f466:	2001      	movs	r0, #1
    f468:	74e0      	strb	r0, [r4, #19]
    f46a:	2000      	movs	r0, #0
    f46c:	bd1c      	pop	{r2, r3, r4, pc}

0000f46e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f46e:	b510      	push	{r4, lr}
    f470:	4604      	mov	r4, r0
    f472:	20d8      	movs	r0, #216	; 0xd8
    f474:	7020      	strb	r0, [r4, #0]
    f476:	f000 fce4 	bl	fe42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    f47a:	7060      	strb	r0, [r4, #1]
    f47c:	2000      	movs	r0, #0
    f47e:	bd10      	pop	{r4, pc}

0000f480 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f480:	2108      	movs	r1, #8
    f482:	7001      	strb	r1, [r0, #0]
    f484:	2000      	movs	r0, #0
    f486:	4770      	bx	lr

0000f488 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f488:	b510      	push	{r4, lr}
    f48a:	4604      	mov	r4, r0
    f48c:	f7fa ff76 	bl	a37c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    f490:	b108      	cbz	r0, f496 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f492:	200c      	movs	r0, #12
    f494:	bd10      	pop	{r4, pc}
    f496:	7820      	ldrb	r0, [r4, #0]
    f498:	b108      	cbz	r0, f49e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f49a:	2801      	cmp	r0, #1
    f49c:	d107      	bne.n	f4ae <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f49e:	f7ff fef0 	bl	f282 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x78>
    f4a2:	1c61      	adds	r1, r4, #1
    f4a4:	f7fd fecf 	bl	d246 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f4a8:	b108      	cbz	r0, f4ae <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f4aa:	2000      	movs	r0, #0
    f4ac:	bd10      	pop	{r4, pc}
    f4ae:	2012      	movs	r0, #18
    f4b0:	bd10      	pop	{r4, pc}

0000f4b2 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    f4b2:	b51c      	push	{r2, r3, r4, lr}
    f4b4:	4604      	mov	r4, r0
    f4b6:	f7fa fde1 	bl	a07c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    f4ba:	2000      	movs	r0, #0
    f4bc:	f88d 0002 	strb.w	r0, [sp, #2]
    f4c0:	2103      	movs	r1, #3
    f4c2:	f88d 1001 	strb.w	r1, [sp, #1]
    f4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
    f4ca:	f88d 1003 	strb.w	r1, [sp, #3]
    f4ce:	f88d 0000 	strb.w	r0, [sp]
    f4d2:	4668      	mov	r0, sp
    f4d4:	9401      	str	r4, [sp, #4]
    f4d6:	f000 f99f 	bl	f818 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    f4da:	bd1c      	pop	{r2, r3, r4, pc}

0000f4dc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    f4dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f4de:	4605      	mov	r5, r0
    f4e0:	f7fa fdcc 	bl	a07c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    f4e4:	4606      	mov	r6, r0
    f4e6:	7828      	ldrb	r0, [r5, #0]
    f4e8:	2400      	movs	r4, #0
    f4ea:	b160      	cbz	r0, f506 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f4ec:	f88d 4000 	strb.w	r4, [sp]
    f4f0:	2001      	movs	r0, #1
    f4f2:	f10d 0101 	add.w	r1, sp, #1
    f4f6:	f7f5 fe0d 	bl	5114 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f4fa:	b120      	cbz	r0, f506 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f4fc:	4668      	mov	r0, sp
    f4fe:	f000 f897 	bl	f630 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    f502:	2800      	cmp	r0, #0
    f504:	d112      	bne.n	f52c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f506:	f88d 400c 	strb.w	r4, [sp, #12]
    f50a:	4630      	mov	r0, r6
    f50c:	f7fe fdf6 	bl	e0fc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f510:	b118      	cbz	r0, f51a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    f512:	2080      	movs	r0, #128	; 0x80
    f514:	f8ad 000d 	strh.w	r0, [sp, #13]
    f518:	e001      	b.n	f51e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    f51a:	f8ad 400d 	strh.w	r4, [sp, #13]
    f51e:	f88d 400f 	strb.w	r4, [sp, #15]
    f522:	7828      	ldrb	r0, [r5, #0]
    f524:	2801      	cmp	r0, #1
    f526:	d003      	beq.n	f530 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    f528:	b138      	cbz	r0, f53a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    f52a:	2012      	movs	r0, #18
    f52c:	b004      	add	sp, #16
    f52e:	bd70      	pop	{r4, r5, r6, pc}
    f530:	a903      	add	r1, sp, #12
    f532:	4630      	mov	r0, r6
    f534:	f7fa fdbe 	bl	a0b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    f538:	e7f8      	b.n	f52c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f53a:	4630      	mov	r0, r6
    f53c:	f000 fc9a 	bl	fe74 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    f540:	e7f4      	b.n	f52c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000f542 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    f542:	b530      	push	{r4, r5, lr}
    f544:	b08b      	sub	sp, #44	; 0x2c
    f546:	4604      	mov	r4, r0
    f548:	f7fa fd98 	bl	a07c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    f54c:	4602      	mov	r2, r0
    f54e:	7920      	ldrb	r0, [r4, #4]
    f550:	2804      	cmp	r0, #4
    f552:	d803      	bhi.n	f55c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    f554:	8860      	ldrh	r0, [r4, #2]
    f556:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    f55a:	d902      	bls.n	f562 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    f55c:	2012      	movs	r0, #18
    f55e:	b00b      	add	sp, #44	; 0x2c
    f560:	bd30      	pop	{r4, r5, pc}
    f562:	2500      	movs	r5, #0
    f564:	f88d 5004 	strb.w	r5, [sp, #4]
    f568:	7921      	ldrb	r1, [r4, #4]
    f56a:	9500      	str	r5, [sp, #0]
    f56c:	f89d 0000 	ldrb.w	r0, [sp]
    f570:	2905      	cmp	r1, #5
    f572:	f040 0010 	orr.w	r0, r0, #16
    f576:	f88d 0000 	strb.w	r0, [sp]
    f57a:	d254      	bcs.n	f626 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    f57c:	e8df f001 	tbb	[pc, r1]
    f580:	11050803 	.word	0x11050803
    f584:	000b      	.short	0x000b
    f586:	f040 0001 	orr.w	r0, r0, #1
    f58a:	f040 0002 	orr.w	r0, r0, #2
    f58e:	e006      	b.n	f59e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    f590:	f040 0009 	orr.w	r0, r0, #9
    f594:	e001      	b.n	f59a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    f596:	f040 0001 	orr.w	r0, r0, #1
    f59a:	f040 0004 	orr.w	r0, r0, #4
    f59e:	f88d 0000 	strb.w	r0, [sp]
    f5a2:	f8bd 0000 	ldrh.w	r0, [sp]
    f5a6:	9000      	str	r0, [sp, #0]
    f5a8:	f8bd 0000 	ldrh.w	r0, [sp]
    f5ac:	f8ad 0005 	strh.w	r0, [sp, #5]
    f5b0:	8821      	ldrh	r1, [r4, #0]
    f5b2:	f8dd 0006 	ldr.w	r0, [sp, #6]
    f5b6:	f361 201f 	bfi	r0, r1, #8, #24
    f5ba:	f8cd 0006 	str.w	r0, [sp, #6]
    f5be:	8861      	ldrh	r1, [r4, #2]
    f5c0:	f8dd 0009 	ldr.w	r0, [sp, #9]
    f5c4:	f361 201f 	bfi	r0, r1, #8, #24
    f5c8:	f8cd 0009 	str.w	r0, [sp, #9]
    f5cc:	7b60      	ldrb	r0, [r4, #13]
    f5ce:	f88d 000d 	strb.w	r0, [sp, #13]
    f5d2:	7960      	ldrb	r0, [r4, #5]
    f5d4:	f88d 000e 	strb.w	r0, [sp, #14]
    f5d8:	79a0      	ldrb	r0, [r4, #6]
    f5da:	f88d 000f 	strb.w	r0, [sp, #15]
    f5de:	f8d4 0007 	ldr.w	r0, [r4, #7]
    f5e2:	9004      	str	r0, [sp, #16]
    f5e4:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    f5e8:	f8ad 0014 	strh.w	r0, [sp, #20]
    f5ec:	7ba0      	ldrb	r0, [r4, #14]
    f5ee:	f88d 0016 	strb.w	r0, [sp, #22]
    f5f2:	207f      	movs	r0, #127	; 0x7f
    f5f4:	f88d 0017 	strb.w	r0, [sp, #23]
    f5f8:	2001      	movs	r0, #1
    f5fa:	f88d 0018 	strb.w	r0, [sp, #24]
    f5fe:	f88d 5019 	strb.w	r5, [sp, #25]
    f602:	f88d 001a 	strb.w	r0, [sp, #26]
    f606:	f88d 501b 	strb.w	r5, [sp, #27]
    f60a:	4610      	mov	r0, r2
    f60c:	f7fe fd96 	bl	e13c <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    f610:	f88d 001c 	strb.w	r0, [sp, #28]
    f614:	f88d 501d 	strb.w	r5, [sp, #29]
    f618:	f88d 501e 	strb.w	r5, [sp, #30]
    f61c:	a909      	add	r1, sp, #36	; 0x24
    f61e:	a801      	add	r0, sp, #4
    f620:	f7fa fbf6 	bl	9e10 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    f624:	e79b      	b.n	f55e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    f626:	f241 11d5 	movw	r1, #4565	; 0x11d5
    f62a:	2039      	movs	r0, #57	; 0x39
    f62c:	f7f4 fed6 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f630 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    f630:	b570      	push	{r4, r5, r6, lr}
    f632:	4604      	mov	r4, r0
    f634:	7800      	ldrb	r0, [r0, #0]
    f636:	2101      	movs	r1, #1
    f638:	f7fd fbb7 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f63c:	0005      	movs	r5, r0
    f63e:	d007      	beq.n	f650 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    f640:	f7fe ff1e 	bl	e480 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f644:	b160      	cbz	r0, f660 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f646:	4628      	mov	r0, r5
    f648:	f7fe fd5e 	bl	e108 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f64c:	b110      	cbz	r0, f654 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    f64e:	e005      	b.n	f65c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    f650:	2042      	movs	r0, #66	; 0x42
    f652:	bd70      	pop	{r4, r5, r6, pc}
    f654:	4628      	mov	r0, r5
    f656:	f7fe fd4d 	bl	e0f4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f65a:	b108      	cbz	r0, f660 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f65c:	200c      	movs	r0, #12
    f65e:	bd70      	pop	{r4, r5, r6, pc}
    f660:	1c61      	adds	r1, r4, #1
    f662:	4628      	mov	r0, r5
    f664:	f7fe fd62 	bl	e12c <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    f668:	2000      	movs	r0, #0
    f66a:	bd70      	pop	{r4, r5, r6, pc}

0000f66c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f66c:	b50e      	push	{r1, r2, r3, lr}
    f66e:	8882      	ldrh	r2, [r0, #4]
    f670:	f244 2390 	movw	r3, #17040	; 0x4290
    f674:	429a      	cmp	r2, r3
    f676:	d901      	bls.n	f67c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    f678:	2012      	movs	r0, #18
    f67a:	bd0e      	pop	{r1, r2, r3, pc}
    f67c:	f640 0348 	movw	r3, #2120	; 0x848
    f680:	429a      	cmp	r2, r3
    f682:	d300      	bcc.n	f686 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f684:	461a      	mov	r2, r3
    f686:	8803      	ldrh	r3, [r0, #0]
    f688:	f8ad 3000 	strh.w	r3, [sp]
    f68c:	8843      	ldrh	r3, [r0, #2]
    f68e:	f8ad 3002 	strh.w	r3, [sp, #2]
    f692:	f8ad 2004 	strh.w	r2, [sp, #4]
    f696:	8843      	ldrh	r3, [r0, #2]
    f698:	f8ad 3006 	strh.w	r3, [sp, #6]
    f69c:	f8ad 2008 	strh.w	r2, [sp, #8]
    f6a0:	8800      	ldrh	r0, [r0, #0]
    f6a2:	8008      	strh	r0, [r1, #0]
    f6a4:	4668      	mov	r0, sp
    f6a6:	f7fa fde5 	bl	a274 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    f6aa:	bd0e      	pop	{r1, r2, r3, pc}

0000f6ac <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    f6ac:	b510      	push	{r4, lr}
    f6ae:	4604      	mov	r4, r0
    f6b0:	f7fa fce4 	bl	a07c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    f6b4:	7861      	ldrb	r1, [r4, #1]
    f6b6:	f3c1 0240 	ubfx	r2, r1, #1, #1
    f6ba:	f001 0101 	and.w	r1, r1, #1
    f6be:	f7fe fd31 	bl	e124 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    f6c2:	2000      	movs	r0, #0
    f6c4:	bd10      	pop	{r4, pc}

0000f6c6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f6c6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f6c8:	4604      	mov	r4, r0
    f6ca:	f10d 0007 	add.w	r0, sp, #7
    f6ce:	9000      	str	r0, [sp, #0]
    f6d0:	7922      	ldrb	r2, [r4, #4]
    f6d2:	78e1      	ldrb	r1, [r4, #3]
    f6d4:	78a0      	ldrb	r0, [r4, #2]
    f6d6:	f10d 0306 	add.w	r3, sp, #6
    f6da:	f000 fbf8 	bl	fece <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
    f6de:	2800      	cmp	r0, #0
    f6e0:	d109      	bne.n	f6f6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    f6e2:	8820      	ldrh	r0, [r4, #0]
    f6e4:	f8ad 0004 	strh.w	r0, [sp, #4]
    f6e8:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f6ec:	f8ad 0008 	strh.w	r0, [sp, #8]
    f6f0:	a801      	add	r0, sp, #4
    f6f2:	f000 f94c 	bl	f98e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f6f6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f6f8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f6f8:	b510      	push	{r4, lr}
    f6fa:	4604      	mov	r4, r0
    f6fc:	2001      	movs	r0, #1
    f6fe:	f000 fa7e 	bl	fbfe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    f702:	b128      	cbz	r0, f710 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f704:	4621      	mov	r1, r4
    f706:	2001      	movs	r0, #1
    f708:	f7f5 fd1c 	bl	5144 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f70c:	2000      	movs	r0, #0
    f70e:	bd10      	pop	{r4, pc}
    f710:	200c      	movs	r0, #12
    f712:	bd10      	pop	{r4, pc}

0000f714 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    f714:	b51c      	push	{r2, r3, r4, lr}
    f716:	4604      	mov	r4, r0
    f718:	f7fa fcb0 	bl	a07c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    f71c:	2000      	movs	r0, #0
    f71e:	f88d 0000 	strb.w	r0, [sp]
    f722:	f88d 0002 	strb.w	r0, [sp, #2]
    f726:	2003      	movs	r0, #3
    f728:	f88d 0001 	strb.w	r0, [sp, #1]
    f72c:	f814 0b01 	ldrb.w	r0, [r4], #1
    f730:	f88d 0003 	strb.w	r0, [sp, #3]
    f734:	4668      	mov	r0, sp
    f736:	9401      	str	r4, [sp, #4]
    f738:	f000 f8d7 	bl	f8ea <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    f73c:	bd1c      	pop	{r2, r3, r4, pc}

0000f73e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f73e:	b51c      	push	{r2, r3, r4, lr}
    f740:	8801      	ldrh	r1, [r0, #0]
    f742:	f8ad 1000 	strh.w	r1, [sp]
    f746:	8841      	ldrh	r1, [r0, #2]
    f748:	f8ad 1002 	strh.w	r1, [sp, #2]
    f74c:	8801      	ldrh	r1, [r0, #0]
    f74e:	f8ad 1004 	strh.w	r1, [sp, #4]
    f752:	8840      	ldrh	r0, [r0, #2]
    f754:	f8ad 0006 	strh.w	r0, [sp, #6]
    f758:	4668      	mov	r0, sp
    f75a:	f7fa fe2b 	bl	a3b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x300>
    f75e:	bd1c      	pop	{r2, r3, r4, pc}

0000f760 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f760:	b510      	push	{r4, lr}
    f762:	f7f5 fd13 	bl	518c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f766:	2000      	movs	r0, #0
    f768:	bd10      	pop	{r4, pc}

0000f76a <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
    f76a:	b510      	push	{r4, lr}
    f76c:	460c      	mov	r4, r1
    f76e:	2100      	movs	r1, #0
    f770:	f7fd fb1b 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f774:	b118      	cbz	r0, f77e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
    f776:	2c02      	cmp	r4, #2
    f778:	d903      	bls.n	f782 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
    f77a:	2012      	movs	r0, #18
    f77c:	bd10      	pop	{r4, pc}
    f77e:	2002      	movs	r0, #2
    f780:	bd10      	pop	{r4, pc}
    f782:	f014 0101 	ands.w	r1, r4, #1
    f786:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
    f78a:	f3c4 0240 	ubfx	r2, r4, #1, #1
    f78e:	f880 221c 	strb.w	r2, [r0, #540]	; 0x21c
    f792:	d004      	beq.n	f79e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    f794:	f890 121a 	ldrb.w	r1, [r0, #538]	; 0x21a
    f798:	b109      	cbz	r1, f79e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    f79a:	f7fe fe74 	bl	e486 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    f79e:	2000      	movs	r0, #0
    f7a0:	bd10      	pop	{r4, pc}

0000f7a2 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f7a2:	b51c      	push	{r2, r3, r4, lr}
    f7a4:	460c      	mov	r4, r1
    f7a6:	4669      	mov	r1, sp
    f7a8:	f7fd fd76 	bl	d298 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f7ac:	2800      	cmp	r0, #0
    f7ae:	d105      	bne.n	f7bc <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    f7b0:	2100      	movs	r1, #0
    f7b2:	4622      	mov	r2, r4
    f7b4:	9801      	ldr	r0, [sp, #4]
    f7b6:	f000 faee 	bl	fd96 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    f7ba:	2000      	movs	r0, #0
    f7bc:	bd1c      	pop	{r2, r3, r4, pc}

0000f7be <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    f7be:	b510      	push	{r4, lr}
    f7c0:	4604      	mov	r4, r0
    f7c2:	7800      	ldrb	r0, [r0, #0]
    f7c4:	28ff      	cmp	r0, #255	; 0xff
    f7c6:	d009      	beq.n	f7dc <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    f7c8:	2101      	movs	r1, #1
    f7ca:	f7fd faee 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f7ce:	b118      	cbz	r0, f7d8 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    f7d0:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    f7d4:	8441      	strh	r1, [r0, #34]	; 0x22
    f7d6:	e005      	b.n	f7e4 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    f7d8:	2042      	movs	r0, #66	; 0x42
    f7da:	bd10      	pop	{r4, pc}
    f7dc:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f7e0:	f7f8 f852 	bl	7888 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    f7e4:	2000      	movs	r0, #0
    f7e6:	bd10      	pop	{r4, pc}

0000f7e8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f7e8:	b510      	push	{r4, lr}
    f7ea:	4604      	mov	r4, r0
    f7ec:	2000      	movs	r0, #0
    f7ee:	f000 fa06 	bl	fbfe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    f7f2:	b128      	cbz	r0, f800 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    f7f4:	4621      	mov	r1, r4
    f7f6:	2000      	movs	r0, #0
    f7f8:	f7f5 fca4 	bl	5144 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f7fc:	2000      	movs	r0, #0
    f7fe:	bd10      	pop	{r4, pc}
    f800:	200c      	movs	r0, #12
    f802:	bd10      	pop	{r4, pc}

0000f804 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f804:	b510      	push	{r4, lr}
    f806:	7800      	ldrb	r0, [r0, #0]
    f808:	b100      	cbz	r0, f80c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    f80a:	2001      	movs	r0, #1
    f80c:	f7f8 f866 	bl	78dc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    f810:	2000      	movs	r0, #0
    f812:	bd10      	pop	{r4, pc}

0000f814 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f814:	f7fa bd2e 	b.w	a274 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>

0000f818 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    f818:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f81c:	4606      	mov	r6, r0
    f81e:	7845      	ldrb	r5, [r0, #1]
    f820:	7800      	ldrb	r0, [r0, #0]
    f822:	2101      	movs	r1, #1
    f824:	f7fd fac1 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f828:	0004      	movs	r4, r0
    f82a:	d01e      	beq.n	f86a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    f82c:	f7fe fbcc 	bl	dfc8 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    f830:	78f1      	ldrb	r1, [r6, #3]
    f832:	4281      	cmp	r1, r0
    f834:	d800      	bhi.n	f838 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    f836:	4608      	mov	r0, r1
    f838:	4607      	mov	r7, r0
    f83a:	2d04      	cmp	r5, #4
    f83c:	d018      	beq.n	f870 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    f83e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f840:	f7fd fbfe 	bl	d040 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f844:	4438      	add	r0, r7
    f846:	b281      	uxth	r1, r0
    f848:	4620      	mov	r0, r4
    f84a:	2201      	movs	r2, #1
    f84c:	f000 f9e9 	bl	fc22 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    f850:	2800      	cmp	r0, #0
    f852:	d10b      	bne.n	f86c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f854:	2d03      	cmp	r5, #3
    f856:	d000      	beq.n	f85a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    f858:	b1df      	cbz	r7, f892 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f85a:	4620      	mov	r0, r4
    f85c:	f7fe fc52 	bl	e104 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f860:	7871      	ldrb	r1, [r6, #1]
    f862:	2903      	cmp	r1, #3
    f864:	d010      	beq.n	f888 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f866:	b9a0      	cbnz	r0, f892 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f868:	e004      	b.n	f874 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    f86a:	2042      	movs	r0, #66	; 0x42
    f86c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f870:	b97f      	cbnz	r7, f892 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f872:	e7f2      	b.n	f85a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    f874:	2904      	cmp	r1, #4
    f876:	d107      	bne.n	f888 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f878:	4620      	mov	r0, r4
    f87a:	f7fe fe01 	bl	e480 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f87e:	b140      	cbz	r0, f892 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f880:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f882:	f7fd fbac 	bl	cfde <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    f886:	b120      	cbz	r0, f892 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f888:	2d01      	cmp	r5, #1
    f88a:	d004      	beq.n	f896 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    f88c:	2d03      	cmp	r5, #3
    f88e:	d002      	beq.n	f896 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    f890:	e00e      	b.n	f8b0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    f892:	2012      	movs	r0, #18
    f894:	e7ea      	b.n	f86c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f896:	4620      	mov	r0, r4
    f898:	f7fe fc34 	bl	e104 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f89c:	b108      	cbz	r0, f8a2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    f89e:	2200      	movs	r2, #0
    f8a0:	e002      	b.n	f8a8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    f8a2:	2d01      	cmp	r5, #1
    f8a4:	d013      	beq.n	f8ce <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    f8a6:	2201      	movs	r2, #1
    f8a8:	4668      	mov	r0, sp
    f8aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f8ac:	f7fd fb2f 	bl	cf0e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f8b0:	2d04      	cmp	r5, #4
    f8b2:	d018      	beq.n	f8e6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f8b4:	6872      	ldr	r2, [r6, #4]
    f8b6:	463b      	mov	r3, r7
    f8b8:	2101      	movs	r1, #1
    f8ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f8bc:	f7fd fb5b 	bl	cf76 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    f8c0:	b138      	cbz	r0, f8d2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    f8c2:	7870      	ldrb	r0, [r6, #1]
    f8c4:	2802      	cmp	r0, #2
    f8c6:	d006      	beq.n	f8d6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f8c8:	2803      	cmp	r0, #3
    f8ca:	d004      	beq.n	f8d6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f8cc:	e00b      	b.n	f8e6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f8ce:	2202      	movs	r2, #2
    f8d0:	e7ea      	b.n	f8a8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    f8d2:	2007      	movs	r0, #7
    f8d4:	e7ca      	b.n	f86c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f8d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f8d8:	f7fd fbb2 	bl	d040 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f8dc:	4602      	mov	r2, r0
    f8de:	2101      	movs	r1, #1
    f8e0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f8e2:	f7fd fb8a 	bl	cffa <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f8e6:	2000      	movs	r0, #0
    f8e8:	e7c0      	b.n	f86c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000f8ea <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    f8ea:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f8ee:	4607      	mov	r7, r0
    f8f0:	7845      	ldrb	r5, [r0, #1]
    f8f2:	78c6      	ldrb	r6, [r0, #3]
    f8f4:	7800      	ldrb	r0, [r0, #0]
    f8f6:	2101      	movs	r1, #1
    f8f8:	f7fd fa57 	bl	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f8fc:	0004      	movs	r4, r0
    f8fe:	d003      	beq.n	f908 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    f900:	f7fe fc02 	bl	e108 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f904:	b118      	cbz	r0, f90e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    f906:	e003      	b.n	f910 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    f908:	2042      	movs	r0, #66	; 0x42
    f90a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f90e:	2600      	movs	r6, #0
    f910:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f912:	f7fd fb99 	bl	d048 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    f916:	4430      	add	r0, r6
    f918:	b281      	uxth	r1, r0
    f91a:	4688      	mov	r8, r1
    f91c:	4620      	mov	r0, r4
    f91e:	2201      	movs	r2, #1
    f920:	f000 f97f 	bl	fc22 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    f924:	2800      	cmp	r0, #0
    f926:	d1f0      	bne.n	f90a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f928:	2d04      	cmp	r5, #4
    f92a:	d008      	beq.n	f93e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    f92c:	2d03      	cmp	r5, #3
    f92e:	d00a      	beq.n	f946 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    f930:	b12e      	cbz	r6, f93e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    f932:	4620      	mov	r0, r4
    f934:	f7fe fda4 	bl	e480 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f938:	b118      	cbz	r0, f942 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    f93a:	200c      	movs	r0, #12
    f93c:	e7e5      	b.n	f90a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f93e:	2012      	movs	r0, #18
    f940:	e7e3      	b.n	f90a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f942:	2d01      	cmp	r5, #1
    f944:	d10c      	bne.n	f960 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    f946:	4620      	mov	r0, r4
    f948:	f7fe fbdc 	bl	e104 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f94c:	b108      	cbz	r0, f952 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    f94e:	2204      	movs	r2, #4
    f950:	e002      	b.n	f958 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    f952:	2d01      	cmp	r5, #1
    f954:	d010      	beq.n	f978 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    f956:	2205      	movs	r2, #5
    f958:	4668      	mov	r0, sp
    f95a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f95c:	f7fd fad7 	bl	cf0e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f960:	687a      	ldr	r2, [r7, #4]
    f962:	4633      	mov	r3, r6
    f964:	2100      	movs	r1, #0
    f966:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f968:	f7fd fb05 	bl	cf76 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    f96c:	b130      	cbz	r0, f97c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    f96e:	2d02      	cmp	r5, #2
    f970:	d006      	beq.n	f980 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    f972:	2d03      	cmp	r5, #3
    f974:	d004      	beq.n	f980 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    f976:	e008      	b.n	f98a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    f978:	2206      	movs	r2, #6
    f97a:	e7ed      	b.n	f958 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    f97c:	2007      	movs	r0, #7
    f97e:	e7c4      	b.n	f90a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f980:	4642      	mov	r2, r8
    f982:	2100      	movs	r1, #0
    f984:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f986:	f7fd fb38 	bl	cffa <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f98a:	2000      	movs	r0, #0
    f98c:	e7bd      	b.n	f90a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000f98e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    f98e:	b510      	push	{r4, lr}
    f990:	4604      	mov	r4, r0
    f992:	8880      	ldrh	r0, [r0, #4]
    f994:	b128      	cbz	r0, f9a2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f996:	2801      	cmp	r0, #1
    f998:	d003      	beq.n	f9a2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f99a:	2802      	cmp	r0, #2
    f99c:	d001      	beq.n	f9a2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f99e:	2012      	movs	r0, #18
    f9a0:	bd10      	pop	{r4, pc}
    f9a2:	78e0      	ldrb	r0, [r4, #3]
    f9a4:	f000 f9d4 	bl	fd50 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    f9a8:	b148      	cbz	r0, f9be <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f9aa:	78a0      	ldrb	r0, [r4, #2]
    f9ac:	f000 f9d0 	bl	fd50 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    f9b0:	b128      	cbz	r0, f9be <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f9b2:	4620      	mov	r0, r4
    f9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9b8:	2101      	movs	r1, #1
    f9ba:	f000 b88e 	b.w	fada <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    f9be:	2011      	movs	r0, #17
    f9c0:	bd10      	pop	{r4, pc}

0000f9c2 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    f9c2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f9c4:	460c      	mov	r4, r1
    f9c6:	4605      	mov	r5, r0
    f9c8:	8800      	ldrh	r0, [r0, #0]
    f9ca:	4669      	mov	r1, sp
    f9cc:	f7fd fc64 	bl	d298 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f9d0:	2800      	cmp	r0, #0
    f9d2:	d106      	bne.n	f9e2 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    f9d4:	9801      	ldr	r0, [sp, #4]
    f9d6:	8829      	ldrh	r1, [r5, #0]
    f9d8:	8021      	strh	r1, [r4, #0]
    f9da:	f8b0 00c0 	ldrh.w	r0, [r0, #192]	; 0xc0
    f9de:	8060      	strh	r0, [r4, #2]
    f9e0:	2000      	movs	r0, #0
    f9e2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f9e4 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    f9e4:	b510      	push	{r4, lr}
    f9e6:	4604      	mov	r4, r0
    f9e8:	4601      	mov	r1, r0
    f9ea:	2000      	movs	r0, #0
    f9ec:	f7f5 fb92 	bl	5114 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f9f0:	b910      	cbnz	r0, f9f8 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    f9f2:	2000      	movs	r0, #0
    f9f4:	6020      	str	r0, [r4, #0]
    f9f6:	80a0      	strh	r0, [r4, #4]
    f9f8:	2000      	movs	r0, #0
    f9fa:	bd10      	pop	{r4, pc}

0000f9fc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    f9fc:	b50e      	push	{r1, r2, r3, lr}
    f9fe:	8800      	ldrh	r0, [r0, #0]
    fa00:	4669      	mov	r1, sp
    fa02:	f7fd fc49 	bl	d298 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa06:	b960      	cbnz	r0, fa22 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    fa08:	9801      	ldr	r0, [sp, #4]
    fa0a:	f000 fa1d 	bl	fe48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    fa0e:	b140      	cbz	r0, fa22 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    fa10:	9801      	ldr	r0, [sp, #4]
    fa12:	4601      	mov	r1, r0
    fa14:	f890 213a 	ldrb.w	r2, [r0, #314]	; 0x13a
    fa18:	3080      	adds	r0, #128	; 0x80
    fa1a:	f501 719d 	add.w	r1, r1, #314	; 0x13a
    fa1e:	b962      	cbnz	r2, fa3a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    fa20:	e001      	b.n	fa26 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
    fa22:	2002      	movs	r0, #2
    fa24:	bd0e      	pop	{r1, r2, r3, pc}
    fa26:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
    fa2a:	f88d 2008 	strb.w	r2, [sp, #8]
    fa2e:	9a02      	ldr	r2, [sp, #8]
    fa30:	9202      	str	r2, [sp, #8]
    fa32:	f89d 3008 	ldrb.w	r3, [sp, #8]
    fa36:	2201      	movs	r2, #1
    fa38:	b10b      	cbz	r3, fa3e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    fa3a:	203a      	movs	r0, #58	; 0x3a
    fa3c:	bd0e      	pop	{r1, r2, r3, pc}
    fa3e:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
    fa42:	079b      	lsls	r3, r3, #30
    fa44:	d006      	beq.n	fa54 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    fa46:	2203      	movs	r2, #3
    fa48:	3056      	adds	r0, #86	; 0x56
    fa4a:	9901      	ldr	r1, [sp, #4]
    fa4c:	f7f6 fc38 	bl	62c0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    fa50:	2000      	movs	r0, #0
    fa52:	bd0e      	pop	{r1, r2, r3, pc}
    fa54:	700a      	strb	r2, [r1, #0]
    fa56:	4668      	mov	r0, sp
    fa58:	f7fd ffb7 	bl	d9ca <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    fa5c:	e7f8      	b.n	fa50 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>

0000fa5e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    fa5e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fa60:	460c      	mov	r4, r1
    fa62:	4605      	mov	r5, r0
    fa64:	8800      	ldrh	r0, [r0, #0]
    fa66:	4669      	mov	r1, sp
    fa68:	f7fd fc16 	bl	d298 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa6c:	b108      	cbz	r0, fa72 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    fa6e:	2002      	movs	r0, #2
    fa70:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fa72:	78a8      	ldrb	r0, [r5, #2]
    fa74:	b130      	cbz	r0, fa84 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    fa76:	f000 f9e4 	bl	fe42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fa7a:	70a0      	strb	r0, [r4, #2]
    fa7c:	8828      	ldrh	r0, [r5, #0]
    fa7e:	8020      	strh	r0, [r4, #0]
    fa80:	2000      	movs	r0, #0
    fa82:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fa84:	9801      	ldr	r0, [sp, #4]
    fa86:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    fa8a:	e7f6      	b.n	fa7a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000fa8c <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    fa8c:	b510      	push	{r4, lr}
    fa8e:	f7fa fcd1 	bl	a434 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    fa92:	2000      	movs	r0, #0
    fa94:	bd10      	pop	{r4, pc}

0000fa96 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    fa96:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fa9a:	4604      	mov	r4, r0
    fa9c:	8840      	ldrh	r0, [r0, #2]
    fa9e:	460d      	mov	r5, r1
    faa0:	b1b8      	cbz	r0, fad2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    faa2:	8820      	ldrh	r0, [r4, #0]
    faa4:	4669      	mov	r1, sp
    faa6:	f7fd fbf7 	bl	d298 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    faaa:	2800      	cmp	r0, #0
    faac:	d10f      	bne.n	face <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    faae:	8820      	ldrh	r0, [r4, #0]
    fab0:	8028      	strh	r0, [r5, #0]
    fab2:	9e01      	ldr	r6, [sp, #4]
    fab4:	f106 0510 	add.w	r5, r6, #16
    fab8:	3680      	adds	r6, #128	; 0x80
    faba:	682f      	ldr	r7, [r5, #0]
    fabc:	8862      	ldrh	r2, [r4, #2]
    fabe:	4639      	mov	r1, r7
    fac0:	4630      	mov	r0, r6
    fac2:	f7fd fd1a 	bl	d4fa <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    fac6:	6828      	ldr	r0, [r5, #0]
    fac8:	42b8      	cmp	r0, r7
    faca:	d1f6      	bne.n	faba <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    facc:	2000      	movs	r0, #0
    face:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fad2:	2012      	movs	r0, #18
    fad4:	e7fb      	b.n	face <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000fad6 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    fad6:	f000 b863 	b.w	fba0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000fada <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    fada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fade:	b086      	sub	sp, #24
    fae0:	4689      	mov	r9, r1
    fae2:	4607      	mov	r7, r0
    fae4:	8800      	ldrh	r0, [r0, #0]
    fae6:	a901      	add	r1, sp, #4
    fae8:	f7fd fbd6 	bl	d298 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    faec:	2800      	cmp	r0, #0
    faee:	d136      	bne.n	fb5e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    faf0:	9802      	ldr	r0, [sp, #8]
    faf2:	4601      	mov	r1, r0
    faf4:	4688      	mov	r8, r1
    faf6:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    fafa:	f500 7494 	add.w	r4, r0, #296	; 0x128
    fafe:	f88d 1000 	strb.w	r1, [sp]
    fb02:	9900      	ldr	r1, [sp, #0]
    fb04:	9100      	str	r1, [sp, #0]
    fb06:	f89d 1000 	ldrb.w	r1, [sp]
    fb0a:	3080      	adds	r0, #128	; 0x80
    fb0c:	b109      	cbz	r1, fb12 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
    fb0e:	2601      	movs	r6, #1
    fb10:	e000      	b.n	fb14 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
    fb12:	2600      	movs	r6, #0
    fb14:	7d81      	ldrb	r1, [r0, #22]
    fb16:	2923      	cmp	r1, #35	; 0x23
    fb18:	d100      	bne.n	fb1c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    fb1a:	b13e      	cbz	r6, fb2c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
    fb1c:	2500      	movs	r5, #0
    fb1e:	3064      	adds	r0, #100	; 0x64
    fb20:	2108      	movs	r1, #8
    fb22:	4682      	mov	sl, r0
    fb24:	f7ff fba4 	bl	f270 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x66>
    fb28:	b110      	cbz	r0, fb30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
    fb2a:	e007      	b.n	fb3c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    fb2c:	2501      	movs	r5, #1
    fb2e:	e7f6      	b.n	fb1e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
    fb30:	210b      	movs	r1, #11
    fb32:	4650      	mov	r0, sl
    fb34:	f7ff fb9c 	bl	f270 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x66>
    fb38:	b900      	cbnz	r0, fb3c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    fb3a:	b17d      	cbz	r5, fb5c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
    fb3c:	a804      	add	r0, sp, #16
    fb3e:	9000      	str	r0, [sp, #0]
    fb40:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fb44:	ab03      	add	r3, sp, #12
    fb46:	463a      	mov	r2, r7
    fb48:	4641      	mov	r1, r8
    fb4a:	f000 f95a 	bl	fe02 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    fb4e:	0005      	movs	r5, r0
    fb50:	d105      	bne.n	fb5e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    fb52:	340c      	adds	r4, #12
    fb54:	20ff      	movs	r0, #255	; 0xff
    fb56:	7060      	strb	r0, [r4, #1]
    fb58:	b936      	cbnz	r6, fb68 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    fb5a:	e003      	b.n	fb64 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    fb5c:	201a      	movs	r0, #26
    fb5e:	b006      	add	sp, #24
    fb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fb64:	7820      	ldrb	r0, [r4, #0]
    fb66:	b108      	cbz	r0, fb6c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
    fb68:	253a      	movs	r5, #58	; 0x3a
    fb6a:	e012      	b.n	fb92 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
    fb6c:	f884 9000 	strb.w	r9, [r4]
    fb70:	f89d 000c 	ldrb.w	r0, [sp, #12]
    fb74:	70a0      	strb	r0, [r4, #2]
    fb76:	f89d 1010 	ldrb.w	r1, [sp, #16]
    fb7a:	70e1      	strb	r1, [r4, #3]
    fb7c:	f88d 0000 	strb.w	r0, [sp]
    fb80:	f88d 1001 	strb.w	r1, [sp, #1]
    fb84:	88b8      	ldrh	r0, [r7, #4]
    fb86:	f8ad 0002 	strh.w	r0, [sp, #2]
    fb8a:	4669      	mov	r1, sp
    fb8c:	4640      	mov	r0, r8
    fb8e:	f7fd fc53 	bl	d438 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    fb92:	2000      	movs	r0, #0
    fb94:	7060      	strb	r0, [r4, #1]
    fb96:	4628      	mov	r0, r5
    fb98:	e7e1      	b.n	fb5e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

0000fb9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    fb9a:	2008      	movs	r0, #8
    fb9c:	f7fa bcb0 	b.w	a500 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0000fba0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    fba0:	b510      	push	{r4, lr}
    fba2:	f7fd fadc 	bl	d15e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    fba6:	f7f6 f885 	bl	5cb4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    fbaa:	f7fa fccb 	bl	a544 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    fbae:	f7fd ff2f 	bl	da10 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    fbb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbb6:	f7fa ba41 	b.w	a03c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x120>

0000fbba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
    fbba:	f7f8 baef 	b.w	819c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    fbbe:	f44f 71a4 	mov.w	r1, #328	; 0x148
    fbc2:	4288      	cmp	r0, r1
    fbc4:	d303      	bcc.n	fbce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
    fbc6:	f640 0148 	movw	r1, #2120	; 0x848
    fbca:	4288      	cmp	r0, r1
    fbcc:	d300      	bcc.n	fbd0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
    fbce:	4608      	mov	r0, r1
    fbd0:	b280      	uxth	r0, r0
    fbd2:	4770      	bx	lr
    fbd4:	07c1      	lsls	r1, r0, #31
    fbd6:	d001      	beq.n	fbdc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
    fbd8:	2001      	movs	r0, #1
    fbda:	4770      	bx	lr
    fbdc:	0780      	lsls	r0, r0, #30
    fbde:	d501      	bpl.n	fbe4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
    fbe0:	2002      	movs	r0, #2
    fbe2:	4770      	bx	lr
    fbe4:	2000      	movs	r0, #0
    fbe6:	4770      	bx	lr
    fbe8:	b510      	push	{r4, lr}
    fbea:	2801      	cmp	r0, #1
    fbec:	d006      	beq.n	fbfc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
    fbee:	2802      	cmp	r0, #2
    fbf0:	d004      	beq.n	fbfc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
    fbf2:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    fbf6:	2006      	movs	r0, #6
    fbf8:	f7f4 fbf0 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fbfc:	bd10      	pop	{r4, pc}
    fbfe:	b510      	push	{r4, lr}
    fc00:	f7fa f99a 	bl	9f38 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
    fc04:	b158      	cbz	r0, fc1e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
    fc06:	f7fa fa39 	bl	a07c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fc0a:	4604      	mov	r4, r0
    fc0c:	f7fe fa7c 	bl	e108 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fc10:	b918      	cbnz	r0, fc1a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
    fc12:	4620      	mov	r0, r4
    fc14:	f7fe fa6e 	bl	e0f4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fc18:	b108      	cbz	r0, fc1e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
    fc1a:	2000      	movs	r0, #0
    fc1c:	bd10      	pop	{r4, pc}
    fc1e:	2001      	movs	r0, #1
    fc20:	bd10      	pop	{r4, pc}
    fc22:	b570      	push	{r4, r5, r6, lr}
    fc24:	460c      	mov	r4, r1
    fc26:	4605      	mov	r5, r0
    fc28:	b112      	cbz	r2, fc30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
    fc2a:	291f      	cmp	r1, #31
    fc2c:	d80c      	bhi.n	fc48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
    fc2e:	e016      	b.n	fc5e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
    fc30:	f7f5 f8ae 	bl	4d90 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    fc34:	42a0      	cmp	r0, r4
    fc36:	d201      	bcs.n	fc3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
    fc38:	2007      	movs	r0, #7
    fc3a:	bd70      	pop	{r4, r5, r6, pc}
    fc3c:	4628      	mov	r0, r5
    fc3e:	f7fe fa61 	bl	e104 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fc42:	b118      	cbz	r0, fc4c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
    fc44:	2c1f      	cmp	r4, #31
    fc46:	d901      	bls.n	fc4c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
    fc48:	2012      	movs	r0, #18
    fc4a:	bd70      	pop	{r4, r5, r6, pc}
    fc4c:	4628      	mov	r0, r5
    fc4e:	f7fe fa62 	bl	e116 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    fc52:	b130      	cbz	r0, fc62 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
    fc54:	4621      	mov	r1, r4
    fc56:	4628      	mov	r0, r5
    fc58:	f7fe fa29 	bl	e0ae <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    fc5c:	b118      	cbz	r0, fc66 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
    fc5e:	2000      	movs	r0, #0
    fc60:	bd70      	pop	{r4, r5, r6, pc}
    fc62:	2042      	movs	r0, #66	; 0x42
    fc64:	bd70      	pop	{r4, r5, r6, pc}
    fc66:	2045      	movs	r0, #69	; 0x45
    fc68:	bd70      	pop	{r4, r5, r6, pc}
    fc6a:	b510      	push	{r4, lr}
    fc6c:	4604      	mov	r4, r0
    fc6e:	7840      	ldrb	r0, [r0, #1]
    fc70:	06c1      	lsls	r1, r0, #27
    fc72:	d51c      	bpl.n	fcae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
    fc74:	07c0      	lsls	r0, r0, #31
    fc76:	d00b      	beq.n	fc90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
    fc78:	f7fa fc16 	bl	a4a8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    fc7c:	b1b8      	cbz	r0, fcae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
    fc7e:	7860      	ldrb	r0, [r4, #1]
    fc80:	06c1      	lsls	r1, r0, #27
    fc82:	d405      	bmi.n	fc90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
    fc84:	0700      	lsls	r0, r0, #28
    fc86:	d503      	bpl.n	fc90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
    fc88:	7d20      	ldrb	r0, [r4, #20]
    fc8a:	2802      	cmp	r0, #2
    fc8c:	d10f      	bne.n	fcae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
    fc8e:	e010      	b.n	fcb2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
    fc90:	7d20      	ldrb	r0, [r4, #20]
    fc92:	2802      	cmp	r0, #2
    fc94:	d001      	beq.n	fc9a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
    fc96:	7ea0      	ldrb	r0, [r4, #26]
    fc98:	b948      	cbnz	r0, fcae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
    fc9a:	7860      	ldrb	r0, [r4, #1]
    fc9c:	0700      	lsls	r0, r0, #28
    fc9e:	d408      	bmi.n	fcb2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
    fca0:	f8d4 0005 	ldr.w	r0, [r4, #5]
    fca4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    fca8:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    fcac:	d201      	bcs.n	fcb2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
    fcae:	2011      	movs	r0, #17
    fcb0:	bd10      	pop	{r4, pc}
    fcb2:	2000      	movs	r0, #0
    fcb4:	bd10      	pop	{r4, pc}
    fcb6:	b538      	push	{r3, r4, r5, lr}
    fcb8:	4604      	mov	r4, r0
    fcba:	7800      	ldrb	r0, [r0, #0]
    fcbc:	28ef      	cmp	r0, #239	; 0xef
    fcbe:	d843      	bhi.n	fd48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fcc0:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    fcc4:	f8ad 0000 	strh.w	r0, [sp]
    fcc8:	9800      	ldr	r0, [sp, #0]
    fcca:	f000 f917 	bl	fefc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x342>
    fcce:	b3a0      	cbz	r0, fd3a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
    fcd0:	7861      	ldrb	r1, [r4, #1]
    fcd2:	0708      	lsls	r0, r1, #28
    fcd4:	d40b      	bmi.n	fcee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
    fcd6:	f8d4 0002 	ldr.w	r0, [r4, #2]
    fcda:	f8d4 3005 	ldr.w	r3, [r4, #5]
    fcde:	0a02      	lsrs	r2, r0, #8
    fce0:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    fce4:	d830      	bhi.n	fd48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fce6:	2220      	movs	r2, #32
    fce8:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    fcec:	d82c      	bhi.n	fd48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fcee:	7a60      	ldrb	r0, [r4, #9]
    fcf0:	b318      	cbz	r0, fd3a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
    fcf2:	2807      	cmp	r0, #7
    fcf4:	d828      	bhi.n	fd48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fcf6:	7aa0      	ldrb	r0, [r4, #10]
    fcf8:	b128      	cbz	r0, fd06 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
    fcfa:	2801      	cmp	r0, #1
    fcfc:	d003      	beq.n	fd06 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
    fcfe:	2802      	cmp	r0, #2
    fd00:	d001      	beq.n	fd06 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
    fd02:	2803      	cmp	r0, #3
    fd04:	d120      	bne.n	fd48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd06:	074a      	lsls	r2, r1, #29
    fd08:	d403      	bmi.n	fd12 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
    fd0a:	2802      	cmp	r0, #2
    fd0c:	d001      	beq.n	fd12 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
    fd0e:	2803      	cmp	r0, #3
    fd10:	d105      	bne.n	fd1e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
    fd12:	7ae0      	ldrb	r0, [r4, #11]
    fd14:	b108      	cbz	r0, fd1a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
    fd16:	2801      	cmp	r0, #1
    fd18:	d116      	bne.n	fd48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd1a:	0748      	lsls	r0, r1, #29
    fd1c:	d407      	bmi.n	fd2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
    fd1e:	7ca0      	ldrb	r0, [r4, #18]
    fd20:	b128      	cbz	r0, fd2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
    fd22:	2801      	cmp	r0, #1
    fd24:	d003      	beq.n	fd2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
    fd26:	2802      	cmp	r0, #2
    fd28:	d001      	beq.n	fd2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
    fd2a:	2803      	cmp	r0, #3
    fd2c:	d10c      	bne.n	fd48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd2e:	06c8      	lsls	r0, r1, #27
    fd30:	7d20      	ldrb	r0, [r4, #20]
    fd32:	d503      	bpl.n	fd3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
    fd34:	2801      	cmp	r0, #1
    fd36:	d107      	bne.n	fd48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd38:	e002      	b.n	fd40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
    fd3a:	e005      	b.n	fd48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd3c:	2802      	cmp	r0, #2
    fd3e:	d003      	beq.n	fd48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd40:	7e20      	ldrb	r0, [r4, #24]
    fd42:	b118      	cbz	r0, fd4c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
    fd44:	2801      	cmp	r0, #1
    fd46:	d001      	beq.n	fd4c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
    fd48:	2012      	movs	r0, #18
    fd4a:	bd38      	pop	{r3, r4, r5, pc}
    fd4c:	2000      	movs	r0, #0
    fd4e:	bd38      	pop	{r3, r4, r5, pc}
    fd50:	b510      	push	{r4, lr}
    fd52:	0004      	movs	r4, r0
    fd54:	d005      	beq.n	fd62 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
    fd56:	f7fa fbe5 	bl	a524 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fd5a:	4384      	bics	r4, r0
    fd5c:	d001      	beq.n	fd62 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
    fd5e:	2000      	movs	r0, #0
    fd60:	bd10      	pop	{r4, pc}
    fd62:	2001      	movs	r0, #1
    fd64:	bd10      	pop	{r4, pc}
    fd66:	28fb      	cmp	r0, #251	; 0xfb
    fd68:	d803      	bhi.n	fd72 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
    fd6a:	f640 0048 	movw	r0, #2120	; 0x848
    fd6e:	4281      	cmp	r1, r0
    fd70:	d901      	bls.n	fd76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
    fd72:	2011      	movs	r0, #17
    fd74:	4770      	bx	lr
    fd76:	2000      	movs	r0, #0
    fd78:	4770      	bx	lr
    fd7a:	381b      	subs	r0, #27
    fd7c:	28e1      	cmp	r0, #225	; 0xe1
    fd7e:	d206      	bcs.n	fd8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
    fd80:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    fd84:	d303      	bcc.n	fd8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
    fd86:	f244 2090 	movw	r0, #17040	; 0x4290
    fd8a:	4281      	cmp	r1, r0
    fd8c:	d901      	bls.n	fd92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
    fd8e:	2012      	movs	r0, #18
    fd90:	4770      	bx	lr
    fd92:	2000      	movs	r0, #0
    fd94:	4770      	bx	lr
    fd96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd9a:	4606      	mov	r6, r0
    fd9c:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    fda0:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    fda4:	4615      	mov	r5, r2
    fda6:	302c      	adds	r0, #44	; 0x2c
    fda8:	f7f7 fd9e 	bl	78e8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
    fdac:	4680      	mov	r8, r0
    fdae:	2102      	movs	r1, #2
    fdb0:	f7fd fb12 	bl	d3d8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fdb4:	4287      	cmp	r7, r0
    fdb6:	d200      	bcs.n	fdba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
    fdb8:	4638      	mov	r0, r7
    fdba:	4607      	mov	r7, r0
    fdbc:	2102      	movs	r1, #2
    fdbe:	4640      	mov	r0, r8
    fdc0:	f7fd fb0a 	bl	d3d8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fdc4:	4284      	cmp	r4, r0
    fdc6:	d200      	bcs.n	fdca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
    fdc8:	4620      	mov	r0, r4
    fdca:	8831      	ldrh	r1, [r6, #0]
    fdcc:	8029      	strh	r1, [r5, #0]
    fdce:	2f1b      	cmp	r7, #27
    fdd0:	d913      	bls.n	fdfa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
    fdd2:	2ffb      	cmp	r7, #251	; 0xfb
    fdd4:	d300      	bcc.n	fdd8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
    fdd6:	27fb      	movs	r7, #251	; 0xfb
    fdd8:	806f      	strh	r7, [r5, #2]
    fdda:	281b      	cmp	r0, #27
    fddc:	d90f      	bls.n	fdfe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
    fdde:	28fb      	cmp	r0, #251	; 0xfb
    fde0:	d300      	bcc.n	fde4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
    fde2:	20fb      	movs	r0, #251	; 0xfb
    fde4:	80e8      	strh	r0, [r5, #6]
    fde6:	4640      	mov	r0, r8
    fde8:	f7ff fee9 	bl	fbbe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
    fdec:	80a8      	strh	r0, [r5, #4]
    fdee:	4640      	mov	r0, r8
    fdf0:	f7ff fee5 	bl	fbbe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
    fdf4:	8128      	strh	r0, [r5, #8]
    fdf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fdfa:	271b      	movs	r7, #27
    fdfc:	e7ec      	b.n	fdd8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
    fdfe:	201b      	movs	r0, #27
    fe00:	e7f0      	b.n	fde4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
    fe02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe06:	7890      	ldrb	r0, [r2, #2]
    fe08:	9e06      	ldr	r6, [sp, #24]
    fe0a:	461d      	mov	r5, r3
    fe0c:	4614      	mov	r4, r2
    fe0e:	b908      	cbnz	r0, fe14 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
    fe10:	f7fa fb88 	bl	a524 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fe14:	78e4      	ldrb	r4, [r4, #3]
    fe16:	4607      	mov	r7, r0
    fe18:	b914      	cbnz	r4, fe20 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
    fe1a:	f7fa fb83 	bl	a524 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fe1e:	4604      	mov	r4, r0
    fe20:	b16f      	cbz	r7, fe3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
    fe22:	b164      	cbz	r4, fe3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
    fe24:	4638      	mov	r0, r7
    fe26:	f7ff fed5 	bl	fbd4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
    fe2a:	4620      	mov	r0, r4
    fe2c:	f7ff fed2 	bl	fbd4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
    fe30:	b12f      	cbz	r7, fe3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
    fe32:	b124      	cbz	r4, fe3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
    fe34:	702f      	strb	r7, [r5, #0]
    fe36:	7034      	strb	r4, [r6, #0]
    fe38:	2000      	movs	r0, #0
    fe3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe3e:	2009      	movs	r0, #9
    fe40:	e7fb      	b.n	fe3a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
    fe42:	207f      	movs	r0, #127	; 0x7f
    fe44:	f000 b83c 	b.w	fec0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
    fe48:	b508      	push	{r3, lr}
    fe4a:	f890 124c 	ldrb.w	r1, [r0, #588]	; 0x24c
    fe4e:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    fe52:	f88d 0000 	strb.w	r0, [sp]
    fe56:	9800      	ldr	r0, [sp, #0]
    fe58:	9000      	str	r0, [sp, #0]
    fe5a:	f89d 0000 	ldrb.w	r0, [sp]
    fe5e:	b100      	cbz	r0, fe62 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
    fe60:	2001      	movs	r0, #1
    fe62:	1e40      	subs	r0, r0, #1
    fe64:	4208      	tst	r0, r1
    fe66:	d003      	beq.n	fe70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
    fe68:	2904      	cmp	r1, #4
    fe6a:	d001      	beq.n	fe70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
    fe6c:	2001      	movs	r0, #1
    fe6e:	bd08      	pop	{r3, pc}
    fe70:	2000      	movs	r0, #0
    fe72:	bd08      	pop	{r3, pc}
    fe74:	b570      	push	{r4, r5, r6, lr}
    fe76:	4605      	mov	r5, r0
    fe78:	f7fe f94d 	bl	e116 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    fe7c:	b170      	cbz	r0, fe9c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e2>
    fe7e:	4628      	mov	r0, r5
    fe80:	f7fe fafe 	bl	e480 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fe84:	2800      	cmp	r0, #0
    fe86:	d008      	beq.n	fe9a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e0>
    fe88:	4628      	mov	r0, r5
    fe8a:	f7fe faf6 	bl	e47a <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
    fe8e:	4604      	mov	r4, r0
    fe90:	4628      	mov	r0, r5
    fe92:	f7fe facc 	bl	e42e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    fe96:	b118      	cbz	r0, fea0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
    fe98:	200c      	movs	r0, #12
    fe9a:	bd70      	pop	{r4, r5, r6, pc}
    fe9c:	2042      	movs	r0, #66	; 0x42
    fe9e:	bd70      	pop	{r4, r5, r6, pc}
    fea0:	b164      	cbz	r4, febc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
    fea2:	8820      	ldrh	r0, [r4, #0]
    fea4:	f7fd f928 	bl	d0f8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    fea8:	8820      	ldrh	r0, [r4, #0]
    feaa:	2100      	movs	r1, #0
    feac:	f7f4 fd18 	bl	48e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    feb0:	b120      	cbz	r0, febc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
    feb2:	f241 6154 	movw	r1, #5716	; 0x1654
    feb6:	2039      	movs	r0, #57	; 0x39
    feb8:	f7f4 fa90 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    febc:	2000      	movs	r0, #0
    febe:	bd70      	pop	{r4, r5, r6, pc}
    fec0:	b508      	push	{r3, lr}
    fec2:	f640 1288 	movw	r2, #2440	; 0x988
    fec6:	4669      	mov	r1, sp
    fec8:	f7f4 f96a 	bl	41a0 <mpsl_fem_tx_power_split>
    fecc:	bd08      	pop	{r3, pc}
    fece:	b530      	push	{r4, r5, lr}
    fed0:	f340 0400 	sbfx	r4, r0, #0, #1
    fed4:	f340 0040 	sbfx	r0, r0, #1, #1
    fed8:	1c40      	adds	r0, r0, #1
    feda:	9d03      	ldr	r5, [sp, #12]
    fedc:	1c64      	adds	r4, r4, #1
    fede:	d000      	beq.n	fee2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x328>
    fee0:	b119      	cbz	r1, feea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x330>
    fee2:	b100      	cbz	r0, fee6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32c>
    fee4:	b10a      	cbz	r2, feea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x330>
    fee6:	b91c      	cbnz	r4, fef0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
    fee8:	e001      	b.n	feee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x334>
    feea:	2011      	movs	r0, #17
    feec:	bd30      	pop	{r4, r5, pc}
    feee:	2100      	movs	r1, #0
    fef0:	7019      	strb	r1, [r3, #0]
    fef2:	b900      	cbnz	r0, fef6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33c>
    fef4:	2200      	movs	r2, #0
    fef6:	702a      	strb	r2, [r5, #0]
    fef8:	2000      	movs	r0, #0
    fefa:	bd30      	pop	{r4, r5, pc}
    fefc:	b2c0      	uxtb	r0, r0
    fefe:	06c1      	lsls	r1, r0, #27
    ff00:	d40c      	bmi.n	ff1c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x362>
    ff02:	0681      	lsls	r1, r0, #26
    ff04:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    ff08:	d503      	bpl.n	ff12 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x358>
    ff0a:	b9d1      	cbnz	r1, ff42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
    ff0c:	0781      	lsls	r1, r0, #30
    ff0e:	d418      	bmi.n	ff42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
    ff10:	e001      	b.n	ff16 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35c>
    ff12:	2900      	cmp	r1, #0
    ff14:	d1fa      	bne.n	ff0c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
    ff16:	0700      	lsls	r0, r0, #28
    ff18:	d413      	bmi.n	ff42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
    ff1a:	e010      	b.n	ff3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x384>
    ff1c:	0641      	lsls	r1, r0, #25
    ff1e:	d410      	bmi.n	ff42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
    ff20:	0681      	lsls	r1, r0, #26
    ff22:	d40e      	bmi.n	ff42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
    ff24:	07c1      	lsls	r1, r0, #31
    ff26:	ea4f 7180 	mov.w	r1, r0, lsl #30
    ff2a:	d004      	beq.n	ff36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37c>
    ff2c:	2900      	cmp	r1, #0
    ff2e:	db02      	blt.n	ff36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37c>
    ff30:	0740      	lsls	r0, r0, #29
    ff32:	d404      	bmi.n	ff3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x384>
    ff34:	e005      	b.n	ff42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
    ff36:	0701      	lsls	r1, r0, #28
    ff38:	d403      	bmi.n	ff42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
    ff3a:	0740      	lsls	r0, r0, #29
    ff3c:	d401      	bmi.n	ff42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
    ff3e:	2001      	movs	r0, #1
    ff40:	4770      	bx	lr
    ff42:	2000      	movs	r0, #0
    ff44:	4770      	bx	lr
    ff46:	b510      	push	{r4, lr}
    ff48:	f7f7 fcb2 	bl	78b0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    ff4c:	b110      	cbz	r0, ff54 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39a>
    ff4e:	f240 110d 	movw	r1, #269	; 0x10d
    ff52:	e004      	b.n	ff5e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a4>
    ff54:	f7f6 fe2c 	bl	6bb0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    ff58:	b120      	cbz	r0, ff64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3aa>
    ff5a:	f44f 7189 	mov.w	r1, #274	; 0x112
    ff5e:	2001      	movs	r0, #1
    ff60:	f7f4 fa3c 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff68:	2001      	movs	r0, #1
    ff6a:	f7fc befb 	b.w	cd64 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    ff6e:	6802      	ldr	r2, [r0, #0]
    ff70:	b912      	cbnz	r2, ff78 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
    ff72:	6001      	str	r1, [r0, #0]
    ff74:	4770      	bx	lr
    ff76:	4602      	mov	r2, r0
    ff78:	6850      	ldr	r0, [r2, #4]
    ff7a:	b108      	cbz	r0, ff80 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
    ff7c:	428a      	cmp	r2, r1
    ff7e:	d1fa      	bne.n	ff76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
    ff80:	428a      	cmp	r2, r1
    ff82:	d0f7      	beq.n	ff74 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
    ff84:	6051      	str	r1, [r2, #4]
    ff86:	4770      	bx	lr
    ff88:	b510      	push	{r4, lr}
    ff8a:	4604      	mov	r4, r0
    ff8c:	e002      	b.n	ff94 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3da>
    ff8e:	6820      	ldr	r0, [r4, #0]
    ff90:	4780      	blx	r0
    ff92:	6864      	ldr	r4, [r4, #4]
    ff94:	2c00      	cmp	r4, #0
    ff96:	d1fa      	bne.n	ff8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d4>
    ff98:	bd10      	pop	{r4, pc}
    ff9a:	b510      	push	{r4, lr}
    ff9c:	2000      	movs	r0, #0
    ff9e:	f7fc fee1 	bl	cd64 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    ffa2:	f7f4 fdff 	bl	4ba4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    ffa6:	f7f5 f897 	bl	50d8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    ffaa:	f7f5 fa49 	bl	5440 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    ffae:	2800      	cmp	r0, #0
    ffb0:	d003      	beq.n	ffba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x400>
    ffb2:	21ec      	movs	r1, #236	; 0xec
    ffb4:	2001      	movs	r0, #1
    ffb6:	f7f4 fa11 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffba:	bd10      	pop	{r4, pc}
    ffbc:	b510      	push	{r4, lr}
    ffbe:	f7ff ffc2 	bl	ff46 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
    ffc2:	f7fe fe14 	bl	ebee <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    ffc6:	2800      	cmp	r0, #0
    ffc8:	d004      	beq.n	ffd4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    ffca:	f240 1129 	movw	r1, #297	; 0x129
    ffce:	2001      	movs	r0, #1
    ffd0:	f7f4 fa04 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffd4:	bd10      	pop	{r4, pc}

0000ffd6 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
    ffd6:	f7f3 be2b 	b.w	3c30 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    ffda:	0001      	.short	0x0001
    ffdc:	0002000b 	.word	0x0002000b
    ffe0:	0005000a 	.word	0x0005000a
    ffe4:	000a0009 	.word	0x000a0009
    ffe8:	00140008 	.word	0x00140008
    ffec:	001e0007 	.word	0x001e0007
    fff0:	00320006 	.word	0x00320006
    fff4:	004b0005 	.word	0x004b0005
    fff8:	00640004 	.word	0x00640004
    fffc:	00960003 	.word	0x00960003
   10000:	00fa0002 	.word	0x00fa0002
   10004:	01f40001 	.word	0x01f40001
	...

0001000a <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1000a:	b510      	push	{r4, lr}
   1000c:	f7fa fe24 	bl	ac58 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10010:	f000 f81d 	bl	1004e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10014:	f7fa fafa 	bl	a60c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1001c:	f7fa bbf4 	b.w	a808 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010020 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10020:	b510      	push	{r4, lr}
   10022:	24c8      	movs	r4, #200	; 0xc8
   10024:	1e64      	subs	r4, r4, #1
   10026:	b2e4      	uxtb	r4, r4
   10028:	f7fa fb0e 	bl	a648 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   1002c:	2802      	cmp	r0, #2
   1002e:	d003      	beq.n	10038 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10030:	2801      	cmp	r0, #1
   10032:	d000      	beq.n	10036 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10034:	2000      	movs	r0, #0
   10036:	bd10      	pop	{r4, pc}
   10038:	2c00      	cmp	r4, #0
   1003a:	d1f3      	bne.n	10024 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   1003c:	21b1      	movs	r1, #177	; 0xb1
   1003e:	203b      	movs	r0, #59	; 0x3b
   10040:	f7f4 f9cc 	bl	43dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10044:	5840      	ldr	r0, [r0, r1]
   10046:	2800      	cmp	r0, #0
   10048:	d000      	beq.n	1004c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   1004a:	2001      	movs	r0, #1
   1004c:	4770      	bx	lr

0001004e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   1004e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10052:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10056:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1005a:	f3bf 8f4f 	dsb	sy
   1005e:	f3bf 8f6f 	isb	sy
   10062:	f7fa bc6b 	b.w	a93c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   10066:	2800      	cmp	r0, #0
   10068:	db09      	blt.n	1007e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1006a:	f000 021f 	and.w	r2, r0, #31
   1006e:	2101      	movs	r1, #1
   10070:	4091      	lsls	r1, r2
   10072:	0940      	lsrs	r0, r0, #5
   10074:	0080      	lsls	r0, r0, #2
   10076:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1007a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1007e:	4770      	bx	lr
   10080:	2800      	cmp	r0, #0
   10082:	db0d      	blt.n	100a0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10084:	f000 021f 	and.w	r2, r0, #31
   10088:	2101      	movs	r1, #1
   1008a:	4091      	lsls	r1, r2
   1008c:	0940      	lsrs	r0, r0, #5
   1008e:	0080      	lsls	r0, r0, #2
   10090:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10094:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10098:	f3bf 8f4f 	dsb	sy
   1009c:	f3bf 8f6f 	isb	sy
   100a0:	4770      	bx	lr
   100a2:	5840      	ldr	r0, [r0, r1]
   100a4:	2800      	cmp	r0, #0
   100a6:	d000      	beq.n	100aa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   100a8:	2001      	movs	r0, #1
   100aa:	4770      	bx	lr
   100ac:	5840      	ldr	r0, [r0, r1]
   100ae:	2800      	cmp	r0, #0
   100b0:	d000      	beq.n	100b4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   100b2:	2001      	movs	r0, #1
   100b4:	4770      	bx	lr

000100b6 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   100b6:	b510      	push	{r4, lr}
   100b8:	4604      	mov	r4, r0
   100ba:	4608      	mov	r0, r1
   100bc:	f7fa fef2 	bl	aea4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   100c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   100c4:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   100c8:	fbb0 f0f1 	udiv	r0, r0, r1
   100cc:	1a20      	subs	r0, r4, r0
   100ce:	1e80      	subs	r0, r0, #2
   100d0:	bd10      	pop	{r4, pc}

000100d2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   100d2:	b510      	push	{r4, lr}
   100d4:	4604      	mov	r4, r0
   100d6:	4608      	mov	r0, r1
   100d8:	f7fa fee4 	bl	aea4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   100dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   100e0:	fbb0 f0f1 	udiv	r0, r0, r1
   100e4:	1a20      	subs	r0, r4, r0
   100e6:	bd10      	pop	{r4, pc}
   100e8:	f4f0ecd8 	.word	0xf4f0ecd8
   100ec:	0200fcf8 	.word	0x0200fcf8
   100f0:	06050403 	.word	0x06050403
   100f4:	00000807 	.word	0x00000807
	...
   10108:	01010000 	.word	0x01010000
   1010c:	02020101 	.word	0x02020101
   10110:	03030202 	.word	0x03030202
   10114:	04040303 	.word	0x04040303
   10118:	05050404 	.word	0x05050404
   1011c:	06060505 	.word	0x06060505
   10120:	0a090807 	.word	0x0a090807
   10124:	000d0c0b 	.word	0x000d0c0b
	...
   10138:	01000000 	.word	0x01000000
   1013c:	02010101 	.word	0x02010101
   10140:	03020202 	.word	0x03020202
   10144:	04030303 	.word	0x04030303
   10148:	05040404 	.word	0x05040404
   1014c:	06050505 	.word	0x06050505
   10150:	09080606 	.word	0x09080606
   10154:	1702080c 	.word	0x1702080c
   10158:	0201010d 	.word	0x0201010d
   1015c:	01010909 	.word	0x01010909
   10160:	18090206 	.word	0x18090206
   10164:	01010318 	.word	0x01010318
   10168:	03030909 	.word	0x03030909
   1016c:	01020305 	.word	0x01020305
   10170:	24020223 	.word	0x24020223
   10174:	04041009 	.word	0x04041009
   10178:	0b0b0505 	.word	0x0b0b0505
   1017c:	002b0b04 	.word	0x002b0b04

00010180 <bt_ready>:
	BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN),
};


static void bt_ready(int err)
{
   10180:	b570      	push	{r4, r5, r6, lr}
   10182:	b09a      	sub	sp, #104	; 0x68
	char addr_s[BT_ADDR_LE_STR_LEN];
	bt_addr_le_t addr = {0};
   10184:	2300      	movs	r3, #0
	size_t count = 1;
   10186:	2601      	movs	r6, #1
	bt_addr_le_t addr = {0};
   10188:	9308      	str	r3, [sp, #32]
	size_t count = 1;
   1018a:	9607      	str	r6, [sp, #28]
	bt_addr_le_t addr = {0};
   1018c:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23

	if (err) {
   10190:	2800      	cmp	r0, #0
   10192:	d135      	bne.n	10200 <bt_ready+0x80>
		return;
	}

	/* Start advertising */
	err = bt_le_adv_start(BT_LE_ADV_NCONN_IDENTITY, ad, ARRAY_SIZE(ad),
   10194:	4d21      	ldr	r5, [pc, #132]	; (1021c <bt_ready+0x9c>)
   10196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10198:	ac0d      	add	r4, sp, #52	; 0x34
   1019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1019c:	682b      	ldr	r3, [r5, #0]
   1019e:	6023      	str	r3, [r4, #0]
   101a0:	491f      	ldr	r1, [pc, #124]	; (10220 <bt_ready+0xa0>)
   101a2:	4b20      	ldr	r3, [pc, #128]	; (10224 <bt_ready+0xa4>)
   101a4:	9600      	str	r6, [sp, #0]
   101a6:	2203      	movs	r2, #3
   101a8:	a80d      	add	r0, sp, #52	; 0x34
   101aa:	f002 fd73 	bl	12c94 <bt_le_adv_start>
			      sd, ARRAY_SIZE(sd));
	if (err) {
   101ae:	bb38      	cbnz	r0, 10200 <bt_ready+0x80>
	 * bt_le_oob_get_local().  For non-connectable non-identity
	 * advertising an non-resolvable private address is used;
	 * there is no API to retrieve that.
	 */

	bt_id_get(&addr, &count);
   101b0:	a907      	add	r1, sp, #28
   101b2:	a808      	add	r0, sp, #32
   101b4:	f002 fa5e 	bl	12674 <bt_id_get>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   101b8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   101bc:	ac0a      	add	r4, sp, #40	; 0x28
   101be:	2b03      	cmp	r3, #3
   101c0:	d826      	bhi.n	10210 <bt_ready+0x90>
   101c2:	e8df f003 	tbb	[pc, r3]
   101c6:	1f02      	.short	0x1f02
   101c8:	2321      	.short	0x2321
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   101ca:	4917      	ldr	r1, [pc, #92]	; (10228 <bt_ready+0xa8>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   101cc:	4620      	mov	r0, r4
   101ce:	f00d f81e 	bl	1d20e <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   101d2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   101d6:	9304      	str	r3, [sp, #16]
   101d8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   101dc:	9303      	str	r3, [sp, #12]
   101de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   101e2:	9302      	str	r3, [sp, #8]
   101e4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   101e8:	9301      	str	r3, [sp, #4]
   101ea:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   101ee:	9300      	str	r3, [sp, #0]
   101f0:	4a0e      	ldr	r2, [pc, #56]	; (1022c <bt_ready+0xac>)
   101f2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   101f6:	9405      	str	r4, [sp, #20]
   101f8:	211e      	movs	r1, #30
   101fa:	a812      	add	r0, sp, #72	; 0x48
   101fc:	f009 fa24 	bl	19648 <snprintk>
	bt_addr_le_to_str(&addr, addr_s, sizeof(addr_s));
}
   10200:	b01a      	add	sp, #104	; 0x68
   10202:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   10204:	490a      	ldr	r1, [pc, #40]	; (10230 <bt_ready+0xb0>)
   10206:	e7e1      	b.n	101cc <bt_ready+0x4c>
		strcpy(type, "public-id");
   10208:	490a      	ldr	r1, [pc, #40]	; (10234 <bt_ready+0xb4>)
   1020a:	e7df      	b.n	101cc <bt_ready+0x4c>
		strcpy(type, "random-id");
   1020c:	490a      	ldr	r1, [pc, #40]	; (10238 <bt_ready+0xb8>)
   1020e:	e7dd      	b.n	101cc <bt_ready+0x4c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10210:	4a0a      	ldr	r2, [pc, #40]	; (1023c <bt_ready+0xbc>)
   10212:	210a      	movs	r1, #10
   10214:	4620      	mov	r0, r4
   10216:	f009 fa17 	bl	19648 <snprintk>
		break;
   1021a:	e7da      	b.n	101d2 <bt_ready+0x52>
   1021c:	0001d4b0 	.word	0x0001d4b0
   10220:	0001d520 	.word	0x0001d520
   10224:	0001d518 	.word	0x0001d518
   10228:	0001da5c 	.word	0x0001da5c
   1022c:	0001da85 	.word	0x0001da85
   10230:	0001da63 	.word	0x0001da63
   10234:	0001da6a 	.word	0x0001da6a
   10238:	0001da74 	.word	0x0001da74
   1023c:	0001da7e 	.word	0x0001da7e

00010240 <main>:



// Before main executes, zephyr-the RTOS, automatically initializes the pin in/out and set's up the clock
void main(void)
{
   10240:	b570      	push	{r4, r5, r6, lr}
    //local variables for PWM period
	uint32_t pwm_pulse = PWM_PERIOD;
    // volatile int adc_reading;
    // volatile uint32_t test;
    // Initialization
    gpio_pin_configure_dt(&blue_led, GPIO_OUTPUT_ACTIVE);
   10242:	481c      	ldr	r0, [pc, #112]	; (102b4 <main+0x74>)
{
   10244:	b088      	sub	sp, #32
    gpio_pin_configure_dt(&blue_led, GPIO_OUTPUT_ACTIVE);
   10246:	f009 f9c3 	bl	195d0 <gpio_pin_configure_dt.constprop.0.isra.0>
    gpio_pin_configure_dt(&red_led, GPIO_OUTPUT_ACTIVE);
   1024a:	481b      	ldr	r0, [pc, #108]	; (102b8 <main+0x78>)
   1024c:	f009 f9c0 	bl	195d0 <gpio_pin_configure_dt.constprop.0.isra.0>
    gpio_pin_configure_dt(&green_led, GPIO_OUTPUT_ACTIVE);
   10250:	481a      	ldr	r0, [pc, #104]	; (102bc <main+0x7c>)
   10252:	f009 f9bd 	bl	195d0 <gpio_pin_configure_dt.constprop.0.isra.0>

	int16_t buf;
	struct adc_sequence sequence = {
   10256:	2214      	movs	r2, #20
   10258:	2100      	movs	r1, #0
   1025a:	a803      	add	r0, sp, #12
   1025c:	f00c ffcf 	bl	1d1fe <memset>
   10260:	f10d 0302 	add.w	r3, sp, #2
   10264:	9305      	str	r3, [sp, #20]
   10266:	2302      	movs	r3, #2
   10268:	9306      	str	r3, [sp, #24]
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
   1026a:	4c15      	ldr	r4, [pc, #84]	; (102c0 <main+0x80>)
   1026c:	4915      	ldr	r1, [pc, #84]	; (102c4 <main+0x84>)
   1026e:	68a3      	ldr	r3, [r4, #8]
    // gpio_pin_set_dt(&red_led, LED_OFF);
    // gpio_pin_set_dt(&green_led, LED_OFF);
    volatile int32_t val_mv;
    while(1){
        k_msleep(5000);
        err = bt_enable(bt_ready); //causes reset
   10270:	4e15      	ldr	r6, [pc, #84]	; (102c8 <main+0x88>)
   10272:	681b      	ldr	r3, [r3, #0]
        fsr[0]++;
   10274:	4d15      	ldr	r5, [pc, #84]	; (102cc <main+0x8c>)
   10276:	4620      	mov	r0, r4
   10278:	4798      	blx	r3
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   1027a:	2100      	movs	r1, #0
   1027c:	f44f 3020 	mov.w	r0, #163840	; 0x28000
   10280:	f008 faf4 	bl	1886c <z_impl_k_sleep>
        err = bt_enable(bt_ready); //causes reset
   10284:	4630      	mov	r0, r6
   10286:	f002 f907 	bl	12498 <bt_enable>
        fsr[0]++;
   1028a:	782b      	ldrb	r3, [r5, #0]
        err = bt_enable(bt_ready); //causes reset
   1028c:	9001      	str	r0, [sp, #4]
        fsr[0]++;
   1028e:	3301      	adds	r3, #1
   10290:	702b      	strb	r3, [r5, #0]
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
   10292:	2301      	movs	r3, #1
   10294:	9304      	str	r3, [sp, #16]
	seq->resolution = spec->resolution;
   10296:	230c      	movs	r3, #12
   10298:	f8ad 301c 	strh.w	r3, [sp, #28]
	return api->read(dev, sequence);
   1029c:	68a3      	ldr	r3, [r4, #8]
   1029e:	a903      	add	r1, sp, #12
   102a0:	685b      	ldr	r3, [r3, #4]
   102a2:	4620      	mov	r0, r4
   102a4:	4798      	blx	r3
            // Iniitlize the adc read sequence
            (void)adc_sequence_init_dt(&adc_channels[i], &sequence);
            // Read the ADC channel (internall updates sequence.buf)
            (void)adc_read(adc_channels[i].dev, &sequence);
            // Upcast the buffer to a int32_t from int16_t
            val_mv = buf; // 3.5V = 8192, 4V = <optimized out>
   102a6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
   102aa:	9302      	str	r3, [sp, #8]
            // Do the conversion to Mv. based on the reference voltage
            val_mv *= ADC_FACTOR; // map the value read to the adc value read
   102ac:	9b02      	ldr	r3, [sp, #8]
   102ae:	9302      	str	r3, [sp, #8]
        for(uint8_t i = 0; i < ARRAY_SIZE(adc_channels); i++)
   102b0:	e7e3      	b.n	1027a <main+0x3a>
   102b2:	bf00      	nop
   102b4:	0001d548 	.word	0x0001d548
   102b8:	0001d540 	.word	0x0001d540
   102bc:	0001d538 	.word	0x0001d538
   102c0:	0001d330 	.word	0x0001d330
   102c4:	0001d556 	.word	0x0001d556
   102c8:	00010181 	.word	0x00010181
   102cc:	20001f20 	.word	0x20001f20

000102d0 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   102d0:	4b01      	ldr	r3, [pc, #4]	; (102d8 <char_out+0x8>)
   102d2:	681b      	ldr	r3, [r3, #0]
   102d4:	4718      	bx	r3
   102d6:	bf00      	nop
   102d8:	20000578 	.word	0x20000578

000102dc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   102dc:	b507      	push	{r0, r1, r2, lr}
   102de:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   102e0:	2100      	movs	r1, #0
   102e2:	4602      	mov	r2, r0
   102e4:	9100      	str	r1, [sp, #0]
   102e6:	4803      	ldr	r0, [pc, #12]	; (102f4 <vprintk+0x18>)
   102e8:	f000 f98c 	bl	10604 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   102ec:	b003      	add	sp, #12
   102ee:	f85d fb04 	ldr.w	pc, [sp], #4
   102f2:	bf00      	nop
   102f4:	000102d1 	.word	0x000102d1

000102f8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   102f8:	b530      	push	{r4, r5, lr}
   102fa:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   102fc:	2500      	movs	r5, #0
   102fe:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   10302:	4604      	mov	r4, r0
   10304:	9500      	str	r5, [sp, #0]
   10306:	a903      	add	r1, sp, #12
   10308:	4805      	ldr	r0, [pc, #20]	; (10320 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   1030a:	9505      	str	r5, [sp, #20]
   1030c:	f000 f97a 	bl	10604 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   10310:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   10314:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   10316:	bfb8      	it	lt
   10318:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   1031a:	b007      	add	sp, #28
   1031c:	bd30      	pop	{r4, r5, pc}
   1031e:	bf00      	nop
   10320:	00019609 	.word	0x00019609

00010324 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10328:	8b05      	ldrh	r5, [r0, #24]
{
   1032a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1032c:	0728      	lsls	r0, r5, #28
{
   1032e:	4690      	mov	r8, r2
	if (processing) {
   10330:	d411      	bmi.n	10356 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   10332:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10334:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   10338:	f040 80cd 	bne.w	104d6 <process_event+0x1b2>
			evt = process_recheck(mgr);
   1033c:	4620      	mov	r0, r4
   1033e:	f009 fb5f 	bl	19a00 <process_recheck>
		}

		if (evt == EVT_NOP) {
   10342:	b178      	cbz	r0, 10364 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   10344:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10346:	8b21      	ldrh	r1, [r4, #24]
   10348:	2804      	cmp	r0, #4
   1034a:	d811      	bhi.n	10370 <process_event+0x4c>
   1034c:	e8df f000 	tbb	[pc, r0]
   10350:	856d10c3 	.word	0x856d10c3
   10354:	95          	.byte	0x95
   10355:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   10356:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10358:	bf0c      	ite	eq
   1035a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1035e:	f045 0520 	orrne.w	r5, r5, #32
   10362:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10364:	f388 8811 	msr	BASEPRI, r8
   10368:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1036c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10370:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10374:	45aa      	cmp	sl, r5
   10376:	f000 80a6 	beq.w	104c6 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   1037a:	2700      	movs	r7, #0
   1037c:	46b9      	mov	r9, r7
   1037e:	463e      	mov	r6, r7
   10380:	68a3      	ldr	r3, [r4, #8]
   10382:	2b00      	cmp	r3, #0
   10384:	f000 80bd 	beq.w	10502 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10388:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   1038c:	8321      	strh	r1, [r4, #24]
   1038e:	f388 8811 	msr	BASEPRI, r8
   10392:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10396:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10398:	2900      	cmp	r1, #0
   1039a:	f000 80bb 	beq.w	10514 <process_event+0x1f0>
	return node->next;
   1039e:	680d      	ldr	r5, [r1, #0]
   103a0:	2900      	cmp	r1, #0
   103a2:	f000 80b7 	beq.w	10514 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   103a6:	f8d1 8004 	ldr.w	r8, [r1, #4]
   103aa:	4633      	mov	r3, r6
   103ac:	4652      	mov	r2, sl
   103ae:	4620      	mov	r0, r4
   103b0:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   103b2:	2d00      	cmp	r5, #0
   103b4:	d076      	beq.n	104a4 <process_event+0x180>
   103b6:	682b      	ldr	r3, [r5, #0]
   103b8:	4629      	mov	r1, r5
   103ba:	461d      	mov	r5, r3
   103bc:	e7f0      	b.n	103a0 <process_event+0x7c>
   103be:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   103c2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   103c4:	2a01      	cmp	r2, #1
   103c6:	d81b      	bhi.n	10400 <process_event+0xdc>
	list->head = NULL;
   103c8:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   103ca:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   103ce:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   103d0:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   103d2:	b289      	uxth	r1, r1
	list->tail = NULL;
   103d4:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   103d8:	d109      	bne.n	103ee <process_event+0xca>
   103da:	463b      	mov	r3, r7
   103dc:	e003      	b.n	103e6 <process_event+0xc2>
				mgr->refs += 1U;
   103de:	8b62      	ldrh	r2, [r4, #26]
   103e0:	3201      	adds	r2, #1
   103e2:	8362      	strh	r2, [r4, #26]
	return node->next;
   103e4:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   103e6:	2b00      	cmp	r3, #0
   103e8:	d1f9      	bne.n	103de <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   103ea:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   103ee:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   103f0:	4620      	mov	r0, r4
   103f2:	f009 fb05 	bl	19a00 <process_recheck>
   103f6:	2800      	cmp	r0, #0
   103f8:	d07b      	beq.n	104f2 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   103fa:	f041 0120 	orr.w	r1, r1, #32
   103fe:	e077      	b.n	104f0 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   10400:	2b04      	cmp	r3, #4
   10402:	d10a      	bne.n	1041a <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10404:	f021 0107 	bic.w	r1, r1, #7
   10408:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1040a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1040c:	4620      	mov	r0, r4
   1040e:	f009 faf7 	bl	19a00 <process_recheck>
   10412:	b110      	cbz	r0, 1041a <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10414:	f041 0120 	orr.w	r1, r1, #32
   10418:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1041a:	8b21      	ldrh	r1, [r4, #24]
   1041c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10420:	45aa      	cmp	sl, r5
   10422:	d050      	beq.n	104c6 <process_event+0x1a2>
   10424:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   10426:	46b9      	mov	r9, r7
   10428:	e7aa      	b.n	10380 <process_event+0x5c>
			transit = mgr->transitions->start;
   1042a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1042c:	f021 0107 	bic.w	r1, r1, #7
   10430:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   10434:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   10436:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   1043a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   1043c:	d12d      	bne.n	1049a <process_event+0x176>
		    || (transit != NULL)) {
   1043e:	f1b9 0f00 	cmp.w	r9, #0
   10442:	d040      	beq.n	104c6 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10444:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   10448:	8321      	strh	r1, [r4, #24]
   1044a:	f388 8811 	msr	BASEPRI, r8
   1044e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   10452:	493a      	ldr	r1, [pc, #232]	; (1053c <process_event+0x218>)
   10454:	4620      	mov	r0, r4
   10456:	47c8      	blx	r9
   10458:	e029      	b.n	104ae <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1045a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   1045e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10460:	f041 0104 	orr.w	r1, r1, #4
   10464:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   10466:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   10468:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   1046c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   1046e:	d0e6      	beq.n	1043e <process_event+0x11a>
   10470:	2700      	movs	r7, #0
		res = 0;
   10472:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10474:	f04f 0a04 	mov.w	sl, #4
   10478:	e782      	b.n	10380 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1047a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   1047e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10480:	f041 0105 	orr.w	r1, r1, #5
   10484:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   10486:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   10488:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   1048c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   1048e:	d0d6      	beq.n	1043e <process_event+0x11a>
   10490:	2700      	movs	r7, #0
		res = 0;
   10492:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10494:	f04f 0a05 	mov.w	sl, #5
   10498:	e772      	b.n	10380 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   1049a:	2700      	movs	r7, #0
		res = 0;
   1049c:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1049e:	f04f 0a06 	mov.w	sl, #6
   104a2:	e76d      	b.n	10380 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   104a4:	462b      	mov	r3, r5
   104a6:	e787      	b.n	103b8 <process_event+0x94>
			if (transit != NULL) {
   104a8:	f1b9 0f00 	cmp.w	r9, #0
   104ac:	d1d1      	bne.n	10452 <process_event+0x12e>
	__asm__ volatile(
   104ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   104b2:	f3ef 8811 	mrs	r8, BASEPRI
   104b6:	f383 8812 	msr	BASEPRI_MAX, r3
   104ba:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   104be:	8b23      	ldrh	r3, [r4, #24]
   104c0:	f023 0308 	bic.w	r3, r3, #8
   104c4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   104c6:	8b25      	ldrh	r5, [r4, #24]
   104c8:	06ea      	lsls	r2, r5, #27
   104ca:	d52e      	bpl.n	1052a <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   104cc:	f025 0310 	bic.w	r3, r5, #16
   104d0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   104d2:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   104d6:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   104d8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   104da:	2e00      	cmp	r6, #0
   104dc:	f6bf af6f 	bge.w	103be <process_event+0x9a>
	list->head = NULL;
   104e0:	2300      	movs	r3, #0
		*clients = mgr->clients;
   104e2:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   104e4:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   104e8:	f021 0107 	bic.w	r1, r1, #7
   104ec:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   104f0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   104f2:	8b21      	ldrh	r1, [r4, #24]
   104f4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   104f8:	45aa      	cmp	sl, r5
   104fa:	f04f 0900 	mov.w	r9, #0
   104fe:	f47f af3f 	bne.w	10380 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   10502:	2f00      	cmp	r7, #0
   10504:	d09b      	beq.n	1043e <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10506:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   1050a:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   1050c:	f388 8811 	msr	BASEPRI, r8
   10510:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   10514:	2f00      	cmp	r7, #0
   10516:	d0c7      	beq.n	104a8 <process_event+0x184>
	return node->next;
   10518:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   1051a:	4639      	mov	r1, r7
   1051c:	4633      	mov	r3, r6
   1051e:	4652      	mov	r2, sl
   10520:	4620      	mov	r0, r4
   10522:	f009 fa99 	bl	19a58 <notify_one>
	list->head = node;
   10526:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   10528:	e7f4      	b.n	10514 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1052a:	06ab      	lsls	r3, r5, #26
   1052c:	f57f af1a 	bpl.w	10364 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10530:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10534:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   10536:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   1053a:	e6ff      	b.n	1033c <process_event+0x18>
   1053c:	00019a85 	.word	0x00019a85

00010540 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   10540:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
   10542:	4e09      	ldr	r6, [pc, #36]	; (10568 <extract_decimal+0x28>)
   10544:	6801      	ldr	r1, [r0, #0]
{
   10546:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
   10548:	270a      	movs	r7, #10
	size_t val = 0;
   1054a:	2000      	movs	r0, #0
   1054c:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
   1054e:	3101      	adds	r1, #1
   10550:	781c      	ldrb	r4, [r3, #0]
   10552:	5d35      	ldrb	r5, [r6, r4]
   10554:	076d      	lsls	r5, r5, #29
   10556:	d401      	bmi.n	1055c <extract_decimal+0x1c>
	}
	*str = sp;
   10558:	6013      	str	r3, [r2, #0]
	return val;
}
   1055a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   1055c:	fb07 4300 	mla	r3, r7, r0, r4
   10560:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   10564:	e7f2      	b.n	1054c <extract_decimal+0xc>
   10566:	bf00      	nop
   10568:	0001dde2 	.word	0x0001dde2

0001056c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   1056c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10570:	4615      	mov	r5, r2
   10572:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   10574:	78d3      	ldrb	r3, [r2, #3]
   10576:	4a22      	ldr	r2, [pc, #136]	; (10600 <encode_uint+0x94>)
   10578:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
   1057c:	2b6f      	cmp	r3, #111	; 0x6f
{
   1057e:	4680      	mov	r8, r0
   10580:	460f      	mov	r7, r1
   10582:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   10586:	d029      	beq.n	105dc <encode_uint+0x70>
   10588:	d824      	bhi.n	105d4 <encode_uint+0x68>
		return 10;
   1058a:	2b58      	cmp	r3, #88	; 0x58
   1058c:	bf0c      	ite	eq
   1058e:	2610      	moveq	r6, #16
   10590:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   10592:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   10596:	4632      	mov	r2, r6
   10598:	2300      	movs	r3, #0
   1059a:	4640      	mov	r0, r8
   1059c:	4639      	mov	r1, r7
   1059e:	f7ef fd8b 	bl	b8 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   105a2:	2a09      	cmp	r2, #9
   105a4:	b2d4      	uxtb	r4, r2
   105a6:	d81e      	bhi.n	105e6 <encode_uint+0x7a>
   105a8:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   105aa:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   105ac:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   105ae:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   105b2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   105b6:	d301      	bcc.n	105bc <encode_uint+0x50>
   105b8:	45d1      	cmp	r9, sl
   105ba:	d811      	bhi.n	105e0 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   105bc:	782b      	ldrb	r3, [r5, #0]
   105be:	069b      	lsls	r3, r3, #26
   105c0:	d505      	bpl.n	105ce <encode_uint+0x62>
		if (radix == 8) {
   105c2:	2e08      	cmp	r6, #8
   105c4:	d115      	bne.n	105f2 <encode_uint+0x86>
			conv->altform_0 = true;
   105c6:	78ab      	ldrb	r3, [r5, #2]
   105c8:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   105cc:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
   105ce:	4648      	mov	r0, r9
   105d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   105d4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   105d8:	2b70      	cmp	r3, #112	; 0x70
   105da:	e7d7      	b.n	1058c <encode_uint+0x20>
	switch (specifier) {
   105dc:	2608      	movs	r6, #8
   105de:	e7d8      	b.n	10592 <encode_uint+0x26>
		value /= radix;
   105e0:	4680      	mov	r8, r0
   105e2:	460f      	mov	r7, r1
   105e4:	e7d7      	b.n	10596 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   105e6:	f1bb 0f01 	cmp.w	fp, #1
   105ea:	bf0c      	ite	eq
   105ec:	3437      	addeq	r4, #55	; 0x37
   105ee:	3457      	addne	r4, #87	; 0x57
   105f0:	e7db      	b.n	105aa <encode_uint+0x3e>
		} else if (radix == 16) {
   105f2:	2e10      	cmp	r6, #16
   105f4:	d1eb      	bne.n	105ce <encode_uint+0x62>
			conv->altform_0c = true;
   105f6:	78ab      	ldrb	r3, [r5, #2]
   105f8:	f043 0310 	orr.w	r3, r3, #16
   105fc:	e7e6      	b.n	105cc <encode_uint+0x60>
   105fe:	bf00      	nop
   10600:	0001dde2 	.word	0x0001dde2

00010604 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   10604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10608:	b097      	sub	sp, #92	; 0x5c
   1060a:	4682      	mov	sl, r0
   1060c:	9103      	str	r1, [sp, #12]
   1060e:	4617      	mov	r7, r2
   10610:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10612:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10614:	7838      	ldrb	r0, [r7, #0]
   10616:	b908      	cbnz	r0, 1061c <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10618:	4628      	mov	r0, r5
   1061a:	e34a      	b.n	10cb2 <z_cbvprintf_impl+0x6ae>
			OUTC(*fp++);
   1061c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   1061e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   10620:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
   10622:	d006      	beq.n	10632 <z_cbvprintf_impl+0x2e>
			OUTC('%');
   10624:	9903      	ldr	r1, [sp, #12]
   10626:	47d0      	blx	sl
   10628:	2800      	cmp	r0, #0
   1062a:	f2c0 8342 	blt.w	10cb2 <z_cbvprintf_impl+0x6ae>
   1062e:	3501      	adds	r5, #1
		if (bps == NULL) {
   10630:	e1f0      	b.n	10a14 <z_cbvprintf_impl+0x410>
		} state = {
   10632:	2218      	movs	r2, #24
   10634:	2100      	movs	r1, #0
   10636:	a810      	add	r0, sp, #64	; 0x40
   10638:	f00c fde1 	bl	1d1fe <memset>
	if (*sp == '%') {
   1063c:	787b      	ldrb	r3, [r7, #1]
   1063e:	2b25      	cmp	r3, #37	; 0x25
   10640:	f000 80a3 	beq.w	1078a <z_cbvprintf_impl+0x186>
   10644:	2300      	movs	r3, #0
   10646:	1c79      	adds	r1, r7, #1
   10648:	4698      	mov	r8, r3
   1064a:	469e      	mov	lr, r3
   1064c:	469c      	mov	ip, r3
   1064e:	4618      	mov	r0, r3
   10650:	460e      	mov	r6, r1
		switch (*sp) {
   10652:	f811 2b01 	ldrb.w	r2, [r1], #1
   10656:	2a2b      	cmp	r2, #43	; 0x2b
   10658:	f000 80c6 	beq.w	107e8 <z_cbvprintf_impl+0x1e4>
   1065c:	f200 80bd 	bhi.w	107da <z_cbvprintf_impl+0x1d6>
   10660:	2a20      	cmp	r2, #32
   10662:	f000 80c4 	beq.w	107ee <z_cbvprintf_impl+0x1ea>
   10666:	2a23      	cmp	r2, #35	; 0x23
   10668:	f000 80c4 	beq.w	107f4 <z_cbvprintf_impl+0x1f0>
   1066c:	b12b      	cbz	r3, 1067a <z_cbvprintf_impl+0x76>
   1066e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10676:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1067a:	f1b8 0f00 	cmp.w	r8, #0
   1067e:	d005      	beq.n	1068c <z_cbvprintf_impl+0x88>
   10680:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10684:	f043 0320 	orr.w	r3, r3, #32
   10688:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1068c:	f1be 0f00 	cmp.w	lr, #0
   10690:	d005      	beq.n	1069e <z_cbvprintf_impl+0x9a>
   10692:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10696:	f043 0310 	orr.w	r3, r3, #16
   1069a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1069e:	f1bc 0f00 	cmp.w	ip, #0
   106a2:	d005      	beq.n	106b0 <z_cbvprintf_impl+0xac>
   106a4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   106a8:	f043 0308 	orr.w	r3, r3, #8
   106ac:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   106b0:	b128      	cbz	r0, 106be <z_cbvprintf_impl+0xba>
   106b2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   106b6:	f043 0304 	orr.w	r3, r3, #4
   106ba:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
   106be:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   106c2:	f003 0144 	and.w	r1, r3, #68	; 0x44
   106c6:	2944      	cmp	r1, #68	; 0x44
   106c8:	d103      	bne.n	106d2 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
   106ca:	f36f 1386 	bfc	r3, #6, #1
   106ce:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
   106d2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   106d6:	9609      	str	r6, [sp, #36]	; 0x24
   106d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
   106dc:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   106de:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   106e2:	f040 808c 	bne.w	107fe <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
   106e6:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   106ea:	f043 0301 	orr.w	r3, r3, #1
   106ee:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
   106f2:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
   106f4:	781a      	ldrb	r2, [r3, #0]
   106f6:	2a2e      	cmp	r2, #46	; 0x2e
   106f8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   106fc:	bf0c      	ite	eq
   106fe:	2101      	moveq	r1, #1
   10700:	2100      	movne	r1, #0
   10702:	f361 0241 	bfi	r2, r1, #1, #1
   10706:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
   1070a:	d10c      	bne.n	10726 <z_cbvprintf_impl+0x122>
	++sp;
   1070c:	1c5a      	adds	r2, r3, #1
   1070e:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
   10710:	785a      	ldrb	r2, [r3, #1]
   10712:	2a2a      	cmp	r2, #42	; 0x2a
   10714:	f040 8083 	bne.w	1081e <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
   10718:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1071c:	f042 0204 	orr.w	r2, r2, #4
   10720:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
   10724:	3302      	adds	r3, #2
	switch (*sp) {
   10726:	781a      	ldrb	r2, [r3, #0]
   10728:	2a6c      	cmp	r2, #108	; 0x6c
   1072a:	f000 80a4 	beq.w	10876 <z_cbvprintf_impl+0x272>
   1072e:	f200 8086 	bhi.w	1083e <z_cbvprintf_impl+0x23a>
   10732:	2a68      	cmp	r2, #104	; 0x68
   10734:	f000 808c 	beq.w	10850 <z_cbvprintf_impl+0x24c>
   10738:	2a6a      	cmp	r2, #106	; 0x6a
   1073a:	f000 80a5 	beq.w	10888 <z_cbvprintf_impl+0x284>
   1073e:	2a4c      	cmp	r2, #76	; 0x4c
   10740:	f000 80aa 	beq.w	10898 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
   10744:	461a      	mov	r2, r3
   10746:	f812 3b01 	ldrb.w	r3, [r2], #1
   1074a:	9204      	str	r2, [sp, #16]
	switch (conv->specifier) {
   1074c:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   1074e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	conv->specifier = *sp++;
   10752:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
	switch (conv->specifier) {
   10756:	f200 8117 	bhi.w	10988 <z_cbvprintf_impl+0x384>
   1075a:	2b6d      	cmp	r3, #109	; 0x6d
   1075c:	f200 80a9 	bhi.w	108b2 <z_cbvprintf_impl+0x2ae>
   10760:	2b69      	cmp	r3, #105	; 0x69
   10762:	f200 8111 	bhi.w	10988 <z_cbvprintf_impl+0x384>
   10766:	2b57      	cmp	r3, #87	; 0x57
   10768:	f200 80be 	bhi.w	108e8 <z_cbvprintf_impl+0x2e4>
   1076c:	2b41      	cmp	r3, #65	; 0x41
   1076e:	d003      	beq.n	10778 <z_cbvprintf_impl+0x174>
   10770:	3b45      	subs	r3, #69	; 0x45
   10772:	2b02      	cmp	r3, #2
   10774:	f200 8108 	bhi.w	10988 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
   10778:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1077c:	2204      	movs	r2, #4
   1077e:	f362 0302 	bfi	r3, r2, #0, #3
   10782:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
   10786:	2301      	movs	r3, #1
			break;
   10788:	e0ca      	b.n	10920 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
   1078a:	1cba      	adds	r2, r7, #2
   1078c:	9204      	str	r2, [sp, #16]
   1078e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
   10792:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   10796:	07da      	lsls	r2, r3, #31
   10798:	f140 80fd 	bpl.w	10996 <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
   1079c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   107a0:	f1b9 0f00 	cmp.w	r9, #0
   107a4:	da07      	bge.n	107b6 <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
   107a6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   107aa:	f042 0204 	orr.w	r2, r2, #4
   107ae:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
   107b2:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   107b6:	075e      	lsls	r6, r3, #29
   107b8:	f140 80f6 	bpl.w	109a8 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
   107bc:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
   107c0:	f1bb 0f00 	cmp.w	fp, #0
   107c4:	f280 80f5 	bge.w	109b2 <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
   107c8:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   107cc:	f36f 0341 	bfc	r3, #1, #1
   107d0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
   107d4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   107d8:	e0eb      	b.n	109b2 <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
   107da:	2a2d      	cmp	r2, #45	; 0x2d
   107dc:	d00d      	beq.n	107fa <z_cbvprintf_impl+0x1f6>
   107de:	2a30      	cmp	r2, #48	; 0x30
   107e0:	f47f af44 	bne.w	1066c <z_cbvprintf_impl+0x68>
   107e4:	2301      	movs	r3, #1
	} while (loop);
   107e6:	e733      	b.n	10650 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
   107e8:	f04f 0c01 	mov.w	ip, #1
   107ec:	e730      	b.n	10650 <z_cbvprintf_impl+0x4c>
   107ee:	f04f 0e01 	mov.w	lr, #1
   107f2:	e72d      	b.n	10650 <z_cbvprintf_impl+0x4c>
   107f4:	f04f 0801 	mov.w	r8, #1
   107f8:	e72a      	b.n	10650 <z_cbvprintf_impl+0x4c>
   107fa:	2001      	movs	r0, #1
   107fc:	e728      	b.n	10650 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
   107fe:	a809      	add	r0, sp, #36	; 0x24
   10800:	f7ff fe9e 	bl	10540 <extract_decimal>
	if (sp != wp) {
   10804:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10806:	42b3      	cmp	r3, r6
   10808:	f43f af74 	beq.w	106f4 <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
   1080c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
   10810:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
   10812:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
   10814:	f360 0241 	bfi	r2, r0, #1, #1
   10818:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1081c:	e76a      	b.n	106f4 <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
   1081e:	a809      	add	r0, sp, #36	; 0x24
   10820:	f7ff fe8e 	bl	10540 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   10824:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
   10828:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
   1082a:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1082e:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   10832:	f362 0341 	bfi	r3, r2, #1, #1
   10836:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
   1083a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1083c:	e773      	b.n	10726 <z_cbvprintf_impl+0x122>
	switch (*sp) {
   1083e:	2a74      	cmp	r2, #116	; 0x74
   10840:	d026      	beq.n	10890 <z_cbvprintf_impl+0x28c>
   10842:	2a7a      	cmp	r2, #122	; 0x7a
   10844:	f47f af7e 	bne.w	10744 <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
   10848:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1084c:	2106      	movs	r1, #6
   1084e:	e00c      	b.n	1086a <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
   10850:	785a      	ldrb	r2, [r3, #1]
   10852:	2a68      	cmp	r2, #104	; 0x68
   10854:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   10858:	d106      	bne.n	10868 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
   1085a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1085c:	f361 02c6 	bfi	r2, r1, #3, #4
   10860:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
   10864:	3302      	adds	r3, #2
   10866:	e76d      	b.n	10744 <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
   10868:	2102      	movs	r1, #2
   1086a:	f361 02c6 	bfi	r2, r1, #3, #4
   1086e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
   10872:	3301      	adds	r3, #1
   10874:	e766      	b.n	10744 <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
   10876:	785a      	ldrb	r2, [r3, #1]
   10878:	2a6c      	cmp	r2, #108	; 0x6c
   1087a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1087e:	d101      	bne.n	10884 <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
   10880:	2104      	movs	r1, #4
   10882:	e7eb      	b.n	1085c <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
   10884:	2103      	movs	r1, #3
   10886:	e7f0      	b.n	1086a <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
   10888:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1088c:	2105      	movs	r1, #5
   1088e:	e7ec      	b.n	1086a <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
   10890:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   10894:	2107      	movs	r1, #7
   10896:	e7e8      	b.n	1086a <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
   10898:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1089c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   108a0:	f022 0202 	bic.w	r2, r2, #2
   108a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   108a8:	f042 0202 	orr.w	r2, r2, #2
   108ac:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
   108b0:	e7df      	b.n	10872 <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
   108b2:	3b6e      	subs	r3, #110	; 0x6e
   108b4:	b2d9      	uxtb	r1, r3
   108b6:	2301      	movs	r3, #1
   108b8:	408b      	lsls	r3, r1
   108ba:	f240 4182 	movw	r1, #1154	; 0x482
   108be:	420b      	tst	r3, r1
   108c0:	d138      	bne.n	10934 <z_cbvprintf_impl+0x330>
   108c2:	f013 0f24 	tst.w	r3, #36	; 0x24
   108c6:	d152      	bne.n	1096e <z_cbvprintf_impl+0x36a>
   108c8:	07d8      	lsls	r0, r3, #31
   108ca:	d55d      	bpl.n	10988 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
   108cc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   108d0:	2103      	movs	r1, #3
   108d2:	f361 0302 	bfi	r3, r1, #0, #3
   108d6:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   108da:	f002 0378 	and.w	r3, r2, #120	; 0x78
   108de:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   108e2:	424b      	negs	r3, r1
   108e4:	414b      	adcs	r3, r1
   108e6:	e01b      	b.n	10920 <z_cbvprintf_impl+0x31c>
	switch (conv->specifier) {
   108e8:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   108ec:	b2c9      	uxtb	r1, r1
   108ee:	2001      	movs	r0, #1
   108f0:	fa00 f101 	lsl.w	r1, r0, r1
   108f4:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   108f8:	f47f af3e 	bne.w	10778 <z_cbvprintf_impl+0x174>
   108fc:	f640 0601 	movw	r6, #2049	; 0x801
   10900:	4231      	tst	r1, r6
   10902:	d11d      	bne.n	10940 <z_cbvprintf_impl+0x33c>
   10904:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   10908:	d03e      	beq.n	10988 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
   1090a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1090e:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10912:	f002 0278 	and.w	r2, r2, #120	; 0x78
   10916:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   10918:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1091c:	d034      	beq.n	10988 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
   1091e:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   10920:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   10924:	f3c2 0140 	ubfx	r1, r2, #1, #1
   10928:	430b      	orrs	r3, r1
   1092a:	f363 0241 	bfi	r2, r3, #1, #1
   1092e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   10932:	e72e      	b.n	10792 <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
   10934:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   10938:	2102      	movs	r1, #2
   1093a:	f361 0302 	bfi	r3, r1, #0, #3
   1093e:	e7e8      	b.n	10912 <z_cbvprintf_impl+0x30e>
   10940:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   10944:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   10946:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1094a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1094e:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   10950:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
   10954:	bf02      	ittt	eq
   10956:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
   1095a:	f041 0101 	orreq.w	r1, r1, #1
   1095e:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
   10962:	2b63      	cmp	r3, #99	; 0x63
   10964:	d1db      	bne.n	1091e <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   10966:	1e13      	subs	r3, r2, #0
   10968:	bf18      	it	ne
   1096a:	2301      	movne	r3, #1
   1096c:	e7d8      	b.n	10920 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
   1096e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   10972:	2103      	movs	r1, #3
   10974:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   10978:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1097c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   10980:	bf14      	ite	ne
   10982:	2301      	movne	r3, #1
   10984:	2300      	moveq	r3, #0
   10986:	e7cb      	b.n	10920 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
   10988:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1098c:	f043 0301 	orr.w	r3, r3, #1
   10990:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
   10994:	e7c3      	b.n	1091e <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
   10996:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
   1099a:	2a00      	cmp	r2, #0
			width = conv->width_value;
   1099c:	bfb4      	ite	lt
   1099e:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
		int width = -1;
   109a2:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
   109a6:	e706      	b.n	107b6 <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
   109a8:	0798      	lsls	r0, r3, #30
   109aa:	f57f af13 	bpl.w	107d4 <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
   109ae:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
			= (enum length_mod_enum)conv->length_mod;
   109b2:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->pad0_value = 0;
   109b6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   109b8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
   109bc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		enum specifier_cat_enum specifier_cat
   109c0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   109c4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   109c6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   109ca:	d133      	bne.n	10a34 <z_cbvprintf_impl+0x430>
			switch (length_mod) {
   109cc:	1ecb      	subs	r3, r1, #3
   109ce:	2b04      	cmp	r3, #4
   109d0:	d804      	bhi.n	109dc <z_cbvprintf_impl+0x3d8>
   109d2:	e8df f003 	tbb	[pc, r3]
   109d6:	4621      	.short	0x4621
   109d8:	2146      	.short	0x2146
   109da:	21          	.byte	0x21
   109db:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   109dc:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   109de:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   109e0:	ea4f 72e3 	mov.w	r2, r3, asr #31
   109e4:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   109e8:	d11c      	bne.n	10a24 <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
   109ea:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
   109ee:	17da      	asrs	r2, r3, #31
   109f0:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
   109f4:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   109f6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   109fa:	f013 0603 	ands.w	r6, r3, #3
   109fe:	d050      	beq.n	10aa2 <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
   10a00:	9b04      	ldr	r3, [sp, #16]
   10a02:	9903      	ldr	r1, [sp, #12]
   10a04:	463a      	mov	r2, r7
   10a06:	4650      	mov	r0, sl
   10a08:	f009 f8e2 	bl	19bd0 <outs>
   10a0c:	2800      	cmp	r0, #0
   10a0e:	f2c0 8150 	blt.w	10cb2 <z_cbvprintf_impl+0x6ae>
   10a12:	4405      	add	r5, r0
			continue;
   10a14:	9f04      	ldr	r7, [sp, #16]
   10a16:	e5fd      	b.n	10614 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10a18:	f854 3b04 	ldr.w	r3, [r4], #4
   10a1c:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   10a1e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
   10a22:	e7e8      	b.n	109f6 <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
   10a24:	2902      	cmp	r1, #2
   10a26:	d1e5      	bne.n	109f4 <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
   10a28:	b21a      	sxth	r2, r3
   10a2a:	f343 33c0 	sbfx	r3, r3, #15, #1
   10a2e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   10a32:	e7df      	b.n	109f4 <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
   10a34:	2b02      	cmp	r3, #2
   10a36:	d124      	bne.n	10a82 <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
   10a38:	1ecb      	subs	r3, r1, #3
   10a3a:	2b04      	cmp	r3, #4
   10a3c:	d804      	bhi.n	10a48 <z_cbvprintf_impl+0x444>
   10a3e:	e8df f003 	tbb	[pc, r3]
   10a42:	1018      	.short	0x1018
   10a44:	1810      	.short	0x1810
   10a46:	18          	.byte	0x18
   10a47:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   10a48:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   10a4a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   10a4e:	f04f 0200 	mov.w	r2, #0
   10a52:	d014      	beq.n	10a7e <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
   10a54:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   10a56:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
   10a5a:	d1cc      	bne.n	109f6 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
   10a5c:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   10a5e:	9310      	str	r3, [sp, #64]	; 0x40
   10a60:	e7c9      	b.n	109f6 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
   10a62:	3407      	adds	r4, #7
   10a64:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   10a68:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   10a6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   10a70:	e7c1      	b.n	109f6 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
   10a72:	f854 3b04 	ldr.w	r3, [r4], #4
   10a76:	9310      	str	r3, [sp, #64]	; 0x40
   10a78:	2300      	movs	r3, #0
   10a7a:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
   10a7c:	e7bb      	b.n	109f6 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
   10a7e:	b2db      	uxtb	r3, r3
   10a80:	e7cd      	b.n	10a1e <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
   10a82:	2b04      	cmp	r3, #4
   10a84:	d108      	bne.n	10a98 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
   10a86:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   10a88:	f024 0407 	bic.w	r4, r4, #7
   10a8c:	e9d4 2300 	ldrd	r2, r3, [r4]
   10a90:	3408      	adds	r4, #8
   10a92:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   10a96:	e7ae      	b.n	109f6 <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
   10a98:	2b03      	cmp	r3, #3
   10a9a:	d1ac      	bne.n	109f6 <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
   10a9c:	f854 3b04 	ldr.w	r3, [r4], #4
   10aa0:	e7dd      	b.n	10a5e <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
   10aa2:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   10aa6:	2878      	cmp	r0, #120	; 0x78
   10aa8:	d8b4      	bhi.n	10a14 <z_cbvprintf_impl+0x410>
   10aaa:	2862      	cmp	r0, #98	; 0x62
   10aac:	d81c      	bhi.n	10ae8 <z_cbvprintf_impl+0x4e4>
   10aae:	2825      	cmp	r0, #37	; 0x25
   10ab0:	f43f adb8 	beq.w	10624 <z_cbvprintf_impl+0x20>
   10ab4:	2858      	cmp	r0, #88	; 0x58
   10ab6:	d1ad      	bne.n	10a14 <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
   10ab8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   10abc:	9300      	str	r3, [sp, #0]
   10abe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   10ac2:	ab0a      	add	r3, sp, #40	; 0x28
   10ac4:	aa12      	add	r2, sp, #72	; 0x48
   10ac6:	f7ff fd51 	bl	1056c <encode_uint>
			if (precision >= 0) {
   10aca:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   10ace:	4607      	mov	r7, r0
			if (precision >= 0) {
   10ad0:	f280 8098 	bge.w	10c04 <z_cbvprintf_impl+0x600>
		if (bps == NULL) {
   10ad4:	2f00      	cmp	r7, #0
   10ad6:	d09d      	beq.n	10a14 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
   10ad8:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
   10adc:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
   10ae0:	2e00      	cmp	r6, #0
   10ae2:	d04e      	beq.n	10b82 <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
   10ae4:	3001      	adds	r0, #1
   10ae6:	e04c      	b.n	10b82 <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
   10ae8:	3863      	subs	r0, #99	; 0x63
   10aea:	2815      	cmp	r0, #21
   10aec:	d892      	bhi.n	10a14 <z_cbvprintf_impl+0x410>
   10aee:	a201      	add	r2, pc, #4	; (adr r2, 10af4 <z_cbvprintf_impl+0x4f0>)
   10af0:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   10af4:	00010b73 	.word	0x00010b73
   10af8:	00010bd9 	.word	0x00010bd9
   10afc:	00010a15 	.word	0x00010a15
   10b00:	00010a15 	.word	0x00010a15
   10b04:	00010a15 	.word	0x00010a15
   10b08:	00010a15 	.word	0x00010a15
   10b0c:	00010bd9 	.word	0x00010bd9
   10b10:	00010a15 	.word	0x00010a15
   10b14:	00010a15 	.word	0x00010a15
   10b18:	00010a15 	.word	0x00010a15
   10b1c:	00010a15 	.word	0x00010a15
   10b20:	00010c63 	.word	0x00010c63
   10b24:	00010bff 	.word	0x00010bff
   10b28:	00010c25 	.word	0x00010c25
   10b2c:	00010a15 	.word	0x00010a15
   10b30:	00010a15 	.word	0x00010a15
   10b34:	00010b4d 	.word	0x00010b4d
   10b38:	00010a15 	.word	0x00010a15
   10b3c:	00010bff 	.word	0x00010bff
   10b40:	00010a15 	.word	0x00010a15
   10b44:	00010a15 	.word	0x00010a15
   10b48:	00010bff 	.word	0x00010bff
			if (precision >= 0) {
   10b4c:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
   10b50:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
   10b52:	db0a      	blt.n	10b6a <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
   10b54:	4659      	mov	r1, fp
   10b56:	4638      	mov	r0, r7
   10b58:	f00c fb61 	bl	1d21e <strnlen>
			bpe = bps + len;
   10b5c:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
   10b60:	2f00      	cmp	r7, #0
   10b62:	f43f af57 	beq.w	10a14 <z_cbvprintf_impl+0x410>
		char sign = 0;
   10b66:	2600      	movs	r6, #0
   10b68:	e00b      	b.n	10b82 <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
   10b6a:	4638      	mov	r0, r7
   10b6c:	f7fa fffa 	bl	bb64 <strlen>
   10b70:	e7f4      	b.n	10b5c <z_cbvprintf_impl+0x558>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   10b72:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10b74:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
   10b78:	2600      	movs	r6, #0
			bpe = buf + 1;
   10b7a:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			bps = buf;
   10b7e:	af0a      	add	r7, sp, #40	; 0x28
		size_t nj_len = (bpe - bps);
   10b80:	2001      	movs	r0, #1
		if (conv->altform_0c) {
   10b82:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   10b86:	f013 0210 	ands.w	r2, r3, #16
   10b8a:	9205      	str	r2, [sp, #20]
   10b8c:	f000 8084 	beq.w	10c98 <z_cbvprintf_impl+0x694>
			nj_len += 2U;
   10b90:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   10b92:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   10b94:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
   10b98:	bf48      	it	mi
   10b9a:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
   10b9c:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
   10b9e:	bf48      	it	mi
   10ba0:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   10ba2:	f1b9 0f00 	cmp.w	r9, #0
   10ba6:	f340 8091 	ble.w	10ccc <z_cbvprintf_impl+0x6c8>
			if (!conv->flag_dash) {
   10baa:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
   10bae:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
   10bb2:	f3c2 0380 	ubfx	r3, r2, #2, #1
   10bb6:	0750      	lsls	r0, r2, #29
   10bb8:	9306      	str	r3, [sp, #24]
   10bba:	f100 8087 	bmi.w	10ccc <z_cbvprintf_impl+0x6c8>
				if (conv->flag_zero) {
   10bbe:	0651      	lsls	r1, r2, #25
   10bc0:	d57a      	bpl.n	10cb8 <z_cbvprintf_impl+0x6b4>
					if (sign != 0) {
   10bc2:	b13e      	cbz	r6, 10bd4 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   10bc4:	9903      	ldr	r1, [sp, #12]
   10bc6:	4630      	mov	r0, r6
   10bc8:	47d0      	blx	sl
   10bca:	2800      	cmp	r0, #0
   10bcc:	db71      	blt.n	10cb2 <z_cbvprintf_impl+0x6ae>
   10bce:	9b06      	ldr	r3, [sp, #24]
   10bd0:	3501      	adds	r5, #1
   10bd2:	461e      	mov	r6, r3
					pad = '0';
   10bd4:	2230      	movs	r2, #48	; 0x30
   10bd6:	e070      	b.n	10cba <z_cbvprintf_impl+0x6b6>
			if (conv->flag_plus) {
   10bd8:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   10bda:	bf5c      	itt	pl
   10bdc:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   10be0:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   10be2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
				sign = '+';
   10be6:	bf48      	it	mi
   10be8:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   10bea:	2b00      	cmp	r3, #0
   10bec:	f6bf af64 	bge.w	10ab8 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
   10bf0:	4252      	negs	r2, r2
   10bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10bf6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
   10bfa:	262d      	movs	r6, #45	; 0x2d
   10bfc:	e75c      	b.n	10ab8 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
   10bfe:	2600      	movs	r6, #0
   10c00:	e75a      	b.n	10ab8 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
   10c02:	2600      	movs	r6, #0
				conv->flag_zero = false;
   10c04:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
   10c08:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   10c0c:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   10c0e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   10c12:	459b      	cmp	fp, r3
				conv->flag_zero = false;
   10c14:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
   10c18:	f67f af5c 	bls.w	10ad4 <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
   10c1c:	ebab 0303 	sub.w	r3, fp, r3
   10c20:	9313      	str	r3, [sp, #76]	; 0x4c
   10c22:	e757      	b.n	10ad4 <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
   10c24:	9810      	ldr	r0, [sp, #64]	; 0x40
   10c26:	b380      	cbz	r0, 10c8a <z_cbvprintf_impl+0x686>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10c28:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
   10c2c:	ab0a      	add	r3, sp, #40	; 0x28
   10c2e:	f8cd 8000 	str.w	r8, [sp]
   10c32:	aa12      	add	r2, sp, #72	; 0x48
   10c34:	2100      	movs	r1, #0
   10c36:	f7ff fc99 	bl	1056c <encode_uint>
				conv->altform_0c = true;
   10c3a:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
   10c3e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   10c42:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   10c46:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   10c4a:	f1bb 0f00 	cmp.w	fp, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10c4e:	4607      	mov	r7, r0
				conv->altform_0c = true;
   10c50:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
   10c54:	dad5      	bge.n	10c02 <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
   10c56:	2800      	cmp	r0, #0
   10c58:	f43f aedc 	beq.w	10a14 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
   10c5c:	eba8 0000 	sub.w	r0, r8, r0
   10c60:	e781      	b.n	10b66 <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
   10c62:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
   10c64:	2907      	cmp	r1, #7
   10c66:	f63f aed5 	bhi.w	10a14 <z_cbvprintf_impl+0x410>
   10c6a:	e8df f001 	tbb	[pc, r1]
   10c6e:	040c      	.short	0x040c
   10c70:	08080c06 	.word	0x08080c06
   10c74:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   10c76:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   10c78:	e6cc      	b.n	10a14 <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
   10c7a:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   10c7c:	e6ca      	b.n	10a14 <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
   10c7e:	17ea      	asrs	r2, r5, #31
   10c80:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   10c84:	e6c6      	b.n	10a14 <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   10c86:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   10c88:	e6c4      	b.n	10a14 <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
   10c8a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 10d48 <z_cbvprintf_impl+0x744>
		char sign = 0;
   10c8e:	4606      	mov	r6, r0
   10c90:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
   10c94:	2005      	movs	r0, #5
   10c96:	e774      	b.n	10b82 <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
   10c98:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   10c9a:	bf48      	it	mi
   10c9c:	3001      	addmi	r0, #1
   10c9e:	e778      	b.n	10b92 <z_cbvprintf_impl+0x58e>
   10ca0:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   10ca2:	4610      	mov	r0, r2
   10ca4:	9206      	str	r2, [sp, #24]
   10ca6:	9903      	ldr	r1, [sp, #12]
   10ca8:	47d0      	blx	sl
   10caa:	2800      	cmp	r0, #0
   10cac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10cb0:	da04      	bge.n	10cbc <z_cbvprintf_impl+0x6b8>
#undef OUTS
#undef OUTC
}
   10cb2:	b017      	add	sp, #92	; 0x5c
   10cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   10cb8:	2220      	movs	r2, #32
					pad = '0';
   10cba:	464b      	mov	r3, r9
				while (width-- > 0) {
   10cbc:	4619      	mov	r1, r3
   10cbe:	2900      	cmp	r1, #0
   10cc0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10cc4:	dcec      	bgt.n	10ca0 <z_cbvprintf_impl+0x69c>
   10cc6:	444d      	add	r5, r9
   10cc8:	1a6d      	subs	r5, r5, r1
   10cca:	4699      	mov	r9, r3
		if (sign != 0) {
   10ccc:	b12e      	cbz	r6, 10cda <z_cbvprintf_impl+0x6d6>
			OUTC(sign);
   10cce:	9903      	ldr	r1, [sp, #12]
   10cd0:	4630      	mov	r0, r6
   10cd2:	47d0      	blx	sl
   10cd4:	2800      	cmp	r0, #0
   10cd6:	dbec      	blt.n	10cb2 <z_cbvprintf_impl+0x6ae>
   10cd8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   10cda:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   10cde:	06da      	lsls	r2, r3, #27
   10ce0:	d401      	bmi.n	10ce6 <z_cbvprintf_impl+0x6e2>
   10ce2:	071b      	lsls	r3, r3, #28
   10ce4:	d505      	bpl.n	10cf2 <z_cbvprintf_impl+0x6ee>
				OUTC('0');
   10ce6:	9903      	ldr	r1, [sp, #12]
   10ce8:	2030      	movs	r0, #48	; 0x30
   10cea:	47d0      	blx	sl
   10cec:	2800      	cmp	r0, #0
   10cee:	dbe0      	blt.n	10cb2 <z_cbvprintf_impl+0x6ae>
   10cf0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   10cf2:	9b05      	ldr	r3, [sp, #20]
   10cf4:	b133      	cbz	r3, 10d04 <z_cbvprintf_impl+0x700>
				OUTC(conv->specifier);
   10cf6:	9903      	ldr	r1, [sp, #12]
   10cf8:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   10cfc:	47d0      	blx	sl
   10cfe:	2800      	cmp	r0, #0
   10d00:	dbd7      	blt.n	10cb2 <z_cbvprintf_impl+0x6ae>
   10d02:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   10d04:	44ab      	add	fp, r5
   10d06:	e005      	b.n	10d14 <z_cbvprintf_impl+0x710>
				OUTC('0');
   10d08:	9903      	ldr	r1, [sp, #12]
   10d0a:	2030      	movs	r0, #48	; 0x30
   10d0c:	47d0      	blx	sl
   10d0e:	2800      	cmp	r0, #0
   10d10:	dbcf      	blt.n	10cb2 <z_cbvprintf_impl+0x6ae>
   10d12:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   10d14:	ebab 0305 	sub.w	r3, fp, r5
   10d18:	2b00      	cmp	r3, #0
   10d1a:	dcf5      	bgt.n	10d08 <z_cbvprintf_impl+0x704>
			OUTS(bps, bpe);
   10d1c:	9903      	ldr	r1, [sp, #12]
   10d1e:	4643      	mov	r3, r8
   10d20:	463a      	mov	r2, r7
   10d22:	4650      	mov	r0, sl
   10d24:	f008 ff54 	bl	19bd0 <outs>
   10d28:	2800      	cmp	r0, #0
   10d2a:	dbc2      	blt.n	10cb2 <z_cbvprintf_impl+0x6ae>
   10d2c:	4405      	add	r5, r0
		while (width > 0) {
   10d2e:	44a9      	add	r9, r5
   10d30:	eba9 0305 	sub.w	r3, r9, r5
   10d34:	2b00      	cmp	r3, #0
   10d36:	f77f ae6d 	ble.w	10a14 <z_cbvprintf_impl+0x410>
			OUTC(' ');
   10d3a:	9903      	ldr	r1, [sp, #12]
   10d3c:	2020      	movs	r0, #32
   10d3e:	47d0      	blx	sl
   10d40:	2800      	cmp	r0, #0
   10d42:	dbb6      	blt.n	10cb2 <z_cbvprintf_impl+0x6ae>
   10d44:	3501      	adds	r5, #1
			--width;
   10d46:	e7f3      	b.n	10d30 <z_cbvprintf_impl+0x72c>
   10d48:	0001dab3 	.word	0x0001dab3

00010d4c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   10d4c:	f006 b88e 	b.w	16e6c <SystemInit>

00010d50 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10d54:	4605      	mov	r5, r0
	__asm__ volatile(
   10d56:	f04f 0340 	mov.w	r3, #64	; 0x40
   10d5a:	f3ef 8611 	mrs	r6, BASEPRI
   10d5e:	f383 8812 	msr	BASEPRI_MAX, r3
   10d62:	f3bf 8f6f 	isb	sy
	return list->head;
   10d66:	4b0e      	ldr	r3, [pc, #56]	; (10da0 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10d68:	4f0e      	ldr	r7, [pc, #56]	; (10da4 <pm_state_notify+0x54>)
   10d6a:	681c      	ldr	r4, [r3, #0]
   10d6c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 10da8 <pm_state_notify+0x58>
   10d70:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10d74:	b92c      	cbnz	r4, 10d82 <pm_state_notify+0x32>
	__asm__ volatile(
   10d76:	f386 8811 	msr	BASEPRI, r6
   10d7a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   10d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   10d82:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   10d86:	2d00      	cmp	r5, #0
   10d88:	bf18      	it	ne
   10d8a:	4613      	movne	r3, r2
		if (callback) {
   10d8c:	b12b      	cbz	r3, 10d9a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10d8e:	f898 2014 	ldrb.w	r2, [r8, #20]
   10d92:	fb09 f202 	mul.w	r2, r9, r2
   10d96:	5cb8      	ldrb	r0, [r7, r2]
   10d98:	4798      	blx	r3
	return node->next;
   10d9a:	6824      	ldr	r4, [r4, #0]
   10d9c:	e7ea      	b.n	10d74 <pm_state_notify+0x24>
   10d9e:	bf00      	nop
   10da0:	20001ba8 	.word	0x20001ba8
   10da4:	20001b9c 	.word	0x20001b9c
   10da8:	20001ed0 	.word	0x20001ed0

00010dac <pm_system_resume>:

void pm_system_resume(void)
{
   10dac:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   10dae:	4b19      	ldr	r3, [pc, #100]	; (10e14 <pm_system_resume+0x68>)
   10db0:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10db2:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   10db6:	f004 031f 	and.w	r3, r4, #31
   10dba:	2201      	movs	r2, #1
   10dbc:	409a      	lsls	r2, r3
   10dbe:	4b16      	ldr	r3, [pc, #88]	; (10e18 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10dc0:	0961      	lsrs	r1, r4, #5
   10dc2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10dc6:	43d0      	mvns	r0, r2
   10dc8:	e853 1f00 	ldrex	r1, [r3]
   10dcc:	ea01 0500 	and.w	r5, r1, r0
   10dd0:	e843 5600 	strex	r6, r5, [r3]
   10dd4:	2e00      	cmp	r6, #0
   10dd6:	d1f7      	bne.n	10dc8 <pm_system_resume+0x1c>
   10dd8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   10ddc:	420a      	tst	r2, r1
   10dde:	d013      	beq.n	10e08 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   10de0:	4b0e      	ldr	r3, [pc, #56]	; (10e1c <pm_system_resume+0x70>)
   10de2:	4d0f      	ldr	r5, [pc, #60]	; (10e20 <pm_system_resume+0x74>)
   10de4:	b18b      	cbz	r3, 10e0a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   10de6:	230c      	movs	r3, #12
   10de8:	4363      	muls	r3, r4
   10dea:	18ea      	adds	r2, r5, r3
   10dec:	5ce8      	ldrb	r0, [r5, r3]
   10dee:	7851      	ldrb	r1, [r2, #1]
   10df0:	f009 f96a 	bl	1a0c8 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   10df4:	2000      	movs	r0, #0
   10df6:	f7ff ffab 	bl	10d50 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   10dfa:	230c      	movs	r3, #12
   10dfc:	435c      	muls	r4, r3
   10dfe:	192a      	adds	r2, r5, r4
   10e00:	2300      	movs	r3, #0
   10e02:	512b      	str	r3, [r5, r4]
   10e04:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   10e08:	bd70      	pop	{r4, r5, r6, pc}
   10e0a:	f383 8811 	msr	BASEPRI, r3
   10e0e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10e12:	e7ef      	b.n	10df4 <pm_system_resume+0x48>
   10e14:	20001ed0 	.word	0x20001ed0
   10e18:	20001bb0 	.word	0x20001bb0
   10e1c:	0001a0c9 	.word	0x0001a0c9
   10e20:	20001b9c 	.word	0x20001b9c

00010e24 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   10e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   10e28:	4b35      	ldr	r3, [pc, #212]	; (10f00 <pm_system_suspend+0xdc>)
{
   10e2a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   10e2c:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   10e2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10e32:	f3ef 8811 	mrs	r8, BASEPRI
   10e36:	f383 8812 	msr	BASEPRI_MAX, r3
   10e3a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   10e3e:	240c      	movs	r4, #12
   10e40:	4b30      	ldr	r3, [pc, #192]	; (10f04 <pm_system_suspend+0xe0>)
   10e42:	4e31      	ldr	r6, [pc, #196]	; (10f08 <pm_system_suspend+0xe4>)
   10e44:	436c      	muls	r4, r5
   10e46:	191a      	adds	r2, r3, r4
   10e48:	5d19      	ldrb	r1, [r3, r4]
   10e4a:	2900      	cmp	r1, #0
   10e4c:	d04c      	beq.n	10ee8 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   10e4e:	ca07      	ldmia	r2, {r0, r1, r2}
   10e50:	eb06 0c04 	add.w	ip, r6, r4
   10e54:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   10e58:	2200      	movs	r2, #0
   10e5a:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   10e5c:	f388 8811 	msr	BASEPRI, r8
   10e60:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   10e64:	230c      	movs	r3, #12
   10e66:	436b      	muls	r3, r5
   10e68:	18f2      	adds	r2, r6, r3
   10e6a:	5cf0      	ldrb	r0, [r6, r3]
   10e6c:	2800      	cmp	r0, #0
   10e6e:	d039      	beq.n	10ee4 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   10e70:	1c7b      	adds	r3, r7, #1
   10e72:	d010      	beq.n	10e96 <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   10e74:	f8d2 c008 	ldr.w	ip, [r2, #8]
   10e78:	4c24      	ldr	r4, [pc, #144]	; (10f0c <pm_system_suspend+0xe8>)
   10e7a:	4a25      	ldr	r2, [pc, #148]	; (10f10 <pm_system_suspend+0xec>)
   10e7c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10e80:	2100      	movs	r1, #0
   10e82:	fbec 4100 	umlal	r4, r1, ip, r0
   10e86:	2300      	movs	r3, #0
   10e88:	4620      	mov	r0, r4
   10e8a:	f7ef f915 	bl	b8 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   10e8e:	2101      	movs	r1, #1
   10e90:	1a38      	subs	r0, r7, r0
   10e92:	f00b ffd3 	bl	1ce3c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10e96:	f007 fc2b 	bl	186f0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   10e9a:	2001      	movs	r0, #1
   10e9c:	f7ff ff58 	bl	10d50 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10ea0:	f3bf 8f5b 	dmb	ish
   10ea4:	4b1b      	ldr	r3, [pc, #108]	; (10f14 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10ea6:	096a      	lsrs	r2, r5, #5
   10ea8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   10eac:	f005 011f 	and.w	r1, r5, #31
   10eb0:	2201      	movs	r2, #1
   10eb2:	408a      	lsls	r2, r1
   10eb4:	e853 0f00 	ldrex	r0, [r3]
   10eb8:	4310      	orrs	r0, r2
   10eba:	e843 0100 	strex	r1, r0, [r3]
   10ebe:	2900      	cmp	r1, #0
   10ec0:	d1f8      	bne.n	10eb4 <pm_system_suspend+0x90>
   10ec2:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   10ec6:	4b14      	ldr	r3, [pc, #80]	; (10f18 <pm_system_suspend+0xf4>)
   10ec8:	b13b      	cbz	r3, 10eda <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   10eca:	230c      	movs	r3, #12
   10ecc:	fb03 f005 	mul.w	r0, r3, r5
   10ed0:	1833      	adds	r3, r6, r0
   10ed2:	5c30      	ldrb	r0, [r6, r0]
   10ed4:	7859      	ldrb	r1, [r3, #1]
   10ed6:	f009 f8eb 	bl	1a0b0 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   10eda:	f7ff ff67 	bl	10dac <pm_system_resume>
	k_sched_unlock();
   10ede:	f007 fc1b 	bl	18718 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   10ee2:	2001      	movs	r0, #1
}
   10ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   10ee8:	4601      	mov	r1, r0
   10eea:	4628      	mov	r0, r5
   10eec:	f000 f816 	bl	10f1c <pm_policy_next_state>
		if (info != NULL) {
   10ef0:	2800      	cmp	r0, #0
   10ef2:	d0b3      	beq.n	10e5c <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   10ef4:	c807      	ldmia	r0, {r0, r1, r2}
   10ef6:	4434      	add	r4, r6
   10ef8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   10efc:	e7ae      	b.n	10e5c <pm_system_suspend+0x38>
   10efe:	bf00      	nop
   10f00:	20001ed0 	.word	0x20001ed0
   10f04:	20001b90 	.word	0x20001b90
   10f08:	20001b9c 	.word	0x20001b9c
   10f0c:	000f423f 	.word	0x000f423f
   10f10:	000f4240 	.word	0x000f4240
   10f14:	20001bb0 	.word	0x20001bb0
   10f18:	0001a0b1 	.word	0x0001a0b1

00010f1c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   10f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f20:	b085      	sub	sp, #20
   10f22:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   10f24:	a903      	add	r1, sp, #12
   10f26:	f000 f843 	bl	10fb0 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10f2a:	4b1e      	ldr	r3, [pc, #120]	; (10fa4 <pm_policy_next_state+0x88>)
   10f2c:	9d03      	ldr	r5, [sp, #12]
   10f2e:	f8d3 a000 	ldr.w	sl, [r3]
   10f32:	f8df 8074 	ldr.w	r8, [pc, #116]	; 10fa8 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10f36:	1e43      	subs	r3, r0, #1
   10f38:	b21b      	sxth	r3, r3
   10f3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   10f3e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10f40:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10f44:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   10f48:	f04f 0b00 	mov.w	fp, #0
   10f4c:	b924      	cbnz	r4, 10f58 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   10f4e:	46a1      	mov	r9, r4
}
   10f50:	4648      	mov	r0, r9
   10f52:	b005      	add	sp, #20
   10f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f58:	6868      	ldr	r0, [r5, #4]
   10f5a:	4a14      	ldr	r2, [pc, #80]	; (10fac <pm_policy_next_state+0x90>)
   10f5c:	46c4      	mov	ip, r8
   10f5e:	4659      	mov	r1, fp
   10f60:	fbe0 c107 	umlal	ip, r1, r0, r7
   10f64:	2300      	movs	r3, #0
   10f66:	4660      	mov	r0, ip
   10f68:	f7ef f8a6 	bl	b8 <__aeabi_uldivmod>
   10f6c:	9001      	str	r0, [sp, #4]
   10f6e:	68a8      	ldr	r0, [r5, #8]
   10f70:	4a0e      	ldr	r2, [pc, #56]	; (10fac <pm_policy_next_state+0x90>)
   10f72:	46c4      	mov	ip, r8
   10f74:	4659      	mov	r1, fp
   10f76:	fbe0 c107 	umlal	ip, r1, r0, r7
   10f7a:	2300      	movs	r3, #0
   10f7c:	4660      	mov	r0, ip
   10f7e:	f7ef f89b 	bl	b8 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10f82:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
   10f86:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10f88:	d001      	beq.n	10f8e <pm_policy_next_state+0x72>
   10f8a:	4582      	cmp	sl, r0
   10f8c:	d905      	bls.n	10f9a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   10f8e:	1c73      	adds	r3, r6, #1
   10f90:	d0de      	beq.n	10f50 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   10f92:	9b01      	ldr	r3, [sp, #4]
   10f94:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   10f96:	42b0      	cmp	r0, r6
   10f98:	d9da      	bls.n	10f50 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10f9a:	3c01      	subs	r4, #1
   10f9c:	b2a4      	uxth	r4, r4
   10f9e:	3d0c      	subs	r5, #12
   10fa0:	e7d4      	b.n	10f4c <pm_policy_next_state+0x30>
   10fa2:	bf00      	nop
   10fa4:	2000057c 	.word	0x2000057c
   10fa8:	000f423f 	.word	0x000f423f
   10fac:	000f4240 	.word	0x000f4240

00010fb0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   10fb0:	b908      	cbnz	r0, 10fb6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   10fb2:	4b02      	ldr	r3, [pc, #8]	; (10fbc <pm_state_cpu_get_all+0xc>)
   10fb4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   10fb6:	2000      	movs	r0, #0
   10fb8:	4770      	bx	lr
   10fba:	bf00      	nop
   10fbc:	0001d564 	.word	0x0001d564

00010fc0 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   10fc0:	4904      	ldr	r1, [pc, #16]	; (10fd4 <sub_bytes+0x14>)
   10fc2:	1e43      	subs	r3, r0, #1
   10fc4:	300f      	adds	r0, #15
   10fc6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10fca:	5c8a      	ldrb	r2, [r1, r2]
   10fcc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   10fce:	4283      	cmp	r3, r0
   10fd0:	d1f9      	bne.n	10fc6 <sub_bytes+0x6>
	}
}
   10fd2:	4770      	bx	lr
   10fd4:	0001dab4 	.word	0x0001dab4

00010fd8 <tc_aes128_set_encrypt_key>:
{
   10fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   10fda:	4e26      	ldr	r6, [pc, #152]	; (11074 <tc_aes128_set_encrypt_key+0x9c>)
{
   10fdc:	4607      	mov	r7, r0
   10fde:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   10fe0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   10fe2:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   10fe4:	ad01      	add	r5, sp, #4
   10fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10fe8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10fea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10fec:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10ff0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   10ff4:	4638      	mov	r0, r7
   10ff6:	2f00      	cmp	r7, #0
   10ff8:	d038      	beq.n	1106c <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   10ffa:	2c00      	cmp	r4, #0
   10ffc:	d038      	beq.n	11070 <tc_aes128_set_encrypt_key+0x98>
   10ffe:	1f38      	subs	r0, r7, #4
   11000:	4621      	mov	r1, r4
   11002:	4602      	mov	r2, r0
   11004:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   11006:	784b      	ldrb	r3, [r1, #1]
   11008:	780d      	ldrb	r5, [r1, #0]
   1100a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1100c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   11010:	78cd      	ldrb	r5, [r1, #3]
   11012:	432b      	orrs	r3, r5
   11014:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   11016:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   11018:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   1101c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1101e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   11022:	d1f0      	bne.n	11006 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   11024:	4c14      	ldr	r4, [pc, #80]	; (11078 <tc_aes128_set_encrypt_key+0xa0>)
   11026:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   11028:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1102a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   1102c:	d116      	bne.n	1105c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1102e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11032:	5ca5      	ldrb	r5, [r4, r2]
   11034:	0e1a      	lsrs	r2, r3, #24
   11036:	5ca2      	ldrb	r2, [r4, r2]
   11038:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1103c:	f3c3 2507 	ubfx	r5, r3, #8, #8
   11040:	b2db      	uxtb	r3, r3
   11042:	5d65      	ldrb	r5, [r4, r5]
   11044:	5ce3      	ldrb	r3, [r4, r3]
   11046:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1104a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1104e:	f021 0303 	bic.w	r3, r1, #3
   11052:	3330      	adds	r3, #48	; 0x30
   11054:	446b      	add	r3, sp
   11056:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1105a:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   1105c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   11060:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   11062:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   11064:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   11066:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   11068:	d1de      	bne.n	11028 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   1106a:	2001      	movs	r0, #1
}
   1106c:	b00d      	add	sp, #52	; 0x34
   1106e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   11070:	4620      	mov	r0, r4
   11072:	e7fb      	b.n	1106c <tc_aes128_set_encrypt_key+0x94>
   11074:	0001d4c4 	.word	0x0001d4c4
   11078:	0001dab4 	.word	0x0001dab4

0001107c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1107c:	4901      	ldr	r1, [pc, #4]	; (11084 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1107e:	2210      	movs	r2, #16
	str	r2, [r1]
   11080:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   11082:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   11084:	e000ed10 	.word	0xe000ed10

00011088 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   11088:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1108a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1108c:	f380 8811 	msr	BASEPRI, r0
	isb
   11090:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   11094:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   11098:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1109a:	b662      	cpsie	i
	isb
   1109c:	f3bf 8f6f 	isb	sy

	bx	lr
   110a0:	4770      	bx	lr
   110a2:	bf00      	nop

000110a4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   110a4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   110a6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   110a8:	f381 8811 	msr	BASEPRI, r1

	wfe
   110ac:	bf20      	wfe

	msr	BASEPRI, r0
   110ae:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   110b2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   110b4:	4770      	bx	lr
   110b6:	bf00      	nop

000110b8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   110b8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   110ba:	2800      	cmp	r0, #0
   110bc:	db07      	blt.n	110ce <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   110be:	4a04      	ldr	r2, [pc, #16]	; (110d0 <arch_irq_enable+0x18>)
   110c0:	0941      	lsrs	r1, r0, #5
   110c2:	2301      	movs	r3, #1
   110c4:	f000 001f 	and.w	r0, r0, #31
   110c8:	4083      	lsls	r3, r0
   110ca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   110ce:	4770      	bx	lr
   110d0:	e000e100 	.word	0xe000e100

000110d4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   110d4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   110d6:	2800      	cmp	r0, #0
   110d8:	db0c      	blt.n	110f4 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   110da:	0943      	lsrs	r3, r0, #5
   110dc:	4906      	ldr	r1, [pc, #24]	; (110f8 <arch_irq_disable+0x24>)
   110de:	f000 001f 	and.w	r0, r0, #31
   110e2:	3320      	adds	r3, #32
   110e4:	2201      	movs	r2, #1
   110e6:	4082      	lsls	r2, r0
   110e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   110ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   110f0:	f3bf 8f6f 	isb	sy
}
   110f4:	4770      	bx	lr
   110f6:	bf00      	nop
   110f8:	e000e100 	.word	0xe000e100

000110fc <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   110fc:	4b05      	ldr	r3, [pc, #20]	; (11114 <arch_irq_is_enabled+0x18>)
   110fe:	0942      	lsrs	r2, r0, #5
   11100:	f000 001f 	and.w	r0, r0, #31
   11104:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11108:	2301      	movs	r3, #1
   1110a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1110e:	4010      	ands	r0, r2
   11110:	4770      	bx	lr
   11112:	bf00      	nop
   11114:	e000e100 	.word	0xe000e100

00011118 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   11118:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1111a:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
   1111c:	bf54      	ite	pl
   1111e:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   11120:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   11122:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11124:	bfac      	ite	ge
   11126:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1112a:	4a07      	ldrlt	r2, [pc, #28]	; (11148 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1112c:	ea4f 1341 	mov.w	r3, r1, lsl #5
   11130:	bfac      	ite	ge
   11132:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11136:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1113a:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1113c:	bfb4      	ite	lt
   1113e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11140:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   11144:	4770      	bx	lr
   11146:	bf00      	nop
   11148:	e000ed14 	.word	0xe000ed14

0001114c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   1114c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1114e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   11150:	4b04      	ldr	r3, [pc, #16]	; (11164 <_arch_isr_direct_pm+0x18>)
   11152:	699a      	ldr	r2, [r3, #24]
   11154:	b11a      	cbz	r2, 1115e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   11156:	2200      	movs	r2, #0
   11158:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   1115a:	f00b fb40 	bl	1c7de <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1115e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   11160:	bd08      	pop	{r3, pc}
   11162:	bf00      	nop
   11164:	20001ed0 	.word	0x20001ed0

00011168 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   11168:	bf30      	wfi
    b z_SysNmiOnReset
   1116a:	f7ff bffd 	b.w	11168 <z_SysNmiOnReset>
   1116e:	bf00      	nop

00011170 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   11170:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11172:	4b08      	ldr	r3, [pc, #32]	; (11194 <z_arm_prep_c+0x24>)
   11174:	4a08      	ldr	r2, [pc, #32]	; (11198 <z_arm_prep_c+0x28>)
   11176:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1117a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1117c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11180:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   11184:	f006 fbe2 	bl	1794c <z_bss_zero>
	z_data_copy();
   11188:	f007 fc02 	bl	18990 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1118c:	f000 f996 	bl	114bc <z_arm_interrupt_init>
	z_cstart();
   11190:	f006 fc1c 	bl	179cc <z_cstart>
   11194:	00000000 	.word	0x00000000
   11198:	e000ed00 	.word	0xe000ed00

0001119c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1119c:	4a09      	ldr	r2, [pc, #36]	; (111c4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1119e:	490a      	ldr	r1, [pc, #40]	; (111c8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   111a0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   111a2:	6809      	ldr	r1, [r1, #0]
   111a4:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   111a6:	4909      	ldr	r1, [pc, #36]	; (111cc <arch_swap+0x30>)
	_current->arch.basepri = key;
   111a8:	66d8      	str	r0, [r3, #108]	; 0x6c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   111aa:	684b      	ldr	r3, [r1, #4]
   111ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   111b0:	604b      	str	r3, [r1, #4]
   111b2:	2300      	movs	r3, #0
   111b4:	f383 8811 	msr	BASEPRI, r3
   111b8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   111bc:	6893      	ldr	r3, [r2, #8]
}
   111be:	6f18      	ldr	r0, [r3, #112]	; 0x70
   111c0:	4770      	bx	lr
   111c2:	bf00      	nop
   111c4:	20001ed0 	.word	0x20001ed0
   111c8:	0001d940 	.word	0x0001d940
   111cc:	e000ed00 	.word	0xe000ed00

000111d0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   111d0:	490f      	ldr	r1, [pc, #60]	; (11210 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   111d2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   111d4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   111d8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   111da:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   111de:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   111e2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   111e4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   111e8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   111ec:	4f09      	ldr	r7, [pc, #36]	; (11214 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   111ee:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   111f2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   111f4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   111f6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   111f8:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
   111fa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   111fc:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   111fe:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   11202:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   11206:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1120a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1120e:	4770      	bx	lr
    ldr r1, =_kernel
   11210:	20001ed0 	.word	0x20001ed0
    ldr v4, =_SCS_ICSR
   11214:	e000ed04 	.word	0xe000ed04

00011218 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   11218:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1121c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1121e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   11222:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   11226:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   11228:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1122c:	2902      	cmp	r1, #2
    beq _oops
   1122e:	d0ff      	beq.n	11230 <_oops>

00011230 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   11230:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   11232:	f008 ff1e 	bl	1a072 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   11236:	bd01      	pop	{r0, pc}

00011238 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   11238:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1123c:	9b00      	ldr	r3, [sp, #0]
   1123e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   11242:	490a      	ldr	r1, [pc, #40]	; (1126c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   11244:	9b01      	ldr	r3, [sp, #4]
   11246:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1124a:	9b02      	ldr	r3, [sp, #8]
   1124c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   11250:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   11254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   11258:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   1125c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   11260:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   11262:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   11264:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   11266:	66c3      	str	r3, [r0, #108]	; 0x6c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   11268:	4770      	bx	lr
   1126a:	bf00      	nop
   1126c:	00019663 	.word	0x00019663

00011270 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   11270:	4b07      	ldr	r3, [pc, #28]	; (11290 <arch_switch_to_main_thread+0x20>)
   11272:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   11274:	4610      	mov	r0, r2
   11276:	f381 8809 	msr	PSP, r1
   1127a:	2100      	movs	r1, #0
   1127c:	b663      	cpsie	if
   1127e:	f381 8811 	msr	BASEPRI, r1
   11282:	f3bf 8f6f 	isb	sy
   11286:	2200      	movs	r2, #0
   11288:	2300      	movs	r3, #0
   1128a:	f008 f9ea 	bl	19662 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1128e:	bf00      	nop
   11290:	20001ed0 	.word	0x20001ed0

00011294 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   11294:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   11296:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   11298:	4a0b      	ldr	r2, [pc, #44]	; (112c8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1129a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   1129c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1129e:	bf1e      	ittt	ne
	movne	r1, #0
   112a0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   112a2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   112a4:	f00b fa9b 	blne	1c7de <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   112a8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   112aa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   112ae:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   112b2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   112b6:	4905      	ldr	r1, [pc, #20]	; (112cc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   112b8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   112ba:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   112bc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   112be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   112c2:	4903      	ldr	r1, [pc, #12]	; (112d0 <_isr_wrapper+0x3c>)
	bx r1
   112c4:	4708      	bx	r1
   112c6:	0000      	.short	0x0000
	ldr r2, =_kernel
   112c8:	20001ed0 	.word	0x20001ed0
	ldr r1, =_sw_isr_table
   112cc:	0001d360 	.word	0x0001d360
	ldr r1, =z_arm_int_exit
   112d0:	000112d5 	.word	0x000112d5

000112d4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   112d4:	4b04      	ldr	r3, [pc, #16]	; (112e8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   112d6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   112d8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   112da:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   112dc:	d003      	beq.n	112e6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   112de:	4903      	ldr	r1, [pc, #12]	; (112ec <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   112e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   112e4:	600a      	str	r2, [r1, #0]

000112e6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   112e6:	4770      	bx	lr
	ldr r3, =_kernel
   112e8:	20001ed0 	.word	0x20001ed0
	ldr r1, =_SCS_ICSR
   112ec:	e000ed04 	.word	0xe000ed04

000112f0 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   112f0:	4b0b      	ldr	r3, [pc, #44]	; (11320 <bus_fault.constprop.0+0x30>)
   112f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   112f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   112f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   112f8:	0592      	lsls	r2, r2, #22
   112fa:	d508      	bpl.n	1130e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   112fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   112fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11300:	0412      	lsls	r2, r2, #16
   11302:	d504      	bpl.n	1130e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   11304:	b118      	cbz	r0, 1130e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   11306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11308:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1130c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1130e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   11310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11312:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   11314:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11316:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   1131a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1131c:	7008      	strb	r0, [r1, #0]

	return reason;
}
   1131e:	4770      	bx	lr
   11320:	e000ed00 	.word	0xe000ed00

00011324 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11324:	4b0d      	ldr	r3, [pc, #52]	; (1135c <mem_manage_fault.constprop.0+0x38>)
   11326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   11328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1132a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1132c:	0792      	lsls	r2, r2, #30
   1132e:	d508      	bpl.n	11342 <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
   11330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   11332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11334:	0612      	lsls	r2, r2, #24
   11336:	d504      	bpl.n	11342 <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
   11338:	b118      	cbz	r0, 11342 <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1133a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1133c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   11340:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   11342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11346:	06d2      	lsls	r2, r2, #27
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11348:	4a04      	ldr	r2, [pc, #16]	; (1135c <mem_manage_fault.constprop.0+0x38>)
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1134a:	bf58      	it	pl
   1134c:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1134e:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11350:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11352:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   11356:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11358:	7008      	strb	r0, [r1, #0]
}
   1135a:	4770      	bx	lr
   1135c:	e000ed00 	.word	0xe000ed00

00011360 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11360:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11362:	4b4c      	ldr	r3, [pc, #304]	; (11494 <z_arm_fault+0x134>)
   11364:	685b      	ldr	r3, [r3, #4]
{
   11366:	b08b      	sub	sp, #44	; 0x2c
   11368:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1136a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1136e:	2500      	movs	r5, #0
   11370:	f385 8811 	msr	BASEPRI, r5
   11374:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11378:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   1137c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   11380:	d111      	bne.n	113a6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   11382:	f002 000c 	and.w	r0, r2, #12
   11386:	2808      	cmp	r0, #8
   11388:	d00d      	beq.n	113a6 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1138a:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   1138c:	bf4c      	ite	mi
   1138e:	460c      	movmi	r4, r1
			*nested_exc = true;
   11390:	2501      	movpl	r5, #1
	*recoverable = false;
   11392:	2200      	movs	r2, #0
	switch (fault) {
   11394:	3b03      	subs	r3, #3
	*recoverable = false;
   11396:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   1139a:	2b03      	cmp	r3, #3
   1139c:	d84c      	bhi.n	11438 <z_arm_fault+0xd8>
   1139e:	e8df f003 	tbb	[pc, r3]
   113a2:	6a04      	.short	0x6a04
   113a4:	726e      	.short	0x726e
		return NULL;
   113a6:	462c      	mov	r4, r5
   113a8:	e7f3      	b.n	11392 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   113aa:	4b3a      	ldr	r3, [pc, #232]	; (11494 <z_arm_fault+0x134>)
   113ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   113ae:	0791      	lsls	r1, r2, #30
   113b0:	d442      	bmi.n	11438 <z_arm_fault+0xd8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   113b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   113b4:	2a00      	cmp	r2, #0
   113b6:	db3f      	blt.n	11438 <z_arm_fault+0xd8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   113b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   113ba:	0052      	lsls	r2, r2, #1
   113bc:	d53c      	bpl.n	11438 <z_arm_fault+0xd8>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   113be:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   113c0:	69a1      	ldr	r1, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   113c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   113c6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   113c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   113cc:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   113d0:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   113d2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   113d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   113da:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   113dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   113e0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   113e4:	f64d 7202 	movw	r2, #57090	; 0xdf02
   113e8:	4291      	cmp	r1, r2
   113ea:	d008      	beq.n	113fe <z_arm_fault+0x9e>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   113ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   113ee:	b2d2      	uxtb	r2, r2
   113f0:	b13a      	cbz	r2, 11402 <z_arm_fault+0xa2>
			reason = mem_manage_fault(esf, 1, recoverable);
   113f2:	f10d 0107 	add.w	r1, sp, #7
   113f6:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   113f8:	f7ff ff94 	bl	11324 <mem_manage_fault.constprop.0>
   113fc:	e00a      	b.n	11414 <z_arm_fault+0xb4>
			reason = esf->basic.r0;
   113fe:	6823      	ldr	r3, [r4, #0]
   11400:	e01b      	b.n	1143a <z_arm_fault+0xda>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   11402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11404:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
   11408:	d006      	beq.n	11418 <z_arm_fault+0xb8>
			reason = bus_fault(esf, 1, recoverable);
   1140a:	f10d 0107 	add.w	r1, sp, #7
   1140e:	2001      	movs	r0, #1
   11410:	f7ff ff6e 	bl	112f0 <bus_fault.constprop.0>
   11414:	4603      	mov	r3, r0
   11416:	e010      	b.n	1143a <z_arm_fault+0xda>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   11418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1141a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1141e:	d30b      	bcc.n	11438 <z_arm_fault+0xd8>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   11426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   11428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1142a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1142c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1142e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   11432:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   11436:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
   11438:	2300      	movs	r3, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1143a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1143e:	b9c2      	cbnz	r2, 11472 <z_arm_fault+0x112>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11440:	ae02      	add	r6, sp, #8
   11442:	f104 0720 	add.w	r7, r4, #32
   11446:	6820      	ldr	r0, [r4, #0]
   11448:	6861      	ldr	r1, [r4, #4]
   1144a:	4632      	mov	r2, r6
   1144c:	c203      	stmia	r2!, {r0, r1}
   1144e:	3408      	adds	r4, #8
   11450:	42bc      	cmp	r4, r7
   11452:	4616      	mov	r6, r2
   11454:	d1f7      	bne.n	11446 <z_arm_fault+0xe6>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   11456:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11458:	b1bd      	cbz	r5, 1148a <z_arm_fault+0x12a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1145a:	f3c2 0108 	ubfx	r1, r2, #0, #9
   1145e:	b921      	cbnz	r1, 1146a <z_arm_fault+0x10a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   11460:	ea6f 2252 	mvn.w	r2, r2, lsr #9
   11464:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11468:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1146a:	a902      	add	r1, sp, #8
   1146c:	4618      	mov	r0, r3
   1146e:	f008 fdfe 	bl	1a06e <z_arm_fatal_error>
}
   11472:	b00b      	add	sp, #44	; 0x2c
   11474:	bdf0      	pop	{r4, r5, r6, r7, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   11476:	f10d 0107 	add.w	r1, sp, #7
   1147a:	2000      	movs	r0, #0
   1147c:	e7bc      	b.n	113f8 <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
   1147e:	f10d 0107 	add.w	r1, sp, #7
   11482:	2000      	movs	r0, #0
   11484:	e7c4      	b.n	11410 <z_arm_fault+0xb0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11486:	4b03      	ldr	r3, [pc, #12]	; (11494 <z_arm_fault+0x134>)
   11488:	e7ca      	b.n	11420 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1148a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
   1148e:	f022 0201 	bic.w	r2, r2, #1
   11492:	e7e9      	b.n	11468 <z_arm_fault+0x108>
   11494:	e000ed00 	.word	0xe000ed00

00011498 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11498:	4a02      	ldr	r2, [pc, #8]	; (114a4 <z_arm_fault_init+0xc>)
   1149a:	6953      	ldr	r3, [r2, #20]
   1149c:	f043 0310 	orr.w	r3, r3, #16
   114a0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   114a2:	4770      	bx	lr
   114a4:	e000ed00 	.word	0xe000ed00

000114a8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   114a8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   114ac:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   114b0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   114b2:	4672      	mov	r2, lr
	bl z_arm_fault
   114b4:	f7ff ff54 	bl	11360 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   114b8:	bd01      	pop	{r0, pc}
   114ba:	bf00      	nop

000114bc <z_arm_interrupt_init>:
   114bc:	4804      	ldr	r0, [pc, #16]	; (114d0 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   114be:	2300      	movs	r3, #0
   114c0:	2140      	movs	r1, #64	; 0x40
   114c2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   114c4:	3301      	adds	r3, #1
   114c6:	2b1e      	cmp	r3, #30
   114c8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   114cc:	d1f9      	bne.n	114c2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   114ce:	4770      	bx	lr
   114d0:	e000e100 	.word	0xe000e100

000114d4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   114d4:	2000      	movs	r0, #0
    msr CONTROL, r0
   114d6:	f380 8814 	msr	CONTROL, r0
    isb
   114da:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   114de:	f7ff fc35 	bl	10d4c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   114e2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   114e4:	490d      	ldr	r1, [pc, #52]	; (1151c <__start+0x48>)
    str r0, [r1]
   114e6:	6008      	str	r0, [r1, #0]
    dsb
   114e8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   114ec:	480c      	ldr	r0, [pc, #48]	; (11520 <__start+0x4c>)
    msr msp, r0
   114ee:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   114f2:	f000 f82b 	bl	1154c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   114f6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   114f8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   114fc:	4809      	ldr	r0, [pc, #36]	; (11524 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   114fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   11502:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11504:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11508:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1150c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1150e:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11510:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11514:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11518:	f7ff fe2a 	bl	11170 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   1151c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11520:	20004be8 	.word	0x20004be8
    ldr r0, =z_interrupt_stacks
   11524:	20003ee8 	.word	0x20003ee8

00011528 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   11528:	4907      	ldr	r1, [pc, #28]	; (11548 <z_arm_clear_arm_mpu_config+0x20>)
   1152a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   1152e:	2300      	movs	r3, #0
	int num_regions =
   11530:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   11534:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   11536:	4293      	cmp	r3, r2
   11538:	db00      	blt.n	1153c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1153a:	4770      	bx	lr
  MPU->RNR = rnr;
   1153c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   11540:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   11544:	3301      	adds	r3, #1
   11546:	e7f6      	b.n	11536 <z_arm_clear_arm_mpu_config+0xe>
   11548:	e000ed00 	.word	0xe000ed00

0001154c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1154c:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   1154e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   11550:	2300      	movs	r3, #0
   11552:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   11556:	f7ff ffe7 	bl	11528 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1155a:	4b14      	ldr	r3, [pc, #80]	; (115ac <z_arm_init_arch_hw_at_boot+0x60>)
   1155c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   11564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   11568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1156c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   11570:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   11574:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   11578:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   1157c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11580:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   11584:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   11588:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   1158c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   11590:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   11594:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   11598:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   1159c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   115a0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   115a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   115a6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   115aa:	bd08      	pop	{r3, pc}
   115ac:	e000e100 	.word	0xe000e100

000115b0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   115b0:	4b08      	ldr	r3, [pc, #32]	; (115d4 <z_impl_k_thread_abort+0x24>)
   115b2:	689b      	ldr	r3, [r3, #8]
   115b4:	4283      	cmp	r3, r0
   115b6:	d10b      	bne.n	115d0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   115b8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   115bc:	b143      	cbz	r3, 115d0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   115be:	4b06      	ldr	r3, [pc, #24]	; (115d8 <z_impl_k_thread_abort+0x28>)
   115c0:	685a      	ldr	r2, [r3, #4]
   115c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   115c6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   115c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   115ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   115ce:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   115d0:	f007 b96c 	b.w	188ac <z_thread_abort>
   115d4:	20001ed0 	.word	0x20001ed0
   115d8:	e000ed00 	.word	0xe000ed00

000115dc <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   115dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   115e0:	b2c0      	uxtb	r0, r0
   115e2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   115e6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   115ea:	4905      	ldr	r1, [pc, #20]	; (11600 <sys_arch_reboot+0x24>)
   115ec:	4b05      	ldr	r3, [pc, #20]	; (11604 <sys_arch_reboot+0x28>)
   115ee:	68ca      	ldr	r2, [r1, #12]
   115f0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   115f4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   115f6:	60cb      	str	r3, [r1, #12]
   115f8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   115fc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   115fe:	e7fd      	b.n	115fc <sys_arch_reboot+0x20>
   11600:	e000ed00 	.word	0xe000ed00
   11604:	05fa0004 	.word	0x05fa0004

00011608 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   11608:	b120      	cbz	r0, 11614 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1160a:	4b03      	ldr	r3, [pc, #12]	; (11618 <arch_busy_wait+0x10>)
   1160c:	0180      	lsls	r0, r0, #6
   1160e:	f043 0301 	orr.w	r3, r3, #1
   11612:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   11614:	4770      	bx	lr
   11616:	bf00      	nop
   11618:	0001d510 	.word	0x0001d510

0001161c <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   1161c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   1161e:	4d0a      	ldr	r5, [pc, #40]	; (11648 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11620:	4b0a      	ldr	r3, [pc, #40]	; (1164c <long_wq_init+0x30>)
{
   11622:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11624:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   11626:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11628:	9302      	str	r3, [sp, #8]
   1162a:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   1162c:	f00b fa72 	bl	1cb14 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   11630:	ab02      	add	r3, sp, #8
   11632:	9300      	str	r3, [sp, #0]
   11634:	4628      	mov	r0, r5
   11636:	4906      	ldr	r1, [pc, #24]	; (11650 <long_wq_init+0x34>)
   11638:	230a      	movs	r3, #10
   1163a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   1163e:	f006 fdb1 	bl	181a4 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   11642:	4620      	mov	r0, r4
   11644:	b005      	add	sp, #20
   11646:	bd30      	pop	{r4, r5, pc}
   11648:	200015a8 	.word	0x200015a8
   1164c:	0001dbce 	.word	0x0001dbce
   11650:	20002760 	.word	0x20002760

00011654 <bt_long_wq_schedule>:
{
   11654:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   11656:	4801      	ldr	r0, [pc, #4]	; (1165c <bt_long_wq_schedule+0x8>)
   11658:	f006 bddc 	b.w	18214 <k_work_schedule_for_queue>
   1165c:	200015a8 	.word	0x200015a8

00011660 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   11660:	7803      	ldrb	r3, [r0, #0]
   11662:	2b01      	cmp	r3, #1
{
   11664:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   11666:	d013      	beq.n	11690 <uuid_to_uuid128+0x30>
   11668:	2b02      	cmp	r3, #2
   1166a:	d027      	beq.n	116bc <uuid_to_uuid128+0x5c>
   1166c:	b97b      	cbnz	r3, 1168e <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   1166e:	4b19      	ldr	r3, [pc, #100]	; (116d4 <uuid_to_uuid128+0x74>)
   11670:	460a      	mov	r2, r1
   11672:	f103 0410 	add.w	r4, r3, #16
   11676:	f853 5b04 	ldr.w	r5, [r3], #4
   1167a:	f842 5b04 	str.w	r5, [r2], #4
   1167e:	42a3      	cmp	r3, r4
   11680:	d1f9      	bne.n	11676 <uuid_to_uuid128+0x16>
   11682:	781b      	ldrb	r3, [r3, #0]
   11684:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   11686:	8843      	ldrh	r3, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   11688:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   1168a:	0a1b      	lsrs	r3, r3, #8
   1168c:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1168e:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   11690:	4b10      	ldr	r3, [pc, #64]	; (116d4 <uuid_to_uuid128+0x74>)
   11692:	460a      	mov	r2, r1
   11694:	f103 0410 	add.w	r4, r3, #16
   11698:	f853 5b04 	ldr.w	r5, [r3], #4
   1169c:	f842 5b04 	str.w	r5, [r2], #4
   116a0:	42a3      	cmp	r3, r4
   116a2:	d1f9      	bne.n	11698 <uuid_to_uuid128+0x38>
   116a4:	781b      	ldrb	r3, [r3, #0]
   116a6:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   116a8:	6843      	ldr	r3, [r0, #4]
	dst[0] = val;
   116aa:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   116ac:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   116b0:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   116b2:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   116b4:	0a1b      	lsrs	r3, r3, #8
   116b6:	738a      	strb	r2, [r1, #14]
   116b8:	740b      	strb	r3, [r1, #16]
}
   116ba:	e7e8      	b.n	1168e <uuid_to_uuid128+0x2e>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   116bc:	f100 0310 	add.w	r3, r0, #16
   116c0:	f850 2b04 	ldr.w	r2, [r0], #4
   116c4:	f841 2b04 	str.w	r2, [r1], #4
   116c8:	4298      	cmp	r0, r3
   116ca:	d1f9      	bne.n	116c0 <uuid_to_uuid128+0x60>
   116cc:	7803      	ldrb	r3, [r0, #0]
   116ce:	700b      	strb	r3, [r1, #0]
   116d0:	e7dd      	b.n	1168e <uuid_to_uuid128+0x2e>
   116d2:	bf00      	nop
   116d4:	0001dbd7 	.word	0x0001dbd7

000116d8 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   116d8:	b538      	push	{r3, r4, r5, lr}
   116da:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   116dc:	4805      	ldr	r0, [pc, #20]	; (116f4 <bt_buf_get_rx+0x1c>)
   116de:	f00a fb9d 	bl	1be1c <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   116e2:	4604      	mov	r4, r0
   116e4:	b120      	cbz	r0, 116f0 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   116e6:	2100      	movs	r1, #0
   116e8:	3008      	adds	r0, #8
   116ea:	f00a fbb6 	bl	1be5a <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   116ee:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   116f0:	4620      	mov	r0, r4
   116f2:	bd38      	pop	{r3, r4, r5, pc}
   116f4:	20000870 	.word	0x20000870

000116f8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   116f8:	b510      	push	{r4, lr}
   116fa:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   116fc:	490a      	ldr	r1, [pc, #40]	; (11728 <bt_buf_get_cmd_complete+0x30>)
{
   116fe:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   11700:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
   11704:	b920      	cbnz	r0, 11710 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   11706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1170a:	2001      	movs	r0, #1
   1170c:	f7ff bfe4 	b.w	116d8 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   11710:	f00a fbfe 	bl	1bf10 <net_buf_ref>
   11714:	2301      	movs	r3, #1
		buf->len = 0U;
   11716:	2100      	movs	r1, #0
   11718:	7503      	strb	r3, [r0, #20]
   1171a:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   1171c:	4604      	mov	r4, r0
   1171e:	3008      	adds	r0, #8
   11720:	f00a fb9b 	bl	1be5a <net_buf_simple_reserve>
}
   11724:	4620      	mov	r0, r4
   11726:	bd10      	pop	{r4, pc}
   11728:	20000378 	.word	0x20000378

0001172c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   1172c:	b570      	push	{r4, r5, r6, lr}
   1172e:	4604      	mov	r4, r0
	switch (evt) {
   11730:	2c0f      	cmp	r4, #15
{
   11732:	460d      	mov	r5, r1
   11734:	4610      	mov	r0, r2
   11736:	4619      	mov	r1, r3
	switch (evt) {
   11738:	d805      	bhi.n	11746 <bt_buf_get_evt+0x1a>
   1173a:	2c0d      	cmp	r4, #13
   1173c:	d90d      	bls.n	1175a <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1173e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   11742:	f7ff bfd9 	b.w	116f8 <bt_buf_get_cmd_complete>
	switch (evt) {
   11746:	2c13      	cmp	r4, #19
   11748:	d107      	bne.n	1175a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   1174a:	480c      	ldr	r0, [pc, #48]	; (1177c <bt_buf_get_evt+0x50>)
   1174c:	f00a fb66 	bl	1be1c <net_buf_alloc_fixed>
			if (buf) {
   11750:	4604      	mov	r4, r0
   11752:	b938      	cbnz	r0, 11764 <bt_buf_get_evt+0x38>
{
   11754:	2400      	movs	r4, #0
}
   11756:	4620      	mov	r0, r4
   11758:	bd70      	pop	{r4, r5, r6, pc}
   1175a:	4602      	mov	r2, r0
   1175c:	460b      	mov	r3, r1
		if (discardable) {
   1175e:	b145      	cbz	r5, 11772 <bt_buf_get_evt+0x46>
   11760:	4807      	ldr	r0, [pc, #28]	; (11780 <bt_buf_get_evt+0x54>)
   11762:	e7f3      	b.n	1174c <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   11764:	2100      	movs	r1, #0
   11766:	3008      	adds	r0, #8
   11768:	f00a fb77 	bl	1be5a <net_buf_simple_reserve>
   1176c:	2301      	movs	r3, #1
   1176e:	7523      	strb	r3, [r4, #20]
}
   11770:	e7f1      	b.n	11756 <bt_buf_get_evt+0x2a>
}
   11772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11776:	2001      	movs	r0, #1
   11778:	f7ff bfae 	b.w	116d8 <bt_buf_get_rx>
   1177c:	2000089c 	.word	0x2000089c
   11780:	200007ec 	.word	0x200007ec

00011784 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   11784:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   11786:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11788:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   1178c:	781b      	ldrb	r3, [r3, #0]
   1178e:	b963      	cbnz	r3, 117aa <hci_disconn_complete_prio+0x26>
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   11790:	4620      	mov	r0, r4
   11792:	f001 fce9 	bl	13168 <bt_conn_lookup_handle>
	if (!conn) {
   11796:	4605      	mov	r5, r0
   11798:	b940      	cbnz	r0, 117ac <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1179a:	4b08      	ldr	r3, [pc, #32]	; (117bc <hci_disconn_complete_prio+0x38>)
   1179c:	881a      	ldrh	r2, [r3, #0]
   1179e:	b922      	cbnz	r2, 117aa <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   117a0:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   117a4:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   117a8:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   117aa:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   117ac:	2101      	movs	r1, #1
   117ae:	f001 fce3 	bl	13178 <bt_conn_set_state>
	bt_conn_unref(conn);
   117b2:	4628      	mov	r0, r5
}
   117b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   117b8:	f009 b953 	b.w	1aa62 <bt_conn_unref>
   117bc:	20001f10 	.word	0x20001f10

000117c0 <find_pending_connect.part.0>:
	cp->phy_opts = phy_opts;

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
}

static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   117c0:	b510      	push	{r4, lr}

		return conn;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   117c2:	4c08      	ldr	r4, [pc, #32]	; (117e4 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   117c4:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   117c6:	2205      	movs	r2, #5
   117c8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   117cc:	f001 fe62 	bl	13494 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_DIR_ADV);
		if (!conn) {
   117d0:	b938      	cbnz	r0, 117e2 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   117d2:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   117d6:	4904      	ldr	r1, [pc, #16]	; (117e8 <find_pending_connect.part.0+0x28>)

		return conn;
	}

	return NULL;
}
   117d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   117dc:	2204      	movs	r2, #4
   117de:	f001 be59 	b.w	13494 <bt_conn_lookup_state_le>
}
   117e2:	bd10      	pop	{r4, pc}
   117e4:	20000378 	.word	0x20000378
   117e8:	0001dbb4 	.word	0x0001dbb4

000117ec <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
   117ec:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   117ee:	2101      	movs	r1, #1
   117f0:	4604      	mov	r4, r0
   117f2:	3008      	adds	r0, #8
   117f4:	f00a fbd9 	bl	1bfaa <net_buf_simple_pull_mem>
	err = handle_event_common(event, buf, handlers, num_handlers);
   117f8:	4621      	mov	r1, r4
   117fa:	4a03      	ldr	r2, [pc, #12]	; (11808 <hci_le_meta_event+0x1c>)
   117fc:	7800      	ldrb	r0, [r0, #0]
	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
}
   117fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
   11802:	2307      	movs	r3, #7
   11804:	f008 bd74 	b.w	1a2f0 <handle_event_common.isra.0>
   11808:	0001d5dc 	.word	0x0001d5dc

0001180c <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   1180c:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1180e:	483c      	ldr	r0, [pc, #240]	; (11900 <rx_work_handler+0xf4>)
   11810:	f00a fb45 	bl	1be9e <net_buf_slist_get>
	if (!buf) {
   11814:	4604      	mov	r4, r0
   11816:	2800      	cmp	r0, #0
   11818:	d071      	beq.n	118fe <rx_work_handler+0xf2>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1181a:	7d03      	ldrb	r3, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   1181c:	2b01      	cmp	r3, #1
   1181e:	d03f      	beq.n	118a0 <rx_work_handler+0x94>
   11820:	2b03      	cmp	r3, #3
   11822:	d11f      	bne.n	11864 <rx_work_handler+0x58>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   11824:	8983      	ldrh	r3, [r0, #12]
   11826:	2b03      	cmp	r3, #3
   11828:	d80c      	bhi.n	11844 <rx_work_handler+0x38>
   1182a:	4a36      	ldr	r2, [pc, #216]	; (11904 <rx_work_handler+0xf8>)
   1182c:	4936      	ldr	r1, [pc, #216]	; (11908 <rx_work_handler+0xfc>)
   1182e:	4837      	ldr	r0, [pc, #220]	; (1190c <rx_work_handler+0x100>)
   11830:	f240 13ed 	movw	r3, #493	; 0x1ed
   11834:	f008 f9e3 	bl	19bfe <assert_print>
   11838:	4040      	eors	r0, r0
   1183a:	f380 8811 	msr	BASEPRI, r0
   1183e:	f04f 0003 	mov.w	r0, #3
   11842:	df02      	svc	2
   11844:	2104      	movs	r1, #4
   11846:	f104 0008 	add.w	r0, r4, #8
   1184a:	f00a fbae 	bl	1bfaa <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1184e:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   11850:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   11852:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   11854:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   11856:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   11858:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   1185c:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   1185e:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   11860:	d003      	beq.n	1186a <rx_work_handler+0x5e>
	net_buf_unref(buf);
   11862:	4620      	mov	r0, r4
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   11864:	f003 fc1c 	bl	150a0 <net_buf_unref>
		break;
   11868:	e00f      	b.n	1188a <rx_work_handler+0x7e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1186a:	f001 fc7d 	bl	13168 <bt_conn_lookup_handle>
	if (!conn) {
   1186e:	4605      	mov	r5, r0
   11870:	2800      	cmp	r0, #0
   11872:	d0f6      	beq.n	11862 <rx_work_handler+0x56>
	acl(buf)->index = bt_conn_index(conn);
   11874:	f001 fd34 	bl	132e0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   11878:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   1187a:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   1187c:	4621      	mov	r1, r4
   1187e:	4628      	mov	r0, r5
   11880:	f009 f886 	bl	1a990 <bt_conn_recv>
	bt_conn_unref(conn);
   11884:	4628      	mov	r0, r5
   11886:	f009 f8ec 	bl	1aa62 <bt_conn_unref>
	return list->head;
   1188a:	4b21      	ldr	r3, [pc, #132]	; (11910 <rx_work_handler+0x104>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   1188c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   11890:	2b00      	cmp	r3, #0
   11892:	d034      	beq.n	118fe <rx_work_handler+0xf2>
#endif
		if (err < 0) {
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   11894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   11898:	491e      	ldr	r1, [pc, #120]	; (11914 <rx_work_handler+0x108>)
   1189a:	481f      	ldr	r0, [pc, #124]	; (11918 <rx_work_handler+0x10c>)
   1189c:	f00b b929 	b.w	1caf2 <k_work_submit_to_queue>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   118a0:	8983      	ldrh	r3, [r0, #12]
   118a2:	2b01      	cmp	r3, #1
   118a4:	d80c      	bhi.n	118c0 <rx_work_handler+0xb4>
   118a6:	4a17      	ldr	r2, [pc, #92]	; (11904 <rx_work_handler+0xf8>)
   118a8:	4917      	ldr	r1, [pc, #92]	; (11908 <rx_work_handler+0xfc>)
   118aa:	4818      	ldr	r0, [pc, #96]	; (1190c <rx_work_handler+0x100>)
   118ac:	f44f 6316 	mov.w	r3, #2400	; 0x960
   118b0:	f008 f9a5 	bl	19bfe <assert_print>
   118b4:	4040      	eors	r0, r0
   118b6:	f380 8811 	msr	BASEPRI, r0
   118ba:	f04f 0003 	mov.w	r0, #3
   118be:	df02      	svc	2
   118c0:	2102      	movs	r1, #2
   118c2:	f104 0008 	add.w	r0, r4, #8
   118c6:	f00a fb70 	bl	1bfaa <net_buf_simple_pull_mem>
   118ca:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   118cc:	7800      	ldrb	r0, [r0, #0]
   118ce:	f008 fc5d 	bl	1a18c <bt_hci_evt_get_flags>
   118d2:	0783      	lsls	r3, r0, #30
   118d4:	d40c      	bmi.n	118f0 <rx_work_handler+0xe4>
   118d6:	4a0b      	ldr	r2, [pc, #44]	; (11904 <rx_work_handler+0xf8>)
   118d8:	4910      	ldr	r1, [pc, #64]	; (1191c <rx_work_handler+0x110>)
   118da:	480c      	ldr	r0, [pc, #48]	; (1190c <rx_work_handler+0x100>)
   118dc:	f640 1364 	movw	r3, #2404	; 0x964
   118e0:	f008 f98d 	bl	19bfe <assert_print>
   118e4:	4040      	eors	r0, r0
   118e6:	f380 8811 	msr	BASEPRI, r0
   118ea:	f04f 0003 	mov.w	r0, #3
   118ee:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
   118f0:	4a0b      	ldr	r2, [pc, #44]	; (11920 <rx_work_handler+0x114>)
   118f2:	7828      	ldrb	r0, [r5, #0]
   118f4:	2304      	movs	r3, #4
   118f6:	4621      	mov	r1, r4
   118f8:	f008 fcfa 	bl	1a2f0 <handle_event_common.isra.0>
   118fc:	e7b1      	b.n	11862 <rx_work_handler+0x56>
}
   118fe:	bd70      	pop	{r4, r5, r6, pc}
   11900:	200004ac 	.word	0x200004ac
   11904:	0001dbe8 	.word	0x0001dbe8
   11908:	0001dc1c 	.word	0x0001dc1c
   1190c:	0001dc35 	.word	0x0001dc35
   11910:	20000378 	.word	0x20000378
   11914:	200005bc 	.word	0x200005bc
   11918:	200016b8 	.word	0x200016b8
   1191c:	0001dc52 	.word	0x0001dc52
   11920:	0001d5bc 	.word	0x0001d5bc

00011924 <hci_cmd_done>:
{
   11924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11926:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   11928:	7990      	ldrb	r0, [r2, #6]
{
   1192a:	460e      	mov	r6, r1
   1192c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1192e:	f003 faf5 	bl	14f1c <net_buf_pool_get>
   11932:	4b28      	ldr	r3, [pc, #160]	; (119d4 <hci_cmd_done+0xb0>)
   11934:	4283      	cmp	r3, r0
   11936:	d14b      	bne.n	119d0 <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
   11938:	4620      	mov	r0, r4
   1193a:	f003 faf7 	bl	14f2c <net_buf_id>
   1193e:	4d26      	ldr	r5, [pc, #152]	; (119d8 <hci_cmd_done+0xb4>)
   11940:	230c      	movs	r3, #12
   11942:	fb03 5000 	mla	r0, r3, r0, r5
   11946:	8843      	ldrh	r3, [r0, #2]
   11948:	42bb      	cmp	r3, r7
   1194a:	d141      	bne.n	119d0 <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
   1194c:	4f23      	ldr	r7, [pc, #140]	; (119dc <hci_cmd_done+0xb8>)
   1194e:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   11952:	b120      	cbz	r0, 1195e <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   11954:	f003 fba4 	bl	150a0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   11958:	2300      	movs	r3, #0
   1195a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   1195e:	4620      	mov	r0, r4
   11960:	f003 fae4 	bl	14f2c <net_buf_id>
   11964:	270c      	movs	r7, #12
   11966:	fb07 5000 	mla	r0, r7, r0, r5
   1196a:	6843      	ldr	r3, [r0, #4]
   1196c:	b19b      	cbz	r3, 11996 <hci_cmd_done+0x72>
   1196e:	b996      	cbnz	r6, 11996 <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   11970:	4620      	mov	r0, r4
   11972:	f003 fadb 	bl	14f2c <net_buf_id>
   11976:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1197a:	2101      	movs	r1, #1
   1197c:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   1197e:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   11982:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   11984:	f003 071f 	and.w	r7, r3, #31
   11988:	40b9      	lsls	r1, r7
	if (val) {
   1198a:	095b      	lsrs	r3, r3, #5
   1198c:	b1d2      	cbz	r2, 119c4 <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1198e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   11992:	f008 fc3a 	bl	1a20a <atomic_or>
	if (cmd(buf)->sync) {
   11996:	4620      	mov	r0, r4
   11998:	f003 fac8 	bl	14f2c <net_buf_id>
   1199c:	270c      	movs	r7, #12
   1199e:	fb07 5000 	mla	r0, r7, r0, r5
   119a2:	6883      	ldr	r3, [r0, #8]
   119a4:	b1a3      	cbz	r3, 119d0 <hci_cmd_done+0xac>
		cmd(buf)->status = status;
   119a6:	4620      	mov	r0, r4
   119a8:	f003 fac0 	bl	14f2c <net_buf_id>
   119ac:	4378      	muls	r0, r7
   119ae:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   119b0:	4620      	mov	r0, r4
   119b2:	f003 fabb 	bl	14f2c <net_buf_id>
   119b6:	fb07 5500 	mla	r5, r7, r0, r5
   119ba:	68a8      	ldr	r0, [r5, #8]
}
   119bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   119c0:	f006 ba74 	b.w	17eac <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   119c4:	43c9      	mvns	r1, r1
   119c6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   119ca:	f008 fca8 	bl	1a31e <atomic_and.isra.0>
   119ce:	e7e2      	b.n	11996 <hci_cmd_done+0x72>
   119d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   119d2:	bf00      	nop
   119d4:	20000844 	.word	0x20000844
   119d8:	20001bb4 	.word	0x20001bb4
   119dc:	20000378 	.word	0x20000378

000119e0 <hci_cmd_status>:
{
   119e0:	b538      	push	{r3, r4, r5, lr}
   119e2:	2104      	movs	r1, #4
   119e4:	4604      	mov	r4, r0
   119e6:	3008      	adds	r0, #8
   119e8:	f00a fadf 	bl	1bfaa <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   119ec:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   119ee:	7801      	ldrb	r1, [r0, #0]
   119f0:	8840      	ldrh	r0, [r0, #2]
   119f2:	4622      	mov	r2, r4
   119f4:	f7ff ff96 	bl	11924 <hci_cmd_done>
	if (ncmd) {
   119f8:	b125      	cbz	r5, 11a04 <hci_cmd_status+0x24>
   119fa:	4803      	ldr	r0, [pc, #12]	; (11a08 <hci_cmd_status+0x28>)
}
   119fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11a00:	f006 ba54 	b.w	17eac <z_impl_k_sem_give>
   11a04:	bd38      	pop	{r3, r4, r5, pc}
   11a06:	bf00      	nop
   11a08:	20000490 	.word	0x20000490

00011a0c <hci_cmd_complete>:
{
   11a0c:	b538      	push	{r3, r4, r5, lr}
   11a0e:	2103      	movs	r1, #3
   11a10:	4604      	mov	r4, r0
   11a12:	3008      	adds	r0, #8
   11a14:	f00a fac9 	bl	1bfaa <net_buf_simple_pull_mem>
	status = buf->data[0];
   11a18:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   11a1a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   11a1c:	7819      	ldrb	r1, [r3, #0]
   11a1e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   11a22:	4622      	mov	r2, r4
   11a24:	f7ff ff7e 	bl	11924 <hci_cmd_done>
	if (ncmd) {
   11a28:	b125      	cbz	r5, 11a34 <hci_cmd_complete+0x28>
   11a2a:	4803      	ldr	r0, [pc, #12]	; (11a38 <hci_cmd_complete+0x2c>)
}
   11a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11a30:	f006 ba3c 	b.w	17eac <z_impl_k_sem_give>
   11a34:	bd38      	pop	{r3, r4, r5, pc}
   11a36:	bf00      	nop
   11a38:	20000490 	.word	0x20000490

00011a3c <bt_hci_cmd_state_set_init>:
{
   11a3c:	b510      	push	{r4, lr}
	state->bit = bit;
   11a3e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   11a42:	f89d 3008 	ldrb.w	r3, [sp, #8]
   11a46:	720b      	strb	r3, [r1, #8]
{
   11a48:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   11a4a:	f003 fa6f 	bl	14f2c <net_buf_id>
   11a4e:	4b03      	ldr	r3, [pc, #12]	; (11a5c <bt_hci_cmd_state_set_init+0x20>)
   11a50:	220c      	movs	r2, #12
   11a52:	fb02 3300 	mla	r3, r2, r0, r3
   11a56:	605c      	str	r4, [r3, #4]
}
   11a58:	bd10      	pop	{r4, pc}
   11a5a:	bf00      	nop
   11a5c:	20001bb4 	.word	0x20001bb4

00011a60 <bt_hci_cmd_create>:
{
   11a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   11a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11a6c:	4606      	mov	r6, r0
   11a6e:	4817      	ldr	r0, [pc, #92]	; (11acc <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   11a70:	4d17      	ldr	r5, [pc, #92]	; (11ad0 <bt_hci_cmd_create+0x70>)
{
   11a72:	460f      	mov	r7, r1
   11a74:	f00a f9d2 	bl	1be1c <net_buf_alloc_fixed>
   11a78:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   11a7a:	f100 0a08 	add.w	sl, r0, #8
   11a7e:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11a80:	f04f 0800 	mov.w	r8, #0
   11a84:	4650      	mov	r0, sl
   11a86:	f00a f9e8 	bl	1be5a <net_buf_simple_reserve>
   11a8a:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   11a8e:	4620      	mov	r0, r4
   11a90:	f003 fa4c 	bl	14f2c <net_buf_id>
   11a94:	f04f 090c 	mov.w	r9, #12
   11a98:	fb09 5000 	mla	r0, r9, r0, r5
   11a9c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   11a9e:	4620      	mov	r0, r4
   11aa0:	f003 fa44 	bl	14f2c <net_buf_id>
   11aa4:	fb09 5000 	mla	r0, r9, r0, r5
   11aa8:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   11aac:	4620      	mov	r0, r4
   11aae:	f003 fa3d 	bl	14f2c <net_buf_id>
   11ab2:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   11ab6:	2103      	movs	r1, #3
   11ab8:	f8c5 8004 	str.w	r8, [r5, #4]
   11abc:	4650      	mov	r0, sl
   11abe:	f00a fa4d 	bl	1bf5c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   11ac2:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   11ac4:	7087      	strb	r7, [r0, #2]
}
   11ac6:	4620      	mov	r0, r4
   11ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11acc:	20000844 	.word	0x20000844
   11ad0:	20001bb4 	.word	0x20001bb4

00011ad4 <bt_hci_cmd_send_sync>:
{
   11ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ad6:	4615      	mov	r5, r2
   11ad8:	b087      	sub	sp, #28
	if (!buf) {
   11ada:	460c      	mov	r4, r1
   11adc:	b921      	cbnz	r1, 11ae8 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   11ade:	f7ff ffbf 	bl	11a60 <bt_hci_cmd_create>
		if (!buf) {
   11ae2:	4604      	mov	r4, r0
   11ae4:	2800      	cmp	r0, #0
   11ae6:	d047      	beq.n	11b78 <bt_hci_cmd_send_sync+0xa4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   11ae8:	2201      	movs	r2, #1
   11aea:	2100      	movs	r1, #0
   11aec:	4668      	mov	r0, sp
   11aee:	f00a ff57 	bl	1c9a0 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   11af2:	4620      	mov	r0, r4
   11af4:	f003 fa1a 	bl	14f2c <net_buf_id>
   11af8:	4f21      	ldr	r7, [pc, #132]	; (11b80 <bt_hci_cmd_send_sync+0xac>)
   11afa:	230c      	movs	r3, #12
   11afc:	fb03 7000 	mla	r0, r3, r0, r7
   11b00:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   11b04:	4620      	mov	r0, r4
   11b06:	f00a fa03 	bl	1bf10 <net_buf_ref>
   11b0a:	4601      	mov	r1, r0
   11b0c:	481d      	ldr	r0, [pc, #116]	; (11b84 <bt_hci_cmd_send_sync+0xb0>)
   11b0e:	f00a f9f2 	bl	1bef6 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   11b12:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   11b16:	2300      	movs	r3, #0
   11b18:	4668      	mov	r0, sp
   11b1a:	f006 f9ed 	bl	17ef8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   11b1e:	4606      	mov	r6, r0
   11b20:	b180      	cbz	r0, 11b44 <bt_hci_cmd_send_sync+0x70>
   11b22:	4a19      	ldr	r2, [pc, #100]	; (11b88 <bt_hci_cmd_send_sync+0xb4>)
   11b24:	4919      	ldr	r1, [pc, #100]	; (11b8c <bt_hci_cmd_send_sync+0xb8>)
   11b26:	481a      	ldr	r0, [pc, #104]	; (11b90 <bt_hci_cmd_send_sync+0xbc>)
   11b28:	f240 1349 	movw	r3, #329	; 0x149
   11b2c:	f008 f867 	bl	19bfe <assert_print>
   11b30:	4818      	ldr	r0, [pc, #96]	; (11b94 <bt_hci_cmd_send_sync+0xc0>)
   11b32:	4631      	mov	r1, r6
   11b34:	f008 f863 	bl	19bfe <assert_print>
   11b38:	4040      	eors	r0, r0
   11b3a:	f380 8811 	msr	BASEPRI, r0
   11b3e:	f04f 0003 	mov.w	r0, #3
   11b42:	df02      	svc	2
	status = cmd(buf)->status;
   11b44:	4620      	mov	r0, r4
   11b46:	f003 f9f1 	bl	14f2c <net_buf_id>
   11b4a:	230c      	movs	r3, #12
   11b4c:	4358      	muls	r0, r3
   11b4e:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
   11b50:	b156      	cbz	r6, 11b68 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   11b52:	4620      	mov	r0, r4
   11b54:	f003 faa4 	bl	150a0 <net_buf_unref>
			return -ECONNREFUSED;
   11b58:	2e09      	cmp	r6, #9
   11b5a:	bf14      	ite	ne
   11b5c:	f06f 0004 	mvnne.w	r0, #4
   11b60:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   11b64:	b007      	add	sp, #28
   11b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   11b68:	b115      	cbz	r5, 11b70 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   11b6a:	602c      	str	r4, [r5, #0]
	return 0;
   11b6c:	2000      	movs	r0, #0
   11b6e:	e7f9      	b.n	11b64 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   11b70:	4620      	mov	r0, r4
   11b72:	f003 fa95 	bl	150a0 <net_buf_unref>
   11b76:	e7f9      	b.n	11b6c <bt_hci_cmd_send_sync+0x98>
			return -ENOBUFS;
   11b78:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11b7c:	e7f2      	b.n	11b64 <bt_hci_cmd_send_sync+0x90>
   11b7e:	bf00      	nop
   11b80:	20001bb4 	.word	0x20001bb4
   11b84:	200004b4 	.word	0x200004b4
   11b88:	0001dbe8 	.word	0x0001dbe8
   11b8c:	0001dc80 	.word	0x0001dc80
   11b90:	0001dc35 	.word	0x0001dc35
   11b94:	0001dc89 	.word	0x0001dc89

00011b98 <bt_hci_le_rand>:
{
   11b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   11b9a:	4b14      	ldr	r3, [pc, #80]	; (11bec <bt_hci_le_rand+0x54>)
   11b9c:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   11ba0:	2b00      	cmp	r3, #0
{
   11ba2:	4605      	mov	r5, r0
   11ba4:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   11ba6:	da1d      	bge.n	11be4 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   11ba8:	b914      	cbnz	r4, 11bb0 <bt_hci_le_rand+0x18>
	return 0;
   11baa:	4620      	mov	r0, r4
}
   11bac:	b003      	add	sp, #12
   11bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   11bb0:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   11bb2:	aa01      	add	r2, sp, #4
   11bb4:	f04f 0100 	mov.w	r1, #0
   11bb8:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   11bbc:	4626      	mov	r6, r4
   11bbe:	bf28      	it	cs
   11bc0:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   11bc2:	f7ff ff87 	bl	11ad4 <bt_hci_cmd_send_sync>
		if (err) {
   11bc6:	2800      	cmp	r0, #0
   11bc8:	d1f0      	bne.n	11bac <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   11bca:	9f01      	ldr	r7, [sp, #4]
   11bcc:	68b9      	ldr	r1, [r7, #8]
   11bce:	4632      	mov	r2, r6
   11bd0:	3101      	adds	r1, #1
   11bd2:	4628      	mov	r0, r5
   11bd4:	f00b fb05 	bl	1d1e2 <memcpy>
		net_buf_unref(rsp);
   11bd8:	4638      	mov	r0, r7
   11bda:	f003 fa61 	bl	150a0 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   11bde:	4435      	add	r5, r6
		len -= count;
   11be0:	1ba4      	subs	r4, r4, r6
   11be2:	e7e1      	b.n	11ba8 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   11be4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   11be8:	e7e0      	b.n	11bac <bt_hci_le_rand+0x14>
   11bea:	bf00      	nop
   11bec:	20000378 	.word	0x20000378

00011bf0 <bt_hci_le_enh_conn_complete>:
{
   11bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11bf4:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   11bf8:	4a7c      	ldr	r2, [pc, #496]	; (11dec <bt_hci_le_enh_conn_complete+0x1fc>)
	if (evt->status) {
   11bfa:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   11bfc:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   11bfe:	ea6f 5307 	mvn.w	r3, r7, lsl #20
   11c02:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   11c06:	b29b      	uxth	r3, r3
   11c08:	4299      	cmp	r1, r3
   11c0a:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   11c0e:	bf08      	it	eq
   11c10:	8016      	strheq	r6, [r2, #0]
{
   11c12:	b089      	sub	sp, #36	; 0x24
   11c14:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11c16:	fa1f f887 	uxth.w	r8, r7
			return true;
   11c1a:	bf08      	it	eq
   11c1c:	2601      	moveq	r6, #1
	if (evt->status) {
   11c1e:	b1bc      	cbz	r4, 11c50 <bt_hci_le_enh_conn_complete+0x60>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11c20:	2c3c      	cmp	r4, #60	; 0x3c
   11c22:	d134      	bne.n	11c8e <bt_hci_le_enh_conn_complete+0x9e>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   11c24:	f000 ff0a 	bl	12a3c <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11c28:	f06f 0180 	mvn.w	r1, #128	; 0x80
   11c2c:	3010      	adds	r0, #16
   11c2e:	f008 fb76 	bl	1a31e <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   11c32:	2000      	movs	r0, #0
   11c34:	f7ff fdc4 	bl	117c0 <find_pending_connect.part.0>
		if (!conn) {
   11c38:	4605      	mov	r5, r0
   11c3a:	b340      	cbz	r0, 11c8e <bt_hci_le_enh_conn_complete+0x9e>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   11c3c:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11c3e:	2100      	movs	r1, #0
   11c40:	f001 fa9a 	bl	13178 <bt_conn_set_state>
		bt_conn_unref(conn);
   11c44:	4628      	mov	r0, r5
}
   11c46:	b009      	add	sp, #36	; 0x24
   11c48:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   11c4c:	f008 bf09 	b.w	1aa62 <bt_conn_unref>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   11c50:	7903      	ldrb	r3, [r0, #4]
   11c52:	3b02      	subs	r3, #2
   11c54:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   11c56:	f100 0904 	add.w	r9, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   11c5a:	d81b      	bhi.n	11c94 <bt_hci_le_enh_conn_complete+0xa4>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   11c5c:	4649      	mov	r1, r9
   11c5e:	a806      	add	r0, sp, #24
   11c60:	f008 fb22 	bl	1a2a8 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   11c64:	f89d 3018 	ldrb.w	r3, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   11c68:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   11c6c:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   11c6e:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   11c72:	f88d 3018 	strb.w	r3, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   11c76:	f008 fb12 	bl	1a29e <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   11c7a:	2301      	movs	r3, #1
   11c7c:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   11c80:	78eb      	ldrb	r3, [r5, #3]
   11c82:	2b01      	cmp	r3, #1
   11c84:	d019      	beq.n	11cba <bt_hci_le_enh_conn_complete+0xca>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   11c86:	211f      	movs	r1, #31
   11c88:	4640      	mov	r0, r8
   11c8a:	f008 fbce 	bl	1a42a <bt_hci_disconnect>
}
   11c8e:	b009      	add	sp, #36	; 0x24
   11c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   11c94:	78c3      	ldrb	r3, [r0, #3]
   11c96:	2b01      	cmp	r3, #1
   11c98:	bf04      	itt	eq
   11c9a:	4b55      	ldreq	r3, [pc, #340]	; (11df0 <bt_hci_le_enh_conn_complete+0x200>)
   11c9c:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   11ca0:	4649      	mov	r1, r9
   11ca2:	4620      	mov	r0, r4
   11ca4:	f008 fccb 	bl	1a63e <bt_lookup_id_addr>
   11ca8:	4601      	mov	r1, r0
   11caa:	a806      	add	r0, sp, #24
   11cac:	f008 fafc 	bl	1a2a8 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   11cb0:	4649      	mov	r1, r9
   11cb2:	a804      	add	r0, sp, #16
   11cb4:	f008 faf8 	bl	1a2a8 <bt_addr_le_copy>
   11cb8:	e7e2      	b.n	11c80 <bt_hci_le_enh_conn_complete+0x90>
   11cba:	a806      	add	r0, sp, #24
   11cbc:	f7ff fd80 	bl	117c0 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11cc0:	78eb      	ldrb	r3, [r5, #3]
   11cc2:	2b01      	cmp	r3, #1
   11cc4:	4604      	mov	r4, r0
   11cc6:	d10a      	bne.n	11cde <bt_hci_le_enh_conn_complete+0xee>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   11cc8:	f000 feb8 	bl	12a3c <bt_le_adv_lookup_legacy>
   11ccc:	f06f 0180 	mvn.w	r1, #128	; 0x80
   11cd0:	4681      	mov	r9, r0
   11cd2:	3010      	adds	r0, #16
   11cd4:	f008 fb23 	bl	1a31e <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   11cd8:	4648      	mov	r0, r9
   11cda:	f008 fe25 	bl	1a928 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   11cde:	2c00      	cmp	r4, #0
   11ce0:	d0d1      	beq.n	11c86 <bt_hci_le_enh_conn_complete+0x96>
	conn->handle = handle;
   11ce2:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   11ce4:	a906      	add	r1, sp, #24
	conn->handle = handle;
   11ce6:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   11cea:	f008 fadd 	bl	1a2a8 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   11cee:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   11cf2:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   11cf6:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   11cfa:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   11cfe:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   11d02:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   11d06:	78eb      	ldrb	r3, [r5, #3]
   11d08:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   11d0a:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11d0c:	2b01      	cmp	r3, #1
	conn->err = 0U;
   11d0e:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11d10:	d115      	bne.n	11d3e <bt_hci_le_enh_conn_complete+0x14e>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   11d12:	a904      	add	r1, sp, #16
   11d14:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   11d18:	f008 fac6 	bl	1a2a8 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   11d1c:	f000 fe8e 	bl	12a3c <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   11d20:	7a21      	ldrb	r1, [r4, #8]
   11d22:	4a33      	ldr	r2, [pc, #204]	; (11df0 <bt_hci_le_enh_conn_complete+0x200>)
   11d24:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   11d28:	4411      	add	r1, r2
   11d2a:	f104 0096 	add.w	r0, r4, #150	; 0x96
   11d2e:	f008 fabb 	bl	1a2a8 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   11d32:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   11d36:	065d      	lsls	r5, r3, #25
   11d38:	d501      	bpl.n	11d3e <bt_hci_le_enh_conn_complete+0x14e>
			bt_le_adv_resume();
   11d3a:	f001 f81f 	bl	12d7c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   11d3e:	2107      	movs	r1, #7
   11d40:	4620      	mov	r0, r4
   11d42:	f001 fa19 	bl	13178 <bt_conn_set_state>
	if (is_disconnected) {
   11d46:	b11e      	cbz	r6, 11d50 <bt_hci_le_enh_conn_complete+0x160>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   11d48:	2101      	movs	r1, #1
   11d4a:	4620      	mov	r0, r4
   11d4c:	f001 fa14 	bl	13178 <bt_conn_set_state>
	bt_conn_connected(conn);
   11d50:	4620      	mov	r0, r4
   11d52:	f008 fec4 	bl	1aade <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   11d56:	7aa3      	ldrb	r3, [r4, #10]
   11d58:	2b07      	cmp	r3, #7
   11d5a:	d142      	bne.n	11de2 <bt_hci_le_enh_conn_complete+0x1f2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11d5c:	f3bf 8f5b 	dmb	ish
   11d60:	6863      	ldr	r3, [r4, #4]
   11d62:	4e23      	ldr	r6, [pc, #140]	; (11df0 <bt_hci_le_enh_conn_complete+0x200>)
   11d64:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   11d68:	f413 6f00 	tst.w	r3, #2048	; 0x800
   11d6c:	d118      	bne.n	11da0 <bt_hci_le_enh_conn_complete+0x1b0>
   11d6e:	78e3      	ldrb	r3, [r4, #3]
   11d70:	b11b      	cbz	r3, 11d7a <bt_hci_le_enh_conn_complete+0x18a>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   11d72:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   11d76:	0718      	lsls	r0, r3, #28
   11d78:	d512      	bpl.n	11da0 <bt_hci_le_enh_conn_complete+0x1b0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   11d7a:	2102      	movs	r1, #2
   11d7c:	f242 0016 	movw	r0, #8214	; 0x2016
   11d80:	f7ff fe6e 	bl	11a60 <bt_hci_cmd_create>
	if (!buf) {
   11d84:	4605      	mov	r5, r0
   11d86:	b158      	cbz	r0, 11da0 <bt_hci_le_enh_conn_complete+0x1b0>
   11d88:	2102      	movs	r1, #2
   11d8a:	3008      	adds	r0, #8
   11d8c:	f00a f8e6 	bl	1bf5c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   11d90:	8823      	ldrh	r3, [r4, #0]
   11d92:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   11d94:	2200      	movs	r2, #0
   11d96:	4629      	mov	r1, r5
   11d98:	f242 0016 	movw	r0, #8214	; 0x2016
   11d9c:	f7ff fe9a 	bl	11ad4 <bt_hci_cmd_send_sync>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   11da0:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   11da4:	07d9      	lsls	r1, r3, #31
   11da6:	d506      	bpl.n	11db6 <bt_hci_le_enh_conn_complete+0x1c6>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   11da8:	2100      	movs	r1, #0
   11daa:	2302      	movs	r3, #2
   11dac:	9100      	str	r1, [sp, #0]
   11dae:	461a      	mov	r2, r3
   11db0:	4620      	mov	r0, r4
   11db2:	f008 fb73 	bl	1a49c <bt_le_set_phy>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   11db6:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   11dba:	069a      	lsls	r2, r3, #26
   11dbc:	d511      	bpl.n	11de2 <bt_hci_le_enh_conn_complete+0x1f2>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   11dbe:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   11dc2:	689b      	ldr	r3, [r3, #8]
   11dc4:	079b      	lsls	r3, r3, #30
   11dc6:	d50c      	bpl.n	11de2 <bt_hci_le_enh_conn_complete+0x1f2>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   11dc8:	f10d 010e 	add.w	r1, sp, #14
   11dcc:	a803      	add	r0, sp, #12
   11dce:	f008 fb14 	bl	1a3fa <hci_le_read_max_data_len>
			if (!err) {
   11dd2:	b930      	cbnz	r0, 11de2 <bt_hci_le_enh_conn_complete+0x1f2>
				err = bt_le_set_data_len(conn,
   11dd4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   11dd8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   11ddc:	4620      	mov	r0, r4
   11dde:	f008 fb3f 	bl	1a460 <bt_le_set_data_len>
	bt_conn_unref(conn);
   11de2:	4620      	mov	r0, r4
   11de4:	f008 fe3d 	bl	1aa62 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11de8:	e751      	b.n	11c8e <bt_hci_le_enh_conn_complete+0x9e>
   11dea:	bf00      	nop
   11dec:	20001f10 	.word	0x20001f10
   11df0:	20000378 	.word	0x20000378

00011df4 <le_legacy_conn_complete>:
{
   11df4:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   11df6:	6881      	ldr	r1, [r0, #8]
{
   11df8:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   11dfa:	780b      	ldrb	r3, [r1, #0]
   11dfc:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   11e00:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   11e04:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   11e08:	78cb      	ldrb	r3, [r1, #3]
   11e0a:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   11e0e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   11e12:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   11e16:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   11e1a:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   11e1e:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   11e22:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   11e26:	7c4b      	ldrb	r3, [r1, #17]
   11e28:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   11e2c:	a801      	add	r0, sp, #4
   11e2e:	3104      	adds	r1, #4
   11e30:	f008 fa3a 	bl	1a2a8 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   11e34:	4907      	ldr	r1, [pc, #28]	; (11e54 <le_legacy_conn_complete+0x60>)
   11e36:	f10d 000b 	add.w	r0, sp, #11
   11e3a:	f008 fa30 	bl	1a29e <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   11e3e:	f10d 0011 	add.w	r0, sp, #17
   11e42:	f008 fa2c 	bl	1a29e <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   11e46:	4668      	mov	r0, sp
   11e48:	f7ff fed2 	bl	11bf0 <bt_hci_le_enh_conn_complete>
}
   11e4c:	b009      	add	sp, #36	; 0x24
   11e4e:	f85d fb04 	ldr.w	pc, [sp], #4
   11e52:	bf00      	nop
   11e54:	0001dbc8 	.word	0x0001dbc8

00011e58 <bt_send>:
	return bt_dev.drv->send(buf);
   11e58:	4b02      	ldr	r3, [pc, #8]	; (11e64 <bt_send+0xc>)
   11e5a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   11e5e:	695b      	ldr	r3, [r3, #20]
   11e60:	4718      	bx	r3
   11e62:	bf00      	nop
   11e64:	20000378 	.word	0x20000378

00011e68 <bt_hci_cmd_send>:
{
   11e68:	b538      	push	{r3, r4, r5, lr}
   11e6a:	4605      	mov	r5, r0
	if (!buf) {
   11e6c:	460c      	mov	r4, r1
   11e6e:	b919      	cbnz	r1, 11e78 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   11e70:	f7ff fdf6 	bl	11a60 <bt_hci_cmd_create>
		if (!buf) {
   11e74:	4604      	mov	r4, r0
   11e76:	b198      	cbz	r0, 11ea0 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   11e78:	f640 4335 	movw	r3, #3125	; 0xc35
   11e7c:	429d      	cmp	r5, r3
   11e7e:	d109      	bne.n	11e94 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
   11e80:	4620      	mov	r0, r4
   11e82:	f7ff ffe9 	bl	11e58 <bt_send>
		if (err) {
   11e86:	4605      	mov	r5, r0
   11e88:	b140      	cbz	r0, 11e9c <bt_hci_cmd_send+0x34>
			net_buf_unref(buf);
   11e8a:	4620      	mov	r0, r4
   11e8c:	f003 f908 	bl	150a0 <net_buf_unref>
}
   11e90:	4628      	mov	r0, r5
   11e92:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   11e94:	4804      	ldr	r0, [pc, #16]	; (11ea8 <bt_hci_cmd_send+0x40>)
   11e96:	4621      	mov	r1, r4
   11e98:	f00a f82d 	bl	1bef6 <net_buf_put>
	return 0;
   11e9c:	2500      	movs	r5, #0
   11e9e:	e7f7      	b.n	11e90 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   11ea0:	f06f 0568 	mvn.w	r5, #104	; 0x68
   11ea4:	e7f4      	b.n	11e90 <bt_hci_cmd_send+0x28>
   11ea6:	bf00      	nop
   11ea8:	200004b4 	.word	0x200004b4

00011eac <hci_tx_thread>:
{
   11eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   11eb0:	4f3c      	ldr	r7, [pc, #240]	; (11fa4 <hci_tx_thread+0xf8>)
		BT_ASSERT(err == 0);
   11eb2:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 11fa8 <hci_tx_thread+0xfc>
			ev_count += bt_conn_prepare_events(&events[1]);
   11eb6:	f107 0914 	add.w	r9, r7, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   11eba:	68fb      	ldr	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   11ebc:	4648      	mov	r0, r9
		events[0].state = K_POLL_STATE_NOT_READY;
   11ebe:	f36f 3394 	bfc	r3, #14, #7
   11ec2:	60fb      	str	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   11ec4:	f001 f90e 	bl	130e4 <bt_conn_prepare_events>
   11ec8:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   11eca:	4836      	ldr	r0, [pc, #216]	; (11fa4 <hci_tx_thread+0xf8>)
   11ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11ed4:	4629      	mov	r1, r5
   11ed6:	f006 ff6b 	bl	18db0 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   11eda:	b160      	cbz	r0, 11ef6 <hci_tx_thread+0x4a>
   11edc:	4933      	ldr	r1, [pc, #204]	; (11fac <hci_tx_thread+0x100>)
   11ede:	4834      	ldr	r0, [pc, #208]	; (11fb0 <hci_tx_thread+0x104>)
   11ee0:	f640 13da 	movw	r3, #2522	; 0x9da
   11ee4:	4642      	mov	r2, r8
   11ee6:	f007 fe8a 	bl	19bfe <assert_print>
   11eea:	4040      	eors	r0, r0
   11eec:	f380 8811 	msr	BASEPRI, r0
   11ef0:	f04f 0003 	mov.w	r0, #3
   11ef4:	df02      	svc	2
{
   11ef6:	4e2b      	ldr	r6, [pc, #172]	; (11fa4 <hci_tx_thread+0xf8>)
	for (; count; ev++, count--) {
   11ef8:	b915      	cbnz	r5, 11f00 <hci_tx_thread+0x54>
	z_impl_k_yield();
   11efa:	f006 fc35 	bl	18768 <z_impl_k_yield>
	while (1) {
   11efe:	e7dc      	b.n	11eba <hci_tx_thread+0xe>
		switch (ev->state) {
   11f00:	68f3      	ldr	r3, [r6, #12]
   11f02:	f3c3 3386 	ubfx	r3, r3, #14, #7
   11f06:	2b04      	cmp	r3, #4
   11f08:	d142      	bne.n	11f90 <hci_tx_thread+0xe4>
			if (ev->tag == BT_EVENT_CMD_TX) {
   11f0a:	7b33      	ldrb	r3, [r6, #12]
   11f0c:	2b00      	cmp	r3, #0
   11f0e:	d142      	bne.n	11f96 <hci_tx_thread+0xea>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   11f10:	4828      	ldr	r0, [pc, #160]	; (11fb4 <hci_tx_thread+0x108>)
   11f12:	2200      	movs	r2, #0
   11f14:	2300      	movs	r3, #0
   11f16:	f009 ff86 	bl	1be26 <net_buf_get>
	BT_ASSERT(buf);
   11f1a:	4604      	mov	r4, r0
   11f1c:	b960      	cbnz	r0, 11f38 <hci_tx_thread+0x8c>
   11f1e:	4926      	ldr	r1, [pc, #152]	; (11fb8 <hci_tx_thread+0x10c>)
   11f20:	4823      	ldr	r0, [pc, #140]	; (11fb0 <hci_tx_thread+0x104>)
   11f22:	f640 1373 	movw	r3, #2419	; 0x973
   11f26:	4642      	mov	r2, r8
   11f28:	f007 fe69 	bl	19bfe <assert_print>
   11f2c:	4040      	eors	r0, r0
   11f2e:	f380 8811 	msr	BASEPRI, r0
   11f32:	f04f 0003 	mov.w	r0, #3
   11f36:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   11f38:	f8df a080 	ldr.w	sl, [pc, #128]	; 11fbc <hci_tx_thread+0x110>
	return z_impl_k_sem_take(sem, timeout);
   11f3c:	4820      	ldr	r0, [pc, #128]	; (11fc0 <hci_tx_thread+0x114>)
   11f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11f46:	f005 ffd7 	bl	17ef8 <z_impl_k_sem_take>
   11f4a:	f8da 0130 	ldr.w	r0, [sl, #304]	; 0x130
   11f4e:	b120      	cbz	r0, 11f5a <hci_tx_thread+0xae>
		net_buf_unref(bt_dev.sent_cmd);
   11f50:	f003 f8a6 	bl	150a0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   11f54:	2300      	movs	r3, #0
   11f56:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   11f5a:	4620      	mov	r0, r4
   11f5c:	f009 ffd8 	bl	1bf10 <net_buf_ref>
   11f60:	f8ca 0130 	str.w	r0, [sl, #304]	; 0x130
	err = bt_send(buf);
   11f64:	4620      	mov	r0, r4
   11f66:	f7ff ff77 	bl	11e58 <bt_send>
	if (err) {
   11f6a:	b188      	cbz	r0, 11f90 <hci_tx_thread+0xe4>
	z_impl_k_sem_give(sem);
   11f6c:	4814      	ldr	r0, [pc, #80]	; (11fc0 <hci_tx_thread+0x114>)
   11f6e:	f005 ff9d 	bl	17eac <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   11f72:	4620      	mov	r0, r4
   11f74:	f002 ffda 	bl	14f2c <net_buf_id>
   11f78:	4b12      	ldr	r3, [pc, #72]	; (11fc4 <hci_tx_thread+0x118>)
   11f7a:	220c      	movs	r2, #12
   11f7c:	fb02 3000 	mla	r0, r2, r0, r3
   11f80:	211f      	movs	r1, #31
   11f82:	8840      	ldrh	r0, [r0, #2]
   11f84:	4622      	mov	r2, r4
   11f86:	f7ff fccd 	bl	11924 <hci_cmd_done>
		net_buf_unref(buf);
   11f8a:	4620      	mov	r0, r4
   11f8c:	f003 f888 	bl	150a0 <net_buf_unref>
	for (; count; ev++, count--) {
   11f90:	3614      	adds	r6, #20
   11f92:	3d01      	subs	r5, #1
   11f94:	e7b0      	b.n	11ef8 <hci_tx_thread+0x4c>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   11f96:	2b01      	cmp	r3, #1
   11f98:	d1fa      	bne.n	11f90 <hci_tx_thread+0xe4>
					conn = CONTAINER_OF(ev->fifo,
   11f9a:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   11f9c:	3838      	subs	r0, #56	; 0x38
   11f9e:	f001 fb6d 	bl	1367c <bt_conn_process_tx>
   11fa2:	e7f5      	b.n	11f90 <hci_tx_thread+0xe4>
   11fa4:	20000580 	.word	0x20000580
   11fa8:	0001dbe8 	.word	0x0001dbe8
   11fac:	0001dc80 	.word	0x0001dc80
   11fb0:	0001dc35 	.word	0x0001dc35
   11fb4:	200004b4 	.word	0x200004b4
   11fb8:	0001dca9 	.word	0x0001dca9
   11fbc:	20000378 	.word	0x20000378
   11fc0:	20000490 	.word	0x20000490
   11fc4:	20001bb4 	.word	0x20001bb4

00011fc8 <hci_event_prio>:
{
   11fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11fcc:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   11fce:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   11fd2:	4630      	mov	r0, r6
   11fd4:	f009 fff9 	bl	1bfca <net_buf_simple_headroom>
	state->len = buf->len;
   11fd8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   11fdc:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   11fe0:	4605      	mov	r5, r0
   11fe2:	d80c      	bhi.n	11ffe <hci_event_prio+0x36>
   11fe4:	4a1c      	ldr	r2, [pc, #112]	; (12058 <hci_event_prio+0x90>)
   11fe6:	491d      	ldr	r1, [pc, #116]	; (1205c <hci_event_prio+0x94>)
   11fe8:	481d      	ldr	r0, [pc, #116]	; (12060 <hci_event_prio+0x98>)
   11fea:	f640 5377 	movw	r3, #3447	; 0xd77
   11fee:	f007 fe06 	bl	19bfe <assert_print>
   11ff2:	4040      	eors	r0, r0
   11ff4:	f380 8811 	msr	BASEPRI, r0
   11ff8:	f04f 0003 	mov.w	r0, #3
   11ffc:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   11ffe:	4630      	mov	r0, r6
   12000:	2102      	movs	r1, #2
   12002:	f009 ffd2 	bl	1bfaa <net_buf_simple_pull_mem>
   12006:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12008:	7800      	ldrb	r0, [r0, #0]
   1200a:	f008 f8bf 	bl	1a18c <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1200e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12010:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   12012:	d40c      	bmi.n	1202e <hci_event_prio+0x66>
   12014:	4a10      	ldr	r2, [pc, #64]	; (12058 <hci_event_prio+0x90>)
   12016:	4913      	ldr	r1, [pc, #76]	; (12064 <hci_event_prio+0x9c>)
   12018:	4811      	ldr	r0, [pc, #68]	; (12060 <hci_event_prio+0x98>)
   1201a:	f640 537b 	movw	r3, #3451	; 0xd7b
   1201e:	f007 fdee 	bl	19bfe <assert_print>
   12022:	4040      	eors	r0, r0
   12024:	f380 8811 	msr	BASEPRI, r0
   12028:	f04f 0003 	mov.w	r0, #3
   1202c:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
   1202e:	2305      	movs	r3, #5
   12030:	4a0d      	ldr	r2, [pc, #52]	; (12068 <hci_event_prio+0xa0>)
   12032:	7838      	ldrb	r0, [r7, #0]
   12034:	4621      	mov	r1, r4
   12036:	f008 f95b 	bl	1a2f0 <handle_event_common.isra.0>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1203a:	07b3      	lsls	r3, r6, #30
   1203c:	d507      	bpl.n	1204e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   1203e:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   12040:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   12044:	fa13 f585 	uxtah	r5, r3, r5
   12048:	60a5      	str	r5, [r4, #8]
}
   1204a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1204e:	4620      	mov	r0, r4
}
   12050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   12054:	f003 b824 	b.w	150a0 <net_buf_unref>
   12058:	0001dbe8 	.word	0x0001dbe8
   1205c:	0001dc1c 	.word	0x0001dc1c
   12060:	0001dc35 	.word	0x0001dc35
   12064:	0001dcad 	.word	0x0001dcad
   12068:	0001d594 	.word	0x0001d594

0001206c <bt_recv>:
{
   1206c:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1206e:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   12070:	2b01      	cmp	r3, #1
{
   12072:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   12074:	d00a      	beq.n	1208c <bt_recv+0x20>
   12076:	2b03      	cmp	r3, #3
   12078:	d116      	bne.n	120a8 <bt_recv+0x3c>
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   1207a:	4621      	mov	r1, r4
   1207c:	480d      	ldr	r0, [pc, #52]	; (120b4 <bt_recv+0x48>)
   1207e:	f009 fef0 	bl	1be62 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   12082:	490d      	ldr	r1, [pc, #52]	; (120b8 <bt_recv+0x4c>)
   12084:	480d      	ldr	r0, [pc, #52]	; (120bc <bt_recv+0x50>)
   12086:	f00a fd34 	bl	1caf2 <k_work_submit_to_queue>
}
   1208a:	e00b      	b.n	120a4 <bt_recv+0x38>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1208c:	6883      	ldr	r3, [r0, #8]
   1208e:	7818      	ldrb	r0, [r3, #0]
   12090:	f008 f87c 	bl	1a18c <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   12094:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12096:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   12098:	d502      	bpl.n	120a0 <bt_recv+0x34>
			hci_event_prio(buf);
   1209a:	4620      	mov	r0, r4
   1209c:	f7ff ff94 	bl	11fc8 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   120a0:	07ab      	lsls	r3, r5, #30
   120a2:	d4ea      	bmi.n	1207a <bt_recv+0xe>
		return 0;
   120a4:	2000      	movs	r0, #0
}
   120a6:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   120a8:	f002 fffa 	bl	150a0 <net_buf_unref>
		return -EINVAL;
   120ac:	f06f 0015 	mvn.w	r0, #21
   120b0:	e7f9      	b.n	120a6 <bt_recv+0x3a>
   120b2:	bf00      	nop
   120b4:	200004ac 	.word	0x200004ac
   120b8:	200005bc 	.word	0x200005bc
   120bc:	200016b8 	.word	0x200016b8

000120c0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   120c0:	4a08      	ldr	r2, [pc, #32]	; (120e4 <bt_hci_driver_register+0x24>)
{
   120c2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   120c4:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   120c8:	b930      	cbnz	r0, 120d8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   120ca:	68d9      	ldr	r1, [r3, #12]
   120cc:	b139      	cbz	r1, 120de <bt_hci_driver_register+0x1e>
   120ce:	6959      	ldr	r1, [r3, #20]
   120d0:	b129      	cbz	r1, 120de <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   120d2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   120d6:	4770      	bx	lr
		return -EALREADY;
   120d8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   120dc:	4770      	bx	lr
		return -EINVAL;
   120de:	f06f 0015 	mvn.w	r0, #21
}
   120e2:	4770      	bx	lr
   120e4:	20000378 	.word	0x20000378

000120e8 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   120e8:	4801      	ldr	r0, [pc, #4]	; (120f0 <bt_finalize_init+0x8>)
   120ea:	2104      	movs	r1, #4
   120ec:	f008 b88d 	b.w	1a20a <atomic_or>
   120f0:	20000444 	.word	0x20000444

000120f4 <bt_init>:
{
   120f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   120f6:	4db3      	ldr	r5, [pc, #716]	; (123c4 <bt_init+0x2d0>)
   120f8:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   120fc:	6899      	ldr	r1, [r3, #8]
   120fe:	f011 0101 	ands.w	r1, r1, #1
   12102:	d121      	bne.n	12148 <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   12104:	aa01      	add	r2, sp, #4
   12106:	f640 4003 	movw	r0, #3075	; 0xc03
   1210a:	f7ff fce3 	bl	11ad4 <bt_hci_cmd_send_sync>
		if (err) {
   1210e:	4604      	mov	r4, r0
   12110:	2800      	cmp	r0, #0
   12112:	d167      	bne.n	121e4 <bt_init+0xf0>
		hci_reset_complete(rsp);
   12114:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
   12116:	6883      	ldr	r3, [r0, #8]
	if (status) {
   12118:	781b      	ldrb	r3, [r3, #0]
   1211a:	b99b      	cbnz	r3, 12144 <bt_init+0x50>
   1211c:	f3bf 8f5b 	dmb	ish
   12120:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   12124:	f3bf 8f5b 	dmb	ish
   12128:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1212c:	f003 0309 	and.w	r3, r3, #9
   12130:	f3bf 8f5b 	dmb	ish
   12134:	e852 1f00 	ldrex	r1, [r2]
   12138:	e842 3400 	strex	r4, r3, [r2]
   1213c:	2c00      	cmp	r4, #0
   1213e:	d1f9      	bne.n	12134 <bt_init+0x40>
   12140:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   12144:	f002 ffac 	bl	150a0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   12148:	aa01      	add	r2, sp, #4
   1214a:	2100      	movs	r1, #0
   1214c:	f241 0003 	movw	r0, #4099	; 0x1003
   12150:	f7ff fcc0 	bl	11ad4 <bt_hci_cmd_send_sync>
	if (err) {
   12154:	4604      	mov	r4, r0
   12156:	2800      	cmp	r0, #0
   12158:	d144      	bne.n	121e4 <bt_init+0xf0>
	read_local_features_complete(rsp);
   1215a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   1215c:	4e9a      	ldr	r6, [pc, #616]	; (123c8 <bt_init+0x2d4>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   1215e:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   12160:	f8d2 0001 	ldr.w	r0, [r2, #1]
   12164:	f8d2 1005 	ldr.w	r1, [r2, #5]
   12168:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   1216a:	4618      	mov	r0, r3
   1216c:	f002 ff98 	bl	150a0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   12170:	4621      	mov	r1, r4
   12172:	aa01      	add	r2, sp, #4
   12174:	f241 0001 	movw	r0, #4097	; 0x1001
   12178:	f7ff fcac 	bl	11ad4 <bt_hci_cmd_send_sync>
	if (err) {
   1217c:	4604      	mov	r4, r0
   1217e:	bb88      	cbnz	r0, 121e4 <bt_init+0xf0>
	read_local_ver_complete(rsp);
   12180:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   12182:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   12184:	785a      	ldrb	r2, [r3, #1]
   12186:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   1218a:	885a      	ldrh	r2, [r3, #2]
   1218c:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   12190:	791a      	ldrb	r2, [r3, #4]
   12192:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   12196:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   1219a:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1219e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   121a2:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   121a6:	f002 ff7b 	bl	150a0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   121aa:	4621      	mov	r1, r4
   121ac:	aa01      	add	r2, sp, #4
   121ae:	f241 0002 	movw	r0, #4098	; 0x1002
   121b2:	f7ff fc8f 	bl	11ad4 <bt_hci_cmd_send_sync>
	if (err) {
   121b6:	4604      	mov	r4, r0
   121b8:	b9a0      	cbnz	r0, 121e4 <bt_init+0xf0>
	read_supported_commands_complete(rsp);
   121ba:	9f01      	ldr	r7, [sp, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   121bc:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   121be:	1c53      	adds	r3, r2, #1
   121c0:	3241      	adds	r2, #65	; 0x41
   121c2:	6818      	ldr	r0, [r3, #0]
   121c4:	6859      	ldr	r1, [r3, #4]
   121c6:	4634      	mov	r4, r6
   121c8:	c403      	stmia	r4!, {r0, r1}
   121ca:	3308      	adds	r3, #8
   121cc:	4293      	cmp	r3, r2
   121ce:	4626      	mov	r6, r4
   121d0:	d1f7      	bne.n	121c2 <bt_init+0xce>
	net_buf_unref(rsp);
   121d2:	4638      	mov	r0, r7
   121d4:	f002 ff64 	bl	150a0 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   121d8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   121dc:	065e      	lsls	r6, r3, #25
   121de:	d404      	bmi.n	121ea <bt_init+0xf6>
		return -ENODEV;
   121e0:	f06f 0412 	mvn.w	r4, #18
}
   121e4:	4620      	mov	r0, r4
   121e6:	b003      	add	sp, #12
   121e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   121ea:	aa01      	add	r2, sp, #4
   121ec:	2100      	movs	r1, #0
   121ee:	f242 0003 	movw	r0, #8195	; 0x2003
   121f2:	f7ff fc6f 	bl	11ad4 <bt_hci_cmd_send_sync>
	if (err) {
   121f6:	4604      	mov	r4, r0
   121f8:	2800      	cmp	r0, #0
   121fa:	d1f3      	bne.n	121e4 <bt_init+0xf0>
	read_le_features_complete(rsp);
   121fc:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   121fe:	4e73      	ldr	r6, [pc, #460]	; (123cc <bt_init+0x2d8>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   12200:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   12202:	f8d2 0001 	ldr.w	r0, [r2, #1]
   12206:	f8d2 1005 	ldr.w	r1, [r2, #5]
   1220a:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   1220c:	4618      	mov	r0, r3
   1220e:	f002 ff47 	bl	150a0 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   12212:	4621      	mov	r1, r4
   12214:	aa01      	add	r2, sp, #4
   12216:	f242 0002 	movw	r0, #8194	; 0x2002
   1221a:	f7ff fc5b 	bl	11ad4 <bt_hci_cmd_send_sync>
		if (err) {
   1221e:	4604      	mov	r4, r0
   12220:	2800      	cmp	r0, #0
   12222:	d1df      	bne.n	121e4 <bt_init+0xf0>
		le_read_buffer_size_complete(rsp);
   12224:	9c01      	ldr	r4, [sp, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   12226:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   12228:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1222c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   12230:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   12232:	b129      	cbz	r1, 12240 <bt_init+0x14c>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   12234:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   12236:	4611      	mov	r1, r2
   12238:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1223c:	f00a fbb0 	bl	1c9a0 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   12240:	4620      	mov	r0, r4
   12242:	f002 ff2d 	bl	150a0 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   12246:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   1224a:	f016 0620 	ands.w	r6, r6, #32
   1224e:	d118      	bne.n	12282 <bt_init+0x18e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   12250:	2102      	movs	r1, #2
   12252:	f640 406d 	movw	r0, #3181	; 0xc6d
   12256:	f7ff fc03 	bl	11a60 <bt_hci_cmd_create>
		if (!buf) {
   1225a:	4604      	mov	r4, r0
   1225c:	2800      	cmp	r0, #0
   1225e:	f000 80a9 	beq.w	123b4 <bt_init+0x2c0>
	return net_buf_simple_add(&buf->b, len);
   12262:	2102      	movs	r1, #2
   12264:	3008      	adds	r0, #8
   12266:	f009 fe79 	bl	1bf5c <net_buf_simple_add>
		cp_le->le = 0x01;
   1226a:	2301      	movs	r3, #1
   1226c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   1226e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   12270:	4621      	mov	r1, r4
   12272:	4632      	mov	r2, r6
   12274:	f640 406d 	movw	r0, #3181	; 0xc6d
   12278:	f7ff fc2c 	bl	11ad4 <bt_hci_cmd_send_sync>
		if (err) {
   1227c:	4604      	mov	r4, r0
   1227e:	2800      	cmp	r0, #0
   12280:	d1b0      	bne.n	121e4 <bt_init+0xf0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   12282:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   12286:	071c      	lsls	r4, r3, #28
   12288:	d512      	bpl.n	122b0 <bt_init+0x1bc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1228a:	aa01      	add	r2, sp, #4
   1228c:	2100      	movs	r1, #0
   1228e:	f242 001c 	movw	r0, #8220	; 0x201c
   12292:	f7ff fc1f 	bl	11ad4 <bt_hci_cmd_send_sync>
		if (err) {
   12296:	4604      	mov	r4, r0
   12298:	2800      	cmp	r0, #0
   1229a:	d1a3      	bne.n	121e4 <bt_init+0xf0>
		le_read_supp_states_complete(rsp);
   1229c:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1229e:	6883      	ldr	r3, [r0, #8]
   122a0:	f8d3 2001 	ldr.w	r2, [r3, #1]
   122a4:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   122a8:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   122ac:	f002 fef8 	bl	150a0 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   122b0:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   122b4:	0698      	lsls	r0, r3, #26
   122b6:	d523      	bpl.n	12300 <bt_init+0x20c>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   122b8:	f10d 0102 	add.w	r1, sp, #2
   122bc:	4668      	mov	r0, sp
   122be:	f008 f89c 	bl	1a3fa <hci_le_read_max_data_len>
		if (err) {
   122c2:	4604      	mov	r4, r0
   122c4:	2800      	cmp	r0, #0
   122c6:	d18d      	bne.n	121e4 <bt_init+0xf0>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   122c8:	2104      	movs	r1, #4
   122ca:	f242 0024 	movw	r0, #8228	; 0x2024
   122ce:	f7ff fbc7 	bl	11a60 <bt_hci_cmd_create>
		if (!buf) {
   122d2:	4606      	mov	r6, r0
   122d4:	2800      	cmp	r0, #0
   122d6:	d06d      	beq.n	123b4 <bt_init+0x2c0>
   122d8:	2104      	movs	r1, #4
   122da:	3008      	adds	r0, #8
   122dc:	f009 fe3e 	bl	1bf5c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   122e0:	f8bd 3000 	ldrh.w	r3, [sp]
   122e4:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   122e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   122ea:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   122ec:	4622      	mov	r2, r4
   122ee:	4631      	mov	r1, r6
   122f0:	f242 0024 	movw	r0, #8228	; 0x2024
   122f4:	f7ff fbee 	bl	11ad4 <bt_hci_cmd_send_sync>
		if (err) {
   122f8:	4604      	mov	r4, r0
   122fa:	2800      	cmp	r0, #0
   122fc:	f47f af72 	bne.w	121e4 <bt_init+0xf0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   12300:	2108      	movs	r1, #8
   12302:	f242 0001 	movw	r0, #8193	; 0x2001
   12306:	f7ff fbab 	bl	11a60 <bt_hci_cmd_create>
	if (!buf) {
   1230a:	4604      	mov	r4, r0
   1230c:	2800      	cmp	r0, #0
   1230e:	d051      	beq.n	123b4 <bt_init+0x2c0>
   12310:	2108      	movs	r1, #8
   12312:	4408      	add	r0, r1
   12314:	f009 fe22 	bl	1bf5c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   12318:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1231c:	f012 0f02 	tst.w	r2, #2
   12320:	bf14      	ite	ne
   12322:	232f      	movne	r3, #47	; 0x2f
   12324:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   12326:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   12328:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1232c:	bf48      	it	mi
   1232e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   12332:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   12336:	bf18      	it	ne
   12338:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   1233c:	2200      	movs	r2, #0
   1233e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   12340:	f3c3 2307 	ubfx	r3, r3, #8, #8
   12344:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   12346:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   12348:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   1234a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1234c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1234e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   12350:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   12352:	4621      	mov	r1, r4
   12354:	f242 0001 	movw	r0, #8193	; 0x2001
   12358:	f7ff fbbc 	bl	11ad4 <bt_hci_cmd_send_sync>
	if (err) {
   1235c:	4604      	mov	r4, r0
   1235e:	2800      	cmp	r0, #0
   12360:	f47f af40 	bne.w	121e4 <bt_init+0xf0>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   12364:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   12368:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1236c:	069a      	lsls	r2, r3, #26
   1236e:	d424      	bmi.n	123ba <bt_init+0x2c6>
	if (bt_dev.le.acl_mtu) {
   12370:	b9c9      	cbnz	r1, 123a6 <bt_init+0x2b2>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   12372:	aa01      	add	r2, sp, #4
   12374:	f241 0005 	movw	r0, #4101	; 0x1005
   12378:	f7ff fbac 	bl	11ad4 <bt_hci_cmd_send_sync>
	if (err) {
   1237c:	4604      	mov	r4, r0
   1237e:	2800      	cmp	r0, #0
   12380:	f47f af30 	bne.w	121e4 <bt_init+0xf0>
	if (bt_dev.le.acl_mtu) {
   12384:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   12388:	9c01      	ldr	r4, [sp, #4]
	if (bt_dev.le.acl_mtu) {
   1238a:	b94b      	cbnz	r3, 123a0 <bt_init+0x2ac>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   1238c:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1238e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   12392:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   12396:	889a      	ldrh	r2, [r3, #4]
   12398:	480d      	ldr	r0, [pc, #52]	; (123d0 <bt_init+0x2dc>)
   1239a:	4611      	mov	r1, r2
   1239c:	f00a fb00 	bl	1c9a0 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   123a0:	4620      	mov	r0, r4
   123a2:	f002 fe7d 	bl	150a0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   123a6:	2108      	movs	r1, #8
   123a8:	f640 4001 	movw	r0, #3073	; 0xc01
   123ac:	f7ff fb58 	bl	11a60 <bt_hci_cmd_create>
	if (!buf) {
   123b0:	4604      	mov	r4, r0
   123b2:	b978      	cbnz	r0, 123d4 <bt_init+0x2e0>
		return -ENOBUFS;
   123b4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   123b8:	e714      	b.n	121e4 <bt_init+0xf0>
	else if (!bt_dev.le.acl_mtu) {
   123ba:	2900      	cmp	r1, #0
   123bc:	d1f3      	bne.n	123a6 <bt_init+0x2b2>
		return -EIO;
   123be:	f06f 0404 	mvn.w	r4, #4
   123c2:	e70f      	b.n	121e4 <bt_init+0xf0>
   123c4:	20000378 	.word	0x20000378
   123c8:	200003e8 	.word	0x200003e8
   123cc:	20000448 	.word	0x20000448
   123d0:	20000478 	.word	0x20000478
   123d4:	2108      	movs	r1, #8
   123d6:	4408      	add	r0, r1
   123d8:	f009 fdc0 	bl	1bf5c <net_buf_simple_add>
	dst[0] = val;
   123dc:	2310      	movs	r3, #16
   123de:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   123e0:	2388      	movs	r3, #136	; 0x88
   123e2:	7043      	strb	r3, [r0, #1]
   123e4:	2302      	movs	r3, #2
	dst[0] = val;
   123e6:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   123e8:	70c3      	strb	r3, [r0, #3]
   123ea:	2320      	movs	r3, #32
	dst[0] = val;
   123ec:	7082      	strb	r2, [r0, #2]
   123ee:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   123f0:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   123f2:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   123f4:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   123f6:	4621      	mov	r1, r4
   123f8:	f640 4001 	movw	r0, #3073	; 0xc01
   123fc:	f7ff fb6a 	bl	11ad4 <bt_hci_cmd_send_sync>
	if (err) {
   12400:	4604      	mov	r4, r0
   12402:	2800      	cmp	r0, #0
   12404:	f47f aeee 	bne.w	121e4 <bt_init+0xf0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   12408:	4601      	mov	r1, r0
   1240a:	aa01      	add	r2, sp, #4
   1240c:	f64f 4001 	movw	r0, #64513	; 0xfc01
   12410:	f7ff fb60 	bl	11ad4 <bt_hci_cmd_send_sync>
	if (err) {
   12414:	4604      	mov	r4, r0
   12416:	bb20      	cbnz	r0, 12462 <bt_init+0x36e>
	net_buf_unref(rsp);
   12418:	9801      	ldr	r0, [sp, #4]
   1241a:	f002 fe41 	bl	150a0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   1241e:	4621      	mov	r1, r4
   12420:	aa01      	add	r2, sp, #4
   12422:	f64f 4002 	movw	r0, #64514	; 0xfc02
   12426:	f7ff fb55 	bl	11ad4 <bt_hci_cmd_send_sync>
	if (err) {
   1242a:	4604      	mov	r4, r0
   1242c:	b9c8      	cbnz	r0, 12462 <bt_init+0x36e>
	rp.cmds = (void *)rsp->data;
   1242e:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   12430:	6883      	ldr	r3, [r0, #8]
   12432:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   12436:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
   1243a:	f002 fe31 	bl	150a0 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   1243e:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   12442:	075b      	lsls	r3, r3, #29
   12444:	d50d      	bpl.n	12462 <bt_init+0x36e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   12446:	aa01      	add	r2, sp, #4
   12448:	4621      	mov	r1, r4
   1244a:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1244e:	f7ff fb41 	bl	11ad4 <bt_hci_cmd_send_sync>
		if (err) {
   12452:	b930      	cbnz	r0, 12462 <bt_init+0x36e>
		rp.feat = (void *)rsp->data;
   12454:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   12456:	6883      	ldr	r3, [r0, #8]
   12458:	785b      	ldrb	r3, [r3, #1]
   1245a:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
   1245e:	f002 fe1f 	bl	150a0 <net_buf_unref>
	err = bt_id_init();
   12462:	f000 fa5b 	bl	1291c <bt_id_init>
	if (err) {
   12466:	4604      	mov	r4, r0
   12468:	2800      	cmp	r0, #0
   1246a:	f47f aebb 	bne.w	121e4 <bt_init+0xf0>
		err = bt_conn_init();
   1246e:	f001 f975 	bl	1375c <bt_conn_init>
		if (err) {
   12472:	4604      	mov	r4, r0
   12474:	2800      	cmp	r0, #0
   12476:	f47f aeb5 	bne.w	121e4 <bt_init+0xf0>
	bt_finalize_init();
   1247a:	f7ff fe35 	bl	120e8 <bt_finalize_init>
	return 0;
   1247e:	e6b1      	b.n	121e4 <bt_init+0xf0>

00012480 <init_work>:
{
   12480:	b510      	push	{r4, lr}
	err = bt_init();
   12482:	f7ff fe37 	bl	120f4 <bt_init>
	if (ready_cb) {
   12486:	4b03      	ldr	r3, [pc, #12]	; (12494 <init_work+0x14>)
   12488:	681b      	ldr	r3, [r3, #0]
   1248a:	b113      	cbz	r3, 12492 <init_work+0x12>
}
   1248c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   12490:	4718      	bx	r3
}
   12492:	bd10      	pop	{r4, pc}
   12494:	20001bcc 	.word	0x20001bcc

00012498 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   12498:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   1249a:	4d2e      	ldr	r5, [pc, #184]	; (12554 <bt_enable+0xbc>)
   1249c:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   124a0:	b088      	sub	sp, #32
   124a2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   124a4:	2b00      	cmp	r3, #0
   124a6:	d04f      	beq.n	12548 <bt_enable+0xb0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   124a8:	f06f 0102 	mvn.w	r1, #2
   124ac:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   124b0:	f007 ff35 	bl	1a31e <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   124b4:	2101      	movs	r1, #1
   124b6:	f007 fea8 	bl	1a20a <atomic_or>
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   124ba:	ea10 0401 	ands.w	r4, r0, r1
   124be:	d146      	bne.n	1254e <bt_enable+0xb6>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   124c0:	4b25      	ldr	r3, [pc, #148]	; (12558 <bt_enable+0xc0>)
   124c2:	601e      	str	r6, [r3, #0]
   124c4:	460a      	mov	r2, r1
   124c6:	f505 708c 	add.w	r0, r5, #280	; 0x118
   124ca:	f00a fa69 	bl	1c9a0 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   124ce:	f505 709e 	add.w	r0, r5, #316	; 0x13c
   124d2:	f00a fa05 	bl	1c8e0 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   124d6:	2200      	movs	r2, #0
   124d8:	2300      	movs	r3, #0
   124da:	e9cd 2306 	strd	r2, r3, [sp, #24]
   124de:	f06f 0308 	mvn.w	r3, #8
   124e2:	e9cd 4302 	strd	r4, r3, [sp, #8]
   124e6:	e9cd 4400 	strd	r4, r4, [sp]
   124ea:	4b1c      	ldr	r3, [pc, #112]	; (1255c <bt_enable+0xc4>)
   124ec:	491c      	ldr	r1, [pc, #112]	; (12560 <bt_enable+0xc8>)
   124ee:	9404      	str	r4, [sp, #16]
   124f0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   124f4:	481b      	ldr	r0, [pc, #108]	; (12564 <bt_enable+0xcc>)
   124f6:	f005 fb4b 	bl	17b90 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   124fa:	491b      	ldr	r1, [pc, #108]	; (12568 <bt_enable+0xd0>)
   124fc:	4819      	ldr	r0, [pc, #100]	; (12564 <bt_enable+0xcc>)
   124fe:	f00a f969 	bl	1c7d4 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_init(&bt_workq);
   12502:	481a      	ldr	r0, [pc, #104]	; (1256c <bt_enable+0xd4>)
   12504:	f00a fb06 	bl	1cb14 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   12508:	4919      	ldr	r1, [pc, #100]	; (12570 <bt_enable+0xd8>)
   1250a:	4818      	ldr	r0, [pc, #96]	; (1256c <bt_enable+0xd4>)
   1250c:	9400      	str	r4, [sp, #0]
   1250e:	f06f 0307 	mvn.w	r3, #7
   12512:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12516:	f005 fe45 	bl	181a4 <k_work_queue_start>
   1251a:	4916      	ldr	r1, [pc, #88]	; (12574 <bt_enable+0xdc>)
   1251c:	4813      	ldr	r0, [pc, #76]	; (1256c <bt_enable+0xd4>)
   1251e:	f00a f959 	bl	1c7d4 <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
   12522:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   12526:	68db      	ldr	r3, [r3, #12]
   12528:	4798      	blx	r3
	if (err) {
   1252a:	4604      	mov	r4, r0
   1252c:	b948      	cbnz	r0, 12542 <bt_enable+0xaa>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   1252e:	b926      	cbnz	r6, 1253a <bt_enable+0xa2>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   12530:	b008      	add	sp, #32
   12532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   12536:	f7ff bddd 	b.w	120f4 <bt_init>
	k_work_submit(&bt_dev.init);
   1253a:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   1253e:	f005 fe2b 	bl	18198 <k_work_submit>
}
   12542:	4620      	mov	r0, r4
   12544:	b008      	add	sp, #32
   12546:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   12548:	f06f 0412 	mvn.w	r4, #18
   1254c:	e7f9      	b.n	12542 <bt_enable+0xaa>
		return -EALREADY;
   1254e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   12552:	e7f6      	b.n	12542 <bt_enable+0xaa>
   12554:	20000378 	.word	0x20000378
   12558:	20001bcc 	.word	0x20001bcc
   1255c:	00011ead 	.word	0x00011ead
   12560:	20002c78 	.word	0x20002c78
   12564:	20001640 	.word	0x20001640
   12568:	0001dcc6 	.word	0x0001dcc6
   1256c:	200016b8 	.word	0x200016b8
   12570:	20003278 	.word	0x20003278
   12574:	0001dccc 	.word	0x0001dccc

00012578 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12578:	4b04      	ldr	r3, [pc, #16]	; (1258c <bt_is_ready+0x14>)
   1257a:	f3bf 8f5b 	dmb	ish
   1257e:	6818      	ldr	r0, [r3, #0]
   12580:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   12584:	f3c0 0080 	ubfx	r0, r0, #2, #1
   12588:	4770      	bx	lr
   1258a:	bf00      	nop
   1258c:	20000444 	.word	0x20000444

00012590 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   12590:	4800      	ldr	r0, [pc, #0]	; (12594 <bt_get_name+0x4>)
   12592:	4770      	bx	lr
   12594:	0001daa8 	.word	0x0001daa8

00012598 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   12598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1259a:	4f0a      	ldr	r7, [pc, #40]	; (125c4 <id_find+0x2c>)
{
   1259c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   1259e:	2500      	movs	r5, #0
   125a0:	79fb      	ldrb	r3, [r7, #7]
   125a2:	b2ec      	uxtb	r4, r5
   125a4:	42a3      	cmp	r3, r4
   125a6:	d802      	bhi.n	125ae <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   125a8:	f06f 0001 	mvn.w	r0, #1
   125ac:	e009      	b.n	125c2 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   125ae:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   125b2:	4439      	add	r1, r7
   125b4:	4630      	mov	r0, r6
   125b6:	f008 f82e 	bl	1a616 <bt_addr_le_eq>
   125ba:	3501      	adds	r5, #1
   125bc:	2800      	cmp	r0, #0
   125be:	d0ef      	beq.n	125a0 <id_find+0x8>
   125c0:	4620      	mov	r0, r4
}
   125c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   125c4:	20000378 	.word	0x20000378

000125c8 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   125c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   125ca:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   125cc:	460d      	mov	r5, r1
   125ce:	b171      	cbz	r1, 125ee <id_create.constprop.0+0x26>
   125d0:	4912      	ldr	r1, [pc, #72]	; (1261c <id_create.constprop.0+0x54>)
   125d2:	4628      	mov	r0, r5
   125d4:	f008 f81f 	bl	1a616 <bt_addr_le_eq>
   125d8:	b948      	cbnz	r0, 125ee <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   125da:	4811      	ldr	r0, [pc, #68]	; (12620 <id_create.constprop.0+0x58>)
   125dc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   125e0:	4629      	mov	r1, r5
   125e2:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   125e4:	f008 f824 	bl	1a630 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   125e8:	2000      	movs	r0, #0
}
   125ea:	b003      	add	sp, #12
   125ec:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   125ee:	4668      	mov	r0, sp
   125f0:	f007 fdbe 	bl	1a170 <bt_addr_le_create_static>
			if (err) {
   125f4:	2800      	cmp	r0, #0
   125f6:	d1f8      	bne.n	125ea <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   125f8:	4668      	mov	r0, sp
   125fa:	f7ff ffcd 	bl	12598 <id_find>
   125fe:	2800      	cmp	r0, #0
   12600:	daf5      	bge.n	125ee <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   12602:	4b07      	ldr	r3, [pc, #28]	; (12620 <id_create.constprop.0+0x58>)
   12604:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   12608:	4418      	add	r0, r3
   1260a:	4669      	mov	r1, sp
   1260c:	f008 f810 	bl	1a630 <bt_addr_le_copy>
		if (addr) {
   12610:	2d00      	cmp	r5, #0
   12612:	d0e9      	beq.n	125e8 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   12614:	4601      	mov	r1, r0
   12616:	4628      	mov	r0, r5
   12618:	e7e4      	b.n	125e4 <id_create.constprop.0+0x1c>
   1261a:	bf00      	nop
   1261c:	0001dbbb 	.word	0x0001dbbb
   12620:	20000378 	.word	0x20000378

00012624 <set_random_address>:
{
   12624:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   12626:	4912      	ldr	r1, [pc, #72]	; (12670 <set_random_address+0x4c>)
   12628:	2206      	movs	r2, #6
   1262a:	4605      	mov	r5, r0
   1262c:	f00a fdc9 	bl	1d1c2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   12630:	b1c8      	cbz	r0, 12666 <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   12632:	2106      	movs	r1, #6
   12634:	f242 0005 	movw	r0, #8197	; 0x2005
   12638:	f7ff fa12 	bl	11a60 <bt_hci_cmd_create>
	if (!buf) {
   1263c:	4604      	mov	r4, r0
   1263e:	b1a0      	cbz	r0, 1266a <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   12640:	2206      	movs	r2, #6
   12642:	4629      	mov	r1, r5
   12644:	3008      	adds	r0, #8
   12646:	f009 fc8f 	bl	1bf68 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1264a:	2200      	movs	r2, #0
   1264c:	4621      	mov	r1, r4
   1264e:	f242 0005 	movw	r0, #8197	; 0x2005
   12652:	f7ff fa3f 	bl	11ad4 <bt_hci_cmd_send_sync>
	if (err) {
   12656:	b938      	cbnz	r0, 12668 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   12658:	4805      	ldr	r0, [pc, #20]	; (12670 <set_random_address+0x4c>)
   1265a:	4629      	mov	r1, r5
   1265c:	f007 ffe3 	bl	1a626 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   12660:	2301      	movs	r3, #1
   12662:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   12666:	2000      	movs	r0, #0
}
   12668:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1266a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1266e:	e7fb      	b.n	12668 <set_random_address+0x44>
   12670:	200003d9 	.word	0x200003d9

00012674 <bt_id_get>:
{
   12674:	b538      	push	{r3, r4, r5, lr}
   12676:	460d      	mov	r5, r1
		size_t to_copy = MIN(*count, bt_dev.id_count);
   12678:	4906      	ldr	r1, [pc, #24]	; (12694 <bt_id_get+0x20>)
   1267a:	79cc      	ldrb	r4, [r1, #7]
	if (addrs) {
   1267c:	b138      	cbz	r0, 1268e <bt_id_get+0x1a>
		size_t to_copy = MIN(*count, bt_dev.id_count);
   1267e:	682b      	ldr	r3, [r5, #0]
   12680:	429c      	cmp	r4, r3
   12682:	bf28      	it	cs
   12684:	461c      	movcs	r4, r3
   12686:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   1268a:	f00a fdaa 	bl	1d1e2 <memcpy>
		*count = to_copy;
   1268e:	602c      	str	r4, [r5, #0]
}
   12690:	bd38      	pop	{r3, r4, r5, pc}
   12692:	bf00      	nop
   12694:	20000378 	.word	0x20000378

00012698 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   12698:	b570      	push	{r4, r5, r6, lr}
   1269a:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1269c:	4604      	mov	r4, r0
   1269e:	b918      	cbnz	r0, 126a8 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   126a0:	b1bd      	cbz	r5, 126d2 <bt_id_create+0x3a>
			return -EINVAL;
   126a2:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   126a6:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   126a8:	491c      	ldr	r1, [pc, #112]	; (1271c <bt_id_create+0x84>)
   126aa:	f007 ffb4 	bl	1a616 <bt_addr_le_eq>
   126ae:	2800      	cmp	r0, #0
   126b0:	d1f6      	bne.n	126a0 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   126b2:	7823      	ldrb	r3, [r4, #0]
   126b4:	2b01      	cmp	r3, #1
   126b6:	d1f4      	bne.n	126a2 <bt_id_create+0xa>
   126b8:	79a3      	ldrb	r3, [r4, #6]
   126ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   126be:	2bc0      	cmp	r3, #192	; 0xc0
   126c0:	d1ef      	bne.n	126a2 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   126c2:	4620      	mov	r0, r4
   126c4:	f7ff ff68 	bl	12598 <id_find>
   126c8:	2800      	cmp	r0, #0
   126ca:	dbe9      	blt.n	126a0 <bt_id_create+0x8>
			return -EALREADY;
   126cc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   126d0:	e7e9      	b.n	126a6 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   126d2:	4d13      	ldr	r5, [pc, #76]	; (12720 <bt_id_create+0x88>)
   126d4:	79eb      	ldrb	r3, [r5, #7]
   126d6:	2b01      	cmp	r3, #1
   126d8:	d01c      	beq.n	12714 <bt_id_create+0x7c>
   126da:	f3bf 8f5b 	dmb	ish
   126de:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   126e2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   126e6:	07db      	lsls	r3, r3, #31
   126e8:	d50b      	bpl.n	12702 <bt_id_create+0x6a>
	new_id = bt_dev.id_count;
   126ea:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   126ec:	4621      	mov	r1, r4
   126ee:	4630      	mov	r0, r6
   126f0:	f7ff ff6a 	bl	125c8 <id_create.constprop.0>
	if (err) {
   126f4:	2800      	cmp	r0, #0
   126f6:	d1d6      	bne.n	126a6 <bt_id_create+0xe>
		bt_dev.id_count++;
   126f8:	79eb      	ldrb	r3, [r5, #7]
   126fa:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   126fc:	4630      	mov	r0, r6
		bt_dev.id_count++;
   126fe:	71eb      	strb	r3, [r5, #7]
	return new_id;
   12700:	e7d1      	b.n	126a6 <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   12702:	2c00      	cmp	r4, #0
   12704:	d0cd      	beq.n	126a2 <bt_id_create+0xa>
   12706:	4905      	ldr	r1, [pc, #20]	; (1271c <bt_id_create+0x84>)
   12708:	4620      	mov	r0, r4
   1270a:	f007 ff84 	bl	1a616 <bt_addr_le_eq>
   1270e:	2800      	cmp	r0, #0
   12710:	d0eb      	beq.n	126ea <bt_id_create+0x52>
   12712:	e7c6      	b.n	126a2 <bt_id_create+0xa>
		return -ENOMEM;
   12714:	f06f 000b 	mvn.w	r0, #11
   12718:	e7c5      	b.n	126a6 <bt_id_create+0xe>
   1271a:	bf00      	nop
   1271c:	0001dbbb 	.word	0x0001dbbb
   12720:	20000378 	.word	0x20000378

00012724 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   12724:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   12726:	4604      	mov	r4, r0
   12728:	b198      	cbz	r0, 12752 <bt_id_read_public_addr+0x2e>
		BT_WARN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1272a:	aa01      	add	r2, sp, #4
   1272c:	2100      	movs	r1, #0
   1272e:	f241 0009 	movw	r0, #4105	; 0x1009
   12732:	f7ff f9cf 	bl	11ad4 <bt_hci_cmd_send_sync>
	if (err) {
   12736:	4606      	mov	r6, r0
   12738:	b958      	cbnz	r0, 12752 <bt_id_read_public_addr+0x2e>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   1273a:	9b01      	ldr	r3, [sp, #4]
   1273c:	490f      	ldr	r1, [pc, #60]	; (1277c <bt_id_read_public_addr+0x58>)

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1273e:	689d      	ldr	r5, [r3, #8]
   12740:	3501      	adds	r5, #1
   12742:	2206      	movs	r2, #6
   12744:	4628      	mov	r0, r5
   12746:	f00a fd3c 	bl	1d1c2 <memcmp>
   1274a:	b928      	cbnz	r0, 12758 <bt_id_read_public_addr+0x34>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   1274c:	9801      	ldr	r0, [sp, #4]
   1274e:	f002 fca7 	bl	150a0 <net_buf_unref>
		return 0U;
   12752:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   12754:	b002      	add	sp, #8
   12756:	bd70      	pop	{r4, r5, r6, pc}
   12758:	4909      	ldr	r1, [pc, #36]	; (12780 <bt_id_read_public_addr+0x5c>)
   1275a:	2206      	movs	r2, #6
   1275c:	4628      	mov	r0, r5
   1275e:	f00a fd30 	bl	1d1c2 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   12762:	2800      	cmp	r0, #0
   12764:	d0f2      	beq.n	1274c <bt_id_read_public_addr+0x28>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   12766:	4629      	mov	r1, r5
   12768:	1c60      	adds	r0, r4, #1
   1276a:	f007 ff5c 	bl	1a626 <bt_addr_copy>
	net_buf_unref(rsp);
   1276e:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   12770:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   12772:	f002 fc95 	bl	150a0 <net_buf_unref>
	return 1U;
   12776:	2001      	movs	r0, #1
   12778:	e7ec      	b.n	12754 <bt_id_read_public_addr+0x30>
   1277a:	bf00      	nop
   1277c:	0001dbc8 	.word	0x0001dbc8
   12780:	0001dbc2 	.word	0x0001dbc2

00012784 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   12784:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   12786:	4668      	mov	r0, sp
   12788:	f7ff ffcc 	bl	12724 <bt_id_read_public_addr>
   1278c:	4b04      	ldr	r3, [pc, #16]	; (127a0 <bt_setup_public_id_addr+0x1c>)
   1278e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   12790:	b118      	cbz	r0, 1279a <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   12792:	4669      	mov	r1, sp
   12794:	2000      	movs	r0, #0
   12796:	f7ff ff17 	bl	125c8 <id_create.constprop.0>
}
   1279a:	b003      	add	sp, #12
   1279c:	f85d fb04 	ldr.w	pc, [sp], #4
   127a0:	20000378 	.word	0x20000378

000127a4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   127a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   127a6:	4b18      	ldr	r3, [pc, #96]	; (12808 <bt_read_static_addr+0x64>)
   127a8:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   127ac:	07db      	lsls	r3, r3, #31
{
   127ae:	4605      	mov	r5, r0
   127b0:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   127b2:	d403      	bmi.n	127bc <bt_read_static_addr+0x18>
		BT_WARN("Read Static Addresses command not available");
		return 0;
   127b4:	2400      	movs	r4, #0
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   127b6:	4620      	mov	r0, r4
   127b8:	b003      	add	sp, #12
   127ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   127bc:	aa01      	add	r2, sp, #4
   127be:	2100      	movs	r1, #0
   127c0:	f64f 4009 	movw	r0, #64521	; 0xfc09
   127c4:	f7ff f986 	bl	11ad4 <bt_hci_cmd_send_sync>
	if (err) {
   127c8:	4603      	mov	r3, r0
   127ca:	2800      	cmp	r0, #0
   127cc:	d1f2      	bne.n	127b4 <bt_read_static_addr+0x10>
	rp = (void *)rsp->data;
   127ce:	9801      	ldr	r0, [sp, #4]
   127d0:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   127d2:	7854      	ldrb	r4, [r2, #1]
   127d4:	42b4      	cmp	r4, r6
   127d6:	bf28      	it	cs
   127d8:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   127da:	3202      	adds	r2, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   127dc:	2716      	movs	r7, #22
	for (i = 0; i < cnt; i++) {
   127de:	429c      	cmp	r4, r3
   127e0:	dc02      	bgt.n	127e8 <bt_read_static_addr+0x44>
	net_buf_unref(rsp);
   127e2:	f002 fc5d 	bl	150a0 <net_buf_unref>
	if (!cnt) {
   127e6:	e7e6      	b.n	127b6 <bt_read_static_addr+0x12>
   127e8:	4611      	mov	r1, r2
   127ea:	fb07 5603 	mla	r6, r7, r3, r5
   127ee:	f102 0c14 	add.w	ip, r2, #20
   127f2:	f851 eb04 	ldr.w	lr, [r1], #4
   127f6:	f846 eb04 	str.w	lr, [r6], #4
   127fa:	4561      	cmp	r1, ip
   127fc:	d1f9      	bne.n	127f2 <bt_read_static_addr+0x4e>
   127fe:	8809      	ldrh	r1, [r1, #0]
   12800:	8031      	strh	r1, [r6, #0]
	for (i = 0; i < cnt; i++) {
   12802:	3301      	adds	r3, #1
   12804:	3216      	adds	r2, #22
   12806:	e7ea      	b.n	127de <bt_read_static_addr+0x3a>
   12808:	20000378 	.word	0x20000378

0001280c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1280c:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1280e:	4d15      	ldr	r5, [pc, #84]	; (12864 <bt_setup_random_id_addr+0x58>)
   12810:	79ec      	ldrb	r4, [r5, #7]
{
   12812:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   12814:	b92c      	cbnz	r4, 12822 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   12816:	2101      	movs	r1, #1
   12818:	a802      	add	r0, sp, #8
   1281a:	f7ff ffc3 	bl	127a4 <bt_read_static_addr>
   1281e:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   12820:	b9c0      	cbnz	r0, 12854 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   12822:	2100      	movs	r1, #0
   12824:	4608      	mov	r0, r1
}
   12826:	b008      	add	sp, #32
   12828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   1282c:	f7ff bf34 	b.w	12698 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   12830:	ab02      	add	r3, sp, #8
   12832:	fb06 3102 	mla	r1, r6, r2, r3
   12836:	f10d 0001 	add.w	r0, sp, #1
   1283a:	f007 fef4 	bl	1a626 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   1283e:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   12840:	4669      	mov	r1, sp
   12842:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   12844:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   12848:	f7ff febe 	bl	125c8 <id_create.constprop.0>
				if (err) {
   1284c:	3401      	adds	r4, #1
   1284e:	b110      	cbz	r0, 12856 <bt_setup_random_id_addr+0x4a>
}
   12850:	b008      	add	sp, #32
   12852:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   12854:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   12856:	79eb      	ldrb	r3, [r5, #7]
   12858:	b2e2      	uxtb	r2, r4
   1285a:	4293      	cmp	r3, r2
   1285c:	d8e8      	bhi.n	12830 <bt_setup_random_id_addr+0x24>
			return 0;
   1285e:	2000      	movs	r0, #0
   12860:	e7f6      	b.n	12850 <bt_setup_random_id_addr+0x44>
   12862:	bf00      	nop
   12864:	20000378 	.word	0x20000378

00012868 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   12868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1286c:	4690      	mov	r8, r2
   1286e:	460e      	mov	r6, r1
   12870:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   12872:	4602      	mov	r2, r0
   12874:	2800      	cmp	r0, #0
   12876:	d04b      	beq.n	12910 <bt_id_set_adv_own_addr+0xa8>
   12878:	2b00      	cmp	r3, #0
   1287a:	d049      	beq.n	12910 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1287c:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   1287e:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   12880:	d531      	bpl.n	128e6 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   12882:	4f25      	ldr	r7, [pc, #148]	; (12918 <bt_id_set_adv_own_addr+0xb0>)
   12884:	f1b8 0f00 	cmp.w	r8, #0
   12888:	d013      	beq.n	128b2 <bt_id_set_adv_own_addr+0x4a>
   1288a:	0688      	lsls	r0, r1, #26
   1288c:	d40a      	bmi.n	128a4 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1288e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   12892:	5cfb      	ldrb	r3, [r7, r3]
   12894:	2b01      	cmp	r3, #1
   12896:	d015      	beq.n	128c4 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   12898:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1289a:	06b2      	lsls	r2, r6, #26
   1289c:	d50f      	bpl.n	128be <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1289e:	f043 0302 	orr.w	r3, r3, #2
   128a2:	e00b      	b.n	128bc <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   128a4:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   128a8:	0659      	lsls	r1, r3, #25
   128aa:	d4f0      	bmi.n	1288e <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   128ac:	f06f 0085 	mvn.w	r0, #133	; 0x85
   128b0:	e006      	b.n	128c0 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   128b2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   128b6:	5cfb      	ldrb	r3, [r7, r3]
   128b8:	2b01      	cmp	r3, #1
   128ba:	d003      	beq.n	128c4 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   128bc:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   128be:	2000      	movs	r0, #0
}
   128c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   128c4:	2107      	movs	r1, #7
   128c6:	fb01 7104 	mla	r1, r1, r4, r7
   128ca:	3101      	adds	r1, #1
   128cc:	4610      	mov	r0, r2
   128ce:	f007 febb 	bl	1a648 <bt_id_set_adv_random_addr>
				if (err) {
   128d2:	2800      	cmp	r0, #0
   128d4:	d1f4      	bne.n	128c0 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   128d6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   128da:	5d3b      	ldrb	r3, [r7, r4]
   128dc:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   128de:	f1b8 0f00 	cmp.w	r8, #0
   128e2:	d0ec      	beq.n	128be <bt_id_set_adv_own_addr+0x56>
   128e4:	e7d9      	b.n	1289a <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   128e6:	074b      	lsls	r3, r1, #29
   128e8:	d50e      	bpl.n	12908 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   128ea:	4e0b      	ldr	r6, [pc, #44]	; (12918 <bt_id_set_adv_own_addr+0xb0>)
   128ec:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   128f0:	5df3      	ldrb	r3, [r6, r7]
   128f2:	2b01      	cmp	r3, #1
   128f4:	d1e2      	bne.n	128bc <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   128f6:	2107      	movs	r1, #7
   128f8:	fb11 3104 	smlabb	r1, r1, r4, r3
   128fc:	4431      	add	r1, r6
   128fe:	f007 fea3 	bl	1a648 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   12902:	5df3      	ldrb	r3, [r6, r7]
   12904:	702b      	strb	r3, [r5, #0]
		if (err) {
   12906:	e7db      	b.n	128c0 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   12908:	f007 fea6 	bl	1a658 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1290c:	2301      	movs	r3, #1
   1290e:	e7f9      	b.n	12904 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   12910:	f06f 0015 	mvn.w	r0, #21
   12914:	e7d4      	b.n	128c0 <bt_id_set_adv_own_addr+0x58>
   12916:	bf00      	nop
   12918:	20000378 	.word	0x20000378

0001291c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   1291c:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1291e:	4c0a      	ldr	r4, [pc, #40]	; (12948 <bt_id_init+0x2c>)
   12920:	79e3      	ldrb	r3, [r4, #7]
   12922:	b10b      	cbz	r3, 12928 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   12924:	2000      	movs	r0, #0
}
   12926:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   12928:	f7ff ff2c 	bl	12784 <bt_setup_public_id_addr>
		if (err) {
   1292c:	2800      	cmp	r0, #0
   1292e:	d1fa      	bne.n	12926 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   12930:	79e3      	ldrb	r3, [r4, #7]
   12932:	2b00      	cmp	r3, #0
   12934:	d1f6      	bne.n	12924 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   12936:	f7ff ff69 	bl	1280c <bt_setup_random_id_addr>
		if (err) {
   1293a:	2800      	cmp	r0, #0
   1293c:	d1f3      	bne.n	12926 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1293e:	1c60      	adds	r0, r4, #1
}
   12940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
   12944:	f7ff be6e 	b.w	12624 <set_random_address>
   12948:	20000378 	.word	0x20000378

0001294c <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   1294c:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1294e:	4605      	mov	r5, r0
   12950:	4b16      	ldr	r3, [pc, #88]	; (129ac <le_adv_start_add_conn+0x60>)
   12952:	f815 2b09 	ldrb.w	r2, [r5], #9
   12956:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   1295a:	4604      	mov	r4, r0
   1295c:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   1295e:	2207      	movs	r2, #7
   12960:	4913      	ldr	r1, [pc, #76]	; (129b0 <le_adv_start_add_conn+0x64>)
   12962:	4628      	mov	r0, r5
   12964:	f00a fc2d 	bl	1d1c2 <memcmp>
   12968:	4603      	mov	r3, r0
   1296a:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1296c:	b96b      	cbnz	r3, 1298a <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   1296e:	4911      	ldr	r1, [pc, #68]	; (129b4 <le_adv_start_add_conn+0x68>)
   12970:	f000 fd5a 	bl	13428 <bt_conn_add_le>
		if (!conn) {
   12974:	4604      	mov	r4, r0
   12976:	b910      	cbnz	r0, 1297e <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   12978:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   1297c:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   1297e:	2104      	movs	r1, #4
   12980:	f000 fbfa 	bl	13178 <bt_conn_set_state>
		*out_conn = conn;
   12984:	6034      	str	r4, [r6, #0]
		return 0;
   12986:	2000      	movs	r0, #0
   12988:	e7f8      	b.n	1297c <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   1298a:	4629      	mov	r1, r5
   1298c:	f008 f8d2 	bl	1ab34 <bt_conn_exists_le>
   12990:	b940      	cbnz	r0, 129a4 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   12992:	7820      	ldrb	r0, [r4, #0]
   12994:	4629      	mov	r1, r5
   12996:	f000 fd47 	bl	13428 <bt_conn_add_le>
	if (!conn) {
   1299a:	4604      	mov	r4, r0
   1299c:	2800      	cmp	r0, #0
   1299e:	d0eb      	beq.n	12978 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   129a0:	2105      	movs	r1, #5
   129a2:	e7ed      	b.n	12980 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   129a4:	f06f 0015 	mvn.w	r0, #21
   129a8:	e7e8      	b.n	1297c <le_adv_start_add_conn+0x30>
   129aa:	bf00      	nop
   129ac:	20000378 	.word	0x20000378
   129b0:	0001dbbb 	.word	0x0001dbbb
   129b4:	0001dbb4 	.word	0x0001dbb4

000129b8 <valid_adv_param>:
{
   129b8:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   129ba:	6843      	ldr	r3, [r0, #4]
{
   129bc:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   129be:	0558      	lsls	r0, r3, #21
   129c0:	d501      	bpl.n	129c6 <valid_adv_param+0xe>
		return false;
   129c2:	2000      	movs	r0, #0
}
   129c4:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   129c6:	6922      	ldr	r2, [r4, #16]
   129c8:	b10a      	cbz	r2, 129ce <valid_adv_param+0x16>
   129ca:	07d9      	lsls	r1, r3, #31
   129cc:	d5f9      	bpl.n	129c2 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   129ce:	4d19      	ldr	r5, [pc, #100]	; (12a34 <valid_adv_param+0x7c>)
   129d0:	7820      	ldrb	r0, [r4, #0]
   129d2:	79eb      	ldrb	r3, [r5, #7]
   129d4:	4283      	cmp	r3, r0
   129d6:	d9f4      	bls.n	129c2 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   129d8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   129dc:	4916      	ldr	r1, [pc, #88]	; (12a38 <valid_adv_param+0x80>)
   129de:	2207      	movs	r2, #7
   129e0:	4428      	add	r0, r5
   129e2:	f00a fbee 	bl	1d1c2 <memcmp>
	if (param->id >= bt_dev.id_count ||
   129e6:	2800      	cmp	r0, #0
   129e8:	d0eb      	beq.n	129c2 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   129ea:	6860      	ldr	r0, [r4, #4]
   129ec:	07c2      	lsls	r2, r0, #31
   129ee:	d406      	bmi.n	129fe <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   129f0:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   129f4:	2b08      	cmp	r3, #8
   129f6:	d802      	bhi.n	129fe <valid_adv_param+0x46>
   129f8:	68a3      	ldr	r3, [r4, #8]
   129fa:	2b9f      	cmp	r3, #159	; 0x9f
   129fc:	d9e1      	bls.n	129c2 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   129fe:	f010 0f30 	tst.w	r0, #48	; 0x30
   12a02:	d002      	beq.n	12a0a <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   12a04:	6923      	ldr	r3, [r4, #16]
   12a06:	2b00      	cmp	r3, #0
   12a08:	d0db      	beq.n	129c2 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   12a0a:	06c3      	lsls	r3, r0, #27
   12a0c:	d401      	bmi.n	12a12 <valid_adv_param+0x5a>
   12a0e:	6923      	ldr	r3, [r4, #16]
   12a10:	b943      	cbnz	r3, 12a24 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   12a12:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   12a16:	429a      	cmp	r2, r3
   12a18:	d8d3      	bhi.n	129c2 <valid_adv_param+0xa>
   12a1a:	2a1f      	cmp	r2, #31
   12a1c:	d9d1      	bls.n	129c2 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   12a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   12a22:	d8ce      	bhi.n	129c2 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   12a24:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   12a28:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   12a2c:	bf18      	it	ne
   12a2e:	2001      	movne	r0, #1
   12a30:	e7c8      	b.n	129c4 <valid_adv_param+0xc>
   12a32:	bf00      	nop
   12a34:	20000378 	.word	0x20000378
   12a38:	0001dbbb 	.word	0x0001dbbb

00012a3c <bt_le_adv_lookup_legacy>:
}
   12a3c:	4800      	ldr	r0, [pc, #0]	; (12a40 <bt_le_adv_lookup_legacy+0x4>)
   12a3e:	4770      	bx	lr
   12a40:	20000390 	.word	0x20000390

00012a44 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   12a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   12a48:	f8d1 9010 	ldr.w	r9, [r1, #16]
{
   12a4c:	b08d      	sub	sp, #52	; 0x34
   12a4e:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   12a50:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   12a52:	ebb9 0603 	subs.w	r6, r9, r3
{
   12a56:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12a58:	488b      	ldr	r0, [pc, #556]	; (12c88 <bt_le_adv_start_legacy+0x244>)
   12a5a:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   12a5c:	bf18      	it	ne
   12a5e:	2601      	movne	r6, #1
	struct bt_conn *conn = NULL;
   12a60:	9307      	str	r3, [sp, #28]
   12a62:	f007 fe23 	bl	1a6ac <atomic_get>
{
   12a66:	460c      	mov	r4, r1
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   12a68:	0741      	lsls	r1, r0, #29
   12a6a:	f140 8101 	bpl.w	12c70 <bt_le_adv_start_legacy+0x22c>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   12a6e:	4620      	mov	r0, r4
   12a70:	f7ff ffa2 	bl	129b8 <valid_adv_param>
   12a74:	b928      	cbnz	r0, 12a82 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   12a76:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   12a7a:	4658      	mov	r0, fp
   12a7c:	b00d      	add	sp, #52	; 0x34
   12a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   12a82:	4620      	mov	r0, r4
   12a84:	f007 fdff 	bl	1a686 <bt_id_adv_random_addr_check>
   12a88:	4680      	mov	r8, r0
   12a8a:	2800      	cmp	r0, #0
   12a8c:	d0f3      	beq.n	12a76 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   12a8e:	f105 0710 	add.w	r7, r5, #16
   12a92:	4638      	mov	r0, r7
   12a94:	f007 fe0a 	bl	1a6ac <atomic_get>
   12a98:	0602      	lsls	r2, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   12a9a:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   12a9e:	f100 80ea 	bmi.w	12c76 <bt_le_adv_start_legacy+0x232>
	(void)memset(&set_param, 0, sizeof(set_param));
   12aa2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   12aa6:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   12aaa:	68a3      	ldr	r3, [r4, #8]
   12aac:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   12ab0:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   12ab2:	68e3      	ldr	r3, [r4, #12]
   12ab4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   12ab8:	f007 fde9 	bl	1a68e <get_adv_channel_map>
	if (adv->id != param->id) {
   12abc:	782a      	ldrb	r2, [r5, #0]
   12abe:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   12ac0:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   12ac4:	429a      	cmp	r2, r3
   12ac6:	d004      	beq.n	12ad2 <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12ac8:	486f      	ldr	r0, [pc, #444]	; (12c88 <bt_le_adv_start_legacy+0x244>)
   12aca:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   12ace:	f007 fdf3 	bl	1a6b8 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   12ad2:	4a6e      	ldr	r2, [pc, #440]	; (12c8c <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
   12ad4:	7823      	ldrb	r3, [r4, #0]
   12ad6:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   12ad8:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   12adc:	6861      	ldr	r1, [r4, #4]
   12ade:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   12ae2:	4632      	mov	r2, r6
   12ae4:	4628      	mov	r0, r5
   12ae6:	f7ff febf 	bl	12868 <bt_id_set_adv_own_addr>
	if (err) {
   12aea:	4683      	mov	fp, r0
   12aec:	2800      	cmp	r0, #0
   12aee:	d1c4      	bne.n	12a7a <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   12af0:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   12af4:	f1b9 0f00 	cmp.w	r9, #0
   12af8:	d013      	beq.n	12b22 <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   12afa:	6921      	ldr	r1, [r4, #16]
   12afc:	f007 fdeb 	bl	1a6d6 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   12b00:	4620      	mov	r0, r4
   12b02:	f007 fedc 	bl	1a8be <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   12b06:	6863      	ldr	r3, [r4, #4]
	name_type = get_adv_name_type_param(param);
   12b08:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   12b0a:	07d8      	lsls	r0, r3, #31
   12b0c:	d416      	bmi.n	12b3c <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   12b0e:	059a      	lsls	r2, r3, #22
   12b10:	d403      	bmi.n	12b1a <bt_le_adv_start_legacy+0xd6>
   12b12:	9b16      	ldr	r3, [sp, #88]	; 0x58
   12b14:	b90b      	cbnz	r3, 12b1a <bt_le_adv_start_legacy+0xd6>
   12b16:	2e02      	cmp	r6, #2
   12b18:	d14c      	bne.n	12bb4 <bt_le_adv_start_legacy+0x170>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   12b1a:	2302      	movs	r3, #2
   12b1c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   12b20:	e019      	b.n	12b56 <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   12b22:	495b      	ldr	r1, [pc, #364]	; (12c90 <bt_le_adv_start_legacy+0x24c>)
   12b24:	f007 fdd7 	bl	1a6d6 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   12b28:	4620      	mov	r0, r4
   12b2a:	f007 fec8 	bl	1a8be <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   12b2e:	6863      	ldr	r3, [r4, #4]
   12b30:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   12b32:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   12b34:	d5eb      	bpl.n	12b0e <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   12b36:	f88d 9024 	strb.w	r9, [sp, #36]	; 0x24
   12b3a:	e00c      	b.n	12b56 <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   12b3c:	f013 0f10 	tst.w	r3, #16
   12b40:	bf0c      	ite	eq
   12b42:	2301      	moveq	r3, #1
   12b44:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   12b46:	6921      	ldr	r1, [r4, #16]
   12b48:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   12b4c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   12b50:	f007 fdc1 	bl	1a6d6 <bt_addr_le_copy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   12b54:	46d8      	mov	r8, fp
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   12b56:	210f      	movs	r1, #15
   12b58:	f242 0006 	movw	r0, #8198	; 0x2006
   12b5c:	f7fe ff80 	bl	11a60 <bt_hci_cmd_create>
	if (!buf) {
   12b60:	4683      	mov	fp, r0
   12b62:	2800      	cmp	r0, #0
   12b64:	f000 808a 	beq.w	12c7c <bt_le_adv_start_legacy+0x238>
   12b68:	220f      	movs	r2, #15
   12b6a:	a908      	add	r1, sp, #32
   12b6c:	3008      	adds	r0, #8
   12b6e:	f009 f9fb 	bl	1bf68 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   12b72:	2200      	movs	r2, #0
   12b74:	4659      	mov	r1, fp
   12b76:	f242 0006 	movw	r0, #8198	; 0x2006
   12b7a:	f7fe ffab 	bl	11ad4 <bt_hci_cmd_send_sync>
	if (err) {
   12b7e:	2800      	cmp	r0, #0
   12b80:	d17f      	bne.n	12c82 <bt_le_adv_start_legacy+0x23e>
	if (!dir_adv) {
   12b82:	f1b9 0f00 	cmp.w	r9, #0
   12b86:	d01b      	beq.n	12bc0 <bt_le_adv_start_legacy+0x17c>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   12b88:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12b8a:	07db      	lsls	r3, r3, #31
   12b8c:	d426      	bmi.n	12bdc <bt_le_adv_start_legacy+0x198>
	return bt_le_adv_set_enable_legacy(adv, enable);
   12b8e:	4628      	mov	r0, r5
   12b90:	2101      	movs	r1, #1
   12b92:	f007 fea4 	bl	1a8de <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   12b96:	9d07      	ldr	r5, [sp, #28]
	if (err) {
   12b98:	4683      	mov	fp, r0
   12b9a:	2800      	cmp	r0, #0
   12b9c:	d060      	beq.n	12c60 <bt_le_adv_start_legacy+0x21c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   12b9e:	2d00      	cmp	r5, #0
   12ba0:	f43f af6b 	beq.w	12a7a <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12ba4:	4628      	mov	r0, r5
   12ba6:	2100      	movs	r1, #0
   12ba8:	f000 fae6 	bl	13178 <bt_conn_set_state>
			bt_conn_unref(conn);
   12bac:	4628      	mov	r0, r5
   12bae:	f007 ff58 	bl	1aa62 <bt_conn_unref>
   12bb2:	e762      	b.n	12a7a <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   12bb4:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   12bb6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   12bba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   12bbe:	e7ca      	b.n	12b56 <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   12bc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12bc2:	9300      	str	r3, [sp, #0]
   12bc4:	e9cd 8601 	strd	r8, r6, [sp, #4]
   12bc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   12bca:	9905      	ldr	r1, [sp, #20]
   12bcc:	4652      	mov	r2, sl
   12bce:	4628      	mov	r0, r5
   12bd0:	f007 fdfe 	bl	1a7d0 <le_adv_update.constprop.0>
		if (err) {
   12bd4:	4683      	mov	fp, r0
   12bd6:	2800      	cmp	r0, #0
   12bd8:	d0d6      	beq.n	12b88 <bt_le_adv_start_legacy+0x144>
   12bda:	e74e      	b.n	12a7a <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   12bdc:	a907      	add	r1, sp, #28
   12bde:	4628      	mov	r0, r5
   12be0:	f7ff feb4 	bl	1294c <le_adv_start_add_conn>
		if (err) {
   12be4:	4683      	mov	fp, r0
   12be6:	2800      	cmp	r0, #0
   12be8:	d0d1      	beq.n	12b8e <bt_le_adv_start_legacy+0x14a>
			if (err == -ENOMEM && !dir_adv &&
   12bea:	f110 0f0c 	cmn.w	r0, #12
   12bee:	f47f af44 	bne.w	12a7a <bt_le_adv_start_legacy+0x36>
   12bf2:	f1b9 0f00 	cmp.w	r9, #0
   12bf6:	f47f af40 	bne.w	12a7a <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   12bfa:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   12bfc:	0798      	lsls	r0, r3, #30
   12bfe:	f53f af3c 	bmi.w	12a7a <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   12c02:	6862      	ldr	r2, [r4, #4]
   12c04:	f082 0202 	eor.w	r2, r2, #2
   12c08:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   12c0c:	f00b 0201 	and.w	r2, fp, #1
   12c10:	210e      	movs	r1, #14
   12c12:	4638      	mov	r0, r7
   12c14:	f007 fdc5 	bl	1a7a2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   12c18:	1e73      	subs	r3, r6, #1
   12c1a:	425a      	negs	r2, r3
   12c1c:	415a      	adcs	r2, r3
   12c1e:	2108      	movs	r1, #8
   12c20:	4638      	mov	r0, r7
   12c22:	f007 fdbe 	bl	1a7a2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   12c26:	1eb1      	subs	r1, r6, #2
   12c28:	424a      	negs	r2, r1
   12c2a:	414a      	adcs	r2, r1
   12c2c:	4638      	mov	r0, r7
   12c2e:	2109      	movs	r1, #9
   12c30:	f007 fdb7 	bl	1a7a2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   12c34:	6862      	ldr	r2, [r4, #4]
   12c36:	210a      	movs	r1, #10
   12c38:	f002 0201 	and.w	r2, r2, #1
   12c3c:	4638      	mov	r0, r7
   12c3e:	f007 fdb0 	bl	1a7a2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   12c42:	4642      	mov	r2, r8
   12c44:	210b      	movs	r1, #11
   12c46:	4638      	mov	r0, r7
   12c48:	f007 fdab 	bl	1a7a2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   12c4c:	6862      	ldr	r2, [r4, #4]
   12c4e:	210d      	movs	r1, #13
   12c50:	f3c2 0280 	ubfx	r2, r2, #2, #1
   12c54:	4638      	mov	r0, r7
   12c56:	f007 fda4 	bl	1a7a2 <atomic_set_bit_to>
	return 0;
   12c5a:	f04f 0b00 	mov.w	fp, #0
   12c5e:	e70c      	b.n	12a7a <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   12c60:	b115      	cbz	r5, 12c68 <bt_le_adv_start_legacy+0x224>
		bt_conn_unref(conn);
   12c62:	4628      	mov	r0, r5
   12c64:	f007 fefd 	bl	1aa62 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   12c68:	f1b9 0f00 	cmp.w	r9, #0
   12c6c:	d1ce      	bne.n	12c0c <bt_le_adv_start_legacy+0x1c8>
   12c6e:	e7c8      	b.n	12c02 <bt_le_adv_start_legacy+0x1be>
		return -EAGAIN;
   12c70:	f06f 0b0a 	mvn.w	fp, #10
   12c74:	e701      	b.n	12a7a <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   12c76:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   12c7a:	e6fe      	b.n	12a7a <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   12c7c:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   12c80:	e6fb      	b.n	12a7a <bt_le_adv_start_legacy+0x36>
   12c82:	4683      	mov	fp, r0
   12c84:	e6f9      	b.n	12a7a <bt_le_adv_start_legacy+0x36>
   12c86:	bf00      	nop
   12c88:	20000444 	.word	0x20000444
   12c8c:	20000378 	.word	0x20000378
   12c90:	0001dbbb 	.word	0x0001dbbb

00012c94 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   12c94:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12c96:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   12c98:	9a06      	ldr	r2, [sp, #24]
{
   12c9a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   12c9c:	e9cd 3200 	strd	r3, r2, [sp]
   12ca0:	462b      	mov	r3, r5
   12ca2:	460a      	mov	r2, r1
   12ca4:	4601      	mov	r1, r0
   12ca6:	4811      	ldr	r0, [pc, #68]	; (12cec <bt_le_adv_start+0x58>)
   12ca8:	f7ff fecc 	bl	12a44 <bt_le_adv_start_legacy>
   12cac:	4621      	mov	r1, r4
   12cae:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   12cb0:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   12cb2:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   12cb6:	429d      	cmp	r5, r3
   12cb8:	d102      	bne.n	12cc0 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   12cba:	4630      	mov	r0, r6
   12cbc:	b002      	add	sp, #8
   12cbe:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   12cc0:	880a      	ldrh	r2, [r1, #0]
   12cc2:	4282      	cmp	r2, r0
   12cc4:	d104      	bne.n	12cd0 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   12cc6:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   12cc8:	b112      	cbz	r2, 12cd0 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   12cca:	7812      	ldrb	r2, [r2, #0]
   12ccc:	07d2      	lsls	r2, r2, #31
   12cce:	d402      	bmi.n	12cd6 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   12cd0:	3301      	adds	r3, #1
   12cd2:	3108      	adds	r1, #8
   12cd4:	e7ef      	b.n	12cb6 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   12cd6:	4906      	ldr	r1, [pc, #24]	; (12cf0 <bt_le_adv_start+0x5c>)
   12cd8:	4806      	ldr	r0, [pc, #24]	; (12cf4 <bt_le_adv_start+0x60>)
   12cda:	f009 ff21 	bl	1cb20 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   12cde:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   12ce2:	2300      	movs	r3, #0
   12ce4:	4803      	ldr	r0, [pc, #12]	; (12cf4 <bt_le_adv_start+0x60>)
   12ce6:	f005 faf3 	bl	182d0 <k_work_reschedule>
   12cea:	e7e6      	b.n	12cba <bt_le_adv_start+0x26>
   12cec:	20000390 	.word	0x20000390
   12cf0:	0001a92f 	.word	0x0001a92f
   12cf4:	200003a8 	.word	0x200003a8

00012cf8 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   12cf8:	b510      	push	{r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   12cfa:	481a      	ldr	r0, [pc, #104]	; (12d64 <bt_le_adv_stop+0x6c>)
   12cfc:	f007 fe14 	bl	1a928 <bt_le_lim_adv_cancel_timeout>
   12d00:	4819      	ldr	r0, [pc, #100]	; (12d68 <bt_le_adv_stop+0x70>)
   12d02:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   12d06:	f007 fcd7 	bl	1a6b8 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12d0a:	4817      	ldr	r0, [pc, #92]	; (12d68 <bt_le_adv_stop+0x70>)
   12d0c:	f007 fcce 	bl	1a6ac <atomic_get>
   12d10:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   12d12:	061a      	lsls	r2, r3, #24
   12d14:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   12d18:	d523      	bpl.n	12d62 <bt_le_adv_stop+0x6a>
   12d1a:	4813      	ldr	r0, [pc, #76]	; (12d68 <bt_le_adv_stop+0x70>)
   12d1c:	f007 fcc6 	bl	1a6ac <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12d20:	0543      	lsls	r3, r0, #21
   12d22:	d514      	bpl.n	12d4e <bt_le_adv_stop+0x56>
   12d24:	4911      	ldr	r1, [pc, #68]	; (12d6c <bt_le_adv_stop+0x74>)
   12d26:	4812      	ldr	r0, [pc, #72]	; (12d70 <bt_le_adv_stop+0x78>)
   12d28:	2207      	movs	r2, #7
   12d2a:	f00a fa4a 	bl	1d1c2 <memcmp>
   12d2e:	4b11      	ldr	r3, [pc, #68]	; (12d74 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   12d30:	b998      	cbnz	r0, 12d5a <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   12d32:	4911      	ldr	r1, [pc, #68]	; (12d78 <bt_le_adv_stop+0x80>)
   12d34:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   12d36:	7e18      	ldrb	r0, [r3, #24]
   12d38:	f000 fbac 	bl	13494 <bt_conn_lookup_state_le>
   12d3c:	4604      	mov	r4, r0
	if (conn) {
   12d3e:	b130      	cbz	r0, 12d4e <bt_le_adv_stop+0x56>
		conn->err = status;
   12d40:	2100      	movs	r1, #0
   12d42:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12d44:	f000 fa18 	bl	13178 <bt_conn_set_state>
		bt_conn_unref(conn);
   12d48:	4620      	mov	r0, r4
   12d4a:	f007 fe8a 	bl	1aa62 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   12d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   12d52:	4804      	ldr	r0, [pc, #16]	; (12d64 <bt_le_adv_stop+0x6c>)
   12d54:	2100      	movs	r1, #0
   12d56:	f007 bdc2 	b.w	1a8de <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   12d5a:	2205      	movs	r2, #5
   12d5c:	f103 0121 	add.w	r1, r3, #33	; 0x21
   12d60:	e7e9      	b.n	12d36 <bt_le_adv_stop+0x3e>
}
   12d62:	bd10      	pop	{r4, pc}
   12d64:	20000390 	.word	0x20000390
   12d68:	200003a0 	.word	0x200003a0
   12d6c:	0001dbbb 	.word	0x0001dbbb
   12d70:	20000399 	.word	0x20000399
   12d74:	20000378 	.word	0x20000378
   12d78:	0001dbb4 	.word	0x0001dbb4

00012d7c <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   12d7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12d7e:	4c20      	ldr	r4, [pc, #128]	; (12e00 <bt_le_adv_resume+0x84>)
   12d80:	4620      	mov	r0, r4
   12d82:	f007 fc93 	bl	1a6ac <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   12d86:	0440      	lsls	r0, r0, #17
   12d88:	d538      	bpl.n	12dfc <bt_le_adv_resume+0x80>
   12d8a:	4620      	mov	r0, r4
   12d8c:	f007 fc8e 	bl	1a6ac <atomic_get>
   12d90:	0601      	lsls	r1, r0, #24
   12d92:	d433      	bmi.n	12dfc <bt_le_adv_resume+0x80>
   12d94:	4620      	mov	r0, r4
   12d96:	f007 fc89 	bl	1a6ac <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   12d9a:	0542      	lsls	r2, r0, #21
   12d9c:	d52e      	bpl.n	12dfc <bt_le_adv_resume+0x80>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   12d9e:	a901      	add	r1, sp, #4
   12da0:	f1a4 0010 	sub.w	r0, r4, #16
   12da4:	f7ff fdd2 	bl	1294c <le_adv_start_add_conn>
	if (err) {
   12da8:	4605      	mov	r5, r0
   12daa:	bb38      	cbnz	r0, 12dfc <bt_le_adv_resume+0x80>
	return bt_le_adv_set_enable_legacy(adv, enable);
   12dac:	2101      	movs	r1, #1
   12dae:	f1a4 0010 	sub.w	r0, r4, #16
   12db2:	f007 fd94 	bl	1a8de <bt_le_adv_set_enable_legacy>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   12db6:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   12db8:	b928      	cbnz	r0, 12dc6 <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   12dba:	4630      	mov	r0, r6
	if (persist_paused) {
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   12dbc:	b002      	add	sp, #8
   12dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   12dc2:	f007 be4e 	b.w	1aa62 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12dc6:	4629      	mov	r1, r5
   12dc8:	4630      	mov	r0, r6
   12dca:	f000 f9d5 	bl	13178 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12dce:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   12dd2:	4620      	mov	r0, r4
   12dd4:	f007 fc70 	bl	1a6b8 <atomic_and>
   12dd8:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   12dda:	4630      	mov	r0, r6
   12ddc:	f007 fe41 	bl	1aa62 <bt_conn_unref>
	if (persist_paused) {
   12de0:	046b      	lsls	r3, r5, #17
   12de2:	d50b      	bpl.n	12dfc <bt_le_adv_resume+0x80>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12de4:	f3bf 8f5b 	dmb	ish
   12de8:	e854 3f00 	ldrex	r3, [r4]
   12dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   12df0:	e844 3200 	strex	r2, r3, [r4]
   12df4:	2a00      	cmp	r2, #0
   12df6:	d1f7      	bne.n	12de8 <bt_le_adv_resume+0x6c>
   12df8:	f3bf 8f5b 	dmb	ish
}
   12dfc:	b002      	add	sp, #8
   12dfe:	bd70      	pop	{r4, r5, r6, pc}
   12e00:	200003a0 	.word	0x200003a0

00012e04 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   12e04:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   12e06:	4b0b      	ldr	r3, [pc, #44]	; (12e34 <notify_connected+0x30>)
   12e08:	681d      	ldr	r5, [r3, #0]
{
   12e0a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   12e0c:	b925      	cbnz	r5, 12e18 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   12e0e:	4d0a      	ldr	r5, [pc, #40]	; (12e38 <notify_connected+0x34>)
   12e10:	4e0a      	ldr	r6, [pc, #40]	; (12e3c <notify_connected+0x38>)
   12e12:	42b5      	cmp	r5, r6
   12e14:	d307      	bcc.n	12e26 <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   12e16:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   12e18:	682b      	ldr	r3, [r5, #0]
   12e1a:	b113      	cbz	r3, 12e22 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   12e1c:	7a61      	ldrb	r1, [r4, #9]
   12e1e:	4620      	mov	r0, r4
   12e20:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   12e22:	692d      	ldr	r5, [r5, #16]
   12e24:	e7f2      	b.n	12e0c <notify_connected+0x8>
		if (cb->connected) {
   12e26:	682b      	ldr	r3, [r5, #0]
   12e28:	b113      	cbz	r3, 12e30 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   12e2a:	7a61      	ldrb	r1, [r4, #9]
   12e2c:	4620      	mov	r0, r4
   12e2e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   12e30:	3514      	adds	r5, #20
   12e32:	e7ee      	b.n	12e12 <notify_connected+0xe>
   12e34:	20001c00 	.word	0x20001c00
   12e38:	0001d498 	.word	0x0001d498
   12e3c:	0001d498 	.word	0x0001d498

00012e40 <tx_notify>:
{
   12e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   12e44:	4f15      	ldr	r7, [pc, #84]	; (12e9c <tx_notify+0x5c>)
{
   12e46:	4604      	mov	r4, r0
	tx->cb = NULL;
   12e48:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   12e4c:	f04f 0240 	mov.w	r2, #64	; 0x40
   12e50:	f3ef 8311 	mrs	r3, BASEPRI
   12e54:	f382 8812 	msr	BASEPRI_MAX, r2
   12e58:	f3bf 8f6f 	isb	sy
   12e5c:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   12e5e:	b929      	cbnz	r1, 12e6c <tx_notify+0x2c>
	__asm__ volatile(
   12e60:	f383 8811 	msr	BASEPRI, r3
   12e64:	f3bf 8f6f 	isb	sy
}
   12e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12e6c:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   12e6e:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   12e70:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12e72:	4281      	cmp	r1, r0
	list->tail = node;
   12e74:	bf08      	it	eq
   12e76:	6262      	streq	r2, [r4, #36]	; 0x24
   12e78:	f383 8811 	msr	BASEPRI, r3
   12e7c:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   12e80:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   12e84:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   12e88:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   12e8c:	4638      	mov	r0, r7
   12e8e:	f009 fd33 	bl	1c8f8 <k_queue_append>
		cb(conn, user_data, 0);
   12e92:	2200      	movs	r2, #0
   12e94:	4631      	mov	r1, r6
   12e96:	4620      	mov	r0, r4
   12e98:	47a8      	blx	r5
	while (1) {
   12e9a:	e7d7      	b.n	12e4c <tx_notify+0xc>
   12e9c:	200007a8 	.word	0x200007a8

00012ea0 <conn_tx_destroy>:
{
   12ea0:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   12ea2:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   12ea6:	2200      	movs	r2, #0
	tx->user_data = NULL;
   12ea8:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   12eac:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   12eae:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   12eb0:	4805      	ldr	r0, [pc, #20]	; (12ec8 <conn_tx_destroy+0x28>)
   12eb2:	f009 fd21 	bl	1c8f8 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   12eb6:	4631      	mov	r1, r6
   12eb8:	4620      	mov	r0, r4
   12eba:	462b      	mov	r3, r5
   12ebc:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   12ec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   12ec4:	4718      	bx	r3
   12ec6:	bf00      	nop
   12ec8:	200007a8 	.word	0x200007a8

00012ecc <send_frag>:
{
   12ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12ed0:	4604      	mov	r4, r0
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   12ed2:	694d      	ldr	r5, [r1, #20]
{
   12ed4:	460e      	mov	r6, r1
   12ed6:	4617      	mov	r7, r2
   12ed8:	4699      	mov	r9, r3
	return z_impl_k_sem_take(sem, timeout);
   12eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12ede:	4847      	ldr	r0, [pc, #284]	; (12ffc <send_frag+0x130>)
   12ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12ee4:	f005 f808 	bl	17ef8 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   12ee8:	7aa3      	ldrb	r3, [r4, #10]
   12eea:	2b07      	cmp	r3, #7
   12eec:	d17a      	bne.n	12fe4 <send_frag+0x118>
	__asm__ volatile(
   12eee:	f04f 0340 	mov.w	r3, #64	; 0x40
   12ef2:	f3ef 8211 	mrs	r2, BASEPRI
   12ef6:	f383 8812 	msr	BASEPRI_MAX, r3
   12efa:	f3bf 8f6f 	isb	sy
	if (tx) {
   12efe:	2d00      	cmp	r5, #0
   12f00:	d048      	beq.n	12f94 <send_frag+0xc8>
	parent->next = child;
   12f02:	2300      	movs	r3, #0
   12f04:	602b      	str	r3, [r5, #0]
	return list->tail;
   12f06:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   12f08:	2b00      	cmp	r3, #0
   12f0a:	d140      	bne.n	12f8e <send_frag+0xc2>
	list->head = node;
   12f0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   12f10:	f382 8811 	msr	BASEPRI, r2
   12f14:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   12f18:	2104      	movs	r1, #4
   12f1a:	f106 0008 	add.w	r0, r6, #8
   12f1e:	f009 f834 	bl	1bf8a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   12f22:	8823      	ldrh	r3, [r4, #0]
   12f24:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   12f28:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   12f2c:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   12f2e:	89b3      	ldrh	r3, [r6, #12]
   12f30:	3b04      	subs	r3, #4
   12f32:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   12f34:	2302      	movs	r3, #2
   12f36:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   12f38:	4630      	mov	r0, r6
   12f3a:	f7fe ff8d 	bl	11e58 <bt_send>
	if (err) {
   12f3e:	2800      	cmp	r0, #0
   12f40:	d05a      	beq.n	12ff8 <send_frag+0x12c>
	__asm__ volatile(
   12f42:	f04f 0240 	mov.w	r2, #64	; 0x40
   12f46:	f3ef 8311 	mrs	r3, BASEPRI
   12f4a:	f382 8812 	msr	BASEPRI_MAX, r2
   12f4e:	f3bf 8f6f 	isb	sy
		if (tx) {
   12f52:	2d00      	cmp	r5, #0
   12f54:	d034      	beq.n	12fc0 <send_frag+0xf4>
	return list->head;
   12f56:	6962      	ldr	r2, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12f58:	2100      	movs	r1, #0
   12f5a:	b152      	cbz	r2, 12f72 <send_frag+0xa6>
   12f5c:	4295      	cmp	r5, r2
   12f5e:	d12c      	bne.n	12fba <send_frag+0xee>
	return node->next;
   12f60:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   12f62:	bb21      	cbnz	r1, 12fae <send_frag+0xe2>
   12f64:	69a1      	ldr	r1, [r4, #24]
	list->head = node;
   12f66:	6162      	str	r2, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   12f68:	428d      	cmp	r5, r1
   12f6a:	d100      	bne.n	12f6e <send_frag+0xa2>
	list->tail = node;
   12f6c:	61a2      	str	r2, [r4, #24]
	parent->next = child;
   12f6e:	2200      	movs	r2, #0
   12f70:	602a      	str	r2, [r5, #0]
	__asm__ volatile(
   12f72:	f383 8811 	msr	BASEPRI, r3
   12f76:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   12f7a:	4820      	ldr	r0, [pc, #128]	; (12ffc <send_frag+0x130>)
   12f7c:	f004 ff96 	bl	17eac <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   12f80:	2300      	movs	r3, #0
   12f82:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   12f84:	4629      	mov	r1, r5
   12f86:	4620      	mov	r0, r4
   12f88:	f7ff ff8a 	bl	12ea0 <conn_tx_destroy>
   12f8c:	e024      	b.n	12fd8 <send_frag+0x10c>
   12f8e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   12f90:	61a5      	str	r5, [r4, #24]
}
   12f92:	e7bd      	b.n	12f10 <send_frag+0x44>
	return list->tail;
   12f94:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   12f96:	b133      	cbz	r3, 12fa6 <send_frag+0xda>
			pending_no_cb = &tail_tx->pending_no_cb;
   12f98:	f103 080c 	add.w	r8, r3, #12
   12f9c:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   12f9e:	3301      	adds	r3, #1
   12fa0:	f8c8 3000 	str.w	r3, [r8]
   12fa4:	e7b4      	b.n	12f10 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   12fa6:	69e3      	ldr	r3, [r4, #28]
   12fa8:	f104 081c 	add.w	r8, r4, #28
   12fac:	e7f7      	b.n	12f9e <send_frag+0xd2>
	parent->next = child;
   12fae:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   12fb0:	69a2      	ldr	r2, [r4, #24]
   12fb2:	4295      	cmp	r5, r2
	list->tail = node;
   12fb4:	bf08      	it	eq
   12fb6:	61a1      	streq	r1, [r4, #24]
}
   12fb8:	e7d9      	b.n	12f6e <send_frag+0xa2>
	return node->next;
   12fba:	4611      	mov	r1, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12fbc:	6812      	ldr	r2, [r2, #0]
   12fbe:	e7cc      	b.n	12f5a <send_frag+0x8e>
			(*pending_no_cb)--;
   12fc0:	f8d8 2000 	ldr.w	r2, [r8]
   12fc4:	3a01      	subs	r2, #1
   12fc6:	f8c8 2000 	str.w	r2, [r8]
   12fca:	f383 8811 	msr	BASEPRI, r3
   12fce:	f3bf 8f6f 	isb	sy
   12fd2:	480a      	ldr	r0, [pc, #40]	; (12ffc <send_frag+0x130>)
   12fd4:	f004 ff6a 	bl	17eac <z_impl_k_sem_give>
	if (always_consume) {
   12fd8:	f1b9 0f00 	cmp.w	r9, #0
   12fdc:	d108      	bne.n	12ff0 <send_frag+0x124>
	return false;
   12fde:	2000      	movs	r0, #0
}
   12fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12fe4:	4805      	ldr	r0, [pc, #20]	; (12ffc <send_frag+0x130>)
   12fe6:	f004 ff61 	bl	17eac <z_impl_k_sem_give>
	if (tx) {
   12fea:	2d00      	cmp	r5, #0
   12fec:	d1c8      	bne.n	12f80 <send_frag+0xb4>
   12fee:	e7f3      	b.n	12fd8 <send_frag+0x10c>
		net_buf_unref(buf);
   12ff0:	4630      	mov	r0, r6
   12ff2:	f002 f855 	bl	150a0 <net_buf_unref>
   12ff6:	e7f2      	b.n	12fde <send_frag+0x112>
	return true;
   12ff8:	2001      	movs	r0, #1
   12ffa:	e7f1      	b.n	12fe0 <send_frag+0x114>
   12ffc:	20000478 	.word	0x20000478

00013000 <bt_conn_get_pkts>:
}
   13000:	4800      	ldr	r0, [pc, #0]	; (13004 <bt_conn_get_pkts+0x4>)
   13002:	4770      	bx	lr
   13004:	20000478 	.word	0x20000478

00013008 <bt_conn_new>:
{
   13008:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1300a:	2200      	movs	r2, #0
   1300c:	4604      	mov	r4, r0
   1300e:	428a      	cmp	r2, r1
   13010:	d102      	bne.n	13018 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   13012:	2400      	movs	r4, #0
}
   13014:	4620      	mov	r0, r4
   13016:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13018:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   1301c:	2001      	movs	r0, #1
   1301e:	f3bf 8f5b 	dmb	ish
   13022:	e853 5f00 	ldrex	r5, [r3]
   13026:	2d00      	cmp	r5, #0
   13028:	d104      	bne.n	13034 <bt_conn_new+0x2c>
   1302a:	e843 0c00 	strex	ip, r0, [r3]
   1302e:	f1bc 0f00 	cmp.w	ip, #0
   13032:	d1f6      	bne.n	13022 <bt_conn_new+0x1a>
   13034:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   13038:	d002      	beq.n	13040 <bt_conn_new+0x38>
   1303a:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1303c:	4402      	add	r2, r0
   1303e:	e7e6      	b.n	1300e <bt_conn_new+0x6>
	if (!conn) {
   13040:	2c00      	cmp	r4, #0
   13042:	d0e6      	beq.n	13012 <bt_conn_new+0xa>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   13044:	22b8      	movs	r2, #184	; 0xb8
   13046:	2100      	movs	r1, #0
   13048:	4620      	mov	r0, r4
   1304a:	f00a f8d8 	bl	1d1fe <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1304e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   13052:	4904      	ldr	r1, [pc, #16]	; (13064 <bt_conn_new+0x5c>)
   13054:	f009 fd64 	bl	1cb20 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   13058:	4903      	ldr	r1, [pc, #12]	; (13068 <bt_conn_new+0x60>)
   1305a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1305e:	f009 fd1b 	bl	1ca98 <k_work_init>
	return conn;
   13062:	e7d7      	b.n	13014 <bt_conn_new+0xc>
   13064:	00013545 	.word	0x00013545
   13068:	0001a933 	.word	0x0001a933

0001306c <bt_conn_send_cb>:
{
   1306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1306e:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   13070:	7a83      	ldrb	r3, [r0, #10]
   13072:	2b07      	cmp	r3, #7
{
   13074:	4604      	mov	r4, r0
   13076:	460e      	mov	r6, r1
   13078:	4615      	mov	r5, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1307a:	d11b      	bne.n	130b4 <bt_conn_send_cb+0x48>
	if (cb) {
   1307c:	b342      	cbz	r2, 130d0 <bt_conn_send_cb+0x64>
	return z_impl_z_current_get();
   1307e:	f005 fc0f 	bl	188a0 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   13082:	4b16      	ldr	r3, [pc, #88]	; (130dc <bt_conn_send_cb+0x70>)
   13084:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   13086:	4816      	ldr	r0, [pc, #88]	; (130e0 <bt_conn_send_cb+0x74>)
   13088:	bf07      	ittee	eq
   1308a:	2200      	moveq	r2, #0
   1308c:	2300      	moveq	r3, #0
   1308e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   13092:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   13096:	f004 fed5 	bl	17e44 <z_impl_k_queue_get>
   1309a:	4601      	mov	r1, r0
		if (!tx) {
   1309c:	b1d0      	cbz	r0, 130d4 <bt_conn_send_cb+0x68>
		if (conn->state != BT_CONN_CONNECTED) {
   1309e:	7aa3      	ldrb	r3, [r4, #10]
   130a0:	2b07      	cmp	r3, #7
   130a2:	f04f 0200 	mov.w	r2, #0
   130a6:	d008      	beq.n	130ba <bt_conn_send_cb+0x4e>
	tx->user_data = NULL;
   130a8:	e9c0 2201 	strd	r2, r2, [r0, #4]
	tx->pending_no_cb = 0U;
   130ac:	60c2      	str	r2, [r0, #12]
	k_fifo_put(&free_tx, tx);
   130ae:	480c      	ldr	r0, [pc, #48]	; (130e0 <bt_conn_send_cb+0x74>)
   130b0:	f009 fc22 	bl	1c8f8 <k_queue_append>
		return -ENOTCONN;
   130b4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   130b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx->user_data = user_data;
   130ba:	e9c0 5701 	strd	r5, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   130be:	60c2      	str	r2, [r0, #12]
		tx_data(buf)->tx = tx;
   130c0:	6171      	str	r1, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   130c2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   130c6:	4631      	mov	r1, r6
   130c8:	f008 ff15 	bl	1bef6 <net_buf_put>
	return 0;
   130cc:	2000      	movs	r0, #0
   130ce:	e7f3      	b.n	130b8 <bt_conn_send_cb+0x4c>
   130d0:	4611      	mov	r1, r2
   130d2:	e7f5      	b.n	130c0 <bt_conn_send_cb+0x54>
			return -ENOBUFS;
   130d4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   130d8:	e7ee      	b.n	130b8 <bt_conn_send_cb+0x4c>
   130da:	bf00      	nop
   130dc:	20001af0 	.word	0x20001af0
   130e0:	200007a8 	.word	0x200007a8

000130e4 <bt_conn_prepare_events>:
{
   130e4:	b570      	push	{r4, r5, r6, lr}
   130e6:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   130e8:	481c      	ldr	r0, [pc, #112]	; (1315c <bt_conn_prepare_events+0x78>)
   130ea:	f00a f85a 	bl	1d1a2 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   130ee:	4b1b      	ldr	r3, [pc, #108]	; (1315c <bt_conn_prepare_events+0x78>)
   130f0:	2200      	movs	r2, #0
   130f2:	4620      	mov	r0, r4
   130f4:	2101      	movs	r1, #1
   130f6:	f00a f837 	bl	1d168 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   130fa:	f3bf 8f5b 	dmb	ish
   130fe:	4a18      	ldr	r2, [pc, #96]	; (13160 <bt_conn_prepare_events+0x7c>)
   13100:	6813      	ldr	r3, [r2, #0]
   13102:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   13106:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   1310a:	b90b      	cbnz	r3, 13110 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1310c:	2001      	movs	r0, #1
}
   1310e:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   13110:	f1a2 03b8 	sub.w	r3, r2, #184	; 0xb8
   13114:	f812 2cae 	ldrb.w	r2, [r2, #-174]
   13118:	b992      	cbnz	r2, 13140 <bt_conn_prepare_events+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1311a:	f3bf 8f5b 	dmb	ish
   1311e:	1d1a      	adds	r2, r3, #4
   13120:	e852 1f00 	ldrex	r1, [r2]
   13124:	f021 0540 	bic.w	r5, r1, #64	; 0x40
   13128:	e842 5600 	strex	r6, r5, [r2]
   1312c:	2e00      	cmp	r6, #0
   1312e:	d1f7      	bne.n	13120 <bt_conn_prepare_events+0x3c>
   13130:	f3bf 8f5b 	dmb	ish
   13134:	064a      	lsls	r2, r1, #25
   13136:	d503      	bpl.n	13140 <bt_conn_prepare_events+0x5c>
		conn_cleanup(conn);
   13138:	4618      	mov	r0, r3
   1313a:	f007 fc06 	bl	1a94a <conn_cleanup>
		return -ENOTCONN;
   1313e:	e7e5      	b.n	1310c <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   13140:	7a9b      	ldrb	r3, [r3, #10]
   13142:	2b07      	cmp	r3, #7
   13144:	d1e2      	bne.n	1310c <bt_conn_prepare_events+0x28>
	k_poll_event_init(&events[0],
   13146:	4b07      	ldr	r3, [pc, #28]	; (13164 <bt_conn_prepare_events+0x80>)
   13148:	2200      	movs	r2, #0
   1314a:	2104      	movs	r1, #4
   1314c:	f00a f80c 	bl	1d168 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   13150:	2301      	movs	r3, #1
   13152:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   13156:	2002      	movs	r0, #2
	return ev_count;
   13158:	e7d9      	b.n	1310e <bt_conn_prepare_events+0x2a>
   1315a:	bf00      	nop
   1315c:	200005cc 	.word	0x200005cc
   13160:	20001808 	.word	0x20001808
   13164:	20001788 	.word	0x20001788

00013168 <bt_conn_lookup_handle>:
{
   13168:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1316a:	2101      	movs	r1, #1
   1316c:	4801      	ldr	r0, [pc, #4]	; (13174 <bt_conn_lookup_handle+0xc>)
   1316e:	f007 bc94 	b.w	1aa9a <conn_lookup_handle>
   13172:	bf00      	nop
   13174:	20001750 	.word	0x20001750

00013178 <bt_conn_set_state>:
{
   13178:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   1317a:	7a85      	ldrb	r5, [r0, #10]
   1317c:	428d      	cmp	r5, r1
{
   1317e:	4604      	mov	r4, r0
	if (conn->state == state) {
   13180:	f000 808b 	beq.w	1329a <bt_conn_set_state+0x122>
	conn->state = state;
   13184:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   13186:	b925      	cbnz	r5, 13192 <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   13188:	7883      	ldrb	r3, [r0, #2]
   1318a:	2b08      	cmp	r3, #8
   1318c:	d001      	beq.n	13192 <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   1318e:	f007 fc4c 	bl	1aa2a <bt_conn_ref>
	switch (conn->state) {
   13192:	7aa3      	ldrb	r3, [r4, #10]
   13194:	2b01      	cmp	r3, #1
   13196:	d116      	bne.n	131c6 <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
   13198:	4d4f      	ldr	r5, [pc, #316]	; (132d8 <bt_conn_set_state+0x160>)
		tx->pending_no_cb = 0U;
   1319a:	2600      	movs	r6, #0
	__asm__ volatile(
   1319c:	f04f 0240 	mov.w	r2, #64	; 0x40
   131a0:	f3ef 8311 	mrs	r3, BASEPRI
   131a4:	f382 8812 	msr	BASEPRI_MAX, r2
   131a8:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   131ac:	69e2      	ldr	r2, [r4, #28]
   131ae:	2a00      	cmp	r2, #0
   131b0:	d06d      	beq.n	1328e <bt_conn_set_state+0x116>
			conn->pending_no_cb--;
   131b2:	3a01      	subs	r2, #1
   131b4:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   131b6:	f383 8811 	msr	BASEPRI, r3
   131ba:	f3bf 8f6f 	isb	sy
   131be:	4628      	mov	r0, r5
   131c0:	f004 fe74 	bl	17eac <z_impl_k_sem_give>
}
   131c4:	e7ea      	b.n	1319c <bt_conn_set_state+0x24>
	switch (conn->state) {
   131c6:	2b07      	cmp	r3, #7
   131c8:	d009      	beq.n	131de <bt_conn_set_state+0x66>
   131ca:	2b00      	cmp	r3, #0
   131cc:	d165      	bne.n	1329a <bt_conn_set_state+0x122>
		if (conn->type == BT_CONN_TYPE_SCO) {
   131ce:	78a3      	ldrb	r3, [r4, #2]
   131d0:	2b04      	cmp	r3, #4
   131d2:	d11e      	bne.n	13212 <bt_conn_set_state+0x9a>
			bt_conn_unref(conn);
   131d4:	4620      	mov	r0, r4
}
   131d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   131da:	f007 bc42 	b.w	1aa62 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   131de:	78a3      	ldrb	r3, [r4, #2]
   131e0:	2b04      	cmp	r3, #4
   131e2:	d05a      	beq.n	1329a <bt_conn_set_state+0x122>
	z_impl_k_queue_init(queue);
   131e4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   131e8:	f009 fb7a 	bl	1c8e0 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   131ec:	483b      	ldr	r0, [pc, #236]	; (132dc <bt_conn_set_state+0x164>)
   131ee:	2100      	movs	r1, #0
   131f0:	f005 fe3a 	bl	18e68 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   131f4:	2300      	movs	r3, #0
	list->tail = NULL;
   131f6:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   131fa:	78e3      	ldrb	r3, [r4, #3]
   131fc:	2b01      	cmp	r3, #1
   131fe:	d14c      	bne.n	1329a <bt_conn_set_state+0x122>
			k_work_schedule(&conn->deferred_work,
   13200:	f104 0058 	add.w	r0, r4, #88	; 0x58
   13204:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   13208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   1320c:	2300      	movs	r3, #0
   1320e:	f005 b82b 	b.w	18268 <k_work_schedule>
		switch (old_state) {
   13212:	3d01      	subs	r5, #1
   13214:	2d05      	cmp	r5, #5
   13216:	d840      	bhi.n	1329a <bt_conn_set_state+0x122>
   13218:	a301      	add	r3, pc, #4	; (adr r3, 13220 <bt_conn_set_state+0xa8>)
   1321a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   1321e:	bf00      	nop
   13220:	00013239 	.word	0x00013239
   13224:	00013281 	.word	0x00013281
   13228:	000131d5 	.word	0x000131d5
   1322c:	000131d5 	.word	0x000131d5
   13230:	00013281 	.word	0x00013281
   13234:	00013281 	.word	0x00013281
			tx_notify(conn);
   13238:	4620      	mov	r0, r4
   1323a:	f7ff fe01 	bl	12e40 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1323e:	78a3      	ldrb	r3, [r4, #2]
   13240:	2b01      	cmp	r3, #1
   13242:	d10a      	bne.n	1325a <bt_conn_set_state+0xe2>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   13244:	f104 0558 	add.w	r5, r4, #88	; 0x58
   13248:	4628      	mov	r0, r5
   1324a:	f009 fc75 	bl	1cb38 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1324e:	f010 0f0c 	tst.w	r0, #12
   13252:	d002      	beq.n	1325a <bt_conn_set_state+0xe2>
				k_work_cancel_delayable(&conn->deferred_work);
   13254:	4628      	mov	r0, r5
   13256:	f009 fc71 	bl	1cb3c <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1325a:	f3bf 8f5b 	dmb	ish
   1325e:	3404      	adds	r4, #4
   13260:	e854 3f00 	ldrex	r3, [r4]
   13264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13268:	e844 3200 	strex	r2, r3, [r4]
   1326c:	2a00      	cmp	r2, #0
   1326e:	d1f7      	bne.n	13260 <bt_conn_set_state+0xe8>
   13270:	f3bf 8f5b 	dmb	ish
   13274:	4819      	ldr	r0, [pc, #100]	; (132dc <bt_conn_set_state+0x164>)
}
   13276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1327a:	2100      	movs	r1, #0
   1327c:	f005 bdf4 	b.w	18e68 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   13280:	7a63      	ldrb	r3, [r4, #9]
   13282:	2b00      	cmp	r3, #0
   13284:	d0a6      	beq.n	131d4 <bt_conn_set_state+0x5c>
				notify_connected(conn);
   13286:	4620      	mov	r0, r4
   13288:	f7ff fdbc 	bl	12e04 <notify_connected>
   1328c:	e7a2      	b.n	131d4 <bt_conn_set_state+0x5c>
	return list->head;
   1328e:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   13290:	b921      	cbnz	r1, 1329c <bt_conn_set_state+0x124>
   13292:	f383 8811 	msr	BASEPRI, r3
   13296:	f3bf 8f6f 	isb	sy
}
   1329a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1329c:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   1329e:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   132a0:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   132a2:	4281      	cmp	r1, r0
	list->tail = node;
   132a4:	bf08      	it	eq
   132a6:	61a2      	streq	r2, [r4, #24]
   132a8:	f383 8811 	msr	BASEPRI, r3
   132ac:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   132b0:	f04f 0240 	mov.w	r2, #64	; 0x40
   132b4:	f3ef 8311 	mrs	r3, BASEPRI
   132b8:	f382 8812 	msr	BASEPRI_MAX, r2
   132bc:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   132c0:	68ca      	ldr	r2, [r1, #12]
   132c2:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   132c4:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   132c6:	f383 8811 	msr	BASEPRI, r3
   132ca:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   132ce:	4620      	mov	r0, r4
   132d0:	f7ff fde6 	bl	12ea0 <conn_tx_destroy>
   132d4:	e773      	b.n	131be <bt_conn_set_state+0x46>
   132d6:	bf00      	nop
   132d8:	20000478 	.word	0x20000478
   132dc:	200005cc 	.word	0x200005cc

000132e0 <bt_conn_index>:
		index = conn - acl_conns;
   132e0:	4b03      	ldr	r3, [pc, #12]	; (132f0 <bt_conn_index+0x10>)
   132e2:	1ac0      	subs	r0, r0, r3
   132e4:	4b03      	ldr	r3, [pc, #12]	; (132f4 <bt_conn_index+0x14>)
   132e6:	1180      	asrs	r0, r0, #6
   132e8:	4358      	muls	r0, r3
}
   132ea:	b2c0      	uxtb	r0, r0
   132ec:	4770      	bx	lr
   132ee:	bf00      	nop
   132f0:	20001750 	.word	0x20001750
   132f4:	aaaaaaab 	.word	0xaaaaaaab

000132f8 <bt_conn_create_pdu_timeout>:
{
   132f8:	b538      	push	{r3, r4, r5, lr}
   132fa:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   132fc:	4906      	ldr	r1, [pc, #24]	; (13318 <bt_conn_create_pdu_timeout+0x20>)
   132fe:	2800      	cmp	r0, #0
   13300:	bf08      	it	eq
   13302:	4608      	moveq	r0, r1
   13304:	f008 fd8a 	bl	1be1c <net_buf_alloc_fixed>
	if (!buf) {
   13308:	4604      	mov	r4, r0
   1330a:	b118      	cbz	r0, 13314 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   1330c:	1d29      	adds	r1, r5, #4
   1330e:	3008      	adds	r0, #8
   13310:	f008 fda3 	bl	1be5a <net_buf_simple_reserve>
}
   13314:	4620      	mov	r0, r4
   13316:	bd38      	pop	{r3, r4, r5, pc}
   13318:	200007c0 	.word	0x200007c0

0001331c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1331e:	f3bf 8f5b 	dmb	ish
   13322:	6842      	ldr	r2, [r0, #4]
   13324:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   13328:	05d2      	lsls	r2, r2, #23
{
   1332a:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1332c:	f100 0304 	add.w	r3, r0, #4
   13330:	d519      	bpl.n	13366 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   13332:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   13336:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   1333a:	4291      	cmp	r1, r2
   1333c:	d813      	bhi.n	13366 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   1333e:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   13342:	4291      	cmp	r1, r2
   13344:	d30f      	bcc.n	13366 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   13346:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   1334a:	4291      	cmp	r1, r2
   1334c:	d10b      	bne.n	13366 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1334e:	f3bf 8f5b 	dmb	ish
   13352:	e853 1f00 	ldrex	r1, [r3]
   13356:	f421 7180 	bic.w	r1, r1, #256	; 0x100
   1335a:	e843 1200 	strex	r2, r1, [r3]
   1335e:	2a00      	cmp	r2, #0
   13360:	d1f7      	bne.n	13352 <notify_le_param_updated+0x36>
   13362:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   13366:	4b10      	ldr	r3, [pc, #64]	; (133a8 <notify_le_param_updated+0x8c>)
   13368:	681d      	ldr	r5, [r3, #0]
   1336a:	b925      	cbnz	r5, 13376 <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1336c:	4d0f      	ldr	r5, [pc, #60]	; (133ac <notify_le_param_updated+0x90>)
   1336e:	4f10      	ldr	r7, [pc, #64]	; (133b0 <notify_le_param_updated+0x94>)
   13370:	42bd      	cmp	r5, r7
   13372:	d30c      	bcc.n	1338e <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   13374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   13376:	68ee      	ldr	r6, [r5, #12]
   13378:	b13e      	cbz	r6, 1338a <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   1337a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1337e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   13382:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   13386:	4620      	mov	r0, r4
   13388:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1338a:	692d      	ldr	r5, [r5, #16]
   1338c:	e7ed      	b.n	1336a <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   1338e:	68ee      	ldr	r6, [r5, #12]
   13390:	b13e      	cbz	r6, 133a2 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
   13392:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   13396:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1339a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1339e:	4620      	mov	r0, r4
   133a0:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   133a2:	3514      	adds	r5, #20
   133a4:	e7e4      	b.n	13370 <notify_le_param_updated+0x54>
   133a6:	bf00      	nop
   133a8:	20001c00 	.word	0x20001c00
   133ac:	0001d498 	.word	0x0001d498
   133b0:	0001d498 	.word	0x0001d498

000133b4 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   133b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   133b8:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   133ba:	4608      	mov	r0, r1
{
   133bc:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   133be:	f007 f898 	bl	1a4f2 <bt_le_conn_params_valid>
   133c2:	4605      	mov	r5, r0
   133c4:	b918      	cbnz	r0, 133ce <le_param_req+0x1a>
		return false;
   133c6:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   133c8:	4628      	mov	r0, r5
   133ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   133ce:	4b13      	ldr	r3, [pc, #76]	; (1341c <le_param_req+0x68>)
   133d0:	681e      	ldr	r6, [r3, #0]
   133d2:	b946      	cbnz	r6, 133e6 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   133d4:	4e12      	ldr	r6, [pc, #72]	; (13420 <le_param_req+0x6c>)
   133d6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 13424 <le_param_req+0x70>
   133da:	4546      	cmp	r6, r8
   133dc:	d2f4      	bcs.n	133c8 <le_param_req+0x14>
		if (!cb->le_param_req) {
   133de:	68b3      	ldr	r3, [r6, #8]
   133e0:	b983      	cbnz	r3, 13404 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   133e2:	3614      	adds	r6, #20
   133e4:	e7f9      	b.n	133da <le_param_req+0x26>
		if (!cb->le_param_req) {
   133e6:	68b3      	ldr	r3, [r6, #8]
   133e8:	b90b      	cbnz	r3, 133ee <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   133ea:	6936      	ldr	r6, [r6, #16]
   133ec:	e7f1      	b.n	133d2 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   133ee:	4621      	mov	r1, r4
   133f0:	4638      	mov	r0, r7
   133f2:	4798      	blx	r3
   133f4:	2800      	cmp	r0, #0
   133f6:	d0e6      	beq.n	133c6 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   133f8:	4620      	mov	r0, r4
   133fa:	f007 f87a 	bl	1a4f2 <bt_le_conn_params_valid>
   133fe:	2800      	cmp	r0, #0
   13400:	d1f3      	bne.n	133ea <le_param_req+0x36>
   13402:	e7e0      	b.n	133c6 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   13404:	4621      	mov	r1, r4
   13406:	4638      	mov	r0, r7
   13408:	4798      	blx	r3
   1340a:	2800      	cmp	r0, #0
   1340c:	d0db      	beq.n	133c6 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1340e:	4620      	mov	r0, r4
   13410:	f007 f86f 	bl	1a4f2 <bt_le_conn_params_valid>
   13414:	2800      	cmp	r0, #0
   13416:	d1e4      	bne.n	133e2 <le_param_req+0x2e>
   13418:	e7d5      	b.n	133c6 <le_param_req+0x12>
   1341a:	bf00      	nop
   1341c:	20001c00 	.word	0x20001c00
   13420:	0001d498 	.word	0x0001d498
   13424:	0001d498 	.word	0x0001d498

00013428 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   13428:	b538      	push	{r3, r4, r5, lr}
   1342a:	4605      	mov	r5, r0
   1342c:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1342e:	480a      	ldr	r0, [pc, #40]	; (13458 <bt_conn_add_le+0x30>)
   13430:	2101      	movs	r1, #1
   13432:	f7ff fde9 	bl	13008 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   13436:	b170      	cbz	r0, 13456 <bt_conn_add_le+0x2e>
		return NULL;
	}

	conn->id = id;
   13438:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1343a:	6823      	ldr	r3, [r4, #0]
   1343c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
   13440:	88a3      	ldrh	r3, [r4, #4]
   13442:	f8a0 308c 	strh.w	r3, [r0, #140]	; 0x8c
   13446:	79a3      	ldrb	r3, [r4, #6]
   13448:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1344c:	2301      	movs	r3, #1
   1344e:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   13450:	4b02      	ldr	r3, [pc, #8]	; (1345c <bt_conn_add_le+0x34>)
   13452:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   13456:	bd38      	pop	{r3, r4, r5, pc}
   13458:	20001750 	.word	0x20001750
   1345c:	00280018 	.word	0x00280018

00013460 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   13460:	b570      	push	{r4, r5, r6, lr}
   13462:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13464:	480a      	ldr	r0, [pc, #40]	; (13490 <bt_conn_lookup_addr_le+0x30>)
{
   13466:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13468:	f007 fadf 	bl	1aa2a <bt_conn_ref>
   1346c:	4604      	mov	r4, r0

		if (!conn) {
   1346e:	b120      	cbz	r0, 1347a <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   13470:	7883      	ldrb	r3, [r0, #2]
   13472:	2b01      	cmp	r3, #1
   13474:	d004      	beq.n	13480 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   13476:	f007 faf4 	bl	1aa62 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1347a:	2400      	movs	r4, #0
}
   1347c:	4620      	mov	r0, r4
   1347e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   13480:	4632      	mov	r2, r6
   13482:	4629      	mov	r1, r5
   13484:	f007 fb36 	bl	1aaf4 <bt_conn_is_peer_addr_le>
   13488:	2800      	cmp	r0, #0
   1348a:	d1f7      	bne.n	1347c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1348c:	4620      	mov	r0, r4
   1348e:	e7f2      	b.n	13476 <bt_conn_lookup_addr_le+0x16>
   13490:	20001750 	.word	0x20001750

00013494 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   13494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13496:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13498:	480e      	ldr	r0, [pc, #56]	; (134d4 <bt_conn_lookup_state_le+0x40>)
{
   1349a:	460e      	mov	r6, r1
   1349c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1349e:	f007 fac4 	bl	1aa2a <bt_conn_ref>

		if (!conn) {
   134a2:	4604      	mov	r4, r0
   134a4:	b120      	cbz	r0, 134b0 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   134a6:	7883      	ldrb	r3, [r0, #2]
   134a8:	2b01      	cmp	r3, #1
   134aa:	d003      	beq.n	134b4 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   134ac:	f007 fad9 	bl	1aa62 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   134b0:	2400      	movs	r4, #0
   134b2:	e00d      	b.n	134d0 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   134b4:	b136      	cbz	r6, 134c4 <bt_conn_lookup_state_le+0x30>
   134b6:	4632      	mov	r2, r6
   134b8:	4629      	mov	r1, r5
   134ba:	f007 fb1b 	bl	1aaf4 <bt_conn_is_peer_addr_le>
   134be:	b908      	cbnz	r0, 134c4 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   134c0:	4620      	mov	r0, r4
   134c2:	e7f3      	b.n	134ac <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   134c4:	7aa3      	ldrb	r3, [r4, #10]
   134c6:	42bb      	cmp	r3, r7
   134c8:	d1fa      	bne.n	134c0 <bt_conn_lookup_state_le+0x2c>
   134ca:	7a23      	ldrb	r3, [r4, #8]
   134cc:	42ab      	cmp	r3, r5
   134ce:	d1f7      	bne.n	134c0 <bt_conn_lookup_state_le+0x2c>
}
   134d0:	4620      	mov	r0, r4
   134d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   134d4:	20001750 	.word	0x20001750

000134d8 <send_conn_le_param_update>:
{
   134d8:	b538      	push	{r3, r4, r5, lr}
   134da:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   134dc:	4608      	mov	r0, r1
{
   134de:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   134e0:	f007 f807 	bl	1a4f2 <bt_le_conn_params_valid>
   134e4:	b348      	cbz	r0, 1353a <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   134e6:	4b16      	ldr	r3, [pc, #88]	; (13540 <send_conn_le_param_update+0x68>)
   134e8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   134ec:	0799      	lsls	r1, r3, #30
   134ee:	d407      	bmi.n	13500 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   134f0:	78e3      	ldrb	r3, [r4, #3]
   134f2:	b183      	cbz	r3, 13516 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   134f4:	4629      	mov	r1, r5
   134f6:	4620      	mov	r0, r4
}
   134f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   134fc:	f000 b9ac 	b.w	13858 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   13500:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   13504:	079a      	lsls	r2, r3, #30
   13506:	d5f3      	bpl.n	134f0 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13508:	f3bf 8f5b 	dmb	ish
   1350c:	6863      	ldr	r3, [r4, #4]
   1350e:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   13512:	059b      	lsls	r3, r3, #22
   13514:	d4ec      	bmi.n	134f0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   13516:	4629      	mov	r1, r5
   13518:	4620      	mov	r0, r4
   1351a:	f007 fb13 	bl	1ab44 <bt_conn_le_conn_update>
		if (rc == 0) {
   1351e:	b958      	cbnz	r0, 13538 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   13520:	882b      	ldrh	r3, [r5, #0]
   13522:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   13526:	886b      	ldrh	r3, [r5, #2]
   13528:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1352c:	88ab      	ldrh	r3, [r5, #4]
   1352e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   13532:	88eb      	ldrh	r3, [r5, #6]
   13534:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   13538:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1353a:	f06f 0015 	mvn.w	r0, #21
   1353e:	e7fb      	b.n	13538 <send_conn_le_param_update+0x60>
   13540:	20000378 	.word	0x20000378

00013544 <deferred_work>:
{
   13544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   13546:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   1354a:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1354c:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   13550:	b9fb      	cbnz	r3, 13592 <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   13552:	4628      	mov	r0, r5
   13554:	f007 fb4b 	bl	1abee <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   13558:	4b26      	ldr	r3, [pc, #152]	; (135f4 <deferred_work+0xb0>)
   1355a:	681e      	ldr	r6, [r3, #0]
   1355c:	b94e      	cbnz	r6, 13572 <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1355e:	4e26      	ldr	r6, [pc, #152]	; (135f8 <deferred_work+0xb4>)
   13560:	4f26      	ldr	r7, [pc, #152]	; (135fc <deferred_work+0xb8>)
   13562:	42be      	cmp	r6, r7
   13564:	d30d      	bcc.n	13582 <deferred_work+0x3e>
		bt_conn_unref(conn);
   13566:	4628      	mov	r0, r5
}
   13568:	b003      	add	sp, #12
   1356a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1356e:	f007 ba78 	b.w	1aa62 <bt_conn_unref>
		if (cb->disconnected) {
   13572:	6873      	ldr	r3, [r6, #4]
   13574:	b11b      	cbz	r3, 1357e <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   13576:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   1357a:	4628      	mov	r0, r5
   1357c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1357e:	6936      	ldr	r6, [r6, #16]
   13580:	e7ec      	b.n	1355c <deferred_work+0x18>
		if (cb->disconnected) {
   13582:	6873      	ldr	r3, [r6, #4]
   13584:	b11b      	cbz	r3, 1358e <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   13586:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   1358a:	4628      	mov	r0, r5
   1358c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1358e:	3614      	adds	r6, #20
   13590:	e7e7      	b.n	13562 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   13592:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   13596:	2b01      	cmp	r3, #1
   13598:	d123      	bne.n	135e2 <deferred_work+0x9e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1359a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   1359e:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
   135a2:	e856 3f00 	ldrex	r3, [r6]
   135a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   135aa:	e846 2100 	strex	r1, r2, [r6]
   135ae:	2900      	cmp	r1, #0
   135b0:	d1f7      	bne.n	135a2 <deferred_work+0x5e>
   135b2:	f3bf 8f5b 	dmb	ish
   135b6:	05db      	lsls	r3, r3, #23
   135b8:	d515      	bpl.n	135e6 <deferred_work+0xa2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   135ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   135bc:	9300      	str	r3, [sp, #0]
   135be:	6d23      	ldr	r3, [r4, #80]	; 0x50
   135c0:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   135c2:	4669      	mov	r1, sp
   135c4:	4628      	mov	r0, r5
   135c6:	f7ff ff87 	bl	134d8 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   135ca:	f3bf 8f5b 	dmb	ish
   135ce:	e856 3f00 	ldrex	r3, [r6]
   135d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   135d6:	e846 3200 	strex	r2, r3, [r6]
   135da:	2a00      	cmp	r2, #0
   135dc:	d1f7      	bne.n	135ce <deferred_work+0x8a>
   135de:	f3bf 8f5b 	dmb	ish
}
   135e2:	b003      	add	sp, #12
   135e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   135e6:	4a06      	ldr	r2, [pc, #24]	; (13600 <deferred_work+0xbc>)
   135e8:	6810      	ldr	r0, [r2, #0]
   135ea:	6851      	ldr	r1, [r2, #4]
   135ec:	466b      	mov	r3, sp
   135ee:	c303      	stmia	r3!, {r0, r1}
   135f0:	e7e7      	b.n	135c2 <deferred_work+0x7e>
   135f2:	bf00      	nop
   135f4:	20001c00 	.word	0x20001c00
   135f8:	0001d498 	.word	0x0001d498
   135fc:	0001d498 	.word	0x0001d498
   13600:	0001d4fc 	.word	0x0001d4fc

00013604 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   13604:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   13606:	4801      	ldr	r0, [pc, #4]	; (1360c <bt_conn_create_frag_timeout+0x8>)
   13608:	f7ff be76 	b.w	132f8 <bt_conn_create_pdu_timeout>
   1360c:	20000818 	.word	0x20000818

00013610 <create_frag>:
{
   13610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13614:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   13616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1361a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1361e:	2000      	movs	r0, #0
{
   13620:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   13622:	f7ff ffef 	bl	13604 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   13626:	7ab3      	ldrb	r3, [r6, #10]
   13628:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   1362a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1362c:	f04f 0600 	mov.w	r6, #0
   13630:	d005      	beq.n	1363e <create_frag+0x2e>
		net_buf_unref(frag);
   13632:	f001 fd35 	bl	150a0 <net_buf_unref>
		return NULL;
   13636:	4635      	mov	r5, r6
}
   13638:	4628      	mov	r0, r5
   1363a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1363e:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   13640:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   13644:	4e0c      	ldr	r6, [pc, #48]	; (13678 <create_frag+0x68>)
   13646:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   13648:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   1364c:	f008 fcc1 	bl	1bfd2 <net_buf_simple_tailroom>
   13650:	4580      	cmp	r8, r0
   13652:	d20c      	bcs.n	1366e <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   13654:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13658:	f854 1f08 	ldr.w	r1, [r4, #8]!
   1365c:	4632      	mov	r2, r6
   1365e:	4638      	mov	r0, r7
   13660:	f008 fc82 	bl	1bf68 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   13664:	4631      	mov	r1, r6
   13666:	4620      	mov	r0, r4
   13668:	f008 fc97 	bl	1bf9a <net_buf_simple_pull>
   1366c:	e7e4      	b.n	13638 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   1366e:	4638      	mov	r0, r7
   13670:	f008 fcaf 	bl	1bfd2 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   13674:	b286      	uxth	r6, r0
   13676:	e7ef      	b.n	13658 <create_frag+0x48>
   13678:	20000378 	.word	0x20000378

0001367c <bt_conn_process_tx>:
{
   1367c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1367e:	7a83      	ldrb	r3, [r0, #10]
{
   13680:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   13682:	b993      	cbnz	r3, 136aa <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13684:	f3bf 8f5b 	dmb	ish
   13688:	1d03      	adds	r3, r0, #4
   1368a:	e853 2f00 	ldrex	r2, [r3]
   1368e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   13692:	e843 1500 	strex	r5, r1, [r3]
   13696:	2d00      	cmp	r5, #0
   13698:	d1f7      	bne.n	1368a <bt_conn_process_tx+0xe>
   1369a:	f3bf 8f5b 	dmb	ish
   1369e:	0653      	lsls	r3, r2, #25
   136a0:	d503      	bpl.n	136aa <bt_conn_process_tx+0x2e>
}
   136a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   136a6:	f007 b950 	b.w	1a94a <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   136aa:	2200      	movs	r2, #0
   136ac:	2300      	movs	r3, #0
   136ae:	f104 0038 	add.w	r0, r4, #56	; 0x38
   136b2:	f008 fbb8 	bl	1be26 <net_buf_get>
	BT_ASSERT(buf);
   136b6:	4605      	mov	r5, r0
   136b8:	b960      	cbnz	r0, 136d4 <bt_conn_process_tx+0x58>
   136ba:	4a24      	ldr	r2, [pc, #144]	; (1374c <bt_conn_process_tx+0xd0>)
   136bc:	4924      	ldr	r1, [pc, #144]	; (13750 <bt_conn_process_tx+0xd4>)
   136be:	4825      	ldr	r0, [pc, #148]	; (13754 <bt_conn_process_tx+0xd8>)
   136c0:	f44f 7347 	mov.w	r3, #796	; 0x31c
   136c4:	f006 fa9b 	bl	19bfe <assert_print>
   136c8:	4040      	eors	r0, r0
   136ca:	f380 8811 	msr	BASEPRI, r0
   136ce:	f04f 0003 	mov.w	r0, #3
   136d2:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   136d4:	4e20      	ldr	r6, [pc, #128]	; (13758 <bt_conn_process_tx+0xdc>)
	if (buf->len <= conn_mtu(conn)) {
   136d6:	89aa      	ldrh	r2, [r5, #12]
   136d8:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   136dc:	429a      	cmp	r2, r3
   136de:	d807      	bhi.n	136f0 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   136e0:	2300      	movs	r3, #0
   136e2:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   136e4:	4629      	mov	r1, r5
   136e6:	4620      	mov	r0, r4
   136e8:	f7ff fbf0 	bl	12ecc <send_frag>
	if (!send_buf(conn, buf)) {
   136ec:	b968      	cbnz	r0, 1370a <bt_conn_process_tx+0x8e>
   136ee:	e005      	b.n	136fc <bt_conn_process_tx+0x80>
	frag = create_frag(conn, buf);
   136f0:	4629      	mov	r1, r5
   136f2:	4620      	mov	r0, r4
   136f4:	f7ff ff8c 	bl	13610 <create_frag>
	if (!frag) {
   136f8:	4601      	mov	r1, r0
   136fa:	b938      	cbnz	r0, 1370c <bt_conn_process_tx+0x90>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   136fc:	696e      	ldr	r6, [r5, #20]
		tx_data(buf)->tx = NULL;
   136fe:	2300      	movs	r3, #0
   13700:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   13702:	4628      	mov	r0, r5
   13704:	f001 fccc 	bl	150a0 <net_buf_unref>
		if (tx) {
   13708:	b9ce      	cbnz	r6, 1373e <bt_conn_process_tx+0xc2>
}
   1370a:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1370c:	2301      	movs	r3, #1
   1370e:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   13710:	4620      	mov	r0, r4
   13712:	f7ff fbdb 	bl	12ecc <send_frag>
   13716:	2800      	cmp	r0, #0
   13718:	d0f0      	beq.n	136fc <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
   1371a:	89aa      	ldrh	r2, [r5, #12]
   1371c:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   13720:	429a      	cmp	r2, r3
   13722:	d802      	bhi.n	1372a <bt_conn_process_tx+0xae>
	return send_frag(conn, buf, FRAG_END, false);
   13724:	2300      	movs	r3, #0
   13726:	2203      	movs	r2, #3
   13728:	e7dc      	b.n	136e4 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   1372a:	4629      	mov	r1, r5
   1372c:	4620      	mov	r0, r4
   1372e:	f7ff ff6f 	bl	13610 <create_frag>
		if (!frag) {
   13732:	4601      	mov	r1, r0
   13734:	2800      	cmp	r0, #0
   13736:	d0e1      	beq.n	136fc <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   13738:	2301      	movs	r3, #1
   1373a:	461a      	mov	r2, r3
   1373c:	e7e8      	b.n	13710 <bt_conn_process_tx+0x94>
			conn_tx_destroy(conn, tx);
   1373e:	4631      	mov	r1, r6
   13740:	4620      	mov	r0, r4
}
   13742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   13746:	f7ff bbab 	b.w	12ea0 <conn_tx_destroy>
   1374a:	bf00      	nop
   1374c:	0001dcd2 	.word	0x0001dcd2
   13750:	0001dca9 	.word	0x0001dca9
   13754:	0001dc35 	.word	0x0001dc35
   13758:	20000378 	.word	0x20000378

0001375c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1375c:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1375e:	480c      	ldr	r0, [pc, #48]	; (13790 <bt_conn_init+0x34>)
   13760:	f009 f8be 	bl	1c8e0 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   13764:	490b      	ldr	r1, [pc, #44]	; (13794 <bt_conn_init+0x38>)
   13766:	480a      	ldr	r0, [pc, #40]	; (13790 <bt_conn_init+0x34>)
   13768:	f009 f8c6 	bl	1c8f8 <k_queue_append>
   1376c:	490a      	ldr	r1, [pc, #40]	; (13798 <bt_conn_init+0x3c>)
   1376e:	4808      	ldr	r0, [pc, #32]	; (13790 <bt_conn_init+0x34>)
   13770:	f009 f8c2 	bl	1c8f8 <k_queue_append>
   13774:	4909      	ldr	r1, [pc, #36]	; (1379c <bt_conn_init+0x40>)
   13776:	4806      	ldr	r0, [pc, #24]	; (13790 <bt_conn_init+0x34>)
   13778:	f009 f8be 	bl	1c8f8 <k_queue_append>
	}

	bt_att_init();
   1377c:	f000 fde8 	bl	14350 <bt_att_init>

	err = bt_smp_init();
   13780:	f008 fb49 	bl	1be16 <bt_smp_init>
	if (err) {
   13784:	4604      	mov	r4, r0
   13786:	b908      	cbnz	r0, 1378c <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   13788:	f007 fabb 	bl	1ad02 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1378c:	4620      	mov	r0, r4
   1378e:	bd10      	pop	{r4, pc}
   13790:	200007a8 	.word	0x200007a8
   13794:	20001bd0 	.word	0x20001bd0
   13798:	20001be0 	.word	0x20001be0
   1379c:	20001bf0 	.word	0x20001bf0

000137a0 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   137a0:	4b04      	ldr	r3, [pc, #16]	; (137b4 <l2cap_accept+0x14>)
   137a2:	6818      	ldr	r0, [r3, #0]
   137a4:	b918      	cbnz	r0, 137ae <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   137a6:	4a04      	ldr	r2, [pc, #16]	; (137b8 <l2cap_accept+0x18>)
   137a8:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   137aa:	600b      	str	r3, [r1, #0]

		return 0;
   137ac:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   137ae:	f06f 000b 	mvn.w	r0, #11
}
   137b2:	4770      	bx	lr
   137b4:	20001c04 	.word	0x20001c04
   137b8:	0001d644 	.word	0x0001d644

000137bc <bt_l2cap_connected>:
{
   137bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   137be:	4d24      	ldr	r5, [pc, #144]	; (13850 <bt_l2cap_connected+0x94>)
   137c0:	4f24      	ldr	r7, [pc, #144]	; (13854 <bt_l2cap_connected+0x98>)
{
   137c2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   137c4:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   137c6:	42bd      	cmp	r5, r7
   137c8:	d301      	bcc.n	137ce <bt_l2cap_connected+0x12>
}
   137ca:	b003      	add	sp, #12
   137cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   137ce:	686b      	ldr	r3, [r5, #4]
   137d0:	a901      	add	r1, sp, #4
   137d2:	4620      	mov	r0, r4
   137d4:	4798      	blx	r3
   137d6:	2800      	cmp	r0, #0
   137d8:	db34      	blt.n	13844 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   137da:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   137dc:	882a      	ldrh	r2, [r5, #0]
   137de:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   137e0:	849a      	strh	r2, [r3, #36]	; 0x24
   137e2:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   137e6:	68a8      	ldr	r0, [r5, #8]
   137e8:	f3bf 8f5b 	dmb	ish
   137ec:	e852 1f00 	ldrex	r1, [r2]
   137f0:	e842 6c00 	strex	ip, r6, [r2]
   137f4:	f1bc 0f00 	cmp.w	ip, #0
   137f8:	d1f8      	bne.n	137ec <bt_l2cap_connected+0x30>
   137fa:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   137fe:	609e      	str	r6, [r3, #8]
	return list->tail;
   13800:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   13802:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   13806:	b9f9      	cbnz	r1, 13848 <bt_l2cap_connected+0x8c>
	list->head = node;
   13808:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   1380c:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   1380e:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   13810:	9801      	ldr	r0, [sp, #4]
   13812:	6843      	ldr	r3, [r0, #4]
   13814:	681b      	ldr	r3, [r3, #0]
   13816:	b103      	cbz	r3, 1381a <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   13818:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1381a:	9b01      	ldr	r3, [sp, #4]
   1381c:	f3bf 8f5b 	dmb	ish
   13820:	3310      	adds	r3, #16
   13822:	e853 1f00 	ldrex	r1, [r3]
   13826:	f041 0101 	orr.w	r1, r1, #1
   1382a:	e843 1200 	strex	r2, r1, [r3]
   1382e:	2a00      	cmp	r2, #0
   13830:	d1f7      	bne.n	13822 <bt_l2cap_connected+0x66>
   13832:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   13836:	9801      	ldr	r0, [sp, #4]
   13838:	6843      	ldr	r3, [r0, #4]
   1383a:	69db      	ldr	r3, [r3, #28]
   1383c:	b113      	cbz	r3, 13844 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   1383e:	f100 0110 	add.w	r1, r0, #16
   13842:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   13844:	350c      	adds	r5, #12
   13846:	e7be      	b.n	137c6 <bt_l2cap_connected+0xa>
	parent->next = child;
   13848:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1384a:	6562      	str	r2, [r4, #84]	; 0x54
}
   1384c:	e7de      	b.n	1380c <bt_l2cap_connected+0x50>
   1384e:	bf00      	nop
   13850:	0001d474 	.word	0x0001d474
   13854:	0001d498 	.word	0x0001d498

00013858 <bt_l2cap_update_conn_param>:
{
   13858:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1385a:	4b17      	ldr	r3, [pc, #92]	; (138b8 <bt_l2cap_update_conn_param+0x60>)
{
   1385c:	460e      	mov	r6, r1
	ident++;
   1385e:	7819      	ldrb	r1, [r3, #0]
   13860:	3101      	adds	r1, #1
   13862:	b2c9      	uxtb	r1, r1
   13864:	2901      	cmp	r1, #1
   13866:	bf38      	it	cc
   13868:	2101      	movcc	r1, #1
{
   1386a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1386c:	2208      	movs	r2, #8
   1386e:	2012      	movs	r0, #18
	ident++;
   13870:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   13872:	f007 f990 	bl	1ab96 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   13876:	4604      	mov	r4, r0
   13878:	b1d0      	cbz	r0, 138b0 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   1387a:	2108      	movs	r1, #8
   1387c:	4408      	add	r0, r1
   1387e:	f008 fb6d 	bl	1bf5c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   13882:	8833      	ldrh	r3, [r6, #0]
   13884:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   13886:	8873      	ldrh	r3, [r6, #2]
   13888:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1388a:	88b3      	ldrh	r3, [r6, #4]
   1388c:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1388e:	88f3      	ldrh	r3, [r6, #6]
   13890:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   13892:	2300      	movs	r3, #0
   13894:	4628      	mov	r0, r5
   13896:	9300      	str	r3, [sp, #0]
   13898:	4622      	mov	r2, r4
   1389a:	2105      	movs	r1, #5
   1389c:	f007 f9c2 	bl	1ac24 <bt_l2cap_send_cb>
	if (err) {
   138a0:	4605      	mov	r5, r0
   138a2:	b110      	cbz	r0, 138aa <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   138a4:	4620      	mov	r0, r4
   138a6:	f001 fbfb 	bl	150a0 <net_buf_unref>
}
   138aa:	4628      	mov	r0, r5
   138ac:	b002      	add	sp, #8
   138ae:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   138b0:	f06f 050b 	mvn.w	r5, #11
   138b4:	e7f9      	b.n	138aa <bt_l2cap_update_conn_param+0x52>
   138b6:	bf00      	nop
   138b8:	20001f21 	.word	0x20001f21

000138bc <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   138bc:	2823      	cmp	r0, #35	; 0x23
   138be:	d81f      	bhi.n	13900 <att_op_get_type+0x44>
   138c0:	281a      	cmp	r0, #26
   138c2:	d804      	bhi.n	138ce <att_op_get_type+0x12>
   138c4:	1e43      	subs	r3, r0, #1
   138c6:	2b18      	cmp	r3, #24
   138c8:	d90e      	bls.n	138e8 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   138ca:	2006      	movs	r0, #6
   138cc:	4770      	bx	lr
	switch (op) {
   138ce:	f1a0 031b 	sub.w	r3, r0, #27
   138d2:	2b08      	cmp	r3, #8
   138d4:	d81e      	bhi.n	13914 <att_op_get_type+0x58>
   138d6:	e8df f003 	tbb	[pc, r3]
   138da:	1d05      	.short	0x1d05
   138dc:	191d231b 	.word	0x191d231b
   138e0:	1d25      	.short	0x1d25
   138e2:	05          	.byte	0x05
   138e3:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   138e4:	2003      	movs	r0, #3
   138e6:	4770      	bx	lr
	switch (op) {
   138e8:	4a0f      	ldr	r2, [pc, #60]	; (13928 <att_op_get_type+0x6c>)
   138ea:	2301      	movs	r3, #1
   138ec:	4083      	lsls	r3, r0
   138ee:	401a      	ands	r2, r3
   138f0:	b9c2      	cbnz	r2, 13924 <att_op_get_type+0x68>
   138f2:	4a0e      	ldr	r2, [pc, #56]	; (1392c <att_op_get_type+0x70>)
   138f4:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   138f6:	2a00      	cmp	r2, #0
   138f8:	bf14      	ite	ne
   138fa:	2001      	movne	r0, #1
   138fc:	2006      	moveq	r0, #6
   138fe:	4770      	bx	lr
	switch (op) {
   13900:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   13904:	2b52      	cmp	r3, #82	; 0x52
   13906:	d105      	bne.n	13914 <att_op_get_type+0x58>
		return ATT_COMMAND;
   13908:	2000      	movs	r0, #0
}
   1390a:	4770      	bx	lr
		return ATT_REQUEST;
   1390c:	2001      	movs	r0, #1
   1390e:	4770      	bx	lr
		return ATT_INDICATION;
   13910:	2005      	movs	r0, #5
   13912:	4770      	bx	lr
		return ATT_COMMAND;
   13914:	f010 0f40 	tst.w	r0, #64	; 0x40
   13918:	bf0c      	ite	eq
   1391a:	2006      	moveq	r0, #6
   1391c:	2000      	movne	r0, #0
   1391e:	4770      	bx	lr
	switch (op) {
   13920:	2004      	movs	r0, #4
   13922:	4770      	bx	lr
		return ATT_RESPONSE;
   13924:	2002      	movs	r0, #2
   13926:	4770      	bx	lr
   13928:	028aaaaa 	.word	0x028aaaaa
   1392c:	01455554 	.word	0x01455554

00013930 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   13930:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   13932:	3804      	subs	r0, #4
   13934:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   13936:	a901      	add	r1, sp, #4
   13938:	4802      	ldr	r0, [pc, #8]	; (13944 <bt_att_released+0x14>)
   1393a:	f008 ff1c 	bl	1c776 <k_mem_slab_free>
}
   1393e:	b003      	add	sp, #12
   13940:	f85d fb04 	ldr.w	pc, [sp], #4
   13944:	20000744 	.word	0x20000744

00013948 <tx_meta_data_free>:
{
   13948:	b510      	push	{r4, lr}
__ssp_bos_icheck3(memset, void *, int)
   1394a:	2100      	movs	r1, #0
   1394c:	4604      	mov	r4, r0
   1394e:	2214      	movs	r2, #20
   13950:	f009 fc55 	bl	1d1fe <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   13954:	4621      	mov	r1, r4
   13956:	4802      	ldr	r0, [pc, #8]	; (13960 <tx_meta_data_free+0x18>)
}
   13958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   1395c:	f008 bfcc 	b.w	1c8f8 <k_queue_append>
   13960:	20000790 	.word	0x20000790

00013964 <chan_send>:
{
   13964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13968:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1396a:	f8d1 8014 	ldr.w	r8, [r1, #20]
	hdr = (void *)buf->data;
   1396e:	688b      	ldr	r3, [r1, #8]
{
   13970:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   13972:	3090      	adds	r0, #144	; 0x90
   13974:	2102      	movs	r1, #2
   13976:	f007 f9f7 	bl	1ad68 <atomic_test_bit>
   1397a:	2800      	cmp	r0, #0
   1397c:	d039      	beq.n	139f2 <chan_send+0x8e>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1397e:	781b      	ldrb	r3, [r3, #0]
   13980:	2bd2      	cmp	r3, #210	; 0xd2
   13982:	d110      	bne.n	139a6 <chan_send+0x42>
		err = bt_smp_sign(chan->att->conn, buf);
   13984:	6833      	ldr	r3, [r6, #0]
   13986:	4621      	mov	r1, r4
   13988:	6818      	ldr	r0, [r3, #0]
   1398a:	f008 fa41 	bl	1be10 <bt_smp_sign>
		if (err) {
   1398e:	4605      	mov	r5, r0
   13990:	b148      	cbz	r0, 139a6 <chan_send+0x42>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   13992:	6960      	ldr	r0, [r4, #20]
   13994:	f7ff ffd8 	bl	13948 <tx_meta_data_free>
			net_buf_unref(buf);
   13998:	4620      	mov	r0, r4
   1399a:	f001 fb81 	bl	150a0 <net_buf_unref>
}
   1399e:	4628      	mov	r0, r5
   139a0:	b003      	add	sp, #12
   139a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   139a6:	f104 0008 	add.w	r0, r4, #8
   139aa:	f008 fb0e 	bl	1bfca <net_buf_simple_headroom>
	state->len = buf->len;
   139ae:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	data->att_chan = chan;
   139b2:	f8c8 6000 	str.w	r6, [r8]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   139b6:	6833      	ldr	r3, [r6, #0]
   139b8:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   139ba:	68a3      	ldr	r3, [r4, #8]
	state->offset = net_buf_simple_headroom(buf);
   139bc:	4607      	mov	r7, r0
   139be:	7818      	ldrb	r0, [r3, #0]
   139c0:	f7ff ff7c 	bl	138bc <att_op_get_type>
	switch (op_type) {
   139c4:	2805      	cmp	r0, #5
   139c6:	bf96      	itet	ls
   139c8:	4b0b      	ldrls	r3, [pc, #44]	; (139f8 <chan_send+0x94>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   139ca:	4b0c      	ldrhi	r3, [pc, #48]	; (139fc <chan_send+0x98>)
   139cc:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   139d0:	f8cd 8000 	str.w	r8, [sp]
   139d4:	4628      	mov	r0, r5
   139d6:	4622      	mov	r2, r4
   139d8:	2104      	movs	r1, #4
   139da:	f007 f923 	bl	1ac24 <bt_l2cap_send_cb>
	if (err) {
   139de:	4605      	mov	r5, r0
   139e0:	2800      	cmp	r0, #0
   139e2:	d0dc      	beq.n	1399e <chan_send+0x3a>
	buf->data = buf->__buf + state->offset;
   139e4:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   139e6:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   139ea:	fa13 f787 	uxtah	r7, r3, r7
   139ee:	60a7      	str	r7, [r4, #8]
}
   139f0:	e7d5      	b.n	1399e <chan_send+0x3a>
		return -EINVAL;
   139f2:	f06f 0515 	mvn.w	r5, #21
   139f6:	e7d2      	b.n	1399e <chan_send+0x3a>
   139f8:	0001d66c 	.word	0x0001d66c
   139fc:	0001b42f 	.word	0x0001b42f

00013a00 <bt_att_connected>:
{
   13a00:	b510      	push	{r4, lr}
   13a02:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   13a06:	4604      	mov	r4, r0
   13a08:	f3bf 8f5b 	dmb	ish
   13a0c:	e853 1f00 	ldrex	r1, [r3]
   13a10:	f041 0104 	orr.w	r1, r1, #4
   13a14:	e843 1200 	strex	r2, r1, [r3]
   13a18:	2a00      	cmp	r2, #0
   13a1a:	d1f7      	bne.n	13a0c <bt_att_connected+0xc>
   13a1c:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   13a20:	2317      	movs	r3, #23
   13a22:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   13a24:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   13a26:	1f20      	subs	r0, r4, #4
   13a28:	f007 fa9f 	bl	1af6a <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   13a2c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   13a30:	4903      	ldr	r1, [pc, #12]	; (13a40 <bt_att_connected+0x40>)
   13a32:	f009 f875 	bl	1cb20 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   13a36:	6820      	ldr	r0, [r4, #0]
}
   13a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   13a3c:	f001 ba18 	b.w	14e70 <bt_gatt_connected>
   13a40:	0001b66d 	.word	0x0001b66d

00013a44 <read_group_cb>:
{
   13a44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   13a48:	4605      	mov	r5, r0
   13a4a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   13a4c:	f04f 0800 	mov.w	r8, #0
   13a50:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   13a54:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   13a56:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   13a58:	f88d 8008 	strb.w	r8, [sp, #8]
   13a5c:	a902      	add	r1, sp, #8
{
   13a5e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   13a60:	f8ad 300a 	strh.w	r3, [sp, #10]
   13a64:	f006 fb36 	bl	1a0d4 <bt_uuid_cmp>
   13a68:	b1a0      	cbz	r0, 13a94 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   13a6a:	f642 0301 	movw	r3, #10241	; 0x2801
   13a6e:	6828      	ldr	r0, [r5, #0]
   13a70:	f88d 800c 	strb.w	r8, [sp, #12]
   13a74:	a903      	add	r1, sp, #12
   13a76:	f8ad 300e 	strh.w	r3, [sp, #14]
   13a7a:	f006 fb2b 	bl	1a0d4 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   13a7e:	b148      	cbz	r0, 13a94 <read_group_cb+0x50>
		if (data->group &&
   13a80:	6923      	ldr	r3, [r4, #16]
   13a82:	b11b      	cbz	r3, 13a8c <read_group_cb+0x48>
   13a84:	885a      	ldrh	r2, [r3, #2]
   13a86:	42b2      	cmp	r2, r6
   13a88:	d200      	bcs.n	13a8c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   13a8a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   13a8c:	2001      	movs	r0, #1
}
   13a8e:	b004      	add	sp, #16
   13a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   13a94:	6861      	ldr	r1, [r4, #4]
   13a96:	6828      	ldr	r0, [r5, #0]
   13a98:	f006 fb1c 	bl	1a0d4 <bt_uuid_cmp>
   13a9c:	b110      	cbz	r0, 13aa4 <read_group_cb+0x60>
		data->group = NULL;
   13a9e:	2300      	movs	r3, #0
   13aa0:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   13aa2:	e7f3      	b.n	13a8c <read_group_cb+0x48>
	if (data->rsp->len &&
   13aa4:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   13aa6:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   13aa8:	781a      	ldrb	r2, [r3, #0]
   13aaa:	b132      	cbz	r2, 13aba <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   13aac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   13aae:	8981      	ldrh	r1, [r0, #12]
   13ab0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   13ab2:	4293      	cmp	r3, r2
   13ab4:	da01      	bge.n	13aba <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   13ab6:	2000      	movs	r0, #0
   13ab8:	e7e9      	b.n	13a8e <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   13aba:	2104      	movs	r1, #4
   13abc:	3008      	adds	r0, #8
   13abe:	f008 fa4d 	bl	1bf5c <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   13ac2:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   13ac4:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   13ac6:	6923      	ldr	r3, [r4, #16]
   13ac8:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   13aca:	4b08      	ldr	r3, [pc, #32]	; (13aec <read_group_cb+0xa8>)
   13acc:	9300      	str	r3, [sp, #0]
   13ace:	9401      	str	r4, [sp, #4]
   13ad0:	68a2      	ldr	r2, [r4, #8]
   13ad2:	2300      	movs	r3, #0
   13ad4:	4629      	mov	r1, r5
   13ad6:	4638      	mov	r0, r7
   13ad8:	f007 faf3 	bl	1b0c2 <att_chan_read>
	if (read < 0) {
   13adc:	2800      	cmp	r0, #0
   13ade:	dbea      	blt.n	13ab6 <read_group_cb+0x72>
	if (!data->group) {
   13ae0:	6920      	ldr	r0, [r4, #16]
   13ae2:	3800      	subs	r0, #0
   13ae4:	bf18      	it	ne
   13ae6:	2001      	movne	r0, #1
   13ae8:	e7d1      	b.n	13a8e <read_group_cb+0x4a>
   13aea:	bf00      	nop
   13aec:	0001afd1 	.word	0x0001afd1

00013af0 <read_type_cb>:
{
   13af0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   13af4:	6817      	ldr	r7, [r2, #0]
{
   13af6:	4605      	mov	r5, r0
   13af8:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   13afa:	6800      	ldr	r0, [r0, #0]
   13afc:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   13afe:	687e      	ldr	r6, [r7, #4]
{
   13b00:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   13b02:	f006 fae7 	bl	1a0d4 <bt_uuid_cmp>
   13b06:	4681      	mov	r9, r0
   13b08:	2800      	cmp	r0, #0
   13b0a:	d13c      	bne.n	13b86 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   13b0c:	4630      	mov	r0, r6
   13b0e:	2295      	movs	r2, #149	; 0x95
   13b10:	4629      	mov	r1, r5
   13b12:	f008 f823 	bl	1bb5c <bt_gatt_check_perm>
   13b16:	4606      	mov	r6, r0
   13b18:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   13b1a:	b140      	cbz	r0, 13b2e <read_type_cb+0x3e>
		if (data->rsp->len) {
   13b1c:	68e3      	ldr	r3, [r4, #12]
   13b1e:	781b      	ldrb	r3, [r3, #0]
   13b20:	b10b      	cbz	r3, 13b26 <read_type_cb+0x36>
			data->err = 0x00;
   13b22:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   13b26:	2000      	movs	r0, #0
}
   13b28:	b003      	add	sp, #12
   13b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   13b2e:	68a0      	ldr	r0, [r4, #8]
   13b30:	f008 f9f2 	bl	1bf18 <net_buf_frag_last>
   13b34:	2102      	movs	r1, #2
   13b36:	3008      	adds	r0, #8
   13b38:	f008 fa10 	bl	1bf5c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   13b3c:	4b13      	ldr	r3, [pc, #76]	; (13b8c <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   13b3e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   13b40:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   13b44:	9300      	str	r3, [sp, #0]
   13b46:	9401      	str	r4, [sp, #4]
   13b48:	68a2      	ldr	r2, [r4, #8]
   13b4a:	4633      	mov	r3, r6
   13b4c:	4629      	mov	r1, r5
   13b4e:	4638      	mov	r0, r7
   13b50:	f007 fab7 	bl	1b0c2 <att_chan_read>
	if (read < 0) {
   13b54:	2800      	cmp	r0, #0
   13b56:	da07      	bge.n	13b68 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   13b58:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   13b5c:	bf26      	itte	cs
   13b5e:	4240      	negcs	r0, r0
   13b60:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   13b62:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   13b64:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   13b66:	e7de      	b.n	13b26 <read_type_cb+0x36>
	if (!data->item) {
   13b68:	6923      	ldr	r3, [r4, #16]
   13b6a:	2b00      	cmp	r3, #0
   13b6c:	d0db      	beq.n	13b26 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   13b6e:	68a0      	ldr	r0, [r4, #8]
   13b70:	f007 f8d2 	bl	1ad18 <net_buf_frags_len>
   13b74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   13b76:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   13b78:	68e3      	ldr	r3, [r4, #12]
   13b7a:	781b      	ldrb	r3, [r3, #0]
   13b7c:	4298      	cmp	r0, r3
   13b7e:	bf94      	ite	ls
   13b80:	2000      	movls	r0, #0
   13b82:	2001      	movhi	r0, #1
   13b84:	e7d0      	b.n	13b28 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   13b86:	2001      	movs	r0, #1
   13b88:	e7ce      	b.n	13b28 <read_type_cb+0x38>
   13b8a:	bf00      	nop
   13b8c:	0001ad29 	.word	0x0001ad29

00013b90 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   13b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   13b92:	2300      	movs	r3, #0
{
   13b94:	4604      	mov	r4, r0
   13b96:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   13b98:	4829      	ldr	r0, [pc, #164]	; (13c40 <bt_att_accept+0xb0>)
   13b9a:	2200      	movs	r2, #0
   13b9c:	4669      	mov	r1, sp
   13b9e:	f003 ff9f 	bl	17ae0 <k_mem_slab_alloc>
   13ba2:	4605      	mov	r5, r0
   13ba4:	2800      	cmp	r0, #0
   13ba6:	d143      	bne.n	13c30 <bt_att_accept+0xa0>
	return z_impl_z_current_get();
   13ba8:	f004 fe7a 	bl	188a0 <z_impl_z_current_get>
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
   13bac:	4b25      	ldr	r3, [pc, #148]	; (13c44 <bt_att_accept+0xb4>)

	(void)memset(att, 0, sizeof(*att));
   13bae:	9f00      	ldr	r7, [sp, #0]
	att_handle_rsp_thread = k_current_get();
   13bb0:	6018      	str	r0, [r3, #0]
   13bb2:	4629      	mov	r1, r5
   13bb4:	2228      	movs	r2, #40	; 0x28
   13bb6:	1d38      	adds	r0, r7, #4
   13bb8:	f009 fb21 	bl	1d1fe <memset>
	att->conn = conn;
   13bbc:	603c      	str	r4, [r7, #0]
	sys_slist_init(&att->reqs);
   13bbe:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   13bc0:	4821      	ldr	r0, [pc, #132]	; (13c48 <bt_att_accept+0xb8>)
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   13bc2:	9501      	str	r5, [sp, #4]
	list->tail = NULL;
   13bc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
   13bc8:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   13bcc:	2200      	movs	r2, #0
   13bce:	2300      	movs	r3, #0
   13bd0:	a901      	add	r1, sp, #4
   13bd2:	f003 ff85 	bl	17ae0 <k_mem_slab_alloc>
   13bd6:	4605      	mov	r5, r0
   13bd8:	bb50      	cbnz	r0, 13c30 <bt_att_accept+0xa0>
	(void)memset(chan, 0, sizeof(*chan));
   13bda:	9b01      	ldr	r3, [sp, #4]
   13bdc:	4601      	mov	r1, r0
   13bde:	22e8      	movs	r2, #232	; 0xe8
   13be0:	4618      	mov	r0, r3
   13be2:	f009 fb0c 	bl	1d1fe <memset>
	chan->chan.chan.ops = &ops;
   13be6:	4a19      	ldr	r2, [pc, #100]	; (13c4c <bt_att_accept+0xbc>)
   13be8:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   13bea:	3098      	adds	r0, #152	; 0x98
   13bec:	f008 fe78 	bl	1c8e0 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13bf0:	9b01      	ldr	r3, [sp, #4]
   13bf2:	f3bf 8f5b 	dmb	ish
   13bf6:	3390      	adds	r3, #144	; 0x90
   13bf8:	e853 2f00 	ldrex	r2, [r3]
   13bfc:	e843 5100 	strex	r1, r5, [r3]
   13c00:	2900      	cmp	r1, #0
   13c02:	d1f9      	bne.n	13bf8 <bt_att_accept+0x68>
   13c04:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   13c08:	9b01      	ldr	r3, [sp, #4]
   13c0a:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   13c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   13c0e:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   13c10:	b91b      	cbnz	r3, 13c1a <bt_att_accept+0x8a>
   13c12:	f104 000c 	add.w	r0, r4, #12
   13c16:	f008 fe63 	bl	1c8e0 <z_impl_k_queue_init>
	return list->head;
   13c1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   13c1c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   13c20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   13c22:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
	list->head = node;
   13c26:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   13c28:	b902      	cbnz	r2, 13c2c <bt_att_accept+0x9c>
	list->tail = node;
   13c2a:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   13c2c:	9b01      	ldr	r3, [sp, #4]
	k_work_init_delayable(&att->eatt.connection_work,
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
   13c2e:	b923      	cbnz	r3, 13c3a <bt_att_accept+0xaa>
		return -ENOMEM;
   13c30:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   13c34:	4628      	mov	r0, r5
   13c36:	b003      	add	sp, #12
   13c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*ch = &chan->chan.chan;
   13c3a:	3304      	adds	r3, #4
   13c3c:	6033      	str	r3, [r6, #0]
	return 0;
   13c3e:	e7f9      	b.n	13c34 <bt_att_accept+0xa4>
   13c40:	20000728 	.word	0x20000728
   13c44:	20001ccc 	.word	0x20001ccc
   13c48:	20000744 	.word	0x20000744
   13c4c:	200005dc 	.word	0x200005dc

00013c50 <bt_att_chan_create_pdu>:
{
   13c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   13c52:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   13c54:	3201      	adds	r2, #1
   13c56:	429a      	cmp	r2, r3
{
   13c58:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   13c5a:	d81b      	bhi.n	13c94 <bt_att_chan_create_pdu+0x44>
	switch (att_op_get_type(op)) {
   13c5c:	4608      	mov	r0, r1
   13c5e:	f7ff fe2d 	bl	138bc <att_op_get_type>
   13c62:	2802      	cmp	r0, #2
   13c64:	d019      	beq.n	13c9a <bt_att_chan_create_pdu+0x4a>
   13c66:	2804      	cmp	r0, #4
   13c68:	d017      	beq.n	13c9a <bt_att_chan_create_pdu+0x4a>
		timeout = K_FOREVER;
   13c6a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   13c6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   13c72:	2100      	movs	r1, #0
   13c74:	4632      	mov	r2, r6
   13c76:	463b      	mov	r3, r7
   13c78:	4608      	mov	r0, r1
   13c7a:	f006 ffd0 	bl	1ac1e <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   13c7e:	4604      	mov	r4, r0
   13c80:	b140      	cbz	r0, 13c94 <bt_att_chan_create_pdu+0x44>
	return z_impl_k_queue_get(queue, timeout);
   13c82:	480c      	ldr	r0, [pc, #48]	; (13cb4 <bt_att_chan_create_pdu+0x64>)
   13c84:	4632      	mov	r2, r6
   13c86:	463b      	mov	r3, r7
   13c88:	f004 f8dc 	bl	17e44 <z_impl_k_queue_get>
	if (!data) {
   13c8c:	b948      	cbnz	r0, 13ca2 <bt_att_chan_create_pdu+0x52>
		net_buf_unref(buf);
   13c8e:	4620      	mov	r0, r4
   13c90:	f001 fa06 	bl	150a0 <net_buf_unref>
		return NULL;
   13c94:	2400      	movs	r4, #0
}
   13c96:	4620      	mov	r0, r4
   13c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   13c9a:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   13c9e:	2700      	movs	r7, #0
   13ca0:	e7e7      	b.n	13c72 <bt_att_chan_create_pdu+0x22>
	bt_att_tx_meta_data(buf) = data;
   13ca2:	6160      	str	r0, [r4, #20]
   13ca4:	2101      	movs	r1, #1
   13ca6:	f104 0008 	add.w	r0, r4, #8
   13caa:	f008 f957 	bl	1bf5c <net_buf_simple_add>
	hdr->code = op;
   13cae:	7005      	strb	r5, [r0, #0]
	return buf;
   13cb0:	e7f1      	b.n	13c96 <bt_att_chan_create_pdu+0x46>
   13cb2:	bf00      	nop
   13cb4:	20000790 	.word	0x20000790

00013cb8 <bt_att_recv>:
{
   13cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
   13cbc:	898b      	ldrh	r3, [r1, #12]
{
   13cbe:	4605      	mov	r5, r0
   13cc0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   13cc2:	2b00      	cmp	r3, #0
   13cc4:	d05d      	beq.n	13d82 <bt_att_recv+0xca>
	return net_buf_simple_pull_mem(&buf->b, len);
   13cc6:	2101      	movs	r1, #1
   13cc8:	f104 0008 	add.w	r0, r4, #8
   13ccc:	f008 f96d 	bl	1bfaa <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   13cd0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   13cd4:	4680      	mov	r8, r0
   13cd6:	2b00      	cmp	r3, #0
   13cd8:	d053      	beq.n	13d82 <bt_att_recv+0xca>
		if (hdr->code == handlers[i].op) {
   13cda:	7801      	ldrb	r1, [r0, #0]
   13cdc:	4e2b      	ldr	r6, [pc, #172]	; (13d8c <bt_att_recv+0xd4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   13cde:	1f2f      	subs	r7, r5, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   13ce0:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   13ce2:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   13ce6:	428a      	cmp	r2, r1
   13ce8:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   13cec:	eb06 0bc3 	add.w	fp, r6, r3, lsl #3
   13cf0:	d11e      	bne.n	13d30 <bt_att_recv+0x78>
		if (handler->type == ATT_REQUEST &&
   13cf2:	f89b 9002 	ldrb.w	r9, [fp, #2]
   13cf6:	f1b9 0f01 	cmp.w	r9, #1
   13cfa:	d129      	bne.n	13d50 <bt_att_recv+0x98>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   13cfc:	2100      	movs	r1, #0
   13cfe:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   13d02:	f007 fa84 	bl	1b20e <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   13d06:	2800      	cmp	r0, #0
   13d08:	d13b      	bne.n	13d82 <bt_att_recv+0xca>
	if (buf->len < handler->expect_len) {
   13d0a:	89a2      	ldrh	r2, [r4, #12]
   13d0c:	f89b 3001 	ldrb.w	r3, [fp, #1]
   13d10:	429a      	cmp	r2, r3
   13d12:	d339      	bcc.n	13d88 <bt_att_recv+0xd0>
		err = handler->func(att_chan, buf);
   13d14:	4456      	add	r6, sl
   13d16:	4621      	mov	r1, r4
   13d18:	6873      	ldr	r3, [r6, #4]
   13d1a:	4638      	mov	r0, r7
   13d1c:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   13d1e:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   13d22:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   13d24:	d12d      	bne.n	13d82 <bt_att_recv+0xca>
   13d26:	b360      	cbz	r0, 13d82 <bt_att_recv+0xca>
		send_err_rsp(att_chan, hdr->code, 0, err);
   13d28:	f898 1000 	ldrb.w	r1, [r8]
	if (!req) {
   13d2c:	b349      	cbz	r1, 13d82 <bt_att_recv+0xca>
   13d2e:	e00a      	b.n	13d46 <bt_att_recv+0x8e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   13d30:	3301      	adds	r3, #1
   13d32:	2b0e      	cmp	r3, #14
   13d34:	d1d5      	bne.n	13ce2 <bt_att_recv+0x2a>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   13d36:	4608      	mov	r0, r1
   13d38:	f7ff fdc0 	bl	138bc <att_op_get_type>
   13d3c:	b308      	cbz	r0, 13d82 <bt_att_recv+0xca>
   13d3e:	2805      	cmp	r0, #5
   13d40:	d01f      	beq.n	13d82 <bt_att_recv+0xca>
	if (!req) {
   13d42:	b1f1      	cbz	r1, 13d82 <bt_att_recv+0xca>
   13d44:	2306      	movs	r3, #6
   13d46:	2200      	movs	r2, #0
   13d48:	4638      	mov	r0, r7
   13d4a:	f007 fbde 	bl	1b50a <send_err_rsp.part.0>
   13d4e:	e018      	b.n	13d82 <bt_att_recv+0xca>
		} else if (handler->type == ATT_INDICATION &&
   13d50:	f1b9 0f05 	cmp.w	r9, #5
   13d54:	d00a      	beq.n	13d6c <bt_att_recv+0xb4>
	if (buf->len < handler->expect_len) {
   13d56:	89a2      	ldrh	r2, [r4, #12]
   13d58:	f89b 3001 	ldrb.w	r3, [fp, #1]
   13d5c:	429a      	cmp	r2, r3
   13d5e:	d310      	bcc.n	13d82 <bt_att_recv+0xca>
		err = handler->func(att_chan, buf);
   13d60:	f8db 3004 	ldr.w	r3, [fp, #4]
   13d64:	4621      	mov	r1, r4
   13d66:	4638      	mov	r0, r7
   13d68:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   13d6a:	e00a      	b.n	13d82 <bt_att_recv+0xca>
			   atomic_test_and_set_bit(att_chan->flags,
   13d6c:	2101      	movs	r1, #1
   13d6e:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   13d72:	f007 fa4c 	bl	1b20e <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   13d76:	b920      	cbnz	r0, 13d82 <bt_att_recv+0xca>
	if (buf->len < handler->expect_len) {
   13d78:	f89b 2001 	ldrb.w	r2, [fp, #1]
   13d7c:	89a3      	ldrh	r3, [r4, #12]
   13d7e:	429a      	cmp	r2, r3
   13d80:	d9c8      	bls.n	13d14 <bt_att_recv+0x5c>
}
   13d82:	2000      	movs	r0, #0
   13d84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = BT_ATT_ERR_INVALID_PDU;
   13d88:	2304      	movs	r3, #4
   13d8a:	e7cd      	b.n	13d28 <bt_att_recv+0x70>
   13d8c:	0001d684 	.word	0x0001d684

00013d90 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   13d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d92:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   13d94:	6803      	ldr	r3, [r0, #0]
   13d96:	460d      	mov	r5, r1
   13d98:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   13d9a:	b087      	sub	sp, #28
   13d9c:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   13d9e:	bf18      	it	ne
   13da0:	2101      	movne	r1, #1
   13da2:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   13da4:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   13da6:	f007 ffc6 	bl	1bd36 <bt_gatt_change_aware>
   13daa:	b948      	cbnz	r0, 13dc0 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   13dac:	2105      	movs	r1, #5
   13dae:	f104 0090 	add.w	r0, r4, #144	; 0x90
   13db2:	f007 fa2c 	bl	1b20e <atomic_test_and_set_bit>
   13db6:	2800      	cmp	r0, #0
   13db8:	d048      	beq.n	13e4c <att_write_rsp.constprop.0+0xbc>
			return 0;
   13dba:	2000      	movs	r0, #0
}
   13dbc:	b007      	add	sp, #28
   13dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   13dc0:	2e00      	cmp	r6, #0
   13dc2:	d045      	beq.n	13e50 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   13dc4:	2218      	movs	r2, #24
   13dc6:	2100      	movs	r1, #0
   13dc8:	4668      	mov	r0, sp
   13dca:	f009 fa18 	bl	1d1fe <memset>
	if (rsp) {
   13dce:	bb67      	cbnz	r7, 13e2a <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   13dd0:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   13dd2:	4a20      	ldr	r2, [pc, #128]	; (13e54 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   13dd4:	681b      	ldr	r3, [r3, #0]
   13dd6:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   13dd8:	2300      	movs	r3, #0
   13dda:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   13dde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13de0:	9303      	str	r3, [sp, #12]
	data.len = len;
   13de2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   13de6:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   13dea:	2301      	movs	r3, #1
   13dec:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   13df0:	4631      	mov	r1, r6
   13df2:	466b      	mov	r3, sp
   13df4:	4630      	mov	r0, r6
	data.req = req;
   13df6:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   13dfa:	f007 f809 	bl	1ae10 <bt_gatt_foreach_attr>
	if (data.err) {
   13dfe:	f89d 3014 	ldrb.w	r3, [sp, #20]
   13e02:	b1e3      	cbz	r3, 13e3e <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   13e04:	2f00      	cmp	r7, #0
   13e06:	d0d8      	beq.n	13dba <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   13e08:	9b01      	ldr	r3, [sp, #4]
   13e0a:	6958      	ldr	r0, [r3, #20]
   13e0c:	f7ff fd9c 	bl	13948 <tx_meta_data_free>
			net_buf_unref(data.buf);
   13e10:	9801      	ldr	r0, [sp, #4]
   13e12:	f001 f945 	bl	150a0 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   13e16:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   13e1a:	2d00      	cmp	r5, #0
   13e1c:	d0cd      	beq.n	13dba <att_write_rsp.constprop.0+0x2a>
   13e1e:	4632      	mov	r2, r6
   13e20:	4629      	mov	r1, r5
   13e22:	4620      	mov	r0, r4
   13e24:	f007 fb71 	bl	1b50a <send_err_rsp.part.0>
   13e28:	e7c7      	b.n	13dba <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   13e2a:	2200      	movs	r2, #0
   13e2c:	4639      	mov	r1, r7
   13e2e:	4620      	mov	r0, r4
   13e30:	f7ff ff0e 	bl	13c50 <bt_att_chan_create_pdu>
   13e34:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   13e36:	2800      	cmp	r0, #0
   13e38:	d1ca      	bne.n	13dd0 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   13e3a:	200e      	movs	r0, #14
   13e3c:	e7be      	b.n	13dbc <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   13e3e:	9901      	ldr	r1, [sp, #4]
   13e40:	2900      	cmp	r1, #0
   13e42:	d0ba      	beq.n	13dba <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   13e44:	4620      	mov	r0, r4
   13e46:	f006 ffee 	bl	1ae26 <bt_att_chan_send_rsp>
   13e4a:	e7b6      	b.n	13dba <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   13e4c:	2012      	movs	r0, #18
   13e4e:	e7b5      	b.n	13dbc <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   13e50:	2001      	movs	r0, #1
   13e52:	e7b3      	b.n	13dbc <att_write_rsp.constprop.0+0x2c>
   13e54:	0001adaf 	.word	0x0001adaf

00013e58 <att_read_group_req>:
{
   13e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   13e5c:	898e      	ldrh	r6, [r1, #12]
   13e5e:	3e04      	subs	r6, #4
   13e60:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   13e62:	2e02      	cmp	r6, #2
{
   13e64:	4604      	mov	r4, r0
   13e66:	b08c      	sub	sp, #48	; 0x30
   13e68:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   13e6a:	d001      	beq.n	13e70 <att_read_group_req+0x18>
   13e6c:	2e10      	cmp	r6, #16
   13e6e:	d16a      	bne.n	13f46 <att_read_group_req+0xee>
   13e70:	2104      	movs	r1, #4
   13e72:	3008      	adds	r0, #8
   13e74:	f008 f899 	bl	1bfaa <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   13e78:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   13e7c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   13e7e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   13e80:	1d01      	adds	r1, r0, #4
   13e82:	4632      	mov	r2, r6
   13e84:	4640      	mov	r0, r8
   13e86:	f006 f953 	bl	1a130 <bt_uuid_create>
   13e8a:	2800      	cmp	r0, #0
   13e8c:	d05d      	beq.n	13f4a <att_read_group_req+0xf2>
	if (!start || !end) {
   13e8e:	2d00      	cmp	r5, #0
   13e90:	d03a      	beq.n	13f08 <att_read_group_req+0xb0>
   13e92:	2600      	movs	r6, #0
   13e94:	2f00      	cmp	r7, #0
   13e96:	d036      	beq.n	13f06 <att_read_group_req+0xae>
	if (start > end) {
   13e98:	42bd      	cmp	r5, r7
   13e9a:	d835      	bhi.n	13f08 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   13e9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   13ea0:	a901      	add	r1, sp, #4
   13ea2:	4640      	mov	r0, r8
   13ea4:	f88d 6004 	strb.w	r6, [sp, #4]
   13ea8:	f8ad 3006 	strh.w	r3, [sp, #6]
   13eac:	f006 f912 	bl	1a0d4 <bt_uuid_cmp>
   13eb0:	bb70      	cbnz	r0, 13f10 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   13eb2:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   13eb4:	2214      	movs	r2, #20
   13eb6:	2100      	movs	r1, #0
   13eb8:	a807      	add	r0, sp, #28
   13eba:	f009 f9a0 	bl	1d1fe <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   13ebe:	2201      	movs	r2, #1
   13ec0:	2111      	movs	r1, #17
   13ec2:	4630      	mov	r0, r6
   13ec4:	f007 fb64 	bl	1b590 <bt_att_create_pdu>
   13ec8:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   13eca:	2800      	cmp	r0, #0
   13ecc:	d03d      	beq.n	13f4a <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   13ece:	2101      	movs	r1, #1
   13ed0:	3008      	adds	r0, #8
	data.uuid = uuid;
   13ed2:	e9cd 4807 	strd	r4, r8, [sp, #28]
   13ed6:	f008 f841 	bl	1bf5c <net_buf_simple_add>
	data.rsp->len = 0U;
   13eda:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   13edc:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   13ede:	4a1c      	ldr	r2, [pc, #112]	; (13f50 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   13ee0:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   13ee2:	4639      	mov	r1, r7
	data.group = NULL;
   13ee4:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   13ee6:	4628      	mov	r0, r5
   13ee8:	ab07      	add	r3, sp, #28
   13eea:	f006 ff91 	bl	1ae10 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   13eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ef0:	781b      	ldrb	r3, [r3, #0]
   13ef2:	bb1b      	cbnz	r3, 13f3c <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   13ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13ef6:	6958      	ldr	r0, [r3, #20]
   13ef8:	f7ff fd26 	bl	13948 <tx_meta_data_free>
		net_buf_unref(data.buf);
   13efc:	9809      	ldr	r0, [sp, #36]	; 0x24
   13efe:	f001 f8cf 	bl	150a0 <net_buf_unref>
	if (!req) {
   13f02:	230a      	movs	r3, #10
   13f04:	e001      	b.n	13f0a <att_read_group_req+0xb2>
			*err = 0U;
   13f06:	463d      	mov	r5, r7
	if (!req) {
   13f08:	2301      	movs	r3, #1
   13f0a:	462a      	mov	r2, r5
   13f0c:	2110      	movs	r1, #16
   13f0e:	e00e      	b.n	13f2e <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   13f10:	f642 0301 	movw	r3, #10241	; 0x2801
   13f14:	a907      	add	r1, sp, #28
   13f16:	4640      	mov	r0, r8
   13f18:	f88d 601c 	strb.w	r6, [sp, #28]
   13f1c:	f8ad 301e 	strh.w	r3, [sp, #30]
   13f20:	f006 f8d8 	bl	1a0d4 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   13f24:	2800      	cmp	r0, #0
   13f26:	d0c4      	beq.n	13eb2 <att_read_group_req+0x5a>
	if (!req) {
   13f28:	2310      	movs	r3, #16
   13f2a:	462a      	mov	r2, r5
   13f2c:	4619      	mov	r1, r3
   13f2e:	4620      	mov	r0, r4
   13f30:	f007 faeb 	bl	1b50a <send_err_rsp.part.0>
		return 0;
   13f34:	2000      	movs	r0, #0
}
   13f36:	b00c      	add	sp, #48	; 0x30
   13f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   13f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
   13f3e:	4620      	mov	r0, r4
   13f40:	f006 ff71 	bl	1ae26 <bt_att_chan_send_rsp>
	return 0;
   13f44:	e7f6      	b.n	13f34 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   13f46:	2004      	movs	r0, #4
   13f48:	e7f5      	b.n	13f36 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   13f4a:	200e      	movs	r0, #14
   13f4c:	e7f3      	b.n	13f36 <att_read_group_req+0xde>
   13f4e:	bf00      	nop
   13f50:	00013a45 	.word	0x00013a45

00013f54 <att_read_mult_vl_req>:
{
   13f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   13f58:	6846      	ldr	r6, [r0, #4]
{
   13f5a:	b085      	sub	sp, #20
   13f5c:	4604      	mov	r4, r0
   13f5e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   13f60:	4630      	mov	r0, r6
   13f62:	2101      	movs	r1, #1
   13f64:	f007 fee7 	bl	1bd36 <bt_gatt_change_aware>
   13f68:	b950      	cbnz	r0, 13f80 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   13f6a:	2105      	movs	r1, #5
   13f6c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   13f70:	f007 f94d 	bl	1b20e <atomic_test_and_set_bit>
   13f74:	2800      	cmp	r0, #0
   13f76:	d13b      	bne.n	13ff0 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   13f78:	2012      	movs	r0, #18
}
   13f7a:	b005      	add	sp, #20
   13f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   13f80:	2210      	movs	r2, #16
   13f82:	2100      	movs	r1, #0
   13f84:	4668      	mov	r0, sp
   13f86:	f009 f93a 	bl	1d1fe <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   13f8a:	2200      	movs	r2, #0
   13f8c:	2121      	movs	r1, #33	; 0x21
   13f8e:	4630      	mov	r0, r6
   13f90:	f007 fafe 	bl	1b590 <bt_att_create_pdu>
   13f94:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   13f96:	b368      	cbz	r0, 13ff4 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   13f98:	f8df 905c 	ldr.w	r9, [pc, #92]	; 13ff8 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   13f9c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   13f9e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   13fa2:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   13fa6:	89ab      	ldrh	r3, [r5, #12]
   13fa8:	2b01      	cmp	r3, #1
   13faa:	d804      	bhi.n	13fb6 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   13fac:	9902      	ldr	r1, [sp, #8]
   13fae:	4620      	mov	r0, r4
   13fb0:	f006 ff39 	bl	1ae26 <bt_att_chan_send_rsp>
	return 0;
   13fb4:	e01c      	b.n	13ff0 <att_read_mult_vl_req+0x9c>
   13fb6:	4638      	mov	r0, r7
   13fb8:	f007 ffff 	bl	1bfba <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   13fbc:	466b      	mov	r3, sp
   13fbe:	464a      	mov	r2, r9
   13fc0:	4601      	mov	r1, r0
   13fc2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   13fc4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   13fc8:	f006 ff22 	bl	1ae10 <bt_gatt_foreach_attr>
		if (data.err) {
   13fcc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   13fd0:	2b00      	cmp	r3, #0
   13fd2:	d0e8      	beq.n	13fa6 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   13fd4:	9b02      	ldr	r3, [sp, #8]
   13fd6:	6958      	ldr	r0, [r3, #20]
   13fd8:	f7ff fcb6 	bl	13948 <tx_meta_data_free>
			net_buf_unref(data.buf);
   13fdc:	9802      	ldr	r0, [sp, #8]
   13fde:	f001 f85f 	bl	150a0 <net_buf_unref>
	if (!req) {
   13fe2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   13fe6:	4632      	mov	r2, r6
   13fe8:	2120      	movs	r1, #32
   13fea:	4620      	mov	r0, r4
   13fec:	f007 fa8d 	bl	1b50a <send_err_rsp.part.0>
			return 0;
   13ff0:	2000      	movs	r0, #0
   13ff2:	e7c2      	b.n	13f7a <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   13ff4:	200e      	movs	r0, #14
   13ff6:	e7c0      	b.n	13f7a <att_read_mult_vl_req+0x26>
   13ff8:	0001b27f 	.word	0x0001b27f

00013ffc <att_read_mult_req>:
{
   13ffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   14000:	6846      	ldr	r6, [r0, #4]
{
   14002:	b085      	sub	sp, #20
   14004:	4604      	mov	r4, r0
   14006:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   14008:	4630      	mov	r0, r6
   1400a:	2101      	movs	r1, #1
   1400c:	f007 fe93 	bl	1bd36 <bt_gatt_change_aware>
   14010:	b950      	cbnz	r0, 14028 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   14012:	2105      	movs	r1, #5
   14014:	f104 0090 	add.w	r0, r4, #144	; 0x90
   14018:	f007 f8f9 	bl	1b20e <atomic_test_and_set_bit>
   1401c:	2800      	cmp	r0, #0
   1401e:	d13b      	bne.n	14098 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14020:	2012      	movs	r0, #18
}
   14022:	b005      	add	sp, #20
   14024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   14028:	2210      	movs	r2, #16
   1402a:	2100      	movs	r1, #0
   1402c:	4668      	mov	r0, sp
   1402e:	f009 f8e6 	bl	1d1fe <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   14032:	2200      	movs	r2, #0
   14034:	210f      	movs	r1, #15
   14036:	4630      	mov	r0, r6
   14038:	f007 faaa 	bl	1b590 <bt_att_create_pdu>
   1403c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1403e:	b368      	cbz	r0, 1409c <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14040:	f8df 905c 	ldr.w	r9, [pc, #92]	; 140a0 <att_read_mult_req+0xa4>
	data.chan = chan;
   14044:	9400      	str	r4, [sp, #0]
   14046:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1404a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1404e:	89ab      	ldrh	r3, [r5, #12]
   14050:	2b01      	cmp	r3, #1
   14052:	d804      	bhi.n	1405e <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   14054:	9902      	ldr	r1, [sp, #8]
   14056:	4620      	mov	r0, r4
   14058:	f006 fee5 	bl	1ae26 <bt_att_chan_send_rsp>
	return 0;
   1405c:	e01c      	b.n	14098 <att_read_mult_req+0x9c>
   1405e:	4638      	mov	r0, r7
   14060:	f007 ffab 	bl	1bfba <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14064:	466b      	mov	r3, sp
   14066:	464a      	mov	r2, r9
   14068:	4601      	mov	r1, r0
   1406a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1406c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14070:	f006 fece 	bl	1ae10 <bt_gatt_foreach_attr>
		if (data.err) {
   14074:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14078:	2b00      	cmp	r3, #0
   1407a:	d0e8      	beq.n	1404e <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1407c:	9b02      	ldr	r3, [sp, #8]
   1407e:	6958      	ldr	r0, [r3, #20]
   14080:	f7ff fc62 	bl	13948 <tx_meta_data_free>
			net_buf_unref(data.buf);
   14084:	9802      	ldr	r0, [sp, #8]
   14086:	f001 f80b 	bl	150a0 <net_buf_unref>
	if (!req) {
   1408a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1408e:	4632      	mov	r2, r6
   14090:	210e      	movs	r1, #14
   14092:	4620      	mov	r0, r4
   14094:	f007 fa39 	bl	1b50a <send_err_rsp.part.0>
			return 0;
   14098:	2000      	movs	r0, #0
   1409a:	e7c2      	b.n	14022 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1409c:	200e      	movs	r0, #14
   1409e:	e7c0      	b.n	14022 <att_read_mult_req+0x26>
   140a0:	0001b239 	.word	0x0001b239

000140a4 <att_read_rsp>:
{
   140a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   140a8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   140ac:	4604      	mov	r4, r0
   140ae:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   140b0:	4640      	mov	r0, r8
   140b2:	2101      	movs	r1, #1
{
   140b4:	4617      	mov	r7, r2
   140b6:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   140b8:	f007 fe3d 	bl	1bd36 <bt_gatt_change_aware>
   140bc:	b948      	cbnz	r0, 140d2 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   140be:	2105      	movs	r1, #5
   140c0:	f104 0090 	add.w	r0, r4, #144	; 0x90
   140c4:	f007 f8a3 	bl	1b20e <atomic_test_and_set_bit>
   140c8:	bb78      	cbnz	r0, 1412a <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   140ca:	2012      	movs	r0, #18
}
   140cc:	b004      	add	sp, #16
   140ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   140d2:	b38d      	cbz	r5, 14138 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   140d4:	2210      	movs	r2, #16
   140d6:	2100      	movs	r1, #0
   140d8:	4668      	mov	r0, sp
   140da:	f009 f890 	bl	1d1fe <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   140de:	2200      	movs	r2, #0
   140e0:	4639      	mov	r1, r7
   140e2:	4640      	mov	r0, r8
   140e4:	f007 fa54 	bl	1b590 <bt_att_create_pdu>
   140e8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   140ea:	b338      	cbz	r0, 1413c <att_read_rsp+0x98>
	data.offset = offset;
   140ec:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   140f0:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   140f4:	2301      	movs	r3, #1
   140f6:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   140fa:	4a11      	ldr	r2, [pc, #68]	; (14140 <att_read_rsp+0x9c>)
	data.chan = chan;
   140fc:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   140fe:	466b      	mov	r3, sp
   14100:	4629      	mov	r1, r5
   14102:	4628      	mov	r0, r5
   14104:	f006 fe84 	bl	1ae10 <bt_gatt_foreach_attr>
	if (data.err) {
   14108:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1410c:	b17b      	cbz	r3, 1412e <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1410e:	9b02      	ldr	r3, [sp, #8]
   14110:	6958      	ldr	r0, [r3, #20]
   14112:	f7ff fc19 	bl	13948 <tx_meta_data_free>
		net_buf_unref(data.buf);
   14116:	9802      	ldr	r0, [sp, #8]
   14118:	f000 ffc2 	bl	150a0 <net_buf_unref>
	if (!req) {
   1411c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14120:	462a      	mov	r2, r5
   14122:	4631      	mov	r1, r6
   14124:	4620      	mov	r0, r4
   14126:	f007 f9f0 	bl	1b50a <send_err_rsp.part.0>
			return 0;
   1412a:	2000      	movs	r0, #0
   1412c:	e7ce      	b.n	140cc <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1412e:	9902      	ldr	r1, [sp, #8]
   14130:	4620      	mov	r0, r4
   14132:	f006 fe78 	bl	1ae26 <bt_att_chan_send_rsp>
	return 0;
   14136:	e7f8      	b.n	1412a <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   14138:	2001      	movs	r0, #1
   1413a:	e7c7      	b.n	140cc <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1413c:	200e      	movs	r0, #14
   1413e:	e7c5      	b.n	140cc <att_read_rsp+0x28>
   14140:	0001b239 	.word	0x0001b239

00014144 <att_read_type_req>:
{
   14144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   14148:	898d      	ldrh	r5, [r1, #12]
   1414a:	3d04      	subs	r5, #4
   1414c:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1414e:	2d02      	cmp	r5, #2
{
   14150:	4604      	mov	r4, r0
   14152:	b08c      	sub	sp, #48	; 0x30
   14154:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   14156:	d001      	beq.n	1415c <att_read_type_req+0x18>
   14158:	2d10      	cmp	r5, #16
   1415a:	d150      	bne.n	141fe <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1415c:	2104      	movs	r1, #4
   1415e:	3008      	adds	r0, #8
   14160:	f007 ff23 	bl	1bfaa <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14164:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   14168:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1416a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1416c:	1d01      	adds	r1, r0, #4
   1416e:	462a      	mov	r2, r5
   14170:	4640      	mov	r0, r8
   14172:	f005 ffdd 	bl	1a130 <bt_uuid_create>
   14176:	b188      	cbz	r0, 1419c <att_read_type_req+0x58>
	if (!start || !end) {
   14178:	b19e      	cbz	r6, 141a2 <att_read_type_req+0x5e>
   1417a:	b18f      	cbz	r7, 141a0 <att_read_type_req+0x5c>
	if (start > end) {
   1417c:	42b7      	cmp	r7, r6
   1417e:	d310      	bcc.n	141a2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   14180:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   14182:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   14184:	2100      	movs	r1, #0
   14186:	eb0d 0002 	add.w	r0, sp, r2
   1418a:	f009 f838 	bl	1d1fe <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1418e:	2201      	movs	r2, #1
   14190:	2109      	movs	r1, #9
   14192:	4628      	mov	r0, r5
   14194:	f007 f9fc 	bl	1b590 <bt_att_create_pdu>
   14198:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1419a:	b960      	cbnz	r0, 141b6 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1419c:	200e      	movs	r0, #14
   1419e:	e007      	b.n	141b0 <att_read_type_req+0x6c>
			*err = 0U;
   141a0:	463e      	mov	r6, r7
	if (!req) {
   141a2:	2301      	movs	r3, #1
   141a4:	4632      	mov	r2, r6
   141a6:	2108      	movs	r1, #8
   141a8:	4620      	mov	r0, r4
   141aa:	f007 f9ae 	bl	1b50a <send_err_rsp.part.0>
		return 0;
   141ae:	2000      	movs	r0, #0
}
   141b0:	b00c      	add	sp, #48	; 0x30
   141b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   141b6:	2101      	movs	r1, #1
   141b8:	3008      	adds	r0, #8
	data.uuid = uuid;
   141ba:	e9cd 4806 	strd	r4, r8, [sp, #24]
   141be:	f007 fecd 	bl	1bf5c <net_buf_simple_add>
	data.rsp->len = 0U;
   141c2:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   141c4:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   141c6:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   141c8:	230a      	movs	r3, #10
   141ca:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   141ce:	4a0d      	ldr	r2, [pc, #52]	; (14204 <att_read_type_req+0xc0>)
   141d0:	ab06      	add	r3, sp, #24
   141d2:	4639      	mov	r1, r7
   141d4:	4630      	mov	r0, r6
   141d6:	f006 fe1b 	bl	1ae10 <bt_gatt_foreach_attr>
	if (data.err) {
   141da:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   141de:	b14b      	cbz	r3, 141f4 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   141e0:	9b08      	ldr	r3, [sp, #32]
   141e2:	6958      	ldr	r0, [r3, #20]
   141e4:	f7ff fbb0 	bl	13948 <tx_meta_data_free>
		net_buf_unref(data.buf);
   141e8:	9808      	ldr	r0, [sp, #32]
   141ea:	f000 ff59 	bl	150a0 <net_buf_unref>
	if (!req) {
   141ee:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   141f2:	e7d7      	b.n	141a4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   141f4:	9908      	ldr	r1, [sp, #32]
   141f6:	4620      	mov	r0, r4
   141f8:	f006 fe15 	bl	1ae26 <bt_att_chan_send_rsp>
	return 0;
   141fc:	e7d7      	b.n	141ae <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   141fe:	2004      	movs	r0, #4
   14200:	e7d6      	b.n	141b0 <att_read_type_req+0x6c>
   14202:	bf00      	nop
   14204:	00013af1 	.word	0x00013af1

00014208 <att_find_type_req>:
{
   14208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1420c:	460f      	mov	r7, r1
   1420e:	b086      	sub	sp, #24
   14210:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   14212:	2106      	movs	r1, #6
   14214:	f107 0008 	add.w	r0, r7, #8
   14218:	f007 fec7 	bl	1bfaa <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1421c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1421e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   14222:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   14224:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (!start || !end) {
   14228:	b1c5      	cbz	r5, 1425c <att_find_type_req+0x54>
   1422a:	2300      	movs	r3, #0
   1422c:	f1b8 0f00 	cmp.w	r8, #0
   14230:	d013      	beq.n	1425a <att_find_type_req+0x52>
	if (start > end) {
   14232:	4545      	cmp	r5, r8
   14234:	d812      	bhi.n	1425c <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   14236:	f88d 3000 	strb.w	r3, [sp]
   1423a:	f88d 3004 	strb.w	r3, [sp, #4]
   1423e:	a901      	add	r1, sp, #4
   14240:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14244:	4668      	mov	r0, sp
   14246:	f8ad 2002 	strh.w	r2, [sp, #2]
   1424a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1424e:	f005 ff41 	bl	1a0d4 <bt_uuid_cmp>
   14252:	4606      	mov	r6, r0
   14254:	b160      	cbz	r0, 14270 <att_find_type_req+0x68>
	if (!req) {
   14256:	230a      	movs	r3, #10
   14258:	e001      	b.n	1425e <att_find_type_req+0x56>
			*err = 0U;
   1425a:	4645      	mov	r5, r8
	if (!req) {
   1425c:	2301      	movs	r3, #1
   1425e:	462a      	mov	r2, r5
   14260:	2106      	movs	r1, #6
   14262:	4620      	mov	r0, r4
   14264:	f007 f951 	bl	1b50a <send_err_rsp.part.0>
		return 0;
   14268:	2000      	movs	r0, #0
}
   1426a:	b006      	add	sp, #24
   1426c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   14270:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   14274:	7b3f      	ldrb	r7, [r7, #12]
	(void)memset(&data, 0, sizeof(data));
   14276:	4601      	mov	r1, r0
   14278:	2214      	movs	r2, #20
   1427a:	a801      	add	r0, sp, #4
   1427c:	f008 ffbf 	bl	1d1fe <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   14280:	4632      	mov	r2, r6
   14282:	2107      	movs	r1, #7
   14284:	4650      	mov	r0, sl
   14286:	f007 f983 	bl	1b590 <bt_att_create_pdu>
   1428a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1428c:	b1f8      	cbz	r0, 142ce <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1428e:	230a      	movs	r3, #10
   14290:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   14294:	4a0f      	ldr	r2, [pc, #60]	; (142d4 <att_find_type_req+0xcc>)
	data.chan = chan;
   14296:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   14298:	ab01      	add	r3, sp, #4
   1429a:	4641      	mov	r1, r8
   1429c:	4628      	mov	r0, r5
	data.value = value;
   1429e:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   142a2:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   142a6:	f006 fdb3 	bl	1ae10 <bt_gatt_foreach_attr>
	if (data.err) {
   142aa:	f89d 3015 	ldrb.w	r3, [sp, #21]
   142ae:	b14b      	cbz	r3, 142c4 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   142b0:	9b02      	ldr	r3, [sp, #8]
   142b2:	6958      	ldr	r0, [r3, #20]
   142b4:	f7ff fb48 	bl	13948 <tx_meta_data_free>
		net_buf_unref(data.buf);
   142b8:	9802      	ldr	r0, [sp, #8]
   142ba:	f000 fef1 	bl	150a0 <net_buf_unref>
	if (!req) {
   142be:	f89d 3015 	ldrb.w	r3, [sp, #21]
   142c2:	e7cc      	b.n	1425e <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   142c4:	9902      	ldr	r1, [sp, #8]
   142c6:	4620      	mov	r0, r4
   142c8:	f006 fdad 	bl	1ae26 <bt_att_chan_send_rsp>
	return 0;
   142cc:	e7cc      	b.n	14268 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   142ce:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   142d0:	e7cb      	b.n	1426a <att_find_type_req+0x62>
   142d2:	bf00      	nop
   142d4:	0001ae43 	.word	0x0001ae43

000142d8 <att_find_info_req>:
{
   142d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   142da:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   142dc:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   142de:	885e      	ldrh	r6, [r3, #2]
{
   142e0:	b085      	sub	sp, #20
   142e2:	4604      	mov	r4, r0
	if (!start || !end) {
   142e4:	b195      	cbz	r5, 1430c <att_find_info_req+0x34>
   142e6:	b186      	cbz	r6, 1430a <att_find_info_req+0x32>
	if (start > end) {
   142e8:	42b5      	cmp	r5, r6
   142ea:	d80f      	bhi.n	1430c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   142ec:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   142ee:	2210      	movs	r2, #16
   142f0:	2100      	movs	r1, #0
   142f2:	4668      	mov	r0, sp
   142f4:	f008 ff83 	bl	1d1fe <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   142f8:	2200      	movs	r2, #0
   142fa:	2105      	movs	r1, #5
   142fc:	4638      	mov	r0, r7
   142fe:	f007 f947 	bl	1b590 <bt_att_create_pdu>
   14302:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   14304:	b958      	cbnz	r0, 1431e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   14306:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   14308:	e007      	b.n	1431a <att_find_info_req+0x42>
			*err = 0U;
   1430a:	4635      	mov	r5, r6
	if (!req) {
   1430c:	2301      	movs	r3, #1
   1430e:	462a      	mov	r2, r5
   14310:	2104      	movs	r1, #4
   14312:	4620      	mov	r0, r4
   14314:	f007 f8f9 	bl	1b50a <send_err_rsp.part.0>
		return 0;
   14318:	2000      	movs	r0, #0
}
   1431a:	b005      	add	sp, #20
   1431c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1431e:	466b      	mov	r3, sp
   14320:	4a0a      	ldr	r2, [pc, #40]	; (1434c <att_find_info_req+0x74>)
	data.chan = chan;
   14322:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   14324:	4631      	mov	r1, r6
   14326:	4628      	mov	r0, r5
   14328:	f006 fd72 	bl	1ae10 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1432c:	9b02      	ldr	r3, [sp, #8]
   1432e:	b943      	cbnz	r3, 14342 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   14330:	9b01      	ldr	r3, [sp, #4]
   14332:	6958      	ldr	r0, [r3, #20]
   14334:	f7ff fb08 	bl	13948 <tx_meta_data_free>
		net_buf_unref(data.buf);
   14338:	9801      	ldr	r0, [sp, #4]
   1433a:	f000 feb1 	bl	150a0 <net_buf_unref>
	if (!req) {
   1433e:	230a      	movs	r3, #10
   14340:	e7e5      	b.n	1430e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   14342:	9901      	ldr	r1, [sp, #4]
   14344:	4620      	mov	r0, r4
   14346:	f006 fd6e 	bl	1ae26 <bt_att_chan_send_rsp>
	return 0;
   1434a:	e7e5      	b.n	14318 <att_find_info_req+0x40>
   1434c:	0001aff1 	.word	0x0001aff1

00014350 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   14350:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   14352:	4c0b      	ldr	r4, [pc, #44]	; (14380 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   14354:	4d0b      	ldr	r5, [pc, #44]	; (14384 <bt_att_init+0x34>)
   14356:	4620      	mov	r0, r4
   14358:	f008 fac2 	bl	1c8e0 <z_impl_k_queue_init>
   1435c:	4629      	mov	r1, r5
   1435e:	4620      	mov	r0, r4
   14360:	f008 faca 	bl	1c8f8 <k_queue_append>
   14364:	f105 0114 	add.w	r1, r5, #20
   14368:	4620      	mov	r0, r4
   1436a:	f008 fac5 	bl	1c8f8 <k_queue_append>
   1436e:	f105 0128 	add.w	r1, r5, #40	; 0x28
   14372:	4620      	mov	r0, r4
   14374:	f008 fac0 	bl	1c8f8 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   14378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1437c:	f000 ba3a 	b.w	147f4 <bt_gatt_init>
   14380:	20000790 	.word	0x20000790
   14384:	20001c90 	.word	0x20001c90

00014388 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   14388:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1438a:	2300      	movs	r3, #0
{
   1438c:	4605      	mov	r5, r0
   1438e:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   14390:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   14392:	f004 fa85 	bl	188a0 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   14396:	4b0c      	ldr	r3, [pc, #48]	; (143c8 <bt_att_req_alloc+0x40>)
   14398:	681b      	ldr	r3, [r3, #0]
   1439a:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   1439c:	bf04      	itt	eq
   1439e:	2500      	moveq	r5, #0
   143a0:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   143a2:	a901      	add	r1, sp, #4
   143a4:	4809      	ldr	r0, [pc, #36]	; (143cc <bt_att_req_alloc+0x44>)
   143a6:	462a      	mov	r2, r5
   143a8:	4623      	mov	r3, r4
   143aa:	f003 fb99 	bl	17ae0 <k_mem_slab_alloc>
   143ae:	4601      	mov	r1, r0
   143b0:	b940      	cbnz	r0, 143c4 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   143b2:	9b01      	ldr	r3, [sp, #4]
   143b4:	2210      	movs	r2, #16
   143b6:	4618      	mov	r0, r3
   143b8:	f008 ff21 	bl	1d1fe <memset>
   143bc:	4603      	mov	r3, r0

	return req;
}
   143be:	4618      	mov	r0, r3
   143c0:	b003      	add	sp, #12
   143c2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   143c4:	2300      	movs	r3, #0
   143c6:	e7fa      	b.n	143be <bt_att_req_alloc+0x36>
   143c8:	20001ccc 	.word	0x20001ccc
   143cc:	20000760 	.word	0x20000760

000143d0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   143d0:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   143d2:	6883      	ldr	r3, [r0, #8]
{
   143d4:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   143d6:	b14b      	cbz	r3, 143ec <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   143d8:	6958      	ldr	r0, [r3, #20]
   143da:	f7ff fab5 	bl	13948 <tx_meta_data_free>
		net_buf_unref(req->buf);
   143de:	9b01      	ldr	r3, [sp, #4]
   143e0:	6898      	ldr	r0, [r3, #8]
   143e2:	f000 fe5d 	bl	150a0 <net_buf_unref>
		req->buf = NULL;
   143e6:	9b01      	ldr	r3, [sp, #4]
   143e8:	2200      	movs	r2, #0
   143ea:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   143ec:	4803      	ldr	r0, [pc, #12]	; (143fc <bt_att_req_free+0x2c>)
   143ee:	a901      	add	r1, sp, #4
   143f0:	f008 f9c1 	bl	1c776 <k_mem_slab_free>
}
   143f4:	b003      	add	sp, #12
   143f6:	f85d fb04 	ldr.w	pc, [sp], #4
   143fa:	bf00      	nop
   143fc:	20000760 	.word	0x20000760

00014400 <att_handle_rsp>:
{
   14400:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   14404:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   14406:	30b0      	adds	r0, #176	; 0xb0
{
   14408:	460e      	mov	r6, r1
   1440a:	4617      	mov	r7, r2
   1440c:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1440e:	f008 fb95 	bl	1cb3c <k_work_cancel_delayable>
	if (!chan->req) {
   14412:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   14416:	b930      	cbnz	r0, 14426 <att_handle_rsp+0x26>
	att_req_send_process(chan->att);
   14418:	6820      	ldr	r0, [r4, #0]
   1441a:	f006 ff9c 	bl	1b356 <att_req_send_process>
}
   1441e:	2000      	movs	r0, #0
   14420:	b002      	add	sp, #8
   14422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   14426:	4b11      	ldr	r3, [pc, #68]	; (1446c <att_handle_rsp+0x6c>)
   14428:	4298      	cmp	r0, r3
   1442a:	f04f 0800 	mov.w	r8, #0
   1442e:	d102      	bne.n	14436 <att_handle_rsp+0x36>
		chan->req = NULL;
   14430:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
   14434:	e7f0      	b.n	14418 <att_handle_rsp+0x18>
	func = chan->req->func;
   14436:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   1443a:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   1443e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   14442:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   14446:	f7ff ffc3 	bl	143d0 <bt_att_req_free>
	att_req_send_process(chan->att);
   1444a:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1444c:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   14450:	f006 ff81 	bl	1b356 <att_req_send_process>
	if (func) {
   14454:	f1b9 0f00 	cmp.w	r9, #0
   14458:	d0e1      	beq.n	1441e <att_handle_rsp+0x1e>
		func(chan->att->conn, err, pdu, len, params);
   1445a:	6820      	ldr	r0, [r4, #0]
   1445c:	f8cd a000 	str.w	sl, [sp]
   14460:	6800      	ldr	r0, [r0, #0]
   14462:	463b      	mov	r3, r7
   14464:	4632      	mov	r2, r6
   14466:	4629      	mov	r1, r5
   14468:	47c8      	blx	r9
   1446a:	e7d8      	b.n	1441e <att_handle_rsp+0x1e>
   1446c:	20001cd0 	.word	0x20001cd0

00014470 <bt_att_disconnected>:
{
   14470:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   14474:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   14478:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1447a:	2e00      	cmp	r6, #0
   1447c:	d056      	beq.n	1452c <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1447e:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   14482:	f106 0024 	add.w	r0, r6, #36	; 0x24
   14486:	f006 fea7 	bl	1b1d8 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1448a:	1f27      	subs	r7, r4, #4
   1448c:	f104 0894 	add.w	r8, r4, #148	; 0x94
   14490:	2200      	movs	r2, #0
   14492:	2300      	movs	r3, #0
   14494:	4640      	mov	r0, r8
   14496:	f007 fcc6 	bl	1be26 <net_buf_get>
   1449a:	4605      	mov	r5, r0
   1449c:	bb28      	cbnz	r0, 144ea <bt_att_disconnected+0x7a>
	if (chan->req) {
   1449e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   144a2:	b12b      	cbz	r3, 144b0 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   144a4:	4602      	mov	r2, r0
   144a6:	4601      	mov	r1, r0
   144a8:	230e      	movs	r3, #14
   144aa:	4638      	mov	r0, r7
   144ac:	f7ff ffa8 	bl	14400 <att_handle_rsp>
	chan->att = NULL;
   144b0:	2300      	movs	r3, #0
   144b2:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   144b6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   144b8:	2b00      	cmp	r3, #0
   144ba:	d137      	bne.n	1452c <bt_att_disconnected+0xbc>
	att_reset(att);
   144bc:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   144be:	9803      	ldr	r0, [sp, #12]
   144c0:	2200      	movs	r2, #0
   144c2:	2300      	movs	r3, #0
   144c4:	300c      	adds	r0, #12
   144c6:	f007 fcae 	bl	1be26 <net_buf_get>
   144ca:	4605      	mov	r5, r0
   144cc:	b9a0      	cbnz	r0, 144f8 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   144ce:	9803      	ldr	r0, [sp, #12]
	return list->head;
   144d0:	6845      	ldr	r5, [r0, #4]
   144d2:	b9c5      	cbnz	r5, 14506 <bt_att_disconnected+0x96>
	att->conn = NULL;
   144d4:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   144d6:	a903      	add	r1, sp, #12
   144d8:	4816      	ldr	r0, [pc, #88]	; (14534 <bt_att_disconnected+0xc4>)
   144da:	f008 f94c 	bl	1c776 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   144de:	6820      	ldr	r0, [r4, #0]
}
   144e0:	b004      	add	sp, #16
   144e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   144e6:	f000 bce7 	b.w	14eb8 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   144ea:	6968      	ldr	r0, [r5, #20]
   144ec:	f7ff fa2c 	bl	13948 <tx_meta_data_free>
		net_buf_unref(buf);
   144f0:	4628      	mov	r0, r5
   144f2:	f000 fdd5 	bl	150a0 <net_buf_unref>
   144f6:	e7cb      	b.n	14490 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   144f8:	6968      	ldr	r0, [r5, #20]
   144fa:	f7ff fa25 	bl	13948 <tx_meta_data_free>
		net_buf_unref(buf);
   144fe:	4628      	mov	r0, r5
   14500:	f000 fdce 	bl	150a0 <net_buf_unref>
   14504:	e7db      	b.n	144be <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14506:	6882      	ldr	r2, [r0, #8]
	return node->next;
   14508:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1450a:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1450c:	4295      	cmp	r5, r2
	list->tail = node;
   1450e:	bf08      	it	eq
   14510:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   14512:	686e      	ldr	r6, [r5, #4]
   14514:	b136      	cbz	r6, 14524 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   14516:	68eb      	ldr	r3, [r5, #12]
   14518:	9300      	str	r3, [sp, #0]
   1451a:	2300      	movs	r3, #0
   1451c:	6800      	ldr	r0, [r0, #0]
   1451e:	461a      	mov	r2, r3
   14520:	210e      	movs	r1, #14
   14522:	47b0      	blx	r6
		bt_att_req_free(req);
   14524:	4628      	mov	r0, r5
   14526:	f7ff ff53 	bl	143d0 <bt_att_req_free>
   1452a:	e7d0      	b.n	144ce <bt_att_disconnected+0x5e>
}
   1452c:	b004      	add	sp, #16
   1452e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14532:	bf00      	nop
   14534:	20000728 	.word	0x20000728

00014538 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   14538:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1453a:	b930      	cbnz	r0, 1454a <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1453c:	4907      	ldr	r1, [pc, #28]	; (1455c <find_cf_cfg+0x24>)
   1453e:	4808      	ldr	r0, [pc, #32]	; (14560 <find_cf_cfg+0x28>)
   14540:	f007 f98f 	bl	1b862 <bt_addr_le_eq>
   14544:	b138      	cbz	r0, 14556 <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   14546:	4807      	ldr	r0, [pc, #28]	; (14564 <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
   14548:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1454a:	4a05      	ldr	r2, [pc, #20]	; (14560 <find_cf_cfg+0x28>)
   1454c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   14550:	f006 fad0 	bl	1aaf4 <bt_conn_is_peer_addr_le>
   14554:	e7f6      	b.n	14544 <find_cf_cfg+0xc>
	return NULL;
   14556:	2000      	movs	r0, #0
   14558:	e7f6      	b.n	14548 <find_cf_cfg+0x10>
   1455a:	bf00      	nop
   1455c:	0001dbbb 	.word	0x0001dbbb
   14560:	20001cf9 	.word	0x20001cf9
   14564:	20001cf8 	.word	0x20001cf8

00014568 <find_sc_cfg>:
{
   14568:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1456a:	4c06      	ldr	r4, [pc, #24]	; (14584 <find_sc_cfg+0x1c>)
   1456c:	7823      	ldrb	r3, [r4, #0]
   1456e:	4283      	cmp	r3, r0
   14570:	d103      	bne.n	1457a <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   14572:	1c60      	adds	r0, r4, #1
   14574:	f007 f975 	bl	1b862 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   14578:	b908      	cbnz	r0, 1457e <find_sc_cfg+0x16>
	return NULL;
   1457a:	2000      	movs	r0, #0
}
   1457c:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1457e:	4620      	mov	r0, r4
   14580:	e7fc      	b.n	1457c <find_sc_cfg+0x14>
   14582:	bf00      	nop
   14584:	20001f12 	.word	0x20001f12

00014588 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   14588:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   1458a:	1c4a      	adds	r2, r1, #1
{
   1458c:	460c      	mov	r4, r1
		if (conn) {
   1458e:	b138      	cbz	r0, 145a0 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   14590:	7809      	ldrb	r1, [r1, #0]
   14592:	f006 faaf 	bl	1aaf4 <bt_conn_is_peer_addr_le>
   14596:	b108      	cbz	r0, 1459c <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   14598:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   1459a:	bd10      	pop	{r4, pc}
	return NULL;
   1459c:	2000      	movs	r0, #0
   1459e:	e7fc      	b.n	1459a <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   145a0:	4902      	ldr	r1, [pc, #8]	; (145ac <find_ccc_cfg+0x24>)
   145a2:	4610      	mov	r0, r2
   145a4:	f007 f95d 	bl	1b862 <bt_addr_le_eq>
   145a8:	e7f5      	b.n	14596 <find_ccc_cfg+0xe>
   145aa:	bf00      	nop
   145ac:	0001dbbb 	.word	0x0001dbbb

000145b0 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   145b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   145b4:	461e      	mov	r6, r3
   145b6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   145ba:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   145be:	4681      	mov	r9, r0
   145c0:	460f      	mov	r7, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   145c2:	2b00      	cmp	r3, #0
   145c4:	d13d      	bne.n	14642 <bt_gatt_attr_write_ccc+0x92>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   145c6:	1e73      	subs	r3, r6, #1
   145c8:	2b01      	cmp	r3, #1
   145ca:	d83d      	bhi.n	14648 <bt_gatt_attr_write_ccc+0x98>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   145cc:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   145ce:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   145d0:	7815      	ldrb	r5, [r2, #0]
   145d2:	bf18      	it	ne
   145d4:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   145d6:	f7ff ffd7 	bl	14588 <find_ccc_cfg>
	if (!cfg) {
   145da:	4604      	mov	r4, r0
   145dc:	b980      	cbnz	r0, 14600 <bt_gatt_attr_write_ccc+0x50>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   145de:	b915      	cbnz	r5, 145e6 <bt_gatt_attr_write_ccc+0x36>
			return len;
   145e0:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   145e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   145e6:	4641      	mov	r1, r8
   145e8:	f7ff ffce 	bl	14588 <find_ccc_cfg>
		if (!cfg) {
   145ec:	4604      	mov	r4, r0
   145ee:	b370      	cbz	r0, 1464e <bt_gatt_attr_write_ccc+0x9e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   145f0:	f109 0188 	add.w	r1, r9, #136	; 0x88
   145f4:	3001      	adds	r0, #1
   145f6:	f007 f93c 	bl	1b872 <bt_addr_le_copy>
		cfg->id = conn->id;
   145fa:	f899 3008 	ldrb.w	r3, [r9, #8]
   145fe:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   14600:	f8d8 3010 	ldr.w	r3, [r8, #16]
   14604:	b98b      	cbnz	r3, 1462a <bt_gatt_attr_write_ccc+0x7a>
	cfg->value = value;
   14606:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   14608:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   1460c:	42ab      	cmp	r3, r5
   1460e:	d003      	beq.n	14618 <bt_gatt_attr_write_ccc+0x68>
		gatt_ccc_changed(attr, ccc);
   14610:	4641      	mov	r1, r8
   14612:	4638      	mov	r0, r7
   14614:	f007 f8b1 	bl	1b77a <gatt_ccc_changed>
	if (!value) {
   14618:	2d00      	cmp	r5, #0
   1461a:	d1e1      	bne.n	145e0 <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1461c:	490d      	ldr	r1, [pc, #52]	; (14654 <bt_gatt_attr_write_ccc+0xa4>)
   1461e:	1c60      	adds	r0, r4, #1
   14620:	f007 f927 	bl	1b872 <bt_addr_le_copy>
	cfg->id = 0U;
   14624:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   14626:	8125      	strh	r5, [r4, #8]
}
   14628:	e7da      	b.n	145e0 <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1462a:	462a      	mov	r2, r5
   1462c:	4639      	mov	r1, r7
   1462e:	4648      	mov	r0, r9
   14630:	4798      	blx	r3
		if (write < 0) {
   14632:	2800      	cmp	r0, #0
   14634:	dbd5      	blt.n	145e2 <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   14636:	3801      	subs	r0, #1
   14638:	2801      	cmp	r0, #1
   1463a:	d9e4      	bls.n	14606 <bt_gatt_attr_write_ccc+0x56>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1463c:	f06f 000d 	mvn.w	r0, #13
   14640:	e7cf      	b.n	145e2 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14642:	f06f 0006 	mvn.w	r0, #6
   14646:	e7cc      	b.n	145e2 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   14648:	f06f 000c 	mvn.w	r0, #12
   1464c:	e7c9      	b.n	145e2 <bt_gatt_attr_write_ccc+0x32>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1464e:	f06f 0010 	mvn.w	r0, #16
   14652:	e7c6      	b.n	145e2 <bt_gatt_attr_write_ccc+0x32>
   14654:	0001dbbb 	.word	0x0001dbbb

00014658 <read_ppcp>:
{
   14658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1465a:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1465c:	4a07      	ldr	r2, [pc, #28]	; (1467c <read_ppcp+0x24>)
{
   1465e:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   14660:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   14664:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   14668:	2308      	movs	r3, #8
   1466a:	9300      	str	r3, [sp, #0]
   1466c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   14670:	446b      	add	r3, sp
   14672:	f007 f91c 	bl	1b8ae <bt_gatt_attr_read.constprop.0>
}
   14676:	b005      	add	sp, #20
   14678:	f85d fb04 	ldr.w	pc, [sp], #4
   1467c:	00280018 	.word	0x00280018

00014680 <clear_cf_cfg>:
{
   14680:	4602      	mov	r2, r0
   14682:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   14684:	4908      	ldr	r1, [pc, #32]	; (146a8 <clear_cf_cfg+0x28>)
   14686:	3001      	adds	r0, #1
   14688:	f007 f8f3 	bl	1b872 <bt_addr_le_copy>
   1468c:	2300      	movs	r3, #0
   1468e:	7213      	strb	r3, [r2, #8]
   14690:	320c      	adds	r2, #12
   14692:	f3bf 8f5b 	dmb	ish
   14696:	e852 1f00 	ldrex	r1, [r2]
   1469a:	e842 3000 	strex	r0, r3, [r2]
   1469e:	2800      	cmp	r0, #0
   146a0:	d1f9      	bne.n	14696 <clear_cf_cfg+0x16>
   146a2:	f3bf 8f5b 	dmb	ish
}
   146a6:	bd08      	pop	{r3, pc}
   146a8:	0001dbbb 	.word	0x0001dbbb

000146ac <sc_save>:
{
   146ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   146b0:	4680      	mov	r8, r0
   146b2:	460f      	mov	r7, r1
   146b4:	4616      	mov	r6, r2
   146b6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   146b8:	f7ff ff56 	bl	14568 <find_sc_cfg>
	if (!cfg) {
   146bc:	4604      	mov	r4, r0
   146be:	b948      	cbnz	r0, 146d4 <sc_save+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   146c0:	490b      	ldr	r1, [pc, #44]	; (146f0 <sc_save+0x44>)
   146c2:	f7ff ff51 	bl	14568 <find_sc_cfg>
		if (!cfg) {
   146c6:	4604      	mov	r4, r0
   146c8:	b180      	cbz	r0, 146ec <sc_save+0x40>
		cfg->id = id;
   146ca:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   146ce:	4639      	mov	r1, r7
   146d0:	f007 f8cf 	bl	1b872 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   146d4:	8922      	ldrh	r2, [r4, #8]
   146d6:	8963      	ldrh	r3, [r4, #10]
   146d8:	b91a      	cbnz	r2, 146e2 <sc_save+0x36>
   146da:	b92b      	cbnz	r3, 146e8 <sc_save+0x3c>
		cfg->data.start = start;
   146dc:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   146de:	8165      	strh	r5, [r4, #10]
   146e0:	e004      	b.n	146ec <sc_save+0x40>
	if (new_start >= *start && new_end <= *end) {
   146e2:	4296      	cmp	r6, r2
		*start = new_start;
   146e4:	bf38      	it	cc
   146e6:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   146e8:	429d      	cmp	r5, r3
   146ea:	d8f8      	bhi.n	146de <sc_save+0x32>
}
   146ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   146f0:	0001dbbb 	.word	0x0001dbbb

000146f4 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   146f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   146f8:	4b23      	ldr	r3, [pc, #140]	; (14788 <disconnected_cb+0x94>)
{
   146fa:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   146fc:	6882      	ldr	r2, [r0, #8]
   146fe:	429a      	cmp	r2, r3
{
   14700:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   14702:	d102      	bne.n	1470a <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   14704:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   14706:	8963      	ldrh	r3, [r4, #10]
   14708:	bb33      	cbnz	r3, 14758 <disconnected_cb+0x64>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1470a:	2001      	movs	r0, #1
   1470c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   14710:	f006 f9a7 	bl	1aa62 <bt_conn_unref>
		if (ccc->cfg_changed) {
   14714:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   14716:	2100      	movs	r1, #0
   14718:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1471a:	2b00      	cmp	r3, #0
   1471c:	d0f5      	beq.n	1470a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1471e:	4638      	mov	r0, r7
   14720:	4798      	blx	r3
   14722:	e7f2      	b.n	1470a <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14724:	f105 0888 	add.w	r8, r5, #136	; 0x88
   14728:	7a28      	ldrb	r0, [r5, #8]
   1472a:	4641      	mov	r1, r8
   1472c:	f005 ff71 	bl	1a612 <bt_addr_le_is_bonded>
   14730:	b968      	cbnz	r0, 1474e <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   14732:	4b16      	ldr	r3, [pc, #88]	; (1478c <disconnected_cb+0x98>)
   14734:	429c      	cmp	r4, r3
   14736:	d102      	bne.n	1473e <disconnected_cb+0x4a>
					sc_clear(conn);
   14738:	4628      	mov	r0, r5
   1473a:	f007 f8a6 	bl	1b88a <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1473e:	4914      	ldr	r1, [pc, #80]	; (14790 <disconnected_cb+0x9c>)
   14740:	4630      	mov	r0, r6
   14742:	f007 f896 	bl	1b872 <bt_addr_le_copy>
	cfg->id = 0U;
   14746:	2300      	movs	r3, #0
   14748:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1474a:	8123      	strh	r3, [r4, #8]
}
   1474c:	e7e2      	b.n	14714 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1474e:	4641      	mov	r1, r8
   14750:	4630      	mov	r0, r6
   14752:	f007 f88e 	bl	1b872 <bt_addr_le_copy>
   14756:	e7dd      	b.n	14714 <disconnected_cb+0x20>
		if (!cfg->value) {
   14758:	8923      	ldrh	r3, [r4, #8]
   1475a:	2b00      	cmp	r3, #0
   1475c:	d0da      	beq.n	14714 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1475e:	4626      	mov	r6, r4
   14760:	4628      	mov	r0, r5
   14762:	f816 1b01 	ldrb.w	r1, [r6], #1
   14766:	4632      	mov	r2, r6
   14768:	f006 f9c4 	bl	1aaf4 <bt_conn_is_peer_addr_le>
   1476c:	2800      	cmp	r0, #0
   1476e:	d1d9      	bne.n	14724 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   14770:	7820      	ldrb	r0, [r4, #0]
   14772:	4631      	mov	r1, r6
   14774:	f7fe fe74 	bl	13460 <bt_conn_lookup_addr_le>
			if (tmp) {
   14778:	2800      	cmp	r0, #0
   1477a:	d0cb      	beq.n	14714 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   1477c:	7a83      	ldrb	r3, [r0, #10]
   1477e:	2b07      	cmp	r3, #7
   14780:	d1c6      	bne.n	14710 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   14782:	f006 f96e 	bl	1aa62 <bt_conn_unref>
	if (!value_used) {
   14786:	e7c0      	b.n	1470a <disconnected_cb+0x16>
   14788:	000145b1 	.word	0x000145b1
   1478c:	2000061c 	.word	0x2000061c
   14790:	0001dbbb 	.word	0x0001dbbb

00014794 <sc_indicate_rsp>:
{
   14794:	b510      	push	{r4, lr}
   14796:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14798:	4815      	ldr	r0, [pc, #84]	; (147f0 <sc_indicate_rsp+0x5c>)
   1479a:	f3bf 8f5b 	dmb	ish
   1479e:	e850 3f00 	ldrex	r3, [r0]
   147a2:	f023 0302 	bic.w	r3, r3, #2
   147a6:	e840 3200 	strex	r2, r3, [r0]
   147aa:	2a00      	cmp	r2, #0
   147ac:	d1f7      	bne.n	1479e <sc_indicate_rsp+0xa>
   147ae:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   147b2:	f3bf 8f5b 	dmb	ish
   147b6:	6803      	ldr	r3, [r0, #0]
   147b8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   147bc:	07da      	lsls	r2, r3, #31
   147be:	d504      	bpl.n	147ca <sc_indicate_rsp+0x36>
	k_work_reschedule(&gatt_sc.work, timeout);
   147c0:	2200      	movs	r2, #0
   147c2:	2300      	movs	r3, #0
   147c4:	3830      	subs	r0, #48	; 0x30
   147c6:	f003 fd83 	bl	182d0 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   147ca:	4620      	mov	r0, r4
   147cc:	f006 ffa4 	bl	1b718 <bt_att_fixed_chan_only>
   147d0:	b160      	cbz	r0, 147ec <sc_indicate_rsp+0x58>
		cfg = find_cf_cfg(conn);
   147d2:	4620      	mov	r0, r4
   147d4:	f7ff feb0 	bl	14538 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   147d8:	b140      	cbz	r0, 147ec <sc_indicate_rsp+0x58>
   147da:	7a03      	ldrb	r3, [r0, #8]
   147dc:	07db      	lsls	r3, r3, #31
   147de:	d505      	bpl.n	147ec <sc_indicate_rsp+0x58>
}
   147e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   147e4:	2100      	movs	r1, #0
   147e6:	300c      	adds	r0, #12
   147e8:	f007 b8f8 	b.w	1b9dc <atomic_set_bit>
}
   147ec:	bd10      	pop	{r4, pc}
   147ee:	bf00      	nop
   147f0:	200018c8 	.word	0x200018c8

000147f4 <bt_gatt_init>:
{
   147f4:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   147f6:	4b20      	ldr	r3, [pc, #128]	; (14878 <bt_gatt_init+0x84>)
   147f8:	f3bf 8f5b 	dmb	ish
   147fc:	2201      	movs	r2, #1
   147fe:	e853 1f00 	ldrex	r1, [r3]
   14802:	2900      	cmp	r1, #0
   14804:	d103      	bne.n	1480e <bt_gatt_init+0x1a>
   14806:	e843 2000 	strex	r0, r2, [r3]
   1480a:	2800      	cmp	r0, #0
   1480c:	d1f7      	bne.n	147fe <bt_gatt_init+0xa>
   1480e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   14812:	d130      	bne.n	14876 <bt_gatt_init+0x82>
   14814:	f3bf 8f5b 	dmb	ish
   14818:	4b18      	ldr	r3, [pc, #96]	; (1487c <bt_gatt_init+0x88>)
   1481a:	e853 1f00 	ldrex	r1, [r3]
   1481e:	2900      	cmp	r1, #0
   14820:	d103      	bne.n	1482a <bt_gatt_init+0x36>
   14822:	e843 2000 	strex	r0, r2, [r3]
   14826:	2800      	cmp	r0, #0
   14828:	d1f7      	bne.n	1481a <bt_gatt_init+0x26>
   1482a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1482e:	d108      	bne.n	14842 <bt_gatt_init+0x4e>
   14830:	4913      	ldr	r1, [pc, #76]	; (14880 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   14832:	4a14      	ldr	r2, [pc, #80]	; (14884 <bt_gatt_init+0x90>)
   14834:	880b      	ldrh	r3, [r1, #0]
   14836:	4c14      	ldr	r4, [pc, #80]	; (14888 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   14838:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1483a:	42a2      	cmp	r2, r4
   1483c:	d315      	bcc.n	1486a <bt_gatt_init+0x76>
   1483e:	b100      	cbz	r0, 14842 <bt_gatt_init+0x4e>
   14840:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   14842:	4b12      	ldr	r3, [pc, #72]	; (1488c <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   14844:	4912      	ldr	r1, [pc, #72]	; (14890 <bt_gatt_init+0x9c>)
   14846:	4813      	ldr	r0, [pc, #76]	; (14894 <bt_gatt_init+0xa0>)
   14848:	2200      	movs	r2, #0
	list->tail = NULL;
   1484a:	e9c3 2200 	strd	r2, r2, [r3]
   1484e:	f008 f967 	bl	1cb20 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   14852:	4810      	ldr	r0, [pc, #64]	; (14894 <bt_gatt_init+0xa0>)
   14854:	f44f 72a4 	mov.w	r2, #328	; 0x148
   14858:	2300      	movs	r3, #0
   1485a:	f7fc fefb 	bl	11654 <bt_long_wq_schedule>
}
   1485e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   14862:	490d      	ldr	r1, [pc, #52]	; (14898 <bt_gatt_init+0xa4>)
   14864:	480d      	ldr	r0, [pc, #52]	; (1489c <bt_gatt_init+0xa8>)
   14866:	f008 b95b 	b.w	1cb20 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1486a:	6850      	ldr	r0, [r2, #4]
   1486c:	4403      	add	r3, r0
   1486e:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   14870:	3208      	adds	r2, #8
   14872:	2001      	movs	r0, #1
   14874:	e7e1      	b.n	1483a <bt_gatt_init+0x46>
}
   14876:	bd10      	pop	{r4, pc}
   14878:	20001d0c 	.word	0x20001d0c
   1487c:	20001d08 	.word	0x20001d08
   14880:	20001f1e 	.word	0x20001f1e
   14884:	0001d498 	.word	0x0001d498
   14888:	0001d4a8 	.word	0x0001d4a8
   1488c:	20001d10 	.word	0x20001d10
   14890:	0001bb59 	.word	0x0001bb59
   14894:	20001820 	.word	0x20001820
   14898:	00014c69 	.word	0x00014c69
   1489c:	20001898 	.word	0x20001898

000148a0 <bt_gatt_attr_get_handle>:
{
   148a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   148a4:	4603      	mov	r3, r0
   148a6:	b148      	cbz	r0, 148bc <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   148a8:	8a00      	ldrh	r0, [r0, #16]
   148aa:	b938      	cbnz	r0, 148bc <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   148ac:	4912      	ldr	r1, [pc, #72]	; (148f8 <bt_gatt_attr_get_handle+0x58>)
   148ae:	f8df e04c 	ldr.w	lr, [pc, #76]	; 148fc <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   148b2:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   148b4:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   148b8:	4571      	cmp	r1, lr
   148ba:	d301      	bcc.n	148c0 <bt_gatt_attr_get_handle+0x20>
}
   148bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   148c0:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   148c4:	42bb      	cmp	r3, r7
   148c6:	d304      	bcc.n	148d2 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   148c8:	fb0c 7206 	mla	r2, ip, r6, r7
   148cc:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   148ce:	4293      	cmp	r3, r2
   148d0:	d90e      	bls.n	148f0 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   148d2:	4434      	add	r4, r6
   148d4:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   148d6:	3108      	adds	r1, #8
   148d8:	4614      	mov	r4, r2
   148da:	e7ed      	b.n	148b8 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   148dc:	fb0c 7805 	mla	r8, ip, r5, r7
   148e0:	4543      	cmp	r3, r8
   148e2:	d007      	beq.n	148f4 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   148e4:	3501      	adds	r5, #1
   148e6:	1962      	adds	r2, r4, r5
   148e8:	42b5      	cmp	r5, r6
   148ea:	b292      	uxth	r2, r2
   148ec:	d1f6      	bne.n	148dc <bt_gatt_attr_get_handle+0x3c>
   148ee:	e7f2      	b.n	148d6 <bt_gatt_attr_get_handle+0x36>
   148f0:	2500      	movs	r5, #0
   148f2:	e7f8      	b.n	148e6 <bt_gatt_attr_get_handle+0x46>
   148f4:	4610      	mov	r0, r2
   148f6:	e7e1      	b.n	148bc <bt_gatt_attr_get_handle+0x1c>
   148f8:	0001d498 	.word	0x0001d498
   148fc:	0001d4a8 	.word	0x0001d4a8

00014900 <bt_gatt_foreach_attr_type>:
{
   14900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14904:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   14908:	9100      	str	r1, [sp, #0]
   1490a:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1490c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14910:	2d00      	cmp	r5, #0
   14912:	bf08      	it	eq
   14914:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   14916:	4b24      	ldr	r3, [pc, #144]	; (149a8 <bt_gatt_foreach_attr_type+0xa8>)
   14918:	881b      	ldrh	r3, [r3, #0]
   1491a:	4283      	cmp	r3, r0
{
   1491c:	4607      	mov	r7, r0
   1491e:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   14920:	d23c      	bcs.n	1499c <bt_gatt_foreach_attr_type+0x9c>
}
   14922:	b003      	add	sp, #12
   14924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   14928:	6873      	ldr	r3, [r6, #4]
   1492a:	4423      	add	r3, r4
   1492c:	42bb      	cmp	r3, r7
   1492e:	d232      	bcs.n	14996 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   14930:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   14932:	3608      	adds	r6, #8
   14934:	4b1d      	ldr	r3, [pc, #116]	; (149ac <bt_gatt_foreach_attr_type+0xac>)
   14936:	429e      	cmp	r6, r3
   14938:	d3f6      	bcc.n	14928 <bt_gatt_foreach_attr_type+0x28>
   1493a:	e7f2      	b.n	14922 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1493c:	5889      	ldr	r1, [r1, r2]
   1493e:	9301      	str	r3, [sp, #4]
   14940:	4640      	mov	r0, r8
   14942:	f005 fbc7 	bl	1a0d4 <bt_uuid_cmp>
   14946:	9b01      	ldr	r3, [sp, #4]
   14948:	b190      	cbz	r0, 14970 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1494a:	3401      	adds	r4, #1
   1494c:	f10a 0a01 	add.w	sl, sl, #1
   14950:	b2a4      	uxth	r4, r4
   14952:	6873      	ldr	r3, [r6, #4]
   14954:	4553      	cmp	r3, sl
   14956:	d9ec      	bls.n	14932 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   14958:	9b00      	ldr	r3, [sp, #0]
   1495a:	429c      	cmp	r4, r3
   1495c:	d8e1      	bhi.n	14922 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1495e:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   14960:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   14962:	d3f2      	bcc.n	1494a <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   14964:	fb0b f20a 	mul.w	r2, fp, sl
   14968:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1496a:	f1b8 0f00 	cmp.w	r8, #0
   1496e:	d1e5      	bne.n	1493c <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   14970:	f1b9 0f00 	cmp.w	r9, #0
   14974:	d10b      	bne.n	1498e <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   14976:	3d01      	subs	r5, #1
   14978:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1497a:	4618      	mov	r0, r3
   1497c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1497e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14980:	4621      	mov	r1, r4
   14982:	4798      	blx	r3
	if (!*num_matches) {
   14984:	2d00      	cmp	r5, #0
   14986:	d0cc      	beq.n	14922 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   14988:	2800      	cmp	r0, #0
   1498a:	d1de      	bne.n	1494a <bt_gatt_foreach_attr_type+0x4a>
   1498c:	e7c9      	b.n	14922 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1498e:	68da      	ldr	r2, [r3, #12]
   14990:	4591      	cmp	r9, r2
   14992:	d1da      	bne.n	1494a <bt_gatt_foreach_attr_type+0x4a>
   14994:	e7ef      	b.n	14976 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   14996:	f04f 0a00 	mov.w	sl, #0
   1499a:	e7da      	b.n	14952 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1499c:	4e04      	ldr	r6, [pc, #16]	; (149b0 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   1499e:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   149a0:	f04f 0b14 	mov.w	fp, #20
   149a4:	e7c6      	b.n	14934 <bt_gatt_foreach_attr_type+0x34>
   149a6:	bf00      	nop
   149a8:	20001f1e 	.word	0x20001f1e
   149ac:	0001d4a8 	.word	0x0001d4a8
   149b0:	0001d498 	.word	0x0001d498

000149b4 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   149b4:	b510      	push	{r4, lr}
   149b6:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   149b8:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   149ba:	aa1c      	add	r2, sp, #112	; 0x70
   149bc:	4669      	mov	r1, sp
   149be:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   149c0:	e9cd 3300 	strd	r3, r3, [sp]
   149c4:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   149c8:	f005 fa87 	bl	19eda <tc_cmac_setup>
   149cc:	b320      	cbz	r0, 14a18 <db_hash_gen.constprop.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   149ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
   149d2:	2001      	movs	r0, #1
   149d4:	4a11      	ldr	r2, [pc, #68]	; (14a1c <db_hash_gen.constprop.0+0x68>)
   149d6:	ab04      	add	r3, sp, #16
   149d8:	f007 f8b3 	bl	1bb42 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   149dc:	4810      	ldr	r0, [pc, #64]	; (14a20 <db_hash_gen.constprop.0+0x6c>)
   149de:	a904      	add	r1, sp, #16
   149e0:	f005 fb10 	bl	1a004 <tc_cmac_final>
   149e4:	b1c0      	cbz	r0, 14a18 <db_hash_gen.constprop.0+0x64>
   149e6:	4b0e      	ldr	r3, [pc, #56]	; (14a20 <db_hash_gen.constprop.0+0x6c>)
   149e8:	2208      	movs	r2, #8
   149ea:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   149ee:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   149f0:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   149f4:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   149f8:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   149fa:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   149fc:	d1f7      	bne.n	149ee <db_hash_gen.constprop.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   149fe:	f3bf 8f5b 	dmb	ish
   14a02:	4b08      	ldr	r3, [pc, #32]	; (14a24 <db_hash_gen.constprop.0+0x70>)
   14a04:	e853 1f00 	ldrex	r1, [r3]
   14a08:	f041 0104 	orr.w	r1, r1, #4
   14a0c:	e843 1200 	strex	r2, r1, [r3]
   14a10:	2a00      	cmp	r2, #0
   14a12:	d1f7      	bne.n	14a04 <db_hash_gen.constprop.0+0x50>
   14a14:	f3bf 8f5b 	dmb	ish
}
   14a18:	b048      	add	sp, #288	; 0x120
   14a1a:	bd10      	pop	{r4, pc}
   14a1c:	0001b7bd 	.word	0x0001b7bd
   14a20:	20001810 	.word	0x20001810
   14a24:	200018c8 	.word	0x200018c8

00014a28 <db_hash_read>:
{
   14a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   14a2c:	4918      	ldr	r1, [pc, #96]	; (14a90 <db_hash_read+0x68>)
{
   14a2e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   14a32:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   14a34:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   14a38:	461e      	mov	r6, r3
   14a3a:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   14a3c:	f008 f892 	bl	1cb64 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14a40:	f3bf 8f5b 	dmb	ish
   14a44:	4b13      	ldr	r3, [pc, #76]	; (14a94 <db_hash_read+0x6c>)
   14a46:	681b      	ldr	r3, [r3, #0]
   14a48:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   14a4c:	0759      	lsls	r1, r3, #29
   14a4e:	d401      	bmi.n	14a54 <db_hash_read+0x2c>
		db_hash_gen(true);
   14a50:	f7ff ffb0 	bl	149b4 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   14a54:	4620      	mov	r0, r4
   14a56:	f7ff fd6f 	bl	14538 <find_cf_cfg>
	if (cfg &&
   14a5a:	4604      	mov	r4, r0
   14a5c:	b170      	cbz	r0, 14a7c <db_hash_read+0x54>
   14a5e:	7a03      	ldrb	r3, [r0, #8]
   14a60:	07da      	lsls	r2, r3, #31
   14a62:	d50b      	bpl.n	14a7c <db_hash_read+0x54>
   14a64:	f3bf 8f5b 	dmb	ish
   14a68:	68e3      	ldr	r3, [r4, #12]
   14a6a:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
   14a6e:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   14a70:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
   14a74:	d402      	bmi.n	14a7c <db_hash_read+0x54>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   14a76:	2101      	movs	r1, #1
   14a78:	f006 ffb0 	bl	1b9dc <atomic_set_bit>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   14a7c:	2310      	movs	r3, #16
   14a7e:	9306      	str	r3, [sp, #24]
   14a80:	463a      	mov	r2, r7
   14a82:	4631      	mov	r1, r6
   14a84:	4628      	mov	r0, r5
   14a86:	4b04      	ldr	r3, [pc, #16]	; (14a98 <db_hash_read+0x70>)
}
   14a88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   14a8c:	f006 bf0f 	b.w	1b8ae <bt_gatt_attr_read.constprop.0>
   14a90:	20001850 	.word	0x20001850
   14a94:	200018c8 	.word	0x200018c8
   14a98:	20001810 	.word	0x20001810

00014a9c <bt_gatt_attr_next>:
{
   14a9c:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   14a9e:	2300      	movs	r3, #0
   14aa0:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   14aa2:	f7ff fefd 	bl	148a0 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   14aa6:	1c41      	adds	r1, r0, #1
   14aa8:	b289      	uxth	r1, r1
   14aaa:	4608      	mov	r0, r1
   14aac:	4a03      	ldr	r2, [pc, #12]	; (14abc <bt_gatt_attr_next+0x20>)
   14aae:	ab01      	add	r3, sp, #4
   14ab0:	f007 f847 	bl	1bb42 <bt_gatt_foreach_attr>
}
   14ab4:	9801      	ldr	r0, [sp, #4]
   14ab6:	b003      	add	sp, #12
   14ab8:	f85d fb04 	ldr.w	pc, [sp], #4
   14abc:	0001b775 	.word	0x0001b775

00014ac0 <gatt_indicate>:
{
   14ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14ac4:	4615      	mov	r5, r2
   14ac6:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   14ac8:	2294      	movs	r2, #148	; 0x94
   14aca:	6869      	ldr	r1, [r5, #4]
{
   14acc:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   14ace:	f007 f845 	bl	1bb5c <bt_gatt_check_perm>
   14ad2:	4680      	mov	r8, r0
   14ad4:	2800      	cmp	r0, #0
   14ad6:	d144      	bne.n	14b62 <gatt_indicate+0xa2>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   14ad8:	6869      	ldr	r1, [r5, #4]
   14ada:	2202      	movs	r2, #2
   14adc:	4630      	mov	r0, r6
   14ade:	f007 f866 	bl	1bbae <bt_gatt_is_subscribed>
   14ae2:	2800      	cmp	r0, #0
   14ae4:	d040      	beq.n	14b68 <gatt_indicate+0xa8>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   14ae6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   14aea:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   14aec:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   14aee:	f7ff fc4b 	bl	14388 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   14af2:	3702      	adds	r7, #2
	if (!req) {
   14af4:	4604      	mov	r4, r0
   14af6:	b160      	cbz	r0, 14b12 <gatt_indicate+0x52>
	req->func = func;
   14af8:	4b1d      	ldr	r3, [pc, #116]	; (14b70 <gatt_indicate+0xb0>)
   14afa:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   14afc:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   14afe:	463a      	mov	r2, r7
   14b00:	211d      	movs	r1, #29
   14b02:	4630      	mov	r0, r6
   14b04:	f006 fd44 	bl	1b590 <bt_att_create_pdu>
	if (!buf) {
   14b08:	4607      	mov	r7, r0
   14b0a:	b938      	cbnz	r0, 14b1c <gatt_indicate+0x5c>
		bt_att_req_free(req);
   14b0c:	4620      	mov	r0, r4
   14b0e:	f7ff fc5f 	bl	143d0 <bt_att_req_free>
		return -ENOMEM;
   14b12:	f06f 050b 	mvn.w	r5, #11
}
   14b16:	4628      	mov	r0, r5
   14b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   14b1c:	2301      	movs	r3, #1
   14b1e:	4642      	mov	r2, r8
   14b20:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   14b22:	f107 0a08 	add.w	sl, r7, #8
   14b26:	f006 fe1e 	bl	1b766 <bt_att_set_tx_meta_data>
   14b2a:	2102      	movs	r1, #2
   14b2c:	4650      	mov	r0, sl
   14b2e:	f007 fa15 	bl	1bf5c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   14b32:	4680      	mov	r8, r0
   14b34:	4650      	mov	r0, sl
   14b36:	f828 9b02 	strh.w	r9, [r8], #2
   14b3a:	8aa9      	ldrh	r1, [r5, #20]
   14b3c:	f007 fa0e 	bl	1bf5c <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14b40:	8aaa      	ldrh	r2, [r5, #20]
   14b42:	6929      	ldr	r1, [r5, #16]
   14b44:	4640      	mov	r0, r8
   14b46:	f008 fb4c 	bl	1d1e2 <memcpy>
	req->buf = buf;
   14b4a:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   14b4c:	4621      	mov	r1, r4
   14b4e:	4630      	mov	r0, r6
   14b50:	f006 fdcd 	bl	1b6ee <bt_att_req_send>
	if (err) {
   14b54:	4605      	mov	r5, r0
   14b56:	2800      	cmp	r0, #0
   14b58:	d0dd      	beq.n	14b16 <gatt_indicate+0x56>
		bt_att_req_free(req);
   14b5a:	4620      	mov	r0, r4
   14b5c:	f7ff fc38 	bl	143d0 <bt_att_req_free>
   14b60:	e7d9      	b.n	14b16 <gatt_indicate+0x56>
		return -EPERM;
   14b62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   14b66:	e7d6      	b.n	14b16 <gatt_indicate+0x56>
			return -EINVAL;
   14b68:	f06f 0515 	mvn.w	r5, #21
   14b6c:	e7d3      	b.n	14b16 <gatt_indicate+0x56>
   14b6e:	bf00      	nop
   14b70:	0001b78f 	.word	0x0001b78f

00014b74 <bt_gatt_indicate>:
{
   14b74:	b530      	push	{r4, r5, lr}
   14b76:	4b39      	ldr	r3, [pc, #228]	; (14c5c <bt_gatt_indicate+0xe8>)
   14b78:	f3bf 8f5b 	dmb	ish
   14b7c:	681b      	ldr	r3, [r3, #0]
   14b7e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14b82:	075a      	lsls	r2, r3, #29
{
   14b84:	b08b      	sub	sp, #44	; 0x2c
   14b86:	4604      	mov	r4, r0
   14b88:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14b8a:	d561      	bpl.n	14c50 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   14b8c:	b110      	cbz	r0, 14b94 <bt_gatt_indicate+0x20>
   14b8e:	7a83      	ldrb	r3, [r0, #10]
   14b90:	2b07      	cmp	r3, #7
   14b92:	d160      	bne.n	14c56 <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
   14b94:	6868      	ldr	r0, [r5, #4]
   14b96:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   14b98:	f7ff fe82 	bl	148a0 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   14b9c:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   14b9e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   14ba2:	b33a      	cbz	r2, 14bf4 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14ba4:	a905      	add	r1, sp, #20
   14ba6:	9102      	str	r1, [sp, #8]
   14ba8:	492d      	ldr	r1, [pc, #180]	; (14c60 <bt_gatt_indicate+0xec>)
   14baa:	9101      	str	r1, [sp, #4]
   14bac:	2101      	movs	r1, #1
	found->attr = NULL;
   14bae:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14bb0:	9100      	str	r1, [sp, #0]
   14bb2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   14bb6:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14bb8:	f7ff fea2 	bl	14900 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   14bbc:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   14bbe:	b91b      	cbnz	r3, 14bc8 <bt_gatt_indicate+0x54>
			return -ENOENT;
   14bc0:	f06f 0001 	mvn.w	r0, #1
}
   14bc4:	b00b      	add	sp, #44	; 0x2c
   14bc6:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   14bc8:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   14bca:	9b05      	ldr	r3, [sp, #20]
   14bcc:	6818      	ldr	r0, [r3, #0]
   14bce:	2300      	movs	r3, #0
   14bd0:	f88d 3010 	strb.w	r3, [sp, #16]
   14bd4:	a904      	add	r1, sp, #16
   14bd6:	f642 0303 	movw	r3, #10243	; 0x2803
   14bda:	f8ad 3012 	strh.w	r3, [sp, #18]
   14bde:	f005 fa79 	bl	1a0d4 <bt_uuid_cmp>
   14be2:	b970      	cbnz	r0, 14c02 <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   14be4:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   14be6:	68c3      	ldr	r3, [r0, #12]
   14be8:	799b      	ldrb	r3, [r3, #6]
   14bea:	069b      	lsls	r3, r3, #26
   14bec:	d405      	bmi.n	14bfa <bt_gatt_indicate+0x86>
			return -EINVAL;
   14bee:	f06f 0015 	mvn.w	r0, #21
   14bf2:	e7e7      	b.n	14bc4 <bt_gatt_indicate+0x50>
		if (!data.handle) {
   14bf4:	2800      	cmp	r0, #0
   14bf6:	d1e8      	bne.n	14bca <bt_gatt_indicate+0x56>
   14bf8:	e7e2      	b.n	14bc0 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   14bfa:	f006 ff5b 	bl	1bab4 <bt_gatt_attr_value_handle>
   14bfe:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   14c02:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   14c06:	b13c      	cbz	r4, 14c18 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   14c08:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   14c0a:	4601      	mov	r1, r0
		params->_ref = 1;
   14c0c:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   14c0e:	462a      	mov	r2, r5
   14c10:	4620      	mov	r0, r4
   14c12:	f7ff ff55 	bl	14ac0 <gatt_indicate>
   14c16:	e7d5      	b.n	14bc4 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
   14c18:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   14c1c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   14c1e:	2302      	movs	r3, #2
   14c20:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14c24:	f642 1302 	movw	r3, #10498	; 0x2902
   14c28:	f8ad 3012 	strh.w	r3, [sp, #18]
   14c2c:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   14c2e:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14c30:	9302      	str	r3, [sp, #8]
   14c32:	4b0c      	ldr	r3, [pc, #48]	; (14c64 <bt_gatt_indicate+0xf0>)
   14c34:	9301      	str	r3, [sp, #4]
   14c36:	2301      	movs	r3, #1
   14c38:	9300      	str	r3, [sp, #0]
   14c3a:	aa04      	add	r2, sp, #16
   14c3c:	4623      	mov	r3, r4
   14c3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   14c42:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14c44:	f88d 4010 	strb.w	r4, [sp, #16]
   14c48:	f7ff fe5a 	bl	14900 <bt_gatt_foreach_attr_type>
	return data.err;
   14c4c:	9807      	ldr	r0, [sp, #28]
   14c4e:	e7b9      	b.n	14bc4 <bt_gatt_indicate+0x50>
		return -EAGAIN;
   14c50:	f06f 000a 	mvn.w	r0, #10
   14c54:	e7b6      	b.n	14bc4 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
   14c56:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   14c5a:	e7b3      	b.n	14bc4 <bt_gatt_indicate+0x50>
   14c5c:	20000444 	.word	0x20000444
   14c60:	0001b7b5 	.word	0x0001b7b5
   14c64:	00014d79 	.word	0x00014d79

00014c68 <sc_process>:
{
   14c68:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   14c6a:	f850 2c08 	ldr.w	r2, [r0, #-8]
   14c6e:	9201      	str	r2, [sp, #4]
{
   14c70:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   14c72:	f1a0 0120 	sub.w	r1, r0, #32
   14c76:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14c7a:	f3bf 8f5b 	dmb	ish
   14c7e:	e854 2f00 	ldrex	r2, [r4]
   14c82:	f022 0201 	bic.w	r2, r2, #1
   14c86:	e844 2000 	strex	r0, r2, [r4]
   14c8a:	2800      	cmp	r0, #0
   14c8c:	d1f7      	bne.n	14c7e <sc_process+0x16>
   14c8e:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   14c92:	4a0d      	ldr	r2, [pc, #52]	; (14cc8 <sc_process+0x60>)
   14c94:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   14c98:	4a0c      	ldr	r2, [pc, #48]	; (14ccc <sc_process+0x64>)
   14c9a:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   14c9e:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   14ca0:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   14ca2:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   14ca6:	2204      	movs	r2, #4
	sc->start = 0U;
   14ca8:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   14cac:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   14cb0:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   14cb4:	f7ff ff5e 	bl	14b74 <bt_gatt_indicate>
   14cb8:	b918      	cbnz	r0, 14cc2 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   14cba:	2101      	movs	r1, #1
   14cbc:	4620      	mov	r0, r4
   14cbe:	f006 fe8d 	bl	1b9dc <atomic_set_bit>
}
   14cc2:	b002      	add	sp, #8
   14cc4:	bd10      	pop	{r4, pc}
   14cc6:	bf00      	nop
   14cc8:	0001d71c 	.word	0x0001d71c
   14ccc:	00014795 	.word	0x00014795

00014cd0 <update_ccc>:
{
   14cd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   14cd2:	4b24      	ldr	r3, [pc, #144]	; (14d64 <update_ccc+0x94>)
	struct bt_conn *conn = data->conn;
   14cd4:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   14cd6:	6882      	ldr	r2, [r0, #8]
   14cd8:	429a      	cmp	r2, r3
{
   14cda:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   14cdc:	d13f      	bne.n	14d5e <update_ccc+0x8e>
	ccc = attr->user_data;
   14cde:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   14ce0:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   14ce2:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   14ce4:	2b00      	cmp	r3, #0
   14ce6:	d03a      	beq.n	14d5e <update_ccc+0x8e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   14ce8:	7831      	ldrb	r1, [r6, #0]
   14cea:	4620      	mov	r0, r4
   14cec:	f005 ff02 	bl	1aaf4 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   14cf0:	2800      	cmp	r0, #0
   14cf2:	d034      	beq.n	14d5e <update_ccc+0x8e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   14cf4:	f44f 7295 	mov.w	r2, #298	; 0x12a
   14cf8:	4629      	mov	r1, r5
   14cfa:	4620      	mov	r0, r4
   14cfc:	f006 ff2e 	bl	1bb5c <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   14d00:	2803      	cmp	r0, #3
   14d02:	d02c      	beq.n	14d5e <update_ccc+0x8e>
		gatt_ccc_changed(attr, ccc);
   14d04:	4631      	mov	r1, r6
   14d06:	4628      	mov	r0, r5
   14d08:	f006 fd37 	bl	1b77a <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   14d0c:	4b16      	ldr	r3, [pc, #88]	; (14d68 <update_ccc+0x98>)
   14d0e:	429e      	cmp	r6, r3
   14d10:	d125      	bne.n	14d5e <update_ccc+0x8e>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   14d12:	7a20      	ldrb	r0, [r4, #8]
   14d14:	f104 0188 	add.w	r1, r4, #136	; 0x88
   14d18:	f7ff fc26 	bl	14568 <find_sc_cfg>
	if (!cfg) {
   14d1c:	b1f8      	cbz	r0, 14d5e <update_ccc+0x8e>
	if (!(cfg->data.start || cfg->data.end)) {
   14d1e:	8902      	ldrh	r2, [r0, #8]
   14d20:	8943      	ldrh	r3, [r0, #10]
   14d22:	ea52 0103 	orrs.w	r1, r2, r3
   14d26:	d01a      	beq.n	14d5e <update_ccc+0x8e>
	index = bt_conn_index(conn);
   14d28:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   14d2a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   14d2e:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   14d32:	f7fe fad5 	bl	132e0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   14d36:	490d      	ldr	r1, [pc, #52]	; (14d6c <update_ccc+0x9c>)
   14d38:	4a0d      	ldr	r2, [pc, #52]	; (14d70 <update_ccc+0xa0>)
   14d3a:	2318      	movs	r3, #24
   14d3c:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   14d40:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   14d42:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   14d44:	4a0b      	ldr	r2, [pc, #44]	; (14d74 <update_ccc+0xa4>)
   14d46:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   14d48:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   14d4a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   14d4e:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   14d50:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   14d52:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   14d56:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   14d58:	4620      	mov	r0, r4
   14d5a:	f7ff ff0b 	bl	14b74 <bt_gatt_indicate>
}
   14d5e:	2001      	movs	r0, #1
   14d60:	b002      	add	sp, #8
   14d62:	bd70      	pop	{r4, r5, r6, pc}
   14d64:	000145b1 	.word	0x000145b1
   14d68:	2000061c 	.word	0x2000061c
   14d6c:	20001ce0 	.word	0x20001ce0
   14d70:	0001d71c 	.word	0x0001d71c
   14d74:	0001ba81 	.word	0x0001ba81

00014d78 <notify_cb>:
{
   14d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   14d7a:	4b39      	ldr	r3, [pc, #228]	; (14e60 <notify_cb+0xe8>)
{
   14d7c:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   14d7e:	6882      	ldr	r2, [r0, #8]
   14d80:	429a      	cmp	r2, r3
{
   14d82:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   14d84:	d002      	beq.n	14d8c <notify_cb+0x14>
		return BT_GATT_ITER_CONTINUE;
   14d86:	2701      	movs	r7, #1
}
   14d88:	4638      	mov	r0, r7
   14d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   14d8c:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   14d8e:	4b35      	ldr	r3, [pc, #212]	; (14e64 <notify_cb+0xec>)
   14d90:	429e      	cmp	r6, r3
   14d92:	d04c      	beq.n	14e2e <notify_cb+0xb6>
		if (cfg->value != data->type) {
   14d94:	8932      	ldrh	r2, [r6, #8]
   14d96:	89ab      	ldrh	r3, [r5, #12]
   14d98:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   14d9a:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   14d9e:	d1f2      	bne.n	14d86 <notify_cb+0xe>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   14da0:	7830      	ldrb	r0, [r6, #0]
   14da2:	f7fe fb5d 	bl	13460 <bt_conn_lookup_addr_le>
		if (!conn) {
   14da6:	4604      	mov	r4, r0
   14da8:	2800      	cmp	r0, #0
   14daa:	d0ec      	beq.n	14d86 <notify_cb+0xe>
		if (conn->state != BT_CONN_CONNECTED) {
   14dac:	7a83      	ldrb	r3, [r0, #10]
   14dae:	2b07      	cmp	r3, #7
   14db0:	d005      	beq.n	14dbe <notify_cb+0x46>
			bt_conn_unref(conn);
   14db2:	f005 fe56 	bl	1aa62 <bt_conn_unref>
			continue;
   14db6:	e7e6      	b.n	14d86 <notify_cb+0xe>
			bt_conn_unref(conn);
   14db8:	f005 fe53 	bl	1aa62 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   14dbc:	e7ea      	b.n	14d94 <notify_cb+0x1c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   14dbe:	6973      	ldr	r3, [r6, #20]
   14dc0:	b123      	cbz	r3, 14dcc <notify_cb+0x54>
   14dc2:	4639      	mov	r1, r7
   14dc4:	4798      	blx	r3
   14dc6:	b908      	cbnz	r0, 14dcc <notify_cb+0x54>
			bt_conn_unref(conn);
   14dc8:	4620      	mov	r0, r4
   14dca:	e7f2      	b.n	14db2 <notify_cb+0x3a>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   14dcc:	4639      	mov	r1, r7
   14dce:	2294      	movs	r2, #148	; 0x94
   14dd0:	4620      	mov	r0, r4
   14dd2:	f006 fec3 	bl	1bb5c <bt_gatt_check_perm>
   14dd6:	4607      	mov	r7, r0
   14dd8:	2800      	cmp	r0, #0
   14dda:	d1f5      	bne.n	14dc8 <notify_cb+0x50>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   14ddc:	89ab      	ldrh	r3, [r5, #12]
   14dde:	2b02      	cmp	r3, #2
   14de0:	d114      	bne.n	14e0c <notify_cb+0x94>
   14de2:	8933      	ldrh	r3, [r6, #8]
   14de4:	079a      	lsls	r2, r3, #30
   14de6:	d405      	bmi.n	14df4 <notify_cb+0x7c>
		bt_conn_unref(conn);
   14de8:	4620      	mov	r0, r4
   14dea:	f005 fe3a 	bl	1aa62 <bt_conn_unref>
		data->err = 0;
   14dee:	2300      	movs	r3, #0
   14df0:	60ab      	str	r3, [r5, #8]
   14df2:	e7c8      	b.n	14d86 <notify_cb+0xe>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   14df4:	692a      	ldr	r2, [r5, #16]
   14df6:	88a9      	ldrh	r1, [r5, #4]
   14df8:	4620      	mov	r0, r4
   14dfa:	f7ff fe61 	bl	14ac0 <gatt_indicate>
			if (err == 0) {
   14dfe:	4606      	mov	r6, r0
   14e00:	b978      	cbnz	r0, 14e22 <notify_cb+0xaa>
				data->ind_params->_ref++;
   14e02:	692a      	ldr	r2, [r5, #16]
   14e04:	7d93      	ldrb	r3, [r2, #22]
   14e06:	3301      	adds	r3, #1
   14e08:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   14e0a:	e7ed      	b.n	14de8 <notify_cb+0x70>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   14e0c:	2b01      	cmp	r3, #1
   14e0e:	d1eb      	bne.n	14de8 <notify_cb+0x70>
   14e10:	8933      	ldrh	r3, [r6, #8]
   14e12:	07db      	lsls	r3, r3, #31
   14e14:	d5e8      	bpl.n	14de8 <notify_cb+0x70>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   14e16:	692a      	ldr	r2, [r5, #16]
   14e18:	88a9      	ldrh	r1, [r5, #4]
   14e1a:	4620      	mov	r0, r4
   14e1c:	f006 ff4b 	bl	1bcb6 <gatt_notify>
   14e20:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   14e22:	4620      	mov	r0, r4
   14e24:	f005 fe1d 	bl	1aa62 <bt_conn_unref>
		if (err < 0) {
   14e28:	2e00      	cmp	r6, #0
   14e2a:	dbad      	blt.n	14d88 <notify_cb+0x10>
   14e2c:	e7df      	b.n	14dee <notify_cb+0x76>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   14e2e:	4c0e      	ldr	r4, [pc, #56]	; (14e68 <notify_cb+0xf0>)
   14e30:	490e      	ldr	r1, [pc, #56]	; (14e6c <notify_cb+0xf4>)
   14e32:	4620      	mov	r0, r4
   14e34:	f006 fd15 	bl	1b862 <bt_addr_le_eq>
   14e38:	2800      	cmp	r0, #0
   14e3a:	d1ab      	bne.n	14d94 <notify_cb+0x1c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   14e3c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   14e40:	2207      	movs	r2, #7
   14e42:	4621      	mov	r1, r4
   14e44:	f7fe fb26 	bl	13494 <bt_conn_lookup_state_le>
			if (!conn) {
   14e48:	2800      	cmp	r0, #0
   14e4a:	d1b5      	bne.n	14db8 <notify_cb+0x40>
				sc = (struct sc_data *)data->ind_params->data;
   14e4c:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   14e4e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   14e52:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   14e54:	4621      	mov	r1, r4
   14e56:	8853      	ldrh	r3, [r2, #2]
   14e58:	8812      	ldrh	r2, [r2, #0]
   14e5a:	f7ff fc27 	bl	146ac <sc_save>
				continue;
   14e5e:	e799      	b.n	14d94 <notify_cb+0x1c>
   14e60:	000145b1 	.word	0x000145b1
   14e64:	2000061c 	.word	0x2000061c
   14e68:	20001f13 	.word	0x20001f13
   14e6c:	0001dbbb 	.word	0x0001dbbb

00014e70 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   14e70:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14e72:	4a06      	ldr	r2, [pc, #24]	; (14e8c <bt_gatt_connected+0x1c>)
	data.conn = conn;
   14e74:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14e76:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   14e78:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14e7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   14e7e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14e82:	f006 fe5e 	bl	1bb42 <bt_gatt_foreach_attr>
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   14e86:	b003      	add	sp, #12
   14e88:	f85d fb04 	ldr.w	pc, [sp], #4
   14e8c:	00014cd1 	.word	0x00014cd1

00014e90 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   14e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   14e92:	4b08      	ldr	r3, [pc, #32]	; (14eb4 <bt_gatt_att_max_mtu_changed+0x24>)
   14e94:	681c      	ldr	r4, [r3, #0]
   14e96:	4605      	mov	r5, r0
   14e98:	460e      	mov	r6, r1
   14e9a:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14e9c:	b14c      	cbz	r4, 14eb2 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   14e9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14ea2:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   14ea4:	b11b      	cbz	r3, 14eae <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   14ea6:	463a      	mov	r2, r7
   14ea8:	4631      	mov	r1, r6
   14eaa:	4628      	mov	r0, r5
   14eac:	4798      	blx	r3
	return node->next;
   14eae:	6864      	ldr	r4, [r4, #4]
   14eb0:	e7f4      	b.n	14e9c <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   14eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14eb4:	20001d10 	.word	0x20001d10

00014eb8 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   14eb8:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   14eba:	4603      	mov	r3, r0
   14ebc:	4a0f      	ldr	r2, [pc, #60]	; (14efc <bt_gatt_disconnected+0x44>)
{
   14ebe:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   14ec0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14ec4:	2001      	movs	r0, #1
   14ec6:	f006 fe3c 	bl	1bb42 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   14eca:	4620      	mov	r0, r4
   14ecc:	f7ff fb34 	bl	14538 <find_cf_cfg>
	if (!cfg) {
   14ed0:	4605      	mov	r5, r0
   14ed2:	b188      	cbz	r0, 14ef8 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14ed4:	f104 0688 	add.w	r6, r4, #136	; 0x88
   14ed8:	7a20      	ldrb	r0, [r4, #8]
   14eda:	4631      	mov	r1, r6
   14edc:	f005 fb99 	bl	1a612 <bt_addr_le_is_bonded>
   14ee0:	b920      	cbnz	r0, 14eec <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   14ee2:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   14ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   14ee8:	f7ff bbca 	b.w	14680 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   14eec:	4631      	mov	r1, r6
   14eee:	1c68      	adds	r0, r5, #1
}
   14ef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   14ef4:	f006 bcbd 	b.w	1b872 <bt_addr_le_copy>
}
   14ef8:	bd70      	pop	{r4, r5, r6, pc}
   14efa:	bf00      	nop
   14efc:	000146f5 	.word	0x000146f5

00014f00 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   14f00:	4b04      	ldr	r3, [pc, #16]	; (14f14 <bt_smp_accept+0x14>)
   14f02:	6818      	ldr	r0, [r3, #0]
   14f04:	b918      	cbnz	r0, 14f0e <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
   14f06:	4a04      	ldr	r2, [pc, #16]	; (14f18 <bt_smp_accept+0x18>)
   14f08:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   14f0a:	600b      	str	r3, [r1, #0]

		return 0;
   14f0c:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   14f0e:	f06f 000b 	mvn.w	r0, #11
}
   14f12:	4770      	bx	lr
   14f14:	20001d18 	.word	0x20001d18
   14f18:	0001d820 	.word	0x0001d820

00014f1c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   14f1c:	4b02      	ldr	r3, [pc, #8]	; (14f28 <net_buf_pool_get+0xc>)
   14f1e:	222c      	movs	r2, #44	; 0x2c
   14f20:	fb02 3000 	mla	r0, r2, r0, r3
   14f24:	4770      	bx	lr
   14f26:	bf00      	nop
   14f28:	200007c0 	.word	0x200007c0

00014f2c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14f2c:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   14f2e:	4b06      	ldr	r3, [pc, #24]	; (14f48 <net_buf_id+0x1c>)
   14f30:	212c      	movs	r1, #44	; 0x2c
   14f32:	fb01 3302 	mla	r3, r1, r2, r3
   14f36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   14f38:	7f1b      	ldrb	r3, [r3, #28]
   14f3a:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   14f3c:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   14f3e:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   14f42:	fbb0 f0f3 	udiv	r0, r0, r3
   14f46:	4770      	bx	lr
   14f48:	200007c0 	.word	0x200007c0

00014f4c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   14f4c:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   14f4e:	4b0a      	ldr	r3, [pc, #40]	; (14f78 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14f50:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   14f52:	242c      	movs	r4, #44	; 0x2c
   14f54:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   14f58:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   14f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14f5c:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   14f5e:	681a      	ldr	r2, [r3, #0]
   14f60:	4294      	cmp	r4, r2
   14f62:	bf94      	ite	ls
   14f64:	600c      	strls	r4, [r1, #0]
   14f66:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   14f68:	e9d3 5400 	ldrd	r5, r4, [r3]
   14f6c:	f7ff ffde 	bl	14f2c <net_buf_id>
}
   14f70:	fb05 4000 	mla	r0, r5, r0, r4
   14f74:	bd38      	pop	{r3, r4, r5, pc}
   14f76:	bf00      	nop
   14f78:	200007c0 	.word	0x200007c0

00014f7c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   14f7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f80:	4605      	mov	r5, r0
   14f82:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   14f84:	4610      	mov	r0, r2
   14f86:	4619      	mov	r1, r3
{
   14f88:	4691      	mov	r9, r2
   14f8a:	4698      	mov	r8, r3
   14f8c:	4617      	mov	r7, r2
   14f8e:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   14f90:	f007 ff7a 	bl	1ce88 <sys_clock_timeout_end_calc>
   14f94:	4682      	mov	sl, r0
   14f96:	468b      	mov	fp, r1
	__asm__ volatile(
   14f98:	f04f 0340 	mov.w	r3, #64	; 0x40
   14f9c:	f3ef 8111 	mrs	r1, BASEPRI
   14fa0:	f383 8812 	msr	BASEPRI_MAX, r3
   14fa4:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   14fa8:	8b6b      	ldrh	r3, [r5, #26]
   14faa:	2b00      	cmp	r3, #0
   14fac:	d058      	beq.n	15060 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   14fae:	8b2a      	ldrh	r2, [r5, #24]
   14fb0:	429a      	cmp	r2, r3
   14fb2:	d93c      	bls.n	1502e <net_buf_alloc_len+0xb2>
   14fb4:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   14fb6:	2200      	movs	r2, #0
   14fb8:	2300      	movs	r3, #0
   14fba:	4628      	mov	r0, r5
   14fbc:	f002 ff42 	bl	17e44 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   14fc0:	9900      	ldr	r1, [sp, #0]
   14fc2:	4604      	mov	r4, r0
   14fc4:	2800      	cmp	r0, #0
   14fc6:	d032      	beq.n	1502e <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   14fc8:	f381 8811 	msr	BASEPRI, r1
   14fcc:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   14fd0:	9b01      	ldr	r3, [sp, #4]
   14fd2:	2b00      	cmp	r3, #0
   14fd4:	d055      	beq.n	15082 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   14fd6:	ea58 0309 	orrs.w	r3, r8, r9
   14fda:	d00f      	beq.n	14ffc <net_buf_alloc_len+0x80>
   14fdc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   14fe0:	bf08      	it	eq
   14fe2:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   14fe6:	d009      	beq.n	14ffc <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   14fe8:	f003 fe12 	bl	18c10 <sys_clock_tick_get>
   14fec:	ebba 0700 	subs.w	r7, sl, r0
   14ff0:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   14ff4:	2e00      	cmp	r6, #0
   14ff6:	bfbc      	itt	lt
   14ff8:	2700      	movlt	r7, #0
   14ffa:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14ffc:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   14ffe:	4d26      	ldr	r5, [pc, #152]	; (15098 <net_buf_alloc_len+0x11c>)
   15000:	f04f 082c 	mov.w	r8, #44	; 0x2c
   15004:	fb08 5303 	mla	r3, r8, r3, r5
   15008:	463a      	mov	r2, r7
   1500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1500c:	681b      	ldr	r3, [r3, #0]
   1500e:	a901      	add	r1, sp, #4
   15010:	f8d3 9000 	ldr.w	r9, [r3]
   15014:	4620      	mov	r0, r4
   15016:	4633      	mov	r3, r6
   15018:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1501a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1501c:	2800      	cmp	r0, #0
   1501e:	d131      	bne.n	15084 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   15020:	79a0      	ldrb	r0, [r4, #6]
   15022:	4621      	mov	r1, r4
   15024:	fb00 5008 	mla	r0, r0, r8, r5
   15028:	f007 fc71 	bl	1c90e <k_queue_prepend>
}
   1502c:	e024      	b.n	15078 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   1502e:	8b68      	ldrh	r0, [r5, #26]
   15030:	1e43      	subs	r3, r0, #1
   15032:	836b      	strh	r3, [r5, #26]
   15034:	f381 8811 	msr	BASEPRI, r1
   15038:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1503c:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1503e:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   15040:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   15042:	3317      	adds	r3, #23
   15044:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   15048:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1504a:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1504e:	4b12      	ldr	r3, [pc, #72]	; (15098 <net_buf_alloc_len+0x11c>)
   15050:	4a12      	ldr	r2, [pc, #72]	; (1509c <net_buf_alloc_len+0x120>)
   15052:	1aeb      	subs	r3, r5, r3
   15054:	109b      	asrs	r3, r3, #2
   15056:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   15058:	71a3      	strb	r3, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   1505a:	7f2b      	ldrb	r3, [r5, #28]
   1505c:	71e3      	strb	r3, [r4, #7]
		goto success;
   1505e:	e7b7      	b.n	14fd0 <net_buf_alloc_len+0x54>
   15060:	f381 8811 	msr	BASEPRI, r1
   15064:	f3bf 8f6f 	isb	sy
   15068:	464a      	mov	r2, r9
   1506a:	4643      	mov	r3, r8
   1506c:	4628      	mov	r0, r5
   1506e:	f002 fee9 	bl	17e44 <z_impl_k_queue_get>
	if (!buf) {
   15072:	4604      	mov	r4, r0
   15074:	2800      	cmp	r0, #0
   15076:	d1ab      	bne.n	14fd0 <net_buf_alloc_len+0x54>
		return NULL;
   15078:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1507a:	4620      	mov	r0, r4
   1507c:	b003      	add	sp, #12
   1507e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   15082:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   15084:	2300      	movs	r3, #0
   15086:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   15088:	2201      	movs	r2, #1
   1508a:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1508c:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1508e:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   15090:	6923      	ldr	r3, [r4, #16]
   15092:	81e2      	strh	r2, [r4, #14]
   15094:	60a3      	str	r3, [r4, #8]
	return buf;
   15096:	e7f0      	b.n	1507a <net_buf_alloc_len+0xfe>
   15098:	200007c0 	.word	0x200007c0
   1509c:	ba2e8ba3 	.word	0xba2e8ba3

000150a0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   150a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   150a4:	4d16      	ldr	r5, [pc, #88]	; (15100 <net_buf_unref+0x60>)
   150a6:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   150a8:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   150aa:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   150ac:	b90c      	cbnz	r4, 150b2 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   150ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   150b2:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   150b4:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   150b8:	3b01      	subs	r3, #1
   150ba:	b2db      	uxtb	r3, r3
   150bc:	7123      	strb	r3, [r4, #4]
   150be:	2b00      	cmp	r3, #0
   150c0:	d1f5      	bne.n	150ae <net_buf_unref+0xe>
		if (buf->__buf) {
   150c2:	6921      	ldr	r1, [r4, #16]
   150c4:	b159      	cbz	r1, 150de <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   150c6:	7963      	ldrb	r3, [r4, #5]
   150c8:	079b      	lsls	r3, r3, #30
   150ca:	d407      	bmi.n	150dc <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   150cc:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   150ce:	fb07 5303 	mla	r3, r7, r3, r5
   150d2:	4620      	mov	r0, r4
   150d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   150d6:	681b      	ldr	r3, [r3, #0]
   150d8:	689b      	ldr	r3, [r3, #8]
   150da:	4798      	blx	r3
			buf->__buf = NULL;
   150dc:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   150de:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   150e0:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   150e2:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   150e6:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   150e8:	6a1b      	ldr	r3, [r3, #32]
   150ea:	b11b      	cbz	r3, 150f4 <net_buf_unref+0x54>
			pool->destroy(buf);
   150ec:	4620      	mov	r0, r4
   150ee:	4798      	blx	r3
{
   150f0:	4644      	mov	r4, r8
   150f2:	e7db      	b.n	150ac <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   150f4:	4621      	mov	r1, r4
   150f6:	fb00 5007 	mla	r0, r0, r7, r5
   150fa:	f007 fc08 	bl	1c90e <k_queue_prepend>
}
   150fe:	e7f7      	b.n	150f0 <net_buf_unref+0x50>
   15100:	200007c0 	.word	0x200007c0

00015104 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   15104:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   15106:	4804      	ldr	r0, [pc, #16]	; (15118 <xoshiro128_initialize+0x14>)
   15108:	f007 fa83 	bl	1c612 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1510c:	2800      	cmp	r0, #0
}
   1510e:	bf0c      	ite	eq
   15110:	f06f 0012 	mvneq.w	r0, #18
   15114:	2000      	movne	r0, #0
   15116:	bd08      	pop	{r3, pc}
   15118:	0001d300 	.word	0x0001d300

0001511c <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   1511c:	4b05      	ldr	r3, [pc, #20]	; (15134 <adc_context_start_sampling+0x18>)
   1511e:	2201      	movs	r2, #1
   15120:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   15124:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   15128:	b109      	cbz	r1, 1512e <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1512a:	60da      	str	r2, [r3, #12]
}
   1512c:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1512e:	601a      	str	r2, [r3, #0]
   15130:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   15132:	4770      	bx	lr
   15134:	40007000 	.word	0x40007000

00015138 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
   15138:	7908      	ldrb	r0, [r1, #4]
{
   1513a:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   1513c:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   15140:	2c07      	cmp	r4, #7
   15142:	d820      	bhi.n	15186 <adc_nrfx_channel_setup+0x4e>
	switch (channel_cfg->gain) {
   15144:	780b      	ldrb	r3, [r1, #0]
   15146:	2b0b      	cmp	r3, #11
   15148:	d81d      	bhi.n	15186 <adc_nrfx_channel_setup+0x4e>
   1514a:	e8df f003 	tbb	[pc, r3]
   1514e:	0707      	.short	0x0707
   15150:	061c0707 	.word	0x061c0707
   15154:	211f1c1c 	.word	0x211f1c1c
   15158:	231c      	.short	0x231c
		config.gain = NRF_SAADC_GAIN1_2;
   1515a:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   1515c:	784a      	ldrb	r2, [r1, #1]
   1515e:	2a03      	cmp	r2, #3
   15160:	d01a      	beq.n	15198 <adc_nrfx_channel_setup+0x60>
   15162:	2a04      	cmp	r2, #4
   15164:	d10f      	bne.n	15186 <adc_nrfx_channel_setup+0x4e>
	nrf_saadc_channel_config_t config = {
   15166:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
   15168:	884a      	ldrh	r2, [r1, #2]
   1516a:	f244 060a 	movw	r6, #16394	; 0x400a
   1516e:	42b2      	cmp	r2, r6
   15170:	d046      	beq.n	15200 <adc_nrfx_channel_setup+0xc8>
   15172:	d813      	bhi.n	1519c <adc_nrfx_channel_setup+0x64>
   15174:	f244 0603 	movw	r6, #16387	; 0x4003
   15178:	42b2      	cmp	r2, r6
   1517a:	d03d      	beq.n	151f8 <adc_nrfx_channel_setup+0xc0>
   1517c:	f244 0605 	movw	r6, #16389	; 0x4005
   15180:	42b2      	cmp	r2, r6
   15182:	d03b      	beq.n	151fc <adc_nrfx_channel_setup+0xc4>
   15184:	b3e2      	cbz	r2, 15200 <adc_nrfx_channel_setup+0xc8>
   15186:	f06f 0015 	mvn.w	r0, #21
   1518a:	e034      	b.n	151f6 <adc_nrfx_channel_setup+0xbe>
		config.gain = NRF_SAADC_GAIN1;
   1518c:	2305      	movs	r3, #5
		break;
   1518e:	e7e5      	b.n	1515c <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
   15190:	2306      	movs	r3, #6
		break;
   15192:	e7e3      	b.n	1515c <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
   15194:	2307      	movs	r3, #7
		break;
   15196:	e7e1      	b.n	1515c <adc_nrfx_channel_setup+0x24>
	switch (channel_cfg->reference) {
   15198:	2501      	movs	r5, #1
   1519a:	e7e5      	b.n	15168 <adc_nrfx_channel_setup+0x30>
	switch (channel_cfg->acquisition_time) {
   1519c:	f244 0614 	movw	r6, #16404	; 0x4014
   151a0:	42b2      	cmp	r2, r6
   151a2:	d02f      	beq.n	15204 <adc_nrfx_channel_setup+0xcc>
   151a4:	f244 0628 	movw	r6, #16424	; 0x4028
   151a8:	42b2      	cmp	r2, r6
   151aa:	d02d      	beq.n	15208 <adc_nrfx_channel_setup+0xd0>
   151ac:	f244 060f 	movw	r6, #16399	; 0x400f
   151b0:	42b2      	cmp	r2, r6
   151b2:	d1e8      	bne.n	15186 <adc_nrfx_channel_setup+0x4e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   151b4:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   151b6:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   151ba:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   151bc:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   151c0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   151c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   151c8:	0122      	lsls	r2, r4, #4
   151ca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   151ce:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   151d2:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   151d4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   151d8:	0123      	lsls	r3, r4, #4
   151da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   151de:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   151e2:	798a      	ldrb	r2, [r1, #6]
   151e4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   151e8:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   151ec:	4b07      	ldr	r3, [pc, #28]	; (1520c <adc_nrfx_channel_setup+0xd4>)
   151ee:	794a      	ldrb	r2, [r1, #5]
   151f0:	4423      	add	r3, r4
   151f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
   151f6:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
   151f8:	2200      	movs	r2, #0
   151fa:	e7dc      	b.n	151b6 <adc_nrfx_channel_setup+0x7e>
	switch (channel_cfg->acquisition_time) {
   151fc:	2201      	movs	r2, #1
   151fe:	e7da      	b.n	151b6 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   15200:	2202      	movs	r2, #2
   15202:	e7d8      	b.n	151b6 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   15204:	2204      	movs	r2, #4
   15206:	e7d6      	b.n	151b6 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   15208:	2205      	movs	r2, #5
   1520a:	e7d4      	b.n	151b6 <adc_nrfx_channel_setup+0x7e>
   1520c:	200004d0 	.word	0x200004d0

00015210 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   15210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15212:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
   15214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15218:	4856      	ldr	r0, [pc, #344]	; (15374 <adc_nrfx_read+0x164>)
   1521a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1521e:	f002 fe6b 	bl	17ef8 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   15222:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   15224:	1e73      	subs	r3, r6, #1
   15226:	2bfe      	cmp	r3, #254	; 0xfe
   15228:	d83c      	bhi.n	152a4 <adc_nrfx_read+0x94>
   1522a:	2300      	movs	r3, #0
    p_reg->CH[channel].PSELP = pselp;
   1522c:	4852      	ldr	r0, [pc, #328]	; (15378 <adc_nrfx_read+0x168>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   1522e:	4f53      	ldr	r7, [pc, #332]	; (1537c <adc_nrfx_read+0x16c>)
	active_channels = 0U;
   15230:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
   15232:	fa26 f103 	lsr.w	r1, r6, r3
   15236:	f011 0101 	ands.w	r1, r1, #1
   1523a:	d026      	beq.n	1528a <adc_nrfx_read+0x7a>
			if (m_data.positive_inputs[channel_id] == 0U) {
   1523c:	f817 c003 	ldrb.w	ip, [r7, r3]
   15240:	f1bc 0f00 	cmp.w	ip, #0
   15244:	d02e      	beq.n	152a4 <adc_nrfx_read+0x94>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   15246:	eb00 1e03 	add.w	lr, r0, r3, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   1524a:	7c65      	ldrb	r5, [r4, #17]
   1524c:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
   15250:	3d00      	subs	r5, #0
   15252:	bf18      	it	ne
   15254:	2501      	movne	r5, #1
   15256:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   1525a:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   1525e:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   15262:	f103 0151 	add.w	r1, r3, #81	; 0x51
   15266:	0109      	lsls	r1, r1, #4
			++active_channels;
   15268:	3201      	adds	r2, #1
   1526a:	f840 c001 	str.w	ip, [r0, r1]
   1526e:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   15270:	3301      	adds	r3, #1
   15272:	2b08      	cmp	r3, #8
   15274:	d1dd      	bne.n	15232 <adc_nrfx_read+0x22>
	switch (sequence->resolution) {
   15276:	7c23      	ldrb	r3, [r4, #16]
   15278:	3b08      	subs	r3, #8
   1527a:	2b06      	cmp	r3, #6
   1527c:	d812      	bhi.n	152a4 <adc_nrfx_read+0x94>
   1527e:	e8df f003 	tbb	[pc, r3]
   15282:	1109      	.short	0x1109
   15284:	1119111d 	.word	0x1119111d
   15288:	1b          	.byte	0x1b
   15289:	00          	.byte	0x00
   1528a:	f103 0551 	add.w	r5, r3, #81	; 0x51
   1528e:	012d      	lsls	r5, r5, #4
   15290:	5141      	str	r1, [r0, r5]
}
   15292:	e7ed      	b.n	15270 <adc_nrfx_read+0x60>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   15294:	2300      	movs	r3, #0
    p_reg->RESOLUTION = resolution;
   15296:	4938      	ldr	r1, [pc, #224]	; (15378 <adc_nrfx_read+0x168>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   15298:	2a01      	cmp	r2, #1
   1529a:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   1529e:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   152a0:	d90e      	bls.n	152c0 <adc_nrfx_read+0xb0>
   152a2:	b17b      	cbz	r3, 152c4 <adc_nrfx_read+0xb4>
		return -EINVAL;
   152a4:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   152a8:	4832      	ldr	r0, [pc, #200]	; (15374 <adc_nrfx_read+0x164>)
   152aa:	f002 fdff 	bl	17eac <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   152ae:	4620      	mov	r0, r4
   152b0:	b003      	add	sp, #12
   152b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   152b4:	2302      	movs	r3, #2
		break;
   152b6:	e7ee      	b.n	15296 <adc_nrfx_read+0x86>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   152b8:	2303      	movs	r3, #3
		break;
   152ba:	e7ec      	b.n	15296 <adc_nrfx_read+0x86>
	switch (sequence->resolution) {
   152bc:	2301      	movs	r3, #1
   152be:	e7ea      	b.n	15296 <adc_nrfx_read+0x86>
	switch (sequence->oversampling) {
   152c0:	2b08      	cmp	r3, #8
   152c2:	d8ef      	bhi.n	152a4 <adc_nrfx_read+0x94>
    p_reg->OVERSAMPLE = oversample;
   152c4:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   152c8:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   152ca:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   152cc:	b111      	cbz	r1, 152d4 <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   152ce:	8989      	ldrh	r1, [r1, #12]
   152d0:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   152d4:	68e1      	ldr	r1, [r4, #12]
   152d6:	4299      	cmp	r1, r3
   152d8:	d348      	bcc.n	1536c <adc_nrfx_read+0x15c>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   152da:	4b27      	ldr	r3, [pc, #156]	; (15378 <adc_nrfx_read+0x168>)
   152dc:	68a1      	ldr	r1, [r4, #8]
   152de:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   152e2:	4627      	mov	r7, r4
    p_reg->RESULT.MAXCNT = size;
   152e4:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   152e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   152ea:	4d25      	ldr	r5, [pc, #148]	; (15380 <adc_nrfx_read+0x170>)
   152ec:	f105 0674 	add.w	r6, r5, #116	; 0x74
   152f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   152f2:	683b      	ldr	r3, [r7, #0]
   152f4:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   152f6:	2600      	movs	r6, #0
   152f8:	672e      	str	r6, [r5, #112]	; 0x70

	if (sequence->options) {
   152fa:	6823      	ldr	r3, [r4, #0]
   152fc:	462f      	mov	r7, r5
   152fe:	b38b      	cbz	r3, 15364 <adc_nrfx_read+0x154>
		ctx->options = *sequence->options;
   15300:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   15302:	f105 0488 	add.w	r4, r5, #136	; 0x88
   15306:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   1530a:	676c      	str	r4, [r5, #116]	; 0x74
		ctx->sampling_index = 0U;
   1530c:	f8a5 6098 	strh.w	r6, [r5, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   15310:	b340      	cbz	r0, 15364 <adc_nrfx_read+0x154>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15312:	f3bf 8f5b 	dmb	ish
   15316:	e857 3f00 	ldrex	r3, [r7]
   1531a:	e847 6200 	strex	r2, r6, [r7]
   1531e:	2a00      	cmp	r2, #0
   15320:	d1f9      	bne.n	15316 <adc_nrfx_read+0x106>
   15322:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   15326:	4917      	ldr	r1, [pc, #92]	; (15384 <adc_nrfx_read+0x174>)
   15328:	f8d5 4088 	ldr.w	r4, [r5, #136]	; 0x88
   1532c:	4a16      	ldr	r2, [pc, #88]	; (15388 <adc_nrfx_read+0x178>)
   1532e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   15332:	460f      	mov	r7, r1
   15334:	4631      	mov	r1, r6
   15336:	fbe4 7100 	umlal	r7, r1, r4, r0
   1533a:	2300      	movs	r3, #0
   1533c:	4638      	mov	r0, r7
   1533e:	f7ea febb 	bl	b8 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   15342:	2200      	movs	r2, #0
   15344:	e9cd 0100 	strd	r0, r1, [sp]
   15348:	2300      	movs	r3, #0
   1534a:	f105 0008 	add.w	r0, r5, #8
   1534e:	f003 fce3 	bl	18d18 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   15352:	480e      	ldr	r0, [pc, #56]	; (1538c <adc_nrfx_read+0x17c>)
   15354:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1535c:	f002 fdcc 	bl	17ef8 <z_impl_k_sem_take>
	return ctx->status;
   15360:	6f2c      	ldr	r4, [r5, #112]	; 0x70
	return error;
   15362:	e7a1      	b.n	152a8 <adc_nrfx_read+0x98>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   15364:	4806      	ldr	r0, [pc, #24]	; (15380 <adc_nrfx_read+0x170>)
   15366:	f7ff fed9 	bl	1511c <adc_context_start_sampling>
   1536a:	e7f2      	b.n	15352 <adc_nrfx_read+0x142>
		return -ENOMEM;
   1536c:	f06f 040b 	mvn.w	r4, #11
   15370:	e79a      	b.n	152a8 <adc_nrfx_read+0x98>
   15372:	bf00      	nop
   15374:	20000510 	.word	0x20000510
   15378:	40007000 	.word	0x40007000
   1537c:	20000570 	.word	0x20000570
   15380:	200004d0 	.word	0x200004d0
   15384:	000f423f 	.word	0x000f423f
   15388:	000f4240 	.word	0x000f4240
   1538c:	20000528 	.word	0x20000528

00015390 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   15390:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15392:	4b0e      	ldr	r3, [pc, #56]	; (153cc <init_saadc+0x3c>)
   15394:	2400      	movs	r4, #0
   15396:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1539a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1539e:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   153a2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   153a6:	2212      	movs	r2, #18
   153a8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   153ac:	2007      	movs	r0, #7
   153ae:	f7fb fe83 	bl	110b8 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   153b2:	4622      	mov	r2, r4
   153b4:	2101      	movs	r1, #1
   153b6:	2007      	movs	r0, #7
   153b8:	f7fb feae 	bl	11118 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   153bc:	4804      	ldr	r0, [pc, #16]	; (153d0 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   153be:	6c83      	ldr	r3, [r0, #72]	; 0x48
   153c0:	b913      	cbnz	r3, 153c8 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   153c2:	3040      	adds	r0, #64	; 0x40
   153c4:	f002 fd72 	bl	17eac <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   153c8:	2000      	movs	r0, #0
   153ca:	bd10      	pop	{r4, pc}
   153cc:	40007000 	.word	0x40007000
   153d0:	200004d0 	.word	0x200004d0

000153d4 <saadc_irq_handler>:
{
   153d4:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   153d6:	4b2f      	ldr	r3, [pc, #188]	; (15494 <saadc_irq_handler+0xc0>)
   153d8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   153dc:	2a00      	cmp	r2, #0
   153de:	d04c      	beq.n	1547a <saadc_irq_handler+0xa6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   153e0:	2200      	movs	r2, #0
   153e2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   153e6:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   153ea:	4c2b      	ldr	r4, [pc, #172]	; (15498 <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   153ec:	2101      	movs	r1, #1
   153ee:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   153f0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   153f4:	6f63      	ldr	r3, [r4, #116]	; 0x74
   153f6:	4625      	mov	r5, r4
   153f8:	b3d3      	cbz	r3, 15470 <saadc_irq_handler+0x9c>
		adc_sequence_callback callback = ctx->options.callback;
   153fa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   153fe:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   15402:	b133      	cbz	r3, 15412 <saadc_irq_handler+0x3e>
			action = callback(dev,
   15404:	f104 0174 	add.w	r1, r4, #116	; 0x74
   15408:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   1540a:	2801      	cmp	r0, #1
   1540c:	d014      	beq.n	15438 <saadc_irq_handler+0x64>
   1540e:	2802      	cmp	r0, #2
   15410:	d028      	beq.n	15464 <saadc_irq_handler+0x90>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   15412:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   15416:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   1541a:	429a      	cmp	r2, r3
   1541c:	d922      	bls.n	15464 <saadc_irq_handler+0x90>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   1541e:	3301      	adds	r3, #1
   15420:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   15424:	4b1b      	ldr	r3, [pc, #108]	; (15494 <saadc_irq_handler+0xc0>)
   15426:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   1542a:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   1542e:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   15430:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   15434:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   15438:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1543c:	b923      	cbnz	r3, 15448 <saadc_irq_handler+0x74>
}
   1543e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   15442:	4815      	ldr	r0, [pc, #84]	; (15498 <saadc_irq_handler+0xc4>)
   15444:	f7ff be6a 	b.w	1511c <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   15448:	f3bf 8f5b 	dmb	ish
   1544c:	e855 3f00 	ldrex	r3, [r5]
   15450:	1e5a      	subs	r2, r3, #1
   15452:	e845 2100 	strex	r1, r2, [r5]
   15456:	2900      	cmp	r1, #0
   15458:	d1f8      	bne.n	1544c <saadc_irq_handler+0x78>
   1545a:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   1545e:	2b01      	cmp	r3, #1
   15460:	dced      	bgt.n	1543e <saadc_irq_handler+0x6a>
   15462:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   15464:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   15468:	b113      	cbz	r3, 15470 <saadc_irq_handler+0x9c>
	z_impl_k_timer_stop(timer);
   1546a:	480c      	ldr	r0, [pc, #48]	; (1549c <saadc_irq_handler+0xc8>)
   1546c:	f007 fd2e 	bl	1cecc <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   15470:	480b      	ldr	r0, [pc, #44]	; (154a0 <saadc_irq_handler+0xcc>)
   15472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15476:	f002 bd19 	b.w	17eac <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1547a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   1547e:	2900      	cmp	r1, #0
   15480:	d0ef      	beq.n	15462 <saadc_irq_handler+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15482:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   15486:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1548a:	2201      	movs	r2, #1
   1548c:	609a      	str	r2, [r3, #8]
   1548e:	601a      	str	r2, [r3, #0]
   15490:	605a      	str	r2, [r3, #4]
}
   15492:	e7e6      	b.n	15462 <saadc_irq_handler+0x8e>
   15494:	40007000 	.word	0x40007000
   15498:	200004d0 	.word	0x200004d0
   1549c:	200004d8 	.word	0x200004d8
   154a0:	20000528 	.word	0x20000528

000154a4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   154a4:	4b08      	ldr	r3, [pc, #32]	; (154c8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   154a6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   154a8:	1ac3      	subs	r3, r0, r3
{
   154aa:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   154ac:	4907      	ldr	r1, [pc, #28]	; (154cc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   154ae:	109b      	asrs	r3, r3, #2
{
   154b0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   154b2:	4359      	muls	r1, r3
   154b4:	4806      	ldr	r0, [pc, #24]	; (154d0 <onoff_stop+0x2c>)
   154b6:	2240      	movs	r2, #64	; 0x40
   154b8:	f006 fdc6 	bl	1c048 <stop>
	notify(mgr, res);
   154bc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   154be:	4601      	mov	r1, r0
	notify(mgr, res);
   154c0:	4620      	mov	r0, r4
}
   154c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   154c6:	4718      	bx	r3
   154c8:	20001db8 	.word	0x20001db8
   154cc:	b6db6db7 	.word	0xb6db6db7
   154d0:	0001d2d0 	.word	0x0001d2d0

000154d4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   154d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   154d6:	4c0c      	ldr	r4, [pc, #48]	; (15508 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   154d8:	4a0c      	ldr	r2, [pc, #48]	; (1550c <onoff_start+0x38>)
   154da:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   154dc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   154de:	9300      	str	r3, [sp, #0]
{
   154e0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   154e2:	460b      	mov	r3, r1
   154e4:	490a      	ldr	r1, [pc, #40]	; (15510 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   154e6:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   154e8:	4361      	muls	r1, r4
{
   154ea:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   154ec:	4809      	ldr	r0, [pc, #36]	; (15514 <onoff_start+0x40>)
   154ee:	f006 fdd8 	bl	1c0a2 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   154f2:	1e01      	subs	r1, r0, #0
   154f4:	da05      	bge.n	15502 <onoff_start+0x2e>
		notify(mgr, err);
   154f6:	4630      	mov	r0, r6
   154f8:	462b      	mov	r3, r5
	}
}
   154fa:	b002      	add	sp, #8
   154fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   15500:	4718      	bx	r3
}
   15502:	b002      	add	sp, #8
   15504:	bd70      	pop	{r4, r5, r6, pc}
   15506:	bf00      	nop
   15508:	20001db8 	.word	0x20001db8
   1550c:	0001c10f 	.word	0x0001c10f
   15510:	b6db6db7 	.word	0xb6db6db7
   15514:	0001d2d0 	.word	0x0001d2d0

00015518 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15518:	2200      	movs	r2, #0
{
   1551a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1551c:	2101      	movs	r1, #1
{
   1551e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   15520:	4610      	mov	r0, r2
   15522:	f7fb fdf9 	bl	11118 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   15526:	480f      	ldr	r0, [pc, #60]	; (15564 <clk_init+0x4c>)
   15528:	f001 fc90 	bl	16e4c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1552c:	4b0e      	ldr	r3, [pc, #56]	; (15568 <clk_init+0x50>)
   1552e:	4298      	cmp	r0, r3
   15530:	d115      	bne.n	1555e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   15532:	f007 f811 	bl	1c558 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   15536:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   15538:	490c      	ldr	r1, [pc, #48]	; (1556c <clk_init+0x54>)
   1553a:	4630      	mov	r0, r6
   1553c:	f004 fab0 	bl	19aa0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   15540:	2800      	cmp	r0, #0
   15542:	db0b      	blt.n	1555c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   15544:	2501      	movs	r5, #1
   15546:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   15548:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1554a:	4908      	ldr	r1, [pc, #32]	; (1556c <clk_init+0x54>)
   1554c:	f104 001c 	add.w	r0, r4, #28
   15550:	f004 faa6 	bl	19aa0 <onoff_manager_init>
		if (err < 0) {
   15554:	2800      	cmp	r0, #0
   15556:	db01      	blt.n	1555c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   15558:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1555a:	2000      	movs	r0, #0
}
   1555c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1555e:	f06f 0004 	mvn.w	r0, #4
   15562:	e7fb      	b.n	1555c <clk_init+0x44>
   15564:	000155a5 	.word	0x000155a5
   15568:	0bad0000 	.word	0x0bad0000
   1556c:	0001d860 	.word	0x0001d860

00015570 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   15570:	b570      	push	{r4, r5, r6, lr}
   15572:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   15574:	230c      	movs	r3, #12
   15576:	4809      	ldr	r0, [pc, #36]	; (1559c <clkstarted_handle.constprop.0+0x2c>)
   15578:	434b      	muls	r3, r1
   1557a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1557c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   15580:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   15582:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   15584:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   15586:	4418      	add	r0, r3
   15588:	f006 fd4b 	bl	1c022 <set_on_state>
	if (callback) {
   1558c:	b12d      	cbz	r5, 1559a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1558e:	4632      	mov	r2, r6
   15590:	462b      	mov	r3, r5
   15592:	4803      	ldr	r0, [pc, #12]	; (155a0 <clkstarted_handle.constprop.0+0x30>)
}
   15594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   15598:	4718      	bx	r3
}
   1559a:	bd70      	pop	{r4, r5, r6, pc}
   1559c:	20001db8 	.word	0x20001db8
   155a0:	0001d2d0 	.word	0x0001d2d0

000155a4 <clock_event_handler>:
	switch (event) {
   155a4:	b110      	cbz	r0, 155ac <clock_event_handler+0x8>
   155a6:	2801      	cmp	r0, #1
   155a8:	d004      	beq.n	155b4 <clock_event_handler+0x10>
   155aa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   155ac:	4b03      	ldr	r3, [pc, #12]	; (155bc <clock_event_handler+0x18>)
   155ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   155b0:	075b      	lsls	r3, r3, #29
   155b2:	d101      	bne.n	155b8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   155b4:	f7ff bfdc 	b.w	15570 <clkstarted_handle.constprop.0>
}
   155b8:	4770      	bx	lr
   155ba:	bf00      	nop
   155bc:	20001db8 	.word	0x20001db8

000155c0 <generic_hfclk_start>:
{
   155c0:	b508      	push	{r3, lr}
	__asm__ volatile(
   155c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   155c6:	f3ef 8111 	mrs	r1, BASEPRI
   155ca:	f383 8812 	msr	BASEPRI_MAX, r3
   155ce:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   155d2:	4a12      	ldr	r2, [pc, #72]	; (1561c <generic_hfclk_start+0x5c>)
   155d4:	6813      	ldr	r3, [r2, #0]
   155d6:	f043 0002 	orr.w	r0, r3, #2
   155da:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   155dc:	07da      	lsls	r2, r3, #31
   155de:	d408      	bmi.n	155f2 <generic_hfclk_start+0x32>
	__asm__ volatile(
   155e0:	f381 8811 	msr	BASEPRI, r1
   155e4:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   155e8:	2001      	movs	r0, #1
}
   155ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   155ee:	f001 bc1d 	b.w	16e2c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   155f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   155f6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   155fa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   155fe:	07d3      	lsls	r3, r2, #31
   15600:	d5ee      	bpl.n	155e0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   15602:	4807      	ldr	r0, [pc, #28]	; (15620 <generic_hfclk_start+0x60>)
   15604:	f006 fd0d 	bl	1c022 <set_on_state>
   15608:	f381 8811 	msr	BASEPRI, r1
   1560c:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   15610:	2000      	movs	r0, #0
}
   15612:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   15616:	f7ff bfab 	b.w	15570 <clkstarted_handle.constprop.0>
   1561a:	bf00      	nop
   1561c:	20001e08 	.word	0x20001e08
   15620:	20001df8 	.word	0x20001df8

00015624 <api_blocking_start>:
{
   15624:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   15626:	2200      	movs	r2, #0
   15628:	2301      	movs	r3, #1
   1562a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1562e:	ab04      	add	r3, sp, #16
   15630:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   15634:	4a09      	ldr	r2, [pc, #36]	; (1565c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   15636:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1563a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1563c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   15640:	f006 fd5e 	bl	1c100 <api_start>
	if (err < 0) {
   15644:	2800      	cmp	r0, #0
   15646:	db05      	blt.n	15654 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   15648:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1564c:	2300      	movs	r3, #0
   1564e:	4668      	mov	r0, sp
   15650:	f002 fc52 	bl	17ef8 <z_impl_k_sem_take>
}
   15654:	b007      	add	sp, #28
   15656:	f85d fb04 	ldr.w	pc, [sp], #4
   1565a:	bf00      	nop
   1565c:	0001c12d 	.word	0x0001c12d

00015660 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15660:	4b09      	ldr	r3, [pc, #36]	; (15688 <generic_hfclk_stop+0x28>)
   15662:	f3bf 8f5b 	dmb	ish
   15666:	e853 2f00 	ldrex	r2, [r3]
   1566a:	f022 0102 	bic.w	r1, r2, #2
   1566e:	e843 1000 	strex	r0, r1, [r3]
   15672:	2800      	cmp	r0, #0
   15674:	d1f7      	bne.n	15666 <generic_hfclk_stop+0x6>
   15676:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1567a:	07d3      	lsls	r3, r2, #31
   1567c:	d402      	bmi.n	15684 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1567e:	2001      	movs	r0, #1
   15680:	f006 bf65 	b.w	1c54e <nrfx_clock_stop>
}
   15684:	4770      	bx	lr
   15686:	bf00      	nop
   15688:	20001e08 	.word	0x20001e08

0001568c <z_nrf_clock_control_lf_on>:
{
   1568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1568e:	4928      	ldr	r1, [pc, #160]	; (15730 <z_nrf_clock_control_lf_on+0xa4>)
   15690:	f3bf 8f5b 	dmb	ish
   15694:	4606      	mov	r6, r0
   15696:	2201      	movs	r2, #1
   15698:	e851 3f00 	ldrex	r3, [r1]
   1569c:	e841 2000 	strex	r0, r2, [r1]
   156a0:	2800      	cmp	r0, #0
   156a2:	d1f9      	bne.n	15698 <z_nrf_clock_control_lf_on+0xc>
   156a4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   156a8:	b933      	cbnz	r3, 156b8 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   156aa:	4922      	ldr	r1, [pc, #136]	; (15734 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
   156ac:	4822      	ldr	r0, [pc, #136]	; (15738 <z_nrf_clock_control_lf_on+0xac>)
   156ae:	604b      	str	r3, [r1, #4]
   156b0:	60cb      	str	r3, [r1, #12]
   156b2:	608a      	str	r2, [r1, #8]
   156b4:	f004 fa07 	bl	19ac6 <onoff_request>
	switch (start_mode) {
   156b8:	1e73      	subs	r3, r6, #1
   156ba:	2b01      	cmp	r3, #1
   156bc:	d81d      	bhi.n	156fa <z_nrf_clock_control_lf_on+0x6e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   156be:	f007 f883 	bl	1c7c8 <k_is_in_isr>
   156c2:	4604      	mov	r4, r0
   156c4:	b9d0      	cbnz	r0, 156fc <z_nrf_clock_control_lf_on+0x70>
	return !z_sys_post_kernel;
   156c6:	4b1d      	ldr	r3, [pc, #116]	; (1573c <z_nrf_clock_control_lf_on+0xb0>)
   156c8:	781b      	ldrb	r3, [r3, #0]
   156ca:	b1bb      	cbz	r3, 156fc <z_nrf_clock_control_lf_on+0x70>
    p_reg->INTENCLR = mask;
   156cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   156d0:	2202      	movs	r2, #2
   156d2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   156d6:	4605      	mov	r5, r0
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   156d8:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   156dc:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   156e0:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
   156e4:	03d2      	lsls	r2, r2, #15
   156e6:	d513      	bpl.n	15710 <z_nrf_clock_control_lf_on+0x84>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   156e8:	079b      	lsls	r3, r3, #30
   156ea:	d001      	beq.n	156f0 <z_nrf_clock_control_lf_on+0x64>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   156ec:	2e01      	cmp	r6, #1
   156ee:	d10f      	bne.n	15710 <z_nrf_clock_control_lf_on+0x84>
	if (isr_mode) {
   156f0:	b1c4      	cbz	r4, 15724 <z_nrf_clock_control_lf_on+0x98>
   156f2:	f385 8811 	msr	BASEPRI, r5
   156f6:	f3bf 8f6f 	isb	sy
}
   156fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
   156fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   15700:	f3ef 8511 	mrs	r5, BASEPRI
   15704:	f383 8812 	msr	BASEPRI_MAX, r3
   15708:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1570c:	2401      	movs	r4, #1
   1570e:	e7e3      	b.n	156d8 <z_nrf_clock_control_lf_on+0x4c>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   15710:	b11c      	cbz	r4, 1571a <z_nrf_clock_control_lf_on+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   15712:	4628      	mov	r0, r5
   15714:	f7fb fcc6 	bl	110a4 <arch_cpu_atomic_idle>
}
   15718:	e7e0      	b.n	156dc <z_nrf_clock_control_lf_on+0x50>
	return z_impl_k_sleep(timeout);
   1571a:	2100      	movs	r1, #0
   1571c:	2021      	movs	r0, #33	; 0x21
   1571e:	f003 f8a5 	bl	1886c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   15722:	e7db      	b.n	156dc <z_nrf_clock_control_lf_on+0x50>
    p_reg->INTENSET = mask;
   15724:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15728:	2202      	movs	r2, #2
   1572a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1572e:	e7e4      	b.n	156fa <z_nrf_clock_control_lf_on+0x6e>
   15730:	20001db4 	.word	0x20001db4
   15734:	20001da4 	.word	0x20001da4
   15738:	20001dd4 	.word	0x20001dd4
   1573c:	2000275c 	.word	0x2000275c

00015740 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   15740:	b530      	push	{r4, r5, lr}
	return port->config;
   15742:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15744:	7b05      	ldrb	r5, [r0, #12]
   15746:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1574a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1574e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15750:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   15754:	d105      	bne.n	15762 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   15756:	4620      	mov	r0, r4
   15758:	f001 fed2 	bl	17500 <nrfx_gpiote_trigger_disable>

		return 0;
   1575c:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   1575e:	b005      	add	sp, #20
   15760:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   15762:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   15764:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   15768:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1576c:	d114      	bne.n	15798 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1576e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   15772:	bf0c      	ite	eq
   15774:	2304      	moveq	r3, #4
   15776:	2305      	movne	r3, #5
   15778:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1577c:	2300      	movs	r3, #0
   1577e:	4619      	mov	r1, r3
   15780:	aa02      	add	r2, sp, #8
   15782:	4620      	mov	r0, r4
   15784:	f001 fcf2 	bl	1716c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   15788:	4b1d      	ldr	r3, [pc, #116]	; (15800 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   1578a:	4298      	cmp	r0, r3
   1578c:	d135      	bne.n	157fa <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1578e:	2101      	movs	r1, #1
   15790:	4620      	mov	r0, r4
   15792:	f001 fe71 	bl	17478 <nrfx_gpiote_trigger_enable>
	return 0;
   15796:	e7e1      	b.n	1575c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   15798:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1579c:	d022      	beq.n	157e4 <gpio_nrfx_pin_interrupt_configure+0xa4>
   1579e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   157a2:	bf14      	ite	ne
   157a4:	2301      	movne	r3, #1
   157a6:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   157a8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   157ac:	6883      	ldr	r3, [r0, #8]
   157ae:	40cb      	lsrs	r3, r1
   157b0:	07d9      	lsls	r1, r3, #31
   157b2:	d4e3      	bmi.n	1577c <gpio_nrfx_pin_interrupt_configure+0x3c>
   157b4:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   157b8:	d1e0      	bne.n	1577c <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   157ba:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   157be:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   157c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   157c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   157ca:	07db      	lsls	r3, r3, #31
   157cc:	d4d6      	bmi.n	1577c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   157ce:	f10d 0507 	add.w	r5, sp, #7
   157d2:	4629      	mov	r1, r5
   157d4:	4620      	mov	r0, r4
   157d6:	f001 fdfb 	bl	173d0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   157da:	4b0a      	ldr	r3, [pc, #40]	; (15804 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   157dc:	4298      	cmp	r0, r3
   157de:	d003      	beq.n	157e8 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
   157e0:	9503      	str	r5, [sp, #12]
   157e2:	e7cb      	b.n	1577c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   157e4:	2303      	movs	r3, #3
   157e6:	e7df      	b.n	157a8 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   157e8:	4628      	mov	r0, r5
   157ea:	f001 fe3f 	bl	1746c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   157ee:	4b04      	ldr	r3, [pc, #16]	; (15800 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   157f0:	4298      	cmp	r0, r3
   157f2:	d0f5      	beq.n	157e0 <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
   157f4:	f06f 000b 	mvn.w	r0, #11
   157f8:	e7b1      	b.n	1575e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   157fa:	f06f 0015 	mvn.w	r0, #21
   157fe:	e7ae      	b.n	1575e <gpio_nrfx_pin_interrupt_configure+0x1e>
   15800:	0bad0000 	.word	0x0bad0000
   15804:	0bad0004 	.word	0x0bad0004

00015808 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   15808:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1580a:	f001 fe1f 	bl	1744c <nrfx_gpiote_is_init>
   1580e:	4604      	mov	r4, r0
   15810:	b968      	cbnz	r0, 1582e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   15812:	f001 fdf3 	bl	173fc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   15816:	4b08      	ldr	r3, [pc, #32]	; (15838 <gpio_nrfx_init+0x30>)
   15818:	4298      	cmp	r0, r3
   1581a:	d10a      	bne.n	15832 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1581c:	4807      	ldr	r0, [pc, #28]	; (1583c <gpio_nrfx_init+0x34>)
   1581e:	4621      	mov	r1, r4
   15820:	f001 fdd0 	bl	173c4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15824:	4622      	mov	r2, r4
   15826:	2105      	movs	r1, #5
   15828:	2006      	movs	r0, #6
   1582a:	f7fb fc75 	bl	11118 <z_arm_irq_priority_set>
		return 0;
   1582e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   15830:	bd10      	pop	{r4, pc}
		return -EIO;
   15832:	f06f 0004 	mvn.w	r0, #4
   15836:	e7fb      	b.n	15830 <gpio_nrfx_init+0x28>
   15838:	0bad0000 	.word	0x0bad0000
   1583c:	00015841 	.word	0x00015841

00015840 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   15840:	0943      	lsrs	r3, r0, #5
{
   15842:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   15844:	d107      	bne.n	15856 <nrfx_gpio_handler+0x16>
	return list->head;
   15846:	4b0b      	ldr	r3, [pc, #44]	; (15874 <nrfx_gpio_handler+0x34>)
   15848:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1584a:	b121      	cbz	r1, 15856 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   1584c:	2501      	movs	r5, #1
	return node->next;
   1584e:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   15850:	4e09      	ldr	r6, [pc, #36]	; (15878 <nrfx_gpio_handler+0x38>)
   15852:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15854:	b901      	cbnz	r1, 15858 <nrfx_gpio_handler+0x18>
}
   15856:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   15858:	688a      	ldr	r2, [r1, #8]
   1585a:	402a      	ands	r2, r5
   1585c:	d002      	beq.n	15864 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
   1585e:	684b      	ldr	r3, [r1, #4]
   15860:	4630      	mov	r0, r6
   15862:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15864:	b11c      	cbz	r4, 1586e <nrfx_gpio_handler+0x2e>
   15866:	6823      	ldr	r3, [r4, #0]
   15868:	4621      	mov	r1, r4
   1586a:	461c      	mov	r4, r3
   1586c:	e7f2      	b.n	15854 <nrfx_gpio_handler+0x14>
   1586e:	4623      	mov	r3, r4
   15870:	e7fa      	b.n	15868 <nrfx_gpio_handler+0x28>
   15872:	bf00      	nop
   15874:	20001e0c 	.word	0x20001e0c
   15878:	0001d2e8 	.word	0x0001d2e8

0001587c <gpio_nrfx_pin_configure>:
{
   1587c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   15880:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15882:	7b3b      	ldrb	r3, [r7, #12]
   15884:	f001 051f 	and.w	r5, r1, #31
   15888:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1588c:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1588e:	4628      	mov	r0, r5
   15890:	f10d 0103 	add.w	r1, sp, #3
{
   15894:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   15896:	f001 fd9b 	bl	173d0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1589a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1589e:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   158a0:	d10b      	bne.n	158ba <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   158a2:	4628      	mov	r0, r5
   158a4:	f001 fe54 	bl	17550 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   158a8:	4b3d      	ldr	r3, [pc, #244]	; (159a0 <gpio_nrfx_pin_configure+0x124>)
   158aa:	4598      	cmp	r8, r3
   158ac:	d103      	bne.n	158b6 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   158ae:	f89d 0003 	ldrb.w	r0, [sp, #3]
   158b2:	f001 fdd5 	bl	17460 <nrfx_gpiote_channel_free>
		return 0;
   158b6:	2000      	movs	r0, #0
   158b8:	e00c      	b.n	158d4 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   158ba:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   158bc:	4619      	mov	r1, r3
   158be:	aa02      	add	r2, sp, #8
   158c0:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   158c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   158c6:	f001 fc51 	bl	1716c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   158ca:	4b35      	ldr	r3, [pc, #212]	; (159a0 <gpio_nrfx_pin_configure+0x124>)
   158cc:	4298      	cmp	r0, r3
   158ce:	d004      	beq.n	158da <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   158d0:	f06f 0015 	mvn.w	r0, #21
}
   158d4:	b004      	add	sp, #16
   158d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   158da:	4580      	cmp	r8, r0
   158dc:	d103      	bne.n	158e6 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   158de:	f89d 0003 	ldrb.w	r0, [sp, #3]
   158e2:	f001 fdbd 	bl	17460 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   158e6:	03a3      	lsls	r3, r4, #14
   158e8:	d54b      	bpl.n	15982 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   158ea:	f240 3306 	movw	r3, #774	; 0x306
   158ee:	4023      	ands	r3, r4
   158f0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   158f4:	d019      	beq.n	1592a <gpio_nrfx_pin_configure+0xae>
   158f6:	d80c      	bhi.n	15912 <gpio_nrfx_pin_configure+0x96>
   158f8:	2b06      	cmp	r3, #6
   158fa:	d017      	beq.n	1592c <gpio_nrfx_pin_configure+0xb0>
   158fc:	d804      	bhi.n	15908 <gpio_nrfx_pin_configure+0x8c>
   158fe:	b1ab      	cbz	r3, 1592c <gpio_nrfx_pin_configure+0xb0>
   15900:	2b02      	cmp	r3, #2
   15902:	d1e5      	bne.n	158d0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   15904:	2304      	movs	r3, #4
   15906:	e011      	b.n	1592c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   15908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1590c:	d1e0      	bne.n	158d0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   1590e:	2301      	movs	r3, #1
   15910:	e00c      	b.n	1592c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   15912:	f240 2202 	movw	r2, #514	; 0x202
   15916:	4293      	cmp	r3, r2
   15918:	d027      	beq.n	1596a <gpio_nrfx_pin_configure+0xee>
   1591a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1591e:	d026      	beq.n	1596e <gpio_nrfx_pin_configure+0xf2>
   15920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   15924:	d1d4      	bne.n	158d0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   15926:	2302      	movs	r3, #2
   15928:	e000      	b.n	1592c <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   1592a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1592c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   15930:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   15934:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   15938:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1593a:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   1593e:	bf54      	ite	pl
   15940:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   15944:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   15946:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   15948:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1594c:	d511      	bpl.n	15972 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1594e:	687a      	ldr	r2, [r7, #4]
   15950:	2301      	movs	r3, #1
   15952:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   15954:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   15958:	2200      	movs	r2, #0
   1595a:	a901      	add	r1, sp, #4
   1595c:	4628      	mov	r0, r5
   1595e:	f001 fcb3 	bl	172c8 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   15962:	4b0f      	ldr	r3, [pc, #60]	; (159a0 <gpio_nrfx_pin_configure+0x124>)
   15964:	4298      	cmp	r0, r3
   15966:	d0a6      	beq.n	158b6 <gpio_nrfx_pin_configure+0x3a>
   15968:	e7b2      	b.n	158d0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   1596a:	2305      	movs	r3, #5
   1596c:	e7de      	b.n	1592c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1596e:	2303      	movs	r3, #3
   15970:	e7dc      	b.n	1592c <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   15972:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   15974:	bf41      	itttt	mi
   15976:	2301      	movmi	r3, #1
   15978:	687a      	ldrmi	r2, [r7, #4]
   1597a:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   1597c:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   15980:	e7ea      	b.n	15958 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   15982:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   15984:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   15988:	bf54      	ite	pl
   1598a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1598e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   15990:	461a      	mov	r2, r3
   15992:	a901      	add	r1, sp, #4
   15994:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   15996:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1599a:	f001 fbe7 	bl	1716c <nrfx_gpiote_input_configure>
   1599e:	e7e0      	b.n	15962 <gpio_nrfx_pin_configure+0xe6>
   159a0:	0bad0000 	.word	0x0bad0000

000159a4 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   159a4:	4802      	ldr	r0, [pc, #8]	; (159b0 <pwm_nrfx_get_cycles_per_sec+0xc>)
   159a6:	2100      	movs	r1, #0
   159a8:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   159ac:	2000      	movs	r0, #0
   159ae:	4770      	bx	lr
   159b0:	00f42400 	.word	0x00f42400

000159b4 <pwm_nrfx_init>:
	.set_cycles = pwm_nrfx_set_cycles,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
   159b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct pwm_nrfx_config *config = dev->config;
   159b6:	6844      	ldr	r4, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   159b8:	6905      	ldr	r5, [r0, #16]

#ifdef CONFIG_PINCTRL
	int ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
   159ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   159bc:	aa01      	add	r2, sp, #4
   159be:	2100      	movs	r1, #0
   159c0:	4630      	mov	r0, r6
   159c2:	f006 fcb4 	bl	1c32e <pinctrl_lookup_state>
	if (ret < 0) {
   159c6:	2800      	cmp	r0, #0
   159c8:	db3f      	blt.n	15a4a <pwm_nrfx_init+0x96>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   159ca:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   159cc:	6832      	ldr	r2, [r6, #0]
   159ce:	7919      	ldrb	r1, [r3, #4]
   159d0:	6818      	ldr	r0, [r3, #0]
   159d2:	f006 fcc2 	bl	1c35a <pinctrl_configure_pins>

	if (ret < 0) {
   159d6:	2800      	cmp	r0, #0
   159d8:	db37      	blt.n	15a4a <pwm_nrfx_init+0x96>
		return ret;
	}

	data->initially_inverted = 0;
   159da:	2200      	movs	r2, #0
   159dc:	73aa      	strb	r2, [r5, #14]
    return p_reg->OUT;
   159de:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
	*psel = nrf_pwm_pin_get(config->pwm.p_registers, (uint8_t)channel);
   159e2:	6823      	ldr	r3, [r4, #0]
}

NRF_STATIC_INLINE uint32_t nrf_pwm_pin_get(NRF_PWM_Type const * p_reg, uint8_t channel)
{
    NRFX_ASSERT(channel < NRF_PWM_CHANNEL_COUNT);
    return p_reg->PSEL.OUT[channel];
   159e4:	f502 71ac 	add.w	r1, r2, #344	; 0x158
   159e8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
		uint32_t psel;

		if (channel_psel_get(i, &psel, config)) {
   159ec:	2900      	cmp	r1, #0
   159ee:	db0c      	blt.n	15a0a <pwm_nrfx_init+0x56>
   159f0:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    *p_pin = pin_number & 0x1F;
   159f4:	f001 011f 	and.w	r1, r1, #31
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
   159f8:	40cb      	lsrs	r3, r1
			/* Mark channels as inverted according to what initial
			 * state of their outputs has been set by pinctrl (high
			 * idle state means that the channel is inverted).
			 */
			data->initially_inverted |=
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
   159fa:	f013 0301 	ands.w	r3, r3, #1
			data->initially_inverted |=
   159fe:	7ba9      	ldrb	r1, [r5, #14]
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
   15a00:	bf1c      	itt	ne
   15a02:	2301      	movne	r3, #1
   15a04:	4093      	lslne	r3, r2
			data->initially_inverted |=
   15a06:	430b      	orrs	r3, r1
   15a08:	73ab      	strb	r3, [r5, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   15a0a:	3201      	adds	r2, #1
   15a0c:	2a04      	cmp	r2, #4
   15a0e:	d1e8      	bne.n	159e2 <pwm_nrfx_init+0x2e>
		}
	}
#endif

	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
		bool inverted = data->initially_inverted & BIT(i);
   15a10:	7ba9      	ldrb	r1, [r5, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   15a12:	2300      	movs	r3, #0
   15a14:	3502      	adds	r5, #2
		bool inverted = data->initially_inverted & BIT(i);
   15a16:	2001      	movs	r0, #1
   15a18:	fa00 f203 	lsl.w	r2, r0, r3

		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   15a1c:	420a      	tst	r2, r1
   15a1e:	bf0c      	ite	eq
   15a20:	2201      	moveq	r2, #1
   15a22:	2200      	movne	r2, #0
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   15a24:	3301      	adds	r3, #1
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   15a26:	03d2      	lsls	r2, r2, #15
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   15a28:	2b04      	cmp	r3, #4
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   15a2a:	f825 2f02 	strh.w	r2, [r5, #2]!
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   15a2e:	d1f3      	bne.n	15a18 <pwm_nrfx_init+0x64>
	}

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   15a30:	2300      	movs	r3, #0
   15a32:	461a      	mov	r2, r3
   15a34:	f104 0108 	add.w	r1, r4, #8
   15a38:	4620      	mov	r0, r4
   15a3a:	f001 fe55 	bl	176e8 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   15a3e:	4b04      	ldr	r3, [pc, #16]	; (15a50 <pwm_nrfx_init+0x9c>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
	}

	return 0;
   15a40:	4298      	cmp	r0, r3
   15a42:	bf14      	ite	ne
   15a44:	f06f 000f 	mvnne.w	r0, #15
   15a48:	2000      	moveq	r0, #0
}
   15a4a:	b002      	add	sp, #8
   15a4c:	bd70      	pop	{r4, r5, r6, pc}
   15a4e:	bf00      	nop
   15a50:	0bad0000 	.word	0x0bad0000

00015a54 <random_byte_get>:
   15a54:	f04f 0340 	mov.w	r3, #64	; 0x40
   15a58:	f3ef 8211 	mrs	r2, BASEPRI
   15a5c:	f383 8812 	msr	BASEPRI_MAX, r3
   15a60:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   15a64:	4b09      	ldr	r3, [pc, #36]	; (15a8c <random_byte_get+0x38>)
   15a66:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   15a6a:	b161      	cbz	r1, 15a86 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   15a6c:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   15a6e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   15a72:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   15a76:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   15a7a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   15a7c:	f382 8811 	msr	BASEPRI, r2
   15a80:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   15a84:	4770      	bx	lr
	int retval = -EAGAIN;
   15a86:	f06f 000a 	mvn.w	r0, #10
   15a8a:	e7f7      	b.n	15a7c <random_byte_get+0x28>
   15a8c:	4000d000 	.word	0x4000d000

00015a90 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   15a90:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a92:	4603      	mov	r3, r0
   15a94:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   15a96:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   15a98:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   15a9c:	f04f 0540 	mov.w	r5, #64	; 0x40
   15aa0:	f3ef 8211 	mrs	r2, BASEPRI
   15aa4:	f385 8812 	msr	BASEPRI_MAX, r5
   15aa8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   15aac:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   15aae:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   15ab2:	1be4      	subs	r4, r4, r7
   15ab4:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   15ab8:	42a0      	cmp	r0, r4
		len = available;
   15aba:	bf88      	it	hi
   15abc:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   15abe:	183e      	adds	r6, r7, r0
   15ac0:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   15ac4:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   15ac6:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   15ac8:	f382 8811 	msr	BASEPRI, r2
   15acc:	f3bf 8f6f 	isb	sy
   15ad0:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   15ad2:	428a      	cmp	r2, r1
   15ad4:	d117      	bne.n	15b06 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   15ad6:	4577      	cmp	r7, lr
   15ad8:	d10d      	bne.n	15af6 <rng_pool_get+0x66>
	__asm__ volatile(
   15ada:	f04f 0140 	mov.w	r1, #64	; 0x40
   15ade:	f3ef 8211 	mrs	r2, BASEPRI
   15ae2:	f381 8812 	msr	BASEPRI_MAX, r1
   15ae6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   15aea:	7819      	ldrb	r1, [r3, #0]
   15aec:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   15aee:	f382 8811 	msr	BASEPRI, r2
   15af2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   15af6:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   15af8:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   15afa:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   15afc:	bf22      	ittt	cs
   15afe:	4b06      	ldrcs	r3, [pc, #24]	; (15b18 <rng_pool_get+0x88>)
   15b00:	2201      	movcs	r2, #1
   15b02:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   15b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   15b06:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   15b08:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   15b0a:	7976      	ldrb	r6, [r6, #5]
   15b0c:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   15b10:	ea05 050c 	and.w	r5, r5, ip
   15b14:	e7dd      	b.n	15ad2 <rng_pool_get+0x42>
   15b16:	bf00      	nop
   15b18:	4000d000 	.word	0x4000d000

00015b1c <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   15b1c:	43db      	mvns	r3, r3
{
   15b1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   15b22:	f013 0501 	ands.w	r5, r3, #1
{
   15b26:	460e      	mov	r6, r1
   15b28:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   15b2a:	d004      	beq.n	15b36 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   15b2c:	4821      	ldr	r0, [pc, #132]	; (15bb4 <entropy_nrf5_get_entropy_isr+0x98>)
   15b2e:	f7ff ffaf 	bl	15a90 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   15b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   15b36:	b3a2      	cbz	r2, 15ba2 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   15b38:	f04f 0340 	mov.w	r3, #64	; 0x40
   15b3c:	f3ef 8811 	mrs	r8, BASEPRI
   15b40:	f383 8812 	msr	BASEPRI_MAX, r3
   15b44:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   15b48:	200d      	movs	r0, #13
   15b4a:	f7fb fad7 	bl	110fc <arch_irq_is_enabled>
   15b4e:	4607      	mov	r7, r0
		irq_disable(IRQN);
   15b50:	200d      	movs	r0, #13
   15b52:	f7fb fabf 	bl	110d4 <arch_irq_disable>
	__asm__ volatile(
   15b56:	f388 8811 	msr	BASEPRI, r8
   15b5a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   15b5e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 15bb8 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15b62:	f8df 9058 	ldr.w	r9, [pc, #88]	; 15bbc <entropy_nrf5_get_entropy_isr+0xa0>
   15b66:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   15b6a:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   15b6e:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   15b72:	2301      	movs	r3, #1
   15b74:	f8c8 3000 	str.w	r3, [r8]
   15b78:	4625      	mov	r5, r4
   15b7a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   15b7e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   15b82:	b183      	cbz	r3, 15ba6 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   15b84:	f7ff ff66 	bl	15a54 <random_byte_get>
			if (byte < 0) {
   15b88:	1e03      	subs	r3, r0, #0
   15b8a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   15b8e:	dbf6      	blt.n	15b7e <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   15b90:	3d01      	subs	r5, #1
   15b92:	b2ad      	uxth	r5, r5
   15b94:	5573      	strb	r3, [r6, r5]
		} while (len);
   15b96:	2d00      	cmp	r5, #0
   15b98:	d1f1      	bne.n	15b7e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   15b9a:	b117      	cbz	r7, 15ba2 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   15b9c:	200d      	movs	r0, #13
   15b9e:	f7fb fa8b 	bl	110b8 <arch_irq_enable>
	return cnt;
   15ba2:	4620      	mov	r0, r4
   15ba4:	e7c5      	b.n	15b32 <entropy_nrf5_get_entropy_isr+0x16>
   15ba6:	f3bf 8f4f 	dsb	sy
				__WFE();
   15baa:	bf20      	wfe
				__SEV();
   15bac:	bf40      	sev
				__WFE();
   15bae:	bf20      	wfe
   15bb0:	e7e5      	b.n	15b7e <entropy_nrf5_get_entropy_isr+0x62>
   15bb2:	bf00      	nop
   15bb4:	20001e58 	.word	0x20001e58
   15bb8:	4000d000 	.word	0x4000d000
   15bbc:	e000e100 	.word	0xe000e100

00015bc0 <entropy_nrf5_get_entropy>:
{
   15bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   15bc4:	4f12      	ldr	r7, [pc, #72]	; (15c10 <entropy_nrf5_get_entropy+0x50>)
   15bc6:	460d      	mov	r5, r1
   15bc8:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   15bca:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   15bce:	b914      	cbnz	r4, 15bd6 <entropy_nrf5_get_entropy+0x16>
}
   15bd0:	4620      	mov	r0, r4
   15bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15bde:	4638      	mov	r0, r7
   15be0:	f002 f98a 	bl	17ef8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   15be4:	4622      	mov	r2, r4
   15be6:	4629      	mov	r1, r5
   15be8:	4640      	mov	r0, r8
   15bea:	f7ff ff51 	bl	15a90 <rng_pool_get>
   15bee:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   15bf0:	4638      	mov	r0, r7
   15bf2:	f002 f95b 	bl	17eac <z_impl_k_sem_give>
		if (bytes == 0U) {
   15bf6:	b93e      	cbnz	r6, 15c08 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   15bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15c00:	4804      	ldr	r0, [pc, #16]	; (15c14 <entropy_nrf5_get_entropy+0x54>)
   15c02:	f002 f979 	bl	17ef8 <z_impl_k_sem_take>
	while (len) {
   15c06:	e7e6      	b.n	15bd6 <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   15c08:	1ba4      	subs	r4, r4, r6
   15c0a:	b2a4      	uxth	r4, r4
		buf += bytes;
   15c0c:	4435      	add	r5, r6
   15c0e:	e7de      	b.n	15bce <entropy_nrf5_get_entropy+0xe>
   15c10:	20001e28 	.word	0x20001e28
   15c14:	20001e40 	.word	0x20001e40

00015c18 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   15c18:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   15c1a:	4c19      	ldr	r4, [pc, #100]	; (15c80 <entropy_nrf5_init+0x68>)
   15c1c:	2201      	movs	r2, #1
   15c1e:	4611      	mov	r1, r2
   15c20:	4620      	mov	r0, r4
   15c22:	f006 febd 	bl	1c9a0 <z_impl_k_sem_init>
   15c26:	2201      	movs	r2, #1
   15c28:	2100      	movs	r1, #0
   15c2a:	f104 0018 	add.w	r0, r4, #24
   15c2e:	f006 feb7 	bl	1c9a0 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   15c32:	f240 4307 	movw	r3, #1031	; 0x407
   15c36:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   15c3a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   15c3e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   15c40:	230c      	movs	r3, #12
   15c42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   15c46:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   15c48:	4b0e      	ldr	r3, [pc, #56]	; (15c84 <entropy_nrf5_init+0x6c>)
   15c4a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   15c4e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   15c52:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   15c56:	f022 0201 	bic.w	r2, r2, #1
   15c5a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   15c5e:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   15c60:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   15c64:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   15c68:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   15c6c:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   15c6e:	6019      	str	r1, [r3, #0]
   15c70:	200d      	movs	r0, #13
   15c72:	f7fb fa51 	bl	11118 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   15c76:	200d      	movs	r0, #13
   15c78:	f7fb fa1e 	bl	110b8 <arch_irq_enable>

	return 0;
}
   15c7c:	4628      	mov	r0, r5
   15c7e:	bd38      	pop	{r3, r4, r5, pc}
   15c80:	20001e28 	.word	0x20001e28
   15c84:	4000d000 	.word	0x4000d000

00015c88 <isr>:
{
   15c88:	b510      	push	{r4, lr}
	byte = random_byte_get();
   15c8a:	f7ff fee3 	bl	15a54 <random_byte_get>
	if (byte < 0) {
   15c8e:	2800      	cmp	r0, #0
   15c90:	db20      	blt.n	15cd4 <isr+0x4c>
	uint8_t last  = rngp->last;
   15c92:	4b17      	ldr	r3, [pc, #92]	; (15cf0 <isr+0x68>)
   15c94:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   15c98:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   15c9c:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   15ca0:	1b14      	subs	r4, r2, r4
   15ca2:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   15ca6:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   15ca8:	d10d      	bne.n	15cc6 <isr+0x3e>
	uint8_t last  = rngp->last;
   15caa:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   15cae:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   15cb2:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   15cb6:	1b14      	subs	r4, r2, r4
   15cb8:	ea31 0404 	bics.w	r4, r1, r4
   15cbc:	d10b      	bne.n	15cd6 <isr+0x4e>
   15cbe:	4b0d      	ldr	r3, [pc, #52]	; (15cf4 <isr+0x6c>)
   15cc0:	2201      	movs	r2, #1
   15cc2:	605a      	str	r2, [r3, #4]
}
   15cc4:	e00e      	b.n	15ce4 <isr+0x5c>
	rngp->buffer[last] = byte;
   15cc6:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   15cc8:	3201      	adds	r2, #1
   15cca:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   15ccc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   15cd0:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   15cd4:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   15cd6:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   15cd8:	3201      	adds	r2, #1
   15cda:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   15cdc:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   15ce0:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   15ce4:	4804      	ldr	r0, [pc, #16]	; (15cf8 <isr+0x70>)
}
   15ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15cea:	f002 b8df 	b.w	17eac <z_impl_k_sem_give>
   15cee:	bf00      	nop
   15cf0:	20001e28 	.word	0x20001e28
   15cf4:	4000d000 	.word	0x4000d000
   15cf8:	20001e40 	.word	0x20001e40

00015cfc <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   15cfc:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   15cfe:	2301      	movs	r3, #1
   15d00:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15d02:	4a0e      	ldr	r2, [pc, #56]	; (15d3c <compare_int_lock+0x40>)
   15d04:	f3bf 8f5b 	dmb	ish
   15d08:	43dc      	mvns	r4, r3
   15d0a:	e852 1f00 	ldrex	r1, [r2]
   15d0e:	ea01 0504 	and.w	r5, r1, r4
   15d12:	e842 5600 	strex	r6, r5, [r2]
   15d16:	2e00      	cmp	r6, #0
   15d18:	d1f7      	bne.n	15d0a <compare_int_lock+0xe>
   15d1a:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15d1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15d22:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   15d24:	4806      	ldr	r0, [pc, #24]	; (15d40 <compare_int_lock+0x44>)
   15d26:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   15d2a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15d2e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   15d32:	420b      	tst	r3, r1
}
   15d34:	bf14      	ite	ne
   15d36:	2001      	movne	r0, #1
   15d38:	2000      	moveq	r0, #0
   15d3a:	bd70      	pop	{r4, r5, r6, pc}
   15d3c:	20001e80 	.word	0x20001e80
   15d40:	40011000 	.word	0x40011000

00015d44 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   15d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   15d46:	491b      	ldr	r1, [pc, #108]	; (15db4 <sys_clock_timeout_handler+0x70>)
{
   15d48:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   15d4a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   15d4e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   15d50:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   15d54:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   15d58:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   15d5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   15d5e:	d30f      	bcc.n	15d80 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   15d60:	f002 fefc 	bl	18b5c <sys_clock_announce>
    return p_reg->CC[ch];
   15d64:	00a3      	lsls	r3, r4, #2
   15d66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15d6a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   15d6e:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   15d72:	4295      	cmp	r5, r2
   15d74:	d11d      	bne.n	15db2 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   15d76:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   15d7a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   15d7e:	e012      	b.n	15da6 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   15d80:	4b0d      	ldr	r3, [pc, #52]	; (15db8 <sys_clock_timeout_handler+0x74>)
   15d82:	681b      	ldr	r3, [r3, #0]
   15d84:	0a1a      	lsrs	r2, r3, #8
   15d86:	061b      	lsls	r3, r3, #24
   15d88:	195e      	adds	r6, r3, r5
   15d8a:	4b0c      	ldr	r3, [pc, #48]	; (15dbc <sys_clock_timeout_handler+0x78>)
   15d8c:	f142 0700 	adc.w	r7, r2, #0
   15d90:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   15d94:	f002 fee2 	bl	18b5c <sys_clock_announce>
    return p_reg->CC[ch];
   15d98:	4a09      	ldr	r2, [pc, #36]	; (15dc0 <sys_clock_timeout_handler+0x7c>)
   15d9a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   15d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   15da2:	429d      	cmp	r5, r3
   15da4:	d105      	bne.n	15db2 <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   15da6:	4a06      	ldr	r2, [pc, #24]	; (15dc0 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15da8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   15dac:	40a3      	lsls	r3, r4
   15dae:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   15db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15db4:	200018e0 	.word	0x200018e0
   15db8:	20001e84 	.word	0x20001e84
   15dbc:	200018e8 	.word	0x200018e8
   15dc0:	40011000 	.word	0x40011000

00015dc4 <compare_int_unlock>:
	if (key) {
   15dc4:	b311      	cbz	r1, 15e0c <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15dc6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   15dca:	2301      	movs	r3, #1
   15dcc:	4a10      	ldr	r2, [pc, #64]	; (15e10 <compare_int_unlock+0x4c>)
   15dce:	4083      	lsls	r3, r0
   15dd0:	e852 cf00 	ldrex	ip, [r2]
   15dd4:	ea4c 0c03 	orr.w	ip, ip, r3
   15dd8:	e842 c100 	strex	r1, ip, [r2]
   15ddc:	2900      	cmp	r1, #0
   15dde:	d1f7      	bne.n	15dd0 <compare_int_unlock+0xc>
   15de0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   15de4:	4a0b      	ldr	r2, [pc, #44]	; (15e14 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15de6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   15dea:	4083      	lsls	r3, r0
   15dec:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15df0:	4b09      	ldr	r3, [pc, #36]	; (15e18 <compare_int_unlock+0x54>)
   15df2:	f3bf 8f5b 	dmb	ish
   15df6:	681b      	ldr	r3, [r3, #0]
   15df8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   15dfc:	40c3      	lsrs	r3, r0
   15dfe:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15e00:	bf42      	ittt	mi
   15e02:	4b06      	ldrmi	r3, [pc, #24]	; (15e1c <compare_int_unlock+0x58>)
   15e04:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   15e08:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   15e0c:	4770      	bx	lr
   15e0e:	bf00      	nop
   15e10:	20001e80 	.word	0x20001e80
   15e14:	40011000 	.word	0x40011000
   15e18:	20001e7c 	.word	0x20001e7c
   15e1c:	e000e100 	.word	0xe000e100

00015e20 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   15e20:	4b0d      	ldr	r3, [pc, #52]	; (15e58 <z_nrf_rtc_timer_read+0x38>)
   15e22:	6818      	ldr	r0, [r3, #0]
   15e24:	0a01      	lsrs	r1, r0, #8
   15e26:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   15e28:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   15e2c:	4b0b      	ldr	r3, [pc, #44]	; (15e5c <z_nrf_rtc_timer_read+0x3c>)
   15e2e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   15e32:	1818      	adds	r0, r3, r0
   15e34:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   15e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   15e3c:	d20a      	bcs.n	15e54 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   15e3e:	4b08      	ldr	r3, [pc, #32]	; (15e60 <z_nrf_rtc_timer_read+0x40>)
   15e40:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e44:	4290      	cmp	r0, r2
   15e46:	eb71 0303 	sbcs.w	r3, r1, r3
   15e4a:	d203      	bcs.n	15e54 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   15e4c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   15e50:	f141 0100 	adc.w	r1, r1, #0
}
   15e54:	4770      	bx	lr
   15e56:	bf00      	nop
   15e58:	20001e84 	.word	0x20001e84
   15e5c:	40011000 	.word	0x40011000
   15e60:	200018e8 	.word	0x200018e8

00015e64 <compare_set>:
{
   15e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e68:	4614      	mov	r4, r2
   15e6a:	461d      	mov	r5, r3
   15e6c:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   15e6e:	f7ff ff45 	bl	15cfc <compare_int_lock>
   15e72:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   15e74:	f7ff ffd4 	bl	15e20 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   15e78:	42a0      	cmp	r0, r4
   15e7a:	eb71 0305 	sbcs.w	r3, r1, r5
   15e7e:	d27a      	bcs.n	15f76 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
   15e80:	4b46      	ldr	r3, [pc, #280]	; (15f9c <compare_set+0x138>)
   15e82:	1a20      	subs	r0, r4, r0
   15e84:	eb65 0101 	sbc.w	r1, r5, r1
   15e88:	4298      	cmp	r0, r3
   15e8a:	f171 0100 	sbcs.w	r1, r1, #0
   15e8e:	f080 8081 	bcs.w	15f94 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
   15e92:	4b43      	ldr	r3, [pc, #268]	; (15fa0 <compare_set+0x13c>)
   15e94:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   15e98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   15e9c:	429d      	cmp	r5, r3
   15e9e:	bf08      	it	eq
   15ea0:	4294      	cmpeq	r4, r2
   15ea2:	d053      	beq.n	15f4c <compare_set+0xe8>
   15ea4:	ea4f 0a87 	mov.w	sl, r7, lsl #2
   15ea8:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   15eac:	f107 0950 	add.w	r9, r7, #80	; 0x50
   15eb0:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
   15eb4:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15eb8:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
   15ebc:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
   15ec0:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15ec4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
   15ec8:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
   15ecc:	4a35      	ldr	r2, [pc, #212]	; (15fa4 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15ece:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   15ed2:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
   15ed4:	4646      	mov	r6, r8
     return p_reg->COUNTER;
   15ed6:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   15eda:	eba0 000b 	sub.w	r0, r0, fp
   15ede:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   15ee2:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   15ee6:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   15ee8:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
   15eec:	d105      	bne.n	15efa <compare_set+0x96>
   15eee:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
   15ef0:	2013      	movs	r0, #19
   15ef2:	f006 ffc5 	bl	1ce80 <z_impl_k_busy_wait>
   15ef6:	4a2b      	ldr	r2, [pc, #172]	; (15fa4 <compare_set+0x140>)
   15ef8:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   15efa:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
   15efe:	eba6 000c 	sub.w	r0, r6, ip
   15f02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   15f06:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   15f0a:	bf88      	it	hi
   15f0c:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15f0e:	2000      	movs	r0, #0
   15f10:	f8c9 0000 	str.w	r0, [r9]
   15f14:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
   15f18:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   15f1c:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   15f20:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
   15f24:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
   15f28:	4583      	cmp	fp, r0
   15f2a:	d006      	beq.n	15f3a <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
   15f2c:	1a30      	subs	r0, r6, r0
   15f2e:	3802      	subs	r0, #2
   15f30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   15f34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   15f38:	d81b      	bhi.n	15f72 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
   15f3a:	eba6 0608 	sub.w	r6, r6, r8
   15f3e:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   15f42:	1936      	adds	r6, r6, r4
   15f44:	f145 0300 	adc.w	r3, r5, #0
   15f48:	4634      	mov	r4, r6
   15f4a:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   15f4c:	4914      	ldr	r1, [pc, #80]	; (15fa0 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   15f4e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   15f50:	013b      	lsls	r3, r7, #4
   15f52:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
   15f56:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   15f58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15f5a:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
   15f5c:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   15f60:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   15f62:	4638      	mov	r0, r7
   15f64:	9900      	ldr	r1, [sp, #0]
   15f66:	f7ff ff2d 	bl	15dc4 <compare_int_unlock>
}
   15f6a:	4620      	mov	r0, r4
   15f6c:	b003      	add	sp, #12
   15f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f72:	4630      	mov	r0, r6
   15f74:	e7af      	b.n	15ed6 <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
   15f76:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15f78:	4a0b      	ldr	r2, [pc, #44]	; (15fa8 <compare_set+0x144>)
   15f7a:	f3bf 8f5b 	dmb	ish
   15f7e:	40bb      	lsls	r3, r7
   15f80:	e852 0f00 	ldrex	r0, [r2]
   15f84:	4318      	orrs	r0, r3
   15f86:	e842 0100 	strex	r1, r0, [r2]
   15f8a:	2900      	cmp	r1, #0
   15f8c:	d1f8      	bne.n	15f80 <compare_set+0x11c>
   15f8e:	f3bf 8f5b 	dmb	ish
   15f92:	e7db      	b.n	15f4c <compare_set+0xe8>
			return -EINVAL;
   15f94:	f06f 0415 	mvn.w	r4, #21
   15f98:	e7e3      	b.n	15f62 <compare_set+0xfe>
   15f9a:	bf00      	nop
   15f9c:	01000001 	.word	0x01000001
   15fa0:	200018d0 	.word	0x200018d0
   15fa4:	40011000 	.word	0x40011000
   15fa8:	20001e7c 	.word	0x20001e7c

00015fac <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   15fac:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   15fae:	4b19      	ldr	r3, [pc, #100]	; (16014 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   15fb0:	4d19      	ldr	r5, [pc, #100]	; (16018 <sys_clock_driver_init+0x6c>)
   15fb2:	2400      	movs	r4, #0
   15fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15fb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15fbc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   15fc0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   15fc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   15fc8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15fcc:	4b13      	ldr	r3, [pc, #76]	; (1601c <sys_clock_driver_init+0x70>)
   15fce:	2602      	movs	r6, #2
   15fd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   15fd4:	2101      	movs	r1, #1
   15fd6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   15fda:	2011      	movs	r0, #17
   15fdc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   15fe0:	4622      	mov	r2, r4
   15fe2:	f7fb f899 	bl	11118 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   15fe6:	2011      	movs	r0, #17
   15fe8:	f7fb f866 	bl	110b8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   15fec:	4a0c      	ldr	r2, [pc, #48]	; (16020 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   15fee:	2301      	movs	r3, #1
   15ff0:	60ab      	str	r3, [r5, #8]
   15ff2:	602b      	str	r3, [r5, #0]
   15ff4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   15ff6:	4b0b      	ldr	r3, [pc, #44]	; (16024 <sys_clock_driver_init+0x78>)
   15ff8:	4a0b      	ldr	r2, [pc, #44]	; (16028 <sys_clock_driver_init+0x7c>)
   15ffa:	9300      	str	r3, [sp, #0]
   15ffc:	9401      	str	r4, [sp, #4]
   15ffe:	2300      	movs	r3, #0
   16000:	4620      	mov	r0, r4
   16002:	f7ff ff2f 	bl	15e64 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   16006:	4630      	mov	r0, r6
   16008:	f7ff fb40 	bl	1568c <z_nrf_clock_control_lf_on>

	return 0;
}
   1600c:	4620      	mov	r0, r4
   1600e:	b002      	add	sp, #8
   16010:	bd70      	pop	{r4, r5, r6, pc}
   16012:	bf00      	nop
   16014:	200018d0 	.word	0x200018d0
   16018:	40011000 	.word	0x40011000
   1601c:	e000e100 	.word	0xe000e100
   16020:	20001e80 	.word	0x20001e80
   16024:	00015d45 	.word	0x00015d45
   16028:	007fffff 	.word	0x007fffff

0001602c <rtc_nrf_isr>:
{
   1602c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   16030:	4c2b      	ldr	r4, [pc, #172]	; (160e0 <rtc_nrf_isr+0xb4>)
   16032:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   16036:	079a      	lsls	r2, r3, #30
   16038:	d50b      	bpl.n	16052 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1603a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1603e:	b143      	cbz	r3, 16052 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   16040:	4a28      	ldr	r2, [pc, #160]	; (160e4 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16042:	2300      	movs	r3, #0
   16044:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   16048:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1604c:	6813      	ldr	r3, [r2, #0]
   1604e:	3301      	adds	r3, #1
   16050:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   16052:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   16056:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   16058:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1605c:	03db      	lsls	r3, r3, #15
   1605e:	d522      	bpl.n	160a6 <rtc_nrf_isr+0x7a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16060:	f3bf 8f5b 	dmb	ish
   16064:	4b20      	ldr	r3, [pc, #128]	; (160e8 <rtc_nrf_isr+0xbc>)
   16066:	e853 1f00 	ldrex	r1, [r3]
   1606a:	f021 0001 	bic.w	r0, r1, #1
   1606e:	e843 0500 	strex	r5, r0, [r3]
   16072:	2d00      	cmp	r5, #0
   16074:	d1f7      	bne.n	16066 <rtc_nrf_isr+0x3a>
   16076:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1607a:	b911      	cbnz	r1, 16082 <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1607c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   16080:	b18b      	cbz	r3, 160a6 <rtc_nrf_isr+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16082:	2500      	movs	r5, #0
   16084:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   16088:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1608c:	f382 8810 	msr	PRIMASK, r2
		curr_time = z_nrf_rtc_timer_read();
   16090:	f7ff fec6 	bl	15e20 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   16094:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   16098:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1609a:	4b14      	ldr	r3, [pc, #80]	; (160ec <rtc_nrf_isr+0xc0>)
   1609c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   160a0:	42b0      	cmp	r0, r6
   160a2:	41b9      	sbcs	r1, r7
   160a4:	d204      	bcs.n	160b0 <rtc_nrf_isr+0x84>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   160a6:	f382 8810 	msr	PRIMASK, r2
}
   160aa:	b003      	add	sp, #12
   160ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   160b0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   160b4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   160b8:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   160bc:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   160c0:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   160c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   160c6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   160ca:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   160ce:	2900      	cmp	r1, #0
   160d0:	d0eb      	beq.n	160aa <rtc_nrf_isr+0x7e>
			handler(chan, expire_time, user_context);
   160d2:	9000      	str	r0, [sp, #0]
   160d4:	4632      	mov	r2, r6
   160d6:	463b      	mov	r3, r7
   160d8:	4628      	mov	r0, r5
   160da:	4788      	blx	r1
}
   160dc:	e7e5      	b.n	160aa <rtc_nrf_isr+0x7e>
   160de:	bf00      	nop
   160e0:	40011000 	.word	0x40011000
   160e4:	20001e84 	.word	0x20001e84
   160e8:	20001e7c 	.word	0x20001e7c
   160ec:	200018d0 	.word	0x200018d0

000160f0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   160f0:	1c43      	adds	r3, r0, #1
{
   160f2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   160f4:	d021      	beq.n	1613a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   160f6:	2801      	cmp	r0, #1
   160f8:	dd21      	ble.n	1613e <sys_clock_set_timeout+0x4e>
   160fa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   160fe:	da20      	bge.n	16142 <sys_clock_set_timeout+0x52>
   16100:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   16102:	f7ff fe8d 	bl	15e20 <z_nrf_rtc_timer_read>
   16106:	4b10      	ldr	r3, [pc, #64]	; (16148 <sys_clock_set_timeout+0x58>)
   16108:	e9d3 1300 	ldrd	r1, r3, [r3]
   1610c:	1a42      	subs	r2, r0, r1
		ticks = 0;
   1610e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
   16112:	480e      	ldr	r0, [pc, #56]	; (1614c <sys_clock_set_timeout+0x5c>)
		ticks = 0;
   16114:	bf28      	it	cs
   16116:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   16118:	3201      	adds	r2, #1
   1611a:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   1611c:	4282      	cmp	r2, r0
   1611e:	bf28      	it	cs
   16120:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   16122:	1852      	adds	r2, r2, r1
   16124:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   16128:	4909      	ldr	r1, [pc, #36]	; (16150 <sys_clock_set_timeout+0x60>)
   1612a:	9001      	str	r0, [sp, #4]
   1612c:	9100      	str	r1, [sp, #0]
   1612e:	f143 0300 	adc.w	r3, r3, #0
   16132:	f7ff fe97 	bl	15e64 <compare_set>
}
   16136:	b002      	add	sp, #8
   16138:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1613a:	4804      	ldr	r0, [pc, #16]	; (1614c <sys_clock_set_timeout+0x5c>)
   1613c:	e7e0      	b.n	16100 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1613e:	2400      	movs	r4, #0
   16140:	e7df      	b.n	16102 <sys_clock_set_timeout+0x12>
   16142:	4c02      	ldr	r4, [pc, #8]	; (1614c <sys_clock_set_timeout+0x5c>)
   16144:	e7dd      	b.n	16102 <sys_clock_set_timeout+0x12>
   16146:	bf00      	nop
   16148:	200018e0 	.word	0x200018e0
   1614c:	007fffff 	.word	0x007fffff
   16150:	00015d45 	.word	0x00015d45

00016154 <sys_clock_elapsed>:
{
   16154:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   16156:	f7ff fe63 	bl	15e20 <z_nrf_rtc_timer_read>
   1615a:	4b02      	ldr	r3, [pc, #8]	; (16164 <sys_clock_elapsed+0x10>)
   1615c:	681b      	ldr	r3, [r3, #0]
}
   1615e:	1ac0      	subs	r0, r0, r3
   16160:	bd08      	pop	{r3, pc}
   16162:	bf00      	nop
   16164:	200018e0 	.word	0x200018e0

00016168 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   16168:	4602      	mov	r2, r0
   1616a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1616c:	4801      	ldr	r0, [pc, #4]	; (16174 <multithreading_lock_acquire+0xc>)
   1616e:	f001 bdb3 	b.w	17cd8 <z_impl_k_mutex_lock>
   16172:	bf00      	nop
   16174:	2000077c 	.word	0x2000077c

00016178 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   16178:	4801      	ldr	r0, [pc, #4]	; (16180 <multithreading_lock_release+0x8>)
   1617a:	f001 be27 	b.w	17dcc <z_impl_k_mutex_unlock>
   1617e:	bf00      	nop
   16180:	2000077c 	.word	0x2000077c

00016184 <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   16184:	b510      	push	{r4, lr}
	BT_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   16186:	4917      	ldr	r1, [pc, #92]	; (161e4 <hci_driver_open+0x60>)
   16188:	4817      	ldr	r0, [pc, #92]	; (161e8 <hci_driver_open+0x64>)
{
   1618a:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
   1618c:	f006 fc84 	bl	1ca98 <k_work_init>

	if (IS_ENABLED(CONFIG_BT_CTLR_ECDH)) {
		hci_ecdh_init();
   16190:	f000 fd74 	bl	16c7c <hci_ecdh_init>
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   16194:	a803      	add	r0, sp, #12
   16196:	f7ee f83d 	bl	4214 <sdc_build_revision_get>
   1619a:	4814      	ldr	r0, [pc, #80]	; (161ec <hci_driver_open+0x68>)
   1619c:	f006 fa39 	bl	1c612 <z_device_is_ready>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   161a0:	b1d0      	cbz	r0, 161d8 <hci_driver_open+0x54>
		BT_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
   161a2:	4a13      	ldr	r2, [pc, #76]	; (161f0 <hci_driver_open+0x6c>)
   161a4:	ca07      	ldmia	r2, {r0, r1, r2}
   161a6:	466b      	mov	r3, sp
   161a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
   161ac:	4618      	mov	r0, r3
   161ae:	f7ee f9df 	bl	4570 <sdc_rand_source_register>
	if (err) {
   161b2:	b9a0      	cbnz	r0, 161de <hci_driver_open+0x5a>
		BT_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
   161b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   161b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   161bc:	f7ff ffd4 	bl	16168 <multithreading_lock_acquire>
	if (err) {
   161c0:	4604      	mov	r4, r0
   161c2:	b930      	cbnz	r0, 161d2 <hci_driver_open+0x4e>
				return err;
			}
		}
	}

	err = sdc_enable(receive_signal_raise, sdc_mempool);
   161c4:	490b      	ldr	r1, [pc, #44]	; (161f4 <hci_driver_open+0x70>)
   161c6:	480c      	ldr	r0, [pc, #48]	; (161f8 <hci_driver_open+0x74>)
   161c8:	f7ee f896 	bl	42f8 <sdc_enable>
	if (err) {
   161cc:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
		return err;
	}

	MULTITHREADING_LOCK_RELEASE();
   161ce:	f7ff ffd3 	bl	16178 <multithreading_lock_release>

	return 0;
}
   161d2:	4620      	mov	r0, r4
   161d4:	b008      	add	sp, #32
   161d6:	bd10      	pop	{r4, pc}
		return -ENODEV;
   161d8:	f06f 0412 	mvn.w	r4, #18
   161dc:	e7f9      	b.n	161d2 <hci_driver_open+0x4e>
		return -EINVAL;
   161de:	f06f 0415 	mvn.w	r4, #21
   161e2:	e7f6      	b.n	161d2 <hci_driver_open+0x4e>
   161e4:	0001c499 	.word	0x0001c499
   161e8:	20001e88 	.word	0x20001e88
   161ec:	0001d300 	.word	0x0001d300
   161f0:	0001d4f0 	.word	0x0001d4f0
   161f4:	20001f68 	.word	0x20001f68
   161f8:	000162fd 	.word	0x000162fd

000161fc <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   161fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   161fe:	4832      	ldr	r0, [pc, #200]	; (162c8 <hci_driver_init+0xcc>)
   16200:	f7fb ff5e 	bl	120c0 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   16204:	4831      	ldr	r0, [pc, #196]	; (162cc <hci_driver_init+0xd0>)
   16206:	f7ee f89f 	bl	4348 <sdc_init>
			err = sdc_support_adv();
   1620a:	f7ee f91b 	bl	4444 <sdc_support_adv>
			if (err) {
   1620e:	b118      	cbz	r0, 16218 <hci_driver_init+0x1c>
				return -ENOTSUP;
   16210:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   16214:	b003      	add	sp, #12
   16216:	bd30      	pop	{r4, r5, pc}
		err = sdc_support_peripheral();
   16218:	f7ee f944 	bl	44a4 <sdc_support_peripheral>
		if (err) {
   1621c:	2800      	cmp	r0, #0
   1621e:	d1f7      	bne.n	16210 <hci_driver_init+0x14>
			err = sdc_support_dle_peripheral();
   16220:	f7ee f920 	bl	4464 <sdc_support_dle_peripheral>
			if (err) {
   16224:	2800      	cmp	r0, #0
   16226:	d1f3      	bne.n	16210 <hci_driver_init+0x14>
		err = sdc_support_le_2m_phy();
   16228:	f7ee f92c 	bl	4484 <sdc_support_le_2m_phy>
		if (err) {
   1622c:	2800      	cmp	r0, #0
   1622e:	d1ef      	bne.n	16210 <hci_driver_init+0x14>
			err = sdc_support_phy_update_peripheral();
   16230:	f7ee f948 	bl	44c4 <sdc_support_phy_update_peripheral>
			if (err) {
   16234:	4604      	mov	r4, r0
   16236:	2800      	cmp	r0, #0
   16238:	d1ea      	bne.n	16210 <hci_driver_init+0x14>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1623a:	aa01      	add	r2, sp, #4
   1623c:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1623e:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16242:	f7ed fff5 	bl	4230 <sdc_cfg_set>
	if (required_memory < 0) {
   16246:	2800      	cmp	r0, #0
   16248:	dbe4      	blt.n	16214 <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1624a:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1624c:	aa01      	add	r2, sp, #4
   1624e:	2102      	movs	r1, #2
   16250:	4620      	mov	r0, r4
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   16252:	f88d 5004 	strb.w	r5, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16256:	f7ed ffeb 	bl	4230 <sdc_cfg_set>
	if (required_memory < 0) {
   1625a:	2800      	cmp	r0, #0
   1625c:	dbda      	blt.n	16214 <hci_driver_init+0x18>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1625e:	4b1c      	ldr	r3, [pc, #112]	; (162d0 <hci_driver_init+0xd4>)
   16260:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16262:	aa01      	add	r2, sp, #4
   16264:	2103      	movs	r1, #3
   16266:	4620      	mov	r0, r4
   16268:	f7ed ffe2 	bl	4230 <sdc_cfg_set>
	if (required_memory < 0) {
   1626c:	2800      	cmp	r0, #0
   1626e:	dbd1      	blt.n	16214 <hci_driver_init+0x18>
	cfg.event_length.event_length_us =
   16270:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16274:	aa01      	add	r2, sp, #4
   16276:	2104      	movs	r1, #4
   16278:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1627a:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1627c:	f7ed ffd8 	bl	4230 <sdc_cfg_set>
	if (required_memory < 0) {
   16280:	2800      	cmp	r0, #0
   16282:	dbc7      	blt.n	16214 <hci_driver_init+0x18>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16284:	aa01      	add	r2, sp, #4
   16286:	2105      	movs	r1, #5
   16288:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1628a:	f88d 5004 	strb.w	r5, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1628e:	f7ed ffcf 	bl	4230 <sdc_cfg_set>
	if (required_memory < 0) {
   16292:	2800      	cmp	r0, #0
   16294:	dbbe      	blt.n	16214 <hci_driver_init+0x18>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   16296:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   16298:	aa01      	add	r2, sp, #4
   1629a:	2107      	movs	r1, #7
   1629c:	2000      	movs	r0, #0
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1629e:	f8ad 3004 	strh.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   162a2:	f7ed ffc5 	bl	4230 <sdc_cfg_set>
		if (required_memory < 0) {
   162a6:	2800      	cmp	r0, #0
   162a8:	dbb4      	blt.n	16214 <hci_driver_init+0x18>
	if (required_memory > sizeof(sdc_mempool)) {
   162aa:	f240 734d 	movw	r3, #1869	; 0x74d
   162ae:	4298      	cmp	r0, r3
   162b0:	dd08      	ble.n	162c4 <hci_driver_init+0xc8>
		k_panic();
   162b2:	4040      	eors	r0, r0
   162b4:	f380 8811 	msr	BASEPRI, r0
   162b8:	f04f 0004 	mov.w	r0, #4
   162bc:	df02      	svc	2
		return -ENOMEM;
   162be:	f06f 000b 	mvn.w	r0, #11
   162c2:	e7a7      	b.n	16214 <hci_driver_init+0x18>
	return 0;
   162c4:	2000      	movs	r0, #0
	if (err) {
   162c6:	e7a5      	b.n	16214 <hci_driver_init+0x18>
   162c8:	0001d928 	.word	0x0001d928
   162cc:	0001c3f7 	.word	0x0001c3f7
   162d0:	02031b1b 	.word	0x02031b1b

000162d4 <rand_prio_low_vector_get>:
{
   162d4:	b538      	push	{r3, r4, r5, lr}
   162d6:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   162d8:	4807      	ldr	r0, [pc, #28]	; (162f8 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   162da:	6883      	ldr	r3, [r0, #8]
   162dc:	685d      	ldr	r5, [r3, #4]
   162de:	460a      	mov	r2, r1
   162e0:	b135      	cbz	r5, 162f0 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   162e2:	2300      	movs	r3, #0
   162e4:	4621      	mov	r1, r4
   162e6:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   162e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   162ec:	b2c0      	uxtb	r0, r0
   162ee:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   162f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   162f4:	e7f8      	b.n	162e8 <rand_prio_low_vector_get+0x14>
   162f6:	bf00      	nop
   162f8:	0001d300 	.word	0x0001d300

000162fc <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   162fc:	4901      	ldr	r1, [pc, #4]	; (16304 <receive_signal_raise+0x8>)
   162fe:	4802      	ldr	r0, [pc, #8]	; (16308 <receive_signal_raise+0xc>)
   16300:	f006 bbf7 	b.w	1caf2 <k_work_submit_to_queue>
   16304:	20001e88 	.word	0x20001e88
   16308:	20001968 	.word	0x20001968

0001630c <rand_prio_low_vector_get_blocking>:
{
   1630c:	b410      	push	{r4}
   1630e:	4603      	mov	r3, r0
   16310:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   16312:	4803      	ldr	r0, [pc, #12]	; (16320 <rand_prio_low_vector_get_blocking+0x14>)
   16314:	6881      	ldr	r1, [r0, #8]
   16316:	680c      	ldr	r4, [r1, #0]
   16318:	4619      	mov	r1, r3
   1631a:	4623      	mov	r3, r4
}
   1631c:	bc10      	pop	{r4}
   1631e:	4718      	bx	r3
   16320:	0001d300 	.word	0x0001d300

00016324 <hci_driver_receive_process>:
{
   16324:	b537      	push	{r0, r1, r2, r4, r5, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   16326:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1632a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1632e:	f7ff ff1b 	bl	16168 <multithreading_lock_acquire>
	if (!errcode) {
   16332:	2800      	cmp	r0, #0
   16334:	d145      	bne.n	163c2 <hci_driver_receive_process+0x9e>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   16336:	4d24      	ldr	r5, [pc, #144]	; (163c8 <hci_driver_receive_process+0xa4>)
   16338:	f10d 0107 	add.w	r1, sp, #7
   1633c:	4628      	mov	r0, r5
   1633e:	f000 fb93 	bl	16a68 <hci_internal_msg_get>
   16342:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   16344:	f7ff ff18 	bl	16178 <multithreading_lock_release>
	if (errcode) {
   16348:	2c00      	cmp	r4, #0
   1634a:	d13a      	bne.n	163c2 <hci_driver_receive_process+0x9e>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1634c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16350:	2b04      	cmp	r3, #4
   16352:	d126      	bne.n	163a2 <hci_driver_receive_process+0x7e>
	switch (hdr->evt) {
   16354:	7828      	ldrb	r0, [r5, #0]
   16356:	283e      	cmp	r0, #62	; 0x3e
   16358:	d019      	beq.n	1638e <hci_driver_receive_process+0x6a>
   1635a:	28ff      	cmp	r0, #255	; 0xff
   1635c:	d01e      	beq.n	1639c <hci_driver_receive_process+0x78>
		switch (subevent) {
   1635e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   16366:	4621      	mov	r1, r4
   16368:	f7fb f9e0 	bl	1172c <bt_buf_get_evt>
	if (!evt_buf) {
   1636c:	4604      	mov	r4, r0
   1636e:	b148      	cbz	r0, 16384 <hci_driver_receive_process+0x60>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   16370:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16372:	4915      	ldr	r1, [pc, #84]	; (163c8 <hci_driver_receive_process+0xa4>)
   16374:	3202      	adds	r2, #2
   16376:	f104 0008 	add.w	r0, r4, #8
   1637a:	f005 fdf5 	bl	1bf68 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1637e:	4620      	mov	r0, r4
   16380:	f7fb fe74 	bl	1206c <bt_recv>
}
   16384:	b003      	add	sp, #12
   16386:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		receive_signal_raise();
   1638a:	f7ff bfb7 	b.w	162fc <receive_signal_raise>
		switch (me->subevent) {
   1638e:	78ab      	ldrb	r3, [r5, #2]
   16390:	2b02      	cmp	r3, #2
		switch (subevent) {
   16392:	d1e4      	bne.n	1635e <hci_driver_receive_process+0x3a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   16394:	2200      	movs	r2, #0
   16396:	2300      	movs	r3, #0
			return true;
   16398:	2401      	movs	r4, #1
   1639a:	e7e4      	b.n	16366 <hci_driver_receive_process+0x42>
		switch (subevent) {
   1639c:	78ab      	ldrb	r3, [r5, #2]
   1639e:	2b80      	cmp	r3, #128	; 0x80
   163a0:	e7f7      	b.n	16392 <hci_driver_receive_process+0x6e>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   163a2:	2b02      	cmp	r3, #2
   163a4:	d10d      	bne.n	163c2 <hci_driver_receive_process+0x9e>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   163a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   163aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   163ae:	2003      	movs	r0, #3
   163b0:	f7fb f992 	bl	116d8 <bt_buf_get_rx>
	if (!data_buf) {
   163b4:	4604      	mov	r4, r0
   163b6:	2800      	cmp	r0, #0
   163b8:	d0e4      	beq.n	16384 <hci_driver_receive_process+0x60>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   163ba:	886a      	ldrh	r2, [r5, #2]
   163bc:	4629      	mov	r1, r5
   163be:	3204      	adds	r2, #4
   163c0:	e7d9      	b.n	16376 <hci_driver_receive_process+0x52>
}
   163c2:	b003      	add	sp, #12
   163c4:	bd30      	pop	{r4, r5, pc}
   163c6:	bf00      	nop
   163c8:	20001f22 	.word	0x20001f22

000163cc <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   163cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   163ce:	4e97      	ldr	r6, [pc, #604]	; (1662c <hci_internal_cmd_put+0x260>)
   163d0:	7833      	ldrb	r3, [r6, #0]
{
   163d2:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   163d4:	2b00      	cmp	r3, #0
   163d6:	f040 8344 	bne.w	16a62 <hci_internal_cmd_put+0x696>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   163da:	2304      	movs	r3, #4
   163dc:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   163e0:	4b93      	ldr	r3, [pc, #588]	; (16630 <hci_internal_cmd_put+0x264>)
   163e2:	8804      	ldrh	r4, [r0, #0]
   163e4:	681f      	ldr	r7, [r3, #0]
   163e6:	b1a7      	cbz	r7, 16412 <hci_internal_cmd_put+0x46>
		status = user_cmd_handler(cmd_in,
   163e8:	f10d 0306 	add.w	r3, sp, #6
   163ec:	f10d 0207 	add.w	r2, sp, #7
   163f0:	1c71      	adds	r1, r6, #1
   163f2:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   163f4:	2801      	cmp	r0, #1
   163f6:	d00c      	beq.n	16412 <hci_internal_cmd_put+0x46>
	if (generate_command_status_event ||
   163f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   163fc:	bbab      	cbnz	r3, 1646a <hci_internal_cmd_put+0x9e>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   163fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   16402:	70b3      	strb	r3, [r6, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   16404:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   16406:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   16408:	7072      	strb	r2, [r6, #1]
	evt_data->ncmd = 1;
   1640a:	70f3      	strb	r3, [r6, #3]
	evt_data->opcode = hci_opcode;
   1640c:	80b4      	strh	r4, [r6, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1640e:	71b0      	strb	r0, [r6, #6]
}
   16410:	e034      	b.n	1647c <hci_internal_cmd_put+0xb0>
		switch (BT_OGF(opcode)) {
   16412:	f5b4 5f10 	cmp.w	r4, #9216	; 0x2400
   16416:	ea4f 2394 	mov.w	r3, r4, lsr #10
   1641a:	d20d      	bcs.n	16438 <hci_internal_cmd_put+0x6c>
   1641c:	b17b      	cbz	r3, 1643e <hci_internal_cmd_put+0x72>
   1641e:	3b01      	subs	r3, #1
   16420:	2b07      	cmp	r3, #7
   16422:	d819      	bhi.n	16458 <hci_internal_cmd_put+0x8c>
   16424:	e8df f013 	tbh	[pc, r3, lsl #1]
   16428:	0018000d 	.word	0x0018000d
   1642c:	0081003f 	.word	0x0081003f
   16430:	00180018 	.word	0x00180018
   16434:	010a0018 	.word	0x010a0018
   16438:	2b3f      	cmp	r3, #63	; 0x3f
   1643a:	f000 8259 	beq.w	168f0 <hci_internal_cmd_put+0x524>
	switch (opcode)	{
   1643e:	2001      	movs	r0, #1
   16440:	e013      	b.n	1646a <hci_internal_cmd_put+0x9e>
	return ((uint16_t)src[1] << 8) | src[0];
   16442:	4628      	mov	r0, r5
	switch (opcode)	{
   16444:	f240 4206 	movw	r2, #1030	; 0x406
   16448:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1644c:	4293      	cmp	r3, r2
   1644e:	d005      	beq.n	1645c <hci_internal_cmd_put+0x90>
   16450:	f240 421d 	movw	r2, #1053	; 0x41d
   16454:	4293      	cmp	r3, r2
   16456:	d016      	beq.n	16486 <hci_internal_cmd_put+0xba>
		switch (BT_OGF(opcode)) {
   16458:	2001      	movs	r0, #1
   1645a:	e001      	b.n	16460 <hci_internal_cmd_put+0x94>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1645c:	f7f6 fa1a 	bl	c894 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   16460:	f240 4306 	movw	r3, #1030	; 0x406
   16464:	429c      	cmp	r4, r3
   16466:	f040 82ef 	bne.w	16a48 <hci_internal_cmd_put+0x67c>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1646a:	230f      	movs	r3, #15
   1646c:	7073      	strb	r3, [r6, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1646e:	2304      	movs	r3, #4
   16470:	70b3      	strb	r3, [r6, #2]
	evt_data->ncmd = 1;
   16472:	2301      	movs	r3, #1
	evt_data->status = status_code;
   16474:	70f0      	strb	r0, [r6, #3]
	evt_data->ncmd = 1;
   16476:	7133      	strb	r3, [r6, #4]
	evt_data->opcode = hci_opcode;
   16478:	f8a6 4005 	strh.w	r4, [r6, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1647c:	2301      	movs	r3, #1
   1647e:	7033      	strb	r3, [r6, #0]
	}

	return 0;
   16480:	2000      	movs	r0, #0
}
   16482:	b003      	add	sp, #12
   16484:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   16486:	f7f6 fa07 	bl	c898 <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   1648a:	f242 030c 	movw	r3, #8204	; 0x200c
   1648e:	429c      	cmp	r4, r3
   16490:	d9e6      	bls.n	16460 <hci_internal_cmd_put+0x94>
   16492:	f5a4 5300 	sub.w	r3, r4, #8192	; 0x2000
   16496:	4a67      	ldr	r2, [pc, #412]	; (16634 <hci_internal_cmd_put+0x268>)
   16498:	3b0d      	subs	r3, #13
   1649a:	b29b      	uxth	r3, r3
   1649c:	fa22 f303 	lsr.w	r3, r2, r3
   164a0:	07db      	lsls	r3, r3, #31
   164a2:	d516      	bpl.n	164d2 <hci_internal_cmd_put+0x106>
   164a4:	e7e1      	b.n	1646a <hci_internal_cmd_put+0x9e>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   164a6:	4628      	mov	r0, r5
	switch (opcode)	{
   164a8:	f640 4263 	movw	r2, #3171	; 0xc63
   164ac:	f930 3b03 	ldrsh.w	r3, [r0], #3
   164b0:	4293      	cmp	r3, r2
   164b2:	d02e      	beq.n	16512 <hci_internal_cmd_put+0x146>
   164b4:	dc10      	bgt.n	164d8 <hci_internal_cmd_put+0x10c>
   164b6:	f640 4203 	movw	r2, #3075	; 0xc03
   164ba:	4293      	cmp	r3, r2
   164bc:	d01d      	beq.n	164fa <hci_internal_cmd_put+0x12e>
   164be:	f640 422d 	movw	r2, #3117	; 0xc2d
   164c2:	4293      	cmp	r3, r2
   164c4:	d01c      	beq.n	16500 <hci_internal_cmd_put+0x134>
   164c6:	f640 4201 	movw	r2, #3073	; 0xc01
   164ca:	4293      	cmp	r3, r2
   164cc:	d1b7      	bne.n	1643e <hci_internal_cmd_put+0x72>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   164ce:	f7f6 f8c9 	bl	c664 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   164d2:	2801      	cmp	r0, #1
   164d4:	d0b3      	beq.n	1643e <hci_internal_cmd_put+0x72>
   164d6:	e792      	b.n	163fe <hci_internal_cmd_put+0x32>
	switch (opcode)	{
   164d8:	f640 427b 	movw	r2, #3195	; 0xc7b
   164dc:	4293      	cmp	r3, r2
   164de:	d01b      	beq.n	16518 <hci_internal_cmd_put+0x14c>
   164e0:	f640 427c 	movw	r2, #3196	; 0xc7c
   164e4:	4293      	cmp	r3, r2
   164e6:	d1aa      	bne.n	1643e <hci_internal_cmd_put+0x72>
		*param_length_out +=
   164e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   164ec:	4952      	ldr	r1, [pc, #328]	; (16638 <hci_internal_cmd_put+0x26c>)
		*param_length_out +=
   164ee:	3302      	adds	r3, #2
   164f0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   164f4:	f7f6 f8c0 	bl	c678 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   164f8:	e7eb      	b.n	164d2 <hci_internal_cmd_put+0x106>
		return sdc_hci_cmd_cb_reset();
   164fa:	f7ee f93b 	bl	4774 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   164fe:	e7e8      	b.n	164d2 <hci_internal_cmd_put+0x106>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   16500:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   16504:	494c      	ldr	r1, [pc, #304]	; (16638 <hci_internal_cmd_put+0x26c>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   16506:	3303      	adds	r3, #3
   16508:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1650c:	f7f6 f8a8 	bl	c660 <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   16510:	e7df      	b.n	164d2 <hci_internal_cmd_put+0x106>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   16512:	f7f6 f8ac 	bl	c66e <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   16516:	e7dc      	b.n	164d2 <hci_internal_cmd_put+0x106>
		*param_length_out +=
   16518:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1651c:	4946      	ldr	r1, [pc, #280]	; (16638 <hci_internal_cmd_put+0x26c>)
		*param_length_out +=
   1651e:	3304      	adds	r3, #4
   16520:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   16524:	f7f6 f89a 	bl	c65c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   16528:	e7d3      	b.n	164d2 <hci_internal_cmd_put+0x106>
	switch (opcode)	{
   1652a:	882b      	ldrh	r3, [r5, #0]
   1652c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   16530:	3b01      	subs	r3, #1
   16532:	2b08      	cmp	r3, #8
   16534:	d883      	bhi.n	1643e <hci_internal_cmd_put+0x72>
   16536:	a201      	add	r2, pc, #4	; (adr r2, 1653c <hci_internal_cmd_put+0x170>)
   16538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1653c:	00016561 	.word	0x00016561
   16540:	00016573 	.word	0x00016573
   16544:	000165fb 	.word	0x000165fb
   16548:	0001643f 	.word	0x0001643f
   1654c:	0001643f 	.word	0x0001643f
   16550:	0001643f 	.word	0x0001643f
   16554:	0001643f 	.word	0x0001643f
   16558:	0001643f 	.word	0x0001643f
   1655c:	0001661b 	.word	0x0001661b
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   16560:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   16564:	4834      	ldr	r0, [pc, #208]	; (16638 <hci_internal_cmd_put+0x26c>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   16566:	3308      	adds	r3, #8
   16568:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1656c:	f7f6 f953 	bl	c816 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   16570:	e7af      	b.n	164d2 <hci_internal_cmd_put+0x106>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   16572:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   16576:	4830      	ldr	r0, [pc, #192]	; (16638 <hci_internal_cmd_put+0x26c>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   16578:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1657a:	222f      	movs	r2, #47	; 0x2f
   1657c:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1657e:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   16582:	f006 fe3c 	bl	1d1fe <memset>
	cmds->hci_disconnect = 1;
   16586:	2320      	movs	r3, #32
   16588:	71f3      	strb	r3, [r6, #7]
	cmds->hci_read_remote_version_information = 1;
   1658a:	2380      	movs	r3, #128	; 0x80
   1658c:	7273      	strb	r3, [r6, #9]
	cmds->hci_set_event_mask = 1;
   1658e:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   16592:	7333      	strb	r3, [r6, #12]
	cmds->hci_read_transmit_power_level = 1;
   16594:	2304      	movs	r3, #4
   16596:	7473      	strb	r3, [r6, #17]
	cmds->hci_read_local_version_information = 1;
   16598:	2328      	movs	r3, #40	; 0x28
   1659a:	7573      	strb	r3, [r6, #21]
	cmds->hci_read_bd_addr = 1;
   1659c:	2302      	movs	r3, #2
   1659e:	75b3      	strb	r3, [r6, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   165a0:	2304      	movs	r3, #4
   165a2:	7773      	strb	r3, [r6, #29]
	cmds->hci_le_set_event_mask = 1;
   165a4:	f06f 0308 	mvn.w	r3, #8
   165a8:	f886 3020 	strb.w	r3, [r6, #32]
	cmds->hci_le_set_scan_response_data = 1;
   165ac:	f06f 033c 	mvn.w	r3, #60	; 0x3c
   165b0:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   165b4:	f06f 030c 	mvn.w	r3, #12
   165b8:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   165bc:	237e      	movs	r3, #126	; 0x7e
   165be:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   165c2:	2330      	movs	r3, #48	; 0x30
   165c4:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   165c8:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   165cc:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   165d0:	2307      	movs	r3, #7
   165d2:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   165d6:	f06f 0307 	mvn.w	r3, #7
   165da:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   165de:	2301      	movs	r3, #1
   165e0:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   165e4:	2380      	movs	r3, #128	; 0x80
   165e6:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   165ea:	2304      	movs	r3, #4
   165ec:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   165f0:	2340      	movs	r3, #64	; 0x40
   165f2:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
		return 0;
   165f6:	2000      	movs	r0, #0
   165f8:	e701      	b.n	163fe <hci_internal_cmd_put+0x32>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   165fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   165fe:	3308      	adds	r3, #8
   16600:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   16604:	4b0c      	ldr	r3, [pc, #48]	; (16638 <hci_internal_cmd_put+0x26c>)
   16606:	2200      	movs	r2, #0
   16608:	601a      	str	r2, [r3, #0]
   1660a:	605a      	str	r2, [r3, #4]
	features->bdedr_not_supported = 1;
   1660c:	7af3      	ldrb	r3, [r6, #11]
   1660e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   16612:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   16616:	72f3      	strb	r3, [r6, #11]
	if (generate_command_status_event ||
   16618:	e7ed      	b.n	165f6 <hci_internal_cmd_put+0x22a>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1661a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1661e:	4806      	ldr	r0, [pc, #24]	; (16638 <hci_internal_cmd_put+0x26c>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   16620:	3306      	adds	r3, #6
   16622:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   16626:	f7f6 f8f4 	bl	c812 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   1662a:	e752      	b.n	164d2 <hci_internal_cmd_put+0x106>
   1662c:	200026b5 	.word	0x200026b5
   16630:	20001e98 	.word	0x20001e98
   16634:	03001241 	.word	0x03001241
   16638:	200026bc 	.word	0x200026bc
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1663c:	4628      	mov	r0, r5
	switch (opcode)	{
   1663e:	f242 014b 	movw	r1, #8267	; 0x204b
   16642:	f830 3b03 	ldrh.w	r3, [r0], #3
   16646:	b21a      	sxth	r2, r3
   16648:	428a      	cmp	r2, r1
   1664a:	dc56      	bgt.n	166fa <hci_internal_cmd_put+0x32e>
   1664c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   16650:	f242 0526 	movw	r5, #8230	; 0x2026
   16654:	dd5c      	ble.n	16710 <hci_internal_cmd_put+0x344>
   16656:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1665a:	3b01      	subs	r3, #1
   1665c:	2b4a      	cmp	r3, #74	; 0x4a
   1665e:	d857      	bhi.n	16710 <hci_internal_cmd_put+0x344>
   16660:	e8df f013 	tbh	[pc, r3, lsl #1]
   16664:	0061005d 	.word	0x0061005d
   16668:	00560084 	.word	0x00560084
   1666c:	00a300a0 	.word	0x00a300a0
   16670:	00af00a6 	.word	0x00af00a6
   16674:	00b500b2 	.word	0x00b500b2
   16678:	00560056 	.word	0x00560056
   1667c:	00560056 	.word	0x00560056
   16680:	00c400bb 	.word	0x00c400bb
   16684:	00ca00c7 	.word	0x00ca00c7
   16688:	00560056 	.word	0x00560056
   1668c:	00d600cd 	.word	0x00d600cd
   16690:	00e200d9 	.word	0x00e200d9
   16694:	00eb0056 	.word	0x00eb0056
   16698:	00fd00f4 	.word	0x00fd00f4
   1669c:	00560056 	.word	0x00560056
   166a0:	00560056 	.word	0x00560056
   166a4:	01070056 	.word	0x01070056
   166a8:	01190110 	.word	0x01190110
   166ac:	011f011c 	.word	0x011f011c
   166b0:	00560056 	.word	0x00560056
   166b4:	00560056 	.word	0x00560056
   166b8:	00560056 	.word	0x00560056
   166bc:	00560056 	.word	0x00560056
   166c0:	012e0125 	.word	0x012e0125
   166c4:	013a0137 	.word	0x013a0137
   166c8:	00560056 	.word	0x00560056
   166cc:	00560056 	.word	0x00560056
   166d0:	00560056 	.word	0x00560056
   166d4:	00560056 	.word	0x00560056
   166d8:	00560056 	.word	0x00560056
   166dc:	00560056 	.word	0x00560056
   166e0:	00560056 	.word	0x00560056
   166e4:	00560056 	.word	0x00560056
   166e8:	00560056 	.word	0x00560056
   166ec:	00560056 	.word	0x00560056
   166f0:	00560056 	.word	0x00560056
   166f4:	00560056 	.word	0x00560056
   166f8:	013d      	.short	0x013d
   166fa:	f242 035e 	movw	r3, #8286	; 0x205e
   166fe:	429a      	cmp	r2, r3
   16700:	f242 0526 	movw	r5, #8230	; 0x2026
   16704:	f000 80d0 	beq.w	168a8 <hci_internal_cmd_put+0x4dc>
   16708:	f242 037c 	movw	r3, #8316	; 0x207c
   1670c:	429a      	cmp	r2, r3
   1670e:	d061      	beq.n	167d4 <hci_internal_cmd_put+0x408>
	switch (hci_opcode) {
   16710:	42ac      	cmp	r4, r5
   16712:	f200 81a2 	bhi.w	16a5a <hci_internal_cmd_put+0x68e>
   16716:	f242 030c 	movw	r3, #8204	; 0x200c
   1671a:	2001      	movs	r0, #1
   1671c:	e191      	b.n	16a42 <hci_internal_cmd_put+0x676>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1671e:	f7f6 f8ac 	bl	c87a <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   16722:	42ac      	cmp	r4, r5
   16724:	e00a      	b.n	1673c <hci_internal_cmd_put+0x370>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   16726:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1672a:	48c3      	ldr	r0, [pc, #780]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1672c:	3303      	adds	r3, #3
   1672e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   16732:	f7f6 f884 	bl	c83e <sdc_hci_cmd_le_read_buffer_size>
	switch (hci_opcode) {
   16736:	f242 0326 	movw	r3, #8230	; 0x2026
   1673a:	429c      	cmp	r4, r3
   1673c:	f240 818a 	bls.w	16a54 <hci_internal_cmd_put+0x688>
   16740:	f242 0377 	movw	r3, #8311	; 0x2077
   16744:	429c      	cmp	r4, r3
   16746:	f43f ae90 	beq.w	1646a <hci_internal_cmd_put+0x9e>
   1674a:	f242 0377 	movw	r3, #8311	; 0x2077
   1674e:	429c      	cmp	r4, r3
   16750:	f200 8113 	bhi.w	1697a <hci_internal_cmd_put+0x5ae>
   16754:	f242 0332 	movw	r3, #8242	; 0x2032
   16758:	429c      	cmp	r4, r3
   1675a:	f43f ae86 	beq.w	1646a <hci_internal_cmd_put+0x9e>
   1675e:	f5a4 5301 	sub.w	r3, r4, #8256	; 0x2040
   16762:	3b03      	subs	r3, #3
   16764:	2b01      	cmp	r3, #1
   16766:	f63f aeb4 	bhi.w	164d2 <hci_internal_cmd_put+0x106>
   1676a:	e67e      	b.n	1646a <hci_internal_cmd_put+0x9e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1676c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16770:	3308      	adds	r3, #8
   16772:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   16776:	4bb0      	ldr	r3, [pc, #704]	; (16a38 <hci_internal_cmd_put+0x66c>)
   16778:	2200      	movs	r2, #0
   1677a:	601a      	str	r2, [r3, #0]
   1677c:	711a      	strb	r2, [r3, #4]
	features->le_encryption = 1;
   1677e:	79f3      	ldrb	r3, [r6, #7]
   16780:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   16784:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   16788:	71f3      	strb	r3, [r6, #7]
	features->le_2m_phy = 1;
   1678a:	7a33      	ldrb	r3, [r6, #8]
   1678c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   16790:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   16794:	7233      	strb	r3, [r6, #8]
	switch (hci_opcode) {
   16796:	f242 0326 	movw	r3, #8230	; 0x2026
   1679a:	429c      	cmp	r4, r3
   1679c:	f240 814e 	bls.w	16a3c <hci_internal_cmd_put+0x670>
		return 0;
   167a0:	2000      	movs	r0, #0
   167a2:	e7cd      	b.n	16740 <hci_internal_cmd_put+0x374>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   167a4:	f7f6 f870 	bl	c888 <sdc_hci_cmd_le_set_random_address>
	switch (hci_opcode) {
   167a8:	e7bb      	b.n	16722 <hci_internal_cmd_put+0x356>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   167aa:	f7f6 f85e 	bl	c86a <sdc_hci_cmd_le_set_adv_params>
	switch (hci_opcode) {
   167ae:	e7b8      	b.n	16722 <hci_internal_cmd_put+0x356>
		*param_length_out +=
   167b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   167b4:	48a0      	ldr	r0, [pc, #640]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out +=
   167b6:	3301      	adds	r3, #1
   167b8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   167bc:	f7f6 f83d 	bl	c83a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
	switch (hci_opcode) {
   167c0:	e7b9      	b.n	16736 <hci_internal_cmd_put+0x36a>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   167c2:	f7f6 f84e 	bl	c862 <sdc_hci_cmd_le_set_adv_data>
	switch (hci_opcode) {
   167c6:	e7ac      	b.n	16722 <hci_internal_cmd_put+0x356>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   167c8:	f7f6 f860 	bl	c88c <sdc_hci_cmd_le_set_scan_response_data>
	switch (hci_opcode) {
   167cc:	e7a9      	b.n	16722 <hci_internal_cmd_put+0x356>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   167ce:	f7f6 f84a 	bl	c866 <sdc_hci_cmd_le_set_adv_enable>
	switch (hci_opcode) {
   167d2:	e7a6      	b.n	16722 <hci_internal_cmd_put+0x356>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   167d4:	f7f6 f84d 	bl	c872 <sdc_hci_cmd_le_set_data_related_address_changes>
	switch (hci_opcode) {
   167d8:	e7a3      	b.n	16722 <hci_internal_cmd_put+0x356>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   167da:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   167de:	4896      	ldr	r0, [pc, #600]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   167e0:	3301      	adds	r3, #1
   167e2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   167e6:	f7f6 f82e 	bl	c846 <sdc_hci_cmd_le_read_filter_accept_list_size>
	switch (hci_opcode) {
   167ea:	e7a4      	b.n	16736 <hci_internal_cmd_put+0x36a>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   167ec:	f7f6 f817 	bl	c81e <sdc_hci_cmd_le_clear_filter_accept_list>
	switch (hci_opcode) {
   167f0:	e797      	b.n	16722 <hci_internal_cmd_put+0x356>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   167f2:	f7f6 f812 	bl	c81a <sdc_hci_cmd_le_add_device_to_filter_accept_list>
	switch (hci_opcode) {
   167f6:	e794      	b.n	16722 <hci_internal_cmd_put+0x356>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   167f8:	f7f6 f831 	bl	c85e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   167fc:	e791      	b.n	16722 <hci_internal_cmd_put+0x356>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   167fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   16802:	498d      	ldr	r1, [pc, #564]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   16804:	3307      	adds	r3, #7
   16806:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1680a:	f7f6 f81a 	bl	c842 <sdc_hci_cmd_le_read_channel_map>
	switch (hci_opcode) {
   1680e:	e792      	b.n	16736 <hci_internal_cmd_put+0x36a>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   16810:	f7f6 f81f 	bl	c852 <sdc_hci_cmd_le_read_remote_features>
	switch (hci_opcode) {
   16814:	e785      	b.n	16722 <hci_internal_cmd_put+0x356>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   16816:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1681a:	4987      	ldr	r1, [pc, #540]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1681c:	3310      	adds	r3, #16
   1681e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   16822:	f7f5 fffe 	bl	c822 <sdc_hci_cmd_le_encrypt>
	switch (hci_opcode) {
   16826:	e786      	b.n	16736 <hci_internal_cmd_put+0x36a>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   16828:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1682c:	4882      	ldr	r0, [pc, #520]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1682e:	3308      	adds	r3, #8
   16830:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   16834:	f7f5 ffff 	bl	c836 <sdc_hci_cmd_le_rand>
	switch (hci_opcode) {
   16838:	e77d      	b.n	16736 <hci_internal_cmd_put+0x36a>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1683a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1683e:	497e      	ldr	r1, [pc, #504]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   16840:	3302      	adds	r3, #2
   16842:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   16846:	f7f5 fff2 	bl	c82e <sdc_hci_cmd_le_long_term_key_request_reply>
	switch (hci_opcode) {
   1684a:	e774      	b.n	16736 <hci_internal_cmd_put+0x36a>
		*param_length_out +=
   1684c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   16850:	4979      	ldr	r1, [pc, #484]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out +=
   16852:	3302      	adds	r3, #2
   16854:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   16858:	f7f5 ffe5 	bl	c826 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
	switch (hci_opcode) {
   1685c:	e76b      	b.n	16736 <hci_internal_cmd_put+0x36a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1685e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16862:	3308      	adds	r3, #8
   16864:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   16868:	238f      	movs	r3, #143	; 0x8f
   1686a:	71f3      	strb	r3, [r6, #7]
	*(buf + 4) = states2;
   1686c:	23c0      	movs	r3, #192	; 0xc0
   1686e:	72f3      	strb	r3, [r6, #11]
   16870:	e791      	b.n	16796 <hci_internal_cmd_put+0x3ca>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   16872:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   16876:	4970      	ldr	r1, [pc, #448]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   16878:	3302      	adds	r3, #2
   1687a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1687e:	f7f5 fff6 	bl	c86e <sdc_hci_cmd_le_set_data_length>
	switch (hci_opcode) {
   16882:	e758      	b.n	16736 <hci_internal_cmd_put+0x36a>
		*param_length_out +=
   16884:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   16888:	486b      	ldr	r0, [pc, #428]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out +=
   1688a:	3304      	adds	r3, #4
   1688c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   16890:	f7f5 ffe1 	bl	c856 <sdc_hci_cmd_le_read_suggested_default_data_length>
	switch (hci_opcode) {
   16894:	e74f      	b.n	16736 <hci_internal_cmd_put+0x36a>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   16896:	f7f5 fffb 	bl	c890 <sdc_hci_cmd_le_write_suggested_default_data_length>
	switch (hci_opcode) {
   1689a:	e742      	b.n	16722 <hci_internal_cmd_put+0x356>
		return hci_cmd_le_read_local_p256_public_key();
   1689c:	f000 fa1e 	bl	16cdc <hci_cmd_le_read_local_p256_public_key>
	switch (hci_opcode) {
   168a0:	e73f      	b.n	16722 <hci_internal_cmd_put+0x356>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   168a2:	f005 fe05 	bl	1c4b0 <hci_cmd_le_generate_dhkey>
	switch (hci_opcode) {
   168a6:	e73c      	b.n	16722 <hci_internal_cmd_put+0x356>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   168a8:	f005 fe05 	bl	1c4b6 <hci_cmd_le_generate_dhkey_v2>
	switch (hci_opcode) {
   168ac:	e739      	b.n	16722 <hci_internal_cmd_put+0x356>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   168ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   168b2:	4861      	ldr	r0, [pc, #388]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   168b4:	3308      	adds	r3, #8
   168b6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   168ba:	f7f5 ffc6 	bl	c84a <sdc_hci_cmd_le_read_max_data_length>
	switch (hci_opcode) {
   168be:	e73a      	b.n	16736 <hci_internal_cmd_put+0x36a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   168c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   168c4:	495c      	ldr	r1, [pc, #368]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   168c6:	3304      	adds	r3, #4
   168c8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   168cc:	f7f5 ffbf 	bl	c84e <sdc_hci_cmd_le_read_phy>
	switch (hci_opcode) {
   168d0:	e731      	b.n	16736 <hci_internal_cmd_put+0x36a>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   168d2:	f7f5 ffd0 	bl	c876 <sdc_hci_cmd_le_set_default_phy>
	switch (hci_opcode) {
   168d6:	e724      	b.n	16722 <hci_internal_cmd_put+0x356>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   168d8:	f7f5 ffd4 	bl	c884 <sdc_hci_cmd_le_set_phy>
	switch (hci_opcode) {
   168dc:	e721      	b.n	16722 <hci_internal_cmd_put+0x356>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   168de:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   168e2:	4855      	ldr	r0, [pc, #340]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   168e4:	3302      	adds	r3, #2
   168e6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   168ea:	f7f5 ffb6 	bl	c85a <sdc_hci_cmd_le_read_transmit_power>
	switch (hci_opcode) {
   168ee:	e722      	b.n	16736 <hci_internal_cmd_put+0x36a>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   168f0:	4628      	mov	r0, r5
	switch (opcode)	{
   168f2:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   168f6:	f830 3b03 	ldrh.w	r3, [r0], #3
   168fa:	4293      	cmp	r3, r2
   168fc:	d822      	bhi.n	16944 <hci_internal_cmd_put+0x578>
   168fe:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   16902:	d801      	bhi.n	16908 <hci_internal_cmd_put+0x53c>
   16904:	2001      	movs	r0, #1
   16906:	e038      	b.n	1697a <hci_internal_cmd_put+0x5ae>
   16908:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1690c:	3b01      	subs	r3, #1
   1690e:	2b0a      	cmp	r3, #10
   16910:	d8f8      	bhi.n	16904 <hci_internal_cmd_put+0x538>
   16912:	a201      	add	r2, pc, #4	; (adr r2, 16918 <hci_internal_cmd_put+0x54c>)
   16914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16918:	0001696b 	.word	0x0001696b
   1691c:	00016987 	.word	0x00016987
   16920:	00016905 	.word	0x00016905
   16924:	00016905 	.word	0x00016905
   16928:	00016905 	.word	0x00016905
   1692c:	000169d7 	.word	0x000169d7
   16930:	00016905 	.word	0x00016905
   16934:	00016905 	.word	0x00016905
   16938:	000169b3 	.word	0x000169b3
   1693c:	000169c5 	.word	0x000169c5
   16940:	000169dd 	.word	0x000169dd
   16944:	f503 7240 	add.w	r2, r3, #768	; 0x300
   16948:	b292      	uxth	r2, r2
   1694a:	2a0c      	cmp	r2, #12
   1694c:	d8da      	bhi.n	16904 <hci_internal_cmd_put+0x538>
   1694e:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   16952:	2b0c      	cmp	r3, #12
   16954:	f200 8083 	bhi.w	16a5e <hci_internal_cmd_put+0x692>
   16958:	e8df f003 	tbb	[pc, r3]
   1695c:	5e5b5849 	.word	0x5e5b5849
   16960:	81816461 	.word	0x81816461
   16964:	81816781 	.word	0x81816781
   16968:	6a          	.byte	0x6a
   16969:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1696a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1696e:	4832      	ldr	r0, [pc, #200]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   16970:	330c      	adds	r3, #12
   16972:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   16976:	f7ed ff11 	bl	479c <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   1697a:	f024 0308 	bic.w	r3, r4, #8
   1697e:	f64f 5202 	movw	r2, #64770	; 0xfd02
   16982:	4293      	cmp	r3, r2
   16984:	e063      	b.n	16a4e <hci_internal_cmd_put+0x682>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   16986:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1698a:	3340      	adds	r3, #64	; 0x40
   1698c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   16990:	4b29      	ldr	r3, [pc, #164]	; (16a38 <hci_internal_cmd_put+0x66c>)
   16992:	2200      	movs	r2, #0
   16994:	801a      	strh	r2, [r3, #0]
	cmds->read_version_info = 1;
   16996:	79f3      	ldrb	r3, [r6, #7]
   16998:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1699c:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   169a0:	71f3      	strb	r3, [r6, #7]
	cmds->read_static_addresses = 1;
   169a2:	7a33      	ldrb	r3, [r6, #8]
   169a4:	f023 0307 	bic.w	r3, r3, #7
   169a8:	f043 0307 	orr.w	r3, r3, #7
   169ac:	7233      	strb	r3, [r6, #8]
		return 0;
   169ae:	2000      	movs	r0, #0
   169b0:	e7e3      	b.n	1697a <hci_internal_cmd_put+0x5ae>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   169b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   169b6:	4820      	ldr	r0, [pc, #128]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   169b8:	3317      	adds	r3, #23
   169ba:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   169be:	f7f5 fed7 	bl	c770 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   169c2:	e7da      	b.n	1697a <hci_internal_cmd_put+0x5ae>
		*param_length_out +=
   169c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   169c8:	481b      	ldr	r0, [pc, #108]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out +=
   169ca:	3320      	adds	r3, #32
   169cc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   169d0:	f7f5 fe81 	bl	c6d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   169d4:	e7d1      	b.n	1697a <hci_internal_cmd_put+0x5ae>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   169d6:	f7f5 ff1a 	bl	c80e <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   169da:	e7ce      	b.n	1697a <hci_internal_cmd_put+0x5ae>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   169dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   169e0:	4815      	ldr	r0, [pc, #84]	; (16a38 <hci_internal_cmd_put+0x66c>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   169e2:	3301      	adds	r3, #1
   169e4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   169e8:	f7f5 fe61 	bl	c6ae <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   169ec:	e7c5      	b.n	1697a <hci_internal_cmd_put+0x5ae>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   169ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   169f2:	3340      	adds	r3, #64	; 0x40
   169f4:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   169f8:	4b0f      	ldr	r3, [pc, #60]	; (16a38 <hci_internal_cmd_put+0x66c>)
   169fa:	2200      	movs	r2, #0
   169fc:	801a      	strh	r2, [r3, #0]
	cmds->read_supported_vs_commands = 1;
   169fe:	79f3      	ldrb	r3, [r6, #7]
   16a00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   16a04:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   16a08:	71f3      	strb	r3, [r6, #7]
}
   16a0a:	e7d0      	b.n	169ae <hci_internal_cmd_put+0x5e2>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   16a0c:	f7f5 fe42 	bl	c694 <sdc_hci_cmd_vs_llpm_mode_set>
   16a10:	e7b3      	b.n	1697a <hci_internal_cmd_put+0x5ae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   16a12:	f7f5 fe3b 	bl	c68c <sdc_hci_cmd_vs_conn_update>
   16a16:	e7b0      	b.n	1697a <hci_internal_cmd_put+0x5ae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   16a18:	f7f5 fe30 	bl	c67c <sdc_hci_cmd_vs_conn_event_extend>
   16a1c:	e7ad      	b.n	1697a <hci_internal_cmd_put+0x5ae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   16a1e:	f7f5 fe3f 	bl	c6a0 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   16a22:	e7aa      	b.n	1697a <hci_internal_cmd_put+0x5ae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   16a24:	f7f5 fe34 	bl	c690 <sdc_hci_cmd_vs_event_length_set>
   16a28:	e7a7      	b.n	1697a <hci_internal_cmd_put+0x5ae>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   16a2a:	f7f5 fe35 	bl	c698 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   16a2e:	e7a4      	b.n	1697a <hci_internal_cmd_put+0x5ae>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   16a30:	f7f5 fe3b 	bl	c6aa <sdc_hci_cmd_vs_set_adv_randomness>
   16a34:	e7a1      	b.n	1697a <hci_internal_cmd_put+0x5ae>
   16a36:	bf00      	nop
   16a38:	200026bc 	.word	0x200026bc
	switch (hci_opcode) {
   16a3c:	f242 030c 	movw	r3, #8204	; 0x200c
		return 0;
   16a40:	2000      	movs	r0, #0
	switch (hci_opcode) {
   16a42:	429c      	cmp	r4, r3
   16a44:	f63f ad25 	bhi.w	16492 <hci_internal_cmd_put+0xc6>
   16a48:	f240 431d 	movw	r3, #1053	; 0x41d
   16a4c:	429c      	cmp	r4, r3
   16a4e:	f47f ad40 	bne.w	164d2 <hci_internal_cmd_put+0x106>
   16a52:	e50a      	b.n	1646a <hci_internal_cmd_put+0x9e>
   16a54:	f242 030c 	movw	r3, #8204	; 0x200c
   16a58:	e7f3      	b.n	16a42 <hci_internal_cmd_put+0x676>
   16a5a:	2001      	movs	r0, #1
   16a5c:	e670      	b.n	16740 <hci_internal_cmd_put+0x374>
	switch (opcode)	{
   16a5e:	2001      	movs	r0, #1
   16a60:	e673      	b.n	1674a <hci_internal_cmd_put+0x37e>
		return -NRF_EPERM;
   16a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16a66:	e50c      	b.n	16482 <hci_internal_cmd_put+0xb6>

00016a68 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   16a68:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   16a6a:	4c09      	ldr	r4, [pc, #36]	; (16a90 <hci_internal_msg_get+0x28>)
   16a6c:	7823      	ldrb	r3, [r4, #0]
{
   16a6e:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   16a70:	b91b      	cbnz	r3, 16a7a <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   16a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   16a76:	f7f5 bde1 	b.w	c63c <sdc_hci_get>
		memcpy(msg_out,
   16a7a:	78a2      	ldrb	r2, [r4, #2]
   16a7c:	1c61      	adds	r1, r4, #1
   16a7e:	3202      	adds	r2, #2
   16a80:	f006 fbaf 	bl	1d1e2 <memcpy>
		cmd_complete_or_status.occurred = false;
   16a84:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   16a86:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   16a88:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   16a8a:	702b      	strb	r3, [r5, #0]
}
   16a8c:	bd38      	pop	{r3, r4, r5, pc}
   16a8e:	bf00      	nop
   16a90:	200026b5 	.word	0x200026b5

00016a94 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   16a94:	b570      	push	{r4, r5, r6, lr}
   16a96:	4605      	mov	r5, r0
   16a98:	460e      	mov	r6, r1
   16a9a:	4c08      	ldr	r4, [pc, #32]	; (16abc <bt_rand+0x28>)
   16a9c:	4620      	mov	r0, r4
   16a9e:	f005 fdb8 	bl	1c612 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   16aa2:	b138      	cbz	r0, 16ab4 <bt_rand+0x20>
   16aa4:	68a3      	ldr	r3, [r4, #8]
   16aa6:	b2b2      	uxth	r2, r6
   16aa8:	4629      	mov	r1, r5
   16aaa:	4620      	mov	r0, r4
   16aac:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   16aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16ab2:	4718      	bx	r3
   16ab4:	f06f 0012 	mvn.w	r0, #18
   16ab8:	bd70      	pop	{r4, r5, r6, pc}
   16aba:	bf00      	nop
   16abc:	0001d300 	.word	0x0001d300

00016ac0 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   16ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   16ac2:	4d1c      	ldr	r5, [pc, #112]	; (16b34 <ecdh_p256_common_secret+0x74>)
   16ac4:	491c      	ldr	r1, [pc, #112]	; (16b38 <ecdh_p256_common_secret+0x78>)
   16ac6:	f105 0220 	add.w	r2, r5, #32
   16aca:	2800      	cmp	r0, #0
   16acc:	bf08      	it	eq
   16ace:	4629      	moveq	r1, r5
   16ad0:	4610      	mov	r0, r2
   16ad2:	f002 fa2b 	bl	18f2c <ocrypto_ecdh_p256_common_secret>
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   16ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	return 0;
   16ada:	2800      	cmp	r0, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   16adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16ae0:	f04f 0001 	mov.w	r0, #1
	return 0;
   16ae4:	bf14      	ite	ne
   16ae6:	2712      	movne	r7, #18
   16ae8:	2700      	moveq	r7, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   16aea:	f7fa fdf5 	bl	116d8 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   16aee:	f100 0608 	add.w	r6, r0, #8
   16af2:	2102      	movs	r1, #2
   16af4:	4604      	mov	r4, r0
   16af6:	4630      	mov	r0, r6
   16af8:	f005 fa30 	bl	1bf5c <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   16afc:	233e      	movs	r3, #62	; 0x3e
   16afe:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   16b00:	2322      	movs	r3, #34	; 0x22
   16b02:	7043      	strb	r3, [r0, #1]
   16b04:	2101      	movs	r1, #1
   16b06:	4630      	mov	r0, r6
   16b08:	f005 fa28 	bl	1bf5c <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   16b0c:	2309      	movs	r3, #9
   16b0e:	7003      	strb	r3, [r0, #0]
   16b10:	2121      	movs	r1, #33	; 0x21
   16b12:	4630      	mov	r0, r6
   16b14:	f005 fa22 	bl	1bf5c <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   16b18:	f800 7b01 	strb.w	r7, [r0], #1

	if (status) {
   16b1c:	b12f      	cbz	r7, 16b2a <ecdh_p256_common_secret+0x6a>
__ssp_bos_icheck3(memset, void *, int)
   16b1e:	2220      	movs	r2, #32
   16b20:	21ff      	movs	r1, #255	; 0xff
   16b22:	f006 fb6c 	bl	1d1fe <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   16b26:	4620      	mov	r0, r4
   16b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   16b2a:	f105 0120 	add.w	r1, r5, #32
   16b2e:	f005 fcb5 	bl	1c49c <sys_memcpy_swap.constprop.0>
   16b32:	e7f8      	b.n	16b26 <ecdh_p256_common_secret+0x66>
   16b34:	200026fc 	.word	0x200026fc
   16b38:	0001dd7b 	.word	0x0001dd7b

00016b3c <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   16b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16b3e:	4b3b      	ldr	r3, [pc, #236]	; (16c2c <ecdh_cmd_process+0xf0>)
   16b40:	f3bf 8f5b 	dmb	ish
   16b44:	681a      	ldr	r2, [r3, #0]
   16b46:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   16b4a:	2a02      	cmp	r2, #2
   16b4c:	461f      	mov	r7, r3
   16b4e:	d065      	beq.n	16c1c <ecdh_cmd_process+0xe0>
   16b50:	2a04      	cmp	r2, #4
   16b52:	d068      	beq.n	16c26 <ecdh_cmd_process+0xea>
   16b54:	2a01      	cmp	r2, #1
   16b56:	d14a      	bne.n	16bee <ecdh_cmd_process+0xb2>
		err = bt_rand(ecdh.private_key_be, 32);
   16b58:	4c35      	ldr	r4, [pc, #212]	; (16c30 <ecdh_cmd_process+0xf4>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   16b5a:	4e36      	ldr	r6, [pc, #216]	; (16c34 <ecdh_cmd_process+0xf8>)
		err = bt_rand(ecdh.private_key_be, 32);
   16b5c:	2120      	movs	r1, #32
   16b5e:	4620      	mov	r0, r4
   16b60:	f7ff ff98 	bl	16a94 <bt_rand>
		if (err) {
   16b64:	2800      	cmp	r0, #0
   16b66:	d14e      	bne.n	16c06 <ecdh_cmd_process+0xca>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   16b68:	2220      	movs	r2, #32
   16b6a:	4631      	mov	r1, r6
   16b6c:	4620      	mov	r0, r4
   16b6e:	f006 fb28 	bl	1d1c2 <memcmp>
   16b72:	2800      	cmp	r0, #0
   16b74:	d0f2      	beq.n	16b5c <ecdh_cmd_process+0x20>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   16b76:	4830      	ldr	r0, [pc, #192]	; (16c38 <ecdh_cmd_process+0xfc>)
   16b78:	4621      	mov	r1, r4
   16b7a:	f002 f9c3 	bl	18f04 <ocrypto_ecdh_p256_public_key>
	} while (err);
   16b7e:	4605      	mov	r5, r0
   16b80:	2800      	cmp	r0, #0
   16b82:	d1eb      	bne.n	16b5c <ecdh_cmd_process+0x20>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   16b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16b8c:	2001      	movs	r0, #1
   16b8e:	f7fa fda3 	bl	116d8 <bt_buf_get_rx>
   16b92:	f100 0608 	add.w	r6, r0, #8
   16b96:	2102      	movs	r1, #2
   16b98:	4604      	mov	r4, r0
   16b9a:	4630      	mov	r0, r6
   16b9c:	f005 f9de 	bl	1bf5c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   16ba0:	233e      	movs	r3, #62	; 0x3e
   16ba2:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   16ba4:	2342      	movs	r3, #66	; 0x42
   16ba6:	7043      	strb	r3, [r0, #1]
   16ba8:	2101      	movs	r1, #1
   16baa:	4630      	mov	r0, r6
   16bac:	f005 f9d6 	bl	1bf5c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   16bb0:	2308      	movs	r3, #8
   16bb2:	7003      	strb	r3, [r0, #0]
   16bb4:	2141      	movs	r1, #65	; 0x41
   16bb6:	4630      	mov	r0, r6
   16bb8:	f005 f9d0 	bl	1bf5c <net_buf_simple_add>
   16bbc:	4606      	mov	r6, r0
	evt->status = status;
   16bbe:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   16bc2:	b315      	cbz	r5, 16c0a <ecdh_cmd_process+0xce>
   16bc4:	2240      	movs	r2, #64	; 0x40
   16bc6:	2100      	movs	r1, #0
   16bc8:	f006 fb19 	bl	1d1fe <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16bcc:	f3bf 8f5b 	dmb	ish
   16bd0:	2300      	movs	r3, #0
   16bd2:	e857 2f00 	ldrex	r2, [r7]
   16bd6:	e847 3100 	strex	r1, r3, [r7]
   16bda:	2900      	cmp	r1, #0
   16bdc:	d1f9      	bne.n	16bd2 <ecdh_cmd_process+0x96>
   16bde:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   16be2:	b17c      	cbz	r4, 16c04 <ecdh_cmd_process+0xc8>
		bt_recv(buf);
   16be4:	4620      	mov	r0, r4
	}
}
   16be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   16bea:	f7fb ba3f 	b.w	1206c <bt_recv>
   16bee:	2200      	movs	r2, #0
   16bf0:	f3bf 8f5b 	dmb	ish
   16bf4:	e853 1f00 	ldrex	r1, [r3]
   16bf8:	e843 2000 	strex	r0, r2, [r3]
   16bfc:	2800      	cmp	r0, #0
   16bfe:	d1f9      	bne.n	16bf4 <ecdh_cmd_process+0xb8>
   16c00:	f3bf 8f5b 	dmb	ish
}
   16c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BT_HCI_ERR_UNSPECIFIED;
   16c06:	251f      	movs	r5, #31
   16c08:	e7bc      	b.n	16b84 <ecdh_cmd_process+0x48>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   16c0a:	490b      	ldr	r1, [pc, #44]	; (16c38 <ecdh_cmd_process+0xfc>)
   16c0c:	f005 fc46 	bl	1c49c <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   16c10:	3120      	adds	r1, #32
   16c12:	f106 0021 	add.w	r0, r6, #33	; 0x21
   16c16:	f005 fc41 	bl	1c49c <sys_memcpy_swap.constprop.0>
		break;
   16c1a:	e7d7      	b.n	16bcc <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(false);
   16c1c:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   16c1e:	f7ff ff4f 	bl	16ac0 <ecdh_p256_common_secret>
   16c22:	4604      	mov	r4, r0
		break;
   16c24:	e7d2      	b.n	16bcc <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(true);
   16c26:	2001      	movs	r0, #1
   16c28:	e7f9      	b.n	16c1e <ecdh_cmd_process+0xe2>
   16c2a:	bf00      	nop
   16c2c:	20001eac 	.word	0x20001eac
   16c30:	200026fc 	.word	0x200026fc
   16c34:	0001dd7b 	.word	0x0001dd7b
   16c38:	2000271c 	.word	0x2000271c

00016c3c <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   16c3c:	b510      	push	{r4, lr}
   16c3e:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   16c40:	2210      	movs	r2, #16
   16c42:	2100      	movs	r1, #0
   16c44:	a801      	add	r0, sp, #4
   16c46:	f006 fada 	bl	1d1fe <memset>
   16c4a:	4c0b      	ldr	r4, [pc, #44]	; (16c78 <ecdh_thread+0x3c>)
   16c4c:	9405      	str	r4, [sp, #20]
   16c4e:	2301      	movs	r3, #1
   16c50:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   16c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16c5c:	2101      	movs	r1, #1
   16c5e:	a801      	add	r0, sp, #4
   16c60:	f002 f8a6 	bl	18db0 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   16c64:	4620      	mov	r0, r4
   16c66:	f006 faa1 	bl	1d1ac <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   16c6a:	9b04      	ldr	r3, [sp, #16]
   16c6c:	f36f 3394 	bfc	r3, #14, #7
   16c70:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   16c72:	f7ff ff63 	bl	16b3c <ecdh_cmd_process>
	while (true) {
   16c76:	e7ed      	b.n	16c54 <ecdh_thread+0x18>
   16c78:	20001e9c 	.word	0x20001e9c

00016c7c <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   16c7c:	b510      	push	{r4, lr}
   16c7e:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   16c80:	480e      	ldr	r0, [pc, #56]	; (16cbc <hci_ecdh_init+0x40>)
   16c82:	f006 fa8e 	bl	1d1a2 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16c86:	4c0e      	ldr	r4, [pc, #56]	; (16cc0 <hci_ecdh_init+0x44>)
   16c88:	490e      	ldr	r1, [pc, #56]	; (16cc4 <hci_ecdh_init+0x48>)
   16c8a:	2200      	movs	r2, #0
   16c8c:	2300      	movs	r3, #0
   16c8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   16c92:	2300      	movs	r3, #0
   16c94:	220a      	movs	r2, #10
   16c96:	e9cd 2303 	strd	r2, r3, [sp, #12]
   16c9a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   16c9e:	9300      	str	r3, [sp, #0]
   16ca0:	f44f 7262 	mov.w	r2, #904	; 0x388
   16ca4:	4b08      	ldr	r3, [pc, #32]	; (16cc8 <hci_ecdh_init+0x4c>)
   16ca6:	4620      	mov	r0, r4
   16ca8:	f000 ff72 	bl	17b90 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16cac:	4907      	ldr	r1, [pc, #28]	; (16ccc <hci_ecdh_init+0x50>)
   16cae:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   16cb0:	b008      	add	sp, #32
   16cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16cb6:	f005 bd8d 	b.w	1c7d4 <z_impl_k_thread_name_set>
   16cba:	bf00      	nop
   16cbc:	20001e9c 	.word	0x20001e9c
   16cc0:	200018f0 	.word	0x200018f0
   16cc4:	20003760 	.word	0x20003760
   16cc8:	00016c3d 	.word	0x00016c3d
   16ccc:	0001dd6e 	.word	0x0001dd6e

00016cd0 <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   16cd0:	4801      	ldr	r0, [pc, #4]	; (16cd8 <hci_ecdh_uninit+0x8>)
   16cd2:	f7fa bc6d 	b.w	115b0 <z_impl_k_thread_abort>
   16cd6:	bf00      	nop
   16cd8:	200018f0 	.word	0x200018f0

00016cdc <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   16cdc:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16cde:	4b0b      	ldr	r3, [pc, #44]	; (16d0c <hci_cmd_le_read_local_p256_public_key+0x30>)
   16ce0:	f3bf 8f5b 	dmb	ish
   16ce4:	2201      	movs	r2, #1
   16ce6:	e853 1f00 	ldrex	r1, [r3]
   16cea:	2900      	cmp	r1, #0
   16cec:	d103      	bne.n	16cf6 <hci_cmd_le_read_local_p256_public_key+0x1a>
   16cee:	e843 2000 	strex	r0, r2, [r3]
   16cf2:	2800      	cmp	r0, #0
   16cf4:	d1f7      	bne.n	16ce6 <hci_cmd_le_read_local_p256_public_key+0xa>
   16cf6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   16cfa:	d105      	bne.n	16d08 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   16cfc:	4804      	ldr	r0, [pc, #16]	; (16d10 <hci_cmd_le_read_local_p256_public_key+0x34>)
   16cfe:	2100      	movs	r1, #0
   16d00:	f002 f8b2 	bl	18e68 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   16d04:	2000      	movs	r0, #0
}
   16d06:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16d08:	200c      	movs	r0, #12
   16d0a:	e7fc      	b.n	16d06 <hci_cmd_le_read_local_p256_public_key+0x2a>
   16d0c:	20001eac 	.word	0x20001eac
   16d10:	20001e9c 	.word	0x20001e9c

00016d14 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   16d14:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   16d16:	2900      	cmp	r1, #0
   16d18:	4b11      	ldr	r3, [pc, #68]	; (16d60 <cmd_le_generate_dhkey+0x4c>)
   16d1a:	f3bf 8f5b 	dmb	ish
{
   16d1e:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   16d20:	bf0c      	ite	eq
   16d22:	2202      	moveq	r2, #2
   16d24:	2204      	movne	r2, #4
   16d26:	e853 1f00 	ldrex	r1, [r3]
   16d2a:	2900      	cmp	r1, #0
   16d2c:	d103      	bne.n	16d36 <cmd_le_generate_dhkey+0x22>
   16d2e:	e843 2000 	strex	r0, r2, [r3]
   16d32:	2800      	cmp	r0, #0
   16d34:	d1f7      	bne.n	16d26 <cmd_le_generate_dhkey+0x12>
   16d36:	f3bf 8f5b 	dmb	ish
   16d3a:	d10e      	bne.n	16d5a <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   16d3c:	4621      	mov	r1, r4
   16d3e:	4809      	ldr	r0, [pc, #36]	; (16d64 <cmd_le_generate_dhkey+0x50>)
   16d40:	f005 fbac 	bl	1c49c <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   16d44:	4808      	ldr	r0, [pc, #32]	; (16d68 <cmd_le_generate_dhkey+0x54>)
   16d46:	f104 0120 	add.w	r1, r4, #32
   16d4a:	f005 fba7 	bl	1c49c <sys_memcpy_swap.constprop.0>
   16d4e:	4807      	ldr	r0, [pc, #28]	; (16d6c <cmd_le_generate_dhkey+0x58>)
   16d50:	2100      	movs	r1, #0
   16d52:	f002 f889 	bl	18e68 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   16d56:	2000      	movs	r0, #0
}
   16d58:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16d5a:	200c      	movs	r0, #12
   16d5c:	e7fc      	b.n	16d58 <cmd_le_generate_dhkey+0x44>
   16d5e:	bf00      	nop
   16d60:	20001eac 	.word	0x20001eac
   16d64:	2000271c 	.word	0x2000271c
   16d68:	2000273c 	.word	0x2000273c
   16d6c:	20001e9c 	.word	0x20001e9c

00016d70 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   16d70:	4901      	ldr	r1, [pc, #4]	; (16d78 <mpsl_low_prio_irq_handler+0x8>)
   16d72:	4802      	ldr	r0, [pc, #8]	; (16d7c <mpsl_low_prio_irq_handler+0xc>)
   16d74:	f005 bebd 	b.w	1caf2 <k_work_submit_to_queue>
   16d78:	20001eb0 	.word	0x20001eb0
   16d7c:	20001968 	.word	0x20001968

00016d80 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
   16d80:	b513      	push	{r0, r1, r4, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   16d82:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   16d86:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   16d8a:	2300      	movs	r3, #0
   16d8c:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   16d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16d94:	f8ad 3000 	strh.w	r3, [sp]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   16d98:	4a0d      	ldr	r2, [pc, #52]	; (16dd0 <mpsl_lib_init_sys+0x50>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   16d9a:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   16d9c:	2119      	movs	r1, #25
   16d9e:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   16da0:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   16da4:	f7ed f860 	bl	3e68 <mpsl_init>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   16da8:	4604      	mov	r4, r0
   16daa:	b970      	cbnz	r0, 16dca <mpsl_lib_init_sys+0x4a>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   16dac:	4601      	mov	r1, r0
   16dae:	2201      	movs	r2, #1
   16db0:	2008      	movs	r0, #8
   16db2:	f7fa f9b1 	bl	11118 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   16db6:	2201      	movs	r2, #1
   16db8:	4621      	mov	r1, r4
   16dba:	200b      	movs	r0, #11
   16dbc:	f7fa f9ac 	bl	11118 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   16dc0:	2201      	movs	r2, #1
   16dc2:	4621      	mov	r1, r4
   16dc4:	4610      	mov	r0, r2
   16dc6:	f7fa f9a7 	bl	11118 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   16dca:	4620      	mov	r0, r4
   16dcc:	b002      	add	sp, #8
   16dce:	bd10      	pop	{r4, pc}
   16dd0:	0001c4c7 	.word	0x0001c4c7

00016dd4 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   16dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   16dd6:	4d0d      	ldr	r5, [pc, #52]	; (16e0c <mpsl_low_prio_init+0x38>)
   16dd8:	490d      	ldr	r1, [pc, #52]	; (16e10 <mpsl_low_prio_init+0x3c>)
   16dda:	2400      	movs	r4, #0
   16ddc:	9400      	str	r4, [sp, #0]
   16dde:	f06f 0309 	mvn.w	r3, #9
   16de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16de6:	4628      	mov	r0, r5
   16de8:	f001 f9dc 	bl	181a4 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   16dec:	4909      	ldr	r1, [pc, #36]	; (16e14 <mpsl_low_prio_init+0x40>)
   16dee:	4628      	mov	r0, r5
   16df0:	f005 fcf0 	bl	1c7d4 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   16df4:	4908      	ldr	r1, [pc, #32]	; (16e18 <mpsl_low_prio_init+0x44>)
   16df6:	4809      	ldr	r0, [pc, #36]	; (16e1c <mpsl_low_prio_init+0x48>)
   16df8:	f005 fe4e 	bl	1ca98 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   16dfc:	4622      	mov	r2, r4
   16dfe:	2104      	movs	r1, #4
   16e00:	2019      	movs	r0, #25
   16e02:	f7fa f989 	bl	11118 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   16e06:	4620      	mov	r0, r4
   16e08:	b003      	add	sp, #12
   16e0a:	bd30      	pop	{r4, r5, pc}
   16e0c:	20001968 	.word	0x20001968
   16e10:	20003ae8 	.word	0x20003ae8
   16e14:	0001dd9b 	.word	0x0001dd9b
   16e18:	0001c4f3 	.word	0x0001c4f3
   16e1c:	20001eb0 	.word	0x20001eb0

00016e20 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   16e20:	4b01      	ldr	r3, [pc, #4]	; (16e28 <mpsl_hfclk_callback+0x8>)
   16e22:	2000      	movs	r0, #0
   16e24:	681b      	ldr	r3, [r3, #0]
   16e26:	4718      	bx	r3
   16e28:	20001ec0 	.word	0x20001ec0

00016e2c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   16e2c:	b120      	cbz	r0, 16e38 <nrfx_clock_start+0xc>
   16e2e:	2801      	cmp	r0, #1
   16e30:	d106      	bne.n	16e40 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   16e32:	4804      	ldr	r0, [pc, #16]	; (16e44 <nrfx_clock_start+0x18>)
   16e34:	f7ec be8e 	b.w	3b54 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   16e38:	4b03      	ldr	r3, [pc, #12]	; (16e48 <nrfx_clock_start+0x1c>)
   16e3a:	2001      	movs	r0, #1
   16e3c:	681b      	ldr	r3, [r3, #0]
   16e3e:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   16e40:	4770      	bx	lr
   16e42:	bf00      	nop
   16e44:	00016e21 	.word	0x00016e21
   16e48:	20001ec0 	.word	0x20001ec0

00016e4c <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   16e4c:	4b01      	ldr	r3, [pc, #4]	; (16e54 <nrfx_clock_init+0x8>)
   16e4e:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   16e50:	4801      	ldr	r0, [pc, #4]	; (16e58 <nrfx_clock_init+0xc>)
   16e52:	4770      	bx	lr
   16e54:	20001ec0 	.word	0x20001ec0
   16e58:	0bad0000 	.word	0x0bad0000

00016e5c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   16e5c:	4a02      	ldr	r2, [pc, #8]	; (16e68 <nvmc_wait+0xc>)
   16e5e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   16e62:	2b00      	cmp	r3, #0
   16e64:	d0fb      	beq.n	16e5e <nvmc_wait+0x2>
}
   16e66:	4770      	bx	lr
   16e68:	4001e000 	.word	0x4001e000

00016e6c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   16e6c:	b510      	push	{r4, lr}
                var2 = *(uint32_t *)0x10000134ul;
            }
        #elif defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   16e6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            if (var1 == 0x0E)
   16e72:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   16e76:	2a0e      	cmp	r2, #14
   16e78:	d15d      	bne.n	16f36 <SystemInit+0xca>

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   16e7a:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
   16e7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   16e82:	f3c2 3242 	ubfx	r2, r2, #13, #3
   16e86:	f8c1 253c 	str.w	r2, [r1, #1340]	; 0x53c

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   16e8a:	2200      	movs	r2, #0
   16e8c:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   16e90:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   16e94:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   16e98:	4a57      	ldr	r2, [pc, #348]	; (16ff8 <SystemInit+0x18c>)
   16e9a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
   16e9e:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   16ea2:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
   16ea6:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   16eaa:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
   16eae:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   16eb2:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
   16eb6:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   16eba:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
   16ebe:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   16ec2:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
   16ec6:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   16eca:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
   16ece:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   16ed2:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
   16ed6:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   16eda:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
   16ede:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   16ee2:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
   16ee6:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   16eea:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
   16eee:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   16ef2:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
   16ef6:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   16efa:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
   16efe:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   16f02:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
   16f06:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   16f0a:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
   16f0e:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   16f12:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
   16f16:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   16f1a:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   16f1e:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   16f22:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   16f26:	07db      	lsls	r3, r3, #31
   16f28:	d45d      	bmi.n	16fe6 <SystemInit+0x17a>

    #if NRF52_ERRATA_217_ENABLE_WORKAROUND
        /* Workaround for Errata 217 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_217()){
            *(volatile uint32_t *)0x40000EE4ul |= 0x0000000Ful;
   16f2a:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
   16f2e:	f043 030f 	orr.w	r3, r3, #15
   16f32:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   16f36:	f005 fb12 	bl	1c55e <nrf52_configuration_249>
   16f3a:	b338      	cbz	r0, 16f8c <SystemInit+0x120>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   16f3c:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   16f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16f44:	f8d1 2208 	ldr.w	r2, [r1, #520]	; 0x208
   16f48:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #endif

    nrf52_handle_approtect();

    #if NRF52_CONFIGURATION_249_ENABLE && (defined(NRF52805_XXAA) || defined(NRF52810_XXAA) || defined(NRF52811_XXAA))
        if (nrf52_configuration_249() && (NRF_UICR->NRFMDK[0] == 0xFFFFFFFF || NRF_UICR->NRFMDK[1] == 0xFFFFFFFF))
   16f4c:	f005 fb07 	bl	1c55e <nrf52_configuration_249>
   16f50:	b1e0      	cbz	r0, 16f8c <SystemInit+0x120>
   16f52:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
   16f56:	3301      	adds	r3, #1
   16f58:	d003      	beq.n	16f62 <SystemInit+0xf6>
   16f5a:	f8d1 3104 	ldr.w	r3, [r1, #260]	; 0x104
   16f5e:	3301      	adds	r3, #1
   16f60:	d114      	bne.n	16f8c <SystemInit+0x120>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   16f62:	4826      	ldr	r0, [pc, #152]	; (16ffc <SystemInit+0x190>)
   16f64:	2301      	movs	r3, #1
        {
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NRFMDK[0] = 0;
   16f66:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   16f6a:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
            NRF_UICR->NRFMDK[0] = 0;
   16f6e:	2100      	movs	r1, #0
    nvmc_wait();
   16f70:	f7ff ff74 	bl	16e5c <nvmc_wait>
            NRF_UICR->NRFMDK[0] = 0;
   16f74:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
            nvmc_wait();
   16f78:	f7ff ff70 	bl	16e5c <nvmc_wait>
            NRF_UICR->NRFMDK[1] = 0;
   16f7c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
            nvmc_wait();
   16f80:	f7ff ff6c 	bl	16e5c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   16f84:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    nvmc_wait();
   16f88:	f7ff ff68 	bl	16e5c <nvmc_wait>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   16f8c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   16f90:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   16f94:	2a00      	cmp	r2, #0
   16f96:	db03      	blt.n	16fa0 <SystemInit+0x134>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   16f98:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   16f9c:	2b00      	cmp	r3, #0
   16f9e:	da27      	bge.n	16ff0 <SystemInit+0x184>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   16fa0:	4916      	ldr	r1, [pc, #88]	; (16ffc <SystemInit+0x190>)
   16fa2:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   16fa4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   16fa8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   16fac:	2415      	movs	r4, #21
    nvmc_wait();
   16fae:	f7ff ff55 	bl	16e5c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   16fb2:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   16fb6:	f7ff ff51 	bl	16e5c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   16fba:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   16fbe:	f7ff ff4d 	bl	16e5c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   16fc2:	2300      	movs	r3, #0
   16fc4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   16fc8:	f7ff ff48 	bl	16e5c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   16fcc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   16fd0:	490b      	ldr	r1, [pc, #44]	; (17000 <SystemInit+0x194>)
   16fd2:	4b0c      	ldr	r3, [pc, #48]	; (17004 <SystemInit+0x198>)
   16fd4:	68ca      	ldr	r2, [r1, #12]
   16fd6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   16fda:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   16fdc:	60cb      	str	r3, [r1, #12]
   16fde:	f3bf 8f4f 	dsb	sy
    __NOP();
   16fe2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   16fe4:	e7fd      	b.n	16fe2 <SystemInit+0x176>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   16fe6:	f06f 0301 	mvn.w	r3, #1
   16fea:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
   16fee:	e79c      	b.n	16f2a <SystemInit+0xbe>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   16ff0:	4b05      	ldr	r3, [pc, #20]	; (17008 <SystemInit+0x19c>)
   16ff2:	4a06      	ldr	r2, [pc, #24]	; (1700c <SystemInit+0x1a0>)
   16ff4:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   16ff6:	bd10      	pop	{r4, pc}
   16ff8:	4000c000 	.word	0x4000c000
   16ffc:	4001e000 	.word	0x4001e000
   17000:	e000ed00 	.word	0xe000ed00
   17004:	05fa0004 	.word	0x05fa0004
   17008:	2000064c 	.word	0x2000064c
   1700c:	03d09000 	.word	0x03d09000

00017010 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   17010:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   17012:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   17014:	6802      	ldr	r2, [r0, #0]
   17016:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   1701a:	fab2 f382 	clz	r3, r2
   1701e:	f1c3 031f 	rsb	r3, r3, #31
   17022:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   17024:	fa05 f403 	lsl.w	r4, r5, r3
   17028:	ea22 0404 	bic.w	r4, r2, r4
   1702c:	e850 6f00 	ldrex	r6, [r0]
   17030:	4296      	cmp	r6, r2
   17032:	d104      	bne.n	1703e <nrfx_flag32_alloc+0x2e>
   17034:	e840 4c00 	strex	ip, r4, [r0]
   17038:	f1bc 0f00 	cmp.w	ip, #0
   1703c:	d1f6      	bne.n	1702c <nrfx_flag32_alloc+0x1c>
   1703e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   17042:	d1e7      	bne.n	17014 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   17044:	4801      	ldr	r0, [pc, #4]	; (1704c <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   17046:	700b      	strb	r3, [r1, #0]
}
   17048:	bd70      	pop	{r4, r5, r6, pc}
   1704a:	bf00      	nop
   1704c:	0bad0000 	.word	0x0bad0000

00017050 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   17050:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   17052:	6803      	ldr	r3, [r0, #0]
   17054:	40cb      	lsrs	r3, r1
   17056:	07db      	lsls	r3, r3, #31
   17058:	d414      	bmi.n	17084 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1705a:	2301      	movs	r3, #1
   1705c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1705e:	6802      	ldr	r2, [r0, #0]
   17060:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   17064:	ea43 0102 	orr.w	r1, r3, r2
   17068:	e850 4f00 	ldrex	r4, [r0]
   1706c:	4294      	cmp	r4, r2
   1706e:	d104      	bne.n	1707a <nrfx_flag32_free+0x2a>
   17070:	e840 1c00 	strex	ip, r1, [r0]
   17074:	f1bc 0f00 	cmp.w	ip, #0
   17078:	d1f6      	bne.n	17068 <nrfx_flag32_free+0x18>
   1707a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1707e:	d1ee      	bne.n	1705e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   17080:	4801      	ldr	r0, [pc, #4]	; (17088 <nrfx_flag32_free+0x38>)
}
   17082:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   17084:	4801      	ldr	r0, [pc, #4]	; (1708c <nrfx_flag32_free+0x3c>)
   17086:	e7fc      	b.n	17082 <nrfx_flag32_free+0x32>
   17088:	0bad0000 	.word	0x0bad0000
   1708c:	0bad0004 	.word	0x0bad0004

00017090 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   17090:	4b03      	ldr	r3, [pc, #12]	; (170a0 <pin_in_use_by_te+0x10>)
   17092:	3008      	adds	r0, #8
   17094:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   17098:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1709c:	4770      	bx	lr
   1709e:	bf00      	nop
   170a0:	20000650 	.word	0x20000650

000170a4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   170a4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   170a6:	f100 0308 	add.w	r3, r0, #8
   170aa:	4c0c      	ldr	r4, [pc, #48]	; (170dc <call_handler+0x38>)
   170ac:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   170b0:	05da      	lsls	r2, r3, #23
{
   170b2:	4605      	mov	r5, r0
   170b4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   170b6:	d507      	bpl.n	170c8 <call_handler+0x24>
   170b8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   170bc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   170c0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   170c4:	6852      	ldr	r2, [r2, #4]
   170c6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   170c8:	68a3      	ldr	r3, [r4, #8]
   170ca:	b12b      	cbz	r3, 170d8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   170cc:	68e2      	ldr	r2, [r4, #12]
   170ce:	4631      	mov	r1, r6
   170d0:	4628      	mov	r0, r5
    }
}
   170d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   170d6:	4718      	bx	r3
}
   170d8:	bd70      	pop	{r4, r5, r6, pc}
   170da:	bf00      	nop
   170dc:	20000650 	.word	0x20000650

000170e0 <release_handler>:
{
   170e0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   170e2:	4a12      	ldr	r2, [pc, #72]	; (1712c <release_handler+0x4c>)
   170e4:	3008      	adds	r0, #8
   170e6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   170ea:	05d9      	lsls	r1, r3, #23
   170ec:	d51b      	bpl.n	17126 <release_handler+0x46>
   170ee:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   170f2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   170f6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   170fa:	f102 040e 	add.w	r4, r2, #14
   170fe:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   17100:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   17104:	f413 7f80 	tst.w	r3, #256	; 0x100
   17108:	d003      	beq.n	17112 <release_handler+0x32>
   1710a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1710e:	4299      	cmp	r1, r3
   17110:	d009      	beq.n	17126 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   17112:	3001      	adds	r0, #1
   17114:	2820      	cmp	r0, #32
   17116:	d1f3      	bne.n	17100 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   17118:	2300      	movs	r3, #0
   1711a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1711e:	4804      	ldr	r0, [pc, #16]	; (17130 <release_handler+0x50>)
}
   17120:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   17122:	f7ff bf95 	b.w	17050 <nrfx_flag32_free>
}
   17126:	bc10      	pop	{r4}
   17128:	4770      	bx	lr
   1712a:	bf00      	nop
   1712c:	20000650 	.word	0x20000650
   17130:	200006a4 	.word	0x200006a4

00017134 <pin_handler_trigger_uninit>:
{
   17134:	b538      	push	{r3, r4, r5, lr}
   17136:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   17138:	f7ff ffaa 	bl	17090 <pin_in_use_by_te>
   1713c:	4c09      	ldr	r4, [pc, #36]	; (17164 <pin_handler_trigger_uninit+0x30>)
   1713e:	f102 0508 	add.w	r5, r2, #8
   17142:	b140      	cbz	r0, 17156 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17144:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   17148:	4907      	ldr	r1, [pc, #28]	; (17168 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1714a:	0b5b      	lsrs	r3, r3, #13
   1714c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   17150:	2000      	movs	r0, #0
   17152:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   17156:	4610      	mov	r0, r2
   17158:	f7ff ffc2 	bl	170e0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1715c:	2300      	movs	r3, #0
   1715e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   17162:	bd38      	pop	{r3, r4, r5, pc}
   17164:	20000650 	.word	0x20000650
   17168:	40006000 	.word	0x40006000

0001716c <nrfx_gpiote_input_configure>:
{
   1716c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17170:	4604      	mov	r4, r0
   17172:	461d      	mov	r5, r3
    if (p_input_config)
   17174:	b309      	cbz	r1, 171ba <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   17176:	4f4f      	ldr	r7, [pc, #316]	; (172b4 <nrfx_gpiote_input_configure+0x148>)
   17178:	f100 0808 	add.w	r8, r0, #8
   1717c:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   17180:	07b3      	lsls	r3, r6, #30
   17182:	d506      	bpl.n	17192 <nrfx_gpiote_input_configure+0x26>
   17184:	f7ff ff84 	bl	17090 <pin_in_use_by_te>
   17188:	b118      	cbz	r0, 17192 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   1718a:	484b      	ldr	r0, [pc, #300]	; (172b8 <nrfx_gpiote_input_configure+0x14c>)
}
   1718c:	b002      	add	sp, #8
   1718e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
   17192:	f004 031f 	and.w	r3, r4, #31
   17196:	009b      	lsls	r3, r3, #2
   17198:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1719c:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1719e:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   171a2:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
   171a6:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   171aa:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   171ae:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
   171b2:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   171b6:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
   171ba:	b19a      	cbz	r2, 171e4 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   171bc:	4b3d      	ldr	r3, [pc, #244]	; (172b4 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   171be:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   171c0:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   171c2:	f104 0608 	add.w	r6, r4, #8
   171c6:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
   171ca:	f011 0f02 	tst.w	r1, #2
   171ce:	d00d      	beq.n	171ec <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
   171d0:	2800      	cmp	r0, #0
   171d2:	d1da      	bne.n	1718a <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   171d4:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
   171d8:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   171dc:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
   171e0:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
   171e4:	2d00      	cmp	r5, #0
   171e6:	d13b      	bne.n	17260 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
   171e8:	4834      	ldr	r0, [pc, #208]	; (172bc <nrfx_gpiote_input_configure+0x150>)
   171ea:	e7cf      	b.n	1718c <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   171ec:	f021 0120 	bic.w	r1, r1, #32
   171f0:	04c9      	lsls	r1, r1, #19
   171f2:	0cc9      	lsrs	r1, r1, #19
   171f4:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
   171f8:	2800      	cmp	r0, #0
   171fa:	d0eb      	beq.n	171d4 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   171fc:	2f03      	cmp	r7, #3
   171fe:	d8c4      	bhi.n	1718a <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   17200:	6852      	ldr	r2, [r2, #4]
   17202:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   17206:	b92f      	cbnz	r7, 17214 <nrfx_gpiote_input_configure+0xa8>
   17208:	4a2d      	ldr	r2, [pc, #180]	; (172c0 <nrfx_gpiote_input_configure+0x154>)
   1720a:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
   1720e:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   17212:	e7df      	b.n	171d4 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   17214:	ea4f 028c 	mov.w	r2, ip, lsl #2
   17218:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1721c:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   17220:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   17224:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   17228:	f020 0003 	bic.w	r0, r0, #3
   1722c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   17230:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   17234:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   17238:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1723c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17240:	0220      	lsls	r0, r4, #8
   17242:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   17246:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   1724a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1724e:	ea40 000e 	orr.w	r0, r0, lr
   17252:	f041 0120 	orr.w	r1, r1, #32
   17256:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
   1725a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1725e:	e7b9      	b.n	171d4 <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   17260:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   17264:	4620      	mov	r0, r4
   17266:	f7ff ff3b 	bl	170e0 <release_handler>
    if (!handler)
   1726a:	2e00      	cmp	r6, #0
   1726c:	d0bc      	beq.n	171e8 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1726e:	4d11      	ldr	r5, [pc, #68]	; (172b4 <nrfx_gpiote_input_configure+0x148>)
   17270:	e9d5 2300 	ldrd	r2, r3, [r5]
   17274:	4296      	cmp	r6, r2
   17276:	d101      	bne.n	1727c <nrfx_gpiote_input_configure+0x110>
   17278:	429f      	cmp	r7, r3
   1727a:	d019      	beq.n	172b0 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1727c:	4811      	ldr	r0, [pc, #68]	; (172c4 <nrfx_gpiote_input_configure+0x158>)
   1727e:	f10d 0107 	add.w	r1, sp, #7
   17282:	f7ff fec5 	bl	17010 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   17286:	4b0d      	ldr	r3, [pc, #52]	; (172bc <nrfx_gpiote_input_configure+0x150>)
   17288:	4298      	cmp	r0, r3
   1728a:	f47f af7f 	bne.w	1718c <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   1728e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
   17292:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   17296:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1729a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1729c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1729e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   172a2:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   172a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   172aa:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   172ae:	e79b      	b.n	171e8 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   172b0:	2200      	movs	r2, #0
   172b2:	e7ee      	b.n	17292 <nrfx_gpiote_input_configure+0x126>
   172b4:	20000650 	.word	0x20000650
   172b8:	0bad0004 	.word	0x0bad0004
   172bc:	0bad0000 	.word	0x0bad0000
   172c0:	40006000 	.word	0x40006000
   172c4:	200006a4 	.word	0x200006a4

000172c8 <nrfx_gpiote_output_configure>:
{
   172c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   172ca:	4604      	mov	r4, r0
    if (p_config)
   172cc:	b389      	cbz	r1, 17332 <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   172ce:	4e3a      	ldr	r6, [pc, #232]	; (173b8 <nrfx_gpiote_output_configure+0xf0>)
   172d0:	f100 0708 	add.w	r7, r0, #8
   172d4:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   172d8:	07ab      	lsls	r3, r5, #30
   172da:	d404      	bmi.n	172e6 <nrfx_gpiote_output_configure+0x1e>
   172dc:	f7ff fed8 	bl	17090 <pin_in_use_by_te>
   172e0:	b108      	cbz	r0, 172e6 <nrfx_gpiote_output_configure+0x1e>
{
   172e2:	4836      	ldr	r0, [pc, #216]	; (173bc <nrfx_gpiote_output_configure+0xf4>)
}
   172e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   172e6:	f015 0f1c 	tst.w	r5, #28
   172ea:	784b      	ldrb	r3, [r1, #1]
   172ec:	d124      	bne.n	17338 <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
   172ee:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   172f2:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
   172f6:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   172fa:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   172fc:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   17300:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   17304:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
   17306:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
   1730a:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
   1730e:	f02c 0c07 	bic.w	ip, ip, #7
   17312:	ea43 030c 	orr.w	r3, r3, ip
   17316:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   1731a:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   1731e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   17322:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   17326:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
   1732a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   1732e:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
   17332:	b922      	cbnz	r2, 1733e <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
   17334:	4822      	ldr	r0, [pc, #136]	; (173c0 <nrfx_gpiote_output_configure+0xf8>)
   17336:	e7d5      	b.n	172e4 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   17338:	2b01      	cmp	r3, #1
   1733a:	d1d8      	bne.n	172ee <nrfx_gpiote_output_configure+0x26>
   1733c:	e7d1      	b.n	172e2 <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1733e:	4e1e      	ldr	r6, [pc, #120]	; (173b8 <nrfx_gpiote_output_configure+0xf0>)
   17340:	f104 0708 	add.w	r7, r4, #8
   17344:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   17348:	0783      	lsls	r3, r0, #30
   1734a:	d5ca      	bpl.n	172e2 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   1734c:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   17350:	4661      	mov	r1, ip
   17352:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   17354:	f020 0020 	bic.w	r0, r0, #32
   17358:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1735c:	04c0      	lsls	r0, r0, #19
   1735e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   17362:	0cc0      	lsrs	r0, r0, #19
   17364:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   17368:	2300      	movs	r3, #0
   1736a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1736e:	7855      	ldrb	r5, [r2, #1]
   17370:	2d00      	cmp	r5, #0
   17372:	d0df      	beq.n	17334 <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   17374:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   17378:	7892      	ldrb	r2, [r2, #2]
   1737a:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   1737e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   17382:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17386:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1738a:	0223      	lsls	r3, r4, #8
   1738c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   17390:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17392:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   17396:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1739a:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1739c:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1739e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   173a2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   173a6:	4313      	orrs	r3, r2
   173a8:	f040 0020 	orr.w	r0, r0, #32
   173ac:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   173b0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   173b4:	e7be      	b.n	17334 <nrfx_gpiote_output_configure+0x6c>
   173b6:	bf00      	nop
   173b8:	20000650 	.word	0x20000650
   173bc:	0bad0004 	.word	0x0bad0004
   173c0:	0bad0000 	.word	0x0bad0000

000173c4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   173c4:	4b01      	ldr	r3, [pc, #4]	; (173cc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   173c6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   173ca:	4770      	bx	lr
   173cc:	20000650 	.word	0x20000650

000173d0 <nrfx_gpiote_channel_get>:
{
   173d0:	b508      	push	{r3, lr}
   173d2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   173d4:	f7ff fe5c 	bl	17090 <pin_in_use_by_te>
   173d8:	b138      	cbz	r0, 173ea <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   173da:	4b05      	ldr	r3, [pc, #20]	; (173f0 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   173dc:	4805      	ldr	r0, [pc, #20]	; (173f4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   173de:	3208      	adds	r2, #8
   173e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   173e4:	0b5b      	lsrs	r3, r3, #13
   173e6:	700b      	strb	r3, [r1, #0]
}
   173e8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   173ea:	4803      	ldr	r0, [pc, #12]	; (173f8 <nrfx_gpiote_channel_get+0x28>)
   173ec:	e7fc      	b.n	173e8 <nrfx_gpiote_channel_get+0x18>
   173ee:	bf00      	nop
   173f0:	20000650 	.word	0x20000650
   173f4:	0bad0000 	.word	0x0bad0000
   173f8:	0bad0004 	.word	0x0bad0004

000173fc <nrfx_gpiote_init>:
{
   173fc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   173fe:	4c0f      	ldr	r4, [pc, #60]	; (1743c <nrfx_gpiote_init+0x40>)
   17400:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   17404:	b9bd      	cbnz	r5, 17436 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   17406:	2240      	movs	r2, #64	; 0x40
   17408:	4629      	mov	r1, r5
   1740a:	f104 0010 	add.w	r0, r4, #16
   1740e:	f005 fef6 	bl	1d1fe <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   17412:	2006      	movs	r0, #6
   17414:	f7f9 fe50 	bl	110b8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17418:	4b09      	ldr	r3, [pc, #36]	; (17440 <nrfx_gpiote_init+0x44>)
    return err_code;
   1741a:	480a      	ldr	r0, [pc, #40]	; (17444 <nrfx_gpiote_init+0x48>)
   1741c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   17420:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   17424:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   17428:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1742c:	2301      	movs	r3, #1
   1742e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   17432:	6563      	str	r3, [r4, #84]	; 0x54
}
   17434:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   17436:	4804      	ldr	r0, [pc, #16]	; (17448 <nrfx_gpiote_init+0x4c>)
   17438:	e7fc      	b.n	17434 <nrfx_gpiote_init+0x38>
   1743a:	bf00      	nop
   1743c:	20000650 	.word	0x20000650
   17440:	40006000 	.word	0x40006000
   17444:	0bad0000 	.word	0x0bad0000
   17448:	0bad0005 	.word	0x0bad0005

0001744c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1744c:	4b03      	ldr	r3, [pc, #12]	; (1745c <nrfx_gpiote_is_init+0x10>)
   1744e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   17452:	3800      	subs	r0, #0
   17454:	bf18      	it	ne
   17456:	2001      	movne	r0, #1
   17458:	4770      	bx	lr
   1745a:	bf00      	nop
   1745c:	20000650 	.word	0x20000650

00017460 <nrfx_gpiote_channel_free>:
{
   17460:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   17462:	4801      	ldr	r0, [pc, #4]	; (17468 <nrfx_gpiote_channel_free+0x8>)
   17464:	f7ff bdf4 	b.w	17050 <nrfx_flag32_free>
   17468:	200006a0 	.word	0x200006a0

0001746c <nrfx_gpiote_channel_alloc>:
{
   1746c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1746e:	4801      	ldr	r0, [pc, #4]	; (17474 <nrfx_gpiote_channel_alloc+0x8>)
   17470:	f7ff bdce 	b.w	17010 <nrfx_flag32_alloc>
   17474:	200006a0 	.word	0x200006a0

00017478 <nrfx_gpiote_trigger_enable>:
{
   17478:	b510      	push	{r4, lr}
   1747a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1747c:	f7ff fe08 	bl	17090 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   17480:	f102 0408 	add.w	r4, r2, #8
   17484:	4b1c      	ldr	r3, [pc, #112]	; (174f8 <nrfx_gpiote_trigger_enable+0x80>)
   17486:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1748a:	b1e0      	cbz	r0, 174c6 <nrfx_gpiote_trigger_enable+0x4e>
   1748c:	f013 0402 	ands.w	r4, r3, #2
   17490:	d119      	bne.n	174c6 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17492:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   17494:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   17496:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1749a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1749e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   174a2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   174a6:	6004      	str	r4, [r0, #0]
   174a8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   174aa:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   174ae:	f040 0001 	orr.w	r0, r0, #1
   174b2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   174b6:	b129      	cbz	r1, 174c4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   174b8:	2201      	movs	r2, #1
   174ba:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   174be:	4a0f      	ldr	r2, [pc, #60]	; (174fc <nrfx_gpiote_trigger_enable+0x84>)
   174c0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   174c4:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   174c6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   174ca:	2b04      	cmp	r3, #4
   174cc:	d010      	beq.n	174f0 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   174ce:	2b05      	cmp	r3, #5
   174d0:	d010      	beq.n	174f4 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
   174d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   174d6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
   174da:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   174de:	40d9      	lsrs	r1, r3
   174e0:	f001 0101 	and.w	r1, r1, #1
   174e4:	3102      	adds	r1, #2
}
   174e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   174ea:	4610      	mov	r0, r2
   174ec:	f005 b846 	b.w	1c57c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   174f0:	2103      	movs	r1, #3
   174f2:	e7f8      	b.n	174e6 <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   174f4:	2102      	movs	r1, #2
   174f6:	e7f6      	b.n	174e6 <nrfx_gpiote_trigger_enable+0x6e>
   174f8:	20000650 	.word	0x20000650
   174fc:	40006000 	.word	0x40006000

00017500 <nrfx_gpiote_trigger_disable>:
{
   17500:	b508      	push	{r3, lr}
   17502:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   17504:	f7ff fdc4 	bl	17090 <pin_in_use_by_te>
   17508:	b1c0      	cbz	r0, 1753c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1750a:	f102 0108 	add.w	r1, r2, #8
   1750e:	4b0e      	ldr	r3, [pc, #56]	; (17548 <nrfx_gpiote_trigger_disable+0x48>)
   17510:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   17514:	0799      	lsls	r1, r3, #30
   17516:	d411      	bmi.n	1753c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   17518:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1751a:	2201      	movs	r2, #1
   1751c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1751e:	009b      	lsls	r3, r3, #2
   17520:	490a      	ldr	r1, [pc, #40]	; (1754c <nrfx_gpiote_trigger_disable+0x4c>)
   17522:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17526:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1752a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1752e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   17532:	f022 0203 	bic.w	r2, r2, #3
   17536:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1753a:	bd08      	pop	{r3, pc}
   1753c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   17540:	2100      	movs	r1, #0
   17542:	4610      	mov	r0, r2
   17544:	f005 b81a 	b.w	1c57c <nrf_gpio_cfg_sense_set>
   17548:	20000650 	.word	0x20000650
   1754c:	40006000 	.word	0x40006000

00017550 <nrfx_gpiote_pin_uninit>:
{
   17550:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   17552:	4b0d      	ldr	r3, [pc, #52]	; (17588 <nrfx_gpiote_pin_uninit+0x38>)
   17554:	f100 0208 	add.w	r2, r0, #8
{
   17558:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1755a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1755e:	07db      	lsls	r3, r3, #31
   17560:	d50f      	bpl.n	17582 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
   17562:	f7ff ffcd 	bl	17500 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   17566:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
   17568:	f004 041f 	and.w	r4, r4, #31
   1756c:	f7ff fde2 	bl	17134 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   17570:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   17574:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17578:	2202      	movs	r2, #2
   1757a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1757e:	4803      	ldr	r0, [pc, #12]	; (1758c <nrfx_gpiote_pin_uninit+0x3c>)
}
   17580:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   17582:	4803      	ldr	r0, [pc, #12]	; (17590 <nrfx_gpiote_pin_uninit+0x40>)
   17584:	e7fc      	b.n	17580 <nrfx_gpiote_pin_uninit+0x30>
   17586:	bf00      	nop
   17588:	20000650 	.word	0x20000650
   1758c:	0bad0000 	.word	0x0bad0000
   17590:	0bad0004 	.word	0x0bad0004

00017594 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   17594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17598:	4b4f      	ldr	r3, [pc, #316]	; (176d8 <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
   1759a:	4850      	ldr	r0, [pc, #320]	; (176dc <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1759c:	4950      	ldr	r1, [pc, #320]	; (176e0 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
   1759e:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   175a0:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   175a2:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   175a4:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   175a6:	b136      	cbz	r6, 175b6 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
   175a8:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   175ac:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   175ae:	bf1e      	ittt	ne
   175b0:	601c      	strne	r4, [r3, #0]
   175b2:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   175b4:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   175b6:	3304      	adds	r3, #4
   175b8:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   175ba:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   175be:	d1f1      	bne.n	175a4 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   175c0:	4b46      	ldr	r3, [pc, #280]	; (176dc <nrfx_gpiote_irq_handler+0x148>)
   175c2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   175c6:	b1bb      	cbz	r3, 175f8 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
   175c8:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   175cc:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   175d0:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   175d2:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   175d6:	af01      	add	r7, sp, #4
   175d8:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
   175dc:	9c01      	ldr	r4, [sp, #4]
   175de:	b98c      	cbnz	r4, 17604 <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   175e0:	4b3e      	ldr	r3, [pc, #248]	; (176dc <nrfx_gpiote_irq_handler+0x148>)
   175e2:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
   175e6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   175ea:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   175ee:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   175f0:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
   175f4:	2b00      	cmp	r3, #0
   175f6:	d1ee      	bne.n	175d6 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   175f8:	2401      	movs	r4, #1
    while (mask)
   175fa:	2d00      	cmp	r5, #0
   175fc:	d153      	bne.n	176a6 <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   175fe:	b003      	add	sp, #12
   17600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   17604:	fa94 f4a4 	rbit	r4, r4
   17608:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1760c:	4a35      	ldr	r2, [pc, #212]	; (176e4 <nrfx_gpiote_irq_handler+0x150>)
   1760e:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   17612:	08e0      	lsrs	r0, r4, #3
   17614:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   17618:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
   1761a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1761e:	fa08 f202 	lsl.w	r2, r8, r2
   17622:	ea23 0302 	bic.w	r3, r3, r2
   17626:	543b      	strb	r3, [r7, r0]
   17628:	00a3      	lsls	r3, r4, #2
   1762a:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
   1762e:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   17632:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
   17636:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   17638:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1763a:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   1763e:	d518      	bpl.n	17672 <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
   17640:	4659      	mov	r1, fp
   17642:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   17644:	fa5f fa82 	uxtb.w	sl, r2
   17648:	f7ff fd2c 	bl	170a4 <call_handler>
   1764c:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
   17650:	f3c3 4301 	ubfx	r3, r3, #16, #2
   17654:	459a      	cmp	sl, r3
   17656:	d107      	bne.n	17668 <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   17658:	2100      	movs	r1, #0
   1765a:	4620      	mov	r0, r4
   1765c:	f004 ff8e 	bl	1c57c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   17660:	4651      	mov	r1, sl
   17662:	4620      	mov	r0, r4
   17664:	f004 ff8a 	bl	1c57c <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   17668:	fa08 f404 	lsl.w	r4, r8, r4
   1766c:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
   17670:	e7b4      	b.n	175dc <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   17672:	2a02      	cmp	r2, #2
   17674:	d10c      	bne.n	17690 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   17676:	2103      	movs	r1, #3
   17678:	4620      	mov	r0, r4
   1767a:	f004 ff7f 	bl	1c57c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1767e:	f00a 0305 	and.w	r3, sl, #5
   17682:	2b01      	cmp	r3, #1
   17684:	d1f0      	bne.n	17668 <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
   17686:	4659      	mov	r1, fp
   17688:	4620      	mov	r0, r4
   1768a:	f7ff fd0b 	bl	170a4 <call_handler>
   1768e:	e7eb      	b.n	17668 <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   17690:	2102      	movs	r1, #2
   17692:	4620      	mov	r0, r4
   17694:	f004 ff72 	bl	1c57c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   17698:	f1ba 0f03 	cmp.w	sl, #3
   1769c:	d0f3      	beq.n	17686 <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1769e:	2a03      	cmp	r2, #3
   176a0:	d1e2      	bne.n	17668 <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   176a2:	458a      	cmp	sl, r1
   176a4:	e7ee      	b.n	17684 <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
   176a6:	fa95 f3a5 	rbit	r3, r5
   176aa:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   176ae:	fa04 f203 	lsl.w	r2, r4, r3
   176b2:	009b      	lsls	r3, r3, #2
   176b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   176b8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   176bc:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   176c0:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   176c4:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   176c8:	f3c0 2004 	ubfx	r0, r0, #8, #5
   176cc:	f3c1 4101 	ubfx	r1, r1, #16, #2
   176d0:	f7ff fce8 	bl	170a4 <call_handler>
   176d4:	e791      	b.n	175fa <nrfx_gpiote_irq_handler+0x66>
   176d6:	bf00      	nop
   176d8:	40006100 	.word	0x40006100
   176dc:	40006000 	.word	0x40006000
   176e0:	40006120 	.word	0x40006120
   176e4:	20000650 	.word	0x20000650

000176e8 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   176e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   176ec:	7907      	ldrb	r7, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   176ee:	4c49      	ldr	r4, [pc, #292]	; (17814 <nrfx_pwm_init+0x12c>)
   176f0:	250c      	movs	r5, #12
   176f2:	437d      	muls	r5, r7
   176f4:	1966      	adds	r6, r4, r5
{
   176f6:	b085      	sub	sp, #20
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   176f8:	f896 c008 	ldrb.w	ip, [r6, #8]
   176fc:	f1bc 0f00 	cmp.w	ip, #0
   17700:	f040 8085 	bne.w	1780e <nrfx_pwm_init+0x126>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   17704:	6073      	str	r3, [r6, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   17706:	7b0b      	ldrb	r3, [r1, #12]
    p_cb->handler = handler;
   17708:	5162      	str	r2, [r4, r5]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1770a:	72b3      	strb	r3, [r6, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1770c:	2b00      	cmp	r3, #0
   1770e:	d03b      	beq.n	17788 <nrfx_pwm_init+0xa0>
   17710:	7b4b      	ldrb	r3, [r1, #13]
   17712:	2b00      	cmp	r3, #0
   17714:	d038      	beq.n	17788 <nrfx_pwm_init+0xa0>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
   17716:	6803      	ldr	r3, [r0, #0]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   17718:	2501      	movs	r5, #1
   1771a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    nrf_pwm_configure(p_instance->p_registers,
   1771e:	6803      	ldr	r3, [r0, #0]
        p_config->base_clock, p_config->count_mode, p_config->top_value);
   17720:	798e      	ldrb	r6, [r1, #6]
   17722:	890d      	ldrh	r5, [r1, #8]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
   17724:	f891 c005 	ldrb.w	ip, [r1, #5]
   17728:	f8c3 c50c 	str.w	ip, [r3, #1292]	; 0x50c
    p_reg->MODE       = mode;
   1772c:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   17730:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    nrf_pwm_decoder_set(p_instance->p_registers,
   17734:	6803      	ldr	r3, [r0, #0]

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   17736:	8949      	ldrh	r1, [r1, #10]
   17738:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
        p_config->load_mode, p_config->step_mode);

    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   1773c:	6801      	ldr	r1, [r0, #0]
    p_reg->SHORTS = mask;
   1773e:	2300      	movs	r3, #0
   17740:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    nrf_pwm_int_set(p_instance->p_registers, 0);
   17744:	6801      	ldr	r1, [r0, #0]
    p_reg->INTEN = mask;
   17746:	f8c1 3300 	str.w	r3, [r1, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
   1774a:	6801      	ldr	r1, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1774c:	f8c1 311c 	str.w	r3, [r1, #284]	; 0x11c
   17750:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
   17754:	6801      	ldr	r1, [r0, #0]
   17756:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
   1775a:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
   1775e:	6801      	ldr	r1, [r0, #0]
   17760:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
   17764:	f8d1 1114 	ldr.w	r1, [r1, #276]	; 0x114
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   17768:	6801      	ldr	r1, [r0, #0]
   1776a:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
   1776e:	f8d1 3104 	ldr.w	r3, [r1, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
   17772:	2a00      	cmp	r2, #0
   17774:	d145      	bne.n	17802 <nrfx_pwm_init+0x11a>
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   17776:	230c      	movs	r3, #12
   17778:	fb03 4407 	mla	r4, r3, r7, r4

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1777c:	4826      	ldr	r0, [pc, #152]	; (17818 <nrfx_pwm_init+0x130>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1777e:	2301      	movs	r3, #1
   17780:	7223      	strb	r3, [r4, #8]
}
   17782:	b005      	add	sp, #20
   17784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17788:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   1778c:	466b      	mov	r3, sp
   1778e:	f101 0803 	add.w	r8, r1, #3
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   17792:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
        uint8_t output_pin = p_config->output_pins[i];
   17796:	f81e cf01 	ldrb.w	ip, [lr, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   1779a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1779e:	d02d      	beq.n	177fc <nrfx_pwm_init+0x114>
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   177a0:	f02c 0580 	bic.w	r5, ip, #128	; 0x80
   177a4:	601d      	str	r5, [r3, #0]
            if (!p_config->skip_gpio_cfg)
   177a6:	7b0d      	ldrb	r5, [r1, #12]
   177a8:	b99d      	cbnz	r5, 177d2 <nrfx_pwm_init+0xea>
    *p_pin = pin_number & 0x1F;
   177aa:	f00c 051f 	and.w	r5, ip, #31
    if (value == 0)
   177ae:	f01c 0f80 	tst.w	ip, #128	; 0x80
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   177b2:	f04f 0601 	mov.w	r6, #1
   177b6:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
   177ba:	fa06 f605 	lsl.w	r6, r6, r5
    reg->PIN_CNF[pin_number] = cnf;
   177be:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    p_reg->OUTCLR = clr_mask;
   177c2:	bf0c      	ite	eq
   177c4:	f8cc 650c 	streq.w	r6, [ip, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   177c8:	f8cc 6508 	strne.w	r6, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   177cc:	2603      	movs	r6, #3
   177ce:	f84c 6025 	str.w	r6, [ip, r5, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   177d2:	45f0      	cmp	r8, lr
   177d4:	f103 0304 	add.w	r3, r3, #4
   177d8:	d1dd      	bne.n	17796 <nrfx_pwm_init+0xae>
    if (!p_config->skip_psel_cfg)
   177da:	7b4b      	ldrb	r3, [r1, #13]
   177dc:	2b00      	cmp	r3, #0
   177de:	d19a      	bne.n	17716 <nrfx_pwm_init+0x2e>
        nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   177e0:	6803      	ldr	r3, [r0, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
   177e2:	9d00      	ldr	r5, [sp, #0]
   177e4:	f8c3 5560 	str.w	r5, [r3, #1376]	; 0x560
   177e8:	9d01      	ldr	r5, [sp, #4]
   177ea:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
   177ee:	9d02      	ldr	r5, [sp, #8]
   177f0:	f8c3 5568 	str.w	r5, [r3, #1384]	; 0x568
   177f4:	9d03      	ldr	r5, [sp, #12]
   177f6:	f8c3 556c 	str.w	r5, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   177fa:	e78c      	b.n	17716 <nrfx_pwm_init+0x2e>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   177fc:	f8c3 9000 	str.w	r9, [r3]
   17800:	e7e7      	b.n	177d2 <nrfx_pwm_init+0xea>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   17802:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   17804:	f340 3007 	sbfx	r0, r0, #12, #8
   17808:	f7f9 fc56 	bl	110b8 <arch_irq_enable>
   1780c:	e7b3      	b.n	17776 <nrfx_pwm_init+0x8e>
        return err_code;
   1780e:	4803      	ldr	r0, [pc, #12]	; (1781c <nrfx_pwm_init+0x134>)
   17810:	e7b7      	b.n	17782 <nrfx_pwm_init+0x9a>
   17812:	bf00      	nop
   17814:	20001ec4 	.word	0x20001ec4
   17818:	0bad0000 	.word	0x0bad0000
   1781c:	0bad0005 	.word	0x0bad0005

00017820 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   17820:	b470      	push	{r4, r5, r6}
   17822:	460c      	mov	r4, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   17824:	7901      	ldrb	r1, [r0, #4]
   17826:	4d20      	ldr	r5, [pc, #128]	; (178a8 <nrfx_pwm_simple_playback+0x88>)
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   17828:	6826      	ldr	r6, [r4, #0]
   1782a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1782e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   17832:	6805      	ldr	r5, [r0, #0]
   17834:	f8c5 6520 	str.w	r6, [r5, #1312]	; 0x520
    p_reg->SEQ[seq_id].CNT = length;
   17838:	88a6      	ldrh	r6, [r4, #4]
   1783a:	f8c5 6524 	str.w	r6, [r5, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   1783e:	68a6      	ldr	r6, [r4, #8]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   17840:	f8c5 6528 	str.w	r6, [r5, #1320]	; 0x528
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   17844:	68e6      	ldr	r6, [r4, #12]
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   17846:	f8c5 652c 	str.w	r6, [r5, #1324]	; 0x52c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
   1784a:	6805      	ldr	r5, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   1784c:	6826      	ldr	r6, [r4, #0]
   1784e:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
   17852:	88a6      	ldrh	r6, [r4, #4]
   17854:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   17858:	68a6      	ldr	r6, [r4, #8]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   1785a:	f8c5 6548 	str.w	r6, [r5, #1352]	; 0x548
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   1785e:	68e4      	ldr	r4, [r4, #12]
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   17860:	f8c5 454c 	str.w	r4, [r5, #1356]	; 0x54c
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
   17864:	6805      	ldr	r5, [r0, #0]
   17866:	f002 0401 	and.w	r4, r2, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   1786a:	eb04 0252 	add.w	r2, r4, r2, lsr #1
   1786e:	f8c5 2514 	str.w	r2, [r5, #1300]	; 0x514
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   17872:	f013 0f01 	tst.w	r3, #1
   17876:	6805      	ldr	r5, [r0, #0]
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   17878:	b2da      	uxtb	r2, r3
    if (flags & NRFX_PWM_FLAG_STOP)
   1787a:	d10f      	bne.n	1789c <nrfx_pwm_simple_playback+0x7c>
    else if (flags & NRFX_PWM_FLAG_LOOP)
   1787c:	f013 0302 	ands.w	r3, r3, #2
   17880:	d00d      	beq.n	1789e <nrfx_pwm_simple_playback+0x7e>
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   17882:	b934      	cbnz	r4, 17892 <nrfx_pwm_simple_playback+0x72>
    p_reg->SHORTS = mask;
   17884:	2304      	movs	r3, #4
   17886:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
    return start_playback(p_instance, p_cb, flags,
   1788a:	2308      	movs	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   1788c:	bc70      	pop	{r4, r5, r6}
    return start_playback(p_instance, p_cb, flags,
   1788e:	f004 be83 	b.w	1c598 <start_playback>
   17892:	2308      	movs	r3, #8
   17894:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   17898:	230c      	movs	r3, #12
   1789a:	e7f7      	b.n	1788c <nrfx_pwm_simple_playback+0x6c>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   1789c:	2310      	movs	r3, #16
   1789e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
    return start_playback(p_instance, p_cb, flags,
   178a2:	2c00      	cmp	r4, #0
   178a4:	d1f8      	bne.n	17898 <nrfx_pwm_simple_playback+0x78>
   178a6:	e7f0      	b.n	1788a <nrfx_pwm_simple_playback+0x6a>
   178a8:	20001ec4 	.word	0x20001ec4

000178ac <nrfx_pwm_is_stopped>:
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   178ac:	7903      	ldrb	r3, [r0, #4]

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   178ae:	4a08      	ldr	r2, [pc, #32]	; (178d0 <nrfx_pwm_is_stopped+0x24>)
   178b0:	210c      	movs	r1, #12
   178b2:	fb01 2203 	mla	r2, r1, r3, r2
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   178b6:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   178b8:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   178ba:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   178be:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   178c0:	b919      	cbnz	r1, 178ca <nrfx_pwm_is_stopped+0x1e>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   178c2:	1e98      	subs	r0, r3, #2
   178c4:	bf18      	it	ne
   178c6:	2001      	movne	r0, #1
   178c8:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   178ca:	2001      	movs	r0, #1
   178cc:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   178ce:	4770      	bx	lr
   178d0:	20001ec4 	.word	0x20001ec4

000178d4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   178d4:	4b0f      	ldr	r3, [pc, #60]	; (17914 <z_sys_init_run_level+0x40>)
{
   178d6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   178d8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   178dc:	3001      	adds	r0, #1
   178de:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   178e2:	42a6      	cmp	r6, r4
   178e4:	d800      	bhi.n	178e8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   178e6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   178e8:	e9d4 3500 	ldrd	r3, r5, [r4]
   178ec:	4628      	mov	r0, r5
   178ee:	4798      	blx	r3
		if (dev != NULL) {
   178f0:	b16d      	cbz	r5, 1790e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   178f2:	b138      	cbz	r0, 17904 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   178f4:	2800      	cmp	r0, #0
   178f6:	bfb8      	it	lt
   178f8:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   178fa:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   178fc:	28ff      	cmp	r0, #255	; 0xff
   178fe:	bfa8      	it	ge
   17900:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   17902:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   17904:	68ea      	ldr	r2, [r5, #12]
   17906:	7853      	ldrb	r3, [r2, #1]
   17908:	f043 0301 	orr.w	r3, r3, #1
   1790c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1790e:	3408      	adds	r4, #8
   17910:	e7e7      	b.n	178e2 <z_sys_init_run_level+0xe>
   17912:	bf00      	nop
   17914:	0001d944 	.word	0x0001d944

00017918 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   17918:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1791a:	4b0a      	ldr	r3, [pc, #40]	; (17944 <bg_thread_main+0x2c>)
   1791c:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1791e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   17920:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   17922:	f7ff ffd7 	bl	178d4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   17926:	f001 fae7 	bl	18ef8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1792a:	2004      	movs	r0, #4
   1792c:	f7ff ffd2 	bl	178d4 <z_sys_init_run_level>

	z_init_static_threads();
   17930:	f000 f95a 	bl	17be8 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   17934:	f7f8 fc84 	bl	10240 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   17938:	4a03      	ldr	r2, [pc, #12]	; (17948 <bg_thread_main+0x30>)
   1793a:	7b13      	ldrb	r3, [r2, #12]
   1793c:	f023 0301 	bic.w	r3, r3, #1
   17940:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   17942:	bd08      	pop	{r3, pc}
   17944:	2000275c 	.word	0x2000275c
   17948:	20001a78 	.word	0x20001a78

0001794c <z_bss_zero>:
{
   1794c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1794e:	4803      	ldr	r0, [pc, #12]	; (1795c <z_bss_zero+0x10>)
   17950:	4a03      	ldr	r2, [pc, #12]	; (17960 <z_bss_zero+0x14>)
   17952:	2100      	movs	r1, #0
   17954:	1a12      	subs	r2, r2, r0
   17956:	f004 fe82 	bl	1c65e <z_early_memset>
}
   1795a:	bd08      	pop	{r3, pc}
   1795c:	200008c8 	.word	0x200008c8
   17960:	20002760 	.word	0x20002760

00017964 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   17964:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   17966:	4e14      	ldr	r6, [pc, #80]	; (179b8 <z_init_cpu+0x54>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   17968:	4d14      	ldr	r5, [pc, #80]	; (179bc <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   1796a:	4915      	ldr	r1, [pc, #84]	; (179c0 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
   1796c:	2378      	movs	r3, #120	; 0x78
{
   1796e:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   17970:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   17974:	2201      	movs	r2, #1
   17976:	2300      	movs	r3, #0
   17978:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1797c:	220f      	movs	r2, #15
   1797e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   17982:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   17984:	2318      	movs	r3, #24
   17986:	fb03 5500 	mla	r5, r3, r0, r5
{
   1798a:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1798c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
   17990:	4b0c      	ldr	r3, [pc, #48]	; (179c4 <z_init_cpu+0x60>)
   17992:	9500      	str	r5, [sp, #0]
   17994:	f44f 7280 	mov.w	r2, #256	; 0x100
   17998:	4630      	mov	r0, r6
   1799a:	f000 f8cf 	bl	17b3c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1799e:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   179a0:	752c      	strb	r4, [r5, #20]
   179a2:	f023 0304 	bic.w	r3, r3, #4
   179a6:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   179a8:	4b07      	ldr	r3, [pc, #28]	; (179c8 <z_init_cpu+0x64>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   179aa:	60ee      	str	r6, [r5, #12]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   179ac:	3401      	adds	r4, #1
   179ae:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].irq_stack =
   179b2:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   179b4:	b006      	add	sp, #24
   179b6:	bd70      	pop	{r4, r5, r6, pc}
   179b8:	20001a00 	.word	0x20001a00
   179bc:	20001ed0 	.word	0x20001ed0
   179c0:	200046e8 	.word	0x200046e8
   179c4:	00017ca1 	.word	0x00017ca1
   179c8:	20003ee8 	.word	0x20003ee8

000179cc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   179cc:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   179ce:	2000      	movs	r0, #0
{
   179d0:	b0a4      	sub	sp, #144	; 0x90
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   179d2:	f7ff ff7f 	bl	178d4 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   179d6:	4b29      	ldr	r3, [pc, #164]	; (17a7c <z_cstart+0xb0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   179d8:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   179dc:	4c28      	ldr	r4, [pc, #160]	; (17a80 <z_cstart+0xb4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   179de:	4e29      	ldr	r6, [pc, #164]	; (17a84 <z_cstart+0xb8>)
   179e0:	6963      	ldr	r3, [r4, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   179e2:	4f29      	ldr	r7, [pc, #164]	; (17a88 <z_cstart+0xbc>)
   179e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   179e8:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   179ea:	23e0      	movs	r3, #224	; 0xe0
   179ec:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   179f0:	2500      	movs	r5, #0
   179f2:	2320      	movs	r3, #32
   179f4:	77e3      	strb	r3, [r4, #31]
   179f6:	7625      	strb	r5, [r4, #24]
   179f8:	7665      	strb	r5, [r4, #25]
   179fa:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   179fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   179fe:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   17a02:	6263      	str	r3, [r4, #36]	; 0x24
   17a04:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   17a08:	f7f9 fd46 	bl	11498 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   17a0c:	f7f9 fb36 	bl	1107c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   17a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17a14:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   17a16:	62e3      	str	r3, [r4, #44]	; 0x2c
	dummy_thread->base.user_options = K_ESSENTIAL;
   17a18:	f240 1301 	movw	r3, #257	; 0x101
   17a1c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   17a20:	ab06      	add	r3, sp, #24
   17a22:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
   17a24:	9520      	str	r5, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   17a26:	f004 fdf3 	bl	1c610 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   17a2a:	2001      	movs	r0, #1
   17a2c:	f7ff ff52 	bl	178d4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   17a30:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   17a32:	4c16      	ldr	r4, [pc, #88]	; (17a8c <z_cstart+0xc0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   17a34:	f7ff ff4e 	bl	178d4 <z_sys_init_run_level>
	z_sched_init();
   17a38:	f000 fe8a 	bl	18750 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17a3c:	4b14      	ldr	r3, [pc, #80]	; (17a90 <z_cstart+0xc4>)
	_kernel.ready_q.cache = &z_main_thread;
   17a3e:	61f4      	str	r4, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17a40:	9305      	str	r3, [sp, #20]
   17a42:	2301      	movs	r3, #1
   17a44:	4913      	ldr	r1, [pc, #76]	; (17a94 <z_cstart+0xc8>)
   17a46:	9500      	str	r5, [sp, #0]
   17a48:	e9cd 5303 	strd	r5, r3, [sp, #12]
   17a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17a50:	463b      	mov	r3, r7
   17a52:	e9cd 5501 	strd	r5, r5, [sp, #4]
   17a56:	4620      	mov	r0, r4
   17a58:	f000 f870 	bl	17b3c <z_setup_new_thread>
   17a5c:	7b62      	ldrb	r2, [r4, #13]
   17a5e:	4606      	mov	r6, r0
   17a60:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   17a64:	4620      	mov	r0, r4
   17a66:	7362      	strb	r2, [r4, #13]
   17a68:	f005 f912 	bl	1cc90 <z_ready_thread>
	z_init_cpu(0);
   17a6c:	4628      	mov	r0, r5
   17a6e:	f7ff ff79 	bl	17964 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   17a72:	463a      	mov	r2, r7
   17a74:	4631      	mov	r1, r6
   17a76:	4620      	mov	r0, r4
   17a78:	f7f9 fbfa 	bl	11270 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   17a7c:	200046e8 	.word	0x200046e8
   17a80:	e000ed00 	.word	0xe000ed00
   17a84:	20001ed0 	.word	0x20001ed0
   17a88:	00017919 	.word	0x00017919
   17a8c:	20001a78 	.word	0x20001a78
   17a90:	0001dda5 	.word	0x0001dda5
   17a94:	200047e8 	.word	0x200047e8

00017a98 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   17a98:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   17a9a:	4c06      	ldr	r4, [pc, #24]	; (17ab4 <statics_init+0x1c>)
   17a9c:	4d06      	ldr	r5, [pc, #24]	; (17ab8 <statics_init+0x20>)
   17a9e:	42ac      	cmp	r4, r5
   17aa0:	d301      	bcc.n	17aa6 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   17aa2:	2000      	movs	r0, #0
   17aa4:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   17aa6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   17aaa:	4620      	mov	r0, r4
   17aac:	f004 fddb 	bl	1c666 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   17ab0:	3414      	adds	r4, #20
   17ab2:	e7f4      	b.n	17a9e <statics_init+0x6>
   17ab4:	2000077c 	.word	0x2000077c
   17ab8:	2000077c 	.word	0x2000077c

00017abc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   17abc:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17abe:	4c06      	ldr	r4, [pc, #24]	; (17ad8 <init_mem_slab_module+0x1c>)
   17ac0:	4d06      	ldr	r5, [pc, #24]	; (17adc <init_mem_slab_module+0x20>)
	int rc = 0;
   17ac2:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17ac4:	42ac      	cmp	r4, r5
   17ac6:	d300      	bcc.n	17aca <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   17ac8:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   17aca:	4620      	mov	r0, r4
   17acc:	f004 fe3d 	bl	1c74a <create_free_list>
		if (rc < 0) {
   17ad0:	2800      	cmp	r0, #0
   17ad2:	dbf9      	blt.n	17ac8 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17ad4:	341c      	adds	r4, #28
   17ad6:	e7f5      	b.n	17ac4 <init_mem_slab_module+0x8>
   17ad8:	20000728 	.word	0x20000728
   17adc:	2000077c 	.word	0x2000077c

00017ae0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   17ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17ae2:	460c      	mov	r4, r1
	__asm__ volatile(
   17ae4:	f04f 0540 	mov.w	r5, #64	; 0x40
   17ae8:	f3ef 8111 	mrs	r1, BASEPRI
   17aec:	f385 8812 	msr	BASEPRI_MAX, r5
   17af0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   17af4:	6945      	ldr	r5, [r0, #20]
   17af6:	b15d      	cbz	r5, 17b10 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   17af8:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   17afa:	682b      	ldr	r3, [r5, #0]
   17afc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   17afe:	6983      	ldr	r3, [r0, #24]
   17b00:	3301      	adds	r3, #1
   17b02:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   17b04:	2000      	movs	r0, #0
	__asm__ volatile(
   17b06:	f381 8811 	msr	BASEPRI, r1
   17b0a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   17b0e:	e011      	b.n	17b34 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   17b10:	ea52 0603 	orrs.w	r6, r2, r3
   17b14:	d103      	bne.n	17b1e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   17b16:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   17b18:	f06f 000b 	mvn.w	r0, #11
   17b1c:	e7f3      	b.n	17b06 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   17b1e:	e9cd 2300 	strd	r2, r3, [sp]
   17b22:	4602      	mov	r2, r0
   17b24:	3008      	adds	r0, #8
   17b26:	f000 fd1d 	bl	18564 <z_pend_curr>
		if (result == 0) {
   17b2a:	b918      	cbnz	r0, 17b34 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   17b2c:	4b02      	ldr	r3, [pc, #8]	; (17b38 <k_mem_slab_alloc+0x58>)
   17b2e:	689b      	ldr	r3, [r3, #8]
   17b30:	695b      	ldr	r3, [r3, #20]
   17b32:	6023      	str	r3, [r4, #0]
}
   17b34:	b002      	add	sp, #8
   17b36:	bd70      	pop	{r4, r5, r6, pc}
   17b38:	20001ed0 	.word	0x20001ed0

00017b3c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   17b3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   17b3e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   17b40:	7306      	strb	r6, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17b42:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
   17b44:	2604      	movs	r6, #4
   17b46:	7346      	strb	r6, [r0, #13]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   17b48:	f100 0558 	add.w	r5, r0, #88	; 0x58

	thread_base->prio = priority;
   17b4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   17b4e:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17b50:	f022 0207 	bic.w	r2, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   17b54:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	stack_ptr = (char *)stack + stack_obj_size;
   17b58:	188e      	adds	r6, r1, r2
	thread_base->pended_on = NULL;
   17b5a:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17b5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
   17b5e:	6085      	str	r5, [r0, #8]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   17b60:	e9c0 5506 	strd	r5, r5, [r0, #24]

	thread_base->sched_locked = 0U;
   17b64:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17b66:	9202      	str	r2, [sp, #8]
   17b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17b6a:	9201      	str	r2, [sp, #4]
   17b6c:	9a08      	ldr	r2, [sp, #32]
   17b6e:	9200      	str	r2, [sp, #0]
   17b70:	4632      	mov	r2, r6
{
   17b72:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17b74:	f7f9 fb60 	bl	11238 <arch_new_thread>
	if (!_current) {
   17b78:	4b04      	ldr	r3, [pc, #16]	; (17b8c <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
   17b7a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   17b7c:	689b      	ldr	r3, [r3, #8]
   17b7e:	b103      	cbz	r3, 17b82 <z_setup_new_thread+0x46>
	new_thread->resource_pool = _current->resource_pool;
   17b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	return stack_ptr;
   17b82:	66a3      	str	r3, [r4, #104]	; 0x68
}
   17b84:	4630      	mov	r0, r6
   17b86:	b004      	add	sp, #16
   17b88:	bd70      	pop	{r4, r5, r6, pc}
   17b8a:	bf00      	nop
   17b8c:	20001ed0 	.word	0x20001ed0

00017b90 <z_impl_k_thread_create>:
{
   17b90:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b92:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17b94:	2500      	movs	r5, #0
   17b96:	9505      	str	r5, [sp, #20]
   17b98:	9d10      	ldr	r5, [sp, #64]	; 0x40
   17b9a:	9504      	str	r5, [sp, #16]
   17b9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   17b9e:	9503      	str	r5, [sp, #12]
   17ba0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   17ba2:	9502      	str	r5, [sp, #8]
{
   17ba4:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17ba8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   17baa:	9501      	str	r5, [sp, #4]
   17bac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   17bae:	9500      	str	r5, [sp, #0]
{
   17bb0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17bb2:	f7ff ffc3 	bl	17b3c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   17bb6:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   17bba:	bf08      	it	eq
   17bbc:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   17bc0:	d005      	beq.n	17bce <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17bc2:	ea56 0307 	orrs.w	r3, r6, r7
   17bc6:	d105      	bne.n	17bd4 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   17bc8:	4620      	mov	r0, r4
   17bca:	f000 fd41 	bl	18650 <z_sched_start>
}
   17bce:	4620      	mov	r0, r4
   17bd0:	b007      	add	sp, #28
   17bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   17bd4:	4903      	ldr	r1, [pc, #12]	; (17be4 <z_impl_k_thread_create+0x54>)
   17bd6:	463a      	mov	r2, r7
   17bd8:	4633      	mov	r3, r6
   17bda:	f104 0018 	add.w	r0, r4, #24
   17bde:	f000 ff3f 	bl	18a60 <z_add_timeout>
   17be2:	e7f4      	b.n	17bce <z_impl_k_thread_create+0x3e>
   17be4:	0001cbfd 	.word	0x0001cbfd

00017be8 <z_init_static_threads>:
{
   17be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17bec:	4c29      	ldr	r4, [pc, #164]	; (17c94 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   17bee:	4d2a      	ldr	r5, [pc, #168]	; (17c98 <z_init_static_threads+0xb0>)
{
   17bf0:	b087      	sub	sp, #28
   17bf2:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   17bf4:	42ae      	cmp	r6, r5
   17bf6:	f104 0430 	add.w	r4, r4, #48	; 0x30
   17bfa:	d30f      	bcc.n	17c1c <z_init_static_threads+0x34>
	k_sched_lock();
   17bfc:	f000 fd78 	bl	186f0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   17c00:	4c24      	ldr	r4, [pc, #144]	; (17c94 <z_init_static_threads+0xac>)
   17c02:	f8df 9098 	ldr.w	r9, [pc, #152]	; 17c9c <z_init_static_threads+0xb4>
   17c06:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   17c0a:	f240 37e7 	movw	r7, #999	; 0x3e7
   17c0e:	42ac      	cmp	r4, r5
   17c10:	d320      	bcc.n	17c54 <z_init_static_threads+0x6c>
}
   17c12:	b007      	add	sp, #28
   17c14:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   17c18:	f000 bd7e 	b.w	18718 <k_sched_unlock>
		z_setup_new_thread(
   17c1c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   17c20:	9305      	str	r3, [sp, #20]
   17c22:	f854 3c10 	ldr.w	r3, [r4, #-16]
   17c26:	9304      	str	r3, [sp, #16]
   17c28:	f854 3c14 	ldr.w	r3, [r4, #-20]
   17c2c:	9303      	str	r3, [sp, #12]
   17c2e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   17c32:	9302      	str	r3, [sp, #8]
   17c34:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   17c38:	9301      	str	r3, [sp, #4]
   17c3a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   17c3e:	9300      	str	r3, [sp, #0]
   17c40:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   17c44:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   17c48:	f7ff ff78 	bl	17b3c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   17c4c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   17c50:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   17c52:	e7ce      	b.n	17bf2 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   17c54:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17c56:	1c5a      	adds	r2, r3, #1
   17c58:	d00d      	beq.n	17c76 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   17c5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   17c5e:	2100      	movs	r1, #0
   17c60:	4638      	mov	r0, r7
   17c62:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17c66:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   17c6a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17c6e:	d104      	bne.n	17c7a <z_init_static_threads+0x92>
	z_sched_start(thread);
   17c70:	4640      	mov	r0, r8
   17c72:	f000 fced 	bl	18650 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   17c76:	3430      	adds	r4, #48	; 0x30
   17c78:	e7c9      	b.n	17c0e <z_init_static_threads+0x26>
   17c7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17c7e:	2300      	movs	r3, #0
   17c80:	f7e8 fa1a 	bl	b8 <__aeabi_uldivmod>
   17c84:	4602      	mov	r2, r0
   17c86:	460b      	mov	r3, r1
   17c88:	f108 0018 	add.w	r0, r8, #24
   17c8c:	4649      	mov	r1, r9
   17c8e:	f000 fee7 	bl	18a60 <z_add_timeout>
   17c92:	e7f0      	b.n	17c76 <z_init_static_threads+0x8e>
   17c94:	0001d450 	.word	0x0001d450
   17c98:	0001d450 	.word	0x0001d450
   17c9c:	0001cbfd 	.word	0x0001cbfd

00017ca0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   17ca0:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   17ca2:	4c0b      	ldr	r4, [pc, #44]	; (17cd0 <idle+0x30>)
	return !z_sys_post_kernel;
   17ca4:	4d0b      	ldr	r5, [pc, #44]	; (17cd4 <idle+0x34>)
	__asm__ volatile(
   17ca6:	f04f 0240 	mov.w	r2, #64	; 0x40
   17caa:	f3ef 8311 	mrs	r3, BASEPRI
   17cae:	f382 8812 	msr	BASEPRI_MAX, r2
   17cb2:	f3bf 8f6f 	isb	sy
   17cb6:	f005 f8b1 	bl	1ce1c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   17cba:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   17cbc:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   17cbe:	b913      	cbnz	r3, 17cc6 <idle+0x26>
	arch_cpu_idle();
   17cc0:	f7f9 f9e2 	bl	11088 <arch_cpu_idle>
}
   17cc4:	e7ef      	b.n	17ca6 <idle+0x6>
   17cc6:	f7f9 f8ad 	bl	10e24 <pm_system_suspend>
   17cca:	2800      	cmp	r0, #0
   17ccc:	d1eb      	bne.n	17ca6 <idle+0x6>
   17cce:	e7f7      	b.n	17cc0 <idle+0x20>
   17cd0:	20001ed0 	.word	0x20001ed0
   17cd4:	2000275c 	.word	0x2000275c

00017cd8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   17cd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17cdc:	4604      	mov	r4, r0
   17cde:	4617      	mov	r7, r2
   17ce0:	461e      	mov	r6, r3
   17ce2:	f04f 0340 	mov.w	r3, #64	; 0x40
   17ce6:	f3ef 8811 	mrs	r8, BASEPRI
   17cea:	f383 8812 	msr	BASEPRI_MAX, r3
   17cee:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   17cf2:	68c3      	ldr	r3, [r0, #12]
   17cf4:	4a33      	ldr	r2, [pc, #204]	; (17dc4 <z_impl_k_mutex_lock+0xec>)
   17cf6:	b17b      	cbz	r3, 17d18 <z_impl_k_mutex_lock+0x40>
   17cf8:	6880      	ldr	r0, [r0, #8]
   17cfa:	6891      	ldr	r1, [r2, #8]
   17cfc:	4288      	cmp	r0, r1
   17cfe:	d019      	beq.n	17d34 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   17d00:	ea57 0306 	orrs.w	r3, r7, r6
   17d04:	d118      	bne.n	17d38 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   17d06:	f388 8811 	msr	BASEPRI, r8
   17d0a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   17d0e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   17d12:	b002      	add	sp, #8
   17d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   17d18:	6891      	ldr	r1, [r2, #8]
   17d1a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   17d1e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   17d20:	3301      	adds	r3, #1
   17d22:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   17d24:	6893      	ldr	r3, [r2, #8]
   17d26:	60a3      	str	r3, [r4, #8]
   17d28:	f388 8811 	msr	BASEPRI, r8
   17d2c:	f3bf 8f6f 	isb	sy
		return 0;
   17d30:	2000      	movs	r0, #0
   17d32:	e7ee      	b.n	17d12 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   17d34:	6921      	ldr	r1, [r4, #16]
   17d36:	e7f2      	b.n	17d1e <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   17d38:	f991 100e 	ldrsb.w	r1, [r1, #14]
   17d3c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   17d40:	4299      	cmp	r1, r3
   17d42:	bfa8      	it	ge
   17d44:	4619      	movge	r1, r3
   17d46:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   17d4a:	4291      	cmp	r1, r2
   17d4c:	bfb8      	it	lt
   17d4e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   17d50:	428b      	cmp	r3, r1
   17d52:	dd2e      	ble.n	17db2 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   17d54:	f004 fd4a 	bl	1c7ec <adjust_owner_prio.isra.0>
   17d58:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   17d5a:	e9cd 7600 	strd	r7, r6, [sp]
   17d5e:	481a      	ldr	r0, [pc, #104]	; (17dc8 <z_impl_k_mutex_lock+0xf0>)
   17d60:	4622      	mov	r2, r4
   17d62:	4641      	mov	r1, r8
   17d64:	f000 fbfe 	bl	18564 <z_pend_curr>
	if (got_mutex == 0) {
   17d68:	2800      	cmp	r0, #0
   17d6a:	d0e1      	beq.n	17d30 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   17d6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   17d70:	f3ef 8611 	mrs	r6, BASEPRI
   17d74:	f383 8812 	msr	BASEPRI_MAX, r3
   17d78:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   17d7c:	68a0      	ldr	r0, [r4, #8]
   17d7e:	b1d0      	cbz	r0, 17db6 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   17d80:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   17d82:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17d84:	429c      	cmp	r4, r3
   17d86:	d00a      	beq.n	17d9e <z_impl_k_mutex_lock+0xc6>
   17d88:	b14b      	cbz	r3, 17d9e <z_impl_k_mutex_lock+0xc6>
   17d8a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   17d8e:	4299      	cmp	r1, r3
   17d90:	bfa8      	it	ge
   17d92:	4619      	movge	r1, r3
   17d94:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   17d98:	4299      	cmp	r1, r3
   17d9a:	bfb8      	it	lt
   17d9c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   17d9e:	f004 fd25 	bl	1c7ec <adjust_owner_prio.isra.0>
   17da2:	b140      	cbz	r0, 17db6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   17da4:	4808      	ldr	r0, [pc, #32]	; (17dc8 <z_impl_k_mutex_lock+0xf0>)
   17da6:	4631      	mov	r1, r6
   17da8:	f000 fc40 	bl	1862c <z_reschedule>
	return -EAGAIN;
   17dac:	f06f 000a 	mvn.w	r0, #10
   17db0:	e7af      	b.n	17d12 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   17db2:	2500      	movs	r5, #0
   17db4:	e7d1      	b.n	17d5a <z_impl_k_mutex_lock+0x82>
	if (resched) {
   17db6:	2d00      	cmp	r5, #0
   17db8:	d1f4      	bne.n	17da4 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   17dba:	f386 8811 	msr	BASEPRI, r6
   17dbe:	f3bf 8f6f 	isb	sy
   17dc2:	e7f3      	b.n	17dac <z_impl_k_mutex_lock+0xd4>
   17dc4:	20001ed0 	.word	0x20001ed0
   17dc8:	2000275d 	.word	0x2000275d

00017dcc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   17dcc:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   17dce:	6883      	ldr	r3, [r0, #8]
{
   17dd0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   17dd2:	b36b      	cbz	r3, 17e30 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   17dd4:	4a19      	ldr	r2, [pc, #100]	; (17e3c <z_impl_k_mutex_unlock+0x70>)
   17dd6:	6892      	ldr	r2, [r2, #8]
   17dd8:	4293      	cmp	r3, r2
   17dda:	d12c      	bne.n	17e36 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   17ddc:	68c3      	ldr	r3, [r0, #12]
   17dde:	2b01      	cmp	r3, #1
   17de0:	d903      	bls.n	17dea <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   17de2:	3b01      	subs	r3, #1
   17de4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   17de6:	2000      	movs	r0, #0
}
   17de8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   17dea:	f04f 0340 	mov.w	r3, #64	; 0x40
   17dee:	f3ef 8511 	mrs	r5, BASEPRI
   17df2:	f383 8812 	msr	BASEPRI_MAX, r3
   17df6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   17dfa:	6901      	ldr	r1, [r0, #16]
   17dfc:	6880      	ldr	r0, [r0, #8]
   17dfe:	f004 fcf5 	bl	1c7ec <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   17e02:	4620      	mov	r0, r4
   17e04:	f004 ff7b 	bl	1ccfe <z_unpend_first_thread>
	mutex->owner = new_owner;
   17e08:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   17e0a:	b158      	cbz	r0, 17e24 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   17e0c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   17e10:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   17e12:	2200      	movs	r2, #0
   17e14:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
   17e16:	f004 ff3b 	bl	1cc90 <z_ready_thread>
		z_reschedule(&lock, key);
   17e1a:	4809      	ldr	r0, [pc, #36]	; (17e40 <z_impl_k_mutex_unlock+0x74>)
   17e1c:	4629      	mov	r1, r5
   17e1e:	f000 fc05 	bl	1862c <z_reschedule>
   17e22:	e7e0      	b.n	17de6 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   17e24:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   17e26:	f385 8811 	msr	BASEPRI, r5
   17e2a:	f3bf 8f6f 	isb	sy
   17e2e:	e7da      	b.n	17de6 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   17e30:	f06f 0015 	mvn.w	r0, #21
   17e34:	e7d8      	b.n	17de8 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   17e36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17e3a:	e7d5      	b.n	17de8 <z_impl_k_mutex_unlock+0x1c>
   17e3c:	20001ed0 	.word	0x20001ed0
   17e40:	2000275d 	.word	0x2000275d

00017e44 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   17e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17e46:	4611      	mov	r1, r2
	__asm__ volatile(
   17e48:	f04f 0240 	mov.w	r2, #64	; 0x40
   17e4c:	f3ef 8511 	mrs	r5, BASEPRI
   17e50:	f382 8812 	msr	BASEPRI_MAX, r2
   17e54:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   17e58:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   17e5a:	b19c      	cbz	r4, 17e84 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17e5c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17e5e:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17e60:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17e64:	4294      	cmp	r4, r2
	list->head = node;
   17e66:	6003      	str	r3, [r0, #0]
	list->tail = node;
   17e68:	bf08      	it	eq
   17e6a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   17e6c:	2101      	movs	r1, #1
   17e6e:	4620      	mov	r0, r4
   17e70:	f004 fd2a 	bl	1c8c8 <z_queue_node_peek>
   17e74:	4604      	mov	r4, r0
	__asm__ volatile(
   17e76:	f385 8811 	msr	BASEPRI, r5
   17e7a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   17e7e:	4620      	mov	r0, r4
   17e80:	b003      	add	sp, #12
   17e82:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17e84:	ea51 0203 	orrs.w	r2, r1, r3
   17e88:	d0f5      	beq.n	17e76 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   17e8a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   17e8e:	e9cd 1300 	strd	r1, r3, [sp]
   17e92:	4610      	mov	r0, r2
   17e94:	4629      	mov	r1, r5
   17e96:	f000 fb65 	bl	18564 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   17e9a:	2800      	cmp	r0, #0
   17e9c:	d1ef      	bne.n	17e7e <z_impl_k_queue_get+0x3a>
   17e9e:	4b02      	ldr	r3, [pc, #8]	; (17ea8 <z_impl_k_queue_get+0x64>)
   17ea0:	689b      	ldr	r3, [r3, #8]
   17ea2:	695c      	ldr	r4, [r3, #20]
   17ea4:	e7eb      	b.n	17e7e <z_impl_k_queue_get+0x3a>
   17ea6:	bf00      	nop
   17ea8:	20001ed0 	.word	0x20001ed0

00017eac <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   17eac:	b538      	push	{r3, r4, r5, lr}
   17eae:	4604      	mov	r4, r0
	__asm__ volatile(
   17eb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   17eb4:	f3ef 8511 	mrs	r5, BASEPRI
   17eb8:	f383 8812 	msr	BASEPRI_MAX, r3
   17ebc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   17ec0:	f004 ff1d 	bl	1ccfe <z_unpend_first_thread>

	if (thread != NULL) {
   17ec4:	b148      	cbz	r0, 17eda <z_impl_k_sem_give+0x2e>
   17ec6:	2200      	movs	r2, #0
   17ec8:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   17eca:	f004 fee1 	bl	1cc90 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   17ece:	4629      	mov	r1, r5
   17ed0:	4808      	ldr	r0, [pc, #32]	; (17ef4 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   17ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   17ed6:	f000 bba9 	b.w	1862c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   17eda:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   17ede:	429a      	cmp	r2, r3
   17ee0:	bf18      	it	ne
   17ee2:	3301      	addne	r3, #1
   17ee4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   17ee6:	2102      	movs	r1, #2
   17ee8:	f104 0010 	add.w	r0, r4, #16
   17eec:	f005 f94b 	bl	1d186 <z_handle_obj_poll_events>
}
   17ef0:	e7ed      	b.n	17ece <z_impl_k_sem_give+0x22>
   17ef2:	bf00      	nop
   17ef4:	2000275d 	.word	0x2000275d

00017ef8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   17ef8:	b513      	push	{r0, r1, r4, lr}
   17efa:	f04f 0440 	mov.w	r4, #64	; 0x40
   17efe:	f3ef 8111 	mrs	r1, BASEPRI
   17f02:	f384 8812 	msr	BASEPRI_MAX, r4
   17f06:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   17f0a:	6884      	ldr	r4, [r0, #8]
   17f0c:	b144      	cbz	r4, 17f20 <z_impl_k_sem_take+0x28>
		sem->count--;
   17f0e:	3c01      	subs	r4, #1
   17f10:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   17f12:	f381 8811 	msr	BASEPRI, r1
   17f16:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   17f1a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   17f1c:	b002      	add	sp, #8
   17f1e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17f20:	ea52 0403 	orrs.w	r4, r2, r3
   17f24:	d106      	bne.n	17f34 <z_impl_k_sem_take+0x3c>
   17f26:	f381 8811 	msr	BASEPRI, r1
   17f2a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   17f2e:	f06f 000f 	mvn.w	r0, #15
   17f32:	e7f3      	b.n	17f1c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   17f34:	e9cd 2300 	strd	r2, r3, [sp]
   17f38:	4602      	mov	r2, r0
   17f3a:	4802      	ldr	r0, [pc, #8]	; (17f44 <z_impl_k_sem_take+0x4c>)
   17f3c:	f000 fb12 	bl	18564 <z_pend_curr>
	return ret;
   17f40:	e7ec      	b.n	17f1c <z_impl_k_sem_take+0x24>
   17f42:	bf00      	nop
   17f44:	2000275d 	.word	0x2000275d

00017f48 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   17f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   17f4a:	4b09      	ldr	r3, [pc, #36]	; (17f70 <k_sys_work_q_init+0x28>)
   17f4c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   17f4e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   17f50:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   17f52:	9300      	str	r3, [sp, #0]
   17f54:	4907      	ldr	r1, [pc, #28]	; (17f74 <k_sys_work_q_init+0x2c>)
   17f56:	4808      	ldr	r0, [pc, #32]	; (17f78 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   17f58:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   17f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17f64:	f000 f91e 	bl	181a4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   17f68:	4620      	mov	r0, r4
   17f6a:	b004      	add	sp, #16
   17f6c:	bd10      	pop	{r4, pc}
   17f6e:	bf00      	nop
   17f70:	0001ddaa 	.word	0x0001ddaa
   17f74:	20004be8 	.word	0x20004be8
   17f78:	20001af0 	.word	0x20001af0

00017f7c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   17f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   17f80:	4e48      	ldr	r6, [pc, #288]	; (180a4 <work_queue_main+0x128>)
   17f82:	b085      	sub	sp, #20
   17f84:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   17f86:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   17f8a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   17f8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   17f92:	f3ef 8711 	mrs	r7, BASEPRI
   17f96:	f383 8812 	msr	BASEPRI_MAX, r3
   17f9a:	f3bf 8f6f 	isb	sy
   17f9e:	6fa5      	ldr	r5, [r4, #120]	; 0x78
Z_GENLIST_GET(slist, snode)
   17fa0:	b98d      	cbnz	r5, 17fc6 <work_queue_main+0x4a>
		} else if (flag_test_and_clear(&queue->flags,
   17fa2:	2102      	movs	r1, #2
   17fa4:	f104 0090 	add.w	r0, r4, #144	; 0x90
   17fa8:	f004 fd0a 	bl	1c9c0 <flag_test_and_clear>
   17fac:	2800      	cmp	r0, #0
   17fae:	d140      	bne.n	18032 <work_queue_main+0xb6>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   17fb0:	2300      	movs	r3, #0
   17fb2:	e9cd 8900 	strd	r8, r9, [sp]
   17fb6:	9302      	str	r3, [sp, #8]
   17fb8:	f104 0280 	add.w	r2, r4, #128	; 0x80
   17fbc:	4639      	mov	r1, r7
   17fbe:	483a      	ldr	r0, [pc, #232]	; (180a8 <work_queue_main+0x12c>)
   17fc0:	f000 fcd4 	bl	1896c <z_sched_wait>
			continue;
   17fc4:	e7e3      	b.n	17f8e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17fc6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
	return node->next;
   17fc8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   17fca:	67a3      	str	r3, [r4, #120]	; 0x78
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17fcc:	4295      	cmp	r5, r2
	list->tail = node;
   17fce:	bf08      	it	eq
   17fd0:	67e3      	streq	r3, [r4, #124]	; 0x7c
	*flagp |= BIT(bit);
   17fd2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   17fd6:	f043 0302 	orr.w	r3, r3, #2
   17fda:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	*flagp &= ~BIT(bit);
   17fde:	68eb      	ldr	r3, [r5, #12]
   17fe0:	f023 0304 	bic.w	r3, r3, #4
   17fe4:	f043 0301 	orr.w	r3, r3, #1
   17fe8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   17fea:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   17fec:	f387 8811 	msr	BASEPRI, r7
   17ff0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   17ff4:	4628      	mov	r0, r5
   17ff6:	4798      	blx	r3
	__asm__ volatile(
   17ff8:	f04f 0340 	mov.w	r3, #64	; 0x40
   17ffc:	f3ef 8b11 	mrs	fp, BASEPRI
   18000:	f383 8812 	msr	BASEPRI_MAX, r3
   18004:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   18008:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1800a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1800c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18010:	d419      	bmi.n	18046 <work_queue_main+0xca>
	*flagp &= ~BIT(bit);
   18012:	60ea      	str	r2, [r5, #12]
   18014:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   18018:	f023 0302 	bic.w	r3, r3, #2
   1801c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	__asm__ volatile(
   18020:	f38b 8811 	msr	BASEPRI, fp
   18024:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   18028:	05db      	lsls	r3, r3, #23
   1802a:	d4b0      	bmi.n	17f8e <work_queue_main+0x12>
	z_impl_k_yield();
   1802c:	f000 fb9c 	bl	18768 <z_impl_k_yield>
}
   18030:	e7ad      	b.n	17f8e <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   18032:	f104 0588 	add.w	r5, r4, #136	; 0x88
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   18036:	2200      	movs	r2, #0
   18038:	2101      	movs	r1, #1
   1803a:	4628      	mov	r0, r5
   1803c:	f004 feb5 	bl	1cdaa <z_sched_wake>
   18040:	2800      	cmp	r0, #0
   18042:	d1f8      	bne.n	18036 <work_queue_main+0xba>
   18044:	e7b4      	b.n	17fb0 <work_queue_main+0x34>
	return list->head;
   18046:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   18048:	f023 0303 	bic.w	r3, r3, #3
   1804c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1804e:	2800      	cmp	r0, #0
   18050:	d0e0      	beq.n	18014 <work_queue_main+0x98>
	return node->next;
   18052:	2700      	movs	r7, #0
   18054:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   18058:	463b      	mov	r3, r7
   1805a:	2800      	cmp	r0, #0
   1805c:	d0da      	beq.n	18014 <work_queue_main+0x98>
		if (wc->work == work) {
   1805e:	6842      	ldr	r2, [r0, #4]
   18060:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   18062:	4601      	mov	r1, r0
		if (wc->work == work) {
   18064:	d10c      	bne.n	18080 <work_queue_main+0x104>
	return node->next;
   18066:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   18068:	b99f      	cbnz	r7, 18092 <work_queue_main+0x116>
   1806a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1806c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1806e:	4282      	cmp	r2, r0
   18070:	d100      	bne.n	18074 <work_queue_main+0xf8>
	list->tail = node;
   18072:	6071      	str	r1, [r6, #4]
	parent->next = child;
   18074:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   18078:	f7ff ff18 	bl	17eac <z_impl_k_sem_give>
}
   1807c:	4639      	mov	r1, r7
   1807e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18080:	f1ba 0f00 	cmp.w	sl, #0
   18084:	d00b      	beq.n	1809e <work_queue_main+0x122>
	return node->next;
   18086:	f8da 2000 	ldr.w	r2, [sl]
   1808a:	4650      	mov	r0, sl
   1808c:	460f      	mov	r7, r1
   1808e:	4692      	mov	sl, r2
   18090:	e7e3      	b.n	1805a <work_queue_main+0xde>
	parent->next = child;
   18092:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   18094:	6872      	ldr	r2, [r6, #4]
   18096:	4282      	cmp	r2, r0
	list->tail = node;
   18098:	bf08      	it	eq
   1809a:	6077      	streq	r7, [r6, #4]
}
   1809c:	e7ea      	b.n	18074 <work_queue_main+0xf8>
   1809e:	4652      	mov	r2, sl
   180a0:	e7f3      	b.n	1808a <work_queue_main+0x10e>
   180a2:	bf00      	nop
   180a4:	20001ef8 	.word	0x20001ef8
   180a8:	2000275d 	.word	0x2000275d

000180ac <cancel_sync_locked>:
{
   180ac:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   180ae:	68c3      	ldr	r3, [r0, #12]
   180b0:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   180b4:	079b      	lsls	r3, r3, #30
{
   180b6:	4605      	mov	r5, r0
   180b8:	460c      	mov	r4, r1
	if (ret) {
   180ba:	d50d      	bpl.n	180d8 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   180bc:	2201      	movs	r2, #1
   180be:	2100      	movs	r1, #0
   180c0:	f104 0008 	add.w	r0, r4, #8
   180c4:	f004 fc6c 	bl	1c9a0 <z_impl_k_sem_init>
	parent->next = child;
   180c8:	2300      	movs	r3, #0
   180ca:	6023      	str	r3, [r4, #0]
	return list->tail;
   180cc:	4b05      	ldr	r3, [pc, #20]	; (180e4 <cancel_sync_locked+0x38>)
	canceler->work = work;
   180ce:	6065      	str	r5, [r4, #4]
   180d0:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   180d2:	b91a      	cbnz	r2, 180dc <cancel_sync_locked+0x30>
	list->head = node;
   180d4:	e9c3 4400 	strd	r4, r4, [r3]
}
   180d8:	4630      	mov	r0, r6
   180da:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   180dc:	6014      	str	r4, [r2, #0]
	list->tail = node;
   180de:	605c      	str	r4, [r3, #4]
}
   180e0:	e7fa      	b.n	180d8 <cancel_sync_locked+0x2c>
   180e2:	bf00      	nop
   180e4:	20001ef8 	.word	0x20001ef8

000180e8 <submit_to_queue_locked>:
{
   180e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   180ea:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   180ec:	079a      	lsls	r2, r3, #30
{
   180ee:	4604      	mov	r4, r0
   180f0:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   180f2:	f3c3 0640 	ubfx	r6, r3, #1, #1
   180f6:	d42c      	bmi.n	18152 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   180f8:	075b      	lsls	r3, r3, #29
   180fa:	d41a      	bmi.n	18132 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   180fc:	680b      	ldr	r3, [r1, #0]
   180fe:	b90b      	cbnz	r3, 18104 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   18100:	6883      	ldr	r3, [r0, #8]
   18102:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   18104:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   18106:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   18108:	bf44      	itt	mi
   1810a:	68a3      	ldrmi	r3, [r4, #8]
   1810c:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   1810e:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   18110:	bf4c      	ite	mi
   18112:	2602      	movmi	r6, #2
		ret = 1;
   18114:	2601      	movpl	r6, #1
	if (queue == NULL) {
   18116:	2d00      	cmp	r5, #0
   18118:	d038      	beq.n	1818c <submit_to_queue_locked+0xa4>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1811a:	4b1e      	ldr	r3, [pc, #120]	; (18194 <submit_to_queue_locked+0xac>)
   1811c:	689b      	ldr	r3, [r3, #8]
   1811e:	42ab      	cmp	r3, r5
   18120:	d00a      	beq.n	18138 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   18122:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18126:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   18128:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1812c:	d414      	bmi.n	18158 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   1812e:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   18132:	2300      	movs	r3, #0
   18134:	603b      	str	r3, [r7, #0]
	return ret;
   18136:	e024      	b.n	18182 <submit_to_queue_locked+0x9a>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   18138:	f004 fb46 	bl	1c7c8 <k_is_in_isr>
   1813c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   18140:	2800      	cmp	r0, #0
   18142:	d1f0      	bne.n	18126 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18144:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   18146:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1814a:	d5f0      	bpl.n	1812e <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   1814c:	b152      	cbz	r2, 18164 <submit_to_queue_locked+0x7c>
   1814e:	075b      	lsls	r3, r3, #29
   18150:	d408      	bmi.n	18164 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   18152:	f06f 060f 	mvn.w	r6, #15
   18156:	e7ec      	b.n	18132 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   18158:	2a00      	cmp	r2, #0
   1815a:	d1fa      	bne.n	18152 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   1815c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   18160:	2b00      	cmp	r3, #0
   18162:	d1f6      	bne.n	18152 <submit_to_queue_locked+0x6a>
	parent->next = child;
   18164:	2300      	movs	r3, #0
   18166:	6023      	str	r3, [r4, #0]
	return list->tail;
   18168:	6feb      	ldr	r3, [r5, #124]	; 0x7c
Z_GENLIST_APPEND(slist, snode)
   1816a:	b963      	cbnz	r3, 18186 <submit_to_queue_locked+0x9e>
	list->head = node;
   1816c:	e9c5 441e 	strd	r4, r4, [r5, #120]	; 0x78
		(void)notify_queue_locked(queue);
   18170:	4628      	mov	r0, r5
   18172:	f004 fc3e 	bl	1c9f2 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   18176:	68e3      	ldr	r3, [r4, #12]
   18178:	f043 0304 	orr.w	r3, r3, #4
   1817c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1817e:	683b      	ldr	r3, [r7, #0]
   18180:	60a3      	str	r3, [r4, #8]
}
   18182:	4630      	mov	r0, r6
   18184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   18186:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18188:	67ec      	str	r4, [r5, #124]	; 0x7c
}
   1818a:	e7f1      	b.n	18170 <submit_to_queue_locked+0x88>
		return -EINVAL;
   1818c:	f06f 0615 	mvn.w	r6, #21
   18190:	e7cf      	b.n	18132 <submit_to_queue_locked+0x4a>
   18192:	bf00      	nop
   18194:	20001ed0 	.word	0x20001ed0

00018198 <k_work_submit>:
{
   18198:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1819a:	4801      	ldr	r0, [pc, #4]	; (181a0 <k_work_submit+0x8>)
   1819c:	f004 bca9 	b.w	1caf2 <k_work_submit_to_queue>
   181a0:	20001af0 	.word	0x20001af0

000181a4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   181a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   181a6:	b089      	sub	sp, #36	; 0x24
   181a8:	4604      	mov	r4, r0
	list->head = NULL;
   181aa:	2000      	movs	r0, #0
	list->tail = NULL;
   181ac:	e9c4 001e 	strd	r0, r0, [r4, #120]	; 0x78
   181b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   181b2:	f104 0080 	add.w	r0, r4, #128	; 0x80
	list->tail = (sys_dnode_t *)list;
   181b6:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   181ba:	f104 0088 	add.w	r0, r4, #136	; 0x88
   181be:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   181c2:	b31d      	cbz	r5, 1820c <k_work_queue_start+0x68>
   181c4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   181c6:	2800      	cmp	r0, #0
   181c8:	f240 1001 	movw	r0, #257	; 0x101
   181cc:	bf08      	it	eq
   181ce:	2001      	moveq	r0, #1
	*flagp = flags;
   181d0:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   181d4:	2000      	movs	r0, #0
   181d6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   181da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   181de:	e9cd 3003 	strd	r3, r0, [sp, #12]
   181e2:	e9cd 0001 	strd	r0, r0, [sp, #4]
   181e6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   181ea:	4b09      	ldr	r3, [pc, #36]	; (18210 <k_work_queue_start+0x6c>)
   181ec:	9400      	str	r4, [sp, #0]
   181ee:	4620      	mov	r0, r4
   181f0:	f7ff fcce 	bl	17b90 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   181f4:	b125      	cbz	r5, 18200 <k_work_queue_start+0x5c>
   181f6:	6829      	ldr	r1, [r5, #0]
   181f8:	b111      	cbz	r1, 18200 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   181fa:	4620      	mov	r0, r4
   181fc:	f004 faea 	bl	1c7d4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   18200:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   18202:	b009      	add	sp, #36	; 0x24
   18204:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   18208:	f004 bae7 	b.w	1c7da <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1820c:	2001      	movs	r0, #1
   1820e:	e7df      	b.n	181d0 <k_work_queue_start+0x2c>
   18210:	00017f7d 	.word	0x00017f7d

00018214 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   18214:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18216:	9001      	str	r0, [sp, #4]
   18218:	4608      	mov	r0, r1
	__asm__ volatile(
   1821a:	f04f 0140 	mov.w	r1, #64	; 0x40
   1821e:	f3ef 8411 	mrs	r4, BASEPRI
   18222:	f381 8812 	msr	BASEPRI_MAX, r1
   18226:	f3bf 8f6f 	isb	sy
	return *flagp;
   1822a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1822c:	f011 0f0e 	tst.w	r1, #14
   18230:	d116      	bne.n	18260 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18232:	ea53 0502 	orrs.w	r5, r3, r2
   18236:	d108      	bne.n	1824a <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   18238:	a901      	add	r1, sp, #4
   1823a:	f7ff ff55 	bl	180e8 <submit_to_queue_locked>
	__asm__ volatile(
   1823e:	f384 8811 	msr	BASEPRI, r4
   18242:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   18246:	b003      	add	sp, #12
   18248:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   1824a:	f041 0108 	orr.w	r1, r1, #8
   1824e:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   18250:	9901      	ldr	r1, [sp, #4]
   18252:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   18254:	3010      	adds	r0, #16
   18256:	4903      	ldr	r1, [pc, #12]	; (18264 <k_work_schedule_for_queue+0x50>)
   18258:	f000 fc02 	bl	18a60 <z_add_timeout>
	return ret;
   1825c:	2001      	movs	r0, #1
   1825e:	e7ee      	b.n	1823e <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   18260:	2000      	movs	r0, #0
   18262:	e7ec      	b.n	1823e <k_work_schedule_for_queue+0x2a>
   18264:	0001ca5b 	.word	0x0001ca5b

00018268 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   18268:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1826a:	4801      	ldr	r0, [pc, #4]	; (18270 <k_work_schedule+0x8>)
   1826c:	f7ff bfd2 	b.w	18214 <k_work_schedule_for_queue>
   18270:	20001af0 	.word	0x20001af0

00018274 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   18274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18276:	460c      	mov	r4, r1
   18278:	9001      	str	r0, [sp, #4]
   1827a:	4616      	mov	r6, r2
   1827c:	461d      	mov	r5, r3
	__asm__ volatile(
   1827e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18282:	f3ef 8711 	mrs	r7, BASEPRI
   18286:	f383 8812 	msr	BASEPRI_MAX, r3
   1828a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1828e:	4608      	mov	r0, r1
   18290:	f004 fba1 	bl	1c9d6 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18294:	ea55 0306 	orrs.w	r3, r5, r6
   18298:	d109      	bne.n	182ae <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1829a:	a901      	add	r1, sp, #4
   1829c:	4620      	mov	r0, r4
   1829e:	f7ff ff23 	bl	180e8 <submit_to_queue_locked>
	__asm__ volatile(
   182a2:	f387 8811 	msr	BASEPRI, r7
   182a6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   182aa:	b003      	add	sp, #12
   182ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   182ae:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   182b0:	4906      	ldr	r1, [pc, #24]	; (182cc <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   182b2:	f043 0308 	orr.w	r3, r3, #8
   182b6:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   182b8:	9b01      	ldr	r3, [sp, #4]
   182ba:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   182bc:	f104 0010 	add.w	r0, r4, #16
   182c0:	4632      	mov	r2, r6
   182c2:	462b      	mov	r3, r5
   182c4:	f000 fbcc 	bl	18a60 <z_add_timeout>
	return ret;
   182c8:	2001      	movs	r0, #1
   182ca:	e7ea      	b.n	182a2 <k_work_reschedule_for_queue+0x2e>
   182cc:	0001ca5b 	.word	0x0001ca5b

000182d0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   182d0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   182d2:	4801      	ldr	r0, [pc, #4]	; (182d8 <k_work_reschedule+0x8>)
   182d4:	f7ff bfce 	b.w	18274 <k_work_reschedule_for_queue>
   182d8:	20001af0 	.word	0x20001af0

000182dc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   182dc:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   182de:	4d07      	ldr	r5, [pc, #28]	; (182fc <z_reset_time_slice+0x20>)
   182e0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   182e2:	b154      	cbz	r4, 182fa <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   182e4:	f7fd ff36 	bl	16154 <sys_clock_elapsed>
   182e8:	4b05      	ldr	r3, [pc, #20]	; (18300 <z_reset_time_slice+0x24>)
   182ea:	4404      	add	r4, r0
   182ec:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   182ee:	6828      	ldr	r0, [r5, #0]
   182f0:	2100      	movs	r1, #0
	}
}
   182f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   182f6:	f004 bda1 	b.w	1ce3c <z_set_timeout_expiry>
}
   182fa:	bd38      	pop	{r3, r4, r5, pc}
   182fc:	20001f08 	.word	0x20001f08
   18300:	20001ed0 	.word	0x20001ed0

00018304 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   18304:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   18306:	4d0d      	ldr	r5, [pc, #52]	; (1833c <update_cache+0x38>)
   18308:	462b      	mov	r3, r5
   1830a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1830e:	429c      	cmp	r4, r3
   18310:	d000      	beq.n	18314 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   18312:	b904      	cbnz	r4, 18316 <update_cache+0x12>
   18314:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   18316:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   18318:	b938      	cbnz	r0, 1832a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   1831a:	7b5a      	ldrb	r2, [r3, #13]
   1831c:	06d2      	lsls	r2, r2, #27
   1831e:	d104      	bne.n	1832a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   18320:	69a2      	ldr	r2, [r4, #24]
   18322:	b912      	cbnz	r2, 1832a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   18324:	89da      	ldrh	r2, [r3, #14]
   18326:	2a7f      	cmp	r2, #127	; 0x7f
   18328:	d805      	bhi.n	18336 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1832a:	429c      	cmp	r4, r3
   1832c:	d002      	beq.n	18334 <update_cache+0x30>
			z_reset_time_slice(thread);
   1832e:	4620      	mov	r0, r4
   18330:	f7ff ffd4 	bl	182dc <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   18334:	4623      	mov	r3, r4
   18336:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   18338:	bd38      	pop	{r3, r4, r5, pc}
   1833a:	bf00      	nop
   1833c:	20001ed0 	.word	0x20001ed0

00018340 <move_thread_to_end_of_prio_q>:
{
   18340:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   18342:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   18346:	7b43      	ldrb	r3, [r0, #13]
   18348:	2a00      	cmp	r2, #0
{
   1834a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1834c:	da04      	bge.n	18358 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1834e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18352:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   18354:	f004 fc37 	bl	1cbc6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   18358:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1835a:	4a15      	ldr	r2, [pc, #84]	; (183b0 <move_thread_to_end_of_prio_q+0x70>)
   1835c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18360:	4610      	mov	r0, r2
   18362:	734b      	strb	r3, [r1, #13]
   18364:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   18368:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1836a:	4283      	cmp	r3, r0
   1836c:	bf08      	it	eq
   1836e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18370:	b923      	cbnz	r3, 1837c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   18372:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   18376:	6021      	str	r1, [r4, #0]
	list->tail = node;
   18378:	6251      	str	r1, [r2, #36]	; 0x24
}
   1837a:	e00c      	b.n	18396 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   1837c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   18380:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   18384:	42b5      	cmp	r5, r6
   18386:	d00e      	beq.n	183a6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   18388:	42ae      	cmp	r6, r5
   1838a:	dd0c      	ble.n	183a6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1838c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1838e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   18392:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   18394:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   18396:	6890      	ldr	r0, [r2, #8]
   18398:	1a43      	subs	r3, r0, r1
   1839a:	4258      	negs	r0, r3
}
   1839c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   183a0:	4158      	adcs	r0, r3
   183a2:	f7ff bfaf 	b.w	18304 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   183a6:	429c      	cmp	r4, r3
   183a8:	d0e3      	beq.n	18372 <move_thread_to_end_of_prio_q+0x32>
   183aa:	681b      	ldr	r3, [r3, #0]
   183ac:	e7e0      	b.n	18370 <move_thread_to_end_of_prio_q+0x30>
   183ae:	bf00      	nop
   183b0:	20001ed0 	.word	0x20001ed0

000183b4 <ready_thread>:
{
   183b4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   183b6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   183ba:	7b42      	ldrb	r2, [r0, #13]
   183bc:	2b00      	cmp	r3, #0
   183be:	db29      	blt.n	18414 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   183c0:	06d3      	lsls	r3, r2, #27
   183c2:	d127      	bne.n	18414 <ready_thread+0x60>
	return node->next != NULL;
   183c4:	6983      	ldr	r3, [r0, #24]
   183c6:	bb2b      	cbnz	r3, 18414 <ready_thread+0x60>
	return list->head == list;
   183c8:	4913      	ldr	r1, [pc, #76]	; (18418 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   183ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
   183ce:	7342      	strb	r2, [r0, #13]
   183d0:	460a      	mov	r2, r1
   183d2:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   183d6:	4294      	cmp	r4, r2
   183d8:	bf18      	it	ne
   183da:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   183dc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   183de:	b923      	cbnz	r3, 183ea <ready_thread+0x36>
	node->prev = tail;
   183e0:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   183e4:	6020      	str	r0, [r4, #0]
	list->tail = node;
   183e6:	6248      	str	r0, [r1, #36]	; 0x24
}
   183e8:	e00c      	b.n	18404 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   183ea:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   183ee:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   183f2:	42b5      	cmp	r5, r6
   183f4:	d00a      	beq.n	1840c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   183f6:	42ae      	cmp	r6, r5
   183f8:	dd08      	ble.n	1840c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   183fa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   183fc:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   18400:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   18402:	6058      	str	r0, [r3, #4]
}
   18404:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   18406:	2000      	movs	r0, #0
   18408:	f7ff bf7c 	b.w	18304 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1840c:	42a3      	cmp	r3, r4
   1840e:	d0e7      	beq.n	183e0 <ready_thread+0x2c>
   18410:	681b      	ldr	r3, [r3, #0]
   18412:	e7e4      	b.n	183de <ready_thread+0x2a>
}
   18414:	bc70      	pop	{r4, r5, r6}
   18416:	4770      	bx	lr
   18418:	20001ed0 	.word	0x20001ed0

0001841c <unready_thread>:
{
   1841c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1841e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   18422:	7b43      	ldrb	r3, [r0, #13]
   18424:	2a00      	cmp	r2, #0
{
   18426:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   18428:	da04      	bge.n	18434 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1842a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1842e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18430:	f004 fbc9 	bl	1cbc6 <sys_dlist_remove>
	update_cache(thread == _current);
   18434:	4b04      	ldr	r3, [pc, #16]	; (18448 <unready_thread+0x2c>)
   18436:	6898      	ldr	r0, [r3, #8]
   18438:	1a43      	subs	r3, r0, r1
   1843a:	4258      	negs	r0, r3
   1843c:	4158      	adcs	r0, r3
}
   1843e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   18442:	f7ff bf5f 	b.w	18304 <update_cache>
   18446:	bf00      	nop
   18448:	20001ed0 	.word	0x20001ed0

0001844c <pend_locked>:
{
   1844c:	b570      	push	{r4, r5, r6, lr}
   1844e:	4615      	mov	r5, r2
   18450:	461c      	mov	r4, r3
   18452:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   18454:	f004 fbf4 	bl	1cc40 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18458:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1845c:	bf08      	it	eq
   1845e:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   18462:	d008      	beq.n	18476 <pend_locked+0x2a>
   18464:	462a      	mov	r2, r5
   18466:	4623      	mov	r3, r4
   18468:	f106 0018 	add.w	r0, r6, #24
   1846c:	4902      	ldr	r1, [pc, #8]	; (18478 <pend_locked+0x2c>)
}
   1846e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18472:	f000 baf5 	b.w	18a60 <z_add_timeout>
   18476:	bd70      	pop	{r4, r5, r6, pc}
   18478:	0001cbfd 	.word	0x0001cbfd

0001847c <k_sched_time_slice_set>:
{
   1847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1847e:	4604      	mov	r4, r0
   18480:	460d      	mov	r5, r1
	__asm__ volatile(
   18482:	f04f 0340 	mov.w	r3, #64	; 0x40
   18486:	f3ef 8711 	mrs	r7, BASEPRI
   1848a:	f383 8812 	msr	BASEPRI_MAX, r3
   1848e:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   18492:	2600      	movs	r6, #0
   18494:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   18498:	f240 30e7 	movw	r0, #999	; 0x3e7
   1849c:	4631      	mov	r1, r6
   1849e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   184a2:	2300      	movs	r3, #0
   184a4:	fbe4 010c 	umlal	r0, r1, r4, ip
   184a8:	f7e7 fe06 	bl	b8 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   184ac:	42b4      	cmp	r4, r6
   184ae:	dd02      	ble.n	184b6 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   184b0:	2802      	cmp	r0, #2
   184b2:	bfb8      	it	lt
   184b4:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   184b6:	4a07      	ldr	r2, [pc, #28]	; (184d4 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   184b8:	4b07      	ldr	r3, [pc, #28]	; (184d8 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   184ba:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   184bc:	4a07      	ldr	r2, [pc, #28]	; (184dc <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   184be:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   184c0:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   184c2:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   184c4:	f7ff ff0a 	bl	182dc <z_reset_time_slice>
	__asm__ volatile(
   184c8:	f387 8811 	msr	BASEPRI, r7
   184cc:	f3bf 8f6f 	isb	sy
}
   184d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   184d2:	bf00      	nop
   184d4:	20001f08 	.word	0x20001f08
   184d8:	20001ed0 	.word	0x20001ed0
   184dc:	20001f04 	.word	0x20001f04

000184e0 <z_time_slice>:
{
   184e0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   184e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   184e6:	f3ef 8511 	mrs	r5, BASEPRI
   184ea:	f383 8812 	msr	BASEPRI_MAX, r3
   184ee:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   184f2:	4b17      	ldr	r3, [pc, #92]	; (18550 <z_time_slice+0x70>)
   184f4:	4a17      	ldr	r2, [pc, #92]	; (18554 <z_time_slice+0x74>)
   184f6:	689c      	ldr	r4, [r3, #8]
   184f8:	6811      	ldr	r1, [r2, #0]
   184fa:	428c      	cmp	r4, r1
   184fc:	d107      	bne.n	1850e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   184fe:	4620      	mov	r0, r4
   18500:	f7ff feec 	bl	182dc <z_reset_time_slice>
	__asm__ volatile(
   18504:	f385 8811 	msr	BASEPRI, r5
   18508:	f3bf 8f6f 	isb	sy
}
   1850c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1850e:	2100      	movs	r1, #0
   18510:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   18512:	4a11      	ldr	r2, [pc, #68]	; (18558 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   18514:	6812      	ldr	r2, [r2, #0]
   18516:	b1c2      	cbz	r2, 1854a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   18518:	89e2      	ldrh	r2, [r4, #14]
   1851a:	2a7f      	cmp	r2, #127	; 0x7f
   1851c:	d815      	bhi.n	1854a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1851e:	7b62      	ldrb	r2, [r4, #13]
   18520:	06d2      	lsls	r2, r2, #27
   18522:	d112      	bne.n	1854a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   18524:	4a0d      	ldr	r2, [pc, #52]	; (1855c <z_time_slice+0x7c>)
   18526:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1852a:	6812      	ldr	r2, [r2, #0]
   1852c:	4291      	cmp	r1, r2
   1852e:	db0c      	blt.n	1854a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   18530:	4a0b      	ldr	r2, [pc, #44]	; (18560 <z_time_slice+0x80>)
   18532:	4294      	cmp	r4, r2
   18534:	d009      	beq.n	1854a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   18536:	691a      	ldr	r2, [r3, #16]
   18538:	4282      	cmp	r2, r0
   1853a:	dc03      	bgt.n	18544 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   1853c:	4620      	mov	r0, r4
   1853e:	f7ff feff 	bl	18340 <move_thread_to_end_of_prio_q>
   18542:	e7dc      	b.n	184fe <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   18544:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   18546:	611a      	str	r2, [r3, #16]
   18548:	e7dc      	b.n	18504 <z_time_slice+0x24>
   1854a:	2200      	movs	r2, #0
   1854c:	e7fb      	b.n	18546 <z_time_slice+0x66>
   1854e:	bf00      	nop
   18550:	20001ed0 	.word	0x20001ed0
   18554:	20001f00 	.word	0x20001f00
   18558:	20001f08 	.word	0x20001f08
   1855c:	20001f04 	.word	0x20001f04
   18560:	20001a00 	.word	0x20001a00

00018564 <z_pend_curr>:
{
   18564:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   18566:	480c      	ldr	r0, [pc, #48]	; (18598 <z_pend_curr+0x34>)
   18568:	4d0c      	ldr	r5, [pc, #48]	; (1859c <z_pend_curr+0x38>)
   1856a:	6886      	ldr	r6, [r0, #8]
   1856c:	602e      	str	r6, [r5, #0]
{
   1856e:	460c      	mov	r4, r1
   18570:	4611      	mov	r1, r2
   18572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   18576:	f04f 0640 	mov.w	r6, #64	; 0x40
   1857a:	f3ef 8511 	mrs	r5, BASEPRI
   1857e:	f386 8812 	msr	BASEPRI_MAX, r6
   18582:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   18586:	6880      	ldr	r0, [r0, #8]
   18588:	f7ff ff60 	bl	1844c <pend_locked>
	ret = arch_swap(key);
   1858c:	4620      	mov	r0, r4
}
   1858e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18592:	f7f8 be03 	b.w	1119c <arch_swap>
   18596:	bf00      	nop
   18598:	20001ed0 	.word	0x20001ed0
   1859c:	20001f00 	.word	0x20001f00

000185a0 <z_set_prio>:
{
   185a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   185a2:	4604      	mov	r4, r0
   185a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   185a8:	f3ef 8611 	mrs	r6, BASEPRI
   185ac:	f383 8812 	msr	BASEPRI_MAX, r3
   185b0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   185b4:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   185b6:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   185b8:	b249      	sxtb	r1, r1
   185ba:	d119      	bne.n	185f0 <z_set_prio+0x50>
	return node->next != NULL;
   185bc:	6985      	ldr	r5, [r0, #24]
   185be:	b9bd      	cbnz	r5, 185f0 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   185c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   185c4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   185c6:	f004 fafe 	bl	1cbc6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   185ca:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   185cc:	4a16      	ldr	r2, [pc, #88]	; (18628 <z_set_prio+0x88>)
				thread->base.prio = prio;
   185ce:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   185d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   185d4:	7343      	strb	r3, [r0, #13]
   185d6:	4613      	mov	r3, r2
   185d8:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   185dc:	4298      	cmp	r0, r3
   185de:	bf18      	it	ne
   185e0:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   185e2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   185e4:	b95d      	cbnz	r5, 185fe <z_set_prio+0x5e>
	node->prev = tail;
   185e6:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   185ea:	6004      	str	r4, [r0, #0]
	list->tail = node;
   185ec:	6254      	str	r4, [r2, #36]	; 0x24
}
   185ee:	e011      	b.n	18614 <z_set_prio+0x74>
			thread->base.prio = prio;
   185f0:	73a1      	strb	r1, [r4, #14]
   185f2:	2000      	movs	r0, #0
	__asm__ volatile(
   185f4:	f386 8811 	msr	BASEPRI, r6
   185f8:	f3bf 8f6f 	isb	sy
}
   185fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   185fe:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   18602:	42b9      	cmp	r1, r7
   18604:	d00b      	beq.n	1861e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   18606:	428f      	cmp	r7, r1
   18608:	dd09      	ble.n	1861e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   1860a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   1860c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   18610:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   18612:	606c      	str	r4, [r5, #4]
			update_cache(1);
   18614:	2001      	movs	r0, #1
   18616:	f7ff fe75 	bl	18304 <update_cache>
   1861a:	2001      	movs	r0, #1
   1861c:	e7ea      	b.n	185f4 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   1861e:	42a8      	cmp	r0, r5
   18620:	d0e1      	beq.n	185e6 <z_set_prio+0x46>
   18622:	682d      	ldr	r5, [r5, #0]
   18624:	e7de      	b.n	185e4 <z_set_prio+0x44>
   18626:	bf00      	nop
   18628:	20001ed0 	.word	0x20001ed0

0001862c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1862c:	b949      	cbnz	r1, 18642 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1862e:	f3ef 8005 	mrs	r0, IPSR
   18632:	b930      	cbnz	r0, 18642 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   18634:	4b05      	ldr	r3, [pc, #20]	; (1864c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   18636:	69da      	ldr	r2, [r3, #28]
   18638:	689b      	ldr	r3, [r3, #8]
   1863a:	429a      	cmp	r2, r3
   1863c:	d001      	beq.n	18642 <z_reschedule+0x16>
   1863e:	f7f8 bdad 	b.w	1119c <arch_swap>
   18642:	f381 8811 	msr	BASEPRI, r1
   18646:	f3bf 8f6f 	isb	sy
}
   1864a:	4770      	bx	lr
   1864c:	20001ed0 	.word	0x20001ed0

00018650 <z_sched_start>:
{
   18650:	b510      	push	{r4, lr}
	__asm__ volatile(
   18652:	f04f 0240 	mov.w	r2, #64	; 0x40
   18656:	f3ef 8411 	mrs	r4, BASEPRI
   1865a:	f382 8812 	msr	BASEPRI_MAX, r2
   1865e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   18662:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   18664:	0751      	lsls	r1, r2, #29
   18666:	d404      	bmi.n	18672 <z_sched_start+0x22>
	__asm__ volatile(
   18668:	f384 8811 	msr	BASEPRI, r4
   1866c:	f3bf 8f6f 	isb	sy
}
   18670:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18672:	f022 0204 	bic.w	r2, r2, #4
   18676:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   18678:	f7ff fe9c 	bl	183b4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1867c:	4621      	mov	r1, r4
   1867e:	4802      	ldr	r0, [pc, #8]	; (18688 <z_sched_start+0x38>)
}
   18680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   18684:	f7ff bfd2 	b.w	1862c <z_reschedule>
   18688:	2000275d 	.word	0x2000275d

0001868c <z_impl_k_thread_suspend>:
{
   1868c:	b570      	push	{r4, r5, r6, lr}
   1868e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   18690:	3018      	adds	r0, #24
   18692:	f004 fbad 	bl	1cdf0 <z_abort_timeout>
	__asm__ volatile(
   18696:	f04f 0340 	mov.w	r3, #64	; 0x40
   1869a:	f3ef 8611 	mrs	r6, BASEPRI
   1869e:	f383 8812 	msr	BASEPRI_MAX, r3
   186a2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   186a6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   186aa:	7b63      	ldrb	r3, [r4, #13]
   186ac:	2a00      	cmp	r2, #0
   186ae:	da05      	bge.n	186bc <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   186b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   186b4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   186b6:	4620      	mov	r0, r4
   186b8:	f004 fa85 	bl	1cbc6 <sys_dlist_remove>
		update_cache(thread == _current);
   186bc:	4d0b      	ldr	r5, [pc, #44]	; (186ec <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   186be:	7b63      	ldrb	r3, [r4, #13]
   186c0:	68a8      	ldr	r0, [r5, #8]
   186c2:	f043 0310 	orr.w	r3, r3, #16
   186c6:	7363      	strb	r3, [r4, #13]
   186c8:	1b03      	subs	r3, r0, r4
   186ca:	4258      	negs	r0, r3
   186cc:	4158      	adcs	r0, r3
   186ce:	f7ff fe19 	bl	18304 <update_cache>
	__asm__ volatile(
   186d2:	f386 8811 	msr	BASEPRI, r6
   186d6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   186da:	68ab      	ldr	r3, [r5, #8]
   186dc:	42a3      	cmp	r3, r4
   186de:	d103      	bne.n	186e8 <z_impl_k_thread_suspend+0x5c>
}
   186e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   186e4:	f004 bb47 	b.w	1cd76 <z_reschedule_unlocked>
}
   186e8:	bd70      	pop	{r4, r5, r6, pc}
   186ea:	bf00      	nop
   186ec:	20001ed0 	.word	0x20001ed0

000186f0 <k_sched_lock>:
	__asm__ volatile(
   186f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   186f4:	f3ef 8111 	mrs	r1, BASEPRI
   186f8:	f383 8812 	msr	BASEPRI_MAX, r3
   186fc:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   18700:	4b04      	ldr	r3, [pc, #16]	; (18714 <k_sched_lock+0x24>)
   18702:	689a      	ldr	r2, [r3, #8]
   18704:	7bd3      	ldrb	r3, [r2, #15]
   18706:	3b01      	subs	r3, #1
   18708:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1870a:	f381 8811 	msr	BASEPRI, r1
   1870e:	f3bf 8f6f 	isb	sy
}
   18712:	4770      	bx	lr
   18714:	20001ed0 	.word	0x20001ed0

00018718 <k_sched_unlock>:
{
   18718:	b510      	push	{r4, lr}
	__asm__ volatile(
   1871a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1871e:	f3ef 8411 	mrs	r4, BASEPRI
   18722:	f383 8812 	msr	BASEPRI_MAX, r3
   18726:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1872a:	4b08      	ldr	r3, [pc, #32]	; (1874c <k_sched_unlock+0x34>)
   1872c:	689a      	ldr	r2, [r3, #8]
   1872e:	7bd3      	ldrb	r3, [r2, #15]
   18730:	3301      	adds	r3, #1
   18732:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   18734:	2000      	movs	r0, #0
   18736:	f7ff fde5 	bl	18304 <update_cache>
	__asm__ volatile(
   1873a:	f384 8811 	msr	BASEPRI, r4
   1873e:	f3bf 8f6f 	isb	sy
}
   18742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   18746:	f004 bb16 	b.w	1cd76 <z_reschedule_unlocked>
   1874a:	bf00      	nop
   1874c:	20001ed0 	.word	0x20001ed0

00018750 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   18750:	4b04      	ldr	r3, [pc, #16]	; (18764 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   18752:	2100      	movs	r1, #0
   18754:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   18758:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1875c:	4608      	mov	r0, r1
   1875e:	f7ff be8d 	b.w	1847c <k_sched_time_slice_set>
   18762:	bf00      	nop
   18764:	20001ed0 	.word	0x20001ed0

00018768 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   18768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1876a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1876e:	f3ef 8511 	mrs	r5, BASEPRI
   18772:	f383 8812 	msr	BASEPRI_MAX, r3
   18776:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1877a:	4919      	ldr	r1, [pc, #100]	; (187e0 <z_impl_k_yield+0x78>)
   1877c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1877e:	7b43      	ldrb	r3, [r0, #13]
   18780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18784:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18786:	f004 fa1e 	bl	1cbc6 <sys_dlist_remove>
	}
	queue_thread(_current);
   1878a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1878c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1878e:	4608      	mov	r0, r1
   18790:	f062 027f 	orn	r2, r2, #127	; 0x7f
   18794:	735a      	strb	r2, [r3, #13]
   18796:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   1879a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1879c:	4282      	cmp	r2, r0
   1879e:	bf08      	it	eq
   187a0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   187a2:	b922      	cbnz	r2, 187ae <z_impl_k_yield+0x46>
	node->prev = tail;
   187a4:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   187a8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   187aa:	624b      	str	r3, [r1, #36]	; 0x24
}
   187ac:	e00c      	b.n	187c8 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   187ae:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   187b2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   187b6:	42be      	cmp	r6, r7
   187b8:	d00e      	beq.n	187d8 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   187ba:	42b7      	cmp	r7, r6
   187bc:	dd0c      	ble.n	187d8 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   187be:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   187c0:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   187c4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   187c6:	6053      	str	r3, [r2, #4]
	update_cache(1);
   187c8:	2001      	movs	r0, #1
   187ca:	f7ff fd9b 	bl	18304 <update_cache>
   187ce:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   187d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   187d4:	f7f8 bce2 	b.w	1119c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   187d8:	42a2      	cmp	r2, r4
   187da:	d0e3      	beq.n	187a4 <z_impl_k_yield+0x3c>
   187dc:	6812      	ldr	r2, [r2, #0]
   187de:	e7e0      	b.n	187a2 <z_impl_k_yield+0x3a>
   187e0:	20001ed0 	.word	0x20001ed0

000187e4 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   187e4:	ea50 0301 	orrs.w	r3, r0, r1
{
   187e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187ec:	4605      	mov	r5, r0
   187ee:	460e      	mov	r6, r1
	if (ticks == 0) {
   187f0:	d103      	bne.n	187fa <z_tick_sleep+0x16>
	z_impl_k_yield();
   187f2:	f7ff ffb9 	bl	18768 <z_impl_k_yield>
		k_yield();
		return 0;
   187f6:	2000      	movs	r0, #0
   187f8:	e02c      	b.n	18854 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   187fa:	1c83      	adds	r3, r0, #2
   187fc:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   18800:	db2a      	blt.n	18858 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   18802:	f004 fb37 	bl	1ce74 <sys_clock_tick_get_32>
   18806:	1944      	adds	r4, r0, r5
   18808:	f04f 0340 	mov.w	r3, #64	; 0x40
   1880c:	f3ef 8811 	mrs	r8, BASEPRI
   18810:	f383 8812 	msr	BASEPRI_MAX, r3
   18814:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   18818:	4f11      	ldr	r7, [pc, #68]	; (18860 <z_tick_sleep+0x7c>)
   1881a:	4b12      	ldr	r3, [pc, #72]	; (18864 <z_tick_sleep+0x80>)
   1881c:	68b8      	ldr	r0, [r7, #8]
   1881e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   18820:	f7ff fdfc 	bl	1841c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   18824:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   18826:	4910      	ldr	r1, [pc, #64]	; (18868 <z_tick_sleep+0x84>)
   18828:	462a      	mov	r2, r5
   1882a:	4633      	mov	r3, r6
   1882c:	3018      	adds	r0, #24
   1882e:	f000 f917 	bl	18a60 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   18832:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18834:	7b53      	ldrb	r3, [r2, #13]
   18836:	f043 0310 	orr.w	r3, r3, #16
   1883a:	7353      	strb	r3, [r2, #13]
   1883c:	4640      	mov	r0, r8
   1883e:	f7f8 fcad 	bl	1119c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   18842:	f004 fb17 	bl	1ce74 <sys_clock_tick_get_32>
   18846:	1a20      	subs	r0, r4, r0
   18848:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1884c:	2801      	cmp	r0, #1
   1884e:	f173 0300 	sbcs.w	r3, r3, #0
   18852:	dbd0      	blt.n	187f6 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   18854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   18858:	f06f 0401 	mvn.w	r4, #1
   1885c:	1a24      	subs	r4, r4, r0
   1885e:	e7d3      	b.n	18808 <z_tick_sleep+0x24>
   18860:	20001ed0 	.word	0x20001ed0
   18864:	20001f00 	.word	0x20001f00
   18868:	0001cbfd 	.word	0x0001cbfd

0001886c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1886c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   18870:	bf08      	it	eq
   18872:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   18876:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18878:	d106      	bne.n	18888 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1887a:	4b08      	ldr	r3, [pc, #32]	; (1889c <z_impl_k_sleep+0x30>)
   1887c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1887e:	f7ff ff05 	bl	1868c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   18882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   18886:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   18888:	f7ff ffac 	bl	187e4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1888c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18890:	fb80 0303 	smull	r0, r3, r0, r3
   18894:	0bc0      	lsrs	r0, r0, #15
   18896:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1889a:	e7f4      	b.n	18886 <z_impl_k_sleep+0x1a>
   1889c:	20001ed0 	.word	0x20001ed0

000188a0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   188a0:	4b01      	ldr	r3, [pc, #4]	; (188a8 <z_impl_z_current_get+0x8>)
   188a2:	6898      	ldr	r0, [r3, #8]
   188a4:	4770      	bx	lr
   188a6:	bf00      	nop
   188a8:	20001ed0 	.word	0x20001ed0

000188ac <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   188ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   188b0:	4604      	mov	r4, r0
   188b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   188b6:	f3ef 8611 	mrs	r6, BASEPRI
   188ba:	f383 8812 	msr	BASEPRI_MAX, r3
   188be:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   188c2:	7b03      	ldrb	r3, [r0, #12]
   188c4:	07d9      	lsls	r1, r3, #31
   188c6:	d50b      	bpl.n	188e0 <z_thread_abort+0x34>
	__asm__ volatile(
   188c8:	f386 8811 	msr	BASEPRI, r6
   188cc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   188d0:	4040      	eors	r0, r0
   188d2:	f380 8811 	msr	BASEPRI, r0
   188d6:	f04f 0004 	mov.w	r0, #4
   188da:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   188dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   188e0:	7b43      	ldrb	r3, [r0, #13]
   188e2:	071a      	lsls	r2, r3, #28
   188e4:	d504      	bpl.n	188f0 <z_thread_abort+0x44>
   188e6:	f386 8811 	msr	BASEPRI, r6
   188ea:	f3bf 8f6f 	isb	sy
   188ee:	e7f5      	b.n	188dc <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   188f0:	f023 0220 	bic.w	r2, r3, #32
   188f4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   188f8:	09d2      	lsrs	r2, r2, #7
   188fa:	d120      	bne.n	1893e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   188fc:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   188fe:	68a3      	ldr	r3, [r4, #8]
   18900:	b113      	cbz	r3, 18908 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   18902:	4620      	mov	r0, r4
   18904:	f004 f967 	bl	1cbd6 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   18908:	f104 0018 	add.w	r0, r4, #24
   1890c:	f004 fa70 	bl	1cdf0 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   18910:	f104 0758 	add.w	r7, r4, #88	; 0x58
   18914:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   18918:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1891a:	42bd      	cmp	r5, r7
   1891c:	d000      	beq.n	18920 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1891e:	b9b5      	cbnz	r5, 1894e <z_thread_abort+0xa2>
		update_cache(1);
   18920:	2001      	movs	r0, #1
   18922:	f7ff fcef 	bl	18304 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   18926:	4b10      	ldr	r3, [pc, #64]	; (18968 <z_thread_abort+0xbc>)
   18928:	689b      	ldr	r3, [r3, #8]
   1892a:	42a3      	cmp	r3, r4
   1892c:	d1db      	bne.n	188e6 <z_thread_abort+0x3a>
   1892e:	f3ef 8305 	mrs	r3, IPSR
   18932:	2b00      	cmp	r3, #0
   18934:	d1d7      	bne.n	188e6 <z_thread_abort+0x3a>
   18936:	4630      	mov	r0, r6
   18938:	f7f8 fc30 	bl	1119c <arch_swap>
	return ret;
   1893c:	e7d3      	b.n	188e6 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1893e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   18942:	f043 0308 	orr.w	r3, r3, #8
   18946:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18948:	f004 f93d 	bl	1cbc6 <sys_dlist_remove>
}
   1894c:	e7d7      	b.n	188fe <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   1894e:	4628      	mov	r0, r5
   18950:	f004 f941 	bl	1cbd6 <unpend_thread_no_timeout>
   18954:	f105 0018 	add.w	r0, r5, #24
   18958:	f004 fa4a 	bl	1cdf0 <z_abort_timeout>
   1895c:	f8c5 8070 	str.w	r8, [r5, #112]	; 0x70
		ready_thread(thread);
   18960:	4628      	mov	r0, r5
   18962:	f7ff fd27 	bl	183b4 <ready_thread>
   18966:	e7d7      	b.n	18918 <z_thread_abort+0x6c>
   18968:	20001ed0 	.word	0x20001ed0

0001896c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1896c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1896e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   18972:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   18974:	e9cd 6700 	strd	r6, r7, [sp]
   18978:	f7ff fdf4 	bl	18564 <z_pend_curr>

	if (data != NULL) {
   1897c:	b11c      	cbz	r4, 18986 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1897e:	4b03      	ldr	r3, [pc, #12]	; (1898c <z_sched_wait+0x20>)
   18980:	689b      	ldr	r3, [r3, #8]
   18982:	695b      	ldr	r3, [r3, #20]
   18984:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   18986:	b002      	add	sp, #8
   18988:	bdd0      	pop	{r4, r6, r7, pc}
   1898a:	bf00      	nop
   1898c:	20001ed0 	.word	0x20001ed0

00018990 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   18990:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   18992:	4806      	ldr	r0, [pc, #24]	; (189ac <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   18994:	4a06      	ldr	r2, [pc, #24]	; (189b0 <z_data_copy+0x20>)
   18996:	4907      	ldr	r1, [pc, #28]	; (189b4 <z_data_copy+0x24>)
   18998:	1a12      	subs	r2, r2, r0
   1899a:	f003 fe62 	bl	1c662 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1899e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   189a2:	4a05      	ldr	r2, [pc, #20]	; (189b8 <z_data_copy+0x28>)
   189a4:	4905      	ldr	r1, [pc, #20]	; (189bc <z_data_copy+0x2c>)
   189a6:	4806      	ldr	r0, [pc, #24]	; (189c0 <z_data_copy+0x30>)
   189a8:	f003 be5b 	b.w	1c662 <z_early_memcpy>
   189ac:	20000000 	.word	0x20000000
   189b0:	200008c8 	.word	0x200008c8
   189b4:	0001dee4 	.word	0x0001dee4
   189b8:	00000000 	.word	0x00000000
   189bc:	0001dee4 	.word	0x0001dee4
   189c0:	20000000 	.word	0x20000000

000189c4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   189c4:	4b03      	ldr	r3, [pc, #12]	; (189d4 <elapsed+0x10>)
   189c6:	681b      	ldr	r3, [r3, #0]
   189c8:	b90b      	cbnz	r3, 189ce <elapsed+0xa>
   189ca:	f7fd bbc3 	b.w	16154 <sys_clock_elapsed>
}
   189ce:	2000      	movs	r0, #0
   189d0:	4770      	bx	lr
   189d2:	bf00      	nop
   189d4:	20001f0c 	.word	0x20001f0c

000189d8 <next_timeout>:

static int32_t next_timeout(void)
{
   189d8:	b510      	push	{r4, lr}
	return list->head == list;
   189da:	4b11      	ldr	r3, [pc, #68]	; (18a20 <next_timeout+0x48>)
   189dc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   189de:	429c      	cmp	r4, r3
   189e0:	d10a      	bne.n	189f8 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   189e2:	f7ff ffef 	bl	189c4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   189e6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   189ea:	4b0e      	ldr	r3, [pc, #56]	; (18a24 <next_timeout+0x4c>)
   189ec:	691b      	ldr	r3, [r3, #16]
   189ee:	b113      	cbz	r3, 189f6 <next_timeout+0x1e>
   189f0:	4298      	cmp	r0, r3
   189f2:	bfa8      	it	ge
   189f4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   189f6:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   189f8:	f7ff ffe4 	bl	189c4 <elapsed>
	if ((to == NULL) ||
   189fc:	2c00      	cmp	r4, #0
   189fe:	d0f2      	beq.n	189e6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   18a00:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   18a04:	1a1b      	subs	r3, r3, r0
   18a06:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   18a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18a0e:	f172 0100 	sbcs.w	r1, r2, #0
   18a12:	dae8      	bge.n	189e6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   18a14:	2a00      	cmp	r2, #0
   18a16:	bfac      	ite	ge
   18a18:	4618      	movge	r0, r3
   18a1a:	2000      	movlt	r0, #0
   18a1c:	e7e5      	b.n	189ea <next_timeout+0x12>
   18a1e:	bf00      	nop
   18a20:	200006ac 	.word	0x200006ac
   18a24:	20001ed0 	.word	0x20001ed0

00018a28 <remove_timeout>:
{
   18a28:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   18a2a:	b170      	cbz	r0, 18a4a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   18a2c:	4b0b      	ldr	r3, [pc, #44]	; (18a5c <remove_timeout+0x34>)
   18a2e:	685b      	ldr	r3, [r3, #4]
   18a30:	4298      	cmp	r0, r3
   18a32:	d00a      	beq.n	18a4a <remove_timeout+0x22>
   18a34:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   18a36:	b143      	cbz	r3, 18a4a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   18a38:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   18a3c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   18a40:	1912      	adds	r2, r2, r4
   18a42:	eb41 0105 	adc.w	r1, r1, r5
   18a46:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   18a4a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   18a4e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18a50:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18a52:	2300      	movs	r3, #0
	node->prev = NULL;
   18a54:	e9c0 3300 	strd	r3, r3, [r0]
}
   18a58:	bd30      	pop	{r4, r5, pc}
   18a5a:	bf00      	nop
   18a5c:	200006ac 	.word	0x200006ac

00018a60 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   18a64:	bf08      	it	eq
   18a66:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   18a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a6c:	4604      	mov	r4, r0
   18a6e:	461d      	mov	r5, r3
   18a70:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18a72:	d061      	beq.n	18b38 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   18a74:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   18a76:	f04f 0340 	mov.w	r3, #64	; 0x40
   18a7a:	f3ef 8711 	mrs	r7, BASEPRI
   18a7e:	f383 8812 	msr	BASEPRI_MAX, r3
   18a82:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   18a86:	3201      	adds	r2, #1
   18a88:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   18a8c:	da24      	bge.n	18ad8 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   18a8e:	4930      	ldr	r1, [pc, #192]	; (18b50 <z_add_timeout+0xf0>)
   18a90:	e9d1 2000 	ldrd	r2, r0, [r1]
   18a94:	f06f 0301 	mvn.w	r3, #1
   18a98:	1a9b      	subs	r3, r3, r2
   18a9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18a9e:	eb62 0000 	sbc.w	r0, r2, r0
   18aa2:	1b9e      	subs	r6, r3, r6
   18aa4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   18aa8:	2e01      	cmp	r6, #1
   18aaa:	f170 0300 	sbcs.w	r3, r0, #0
   18aae:	da01      	bge.n	18ab4 <z_add_timeout+0x54>
   18ab0:	2601      	movs	r6, #1
   18ab2:	2000      	movs	r0, #0
   18ab4:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   18ab8:	4e26      	ldr	r6, [pc, #152]	; (18b54 <z_add_timeout+0xf4>)
   18aba:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   18abe:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18ac0:	45b4      	cmp	ip, r6
   18ac2:	bf08      	it	eq
   18ac4:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   18ac8:	f1bc 0f00 	cmp.w	ip, #0
   18acc:	d10d      	bne.n	18aea <z_add_timeout+0x8a>
	node->prev = tail;
   18ace:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   18ad2:	602c      	str	r4, [r5, #0]
	list->tail = node;
   18ad4:	6074      	str	r4, [r6, #4]
}
   18ad6:	e01c      	b.n	18b12 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   18ad8:	f7ff ff74 	bl	189c4 <elapsed>
   18adc:	3601      	adds	r6, #1
   18ade:	f145 0500 	adc.w	r5, r5, #0
   18ae2:	1836      	adds	r6, r6, r0
   18ae4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   18ae8:	e7e4      	b.n	18ab4 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   18aea:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   18aee:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   18af2:	4293      	cmp	r3, r2
   18af4:	eb71 0e00 	sbcs.w	lr, r1, r0
   18af8:	da1f      	bge.n	18b3a <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   18afa:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   18afc:	f8dc 3004 	ldr.w	r3, [ip, #4]
   18b00:	eb60 0001 	sbc.w	r0, r0, r1
   18b04:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   18b08:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   18b0c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   18b0e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   18b12:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b14:	42b3      	cmp	r3, r6
   18b16:	d00b      	beq.n	18b30 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   18b18:	429c      	cmp	r4, r3
   18b1a:	d109      	bne.n	18b30 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   18b1c:	f7ff ff5c 	bl	189d8 <next_timeout>

			if (next_time == 0 ||
   18b20:	b118      	cbz	r0, 18b2a <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   18b22:	4b0d      	ldr	r3, [pc, #52]	; (18b58 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   18b24:	691b      	ldr	r3, [r3, #16]
   18b26:	4283      	cmp	r3, r0
   18b28:	d002      	beq.n	18b30 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   18b2a:	2100      	movs	r1, #0
   18b2c:	f7fd fae0 	bl	160f0 <sys_clock_set_timeout>
	__asm__ volatile(
   18b30:	f387 8811 	msr	BASEPRI, r7
   18b34:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   18b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   18b3a:	1a9b      	subs	r3, r3, r2
   18b3c:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   18b40:	45ac      	cmp	ip, r5
   18b42:	e9c4 3104 	strd	r3, r1, [r4, #16]
   18b46:	d0c2      	beq.n	18ace <z_add_timeout+0x6e>
   18b48:	f8dc c000 	ldr.w	ip, [ip]
   18b4c:	e7bc      	b.n	18ac8 <z_add_timeout+0x68>
   18b4e:	bf00      	nop
   18b50:	20001b88 	.word	0x20001b88
   18b54:	200006ac 	.word	0x200006ac
   18b58:	20001ed0 	.word	0x20001ed0

00018b5c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   18b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18b60:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   18b62:	f7ff fcbd 	bl	184e0 <z_time_slice>
	__asm__ volatile(
   18b66:	f04f 0340 	mov.w	r3, #64	; 0x40
   18b6a:	f3ef 8611 	mrs	r6, BASEPRI
   18b6e:	f383 8812 	msr	BASEPRI_MAX, r3
   18b72:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   18b76:	4f23      	ldr	r7, [pc, #140]	; (18c04 <sys_clock_announce+0xa8>)
	return list->head == list;
   18b78:	f8df 808c 	ldr.w	r8, [pc, #140]	; 18c08 <sys_clock_announce+0xac>
   18b7c:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   18b80:	4a22      	ldr	r2, [pc, #136]	; (18c0c <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
   18b82:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b84:	4540      	cmp	r0, r8
		curr_tick += dt;
   18b86:	e9d2 3e00 	ldrd	r3, lr, [r2]
   18b8a:	ea4f 71e4 	mov.w	r1, r4, asr #31
   18b8e:	d00b      	beq.n	18ba8 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   18b90:	b150      	cbz	r0, 18ba8 <sys_clock_announce+0x4c>
   18b92:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   18b96:	42ac      	cmp	r4, r5
   18b98:	eb71 090c 	sbcs.w	r9, r1, ip
   18b9c:	da16      	bge.n	18bcc <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   18b9e:	1b2d      	subs	r5, r5, r4
   18ba0:	eb6c 0c01 	sbc.w	ip, ip, r1
   18ba4:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   18ba8:	18e3      	adds	r3, r4, r3
   18baa:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   18bae:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   18bb0:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   18bb4:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   18bb6:	f7ff ff0f 	bl	189d8 <next_timeout>
   18bba:	4621      	mov	r1, r4
   18bbc:	f7fd fa98 	bl	160f0 <sys_clock_set_timeout>
	__asm__ volatile(
   18bc0:	f386 8811 	msr	BASEPRI, r6
   18bc4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   18bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   18bcc:	18eb      	adds	r3, r5, r3
   18bce:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   18bd2:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   18bd6:	2200      	movs	r2, #0
   18bd8:	2300      	movs	r3, #0
   18bda:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   18bde:	f7ff ff23 	bl	18a28 <remove_timeout>
   18be2:	f386 8811 	msr	BASEPRI, r6
   18be6:	f3bf 8f6f 	isb	sy
		t->fn(t);
   18bea:	6883      	ldr	r3, [r0, #8]
   18bec:	4798      	blx	r3
	__asm__ volatile(
   18bee:	f04f 0340 	mov.w	r3, #64	; 0x40
   18bf2:	f3ef 8611 	mrs	r6, BASEPRI
   18bf6:	f383 8812 	msr	BASEPRI_MAX, r3
   18bfa:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   18bfe:	683c      	ldr	r4, [r7, #0]
   18c00:	1b64      	subs	r4, r4, r5
   18c02:	e7bb      	b.n	18b7c <sys_clock_announce+0x20>
   18c04:	20001f0c 	.word	0x20001f0c
   18c08:	200006ac 	.word	0x200006ac
   18c0c:	20001b88 	.word	0x20001b88

00018c10 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   18c10:	b510      	push	{r4, lr}
   18c12:	f04f 0340 	mov.w	r3, #64	; 0x40
   18c16:	f3ef 8411 	mrs	r4, BASEPRI
   18c1a:	f383 8812 	msr	BASEPRI_MAX, r3
   18c1e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   18c22:	f7ff fecf 	bl	189c4 <elapsed>
   18c26:	4a06      	ldr	r2, [pc, #24]	; (18c40 <sys_clock_tick_get+0x30>)
   18c28:	4603      	mov	r3, r0
   18c2a:	e9d2 0100 	ldrd	r0, r1, [r2]
   18c2e:	1818      	adds	r0, r3, r0
   18c30:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   18c34:	f384 8811 	msr	BASEPRI, r4
   18c38:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   18c3c:	bd10      	pop	{r4, pc}
   18c3e:	bf00      	nop
   18c40:	20001b88 	.word	0x20001b88

00018c44 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   18c44:	b570      	push	{r4, r5, r6, lr}
   18c46:	4604      	mov	r4, r0
	__asm__ volatile(
   18c48:	f04f 0340 	mov.w	r3, #64	; 0x40
   18c4c:	f3ef 8511 	mrs	r5, BASEPRI
   18c50:	f383 8812 	msr	BASEPRI_MAX, r3
   18c54:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   18c58:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   18c5c:	3301      	adds	r3, #1
   18c5e:	f142 0200 	adc.w	r2, r2, #0
   18c62:	2b02      	cmp	r3, #2
   18c64:	f172 0200 	sbcs.w	r2, r2, #0
   18c68:	d322      	bcc.n	18cb0 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   18c6a:	f004 f907 	bl	1ce7c <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   18c6e:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   18c72:	3001      	adds	r0, #1
   18c74:	f141 0100 	adc.w	r1, r1, #0
   18c78:	18c0      	adds	r0, r0, r3
   18c7a:	eb41 0102 	adc.w	r1, r1, r2
   18c7e:	2801      	cmp	r0, #1
   18c80:	f171 0100 	sbcs.w	r1, r1, #0
   18c84:	db32      	blt.n	18cec <z_timer_expiration_handler+0xa8>
   18c86:	f004 f8f9 	bl	1ce7c <z_impl_k_uptime_ticks>
   18c8a:	3001      	adds	r0, #1
   18c8c:	f141 0300 	adc.w	r3, r1, #0
   18c90:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   18c94:	1880      	adds	r0, r0, r2
   18c96:	f06f 0201 	mvn.w	r2, #1
   18c9a:	eb43 0301 	adc.w	r3, r3, r1
   18c9e:	1a12      	subs	r2, r2, r0
   18ca0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18ca4:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18ca8:	491a      	ldr	r1, [pc, #104]	; (18d14 <z_timer_expiration_handler+0xd0>)
   18caa:	4620      	mov	r0, r4
   18cac:	f7ff fed8 	bl	18a60 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   18cb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18cb2:	3301      	adds	r3, #1
   18cb4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   18cb6:	6a23      	ldr	r3, [r4, #32]
   18cb8:	b173      	cbz	r3, 18cd8 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   18cba:	f385 8811 	msr	BASEPRI, r5
   18cbe:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   18cc2:	6a23      	ldr	r3, [r4, #32]
   18cc4:	4620      	mov	r0, r4
   18cc6:	4798      	blx	r3
	__asm__ volatile(
   18cc8:	f04f 0340 	mov.w	r3, #64	; 0x40
   18ccc:	f3ef 8511 	mrs	r5, BASEPRI
   18cd0:	f383 8812 	msr	BASEPRI_MAX, r3
   18cd4:	f3bf 8f6f 	isb	sy
	return list->head == list;
   18cd8:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18cdc:	42a6      	cmp	r6, r4
   18cde:	d000      	beq.n	18ce2 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   18ce0:	b94e      	cbnz	r6, 18cf6 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   18ce2:	f385 8811 	msr	BASEPRI, r5
   18ce6:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   18cea:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   18cec:	f06f 0201 	mvn.w	r2, #1
   18cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18cf4:	e7d8      	b.n	18ca8 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   18cf6:	4630      	mov	r0, r6
   18cf8:	f003 ffda 	bl	1ccb0 <z_unpend_thread_no_timeout>
   18cfc:	2300      	movs	r3, #0
   18cfe:	6733      	str	r3, [r6, #112]	; 0x70
   18d00:	f385 8811 	msr	BASEPRI, r5
   18d04:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   18d08:	4630      	mov	r0, r6
}
   18d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   18d0e:	f003 bfbf 	b.w	1cc90 <z_ready_thread>
   18d12:	bf00      	nop
   18d14:	00018c45 	.word	0x00018c45

00018d18 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   18d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   18d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   18d20:	bf08      	it	eq
   18d22:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   18d26:	4605      	mov	r5, r0
   18d28:	4614      	mov	r4, r2
   18d2a:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   18d2e:	4619      	mov	r1, r3
   18d30:	4691      	mov	r9, r2
   18d32:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   18d34:	d037      	beq.n	18da6 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   18d36:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   18d3a:	bf08      	it	eq
   18d3c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   18d40:	4637      	mov	r7, r6
   18d42:	4682      	mov	sl, r0
   18d44:	d011      	beq.n	18d6a <z_impl_k_timer_start+0x52>
   18d46:	ea50 0306 	orrs.w	r3, r0, r6
   18d4a:	d00e      	beq.n	18d6a <z_impl_k_timer_start+0x52>
   18d4c:	1c72      	adds	r2, r6, #1
   18d4e:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
   18d52:	db0a      	blt.n	18d6a <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   18d54:	2e02      	cmp	r6, #2
   18d56:	4684      	mov	ip, r0
   18d58:	f170 0000 	sbcs.w	r0, r0, #0
   18d5c:	bfbc      	itt	lt
   18d5e:	2702      	movlt	r7, #2
   18d60:	f04f 0c00 	movlt.w	ip, #0
   18d64:	3f01      	subs	r7, #1
   18d66:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   18d6a:	1c63      	adds	r3, r4, #1
   18d6c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   18d70:	db0a      	blt.n	18d88 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   18d72:	2c01      	cmp	r4, #1
   18d74:	f171 0300 	sbcs.w	r3, r1, #0
   18d78:	4622      	mov	r2, r4
   18d7a:	bfbc      	itt	lt
   18d7c:	2201      	movlt	r2, #1
   18d7e:	2100      	movlt	r1, #0
   18d80:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   18d84:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   18d88:	4628      	mov	r0, r5
   18d8a:	f004 f831 	bl	1cdf0 <z_abort_timeout>
	timer->period = period;
   18d8e:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   18d92:	2300      	movs	r3, #0
   18d94:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18d96:	464a      	mov	r2, r9
   18d98:	4643      	mov	r3, r8
   18d9a:	4628      	mov	r0, r5
   18d9c:	4903      	ldr	r1, [pc, #12]	; (18dac <z_impl_k_timer_start+0x94>)
		     duration);
}
   18d9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18da2:	f7ff be5d 	b.w	18a60 <z_add_timeout>
}
   18da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18daa:	bf00      	nop
   18dac:	00018c45 	.word	0x00018c45

00018db0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   18db0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   18db4:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   18db6:	4b29      	ldr	r3, [pc, #164]	; (18e5c <z_impl_k_poll+0xac>)
   18db8:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   18dba:	2301      	movs	r3, #1
   18dbc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   18dc0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   18dc4:	ea52 0305 	orrs.w	r3, r2, r5
{
   18dc8:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   18dca:	bf0c      	ite	eq
   18dcc:	2301      	moveq	r3, #1
   18dce:	2300      	movne	r3, #0
   18dd0:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   18dd4:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   18dd6:	f004 f8c7 	bl	1cf68 <register_events>
   18dda:	4681      	mov	r9, r0
	__asm__ volatile(
   18ddc:	f04f 0340 	mov.w	r3, #64	; 0x40
   18de0:	f3ef 8a11 	mrs	sl, BASEPRI
   18de4:	f383 8812 	msr	BASEPRI_MAX, r3
   18de8:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   18dec:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   18df0:	b964      	cbnz	r4, 18e0c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   18df2:	4601      	mov	r1, r0
   18df4:	4652      	mov	r2, sl
   18df6:	4640      	mov	r0, r8
   18df8:	f004 f987 	bl	1d10a <clear_event_registrations>
	__asm__ volatile(
   18dfc:	f38a 8811 	msr	BASEPRI, sl
   18e00:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   18e04:	4620      	mov	r0, r4
   18e06:	b002      	add	sp, #8
   18e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   18e0c:	2300      	movs	r3, #0
   18e0e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18e12:	ea56 0305 	orrs.w	r3, r6, r5
   18e16:	d106      	bne.n	18e26 <z_impl_k_poll+0x76>
   18e18:	f38a 8811 	msr	BASEPRI, sl
   18e1c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   18e20:	f06f 040a 	mvn.w	r4, #10
   18e24:	e7ee      	b.n	18e04 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   18e26:	e9cd 6500 	strd	r6, r5, [sp]
   18e2a:	4a0d      	ldr	r2, [pc, #52]	; (18e60 <z_impl_k_poll+0xb0>)
   18e2c:	480d      	ldr	r0, [pc, #52]	; (18e64 <z_impl_k_poll+0xb4>)
   18e2e:	4651      	mov	r1, sl
   18e30:	f7ff fb98 	bl	18564 <z_pend_curr>
   18e34:	4604      	mov	r4, r0
	__asm__ volatile(
   18e36:	f04f 0340 	mov.w	r3, #64	; 0x40
   18e3a:	f3ef 8511 	mrs	r5, BASEPRI
   18e3e:	f383 8812 	msr	BASEPRI_MAX, r3
   18e42:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   18e46:	462a      	mov	r2, r5
   18e48:	4649      	mov	r1, r9
   18e4a:	4640      	mov	r0, r8
   18e4c:	f004 f95d 	bl	1d10a <clear_event_registrations>
	__asm__ volatile(
   18e50:	f385 8811 	msr	BASEPRI, r5
   18e54:	f3bf 8f6f 	isb	sy
	return swap_rc;
   18e58:	e7d4      	b.n	18e04 <z_impl_k_poll+0x54>
   18e5a:	bf00      	nop
   18e5c:	20001ed0 	.word	0x20001ed0
   18e60:	200006b4 	.word	0x200006b4
   18e64:	2000275d 	.word	0x2000275d

00018e68 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   18e68:	b538      	push	{r3, r4, r5, lr}
   18e6a:	4603      	mov	r3, r0
	__asm__ volatile(
   18e6c:	f04f 0240 	mov.w	r2, #64	; 0x40
   18e70:	f3ef 8511 	mrs	r5, BASEPRI
   18e74:	f382 8812 	msr	BASEPRI_MAX, r2
   18e78:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   18e7c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   18e7e:	2101      	movs	r1, #1
   18e80:	6081      	str	r1, [r0, #8]
	return list->head == list;
   18e82:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   18e84:	4283      	cmp	r3, r0
   18e86:	d106      	bne.n	18e96 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   18e88:	f385 8811 	msr	BASEPRI, r5
   18e8c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   18e90:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   18e92:	4620      	mov	r0, r4
   18e94:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   18e96:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   18e9a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18e9c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18e9e:	2300      	movs	r3, #0
	node->prev = NULL;
   18ea0:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   18ea4:	f004 f8d7 	bl	1d056 <signal_poll_event>
	z_reschedule(&lock, key);
   18ea8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   18eaa:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   18eac:	4801      	ldr	r0, [pc, #4]	; (18eb4 <z_impl_k_poll_signal_raise+0x4c>)
   18eae:	f7ff fbbd 	bl	1862c <z_reschedule>
	return rc;
   18eb2:	e7ee      	b.n	18e92 <z_impl_k_poll_signal_raise+0x2a>
   18eb4:	2000275d 	.word	0x2000275d

00018eb8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   18eb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18eba:	4606      	mov	r6, r0
   18ebc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   18ebe:	f003 fc83 	bl	1c7c8 <k_is_in_isr>
   18ec2:	b978      	cbnz	r0, 18ee4 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   18ec4:	4b0b      	ldr	r3, [pc, #44]	; (18ef4 <z_thread_aligned_alloc+0x3c>)
   18ec6:	689b      	ldr	r3, [r3, #8]
   18ec8:	6e9c      	ldr	r4, [r3, #104]	; 0x68
	}

	if (heap != NULL) {
   18eca:	b17c      	cbz	r4, 18eec <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   18ecc:	1d2a      	adds	r2, r5, #4
   18ece:	d209      	bcs.n	18ee4 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   18ed0:	2000      	movs	r0, #0
   18ed2:	2100      	movs	r1, #0
   18ed4:	e9cd 0100 	strd	r0, r1, [sp]
   18ed8:	f046 0104 	orr.w	r1, r6, #4
   18edc:	4620      	mov	r0, r4
   18ede:	f003 fbca 	bl	1c676 <k_heap_aligned_alloc>
	if (mem == NULL) {
   18ee2:	b908      	cbnz	r0, 18ee8 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   18ee4:	2400      	movs	r4, #0
	}

	return ret;
   18ee6:	e001      	b.n	18eec <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   18ee8:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   18eea:	1d04      	adds	r4, r0, #4
}
   18eec:	4620      	mov	r0, r4
   18eee:	b002      	add	sp, #8
   18ef0:	bd70      	pop	{r4, r5, r6, pc}
   18ef2:	bf00      	nop
   18ef4:	20001ed0 	.word	0x20001ed0

00018ef8 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   18ef8:	4801      	ldr	r0, [pc, #4]	; (18f00 <boot_banner+0x8>)
   18efa:	f000 bb98 	b.w	1962e <printk>
   18efe:	bf00      	nop
   18f00:	0001ddb3 	.word	0x0001ddb3

00018f04 <ocrypto_ecdh_p256_public_key>:
   18f04:	b530      	push	{r4, r5, lr}
   18f06:	b099      	sub	sp, #100	; 0x64
   18f08:	4605      	mov	r5, r0
   18f0a:	4668      	mov	r0, sp
   18f0c:	f000 f828 	bl	18f60 <ocrypto_sc_p256_from32bytes>
   18f10:	4669      	mov	r1, sp
   18f12:	4604      	mov	r4, r0
   18f14:	a808      	add	r0, sp, #32
   18f16:	f000 fa53 	bl	193c0 <ocrypto_curve_p256_scalarmult_base>
   18f1a:	a908      	add	r1, sp, #32
   18f1c:	4304      	orrs	r4, r0
   18f1e:	4628      	mov	r0, r5
   18f20:	f000 f98a 	bl	19238 <ocrypto_curve_p256_to64bytes>
   18f24:	4620      	mov	r0, r4
   18f26:	b019      	add	sp, #100	; 0x64
   18f28:	bd30      	pop	{r4, r5, pc}
   18f2a:	bf00      	nop

00018f2c <ocrypto_ecdh_p256_common_secret>:
   18f2c:	b570      	push	{r4, r5, r6, lr}
   18f2e:	b098      	sub	sp, #96	; 0x60
   18f30:	4605      	mov	r5, r0
   18f32:	4668      	mov	r0, sp
   18f34:	4616      	mov	r6, r2
   18f36:	f000 f813 	bl	18f60 <ocrypto_sc_p256_from32bytes>
   18f3a:	4631      	mov	r1, r6
   18f3c:	4604      	mov	r4, r0
   18f3e:	a808      	add	r0, sp, #32
   18f40:	f000 f946 	bl	191d0 <ocrypto_curve_p256_from64bytes>
   18f44:	a908      	add	r1, sp, #32
   18f46:	466a      	mov	r2, sp
   18f48:	4304      	orrs	r4, r0
   18f4a:	4608      	mov	r0, r1
   18f4c:	f000 f982 	bl	19254 <ocrypto_curve_p256_scalarmult>
   18f50:	a908      	add	r1, sp, #32
   18f52:	4304      	orrs	r4, r0
   18f54:	4628      	mov	r0, r5
   18f56:	f000 f96d 	bl	19234 <ocrypto_curve_p256_to32bytes>
   18f5a:	4620      	mov	r0, r4
   18f5c:	b018      	add	sp, #96	; 0x60
   18f5e:	bd70      	pop	{r4, r5, r6, pc}

00018f60 <ocrypto_sc_p256_from32bytes>:
   18f60:	b570      	push	{r4, r5, r6, lr}
   18f62:	680b      	ldr	r3, [r1, #0]
   18f64:	4e12      	ldr	r6, [pc, #72]	; (18fb0 <ocrypto_sc_p256_from32bytes+0x50>)
   18f66:	ba1b      	rev	r3, r3
   18f68:	61c3      	str	r3, [r0, #28]
   18f6a:	684b      	ldr	r3, [r1, #4]
   18f6c:	ba1b      	rev	r3, r3
   18f6e:	6183      	str	r3, [r0, #24]
   18f70:	688b      	ldr	r3, [r1, #8]
   18f72:	ba1b      	rev	r3, r3
   18f74:	6143      	str	r3, [r0, #20]
   18f76:	68cb      	ldr	r3, [r1, #12]
   18f78:	ba1b      	rev	r3, r3
   18f7a:	6103      	str	r3, [r0, #16]
   18f7c:	690b      	ldr	r3, [r1, #16]
   18f7e:	ba1b      	rev	r3, r3
   18f80:	60c3      	str	r3, [r0, #12]
   18f82:	694b      	ldr	r3, [r1, #20]
   18f84:	ba1b      	rev	r3, r3
   18f86:	6083      	str	r3, [r0, #8]
   18f88:	698b      	ldr	r3, [r1, #24]
   18f8a:	ba1b      	rev	r3, r3
   18f8c:	6043      	str	r3, [r0, #4]
   18f8e:	69cb      	ldr	r3, [r1, #28]
   18f90:	ba1b      	rev	r3, r3
   18f92:	4632      	mov	r2, r6
   18f94:	6003      	str	r3, [r0, #0]
   18f96:	4601      	mov	r1, r0
   18f98:	4604      	mov	r4, r0
   18f9a:	f7e7 f8c7 	bl	12c <ocrypto_bigint_sub256>
   18f9e:	4631      	mov	r1, r6
   18fa0:	4605      	mov	r5, r0
   18fa2:	4602      	mov	r2, r0
   18fa4:	4620      	mov	r0, r4
   18fa6:	f7e7 f8e1 	bl	16c <ocrypto_bigint_cadd256>
   18faa:	1e68      	subs	r0, r5, #1
   18fac:	bd70      	pop	{r4, r5, r6, pc}
   18fae:	bf00      	nop
   18fb0:	0001d95c 	.word	0x0001d95c

00018fb4 <p256_zdblu>:
   18fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18fb8:	b088      	sub	sp, #32
   18fba:	460c      	mov	r4, r1
   18fbc:	4606      	mov	r6, r0
   18fbe:	f102 0120 	add.w	r1, r2, #32
   18fc2:	4668      	mov	r0, sp
   18fc4:	f106 0720 	add.w	r7, r6, #32
   18fc8:	4690      	mov	r8, r2
   18fca:	f7e7 fbb9 	bl	740 <ocrypto_mod_p256_sqr>
   18fce:	466a      	mov	r2, sp
   18fd0:	4669      	mov	r1, sp
   18fd2:	4668      	mov	r0, sp
   18fd4:	f7e7 fac6 	bl	564 <ocrypto_mod_p256_add>
   18fd8:	4669      	mov	r1, sp
   18fda:	4638      	mov	r0, r7
   18fdc:	f7e7 fbb0 	bl	740 <ocrypto_mod_p256_sqr>
   18fe0:	463a      	mov	r2, r7
   18fe2:	4639      	mov	r1, r7
   18fe4:	4638      	mov	r0, r7
   18fe6:	f104 0520 	add.w	r5, r4, #32
   18fea:	f7e7 fabb 	bl	564 <ocrypto_mod_p256_add>
   18fee:	466a      	mov	r2, sp
   18ff0:	4669      	mov	r1, sp
   18ff2:	4668      	mov	r0, sp
   18ff4:	f7e7 fab6 	bl	564 <ocrypto_mod_p256_add>
   18ff8:	4641      	mov	r1, r8
   18ffa:	4628      	mov	r0, r5
   18ffc:	f7e7 fba0 	bl	740 <ocrypto_mod_p256_sqr>
   19000:	466a      	mov	r2, sp
   19002:	4641      	mov	r1, r8
   19004:	4630      	mov	r0, r6
   19006:	f7e7 fb83 	bl	710 <ocrypto_mod_p256_mul>
   1900a:	462a      	mov	r2, r5
   1900c:	4629      	mov	r1, r5
   1900e:	4668      	mov	r0, sp
   19010:	f7e7 faa8 	bl	564 <ocrypto_mod_p256_add>
   19014:	462a      	mov	r2, r5
   19016:	4669      	mov	r1, sp
   19018:	4668      	mov	r0, sp
   1901a:	f7e7 faa3 	bl	564 <ocrypto_mod_p256_add>
   1901e:	4a12      	ldr	r2, [pc, #72]	; (19068 <p256_zdblu+0xb4>)
   19020:	4669      	mov	r1, sp
   19022:	4668      	mov	r0, sp
   19024:	f7e7 fa9e 	bl	564 <ocrypto_mod_p256_add>
   19028:	4669      	mov	r1, sp
   1902a:	4620      	mov	r0, r4
   1902c:	f7e7 fb88 	bl	740 <ocrypto_mod_p256_sqr>
   19030:	4632      	mov	r2, r6
   19032:	4621      	mov	r1, r4
   19034:	4620      	mov	r0, r4
   19036:	f7e7 fad3 	bl	5e0 <ocrypto_mod_p256_sub>
   1903a:	4632      	mov	r2, r6
   1903c:	4621      	mov	r1, r4
   1903e:	4620      	mov	r0, r4
   19040:	f7e7 face 	bl	5e0 <ocrypto_mod_p256_sub>
   19044:	4622      	mov	r2, r4
   19046:	4631      	mov	r1, r6
   19048:	4628      	mov	r0, r5
   1904a:	f7e7 fac9 	bl	5e0 <ocrypto_mod_p256_sub>
   1904e:	466a      	mov	r2, sp
   19050:	4629      	mov	r1, r5
   19052:	4628      	mov	r0, r5
   19054:	f7e7 fb5c 	bl	710 <ocrypto_mod_p256_mul>
   19058:	463a      	mov	r2, r7
   1905a:	4629      	mov	r1, r5
   1905c:	4628      	mov	r0, r5
   1905e:	f7e7 fabf 	bl	5e0 <ocrypto_mod_p256_sub>
   19062:	b008      	add	sp, #32
   19064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19068:	0001d9fc 	.word	0x0001d9fc

0001906c <p256_zaddc>:
   1906c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1906e:	b099      	sub	sp, #100	; 0x64
   19070:	4604      	mov	r4, r0
   19072:	460d      	mov	r5, r1
   19074:	460a      	mov	r2, r1
   19076:	4601      	mov	r1, r0
   19078:	4668      	mov	r0, sp
   1907a:	f7e7 fab1 	bl	5e0 <ocrypto_mod_p256_sub>
   1907e:	4669      	mov	r1, sp
   19080:	4668      	mov	r0, sp
   19082:	f7e7 fb5d 	bl	740 <ocrypto_mod_p256_sqr>
   19086:	466a      	mov	r2, sp
   19088:	4621      	mov	r1, r4
   1908a:	a808      	add	r0, sp, #32
   1908c:	f105 0620 	add.w	r6, r5, #32
   19090:	f104 0720 	add.w	r7, r4, #32
   19094:	f7e7 fb3c 	bl	710 <ocrypto_mod_p256_mul>
   19098:	466a      	mov	r2, sp
   1909a:	4629      	mov	r1, r5
   1909c:	4668      	mov	r0, sp
   1909e:	f7e7 fb37 	bl	710 <ocrypto_mod_p256_mul>
   190a2:	4632      	mov	r2, r6
   190a4:	4639      	mov	r1, r7
   190a6:	a810      	add	r0, sp, #64	; 0x40
   190a8:	f7e7 fa5c 	bl	564 <ocrypto_mod_p256_add>
   190ac:	4632      	mov	r2, r6
   190ae:	4639      	mov	r1, r7
   190b0:	4630      	mov	r0, r6
   190b2:	f7e7 fa95 	bl	5e0 <ocrypto_mod_p256_sub>
   190b6:	4631      	mov	r1, r6
   190b8:	4628      	mov	r0, r5
   190ba:	f7e7 fb41 	bl	740 <ocrypto_mod_p256_sqr>
   190be:	466a      	mov	r2, sp
   190c0:	a908      	add	r1, sp, #32
   190c2:	4620      	mov	r0, r4
   190c4:	f7e7 fa4e 	bl	564 <ocrypto_mod_p256_add>
   190c8:	4622      	mov	r2, r4
   190ca:	4629      	mov	r1, r5
   190cc:	4628      	mov	r0, r5
   190ce:	f7e7 fa87 	bl	5e0 <ocrypto_mod_p256_sub>
   190d2:	466a      	mov	r2, sp
   190d4:	a908      	add	r1, sp, #32
   190d6:	4668      	mov	r0, sp
   190d8:	f7e7 fa82 	bl	5e0 <ocrypto_mod_p256_sub>
   190dc:	466a      	mov	r2, sp
   190de:	4639      	mov	r1, r7
   190e0:	4638      	mov	r0, r7
   190e2:	f7e7 fb15 	bl	710 <ocrypto_mod_p256_mul>
   190e6:	462a      	mov	r2, r5
   190e8:	a908      	add	r1, sp, #32
   190ea:	4668      	mov	r0, sp
   190ec:	f7e7 fa78 	bl	5e0 <ocrypto_mod_p256_sub>
   190f0:	466a      	mov	r2, sp
   190f2:	4631      	mov	r1, r6
   190f4:	4630      	mov	r0, r6
   190f6:	f7e7 fb0b 	bl	710 <ocrypto_mod_p256_mul>
   190fa:	463a      	mov	r2, r7
   190fc:	4631      	mov	r1, r6
   190fe:	4630      	mov	r0, r6
   19100:	f7e7 fa6e 	bl	5e0 <ocrypto_mod_p256_sub>
   19104:	a910      	add	r1, sp, #64	; 0x40
   19106:	4668      	mov	r0, sp
   19108:	f7e7 fb1a 	bl	740 <ocrypto_mod_p256_sqr>
   1910c:	4622      	mov	r2, r4
   1910e:	4669      	mov	r1, sp
   19110:	4620      	mov	r0, r4
   19112:	f7e7 fa65 	bl	5e0 <ocrypto_mod_p256_sub>
   19116:	a908      	add	r1, sp, #32
   19118:	4622      	mov	r2, r4
   1911a:	4608      	mov	r0, r1
   1911c:	f7e7 fa60 	bl	5e0 <ocrypto_mod_p256_sub>
   19120:	a910      	add	r1, sp, #64	; 0x40
   19122:	aa08      	add	r2, sp, #32
   19124:	4608      	mov	r0, r1
   19126:	f7e7 faf3 	bl	710 <ocrypto_mod_p256_mul>
   1912a:	463a      	mov	r2, r7
   1912c:	a910      	add	r1, sp, #64	; 0x40
   1912e:	4638      	mov	r0, r7
   19130:	f7e7 fa56 	bl	5e0 <ocrypto_mod_p256_sub>
   19134:	b019      	add	sp, #100	; 0x64
   19136:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019138 <p256_zaddu>:
   19138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1913c:	b088      	sub	sp, #32
   1913e:	460c      	mov	r4, r1
   19140:	4605      	mov	r5, r0
   19142:	4690      	mov	r8, r2
   19144:	460a      	mov	r2, r1
   19146:	4601      	mov	r1, r0
   19148:	4668      	mov	r0, sp
   1914a:	f7e7 fa49 	bl	5e0 <ocrypto_mod_p256_sub>
   1914e:	4669      	mov	r1, sp
   19150:	4668      	mov	r0, sp
   19152:	f7e7 faf5 	bl	740 <ocrypto_mod_p256_sqr>
   19156:	466a      	mov	r2, sp
   19158:	4629      	mov	r1, r5
   1915a:	4628      	mov	r0, r5
   1915c:	f104 0620 	add.w	r6, r4, #32
   19160:	f7e7 fad6 	bl	710 <ocrypto_mod_p256_mul>
   19164:	f105 0720 	add.w	r7, r5, #32
   19168:	466a      	mov	r2, sp
   1916a:	4621      	mov	r1, r4
   1916c:	4668      	mov	r0, sp
   1916e:	f7e7 facf 	bl	710 <ocrypto_mod_p256_mul>
   19172:	4632      	mov	r2, r6
   19174:	4639      	mov	r1, r7
   19176:	4630      	mov	r0, r6
   19178:	f7e7 fa32 	bl	5e0 <ocrypto_mod_p256_sub>
   1917c:	4631      	mov	r1, r6
   1917e:	4620      	mov	r0, r4
   19180:	f7e7 fade 	bl	740 <ocrypto_mod_p256_sqr>
   19184:	462a      	mov	r2, r5
   19186:	4621      	mov	r1, r4
   19188:	4620      	mov	r0, r4
   1918a:	f7e7 fa29 	bl	5e0 <ocrypto_mod_p256_sub>
   1918e:	466a      	mov	r2, sp
   19190:	4621      	mov	r1, r4
   19192:	4620      	mov	r0, r4
   19194:	f7e7 fa24 	bl	5e0 <ocrypto_mod_p256_sub>
   19198:	466a      	mov	r2, sp
   1919a:	4629      	mov	r1, r5
   1919c:	4640      	mov	r0, r8
   1919e:	f7e7 fa1f 	bl	5e0 <ocrypto_mod_p256_sub>
   191a2:	4642      	mov	r2, r8
   191a4:	4639      	mov	r1, r7
   191a6:	4638      	mov	r0, r7
   191a8:	f7e7 fab2 	bl	710 <ocrypto_mod_p256_mul>
   191ac:	4622      	mov	r2, r4
   191ae:	4629      	mov	r1, r5
   191b0:	4668      	mov	r0, sp
   191b2:	f7e7 fa15 	bl	5e0 <ocrypto_mod_p256_sub>
   191b6:	466a      	mov	r2, sp
   191b8:	4631      	mov	r1, r6
   191ba:	4630      	mov	r0, r6
   191bc:	f7e7 faa8 	bl	710 <ocrypto_mod_p256_mul>
   191c0:	463a      	mov	r2, r7
   191c2:	4631      	mov	r1, r6
   191c4:	4630      	mov	r0, r6
   191c6:	f7e7 fa0b 	bl	5e0 <ocrypto_mod_p256_sub>
   191ca:	b008      	add	sp, #32
   191cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000191d0 <ocrypto_curve_p256_from64bytes>:
   191d0:	b570      	push	{r4, r5, r6, lr}
   191d2:	f100 0620 	add.w	r6, r0, #32
   191d6:	b090      	sub	sp, #64	; 0x40
   191d8:	460d      	mov	r5, r1
   191da:	4604      	mov	r4, r0
   191dc:	f000 f914 	bl	19408 <ocrypto_mod_p256_from_bytes>
   191e0:	f105 0120 	add.w	r1, r5, #32
   191e4:	4630      	mov	r0, r6
   191e6:	f000 f90f 	bl	19408 <ocrypto_mod_p256_from_bytes>
   191ea:	4621      	mov	r1, r4
   191ec:	a808      	add	r0, sp, #32
   191ee:	f7e7 faa7 	bl	740 <ocrypto_mod_p256_sqr>
   191f2:	a908      	add	r1, sp, #32
   191f4:	4608      	mov	r0, r1
   191f6:	4a0d      	ldr	r2, [pc, #52]	; (1922c <ocrypto_curve_p256_from64bytes+0x5c>)
   191f8:	f7e7 f9b4 	bl	564 <ocrypto_mod_p256_add>
   191fc:	a908      	add	r1, sp, #32
   191fe:	4622      	mov	r2, r4
   19200:	4608      	mov	r0, r1
   19202:	f7e7 fa85 	bl	710 <ocrypto_mod_p256_mul>
   19206:	a908      	add	r1, sp, #32
   19208:	4a09      	ldr	r2, [pc, #36]	; (19230 <ocrypto_curve_p256_from64bytes+0x60>)
   1920a:	4608      	mov	r0, r1
   1920c:	f7e7 f9aa 	bl	564 <ocrypto_mod_p256_add>
   19210:	4631      	mov	r1, r6
   19212:	4668      	mov	r0, sp
   19214:	f7e7 fa94 	bl	740 <ocrypto_mod_p256_sqr>
   19218:	2220      	movs	r2, #32
   1921a:	4669      	mov	r1, sp
   1921c:	eb0d 0002 	add.w	r0, sp, r2
   19220:	f7e7 f972 	bl	508 <ocrypto_constant_time_equal>
   19224:	3801      	subs	r0, #1
   19226:	b010      	add	sp, #64	; 0x40
   19228:	bd70      	pop	{r4, r5, r6, pc}
   1922a:	bf00      	nop
   1922c:	0001d9fc 	.word	0x0001d9fc
   19230:	0001da1c 	.word	0x0001da1c

00019234 <ocrypto_curve_p256_to32bytes>:
   19234:	f000 b902 	b.w	1943c <ocrypto_mod_p256_to_bytes>

00019238 <ocrypto_curve_p256_to64bytes>:
   19238:	b538      	push	{r3, r4, r5, lr}
   1923a:	4604      	mov	r4, r0
   1923c:	460d      	mov	r5, r1
   1923e:	f000 f8fd 	bl	1943c <ocrypto_mod_p256_to_bytes>
   19242:	f105 0120 	add.w	r1, r5, #32
   19246:	f104 0020 	add.w	r0, r4, #32
   1924a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1924e:	f000 b8f5 	b.w	1943c <ocrypto_mod_p256_to_bytes>
   19252:	bf00      	nop

00019254 <ocrypto_curve_p256_scalarmult>:
   19254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19258:	4613      	mov	r3, r2
   1925a:	b0b8      	sub	sp, #224	; 0xe0
   1925c:	4a54      	ldr	r2, [pc, #336]	; (193b0 <ocrypto_curve_p256_scalarmult+0x15c>)
   1925e:	4689      	mov	r9, r1
   19260:	4680      	mov	r8, r0
   19262:	4619      	mov	r1, r3
   19264:	a810      	add	r0, sp, #64	; 0x40
   19266:	f7e6 ff61 	bl	12c <ocrypto_bigint_sub256>
   1926a:	4952      	ldr	r1, [pc, #328]	; (193b4 <ocrypto_curve_p256_scalarmult+0x160>)
   1926c:	4602      	mov	r2, r0
   1926e:	a810      	add	r0, sp, #64	; 0x40
   19270:	f7e6 ff7c 	bl	16c <ocrypto_bigint_cadd256>
   19274:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   19276:	494e      	ldr	r1, [pc, #312]	; (193b0 <ocrypto_curve_p256_scalarmult+0x15c>)
   19278:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   1927c:	4607      	mov	r7, r0
   1927e:	f1c6 0201 	rsb	r2, r6, #1
   19282:	a810      	add	r0, sp, #64	; 0x40
   19284:	f7e6 ff72 	bl	16c <ocrypto_bigint_cadd256>
   19288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1928a:	464a      	mov	r2, r9
   1928c:	ea6f 0a03 	mvn.w	sl, r3
   19290:	a928      	add	r1, sp, #160	; 0xa0
   19292:	a818      	add	r0, sp, #96	; 0x60
   19294:	f7ff fe8e 	bl	18fb4 <p256_zdblu>
   19298:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   1929c:	a920      	add	r1, sp, #128	; 0x80
   1929e:	f1ca 0201 	rsb	r2, sl, #1
   192a2:	4608      	mov	r0, r1
   192a4:	f000 f892 	bl	193cc <ocrypto_mod_p256_cneg>
   192a8:	f1c7 0701 	rsb	r7, r7, #1
   192ac:	24fe      	movs	r4, #254	; 0xfe
   192ae:	466a      	mov	r2, sp
   192b0:	a918      	add	r1, sp, #96	; 0x60
   192b2:	a828      	add	r0, sp, #160	; 0xa0
   192b4:	f7ff ff40 	bl	19138 <p256_zaddu>
   192b8:	1162      	asrs	r2, r4, #5
   192ba:	ab38      	add	r3, sp, #224	; 0xe0
   192bc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   192c0:	f004 011f 	and.w	r1, r4, #31
   192c4:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   192c8:	40cb      	lsrs	r3, r1
   192ca:	4655      	mov	r5, sl
   192cc:	f003 0a01 	and.w	sl, r3, #1
   192d0:	ea8a 0505 	eor.w	r5, sl, r5
   192d4:	462a      	mov	r2, r5
   192d6:	a928      	add	r1, sp, #160	; 0xa0
   192d8:	a818      	add	r0, sp, #96	; 0x60
   192da:	f7e6 ffa3 	bl	224 <ocrypto_bigint_cswap256>
   192de:	462a      	mov	r2, r5
   192e0:	a930      	add	r1, sp, #192	; 0xc0
   192e2:	a820      	add	r0, sp, #128	; 0x80
   192e4:	f7e6 ff9e 	bl	224 <ocrypto_bigint_cswap256>
   192e8:	3c01      	subs	r4, #1
   192ea:	a928      	add	r1, sp, #160	; 0xa0
   192ec:	a818      	add	r0, sp, #96	; 0x60
   192ee:	f7ff febd 	bl	1906c <p256_zaddc>
   192f2:	1c63      	adds	r3, r4, #1
   192f4:	d1db      	bne.n	192ae <ocrypto_curve_p256_scalarmult+0x5a>
   192f6:	f1ca 0201 	rsb	r2, sl, #1
   192fa:	a920      	add	r1, sp, #128	; 0x80
   192fc:	a808      	add	r0, sp, #32
   192fe:	f000 f865 	bl	193cc <ocrypto_mod_p256_cneg>
   19302:	ea86 060a 	eor.w	r6, r6, sl
   19306:	466a      	mov	r2, sp
   19308:	a918      	add	r1, sp, #96	; 0x60
   1930a:	a828      	add	r0, sp, #160	; 0xa0
   1930c:	f7ff ff14 	bl	19138 <p256_zaddu>
   19310:	a928      	add	r1, sp, #160	; 0xa0
   19312:	4632      	mov	r2, r6
   19314:	a818      	add	r0, sp, #96	; 0x60
   19316:	f7e6 ff85 	bl	224 <ocrypto_bigint_cswap256>
   1931a:	4632      	mov	r2, r6
   1931c:	a930      	add	r1, sp, #192	; 0xc0
   1931e:	a820      	add	r0, sp, #128	; 0x80
   19320:	f7e6 ff80 	bl	224 <ocrypto_bigint_cswap256>
   19324:	a908      	add	r1, sp, #32
   19326:	466a      	mov	r2, sp
   19328:	4608      	mov	r0, r1
   1932a:	f7e7 f9f1 	bl	710 <ocrypto_mod_p256_mul>
   1932e:	a908      	add	r1, sp, #32
   19330:	4608      	mov	r0, r1
   19332:	f000 f89d 	bl	19470 <ocrypto_mod_p256_inv>
   19336:	a908      	add	r1, sp, #32
   19338:	f108 0420 	add.w	r4, r8, #32
   1933c:	f109 0220 	add.w	r2, r9, #32
   19340:	4608      	mov	r0, r1
   19342:	f7e7 f9e5 	bl	710 <ocrypto_mod_p256_mul>
   19346:	a920      	add	r1, sp, #128	; 0x80
   19348:	aa08      	add	r2, sp, #32
   1934a:	4620      	mov	r0, r4
   1934c:	f7e7 f9e0 	bl	710 <ocrypto_mod_p256_mul>
   19350:	aa08      	add	r2, sp, #32
   19352:	a918      	add	r1, sp, #96	; 0x60
   19354:	4668      	mov	r0, sp
   19356:	f7e7 f9db 	bl	710 <ocrypto_mod_p256_mul>
   1935a:	4669      	mov	r1, sp
   1935c:	4668      	mov	r0, sp
   1935e:	f7e7 f9ef 	bl	740 <ocrypto_mod_p256_sqr>
   19362:	aa18      	add	r2, sp, #96	; 0x60
   19364:	4669      	mov	r1, sp
   19366:	a808      	add	r0, sp, #32
   19368:	f7e7 f9d2 	bl	710 <ocrypto_mod_p256_mul>
   1936c:	4621      	mov	r1, r4
   1936e:	4668      	mov	r0, sp
   19370:	f7e7 f9e6 	bl	740 <ocrypto_mod_p256_sqr>
   19374:	aa08      	add	r2, sp, #32
   19376:	4669      	mov	r1, sp
   19378:	4610      	mov	r0, r2
   1937a:	f7e7 f931 	bl	5e0 <ocrypto_mod_p256_sub>
   1937e:	4a0e      	ldr	r2, [pc, #56]	; (193b8 <ocrypto_curve_p256_scalarmult+0x164>)
   19380:	a908      	add	r1, sp, #32
   19382:	4668      	mov	r0, sp
   19384:	f7e7 f92c 	bl	5e0 <ocrypto_mod_p256_sub>
   19388:	4620      	mov	r0, r4
   1938a:	2120      	movs	r1, #32
   1938c:	f7e7 f8d0 	bl	530 <ocrypto_constant_time_is_zero>
   19390:	a908      	add	r1, sp, #32
   19392:	4243      	negs	r3, r0
   19394:	4602      	mov	r2, r0
   19396:	4668      	mov	r0, sp
   19398:	431f      	orrs	r7, r3
   1939a:	f7e6 ff43 	bl	224 <ocrypto_bigint_cswap256>
   1939e:	4640      	mov	r0, r8
   193a0:	4a06      	ldr	r2, [pc, #24]	; (193bc <ocrypto_curve_p256_scalarmult+0x168>)
   193a2:	4669      	mov	r1, sp
   193a4:	f7e7 f9b4 	bl	710 <ocrypto_mod_p256_mul>
   193a8:	4638      	mov	r0, r7
   193aa:	b038      	add	sp, #224	; 0xe0
   193ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   193b0:	0001da3c 	.word	0x0001da3c
   193b4:	0001d9bc 	.word	0x0001d9bc
   193b8:	0001da1c 	.word	0x0001da1c
   193bc:	0001d9dc 	.word	0x0001d9dc

000193c0 <ocrypto_curve_p256_scalarmult_base>:
   193c0:	460a      	mov	r2, r1
   193c2:	4901      	ldr	r1, [pc, #4]	; (193c8 <ocrypto_curve_p256_scalarmult_base+0x8>)
   193c4:	f7ff bf46 	b.w	19254 <ocrypto_curve_p256_scalarmult>
   193c8:	0001d97c 	.word	0x0001d97c

000193cc <ocrypto_mod_p256_cneg>:
   193cc:	b570      	push	{r4, r5, r6, lr}
   193ce:	b088      	sub	sp, #32
   193d0:	4604      	mov	r4, r0
   193d2:	460d      	mov	r5, r1
   193d4:	4616      	mov	r6, r2
   193d6:	2100      	movs	r1, #0
   193d8:	2220      	movs	r2, #32
   193da:	4668      	mov	r0, sp
   193dc:	f003 ff0f 	bl	1d1fe <memset>
   193e0:	2300      	movs	r3, #0
   193e2:	4629      	mov	r1, r5
   193e4:	2220      	movs	r2, #32
   193e6:	4620      	mov	r0, r4
   193e8:	9300      	str	r3, [sp, #0]
   193ea:	f003 fefa 	bl	1d1e2 <memcpy>
   193ee:	462a      	mov	r2, r5
   193f0:	4669      	mov	r1, sp
   193f2:	4668      	mov	r0, sp
   193f4:	f7e7 f8f4 	bl	5e0 <ocrypto_mod_p256_sub>
   193f8:	4632      	mov	r2, r6
   193fa:	4669      	mov	r1, sp
   193fc:	4620      	mov	r0, r4
   193fe:	f7e6 ff11 	bl	224 <ocrypto_bigint_cswap256>
   19402:	b008      	add	sp, #32
   19404:	bd70      	pop	{r4, r5, r6, pc}
   19406:	bf00      	nop

00019408 <ocrypto_mod_p256_from_bytes>:
   19408:	680b      	ldr	r3, [r1, #0]
   1940a:	ba1b      	rev	r3, r3
   1940c:	61c3      	str	r3, [r0, #28]
   1940e:	684b      	ldr	r3, [r1, #4]
   19410:	ba1b      	rev	r3, r3
   19412:	6183      	str	r3, [r0, #24]
   19414:	688b      	ldr	r3, [r1, #8]
   19416:	ba1b      	rev	r3, r3
   19418:	6143      	str	r3, [r0, #20]
   1941a:	68cb      	ldr	r3, [r1, #12]
   1941c:	ba1b      	rev	r3, r3
   1941e:	6103      	str	r3, [r0, #16]
   19420:	690b      	ldr	r3, [r1, #16]
   19422:	ba1b      	rev	r3, r3
   19424:	60c3      	str	r3, [r0, #12]
   19426:	694b      	ldr	r3, [r1, #20]
   19428:	ba1b      	rev	r3, r3
   1942a:	6083      	str	r3, [r0, #8]
   1942c:	698b      	ldr	r3, [r1, #24]
   1942e:	ba1b      	rev	r3, r3
   19430:	6043      	str	r3, [r0, #4]
   19432:	69cb      	ldr	r3, [r1, #28]
   19434:	ba1b      	rev	r3, r3
   19436:	6003      	str	r3, [r0, #0]
   19438:	4770      	bx	lr
   1943a:	bf00      	nop

0001943c <ocrypto_mod_p256_to_bytes>:
   1943c:	69cb      	ldr	r3, [r1, #28]
   1943e:	ba1b      	rev	r3, r3
   19440:	6003      	str	r3, [r0, #0]
   19442:	698b      	ldr	r3, [r1, #24]
   19444:	ba1b      	rev	r3, r3
   19446:	6043      	str	r3, [r0, #4]
   19448:	694b      	ldr	r3, [r1, #20]
   1944a:	ba1b      	rev	r3, r3
   1944c:	6083      	str	r3, [r0, #8]
   1944e:	690b      	ldr	r3, [r1, #16]
   19450:	ba1b      	rev	r3, r3
   19452:	60c3      	str	r3, [r0, #12]
   19454:	68cb      	ldr	r3, [r1, #12]
   19456:	ba1b      	rev	r3, r3
   19458:	6103      	str	r3, [r0, #16]
   1945a:	688b      	ldr	r3, [r1, #8]
   1945c:	ba1b      	rev	r3, r3
   1945e:	6143      	str	r3, [r0, #20]
   19460:	684b      	ldr	r3, [r1, #4]
   19462:	ba1b      	rev	r3, r3
   19464:	6183      	str	r3, [r0, #24]
   19466:	680b      	ldr	r3, [r1, #0]
   19468:	ba1b      	rev	r3, r3
   1946a:	61c3      	str	r3, [r0, #28]
   1946c:	4770      	bx	lr
   1946e:	bf00      	nop

00019470 <ocrypto_mod_p256_inv>:
   19470:	b570      	push	{r4, r5, r6, lr}
   19472:	b098      	sub	sp, #96	; 0x60
   19474:	460d      	mov	r5, r1
   19476:	4606      	mov	r6, r0
   19478:	a810      	add	r0, sp, #64	; 0x40
   1947a:	f7e7 f961 	bl	740 <ocrypto_mod_p256_sqr>
   1947e:	462a      	mov	r2, r5
   19480:	a910      	add	r1, sp, #64	; 0x40
   19482:	4668      	mov	r0, sp
   19484:	f7e7 f944 	bl	710 <ocrypto_mod_p256_mul>
   19488:	4669      	mov	r1, sp
   1948a:	a810      	add	r0, sp, #64	; 0x40
   1948c:	f7e7 f958 	bl	740 <ocrypto_mod_p256_sqr>
   19490:	a910      	add	r1, sp, #64	; 0x40
   19492:	4608      	mov	r0, r1
   19494:	f7e7 f954 	bl	740 <ocrypto_mod_p256_sqr>
   19498:	466a      	mov	r2, sp
   1949a:	a910      	add	r1, sp, #64	; 0x40
   1949c:	a808      	add	r0, sp, #32
   1949e:	f7e7 f937 	bl	710 <ocrypto_mod_p256_mul>
   194a2:	a908      	add	r1, sp, #32
   194a4:	a810      	add	r0, sp, #64	; 0x40
   194a6:	f7e7 f94b 	bl	740 <ocrypto_mod_p256_sqr>
   194aa:	a910      	add	r1, sp, #64	; 0x40
   194ac:	4608      	mov	r0, r1
   194ae:	f7e7 f947 	bl	740 <ocrypto_mod_p256_sqr>
   194b2:	a910      	add	r1, sp, #64	; 0x40
   194b4:	4608      	mov	r0, r1
   194b6:	f7e7 f943 	bl	740 <ocrypto_mod_p256_sqr>
   194ba:	a910      	add	r1, sp, #64	; 0x40
   194bc:	4608      	mov	r0, r1
   194be:	f7e7 f93f 	bl	740 <ocrypto_mod_p256_sqr>
   194c2:	a910      	add	r1, sp, #64	; 0x40
   194c4:	aa08      	add	r2, sp, #32
   194c6:	4608      	mov	r0, r1
   194c8:	f7e7 f922 	bl	710 <ocrypto_mod_p256_mul>
   194cc:	a910      	add	r1, sp, #64	; 0x40
   194ce:	4608      	mov	r0, r1
   194d0:	f7e7 f936 	bl	740 <ocrypto_mod_p256_sqr>
   194d4:	a910      	add	r1, sp, #64	; 0x40
   194d6:	4608      	mov	r0, r1
   194d8:	f7e7 f932 	bl	740 <ocrypto_mod_p256_sqr>
   194dc:	a910      	add	r1, sp, #64	; 0x40
   194de:	466a      	mov	r2, sp
   194e0:	a808      	add	r0, sp, #32
   194e2:	f7e7 f915 	bl	710 <ocrypto_mod_p256_mul>
   194e6:	2405      	movs	r4, #5
   194e8:	a908      	add	r1, sp, #32
   194ea:	a810      	add	r0, sp, #64	; 0x40
   194ec:	f7e7 f928 	bl	740 <ocrypto_mod_p256_sqr>
   194f0:	a910      	add	r1, sp, #64	; 0x40
   194f2:	4608      	mov	r0, r1
   194f4:	f7e7 f924 	bl	740 <ocrypto_mod_p256_sqr>
   194f8:	3c01      	subs	r4, #1
   194fa:	a910      	add	r1, sp, #64	; 0x40
   194fc:	d1f5      	bne.n	194ea <ocrypto_mod_p256_inv+0x7a>
   194fe:	aa08      	add	r2, sp, #32
   19500:	4608      	mov	r0, r1
   19502:	f7e7 f905 	bl	710 <ocrypto_mod_p256_mul>
   19506:	2405      	movs	r4, #5
   19508:	a910      	add	r1, sp, #64	; 0x40
   1950a:	4608      	mov	r0, r1
   1950c:	f7e7 f918 	bl	740 <ocrypto_mod_p256_sqr>
   19510:	a910      	add	r1, sp, #64	; 0x40
   19512:	4608      	mov	r0, r1
   19514:	f7e7 f914 	bl	740 <ocrypto_mod_p256_sqr>
   19518:	3c01      	subs	r4, #1
   1951a:	d1f5      	bne.n	19508 <ocrypto_mod_p256_inv+0x98>
   1951c:	a910      	add	r1, sp, #64	; 0x40
   1951e:	aa08      	add	r2, sp, #32
   19520:	4608      	mov	r0, r1
   19522:	f7e7 f8f5 	bl	710 <ocrypto_mod_p256_mul>
   19526:	a910      	add	r1, sp, #64	; 0x40
   19528:	a808      	add	r0, sp, #32
   1952a:	f7e7 f909 	bl	740 <ocrypto_mod_p256_sqr>
   1952e:	a908      	add	r1, sp, #32
   19530:	4608      	mov	r0, r1
   19532:	f7e7 f905 	bl	740 <ocrypto_mod_p256_sqr>
   19536:	a908      	add	r1, sp, #32
   19538:	466a      	mov	r2, sp
   1953a:	4668      	mov	r0, sp
   1953c:	f7e7 f8e8 	bl	710 <ocrypto_mod_p256_mul>
   19540:	2410      	movs	r4, #16
   19542:	4669      	mov	r1, sp
   19544:	a810      	add	r0, sp, #64	; 0x40
   19546:	f7e7 f8fb 	bl	740 <ocrypto_mod_p256_sqr>
   1954a:	a910      	add	r1, sp, #64	; 0x40
   1954c:	4608      	mov	r0, r1
   1954e:	f7e7 f8f7 	bl	740 <ocrypto_mod_p256_sqr>
   19552:	3c01      	subs	r4, #1
   19554:	a910      	add	r1, sp, #64	; 0x40
   19556:	d1f5      	bne.n	19544 <ocrypto_mod_p256_inv+0xd4>
   19558:	462a      	mov	r2, r5
   1955a:	4608      	mov	r0, r1
   1955c:	f7e7 f8d8 	bl	710 <ocrypto_mod_p256_mul>
   19560:	2440      	movs	r4, #64	; 0x40
   19562:	a910      	add	r1, sp, #64	; 0x40
   19564:	4608      	mov	r0, r1
   19566:	f7e7 f8eb 	bl	740 <ocrypto_mod_p256_sqr>
   1956a:	a910      	add	r1, sp, #64	; 0x40
   1956c:	4608      	mov	r0, r1
   1956e:	f7e7 f8e7 	bl	740 <ocrypto_mod_p256_sqr>
   19572:	3c01      	subs	r4, #1
   19574:	d1f5      	bne.n	19562 <ocrypto_mod_p256_inv+0xf2>
   19576:	a910      	add	r1, sp, #64	; 0x40
   19578:	466a      	mov	r2, sp
   1957a:	4608      	mov	r0, r1
   1957c:	f7e7 f8c8 	bl	710 <ocrypto_mod_p256_mul>
   19580:	2410      	movs	r4, #16
   19582:	a910      	add	r1, sp, #64	; 0x40
   19584:	4608      	mov	r0, r1
   19586:	f7e7 f8db 	bl	740 <ocrypto_mod_p256_sqr>
   1958a:	a910      	add	r1, sp, #64	; 0x40
   1958c:	4608      	mov	r0, r1
   1958e:	f7e7 f8d7 	bl	740 <ocrypto_mod_p256_sqr>
   19592:	3c01      	subs	r4, #1
   19594:	d1f5      	bne.n	19582 <ocrypto_mod_p256_inv+0x112>
   19596:	a910      	add	r1, sp, #64	; 0x40
   19598:	466a      	mov	r2, sp
   1959a:	4608      	mov	r0, r1
   1959c:	f7e7 f8b8 	bl	710 <ocrypto_mod_p256_mul>
   195a0:	2410      	movs	r4, #16
   195a2:	a910      	add	r1, sp, #64	; 0x40
   195a4:	4608      	mov	r0, r1
   195a6:	f7e7 f8cb 	bl	740 <ocrypto_mod_p256_sqr>
   195aa:	a910      	add	r1, sp, #64	; 0x40
   195ac:	4608      	mov	r0, r1
   195ae:	f7e7 f8c7 	bl	740 <ocrypto_mod_p256_sqr>
   195b2:	3c01      	subs	r4, #1
   195b4:	d1f5      	bne.n	195a2 <ocrypto_mod_p256_inv+0x132>
   195b6:	a910      	add	r1, sp, #64	; 0x40
   195b8:	aa08      	add	r2, sp, #32
   195ba:	4608      	mov	r0, r1
   195bc:	f7e7 f8a8 	bl	710 <ocrypto_mod_p256_mul>
   195c0:	462a      	mov	r2, r5
   195c2:	a910      	add	r1, sp, #64	; 0x40
   195c4:	4630      	mov	r0, r6
   195c6:	f7e7 f8a3 	bl	710 <ocrypto_mod_p256_mul>
   195ca:	b018      	add	sp, #96	; 0x60
   195cc:	bd70      	pop	{r4, r5, r6, pc}
   195ce:	bf00      	nop

000195d0 <gpio_pin_configure_dt.constprop.0.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   195d0:	b4f0      	push	{r4, r5, r6, r7}
   195d2:	4603      	mov	r3, r0
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
   195d4:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   195d6:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   195d8:	88db      	ldrh	r3, [r3, #6]
	struct gpio_driver_data *data =
   195da:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
   195dc:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   195de:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   195e0:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   195e2:	bf54      	ite	pl
   195e4:	f443 13d0 	orrpl.w	r3, r3, #1703936	; 0x1a0000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   195e8:	f483 13b0 	eormi.w	r3, r3, #1441792	; 0x160000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   195ec:	2501      	movs	r5, #1
   195ee:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   195f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   195f4:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   195f6:	bf4c      	ite	mi
   195f8:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   195fa:	43ac      	bicpl	r4, r5
   195fc:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   195fe:	683b      	ldr	r3, [r7, #0]
}
   19600:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   19602:	4718      	bx	r3

00019604 <arch_printk_char_out>:
}
   19604:	2000      	movs	r0, #0
   19606:	4770      	bx	lr

00019608 <str_out>:
{
   19608:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1960a:	688a      	ldr	r2, [r1, #8]
   1960c:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1960e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   19610:	b114      	cbz	r4, 19618 <str_out+0x10>
   19612:	684b      	ldr	r3, [r1, #4]
   19614:	4293      	cmp	r3, r2
   19616:	dc01      	bgt.n	1961c <str_out+0x14>
		ctx->count++;
   19618:	608d      	str	r5, [r1, #8]
}
   1961a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1961c:	3b01      	subs	r3, #1
   1961e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   19620:	bf08      	it	eq
   19622:	2200      	moveq	r2, #0
   19624:	608d      	str	r5, [r1, #8]
   19626:	bf0c      	ite	eq
   19628:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1962a:	54a0      	strbne	r0, [r4, r2]
   1962c:	e7f5      	b.n	1961a <str_out+0x12>

0001962e <printk>:
{
   1962e:	b40f      	push	{r0, r1, r2, r3}
   19630:	b507      	push	{r0, r1, r2, lr}
   19632:	a904      	add	r1, sp, #16
   19634:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   19638:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   1963a:	f7f6 fe4f 	bl	102dc <vprintk>
}
   1963e:	b003      	add	sp, #12
   19640:	f85d eb04 	ldr.w	lr, [sp], #4
   19644:	b004      	add	sp, #16
   19646:	4770      	bx	lr

00019648 <snprintk>:
{
   19648:	b40c      	push	{r2, r3}
   1964a:	b507      	push	{r0, r1, r2, lr}
   1964c:	ab04      	add	r3, sp, #16
   1964e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   19652:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   19654:	f7f6 fe50 	bl	102f8 <vsnprintk>
}
   19658:	b003      	add	sp, #12
   1965a:	f85d eb04 	ldr.w	lr, [sp], #4
   1965e:	b002      	add	sp, #8
   19660:	4770      	bx	lr

00019662 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   19662:	4604      	mov	r4, r0
   19664:	b508      	push	{r3, lr}
   19666:	4608      	mov	r0, r1
   19668:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1966a:	461a      	mov	r2, r3
   1966c:	47a0      	blx	r4
	return z_impl_z_current_get();
   1966e:	f7ff f917 	bl	188a0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   19672:	f7f7 ff9d 	bl	115b0 <z_impl_k_thread_abort>

00019676 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   19676:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1967a:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1967c:	0840      	lsrs	r0, r0, #1
   1967e:	4770      	bx	lr

00019680 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   19680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19682:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   19684:	f7ff fff7 	bl	19676 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   19688:	fab0 f080 	clz	r0, r0
   1968c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   19690:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   19694:	00ca      	lsls	r2, r1, #3
   19696:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1969a:	1d17      	adds	r7, r2, #4
{
   1969c:	460c      	mov	r4, r1
   1969e:	3206      	adds	r2, #6
   196a0:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   196a2:	b956      	cbnz	r6, 196ba <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   196a4:	2101      	movs	r1, #1
   196a6:	fa01 f000 	lsl.w	r0, r1, r0
   196aa:	68d9      	ldr	r1, [r3, #12]
   196ac:	4301      	orrs	r1, r0
   196ae:	60d9      	str	r1, [r3, #12]
		b->next = c;
   196b0:	f8cc 4010 	str.w	r4, [ip, #16]
   196b4:	53dd      	strh	r5, [r3, r7]
   196b6:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   196b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   196ba:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   196bc:	3104      	adds	r1, #4
   196be:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   196c0:	53d8      	strh	r0, [r3, r7]
   196c2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   196c6:	529e      	strh	r6, [r3, r2]
   196c8:	80c5      	strh	r5, [r0, #6]
   196ca:	525d      	strh	r5, [r3, r1]
   196cc:	e7f4      	b.n	196b8 <free_list_add+0x38>

000196ce <free_list_remove_bidx>:
{
   196ce:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   196d0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   196d4:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   196d6:	4299      	cmp	r1, r3
   196d8:	f102 0104 	add.w	r1, r2, #4
   196dc:	d10a      	bne.n	196f4 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   196de:	2301      	movs	r3, #1
   196e0:	fa03 f202 	lsl.w	r2, r3, r2
   196e4:	68c3      	ldr	r3, [r0, #12]
   196e6:	ea23 0302 	bic.w	r3, r3, r2
   196ea:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   196ec:	2300      	movs	r3, #0
   196ee:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   196f2:	bd10      	pop	{r4, pc}
   196f4:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   196f6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   196fa:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   196fe:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   19702:	80cb      	strh	r3, [r1, #6]
   19704:	8082      	strh	r2, [r0, #4]
}
   19706:	e7f4      	b.n	196f2 <free_list_remove_bidx+0x24>

00019708 <free_list_remove>:
{
   19708:	b508      	push	{r3, lr}
   1970a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1970c:	f7ff ffb3 	bl	19676 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   19710:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   19714:	f1c2 021f 	rsb	r2, r2, #31
   19718:	4618      	mov	r0, r3
}
   1971a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1971e:	f7ff bfd6 	b.w	196ce <free_list_remove_bidx>

00019722 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   19722:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19726:	fab1 f581 	clz	r5, r1
   1972a:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1972e:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   19732:	4603      	mov	r3, r0
	if (b->next) {
   19734:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   19738:	460e      	mov	r6, r1
	if (b->next) {
   1973a:	b1c2      	cbz	r2, 1976e <alloc_chunk+0x4c>
   1973c:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1973e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   19742:	4618      	mov	r0, r3
   19744:	4621      	mov	r1, r4
   19746:	f7ff ff96 	bl	19676 <chunk_size>
   1974a:	42b0      	cmp	r0, r6
   1974c:	d306      	bcc.n	1975c <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1974e:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   19750:	4618      	mov	r0, r3
   19752:	f7ff ffbc 	bl	196ce <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   19756:	4620      	mov	r0, r4
   19758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1975c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   19760:	3f01      	subs	r7, #1
   19762:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   19764:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   19768:	d001      	beq.n	1976e <alloc_chunk+0x4c>
   1976a:	4282      	cmp	r2, r0
   1976c:	d1e7      	bne.n	1973e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1976e:	f1c5 0220 	rsb	r2, r5, #32
   19772:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19776:	4094      	lsls	r4, r2
   19778:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1977a:	4014      	ands	r4, r2
   1977c:	d0eb      	beq.n	19756 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1977e:	fa94 f2a4 	rbit	r2, r4
   19782:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   19786:	1d11      	adds	r1, r2, #4
   19788:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1978c:	4621      	mov	r1, r4
   1978e:	e7df      	b.n	19750 <alloc_chunk+0x2e>

00019790 <merge_chunks>:
{
   19790:	b538      	push	{r3, r4, r5, lr}
   19792:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   19794:	f7ff ff6f 	bl	19676 <chunk_size>
{
   19798:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1979a:	4604      	mov	r4, r0
   1979c:	4611      	mov	r1, r2
   1979e:	4618      	mov	r0, r3
   197a0:	f7ff ff69 	bl	19676 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   197a4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   197a8:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   197aa:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   197ac:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   197ae:	4618      	mov	r0, r3
   197b0:	f7ff ff61 	bl	19676 <chunk_size>
	void *cmem = &buf[c];
   197b4:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   197b6:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   197ba:	bd38      	pop	{r3, r4, r5, pc}

000197bc <split_chunks>:
{
   197bc:	b538      	push	{r3, r4, r5, lr}
   197be:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   197c0:	f7ff ff59 	bl	19676 <chunk_size>
{
   197c4:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   197c6:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   197c8:	1a51      	subs	r1, r2, r1
   197ca:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   197ce:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   197d0:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   197d2:	8060      	strh	r0, [r4, #2]
   197d4:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   197d8:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   197da:	8044      	strh	r4, [r0, #2]
   197dc:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   197e0:	4618      	mov	r0, r3
   197e2:	4611      	mov	r1, r2
   197e4:	f7ff ff47 	bl	19676 <chunk_size>
	void *cmem = &buf[c];
   197e8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   197ea:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   197ee:	bd38      	pop	{r3, r4, r5, pc}

000197f0 <free_chunk>:
{
   197f0:	b538      	push	{r3, r4, r5, lr}
   197f2:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   197f4:	f7ff ff3f 	bl	19676 <chunk_size>
   197f8:	460c      	mov	r4, r1
   197fa:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   197fc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19800:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   19802:	07da      	lsls	r2, r3, #31
   19804:	d40a      	bmi.n	1981c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   19806:	4628      	mov	r0, r5
   19808:	f7ff ff7e 	bl	19708 <free_list_remove>
	return c + chunk_size(h, c);
   1980c:	4621      	mov	r1, r4
   1980e:	4628      	mov	r0, r5
   19810:	f7ff ff31 	bl	19676 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   19814:	1822      	adds	r2, r4, r0
   19816:	4628      	mov	r0, r5
   19818:	f7ff ffba 	bl	19790 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1981c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   19820:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   19822:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19826:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   19828:	07db      	lsls	r3, r3, #31
   1982a:	d40c      	bmi.n	19846 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1982c:	4628      	mov	r0, r5
   1982e:	f7ff ff6b 	bl	19708 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   19832:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   19836:	4622      	mov	r2, r4
   19838:	1a61      	subs	r1, r4, r1
   1983a:	4628      	mov	r0, r5
   1983c:	f7ff ffa8 	bl	19790 <merge_chunks>
   19840:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   19844:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   19846:	4621      	mov	r1, r4
   19848:	4628      	mov	r0, r5
}
   1984a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1984e:	f7ff bf17 	b.w	19680 <free_list_add>

00019852 <sys_heap_free>:
	if (mem == NULL) {
   19852:	b161      	cbz	r1, 1986e <sys_heap_free+0x1c>
   19854:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19856:	3904      	subs	r1, #4
   19858:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1985a:	f021 0307 	bic.w	r3, r1, #7
   1985e:	4403      	add	r3, r0
	free_chunk(h, c);
   19860:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19862:	885a      	ldrh	r2, [r3, #2]
   19864:	f022 0201 	bic.w	r2, r2, #1
   19868:	805a      	strh	r2, [r3, #2]
   1986a:	f7ff bfc1 	b.w	197f0 <free_chunk>
}
   1986e:	4770      	bx	lr

00019870 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   19870:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   19872:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   19874:	b909      	cbnz	r1, 1987a <sys_heap_alloc+0xa>
		return NULL;
   19876:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   19878:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1987a:	68ab      	ldr	r3, [r5, #8]
   1987c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   19880:	d9f9      	bls.n	19876 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19882:	310b      	adds	r1, #11
   19884:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   19886:	4621      	mov	r1, r4
   19888:	4628      	mov	r0, r5
   1988a:	f7ff ff4a 	bl	19722 <alloc_chunk>
	if (c == 0U) {
   1988e:	4606      	mov	r6, r0
   19890:	2800      	cmp	r0, #0
   19892:	d0f0      	beq.n	19876 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   19894:	4601      	mov	r1, r0
   19896:	4628      	mov	r0, r5
   19898:	f7ff feed 	bl	19676 <chunk_size>
   1989c:	42a0      	cmp	r0, r4
   1989e:	d907      	bls.n	198b0 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   198a0:	1932      	adds	r2, r6, r4
   198a2:	4628      	mov	r0, r5
   198a4:	f7ff ff8a 	bl	197bc <split_chunks>
		free_list_add(h, c + chunk_sz);
   198a8:	4611      	mov	r1, r2
   198aa:	4628      	mov	r0, r5
   198ac:	f7ff fee8 	bl	19680 <free_list_add>
	void *cmem = &buf[c];
   198b0:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   198b4:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   198b6:	8853      	ldrh	r3, [r2, #2]
   198b8:	f043 0301 	orr.w	r3, r3, #1
   198bc:	8053      	strh	r3, [r2, #2]
   198be:	3004      	adds	r0, #4
	return mem;
   198c0:	e7da      	b.n	19878 <sys_heap_alloc+0x8>

000198c2 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   198c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   198c6:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   198ca:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   198ce:	6806      	ldr	r6, [r0, #0]
{
   198d0:	460f      	mov	r7, r1
   198d2:	4614      	mov	r4, r2
	if (align != rew) {
   198d4:	d00c      	beq.n	198f0 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   198d6:	424b      	negs	r3, r1
   198d8:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   198da:	2b04      	cmp	r3, #4
   198dc:	461a      	mov	r2, r3
   198de:	464f      	mov	r7, r9
   198e0:	bf28      	it	cs
   198e2:	2204      	movcs	r2, #4
	rew = align & -align;
   198e4:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   198e6:	b964      	cbnz	r4, 19902 <sys_heap_aligned_alloc+0x40>
		return NULL;
   198e8:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   198ea:	4628      	mov	r0, r5
   198ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   198f0:	2904      	cmp	r1, #4
   198f2:	d804      	bhi.n	198fe <sys_heap_aligned_alloc+0x3c>
}
   198f4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   198f8:	4611      	mov	r1, r2
   198fa:	f7ff bfb9 	b.w	19870 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   198fe:	2204      	movs	r2, #4
   19900:	e7f1      	b.n	198e6 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   19902:	68b3      	ldr	r3, [r6, #8]
   19904:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   19908:	d9ee      	bls.n	198e8 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1990a:	f104 010b 	add.w	r1, r4, #11
   1990e:	4439      	add	r1, r7
   19910:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   19912:	08c9      	lsrs	r1, r1, #3
   19914:	4630      	mov	r0, r6
   19916:	f7ff ff04 	bl	19722 <alloc_chunk>
	if (c0 == 0) {
   1991a:	4680      	mov	r8, r0
   1991c:	2800      	cmp	r0, #0
   1991e:	d0e3      	beq.n	198e8 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   19920:	f109 0504 	add.w	r5, r9, #4
   19924:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   19928:	1e7b      	subs	r3, r7, #1
   1992a:	4435      	add	r5, r6
   1992c:	441d      	add	r5, r3
   1992e:	427f      	negs	r7, r7
   19930:	403d      	ands	r5, r7
   19932:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   19936:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19938:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1993a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1993c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1993e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   19942:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   19944:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19948:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1994c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   19950:	d208      	bcs.n	19964 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   19952:	4601      	mov	r1, r0
   19954:	463a      	mov	r2, r7
   19956:	4630      	mov	r0, r6
   19958:	f7ff ff30 	bl	197bc <split_chunks>
		free_list_add(h, c0);
   1995c:	4641      	mov	r1, r8
   1995e:	4630      	mov	r0, r6
   19960:	f7ff fe8e 	bl	19680 <free_list_add>
	return c + chunk_size(h, c);
   19964:	4639      	mov	r1, r7
   19966:	4630      	mov	r0, r6
   19968:	f7ff fe85 	bl	19676 <chunk_size>
   1996c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1996e:	4284      	cmp	r4, r0
   19970:	d207      	bcs.n	19982 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   19972:	4630      	mov	r0, r6
   19974:	4622      	mov	r2, r4
   19976:	f7ff ff21 	bl	197bc <split_chunks>
		free_list_add(h, c_end);
   1997a:	4621      	mov	r1, r4
   1997c:	4630      	mov	r0, r6
   1997e:	f7ff fe7f 	bl	19680 <free_list_add>
	void *cmem = &buf[c];
   19982:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19986:	8873      	ldrh	r3, [r6, #2]
   19988:	f043 0301 	orr.w	r3, r3, #1
   1998c:	8073      	strh	r3, [r6, #2]
   1998e:	e7ac      	b.n	198ea <sys_heap_aligned_alloc+0x28>

00019990 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   19990:	3a04      	subs	r2, #4
{
   19992:	b4f0      	push	{r4, r5, r6, r7}
   19994:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   19996:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   19998:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1999a:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1999e:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   199a2:	1a0e      	subs	r6, r1, r0
   199a4:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   199a6:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   199a8:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   199ac:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   199ae:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   199b2:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   199b4:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   199b6:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   199b8:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   199bc:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   199be:	f1c2 0220 	rsb	r2, r2, #32
   199c2:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   199c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   199c8:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   199cc:	4294      	cmp	r4, r2
   199ce:	d1fb      	bne.n	199c8 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   199d0:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   199d2:	f042 0201 	orr.w	r2, r2, #1
   199d6:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   199d8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   199dc:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   199de:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   199e0:	8007      	strh	r7, [r0, #0]
   199e2:	8065      	strh	r5, [r4, #2]
   199e4:	1984      	adds	r4, r0, r6
   199e6:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   199ea:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   199ee:	8067      	strh	r7, [r4, #2]
   199f0:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   199f2:	885a      	ldrh	r2, [r3, #2]
   199f4:	f042 0201 	orr.w	r2, r2, #1
   199f8:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   199fa:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   199fc:	f7ff be40 	b.w	19680 <free_list_add>

00019a00 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19a00:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   19a02:	f013 0307 	ands.w	r3, r3, #7
   19a06:	d105      	bne.n	19a14 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   19a08:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   19a0a:	2b00      	cmp	r3, #0
   19a0c:	bf0c      	ite	eq
   19a0e:	2000      	moveq	r0, #0
   19a10:	2003      	movne	r0, #3
   19a12:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   19a14:	2b02      	cmp	r3, #2
   19a16:	d105      	bne.n	19a24 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   19a18:	8b40      	ldrh	r0, [r0, #26]
   19a1a:	fab0 f080 	clz	r0, r0
   19a1e:	0940      	lsrs	r0, r0, #5
   19a20:	0080      	lsls	r0, r0, #2
   19a22:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   19a24:	2b01      	cmp	r3, #1
   19a26:	d105      	bne.n	19a34 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   19a28:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   19a2a:	2b00      	cmp	r3, #0
   19a2c:	bf0c      	ite	eq
   19a2e:	2000      	moveq	r0, #0
   19a30:	2005      	movne	r0, #5
   19a32:	4770      	bx	lr
	int evt = EVT_NOP;
   19a34:	2000      	movs	r0, #0
}
   19a36:	4770      	bx	lr

00019a38 <validate_args>:
{
   19a38:	b510      	push	{r4, lr}
   19a3a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   19a3c:	b100      	cbz	r0, 19a40 <validate_args+0x8>
   19a3e:	b911      	cbnz	r1, 19a46 <validate_args+0xe>
		return -EINVAL;
   19a40:	f06f 0015 	mvn.w	r0, #21
}
   19a44:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   19a46:	1d08      	adds	r0, r1, #4
   19a48:	f000 f895 	bl	19b76 <sys_notify_validate>
	if ((rv == 0)
   19a4c:	2800      	cmp	r0, #0
   19a4e:	d1f9      	bne.n	19a44 <validate_args+0xc>
	    && ((cli->notify.flags
   19a50:	68a3      	ldr	r3, [r4, #8]
   19a52:	2b03      	cmp	r3, #3
   19a54:	d9f6      	bls.n	19a44 <validate_args+0xc>
   19a56:	e7f3      	b.n	19a40 <validate_args+0x8>

00019a58 <notify_one>:
{
   19a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a5c:	460d      	mov	r5, r1
   19a5e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19a60:	4619      	mov	r1, r3
   19a62:	1d28      	adds	r0, r5, #4
{
   19a64:	4690      	mov	r8, r2
   19a66:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19a68:	f000 f899 	bl	19b9e <sys_notify_finalize>
	if (cb) {
   19a6c:	4604      	mov	r4, r0
   19a6e:	b138      	cbz	r0, 19a80 <notify_one+0x28>
		cb(mgr, cli, state, res);
   19a70:	4633      	mov	r3, r6
   19a72:	4642      	mov	r2, r8
   19a74:	4629      	mov	r1, r5
   19a76:	4638      	mov	r0, r7
   19a78:	46a4      	mov	ip, r4
}
   19a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   19a7e:	4760      	bx	ip
}
   19a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019a84 <transition_complete>:
{
   19a84:	b410      	push	{r4}
	__asm__ volatile(
   19a86:	f04f 0440 	mov.w	r4, #64	; 0x40
   19a8a:	f3ef 8211 	mrs	r2, BASEPRI
   19a8e:	f384 8812 	msr	BASEPRI_MAX, r4
   19a92:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   19a96:	6141      	str	r1, [r0, #20]
}
   19a98:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   19a9a:	2101      	movs	r1, #1
   19a9c:	f7f6 bc42 	b.w	10324 <process_event>

00019aa0 <onoff_manager_init>:
{
   19aa0:	b538      	push	{r3, r4, r5, lr}
   19aa2:	460c      	mov	r4, r1
	if ((mgr == NULL)
   19aa4:	4605      	mov	r5, r0
   19aa6:	b158      	cbz	r0, 19ac0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   19aa8:	b151      	cbz	r1, 19ac0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   19aaa:	680b      	ldr	r3, [r1, #0]
   19aac:	b143      	cbz	r3, 19ac0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   19aae:	684b      	ldr	r3, [r1, #4]
   19ab0:	b133      	cbz	r3, 19ac0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   19ab2:	221c      	movs	r2, #28
   19ab4:	2100      	movs	r1, #0
   19ab6:	f003 fba2 	bl	1d1fe <memset>
   19aba:	612c      	str	r4, [r5, #16]
	return 0;
   19abc:	2000      	movs	r0, #0
}
   19abe:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   19ac0:	f06f 0015 	mvn.w	r0, #21
   19ac4:	e7fb      	b.n	19abe <onoff_manager_init+0x1e>

00019ac6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   19ac6:	b570      	push	{r4, r5, r6, lr}
   19ac8:	4605      	mov	r5, r0
   19aca:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   19acc:	f7ff ffb4 	bl	19a38 <validate_args>

	if (rv < 0) {
   19ad0:	1e04      	subs	r4, r0, #0
   19ad2:	db15      	blt.n	19b00 <onoff_request+0x3a>
   19ad4:	f04f 0340 	mov.w	r3, #64	; 0x40
   19ad8:	f3ef 8211 	mrs	r2, BASEPRI
   19adc:	f383 8812 	msr	BASEPRI_MAX, r3
   19ae0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   19ae4:	8b6b      	ldrh	r3, [r5, #26]
   19ae6:	8b2c      	ldrh	r4, [r5, #24]
   19ae8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19aec:	428b      	cmp	r3, r1
   19aee:	f004 0407 	and.w	r4, r4, #7
   19af2:	d107      	bne.n	19b04 <onoff_request+0x3e>
	__asm__ volatile(
   19af4:	f382 8811 	msr	BASEPRI, r2
   19af8:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   19afc:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   19b00:	4620      	mov	r0, r4
   19b02:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   19b04:	2c02      	cmp	r4, #2
   19b06:	d10c      	bne.n	19b22 <onoff_request+0x5c>
		mgr->refs += 1U;
   19b08:	3301      	adds	r3, #1
   19b0a:	836b      	strh	r3, [r5, #26]
   19b0c:	f382 8811 	msr	BASEPRI, r2
   19b10:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   19b14:	2300      	movs	r3, #0
   19b16:	4622      	mov	r2, r4
   19b18:	4631      	mov	r1, r6
   19b1a:	4628      	mov	r0, r5
   19b1c:	f7ff ff9c 	bl	19a58 <notify_one>
   19b20:	e7ee      	b.n	19b00 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   19b22:	2c06      	cmp	r4, #6
   19b24:	d814      	bhi.n	19b50 <onoff_request+0x8a>
   19b26:	e8df f004 	tbb	[pc, r4]
   19b2a:	1304      	.short	0x1304
   19b2c:	1a041313 	.word	0x1a041313
   19b30:	04          	.byte	0x04
   19b31:	00          	.byte	0x00
	parent->next = child;
   19b32:	2300      	movs	r3, #0
   19b34:	6033      	str	r3, [r6, #0]
	return list->tail;
   19b36:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   19b38:	b93b      	cbnz	r3, 19b4a <onoff_request+0x84>
	list->head = node;
   19b3a:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   19b3e:	b9ac      	cbnz	r4, 19b6c <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   19b40:	2102      	movs	r1, #2
   19b42:	4628      	mov	r0, r5
   19b44:	f7f6 fbee 	bl	10324 <process_event>
   19b48:	e7da      	b.n	19b00 <onoff_request+0x3a>
	parent->next = child;
   19b4a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   19b4c:	606e      	str	r6, [r5, #4]
}
   19b4e:	e7f6      	b.n	19b3e <onoff_request+0x78>
   19b50:	f382 8811 	msr	BASEPRI, r2
   19b54:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   19b58:	f06f 0404 	mvn.w	r4, #4
   19b5c:	e7d0      	b.n	19b00 <onoff_request+0x3a>
   19b5e:	f382 8811 	msr	BASEPRI, r2
   19b62:	f3bf 8f6f 	isb	sy
   19b66:	f06f 0485 	mvn.w	r4, #133	; 0x85
   19b6a:	e7c9      	b.n	19b00 <onoff_request+0x3a>
   19b6c:	f382 8811 	msr	BASEPRI, r2
   19b70:	f3bf 8f6f 	isb	sy
		if (notify) {
   19b74:	e7c4      	b.n	19b00 <onoff_request+0x3a>

00019b76 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   19b76:	4603      	mov	r3, r0
   19b78:	b140      	cbz	r0, 19b8c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   19b7a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   19b7c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   19b80:	2a02      	cmp	r2, #2
   19b82:	d006      	beq.n	19b92 <sys_notify_validate+0x1c>
   19b84:	2a03      	cmp	r2, #3
   19b86:	d004      	beq.n	19b92 <sys_notify_validate+0x1c>
   19b88:	2a01      	cmp	r2, #1
   19b8a:	d005      	beq.n	19b98 <sys_notify_validate+0x22>
   19b8c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   19b90:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   19b92:	681a      	ldr	r2, [r3, #0]
   19b94:	2a00      	cmp	r2, #0
   19b96:	d0f9      	beq.n	19b8c <sys_notify_validate+0x16>
		notify->result = 0;
   19b98:	2000      	movs	r0, #0
   19b9a:	6098      	str	r0, [r3, #8]
   19b9c:	4770      	bx	lr

00019b9e <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   19b9e:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   19ba0:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   19ba2:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   19ba4:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   19ba8:	2a02      	cmp	r2, #2
{
   19baa:	4603      	mov	r3, r0
	switch (method) {
   19bac:	f04f 0400 	mov.w	r4, #0
   19bb0:	d007      	beq.n	19bc2 <sys_notify_finalize+0x24>
   19bb2:	2a03      	cmp	r2, #3
   19bb4:	d002      	beq.n	19bbc <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   19bb6:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   19bb8:	2000      	movs	r0, #0
   19bba:	e001      	b.n	19bc0 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   19bbc:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   19bbe:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   19bc0:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   19bc2:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   19bc4:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   19bc6:	2800      	cmp	r0, #0
   19bc8:	d0f6      	beq.n	19bb8 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   19bca:	f7ff f94d 	bl	18e68 <z_impl_k_poll_signal_raise>
   19bce:	e7f3      	b.n	19bb8 <sys_notify_finalize+0x1a>

00019bd0 <outs>:
{
   19bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19bd4:	4607      	mov	r7, r0
   19bd6:	4688      	mov	r8, r1
   19bd8:	4615      	mov	r5, r2
   19bda:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   19bdc:	4614      	mov	r4, r2
   19bde:	42b4      	cmp	r4, r6
   19be0:	d305      	bcc.n	19bee <outs+0x1e>
   19be2:	b10e      	cbz	r6, 19be8 <outs+0x18>
	return (int)count;
   19be4:	1b60      	subs	r0, r4, r5
   19be6:	e008      	b.n	19bfa <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   19be8:	7823      	ldrb	r3, [r4, #0]
   19bea:	2b00      	cmp	r3, #0
   19bec:	d0fa      	beq.n	19be4 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   19bee:	f814 0b01 	ldrb.w	r0, [r4], #1
   19bf2:	4641      	mov	r1, r8
   19bf4:	47b8      	blx	r7
		if (rc < 0) {
   19bf6:	2800      	cmp	r0, #0
   19bf8:	daf1      	bge.n	19bde <outs+0xe>
}
   19bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019bfe <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   19bfe:	b40f      	push	{r0, r1, r2, r3}
   19c00:	b507      	push	{r0, r1, r2, lr}
   19c02:	a904      	add	r1, sp, #16
   19c04:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   19c08:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   19c0a:	f7f6 fb67 	bl	102dc <vprintk>

	va_end(ap);
}
   19c0e:	b003      	add	sp, #12
   19c10:	f85d eb04 	ldr.w	lr, [sp], #4
   19c14:	b004      	add	sp, #16
   19c16:	4770      	bx	lr

00019c18 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   19c18:	4770      	bx	lr

00019c1a <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   19c1a:	b538      	push	{r3, r4, r5, lr}
   19c1c:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   19c1e:	42ab      	cmp	r3, r5
{
   19c20:	4611      	mov	r1, r2
   19c22:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   19c24:	d804      	bhi.n	19c30 <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19c26:	461a      	mov	r2, r3
   19c28:	f003 fadb 	bl	1d1e2 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   19c2c:	4620      	mov	r0, r4
   19c2e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   19c30:	2400      	movs	r4, #0
   19c32:	e7fb      	b.n	19c2c <_copy+0x12>

00019c34 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   19c34:	f003 bae3 	b.w	1d1fe <memset>

00019c38 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   19c38:	09c3      	lsrs	r3, r0, #7
   19c3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   19c3e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   19c42:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   19c46:	b2c0      	uxtb	r0, r0
   19c48:	4770      	bx	lr

00019c4a <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   19c4a:	78cb      	ldrb	r3, [r1, #3]
   19c4c:	7802      	ldrb	r2, [r0, #0]
   19c4e:	4053      	eors	r3, r2
   19c50:	7003      	strb	r3, [r0, #0]
   19c52:	884b      	ldrh	r3, [r1, #2]
   19c54:	7842      	ldrb	r2, [r0, #1]
   19c56:	4053      	eors	r3, r2
   19c58:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   19c5a:	680a      	ldr	r2, [r1, #0]
   19c5c:	7883      	ldrb	r3, [r0, #2]
   19c5e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19c62:	7083      	strb	r3, [r0, #2]
   19c64:	680a      	ldr	r2, [r1, #0]
   19c66:	78c3      	ldrb	r3, [r0, #3]
   19c68:	4053      	eors	r3, r2
   19c6a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   19c6c:	79cb      	ldrb	r3, [r1, #7]
   19c6e:	7902      	ldrb	r2, [r0, #4]
   19c70:	4053      	eors	r3, r2
   19c72:	7103      	strb	r3, [r0, #4]
   19c74:	88cb      	ldrh	r3, [r1, #6]
   19c76:	7942      	ldrb	r2, [r0, #5]
   19c78:	4053      	eors	r3, r2
   19c7a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   19c7c:	684a      	ldr	r2, [r1, #4]
   19c7e:	7983      	ldrb	r3, [r0, #6]
   19c80:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19c84:	7183      	strb	r3, [r0, #6]
   19c86:	684a      	ldr	r2, [r1, #4]
   19c88:	79c3      	ldrb	r3, [r0, #7]
   19c8a:	4053      	eors	r3, r2
   19c8c:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   19c8e:	7acb      	ldrb	r3, [r1, #11]
   19c90:	7a02      	ldrb	r2, [r0, #8]
   19c92:	4053      	eors	r3, r2
   19c94:	7203      	strb	r3, [r0, #8]
   19c96:	7a42      	ldrb	r2, [r0, #9]
   19c98:	894b      	ldrh	r3, [r1, #10]
   19c9a:	4053      	eors	r3, r2
   19c9c:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   19c9e:	688a      	ldr	r2, [r1, #8]
   19ca0:	7a83      	ldrb	r3, [r0, #10]
   19ca2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19ca6:	7283      	strb	r3, [r0, #10]
   19ca8:	688a      	ldr	r2, [r1, #8]
   19caa:	7ac3      	ldrb	r3, [r0, #11]
   19cac:	4053      	eors	r3, r2
   19cae:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   19cb0:	7bcb      	ldrb	r3, [r1, #15]
   19cb2:	7b02      	ldrb	r2, [r0, #12]
   19cb4:	4053      	eors	r3, r2
   19cb6:	7303      	strb	r3, [r0, #12]
   19cb8:	89cb      	ldrh	r3, [r1, #14]
   19cba:	7b42      	ldrb	r2, [r0, #13]
   19cbc:	4053      	eors	r3, r2
   19cbe:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   19cc0:	68ca      	ldr	r2, [r1, #12]
   19cc2:	7b83      	ldrb	r3, [r0, #14]
   19cc4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19cc8:	7383      	strb	r3, [r0, #14]
   19cca:	68ca      	ldr	r2, [r1, #12]
   19ccc:	7bc3      	ldrb	r3, [r0, #15]
   19cce:	4053      	eors	r3, r2
   19cd0:	73c3      	strb	r3, [r0, #15]
}
   19cd2:	4770      	bx	lr

00019cd4 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   19cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   19cd6:	7802      	ldrb	r2, [r0, #0]
   19cd8:	f88d 2000 	strb.w	r2, [sp]
   19cdc:	7942      	ldrb	r2, [r0, #5]
   19cde:	f88d 2001 	strb.w	r2, [sp, #1]
   19ce2:	7a82      	ldrb	r2, [r0, #10]
   19ce4:	f88d 2002 	strb.w	r2, [sp, #2]
   19ce8:	7bc2      	ldrb	r2, [r0, #15]
   19cea:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   19cee:	7902      	ldrb	r2, [r0, #4]
   19cf0:	f88d 2004 	strb.w	r2, [sp, #4]
   19cf4:	7a42      	ldrb	r2, [r0, #9]
   19cf6:	f88d 2005 	strb.w	r2, [sp, #5]
   19cfa:	7b82      	ldrb	r2, [r0, #14]
   19cfc:	f88d 2006 	strb.w	r2, [sp, #6]
   19d00:	78c2      	ldrb	r2, [r0, #3]
   19d02:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   19d06:	7a02      	ldrb	r2, [r0, #8]
   19d08:	f88d 2008 	strb.w	r2, [sp, #8]
   19d0c:	7b42      	ldrb	r2, [r0, #13]
   19d0e:	f88d 2009 	strb.w	r2, [sp, #9]
   19d12:	7882      	ldrb	r2, [r0, #2]
   19d14:	f88d 200a 	strb.w	r2, [sp, #10]
   19d18:	79c2      	ldrb	r2, [r0, #7]
   19d1a:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   19d1e:	7b02      	ldrb	r2, [r0, #12]
   19d20:	f88d 200c 	strb.w	r2, [sp, #12]
   19d24:	7842      	ldrb	r2, [r0, #1]
   19d26:	7ac3      	ldrb	r3, [r0, #11]
   19d28:	f88d 200d 	strb.w	r2, [sp, #13]
   19d2c:	7982      	ldrb	r2, [r0, #6]
   19d2e:	f88d 200e 	strb.w	r2, [sp, #14]
   19d32:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   19d36:	2310      	movs	r3, #16
   19d38:	466a      	mov	r2, sp
   19d3a:	4619      	mov	r1, r3
   19d3c:	f7ff ff6d 	bl	19c1a <_copy>
}
   19d40:	b005      	add	sp, #20
   19d42:	f85d fb04 	ldr.w	pc, [sp], #4

00019d46 <mult_row_column>:
{
   19d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d48:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   19d4a:	7808      	ldrb	r0, [r1, #0]
{
   19d4c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   19d4e:	f7ff ff73 	bl	19c38 <_double_byte>
   19d52:	4605      	mov	r5, r0
   19d54:	7860      	ldrb	r0, [r4, #1]
   19d56:	f7ff ff6f 	bl	19c38 <_double_byte>
   19d5a:	78a2      	ldrb	r2, [r4, #2]
   19d5c:	7863      	ldrb	r3, [r4, #1]
   19d5e:	4053      	eors	r3, r2
   19d60:	78e2      	ldrb	r2, [r4, #3]
   19d62:	4053      	eors	r3, r2
   19d64:	405d      	eors	r5, r3
   19d66:	4068      	eors	r0, r5
   19d68:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   19d6a:	7860      	ldrb	r0, [r4, #1]
   19d6c:	7827      	ldrb	r7, [r4, #0]
   19d6e:	f7ff ff63 	bl	19c38 <_double_byte>
   19d72:	4605      	mov	r5, r0
   19d74:	78a0      	ldrb	r0, [r4, #2]
   19d76:	f7ff ff5f 	bl	19c38 <_double_byte>
   19d7a:	78a3      	ldrb	r3, [r4, #2]
   19d7c:	405f      	eors	r7, r3
   19d7e:	78e3      	ldrb	r3, [r4, #3]
   19d80:	405f      	eors	r7, r3
   19d82:	407d      	eors	r5, r7
   19d84:	4068      	eors	r0, r5
   19d86:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   19d88:	7863      	ldrb	r3, [r4, #1]
   19d8a:	7827      	ldrb	r7, [r4, #0]
   19d8c:	78a0      	ldrb	r0, [r4, #2]
   19d8e:	405f      	eors	r7, r3
   19d90:	f7ff ff52 	bl	19c38 <_double_byte>
   19d94:	4605      	mov	r5, r0
   19d96:	78e0      	ldrb	r0, [r4, #3]
   19d98:	f7ff ff4e 	bl	19c38 <_double_byte>
   19d9c:	78e3      	ldrb	r3, [r4, #3]
   19d9e:	405f      	eors	r7, r3
   19da0:	407d      	eors	r5, r7
   19da2:	4068      	eors	r0, r5
   19da4:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   19da6:	7820      	ldrb	r0, [r4, #0]
   19da8:	f7ff ff46 	bl	19c38 <_double_byte>
   19dac:	7862      	ldrb	r2, [r4, #1]
   19dae:	7823      	ldrb	r3, [r4, #0]
   19db0:	4053      	eors	r3, r2
   19db2:	78a2      	ldrb	r2, [r4, #2]
   19db4:	4053      	eors	r3, r2
   19db6:	ea80 0503 	eor.w	r5, r0, r3
   19dba:	78e0      	ldrb	r0, [r4, #3]
   19dbc:	f7ff ff3c 	bl	19c38 <_double_byte>
   19dc0:	b2ed      	uxtb	r5, r5
   19dc2:	4045      	eors	r5, r0
   19dc4:	70f5      	strb	r5, [r6, #3]
}
   19dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019dc8 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   19dc8:	b570      	push	{r4, r5, r6, lr}
   19dca:	4614      	mov	r4, r2
   19dcc:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   19dce:	4605      	mov	r5, r0
   19dd0:	2800      	cmp	r0, #0
   19dd2:	d049      	beq.n	19e68 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   19dd4:	2900      	cmp	r1, #0
   19dd6:	d049      	beq.n	19e6c <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   19dd8:	2a00      	cmp	r2, #0
   19dda:	d049      	beq.n	19e70 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   19ddc:	2310      	movs	r3, #16
   19dde:	460a      	mov	r2, r1
   19de0:	4668      	mov	r0, sp
   19de2:	4619      	mov	r1, r3
   19de4:	f7ff ff19 	bl	19c1a <_copy>
	add_round_key(state, s->words);
   19de8:	4621      	mov	r1, r4
   19dea:	4668      	mov	r0, sp
   19dec:	f7ff ff2d 	bl	19c4a <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   19df0:	3410      	adds	r4, #16
   19df2:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   19df6:	4668      	mov	r0, sp
   19df8:	f7f7 f8e2 	bl	10fc0 <sub_bytes>
		shift_rows(state);
   19dfc:	4668      	mov	r0, sp
   19dfe:	f7ff ff69 	bl	19cd4 <shift_rows>
	mult_row_column(t, s);
   19e02:	4669      	mov	r1, sp
   19e04:	a804      	add	r0, sp, #16
   19e06:	f7ff ff9e 	bl	19d46 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   19e0a:	a901      	add	r1, sp, #4
   19e0c:	a805      	add	r0, sp, #20
   19e0e:	f7ff ff9a 	bl	19d46 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   19e12:	a902      	add	r1, sp, #8
   19e14:	a806      	add	r0, sp, #24
   19e16:	f7ff ff96 	bl	19d46 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   19e1a:	a903      	add	r1, sp, #12
   19e1c:	a807      	add	r0, sp, #28
   19e1e:	f7ff ff92 	bl	19d46 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   19e22:	2310      	movs	r3, #16
   19e24:	4619      	mov	r1, r3
   19e26:	eb0d 0203 	add.w	r2, sp, r3
   19e2a:	4668      	mov	r0, sp
   19e2c:	f7ff fef5 	bl	19c1a <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   19e30:	4621      	mov	r1, r4
   19e32:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   19e34:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   19e36:	f7ff ff08 	bl	19c4a <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   19e3a:	42b4      	cmp	r4, r6
   19e3c:	d1db      	bne.n	19df6 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   19e3e:	f7f7 f8bf 	bl	10fc0 <sub_bytes>
	shift_rows(state);
   19e42:	4668      	mov	r0, sp
   19e44:	f7ff ff46 	bl	19cd4 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   19e48:	4621      	mov	r1, r4
   19e4a:	4668      	mov	r0, sp
   19e4c:	f7ff fefd 	bl	19c4a <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   19e50:	2310      	movs	r3, #16
   19e52:	4619      	mov	r1, r3
   19e54:	466a      	mov	r2, sp
   19e56:	4628      	mov	r0, r5
   19e58:	f7ff fedf 	bl	19c1a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   19e5c:	4668      	mov	r0, sp
   19e5e:	2210      	movs	r2, #16
   19e60:	2100      	movs	r1, #0
   19e62:	f7ff fee7 	bl	19c34 <_set>

	return TC_CRYPTO_SUCCESS;
   19e66:	2001      	movs	r0, #1
}
   19e68:	b008      	add	sp, #32
   19e6a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   19e6c:	4608      	mov	r0, r1
   19e6e:	e7fb      	b.n	19e68 <tc_aes_encrypt+0xa0>
   19e70:	4610      	mov	r0, r2
   19e72:	e7f9      	b.n	19e68 <tc_aes_encrypt+0xa0>

00019e74 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   19e74:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   19e76:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   19e78:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   19e7a:	f912 3b10 	ldrsb.w	r3, [r2], #16
   19e7e:	2b00      	cmp	r3, #0
   19e80:	bfac      	ite	ge
   19e82:	2300      	movge	r3, #0
   19e84:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   19e86:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   19e8a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   19e8e:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   19e90:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   19e94:	d002      	beq.n	19e9c <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   19e96:	7813      	ldrb	r3, [r2, #0]
   19e98:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   19e9a:	e7f4      	b.n	19e86 <gf_double+0x12>
	}
}
   19e9c:	bd10      	pop	{r4, pc}

00019e9e <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   19e9e:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   19ea0:	b120      	cbz	r0, 19eac <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   19ea2:	2258      	movs	r2, #88	; 0x58
   19ea4:	2100      	movs	r1, #0
   19ea6:	f7ff fec5 	bl	19c34 <_set>
   19eaa:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   19eac:	bd08      	pop	{r3, pc}

00019eae <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   19eae:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   19eb0:	4604      	mov	r4, r0
   19eb2:	b188      	cbz	r0, 19ed8 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   19eb4:	2210      	movs	r2, #16
   19eb6:	2100      	movs	r1, #0
   19eb8:	f7ff febc 	bl	19c34 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   19ebc:	2210      	movs	r2, #16
   19ebe:	f104 0030 	add.w	r0, r4, #48	; 0x30
   19ec2:	2100      	movs	r1, #0
   19ec4:	f7ff feb6 	bl	19c34 <_set>
	s->leftover_offset = 0;
   19ec8:	2300      	movs	r3, #0
   19eca:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   19ecc:	2200      	movs	r2, #0
   19ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19ed2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   19ed6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   19ed8:	bd10      	pop	{r4, pc}

00019eda <tc_cmac_setup>:
{
   19eda:	b570      	push	{r4, r5, r6, lr}
   19edc:	4604      	mov	r4, r0
   19ede:	460d      	mov	r5, r1
   19ee0:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   19ee2:	b310      	cbz	r0, 19f2a <tc_cmac_setup+0x50>
   19ee4:	b311      	cbz	r1, 19f2c <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   19ee6:	2258      	movs	r2, #88	; 0x58
   19ee8:	2100      	movs	r1, #0
   19eea:	f7ff fea3 	bl	19c34 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   19eee:	4629      	mov	r1, r5
	s->sched = sched;
   19ef0:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   19ef2:	4630      	mov	r0, r6
   19ef4:	f7f7 f870 	bl	10fd8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   19ef8:	2210      	movs	r2, #16
   19efa:	2100      	movs	r1, #0
   19efc:	4620      	mov	r0, r4
   19efe:	f7ff fe99 	bl	19c34 <_set>
	gf_double (s->K1, s->iv);
   19f02:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   19f06:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19f08:	4621      	mov	r1, r4
   19f0a:	4620      	mov	r0, r4
   19f0c:	f7ff ff5c 	bl	19dc8 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   19f10:	4621      	mov	r1, r4
   19f12:	4628      	mov	r0, r5
   19f14:	f7ff ffae 	bl	19e74 <gf_double>
	gf_double (s->K2, s->K1);
   19f18:	4629      	mov	r1, r5
   19f1a:	f104 0020 	add.w	r0, r4, #32
   19f1e:	f7ff ffa9 	bl	19e74 <gf_double>
	tc_cmac_init(s);
   19f22:	4620      	mov	r0, r4
   19f24:	f7ff ffc3 	bl	19eae <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   19f28:	2001      	movs	r0, #1
}
   19f2a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   19f2c:	4608      	mov	r0, r1
   19f2e:	e7fc      	b.n	19f2a <tc_cmac_setup+0x50>

00019f30 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   19f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f34:	460e      	mov	r6, r1
   19f36:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   19f38:	4604      	mov	r4, r0
   19f3a:	2800      	cmp	r0, #0
   19f3c:	d060      	beq.n	1a000 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   19f3e:	b1fa      	cbz	r2, 19f80 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   19f40:	2900      	cmp	r1, #0
   19f42:	d05d      	beq.n	1a000 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   19f44:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   19f48:	ea53 0102 	orrs.w	r1, r3, r2
   19f4c:	d058      	beq.n	1a000 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   19f4e:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   19f50:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   19f54:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   19f58:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   19f5c:	f1b8 0f00 	cmp.w	r8, #0
   19f60:	d02c      	beq.n	19fbc <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   19f62:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   19f66:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   19f6a:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   19f6c:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   19f6e:	d20a      	bcs.n	19f86 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   19f70:	462b      	mov	r3, r5
   19f72:	4632      	mov	r2, r6
   19f74:	4629      	mov	r1, r5
   19f76:	f7ff fe50 	bl	19c1a <_copy>
			s->leftover_offset += data_length;
   19f7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19f7c:	442b      	add	r3, r5
   19f7e:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   19f80:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   19f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   19f86:	463b      	mov	r3, r7
   19f88:	4632      	mov	r2, r6
   19f8a:	4639      	mov	r1, r7
   19f8c:	f7ff fe45 	bl	19c1a <_copy>
		data_length -= remaining_space;
   19f90:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   19f92:	2300      	movs	r3, #0
   19f94:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   19f96:	4445      	add	r5, r8
		data += remaining_space;
   19f98:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19f9a:	1e63      	subs	r3, r4, #1
   19f9c:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   19fa0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19fa4:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19fa8:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   19faa:	ea82 0200 	eor.w	r2, r2, r0
   19fae:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19fb0:	d1f6      	bne.n	19fa0 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   19fb2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19fb4:	4621      	mov	r1, r4
   19fb6:	4620      	mov	r0, r4
   19fb8:	f7ff ff06 	bl	19dc8 <tc_aes_encrypt>
   19fbc:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   19fc0:	2d10      	cmp	r5, #16
   19fc2:	d80a      	bhi.n	19fda <tc_cmac_update+0xaa>
	if (data_length > 0) {
   19fc4:	2d00      	cmp	r5, #0
   19fc6:	d0db      	beq.n	19f80 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   19fc8:	462b      	mov	r3, r5
   19fca:	4632      	mov	r2, r6
   19fcc:	4629      	mov	r1, r5
   19fce:	f104 0030 	add.w	r0, r4, #48	; 0x30
   19fd2:	f7ff fe22 	bl	19c1a <_copy>
		s->leftover_offset = data_length;
   19fd6:	6465      	str	r5, [r4, #68]	; 0x44
   19fd8:	e7d2      	b.n	19f80 <tc_cmac_update+0x50>
   19fda:	1e63      	subs	r3, r4, #1
   19fdc:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   19fde:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19fe2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19fe6:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   19fe8:	ea82 0200 	eor.w	r2, r2, r0
   19fec:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19fee:	d1f6      	bne.n	19fde <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   19ff0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19ff2:	4621      	mov	r1, r4
   19ff4:	4620      	mov	r0, r4
   19ff6:	f7ff fee7 	bl	19dc8 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   19ffa:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   19ffc:	3d10      	subs	r5, #16
   19ffe:	e7df      	b.n	19fc0 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   1a000:	2000      	movs	r0, #0
   1a002:	e7be      	b.n	19f82 <tc_cmac_update+0x52>

0001a004 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1a004:	b570      	push	{r4, r5, r6, lr}
   1a006:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1a008:	4605      	mov	r5, r0
   1a00a:	b1e8      	cbz	r0, 1a048 <tc_cmac_final+0x44>
   1a00c:	b369      	cbz	r1, 1a06a <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1a00e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1a010:	2a10      	cmp	r2, #16
   1a012:	d11a      	bne.n	1a04a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1a014:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a016:	1e63      	subs	r3, r4, #1
   1a018:	3901      	subs	r1, #1
   1a01a:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1a01e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a022:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1a026:	4072      	eors	r2, r6
   1a028:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a02c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1a02e:	ea82 0206 	eor.w	r2, r2, r6
   1a032:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a034:	d1f3      	bne.n	1a01e <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1a036:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a038:	4621      	mov	r1, r4
   1a03a:	4628      	mov	r0, r5
   1a03c:	f7ff fec4 	bl	19dc8 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1a040:	4620      	mov	r0, r4
   1a042:	f7ff ff2c 	bl	19e9e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1a046:	2001      	movs	r0, #1
}
   1a048:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1a04a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1a04e:	2100      	movs	r1, #0
   1a050:	f1c2 0210 	rsb	r2, r2, #16
   1a054:	4420      	add	r0, r4
   1a056:	f7ff fded 	bl	19c34 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1a05a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a05c:	4423      	add	r3, r4
   1a05e:	2280      	movs	r2, #128	; 0x80
   1a060:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1a064:	f104 0120 	add.w	r1, r4, #32
   1a068:	e7d5      	b.n	1a016 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1a06a:	4608      	mov	r0, r1
   1a06c:	e7ec      	b.n	1a048 <tc_cmac_final+0x44>

0001a06e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1a06e:	f002 badb 	b.w	1c628 <z_fatal_error>

0001a072 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1a072:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1a074:	6800      	ldr	r0, [r0, #0]
   1a076:	f002 bad7 	b.w	1c628 <z_fatal_error>

0001a07a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1a07a:	2100      	movs	r1, #0
   1a07c:	2001      	movs	r0, #1
   1a07e:	f7ff bff6 	b.w	1a06e <z_arm_fatal_error>

0001a082 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1a082:	b508      	push	{r3, lr}
	handler();
   1a084:	f7f7 f870 	bl	11168 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1a088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1a08c:	f7f7 b922 	b.w	112d4 <z_arm_exc_exit>

0001a090 <malloc_prepare>:
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   1a090:	2000      	movs	r0, #0
   1a092:	4770      	bx	lr

0001a094 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   1a094:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a098:	f3ef 8311 	mrs	r3, BASEPRI
   1a09c:	f382 8812 	msr	BASEPRI_MAX, r2
   1a0a0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a0a4:	f383 8811 	msr	BASEPRI, r3
   1a0a8:	f3bf 8f6f 	isb	sy
}
   1a0ac:	2000      	movs	r0, #0
   1a0ae:	4770      	bx	lr

0001a0b0 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1a0b0:	2806      	cmp	r0, #6
   1a0b2:	d108      	bne.n	1a0c6 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1a0b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a0b8:	2201      	movs	r2, #1
   1a0ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1a0be:	f3bf 8f4f 	dsb	sy
        __WFE();
   1a0c2:	bf20      	wfe
    while (true)
   1a0c4:	e7fd      	b.n	1a0c2 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   1a0c6:	4770      	bx	lr

0001a0c8 <pm_state_exit_post_ops>:
   1a0c8:	2300      	movs	r3, #0
   1a0ca:	f383 8811 	msr	BASEPRI, r3
   1a0ce:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1a0d2:	4770      	bx	lr

0001a0d4 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1a0d4:	b510      	push	{r4, lr}
   1a0d6:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1a0d8:	7801      	ldrb	r1, [r0, #0]
   1a0da:	7822      	ldrb	r2, [r4, #0]
   1a0dc:	428a      	cmp	r2, r1
{
   1a0de:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1a0e0:	d00f      	beq.n	1a102 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1a0e2:	4669      	mov	r1, sp
   1a0e4:	f7f7 fabc 	bl	11660 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1a0e8:	a905      	add	r1, sp, #20
   1a0ea:	4620      	mov	r0, r4
   1a0ec:	f7f7 fab8 	bl	11660 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1a0f0:	2210      	movs	r2, #16
   1a0f2:	f10d 0115 	add.w	r1, sp, #21
   1a0f6:	f10d 0001 	add.w	r0, sp, #1
   1a0fa:	f003 f862 	bl	1d1c2 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1a0fe:	b00a      	add	sp, #40	; 0x28
   1a100:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1a102:	2a01      	cmp	r2, #1
   1a104:	d006      	beq.n	1a114 <bt_uuid_cmp+0x40>
   1a106:	2a02      	cmp	r2, #2
   1a108:	d007      	beq.n	1a11a <bt_uuid_cmp+0x46>
   1a10a:	b972      	cbnz	r2, 1a12a <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1a10c:	8840      	ldrh	r0, [r0, #2]
   1a10e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1a110:	1ac0      	subs	r0, r0, r3
   1a112:	e7f4      	b.n	1a0fe <bt_uuid_cmp+0x2a>
   1a114:	6840      	ldr	r0, [r0, #4]
   1a116:	6863      	ldr	r3, [r4, #4]
   1a118:	e7fa      	b.n	1a110 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1a11a:	2210      	movs	r2, #16
   1a11c:	1c61      	adds	r1, r4, #1
   1a11e:	3001      	adds	r0, #1
}
   1a120:	b00a      	add	sp, #40	; 0x28
   1a122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1a126:	f003 b84c 	b.w	1d1c2 <memcmp>
	switch (u1->type) {
   1a12a:	f06f 0015 	mvn.w	r0, #21
   1a12e:	e7e6      	b.n	1a0fe <bt_uuid_cmp+0x2a>

0001a130 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1a130:	2a04      	cmp	r2, #4
   1a132:	d00a      	beq.n	1a14a <bt_uuid_create+0x1a>
   1a134:	2a10      	cmp	r2, #16
   1a136:	d00d      	beq.n	1a154 <bt_uuid_create+0x24>
   1a138:	2a02      	cmp	r2, #2
   1a13a:	f04f 0300 	mov.w	r3, #0
   1a13e:	d115      	bne.n	1a16c <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1a140:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1a142:	880b      	ldrh	r3, [r1, #0]
   1a144:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1a146:	2001      	movs	r0, #1
   1a148:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   1a14a:	2301      	movs	r3, #1
   1a14c:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1a14e:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1a150:	6043      	str	r3, [r0, #4]
		break;
   1a152:	e7f8      	b.n	1a146 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   1a154:	2302      	movs	r3, #2
   1a156:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a15a:	f101 0310 	add.w	r3, r1, #16
   1a15e:	f851 2b04 	ldr.w	r2, [r1], #4
   1a162:	f840 2b04 	str.w	r2, [r0], #4
   1a166:	4299      	cmp	r1, r3
   1a168:	d1f9      	bne.n	1a15e <bt_uuid_create+0x2e>
   1a16a:	e7ec      	b.n	1a146 <bt_uuid_create+0x16>
	switch (data_len) {
   1a16c:	4618      	mov	r0, r3
}
   1a16e:	4770      	bx	lr

0001a170 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1a170:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1a172:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1a174:	2106      	movs	r1, #6
{
   1a176:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1a178:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1a17c:	f7fc fc8a 	bl	16a94 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1a180:	b918      	cbnz	r0, 1a18a <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1a182:	79a3      	ldrb	r3, [r4, #6]
   1a184:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1a188:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1a18a:	bd10      	pop	{r4, pc}

0001a18c <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1a18c:	280f      	cmp	r0, #15
   1a18e:	d807      	bhi.n	1a1a0 <bt_hci_evt_get_flags+0x14>
   1a190:	280d      	cmp	r0, #13
   1a192:	d80b      	bhi.n	1a1ac <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   1a194:	2805      	cmp	r0, #5
   1a196:	bf08      	it	eq
   1a198:	2003      	moveq	r0, #3
   1a19a:	bf18      	it	ne
   1a19c:	2002      	movne	r0, #2
   1a19e:	4770      	bx	lr
	switch (evt) {
   1a1a0:	2813      	cmp	r0, #19
   1a1a2:	d003      	beq.n	1a1ac <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   1a1a4:	281a      	cmp	r0, #26
   1a1a6:	bf08      	it	eq
   1a1a8:	2001      	moveq	r0, #1
   1a1aa:	e7f6      	b.n	1a19a <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   1a1ac:	2001      	movs	r0, #1
	}
}
   1a1ae:	4770      	bx	lr

0001a1b0 <hci_data_buf_overflow>:
}
   1a1b0:	4770      	bx	lr

0001a1b2 <hci_disconn_complete>:
{
   1a1b2:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1a1b4:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   1a1b6:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1a1b8:	f8b5 0001 	ldrh.w	r0, [r5, #1]
	if (evt->status) {
   1a1bc:	b96e      	cbnz	r6, 1a1da <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   1a1be:	f7f8 ffd3 	bl	13168 <bt_conn_lookup_handle>
	if (!conn) {
   1a1c2:	4604      	mov	r4, r0
   1a1c4:	b148      	cbz	r0, 1a1da <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   1a1c6:	78eb      	ldrb	r3, [r5, #3]
   1a1c8:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a1ca:	4631      	mov	r1, r6
   1a1cc:	f7f8 ffd4 	bl	13178 <bt_conn_set_state>
		bt_conn_unref(conn);
   1a1d0:	4620      	mov	r0, r4
}
   1a1d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1a1d6:	f000 bc44 	b.w	1aa62 <bt_conn_unref>
}
   1a1da:	bd70      	pop	{r4, r5, r6, pc}

0001a1dc <le_phy_update_complete>:
{
   1a1dc:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1a1de:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1a1e0:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1a1e4:	f7f8 ffc0 	bl	13168 <bt_conn_lookup_handle>
	if (!conn) {
   1a1e8:	b118      	cbz	r0, 1a1f2 <le_phy_update_complete+0x16>
}
   1a1ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1a1ee:	f000 bc38 	b.w	1aa62 <bt_conn_unref>
}
   1a1f2:	bd08      	pop	{r3, pc}

0001a1f4 <le_data_len_change>:
{
   1a1f4:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1a1f6:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1a1f8:	8818      	ldrh	r0, [r3, #0]
   1a1fa:	f7f8 ffb5 	bl	13168 <bt_conn_lookup_handle>
	if (!conn) {
   1a1fe:	b118      	cbz	r0, 1a208 <le_data_len_change+0x14>
}
   1a200:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1a204:	f000 bc2d 	b.w	1aa62 <bt_conn_unref>
}
   1a208:	bd08      	pop	{r3, pc}

0001a20a <atomic_or>:
{
   1a20a:	b510      	push	{r4, lr}
   1a20c:	4603      	mov	r3, r0
}
   1a20e:	f3bf 8f5b 	dmb	ish
   1a212:	e853 0f00 	ldrex	r0, [r3]
   1a216:	ea40 0201 	orr.w	r2, r0, r1
   1a21a:	e843 2400 	strex	r4, r2, [r3]
   1a21e:	2c00      	cmp	r4, #0
   1a220:	d1f7      	bne.n	1a212 <atomic_or+0x8>
   1a222:	f3bf 8f5b 	dmb	ish
   1a226:	bd10      	pop	{r4, pc}

0001a228 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   1a228:	2101      	movs	r1, #1
   1a22a:	3008      	adds	r0, #8
   1a22c:	f001 bebd 	b.w	1bfaa <net_buf_simple_pull_mem>

0001a230 <le_conn_update_complete>:
{
   1a230:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1a232:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1a234:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1a238:	f7f8 ff96 	bl	13168 <bt_conn_lookup_handle>
	if (!conn) {
   1a23c:	4604      	mov	r4, r0
   1a23e:	b360      	cbz	r0, 1a29a <le_conn_update_complete+0x6a>
	if (!evt->status) {
   1a240:	782b      	ldrb	r3, [r5, #0]
   1a242:	b99b      	cbnz	r3, 1a26c <le_conn_update_complete+0x3c>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1a244:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   1a248:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1a24c:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   1a250:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1a254:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   1a258:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1a25c:	f7f9 f85e 	bl	1331c <notify_le_param_updated>
	bt_conn_unref(conn);
   1a260:	4620      	mov	r0, r4
}
   1a262:	b003      	add	sp, #12
   1a264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   1a268:	f000 bbfb 	b.w	1aa62 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1a26c:	2b1a      	cmp	r3, #26
   1a26e:	d1f7      	bne.n	1a260 <le_conn_update_complete+0x30>
   1a270:	78c3      	ldrb	r3, [r0, #3]
   1a272:	2b01      	cmp	r3, #1
   1a274:	d1f4      	bne.n	1a260 <le_conn_update_complete+0x30>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a276:	f44f 7100 	mov.w	r1, #512	; 0x200
   1a27a:	3004      	adds	r0, #4
   1a27c:	f7ff ffc5 	bl	1a20a <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1a280:	0583      	lsls	r3, r0, #22
   1a282:	d4ed      	bmi.n	1a260 <le_conn_update_complete+0x30>
		param.interval_min = conn->le.interval_min;
   1a284:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1a288:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   1a28a:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   1a28c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1a290:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1a292:	4620      	mov	r0, r4
   1a294:	f7f9 fae0 	bl	13858 <bt_l2cap_update_conn_param>
   1a298:	e7e2      	b.n	1a260 <le_conn_update_complete+0x30>
}
   1a29a:	b003      	add	sp, #12
   1a29c:	bd30      	pop	{r4, r5, pc}

0001a29e <bt_addr_copy>:
   1a29e:	680b      	ldr	r3, [r1, #0]
   1a2a0:	6003      	str	r3, [r0, #0]
   1a2a2:	888b      	ldrh	r3, [r1, #4]
   1a2a4:	8083      	strh	r3, [r0, #4]
}
   1a2a6:	4770      	bx	lr

0001a2a8 <bt_addr_le_copy>:
   1a2a8:	680b      	ldr	r3, [r1, #0]
   1a2aa:	6003      	str	r3, [r0, #0]
   1a2ac:	888b      	ldrh	r3, [r1, #4]
   1a2ae:	8083      	strh	r3, [r0, #4]
   1a2b0:	798b      	ldrb	r3, [r1, #6]
   1a2b2:	7183      	strb	r3, [r0, #6]
}
   1a2b4:	4770      	bx	lr

0001a2b6 <le_remote_feat_complete>:
{
   1a2b6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1a2b8:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1a2ba:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1a2be:	f7f8 ff53 	bl	13168 <bt_conn_lookup_handle>
	if (!conn) {
   1a2c2:	4604      	mov	r4, r0
   1a2c4:	b198      	cbz	r0, 1a2ee <le_remote_feat_complete+0x38>
	if (!evt->status) {
   1a2c6:	782b      	ldrb	r3, [r5, #0]
   1a2c8:	b93b      	cbnz	r3, 1a2da <le_remote_feat_complete+0x24>
   1a2ca:	f8d5 3003 	ldr.w	r3, [r5, #3]
   1a2ce:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
   1a2d2:	f8d5 3007 	ldr.w	r3, [r5, #7]
   1a2d6:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a2da:	1d20      	adds	r0, r4, #4
   1a2dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
   1a2e0:	f7ff ff93 	bl	1a20a <atomic_or>
	bt_conn_unref(conn);
   1a2e4:	4620      	mov	r0, r4
}
   1a2e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1a2ea:	f000 bbba 	b.w	1aa62 <bt_conn_unref>
}
   1a2ee:	bd38      	pop	{r3, r4, r5, pc}

0001a2f0 <handle_event_common.isra.0>:
static int handle_event_common(uint8_t event, struct net_buf *buf,
   1a2f0:	b430      	push	{r4, r5}
   1a2f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a2f6:	4604      	mov	r4, r0
   1a2f8:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   1a2fa:	429a      	cmp	r2, r3
   1a2fc:	d101      	bne.n	1a302 <handle_event_common.isra.0+0x12>
}
   1a2fe:	bc30      	pop	{r4, r5}
   1a300:	4770      	bx	lr
		if (handler->event != event) {
   1a302:	4611      	mov	r1, r2
   1a304:	f811 5b08 	ldrb.w	r5, [r1], #8
   1a308:	42a5      	cmp	r5, r4
   1a30a:	d106      	bne.n	1a31a <handle_event_common.isra.0+0x2a>
		if (buf->len < handler->min_len) {
   1a30c:	8981      	ldrh	r1, [r0, #12]
   1a30e:	7853      	ldrb	r3, [r2, #1]
   1a310:	4299      	cmp	r1, r3
   1a312:	d3f4      	bcc.n	1a2fe <handle_event_common.isra.0+0xe>
}
   1a314:	bc30      	pop	{r4, r5}
		handler->handler(buf);
   1a316:	6853      	ldr	r3, [r2, #4]
   1a318:	4718      	bx	r3
   1a31a:	460a      	mov	r2, r1
   1a31c:	e7ed      	b.n	1a2fa <handle_event_common.isra.0+0xa>

0001a31e <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a31e:	f3bf 8f5b 	dmb	ish
   1a322:	e850 3f00 	ldrex	r3, [r0]
   1a326:	400b      	ands	r3, r1
   1a328:	e840 3200 	strex	r2, r3, [r0]
   1a32c:	2a00      	cmp	r2, #0
   1a32e:	d1f8      	bne.n	1a322 <atomic_and.isra.0+0x4>
   1a330:	f3bf 8f5b 	dmb	ish
}
   1a334:	4770      	bx	lr

0001a336 <hci_vendor_event>:
static void hci_vendor_event(struct net_buf *buf)
   1a336:	4770      	bx	lr

0001a338 <hci_num_completed_packets>:
{
   1a338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   1a33c:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1a33e:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   1a340:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   1a342:	783b      	ldrb	r3, [r7, #0]
   1a344:	429d      	cmp	r5, r3
   1a346:	db01      	blt.n	1a34c <hci_num_completed_packets+0x14>
}
   1a348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1a34c:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   1a350:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1a354:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1a358:	f7f8 ff06 	bl	13168 <bt_conn_lookup_handle>
		if (!conn) {
   1a35c:	4604      	mov	r4, r0
   1a35e:	b318      	cbz	r0, 1a3a8 <hci_num_completed_packets+0x70>
			k_work_submit(&conn->tx_complete_work);
   1a360:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   1a364:	b1ee      	cbz	r6, 1a3a2 <hci_num_completed_packets+0x6a>
	__asm__ volatile(
   1a366:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a36a:	f3ef 8211 	mrs	r2, BASEPRI
   1a36e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a372:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1a376:	69e3      	ldr	r3, [r4, #28]
   1a378:	b16b      	cbz	r3, 1a396 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   1a37a:	3b01      	subs	r3, #1
   1a37c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1a37e:	f382 8811 	msr	BASEPRI, r2
   1a382:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1a386:	4620      	mov	r0, r4
   1a388:	f7f8 fe3a 	bl	13000 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   1a38c:	3e01      	subs	r6, #1
   1a38e:	f7fd fd8d 	bl	17eac <z_impl_k_sem_give>
   1a392:	b2b6      	uxth	r6, r6
   1a394:	e7e6      	b.n	1a364 <hci_num_completed_packets+0x2c>
	return list->head;
   1a396:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1a398:	b943      	cbnz	r3, 1a3ac <hci_num_completed_packets+0x74>
   1a39a:	f382 8811 	msr	BASEPRI, r2
   1a39e:	f3bf 8f6f 	isb	sy
		bt_conn_unref(conn);
   1a3a2:	4620      	mov	r0, r4
   1a3a4:	f000 fb5d 	bl	1aa62 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   1a3a8:	3501      	adds	r5, #1
   1a3aa:	e7ca      	b.n	1a342 <hci_num_completed_packets+0xa>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a3ac:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1a3ae:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   1a3b0:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a3b2:	428b      	cmp	r3, r1
	list->tail = node;
   1a3b4:	bf08      	it	eq
   1a3b6:	61a0      	streq	r0, [r4, #24]
   1a3b8:	f382 8811 	msr	BASEPRI, r2
   1a3bc:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a3c0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a3c4:	f3ef 8111 	mrs	r1, BASEPRI
   1a3c8:	f382 8812 	msr	BASEPRI_MAX, r2
   1a3cc:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1a3d0:	68da      	ldr	r2, [r3, #12]
   1a3d2:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   1a3d4:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   1a3d8:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   1a3dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   1a3de:	b94a      	cbnz	r2, 1a3f4 <hci_num_completed_packets+0xbc>
	list->head = node;
   1a3e0:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1a3e4:	f381 8811 	msr	BASEPRI, r1
   1a3e8:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1a3ec:	4648      	mov	r0, r9
   1a3ee:	f7fd fed3 	bl	18198 <k_work_submit>
   1a3f2:	e7c8      	b.n	1a386 <hci_num_completed_packets+0x4e>
	parent->next = child;
   1a3f4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1a3f6:	6263      	str	r3, [r4, #36]	; 0x24
}
   1a3f8:	e7f4      	b.n	1a3e4 <hci_num_completed_packets+0xac>

0001a3fa <hci_le_read_max_data_len>:
{
   1a3fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a3fc:	4606      	mov	r6, r0
   1a3fe:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1a400:	aa01      	add	r2, sp, #4
   1a402:	2100      	movs	r1, #0
   1a404:	f242 002f 	movw	r0, #8239	; 0x202f
   1a408:	f7f7 fb64 	bl	11ad4 <bt_hci_cmd_send_sync>
	if (err) {
   1a40c:	4604      	mov	r4, r0
   1a40e:	b948      	cbnz	r0, 1a424 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   1a410:	9801      	ldr	r0, [sp, #4]
   1a412:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1a414:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1a418:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1a41a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1a41e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1a420:	f7fa fe3e 	bl	150a0 <net_buf_unref>
}
   1a424:	4620      	mov	r0, r4
   1a426:	b002      	add	sp, #8
   1a428:	bd70      	pop	{r4, r5, r6, pc}

0001a42a <bt_hci_disconnect>:
{
   1a42a:	b570      	push	{r4, r5, r6, lr}
   1a42c:	4606      	mov	r6, r0
   1a42e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1a430:	f240 4006 	movw	r0, #1030	; 0x406
   1a434:	2103      	movs	r1, #3
   1a436:	f7f7 fb13 	bl	11a60 <bt_hci_cmd_create>
	if (!buf) {
   1a43a:	4604      	mov	r4, r0
   1a43c:	b168      	cbz	r0, 1a45a <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1a43e:	2103      	movs	r1, #3
   1a440:	3008      	adds	r0, #8
   1a442:	f001 fd8b 	bl	1bf5c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   1a446:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   1a448:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1a44a:	4621      	mov	r1, r4
   1a44c:	2200      	movs	r2, #0
}
   1a44e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1a452:	f240 4006 	movw	r0, #1030	; 0x406
   1a456:	f7f7 bb3d 	b.w	11ad4 <bt_hci_cmd_send_sync>
}
   1a45a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a45e:	bd70      	pop	{r4, r5, r6, pc}

0001a460 <bt_le_set_data_len>:
{
   1a460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a462:	4607      	mov	r7, r0
   1a464:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1a466:	f242 0022 	movw	r0, #8226	; 0x2022
   1a46a:	2106      	movs	r1, #6
{
   1a46c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1a46e:	f7f7 faf7 	bl	11a60 <bt_hci_cmd_create>
	if (!buf) {
   1a472:	4604      	mov	r4, r0
   1a474:	b178      	cbz	r0, 1a496 <bt_le_set_data_len+0x36>
   1a476:	2106      	movs	r1, #6
   1a478:	3008      	adds	r0, #8
   1a47a:	f001 fd6f 	bl	1bf5c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a47e:	883b      	ldrh	r3, [r7, #0]
   1a480:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1a482:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1a484:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1a486:	4621      	mov	r1, r4
   1a488:	2200      	movs	r2, #0
}
   1a48a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1a48e:	f242 0022 	movw	r0, #8226	; 0x2022
   1a492:	f7f7 bb1f 	b.w	11ad4 <bt_hci_cmd_send_sync>
}
   1a496:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a49c <bt_le_set_phy>:
{
   1a49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a4a0:	4681      	mov	r9, r0
   1a4a2:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1a4a4:	f242 0032 	movw	r0, #8242	; 0x2032
   1a4a8:	2107      	movs	r1, #7
{
   1a4aa:	f89d a020 	ldrb.w	sl, [sp, #32]
   1a4ae:	4617      	mov	r7, r2
   1a4b0:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1a4b2:	f7f7 fad5 	bl	11a60 <bt_hci_cmd_create>
	if (!buf) {
   1a4b6:	4605      	mov	r5, r0
   1a4b8:	b1a0      	cbz	r0, 1a4e4 <bt_le_set_phy+0x48>
   1a4ba:	2107      	movs	r1, #7
   1a4bc:	3008      	adds	r0, #8
   1a4be:	f001 fd4d 	bl	1bf5c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a4c2:	f8b9 3000 	ldrh.w	r3, [r9]
   1a4c6:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   1a4c8:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1a4cc:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1a4ce:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   1a4d0:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1a4d4:	4629      	mov	r1, r5
   1a4d6:	2200      	movs	r2, #0
}
   1a4d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1a4dc:	f242 0032 	movw	r0, #8242	; 0x2032
   1a4e0:	f7f7 baf8 	b.w	11ad4 <bt_hci_cmd_send_sync>
}
   1a4e4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a4ec <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1a4ec:	6880      	ldr	r0, [r0, #8]
   1a4ee:	f7f7 bb7f 	b.w	11bf0 <bt_hci_le_enh_conn_complete>

0001a4f2 <bt_le_conn_params_valid>:
{
   1a4f2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1a4f4:	8803      	ldrh	r3, [r0, #0]
   1a4f6:	8842      	ldrh	r2, [r0, #2]
   1a4f8:	4293      	cmp	r3, r2
   1a4fa:	d819      	bhi.n	1a530 <bt_le_conn_params_valid+0x3e>
   1a4fc:	2b05      	cmp	r3, #5
   1a4fe:	d917      	bls.n	1a530 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1a500:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1a504:	d814      	bhi.n	1a530 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1a506:	8883      	ldrh	r3, [r0, #4]
   1a508:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1a50c:	d210      	bcs.n	1a530 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1a50e:	88c0      	ldrh	r0, [r0, #6]
   1a510:	f1a0 010a 	sub.w	r1, r0, #10
   1a514:	b289      	uxth	r1, r1
   1a516:	f640 4476 	movw	r4, #3190	; 0xc76
   1a51a:	42a1      	cmp	r1, r4
   1a51c:	d808      	bhi.n	1a530 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1a51e:	3301      	adds	r3, #1
   1a520:	b29b      	uxth	r3, r3
   1a522:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1a524:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1a528:	bf34      	ite	cc
   1a52a:	2001      	movcc	r0, #1
   1a52c:	2000      	movcs	r0, #0
}
   1a52e:	bd10      	pop	{r4, pc}
		return false;
   1a530:	2000      	movs	r0, #0
   1a532:	e7fc      	b.n	1a52e <bt_le_conn_params_valid+0x3c>

0001a534 <le_conn_param_neg_reply>:
{
   1a534:	b570      	push	{r4, r5, r6, lr}
   1a536:	4606      	mov	r6, r0
   1a538:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1a53a:	f242 0021 	movw	r0, #8225	; 0x2021
   1a53e:	2103      	movs	r1, #3
   1a540:	f7f7 fa8e 	bl	11a60 <bt_hci_cmd_create>
	if (!buf) {
   1a544:	4604      	mov	r4, r0
   1a546:	b160      	cbz	r0, 1a562 <le_conn_param_neg_reply+0x2e>
   1a548:	2103      	movs	r1, #3
   1a54a:	3008      	adds	r0, #8
   1a54c:	f001 fd06 	bl	1bf5c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1a550:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1a552:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a554:	4621      	mov	r1, r4
   1a556:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1a55a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a55e:	f7f7 bc83 	b.w	11e68 <bt_hci_cmd_send>
}
   1a562:	bd70      	pop	{r4, r5, r6, pc}

0001a564 <le_conn_param_req>:
{
   1a564:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1a566:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1a568:	78d9      	ldrb	r1, [r3, #3]
   1a56a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1a56c:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1a56e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a572:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1a576:	7959      	ldrb	r1, [r3, #5]
   1a578:	791a      	ldrb	r2, [r3, #4]
   1a57a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a57e:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1a582:	799a      	ldrb	r2, [r3, #6]
   1a584:	79d9      	ldrb	r1, [r3, #7]
   1a586:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a58a:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1a58e:	7a1a      	ldrb	r2, [r3, #8]
   1a590:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1a592:	b2b4      	uxth	r4, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1a594:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1a598:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1a59a:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1a59e:	f7f8 fde3 	bl	13168 <bt_conn_lookup_handle>
	if (!conn) {
   1a5a2:	4605      	mov	r5, r0
   1a5a4:	b928      	cbnz	r0, 1a5b2 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1a5a6:	2102      	movs	r1, #2
   1a5a8:	4620      	mov	r0, r4
   1a5aa:	f7ff ffc3 	bl	1a534 <le_conn_param_neg_reply>
}
   1a5ae:	b002      	add	sp, #8
   1a5b0:	bd70      	pop	{r4, r5, r6, pc}
	if (!le_param_req(conn, &param)) {
   1a5b2:	4669      	mov	r1, sp
   1a5b4:	f7f8 fefe 	bl	133b4 <le_param_req>
   1a5b8:	b938      	cbnz	r0, 1a5ca <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1a5ba:	211e      	movs	r1, #30
   1a5bc:	4620      	mov	r0, r4
   1a5be:	f7ff ffb9 	bl	1a534 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1a5c2:	4628      	mov	r0, r5
   1a5c4:	f000 fa4d 	bl	1aa62 <bt_conn_unref>
   1a5c8:	e7f1      	b.n	1a5ae <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1a5ca:	210e      	movs	r1, #14
   1a5cc:	f242 0020 	movw	r0, #8224	; 0x2020
   1a5d0:	f7f7 fa46 	bl	11a60 <bt_hci_cmd_create>
	if (!buf) {
   1a5d4:	4604      	mov	r4, r0
   1a5d6:	2800      	cmp	r0, #0
   1a5d8:	d0f3      	beq.n	1a5c2 <le_conn_param_req+0x5e>
   1a5da:	210e      	movs	r1, #14
   1a5dc:	3008      	adds	r0, #8
   1a5de:	f001 fcbd 	bl	1bf5c <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1a5e2:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   1a5e4:	8006      	strh	r6, [r0, #0]
   1a5e6:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1a5ea:	f8bd 3000 	ldrh.w	r3, [sp]
   1a5ee:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1a5f0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1a5f4:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1a5f6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1a5fa:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1a5fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1a600:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1a602:	4621      	mov	r1, r4
   1a604:	f242 0020 	movw	r0, #8224	; 0x2020
   1a608:	f7f7 fc2e 	bl	11e68 <bt_hci_cmd_send>
   1a60c:	e7d9      	b.n	1a5c2 <le_conn_param_req+0x5e>

0001a60e <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   1a60e:	2000      	movs	r0, #0
   1a610:	4770      	bx	lr

0001a612 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1a612:	2000      	movs	r0, #0
   1a614:	4770      	bx	lr

0001a616 <bt_addr_le_eq>:
{
   1a616:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1a618:	2207      	movs	r2, #7
   1a61a:	f002 fdd2 	bl	1d1c2 <memcmp>
}
   1a61e:	fab0 f080 	clz	r0, r0
   1a622:	0940      	lsrs	r0, r0, #5
   1a624:	bd08      	pop	{r3, pc}

0001a626 <bt_addr_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a626:	680b      	ldr	r3, [r1, #0]
   1a628:	6003      	str	r3, [r0, #0]
   1a62a:	888b      	ldrh	r3, [r1, #4]
   1a62c:	8083      	strh	r3, [r0, #4]
}
   1a62e:	4770      	bx	lr

0001a630 <bt_addr_le_copy>:
   1a630:	680b      	ldr	r3, [r1, #0]
   1a632:	6003      	str	r3, [r0, #0]
   1a634:	888b      	ldrh	r3, [r1, #4]
   1a636:	8083      	strh	r3, [r0, #4]
   1a638:	798b      	ldrb	r3, [r1, #6]
   1a63a:	7183      	strb	r3, [r0, #6]
}
   1a63c:	4770      	bx	lr

0001a63e <bt_lookup_id_addr>:
	return addr;
   1a63e:	2800      	cmp	r0, #0
}
   1a640:	bf0c      	ite	eq
   1a642:	4608      	moveq	r0, r1
   1a644:	2000      	movne	r0, #0
   1a646:	4770      	bx	lr

0001a648 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   1a648:	b118      	cbz	r0, 1a652 <bt_id_set_adv_random_addr+0xa>
   1a64a:	b111      	cbz	r1, 1a652 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   1a64c:	4608      	mov	r0, r1
   1a64e:	f7f7 bfe9 	b.w	12624 <set_random_address>
}
   1a652:	f06f 0015 	mvn.w	r0, #21
   1a656:	4770      	bx	lr

0001a658 <bt_id_set_adv_private_addr>:
{
   1a658:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   1a65a:	4604      	mov	r4, r0
   1a65c:	b180      	cbz	r0, 1a680 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1a65e:	2106      	movs	r1, #6
   1a660:	4668      	mov	r0, sp
   1a662:	f7fc fa17 	bl	16a94 <bt_rand>
	if (err) {
   1a666:	b948      	cbnz	r0, 1a67c <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   1a668:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1a66c:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1a66e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1a672:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   1a674:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1a678:	f7ff ffe6 	bl	1a648 <bt_id_set_adv_random_addr>
}
   1a67c:	b002      	add	sp, #8
   1a67e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1a680:	f06f 0015 	mvn.w	r0, #21
   1a684:	e7fa      	b.n	1a67c <bt_id_set_adv_private_addr+0x24>

0001a686 <bt_id_adv_random_addr_check>:
}
   1a686:	3800      	subs	r0, #0
   1a688:	bf18      	it	ne
   1a68a:	2001      	movne	r0, #1
   1a68c:	4770      	bx	lr

0001a68e <get_adv_channel_map>:
{
   1a68e:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1a690:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1a694:	bf0c      	ite	eq
   1a696:	2007      	moveq	r0, #7
   1a698:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1a69a:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1a69c:	bf48      	it	mi
   1a69e:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1a6a2:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1a6a4:	bf48      	it	mi
   1a6a6:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1a6aa:	4770      	bx	lr

0001a6ac <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a6ac:	f3bf 8f5b 	dmb	ish
   1a6b0:	6800      	ldr	r0, [r0, #0]
   1a6b2:	f3bf 8f5b 	dmb	ish
}
   1a6b6:	4770      	bx	lr

0001a6b8 <atomic_and>:
{
   1a6b8:	b510      	push	{r4, lr}
   1a6ba:	4603      	mov	r3, r0
}
   1a6bc:	f3bf 8f5b 	dmb	ish
   1a6c0:	e853 0f00 	ldrex	r0, [r3]
   1a6c4:	ea00 0201 	and.w	r2, r0, r1
   1a6c8:	e843 2400 	strex	r4, r2, [r3]
   1a6cc:	2c00      	cmp	r4, #0
   1a6ce:	d1f7      	bne.n	1a6c0 <atomic_and+0x8>
   1a6d0:	f3bf 8f5b 	dmb	ish
   1a6d4:	bd10      	pop	{r4, pc}

0001a6d6 <bt_addr_le_copy>:
   1a6d6:	680b      	ldr	r3, [r1, #0]
   1a6d8:	6003      	str	r3, [r0, #0]
   1a6da:	888b      	ldrh	r3, [r1, #4]
   1a6dc:	8083      	strh	r3, [r0, #4]
   1a6de:	798b      	ldrb	r3, [r1, #6]
   1a6e0:	7183      	strb	r3, [r0, #6]
   1a6e2:	4770      	bx	lr

0001a6e4 <hci_set_ad>:
{
   1a6e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6e8:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1a6ea:	2120      	movs	r1, #32
{
   1a6ec:	9000      	str	r0, [sp, #0]
   1a6ee:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1a6f0:	f7f7 f9b6 	bl	11a60 <bt_hci_cmd_create>
	if (!buf) {
   1a6f4:	4605      	mov	r5, r0
   1a6f6:	2800      	cmp	r0, #0
   1a6f8:	d050      	beq.n	1a79c <hci_set_ad+0xb8>
   1a6fa:	2120      	movs	r1, #32
   1a6fc:	3008      	adds	r0, #8
   1a6fe:	f001 fc2d 	bl	1bf5c <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1a702:	2220      	movs	r2, #32
   1a704:	2100      	movs	r1, #0
   1a706:	4681      	mov	r9, r0
   1a708:	f002 fd79 	bl	1d1fe <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1a70c:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1a710:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   1a714:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1a716:	f8d4 8000 	ldr.w	r8, [r4]
   1a71a:	2300      	movs	r3, #0
   1a71c:	6862      	ldr	r2, [r4, #4]
   1a71e:	4293      	cmp	r3, r2
   1a720:	d30c      	bcc.n	1a73c <hci_set_ad+0x58>
	for (size_t i = 0; i < ad_len; i++) {
   1a722:	3408      	adds	r4, #8
   1a724:	45a2      	cmp	sl, r4
   1a726:	d1f6      	bne.n	1a716 <hci_set_ad+0x32>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1a728:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   1a72a:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1a72e:	2200      	movs	r2, #0
   1a730:	4629      	mov	r1, r5
}
   1a732:	b003      	add	sp, #12
   1a734:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1a738:	f7f7 b9cc 	b.w	11ad4 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1a73c:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1a740:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1a744:	1cb0      	adds	r0, r6, #2
   1a746:	1811      	adds	r1, r2, r0
   1a748:	291f      	cmp	r1, #31
   1a74a:	d908      	bls.n	1a75e <hci_set_ad+0x7a>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1a74c:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1a750:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1a754:	d11a      	bne.n	1a78c <hci_set_ad+0xa8>
   1a756:	2a00      	cmp	r2, #0
   1a758:	dd18      	ble.n	1a78c <hci_set_ad+0xa8>
				type = BT_DATA_NAME_SHORTENED;
   1a75a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1a75e:	b2d7      	uxtb	r7, r2
   1a760:	1c79      	adds	r1, r7, #1
   1a762:	f80b 1006 	strb.w	r1, [fp, r6]
   1a766:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   1a768:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a76a:	fa5b f080 	uxtab	r0, fp, r0
   1a76e:	f80b c001 	strb.w	ip, [fp, r1]
   1a772:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1a776:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1a778:	3702      	adds	r7, #2
   1a77a:	f002 fd32 	bl	1d1e2 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1a77e:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1a780:	4437      	add	r7, r6
   1a782:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   1a784:	3301      	adds	r3, #1
   1a786:	f108 0808 	add.w	r8, r8, #8
   1a78a:	e7c7      	b.n	1a71c <hci_set_ad+0x38>
		net_buf_unref(buf);
   1a78c:	4628      	mov	r0, r5
   1a78e:	f7fa fc87 	bl	150a0 <net_buf_unref>
		return err;
   1a792:	f06f 0015 	mvn.w	r0, #21
}
   1a796:	b003      	add	sp, #12
   1a798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
   1a79c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a7a0:	e7f9      	b.n	1a796 <hci_set_ad+0xb2>

0001a7a2 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1a7a2:	2301      	movs	r3, #1
{
   1a7a4:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1a7a6:	fa03 f101 	lsl.w	r1, r3, r1
{
   1a7aa:	4604      	mov	r4, r0
	if (val) {
   1a7ac:	b162      	cbz	r2, 1a7c8 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a7ae:	f3bf 8f5b 	dmb	ish
   1a7b2:	e854 3f00 	ldrex	r3, [r4]
   1a7b6:	430b      	orrs	r3, r1
   1a7b8:	e844 3200 	strex	r2, r3, [r4]
   1a7bc:	2a00      	cmp	r2, #0
   1a7be:	d1f8      	bne.n	1a7b2 <atomic_set_bit_to+0x10>
   1a7c0:	f3bf 8f5b 	dmb	ish
	}
}
   1a7c4:	bc10      	pop	{r4}
   1a7c6:	4770      	bx	lr
   1a7c8:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a7ca:	43c9      	mvns	r1, r1
   1a7cc:	f7ff bf74 	b.w	1a6b8 <atomic_and>

0001a7d0 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1a7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7d4:	b087      	sub	sp, #28
   1a7d6:	4605      	mov	r5, r0
   1a7d8:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1a7dc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1a7e0:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1a7e4:	460c      	mov	r4, r1
   1a7e6:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   1a7e8:	2100      	movs	r1, #0
   1a7ea:	2210      	movs	r2, #16
   1a7ec:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1a7ee:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   1a7f0:	f002 fd05 	bl	1d1fe <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1a7f4:	b9ee      	cbnz	r6, 1a832 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   1a7f6:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   1a7fa:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1a7fc:	a902      	add	r1, sp, #8
   1a7fe:	f242 0008 	movw	r0, #8200	; 0x2008
   1a802:	f7ff ff6f 	bl	1a6e4 <hci_set_ad>
		if (err) {
   1a806:	4604      	mov	r4, r0
   1a808:	b978      	cbnz	r0, 1a82a <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   1a80a:	f1ba 0f00 	cmp.w	sl, #0
   1a80e:	d13e      	bne.n	1a88e <le_adv_update.constprop.0+0xbe>
   1a810:	3510      	adds	r5, #16
   1a812:	f3bf 8f5b 	dmb	ish
   1a816:	e855 3f00 	ldrex	r3, [r5]
   1a81a:	f043 0304 	orr.w	r3, r3, #4
   1a81e:	e845 3200 	strex	r2, r3, [r5]
   1a822:	2a00      	cmp	r2, #0
   1a824:	d1f7      	bne.n	1a816 <le_adv_update.constprop.0+0x46>
   1a826:	f3bf 8f5b 	dmb	ish
}
   1a82a:	4620      	mov	r0, r4
   1a82c:	b007      	add	sp, #28
   1a82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   1a832:	f7f7 fead 	bl	12590 <bt_get_name>
   1a836:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1a838:	b9e4      	cbnz	r4, 1a874 <le_adv_update.constprop.0+0xa4>
   1a83a:	bb37      	cbnz	r7, 1a88a <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   1a83c:	4658      	mov	r0, fp
   1a83e:	f7f1 f991 	bl	bb64 <strlen>
   1a842:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   1a844:	2e01      	cmp	r6, #1
		d[0].data = ad;
   1a846:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   1a84a:	f88d 3000 	strb.w	r3, [sp]
   1a84e:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   1a852:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   1a856:	d1d0      	bne.n	1a7fa <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   1a858:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1a85c:	9605      	str	r6, [sp, #20]
			d_len = 2;
   1a85e:	2202      	movs	r2, #2
   1a860:	e7cc      	b.n	1a7fc <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1a862:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1a866:	3a08      	subs	r2, #8
   1a868:	2a01      	cmp	r2, #1
   1a86a:	d925      	bls.n	1a8b8 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1a86c:	3301      	adds	r3, #1
   1a86e:	4598      	cmp	r8, r3
   1a870:	d1f7      	bne.n	1a862 <le_adv_update.constprop.0+0x92>
   1a872:	e7e2      	b.n	1a83a <le_adv_update.constprop.0+0x6a>
   1a874:	2300      	movs	r3, #0
   1a876:	e7fa      	b.n	1a86e <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1a878:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   1a87c:	3a08      	subs	r2, #8
   1a87e:	2a01      	cmp	r2, #1
   1a880:	d91a      	bls.n	1a8b8 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1a882:	3301      	adds	r3, #1
   1a884:	4599      	cmp	r9, r3
   1a886:	d1f7      	bne.n	1a878 <le_adv_update.constprop.0+0xa8>
   1a888:	e7d8      	b.n	1a83c <le_adv_update.constprop.0+0x6c>
   1a88a:	2300      	movs	r3, #0
   1a88c:	e7fa      	b.n	1a884 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   1a88e:	2e02      	cmp	r6, #2
   1a890:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   1a894:	bf08      	it	eq
   1a896:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1a898:	a902      	add	r1, sp, #8
			d_len = 2;
   1a89a:	bf08      	it	eq
   1a89c:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1a89e:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   1a8a2:	bf08      	it	eq
   1a8a4:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   1a8a8:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1a8ac:	f7ff ff1a 	bl	1a6e4 <hci_set_ad>
		if (err) {
   1a8b0:	2800      	cmp	r0, #0
   1a8b2:	d0ad      	beq.n	1a810 <le_adv_update.constprop.0+0x40>
   1a8b4:	4604      	mov	r4, r0
   1a8b6:	e7b8      	b.n	1a82a <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   1a8b8:	f06f 0415 	mvn.w	r4, #21
   1a8bc:	e7b5      	b.n	1a82a <le_adv_update.constprop.0+0x5a>

0001a8be <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1a8be:	6843      	ldr	r3, [r0, #4]
   1a8c0:	f013 0008 	ands.w	r0, r3, #8
   1a8c4:	d00a      	beq.n	1a8dc <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1a8c6:	035a      	lsls	r2, r3, #13
   1a8c8:	d407      	bmi.n	1a8da <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1a8ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   1a8ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1a8d2:	bf14      	ite	ne
   1a8d4:	2002      	movne	r0, #2
   1a8d6:	2001      	moveq	r0, #1
   1a8d8:	4770      	bx	lr
   1a8da:	2001      	movs	r0, #1
}
   1a8dc:	4770      	bx	lr

0001a8de <bt_le_adv_set_enable_legacy>:
{
   1a8de:	b570      	push	{r4, r5, r6, lr}
   1a8e0:	4606      	mov	r6, r0
   1a8e2:	b086      	sub	sp, #24
   1a8e4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1a8e6:	f242 000a 	movw	r0, #8202	; 0x200a
   1a8ea:	2101      	movs	r1, #1
   1a8ec:	f7f7 f8b8 	bl	11a60 <bt_hci_cmd_create>
	if (!buf) {
   1a8f0:	4604      	mov	r4, r0
   1a8f2:	b1b0      	cbz	r0, 1a922 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   1a8f4:	3008      	adds	r0, #8
	if (enable) {
   1a8f6:	b195      	cbz	r5, 1a91e <bt_le_adv_set_enable_legacy+0x40>
   1a8f8:	2101      	movs	r1, #1
   1a8fa:	f001 fb3e 	bl	1bf7a <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1a8fe:	f106 0210 	add.w	r2, r6, #16
   1a902:	a903      	add	r1, sp, #12
   1a904:	4620      	mov	r0, r4
   1a906:	9500      	str	r5, [sp, #0]
   1a908:	2307      	movs	r3, #7
   1a90a:	f7f7 f897 	bl	11a3c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1a90e:	2200      	movs	r2, #0
   1a910:	4621      	mov	r1, r4
   1a912:	f242 000a 	movw	r0, #8202	; 0x200a
   1a916:	f7f7 f8dd 	bl	11ad4 <bt_hci_cmd_send_sync>
}
   1a91a:	b006      	add	sp, #24
   1a91c:	bd70      	pop	{r4, r5, r6, pc}
   1a91e:	4629      	mov	r1, r5
   1a920:	e7eb      	b.n	1a8fa <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1a922:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a926:	e7f8      	b.n	1a91a <bt_le_adv_set_enable_legacy+0x3c>

0001a928 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1a928:	3018      	adds	r0, #24
   1a92a:	f002 b907 	b.w	1cb3c <k_work_cancel_delayable>

0001a92e <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1a92e:	f7f8 b9e3 	b.w	12cf8 <bt_le_adv_stop>

0001a932 <tx_complete_work>:
	tx_notify(conn);
   1a932:	3828      	subs	r0, #40	; 0x28
   1a934:	f7f8 ba84 	b.w	12e40 <tx_notify>

0001a938 <bt_conn_reset_rx_state>:
{
   1a938:	b510      	push	{r4, lr}
   1a93a:	4604      	mov	r4, r0
	if (!conn->rx) {
   1a93c:	6900      	ldr	r0, [r0, #16]
   1a93e:	b118      	cbz	r0, 1a948 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1a940:	f7fa fbae 	bl	150a0 <net_buf_unref>
	conn->rx = NULL;
   1a944:	2300      	movs	r3, #0
   1a946:	6123      	str	r3, [r4, #16]
}
   1a948:	bd10      	pop	{r4, pc}

0001a94a <conn_cleanup>:
{
   1a94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a94e:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   1a950:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1a952:	f104 0638 	add.w	r6, r4, #56	; 0x38
   1a956:	2300      	movs	r3, #0
   1a958:	2200      	movs	r2, #0
   1a95a:	4630      	mov	r0, r6
   1a95c:	f001 fa63 	bl	1be26 <net_buf_get>
   1a960:	4603      	mov	r3, r0
   1a962:	b950      	cbnz	r0, 1a97a <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   1a964:	4620      	mov	r0, r4
   1a966:	f7ff ffe7 	bl	1a938 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1a96a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1a96e:	2200      	movs	r2, #0
}
   1a970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1a974:	2300      	movs	r3, #0
   1a976:	f7fd bcab 	b.w	182d0 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1a97a:	695d      	ldr	r5, [r3, #20]
		tx_data(buf)->tx = NULL;
   1a97c:	615f      	str	r7, [r3, #20]
		net_buf_unref(buf);
   1a97e:	f7fa fb8f 	bl	150a0 <net_buf_unref>
		if (tx) {
   1a982:	2d00      	cmp	r5, #0
   1a984:	d0e7      	beq.n	1a956 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   1a986:	4629      	mov	r1, r5
   1a988:	4620      	mov	r0, r4
   1a98a:	f7f8 fa89 	bl	12ea0 <conn_tx_destroy>
   1a98e:	e7e0      	b.n	1a952 <conn_cleanup+0x8>

0001a990 <bt_conn_recv>:
{
   1a990:	b570      	push	{r4, r5, r6, lr}
   1a992:	4616      	mov	r6, r2
   1a994:	4604      	mov	r4, r0
   1a996:	460d      	mov	r5, r1
	tx_notify(conn);
   1a998:	f7f8 fa52 	bl	12e40 <tx_notify>
	switch (flags) {
   1a99c:	2e01      	cmp	r6, #1
   1a99e:	d017      	beq.n	1a9d0 <bt_conn_recv+0x40>
   1a9a0:	2e02      	cmp	r6, #2
   1a9a2:	d117      	bne.n	1a9d4 <bt_conn_recv+0x44>
		if (conn->rx) {
   1a9a4:	6923      	ldr	r3, [r4, #16]
   1a9a6:	b113      	cbz	r3, 1a9ae <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1a9a8:	4620      	mov	r0, r4
   1a9aa:	f7ff ffc5 	bl	1a938 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1a9ae:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1a9b0:	6921      	ldr	r1, [r4, #16]
   1a9b2:	898a      	ldrh	r2, [r1, #12]
   1a9b4:	2a01      	cmp	r2, #1
   1a9b6:	d937      	bls.n	1aa28 <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1a9b8:	688b      	ldr	r3, [r1, #8]
   1a9ba:	881b      	ldrh	r3, [r3, #0]
   1a9bc:	3304      	adds	r3, #4
   1a9be:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1a9c0:	429a      	cmp	r2, r3
   1a9c2:	d331      	bcc.n	1aa28 <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   1a9c4:	d928      	bls.n	1aa18 <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   1a9c6:	4620      	mov	r0, r4
}
   1a9c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1a9cc:	f7ff bfb4 	b.w	1a938 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1a9d0:	6920      	ldr	r0, [r4, #16]
   1a9d2:	b918      	cbnz	r0, 1a9dc <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   1a9d4:	4620      	mov	r0, r4
   1a9d6:	f7ff ffaf 	bl	1a938 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1a9da:	e001      	b.n	1a9e0 <bt_conn_recv+0x50>
		if (!buf->len) {
   1a9dc:	89ae      	ldrh	r6, [r5, #12]
   1a9de:	b926      	cbnz	r6, 1a9ea <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   1a9e0:	4628      	mov	r0, r5
}
   1a9e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1a9e6:	f7fa bb5b 	b.w	150a0 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   1a9ea:	3008      	adds	r0, #8
   1a9ec:	f001 faf1 	bl	1bfd2 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1a9f0:	4286      	cmp	r6, r0
   1a9f2:	d907      	bls.n	1aa04 <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   1a9f4:	6921      	ldr	r1, [r4, #16]
   1a9f6:	2200      	movs	r2, #0
   1a9f8:	4620      	mov	r0, r4
   1a9fa:	f000 f967 	bl	1accc <bt_l2cap_recv>
			conn->rx = NULL;
   1a9fe:	2300      	movs	r3, #0
   1aa00:	6123      	str	r3, [r4, #16]
   1aa02:	e7ed      	b.n	1a9e0 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1aa04:	6920      	ldr	r0, [r4, #16]
   1aa06:	89aa      	ldrh	r2, [r5, #12]
   1aa08:	68a9      	ldr	r1, [r5, #8]
   1aa0a:	3008      	adds	r0, #8
   1aa0c:	f001 faac 	bl	1bf68 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1aa10:	4628      	mov	r0, r5
   1aa12:	f7fa fb45 	bl	150a0 <net_buf_unref>
		break;
   1aa16:	e7cb      	b.n	1a9b0 <bt_conn_recv+0x20>
	conn->rx = NULL;
   1aa18:	2300      	movs	r3, #0
   1aa1a:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1aa1c:	4620      	mov	r0, r4
   1aa1e:	2201      	movs	r2, #1
}
   1aa20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   1aa24:	f000 b952 	b.w	1accc <bt_l2cap_recv>
}
   1aa28:	bd70      	pop	{r4, r5, r6, pc}

0001aa2a <bt_conn_ref>:
{
   1aa2a:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1aa2c:	f3bf 8f5b 	dmb	ish
   1aa30:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1aa34:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   1aa38:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
		if (!old) {
   1aa3c:	b17b      	cbz	r3, 1aa5e <bt_conn_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1aa3e:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1aa42:	1c59      	adds	r1, r3, #1
   1aa44:	e852 4f00 	ldrex	r4, [r2]
   1aa48:	429c      	cmp	r4, r3
   1aa4a:	d104      	bne.n	1aa56 <bt_conn_ref+0x2c>
   1aa4c:	e842 1c00 	strex	ip, r1, [r2]
   1aa50:	f1bc 0f00 	cmp.w	ip, #0
   1aa54:	d1f6      	bne.n	1aa44 <bt_conn_ref+0x1a>
   1aa56:	f3bf 8f5b 	dmb	ish
   1aa5a:	d1e7      	bne.n	1aa2c <bt_conn_ref+0x2>
}
   1aa5c:	bd10      	pop	{r4, pc}
			return NULL;
   1aa5e:	4618      	mov	r0, r3
   1aa60:	e7fc      	b.n	1aa5c <bt_conn_ref+0x32>

0001aa62 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1aa62:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1aa66:	f3bf 8f5b 	dmb	ish
   1aa6a:	e853 1f00 	ldrex	r1, [r3]
   1aa6e:	3901      	subs	r1, #1
   1aa70:	e843 1200 	strex	r2, r1, [r3]
   1aa74:	2a00      	cmp	r2, #0
   1aa76:	d1f8      	bne.n	1aa6a <bt_conn_unref+0x8>
   1aa78:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1aa7c:	8842      	ldrh	r2, [r0, #2]
   1aa7e:	f240 1301 	movw	r3, #257	; 0x101
   1aa82:	429a      	cmp	r2, r3
   1aa84:	d108      	bne.n	1aa98 <bt_conn_unref+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1aa86:	f3bf 8f5b 	dmb	ish
   1aa8a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1aa8e:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   1aa92:	b90b      	cbnz	r3, 1aa98 <bt_conn_unref+0x36>
		bt_le_adv_resume();
   1aa94:	f7f8 b972 	b.w	12d7c <bt_le_adv_resume>
}
   1aa98:	4770      	bx	lr

0001aa9a <conn_lookup_handle>:
{
   1aa9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1aa9e:	4607      	mov	r7, r0
   1aaa0:	460e      	mov	r6, r1
   1aaa2:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1aaa4:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1aaa6:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1aaaa:	42b4      	cmp	r4, r6
   1aaac:	d103      	bne.n	1aab6 <conn_lookup_handle+0x1c>
	return NULL;
   1aaae:	2300      	movs	r3, #0
}
   1aab0:	4618      	mov	r0, r3
   1aab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1aab6:	fb09 7004 	mla	r0, r9, r4, r7
   1aaba:	f7ff ffb6 	bl	1aa2a <bt_conn_ref>
   1aabe:	4603      	mov	r3, r0
		if (!conn) {
   1aac0:	b158      	cbz	r0, 1aada <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1aac2:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1aac4:	2d01      	cmp	r5, #1
   1aac6:	d002      	beq.n	1aace <conn_lookup_handle+0x34>
   1aac8:	3d07      	subs	r5, #7
   1aaca:	2d01      	cmp	r5, #1
   1aacc:	d803      	bhi.n	1aad6 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1aace:	881a      	ldrh	r2, [r3, #0]
   1aad0:	4542      	cmp	r2, r8
   1aad2:	d0ed      	beq.n	1aab0 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1aad4:	4618      	mov	r0, r3
   1aad6:	f7ff ffc4 	bl	1aa62 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1aada:	3401      	adds	r4, #1
   1aadc:	e7e5      	b.n	1aaaa <conn_lookup_handle+0x10>

0001aade <bt_conn_connected>:
{
   1aade:	b510      	push	{r4, lr}
   1aae0:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1aae2:	f7f8 fe6b 	bl	137bc <bt_l2cap_connected>
	notify_connected(conn);
   1aae6:	4620      	mov	r0, r4
}
   1aae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1aaec:	f7f8 b98a 	b.w	12e04 <notify_connected>

0001aaf0 <bt_conn_get_security>:
}
   1aaf0:	2001      	movs	r0, #1
   1aaf2:	4770      	bx	lr

0001aaf4 <bt_conn_is_peer_addr_le>:
{
   1aaf4:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1aaf6:	7a03      	ldrb	r3, [r0, #8]
   1aaf8:	428b      	cmp	r3, r1
{
   1aafa:	4604      	mov	r4, r0
   1aafc:	4615      	mov	r5, r2
	if (id != conn->id) {
   1aafe:	d115      	bne.n	1ab2c <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1ab00:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1ab04:	2207      	movs	r2, #7
   1ab06:	4628      	mov	r0, r5
   1ab08:	f002 fb5b 	bl	1d1c2 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   1ab0c:	b180      	cbz	r0, 1ab30 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1ab0e:	78e3      	ldrb	r3, [r4, #3]
   1ab10:	2207      	movs	r2, #7
   1ab12:	b943      	cbnz	r3, 1ab26 <bt_conn_is_peer_addr_le+0x32>
   1ab14:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1ab18:	4628      	mov	r0, r5
   1ab1a:	f002 fb52 	bl	1d1c2 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   1ab1e:	fab0 f080 	clz	r0, r0
   1ab22:	0940      	lsrs	r0, r0, #5
}
   1ab24:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   1ab26:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1ab2a:	e7f5      	b.n	1ab18 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1ab2c:	2000      	movs	r0, #0
   1ab2e:	e7f9      	b.n	1ab24 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1ab30:	2001      	movs	r0, #1
   1ab32:	e7f7      	b.n	1ab24 <bt_conn_is_peer_addr_le+0x30>

0001ab34 <bt_conn_exists_le>:
{
   1ab34:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1ab36:	f7f8 fc93 	bl	13460 <bt_conn_lookup_addr_le>
	if (conn) {
   1ab3a:	b110      	cbz	r0, 1ab42 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   1ab3c:	f7ff ff91 	bl	1aa62 <bt_conn_unref>
		return true;
   1ab40:	2001      	movs	r0, #1
}
   1ab42:	bd08      	pop	{r3, pc}

0001ab44 <bt_conn_le_conn_update>:
{
   1ab44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ab46:	4607      	mov	r7, r0
   1ab48:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1ab4a:	f242 0013 	movw	r0, #8211	; 0x2013
   1ab4e:	210e      	movs	r1, #14
   1ab50:	f7f6 ff86 	bl	11a60 <bt_hci_cmd_create>
	if (!buf) {
   1ab54:	4606      	mov	r6, r0
   1ab56:	b1d0      	cbz	r0, 1ab8e <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1ab58:	210e      	movs	r1, #14
   1ab5a:	3008      	adds	r0, #8
   1ab5c:	f001 f9fe 	bl	1bf5c <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1ab60:	220e      	movs	r2, #14
   1ab62:	4604      	mov	r4, r0
   1ab64:	2100      	movs	r1, #0
   1ab66:	f002 fb4a 	bl	1d1fe <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1ab6a:	883b      	ldrh	r3, [r7, #0]
   1ab6c:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1ab6e:	882b      	ldrh	r3, [r5, #0]
   1ab70:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1ab72:	886b      	ldrh	r3, [r5, #2]
   1ab74:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1ab76:	88ab      	ldrh	r3, [r5, #4]
   1ab78:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1ab7a:	88eb      	ldrh	r3, [r5, #6]
   1ab7c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ab7e:	4631      	mov	r1, r6
   1ab80:	2200      	movs	r2, #0
}
   1ab82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ab86:	f242 0013 	movw	r0, #8211	; 0x2013
   1ab8a:	f7f6 bfa3 	b.w	11ad4 <bt_hci_cmd_send_sync>
}
   1ab8e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ab92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ab94 <l2cap_connected>:
}
   1ab94:	4770      	bx	lr

0001ab96 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1ab96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ab98:	4607      	mov	r7, r0
   1ab9a:	460e      	mov	r6, r1
   1ab9c:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1ab9e:	2300      	movs	r3, #0
   1aba0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1aba4:	2104      	movs	r1, #4
   1aba6:	2000      	movs	r0, #0
   1aba8:	f7f8 fba6 	bl	132f8 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1abac:	4604      	mov	r4, r0
   1abae:	b130      	cbz	r0, 1abbe <l2cap_create_le_sig_pdu.constprop.0+0x28>
   1abb0:	2104      	movs	r1, #4
   1abb2:	3008      	adds	r0, #8
   1abb4:	f001 f9d2 	bl	1bf5c <net_buf_simple_add>
	hdr->code = code;
   1abb8:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1abba:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1abbc:	8045      	strh	r5, [r0, #2]
}
   1abbe:	4620      	mov	r0, r4
   1abc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001abc2 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   1abc2:	4770      	bx	lr

0001abc4 <bt_l2cap_chan_del>:
{
   1abc4:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1abc6:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1abca:	4604      	mov	r4, r0
	if (!chan->conn) {
   1abcc:	b123      	cbz	r3, 1abd8 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1abce:	686b      	ldr	r3, [r5, #4]
   1abd0:	b103      	cbz	r3, 1abd4 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1abd2:	4798      	blx	r3
	chan->conn = NULL;
   1abd4:	2300      	movs	r3, #0
   1abd6:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1abd8:	68e3      	ldr	r3, [r4, #12]
   1abda:	b10b      	cbz	r3, 1abe0 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1abdc:	4620      	mov	r0, r4
   1abde:	4798      	blx	r3
	if (ops->released) {
   1abe0:	6a2b      	ldr	r3, [r5, #32]
   1abe2:	b11b      	cbz	r3, 1abec <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1abe4:	4620      	mov	r0, r4
}
   1abe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1abea:	4718      	bx	r3
}
   1abec:	bd70      	pop	{r4, r5, r6, pc}

0001abee <bt_l2cap_disconnected>:
{
   1abee:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1abf0:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1abf2:	b130      	cbz	r0, 1ac02 <bt_l2cap_disconnected+0x14>
	return node->next;
   1abf4:	f850 4908 	ldr.w	r4, [r0], #-8
   1abf8:	b104      	cbz	r4, 1abfc <bt_l2cap_disconnected+0xe>
   1abfa:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1abfc:	f7ff ffe2 	bl	1abc4 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ac00:	b904      	cbnz	r4, 1ac04 <bt_l2cap_disconnected+0x16>
}
   1ac02:	bd38      	pop	{r3, r4, r5, pc}
   1ac04:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ac06:	b12d      	cbz	r5, 1ac14 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   1ac08:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ac0a:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   1ac0c:	f7ff ffda 	bl	1abc4 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ac10:	462c      	mov	r4, r5
   1ac12:	e7f7      	b.n	1ac04 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   1ac14:	4620      	mov	r0, r4
}
   1ac16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   1ac1a:	f7ff bfd3 	b.w	1abc4 <bt_l2cap_chan_del>

0001ac1e <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1ac1e:	3104      	adds	r1, #4
   1ac20:	f7f8 bb6a 	b.w	132f8 <bt_conn_create_pdu_timeout>

0001ac24 <bt_l2cap_send_cb>:
{
   1ac24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac28:	4614      	mov	r4, r2
   1ac2a:	4605      	mov	r5, r0
   1ac2c:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1ac2e:	f102 0008 	add.w	r0, r2, #8
   1ac32:	2104      	movs	r1, #4
   1ac34:	461e      	mov	r6, r3
   1ac36:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1ac3a:	f001 f9a6 	bl	1bf8a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ac3e:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1ac40:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ac42:	3a04      	subs	r2, #4
   1ac44:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ac46:	4643      	mov	r3, r8
   1ac48:	4632      	mov	r2, r6
   1ac4a:	4621      	mov	r1, r4
   1ac4c:	4628      	mov	r0, r5
}
   1ac4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ac52:	f7f8 ba0b 	b.w	1306c <bt_conn_send_cb>

0001ac56 <l2cap_recv>:
{
   1ac56:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1ac58:	898b      	ldrh	r3, [r1, #12]
   1ac5a:	2b03      	cmp	r3, #3
{
   1ac5c:	4605      	mov	r5, r0
   1ac5e:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1ac60:	d927      	bls.n	1acb2 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1ac62:	2104      	movs	r1, #4
   1ac64:	f104 0008 	add.w	r0, r4, #8
   1ac68:	f001 f99f 	bl	1bfaa <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1ac6c:	89a3      	ldrh	r3, [r4, #12]
   1ac6e:	8842      	ldrh	r2, [r0, #2]
   1ac70:	429a      	cmp	r2, r3
   1ac72:	d11e      	bne.n	1acb2 <l2cap_recv+0x5c>
	if (!hdr->ident) {
   1ac74:	7841      	ldrb	r1, [r0, #1]
   1ac76:	b1e1      	cbz	r1, 1acb2 <l2cap_recv+0x5c>
	switch (hdr->code) {
   1ac78:	7803      	ldrb	r3, [r0, #0]
   1ac7a:	2b01      	cmp	r3, #1
   1ac7c:	d019      	beq.n	1acb2 <l2cap_recv+0x5c>
   1ac7e:	2b13      	cmp	r3, #19
   1ac80:	d017      	beq.n	1acb2 <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1ac82:	2202      	movs	r2, #2
   1ac84:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1ac86:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1ac88:	f7ff ff85 	bl	1ab96 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1ac8c:	4604      	mov	r4, r0
   1ac8e:	b180      	cbz	r0, 1acb2 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1ac90:	2102      	movs	r1, #2
   1ac92:	3008      	adds	r0, #8
   1ac94:	f001 f962 	bl	1bf5c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1ac98:	2300      	movs	r3, #0
   1ac9a:	7003      	strb	r3, [r0, #0]
   1ac9c:	7043      	strb	r3, [r0, #1]
   1ac9e:	4622      	mov	r2, r4
   1aca0:	9300      	str	r3, [sp, #0]
   1aca2:	2105      	movs	r1, #5
   1aca4:	4628      	mov	r0, r5
   1aca6:	f7ff ffbd 	bl	1ac24 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1acaa:	b110      	cbz	r0, 1acb2 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   1acac:	4620      	mov	r0, r4
   1acae:	f7fa f9f7 	bl	150a0 <net_buf_unref>
}
   1acb2:	2000      	movs	r0, #0
   1acb4:	b003      	add	sp, #12
   1acb6:	bd30      	pop	{r4, r5, pc}

0001acb8 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1acb8:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1acba:	b130      	cbz	r0, 1acca <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1acbc:	8983      	ldrh	r3, [r0, #12]
   1acbe:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1acc0:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1acc4:	d001      	beq.n	1acca <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   1acc6:	6880      	ldr	r0, [r0, #8]
   1acc8:	e7f7      	b.n	1acba <bt_l2cap_le_lookup_rx_cid+0x2>
}
   1acca:	4770      	bx	lr

0001accc <bt_l2cap_recv>:
{
   1accc:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1acce:	898b      	ldrh	r3, [r1, #12]
   1acd0:	2b03      	cmp	r3, #3
{
   1acd2:	4605      	mov	r5, r0
   1acd4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1acd6:	d804      	bhi.n	1ace2 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1acd8:	4620      	mov	r0, r4
}
   1acda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1acde:	f7fa b9df 	b.w	150a0 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1ace2:	2104      	movs	r1, #4
   1ace4:	f104 0008 	add.w	r0, r4, #8
   1ace8:	f001 f95f 	bl	1bfaa <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1acec:	8841      	ldrh	r1, [r0, #2]
   1acee:	4628      	mov	r0, r5
   1acf0:	f7ff ffe2 	bl	1acb8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1acf4:	2800      	cmp	r0, #0
   1acf6:	d0ef      	beq.n	1acd8 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1acf8:	6843      	ldr	r3, [r0, #4]
   1acfa:	4621      	mov	r1, r4
   1acfc:	695b      	ldr	r3, [r3, #20]
   1acfe:	4798      	blx	r3
   1ad00:	e7ea      	b.n	1acd8 <bt_l2cap_recv+0xc>

0001ad02 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   1ad02:	4770      	bx	lr

0001ad04 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1ad04:	4603      	mov	r3, r0
	return list->head;
   1ad06:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1ad08:	b128      	cbz	r0, 1ad16 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ad0a:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1ad0c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1ad0e:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ad10:	4288      	cmp	r0, r1
	list->tail = node;
   1ad12:	bf08      	it	eq
   1ad14:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1ad16:	4770      	bx	lr

0001ad18 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1ad18:	4603      	mov	r3, r0
	size_t bytes = 0;
   1ad1a:	2000      	movs	r0, #0

	while (buf) {
   1ad1c:	b903      	cbnz	r3, 1ad20 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1ad1e:	4770      	bx	lr
		bytes += buf->len;
   1ad20:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1ad22:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1ad24:	4410      	add	r0, r2
		buf = buf->frags;
   1ad26:	e7f9      	b.n	1ad1c <net_buf_frags_len+0x4>

0001ad28 <attr_read_type_cb>:
{
   1ad28:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1ad2a:	68d4      	ldr	r4, [r2, #12]
   1ad2c:	7823      	ldrb	r3, [r4, #0]
   1ad2e:	3102      	adds	r1, #2
   1ad30:	b913      	cbnz	r3, 1ad38 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1ad32:	7021      	strb	r1, [r4, #0]
	return true;
   1ad34:	2001      	movs	r0, #1
}
   1ad36:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1ad38:	428b      	cmp	r3, r1
   1ad3a:	d0fb      	beq.n	1ad34 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1ad3c:	8983      	ldrh	r3, [r0, #12]
   1ad3e:	3b02      	subs	r3, #2
   1ad40:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1ad42:	2000      	movs	r0, #0
   1ad44:	6110      	str	r0, [r2, #16]
		return false;
   1ad46:	e7f6      	b.n	1ad36 <attr_read_type_cb+0xe>

0001ad48 <att_prepare_write_req>:
}
   1ad48:	2006      	movs	r0, #6
   1ad4a:	4770      	bx	lr

0001ad4c <att_get>:
{
   1ad4c:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1ad4e:	7a83      	ldrb	r3, [r0, #10]
   1ad50:	2b07      	cmp	r3, #7
   1ad52:	d001      	beq.n	1ad58 <att_get+0xc>
		return NULL;
   1ad54:	2000      	movs	r0, #0
}
   1ad56:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1ad58:	2104      	movs	r1, #4
   1ad5a:	f7ff ffad 	bl	1acb8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1ad5e:	2800      	cmp	r0, #0
   1ad60:	d0f8      	beq.n	1ad54 <att_get+0x8>
	return att_chan->att;
   1ad62:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1ad66:	e7f6      	b.n	1ad56 <att_get+0xa>

0001ad68 <atomic_test_bit>:
   1ad68:	f3bf 8f5b 	dmb	ish
   1ad6c:	6800      	ldr	r0, [r0, #0]
   1ad6e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ad72:	4108      	asrs	r0, r1
}
   1ad74:	f000 0001 	and.w	r0, r0, #1
   1ad78:	4770      	bx	lr

0001ad7a <chan_req_send>:
{
   1ad7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad7c:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ad7e:	6888      	ldr	r0, [r1, #8]
   1ad80:	f7ff ffca 	bl	1ad18 <net_buf_frags_len>
   1ad84:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   1ad86:	4283      	cmp	r3, r0
{
   1ad88:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ad8a:	d30d      	bcc.n	1ada8 <chan_req_send+0x2e>
	chan->req = req;
   1ad8c:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	buf = req->buf;
   1ad90:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   1ad92:	2600      	movs	r6, #0
   1ad94:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   1ad96:	4628      	mov	r0, r5
   1ad98:	4639      	mov	r1, r7
   1ad9a:	f7f8 fde3 	bl	13964 <chan_send>
	if (err) {
   1ad9e:	b110      	cbz	r0, 1ada6 <chan_req_send+0x2c>
		req->buf = buf;
   1ada0:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   1ada2:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
}
   1ada6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1ada8:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1adac:	e7fb      	b.n	1ada6 <chan_req_send+0x2c>

0001adae <write_cb>:
{
   1adae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1adb0:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1adb2:	4601      	mov	r1, r0
{
   1adb4:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1adb6:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1adba:	6820      	ldr	r0, [r4, #0]
   1adbc:	f000 fece 	bl	1bb5c <bt_gatt_check_perm>
   1adc0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1adc2:	bb00      	cbnz	r0, 1ae06 <write_cb+0x58>
	if (!data->req) {
   1adc4:	7a23      	ldrb	r3, [r4, #8]
   1adc6:	b1b3      	cbz	r3, 1adf6 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   1adc8:	f1a3 0218 	sub.w	r2, r3, #24
   1adcc:	4253      	negs	r3, r2
   1adce:	4153      	adcs	r3, r2
   1add0:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1add2:	9301      	str	r3, [sp, #4]
   1add4:	8a63      	ldrh	r3, [r4, #18]
   1add6:	9300      	str	r3, [sp, #0]
   1add8:	68ae      	ldr	r6, [r5, #8]
   1adda:	8a23      	ldrh	r3, [r4, #16]
   1addc:	68e2      	ldr	r2, [r4, #12]
   1adde:	6820      	ldr	r0, [r4, #0]
   1ade0:	4629      	mov	r1, r5
   1ade2:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   1ade4:	2800      	cmp	r0, #0
   1ade6:	db08      	blt.n	1adfa <write_cb+0x4c>
   1ade8:	8a23      	ldrh	r3, [r4, #16]
   1adea:	4298      	cmp	r0, r3
   1adec:	d10e      	bne.n	1ae0c <write_cb+0x5e>
	data->err = 0U;
   1adee:	2300      	movs	r3, #0
   1adf0:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1adf2:	2001      	movs	r0, #1
   1adf4:	e008      	b.n	1ae08 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1adf6:	2302      	movs	r3, #2
   1adf8:	e7eb      	b.n	1add2 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   1adfa:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1adfe:	d305      	bcc.n	1ae0c <write_cb+0x5e>
		return -err;
   1ae00:	4240      	negs	r0, r0
   1ae02:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   1ae04:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1ae06:	2000      	movs	r0, #0
}
   1ae08:	b002      	add	sp, #8
   1ae0a:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   1ae0c:	200e      	movs	r0, #14
   1ae0e:	e7f9      	b.n	1ae04 <write_cb+0x56>

0001ae10 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1ae10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ae12:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ae16:	2300      	movs	r3, #0
   1ae18:	9300      	str	r3, [sp, #0]
   1ae1a:	461a      	mov	r2, r3
   1ae1c:	f7f9 fd70 	bl	14900 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1ae20:	b005      	add	sp, #20
   1ae22:	f85d fb04 	ldr.w	pc, [sp], #4

0001ae26 <bt_att_chan_send_rsp>:
{
   1ae26:	b538      	push	{r3, r4, r5, lr}
   1ae28:	4604      	mov	r4, r0
   1ae2a:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   1ae2c:	f7f8 fd9a 	bl	13964 <chan_send>
	if (err) {
   1ae30:	b130      	cbz	r0, 1ae40 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1ae32:	4629      	mov	r1, r5
   1ae34:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   1ae38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1ae3c:	f001 b85b 	b.w	1bef6 <net_buf_put>
}
   1ae40:	bd38      	pop	{r3, r4, r5, pc}

0001ae42 <find_type_cb>:
{
   1ae42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae46:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   1ae48:	f8d2 9000 	ldr.w	r9, [r2]
{
   1ae4c:	4607      	mov	r7, r0
   1ae4e:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ae50:	2500      	movs	r5, #0
   1ae52:	f642 0301 	movw	r3, #10241	; 0x2801
   1ae56:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1ae58:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ae5c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1ae60:	a90b      	add	r1, sp, #44	; 0x2c
{
   1ae62:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ae64:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1ae68:	f7ff f934 	bl	1a0d4 <bt_uuid_cmp>
   1ae6c:	2800      	cmp	r0, #0
   1ae6e:	d079      	beq.n	1af64 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1ae70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ae74:	6838      	ldr	r0, [r7, #0]
   1ae76:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1ae7a:	a90b      	add	r1, sp, #44	; 0x2c
   1ae7c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1ae80:	f7ff f928 	bl	1a0d4 <bt_uuid_cmp>
   1ae84:	b138      	cbz	r0, 1ae96 <find_type_cb+0x54>
		if (data->group &&
   1ae86:	68a3      	ldr	r3, [r4, #8]
   1ae88:	b11b      	cbz	r3, 1ae92 <find_type_cb+0x50>
   1ae8a:	885a      	ldrh	r2, [r3, #2]
   1ae8c:	42b2      	cmp	r2, r6
   1ae8e:	d200      	bcs.n	1ae92 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   1ae90:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1ae92:	2001      	movs	r0, #1
   1ae94:	e009      	b.n	1aeaa <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1ae96:	6861      	ldr	r1, [r4, #4]
   1ae98:	4608      	mov	r0, r1
   1ae9a:	f7ff ff3d 	bl	1ad18 <net_buf_frags_len>
   1ae9e:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   1aea2:	1a1b      	subs	r3, r3, r0
   1aea4:	2b03      	cmp	r3, #3
   1aea6:	d803      	bhi.n	1aeb0 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1aea8:	2000      	movs	r0, #0
}
   1aeaa:	b011      	add	sp, #68	; 0x44
   1aeac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1aeb0:	4608      	mov	r0, r1
   1aeb2:	f001 f831 	bl	1bf18 <net_buf_frag_last>
   1aeb6:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1aeb8:	6860      	ldr	r0, [r4, #4]
   1aeba:	f7ff ff2d 	bl	1ad18 <net_buf_frags_len>
   1aebe:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1aec2:	f105 0b08 	add.w	fp, r5, #8
   1aec6:	ebaa 0a00 	sub.w	sl, sl, r0
   1aeca:	4658      	mov	r0, fp
   1aecc:	f001 f881 	bl	1bfd2 <net_buf_simple_tailroom>
   1aed0:	4582      	cmp	sl, r0
   1aed2:	d23f      	bcs.n	1af54 <find_type_cb+0x112>
   1aed4:	6860      	ldr	r0, [r4, #4]
   1aed6:	f7ff ff1f 	bl	1ad18 <net_buf_frags_len>
   1aeda:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   1aede:	1a18      	subs	r0, r3, r0
	if (!len) {
   1aee0:	b970      	cbnz	r0, 1af00 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1aee2:	6863      	ldr	r3, [r4, #4]
   1aee4:	7998      	ldrb	r0, [r3, #6]
   1aee6:	f7fa f819 	bl	14f1c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1aeea:	2200      	movs	r2, #0
   1aeec:	2300      	movs	r3, #0
   1aeee:	f000 ff95 	bl	1be1c <net_buf_alloc_fixed>
		if (!frag) {
   1aef2:	4605      	mov	r5, r0
   1aef4:	2800      	cmp	r0, #0
   1aef6:	d0d7      	beq.n	1aea8 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1aef8:	4601      	mov	r1, r0
   1aefa:	6860      	ldr	r0, [r4, #4]
   1aefc:	f001 f81d 	bl	1bf3a <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1af00:	2300      	movs	r3, #0
   1af02:	9300      	str	r3, [sp, #0]
   1af04:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1af08:	4639      	mov	r1, r7
   1af0a:	2310      	movs	r3, #16
   1af0c:	aa02      	add	r2, sp, #8
   1af0e:	4640      	mov	r0, r8
   1af10:	47c8      	blx	r9
	if (read < 0) {
   1af12:	1e07      	subs	r7, r0, #0
   1af14:	db26      	blt.n	1af64 <find_type_cb+0x122>
	if (read != data->value_len) {
   1af16:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1af18:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1af1a:	42ba      	cmp	r2, r7
   1af1c:	d01e      	beq.n	1af5c <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1af1e:	4601      	mov	r1, r0
   1af20:	a80b      	add	r0, sp, #44	; 0x2c
   1af22:	f7ff f905 	bl	1a130 <bt_uuid_create>
   1af26:	b1e8      	cbz	r0, 1af64 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1af28:	b2fa      	uxtb	r2, r7
   1af2a:	a902      	add	r1, sp, #8
   1af2c:	a806      	add	r0, sp, #24
   1af2e:	f7ff f8ff 	bl	1a130 <bt_uuid_create>
   1af32:	b1b8      	cbz	r0, 1af64 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1af34:	a906      	add	r1, sp, #24
   1af36:	a80b      	add	r0, sp, #44	; 0x2c
   1af38:	f7ff f8cc 	bl	1a0d4 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1af3c:	b990      	cbnz	r0, 1af64 <find_type_cb+0x122>
	data->err = 0x00;
   1af3e:	2300      	movs	r3, #0
   1af40:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1af42:	2104      	movs	r1, #4
   1af44:	f105 0008 	add.w	r0, r5, #8
   1af48:	f001 f808 	bl	1bf5c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1af4c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1af4e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1af50:	68a3      	ldr	r3, [r4, #8]
   1af52:	e79d      	b.n	1ae90 <find_type_cb+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   1af54:	4658      	mov	r0, fp
   1af56:	f001 f83c 	bl	1bfd2 <net_buf_simple_tailroom>
   1af5a:	e7c1      	b.n	1aee0 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   1af5c:	a902      	add	r1, sp, #8
   1af5e:	f002 f930 	bl	1d1c2 <memcmp>
   1af62:	e7eb      	b.n	1af3c <find_type_cb+0xfa>
	data->group = NULL;
   1af64:	2300      	movs	r3, #0
   1af66:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1af68:	e793      	b.n	1ae92 <find_type_cb+0x50>

0001af6a <att_chan_mtu_updated>:
{
   1af6a:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1af6c:	6805      	ldr	r5, [r0, #0]
	return list->head;
   1af6e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1af70:	b352      	cbz	r2, 1afc8 <att_chan_mtu_updated+0x5e>
	return node->next;
   1af72:	6813      	ldr	r3, [r2, #0]
   1af74:	b103      	cbz	r3, 1af78 <att_chan_mtu_updated+0xe>
   1af76:	3be0      	subs	r3, #224	; 0xe0
   1af78:	f1a2 04e0 	sub.w	r4, r2, #224	; 0xe0
   1af7c:	2200      	movs	r2, #0
   1af7e:	4611      	mov	r1, r2
   1af80:	e000      	b.n	1af84 <att_chan_mtu_updated+0x1a>
   1af82:	3be0      	subs	r3, #224	; 0xe0
		if (chan == updated_chan) {
   1af84:	4284      	cmp	r4, r0
   1af86:	d007      	beq.n	1af98 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1af88:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1af8a:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1af8c:	42b1      	cmp	r1, r6
   1af8e:	bf38      	it	cc
   1af90:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1af92:	42a2      	cmp	r2, r4
   1af94:	bf38      	it	cc
   1af96:	4622      	movcc	r2, r4
   1af98:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1af9a:	b12b      	cbz	r3, 1afa8 <att_chan_mtu_updated+0x3e>
   1af9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1afa0:	2b00      	cmp	r3, #0
   1afa2:	d1ee      	bne.n	1af82 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   1afa4:	4284      	cmp	r4, r0
   1afa6:	d1ef      	bne.n	1af88 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1afa8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1afaa:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1afac:	428b      	cmp	r3, r1
   1afae:	d801      	bhi.n	1afb4 <att_chan_mtu_updated+0x4a>
   1afb0:	4290      	cmp	r0, r2
   1afb2:	d90b      	bls.n	1afcc <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1afb4:	4282      	cmp	r2, r0
   1afb6:	bf38      	it	cc
   1afb8:	4602      	movcc	r2, r0
   1afba:	4299      	cmp	r1, r3
   1afbc:	6828      	ldr	r0, [r5, #0]
   1afbe:	bf38      	it	cc
   1afc0:	4619      	movcc	r1, r3
}
   1afc2:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1afc4:	f7f9 bf64 	b.w	14e90 <bt_gatt_att_max_mtu_changed>
   1afc8:	4611      	mov	r1, r2
   1afca:	e7ed      	b.n	1afa8 <att_chan_mtu_updated+0x3e>
}
   1afcc:	bc70      	pop	{r4, r5, r6}
   1afce:	4770      	bx	lr

0001afd0 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1afd0:	68d0      	ldr	r0, [r2, #12]
   1afd2:	7803      	ldrb	r3, [r0, #0]
   1afd4:	3104      	adds	r1, #4
   1afd6:	b913      	cbnz	r3, 1afde <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1afd8:	7001      	strb	r1, [r0, #0]
	return true;
   1afda:	2001      	movs	r0, #1
   1afdc:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1afde:	428b      	cmp	r3, r1
   1afe0:	d0fb      	beq.n	1afda <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1afe2:	6891      	ldr	r1, [r2, #8]
   1afe4:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1afe6:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1afe8:	3b04      	subs	r3, #4
   1afea:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1afec:	6110      	str	r0, [r2, #16]
}
   1afee:	4770      	bx	lr

0001aff0 <find_info_cb>:
{
   1aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1aff2:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1aff4:	6816      	ldr	r6, [r2, #0]
{
   1aff6:	4605      	mov	r5, r0
   1aff8:	460f      	mov	r7, r1
   1affa:	4614      	mov	r4, r2
	if (!data->rsp) {
   1affc:	b963      	cbnz	r3, 1b018 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1affe:	6850      	ldr	r0, [r2, #4]
   1b000:	2101      	movs	r1, #1
   1b002:	3008      	adds	r0, #8
   1b004:	f000 ffaa 	bl	1bf5c <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1b008:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1b00a:	682b      	ldr	r3, [r5, #0]
   1b00c:	781b      	ldrb	r3, [r3, #0]
   1b00e:	2b00      	cmp	r3, #0
   1b010:	bf14      	ite	ne
   1b012:	2302      	movne	r3, #2
   1b014:	2301      	moveq	r3, #1
   1b016:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1b018:	68a3      	ldr	r3, [r4, #8]
   1b01a:	781b      	ldrb	r3, [r3, #0]
   1b01c:	2b01      	cmp	r3, #1
   1b01e:	d003      	beq.n	1b028 <find_info_cb+0x38>
   1b020:	2b02      	cmp	r3, #2
   1b022:	d019      	beq.n	1b058 <find_info_cb+0x68>
   1b024:	2000      	movs	r0, #0
   1b026:	e016      	b.n	1b056 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1b028:	682b      	ldr	r3, [r5, #0]
   1b02a:	781b      	ldrb	r3, [r3, #0]
   1b02c:	2b00      	cmp	r3, #0
   1b02e:	d1f9      	bne.n	1b024 <find_info_cb+0x34>
   1b030:	6860      	ldr	r0, [r4, #4]
   1b032:	2104      	movs	r1, #4
   1b034:	3008      	adds	r0, #8
   1b036:	f000 ff91 	bl	1bf5c <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1b03a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   1b03c:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b03e:	682a      	ldr	r2, [r5, #0]
   1b040:	68e3      	ldr	r3, [r4, #12]
   1b042:	8852      	ldrh	r2, [r2, #2]
   1b044:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1b046:	6863      	ldr	r3, [r4, #4]
   1b048:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   1b04a:	899b      	ldrh	r3, [r3, #12]
   1b04c:	1ac0      	subs	r0, r0, r3
   1b04e:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   1b050:	bf94      	ite	ls
   1b052:	2000      	movls	r0, #0
   1b054:	2001      	movhi	r0, #1
}
   1b056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1b058:	682b      	ldr	r3, [r5, #0]
   1b05a:	781b      	ldrb	r3, [r3, #0]
   1b05c:	2b02      	cmp	r3, #2
   1b05e:	d1e1      	bne.n	1b024 <find_info_cb+0x34>
   1b060:	6860      	ldr	r0, [r4, #4]
   1b062:	2112      	movs	r1, #18
   1b064:	3008      	adds	r0, #8
   1b066:	f000 ff79 	bl	1bf5c <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1b06a:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1b06c:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b06e:	682b      	ldr	r3, [r5, #0]
   1b070:	68e2      	ldr	r2, [r4, #12]
   1b072:	1c59      	adds	r1, r3, #1
   1b074:	3202      	adds	r2, #2
   1b076:	3311      	adds	r3, #17
   1b078:	f851 0b04 	ldr.w	r0, [r1], #4
   1b07c:	f842 0b04 	str.w	r0, [r2], #4
   1b080:	4299      	cmp	r1, r3
   1b082:	d1f9      	bne.n	1b078 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   1b084:	6863      	ldr	r3, [r4, #4]
   1b086:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   1b088:	899b      	ldrh	r3, [r3, #12]
   1b08a:	1ac0      	subs	r0, r0, r3
   1b08c:	2812      	cmp	r0, #18
   1b08e:	e7df      	b.n	1b050 <find_info_cb+0x60>

0001b090 <process_queue>:
{
   1b090:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   1b092:	2200      	movs	r2, #0
{
   1b094:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   1b096:	2300      	movs	r3, #0
   1b098:	4608      	mov	r0, r1
{
   1b09a:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   1b09c:	f000 fec3 	bl	1be26 <net_buf_get>
	if (buf) {
   1b0a0:	4605      	mov	r5, r0
   1b0a2:	b158      	cbz	r0, 1b0bc <process_queue+0x2c>
	return chan_send(chan, buf);
   1b0a4:	4601      	mov	r1, r0
   1b0a6:	4620      	mov	r0, r4
   1b0a8:	f7f8 fc5c 	bl	13964 <chan_send>
		if (err) {
   1b0ac:	4604      	mov	r4, r0
   1b0ae:	b118      	cbz	r0, 1b0b8 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   1b0b0:	4629      	mov	r1, r5
   1b0b2:	4630      	mov	r0, r6
   1b0b4:	f001 fc2b 	bl	1c90e <k_queue_prepend>
}
   1b0b8:	4620      	mov	r0, r4
   1b0ba:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1b0bc:	f06f 0401 	mvn.w	r4, #1
   1b0c0:	e7fa      	b.n	1b0b8 <process_queue+0x28>

0001b0c2 <att_chan_read>:
{
   1b0c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0c6:	4680      	mov	r8, r0
   1b0c8:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b0ca:	4610      	mov	r0, r2
{
   1b0cc:	4699      	mov	r9, r3
   1b0ce:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b0d0:	f7ff fe22 	bl	1ad18 <net_buf_frags_len>
   1b0d4:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1b0d8:	4283      	cmp	r3, r0
{
   1b0da:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b0dc:	d97a      	bls.n	1b1d4 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b0de:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b0e2:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1b0e4:	4630      	mov	r0, r6
   1b0e6:	f000 ff17 	bl	1bf18 <net_buf_frag_last>
	size_t len, total = 0;
   1b0ea:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1b0ee:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b0f0:	4630      	mov	r0, r6
   1b0f2:	f7ff fe11 	bl	1ad18 <net_buf_frags_len>
   1b0f6:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1b0fa:	f105 0708 	add.w	r7, r5, #8
   1b0fe:	1a24      	subs	r4, r4, r0
   1b100:	4638      	mov	r0, r7
   1b102:	f000 ff66 	bl	1bfd2 <net_buf_simple_tailroom>
   1b106:	4284      	cmp	r4, r0
   1b108:	d211      	bcs.n	1b12e <att_chan_read+0x6c>
   1b10a:	4630      	mov	r0, r6
   1b10c:	f7ff fe04 	bl	1ad18 <net_buf_frags_len>
   1b110:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1b114:	1a24      	subs	r4, r4, r0
		if (!len) {
   1b116:	bb34      	cbnz	r4, 1b166 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1b118:	79b0      	ldrb	r0, [r6, #6]
   1b11a:	f7f9 feff 	bl	14f1c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1b11e:	2200      	movs	r2, #0
   1b120:	2300      	movs	r3, #0
   1b122:	f000 fe7b 	bl	1be1c <net_buf_alloc_fixed>
			if (!frag) {
   1b126:	4605      	mov	r5, r0
   1b128:	b930      	cbnz	r0, 1b138 <att_chan_read+0x76>
	return total;
   1b12a:	4657      	mov	r7, sl
   1b12c:	e02c      	b.n	1b188 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1b12e:	4638      	mov	r0, r7
   1b130:	f000 ff4f 	bl	1bfd2 <net_buf_simple_tailroom>
   1b134:	4604      	mov	r4, r0
   1b136:	e7ee      	b.n	1b116 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1b138:	4601      	mov	r1, r0
   1b13a:	4630      	mov	r0, r6
   1b13c:	f000 fefd 	bl	1bf3a <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b140:	4630      	mov	r0, r6
   1b142:	f7ff fde9 	bl	1ad18 <net_buf_frags_len>
   1b146:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1b14a:	f105 0708 	add.w	r7, r5, #8
   1b14e:	1a24      	subs	r4, r4, r0
   1b150:	4638      	mov	r0, r7
   1b152:	f000 ff3e 	bl	1bfd2 <net_buf_simple_tailroom>
   1b156:	4284      	cmp	r4, r0
   1b158:	d21a      	bcs.n	1b190 <att_chan_read+0xce>
   1b15a:	4630      	mov	r0, r6
   1b15c:	f7ff fddc 	bl	1ad18 <net_buf_frags_len>
   1b160:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1b164:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1b166:	68a9      	ldr	r1, [r5, #8]
   1b168:	89aa      	ldrh	r2, [r5, #12]
   1b16a:	f8cd 9000 	str.w	r9, [sp]
   1b16e:	f8db 7004 	ldr.w	r7, [fp, #4]
   1b172:	9803      	ldr	r0, [sp, #12]
   1b174:	440a      	add	r2, r1
   1b176:	b2a3      	uxth	r3, r4
   1b178:	4659      	mov	r1, fp
   1b17a:	47b8      	blx	r7
		if (read < 0) {
   1b17c:	1e07      	subs	r7, r0, #0
   1b17e:	da0c      	bge.n	1b19a <att_chan_read+0xd8>
				return total;
   1b180:	f1ba 0f00 	cmp.w	sl, #0
   1b184:	bf18      	it	ne
   1b186:	4657      	movne	r7, sl
}
   1b188:	4638      	mov	r0, r7
   1b18a:	b005      	add	sp, #20
   1b18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b190:	4638      	mov	r0, r7
   1b192:	f000 ff1e 	bl	1bfd2 <net_buf_simple_tailroom>
   1b196:	4604      	mov	r4, r0
   1b198:	e7e5      	b.n	1b166 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1b19a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b19c:	b993      	cbnz	r3, 1b1c4 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1b19e:	4639      	mov	r1, r7
   1b1a0:	f105 0008 	add.w	r0, r5, #8
   1b1a4:	f000 feda 	bl	1bf5c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b1a8:	4630      	mov	r0, r6
   1b1aa:	f7ff fdb5 	bl	1ad18 <net_buf_frags_len>
   1b1ae:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   1b1b2:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b1b4:	4283      	cmp	r3, r0
		total += read;
   1b1b6:	44ba      	add	sl, r7
		offset += read;
   1b1b8:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b1bc:	d9b5      	bls.n	1b12a <att_chan_read+0x68>
   1b1be:	42a7      	cmp	r7, r4
   1b1c0:	d096      	beq.n	1b0f0 <att_chan_read+0x2e>
   1b1c2:	e7b2      	b.n	1b12a <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1b1c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b1c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b1c8:	4639      	mov	r1, r7
   1b1ca:	4628      	mov	r0, r5
   1b1cc:	4798      	blx	r3
   1b1ce:	2800      	cmp	r0, #0
   1b1d0:	d1e5      	bne.n	1b19e <att_chan_read+0xdc>
   1b1d2:	e7aa      	b.n	1b12a <att_chan_read+0x68>
		return 0;
   1b1d4:	2700      	movs	r7, #0
   1b1d6:	e7d7      	b.n	1b188 <att_chan_read+0xc6>

0001b1d8 <sys_slist_find_and_remove.isra.0>:
	return list->head;
   1b1d8:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b1da:	2200      	movs	r2, #0
   1b1dc:	b903      	cbnz	r3, 1b1e0 <sys_slist_find_and_remove.isra.0+0x8>
   1b1de:	4770      	bx	lr
   1b1e0:	428b      	cmp	r3, r1
   1b1e2:	d10f      	bne.n	1b204 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   1b1e4:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b1e6:	b93a      	cbnz	r2, 1b1f8 <sys_slist_find_and_remove.isra.0+0x20>
   1b1e8:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1b1ea:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b1ec:	4291      	cmp	r1, r2
   1b1ee:	d100      	bne.n	1b1f2 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1b1f0:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1b1f2:	2300      	movs	r3, #0
   1b1f4:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b1f6:	4770      	bx	lr
	parent->next = child;
   1b1f8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b1fa:	6843      	ldr	r3, [r0, #4]
   1b1fc:	4299      	cmp	r1, r3
	list->tail = node;
   1b1fe:	bf08      	it	eq
   1b200:	6042      	streq	r2, [r0, #4]
}
   1b202:	e7f6      	b.n	1b1f2 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1b204:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b206:	681b      	ldr	r3, [r3, #0]
   1b208:	e7e8      	b.n	1b1dc <sys_slist_find_and_remove.isra.0+0x4>

0001b20a <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   1b20a:	2006      	movs	r0, #6
   1b20c:	4770      	bx	lr

0001b20e <atomic_test_and_set_bit>:
{
   1b20e:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b210:	2301      	movs	r3, #1
   1b212:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b216:	f3bf 8f5b 	dmb	ish
   1b21a:	e850 3f00 	ldrex	r3, [r0]
   1b21e:	ea43 0201 	orr.w	r2, r3, r1
   1b222:	e840 2400 	strex	r4, r2, [r0]
   1b226:	2c00      	cmp	r4, #0
   1b228:	d1f7      	bne.n	1b21a <atomic_test_and_set_bit+0xc>
   1b22a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1b22e:	4219      	tst	r1, r3
}
   1b230:	bf14      	ite	ne
   1b232:	2001      	movne	r0, #1
   1b234:	2000      	moveq	r0, #0
   1b236:	bd10      	pop	{r4, pc}

0001b238 <read_cb>:
{
   1b238:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   1b23a:	6816      	ldr	r6, [r2, #0]
{
   1b23c:	4605      	mov	r5, r0
	data->err = 0x00;
   1b23e:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1b240:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   1b242:	7313      	strb	r3, [r2, #12]
{
   1b244:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b246:	4629      	mov	r1, r5
   1b248:	2295      	movs	r2, #149	; 0x95
   1b24a:	f000 fc87 	bl	1bb5c <bt_gatt_check_perm>
   1b24e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1b250:	b980      	cbnz	r0, 1b274 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1b252:	e9cd 0000 	strd	r0, r0, [sp]
   1b256:	4629      	mov	r1, r5
   1b258:	88a3      	ldrh	r3, [r4, #4]
   1b25a:	68a2      	ldr	r2, [r4, #8]
   1b25c:	4630      	mov	r0, r6
   1b25e:	f7ff ff30 	bl	1b0c2 <att_chan_read>
	if (ret < 0) {
   1b262:	2800      	cmp	r0, #0
   1b264:	da09      	bge.n	1b27a <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   1b266:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1b26a:	bf26      	itte	cs
   1b26c:	4240      	negcs	r0, r0
   1b26e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1b270:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   1b272:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   1b274:	2000      	movs	r0, #0
}
   1b276:	b002      	add	sp, #8
   1b278:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   1b27a:	2001      	movs	r0, #1
   1b27c:	e7fb      	b.n	1b276 <read_cb+0x3e>

0001b27e <read_vl_cb>:
{
   1b27e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1b282:	f8d2 8000 	ldr.w	r8, [r2]
{
   1b286:	4606      	mov	r6, r0
	data->err = 0x00;
   1b288:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1b28a:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   1b28e:	7313      	strb	r3, [r2, #12]
{
   1b290:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b292:	4631      	mov	r1, r6
   1b294:	2295      	movs	r2, #149	; 0x95
   1b296:	f000 fc61 	bl	1bb5c <bt_gatt_check_perm>
   1b29a:	4605      	mov	r5, r0
   1b29c:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1b29e:	b9e0      	cbnz	r0, 1b2da <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   1b2a0:	68a0      	ldr	r0, [r4, #8]
   1b2a2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1b2a6:	8982      	ldrh	r2, [r0, #12]
   1b2a8:	1a9b      	subs	r3, r3, r2
   1b2aa:	2b01      	cmp	r3, #1
   1b2ac:	dd15      	ble.n	1b2da <read_vl_cb+0x5c>
   1b2ae:	2102      	movs	r1, #2
   1b2b0:	3008      	adds	r0, #8
   1b2b2:	f000 fe53 	bl	1bf5c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1b2b6:	e9cd 5500 	strd	r5, r5, [sp]
   1b2ba:	4607      	mov	r7, r0
   1b2bc:	88a3      	ldrh	r3, [r4, #4]
   1b2be:	68a2      	ldr	r2, [r4, #8]
   1b2c0:	4631      	mov	r1, r6
   1b2c2:	4640      	mov	r0, r8
   1b2c4:	f7ff fefd 	bl	1b0c2 <att_chan_read>
	if (read < 0) {
   1b2c8:	1e03      	subs	r3, r0, #0
   1b2ca:	da0a      	bge.n	1b2e2 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   1b2cc:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1b2d0:	bf26      	itte	cs
   1b2d2:	425b      	negcs	r3, r3
   1b2d4:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1b2d6:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   1b2d8:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   1b2da:	2000      	movs	r0, #0
}
   1b2dc:	b002      	add	sp, #8
   1b2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   1b2e2:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   1b2e4:	2001      	movs	r0, #1
   1b2e6:	e7f9      	b.n	1b2dc <read_vl_cb+0x5e>

0001b2e8 <bt_att_sent>:
{
   1b2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b2ea:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1b2ec:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b2ee:	f100 038c 	add.w	r3, r0, #140	; 0x8c
	struct bt_att *att = chan->att;
   1b2f2:	f850 4c04 	ldr.w	r4, [r0, #-4]
   1b2f6:	f3bf 8f5b 	dmb	ish
   1b2fa:	e853 1f00 	ldrex	r1, [r3]
   1b2fe:	f021 0110 	bic.w	r1, r1, #16
   1b302:	e843 1200 	strex	r2, r1, [r3]
   1b306:	2a00      	cmp	r2, #0
   1b308:	d1f7      	bne.n	1b2fa <bt_att_sent+0x12>
   1b30a:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1b30e:	b30c      	cbz	r4, 1b354 <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1b310:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   1b314:	b98b      	cbnz	r3, 1b33a <bt_att_sent+0x52>
   1b316:	6863      	ldr	r3, [r4, #4]
   1b318:	b17b      	cbz	r3, 1b33a <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1b31a:	1d20      	adds	r0, r4, #4
   1b31c:	f7ff fcf2 	bl	1ad04 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b320:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1b322:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b324:	4638      	mov	r0, r7
   1b326:	f7ff fd28 	bl	1ad7a <chan_req_send>
   1b32a:	2800      	cmp	r0, #0
   1b32c:	da12      	bge.n	1b354 <bt_att_sent+0x6c>
	return list->head;
   1b32e:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1b330:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b332:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1b334:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b336:	b903      	cbnz	r3, 1b33a <bt_att_sent+0x52>
	list->tail = node;
   1b338:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1b33a:	f105 0194 	add.w	r1, r5, #148	; 0x94
   1b33e:	4638      	mov	r0, r7
   1b340:	f7ff fea6 	bl	1b090 <process_queue>
	if (!err) {
   1b344:	b130      	cbz	r0, 1b354 <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   1b346:	f104 010c 	add.w	r1, r4, #12
   1b34a:	4638      	mov	r0, r7
}
   1b34c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1b350:	f7ff be9e 	b.w	1b090 <process_queue>
}
   1b354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b356 <att_req_send_process>:
{
   1b356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   1b35a:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1b35c:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b35e:	2c00      	cmp	r4, #0
   1b360:	d03b      	beq.n	1b3da <att_req_send_process+0x84>
	return node->next;
   1b362:	f854 69e0 	ldr.w	r6, [r4], #-224
   1b366:	b106      	cbz	r6, 1b36a <att_req_send_process+0x14>
   1b368:	3ee0      	subs	r6, #224	; 0xe0
{
   1b36a:	2300      	movs	r3, #0
   1b36c:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   1b36e:	f108 0704 	add.w	r7, r8, #4
   1b372:	e013      	b.n	1b39c <att_req_send_process+0x46>
		if (!req && prev &&
   1b374:	b1c3      	cbz	r3, 1b3a8 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1b376:	2103      	movs	r1, #3
   1b378:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1b37c:	f7ff fcf4 	bl	1ad68 <atomic_test_bit>
   1b380:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1b382:	f103 0090 	add.w	r0, r3, #144	; 0x90
   1b386:	f7ff fcef 	bl	1ad68 <atomic_test_bit>
		if (!req && prev &&
   1b38a:	4282      	cmp	r2, r0
   1b38c:	d10c      	bne.n	1b3a8 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b38e:	b326      	cbz	r6, 1b3da <att_req_send_process+0x84>
   1b390:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
   1b394:	b102      	cbz	r2, 1b398 <att_req_send_process+0x42>
   1b396:	3ae0      	subs	r2, #224	; 0xe0
{
   1b398:	4634      	mov	r4, r6
   1b39a:	4616      	mov	r6, r2
		if (chan->req) {
   1b39c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   1b3a0:	2a00      	cmp	r2, #0
   1b3a2:	d1f4      	bne.n	1b38e <att_req_send_process+0x38>
		if (!req && prev &&
   1b3a4:	2d00      	cmp	r5, #0
   1b3a6:	d0e5      	beq.n	1b374 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   1b3a8:	4638      	mov	r0, r7
   1b3aa:	f7ff fcab 	bl	1ad04 <sys_slist_get>
	if (node) {
   1b3ae:	4605      	mov	r5, r0
   1b3b0:	b908      	cbnz	r0, 1b3b6 <att_req_send_process+0x60>
   1b3b2:	4623      	mov	r3, r4
   1b3b4:	e7eb      	b.n	1b38e <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   1b3b6:	4601      	mov	r1, r0
   1b3b8:	4620      	mov	r0, r4
   1b3ba:	f7ff fcde 	bl	1ad7a <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   1b3be:	2800      	cmp	r0, #0
   1b3c0:	da0b      	bge.n	1b3da <att_req_send_process+0x84>
	return list->head;
   1b3c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   1b3c6:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b3c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   1b3cc:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b3d0:	2b00      	cmp	r3, #0
   1b3d2:	d1ee      	bne.n	1b3b2 <att_req_send_process+0x5c>
	list->tail = node;
   1b3d4:	f8c8 5008 	str.w	r5, [r8, #8]
}
   1b3d8:	e7eb      	b.n	1b3b2 <att_req_send_process+0x5c>
}
   1b3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b3de <bt_att_status>:
{
   1b3de:	b538      	push	{r3, r4, r5, lr}
   1b3e0:	4605      	mov	r5, r0
   1b3e2:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1b3e4:	2100      	movs	r1, #0
   1b3e6:	f7ff fcbf 	bl	1ad68 <atomic_test_bit>
   1b3ea:	b1c0      	cbz	r0, 1b41e <bt_att_status+0x40>
	if (!chan->att) {
   1b3ec:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1b3f0:	b1a8      	cbz	r0, 1b41e <bt_att_status+0x40>
	if (chan->req) {
   1b3f2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   1b3f6:	b993      	cbnz	r3, 1b41e <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1b3f8:	3004      	adds	r0, #4
   1b3fa:	f7ff fc83 	bl	1ad04 <sys_slist_get>
	if (!node) {
   1b3fe:	4604      	mov	r4, r0
   1b400:	b168      	cbz	r0, 1b41e <bt_att_status+0x40>
	return chan_req_send(chan, req);
   1b402:	4601      	mov	r1, r0
   1b404:	1f28      	subs	r0, r5, #4
   1b406:	f7ff fcb8 	bl	1ad7a <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b40a:	2800      	cmp	r0, #0
   1b40c:	da07      	bge.n	1b41e <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1b40e:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   1b412:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1b414:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b416:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1b418:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b41a:	b902      	cbnz	r2, 1b41e <bt_att_status+0x40>
	list->tail = node;
   1b41c:	609c      	str	r4, [r3, #8]
}
   1b41e:	bd38      	pop	{r3, r4, r5, pc}

0001b420 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   1b420:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   1b422:	6883      	ldr	r3, [r0, #8]
   1b424:	699b      	ldr	r3, [r3, #24]
   1b426:	b10b      	cbz	r3, 1b42c <att_sent+0xc>
		chan->ops->sent(chan);
   1b428:	3004      	adds	r0, #4
   1b42a:	4718      	bx	r3
}
   1b42c:	4770      	bx	lr

0001b42e <att_unknown>:
{
   1b42e:	b510      	push	{r4, lr}
   1b430:	460c      	mov	r4, r1
	if (!err) {
   1b432:	b90a      	cbnz	r2, 1b438 <att_unknown+0xa>
		att_sent(conn, user_data);
   1b434:	f7ff fff4 	bl	1b420 <att_sent>
	tx_meta_data_free(user_data);
   1b438:	4620      	mov	r0, r4
}
   1b43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1b43e:	f7f8 ba83 	b.w	13948 <tx_meta_data_free>

0001b442 <att_tx_complete>:
{
   1b442:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b446:	4606      	mov	r6, r0
   1b448:	460d      	mov	r5, r1
	if (!err) {
   1b44a:	4614      	mov	r4, r2
   1b44c:	b122      	cbz	r2, 1b458 <att_tx_complete+0x16>
}
   1b44e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   1b452:	4608      	mov	r0, r1
   1b454:	f7f8 ba78 	b.w	13948 <tx_meta_data_free>
		att_sent(conn, user_data);
   1b458:	f7ff ffe2 	bl	1b420 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   1b45c:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   1b45e:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   1b462:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   1b466:	4628      	mov	r0, r5
   1b468:	f7f8 fa6e 	bl	13948 <tx_meta_data_free>
	if (!err && func) {
   1b46c:	b92f      	cbnz	r7, 1b47a <att_tx_complete+0x38>
}
   1b46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   1b472:	4649      	mov	r1, r9
   1b474:	4630      	mov	r0, r6
   1b476:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   1b478:	3401      	adds	r4, #1
   1b47a:	b2a3      	uxth	r3, r4
   1b47c:	4543      	cmp	r3, r8
   1b47e:	d3f8      	bcc.n	1b472 <att_tx_complete+0x30>
   1b480:	e7f5      	b.n	1b46e <att_tx_complete+0x2c>

0001b482 <att_req_sent>:
{
   1b482:	b510      	push	{r4, lr}
   1b484:	460c      	mov	r4, r1
	if (!err) {
   1b486:	b90a      	cbnz	r2, 1b48c <att_req_sent+0xa>
		att_sent(conn, user_data);
   1b488:	f7ff ffca 	bl	1b420 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   1b48c:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   1b48e:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1b492:	b12b      	cbz	r3, 1b4a0 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1b494:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1b498:	2300      	movs	r3, #0
   1b49a:	30b0      	adds	r0, #176	; 0xb0
   1b49c:	f7fc ff18 	bl	182d0 <k_work_reschedule>
	tx_meta_data_free(user_data);
   1b4a0:	4620      	mov	r0, r4
}
   1b4a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1b4a6:	f7f8 ba4f 	b.w	13948 <tx_meta_data_free>

0001b4aa <att_cfm_sent>:
{
   1b4aa:	b510      	push	{r4, lr}
   1b4ac:	460c      	mov	r4, r1
	if (!err) {
   1b4ae:	b90a      	cbnz	r2, 1b4b4 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   1b4b0:	f7ff ffb6 	bl	1b420 <att_sent>
   1b4b4:	6823      	ldr	r3, [r4, #0]
   1b4b6:	f3bf 8f5b 	dmb	ish
   1b4ba:	3390      	adds	r3, #144	; 0x90
   1b4bc:	e853 1f00 	ldrex	r1, [r3]
   1b4c0:	f021 0102 	bic.w	r1, r1, #2
   1b4c4:	e843 1200 	strex	r2, r1, [r3]
   1b4c8:	2a00      	cmp	r2, #0
   1b4ca:	d1f7      	bne.n	1b4bc <att_cfm_sent+0x12>
   1b4cc:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   1b4d0:	4620      	mov	r0, r4
}
   1b4d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1b4d6:	f7f8 ba37 	b.w	13948 <tx_meta_data_free>

0001b4da <att_rsp_sent>:
{
   1b4da:	b510      	push	{r4, lr}
   1b4dc:	460c      	mov	r4, r1
	if (!err) {
   1b4de:	b90a      	cbnz	r2, 1b4e4 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   1b4e0:	f7ff ff9e 	bl	1b420 <att_sent>
   1b4e4:	6823      	ldr	r3, [r4, #0]
   1b4e6:	f3bf 8f5b 	dmb	ish
   1b4ea:	3390      	adds	r3, #144	; 0x90
   1b4ec:	e853 1f00 	ldrex	r1, [r3]
   1b4f0:	f021 0101 	bic.w	r1, r1, #1
   1b4f4:	e843 1200 	strex	r2, r1, [r3]
   1b4f8:	2a00      	cmp	r2, #0
   1b4fa:	d1f7      	bne.n	1b4ec <att_rsp_sent+0x12>
   1b4fc:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   1b500:	4620      	mov	r0, r4
}
   1b502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1b506:	f7f8 ba1f 	b.w	13948 <tx_meta_data_free>

0001b50a <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1b50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b50e:	4688      	mov	r8, r1
   1b510:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1b512:	2101      	movs	r1, #1
   1b514:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1b516:	4605      	mov	r5, r0
   1b518:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1b51a:	f7f8 fb99 	bl	13c50 <bt_att_chan_create_pdu>
	if (!buf) {
   1b51e:	4604      	mov	r4, r0
   1b520:	b170      	cbz	r0, 1b540 <send_err_rsp.part.0+0x36>
   1b522:	2104      	movs	r1, #4
   1b524:	3008      	adds	r0, #8
   1b526:	f000 fd19 	bl	1bf5c <net_buf_simple_add>
	rsp->request = req;
   1b52a:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   1b52e:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   1b532:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   1b534:	4621      	mov	r1, r4
   1b536:	4628      	mov	r0, r5
}
   1b538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   1b53c:	f7ff bc73 	b.w	1ae26 <bt_att_chan_send_rsp>
}
   1b540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b544 <att_write_req>:
{
   1b544:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b546:	460c      	mov	r4, r1
   1b548:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1b54a:	f101 0008 	add.w	r0, r1, #8
   1b54e:	f000 fd34 	bl	1bfba <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1b552:	89a2      	ldrh	r2, [r4, #12]
   1b554:	9201      	str	r2, [sp, #4]
   1b556:	68a2      	ldr	r2, [r4, #8]
   1b558:	9200      	str	r2, [sp, #0]
   1b55a:	4603      	mov	r3, r0
   1b55c:	2213      	movs	r2, #19
   1b55e:	2112      	movs	r1, #18
   1b560:	4628      	mov	r0, r5
   1b562:	f7f8 fc15 	bl	13d90 <att_write_rsp.constprop.0>
}
   1b566:	b003      	add	sp, #12
   1b568:	bd30      	pop	{r4, r5, pc}

0001b56a <att_write_cmd>:
{
   1b56a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b56c:	460c      	mov	r4, r1
   1b56e:	4605      	mov	r5, r0
   1b570:	f101 0008 	add.w	r0, r1, #8
   1b574:	f000 fd21 	bl	1bfba <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1b578:	89a2      	ldrh	r2, [r4, #12]
   1b57a:	9201      	str	r2, [sp, #4]
   1b57c:	68a2      	ldr	r2, [r4, #8]
   1b57e:	9200      	str	r2, [sp, #0]
   1b580:	2200      	movs	r2, #0
   1b582:	4603      	mov	r3, r0
   1b584:	4611      	mov	r1, r2
   1b586:	4628      	mov	r0, r5
   1b588:	f7f8 fc02 	bl	13d90 <att_write_rsp.constprop.0>
}
   1b58c:	b003      	add	sp, #12
   1b58e:	bd30      	pop	{r4, r5, pc}

0001b590 <bt_att_create_pdu>:
{
   1b590:	b538      	push	{r3, r4, r5, lr}
   1b592:	460d      	mov	r5, r1
   1b594:	4614      	mov	r4, r2
	att = att_get(conn);
   1b596:	f7ff fbd9 	bl	1ad4c <att_get>
	if (!att) {
   1b59a:	b158      	cbz	r0, 1b5b4 <bt_att_create_pdu+0x24>
	return list->head;
   1b59c:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b59e:	b14b      	cbz	r3, 1b5b4 <bt_att_create_pdu+0x24>
   1b5a0:	4618      	mov	r0, r3
	return node->next;
   1b5a2:	f850 39e0 	ldr.w	r3, [r0], #-224
   1b5a6:	b103      	cbz	r3, 1b5aa <bt_att_create_pdu+0x1a>
   1b5a8:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b5aa:	1c62      	adds	r2, r4, #1
   1b5ac:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1b5ae:	428a      	cmp	r2, r1
   1b5b0:	d90c      	bls.n	1b5cc <bt_att_create_pdu+0x3c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b5b2:	b90b      	cbnz	r3, 1b5b8 <bt_att_create_pdu+0x28>
}
   1b5b4:	2000      	movs	r0, #0
   1b5b6:	bd38      	pop	{r3, r4, r5, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b5b8:	4618      	mov	r0, r3
   1b5ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1b5be:	2b00      	cmp	r3, #0
   1b5c0:	d0f4      	beq.n	1b5ac <bt_att_create_pdu+0x1c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b5c2:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1b5c4:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b5c6:	f1a3 03e0 	sub.w	r3, r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b5ca:	d8f5      	bhi.n	1b5b8 <bt_att_create_pdu+0x28>
		return bt_att_chan_create_pdu(chan, op, len);
   1b5cc:	4622      	mov	r2, r4
   1b5ce:	4629      	mov	r1, r5
}
   1b5d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1b5d4:	f7f8 bb3c 	b.w	13c50 <bt_att_chan_create_pdu>

0001b5d8 <att_read_blob_req>:
{
   1b5d8:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1b5da:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1b5dc:	8813      	ldrh	r3, [r2, #0]
   1b5de:	8852      	ldrh	r2, [r2, #2]
   1b5e0:	9200      	str	r2, [sp, #0]
   1b5e2:	210c      	movs	r1, #12
   1b5e4:	220d      	movs	r2, #13
   1b5e6:	f7f8 fd5d 	bl	140a4 <att_read_rsp>
}
   1b5ea:	b003      	add	sp, #12
   1b5ec:	f85d fb04 	ldr.w	pc, [sp], #4

0001b5f0 <att_read_req>:
{
   1b5f0:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1b5f2:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1b5f4:	2200      	movs	r2, #0
   1b5f6:	881b      	ldrh	r3, [r3, #0]
   1b5f8:	9200      	str	r2, [sp, #0]
   1b5fa:	210a      	movs	r1, #10
   1b5fc:	220b      	movs	r2, #11
   1b5fe:	f7f8 fd51 	bl	140a4 <att_read_rsp>
}
   1b602:	b003      	add	sp, #12
   1b604:	f85d fb04 	ldr.w	pc, [sp], #4

0001b608 <att_mtu_req>:
{
   1b608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b60a:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1b60c:	f850 2b90 	ldr.w	r2, [r0], #144
{
   1b610:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1b612:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   1b614:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1b616:	f7ff fba7 	bl	1ad68 <atomic_test_bit>
   1b61a:	4604      	mov	r4, r0
   1b61c:	b9d8      	cbnz	r0, 1b656 <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1b61e:	689b      	ldr	r3, [r3, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1b620:	881b      	ldrh	r3, [r3, #0]
   1b622:	2b16      	cmp	r3, #22
   1b624:	d919      	bls.n	1b65a <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1b626:	4630      	mov	r0, r6
   1b628:	2202      	movs	r2, #2
   1b62a:	f7ff ffb1 	bl	1b590 <bt_att_create_pdu>
	if (!pdu) {
   1b62e:	4606      	mov	r6, r0
   1b630:	b1a8      	cbz	r0, 1b65e <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   1b632:	2102      	movs	r1, #2
   1b634:	3008      	adds	r0, #8
   1b636:	f000 fc91 	bl	1bf5c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1b63a:	2717      	movs	r7, #23
   1b63c:	7007      	strb	r7, [r0, #0]
   1b63e:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   1b640:	4631      	mov	r1, r6
   1b642:	4628      	mov	r0, r5
   1b644:	f7ff fbef 	bl	1ae26 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   1b648:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1b64a:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1b64c:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   1b64e:	f7ff fc8c 	bl	1af6a <att_chan_mtu_updated>
	return 0;
   1b652:	4620      	mov	r0, r4
}
   1b654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1b656:	2006      	movs	r0, #6
   1b658:	e7fc      	b.n	1b654 <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   1b65a:	2004      	movs	r0, #4
   1b65c:	e7fa      	b.n	1b654 <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   1b65e:	200e      	movs	r0, #14
   1b660:	e7f8      	b.n	1b654 <att_mtu_req+0x4c>

0001b662 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b662:	898a      	ldrh	r2, [r1, #12]
   1b664:	6889      	ldr	r1, [r1, #8]
   1b666:	2300      	movs	r3, #0
   1b668:	f7f8 beca 	b.w	14400 <att_handle_rsp>

0001b66c <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   1b66c:	38ac      	subs	r0, #172	; 0xac
   1b66e:	f7f8 beff 	b.w	14470 <bt_att_disconnected>

0001b672 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   1b672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b674:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1b676:	f7ff fb69 	bl	1ad4c <att_get>
	if (!att) {
   1b67a:	4604      	mov	r4, r0
   1b67c:	b940      	cbnz	r0, 1b690 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b67e:	6968      	ldr	r0, [r5, #20]
   1b680:	f7f8 f962 	bl	13948 <tx_meta_data_free>
		net_buf_unref(buf);
   1b684:	4628      	mov	r0, r5
   1b686:	f7f9 fd0b 	bl	150a0 <net_buf_unref>
		return -ENOTCONN;
   1b68a:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1b68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   1b690:	f100 060c 	add.w	r6, r0, #12
   1b694:	4629      	mov	r1, r5
   1b696:	4630      	mov	r0, r6
   1b698:	f000 fc2d 	bl	1bef6 <net_buf_put>
	return list->head;
   1b69c:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b69e:	b14d      	cbz	r5, 1b6b4 <bt_att_send+0x42>
	return node->next;
   1b6a0:	f855 49e0 	ldr.w	r4, [r5], #-224
   1b6a4:	b104      	cbz	r4, 1b6a8 <bt_att_send+0x36>
   1b6a6:	3ce0      	subs	r4, #224	; 0xe0
		err = process_queue(chan, &att->tx_queue);
   1b6a8:	4631      	mov	r1, r6
   1b6aa:	4628      	mov	r0, r5
   1b6ac:	f7ff fcf0 	bl	1b090 <process_queue>
		if (!err) {
   1b6b0:	4603      	mov	r3, r0
   1b6b2:	b980      	cbnz	r0, 1b6d6 <bt_att_send+0x64>
	return 0;
   1b6b4:	2000      	movs	r0, #0
   1b6b6:	e7ea      	b.n	1b68e <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1b6b8:	2103      	movs	r1, #3
   1b6ba:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1b6be:	f7ff fb53 	bl	1ad68 <atomic_test_bit>
   1b6c2:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1b6c4:	f105 0090 	add.w	r0, r5, #144	; 0x90
   1b6c8:	f7ff fb4e 	bl	1ad68 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1b6cc:	4287      	cmp	r7, r0
   1b6ce:	f06f 0301 	mvn.w	r3, #1
   1b6d2:	d107      	bne.n	1b6e4 <bt_att_send+0x72>
   1b6d4:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b6d6:	2c00      	cmp	r4, #0
   1b6d8:	d0ec      	beq.n	1b6b4 <bt_att_send+0x42>
   1b6da:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   1b6de:	b922      	cbnz	r2, 1b6ea <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   1b6e0:	3302      	adds	r3, #2
   1b6e2:	d0e9      	beq.n	1b6b8 <bt_att_send+0x46>
{
   1b6e4:	4625      	mov	r5, r4
   1b6e6:	4614      	mov	r4, r2
   1b6e8:	e7de      	b.n	1b6a8 <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b6ea:	3ae0      	subs	r2, #224	; 0xe0
   1b6ec:	e7f8      	b.n	1b6e0 <bt_att_send+0x6e>

0001b6ee <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1b6ee:	b510      	push	{r4, lr}
   1b6f0:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1b6f2:	f7ff fb2b 	bl	1ad4c <att_get>
	if (!att) {
   1b6f6:	b160      	cbz	r0, 1b712 <bt_att_req_send+0x24>
	parent->next = child;
   1b6f8:	2300      	movs	r3, #0
   1b6fa:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b6fc:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1b6fe:	b92b      	cbnz	r3, 1b70c <bt_att_req_send+0x1e>
	list->head = node;
   1b700:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1b704:	f7ff fe27 	bl	1b356 <att_req_send_process>

	return 0;
   1b708:	2000      	movs	r0, #0
}
   1b70a:	bd10      	pop	{r4, pc}
	parent->next = child;
   1b70c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b70e:	6084      	str	r4, [r0, #8]
}
   1b710:	e7f8      	b.n	1b704 <bt_att_req_send+0x16>
		return -ENOTCONN;
   1b712:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b716:	e7f8      	b.n	1b70a <bt_att_req_send+0x1c>

0001b718 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   1b718:	2001      	movs	r0, #1
   1b71a:	4770      	bx	lr

0001b71c <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   1b71c:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   1b71e:	f7ff fb15 	bl	1ad4c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   1b722:	b198      	cbz	r0, 1b74c <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   1b724:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1b726:	b18b      	cbz	r3, 1b74c <bt_att_clear_out_of_sync_sent+0x30>
   1b728:	f3bf 8f5b 	dmb	ish
   1b72c:	3be0      	subs	r3, #224	; 0xe0
   1b72e:	f103 0290 	add.w	r2, r3, #144	; 0x90
   1b732:	e852 0f00 	ldrex	r0, [r2]
   1b736:	f020 0020 	bic.w	r0, r0, #32
   1b73a:	e842 0100 	strex	r1, r0, [r2]
   1b73e:	2900      	cmp	r1, #0
   1b740:	d1f7      	bne.n	1b732 <bt_att_clear_out_of_sync_sent+0x16>
   1b742:	f3bf 8f5b 	dmb	ish
	return node->next;
   1b746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1b74a:	e7ec      	b.n	1b726 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   1b74c:	bd08      	pop	{r3, pc}

0001b74e <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   1b74e:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1b750:	2104      	movs	r1, #4
   1b752:	f7ff fab1 	bl	1acb8 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   1b756:	b128      	cbz	r0, 1b764 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   1b758:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   1b75c:	2105      	movs	r1, #5
   1b75e:	308c      	adds	r0, #140	; 0x8c
   1b760:	f7ff bb02 	b.w	1ad68 <atomic_test_bit>
}
   1b764:	bd08      	pop	{r3, pc}

0001b766 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1b766:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   1b768:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   1b76c:	2201      	movs	r2, #1
   1b76e:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   1b770:	7403      	strb	r3, [r0, #16]
}
   1b772:	4770      	bx	lr

0001b774 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1b774:	6010      	str	r0, [r2, #0]
}
   1b776:	2000      	movs	r0, #0
   1b778:	4770      	bx	lr

0001b77a <gatt_ccc_changed>:
{
   1b77a:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1b77c:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1b77e:	895a      	ldrh	r2, [r3, #10]
   1b780:	428a      	cmp	r2, r1
   1b782:	d003      	beq.n	1b78c <gatt_ccc_changed+0x12>
		ccc->value = value;
   1b784:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1b786:	68db      	ldr	r3, [r3, #12]
   1b788:	b103      	cbz	r3, 1b78c <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1b78a:	4718      	bx	r3
}
   1b78c:	4770      	bx	lr

0001b78e <gatt_indicate_rsp>:
{
   1b78e:	b510      	push	{r4, lr}
   1b790:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1b792:	68a3      	ldr	r3, [r4, #8]
{
   1b794:	460a      	mov	r2, r1
	if (params->func) {
   1b796:	b10b      	cbz	r3, 1b79c <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1b798:	4621      	mov	r1, r4
   1b79a:	4798      	blx	r3
	params->_ref--;
   1b79c:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1b79e:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1b7a0:	3b01      	subs	r3, #1
   1b7a2:	b2db      	uxtb	r3, r3
   1b7a4:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1b7a6:	b122      	cbz	r2, 1b7b2 <gatt_indicate_rsp+0x24>
   1b7a8:	b91b      	cbnz	r3, 1b7b2 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1b7aa:	4620      	mov	r0, r4
}
   1b7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1b7b0:	4710      	bx	r2
}
   1b7b2:	bd10      	pop	{r4, pc}

0001b7b4 <match_uuid>:
	data->attr = attr;
   1b7b4:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1b7b6:	8091      	strh	r1, [r2, #4]
}
   1b7b8:	2000      	movs	r0, #0
   1b7ba:	4770      	bx	lr

0001b7bc <gen_hash_m>:
{
   1b7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1b7be:	6807      	ldr	r7, [r0, #0]
   1b7c0:	783d      	ldrb	r5, [r7, #0]
{
   1b7c2:	b089      	sub	sp, #36	; 0x24
   1b7c4:	4606      	mov	r6, r0
   1b7c6:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1b7c8:	b9dd      	cbnz	r5, 1b802 <gen_hash_m+0x46>
	switch (u16->val) {
   1b7ca:	887b      	ldrh	r3, [r7, #2]
   1b7cc:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1b7d0:	d004      	beq.n	1b7dc <gen_hash_m+0x20>
   1b7d2:	d810      	bhi.n	1b7f6 <gen_hash_m+0x3a>
   1b7d4:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1b7d8:	2b03      	cmp	r3, #3
   1b7da:	d812      	bhi.n	1b802 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   1b7dc:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b7e0:	2202      	movs	r2, #2
   1b7e2:	f10d 010a 	add.w	r1, sp, #10
   1b7e6:	4620      	mov	r0, r4
   1b7e8:	f7fe fba2 	bl	19f30 <tc_cmac_update>
   1b7ec:	b968      	cbnz	r0, 1b80a <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   1b7ee:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   1b7f2:	65a2      	str	r2, [r4, #88]	; 0x58
   1b7f4:	e006      	b.n	1b804 <gen_hash_m+0x48>
	switch (u16->val) {
   1b7f6:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1b7fa:	33ff      	adds	r3, #255	; 0xff
   1b7fc:	b29b      	uxth	r3, r3
   1b7fe:	2b04      	cmp	r3, #4
   1b800:	d91e      	bls.n	1b840 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   1b802:	2501      	movs	r5, #1
}
   1b804:	4628      	mov	r0, r5
   1b806:	b009      	add	sp, #36	; 0x24
   1b808:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   1b80a:	887b      	ldrh	r3, [r7, #2]
   1b80c:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b810:	2202      	movs	r2, #2
   1b812:	f10d 010a 	add.w	r1, sp, #10
   1b816:	4620      	mov	r0, r4
   1b818:	f7fe fb8a 	bl	19f30 <tc_cmac_update>
   1b81c:	2800      	cmp	r0, #0
   1b81e:	d0e6      	beq.n	1b7ee <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1b820:	2000      	movs	r0, #0
   1b822:	9000      	str	r0, [sp, #0]
   1b824:	aa03      	add	r2, sp, #12
   1b826:	6877      	ldr	r7, [r6, #4]
   1b828:	2313      	movs	r3, #19
   1b82a:	4631      	mov	r1, r6
   1b82c:	47b8      	blx	r7
		if (len < 0) {
   1b82e:	1e02      	subs	r2, r0, #0
   1b830:	dbdf      	blt.n	1b7f2 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   1b832:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b834:	4620      	mov	r0, r4
   1b836:	f7fe fb7b 	bl	19f30 <tc_cmac_update>
   1b83a:	2800      	cmp	r0, #0
   1b83c:	d1e1      	bne.n	1b802 <gen_hash_m+0x46>
   1b83e:	e7d6      	b.n	1b7ee <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   1b840:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b844:	2202      	movs	r2, #2
   1b846:	f10d 010a 	add.w	r1, sp, #10
   1b84a:	4620      	mov	r0, r4
   1b84c:	f7fe fb70 	bl	19f30 <tc_cmac_update>
   1b850:	2800      	cmp	r0, #0
   1b852:	d0cc      	beq.n	1b7ee <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   1b854:	887b      	ldrh	r3, [r7, #2]
   1b856:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b85a:	2202      	movs	r2, #2
   1b85c:	f10d 010a 	add.w	r1, sp, #10
   1b860:	e7e8      	b.n	1b834 <gen_hash_m+0x78>

0001b862 <bt_addr_le_eq>:
{
   1b862:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1b864:	2207      	movs	r2, #7
   1b866:	f001 fcac 	bl	1d1c2 <memcmp>
}
   1b86a:	fab0 f080 	clz	r0, r0
   1b86e:	0940      	lsrs	r0, r0, #5
   1b870:	bd08      	pop	{r3, pc}

0001b872 <bt_addr_le_copy>:
   1b872:	680b      	ldr	r3, [r1, #0]
   1b874:	6003      	str	r3, [r0, #0]
   1b876:	888b      	ldrh	r3, [r1, #4]
   1b878:	8083      	strh	r3, [r0, #4]
   1b87a:	798b      	ldrb	r3, [r1, #6]
   1b87c:	7183      	strb	r3, [r0, #6]
}
   1b87e:	4770      	bx	lr

0001b880 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   1b880:	2300      	movs	r3, #0
   1b882:	6003      	str	r3, [r0, #0]
   1b884:	6043      	str	r3, [r0, #4]
   1b886:	6083      	str	r3, [r0, #8]
}
   1b888:	4770      	bx	lr

0001b88a <sc_clear>:
{
   1b88a:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b88c:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   1b890:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b892:	4629      	mov	r1, r5
   1b894:	7a00      	ldrb	r0, [r0, #8]
   1b896:	f7fe febc 	bl	1a612 <bt_addr_le_is_bonded>
   1b89a:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1b89c:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1b89e:	f7f8 fe63 	bl	14568 <find_sc_cfg>
		if (cfg) {
   1b8a2:	b118      	cbz	r0, 1b8ac <sc_clear+0x22>
}
   1b8a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   1b8a8:	f7ff bfea 	b.w	1b880 <clear_sc_cfg>
}
   1b8ac:	bd38      	pop	{r3, r4, r5, pc}

0001b8ae <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   1b8ae:	b538      	push	{r3, r4, r5, lr}
   1b8b0:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   1b8b4:	4294      	cmp	r4, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   1b8b6:	4615      	mov	r5, r2
	if (offset > value_len) {
   1b8b8:	d30a      	bcc.n	1b8d0 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   1b8ba:	1aa4      	subs	r4, r4, r2
   1b8bc:	428c      	cmp	r4, r1
   1b8be:	bfa8      	it	ge
   1b8c0:	460c      	movge	r4, r1
   1b8c2:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b8c4:	4622      	mov	r2, r4
   1b8c6:	1959      	adds	r1, r3, r5
   1b8c8:	f001 fc8b 	bl	1d1e2 <memcpy>
}
   1b8cc:	4620      	mov	r0, r4
   1b8ce:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b8d0:	f06f 0406 	mvn.w	r4, #6
   1b8d4:	e7fa      	b.n	1b8cc <bt_gatt_attr_read.constprop.0+0x1e>

0001b8d6 <bt_gatt_attr_read_ccc>:
{
   1b8d6:	b530      	push	{r4, r5, lr}
   1b8d8:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   1b8da:	68c9      	ldr	r1, [r1, #12]
{
   1b8dc:	4614      	mov	r4, r2
   1b8de:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   1b8e0:	f7f8 fe52 	bl	14588 <find_ccc_cfg>
	if (cfg) {
   1b8e4:	b100      	cbz	r0, 1b8e8 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   1b8e6:	8900      	ldrh	r0, [r0, #8]
   1b8e8:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1b8ec:	2302      	movs	r3, #2
   1b8ee:	9300      	str	r3, [sp, #0]
   1b8f0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1b8f4:	f10d 030e 	add.w	r3, sp, #14
   1b8f8:	4629      	mov	r1, r5
   1b8fa:	4620      	mov	r0, r4
   1b8fc:	f7ff ffd7 	bl	1b8ae <bt_gatt_attr_read.constprop.0>
}
   1b900:	b005      	add	sp, #20
   1b902:	bd30      	pop	{r4, r5, pc}

0001b904 <bt_gatt_attr_read_service>:
{
   1b904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1b906:	460c      	mov	r4, r1
   1b908:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   1b90a:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   1b90c:	781c      	ldrb	r4, [r3, #0]
{
   1b90e:	4610      	mov	r0, r2
   1b910:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1b914:	b13c      	cbz	r4, 1b926 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1b916:	2410      	movs	r4, #16
   1b918:	3301      	adds	r3, #1
   1b91a:	9406      	str	r4, [sp, #24]
}
   1b91c:	b004      	add	sp, #16
   1b91e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1b922:	f7ff bfc4 	b.w	1b8ae <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1b926:	885b      	ldrh	r3, [r3, #2]
   1b928:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1b92c:	2302      	movs	r3, #2
   1b92e:	9300      	str	r3, [sp, #0]
   1b930:	f10d 030e 	add.w	r3, sp, #14
   1b934:	f7ff ffbb 	bl	1b8ae <bt_gatt_attr_read.constprop.0>
}
   1b938:	b004      	add	sp, #16
   1b93a:	bd10      	pop	{r4, pc}

0001b93c <cf_read>:
{
   1b93c:	b530      	push	{r4, r5, lr}
   1b93e:	b085      	sub	sp, #20
   1b940:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   1b942:	2300      	movs	r3, #0
{
   1b944:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   1b946:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   1b94a:	f7f8 fdf5 	bl	14538 <find_cf_cfg>
	if (cfg) {
   1b94e:	b110      	cbz	r0, 1b956 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   1b950:	7a03      	ldrb	r3, [r0, #8]
   1b952:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1b956:	2301      	movs	r3, #1
   1b958:	9300      	str	r3, [sp, #0]
   1b95a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1b95e:	ab03      	add	r3, sp, #12
   1b960:	4629      	mov	r1, r5
   1b962:	4620      	mov	r0, r4
   1b964:	f7ff ffa3 	bl	1b8ae <bt_gatt_attr_read.constprop.0>
}
   1b968:	b005      	add	sp, #20
   1b96a:	bd30      	pop	{r4, r5, pc}

0001b96c <read_name>:
{
   1b96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b970:	4614      	mov	r4, r2
   1b972:	461d      	mov	r5, r3
   1b974:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   1b978:	f7f6 fe0a 	bl	12590 <bt_get_name>
   1b97c:	4606      	mov	r6, r0
				 strlen(name));
   1b97e:	f7f0 f8f1 	bl	bb64 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1b982:	b280      	uxth	r0, r0
   1b984:	9006      	str	r0, [sp, #24]
   1b986:	4633      	mov	r3, r6
   1b988:	463a      	mov	r2, r7
   1b98a:	4629      	mov	r1, r5
   1b98c:	4620      	mov	r0, r4
}
   1b98e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1b992:	f7ff bf8c 	b.w	1b8ae <bt_gatt_attr_read.constprop.0>

0001b996 <read_appearance>:
{
   1b996:	b530      	push	{r4, r5, lr}
   1b998:	b085      	sub	sp, #20
   1b99a:	4614      	mov	r4, r2
   1b99c:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1b99e:	f7fe fe36 	bl	1a60e <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1b9a2:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1b9a4:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1b9a8:	9300      	str	r3, [sp, #0]
   1b9aa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1b9ae:	f10d 030e 	add.w	r3, sp, #14
   1b9b2:	4629      	mov	r1, r5
   1b9b4:	4620      	mov	r0, r4
   1b9b6:	f7ff ff7a 	bl	1b8ae <bt_gatt_attr_read.constprop.0>
}
   1b9ba:	b005      	add	sp, #20
   1b9bc:	bd30      	pop	{r4, r5, pc}

0001b9be <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1b9be:	2a02      	cmp	r2, #2
{
   1b9c0:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1b9c2:	d108      	bne.n	1b9d6 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1b9c4:	2300      	movs	r3, #0
   1b9c6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1b9ca:	461a      	mov	r2, r3
   1b9cc:	7a00      	ldrb	r0, [r0, #8]
   1b9ce:	f7f8 fe6d 	bl	146ac <sc_save>
}
   1b9d2:	2002      	movs	r0, #2
   1b9d4:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1b9d6:	f7ff ff58 	bl	1b88a <sc_clear>
   1b9da:	e7fa      	b.n	1b9d2 <sc_ccc_cfg_write+0x14>

0001b9dc <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b9dc:	2301      	movs	r3, #1
   1b9de:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b9e0:	f3bf 8f5b 	dmb	ish
   1b9e4:	e850 2f00 	ldrex	r2, [r0]
   1b9e8:	431a      	orrs	r2, r3
   1b9ea:	e840 2100 	strex	r1, r2, [r0]
   1b9ee:	2900      	cmp	r1, #0
   1b9f0:	d1f8      	bne.n	1b9e4 <atomic_set_bit+0x8>
   1b9f2:	f3bf 8f5b 	dmb	ish
}
   1b9f6:	4770      	bx	lr

0001b9f8 <cf_write>:
{
   1b9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b9fc:	461f      	mov	r7, r3
   1b9fe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1ba02:	2b01      	cmp	r3, #1
{
   1ba04:	4606      	mov	r6, r0
   1ba06:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1ba08:	d82e      	bhi.n	1ba68 <cf_write+0x70>
	if (offset + len > sizeof(cfg->data)) {
   1ba0a:	443b      	add	r3, r7
   1ba0c:	2b01      	cmp	r3, #1
   1ba0e:	463d      	mov	r5, r7
   1ba10:	dc2d      	bgt.n	1ba6e <cf_write+0x76>
	cfg = find_cf_cfg(conn);
   1ba12:	f7f8 fd91 	bl	14538 <find_cf_cfg>
	if (!cfg) {
   1ba16:	4604      	mov	r4, r0
   1ba18:	b918      	cbnz	r0, 1ba22 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1ba1a:	f7f8 fd8d 	bl	14538 <find_cf_cfg>
	if (!cfg) {
   1ba1e:	4604      	mov	r4, r0
   1ba20:	b340      	cbz	r0, 1ba74 <cf_write+0x7c>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1ba22:	b197      	cbz	r7, 1ba4a <cf_write+0x52>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1ba24:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1ba26:	f898 2000 	ldrb.w	r2, [r8]
   1ba2a:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1ba2c:	fa21 f003 	lsr.w	r0, r1, r3
   1ba30:	07c7      	lsls	r7, r0, #31
   1ba32:	d503      	bpl.n	1ba3c <cf_write+0x44>
		    !(value[i / 8] & BIT(i % 8))) {
   1ba34:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1ba38:	07c0      	lsls	r0, r0, #31
   1ba3a:	d51e      	bpl.n	1ba7a <cf_write+0x82>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1ba3c:	3301      	adds	r3, #1
   1ba3e:	2b03      	cmp	r3, #3
   1ba40:	d1f4      	bne.n	1ba2c <cf_write+0x34>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1ba42:	f002 0207 	and.w	r2, r2, #7
   1ba46:	4311      	orrs	r1, r2
   1ba48:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1ba4a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1ba4e:	1c60      	adds	r0, r4, #1
   1ba50:	f7ff ff0f 	bl	1b872 <bt_addr_le_copy>
	cfg->id = conn->id;
   1ba54:	4620      	mov	r0, r4
   1ba56:	7a33      	ldrb	r3, [r6, #8]
   1ba58:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1ba5c:	2100      	movs	r1, #0
   1ba5e:	f7ff ffbd 	bl	1b9dc <atomic_set_bit>
}
   1ba62:	4628      	mov	r0, r5
   1ba64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ba68:	f06f 0506 	mvn.w	r5, #6
   1ba6c:	e7f9      	b.n	1ba62 <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1ba6e:	f06f 050c 	mvn.w	r5, #12
   1ba72:	e7f6      	b.n	1ba62 <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1ba74:	f06f 0510 	mvn.w	r5, #16
   1ba78:	e7f3      	b.n	1ba62 <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1ba7a:	f06f 0512 	mvn.w	r5, #18
   1ba7e:	e7f0      	b.n	1ba62 <cf_write+0x6a>

0001ba80 <sc_restore_rsp>:
{
   1ba80:	b538      	push	{r3, r4, r5, lr}
   1ba82:	4604      	mov	r4, r0
   1ba84:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   1ba86:	f7ff fe47 	bl	1b718 <bt_att_fixed_chan_only>
   1ba8a:	b150      	cbz	r0, 1baa2 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   1ba8c:	4620      	mov	r0, r4
   1ba8e:	f7f8 fd53 	bl	14538 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1ba92:	b130      	cbz	r0, 1baa2 <sc_restore_rsp+0x22>
   1ba94:	7a03      	ldrb	r3, [r0, #8]
   1ba96:	07db      	lsls	r3, r3, #31
   1ba98:	d503      	bpl.n	1baa2 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1ba9a:	2100      	movs	r1, #0
   1ba9c:	300c      	adds	r0, #12
   1ba9e:	f7ff ff9d 	bl	1b9dc <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   1baa2:	b935      	cbnz	r5, 1bab2 <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1baa4:	7a20      	ldrb	r0, [r4, #8]
   1baa6:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1baaa:	f7f8 fd5d 	bl	14568 <find_sc_cfg>
		if (sc_cfg) {
   1baae:	b100      	cbz	r0, 1bab2 <sc_restore_rsp+0x32>
__ssp_bos_icheck3(memset, void *, int)
   1bab0:	6085      	str	r5, [r0, #8]
}
   1bab2:	bd38      	pop	{r3, r4, r5, pc}

0001bab4 <bt_gatt_attr_value_handle>:
{
   1bab4:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1bab6:	4604      	mov	r4, r0
   1bab8:	b910      	cbnz	r0, 1bac0 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1baba:	2000      	movs	r0, #0
}
   1babc:	b002      	add	sp, #8
   1babe:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1bac0:	2300      	movs	r3, #0
   1bac2:	f88d 3004 	strb.w	r3, [sp, #4]
   1bac6:	6800      	ldr	r0, [r0, #0]
   1bac8:	f642 0303 	movw	r3, #10243	; 0x2803
   1bacc:	a901      	add	r1, sp, #4
   1bace:	f8ad 3006 	strh.w	r3, [sp, #6]
   1bad2:	f7fe faff 	bl	1a0d4 <bt_uuid_cmp>
   1bad6:	2800      	cmp	r0, #0
   1bad8:	d1ef      	bne.n	1baba <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1bada:	68e3      	ldr	r3, [r4, #12]
   1badc:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1bade:	2800      	cmp	r0, #0
   1bae0:	d1ec      	bne.n	1babc <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1bae2:	4620      	mov	r0, r4
   1bae4:	f7f8 fedc 	bl	148a0 <bt_gatt_attr_get_handle>
   1bae8:	3001      	adds	r0, #1
   1baea:	b280      	uxth	r0, r0
	return handle;
   1baec:	e7e6      	b.n	1babc <bt_gatt_attr_value_handle+0x8>

0001baee <bt_gatt_attr_read_chrc>:
{
   1baee:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1baf0:	68cc      	ldr	r4, [r1, #12]
{
   1baf2:	b088      	sub	sp, #32
   1baf4:	4608      	mov	r0, r1
   1baf6:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   1baf8:	79a3      	ldrb	r3, [r4, #6]
   1bafa:	f88d 300c 	strb.w	r3, [sp, #12]
{
   1bafe:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1bb00:	f7ff ffd8 	bl	1bab4 <bt_gatt_attr_value_handle>
   1bb04:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1bb08:	6824      	ldr	r4, [r4, #0]
   1bb0a:	7823      	ldrb	r3, [r4, #0]
   1bb0c:	b96b      	cbnz	r3, 1bb2a <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1bb0e:	8863      	ldrh	r3, [r4, #2]
   1bb10:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   1bb14:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1bb16:	9300      	str	r3, [sp, #0]
   1bb18:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   1bb1c:	ab03      	add	r3, sp, #12
   1bb1e:	4631      	mov	r1, r6
   1bb20:	4628      	mov	r0, r5
   1bb22:	f7ff fec4 	bl	1b8ae <bt_gatt_attr_read.constprop.0>
}
   1bb26:	b008      	add	sp, #32
   1bb28:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1bb2a:	1c63      	adds	r3, r4, #1
   1bb2c:	f10d 020f 	add.w	r2, sp, #15
   1bb30:	3411      	adds	r4, #17
   1bb32:	f853 1b04 	ldr.w	r1, [r3], #4
   1bb36:	f842 1b04 	str.w	r1, [r2], #4
   1bb3a:	42a3      	cmp	r3, r4
   1bb3c:	d1f9      	bne.n	1bb32 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   1bb3e:	2313      	movs	r3, #19
   1bb40:	e7e9      	b.n	1bb16 <bt_gatt_attr_read_chrc+0x28>

0001bb42 <bt_gatt_foreach_attr>:
{
   1bb42:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1bb44:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1bb48:	2300      	movs	r3, #0
   1bb4a:	9300      	str	r3, [sp, #0]
   1bb4c:	461a      	mov	r2, r3
   1bb4e:	f7f8 fed7 	bl	14900 <bt_gatt_foreach_attr_type>
}
   1bb52:	b005      	add	sp, #20
   1bb54:	f85d fb04 	ldr.w	pc, [sp], #4

0001bb58 <db_hash_process>:
	db_hash_gen(true);
   1bb58:	f7f8 bf2c 	b.w	149b4 <db_hash_gen.constprop.0>

0001bb5c <bt_gatt_check_perm>:
{
   1bb5c:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1bb5e:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1bb60:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1bb62:	d504      	bpl.n	1bb6e <bt_gatt_check_perm+0x12>
   1bb64:	f013 0f95 	tst.w	r3, #149	; 0x95
   1bb68:	d01d      	beq.n	1bba6 <bt_gatt_check_perm+0x4a>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1bb6a:	684c      	ldr	r4, [r1, #4]
   1bb6c:	b1dc      	cbz	r4, 1bba6 <bt_gatt_check_perm+0x4a>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1bb6e:	0794      	lsls	r4, r2, #30
   1bb70:	d504      	bpl.n	1bb7c <bt_gatt_check_perm+0x20>
   1bb72:	f413 7f95 	tst.w	r3, #298	; 0x12a
   1bb76:	d018      	beq.n	1bbaa <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1bb78:	6889      	ldr	r1, [r1, #8]
   1bb7a:	b1b1      	cbz	r1, 1bbaa <bt_gatt_check_perm+0x4e>
	mask &= attr->perm;
   1bb7c:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   1bb80:	f414 7fc0 	tst.w	r4, #384	; 0x180
   1bb84:	d001      	beq.n	1bb8a <bt_gatt_check_perm+0x2e>
			return BT_ATT_ERR_AUTHENTICATION;
   1bb86:	2005      	movs	r0, #5
}
   1bb88:	bd10      	pop	{r4, pc}
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1bb8a:	f014 0f30 	tst.w	r4, #48	; 0x30
   1bb8e:	d105      	bne.n	1bb9c <bt_gatt_check_perm+0x40>
	return 0;
   1bb90:	f014 0f0c 	tst.w	r4, #12
   1bb94:	bf14      	ite	ne
   1bb96:	200f      	movne	r0, #15
   1bb98:	2000      	moveq	r0, #0
   1bb9a:	e7f5      	b.n	1bb88 <bt_gatt_check_perm+0x2c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1bb9c:	f7fe ffa8 	bl	1aaf0 <bt_conn_get_security>
   1bba0:	2802      	cmp	r0, #2
   1bba2:	d8f5      	bhi.n	1bb90 <bt_gatt_check_perm+0x34>
   1bba4:	e7ef      	b.n	1bb86 <bt_gatt_check_perm+0x2a>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1bba6:	2002      	movs	r0, #2
   1bba8:	e7ee      	b.n	1bb88 <bt_gatt_check_perm+0x2c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1bbaa:	2003      	movs	r0, #3
   1bbac:	e7ec      	b.n	1bb88 <bt_gatt_check_perm+0x2c>

0001bbae <bt_gatt_is_subscribed>:
{
   1bbae:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1bbb2:	7a83      	ldrb	r3, [r0, #10]
   1bbb4:	2b07      	cmp	r3, #7
{
   1bbb6:	4605      	mov	r5, r0
   1bbb8:	460c      	mov	r4, r1
   1bbba:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1bbbc:	d110      	bne.n	1bbe0 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1bbbe:	2300      	movs	r3, #0
   1bbc0:	f88d 300c 	strb.w	r3, [sp, #12]
   1bbc4:	6820      	ldr	r0, [r4, #0]
   1bbc6:	f642 0303 	movw	r3, #10243	; 0x2803
   1bbca:	a903      	add	r1, sp, #12
   1bbcc:	f8ad 300e 	strh.w	r3, [sp, #14]
   1bbd0:	f7fe fa80 	bl	1a0d4 <bt_uuid_cmp>
   1bbd4:	b960      	cbnz	r0, 1bbf0 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   1bbd6:	68e3      	ldr	r3, [r4, #12]
   1bbd8:	799b      	ldrb	r3, [r3, #6]
   1bbda:	f013 0f30 	tst.w	r3, #48	; 0x30
   1bbde:	d103      	bne.n	1bbe8 <bt_gatt_is_subscribed+0x3a>
		return false;
   1bbe0:	2000      	movs	r0, #0
}
   1bbe2:	b004      	add	sp, #16
   1bbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1bbe8:	4620      	mov	r0, r4
   1bbea:	f7f8 ff57 	bl	14a9c <bt_gatt_attr_next>
   1bbee:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1bbf0:	2300      	movs	r3, #0
   1bbf2:	6820      	ldr	r0, [r4, #0]
   1bbf4:	f88d 300c 	strb.w	r3, [sp, #12]
   1bbf8:	a903      	add	r1, sp, #12
   1bbfa:	f642 1302 	movw	r3, #10498	; 0x2902
   1bbfe:	f8ad 300e 	strh.w	r3, [sp, #14]
   1bc02:	f7fe fa67 	bl	1a0d4 <bt_uuid_cmp>
   1bc06:	b118      	cbz	r0, 1bc10 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   1bc08:	4620      	mov	r0, r4
   1bc0a:	f7f8 ff47 	bl	14a9c <bt_gatt_attr_next>
   1bc0e:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1bc10:	2600      	movs	r6, #0
   1bc12:	f642 1802 	movw	r8, #10498	; 0x2902
   1bc16:	6820      	ldr	r0, [r4, #0]
   1bc18:	f88d 6000 	strb.w	r6, [sp]
   1bc1c:	4669      	mov	r1, sp
   1bc1e:	f8ad 8002 	strh.w	r8, [sp, #2]
   1bc22:	f7fe fa57 	bl	1a0d4 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1bc26:	b9d8      	cbnz	r0, 1bc60 <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1bc28:	2300      	movs	r3, #0
   1bc2a:	6820      	ldr	r0, [r4, #0]
   1bc2c:	f88d 300c 	strb.w	r3, [sp, #12]
   1bc30:	a903      	add	r1, sp, #12
   1bc32:	f642 1302 	movw	r3, #10498	; 0x2902
   1bc36:	f8ad 300e 	strh.w	r3, [sp, #14]
   1bc3a:	f7fe fa4b 	bl	1a0d4 <bt_uuid_cmp>
   1bc3e:	2800      	cmp	r0, #0
   1bc40:	d1ce      	bne.n	1bbe0 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   1bc42:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1bc44:	4622      	mov	r2, r4
   1bc46:	4628      	mov	r0, r5
   1bc48:	f812 1b01 	ldrb.w	r1, [r2], #1
   1bc4c:	f7fe ff52 	bl	1aaf4 <bt_conn_is_peer_addr_le>
   1bc50:	2800      	cmp	r0, #0
   1bc52:	d0c5      	beq.n	1bbe0 <bt_gatt_is_subscribed+0x32>
   1bc54:	8923      	ldrh	r3, [r4, #8]
   1bc56:	421f      	tst	r7, r3
   1bc58:	bf14      	ite	ne
   1bc5a:	2001      	movne	r0, #1
   1bc5c:	2000      	moveq	r0, #0
   1bc5e:	e7c0      	b.n	1bbe2 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1bc60:	6820      	ldr	r0, [r4, #0]
   1bc62:	f88d 6004 	strb.w	r6, [sp, #4]
   1bc66:	f642 0303 	movw	r3, #10243	; 0x2803
   1bc6a:	a901      	add	r1, sp, #4
   1bc6c:	f8ad 3006 	strh.w	r3, [sp, #6]
   1bc70:	f7fe fa30 	bl	1a0d4 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1bc74:	2800      	cmp	r0, #0
   1bc76:	d0d7      	beq.n	1bc28 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1bc78:	6820      	ldr	r0, [r4, #0]
   1bc7a:	f88d 6008 	strb.w	r6, [sp, #8]
   1bc7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1bc82:	a902      	add	r1, sp, #8
   1bc84:	f8ad 300a 	strh.w	r3, [sp, #10]
   1bc88:	f7fe fa24 	bl	1a0d4 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1bc8c:	2800      	cmp	r0, #0
   1bc8e:	d0cb      	beq.n	1bc28 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1bc90:	6820      	ldr	r0, [r4, #0]
   1bc92:	f88d 600c 	strb.w	r6, [sp, #12]
   1bc96:	f642 0301 	movw	r3, #10241	; 0x2801
   1bc9a:	a903      	add	r1, sp, #12
   1bc9c:	f8ad 300e 	strh.w	r3, [sp, #14]
   1bca0:	f7fe fa18 	bl	1a0d4 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1bca4:	2800      	cmp	r0, #0
   1bca6:	d0bf      	beq.n	1bc28 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   1bca8:	4620      	mov	r0, r4
   1bcaa:	f7f8 fef7 	bl	14a9c <bt_gatt_attr_next>
		if (!attr) {
   1bcae:	4604      	mov	r4, r0
   1bcb0:	2800      	cmp	r0, #0
   1bcb2:	d1b0      	bne.n	1bc16 <bt_gatt_is_subscribed+0x68>
   1bcb4:	e794      	b.n	1bbe0 <bt_gatt_is_subscribed+0x32>

0001bcb6 <gatt_notify>:
{
   1bcb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bcba:	4614      	mov	r4, r2
   1bcbc:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1bcbe:	2294      	movs	r2, #148	; 0x94
   1bcc0:	6861      	ldr	r1, [r4, #4]
{
   1bcc2:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1bcc4:	f7ff ff4a 	bl	1bb5c <bt_gatt_check_perm>
   1bcc8:	bb58      	cbnz	r0, 1bd22 <gatt_notify+0x6c>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1bcca:	6861      	ldr	r1, [r4, #4]
   1bccc:	2201      	movs	r2, #1
   1bcce:	4630      	mov	r0, r6
   1bcd0:	f7ff ff6d 	bl	1bbae <bt_gatt_is_subscribed>
   1bcd4:	b348      	cbz	r0, 1bd2a <gatt_notify+0x74>
				sizeof(*nfy) + params->len);
   1bcd6:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1bcd8:	211b      	movs	r1, #27
   1bcda:	3202      	adds	r2, #2
   1bcdc:	4630      	mov	r0, r6
   1bcde:	f7ff fc57 	bl	1b590 <bt_att_create_pdu>
	if (!buf) {
   1bce2:	4605      	mov	r5, r0
   1bce4:	b320      	cbz	r0, 1bd30 <gatt_notify+0x7a>
   1bce6:	f100 0908 	add.w	r9, r0, #8
   1bcea:	2102      	movs	r1, #2
   1bcec:	4648      	mov	r0, r9
   1bcee:	f000 f935 	bl	1bf5c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1bcf2:	4607      	mov	r7, r0
   1bcf4:	4648      	mov	r0, r9
   1bcf6:	f827 8b02 	strh.w	r8, [r7], #2
   1bcfa:	89a1      	ldrh	r1, [r4, #12]
   1bcfc:	f000 f92e 	bl	1bf5c <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1bd00:	89a2      	ldrh	r2, [r4, #12]
   1bd02:	68a1      	ldr	r1, [r4, #8]
   1bd04:	4638      	mov	r0, r7
   1bd06:	f001 fa6c 	bl	1d1e2 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1bd0a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1bd0e:	4628      	mov	r0, r5
   1bd10:	2301      	movs	r3, #1
   1bd12:	f7ff fd28 	bl	1b766 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1bd16:	4629      	mov	r1, r5
   1bd18:	4630      	mov	r0, r6
}
   1bd1a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1bd1e:	f7ff bca8 	b.w	1b672 <bt_att_send>
		return -EPERM;
   1bd22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1bd26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   1bd2a:	f06f 0015 	mvn.w	r0, #21
   1bd2e:	e7fa      	b.n	1bd26 <gatt_notify+0x70>
		return -ENOMEM;
   1bd30:	f06f 000b 	mvn.w	r0, #11
   1bd34:	e7f7      	b.n	1bd26 <gatt_notify+0x70>

0001bd36 <bt_gatt_change_aware>:
{
   1bd36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bd38:	4606      	mov	r6, r0
   1bd3a:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   1bd3c:	f7f8 fbfc 	bl	14538 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1bd40:	b318      	cbz	r0, 1bd8a <bt_gatt_change_aware+0x54>
   1bd42:	7a03      	ldrb	r3, [r0, #8]
   1bd44:	07db      	lsls	r3, r3, #31
   1bd46:	d520      	bpl.n	1bd8a <bt_gatt_change_aware+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bd48:	f3bf 8f5b 	dmb	ish
   1bd4c:	68c5      	ldr	r5, [r0, #12]
   1bd4e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1bd52:	f015 0501 	ands.w	r5, r5, #1
   1bd56:	f100 040c 	add.w	r4, r0, #12
   1bd5a:	d116      	bne.n	1bd8a <bt_gatt_change_aware+0x54>
	if (!req) {
   1bd5c:	b1b7      	cbz	r7, 1bd8c <bt_gatt_change_aware+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bd5e:	f3bf 8f5b 	dmb	ish
   1bd62:	e854 1f00 	ldrex	r1, [r4]
   1bd66:	f021 0302 	bic.w	r3, r1, #2
   1bd6a:	e844 3200 	strex	r2, r3, [r4]
   1bd6e:	2a00      	cmp	r2, #0
   1bd70:	d1f7      	bne.n	1bd62 <bt_gatt_change_aware+0x2c>
   1bd72:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1bd76:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   1bd7a:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1bd7c:	d008      	beq.n	1bd90 <bt_gatt_change_aware+0x5a>
		bt_att_clear_out_of_sync_sent(conn);
   1bd7e:	f7ff fccd 	bl	1b71c <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1bd82:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1bd84:	4620      	mov	r0, r4
   1bd86:	f7ff fe29 	bl	1b9dc <atomic_set_bit>
		return true;
   1bd8a:	2501      	movs	r5, #1
}
   1bd8c:	4628      	mov	r0, r5
   1bd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   1bd90:	f7ff fcc2 	bl	1b718 <bt_att_fixed_chan_only>
   1bd94:	2800      	cmp	r0, #0
   1bd96:	d0f9      	beq.n	1bd8c <bt_gatt_change_aware+0x56>
   1bd98:	4630      	mov	r0, r6
   1bd9a:	f7ff fcd8 	bl	1b74e <bt_att_out_of_sync_sent_on_fixed>
   1bd9e:	2800      	cmp	r0, #0
   1bda0:	d0f4      	beq.n	1bd8c <bt_gatt_change_aware+0x56>
   1bda2:	f3bf 8f5b 	dmb	ish
   1bda6:	e854 3f00 	ldrex	r3, [r4]
   1bdaa:	f023 0302 	bic.w	r3, r3, #2
   1bdae:	e844 3200 	strex	r2, r3, [r4]
   1bdb2:	2a00      	cmp	r2, #0
   1bdb4:	d1f7      	bne.n	1bda6 <bt_gatt_change_aware+0x70>
   1bdb6:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   1bdba:	4630      	mov	r0, r6
   1bdbc:	f7ff fcae 	bl	1b71c <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1bdc0:	4639      	mov	r1, r7
   1bdc2:	e7df      	b.n	1bd84 <bt_gatt_change_aware+0x4e>

0001bdc4 <bt_smp_recv>:
{
   1bdc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1bdc6:	2100      	movs	r1, #0
   1bdc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bdcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   1bdd0:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1bdd2:	4608      	mov	r0, r1
   1bdd4:	f7fe ff23 	bl	1ac1e <bt_l2cap_create_pdu_timeout>
   1bdd8:	f100 0608 	add.w	r6, r0, #8
   1bddc:	4604      	mov	r4, r0
   1bdde:	2101      	movs	r1, #1
   1bde0:	4630      	mov	r0, r6
   1bde2:	f000 f8bb 	bl	1bf5c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1bde6:	2505      	movs	r5, #5
   1bde8:	7005      	strb	r5, [r0, #0]
   1bdea:	2101      	movs	r1, #1
   1bdec:	4630      	mov	r0, r6
   1bdee:	f000 f8b5 	bl	1bf5c <net_buf_simple_add>
   1bdf2:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1bdf4:	7005      	strb	r5, [r0, #0]
   1bdf6:	4622      	mov	r2, r4
   1bdf8:	9300      	str	r3, [sp, #0]
   1bdfa:	2106      	movs	r1, #6
   1bdfc:	4638      	mov	r0, r7
   1bdfe:	f7fe ff11 	bl	1ac24 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1be02:	b110      	cbz	r0, 1be0a <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1be04:	4620      	mov	r0, r4
   1be06:	f7f9 f94b 	bl	150a0 <net_buf_unref>
}
   1be0a:	2000      	movs	r0, #0
   1be0c:	b003      	add	sp, #12
   1be0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001be10 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   1be10:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1be14:	4770      	bx	lr

0001be16 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1be16:	2000      	movs	r0, #0
   1be18:	4770      	bx	lr

0001be1a <fixed_data_unref>:
}
   1be1a:	4770      	bx	lr

0001be1c <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1be1c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1be1e:	6849      	ldr	r1, [r1, #4]
   1be20:	6809      	ldr	r1, [r1, #0]
   1be22:	f7f9 b8ab 	b.w	14f7c <net_buf_alloc_len>

0001be26 <net_buf_get>:
{
   1be26:	b570      	push	{r4, r5, r6, lr}
   1be28:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1be2a:	f7fc f80b 	bl	17e44 <z_impl_k_queue_get>
	if (!buf) {
   1be2e:	4605      	mov	r5, r0
   1be30:	b128      	cbz	r0, 1be3e <net_buf_get+0x18>
   1be32:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1be34:	7963      	ldrb	r3, [r4, #5]
   1be36:	f013 0301 	ands.w	r3, r3, #1
   1be3a:	d102      	bne.n	1be42 <net_buf_get+0x1c>
	frag->frags = NULL;
   1be3c:	6023      	str	r3, [r4, #0]
}
   1be3e:	4628      	mov	r0, r5
   1be40:	bd70      	pop	{r4, r5, r6, pc}
   1be42:	2300      	movs	r3, #0
   1be44:	2200      	movs	r2, #0
   1be46:	4630      	mov	r0, r6
   1be48:	f7fb fffc 	bl	17e44 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1be4c:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1be4e:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1be50:	f023 0301 	bic.w	r3, r3, #1
   1be54:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1be56:	4604      	mov	r4, r0
   1be58:	e7ec      	b.n	1be34 <net_buf_get+0xe>

0001be5a <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1be5a:	6883      	ldr	r3, [r0, #8]
   1be5c:	440b      	add	r3, r1
   1be5e:	6003      	str	r3, [r0, #0]
}
   1be60:	4770      	bx	lr

0001be62 <net_buf_slist_put>:
{
   1be62:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1be64:	460b      	mov	r3, r1
   1be66:	681c      	ldr	r4, [r3, #0]
   1be68:	b98c      	cbnz	r4, 1be8e <net_buf_slist_put+0x2c>
	__asm__ volatile(
   1be6a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1be6e:	f3ef 8411 	mrs	r4, BASEPRI
   1be72:	f382 8812 	msr	BASEPRI_MAX, r2
   1be76:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   1be7a:	b119      	cbz	r1, 1be84 <net_buf_slist_put+0x22>
	return list->tail;
   1be7c:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   1be7e:	b962      	cbnz	r2, 1be9a <net_buf_slist_put+0x38>
	list->head = node;
   1be80:	6001      	str	r1, [r0, #0]
	list->tail = node;
   1be82:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1be84:	f384 8811 	msr	BASEPRI, r4
   1be88:	f3bf 8f6f 	isb	sy
}
   1be8c:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   1be8e:	795a      	ldrb	r2, [r3, #5]
   1be90:	f042 0201 	orr.w	r2, r2, #1
   1be94:	715a      	strb	r2, [r3, #5]
   1be96:	4623      	mov	r3, r4
   1be98:	e7e5      	b.n	1be66 <net_buf_slist_put+0x4>
	parent->next = child;
   1be9a:	6011      	str	r1, [r2, #0]
}
   1be9c:	e7f1      	b.n	1be82 <net_buf_slist_put+0x20>

0001be9e <net_buf_slist_get>:
{
   1be9e:	b570      	push	{r4, r5, r6, lr}
   1bea0:	4603      	mov	r3, r0
	__asm__ volatile(
   1bea2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1bea6:	f3ef 8511 	mrs	r5, BASEPRI
   1beaa:	f382 8812 	msr	BASEPRI_MAX, r2
   1beae:	f3bf 8f6f 	isb	sy
	return list->head;
   1beb2:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1beb4:	b158      	cbz	r0, 1bece <net_buf_slist_get+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1beb6:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1beb8:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1beba:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bebc:	4288      	cmp	r0, r1
	list->tail = node;
   1bebe:	bf08      	it	eq
   1bec0:	605a      	streq	r2, [r3, #4]
   1bec2:	4602      	mov	r2, r0
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1bec4:	7951      	ldrb	r1, [r2, #5]
   1bec6:	f011 0101 	ands.w	r1, r1, #1
   1beca:	d105      	bne.n	1bed8 <net_buf_slist_get+0x3a>
		frag->frags = NULL;
   1becc:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   1bece:	f385 8811 	msr	BASEPRI, r5
   1bed2:	f3bf 8f6f 	isb	sy
}
   1bed6:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   1bed8:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET(slist, snode)
   1beda:	b129      	cbz	r1, 1bee8 <net_buf_slist_get+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bedc:	685e      	ldr	r6, [r3, #4]
	return node->next;
   1bede:	680c      	ldr	r4, [r1, #0]
	list->head = node;
   1bee0:	601c      	str	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bee2:	42b1      	cmp	r1, r6
	list->tail = node;
   1bee4:	bf08      	it	eq
   1bee6:	605c      	streq	r4, [r3, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   1bee8:	7954      	ldrb	r4, [r2, #5]
			frag->frags = (void *)sys_slist_get(list);
   1beea:	6011      	str	r1, [r2, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   1beec:	f024 0401 	bic.w	r4, r4, #1
   1bef0:	7154      	strb	r4, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1bef2:	460a      	mov	r2, r1
   1bef4:	e7e6      	b.n	1bec4 <net_buf_slist_get+0x26>

0001bef6 <net_buf_put>:
{
   1bef6:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1bef8:	460a      	mov	r2, r1
   1befa:	6814      	ldr	r4, [r2, #0]
   1befc:	b914      	cbnz	r4, 1bf04 <net_buf_put+0xe>
}
   1befe:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1bf00:	f000 bd0f 	b.w	1c922 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1bf04:	7953      	ldrb	r3, [r2, #5]
   1bf06:	f043 0301 	orr.w	r3, r3, #1
   1bf0a:	7153      	strb	r3, [r2, #5]
   1bf0c:	4622      	mov	r2, r4
   1bf0e:	e7f4      	b.n	1befa <net_buf_put+0x4>

0001bf10 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1bf10:	7902      	ldrb	r2, [r0, #4]
   1bf12:	3201      	adds	r2, #1
   1bf14:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1bf16:	4770      	bx	lr

0001bf18 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1bf18:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1bf1a:	4618      	mov	r0, r3
   1bf1c:	681b      	ldr	r3, [r3, #0]
   1bf1e:	2b00      	cmp	r3, #0
   1bf20:	d1fb      	bne.n	1bf1a <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1bf22:	4770      	bx	lr

0001bf24 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1bf24:	6802      	ldr	r2, [r0, #0]
{
   1bf26:	b510      	push	{r4, lr}
	if (parent->frags) {
   1bf28:	b12a      	cbz	r2, 1bf36 <net_buf_frag_insert+0x12>
   1bf2a:	460b      	mov	r3, r1
	while (buf->frags) {
   1bf2c:	461c      	mov	r4, r3
   1bf2e:	681b      	ldr	r3, [r3, #0]
   1bf30:	2b00      	cmp	r3, #0
   1bf32:	d1fb      	bne.n	1bf2c <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1bf34:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1bf36:	6001      	str	r1, [r0, #0]
}
   1bf38:	bd10      	pop	{r4, pc}

0001bf3a <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1bf3a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1bf3c:	4604      	mov	r4, r0
   1bf3e:	b920      	cbnz	r0, 1bf4a <net_buf_frag_add+0x10>
	buf->ref++;
   1bf40:	790b      	ldrb	r3, [r1, #4]
   1bf42:	3301      	adds	r3, #1
   1bf44:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1bf46:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1bf48:	bd10      	pop	{r4, pc}
   1bf4a:	4603      	mov	r3, r0
	while (buf->frags) {
   1bf4c:	4618      	mov	r0, r3
   1bf4e:	681b      	ldr	r3, [r3, #0]
   1bf50:	2b00      	cmp	r3, #0
   1bf52:	d1fb      	bne.n	1bf4c <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1bf54:	f7ff ffe6 	bl	1bf24 <net_buf_frag_insert>
   1bf58:	4620      	mov	r0, r4
   1bf5a:	e7f5      	b.n	1bf48 <net_buf_frag_add+0xe>

0001bf5c <net_buf_simple_add>:
	return buf->data + buf->len;
   1bf5c:	8883      	ldrh	r3, [r0, #4]
   1bf5e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1bf60:	4419      	add	r1, r3
   1bf62:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1bf64:	18d0      	adds	r0, r2, r3
   1bf66:	4770      	bx	lr

0001bf68 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1bf68:	b430      	push	{r4, r5}
   1bf6a:	8884      	ldrh	r4, [r0, #4]
   1bf6c:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1bf6e:	18a3      	adds	r3, r4, r2
   1bf70:	8083      	strh	r3, [r0, #4]
   1bf72:	1928      	adds	r0, r5, r4
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   1bf74:	bc30      	pop	{r4, r5}
   1bf76:	f001 b934 	b.w	1d1e2 <memcpy>

0001bf7a <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1bf7a:	b510      	push	{r4, lr}
   1bf7c:	8883      	ldrh	r3, [r0, #4]
   1bf7e:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   1bf80:	1c5c      	adds	r4, r3, #1
   1bf82:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1bf84:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1bf86:	18d0      	adds	r0, r2, r3
   1bf88:	bd10      	pop	{r4, pc}

0001bf8a <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1bf8a:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1bf8c:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1bf8e:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1bf90:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1bf92:	4411      	add	r1, r2
	buf->data -= len;
   1bf94:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1bf96:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1bf98:	4770      	bx	lr

0001bf9a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1bf9a:	8882      	ldrh	r2, [r0, #4]
   1bf9c:	1a52      	subs	r2, r2, r1
{
   1bf9e:	4603      	mov	r3, r0
	buf->len -= len;
   1bfa0:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1bfa2:	6800      	ldr	r0, [r0, #0]
   1bfa4:	4408      	add	r0, r1
   1bfa6:	6018      	str	r0, [r3, #0]
}
   1bfa8:	4770      	bx	lr

0001bfaa <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1bfaa:	4603      	mov	r3, r0
	void *data = buf->data;
   1bfac:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1bfae:	889a      	ldrh	r2, [r3, #4]
   1bfb0:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1bfb2:	4401      	add	r1, r0
	buf->len -= len;
   1bfb4:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1bfb6:	6019      	str	r1, [r3, #0]

	return data;
}
   1bfb8:	4770      	bx	lr

0001bfba <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1bfba:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1bfbc:	6803      	ldr	r3, [r0, #0]
   1bfbe:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1bfc0:	2102      	movs	r1, #2
   1bfc2:	f7ff ffea 	bl	1bf9a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1bfc6:	4620      	mov	r0, r4
   1bfc8:	bd10      	pop	{r4, pc}

0001bfca <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1bfca:	6802      	ldr	r2, [r0, #0]
   1bfcc:	6880      	ldr	r0, [r0, #8]
}
   1bfce:	1a10      	subs	r0, r2, r0
   1bfd0:	4770      	bx	lr

0001bfd2 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1bfd2:	8883      	ldrh	r3, [r0, #4]
   1bfd4:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   1bfd6:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1bfd8:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1bfda:	6803      	ldr	r3, [r0, #0]
   1bfdc:	1a5b      	subs	r3, r3, r1
}
   1bfde:	1ad0      	subs	r0, r2, r3
   1bfe0:	4770      	bx	lr

0001bfe2 <adc_context_on_timer_expired>:
{
   1bfe2:	b410      	push	{r4}
   1bfe4:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1bfe6:	3808      	subs	r0, #8
   1bfe8:	f3bf 8f5b 	dmb	ish
   1bfec:	e850 2f00 	ldrex	r2, [r0]
   1bff0:	1c51      	adds	r1, r2, #1
   1bff2:	e840 1400 	strex	r4, r1, [r0]
   1bff6:	2c00      	cmp	r4, #0
   1bff8:	d1f8      	bne.n	1bfec <adc_context_on_timer_expired+0xa>
   1bffa:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   1bffe:	b912      	cbnz	r2, 1c006 <adc_context_on_timer_expired+0x24>
}
   1c000:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   1c002:	f7f9 b88b 	b.w	1511c <adc_context_start_sampling>
		ctx->status = -EBUSY;
   1c006:	f06f 020f 	mvn.w	r2, #15
}
   1c00a:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   1c00c:	669a      	str	r2, [r3, #104]	; 0x68
}
   1c00e:	4770      	bx	lr

0001c010 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1c010:	6903      	ldr	r3, [r0, #16]
   1c012:	b2c9      	uxtb	r1, r1
   1c014:	220c      	movs	r2, #12
   1c016:	fb01 3302 	mla	r3, r1, r2, r3
   1c01a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1c01c:	f000 0007 	and.w	r0, r0, #7
   1c020:	4770      	bx	lr

0001c022 <set_on_state>:
	__asm__ volatile(
   1c022:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c026:	f3ef 8211 	mrs	r2, BASEPRI
   1c02a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c02e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1c032:	6803      	ldr	r3, [r0, #0]
   1c034:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c038:	f043 0302 	orr.w	r3, r3, #2
   1c03c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1c03e:	f382 8811 	msr	BASEPRI, r2
   1c042:	f3bf 8f6f 	isb	sy
}
   1c046:	4770      	bx	lr

0001c048 <stop>:
{
   1c048:	b570      	push	{r4, r5, r6, lr}
   1c04a:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   1c04c:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   1c04e:	f04f 0440 	mov.w	r4, #64	; 0x40
   1c052:	f3ef 8511 	mrs	r5, BASEPRI
   1c056:	f384 8812 	msr	BASEPRI_MAX, r4
   1c05a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1c05e:	260c      	movs	r6, #12
   1c060:	fb06 3401 	mla	r4, r6, r1, r3
   1c064:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1c066:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1c06a:	d008      	beq.n	1c07e <stop+0x36>
   1c06c:	42a2      	cmp	r2, r4
   1c06e:	d006      	beq.n	1c07e <stop+0x36>
	__asm__ volatile(
   1c070:	f385 8811 	msr	BASEPRI, r5
   1c074:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1c078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c07c:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1c07e:	fb06 3301 	mla	r3, r6, r1, r3
   1c082:	2201      	movs	r2, #1
   1c084:	641a      	str	r2, [r3, #64]	; 0x40
   1c086:	f385 8811 	msr	BASEPRI, r5
   1c08a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1c08e:	6843      	ldr	r3, [r0, #4]
   1c090:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1c094:	685b      	ldr	r3, [r3, #4]
   1c096:	4798      	blx	r3
	return 0;
   1c098:	2000      	movs	r0, #0
   1c09a:	e7ef      	b.n	1c07c <stop+0x34>

0001c09c <api_stop>:
	return stop(dev, subsys, CTX_API);
   1c09c:	2280      	movs	r2, #128	; 0x80
   1c09e:	f7ff bfd3 	b.w	1c048 <stop>

0001c0a2 <async_start>:
{
   1c0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c0a4:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1c0a6:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1c0a8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1c0aa:	f04f 0540 	mov.w	r5, #64	; 0x40
   1c0ae:	f3ef 8611 	mrs	r6, BASEPRI
   1c0b2:	f385 8812 	msr	BASEPRI_MAX, r5
   1c0b6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1c0ba:	250c      	movs	r5, #12
   1c0bc:	fb05 4401 	mla	r4, r5, r1, r4
   1c0c0:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1c0c2:	f005 0c07 	and.w	ip, r5, #7
   1c0c6:	f1bc 0f01 	cmp.w	ip, #1
   1c0ca:	d10c      	bne.n	1c0e6 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1c0cc:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   1c0ce:	f386 8811 	msr	BASEPRI, r6
   1c0d2:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   1c0d6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1c0da:	6843      	ldr	r3, [r0, #4]
   1c0dc:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   1c0e0:	4798      	blx	r3
	return 0;
   1c0e2:	2000      	movs	r0, #0
}
   1c0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1c0e6:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1c0ea:	42af      	cmp	r7, r5
   1c0ec:	f386 8811 	msr	BASEPRI, r6
   1c0f0:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   1c0f4:	bf0c      	ite	eq
   1c0f6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   1c0fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1c0fe:	e7f1      	b.n	1c0e4 <async_start+0x42>

0001c100 <api_start>:
{
   1c100:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1c102:	2480      	movs	r4, #128	; 0x80
   1c104:	9400      	str	r4, [sp, #0]
   1c106:	f7ff ffcc 	bl	1c0a2 <async_start>
}
   1c10a:	b002      	add	sp, #8
   1c10c:	bd10      	pop	{r4, pc}

0001c10e <onoff_started_callback>:
{
   1c10e:	b410      	push	{r4}
	return &data->mgr[type];
   1c110:	6900      	ldr	r0, [r0, #16]
   1c112:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1c114:	241c      	movs	r4, #28
   1c116:	fb03 0004 	mla	r0, r3, r4, r0
   1c11a:	2100      	movs	r1, #0
}
   1c11c:	bc10      	pop	{r4}
	notify(mgr, 0);
   1c11e:	4710      	bx	r2

0001c120 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1c120:	2000      	movs	r0, #0
   1c122:	f7fa be83 	b.w	16e2c <nrfx_clock_start>

0001c126 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1c126:	2000      	movs	r0, #0
   1c128:	f000 ba11 	b.w	1c54e <nrfx_clock_stop>

0001c12c <blocking_start_callback>:
{
   1c12c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1c12e:	f7fb bebd 	b.w	17eac <z_impl_k_sem_give>

0001c132 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c132:	6843      	ldr	r3, [r0, #4]
   1c134:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1c136:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1c13a:	600b      	str	r3, [r1, #0]
}
   1c13c:	2000      	movs	r0, #0
   1c13e:	4770      	bx	lr

0001c140 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c140:	6843      	ldr	r3, [r0, #4]
   1c142:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   1c144:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   1c148:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1c14c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   1c150:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   1c154:	2000      	movs	r0, #0
   1c156:	4770      	bx	lr

0001c158 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c158:	6843      	ldr	r3, [r0, #4]
   1c15a:	685b      	ldr	r3, [r3, #4]
}
   1c15c:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1c15e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1c162:	4770      	bx	lr

0001c164 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c164:	6843      	ldr	r3, [r0, #4]
   1c166:	685b      	ldr	r3, [r3, #4]
}
   1c168:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1c16a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1c16e:	4770      	bx	lr

0001c170 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c170:	6843      	ldr	r3, [r0, #4]
   1c172:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1c174:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   1c178:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1c17c:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1c17e:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   1c182:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   1c186:	2000      	movs	r0, #0
   1c188:	4770      	bx	lr

0001c18a <gpio_nrfx_manage_callback>:
{
   1c18a:	b510      	push	{r4, lr}
	return port->data;
   1c18c:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1c18e:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1c190:	b1f8      	cbz	r0, 1c1d2 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c192:	4288      	cmp	r0, r1
   1c194:	d119      	bne.n	1c1ca <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   1c196:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1c198:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   1c19a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c19c:	42a1      	cmp	r1, r4
   1c19e:	d100      	bne.n	1c1a2 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   1c1a0:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1c1a2:	2000      	movs	r0, #0
   1c1a4:	6008      	str	r0, [r1, #0]
	if (set) {
   1c1a6:	b12a      	cbz	r2, 1c1b4 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   1c1a8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1c1aa:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c1ac:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1c1ae:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c1b0:	b902      	cbnz	r2, 1c1b4 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   1c1b2:	6099      	str	r1, [r3, #8]
	return 0;
   1c1b4:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c1b6:	e010      	b.n	1c1da <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c1b8:	4281      	cmp	r1, r0
   1c1ba:	d106      	bne.n	1c1ca <gpio_nrfx_manage_callback+0x40>
	return node->next;
   1c1bc:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1c1be:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c1c0:	6898      	ldr	r0, [r3, #8]
   1c1c2:	4281      	cmp	r1, r0
   1c1c4:	d1ed      	bne.n	1c1a2 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   1c1c6:	609c      	str	r4, [r3, #8]
}
   1c1c8:	e7eb      	b.n	1c1a2 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   1c1ca:	4604      	mov	r4, r0
   1c1cc:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c1ce:	2800      	cmp	r0, #0
   1c1d0:	d1f2      	bne.n	1c1b8 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   1c1d2:	2a00      	cmp	r2, #0
   1c1d4:	d1e8      	bne.n	1c1a8 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   1c1d6:	f06f 0015 	mvn.w	r0, #21
}
   1c1da:	bd10      	pop	{r4, pc}

0001c1dc <pwm_nrfx_set_cycles>:
{
   1c1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c1de:	f8bd c018 	ldrh.w	ip, [sp, #24]
	const struct pwm_nrfx_config *config = dev->config;
   1c1e2:	6845      	ldr	r5, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   1c1e4:	6904      	ldr	r4, [r0, #16]
	if (channel >= NRF_PWM_CHANNEL_COUNT) {
   1c1e6:	2903      	cmp	r1, #3
   1c1e8:	f00c 0c01 	and.w	ip, ip, #1
   1c1ec:	d834      	bhi.n	1c258 <pwm_nrfx_set_cycles+0x7c>
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   1c1ee:	7ba8      	ldrb	r0, [r5, #14]
   1c1f0:	2801      	cmp	r0, #1
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   1c1f2:	f04f 0601 	mov.w	r6, #1
		pulse_cycles /= 2;
   1c1f6:	bf04      	itt	eq
   1c1f8:	085b      	lsreq	r3, r3, #1
		period_cycles /= 2;
   1c1fa:	0852      	lsreq	r2, r2, #1
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   1c1fc:	408e      	lsls	r6, r1
	if (pulse_cycles == 0) {
   1c1fe:	2b00      	cmp	r3, #0
   1c200:	d05d      	beq.n	1c2be <pwm_nrfx_set_cycles+0xe2>
	} else if (pulse_cycles >= period_cycles) {
   1c202:	429a      	cmp	r2, r3
   1c204:	d92b      	bls.n	1c25e <pwm_nrfx_set_cycles+0x82>
	if (period_cycles == data->period_cycles) {
   1c206:	6827      	ldr	r7, [r4, #0]
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   1c208:	7b20      	ldrb	r0, [r4, #12]
	if (period_cycles == data->period_cycles) {
   1c20a:	42ba      	cmp	r2, r7
   1c20c:	d010      	beq.n	1c230 <pwm_nrfx_set_cycles+0x54>
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   1c20e:	43b0      	bics	r0, r6
   1c210:	d122      	bne.n	1c258 <pwm_nrfx_set_cycles+0x7c>
   1c212:	4617      	mov	r7, r2
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   1c214:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1c218:	d219      	bcs.n	1c24e <pwm_nrfx_set_cycles+0x72>
			data->period_cycles = period_cycles;
   1c21a:	6022      	str	r2, [r4, #0]
			data->prescaler     = prescaler;
   1c21c:	7360      	strb	r0, [r4, #13]
			nrf_pwm_configure(config->pwm.p_registers,
   1c21e:	682a      	ldr	r2, [r5, #0]
					  config->initial_config.count_mode,
   1c220:	f895 e00e 	ldrb.w	lr, [r5, #14]
    p_reg->PRESCALER  = base_clock;
   1c224:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->MODE       = mode;
   1c228:	f8c2 e504 	str.w	lr, [r2, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   1c22c:	f8c2 7508 	str.w	r7, [r2, #1288]	; 0x508
		compare_value = (uint16_t)(pulse_cycles >> data->prescaler);
   1c230:	7b62      	ldrb	r2, [r4, #13]
   1c232:	40d3      	lsrs	r3, r2
   1c234:	b29b      	uxth	r3, r3
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   1c236:	f1bc 0f00 	cmp.w	ip, #0
   1c23a:	d101      	bne.n	1c240 <pwm_nrfx_set_cycles+0x64>
   1c23c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	if (!needs_pwm) {
   1c240:	eb04 0141 	add.w	r1, r4, r1, lsl #1
   1c244:	808b      	strh	r3, [r1, #4]
		data->pwm_needed |= BIT(channel);
   1c246:	7b23      	ldrb	r3, [r4, #12]
   1c248:	4333      	orrs	r3, r6
   1c24a:	7323      	strb	r3, [r4, #12]
	if (data->pwm_needed == 0) {
   1c24c:	e02d      	b.n	1c2aa <pwm_nrfx_set_cycles+0xce>
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   1c24e:	3001      	adds	r0, #1
   1c250:	2808      	cmp	r0, #8
		countertop >>= 1;
   1c252:	ea4f 0757 	mov.w	r7, r7, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   1c256:	d1dd      	bne.n	1c214 <pwm_nrfx_set_cycles+0x38>
		return -EINVAL;
   1c258:	f06f 0015 	mvn.w	r0, #21
   1c25c:	e04c      	b.n	1c2f8 <pwm_nrfx_set_cycles+0x11c>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   1c25e:	004b      	lsls	r3, r1, #1
   1c260:	4423      	add	r3, r4
   1c262:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   1c266:	f1bc 0f00 	cmp.w	ip, #0
   1c26a:	d011      	beq.n	1c290 <pwm_nrfx_set_cycles+0xb4>
   1c26c:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1c270:	809a      	strh	r2, [r3, #4]
	*psel = nrf_pwm_pin_get(config->pwm.p_registers, (uint8_t)channel);
   1c272:	682b      	ldr	r3, [r5, #0]
    return p_reg->PSEL.OUT[channel];
   1c274:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (channel_psel_get(channel, &psel, config)) {
   1c278:	2b00      	cmp	r3, #0
   1c27a:	db11      	blt.n	1c2a0 <pwm_nrfx_set_cycles+0xc4>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1c27c:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   1c27e:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1c282:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTCLR = clr_mask;
   1c286:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1c28a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   1c28e:	e007      	b.n	1c2a0 <pwm_nrfx_set_cycles+0xc4>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   1c290:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c294:	809a      	strh	r2, [r3, #4]
	*psel = nrf_pwm_pin_get(config->pwm.p_registers, (uint8_t)channel);
   1c296:	682b      	ldr	r3, [r5, #0]
   1c298:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (channel_psel_get(channel, &psel, config)) {
   1c29c:	2b00      	cmp	r3, #0
   1c29e:	da1b      	bge.n	1c2d8 <pwm_nrfx_set_cycles+0xfc>
		data->pwm_needed &= ~BIT(channel);
   1c2a0:	7b21      	ldrb	r1, [r4, #12]
   1c2a2:	ea21 0106 	bic.w	r1, r1, r6
   1c2a6:	7321      	strb	r1, [r4, #12]
	if (data->pwm_needed == 0) {
   1c2a8:	b301      	cbz	r1, 1c2ec <pwm_nrfx_set_cycles+0x110>
		if (data->stop_requested) {
   1c2aa:	7be3      	ldrb	r3, [r4, #15]
   1c2ac:	bb2b      	cbnz	r3, 1c2fa <pwm_nrfx_set_cycles+0x11e>
		nrfx_pwm_simple_playback(&config->pwm, &config->seq, 1, 0);
   1c2ae:	2300      	movs	r3, #0
   1c2b0:	2201      	movs	r2, #1
   1c2b2:	f105 0118 	add.w	r1, r5, #24
   1c2b6:	4628      	mov	r0, r5
   1c2b8:	f7fb fab2 	bl	17820 <nrfx_pwm_simple_playback>
   1c2bc:	e01b      	b.n	1c2f6 <pwm_nrfx_set_cycles+0x11a>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   1c2be:	004a      	lsls	r2, r1, #1
   1c2c0:	4422      	add	r2, r4
   1c2c2:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   1c2c6:	f1bc 0f00 	cmp.w	ip, #0
   1c2ca:	d001      	beq.n	1c2d0 <pwm_nrfx_set_cycles+0xf4>
   1c2cc:	8093      	strh	r3, [r2, #4]
   1c2ce:	e7e2      	b.n	1c296 <pwm_nrfx_set_cycles+0xba>
   1c2d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1c2d4:	8093      	strh	r3, [r2, #4]
   1c2d6:	e7cc      	b.n	1c272 <pwm_nrfx_set_cycles+0x96>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1c2d8:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   1c2da:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1c2de:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
   1c2e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1c2e6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   1c2ea:	e7d9      	b.n	1c2a0 <pwm_nrfx_set_cycles+0xc4>
		nrfx_pwm_stop(&config->pwm, false);
   1c2ec:	4628      	mov	r0, r5
   1c2ee:	f000 f978 	bl	1c5e2 <nrfx_pwm_stop>
		data->stop_requested = true;
   1c2f2:	2301      	movs	r3, #1
   1c2f4:	73e3      	strb	r3, [r4, #15]
	return 0;
   1c2f6:	2000      	movs	r0, #0
}
   1c2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->stop_requested = false;
   1c2fa:	2300      	movs	r3, #0
   1c2fc:	73e3      	strb	r3, [r4, #15]
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   1c2fe:	4628      	mov	r0, r5
   1c300:	f7fb fad4 	bl	178ac <nrfx_pwm_is_stopped>
   1c304:	2800      	cmp	r0, #0
   1c306:	d0fa      	beq.n	1c2fe <pwm_nrfx_set_cycles+0x122>
   1c308:	e7d1      	b.n	1c2ae <pwm_nrfx_set_cycles+0xd2>

0001c30a <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   1c30a:	2000      	movs	r0, #0
   1c30c:	4770      	bx	lr

0001c30e <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   1c30e:	b538      	push	{r3, r4, r5, lr}
   1c310:	460c      	mov	r4, r1
   1c312:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   1c314:	f7f6 f930 	bl	12578 <bt_is_ready>
   1c318:	b128      	cbz	r0, 1c326 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   1c31a:	4629      	mov	r1, r5
   1c31c:	4620      	mov	r0, r4
}
   1c31e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   1c322:	f7f5 bc39 	b.w	11b98 <bt_hci_le_rand>
}
   1c326:	f06f 000a 	mvn.w	r0, #10
   1c32a:	bd38      	pop	{r3, r4, r5, pc}

0001c32c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1c32c:	4770      	bx	lr

0001c32e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1c32e:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
   1c330:	6843      	ldr	r3, [r0, #4]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1c332:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
   1c336:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1c338:	7a05      	ldrb	r5, [r0, #8]
   1c33a:	6844      	ldr	r4, [r0, #4]
   1c33c:	4435      	add	r5, r6
   1c33e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1c342:	42a3      	cmp	r3, r4
   1c344:	d902      	bls.n	1c34c <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
   1c346:	f06f 0001 	mvn.w	r0, #1
}
   1c34a:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   1c34c:	795c      	ldrb	r4, [r3, #5]
   1c34e:	428c      	cmp	r4, r1
   1c350:	d001      	beq.n	1c356 <pinctrl_lookup_state+0x28>
		(*state)++;
   1c352:	3308      	adds	r3, #8
   1c354:	e7ef      	b.n	1c336 <pinctrl_lookup_state+0x8>
			return 0;
   1c356:	2000      	movs	r0, #0
   1c358:	e7f7      	b.n	1c34a <pinctrl_lookup_state+0x1c>

0001c35a <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1c35a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c35c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1c360:	2601      	movs	r6, #1
   1c362:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1c366:	4281      	cmp	r1, r0
   1c368:	d101      	bne.n	1c36e <pinctrl_configure_pins+0x14>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1c36a:	2000      	movs	r0, #0
}
   1c36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1c36e:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1c370:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1c374:	f3c4 2743 	ubfx	r7, r4, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
   1c378:	0c24      	lsrs	r4, r4, #16
			pin = 0xFFFFFFFFU;
   1c37a:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1c37c:	f1a4 0416 	sub.w	r4, r4, #22
			pin = 0xFFFFFFFFU;
   1c380:	bf08      	it	eq
   1c382:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
   1c386:	2c03      	cmp	r4, #3
   1c388:	d82e      	bhi.n	1c3e8 <pinctrl_configure_pins+0x8e>
   1c38a:	e8df f004 	tbb	[pc, r4]
   1c38e:	2102      	.short	0x2102
   1c390:	2724      	.short	0x2724
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1c392:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   1c396:	6804      	ldr	r4, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1c398:	f003 031f 	and.w	r3, r3, #31
   1c39c:	f3c4 3480 	ubfx	r4, r4, #14, #1
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1c3a0:	fa06 fc03 	lsl.w	ip, r6, r3
    if (value == 0)
   1c3a4:	b9ec      	cbnz	r4, 1c3e2 <pinctrl_configure_pins+0x88>
    p_reg->OUTCLR = clr_mask;
   1c3a6:	f8c5 c50c 	str.w	ip, [r5, #1292]	; 0x50c
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1c3aa:	f850 cb04 	ldr.w	ip, [r0], #4
   1c3ae:	f48c 5400 	eor.w	r4, ip, #8192	; 0x2000
   1c3b2:	f3c4 3440 	ubfx	r4, r4, #13, #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1c3b6:	f044 0402 	orr.w	r4, r4, #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1c3ba:	f3cc 1cc1 	ubfx	ip, ip, #7, #2
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   1c3be:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1c3c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1c3c6:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   1c3ca:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1c3ce:	e7ca      	b.n	1c366 <pinctrl_configure_pins+0xc>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1c3d0:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   1c3d4:	e7df      	b.n	1c396 <pinctrl_configure_pins+0x3c>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   1c3d6:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1c3da:	e7dc      	b.n	1c396 <pinctrl_configure_pins+0x3c>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1c3dc:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   1c3e0:	e7d9      	b.n	1c396 <pinctrl_configure_pins+0x3c>
    p_reg->OUTSET = set_mask;
   1c3e2:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
}
   1c3e6:	e7e0      	b.n	1c3aa <pinctrl_configure_pins+0x50>
		switch (NRF_GET_FUN(pins[i])) {
   1c3e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c3ec:	e7be      	b.n	1c36c <pinctrl_configure_pins+0x12>

0001c3ee <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1c3ee:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   1c3f0:	2000      	movs	r0, #0
   1c3f2:	f7f5 f8f3 	bl	115dc <sys_arch_reboot>

0001c3f6 <sdc_assertion_handler>:
	k_oops();
   1c3f6:	4040      	eors	r0, r0
   1c3f8:	f380 8811 	msr	BASEPRI, r0
   1c3fc:	f04f 0003 	mov.w	r0, #3
   1c400:	df02      	svc	2
}
   1c402:	4770      	bx	lr

0001c404 <hci_driver_close>:
{
   1c404:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   1c406:	f7fa fc63 	bl	16cd0 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1c40a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c40e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c412:	f7f9 fea9 	bl	16168 <multithreading_lock_acquire>
	if (err) {
   1c416:	4604      	mov	r4, r0
   1c418:	b920      	cbnz	r0, 1c424 <hci_driver_close+0x20>
	err = sdc_disable();
   1c41a:	f7e7 ff5b 	bl	42d4 <sdc_disable>
	if (err) {
   1c41e:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   1c420:	f7f9 feaa 	bl	16178 <multithreading_lock_release>
}
   1c424:	4620      	mov	r0, r4
   1c426:	bd10      	pop	{r4, pc}

0001c428 <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   1c428:	f7f9 bf54 	b.w	162d4 <rand_prio_low_vector_get>

0001c42c <hci_driver_send>:
{
   1c42c:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1c42e:	8983      	ldrh	r3, [r0, #12]
{
   1c430:	4605      	mov	r5, r0
	if (!buf->len) {
   1c432:	b373      	cbz	r3, 1c492 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1c434:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1c436:	b1a3      	cbz	r3, 1c462 <hci_driver_send+0x36>
   1c438:	2b02      	cmp	r3, #2
   1c43a:	d12a      	bne.n	1c492 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1c43c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c440:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c444:	f7f9 fe90 	bl	16168 <multithreading_lock_acquire>
	if (!errcode) {
   1c448:	4604      	mov	r4, r0
   1c44a:	b940      	cbnz	r0, 1c45e <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   1c44c:	68a8      	ldr	r0, [r5, #8]
   1c44e:	f7f0 f8ea 	bl	c626 <sdc_hci_data_put>
   1c452:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1c454:	f7f9 fe90 	bl	16178 <multithreading_lock_release>
		if (errcode) {
   1c458:	b1b4      	cbz	r4, 1c488 <hci_driver_send+0x5c>
			receive_signal_raise();
   1c45a:	f7f9 ff4f 	bl	162fc <receive_signal_raise>
}
   1c45e:	4620      	mov	r0, r4
   1c460:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1c462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c466:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c46a:	f7f9 fe7d 	bl	16168 <multithreading_lock_acquire>
	if (!errcode) {
   1c46e:	4604      	mov	r4, r0
   1c470:	2800      	cmp	r0, #0
   1c472:	d1f4      	bne.n	1c45e <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   1c474:	68a8      	ldr	r0, [r5, #8]
   1c476:	f7f9 ffa9 	bl	163cc <hci_internal_cmd_put>
   1c47a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1c47c:	f7f9 fe7c 	bl	16178 <multithreading_lock_release>
	if (errcode) {
   1c480:	2c00      	cmp	r4, #0
   1c482:	d1ec      	bne.n	1c45e <hci_driver_send+0x32>
	receive_signal_raise();
   1c484:	f7f9 ff3a 	bl	162fc <receive_signal_raise>
		net_buf_unref(buf);
   1c488:	4628      	mov	r0, r5
   1c48a:	f7f8 fe09 	bl	150a0 <net_buf_unref>
   1c48e:	2400      	movs	r4, #0
   1c490:	e7e5      	b.n	1c45e <hci_driver_send+0x32>
	switch (type) {
   1c492:	f06f 0415 	mvn.w	r4, #21
   1c496:	e7e2      	b.n	1c45e <hci_driver_send+0x32>

0001c498 <receive_work_handler>:
	hci_driver_receive_process();
   1c498:	f7f9 bf44 	b.w	16324 <hci_driver_receive_process>

0001c49c <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   1c49c:	f101 0320 	add.w	r3, r1, #32
   1c4a0:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1c4a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1c4a6:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1c4aa:	428b      	cmp	r3, r1
   1c4ac:	d1f9      	bne.n	1c4a2 <sys_memcpy_swap.constprop.0+0x6>
}
   1c4ae:	4770      	bx	lr

0001c4b0 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   1c4b0:	2100      	movs	r1, #0
   1c4b2:	f7fa bc2f 	b.w	16d14 <cmd_le_generate_dhkey>

0001c4b6 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   1c4b6:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   1c4ba:	2901      	cmp	r1, #1
   1c4bc:	d801      	bhi.n	1c4c2 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   1c4be:	f7fa bc29 	b.w	16d14 <cmd_le_generate_dhkey>
}
   1c4c2:	2012      	movs	r0, #18
   1c4c4:	4770      	bx	lr

0001c4c6 <m_assert_handler>:
	k_oops();
   1c4c6:	4040      	eors	r0, r0
   1c4c8:	f380 8811 	msr	BASEPRI, r0
   1c4cc:	f04f 0003 	mov.w	r0, #3
   1c4d0:	df02      	svc	2
}
   1c4d2:	4770      	bx	lr

0001c4d4 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1c4d4:	4668      	mov	r0, sp
   1c4d6:	f020 0107 	bic.w	r1, r0, #7
   1c4da:	468d      	mov	sp, r1
   1c4dc:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1c4de:	f7e6 fccf 	bl	2e80 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1c4e2:	f7f4 fe33 	bl	1114c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1c4e6:	f7f4 fef5 	bl	112d4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1c4ea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c4ee:	4685      	mov	sp, r0
   1c4f0:	4770      	bx	lr

0001c4f2 <mpsl_low_prio_work_handler>:
{
   1c4f2:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1c4f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c4f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c4fc:	f7f9 fe34 	bl	16168 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   1c500:	f7ef fc52 	bl	bda8 <mpsl_low_priority_process>
}
   1c504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   1c508:	f7f9 be36 	b.w	16178 <multithreading_lock_release>

0001c50c <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1c50c:	4668      	mov	r0, sp
   1c50e:	f020 0107 	bic.w	r1, r0, #7
   1c512:	468d      	mov	sp, r1
   1c514:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1c516:	f7e6 fc29 	bl	2d6c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1c51a:	f7f4 fe17 	bl	1114c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1c51e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c522:	4685      	mov	sp, r0
   1c524:	4770      	bx	lr

0001c526 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1c526:	4668      	mov	r0, sp
   1c528:	f020 0107 	bic.w	r1, r0, #7
   1c52c:	468d      	mov	sp, r1
   1c52e:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1c530:	f7e4 f9a2 	bl	878 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1c534:	f7f4 fe0a 	bl	1114c <_arch_isr_direct_pm>
   1c538:	f7f4 fecc 	bl	112d4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1c53c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c540:	4685      	mov	sp, r0
   1c542:	4770      	bx	lr

0001c544 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   1c544:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   1c546:	f7ef fdab 	bl	c0a0 <mpsl_fem_init>

	return 0;
}
   1c54a:	2000      	movs	r0, #0
   1c54c:	bd08      	pop	{r3, pc}

0001c54e <nrfx_clock_stop>:
	switch (domain) {
   1c54e:	2801      	cmp	r0, #1
   1c550:	d101      	bne.n	1c556 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   1c552:	f7e7 baf1 	b.w	3b38 <mpsl_clock_hfclk_release>
}
   1c556:	4770      	bx	lr

0001c558 <nrfx_clock_enable>:
}
   1c558:	4770      	bx	lr

0001c55a <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   1c55a:	f7e7 b901 	b.w	3760 <MPSL_IRQ_CLOCK_Handler>

0001c55e <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c55e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            if (var1 == 0x0E)
   1c562:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1c566:	2a0e      	cmp	r2, #14
   1c568:	d105      	bne.n	1c576 <nrf52_configuration_249+0x18>
            {
                switch(var2)
   1c56a:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
   1c56e:	3800      	subs	r0, #0
   1c570:	bf18      	it	ne
   1c572:	2001      	movne	r0, #1
   1c574:	4770      	bx	lr
                {
                    case 0x00ul:
                        return false;
   1c576:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
   1c578:	4770      	bx	lr

0001c57a <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1c57a:	4700      	bx	r0

0001c57c <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1c57c:	f000 001f 	and.w	r0, r0, #31
   1c580:	0080      	lsls	r0, r0, #2
   1c582:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1c586:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   1c58a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1c58e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1c592:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1c596:	4770      	bx	lr

0001c598 <start_playback>:
{
   1c598:	b510      	push	{r4, lr}
   1c59a:	4604      	mov	r4, r0
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1c59c:	2002      	movs	r0, #2
   1c59e:	7208      	strb	r0, [r1, #8]
    p_cb->flags = flags;
   1c5a0:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
   1c5a2:	6809      	ldr	r1, [r1, #0]
   1c5a4:	b179      	cbz	r1, 1c5c6 <start_playback+0x2e>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   1c5a6:	f012 0f04 	tst.w	r2, #4
   1c5aa:	bf0c      	ite	eq
   1c5ac:	2182      	moveq	r1, #130	; 0x82
   1c5ae:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   1c5b0:	0710      	lsls	r0, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   1c5b2:	bf48      	it	mi
   1c5b4:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   1c5b8:	06d0      	lsls	r0, r2, #27
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
   1c5ba:	6820      	ldr	r0, [r4, #0]
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   1c5bc:	bf48      	it	mi
   1c5be:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   1c5c2:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   1c5c6:	6821      	ldr	r1, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c5c8:	2000      	movs	r0, #0
   1c5ca:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   1c5ce:	f012 0f80 	tst.w	r2, #128	; 0x80
   1c5d2:	6822      	ldr	r2, [r4, #0]
   1c5d4:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c5d8:	bf06      	itte	eq
   1c5da:	2101      	moveq	r1, #1
   1c5dc:	50d1      	streq	r1, [r2, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   1c5de:	18d0      	addne	r0, r2, r3
}
   1c5e0:	bd10      	pop	{r4, pc}

0001c5e2 <nrfx_pwm_stop>:
{
   1c5e2:	b538      	push	{r3, r4, r5, lr}
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   1c5e4:	6803      	ldr	r3, [r0, #0]
    p_reg->SHORTS = mask;
   1c5e6:	2200      	movs	r2, #0
   1c5e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
   1c5ec:	6803      	ldr	r3, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c5ee:	2201      	movs	r2, #1
   1c5f0:	605a      	str	r2, [r3, #4]
{
   1c5f2:	4605      	mov	r5, r0
   1c5f4:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
   1c5f6:	f7fb f959 	bl	178ac <nrfx_pwm_is_stopped>
   1c5fa:	b938      	cbnz	r0, 1c60c <nrfx_pwm_stop+0x2a>
            if (nrfx_pwm_is_stopped(p_instance))
   1c5fc:	4628      	mov	r0, r5
   1c5fe:	f7fb f955 	bl	178ac <nrfx_pwm_is_stopped>
   1c602:	b918      	cbnz	r0, 1c60c <nrfx_pwm_stop+0x2a>
        } while (wait_until_stopped);
   1c604:	2c00      	cmp	r4, #0
   1c606:	d1f9      	bne.n	1c5fc <nrfx_pwm_stop+0x1a>
}
   1c608:	4620      	mov	r0, r4
   1c60a:	bd38      	pop	{r3, r4, r5, pc}
                ret_val = true;
   1c60c:	2401      	movs	r4, #1
   1c60e:	e7fb      	b.n	1c608 <nrfx_pwm_stop+0x26>

0001c610 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   1c610:	4770      	bx	lr

0001c612 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1c612:	b140      	cbz	r0, 1c626 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1c614:	68c3      	ldr	r3, [r0, #12]
   1c616:	7858      	ldrb	r0, [r3, #1]
   1c618:	f010 0001 	ands.w	r0, r0, #1
   1c61c:	bf1e      	ittt	ne
   1c61e:	7818      	ldrbne	r0, [r3, #0]
   1c620:	fab0 f080 	clzne	r0, r0
   1c624:	0940      	lsrne	r0, r0, #5
}
   1c626:	4770      	bx	lr

0001c628 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1c628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c62a:	4605      	mov	r5, r0
   1c62c:	460e      	mov	r6, r1
	__asm__ volatile(
   1c62e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c632:	f3ef 8711 	mrs	r7, BASEPRI
   1c636:	f383 8812 	msr	BASEPRI_MAX, r3
   1c63a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1c63e:	f7fc f92f 	bl	188a0 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1c642:	4631      	mov	r1, r6
   1c644:	4604      	mov	r4, r0
   1c646:	4628      	mov	r0, r5
   1c648:	f7ff fed1 	bl	1c3ee <k_sys_fatal_error_handler>
	__asm__ volatile(
   1c64c:	f387 8811 	msr	BASEPRI, r7
   1c650:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1c654:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1c656:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c65a:	f7f4 bfa9 	b.w	115b0 <z_impl_k_thread_abort>

0001c65e <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   1c65e:	f000 bdce 	b.w	1d1fe <memset>

0001c662 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c662:	f000 bdbe 	b.w	1d1e2 <memcpy>

0001c666 <k_heap_init>:
{
   1c666:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1c668:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1c66c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1c670:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1c672:	f7fd b98d 	b.w	19990 <sys_heap_init>

0001c676 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1c676:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c67a:	b085      	sub	sp, #20
   1c67c:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   1c680:	4607      	mov	r7, r0
   1c682:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1c684:	4650      	mov	r0, sl
   1c686:	4621      	mov	r1, r4
{
   1c688:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1c68a:	f000 fbfd 	bl	1ce88 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1c68e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1c692:	bf08      	it	eq
   1c694:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1c698:	4605      	mov	r5, r0
   1c69a:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1c69c:	bf04      	itt	eq
   1c69e:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   1c6a2:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1c6a6:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   1c6aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c6ae:	f3ef 8411 	mrs	r4, BASEPRI
   1c6b2:	f383 8812 	msr	BASEPRI_MAX, r3
   1c6b6:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1c6ba:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1c6be:	464a      	mov	r2, r9
   1c6c0:	4641      	mov	r1, r8
   1c6c2:	4638      	mov	r0, r7
   1c6c4:	f7fd f8fd 	bl	198c2 <sys_heap_aligned_alloc>
   1c6c8:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1c6ca:	f7fc faa1 	bl	18c10 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1c6ce:	9b03      	ldr	r3, [sp, #12]
   1c6d0:	b13b      	cbz	r3, 1c6e2 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   1c6d2:	f384 8811 	msr	BASEPRI, r4
   1c6d6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1c6da:	4618      	mov	r0, r3
   1c6dc:	b005      	add	sp, #20
   1c6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1c6e2:	1a28      	subs	r0, r5, r0
   1c6e4:	eb66 0101 	sbc.w	r1, r6, r1
   1c6e8:	2801      	cmp	r0, #1
   1c6ea:	f171 0200 	sbcs.w	r2, r1, #0
   1c6ee:	dbf0      	blt.n	1c6d2 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1c6f0:	e9cd 0100 	strd	r0, r1, [sp]
   1c6f4:	465a      	mov	r2, fp
   1c6f6:	4621      	mov	r1, r4
   1c6f8:	4650      	mov	r0, sl
   1c6fa:	f7fb ff33 	bl	18564 <z_pend_curr>
	__asm__ volatile(
   1c6fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c702:	f3ef 8411 	mrs	r4, BASEPRI
   1c706:	f383 8812 	msr	BASEPRI_MAX, r3
   1c70a:	f3bf 8f6f 	isb	sy
	return k;
   1c70e:	e7d6      	b.n	1c6be <k_heap_aligned_alloc+0x48>

0001c710 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1c710:	b538      	push	{r3, r4, r5, lr}
   1c712:	4604      	mov	r4, r0
   1c714:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c718:	f3ef 8511 	mrs	r5, BASEPRI
   1c71c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c720:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1c724:	f7fd f895 	bl	19852 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1c728:	f104 000c 	add.w	r0, r4, #12
   1c72c:	f000 fb2d 	bl	1cd8a <z_unpend_all>
   1c730:	b130      	cbz	r0, 1c740 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1c732:	4629      	mov	r1, r5
   1c734:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1c738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1c73c:	f7fb bf76 	b.w	1862c <z_reschedule>
	__asm__ volatile(
   1c740:	f385 8811 	msr	BASEPRI, r5
   1c744:	f3bf 8f6f 	isb	sy
}
   1c748:	bd38      	pop	{r3, r4, r5, pc}

0001c74a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1c74a:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   1c74e:	4313      	orrs	r3, r2
   1c750:	f013 0303 	ands.w	r3, r3, #3
   1c754:	d10c      	bne.n	1c770 <create_free_list+0x26>
	slab->free_list = NULL;
   1c756:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1c758:	6881      	ldr	r1, [r0, #8]
   1c75a:	4299      	cmp	r1, r3
   1c75c:	d801      	bhi.n	1c762 <create_free_list+0x18>
	return 0;
   1c75e:	2000      	movs	r0, #0
   1c760:	4770      	bx	lr
		*(char **)p = slab->free_list;
   1c762:	6941      	ldr	r1, [r0, #20]
   1c764:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   1c766:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   1c768:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1c76a:	3301      	adds	r3, #1
		p += slab->block_size;
   1c76c:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1c76e:	e7f3      	b.n	1c758 <create_free_list+0xe>
		return -EINVAL;
   1c770:	f06f 0015 	mvn.w	r0, #21
}
   1c774:	4770      	bx	lr

0001c776 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1c776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c778:	4604      	mov	r4, r0
   1c77a:	460d      	mov	r5, r1
	__asm__ volatile(
   1c77c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c780:	f3ef 8611 	mrs	r6, BASEPRI
   1c784:	f383 8812 	msr	BASEPRI_MAX, r3
   1c788:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1c78c:	6947      	ldr	r7, [r0, #20]
   1c78e:	b977      	cbnz	r7, 1c7ae <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1c790:	f000 fab5 	bl	1ccfe <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1c794:	b158      	cbz	r0, 1c7ae <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1c796:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1c798:	6142      	str	r2, [r0, #20]
   1c79a:	6707      	str	r7, [r0, #112]	; 0x70
			z_ready_thread(pending_thread);
   1c79c:	f000 fa78 	bl	1cc90 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1c7a0:	4631      	mov	r1, r6
   1c7a2:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1c7a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1c7aa:	f7fb bf3f 	b.w	1862c <z_reschedule>
	**(char ***) mem = slab->free_list;
   1c7ae:	682b      	ldr	r3, [r5, #0]
   1c7b0:	6962      	ldr	r2, [r4, #20]
   1c7b2:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1c7b4:	682b      	ldr	r3, [r5, #0]
   1c7b6:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1c7b8:	69a3      	ldr	r3, [r4, #24]
   1c7ba:	3b01      	subs	r3, #1
   1c7bc:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1c7be:	f386 8811 	msr	BASEPRI, r6
   1c7c2:	f3bf 8f6f 	isb	sy
}
   1c7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c7c8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1c7c8:	f3ef 8005 	mrs	r0, IPSR
}
   1c7cc:	3800      	subs	r0, #0
   1c7ce:	bf18      	it	ne
   1c7d0:	2001      	movne	r0, #1
   1c7d2:	4770      	bx	lr

0001c7d4 <z_impl_k_thread_name_set>:
}
   1c7d4:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1c7d8:	4770      	bx	lr

0001c7da <z_impl_k_thread_start>:
	z_sched_start(thread);
   1c7da:	f7fb bf39 	b.w	18650 <z_sched_start>

0001c7de <z_pm_save_idle_exit>:
{
   1c7de:	b508      	push	{r3, lr}
	pm_system_resume();
   1c7e0:	f7f4 fae4 	bl	10dac <pm_system_resume>
}
   1c7e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1c7e8:	f7ff bda0 	b.w	1c32c <sys_clock_idle_exit>

0001c7ec <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1c7ec:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c7f0:	428b      	cmp	r3, r1
   1c7f2:	d001      	beq.n	1c7f8 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1c7f4:	f7fb bed4 	b.w	185a0 <z_set_prio>
}
   1c7f8:	2000      	movs	r0, #0
   1c7fa:	4770      	bx	lr

0001c7fc <queue_insert>:
{
   1c7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c800:	4699      	mov	r9, r3
   1c802:	4604      	mov	r4, r0
   1c804:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1c808:	460d      	mov	r5, r1
   1c80a:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1c80c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1c810:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c814:	f3ef 8711 	mrs	r7, BASEPRI
   1c818:	f382 8812 	msr	BASEPRI_MAX, r2
   1c81c:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1c820:	b103      	cbz	r3, 1c824 <queue_insert+0x28>
	return list->tail;
   1c822:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1c824:	4630      	mov	r0, r6
   1c826:	f000 fa6a 	bl	1ccfe <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1c82a:	b158      	cbz	r0, 1c844 <queue_insert+0x48>
   1c82c:	2300      	movs	r3, #0
   1c82e:	6703      	str	r3, [r0, #112]	; 0x70
   1c830:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1c834:	f000 fa2c 	bl	1cc90 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1c838:	4630      	mov	r0, r6
   1c83a:	4639      	mov	r1, r7
   1c83c:	f7fb fef6 	bl	1862c <z_reschedule>
		return 0;
   1c840:	2000      	movs	r0, #0
   1c842:	e00c      	b.n	1c85e <queue_insert+0x62>
	if (alloc) {
   1c844:	f1b9 0f00 	cmp.w	r9, #0
   1c848:	d01b      	beq.n	1c882 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1c84a:	2108      	movs	r1, #8
   1c84c:	f7fc fb34 	bl	18eb8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1c850:	b938      	cbnz	r0, 1c862 <queue_insert+0x66>
	__asm__ volatile(
   1c852:	f387 8811 	msr	BASEPRI, r7
   1c856:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1c85a:	f06f 000b 	mvn.w	r0, #11
}
   1c85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1c862:	2201      	movs	r2, #1
		anode->data = data;
   1c864:	f8c0 8004 	str.w	r8, [r0, #4]
   1c868:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c86a:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c86c:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1c870:	b95d      	cbnz	r5, 1c88a <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c872:	6822      	ldr	r2, [r4, #0]
   1c874:	430a      	orrs	r2, r1
   1c876:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1c878:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1c87a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1c87c:	b96a      	cbnz	r2, 1c89a <queue_insert+0x9e>
	list->tail = node;
   1c87e:	6060      	str	r0, [r4, #4]
}
   1c880:	e00b      	b.n	1c89a <queue_insert+0x9e>
	node->next_and_flags = flags;
   1c882:	f8c8 9000 	str.w	r9, [r8]
}
   1c886:	4640      	mov	r0, r8
   1c888:	e7ef      	b.n	1c86a <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1c88a:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1c88c:	2a03      	cmp	r2, #3
   1c88e:	d810      	bhi.n	1c8b2 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c890:	6001      	str	r1, [r0, #0]
	return list->tail;
   1c892:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1c894:	b939      	cbnz	r1, 1c8a6 <queue_insert+0xaa>
	list->head = node;
   1c896:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1c89a:	2104      	movs	r1, #4
   1c89c:	f104 0010 	add.w	r0, r4, #16
   1c8a0:	f000 fc71 	bl	1d186 <z_handle_obj_poll_events>
   1c8a4:	e7c8      	b.n	1c838 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c8a6:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c8a8:	f002 0203 	and.w	r2, r2, #3
   1c8ac:	4302      	orrs	r2, r0
   1c8ae:	600a      	str	r2, [r1, #0]
   1c8b0:	e7e5      	b.n	1c87e <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1c8b2:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c8b6:	430a      	orrs	r2, r1
   1c8b8:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c8ba:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c8bc:	f002 0203 	and.w	r2, r2, #3
   1c8c0:	ea40 0302 	orr.w	r3, r0, r2
   1c8c4:	602b      	str	r3, [r5, #0]
}
   1c8c6:	e7e8      	b.n	1c89a <queue_insert+0x9e>

0001c8c8 <z_queue_node_peek>:
{
   1c8c8:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1c8ca:	4604      	mov	r4, r0
   1c8cc:	b130      	cbz	r0, 1c8dc <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c8ce:	6802      	ldr	r2, [r0, #0]
   1c8d0:	0793      	lsls	r3, r2, #30
   1c8d2:	d003      	beq.n	1c8dc <z_queue_node_peek+0x14>
		ret = anode->data;
   1c8d4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1c8d6:	b109      	cbz	r1, 1c8dc <z_queue_node_peek+0x14>
			k_free(anode);
   1c8d8:	f000 fc6b 	bl	1d1b2 <k_free>
}
   1c8dc:	4620      	mov	r0, r4
   1c8de:	bd10      	pop	{r4, pc}

0001c8e0 <z_impl_k_queue_init>:
	list->head = NULL;
   1c8e0:	2300      	movs	r3, #0
	list->tail = NULL;
   1c8e2:	e9c0 3300 	strd	r3, r3, [r0]
   1c8e6:	f100 0308 	add.w	r3, r0, #8
   1c8ea:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1c8ee:	f100 0310 	add.w	r3, r0, #16
   1c8f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1c8f6:	4770      	bx	lr

0001c8f8 <k_queue_append>:
{
   1c8f8:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1c8fa:	2301      	movs	r3, #1
   1c8fc:	9300      	str	r3, [sp, #0]
   1c8fe:	2300      	movs	r3, #0
{
   1c900:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1c902:	4619      	mov	r1, r3
   1c904:	f7ff ff7a 	bl	1c7fc <queue_insert>
}
   1c908:	b003      	add	sp, #12
   1c90a:	f85d fb04 	ldr.w	pc, [sp], #4

0001c90e <k_queue_prepend>:
{
   1c90e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1c910:	2300      	movs	r3, #0
{
   1c912:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1c914:	9300      	str	r3, [sp, #0]
   1c916:	4619      	mov	r1, r3
   1c918:	f7ff ff70 	bl	1c7fc <queue_insert>
}
   1c91c:	b003      	add	sp, #12
   1c91e:	f85d fb04 	ldr.w	pc, [sp], #4

0001c922 <k_queue_append_list>:
{
   1c922:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c926:	4680      	mov	r8, r0
   1c928:	4615      	mov	r5, r2
	CHECKIF(head == NULL || tail == NULL) {
   1c92a:	460c      	mov	r4, r1
   1c92c:	b3a9      	cbz	r1, 1c99a <k_queue_append_list+0x78>
   1c92e:	b3a2      	cbz	r2, 1c99a <k_queue_append_list+0x78>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1c930:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1c934:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c938:	f3ef 8711 	mrs	r7, BASEPRI
   1c93c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c940:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1c944:	4630      	mov	r0, r6
   1c946:	f000 f9da 	bl	1ccfe <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1c94a:	b168      	cbz	r0, 1c968 <k_queue_append_list+0x46>
   1c94c:	f04f 0900 	mov.w	r9, #0
	thread->base.swap_data = data;
   1c950:	6144      	str	r4, [r0, #20]
   1c952:	f8c0 9070 	str.w	r9, [r0, #112]	; 0x70
	z_ready_thread(thread);
   1c956:	f000 f99b 	bl	1cc90 <z_ready_thread>
		head = *(void **)head;
   1c95a:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1c95c:	4630      	mov	r0, r6
   1c95e:	f000 f9ce 	bl	1ccfe <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1c962:	b144      	cbz	r4, 1c976 <k_queue_append_list+0x54>
   1c964:	2800      	cmp	r0, #0
   1c966:	d1f3      	bne.n	1c950 <k_queue_append_list+0x2e>
	return list->tail;
   1c968:	f8d8 3004 	ldr.w	r3, [r8, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1c96c:	b97b      	cbnz	r3, 1c98e <k_queue_append_list+0x6c>
	list->head = node;
   1c96e:	f8c8 4000 	str.w	r4, [r8]
	list->tail = node;
   1c972:	f8c8 5004 	str.w	r5, [r8, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1c976:	2104      	movs	r1, #4
   1c978:	f108 0010 	add.w	r0, r8, #16
   1c97c:	f000 fc03 	bl	1d186 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1c980:	4630      	mov	r0, r6
   1c982:	4639      	mov	r1, r7
   1c984:	f7fb fe52 	bl	1862c <z_reschedule>
	return 0;
   1c988:	2000      	movs	r0, #0
}
   1c98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c98e:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c990:	f002 0203 	and.w	r2, r2, #3
   1c994:	4314      	orrs	r4, r2
   1c996:	601c      	str	r4, [r3, #0]
}
   1c998:	e7eb      	b.n	1c972 <k_queue_append_list+0x50>
		return -EINVAL;
   1c99a:	f06f 0015 	mvn.w	r0, #21
   1c99e:	e7f4      	b.n	1c98a <k_queue_append_list+0x68>

0001c9a0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1c9a0:	b15a      	cbz	r2, 1c9ba <z_impl_k_sem_init+0x1a>
   1c9a2:	428a      	cmp	r2, r1
   1c9a4:	d309      	bcc.n	1c9ba <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1c9a6:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1c9aa:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1c9ae:	e9c0 0000 	strd	r0, r0, [r0]
   1c9b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1c9b6:	2000      	movs	r0, #0
   1c9b8:	4770      	bx	lr
		return -EINVAL;
   1c9ba:	f06f 0015 	mvn.w	r0, #21
}
   1c9be:	4770      	bx	lr

0001c9c0 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   1c9c0:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1c9c2:	2301      	movs	r3, #1
   1c9c4:	408b      	lsls	r3, r1
   1c9c6:	ea22 0303 	bic.w	r3, r2, r3
   1c9ca:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1c9cc:	fa22 f001 	lsr.w	r0, r2, r1
}
   1c9d0:	f000 0001 	and.w	r0, r0, #1
   1c9d4:	4770      	bx	lr

0001c9d6 <unschedule_locked>:
{
   1c9d6:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1c9d8:	2103      	movs	r1, #3
{
   1c9da:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1c9dc:	300c      	adds	r0, #12
   1c9de:	f7ff ffef 	bl	1c9c0 <flag_test_and_clear>
   1c9e2:	4604      	mov	r4, r0
   1c9e4:	b118      	cbz	r0, 1c9ee <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1c9e6:	f105 0010 	add.w	r0, r5, #16
   1c9ea:	f000 fa01 	bl	1cdf0 <z_abort_timeout>
}
   1c9ee:	4620      	mov	r0, r4
   1c9f0:	bd38      	pop	{r3, r4, r5, pc}

0001c9f2 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1c9f2:	b120      	cbz	r0, 1c9fe <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1c9f4:	2200      	movs	r2, #0
   1c9f6:	4611      	mov	r1, r2
   1c9f8:	3080      	adds	r0, #128	; 0x80
   1c9fa:	f000 b9d6 	b.w	1cdaa <z_sched_wake>
}
   1c9fe:	4770      	bx	lr

0001ca00 <cancel_async_locked>:
{
   1ca00:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1ca02:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ca04:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1ca08:	079b      	lsls	r3, r3, #30
{
   1ca0a:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ca0c:	d412      	bmi.n	1ca34 <cancel_async_locked+0x34>
		queue_remove_locked(work->queue, work);
   1ca0e:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1ca10:	2102      	movs	r1, #2
   1ca12:	300c      	adds	r0, #12
   1ca14:	f7ff ffd4 	bl	1c9c0 <flag_test_and_clear>
   1ca18:	b160      	cbz	r0, 1ca34 <cancel_async_locked+0x34>
	return list->head;
   1ca1a:	6faa      	ldr	r2, [r5, #120]	; 0x78
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ca1c:	b152      	cbz	r2, 1ca34 <cancel_async_locked+0x34>
   1ca1e:	4294      	cmp	r4, r2
   1ca20:	d118      	bne.n	1ca54 <cancel_async_locked+0x54>
	return node->next;
   1ca22:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ca24:	b986      	cbnz	r6, 1ca48 <cancel_async_locked+0x48>
   1ca26:	6feb      	ldr	r3, [r5, #124]	; 0x7c
	list->head = node;
   1ca28:	67aa      	str	r2, [r5, #120]	; 0x78
Z_GENLIST_REMOVE(slist, snode)
   1ca2a:	429c      	cmp	r4, r3
   1ca2c:	d100      	bne.n	1ca30 <cancel_async_locked+0x30>
	list->tail = node;
   1ca2e:	67ea      	str	r2, [r5, #124]	; 0x7c
	parent->next = child;
   1ca30:	2300      	movs	r3, #0
   1ca32:	6023      	str	r3, [r4, #0]
	return *flagp;
   1ca34:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1ca36:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1ca3a:	bf1e      	ittt	ne
   1ca3c:	f043 0302 	orrne.w	r3, r3, #2
   1ca40:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1ca42:	f040 0002 	orrne.w	r0, r0, #2
}
   1ca46:	bd70      	pop	{r4, r5, r6, pc}
   1ca48:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ca4a:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   1ca4c:	4294      	cmp	r4, r2
	list->tail = node;
   1ca4e:	bf08      	it	eq
   1ca50:	67ee      	streq	r6, [r5, #124]	; 0x7c
}
   1ca52:	e7ed      	b.n	1ca30 <cancel_async_locked+0x30>
	return node->next;
   1ca54:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ca56:	6812      	ldr	r2, [r2, #0]
   1ca58:	e7e0      	b.n	1ca1c <cancel_async_locked+0x1c>

0001ca5a <work_timeout>:
{
   1ca5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ca5c:	4604      	mov	r4, r0
   1ca5e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca62:	f3ef 8511 	mrs	r5, BASEPRI
   1ca66:	f383 8812 	msr	BASEPRI_MAX, r3
   1ca6a:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1ca6e:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1ca70:	f1a0 0610 	sub.w	r6, r0, #16
   1ca74:	2103      	movs	r1, #3
   1ca76:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1ca78:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1ca7a:	f7ff ffa1 	bl	1c9c0 <flag_test_and_clear>
   1ca7e:	b128      	cbz	r0, 1ca8c <work_timeout+0x32>
		queue = dw->queue;
   1ca80:	69a3      	ldr	r3, [r4, #24]
   1ca82:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1ca84:	a901      	add	r1, sp, #4
   1ca86:	4630      	mov	r0, r6
   1ca88:	f7fb fb2e 	bl	180e8 <submit_to_queue_locked>
	__asm__ volatile(
   1ca8c:	f385 8811 	msr	BASEPRI, r5
   1ca90:	f3bf 8f6f 	isb	sy
}
   1ca94:	b002      	add	sp, #8
   1ca96:	bd70      	pop	{r4, r5, r6, pc}

0001ca98 <k_work_init>:
{
   1ca98:	b538      	push	{r3, r4, r5, lr}
   1ca9a:	4604      	mov	r4, r0
   1ca9c:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1ca9e:	2210      	movs	r2, #16
   1caa0:	2100      	movs	r1, #0
   1caa2:	f000 fbac 	bl	1d1fe <memset>
   1caa6:	6065      	str	r5, [r4, #4]
}
   1caa8:	bd38      	pop	{r3, r4, r5, pc}

0001caaa <k_work_busy_get>:
	__asm__ volatile(
   1caaa:	f04f 0240 	mov.w	r2, #64	; 0x40
   1caae:	f3ef 8311 	mrs	r3, BASEPRI
   1cab2:	f382 8812 	msr	BASEPRI_MAX, r2
   1cab6:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1caba:	68c0      	ldr	r0, [r0, #12]
   1cabc:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   1cac0:	f383 8811 	msr	BASEPRI, r3
   1cac4:	f3bf 8f6f 	isb	sy
}
   1cac8:	4770      	bx	lr

0001caca <z_work_submit_to_queue>:
{
   1caca:	b513      	push	{r0, r1, r4, lr}
   1cacc:	9001      	str	r0, [sp, #4]
   1cace:	4608      	mov	r0, r1
	__asm__ volatile(
   1cad0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cad4:	f3ef 8411 	mrs	r4, BASEPRI
   1cad8:	f383 8812 	msr	BASEPRI_MAX, r3
   1cadc:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1cae0:	a901      	add	r1, sp, #4
   1cae2:	f7fb fb01 	bl	180e8 <submit_to_queue_locked>
	__asm__ volatile(
   1cae6:	f384 8811 	msr	BASEPRI, r4
   1caea:	f3bf 8f6f 	isb	sy
}
   1caee:	b002      	add	sp, #8
   1caf0:	bd10      	pop	{r4, pc}

0001caf2 <k_work_submit_to_queue>:
{
   1caf2:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1caf4:	f7ff ffe9 	bl	1caca <z_work_submit_to_queue>
	if (ret > 0) {
   1caf8:	1e04      	subs	r4, r0, #0
   1cafa:	dd09      	ble.n	1cb10 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   1cafc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb00:	f3ef 8011 	mrs	r0, BASEPRI
   1cb04:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb08:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1cb0c:	f000 f927 	bl	1cd5e <z_reschedule_irqlock>
}
   1cb10:	4620      	mov	r0, r4
   1cb12:	bd10      	pop	{r4, pc}

0001cb14 <k_work_queue_init>:
{
   1cb14:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   1cb16:	2298      	movs	r2, #152	; 0x98
   1cb18:	2100      	movs	r1, #0
   1cb1a:	f000 fb70 	bl	1d1fe <memset>
}
   1cb1e:	bd08      	pop	{r3, pc}

0001cb20 <k_work_init_delayable>:
{
   1cb20:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1cb22:	2230      	movs	r2, #48	; 0x30
{
   1cb24:	4604      	mov	r4, r0
   1cb26:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1cb28:	2100      	movs	r1, #0
   1cb2a:	f000 fb68 	bl	1d1fe <memset>
   1cb2e:	f44f 7380 	mov.w	r3, #256	; 0x100
   1cb32:	6065      	str	r5, [r4, #4]
   1cb34:	60e3      	str	r3, [r4, #12]
}
   1cb36:	bd38      	pop	{r3, r4, r5, pc}

0001cb38 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   1cb38:	f7ff bfb7 	b.w	1caaa <k_work_busy_get>

0001cb3c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1cb3c:	b538      	push	{r3, r4, r5, lr}
   1cb3e:	4604      	mov	r4, r0
   1cb40:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb44:	f3ef 8511 	mrs	r5, BASEPRI
   1cb48:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb4c:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1cb50:	f7ff ff41 	bl	1c9d6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1cb54:	4620      	mov	r0, r4
   1cb56:	f7ff ff53 	bl	1ca00 <cancel_async_locked>
	__asm__ volatile(
   1cb5a:	f385 8811 	msr	BASEPRI, r5
   1cb5e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1cb62:	bd38      	pop	{r3, r4, r5, pc}

0001cb64 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1cb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cb66:	4604      	mov	r4, r0
   1cb68:	460d      	mov	r5, r1
	__asm__ volatile(
   1cb6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb6e:	f3ef 8611 	mrs	r6, BASEPRI
   1cb72:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb76:	f3bf 8f6f 	isb	sy
	return *flagp;
   1cb7a:	68c3      	ldr	r3, [r0, #12]
   1cb7c:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1cb80:	2b00      	cmp	r3, #0
   1cb82:	bf14      	ite	ne
   1cb84:	2701      	movne	r7, #1
   1cb86:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   1cb88:	d105      	bne.n	1cb96 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   1cb8a:	f386 8811 	msr	BASEPRI, r6
   1cb8e:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1cb92:	4638      	mov	r0, r7
   1cb94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   1cb96:	f7ff ff1e 	bl	1c9d6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1cb9a:	4620      	mov	r0, r4
   1cb9c:	f7ff ff30 	bl	1ca00 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1cba0:	4629      	mov	r1, r5
   1cba2:	4620      	mov	r0, r4
   1cba4:	f7fb fa82 	bl	180ac <cancel_sync_locked>
   1cba8:	f386 8811 	msr	BASEPRI, r6
   1cbac:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   1cbb0:	2800      	cmp	r0, #0
   1cbb2:	d0ee      	beq.n	1cb92 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   1cbb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cbb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cbbc:	f105 0008 	add.w	r0, r5, #8
   1cbc0:	f7fb f99a 	bl	17ef8 <z_impl_k_sem_take>
   1cbc4:	e7e5      	b.n	1cb92 <k_work_cancel_delayable_sync+0x2e>

0001cbc6 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1cbc6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1cbca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1cbcc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1cbce:	2300      	movs	r3, #0
	node->prev = NULL;
   1cbd0:	e9c0 3300 	strd	r3, r3, [r0]
}
   1cbd4:	4770      	bx	lr

0001cbd6 <unpend_thread_no_timeout>:
{
   1cbd6:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1cbd8:	f7ff fff5 	bl	1cbc6 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1cbdc:	7b43      	ldrb	r3, [r0, #13]
   1cbde:	f023 0302 	bic.w	r3, r3, #2
   1cbe2:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1cbe4:	2300      	movs	r3, #0
   1cbe6:	6083      	str	r3, [r0, #8]
}
   1cbe8:	bd08      	pop	{r3, pc}

0001cbea <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1cbea:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1cbee:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1cbf2:	4283      	cmp	r3, r0
		return b2 - b1;
   1cbf4:	bf14      	ite	ne
   1cbf6:	1ac0      	subne	r0, r0, r3
	return 0;
   1cbf8:	2000      	moveq	r0, #0
}
   1cbfa:	4770      	bx	lr

0001cbfc <z_thread_timeout>:
{
   1cbfc:	b510      	push	{r4, lr}
   1cbfe:	4601      	mov	r1, r0
	__asm__ volatile(
   1cc00:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cc04:	f3ef 8411 	mrs	r4, BASEPRI
   1cc08:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc0c:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1cc10:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1cc14:	f013 0f28 	tst.w	r3, #40	; 0x28
   1cc18:	d10d      	bne.n	1cc36 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1cc1a:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1cc1e:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1cc20:	b10b      	cbz	r3, 1cc26 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1cc22:	f7ff ffd8 	bl	1cbd6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1cc26:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1cc2a:	f023 0314 	bic.w	r3, r3, #20
   1cc2e:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1cc32:	f7fb fbbf 	bl	183b4 <ready_thread>
	__asm__ volatile(
   1cc36:	f384 8811 	msr	BASEPRI, r4
   1cc3a:	f3bf 8f6f 	isb	sy
}
   1cc3e:	bd10      	pop	{r4, pc}

0001cc40 <add_to_waitq_locked>:
{
   1cc40:	b538      	push	{r3, r4, r5, lr}
   1cc42:	4604      	mov	r4, r0
   1cc44:	460d      	mov	r5, r1
	unready_thread(thread);
   1cc46:	f7fb fbe9 	bl	1841c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1cc4a:	7b63      	ldrb	r3, [r4, #13]
   1cc4c:	f043 0302 	orr.w	r3, r3, #2
   1cc50:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1cc52:	b1e5      	cbz	r5, 1cc8e <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   1cc54:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   1cc56:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cc58:	429d      	cmp	r5, r3
   1cc5a:	d109      	bne.n	1cc70 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   1cc5c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1cc5e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1cc62:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cc64:	606c      	str	r4, [r5, #4]
}
   1cc66:	e012      	b.n	1cc8e <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1cc68:	686a      	ldr	r2, [r5, #4]
   1cc6a:	4293      	cmp	r3, r2
   1cc6c:	d0f6      	beq.n	1cc5c <add_to_waitq_locked+0x1c>
   1cc6e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1cc70:	2b00      	cmp	r3, #0
   1cc72:	d0f3      	beq.n	1cc5c <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   1cc74:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1cc78:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1cc7c:	428a      	cmp	r2, r1
   1cc7e:	d0f3      	beq.n	1cc68 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1cc80:	4291      	cmp	r1, r2
   1cc82:	ddf1      	ble.n	1cc68 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   1cc84:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1cc86:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1cc8a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1cc8c:	605c      	str	r4, [r3, #4]
}
   1cc8e:	bd38      	pop	{r3, r4, r5, pc}

0001cc90 <z_ready_thread>:
{
   1cc90:	b510      	push	{r4, lr}
	__asm__ volatile(
   1cc92:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cc96:	f3ef 8411 	mrs	r4, BASEPRI
   1cc9a:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc9e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1cca2:	f7fb fb87 	bl	183b4 <ready_thread>
	__asm__ volatile(
   1cca6:	f384 8811 	msr	BASEPRI, r4
   1ccaa:	f3bf 8f6f 	isb	sy
}
   1ccae:	bd10      	pop	{r4, pc}

0001ccb0 <z_unpend_thread_no_timeout>:
{
   1ccb0:	b508      	push	{r3, lr}
	__asm__ volatile(
   1ccb2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ccb6:	f3ef 8111 	mrs	r1, BASEPRI
   1ccba:	f383 8812 	msr	BASEPRI_MAX, r3
   1ccbe:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1ccc2:	f7ff ff88 	bl	1cbd6 <unpend_thread_no_timeout>
	__asm__ volatile(
   1ccc6:	f381 8811 	msr	BASEPRI, r1
   1ccca:	f3bf 8f6f 	isb	sy
}
   1ccce:	bd08      	pop	{r3, pc}

0001ccd0 <z_unpend1_no_timeout>:
{
   1ccd0:	b508      	push	{r3, lr}
   1ccd2:	4603      	mov	r3, r0
	__asm__ volatile(
   1ccd4:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ccd8:	f3ef 8111 	mrs	r1, BASEPRI
   1ccdc:	f382 8812 	msr	BASEPRI_MAX, r2
   1cce0:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1cce4:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cce6:	4283      	cmp	r3, r0
   1cce8:	d007      	beq.n	1ccfa <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   1ccea:	b108      	cbz	r0, 1ccf0 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   1ccec:	f7ff ff73 	bl	1cbd6 <unpend_thread_no_timeout>
	__asm__ volatile(
   1ccf0:	f381 8811 	msr	BASEPRI, r1
   1ccf4:	f3bf 8f6f 	isb	sy
}
   1ccf8:	bd08      	pop	{r3, pc}
   1ccfa:	2000      	movs	r0, #0
   1ccfc:	e7f8      	b.n	1ccf0 <z_unpend1_no_timeout+0x20>

0001ccfe <z_unpend_first_thread>:
{
   1ccfe:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1cd00:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd04:	f3ef 8511 	mrs	r5, BASEPRI
   1cd08:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd0c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1cd10:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cd12:	42a0      	cmp	r0, r4
   1cd14:	d00d      	beq.n	1cd32 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   1cd16:	b134      	cbz	r4, 1cd26 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   1cd18:	4620      	mov	r0, r4
   1cd1a:	f7ff ff5c 	bl	1cbd6 <unpend_thread_no_timeout>
   1cd1e:	f104 0018 	add.w	r0, r4, #24
   1cd22:	f000 f865 	bl	1cdf0 <z_abort_timeout>
	__asm__ volatile(
   1cd26:	f385 8811 	msr	BASEPRI, r5
   1cd2a:	f3bf 8f6f 	isb	sy
}
   1cd2e:	4620      	mov	r0, r4
   1cd30:	bd38      	pop	{r3, r4, r5, pc}
   1cd32:	2400      	movs	r4, #0
   1cd34:	e7f7      	b.n	1cd26 <z_unpend_first_thread+0x28>

0001cd36 <z_unpend_thread>:
{
   1cd36:	b510      	push	{r4, lr}
	__asm__ volatile(
   1cd38:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd3c:	f3ef 8411 	mrs	r4, BASEPRI
   1cd40:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd44:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1cd48:	f7ff ff45 	bl	1cbd6 <unpend_thread_no_timeout>
	__asm__ volatile(
   1cd4c:	f384 8811 	msr	BASEPRI, r4
   1cd50:	f3bf 8f6f 	isb	sy
}
   1cd54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cd58:	3018      	adds	r0, #24
   1cd5a:	f000 b849 	b.w	1cdf0 <z_abort_timeout>

0001cd5e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1cd5e:	4603      	mov	r3, r0
   1cd60:	b920      	cbnz	r0, 1cd6c <z_reschedule_irqlock+0xe>
   1cd62:	f3ef 8205 	mrs	r2, IPSR
   1cd66:	b90a      	cbnz	r2, 1cd6c <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1cd68:	f7f4 ba18 	b.w	1119c <arch_swap>
   1cd6c:	f383 8811 	msr	BASEPRI, r3
   1cd70:	f3bf 8f6f 	isb	sy
}
   1cd74:	4770      	bx	lr

0001cd76 <z_reschedule_unlocked>:
	__asm__ volatile(
   1cd76:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd7a:	f3ef 8011 	mrs	r0, BASEPRI
   1cd7e:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd82:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1cd86:	f7ff bfea 	b.w	1cd5e <z_reschedule_irqlock>

0001cd8a <z_unpend_all>:
{
   1cd8a:	b538      	push	{r3, r4, r5, lr}
   1cd8c:	4605      	mov	r5, r0
	int need_sched = 0;
   1cd8e:	2000      	movs	r0, #0
	return list->head == list;
   1cd90:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cd92:	42a5      	cmp	r5, r4
   1cd94:	d000      	beq.n	1cd98 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1cd96:	b904      	cbnz	r4, 1cd9a <z_unpend_all+0x10>
}
   1cd98:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1cd9a:	4620      	mov	r0, r4
   1cd9c:	f7ff ffcb 	bl	1cd36 <z_unpend_thread>
		z_ready_thread(thread);
   1cda0:	4620      	mov	r0, r4
   1cda2:	f7ff ff75 	bl	1cc90 <z_ready_thread>
		need_sched = 1;
   1cda6:	2001      	movs	r0, #1
   1cda8:	e7f2      	b.n	1cd90 <z_unpend_all+0x6>

0001cdaa <z_sched_wake>:
{
   1cdaa:	b538      	push	{r3, r4, r5, lr}
   1cdac:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cdb0:	f3ef 8511 	mrs	r5, BASEPRI
   1cdb4:	f383 8812 	msr	BASEPRI_MAX, r3
   1cdb8:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1cdbc:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cdbe:	42a0      	cmp	r0, r4
   1cdc0:	d012      	beq.n	1cde8 <z_sched_wake+0x3e>
		if (thread != NULL) {
   1cdc2:	b19c      	cbz	r4, 1cdec <z_sched_wake+0x42>
   1cdc4:	6721      	str	r1, [r4, #112]	; 0x70
   1cdc6:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   1cdc8:	4620      	mov	r0, r4
   1cdca:	f7ff ff04 	bl	1cbd6 <unpend_thread_no_timeout>
   1cdce:	f104 0018 	add.w	r0, r4, #24
   1cdd2:	f000 f80d 	bl	1cdf0 <z_abort_timeout>
			ready_thread(thread);
   1cdd6:	4620      	mov	r0, r4
   1cdd8:	f7fb faec 	bl	183b4 <ready_thread>
			ret = true;
   1cddc:	2001      	movs	r0, #1
	__asm__ volatile(
   1cdde:	f385 8811 	msr	BASEPRI, r5
   1cde2:	f3bf 8f6f 	isb	sy
}
   1cde6:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   1cde8:	2000      	movs	r0, #0
   1cdea:	e7f8      	b.n	1cdde <z_sched_wake+0x34>
   1cdec:	4620      	mov	r0, r4
   1cdee:	e7f6      	b.n	1cdde <z_sched_wake+0x34>

0001cdf0 <z_abort_timeout>:
{
   1cdf0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1cdf2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1cdf6:	f3ef 8411 	mrs	r4, BASEPRI
   1cdfa:	f382 8812 	msr	BASEPRI_MAX, r2
   1cdfe:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1ce02:	6803      	ldr	r3, [r0, #0]
   1ce04:	b13b      	cbz	r3, 1ce16 <z_abort_timeout+0x26>
			remove_timeout(to);
   1ce06:	f7fb fe0f 	bl	18a28 <remove_timeout>
			ret = 0;
   1ce0a:	2000      	movs	r0, #0
	__asm__ volatile(
   1ce0c:	f384 8811 	msr	BASEPRI, r4
   1ce10:	f3bf 8f6f 	isb	sy
}
   1ce14:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1ce16:	f06f 0015 	mvn.w	r0, #21
   1ce1a:	e7f7      	b.n	1ce0c <z_abort_timeout+0x1c>

0001ce1c <z_get_next_timeout_expiry>:
{
   1ce1c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ce1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce22:	f3ef 8411 	mrs	r4, BASEPRI
   1ce26:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce2a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1ce2e:	f7fb fdd3 	bl	189d8 <next_timeout>
	__asm__ volatile(
   1ce32:	f384 8811 	msr	BASEPRI, r4
   1ce36:	f3bf 8f6f 	isb	sy
}
   1ce3a:	bd10      	pop	{r4, pc}

0001ce3c <z_set_timeout_expiry>:
{
   1ce3c:	b570      	push	{r4, r5, r6, lr}
   1ce3e:	4604      	mov	r4, r0
   1ce40:	460d      	mov	r5, r1
	__asm__ volatile(
   1ce42:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce46:	f3ef 8611 	mrs	r6, BASEPRI
   1ce4a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce4e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1ce52:	f7fb fdc1 	bl	189d8 <next_timeout>
			      || (ticks <= next_to);
   1ce56:	2801      	cmp	r0, #1
   1ce58:	dd07      	ble.n	1ce6a <z_set_timeout_expiry+0x2e>
   1ce5a:	42a0      	cmp	r0, r4
   1ce5c:	db05      	blt.n	1ce6a <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1ce5e:	42a0      	cmp	r0, r4
   1ce60:	4629      	mov	r1, r5
   1ce62:	bfa8      	it	ge
   1ce64:	4620      	movge	r0, r4
   1ce66:	f7f9 f943 	bl	160f0 <sys_clock_set_timeout>
	__asm__ volatile(
   1ce6a:	f386 8811 	msr	BASEPRI, r6
   1ce6e:	f3bf 8f6f 	isb	sy
}
   1ce72:	bd70      	pop	{r4, r5, r6, pc}

0001ce74 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1ce74:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1ce76:	f7fb fecb 	bl	18c10 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1ce7a:	bd08      	pop	{r3, pc}

0001ce7c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1ce7c:	f7fb bec8 	b.w	18c10 <sys_clock_tick_get>

0001ce80 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1ce80:	b108      	cbz	r0, 1ce86 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1ce82:	f7f4 bbc1 	b.w	11608 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1ce86:	4770      	bx	lr

0001ce88 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ce88:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1ce8c:	bf08      	it	eq
   1ce8e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1ce92:	b538      	push	{r3, r4, r5, lr}
   1ce94:	460c      	mov	r4, r1
   1ce96:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ce98:	d014      	beq.n	1cec4 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ce9a:	4308      	orrs	r0, r1
   1ce9c:	d103      	bne.n	1cea6 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1ce9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1cea2:	f7fb beb5 	b.w	18c10 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1cea6:	f06f 0001 	mvn.w	r0, #1
   1ceaa:	1b40      	subs	r0, r0, r5
   1ceac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ceb0:	eb63 0101 	sbc.w	r1, r3, r1
   1ceb4:	2900      	cmp	r1, #0
   1ceb6:	da04      	bge.n	1cec2 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   1ceb8:	f7fb feaa 	bl	18c10 <sys_clock_tick_get>
   1cebc:	1940      	adds	r0, r0, r5
   1cebe:	eb41 0104 	adc.w	r1, r1, r4
}
   1cec2:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1cec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cec8:	4601      	mov	r1, r0
   1ceca:	e7fa      	b.n	1cec2 <sys_clock_timeout_end_calc+0x3a>

0001cecc <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1cecc:	b510      	push	{r4, lr}
   1cece:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   1ced0:	f7ff ff8e 	bl	1cdf0 <z_abort_timeout>

	if (inactive) {
   1ced4:	b9b0      	cbnz	r0, 1cf04 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1ced6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ced8:	b10b      	cbz	r3, 1cede <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1ceda:	4620      	mov	r0, r4
   1cedc:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1cede:	f104 0018 	add.w	r0, r4, #24
   1cee2:	f7ff fef5 	bl	1ccd0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1cee6:	b168      	cbz	r0, 1cf04 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1cee8:	f7ff fed2 	bl	1cc90 <z_ready_thread>
	__asm__ volatile(
   1ceec:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cef0:	f3ef 8011 	mrs	r0, BASEPRI
   1cef4:	f383 8812 	msr	BASEPRI_MAX, r3
   1cef8:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1cefc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cf00:	f7ff bf2d 	b.w	1cd5e <z_reschedule_irqlock>
   1cf04:	bd10      	pop	{r4, pc}

0001cf06 <add_event>:
{
   1cf06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cf08:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1cf0a:	e9d0 1300 	ldrd	r1, r3, [r0]
   1cf0e:	4288      	cmp	r0, r1
   1cf10:	4604      	mov	r4, r0
   1cf12:	d105      	bne.n	1cf20 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   1cf14:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1cf16:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1cf1a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1cf1c:	6065      	str	r5, [r4, #4]
   1cf1e:	e01d      	b.n	1cf5c <add_event+0x56>
	if ((pending == NULL) ||
   1cf20:	2b00      	cmp	r3, #0
   1cf22:	d0f7      	beq.n	1cf14 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1cf24:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1cf26:	b100      	cbz	r0, 1cf2a <add_event+0x24>
   1cf28:	3860      	subs	r0, #96	; 0x60
   1cf2a:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1cf2e:	4639      	mov	r1, r7
   1cf30:	f7ff fe5b 	bl	1cbea <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1cf34:	2800      	cmp	r0, #0
   1cf36:	dced      	bgt.n	1cf14 <add_event+0xe>
	return list->head == list;
   1cf38:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cf3a:	42b4      	cmp	r4, r6
   1cf3c:	d0ea      	beq.n	1cf14 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1cf3e:	2e00      	cmp	r6, #0
   1cf40:	d0e8      	beq.n	1cf14 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1cf42:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1cf44:	b101      	cbz	r1, 1cf48 <add_event+0x42>
   1cf46:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1cf48:	4638      	mov	r0, r7
   1cf4a:	f7ff fe4e 	bl	1cbea <z_sched_prio_cmp>
   1cf4e:	2800      	cmp	r0, #0
   1cf50:	dd05      	ble.n	1cf5e <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   1cf52:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1cf54:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1cf58:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1cf5a:	6075      	str	r5, [r6, #4]
}
   1cf5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1cf5e:	6863      	ldr	r3, [r4, #4]
   1cf60:	429e      	cmp	r6, r3
   1cf62:	d0d7      	beq.n	1cf14 <add_event+0xe>
   1cf64:	6836      	ldr	r6, [r6, #0]
   1cf66:	e7ea      	b.n	1cf3e <add_event+0x38>

0001cf68 <register_events>:
{
   1cf68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1cf6c:	2500      	movs	r5, #0
{
   1cf6e:	468b      	mov	fp, r1
   1cf70:	4614      	mov	r4, r2
   1cf72:	461f      	mov	r7, r3
   1cf74:	4682      	mov	sl, r0
	int events_registered = 0;
   1cf76:	462e      	mov	r6, r5
	event->poller = NULL;
   1cf78:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1cf7a:	455d      	cmp	r5, fp
   1cf7c:	db02      	blt.n	1cf84 <register_events+0x1c>
}
   1cf7e:	4630      	mov	r0, r6
   1cf80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf84:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cf88:	f3ef 8911 	mrs	r9, BASEPRI
   1cf8c:	f383 8812 	msr	BASEPRI_MAX, r3
   1cf90:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1cf94:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1cf98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1cf9c:	3b01      	subs	r3, #1
   1cf9e:	2b07      	cmp	r3, #7
   1cfa0:	d80f      	bhi.n	1cfc2 <register_events+0x5a>
   1cfa2:	e8df f003 	tbb	[pc, r3]
   1cfa6:	041e      	.short	0x041e
   1cfa8:	0e0e0a0e 	.word	0x0e0e0a0e
   1cfac:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   1cfae:	f8da 3010 	ldr.w	r3, [sl, #16]
   1cfb2:	689b      	ldr	r3, [r3, #8]
   1cfb4:	b12b      	cbz	r3, 1cfc2 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1cfb6:	2302      	movs	r3, #2
   1cfb8:	e020      	b.n	1cffc <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1cfba:	f8da 3010 	ldr.w	r3, [sl, #16]
   1cfbe:	681b      	ldr	r3, [r3, #0]
   1cfc0:	bb8b      	cbnz	r3, 1d026 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1cfc2:	bb47      	cbnz	r7, 1d016 <register_events+0xae>
   1cfc4:	7823      	ldrb	r3, [r4, #0]
   1cfc6:	b333      	cbz	r3, 1d016 <register_events+0xae>
	switch (event->type) {
   1cfc8:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1cfcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1cfd0:	3b01      	subs	r3, #1
   1cfd2:	2b07      	cmp	r3, #7
   1cfd4:	d830      	bhi.n	1d038 <register_events+0xd0>
   1cfd6:	e8df f003 	tbb	[pc, r3]
   1cfda:	2833      	.short	0x2833
   1cfdc:	2f2f282f 	.word	0x2f2f282f
   1cfe0:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   1cfe2:	f8da 3010 	ldr.w	r3, [sl, #16]
   1cfe6:	689b      	ldr	r3, [r3, #8]
   1cfe8:	2b00      	cmp	r3, #0
   1cfea:	d0ea      	beq.n	1cfc2 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1cfec:	2301      	movs	r3, #1
   1cfee:	e005      	b.n	1cffc <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1cff0:	f8da 3010 	ldr.w	r3, [sl, #16]
   1cff4:	6a1b      	ldr	r3, [r3, #32]
   1cff6:	2b00      	cmp	r3, #0
   1cff8:	d0e3      	beq.n	1cfc2 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1cffa:	2310      	movs	r3, #16
	event->state |= state;
   1cffc:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1d000:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1d004:	f3c2 3186 	ubfx	r1, r2, #14, #7
   1d008:	430b      	orrs	r3, r1
   1d00a:	f363 3294 	bfi	r2, r3, #14, #7
   1d00e:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1d012:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1d016:	f389 8811 	msr	BASEPRI, r9
   1d01a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1d01e:	3501      	adds	r5, #1
   1d020:	f10a 0a14 	add.w	sl, sl, #20
   1d024:	e7a9      	b.n	1cf7a <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1d026:	2304      	movs	r3, #4
   1d028:	e7e8      	b.n	1cffc <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1d02a:	f8da 0010 	ldr.w	r0, [sl, #16]
   1d02e:	4622      	mov	r2, r4
   1d030:	4651      	mov	r1, sl
   1d032:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1d034:	f7ff ff67 	bl	1cf06 <add_event>
	event->poller = poller;
   1d038:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1d03c:	3601      	adds	r6, #1
   1d03e:	e7ea      	b.n	1d016 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1d040:	f8da 0010 	ldr.w	r0, [sl, #16]
   1d044:	4622      	mov	r2, r4
   1d046:	4651      	mov	r1, sl
   1d048:	e7f4      	b.n	1d034 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1d04a:	f8da 0010 	ldr.w	r0, [sl, #16]
   1d04e:	4622      	mov	r2, r4
   1d050:	4651      	mov	r1, sl
   1d052:	3024      	adds	r0, #36	; 0x24
   1d054:	e7ee      	b.n	1d034 <register_events+0xcc>

0001d056 <signal_poll_event>:
{
   1d056:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1d05a:	6884      	ldr	r4, [r0, #8]
{
   1d05c:	4605      	mov	r5, r0
   1d05e:	460e      	mov	r6, r1
	if (poller != NULL) {
   1d060:	b144      	cbz	r4, 1d074 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1d062:	7863      	ldrb	r3, [r4, #1]
   1d064:	2b01      	cmp	r3, #1
   1d066:	d12e      	bne.n	1d0c6 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   1d068:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1d06c:	f013 0302 	ands.w	r3, r3, #2
   1d070:	d10a      	bne.n	1d088 <signal_poll_event+0x32>
		poller->is_polling = false;
   1d072:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1d074:	68eb      	ldr	r3, [r5, #12]
   1d076:	f3c3 3286 	ubfx	r2, r3, #14, #7
   1d07a:	4316      	orrs	r6, r2
	event->poller = NULL;
   1d07c:	2000      	movs	r0, #0
	event->state |= state;
   1d07e:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   1d082:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1d084:	60eb      	str	r3, [r5, #12]
	return retcode;
   1d086:	e03e      	b.n	1d106 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   1d088:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1d08c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1d090:	bf08      	it	eq
   1d092:	f112 0f02 	cmneq.w	r2, #2
   1d096:	d032      	beq.n	1d0fe <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d098:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1d09c:	4640      	mov	r0, r8
   1d09e:	f7ff fe4a 	bl	1cd36 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1d0a2:	2e08      	cmp	r6, #8
   1d0a4:	bf0c      	ite	eq
   1d0a6:	f06f 0303 	mvneq.w	r3, #3
   1d0aa:	2300      	movne	r3, #0
   1d0ac:	6123      	str	r3, [r4, #16]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d0ae:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1d0b2:	06db      	lsls	r3, r3, #27
   1d0b4:	d109      	bne.n	1d0ca <signal_poll_event+0x74>
   1d0b6:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1d0ba:	b937      	cbnz	r7, 1d0ca <signal_poll_event+0x74>
	z_ready_thread(thread);
   1d0bc:	4640      	mov	r0, r8
   1d0be:	f7ff fde7 	bl	1cc90 <z_ready_thread>
		poller->is_polling = false;
   1d0c2:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1d0c4:	e7d6      	b.n	1d074 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1d0c6:	2b02      	cmp	r3, #2
   1d0c8:	d001      	beq.n	1d0ce <signal_poll_event+0x78>
		poller->is_polling = false;
   1d0ca:	2300      	movs	r3, #0
   1d0cc:	e7d1      	b.n	1d072 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1d0ce:	7823      	ldrb	r3, [r4, #0]
   1d0d0:	2b00      	cmp	r3, #0
   1d0d2:	d0cf      	beq.n	1d074 <signal_poll_event+0x1e>
   1d0d4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1d0d8:	2f00      	cmp	r7, #0
   1d0da:	d0f2      	beq.n	1d0c2 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1d0dc:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1d0e0:	f1a4 0914 	sub.w	r9, r4, #20
   1d0e4:	f104 0014 	add.w	r0, r4, #20
   1d0e8:	f7ff fe82 	bl	1cdf0 <z_abort_timeout>
		twork->poll_result = 0;
   1d0ec:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   1d0f0:	4649      	mov	r1, r9
   1d0f2:	4638      	mov	r0, r7
   1d0f4:	f7ff fce9 	bl	1caca <z_work_submit_to_queue>
		poller->is_polling = false;
   1d0f8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1d0fc:	e7ba      	b.n	1d074 <signal_poll_event+0x1e>
		poller->is_polling = false;
   1d0fe:	2300      	movs	r3, #0
   1d100:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1d102:	f06f 000a 	mvn.w	r0, #10
}
   1d106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d10a <clear_event_registrations>:
	while (num_events--) {
   1d10a:	2314      	movs	r3, #20
{
   1d10c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d10e:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   1d112:	2400      	movs	r4, #0
	switch (event->type) {
   1d114:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   1d118:	b901      	cbnz	r1, 1d11c <clear_event_registrations+0x12>
}
   1d11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   1d11c:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   1d120:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1d124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1d128:	2b08      	cmp	r3, #8
   1d12a:	f1a0 0714 	sub.w	r7, r0, #20
   1d12e:	d80c      	bhi.n	1d14a <clear_event_registrations+0x40>
   1d130:	fa26 f303 	lsr.w	r3, r6, r3
   1d134:	07db      	lsls	r3, r3, #31
   1d136:	d508      	bpl.n	1d14a <clear_event_registrations+0x40>
	return node->next != NULL;
   1d138:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1d13c:	b12b      	cbz	r3, 1d14a <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   1d13e:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1d142:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1d144:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1d146:	e940 4405 	strd	r4, r4, [r0, #-20]
   1d14a:	f382 8811 	msr	BASEPRI, r2
   1d14e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d152:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d156:	f3ef 8211 	mrs	r2, BASEPRI
   1d15a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d15e:	f3bf 8f6f 	isb	sy
   1d162:	3901      	subs	r1, #1
   1d164:	4638      	mov	r0, r7
   1d166:	e7d7      	b.n	1d118 <clear_event_registrations+0xe>

0001d168 <k_poll_event_init>:
{
   1d168:	b510      	push	{r4, lr}
	event->type = type;
   1d16a:	0552      	lsls	r2, r2, #21
   1d16c:	0209      	lsls	r1, r1, #8
   1d16e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   1d172:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   1d176:	430a      	orrs	r2, r1
   1d178:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1d17a:	2400      	movs	r4, #0
	event->type = type;
   1d17c:	430a      	orrs	r2, r1
	event->obj = obj;
   1d17e:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   1d182:	6084      	str	r4, [r0, #8]
}
   1d184:	bd10      	pop	{r4, pc}

0001d186 <z_handle_obj_poll_events>:
{
   1d186:	4603      	mov	r3, r0
	return list->head == list;
   1d188:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1d18a:	4283      	cmp	r3, r0
   1d18c:	d008      	beq.n	1d1a0 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1d18e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1d192:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d194:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d196:	2300      	movs	r3, #0
	node->prev = NULL;
   1d198:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1d19c:	f7ff bf5b 	b.w	1d056 <signal_poll_event>
}
   1d1a0:	4770      	bx	lr

0001d1a2 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   1d1a2:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   1d1a4:	e9c0 0000 	strd	r0, r0, [r0]
   1d1a8:	6083      	str	r3, [r0, #8]
}
   1d1aa:	4770      	bx	lr

0001d1ac <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   1d1ac:	2300      	movs	r3, #0
   1d1ae:	6083      	str	r3, [r0, #8]
}
   1d1b0:	4770      	bx	lr

0001d1b2 <k_free>:
	if (ptr != NULL) {
   1d1b2:	b120      	cbz	r0, 1d1be <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1d1b4:	1f01      	subs	r1, r0, #4
   1d1b6:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1d1ba:	f7ff baa9 	b.w	1c710 <k_heap_free>
}
   1d1be:	4770      	bx	lr

0001d1c0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1d1c0:	4770      	bx	lr

0001d1c2 <memcmp>:
   1d1c2:	b510      	push	{r4, lr}
   1d1c4:	3901      	subs	r1, #1
   1d1c6:	4402      	add	r2, r0
   1d1c8:	4290      	cmp	r0, r2
   1d1ca:	d101      	bne.n	1d1d0 <memcmp+0xe>
   1d1cc:	2000      	movs	r0, #0
   1d1ce:	e005      	b.n	1d1dc <memcmp+0x1a>
   1d1d0:	7803      	ldrb	r3, [r0, #0]
   1d1d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1d1d6:	42a3      	cmp	r3, r4
   1d1d8:	d001      	beq.n	1d1de <memcmp+0x1c>
   1d1da:	1b18      	subs	r0, r3, r4
   1d1dc:	bd10      	pop	{r4, pc}
   1d1de:	3001      	adds	r0, #1
   1d1e0:	e7f2      	b.n	1d1c8 <memcmp+0x6>

0001d1e2 <memcpy>:
   1d1e2:	440a      	add	r2, r1
   1d1e4:	4291      	cmp	r1, r2
   1d1e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1d1ea:	d100      	bne.n	1d1ee <memcpy+0xc>
   1d1ec:	4770      	bx	lr
   1d1ee:	b510      	push	{r4, lr}
   1d1f0:	f811 4b01 	ldrb.w	r4, [r1], #1
   1d1f4:	f803 4f01 	strb.w	r4, [r3, #1]!
   1d1f8:	4291      	cmp	r1, r2
   1d1fa:	d1f9      	bne.n	1d1f0 <memcpy+0xe>
   1d1fc:	bd10      	pop	{r4, pc}

0001d1fe <memset>:
   1d1fe:	4402      	add	r2, r0
   1d200:	4603      	mov	r3, r0
   1d202:	4293      	cmp	r3, r2
   1d204:	d100      	bne.n	1d208 <memset+0xa>
   1d206:	4770      	bx	lr
   1d208:	f803 1b01 	strb.w	r1, [r3], #1
   1d20c:	e7f9      	b.n	1d202 <memset+0x4>

0001d20e <strcpy>:
   1d20e:	4603      	mov	r3, r0
   1d210:	f811 2b01 	ldrb.w	r2, [r1], #1
   1d214:	f803 2b01 	strb.w	r2, [r3], #1
   1d218:	2a00      	cmp	r2, #0
   1d21a:	d1f9      	bne.n	1d210 <strcpy+0x2>
   1d21c:	4770      	bx	lr

0001d21e <strnlen>:
   1d21e:	b510      	push	{r4, lr}
   1d220:	4602      	mov	r2, r0
   1d222:	4401      	add	r1, r0
   1d224:	428a      	cmp	r2, r1
   1d226:	4613      	mov	r3, r2
   1d228:	d003      	beq.n	1d232 <strnlen+0x14>
   1d22a:	781c      	ldrb	r4, [r3, #0]
   1d22c:	3201      	adds	r2, #1
   1d22e:	2c00      	cmp	r4, #0
   1d230:	d1f8      	bne.n	1d224 <strnlen+0x6>
   1d232:	1a18      	subs	r0, r3, r0
   1d234:	bd10      	pop	{r4, pc}
	...
