
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 2d 00 20 8d cb 00 00 1d 23 01 00 61 cb 00 00     .-. .....#..a...
  10:	61 cb 00 00 61 cb 00 00 61 cb 00 00 00 00 00 00     a...a...a.......
	...
  2c:	6d c8 00 00 61 cb 00 00 00 00 00 00 19 c8 00 00     m...a...........
  3c:	61 cb 00 00                                         a...

00000040 <_irq_vector_table>:
  40:	1d c9 00 00 bd 2a 01 00 1d c9 00 00 1d c9 00 00     .....*..........
  50:	1d c9 00 00 1d c9 00 00 1d c9 00 00 1d c9 00 00     ................
  60:	6b 2a 01 00 1d c9 00 00 1d c9 00 00 a3 2a 01 00     k*...........*..
  70:	1d c9 00 00 1d c9 00 00 1d c9 00 00 1d c9 00 00     ................
  80:	1d c9 00 00 1d c9 00 00 1d c9 00 00 1d c9 00 00     ................
  90:	1d c9 00 00 1d c9 00 00 1d c9 00 00 1d c9 00 00     ................
  a0:	1d c9 00 00 1d c9 00 00 1d c9 00 00 1d c9 00 00     ................
  b0:	1d c9 00 00 1d c9 00 00                             ........

Disassembly of section text:

000000b8 <__aeabi_fmul>:
      b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
      bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
      c0:	bf1e      	ittt	ne
      c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
      c6:	ea92 0f0c 	teqne	r2, ip
      ca:	ea93 0f0c 	teqne	r3, ip
      ce:	d06f      	beq.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
      d0:	441a      	add	r2, r3
      d2:	ea80 0c01 	eor.w	ip, r0, r1
      d6:	0240      	lsls	r0, r0, #9
      d8:	bf18      	it	ne
      da:	ea5f 2141 	movsne.w	r1, r1, lsl #9
      de:	d01e      	beq.n	11e <CONFIG_IDLE_STACK_SIZE+0x1e>
      e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
      e4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
      e8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
      ec:	fba0 3101 	umull	r3, r1, r0, r1
      f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
      f4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
      f8:	bf3e      	ittt	cc
      fa:	0049      	lslcc	r1, r1, #1
      fc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     100:	005b      	lslcc	r3, r3, #1
     102:	ea40 0001 	orr.w	r0, r0, r1
     106:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     10a:	2afd      	cmp	r2, #253	; 0xfd
     10c:	d81d      	bhi.n	14a <CONFIG_IDLE_STACK_SIZE+0x4a>
     10e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     112:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     116:	bf08      	it	eq
     118:	f020 0001 	biceq.w	r0, r0, #1
     11c:	4770      	bx	lr
     11e:	f090 0f00 	teq	r0, #0
     122:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     126:	bf08      	it	eq
     128:	0249      	lsleq	r1, r1, #9
     12a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     12e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     132:	3a7f      	subs	r2, #127	; 0x7f
     134:	bfc2      	ittt	gt
     136:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     13a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     13e:	4770      	bxgt	lr
     140:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     144:	f04f 0300 	mov.w	r3, #0
     148:	3a01      	subs	r2, #1
     14a:	dc5d      	bgt.n	208 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x14>
     14c:	f112 0f19 	cmn.w	r2, #25
     150:	bfdc      	itt	le
     152:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     156:	4770      	bxle	lr
     158:	f1c2 0200 	rsb	r2, r2, #0
     15c:	0041      	lsls	r1, r0, #1
     15e:	fa21 f102 	lsr.w	r1, r1, r2
     162:	f1c2 0220 	rsb	r2, r2, #32
     166:	fa00 fc02 	lsl.w	ip, r0, r2
     16a:	ea5f 0031 	movs.w	r0, r1, rrx
     16e:	f140 0000 	adc.w	r0, r0, #0
     172:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     176:	bf08      	it	eq
     178:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     17c:	4770      	bx	lr
     17e:	f092 0f00 	teq	r2, #0
     182:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     186:	bf02      	ittt	eq
     188:	0040      	lsleq	r0, r0, #1
     18a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     18e:	3a01      	subeq	r2, #1
     190:	d0f9      	beq.n	186 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19>
     192:	ea40 000c 	orr.w	r0, r0, ip
     196:	f093 0f00 	teq	r3, #0
     19a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     19e:	bf02      	ittt	eq
     1a0:	0049      	lsleq	r1, r1, #1
     1a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1a6:	3b01      	subeq	r3, #1
     1a8:	d0f9      	beq.n	19e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x31>
     1aa:	ea41 010c 	orr.w	r1, r1, ip
     1ae:	e78f      	b.n	d0 <CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE+0x8>
     1b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1b4:	ea92 0f0c 	teq	r2, ip
     1b8:	bf18      	it	ne
     1ba:	ea93 0f0c 	teqne	r3, ip
     1be:	d00a      	beq.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     1c4:	bf18      	it	ne
     1c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     1ca:	d1d8      	bne.n	17e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11>
     1cc:	ea80 0001 	eor.w	r0, r0, r1
     1d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     1d4:	4770      	bx	lr
     1d6:	f090 0f00 	teq	r0, #0
     1da:	bf17      	itett	ne
     1dc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     1e0:	4608      	moveq	r0, r1
     1e2:	f091 0f00 	teqne	r1, #0
     1e6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     1ea:	d014      	beq.n	216 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x22>
     1ec:	ea92 0f0c 	teq	r2, ip
     1f0:	d101      	bne.n	1f6 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x2>
     1f2:	0242      	lsls	r2, r0, #9
     1f4:	d10f      	bne.n	216 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x22>
     1f6:	ea93 0f0c 	teq	r3, ip
     1fa:	d103      	bne.n	204 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x10>
     1fc:	024b      	lsls	r3, r1, #9
     1fe:	bf18      	it	ne
     200:	4608      	movne	r0, r1
     202:	d108      	bne.n	216 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x22>
     204:	ea80 0001 	eor.w	r0, r0, r1
     208:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     20c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     210:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     214:	4770      	bx	lr
     216:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     21a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     21e:	4770      	bx	lr

00000220 <__aeabi_drsub>:
     220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     224:	e002      	b.n	22c <__adddf3>
     226:	bf00      	nop

00000228 <__aeabi_dsub>:
     228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000022c <__adddf3>:
     22c:	b530      	push	{r4, r5, lr}
     22e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     232:	ea4f 0543 	mov.w	r5, r3, lsl #1
     236:	ea94 0f05 	teq	r4, r5
     23a:	bf08      	it	eq
     23c:	ea90 0f02 	teqeq	r0, r2
     240:	bf1f      	itttt	ne
     242:	ea54 0c00 	orrsne.w	ip, r4, r0
     246:	ea55 0c02 	orrsne.w	ip, r5, r2
     24a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     24e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     252:	f000 80e2 	beq.w	41a <CONFIG_BT_RX_STACK_SIZE+0x1a>
     256:	ea4f 5454 	mov.w	r4, r4, lsr #21
     25a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     25e:	bfb8      	it	lt
     260:	426d      	neglt	r5, r5
     262:	dd0c      	ble.n	27e <__adddf3+0x52>
     264:	442c      	add	r4, r5
     266:	ea80 0202 	eor.w	r2, r0, r2
     26a:	ea81 0303 	eor.w	r3, r1, r3
     26e:	ea82 0000 	eor.w	r0, r2, r0
     272:	ea83 0101 	eor.w	r1, r3, r1
     276:	ea80 0202 	eor.w	r2, r0, r2
     27a:	ea81 0303 	eor.w	r3, r1, r3
     27e:	2d36      	cmp	r5, #54	; 0x36
     280:	bf88      	it	hi
     282:	bd30      	pophi	{r4, r5, pc}
     284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     288:	ea4f 3101 	mov.w	r1, r1, lsl #12
     28c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     294:	d002      	beq.n	29c <__adddf3+0x70>
     296:	4240      	negs	r0, r0
     298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     29c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     2a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     2a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     2a8:	d002      	beq.n	2b0 <__adddf3+0x84>
     2aa:	4252      	negs	r2, r2
     2ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2b0:	ea94 0f05 	teq	r4, r5
     2b4:	f000 80a7 	beq.w	406 <CONFIG_BT_RX_STACK_SIZE+0x6>
     2b8:	f1a4 0401 	sub.w	r4, r4, #1
     2bc:	f1d5 0e20 	rsbs	lr, r5, #32
     2c0:	db0d      	blt.n	2de <__adddf3+0xb2>
     2c2:	fa02 fc0e 	lsl.w	ip, r2, lr
     2c6:	fa22 f205 	lsr.w	r2, r2, r5
     2ca:	1880      	adds	r0, r0, r2
     2cc:	f141 0100 	adc.w	r1, r1, #0
     2d0:	fa03 f20e 	lsl.w	r2, r3, lr
     2d4:	1880      	adds	r0, r0, r2
     2d6:	fa43 f305 	asr.w	r3, r3, r5
     2da:	4159      	adcs	r1, r3
     2dc:	e00e      	b.n	2fc <__adddf3+0xd0>
     2de:	f1a5 0520 	sub.w	r5, r5, #32
     2e2:	f10e 0e20 	add.w	lr, lr, #32
     2e6:	2a01      	cmp	r2, #1
     2e8:	fa03 fc0e 	lsl.w	ip, r3, lr
     2ec:	bf28      	it	cs
     2ee:	f04c 0c02 	orrcs.w	ip, ip, #2
     2f2:	fa43 f305 	asr.w	r3, r3, r5
     2f6:	18c0      	adds	r0, r0, r3
     2f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     2fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     300:	d507      	bpl.n	312 <__adddf3+0xe6>
     302:	f04f 0e00 	mov.w	lr, #0
     306:	f1dc 0c00 	rsbs	ip, ip, #0
     30a:	eb7e 0000 	sbcs.w	r0, lr, r0
     30e:	eb6e 0101 	sbc.w	r1, lr, r1
     312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     316:	d31b      	bcc.n	350 <__adddf3+0x124>
     318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     31c:	d30c      	bcc.n	338 <__adddf3+0x10c>
     31e:	0849      	lsrs	r1, r1, #1
     320:	ea5f 0030 	movs.w	r0, r0, rrx
     324:	ea4f 0c3c 	mov.w	ip, ip, rrx
     328:	f104 0401 	add.w	r4, r4, #1
     32c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     334:	f080 809a 	bcs.w	46c <CONFIG_BT_RX_STACK_SIZE+0x6c>
     338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     33c:	bf08      	it	eq
     33e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     342:	f150 0000 	adcs.w	r0, r0, #0
     346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     34a:	ea41 0105 	orr.w	r1, r1, r5
     34e:	bd30      	pop	{r4, r5, pc}
     350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     354:	4140      	adcs	r0, r0
     356:	eb41 0101 	adc.w	r1, r1, r1
     35a:	3c01      	subs	r4, #1
     35c:	bf28      	it	cs
     35e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     362:	d2e9      	bcs.n	338 <__adddf3+0x10c>
     364:	f091 0f00 	teq	r1, #0
     368:	bf04      	itt	eq
     36a:	4601      	moveq	r1, r0
     36c:	2000      	moveq	r0, #0
     36e:	fab1 f381 	clz	r3, r1
     372:	bf08      	it	eq
     374:	3320      	addeq	r3, #32
     376:	f1a3 030b 	sub.w	r3, r3, #11
     37a:	f1b3 0220 	subs.w	r2, r3, #32
     37e:	da0c      	bge.n	39a <__adddf3+0x16e>
     380:	320c      	adds	r2, #12
     382:	dd08      	ble.n	396 <__adddf3+0x16a>
     384:	f102 0c14 	add.w	ip, r2, #20
     388:	f1c2 020c 	rsb	r2, r2, #12
     38c:	fa01 f00c 	lsl.w	r0, r1, ip
     390:	fa21 f102 	lsr.w	r1, r1, r2
     394:	e00c      	b.n	3b0 <__adddf3+0x184>
     396:	f102 0214 	add.w	r2, r2, #20
     39a:	bfd8      	it	le
     39c:	f1c2 0c20 	rsble	ip, r2, #32
     3a0:	fa01 f102 	lsl.w	r1, r1, r2
     3a4:	fa20 fc0c 	lsr.w	ip, r0, ip
     3a8:	bfdc      	itt	le
     3aa:	ea41 010c 	orrle.w	r1, r1, ip
     3ae:	4090      	lslle	r0, r2
     3b0:	1ae4      	subs	r4, r4, r3
     3b2:	bfa2      	ittt	ge
     3b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     3b8:	4329      	orrge	r1, r5
     3ba:	bd30      	popge	{r4, r5, pc}
     3bc:	ea6f 0404 	mvn.w	r4, r4
     3c0:	3c1f      	subs	r4, #31
     3c2:	da1c      	bge.n	3fe <__adddf3+0x1d2>
     3c4:	340c      	adds	r4, #12
     3c6:	dc0e      	bgt.n	3e6 <__adddf3+0x1ba>
     3c8:	f104 0414 	add.w	r4, r4, #20
     3cc:	f1c4 0220 	rsb	r2, r4, #32
     3d0:	fa20 f004 	lsr.w	r0, r0, r4
     3d4:	fa01 f302 	lsl.w	r3, r1, r2
     3d8:	ea40 0003 	orr.w	r0, r0, r3
     3dc:	fa21 f304 	lsr.w	r3, r1, r4
     3e0:	ea45 0103 	orr.w	r1, r5, r3
     3e4:	bd30      	pop	{r4, r5, pc}
     3e6:	f1c4 040c 	rsb	r4, r4, #12
     3ea:	f1c4 0220 	rsb	r2, r4, #32
     3ee:	fa20 f002 	lsr.w	r0, r0, r2
     3f2:	fa01 f304 	lsl.w	r3, r1, r4
     3f6:	ea40 0003 	orr.w	r0, r0, r3
     3fa:	4629      	mov	r1, r5
     3fc:	bd30      	pop	{r4, r5, pc}
     3fe:	fa21 f004 	lsr.w	r0, r1, r4
     402:	4629      	mov	r1, r5
     404:	bd30      	pop	{r4, r5, pc}
     406:	f094 0f00 	teq	r4, #0
     40a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     40e:	bf06      	itte	eq
     410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     414:	3401      	addeq	r4, #1
     416:	3d01      	subne	r5, #1
     418:	e74e      	b.n	2b8 <__adddf3+0x8c>
     41a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     41e:	bf18      	it	ne
     420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     424:	d029      	beq.n	47a <__data_size+0x6>
     426:	ea94 0f05 	teq	r4, r5
     42a:	bf08      	it	eq
     42c:	ea90 0f02 	teqeq	r0, r2
     430:	d005      	beq.n	43e <CONFIG_BT_RX_STACK_SIZE+0x3e>
     432:	ea54 0c00 	orrs.w	ip, r4, r0
     436:	bf04      	itt	eq
     438:	4619      	moveq	r1, r3
     43a:	4610      	moveq	r0, r2
     43c:	bd30      	pop	{r4, r5, pc}
     43e:	ea91 0f03 	teq	r1, r3
     442:	bf1e      	ittt	ne
     444:	2100      	movne	r1, #0
     446:	2000      	movne	r0, #0
     448:	bd30      	popne	{r4, r5, pc}
     44a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     44e:	d105      	bne.n	45c <CONFIG_BT_RX_STACK_SIZE+0x5c>
     450:	0040      	lsls	r0, r0, #1
     452:	4149      	adcs	r1, r1
     454:	bf28      	it	cs
     456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     45a:	bd30      	pop	{r4, r5, pc}
     45c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     460:	bf3c      	itt	cc
     462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     466:	bd30      	popcc	{r4, r5, pc}
     468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     46c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     474:	f04f 0000 	mov.w	r0, #0
     478:	bd30      	pop	{r4, r5, pc}
     47a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     47e:	bf1a      	itte	ne
     480:	4619      	movne	r1, r3
     482:	4610      	movne	r0, r2
     484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     488:	bf1c      	itt	ne
     48a:	460b      	movne	r3, r1
     48c:	4602      	movne	r2, r0
     48e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     492:	bf06      	itte	eq
     494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     498:	ea91 0f03 	teqeq	r1, r3
     49c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     4a0:	bd30      	pop	{r4, r5, pc}
     4a2:	bf00      	nop

000004a4 <__aeabi_ui2d>:
     4a4:	f090 0f00 	teq	r0, #0
     4a8:	bf04      	itt	eq
     4aa:	2100      	moveq	r1, #0
     4ac:	4770      	bxeq	lr
     4ae:	b530      	push	{r4, r5, lr}
     4b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4b8:	f04f 0500 	mov.w	r5, #0
     4bc:	f04f 0100 	mov.w	r1, #0
     4c0:	e750      	b.n	364 <__adddf3+0x138>
     4c2:	bf00      	nop

000004c4 <__aeabi_i2d>:
     4c4:	f090 0f00 	teq	r0, #0
     4c8:	bf04      	itt	eq
     4ca:	2100      	moveq	r1, #0
     4cc:	4770      	bxeq	lr
     4ce:	b530      	push	{r4, r5, lr}
     4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     4dc:	bf48      	it	mi
     4de:	4240      	negmi	r0, r0
     4e0:	f04f 0100 	mov.w	r1, #0
     4e4:	e73e      	b.n	364 <__adddf3+0x138>
     4e6:	bf00      	nop

000004e8 <__aeabi_f2d>:
     4e8:	0042      	lsls	r2, r0, #1
     4ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
     4ee:	ea4f 0131 	mov.w	r1, r1, rrx
     4f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     4f6:	bf1f      	itttt	ne
     4f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     4fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     504:	4770      	bxne	lr
     506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     50a:	bf08      	it	eq
     50c:	4770      	bxeq	lr
     50e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     512:	bf04      	itt	eq
     514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     518:	4770      	bxeq	lr
     51a:	b530      	push	{r4, r5, lr}
     51c:	f44f 7460 	mov.w	r4, #896	; 0x380
     520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     528:	e71c      	b.n	364 <__adddf3+0x138>
     52a:	bf00      	nop

0000052c <__aeabi_ul2d>:
     52c:	ea50 0201 	orrs.w	r2, r0, r1
     530:	bf08      	it	eq
     532:	4770      	bxeq	lr
     534:	b530      	push	{r4, r5, lr}
     536:	f04f 0500 	mov.w	r5, #0
     53a:	e00a      	b.n	552 <__aeabi_l2d+0x16>

0000053c <__aeabi_l2d>:
     53c:	ea50 0201 	orrs.w	r2, r0, r1
     540:	bf08      	it	eq
     542:	4770      	bxeq	lr
     544:	b530      	push	{r4, r5, lr}
     546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     54a:	d502      	bpl.n	552 <__aeabi_l2d+0x16>
     54c:	4240      	negs	r0, r0
     54e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     552:	f44f 6480 	mov.w	r4, #1024	; 0x400
     556:	f104 0432 	add.w	r4, r4, #50	; 0x32
     55a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     55e:	f43f aed8 	beq.w	312 <__adddf3+0xe6>
     562:	f04f 0203 	mov.w	r2, #3
     566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     56a:	bf18      	it	ne
     56c:	3203      	addne	r2, #3
     56e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     572:	bf18      	it	ne
     574:	3203      	addne	r2, #3
     576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     57a:	f1c2 0320 	rsb	r3, r2, #32
     57e:	fa00 fc03 	lsl.w	ip, r0, r3
     582:	fa20 f002 	lsr.w	r0, r0, r2
     586:	fa01 fe03 	lsl.w	lr, r1, r3
     58a:	ea40 000e 	orr.w	r0, r0, lr
     58e:	fa21 f102 	lsr.w	r1, r1, r2
     592:	4414      	add	r4, r2
     594:	e6bd      	b.n	312 <__adddf3+0xe6>
     596:	bf00      	nop

00000598 <__aeabi_dmul>:
     598:	b570      	push	{r4, r5, r6, lr}
     59a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     59e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     5a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     5a6:	bf1d      	ittte	ne
     5a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     5ac:	ea94 0f0c 	teqne	r4, ip
     5b0:	ea95 0f0c 	teqne	r5, ip
     5b4:	f000 f8de 	bleq	774 <CONFIG_BT_HCI_TX_STACK_SIZE+0x174>
     5b8:	442c      	add	r4, r5
     5ba:	ea81 0603 	eor.w	r6, r1, r3
     5be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     5c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     5c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     5ca:	bf18      	it	ne
     5cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     5d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     5d8:	d038      	beq.n	64c <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     5da:	fba0 ce02 	umull	ip, lr, r0, r2
     5de:	f04f 0500 	mov.w	r5, #0
     5e2:	fbe1 e502 	umlal	lr, r5, r1, r2
     5e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     5ea:	fbe0 e503 	umlal	lr, r5, r0, r3
     5ee:	f04f 0600 	mov.w	r6, #0
     5f2:	fbe1 5603 	umlal	r5, r6, r1, r3
     5f6:	f09c 0f00 	teq	ip, #0
     5fa:	bf18      	it	ne
     5fc:	f04e 0e01 	orrne.w	lr, lr, #1
     600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     60c:	d204      	bcs.n	618 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     60e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     612:	416d      	adcs	r5, r5
     614:	eb46 0606 	adc.w	r6, r6, r6
     618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     61c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     62c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     630:	bf88      	it	hi
     632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     636:	d81e      	bhi.n	676 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     63c:	bf08      	it	eq
     63e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     642:	f150 0000 	adcs.w	r0, r0, #0
     646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     650:	ea46 0101 	orr.w	r1, r6, r1
     654:	ea40 0002 	orr.w	r0, r0, r2
     658:	ea81 0103 	eor.w	r1, r1, r3
     65c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     660:	bfc2      	ittt	gt
     662:	ebd4 050c 	rsbsgt	r5, r4, ip
     666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     66a:	bd70      	popgt	{r4, r5, r6, pc}
     66c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     670:	f04f 0e00 	mov.w	lr, #0
     674:	3c01      	subs	r4, #1
     676:	f300 80ab 	bgt.w	7d0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1d0>
     67a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     67e:	bfde      	ittt	le
     680:	2000      	movle	r0, #0
     682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     686:	bd70      	pople	{r4, r5, r6, pc}
     688:	f1c4 0400 	rsb	r4, r4, #0
     68c:	3c20      	subs	r4, #32
     68e:	da35      	bge.n	6fc <CONFIG_BT_HCI_TX_STACK_SIZE+0xfc>
     690:	340c      	adds	r4, #12
     692:	dc1b      	bgt.n	6cc <CONFIG_BT_HCI_TX_STACK_SIZE+0xcc>
     694:	f104 0414 	add.w	r4, r4, #20
     698:	f1c4 0520 	rsb	r5, r4, #32
     69c:	fa00 f305 	lsl.w	r3, r0, r5
     6a0:	fa20 f004 	lsr.w	r0, r0, r4
     6a4:	fa01 f205 	lsl.w	r2, r1, r5
     6a8:	ea40 0002 	orr.w	r0, r0, r2
     6ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     6b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     6b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     6b8:	fa21 f604 	lsr.w	r6, r1, r4
     6bc:	eb42 0106 	adc.w	r1, r2, r6
     6c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6c4:	bf08      	it	eq
     6c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6ca:	bd70      	pop	{r4, r5, r6, pc}
     6cc:	f1c4 040c 	rsb	r4, r4, #12
     6d0:	f1c4 0520 	rsb	r5, r4, #32
     6d4:	fa00 f304 	lsl.w	r3, r0, r4
     6d8:	fa20 f005 	lsr.w	r0, r0, r5
     6dc:	fa01 f204 	lsl.w	r2, r1, r4
     6e0:	ea40 0002 	orr.w	r0, r0, r2
     6e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     6ec:	f141 0100 	adc.w	r1, r1, #0
     6f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6f4:	bf08      	it	eq
     6f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6fa:	bd70      	pop	{r4, r5, r6, pc}
     6fc:	f1c4 0520 	rsb	r5, r4, #32
     700:	fa00 f205 	lsl.w	r2, r0, r5
     704:	ea4e 0e02 	orr.w	lr, lr, r2
     708:	fa20 f304 	lsr.w	r3, r0, r4
     70c:	fa01 f205 	lsl.w	r2, r1, r5
     710:	ea43 0302 	orr.w	r3, r3, r2
     714:	fa21 f004 	lsr.w	r0, r1, r4
     718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     71c:	fa21 f204 	lsr.w	r2, r1, r4
     720:	ea20 0002 	bic.w	r0, r0, r2
     724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     72c:	bf08      	it	eq
     72e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     732:	bd70      	pop	{r4, r5, r6, pc}
     734:	f094 0f00 	teq	r4, #0
     738:	d10f      	bne.n	75a <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     73a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     73e:	0040      	lsls	r0, r0, #1
     740:	eb41 0101 	adc.w	r1, r1, r1
     744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     748:	bf08      	it	eq
     74a:	3c01      	subeq	r4, #1
     74c:	d0f7      	beq.n	73e <CONFIG_BT_HCI_TX_STACK_SIZE+0x13e>
     74e:	ea41 0106 	orr.w	r1, r1, r6
     752:	f095 0f00 	teq	r5, #0
     756:	bf18      	it	ne
     758:	4770      	bxne	lr
     75a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     75e:	0052      	lsls	r2, r2, #1
     760:	eb43 0303 	adc.w	r3, r3, r3
     764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     768:	bf08      	it	eq
     76a:	3d01      	subeq	r5, #1
     76c:	d0f7      	beq.n	75e <CONFIG_BT_HCI_TX_STACK_SIZE+0x15e>
     76e:	ea43 0306 	orr.w	r3, r3, r6
     772:	4770      	bx	lr
     774:	ea94 0f0c 	teq	r4, ip
     778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     77c:	bf18      	it	ne
     77e:	ea95 0f0c 	teqne	r5, ip
     782:	d00c      	beq.n	79e <CONFIG_BT_HCI_TX_STACK_SIZE+0x19e>
     784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     788:	bf18      	it	ne
     78a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     78e:	d1d1      	bne.n	734 <CONFIG_BT_HCI_TX_STACK_SIZE+0x134>
     790:	ea81 0103 	eor.w	r1, r1, r3
     794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     798:	f04f 0000 	mov.w	r0, #0
     79c:	bd70      	pop	{r4, r5, r6, pc}
     79e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     7a2:	bf06      	itte	eq
     7a4:	4610      	moveq	r0, r2
     7a6:	4619      	moveq	r1, r3
     7a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     7ac:	d019      	beq.n	7e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e2>
     7ae:	ea94 0f0c 	teq	r4, ip
     7b2:	d102      	bne.n	7ba <CONFIG_BT_HCI_TX_STACK_SIZE+0x1ba>
     7b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     7b8:	d113      	bne.n	7e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e2>
     7ba:	ea95 0f0c 	teq	r5, ip
     7be:	d105      	bne.n	7cc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1cc>
     7c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     7c4:	bf1c      	itt	ne
     7c6:	4610      	movne	r0, r2
     7c8:	4619      	movne	r1, r3
     7ca:	d10a      	bne.n	7e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e2>
     7cc:	ea81 0103 	eor.w	r1, r1, r3
     7d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     7d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     7d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     7dc:	f04f 0000 	mov.w	r0, #0
     7e0:	bd70      	pop	{r4, r5, r6, pc}
     7e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     7e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     7ea:	bd70      	pop	{r4, r5, r6, pc}

000007ec <__aeabi_ddiv>:
     7ec:	b570      	push	{r4, r5, r6, lr}
     7ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
     7f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     7f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     7fa:	bf1d      	ittte	ne
     7fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     800:	ea94 0f0c 	teqne	r4, ip
     804:	ea95 0f0c 	teqne	r5, ip
     808:	f000 f8a7 	bleq	95a <__z_interrupt_stack_SIZEOF+0x11a>
     80c:	eba4 0405 	sub.w	r4, r4, r5
     810:	ea81 0e03 	eor.w	lr, r1, r3
     814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     818:	ea4f 3101 	mov.w	r1, r1, lsl #12
     81c:	f000 8088 	beq.w	930 <__z_interrupt_stack_SIZEOF+0xf0>
     820:	ea4f 3303 	mov.w	r3, r3, lsl #12
     824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     82c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     830:	ea4f 2202 	mov.w	r2, r2, lsl #8
     834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     83c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     844:	429d      	cmp	r5, r3
     846:	bf08      	it	eq
     848:	4296      	cmpeq	r6, r2
     84a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     84e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     852:	d202      	bcs.n	85a <__z_interrupt_stack_SIZEOF+0x1a>
     854:	085b      	lsrs	r3, r3, #1
     856:	ea4f 0232 	mov.w	r2, r2, rrx
     85a:	1ab6      	subs	r6, r6, r2
     85c:	eb65 0503 	sbc.w	r5, r5, r3
     860:	085b      	lsrs	r3, r3, #1
     862:	ea4f 0232 	mov.w	r2, r2, rrx
     866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     86a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     86e:	ebb6 0e02 	subs.w	lr, r6, r2
     872:	eb75 0e03 	sbcs.w	lr, r5, r3
     876:	bf22      	ittt	cs
     878:	1ab6      	subcs	r6, r6, r2
     87a:	4675      	movcs	r5, lr
     87c:	ea40 000c 	orrcs.w	r0, r0, ip
     880:	085b      	lsrs	r3, r3, #1
     882:	ea4f 0232 	mov.w	r2, r2, rrx
     886:	ebb6 0e02 	subs.w	lr, r6, r2
     88a:	eb75 0e03 	sbcs.w	lr, r5, r3
     88e:	bf22      	ittt	cs
     890:	1ab6      	subcs	r6, r6, r2
     892:	4675      	movcs	r5, lr
     894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     898:	085b      	lsrs	r3, r3, #1
     89a:	ea4f 0232 	mov.w	r2, r2, rrx
     89e:	ebb6 0e02 	subs.w	lr, r6, r2
     8a2:	eb75 0e03 	sbcs.w	lr, r5, r3
     8a6:	bf22      	ittt	cs
     8a8:	1ab6      	subcs	r6, r6, r2
     8aa:	4675      	movcs	r5, lr
     8ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     8b0:	085b      	lsrs	r3, r3, #1
     8b2:	ea4f 0232 	mov.w	r2, r2, rrx
     8b6:	ebb6 0e02 	subs.w	lr, r6, r2
     8ba:	eb75 0e03 	sbcs.w	lr, r5, r3
     8be:	bf22      	ittt	cs
     8c0:	1ab6      	subcs	r6, r6, r2
     8c2:	4675      	movcs	r5, lr
     8c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     8c8:	ea55 0e06 	orrs.w	lr, r5, r6
     8cc:	d018      	beq.n	900 <__z_interrupt_stack_SIZEOF+0xc0>
     8ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
     8d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     8d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     8da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     8de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     8e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     8e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     8ea:	d1c0      	bne.n	86e <__z_interrupt_stack_SIZEOF+0x2e>
     8ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     8f0:	d10b      	bne.n	90a <__z_interrupt_stack_SIZEOF+0xca>
     8f2:	ea41 0100 	orr.w	r1, r1, r0
     8f6:	f04f 0000 	mov.w	r0, #0
     8fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     8fe:	e7b6      	b.n	86e <__z_interrupt_stack_SIZEOF+0x2e>
     900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     904:	bf04      	itt	eq
     906:	4301      	orreq	r1, r0
     908:	2000      	moveq	r0, #0
     90a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     90e:	bf88      	it	hi
     910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     914:	f63f aeaf 	bhi.w	676 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     918:	ebb5 0c03 	subs.w	ip, r5, r3
     91c:	bf04      	itt	eq
     91e:	ebb6 0c02 	subseq.w	ip, r6, r2
     922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     926:	f150 0000 	adcs.w	r0, r0, #0
     92a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     92e:	bd70      	pop	{r4, r5, r6, pc}
     930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     93c:	bfc2      	ittt	gt
     93e:	ebd4 050c 	rsbsgt	r5, r4, ip
     942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     946:	bd70      	popgt	{r4, r5, r6, pc}
     948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     94c:	f04f 0e00 	mov.w	lr, #0
     950:	3c01      	subs	r4, #1
     952:	e690      	b.n	676 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     954:	ea45 0e06 	orr.w	lr, r5, r6
     958:	e68d      	b.n	676 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     95a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     95e:	ea94 0f0c 	teq	r4, ip
     962:	bf08      	it	eq
     964:	ea95 0f0c 	teqeq	r5, ip
     968:	f43f af3b 	beq.w	7e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e2>
     96c:	ea94 0f0c 	teq	r4, ip
     970:	d10a      	bne.n	988 <__z_interrupt_stack_SIZEOF+0x148>
     972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     976:	f47f af34 	bne.w	7e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e2>
     97a:	ea95 0f0c 	teq	r5, ip
     97e:	f47f af25 	bne.w	7cc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1cc>
     982:	4610      	mov	r0, r2
     984:	4619      	mov	r1, r3
     986:	e72c      	b.n	7e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e2>
     988:	ea95 0f0c 	teq	r5, ip
     98c:	d106      	bne.n	99c <__z_interrupt_stack_SIZEOF+0x15c>
     98e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     992:	f43f aefd 	beq.w	790 <CONFIG_BT_HCI_TX_STACK_SIZE+0x190>
     996:	4610      	mov	r0, r2
     998:	4619      	mov	r1, r3
     99a:	e722      	b.n	7e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e2>
     99c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     9a0:	bf18      	it	ne
     9a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     9a6:	f47f aec5 	bne.w	734 <CONFIG_BT_HCI_TX_STACK_SIZE+0x134>
     9aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     9ae:	f47f af0d 	bne.w	7cc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1cc>
     9b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     9b6:	f47f aeeb 	bne.w	790 <CONFIG_BT_HCI_TX_STACK_SIZE+0x190>
     9ba:	e712      	b.n	7e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e2>

000009bc <__aeabi_d2iz>:
     9bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     9c4:	d215      	bcs.n	9f2 <__aeabi_d2iz+0x36>
     9c6:	d511      	bpl.n	9ec <__aeabi_d2iz+0x30>
     9c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     9cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9d0:	d912      	bls.n	9f8 <__aeabi_d2iz+0x3c>
     9d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9e2:	fa23 f002 	lsr.w	r0, r3, r2
     9e6:	bf18      	it	ne
     9e8:	4240      	negne	r0, r0
     9ea:	4770      	bx	lr
     9ec:	f04f 0000 	mov.w	r0, #0
     9f0:	4770      	bx	lr
     9f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9f6:	d105      	bne.n	a04 <__aeabi_d2iz+0x48>
     9f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     9fc:	bf08      	it	eq
     9fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a02:	4770      	bx	lr
     a04:	f04f 0000 	mov.w	r0, #0
     a08:	4770      	bx	lr
     a0a:	bf00      	nop

00000a0c <__aeabi_d2f>:
     a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     a14:	bf24      	itt	cs
     a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     a1e:	d90d      	bls.n	a3c <__aeabi_d2f+0x30>
     a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     a34:	bf08      	it	eq
     a36:	f020 0001 	biceq.w	r0, r0, #1
     a3a:	4770      	bx	lr
     a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a40:	d121      	bne.n	a86 <__aeabi_d2f+0x7a>
     a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a46:	bfbc      	itt	lt
     a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a4c:	4770      	bxlt	lr
     a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a56:	f1c2 0218 	rsb	r2, r2, #24
     a5a:	f1c2 0c20 	rsb	ip, r2, #32
     a5e:	fa10 f30c 	lsls.w	r3, r0, ip
     a62:	fa20 f002 	lsr.w	r0, r0, r2
     a66:	bf18      	it	ne
     a68:	f040 0001 	orrne.w	r0, r0, #1
     a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     a74:	fa03 fc0c 	lsl.w	ip, r3, ip
     a78:	ea40 000c 	orr.w	r0, r0, ip
     a7c:	fa23 f302 	lsr.w	r3, r3, r2
     a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
     a84:	e7cc      	b.n	a20 <__aeabi_d2f+0x14>
     a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
     a8a:	d107      	bne.n	a9c <__aeabi_d2f+0x90>
     a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     a90:	bf1e      	ittt	ne
     a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     a9a:	4770      	bxne	lr
     a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     aa8:	4770      	bx	lr
     aaa:	bf00      	nop

00000aac <__aeabi_uldivmod>:
     aac:	b953      	cbnz	r3, ac4 <__aeabi_uldivmod+0x18>
     aae:	b94a      	cbnz	r2, ac4 <__aeabi_uldivmod+0x18>
     ab0:	2900      	cmp	r1, #0
     ab2:	bf08      	it	eq
     ab4:	2800      	cmpeq	r0, #0
     ab6:	bf1c      	itt	ne
     ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     ac0:	f000 b80c 	b.w	adc <__aeabi_idiv0>
     ac4:	f1ad 0c08 	sub.w	ip, sp, #8
     ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     acc:	f007 fbb0 	bl	8230 <__udivmoddi4>
     ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
     ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ad8:	b004      	add	sp, #16
     ada:	4770      	bx	lr

00000adc <__aeabi_idiv0>:
     adc:	4770      	bx	lr
     ade:	bf00      	nop

00000ae0 <__gedf2>:
     ae0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     ae4:	e006      	b.n	af4 <__cmpdf2+0x4>
     ae6:	bf00      	nop

00000ae8 <__ledf2>:
     ae8:	f04f 0c01 	mov.w	ip, #1
     aec:	e002      	b.n	af4 <__cmpdf2+0x4>
     aee:	bf00      	nop

00000af0 <__cmpdf2>:
     af0:	f04f 0c01 	mov.w	ip, #1
     af4:	f84d cd04 	str.w	ip, [sp, #-4]!
     af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     b04:	bf18      	it	ne
     b06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     b0a:	d01b      	beq.n	b44 <__cmpdf2+0x54>
     b0c:	b001      	add	sp, #4
     b0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     b12:	bf0c      	ite	eq
     b14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     b18:	ea91 0f03 	teqne	r1, r3
     b1c:	bf02      	ittt	eq
     b1e:	ea90 0f02 	teqeq	r0, r2
     b22:	2000      	moveq	r0, #0
     b24:	4770      	bxeq	lr
     b26:	f110 0f00 	cmn.w	r0, #0
     b2a:	ea91 0f03 	teq	r1, r3
     b2e:	bf58      	it	pl
     b30:	4299      	cmppl	r1, r3
     b32:	bf08      	it	eq
     b34:	4290      	cmpeq	r0, r2
     b36:	bf2c      	ite	cs
     b38:	17d8      	asrcs	r0, r3, #31
     b3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     b3e:	f040 0001 	orr.w	r0, r0, #1
     b42:	4770      	bx	lr
     b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b4c:	d102      	bne.n	b54 <__cmpdf2+0x64>
     b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     b52:	d107      	bne.n	b64 <__cmpdf2+0x74>
     b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b5c:	d1d6      	bne.n	b0c <__cmpdf2+0x1c>
     b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     b62:	d0d3      	beq.n	b0c <__cmpdf2+0x1c>
     b64:	f85d 0b04 	ldr.w	r0, [sp], #4
     b68:	4770      	bx	lr
     b6a:	bf00      	nop

00000b6c <__aeabi_cdrcmple>:
     b6c:	4684      	mov	ip, r0
     b6e:	4610      	mov	r0, r2
     b70:	4662      	mov	r2, ip
     b72:	468c      	mov	ip, r1
     b74:	4619      	mov	r1, r3
     b76:	4663      	mov	r3, ip
     b78:	e000      	b.n	b7c <__aeabi_cdcmpeq>
     b7a:	bf00      	nop

00000b7c <__aeabi_cdcmpeq>:
     b7c:	b501      	push	{r0, lr}
     b7e:	f7ff ffb7 	bl	af0 <__cmpdf2>
     b82:	2800      	cmp	r0, #0
     b84:	bf48      	it	mi
     b86:	f110 0f00 	cmnmi.w	r0, #0
     b8a:	bd01      	pop	{r0, pc}

00000b8c <__aeabi_dcmpeq>:
     b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
     b90:	f7ff fff4 	bl	b7c <__aeabi_cdcmpeq>
     b94:	bf0c      	ite	eq
     b96:	2001      	moveq	r0, #1
     b98:	2000      	movne	r0, #0
     b9a:	f85d fb08 	ldr.w	pc, [sp], #8
     b9e:	bf00      	nop

00000ba0 <__aeabi_dcmplt>:
     ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
     ba4:	f7ff ffea 	bl	b7c <__aeabi_cdcmpeq>
     ba8:	bf34      	ite	cc
     baa:	2001      	movcc	r0, #1
     bac:	2000      	movcs	r0, #0
     bae:	f85d fb08 	ldr.w	pc, [sp], #8
     bb2:	bf00      	nop

00000bb4 <__aeabi_dcmple>:
     bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
     bb8:	f7ff ffe0 	bl	b7c <__aeabi_cdcmpeq>
     bbc:	bf94      	ite	ls
     bbe:	2001      	movls	r0, #1
     bc0:	2000      	movhi	r0, #0
     bc2:	f85d fb08 	ldr.w	pc, [sp], #8
     bc6:	bf00      	nop

00000bc8 <__aeabi_dcmpge>:
     bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
     bcc:	f7ff ffce 	bl	b6c <__aeabi_cdrcmple>
     bd0:	bf94      	ite	ls
     bd2:	2001      	movls	r0, #1
     bd4:	2000      	movhi	r0, #0
     bd6:	f85d fb08 	ldr.w	pc, [sp], #8
     bda:	bf00      	nop

00000bdc <__aeabi_dcmpgt>:
     bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
     be0:	f7ff ffc4 	bl	b6c <__aeabi_cdrcmple>
     be4:	bf34      	ite	cc
     be6:	2001      	movcc	r0, #1
     be8:	2000      	movcs	r0, #0
     bea:	f85d fb08 	ldr.w	pc, [sp], #8
     bee:	bf00      	nop

00000bf0 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
     bf0:	4801      	ldr	r0, [pc, #4]	; (bf8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
     bf2:	7800      	ldrb	r0, [r0, #0]
     bf4:	4770      	bx	lr
     bf6:	0000      	.short	0x0000
     bf8:	20000028 	.word	0x20000028

00000bfc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     bfc:	b570      	push	{r4, r5, r6, lr}
     bfe:	4c17      	ldr	r4, [pc, #92]	; (c5c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
     c00:	7860      	ldrb	r0, [r4, #1]
     c02:	2800      	cmp	r0, #0
     c04:	d123      	bne.n	c4e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
     c06:	2001      	movs	r0, #1
     c08:	7060      	strb	r0, [r4, #1]
     c0a:	f007 fdb0 	bl	876e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     c0e:	f06f 0527 	mvn.w	r5, #39	; 0x27
     c12:	b928      	cbnz	r0, c20 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     c14:	f007 fde1 	bl	87da <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     c18:	b910      	cbnz	r0, c20 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     c1a:	f007 fde8 	bl	87ee <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     c1e:	b120      	cbz	r0, c2a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
     c20:	480f      	ldr	r0, [pc, #60]	; (c60 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
     c22:	6060      	str	r0, [r4, #4]
     c24:	70a5      	strb	r5, [r4, #2]
     c26:	2008      	movs	r0, #8
     c28:	e010      	b.n	c4c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
     c2a:	f007 fd75 	bl	8718 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     c2e:	b940      	cbnz	r0, c42 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     c30:	f007 fd7c 	bl	872c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     c34:	b928      	cbnz	r0, c42 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     c36:	f007 fd90 	bl	875a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     c3a:	b910      	cbnz	r0, c42 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     c3c:	f007 fda1 	bl	8782 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     c40:	b130      	cbz	r0, c50 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
     c42:	4807      	ldr	r0, [pc, #28]	; (c60 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
     c44:	3031      	adds	r0, #49	; 0x31
     c46:	6060      	str	r0, [r4, #4]
     c48:	70a5      	strb	r5, [r4, #2]
     c4a:	2004      	movs	r0, #4
     c4c:	70e0      	strb	r0, [r4, #3]
     c4e:	bd70      	pop	{r4, r5, r6, pc}
     c50:	f44f 718f 	mov.w	r1, #286	; 0x11e
     c54:	2074      	movs	r0, #116	; 0x74
     c56:	f003 fa83 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c5a:	0000      	.short	0x0000
     c5c:	20000028 	.word	0x20000028
     c60:	0000ae9c 	.word	0x0000ae9c

00000c64 <mpsl_tx_power_radio_supported_power_adjust>:
     c64:	4908      	ldr	r1, [pc, #32]	; (c88 <mpsl_tx_power_radio_supported_power_adjust+0x24>)
     c66:	f991 2003 	ldrsb.w	r2, [r1, #3]
     c6a:	4290      	cmp	r0, r2
     c6c:	da03      	bge.n	c76 <mpsl_tx_power_radio_supported_power_adjust+0x12>
     c6e:	f991 2002 	ldrsb.w	r2, [r1, #2]
     c72:	4290      	cmp	r0, r2
     c74:	dc01      	bgt.n	c7a <mpsl_tx_power_radio_supported_power_adjust+0x16>
     c76:	4610      	mov	r0, r2
     c78:	4770      	bx	lr
     c7a:	6849      	ldr	r1, [r1, #4]
     c7c:	1a80      	subs	r0, r0, r2
     c7e:	5c08      	ldrb	r0, [r1, r0]
     c80:	4902      	ldr	r1, [pc, #8]	; (c8c <mpsl_tx_power_radio_supported_power_adjust+0x28>)
     c82:	5608      	ldrsb	r0, [r1, r0]
     c84:	4770      	bx	lr
     c86:	0000      	.short	0x0000
     c88:	20000028 	.word	0x20000028
     c8c:	0000ae8e 	.word	0x0000ae8e

00000c90 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
     c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     c94:	461c      	mov	r4, r3
     c96:	4690      	mov	r8, r2
     c98:	460d      	mov	r5, r1
     c9a:	4606      	mov	r6, r0
     c9c:	f06f 0715 	mvn.w	r7, #21
     ca0:	2804      	cmp	r0, #4
     ca2:	d804      	bhi.n	cae <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     ca4:	b11c      	cbz	r4, cae <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     ca6:	f007 fc1b 	bl	84e0 <strlen+0x10>
     caa:	42a8      	cmp	r0, r5
     cac:	d802      	bhi.n	cb4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
     cae:	4638      	mov	r0, r7
     cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     cb4:	4805      	ldr	r0, [pc, #20]	; (ccc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
     cb6:	4642      	mov	r2, r8
     cb8:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     cbc:	b118      	cbz	r0, cc6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     cbe:	5740      	ldrsb	r0, [r0, r5]
     cc0:	4282      	cmp	r2, r0
     cc2:	dd00      	ble.n	cc6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     cc4:	4602      	mov	r2, r0
     cc6:	7022      	strb	r2, [r4, #0]
     cc8:	2000      	movs	r0, #0
     cca:	e7f1      	b.n	cb0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
     ccc:	200006a0 	.word	0x200006a0

00000cd0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     cd0:	4801      	ldr	r0, [pc, #4]	; (cd8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     cd2:	7800      	ldrb	r0, [r0, #0]
     cd4:	4770      	bx	lr
     cd6:	0000      	.short	0x0000
     cd8:	20000030 	.word	0x20000030

00000cdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     cdc:	4905      	ldr	r1, [pc, #20]	; (cf4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     cde:	780a      	ldrb	r2, [r1, #0]
     ce0:	4290      	cmp	r0, r2
     ce2:	d301      	bcc.n	ce8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     ce4:	2000      	movs	r0, #0
     ce6:	4770      	bx	lr
     ce8:	6849      	ldr	r1, [r1, #4]
     cea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     cee:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     cf2:	4770      	bx	lr
     cf4:	20000030 	.word	0x20000030

00000cf8 <MPSL_IRQ_RADIO_Handler>:
     cf8:	490e      	ldr	r1, [pc, #56]	; (d34 <MPSL_IRQ_RADIO_Handler+0x3c>)
     cfa:	b510      	push	{r4, lr}
     cfc:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     d00:	2820      	cmp	r0, #32
     d02:	d012      	beq.n	d2a <MPSL_IRQ_RADIO_Handler+0x32>
     d04:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     d08:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
     d0c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     d10:	eb02 0080 	add.w	r0, r2, r0, lsl #2
     d14:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
     d18:	6840      	ldr	r0, [r0, #4]
     d1a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     d1e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
     d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     d26:	2104      	movs	r1, #4
     d28:	4710      	bx	r2
     d2a:	f640 01bc 	movw	r1, #2236	; 0x8bc
     d2e:	2070      	movs	r0, #112	; 0x70
     d30:	f003 fa16 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d34:	20000ab4 	.word	0x20000ab4
     d38:	b570      	push	{r4, r5, r6, lr}
     d3a:	4605      	mov	r5, r0
     d3c:	2a20      	cmp	r2, #32
     d3e:	d028      	beq.n	d92 <MPSL_IRQ_RADIO_Handler+0x9a>
     d40:	4819      	ldr	r0, [pc, #100]	; (da8 <MPSL_IRQ_RADIO_Handler+0xb0>)
     d42:	4c1a      	ldr	r4, [pc, #104]	; (dac <MPSL_IRQ_RADIO_Handler+0xb4>)
     d44:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     d48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     d4c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     d50:	4423      	add	r3, r4
     d52:	2920      	cmp	r1, #32
     d54:	d022      	beq.n	d9c <MPSL_IRQ_RADIO_Handler+0xa4>
     d56:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     d5a:	7840      	ldrb	r0, [r0, #1]
     d5c:	784c      	ldrb	r4, [r1, #1]
     d5e:	7048      	strb	r0, [r1, #1]
     d60:	4620      	mov	r0, r4
     d62:	4601      	mov	r1, r0
     d64:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     d68:	4291      	cmp	r1, r2
     d6a:	7005      	strb	r5, [r0, #0]
     d6c:	7840      	ldrb	r0, [r0, #1]
     d6e:	d1f8      	bne.n	d62 <MPSL_IRQ_RADIO_Handler+0x6a>
     d70:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     d74:	2a20      	cmp	r2, #32
     d76:	bf1a      	itte	ne
     d78:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     d7c:	7054      	strbne	r4, [r2, #1]
     d7e:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     d82:	2220      	movs	r2, #32
     d84:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     d88:	f88c 2001 	strb.w	r2, [ip, #1]
     d8c:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     d90:	bd70      	pop	{r4, r5, r6, pc}
     d92:	f44f 7126 	mov.w	r1, #664	; 0x298
     d96:	2070      	movs	r0, #112	; 0x70
     d98:	f003 f9e2 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d9c:	f893 4020 	ldrb.w	r4, [r3, #32]
     da0:	7840      	ldrb	r0, [r0, #1]
     da2:	f883 0020 	strb.w	r0, [r3, #32]
     da6:	e7db      	b.n	d60 <MPSL_IRQ_RADIO_Handler+0x68>
     da8:	20000a34 	.word	0x20000a34
     dac:	20000ab4 	.word	0x20000ab4
     db0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     db4:	b08d      	sub	sp, #52	; 0x34
     db6:	4615      	mov	r5, r2
     db8:	460c      	mov	r4, r1
     dba:	f002 f94b 	bl	3054 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     dbe:	4428      	add	r0, r5
     dc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     dc4:	9008      	str	r0, [sp, #32]
     dc6:	6821      	ldr	r1, [r4, #0]
     dc8:	1a08      	subs	r0, r1, r0
     dca:	0200      	lsls	r0, r0, #8
     dcc:	17c1      	asrs	r1, r0, #31
     dce:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     dd2:	1200      	asrs	r0, r0, #8
     dd4:	2800      	cmp	r0, #0
     dd6:	f300 80f0 	bgt.w	fba <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1a>
     dda:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
     dde:	48cd      	ldr	r0, [pc, #820]	; (1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>)
     de0:	eb08 0148 	add.w	r1, r8, r8, lsl #1
     de4:	4408      	add	r0, r1
     de6:	9009      	str	r0, [sp, #36]	; 0x24
     de8:	f890 5020 	ldrb.w	r5, [r0, #32]
     dec:	2020      	movs	r0, #32
     dee:	4eca      	ldr	r6, [pc, #808]	; (1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
     df0:	f10d 0a18 	add.w	sl, sp, #24
     df4:	f10d 091c 	add.w	r9, sp, #28
     df8:	f88d 0018 	strb.w	r0, [sp, #24]
     dfc:	2d20      	cmp	r5, #32
     dfe:	bf1c      	itt	ne
     e00:	48c6      	ldrne	r0, [pc, #792]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
     e02:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     e06:	d038      	beq.n	e7a <MPSL_IRQ_RADIO_Handler+0x182>
     e08:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     e0c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     e10:	f100 0108 	add.w	r1, r0, #8
     e14:	68c0      	ldr	r0, [r0, #12]
     e16:	6827      	ldr	r7, [r4, #0]
     e18:	1a38      	subs	r0, r7, r0
     e1a:	0200      	lsls	r0, r0, #8
     e1c:	17c2      	asrs	r2, r0, #31
     e1e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e22:	1200      	asrs	r0, r0, #8
     e24:	d429      	bmi.n	e7a <MPSL_IRQ_RADIO_Handler+0x182>
     e26:	89e0      	ldrh	r0, [r4, #14]
     e28:	b300      	cbz	r0, e6c <MPSL_IRQ_RADIO_Handler+0x174>
     e2a:	89c8      	ldrh	r0, [r1, #14]
     e2c:	b9f0      	cbnz	r0, e6c <MPSL_IRQ_RADIO_Handler+0x174>
     e2e:	6808      	ldr	r0, [r1, #0]
     e30:	9003      	str	r0, [sp, #12]
     e32:	f003 f809 	bl	3e48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     e36:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     e3a:	bf08      	it	eq
     e3c:	200d      	moveq	r0, #13
     e3e:	d00b      	beq.n	e58 <MPSL_IRQ_RADIO_Handler+0x160>
     e40:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     e44:	3856      	subs	r0, #86	; 0x56
     e46:	bf08      	it	eq
     e48:	201c      	moveq	r0, #28
     e4a:	d005      	beq.n	e58 <MPSL_IRQ_RADIO_Handler+0x160>
     e4c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     e50:	389f      	subs	r0, #159	; 0x9f
     e52:	bf14      	ite	ne
     e54:	2000      	movne	r0, #0
     e56:	2032      	moveq	r0, #50	; 0x32
     e58:	1c41      	adds	r1, r0, #1
     e5a:	9803      	ldr	r0, [sp, #12]
     e5c:	1a38      	subs	r0, r7, r0
     e5e:	0200      	lsls	r0, r0, #8
     e60:	17c2      	asrs	r2, r0, #31
     e62:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e66:	1200      	asrs	r0, r0, #8
     e68:	4288      	cmp	r0, r1
     e6a:	db06      	blt.n	e7a <MPSL_IRQ_RADIO_Handler+0x182>
     e6c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     e70:	f88a 5000 	strb.w	r5, [sl]
     e74:	7845      	ldrb	r5, [r0, #1]
     e76:	2d20      	cmp	r5, #32
     e78:	d1c6      	bne.n	e08 <MPSL_IRQ_RADIO_Handler+0x110>
     e7a:	f89a 0000 	ldrb.w	r0, [sl]
     e7e:	f889 0000 	strb.w	r0, [r9]
     e82:	2d20      	cmp	r5, #32
     e84:	bf1c      	itt	ne
     e86:	48a5      	ldrne	r0, [pc, #660]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
     e88:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     e8c:	f000 813e 	beq.w	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
     e90:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     e94:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     e98:	6861      	ldr	r1, [r4, #4]
     e9a:	f8d7 8008 	ldr.w	r8, [r7, #8]
     e9e:	f107 0008 	add.w	r0, r7, #8
     ea2:	eba8 0101 	sub.w	r1, r8, r1
     ea6:	0209      	lsls	r1, r1, #8
     ea8:	17ca      	asrs	r2, r1, #31
     eaa:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     eae:	1209      	asrs	r1, r1, #8
     eb0:	d427      	bmi.n	f02 <MPSL_IRQ_RADIO_Handler+0x20a>
     eb2:	89c0      	ldrh	r0, [r0, #14]
     eb4:	2800      	cmp	r0, #0
     eb6:	f000 8129 	beq.w	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
     eba:	89e0      	ldrh	r0, [r4, #14]
     ebc:	2800      	cmp	r0, #0
     ebe:	f040 8125 	bne.w	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
     ec2:	f8d4 a000 	ldr.w	sl, [r4]
     ec6:	f002 ffbf 	bl	3e48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     eca:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     ece:	bf08      	it	eq
     ed0:	200d      	moveq	r0, #13
     ed2:	d00b      	beq.n	eec <MPSL_IRQ_RADIO_Handler+0x1f4>
     ed4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     ed8:	3856      	subs	r0, #86	; 0x56
     eda:	bf08      	it	eq
     edc:	201c      	moveq	r0, #28
     ede:	d005      	beq.n	eec <MPSL_IRQ_RADIO_Handler+0x1f4>
     ee0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     ee4:	389f      	subs	r0, #159	; 0x9f
     ee6:	bf14      	ite	ne
     ee8:	2000      	movne	r0, #0
     eea:	2032      	moveq	r0, #50	; 0x32
     eec:	1c41      	adds	r1, r0, #1
     eee:	eba8 000a 	sub.w	r0, r8, sl
     ef2:	0200      	lsls	r0, r0, #8
     ef4:	17c2      	asrs	r2, r0, #31
     ef6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     efa:	1200      	asrs	r0, r0, #8
     efc:	4288      	cmp	r0, r1
     efe:	f280 8105 	bge.w	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
     f02:	f889 5000 	strb.w	r5, [r9]
     f06:	7e38      	ldrb	r0, [r7, #24]
     f08:	7c21      	ldrb	r1, [r4, #16]
     f0a:	4288      	cmp	r0, r1
     f0c:	d906      	bls.n	f1c <MPSL_IRQ_RADIO_Handler+0x224>
     f0e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     f12:	7845      	ldrb	r5, [r0, #1]
     f14:	2d20      	cmp	r5, #32
     f16:	d1bb      	bne.n	e90 <MPSL_IRQ_RADIO_Handler+0x198>
     f18:	f000 b8f8 	b.w	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
     f1c:	f89d 001c 	ldrb.w	r0, [sp, #28]
     f20:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     f24:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     f28:	8ac1      	ldrh	r1, [r0, #22]
     f2a:	68c5      	ldr	r5, [r0, #12]
     f2c:	bbe1      	cbnz	r1, fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     f2e:	89e1      	ldrh	r1, [r4, #14]
     f30:	b3d1      	cbz	r1, fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     f32:	6887      	ldr	r7, [r0, #8]
     f34:	f002 ff88 	bl	3e48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     f38:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     f3c:	bf08      	it	eq
     f3e:	200d      	moveq	r0, #13
     f40:	d00b      	beq.n	f5a <MPSL_IRQ_RADIO_Handler+0x262>
     f42:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     f46:	3856      	subs	r0, #86	; 0x56
     f48:	bf08      	it	eq
     f4a:	201c      	moveq	r0, #28
     f4c:	d005      	beq.n	f5a <MPSL_IRQ_RADIO_Handler+0x262>
     f4e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     f52:	389f      	subs	r0, #159	; 0x9f
     f54:	bf14      	ite	ne
     f56:	2000      	movne	r0, #0
     f58:	2032      	moveq	r0, #50	; 0x32
     f5a:	1c41      	adds	r1, r0, #1
     f5c:	1be8      	subs	r0, r5, r7
     f5e:	0200      	lsls	r0, r0, #8
     f60:	17c2      	asrs	r2, r0, #31
     f62:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     f66:	1200      	asrs	r0, r0, #8
     f68:	4288      	cmp	r0, r1
     f6a:	da1d      	bge.n	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     f6c:	f002 ff6c 	bl	3e48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     f70:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     f74:	bf08      	it	eq
     f76:	200d      	moveq	r0, #13
     f78:	d00b      	beq.n	f92 <MPSL_IRQ_RADIO_Handler+0x29a>
     f7a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     f7e:	3856      	subs	r0, #86	; 0x56
     f80:	bf08      	it	eq
     f82:	201c      	moveq	r0, #28
     f84:	d005      	beq.n	f92 <MPSL_IRQ_RADIO_Handler+0x29a>
     f86:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     f8a:	389f      	subs	r0, #159	; 0x9f
     f8c:	bf14      	ite	ne
     f8e:	2000      	movne	r0, #0
     f90:	2032      	moveq	r0, #50	; 0x32
     f92:	f89d 101c 	ldrb.w	r1, [sp, #28]
     f96:	1c40      	adds	r0, r0, #1
     f98:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     f9c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
     fa0:	6889      	ldr	r1, [r1, #8]
     fa2:	4408      	add	r0, r1
     fa4:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
     fa8:	9808      	ldr	r0, [sp, #32]
     faa:	1a28      	subs	r0, r5, r0
     fac:	0200      	lsls	r0, r0, #8
     fae:	17c1      	asrs	r1, r0, #31
     fb0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     fb4:	1200      	asrs	r0, r0, #8
     fb6:	2800      	cmp	r0, #0
     fb8:	dd03      	ble.n	fc2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x22>
     fba:	b011      	add	sp, #68	; 0x44
     fbc:	2000      	movs	r0, #0
     fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fc2:	6820      	ldr	r0, [r4, #0]
     fc4:	42a8      	cmp	r0, r5
     fc6:	d902      	bls.n	fce <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2e>
     fc8:	68a1      	ldr	r1, [r4, #8]
     fca:	1c49      	adds	r1, r1, #1
     fcc:	60a1      	str	r1, [r4, #8]
     fce:	6861      	ldr	r1, [r4, #4]
     fd0:	f10d 0a18 	add.w	sl, sp, #24
     fd4:	1a08      	subs	r0, r1, r0
     fd6:	4428      	add	r0, r5
     fd8:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
     fdc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     fe0:	e9c4 1000 	strd	r1, r0, [r4]
     fe4:	9810      	ldr	r0, [sp, #64]	; 0x40
     fe6:	900b      	str	r0, [sp, #44]	; 0x2c
     fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
     fea:	f10d 081c 	add.w	r8, sp, #28
     fee:	f890 5020 	ldrb.w	r5, [r0, #32]
     ff2:	2020      	movs	r0, #32
     ff4:	f88d 0018 	strb.w	r0, [sp, #24]
     ff8:	2d20      	cmp	r5, #32
     ffa:	d03c      	beq.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
     ffc:	4947      	ldr	r1, [pc, #284]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
     ffe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1000:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
    1004:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1008:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    100c:	f100 0108 	add.w	r1, r0, #8
    1010:	68c0      	ldr	r0, [r0, #12]
    1012:	6827      	ldr	r7, [r4, #0]
    1014:	1a38      	subs	r0, r7, r0
    1016:	0200      	lsls	r0, r0, #8
    1018:	17c2      	asrs	r2, r0, #31
    101a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    101e:	1200      	asrs	r0, r0, #8
    1020:	d429      	bmi.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    1022:	89e0      	ldrh	r0, [r4, #14]
    1024:	b300      	cbz	r0, 1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
    1026:	89c8      	ldrh	r0, [r1, #14]
    1028:	b9f0      	cbnz	r0, 1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
    102a:	f8d1 9000 	ldr.w	r9, [r1]
    102e:	f002 ff0b 	bl	3e48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1032:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1036:	bf08      	it	eq
    1038:	200d      	moveq	r0, #13
    103a:	d00b      	beq.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
    103c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1040:	3856      	subs	r0, #86	; 0x56
    1042:	bf08      	it	eq
    1044:	201c      	moveq	r0, #28
    1046:	d005      	beq.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
    1048:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    104c:	389f      	subs	r0, #159	; 0x9f
    104e:	bf14      	ite	ne
    1050:	2000      	movne	r0, #0
    1052:	2032      	moveq	r0, #50	; 0x32
    1054:	1c41      	adds	r1, r0, #1
    1056:	eba7 0009 	sub.w	r0, r7, r9
    105a:	0200      	lsls	r0, r0, #8
    105c:	17c2      	asrs	r2, r0, #31
    105e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1062:	1200      	asrs	r0, r0, #8
    1064:	4288      	cmp	r0, r1
    1066:	db06      	blt.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    1068:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    106c:	f88a 5000 	strb.w	r5, [sl]
    1070:	7845      	ldrb	r5, [r0, #1]
    1072:	2d20      	cmp	r5, #32
    1074:	d1c6      	bne.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
    1076:	f89a 0000 	ldrb.w	r0, [sl]
    107a:	f888 0000 	strb.w	r0, [r8]
    107e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1080:	2d20      	cmp	r5, #32
    1082:	bf1c      	itt	ne
    1084:	4925      	ldrne	r1, [pc, #148]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
    1086:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    108a:	d03f      	beq.n	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    108c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1090:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    1094:	6860      	ldr	r0, [r4, #4]
    1096:	f8d7 9008 	ldr.w	r9, [r7, #8]
    109a:	f107 0108 	add.w	r1, r7, #8
    109e:	eba9 0000 	sub.w	r0, r9, r0
    10a2:	0200      	lsls	r0, r0, #8
    10a4:	17c2      	asrs	r2, r0, #31
    10a6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    10aa:	1200      	asrs	r0, r0, #8
    10ac:	d422      	bmi.n	10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
    10ae:	89c8      	ldrh	r0, [r1, #14]
    10b0:	b360      	cbz	r0, 110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    10b2:	89e0      	ldrh	r0, [r4, #14]
    10b4:	bb50      	cbnz	r0, 110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    10b6:	f8d4 a000 	ldr.w	sl, [r4]
    10ba:	f002 fec5 	bl	3e48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    10be:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    10c2:	bf08      	it	eq
    10c4:	200d      	moveq	r0, #13
    10c6:	d00b      	beq.n	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
    10c8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    10cc:	3856      	subs	r0, #86	; 0x56
    10ce:	bf08      	it	eq
    10d0:	201c      	moveq	r0, #28
    10d2:	d005      	beq.n	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
    10d4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    10d8:	389f      	subs	r0, #159	; 0x9f
    10da:	bf14      	ite	ne
    10dc:	2000      	movne	r0, #0
    10de:	2032      	moveq	r0, #50	; 0x32
    10e0:	1c41      	adds	r1, r0, #1
    10e2:	eba9 000a 	sub.w	r0, r9, sl
    10e6:	0200      	lsls	r0, r0, #8
    10e8:	17c2      	asrs	r2, r0, #31
    10ea:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    10ee:	1200      	asrs	r0, r0, #8
    10f0:	4288      	cmp	r0, r1
    10f2:	da0b      	bge.n	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    10f4:	f888 5000 	strb.w	r5, [r8]
    10f8:	7e38      	ldrb	r0, [r7, #24]
    10fa:	7c21      	ldrb	r1, [r4, #16]
    10fc:	4288      	cmp	r0, r1
    10fe:	f67f af0d 	bls.w	f1c <MPSL_IRQ_RADIO_Handler+0x224>
    1102:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1106:	7845      	ldrb	r5, [r0, #1]
    1108:	2d20      	cmp	r5, #32
    110a:	d1bf      	bne.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
    110c:	b011      	add	sp, #68	; 0x44
    110e:	2001      	movs	r0, #1
    1110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1114:	20000ab4 	.word	0x20000ab4
    1118:	200006b4 	.word	0x200006b4
    111c:	20000a34 	.word	0x20000a34
    1120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1124:	460f      	mov	r7, r1
    1126:	4606      	mov	r6, r0
    1128:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    112c:	494b      	ldr	r1, [pc, #300]	; (125c <CONFIG_FPROTECT_BLOCK_SIZE+0x25c>)
    112e:	4699      	mov	r9, r3
    1130:	4408      	add	r0, r1
    1132:	4692      	mov	sl, r2
    1134:	f890 4020 	ldrb.w	r4, [r0, #32]
    1138:	2020      	movs	r0, #32
    113a:	7010      	strb	r0, [r2, #0]
    113c:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    1140:	2c20      	cmp	r4, #32
    1142:	bf1c      	itt	ne
    1144:	4846      	ldrne	r0, [pc, #280]	; (1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>)
    1146:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    114a:	d038      	beq.n	11be <CONFIG_FPROTECT_BLOCK_SIZE+0x1be>
    114c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1150:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    1154:	f100 0108 	add.w	r1, r0, #8
    1158:	68c0      	ldr	r0, [r0, #12]
    115a:	6835      	ldr	r5, [r6, #0]
    115c:	1a28      	subs	r0, r5, r0
    115e:	0200      	lsls	r0, r0, #8
    1160:	17c2      	asrs	r2, r0, #31
    1162:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1166:	1200      	asrs	r0, r0, #8
    1168:	d429      	bmi.n	11be <CONFIG_FPROTECT_BLOCK_SIZE+0x1be>
    116a:	89f0      	ldrh	r0, [r6, #14]
    116c:	b300      	cbz	r0, 11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
    116e:	89c8      	ldrh	r0, [r1, #14]
    1170:	b9f0      	cbnz	r0, 11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
    1172:	6808      	ldr	r0, [r1, #0]
    1174:	9000      	str	r0, [sp, #0]
    1176:	f002 fe67 	bl	3e48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    117a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    117e:	bf08      	it	eq
    1180:	200d      	moveq	r0, #13
    1182:	d00b      	beq.n	119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
    1184:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1188:	3856      	subs	r0, #86	; 0x56
    118a:	bf08      	it	eq
    118c:	201c      	moveq	r0, #28
    118e:	d005      	beq.n	119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
    1190:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1194:	389f      	subs	r0, #159	; 0x9f
    1196:	bf14      	ite	ne
    1198:	2000      	movne	r0, #0
    119a:	2032      	moveq	r0, #50	; 0x32
    119c:	1c41      	adds	r1, r0, #1
    119e:	9800      	ldr	r0, [sp, #0]
    11a0:	1a28      	subs	r0, r5, r0
    11a2:	0200      	lsls	r0, r0, #8
    11a4:	17c2      	asrs	r2, r0, #31
    11a6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    11aa:	1200      	asrs	r0, r0, #8
    11ac:	4288      	cmp	r0, r1
    11ae:	db06      	blt.n	11be <CONFIG_FPROTECT_BLOCK_SIZE+0x1be>
    11b0:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    11b4:	f88a 4000 	strb.w	r4, [sl]
    11b8:	7844      	ldrb	r4, [r0, #1]
    11ba:	2c20      	cmp	r4, #32
    11bc:	d1c6      	bne.n	114c <CONFIG_FPROTECT_BLOCK_SIZE+0x14c>
    11be:	f89a 0000 	ldrb.w	r0, [sl]
    11c2:	f889 0000 	strb.w	r0, [r9]
    11c6:	2c20      	cmp	r4, #32
    11c8:	bf1c      	itt	ne
    11ca:	4825      	ldrne	r0, [pc, #148]	; (1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>)
    11cc:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    11d0:	d040      	beq.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
    11d2:	bf00      	nop
    11d4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    11d8:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    11dc:	6870      	ldr	r0, [r6, #4]
    11de:	68bd      	ldr	r5, [r7, #8]
    11e0:	f107 0108 	add.w	r1, r7, #8
    11e4:	1a28      	subs	r0, r5, r0
    11e6:	0200      	lsls	r0, r0, #8
    11e8:	17c2      	asrs	r2, r0, #31
    11ea:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    11ee:	1200      	asrs	r0, r0, #8
    11f0:	d422      	bmi.n	1238 <CONFIG_FPROTECT_BLOCK_SIZE+0x238>
    11f2:	89c8      	ldrh	r0, [r1, #14]
    11f4:	b370      	cbz	r0, 1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
    11f6:	89f0      	ldrh	r0, [r6, #14]
    11f8:	bb60      	cbnz	r0, 1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
    11fa:	f8d6 b000 	ldr.w	fp, [r6]
    11fe:	f002 fe23 	bl	3e48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1202:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1206:	bf08      	it	eq
    1208:	200d      	moveq	r0, #13
    120a:	d00b      	beq.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    120c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1210:	3856      	subs	r0, #86	; 0x56
    1212:	bf08      	it	eq
    1214:	201c      	moveq	r0, #28
    1216:	d005      	beq.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    1218:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    121c:	389f      	subs	r0, #159	; 0x9f
    121e:	bf14      	ite	ne
    1220:	2000      	movne	r0, #0
    1222:	2032      	moveq	r0, #50	; 0x32
    1224:	1c41      	adds	r1, r0, #1
    1226:	eba5 000b 	sub.w	r0, r5, fp
    122a:	0200      	lsls	r0, r0, #8
    122c:	17c2      	asrs	r2, r0, #31
    122e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1232:	1200      	asrs	r0, r0, #8
    1234:	4288      	cmp	r0, r1
    1236:	da0d      	bge.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
    1238:	f889 4000 	strb.w	r4, [r9]
    123c:	7e38      	ldrb	r0, [r7, #24]
    123e:	7c31      	ldrb	r1, [r6, #16]
    1240:	4288      	cmp	r0, r1
    1242:	d802      	bhi.n	124a <CONFIG_FPROTECT_BLOCK_SIZE+0x24a>
    1244:	2000      	movs	r0, #0
    1246:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    124a:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    124e:	7844      	ldrb	r4, [r0, #1]
    1250:	2c20      	cmp	r4, #32
    1252:	d1bf      	bne.n	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
    1254:	2001      	movs	r0, #1
    1256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    125a:	0000      	.short	0x0000
    125c:	20000ab4 	.word	0x20000ab4
    1260:	20000a34 	.word	0x20000a34
    1264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1268:	b098      	sub	sp, #96	; 0x60
    126a:	4615      	mov	r5, r2
    126c:	468b      	mov	fp, r1
    126e:	f002 f99f 	bl	35b0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    1272:	4604      	mov	r4, r0
    1274:	f002 fc1a 	bl	3aac <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1278:	4606      	mov	r6, r0
    127a:	f1bb 0f01 	cmp.w	fp, #1
    127e:	bf18      	it	ne
    1280:	f1bb 0f02 	cmpne.w	fp, #2
    1284:	d005      	beq.n	1292 <CONFIG_FPROTECT_BLOCK_SIZE+0x292>
    1286:	f640 1192 	movw	r1, #2450	; 0x992
    128a:	f04f 0070 	mov.w	r0, #112	; 0x70
    128e:	f002 ff67 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1292:	49ff      	ldr	r1, [pc, #1020]	; (1690 <CONFIG_FPROTECT_BLOCK_SIZE+0x690>)
    1294:	2001      	movs	r0, #1
    1296:	6008      	str	r0, [r1, #0]
    1298:	49fe      	ldr	r1, [pc, #1016]	; (1694 <CONFIG_FPROTECT_BLOCK_SIZE+0x694>)
    129a:	6889      	ldr	r1, [r1, #8]
    129c:	6008      	str	r0, [r1, #0]
    129e:	2000      	movs	r0, #0
    12a0:	f88d 0056 	strb.w	r0, [sp, #86]	; 0x56
    12a4:	900e      	str	r0, [sp, #56]	; 0x38
    12a6:	1e40      	subs	r0, r0, #1
    12a8:	900f      	str	r0, [sp, #60]	; 0x3c
    12aa:	49fb      	ldr	r1, [pc, #1004]	; (1698 <CONFIG_FPROTECT_BLOCK_SIZE+0x698>)
    12ac:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    12b0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    12b4:	e9d1 0c02 	ldrd	r0, ip, [r1, #8]
    12b8:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    12bc:	e9cd 0c10 	strd	r0, ip, [sp, #64]	; 0x40
    12c0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    12c4:	6989      	ldr	r1, [r1, #24]
    12c6:	9114      	str	r1, [sp, #80]	; 0x50
    12c8:	f007 f941 	bl	854e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    12cc:	4601      	mov	r1, r0
    12ce:	f8bd 804e 	ldrh.w	r8, [sp, #78]	; 0x4e
    12d2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    12d6:	4bf1      	ldr	r3, [pc, #964]	; (169c <CONFIG_FPROTECT_BLOCK_SIZE+0x69c>)
    12d8:	4440      	add	r0, r8
    12da:	1c42      	adds	r2, r0, #1
    12dc:	1888      	adds	r0, r1, r2
    12de:	4299      	cmp	r1, r3
    12e0:	d84f      	bhi.n	1382 <CONFIG_FPROTECT_BLOCK_SIZE+0x382>
    12e2:	4def      	ldr	r5, [pc, #956]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    12e4:	42aa      	cmp	r2, r5
    12e6:	dc53      	bgt.n	1390 <CONFIG_FPROTECT_BLOCK_SIZE+0x390>
    12e8:	4269      	negs	r1, r5
    12ea:	428a      	cmp	r2, r1
    12ec:	db58      	blt.n	13a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a0>
    12ee:	1c59      	adds	r1, r3, #1
    12f0:	4281      	cmp	r1, r0
    12f2:	bfdc      	itt	le
    12f4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    12f8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    12fc:	dd05      	ble.n	130a <CONFIG_FPROTECT_BLOCK_SIZE+0x30a>
    12fe:	2800      	cmp	r0, #0
    1300:	bfbc      	itt	lt
    1302:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1306:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    130a:	900c      	str	r0, [sp, #48]	; 0x30
    130c:	48e5      	ldr	r0, [pc, #916]	; (16a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a4>)
    130e:	f1b8 0f00 	cmp.w	r8, #0
    1312:	8b80      	ldrh	r0, [r0, #28]
    1314:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
    1318:	bf04      	itt	eq
    131a:	2000      	moveq	r0, #0
    131c:	900b      	streq	r0, [sp, #44]	; 0x2c
    131e:	d00b      	beq.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
    1320:	2001      	movs	r0, #1
    1322:	900b      	str	r0, [sp, #44]	; 0x2c
    1324:	48df      	ldr	r0, [pc, #892]	; (16a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a4>)
    1326:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    132a:	b928      	cbnz	r0, 1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
    132c:	f002 fea0 	bl	4070 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1330:	2800      	cmp	r0, #0
    1332:	bf08      	it	eq
    1334:	2701      	moveq	r7, #1
    1336:	d000      	beq.n	133a <CONFIG_FPROTECT_BLOCK_SIZE+0x33a>
    1338:	2700      	movs	r7, #0
    133a:	f002 fd85 	bl	3e48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    133e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1342:	bf08      	it	eq
    1344:	200d      	moveq	r0, #13
    1346:	d00b      	beq.n	1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>
    1348:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    134c:	3856      	subs	r0, #86	; 0x56
    134e:	bf08      	it	eq
    1350:	201c      	moveq	r0, #28
    1352:	d005      	beq.n	1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>
    1354:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1358:	389f      	subs	r0, #159	; 0x9f
    135a:	bf14      	ite	ne
    135c:	2000      	movne	r0, #0
    135e:	2032      	moveq	r0, #50	; 0x32
    1360:	f04f 0900 	mov.w	r9, #0
    1364:	46ca      	mov	sl, r9
    1366:	9009      	str	r0, [sp, #36]	; 0x24
    1368:	4546      	cmp	r6, r8
    136a:	d937      	bls.n	13dc <CONFIG_FPROTECT_BLOCK_SIZE+0x3dc>
    136c:	990c      	ldr	r1, [sp, #48]	; 0x30
    136e:	f8df 932c 	ldr.w	r9, [pc, #812]	; 169c <CONFIG_FPROTECT_BLOCK_SIZE+0x69c>
    1372:	ea6f 0c06 	mvn.w	ip, r6
    1376:	466b      	mov	r3, sp
    1378:	aa16      	add	r2, sp, #88	; 0x58
    137a:	eb01 000c 	add.w	r0, r1, ip
    137e:	4549      	cmp	r1, r9
    1380:	d904      	bls.n	138c <CONFIG_FPROTECT_BLOCK_SIZE+0x38c>
    1382:	f240 519e 	movw	r1, #1438	; 0x59e
    1386:	2070      	movs	r0, #112	; 0x70
    1388:	f002 feea 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    138c:	45ac      	cmp	ip, r5
    138e:	dd04      	ble.n	139a <CONFIG_FPROTECT_BLOCK_SIZE+0x39a>
    1390:	f240 519f 	movw	r1, #1439	; 0x59f
    1394:	2070      	movs	r0, #112	; 0x70
    1396:	f002 fee3 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    139a:	49c3      	ldr	r1, [pc, #780]	; (16a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a8>)
    139c:	458c      	cmp	ip, r1
    139e:	da04      	bge.n	13aa <CONFIG_FPROTECT_BLOCK_SIZE+0x3aa>
    13a0:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    13a4:	2070      	movs	r0, #112	; 0x70
    13a6:	f002 fedb 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13aa:	49c0      	ldr	r1, [pc, #768]	; (16ac <CONFIG_FPROTECT_BLOCK_SIZE+0x6ac>)
    13ac:	4281      	cmp	r1, r0
    13ae:	bfdc      	itt	le
    13b0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    13b4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    13b8:	dd05      	ble.n	13c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c6>
    13ba:	2800      	cmp	r0, #0
    13bc:	bfbc      	itt	lt
    13be:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    13c2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    13c6:	4619      	mov	r1, r3
    13c8:	f001 fe60 	bl	308c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    13cc:	9800      	ldr	r0, [sp, #0]
    13ce:	9910      	ldr	r1, [sp, #64]	; 0x40
    13d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    13d4:	9000      	str	r0, [sp, #0]
    13d6:	1a08      	subs	r0, r1, r0
    13d8:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    13dc:	2f00      	cmp	r7, #0
    13de:	bf18      	it	ne
    13e0:	f8dd a024 	ldrne.w	sl, [sp, #36]	; 0x24
    13e4:	d105      	bne.n	13f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f2>
    13e6:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    13ea:	2800      	cmp	r0, #0
    13ec:	bf18      	it	ne
    13ee:	f04f 0a02 	movne.w	sl, #2
    13f2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    13f6:	d008      	beq.n	140a <CONFIG_FPROTECT_BLOCK_SIZE+0x40a>
    13f8:	9810      	ldr	r0, [sp, #64]	; 0x40
    13fa:	1b00      	subs	r0, r0, r4
    13fc:	0200      	lsls	r0, r0, #8
    13fe:	17c1      	asrs	r1, r0, #31
    1400:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1404:	1200      	asrs	r0, r0, #8
    1406:	2801      	cmp	r0, #1
    1408:	da02      	bge.n	1410 <CONFIG_FPROTECT_BLOCK_SIZE+0x410>
    140a:	2003      	movs	r0, #3
    140c:	9d18      	ldr	r5, [sp, #96]	; 0x60
    140e:	e00d      	b.n	142c <CONFIG_FPROTECT_BLOCK_SIZE+0x42c>
    1410:	b157      	cbz	r7, 1428 <CONFIG_FPROTECT_BLOCK_SIZE+0x428>
    1412:	48a4      	ldr	r0, [pc, #656]	; (16a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a4>)
    1414:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    1418:	b130      	cbz	r0, 1428 <CONFIG_FPROTECT_BLOCK_SIZE+0x428>
    141a:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    141e:	f110 0a00 	adds.w	sl, r0, #0
    1422:	bf18      	it	ne
    1424:	f04f 0a02 	movne.w	sl, #2
    1428:	4625      	mov	r5, r4
    142a:	2000      	movs	r0, #0
    142c:	4482      	add	sl, r0
    142e:	9810      	ldr	r0, [sp, #64]	; 0x40
    1430:	eba0 0009 	sub.w	r0, r0, r9
    1434:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1438:	1e50      	subs	r0, r2, #1
    143a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    143e:	1b41      	subs	r1, r0, r5
    1440:	0209      	lsls	r1, r1, #8
    1442:	17cb      	asrs	r3, r1, #31
    1444:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    1448:	1209      	asrs	r1, r1, #8
    144a:	4551      	cmp	r1, sl
    144c:	db04      	blt.n	1458 <CONFIG_FPROTECT_BLOCK_SIZE+0x458>
    144e:	f1b9 0f00 	cmp.w	r9, #0
    1452:	bf18      	it	ne
    1454:	9210      	strne	r2, [sp, #64]	; 0x40
    1456:	e02d      	b.n	14b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b4>
    1458:	f1b9 0f00 	cmp.w	r9, #0
    145c:	d005      	beq.n	146a <CONFIG_FPROTECT_BLOCK_SIZE+0x46a>
    145e:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
    1462:	b920      	cbnz	r0, 146e <CONFIG_FPROTECT_BLOCK_SIZE+0x46e>
    1464:	f002 fb18 	bl	3a98 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    1468:	b108      	cbz	r0, 146e <CONFIG_FPROTECT_BLOCK_SIZE+0x46e>
    146a:	b9af      	cbnz	r7, 1498 <CONFIG_FPROTECT_BLOCK_SIZE+0x498>
    146c:	e00c      	b.n	1488 <CONFIG_FPROTECT_BLOCK_SIZE+0x488>
    146e:	b92f      	cbnz	r7, 147c <CONFIG_FPROTECT_BLOCK_SIZE+0x47c>
    1470:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    1474:	2800      	cmp	r0, #0
    1476:	bf18      	it	ne
    1478:	f1aa 0a02 	subne.w	sl, sl, #2
    147c:	f04f 0900 	mov.w	r9, #0
    1480:	f88d 9054 	strb.w	r9, [sp, #84]	; 0x54
    1484:	464e      	mov	r6, r9
    1486:	e007      	b.n	1498 <CONFIG_FPROTECT_BLOCK_SIZE+0x498>
    1488:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    148c:	b120      	cbz	r0, 1498 <CONFIG_FPROTECT_BLOCK_SIZE+0x498>
    148e:	2000      	movs	r0, #0
    1490:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    1494:	f1aa 0a02 	sub.w	sl, sl, #2
    1498:	9810      	ldr	r0, [sp, #64]	; 0x40
    149a:	eba0 0009 	sub.w	r0, r0, r9
    149e:	1e40      	subs	r0, r0, #1
    14a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14a4:	1b41      	subs	r1, r0, r5
    14a6:	0209      	lsls	r1, r1, #8
    14a8:	17ca      	asrs	r2, r1, #31
    14aa:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    14ae:	1209      	asrs	r1, r1, #8
    14b0:	4551      	cmp	r1, sl
    14b2:	db7c      	blt.n	15ae <CONFIG_FPROTECT_BLOCK_SIZE+0x5ae>
    14b4:	970a      	str	r7, [sp, #40]	; 0x28
    14b6:	4605      	mov	r5, r0
    14b8:	f04f 0900 	mov.w	r9, #0
    14bc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    14be:	f001 ff4f 	bl	3360 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    14c2:	1a28      	subs	r0, r5, r0
    14c4:	0200      	lsls	r0, r0, #8
    14c6:	17c1      	asrs	r1, r0, #31
    14c8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    14cc:	ea4f 2a20 	mov.w	sl, r0, asr #8
    14d0:	f002 fcba 	bl	3e48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    14d4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    14d8:	bf08      	it	eq
    14da:	200d      	moveq	r0, #13
    14dc:	d00b      	beq.n	14f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f6>
    14de:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    14e2:	3856      	subs	r0, #86	; 0x56
    14e4:	bf08      	it	eq
    14e6:	201c      	moveq	r0, #28
    14e8:	d005      	beq.n	14f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f6>
    14ea:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    14ee:	389f      	subs	r0, #159	; 0x9f
    14f0:	bf14      	ite	ne
    14f2:	2000      	movne	r0, #0
    14f4:	2032      	moveq	r0, #50	; 0x32
    14f6:	300b      	adds	r0, #11
    14f8:	4582      	cmp	sl, r0
    14fa:	da20      	bge.n	153e <CONFIG_FPROTECT_BLOCK_SIZE+0x53e>
    14fc:	f1bb 0f01 	cmp.w	fp, #1
    1500:	d002      	beq.n	1508 <CONFIG_FPROTECT_BLOCK_SIZE+0x508>
    1502:	980a      	ldr	r0, [sp, #40]	; 0x28
    1504:	b140      	cbz	r0, 1518 <CONFIG_FPROTECT_BLOCK_SIZE+0x518>
    1506:	e012      	b.n	152e <CONFIG_FPROTECT_BLOCK_SIZE+0x52e>
    1508:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    150c:	d11c      	bne.n	1548 <CONFIG_FPROTECT_BLOCK_SIZE+0x548>
    150e:	f640 1113 	movw	r1, #2323	; 0x913
    1512:	2070      	movs	r0, #112	; 0x70
    1514:	f002 fe24 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1518:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    151c:	d007      	beq.n	152e <CONFIG_FPROTECT_BLOCK_SIZE+0x52e>
    151e:	1b60      	subs	r0, r4, r5
    1520:	0200      	lsls	r0, r0, #8
    1522:	17c1      	asrs	r1, r0, #31
    1524:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1528:	1200      	asrs	r0, r0, #8
    152a:	2804      	cmp	r0, #4
    152c:	dd04      	ble.n	1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>
    152e:	462c      	mov	r4, r5
    1530:	4620      	mov	r0, r4
    1532:	f001 ff3b 	bl	33ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1536:	e007      	b.n	1548 <CONFIG_FPROTECT_BLOCK_SIZE+0x548>
    1538:	2800      	cmp	r0, #0
    153a:	dc64      	bgt.n	1606 <CONFIG_FPROTECT_BLOCK_SIZE+0x606>
    153c:	e004      	b.n	1548 <CONFIG_FPROTECT_BLOCK_SIZE+0x548>
    153e:	462c      	mov	r4, r5
    1540:	4620      	mov	r0, r4
    1542:	f001 ff33 	bl	33ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1546:	46b9      	mov	r9, r7
    1548:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    154c:	d056      	beq.n	15fc <CONFIG_FPROTECT_BLOCK_SIZE+0x5fc>
    154e:	9810      	ldr	r0, [sp, #64]	; 0x40
    1550:	9a11      	ldr	r2, [sp, #68]	; 0x44
    1552:	1b00      	subs	r0, r0, r4
    1554:	1b12      	subs	r2, r2, r4
    1556:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    155a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    155e:	2801      	cmp	r0, #1
    1560:	d351      	bcc.n	1606 <CONFIG_FPROTECT_BLOCK_SIZE+0x606>
    1562:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1566:	bf98      	it	ls
    1568:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    156c:	d84b      	bhi.n	1606 <CONFIG_FPROTECT_BLOCK_SIZE+0x606>
    156e:	4620      	mov	r0, r4
    1570:	f006 ffed 	bl	854e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1574:	990c      	ldr	r1, [sp, #48]	; 0x30
    1576:	4a4a      	ldr	r2, [pc, #296]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    1578:	1a0d      	subs	r5, r1, r0
    157a:	f04f 0a00 	mov.w	sl, #0
    157e:	1aaa      	subs	r2, r5, r2
    1580:	f17a 0200 	sbcs.w	r2, sl, #0
    1584:	d318      	bcc.n	15b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b8>
    1586:	4b46      	ldr	r3, [pc, #280]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    1588:	1a42      	subs	r2, r0, r1
    158a:	1ad3      	subs	r3, r2, r3
    158c:	f17a 0300 	sbcs.w	r3, sl, #0
    1590:	d312      	bcc.n	15b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b8>
    1592:	4b42      	ldr	r3, [pc, #264]	; (169c <CONFIG_FPROTECT_BLOCK_SIZE+0x69c>)
    1594:	42ab      	cmp	r3, r5
    1596:	bf3e      	ittt	cc
    1598:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    159c:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    15a0:	1845      	addcc	r5, r0, r1
    15a2:	d309      	bcc.n	15b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b8>
    15a4:	4293      	cmp	r3, r2
    15a6:	d232      	bcs.n	160e <CONFIG_FPROTECT_BLOCK_SIZE+0x60e>
    15a8:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    15ac:	e000      	b.n	15b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b0>
    15ae:	e02a      	b.n	1606 <CONFIG_FPROTECT_BLOCK_SIZE+0x606>
    15b0:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    15b4:	4408      	add	r0, r1
    15b6:	4245      	negs	r5, r0
    15b8:	4f3a      	ldr	r7, [pc, #232]	; (16a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a4>)
    15ba:	7fb8      	ldrb	r0, [r7, #30]
    15bc:	b360      	cbz	r0, 1618 <CONFIG_FPROTECT_BLOCK_SIZE+0x618>
    15be:	bf00      	nop
    15c0:	f1bb 0f01 	cmp.w	fp, #1
    15c4:	d005      	beq.n	15d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d2>
    15c6:	2002      	movs	r0, #2
    15c8:	f002 f92c 	bl	3824 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    15cc:	2001      	movs	r0, #1
    15ce:	f002 f929 	bl	3824 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    15d2:	45b0      	cmp	r8, r6
    15d4:	d22c      	bcs.n	1630 <CONFIG_FPROTECT_BLOCK_SIZE+0x630>
    15d6:	eba5 0106 	sub.w	r1, r5, r6
    15da:	f04f 0002 	mov.w	r0, #2
    15de:	f002 f86b 	bl	36b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    15e2:	b390      	cbz	r0, 164a <CONFIG_FPROTECT_BLOCK_SIZE+0x64a>
    15e4:	f1b8 0f00 	cmp.w	r8, #0
    15e8:	bf1c      	itt	ne
    15ea:	eba5 0108 	subne.w	r1, r5, r8
    15ee:	2001      	movne	r0, #1
    15f0:	d034      	beq.n	165c <CONFIG_FPROTECT_BLOCK_SIZE+0x65c>
    15f2:	bf00      	nop
    15f4:	f002 f860 	bl	36b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    15f8:	b338      	cbz	r0, 164a <CONFIG_FPROTECT_BLOCK_SIZE+0x64a>
    15fa:	e02f      	b.n	165c <CONFIG_FPROTECT_BLOCK_SIZE+0x65c>
    15fc:	f640 2126 	movw	r1, #2598	; 0xa26
    1600:	2070      	movs	r0, #112	; 0x70
    1602:	f002 fdad 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1606:	b01b      	add	sp, #108	; 0x6c
    1608:	2000      	movs	r0, #0
    160a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    160e:	f640 21fa 	movw	r1, #2810	; 0xafa
    1612:	2070      	movs	r0, #112	; 0x70
    1614:	f002 fda4 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1618:	45b0      	cmp	r8, r6
    161a:	bf34      	ite	cc
    161c:	4630      	movcc	r0, r6
    161e:	4640      	movcs	r0, r8
    1620:	301e      	adds	r0, #30
    1622:	42a8      	cmp	r0, r5
    1624:	dbcc      	blt.n	15c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c0>
    1626:	f640 213a 	movw	r1, #2618	; 0xa3a
    162a:	2070      	movs	r0, #112	; 0x70
    162c:	f002 fd98 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1630:	d90c      	bls.n	164c <CONFIG_FPROTECT_BLOCK_SIZE+0x64c>
    1632:	eba5 0108 	sub.w	r1, r5, r8
    1636:	2001      	movs	r0, #1
    1638:	f002 f83e 	bl	36b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    163c:	b128      	cbz	r0, 164a <CONFIG_FPROTECT_BLOCK_SIZE+0x64a>
    163e:	2e00      	cmp	r6, #0
    1640:	bf1c      	itt	ne
    1642:	1ba9      	subne	r1, r5, r6
    1644:	2002      	movne	r0, #2
    1646:	d009      	beq.n	165c <CONFIG_FPROTECT_BLOCK_SIZE+0x65c>
    1648:	e7d4      	b.n	15f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5f4>
    164a:	e041      	b.n	16d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6d0>
    164c:	ea56 0008 	orrs.w	r0, r6, r8
    1650:	d004      	beq.n	165c <CONFIG_FPROTECT_BLOCK_SIZE+0x65c>
    1652:	f640 1176 	movw	r1, #2422	; 0x976
    1656:	2070      	movs	r0, #112	; 0x70
    1658:	f002 fd82 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    165c:	4629      	mov	r1, r5
    165e:	2000      	movs	r0, #0
    1660:	f002 f82a 	bl	36b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1664:	b3a0      	cbz	r0, 16d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6d0>
    1666:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1668:	2601      	movs	r6, #1
    166a:	2800      	cmp	r0, #0
    166c:	bf04      	itt	eq
    166e:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    1672:	2800      	cmpeq	r0, #0
    1674:	d002      	beq.n	167c <CONFIG_FPROTECT_BLOCK_SIZE+0x67c>
    1676:	f1b9 0f00 	cmp.w	r9, #0
    167a:	d034      	beq.n	16e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x6e6>
    167c:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    1680:	b118      	cbz	r0, 168a <CONFIG_FPROTECT_BLOCK_SIZE+0x68a>
    1682:	f002 fbe7 	bl	3e54 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1686:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    168a:	f1b9 0f00 	cmp.w	r9, #0
    168e:	e00f      	b.n	16b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b0>
    1690:	40000508 	.word	0x40000508
    1694:	20000038 	.word	0x20000038
    1698:	200006b4 	.word	0x200006b4
    169c:	1e847fff 	.word	0x1e847fff
    16a0:	0f424000 	.word	0x0f424000
    16a4:	20000ab4 	.word	0x20000ab4
    16a8:	f0bdc000 	.word	0xf0bdc000
    16ac:	1e848000 	.word	0x1e848000
    16b0:	d01c      	beq.n	16ec <CONFIG_FPROTECT_BLOCK_SIZE+0x6ec>
    16b2:	9809      	ldr	r0, [sp, #36]	; 0x24
    16b4:	1a20      	subs	r0, r4, r0
    16b6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    16ba:	2005      	movs	r0, #5
    16bc:	f001 fffc 	bl	36b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    16c0:	b360      	cbz	r0, 171c <CONFIG_FPROTECT_BLOCK_SIZE+0x71c>
    16c2:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    16c6:	2800      	cmp	r0, #0
    16c8:	bf08      	it	eq
    16ca:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    16ce:	e015      	b.n	16fc <CONFIG_FPROTECT_BLOCK_SIZE+0x6fc>
    16d0:	e7ff      	b.n	16d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x6d2>
    16d2:	2002      	movs	r0, #2
    16d4:	f002 f8a6 	bl	3824 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    16d8:	2001      	movs	r0, #1
    16da:	f002 f8a3 	bl	3824 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    16de:	b01b      	add	sp, #108	; 0x6c
    16e0:	2000      	movs	r0, #0
    16e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16e6:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    16ea:	b190      	cbz	r0, 1712 <CONFIG_FPROTECT_BLOCK_SIZE+0x712>
    16ec:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    16f0:	b120      	cbz	r0, 16fc <CONFIG_FPROTECT_BLOCK_SIZE+0x6fc>
    16f2:	2005      	movs	r0, #5
    16f4:	f002 f896 	bl	3824 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    16f8:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    16fc:	eba5 0008 	sub.w	r0, r5, r8
    1700:	f1a0 0119 	sub.w	r1, r0, #25
    1704:	2900      	cmp	r1, #0
    1706:	dc0e      	bgt.n	1726 <CONFIG_FPROTECT_BLOCK_SIZE+0x726>
    1708:	f640 2163 	movw	r1, #2659	; 0xa63
    170c:	2070      	movs	r0, #112	; 0x70
    170e:	f002 fd27 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1712:	f002 fbbb 	bl	3e8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1716:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    171a:	e7b6      	b.n	168a <CONFIG_FPROTECT_BLOCK_SIZE+0x68a>
    171c:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    1720:	2070      	movs	r0, #112	; 0x70
    1722:	f002 fd1d 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1726:	2003      	movs	r0, #3
    1728:	f001 ffc6 	bl	36b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    172c:	b1c0      	cbz	r0, 1760 <CONFIG_FPROTECT_BLOCK_SIZE+0x760>
    172e:	480f      	ldr	r0, [pc, #60]	; (176c <CONFIG_FPROTECT_BLOCK_SIZE+0x76c>)
    1730:	6880      	ldr	r0, [r0, #8]
    1732:	f8c0 a000 	str.w	sl, [r0]
    1736:	480e      	ldr	r0, [pc, #56]	; (1770 <CONFIG_FPROTECT_BLOCK_SIZE+0x770>)
    1738:	f8c0 a000 	str.w	sl, [r0]
    173c:	ac0e      	add	r4, sp, #56	; 0x38
    173e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    1742:	6038      	str	r0, [r7, #0]
    1744:	6079      	str	r1, [r7, #4]
    1746:	60ba      	str	r2, [r7, #8]
    1748:	60fb      	str	r3, [r7, #12]
    174a:	ac12      	add	r4, sp, #72	; 0x48
    174c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    1750:	6138      	str	r0, [r7, #16]
    1752:	6179      	str	r1, [r7, #20]
    1754:	61ba      	str	r2, [r7, #24]
    1756:	61fb      	str	r3, [r7, #28]
    1758:	b01b      	add	sp, #108	; 0x6c
    175a:	2001      	movs	r0, #1
    175c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1760:	f640 216b 	movw	r1, #2667	; 0xa6b
    1764:	2070      	movs	r0, #112	; 0x70
    1766:	f002 fcfb 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    176a:	0000      	.short	0x0000
    176c:	20000038 	.word	0x20000038
    1770:	40000508 	.word	0x40000508
    1774:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1778:	4614      	mov	r4, r2
    177a:	460d      	mov	r5, r1
    177c:	f04f 0a00 	mov.w	sl, #0
    1780:	890a      	ldrh	r2, [r1, #8]
    1782:	4651      	mov	r1, sl
    1784:	f362 411f 	bfi	r1, r2, #16, #16
    1788:	7aaa      	ldrb	r2, [r5, #10]
    178a:	46d1      	mov	r9, sl
    178c:	f362 0907 	bfi	r9, r2, #0, #8
    1790:	7aea      	ldrb	r2, [r5, #11]
    1792:	4606      	mov	r6, r0
    1794:	f362 290f 	bfi	r9, r2, #8, #8
    1798:	782a      	ldrb	r2, [r5, #0]
    179a:	b083      	sub	sp, #12
    179c:	6840      	ldr	r0, [r0, #4]
    179e:	f8c4 a000 	str.w	sl, [r4]
    17a2:	f362 4917 	bfi	r9, r2, #16, #8
    17a6:	f8c4 a004 	str.w	sl, [r4, #4]
    17aa:	f8c4 9010 	str.w	r9, [r4, #16]
    17ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
    17b2:	4f9d      	ldr	r7, [pc, #628]	; (1a28 <CONFIG_FPROTECT_BLOCK_SIZE+0xa28>)
    17b4:	6870      	ldr	r0, [r6, #4]
    17b6:	fba0 8907 	umull	r8, r9, r0, r7
    17ba:	6830      	ldr	r0, [r6, #0]
    17bc:	f006 fec7 	bl	854e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    17c0:	eb10 0108 	adds.w	r1, r0, r8
    17c4:	eb4a 0209 	adc.w	r2, sl, r9
    17c8:	7828      	ldrb	r0, [r5, #0]
    17ca:	ea4f 0967 	mov.w	r9, r7, asr #1
    17ce:	f1c9 0b00 	rsb	fp, r9, #0
    17d2:	b170      	cbz	r0, 17f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x7f2>
    17d4:	89e0      	ldrh	r0, [r4, #14]
    17d6:	f894 8011 	ldrb.w	r8, [r4, #17]
    17da:	43c0      	mvns	r0, r0
    17dc:	f8d5 a004 	ldr.w	sl, [r5, #4]
    17e0:	f104 020c 	add.w	r2, r4, #12
    17e4:	4548      	cmp	r0, r9
    17e6:	dd7c      	ble.n	18e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e2>
    17e8:	f240 519f 	movw	r1, #1439	; 0x59f
    17ec:	2070      	movs	r0, #112	; 0x70
    17ee:	f002 fcb7 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17f2:	f8df c238 	ldr.w	ip, [pc, #568]	; 1a2c <CONFIG_FPROTECT_BLOCK_SIZE+0xa2c>
    17f6:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    17fa:	eb11 0a0c 	adds.w	sl, r1, ip
    17fe:	f142 0c00 	adc.w	ip, r2, #0
    1802:	ebb0 0a0a 	subs.w	sl, r0, sl
    1806:	eb73 0c0c 	sbcs.w	ip, r3, ip
    180a:	d272      	bcs.n	18f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x8f2>
    180c:	1a41      	subs	r1, r0, r1
    180e:	eb73 0102 	sbcs.w	r1, r3, r2
    1812:	d36e      	bcc.n	18f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x8f2>
    1814:	ebb0 0608 	subs.w	r6, r0, r8
    1818:	42b7      	cmp	r7, r6
    181a:	d82b      	bhi.n	1874 <CONFIG_FPROTECT_BLOCK_SIZE+0x874>
    181c:	89e0      	ldrh	r0, [r4, #14]
    181e:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    1822:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    1826:	43c1      	mvns	r1, r0
    1828:	4a81      	ldr	r2, [pc, #516]	; (1a30 <CONFIG_FPROTECT_BLOCK_SIZE+0xa30>)
    182a:	eb08 0001 	add.w	r0, r8, r1
    182e:	4542      	cmp	r2, r8
    1830:	d32b      	bcc.n	188a <CONFIG_FPROTECT_BLOCK_SIZE+0x88a>
    1832:	4549      	cmp	r1, r9
    1834:	dcd8      	bgt.n	17e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x7e8>
    1836:	4559      	cmp	r1, fp
    1838:	db66      	blt.n	1908 <CONFIG_FPROTECT_BLOCK_SIZE+0x908>
    183a:	4287      	cmp	r7, r0
    183c:	bfdc      	itt	le
    183e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1842:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1846:	dd05      	ble.n	1854 <CONFIG_FPROTECT_BLOCK_SIZE+0x854>
    1848:	2800      	cmp	r0, #0
    184a:	bfbc      	itt	lt
    184c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1850:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1854:	466a      	mov	r2, sp
    1856:	a901      	add	r1, sp, #4
    1858:	f001 fc18 	bl	308c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    185c:	89e0      	ldrh	r0, [r4, #14]
    185e:	f89d 1000 	ldrb.w	r1, [sp]
    1862:	1a30      	subs	r0, r6, r0
    1864:	1a40      	subs	r0, r0, r1
    1866:	1e40      	subs	r0, r0, #1
    1868:	42b8      	cmp	r0, r7
    186a:	d302      	bcc.n	1872 <CONFIG_FPROTECT_BLOCK_SIZE+0x872>
    186c:	68a0      	ldr	r0, [r4, #8]
    186e:	1c40      	adds	r0, r0, #1
    1870:	60a0      	str	r0, [r4, #8]
    1872:	4646      	mov	r6, r8
    1874:	89e0      	ldrh	r0, [r4, #14]
    1876:	4b6e      	ldr	r3, [pc, #440]	; (1a30 <CONFIG_FPROTECT_BLOCK_SIZE+0xa30>)
    1878:	43c1      	mvns	r1, r0
    187a:	686d      	ldr	r5, [r5, #4]
    187c:	f894 8011 	ldrb.w	r8, [r4, #17]
    1880:	1870      	adds	r0, r6, r1
    1882:	f104 020c 	add.w	r2, r4, #12
    1886:	429e      	cmp	r6, r3
    1888:	d904      	bls.n	1894 <CONFIG_FPROTECT_BLOCK_SIZE+0x894>
    188a:	f240 519e 	movw	r1, #1438	; 0x59e
    188e:	2070      	movs	r0, #112	; 0x70
    1890:	f002 fc66 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1894:	4549      	cmp	r1, r9
    1896:	dca7      	bgt.n	17e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x7e8>
    1898:	4559      	cmp	r1, fp
    189a:	db35      	blt.n	1908 <CONFIG_FPROTECT_BLOCK_SIZE+0x908>
    189c:	4287      	cmp	r7, r0
    189e:	bfdc      	itt	le
    18a0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    18a4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    18a8:	dd05      	ble.n	18b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x8b6>
    18aa:	2800      	cmp	r0, #0
    18ac:	bfbc      	itt	lt
    18ae:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    18b2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    18b6:	4621      	mov	r1, r4
    18b8:	f001 fbe8 	bl	308c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    18bc:	6820      	ldr	r0, [r4, #0]
    18be:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    18c2:	1970      	adds	r0, r6, r5
    18c4:	1c40      	adds	r0, r0, #1
    18c6:	6021      	str	r1, [r4, #0]
    18c8:	f1b8 0f00 	cmp.w	r8, #0
    18cc:	bf08      	it	eq
    18ce:	307a      	addeq	r0, #122	; 0x7a
    18d0:	d004      	beq.n	18dc <CONFIG_FPROTECT_BLOCK_SIZE+0x8dc>
    18d2:	f1b8 0f01 	cmp.w	r8, #1
    18d6:	bf08      	it	eq
    18d8:	3048      	addeq	r0, #72	; 0x48
    18da:	d13a      	bne.n	1952 <CONFIG_FPROTECT_BLOCK_SIZE+0x952>
    18dc:	f001 fbba 	bl	3054 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    18e0:	e001      	b.n	18e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e6>
    18e2:	e00e      	b.n	1902 <CONFIG_FPROTECT_BLOCK_SIZE+0x902>
    18e4:	e005      	b.n	18f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x8f2>
    18e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    18ea:	6060      	str	r0, [r4, #4]
    18ec:	b007      	add	sp, #28
    18ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    18f2:	6830      	ldr	r0, [r6, #0]
    18f4:	1e40      	subs	r0, r0, #1
    18f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    18fa:	6020      	str	r0, [r4, #0]
    18fc:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    1900:	e7f3      	b.n	18ea <CONFIG_FPROTECT_BLOCK_SIZE+0x8ea>
    1902:	4601      	mov	r1, r0
    1904:	4558      	cmp	r0, fp
    1906:	da04      	bge.n	1912 <CONFIG_FPROTECT_BLOCK_SIZE+0x912>
    1908:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    190c:	2070      	movs	r0, #112	; 0x70
    190e:	f002 fc27 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1912:	4287      	cmp	r7, r0
    1914:	bfdc      	itt	le
    1916:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    191a:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    191e:	dd05      	ble.n	192c <CONFIG_FPROTECT_BLOCK_SIZE+0x92c>
    1920:	2800      	cmp	r0, #0
    1922:	bfbc      	itt	lt
    1924:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1928:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    192c:	4621      	mov	r1, r4
    192e:	f001 fbad 	bl	308c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1932:	6820      	ldr	r0, [r4, #0]
    1934:	f1b8 0f00 	cmp.w	r8, #0
    1938:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    193c:	f10a 0001 	add.w	r0, sl, #1
    1940:	6021      	str	r1, [r4, #0]
    1942:	bf08      	it	eq
    1944:	307a      	addeq	r0, #122	; 0x7a
    1946:	d009      	beq.n	195c <CONFIG_FPROTECT_BLOCK_SIZE+0x95c>
    1948:	f1b8 0f01 	cmp.w	r8, #1
    194c:	bf08      	it	eq
    194e:	3048      	addeq	r0, #72	; 0x48
    1950:	d004      	beq.n	195c <CONFIG_FPROTECT_BLOCK_SIZE+0x95c>
    1952:	f240 6139 	movw	r1, #1593	; 0x639
    1956:	2070      	movs	r0, #112	; 0x70
    1958:	f002 fc02 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    195c:	f001 fb7a 	bl	3054 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1960:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1964:	6061      	str	r1, [r4, #4]
    1966:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    196a:	aa01      	add	r2, sp, #4
    196c:	4669      	mov	r1, sp
    196e:	4648      	mov	r0, r9
    1970:	6837      	ldr	r7, [r6, #0]
    1972:	f001 fb8b 	bl	308c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1976:	f002 f899 	bl	3aac <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    197a:	f001 fb6b 	bl	3054 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    197e:	4680      	mov	r8, r0
    1980:	482c      	ldr	r0, [pc, #176]	; (1a34 <CONFIG_FPROTECT_BLOCK_SIZE+0xa34>)
    1982:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    1986:	2920      	cmp	r1, #32
    1988:	d02a      	beq.n	19e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x9e0>
    198a:	68c0      	ldr	r0, [r0, #12]
    198c:	1d40      	adds	r0, r0, #5
    198e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1992:	bf00      	nop
    1994:	e9d4 2100 	ldrd	r2, r1, [r4]
    1998:	1a89      	subs	r1, r1, r2
    199a:	4401      	add	r1, r0
    199c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    19a0:	e9c4 0100 	strd	r0, r1, [r4]
    19a4:	6831      	ldr	r1, [r6, #0]
    19a6:	4281      	cmp	r1, r0
    19a8:	d902      	bls.n	19b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x9b0>
    19aa:	68a0      	ldr	r0, [r4, #8]
    19ac:	1c40      	adds	r0, r0, #1
    19ae:	60a0      	str	r0, [r4, #8]
    19b0:	6832      	ldr	r2, [r6, #0]
    19b2:	6928      	ldr	r0, [r5, #16]
    19b4:	4621      	mov	r1, r4
    19b6:	9b06      	ldr	r3, [sp, #24]
    19b8:	f7ff f9fa 	bl	db0 <MPSL_IRQ_RADIO_Handler+0xb8>
    19bc:	2800      	cmp	r0, #0
    19be:	bf1c      	itt	ne
    19c0:	b007      	addne	sp, #28
    19c2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19c6:	e9d4 1000 	ldrd	r1, r0, [r4]
    19ca:	1a40      	subs	r0, r0, r1
    19cc:	6831      	ldr	r1, [r6, #0]
    19ce:	6021      	str	r1, [r4, #0]
    19d0:	6831      	ldr	r1, [r6, #0]
    19d2:	4408      	add	r0, r1
    19d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    19d8:	6060      	str	r0, [r4, #4]
    19da:	b007      	add	sp, #28
    19dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19e0:	3709      	adds	r7, #9
    19e2:	f1b9 0f00 	cmp.w	r9, #0
    19e6:	d016      	beq.n	1a16 <CONFIG_FPROTECT_BLOCK_SIZE+0xa16>
    19e8:	f002 fb42 	bl	4070 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    19ec:	b998      	cbnz	r0, 1a16 <CONFIG_FPROTECT_BLOCK_SIZE+0xa16>
    19ee:	f002 fa2b 	bl	3e48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    19f2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    19f6:	bf08      	it	eq
    19f8:	200d      	moveq	r0, #13
    19fa:	d00b      	beq.n	1a14 <CONFIG_FPROTECT_BLOCK_SIZE+0xa14>
    19fc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1a00:	3856      	subs	r0, #86	; 0x56
    1a02:	bf08      	it	eq
    1a04:	201c      	moveq	r0, #28
    1a06:	d005      	beq.n	1a14 <CONFIG_FPROTECT_BLOCK_SIZE+0xa14>
    1a08:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1a0c:	389f      	subs	r0, #159	; 0x9f
    1a0e:	bf14      	ite	ne
    1a10:	2000      	movne	r0, #0
    1a12:	2032      	moveq	r0, #50	; 0x32
    1a14:	4407      	add	r7, r0
    1a16:	9800      	ldr	r0, [sp, #0]
    1a18:	4580      	cmp	r8, r0
    1a1a:	bf84      	itt	hi
    1a1c:	eba8 0000 	subhi.w	r0, r8, r0
    1a20:	4407      	addhi	r7, r0
    1a22:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1a26:	e7b5      	b.n	1994 <CONFIG_FPROTECT_BLOCK_SIZE+0x994>
    1a28:	1e848000 	.word	0x1e848000
    1a2c:	0f424000 	.word	0x0f424000
    1a30:	1e847fff 	.word	0x1e847fff
    1a34:	20000ab4 	.word	0x20000ab4
    1a38:	b570      	push	{r4, r5, r6, lr}
    1a3a:	4d1e      	ldr	r5, [pc, #120]	; (1ab4 <CONFIG_FPROTECT_BLOCK_SIZE+0xab4>)
    1a3c:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1a40:	2820      	cmp	r0, #32
    1a42:	bf18      	it	ne
    1a44:	bd70      	popne	{r4, r5, r6, pc}
    1a46:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1a4a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1a4e:	4428      	add	r0, r5
    1a50:	f890 4020 	ldrb.w	r4, [r0, #32]
    1a54:	2c20      	cmp	r4, #32
    1a56:	d027      	beq.n	1aa8 <CONFIG_FPROTECT_BLOCK_SIZE+0xaa8>
    1a58:	4b17      	ldr	r3, [pc, #92]	; (1ab8 <CONFIG_FPROTECT_BLOCK_SIZE+0xab8>)
    1a5a:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    1a5e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    1a62:	7849      	ldrb	r1, [r1, #1]
    1a64:	f880 1020 	strb.w	r1, [r0, #32]
    1a68:	20ff      	movs	r0, #255	; 0xff
    1a6a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    1a6e:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    1a72:	4621      	mov	r1, r4
    1a74:	2002      	movs	r0, #2
    1a76:	f000 f891 	bl	1b9c <CONFIG_FPROTECT_BLOCK_SIZE+0xb9c>
    1a7a:	2000      	movs	r0, #0
    1a7c:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    1a80:	77a8      	strb	r0, [r5, #30]
    1a82:	490e      	ldr	r1, [pc, #56]	; (1abc <CONFIG_FPROTECT_BLOCK_SIZE+0xabc>)
    1a84:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1a88:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1a8c:	7e00      	ldrb	r0, [r0, #24]
    1a8e:	2800      	cmp	r0, #0
    1a90:	bf08      	it	eq
    1a92:	f002 fccf 	bleq	4434 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    1a96:	2000      	movs	r0, #0
    1a98:	4909      	ldr	r1, [pc, #36]	; (1ac0 <CONFIG_FPROTECT_BLOCK_SIZE+0xac0>)
    1a9a:	6849      	ldr	r1, [r1, #4]
    1a9c:	2900      	cmp	r1, #0
    1a9e:	bf08      	it	eq
    1aa0:	bd70      	popeq	{r4, r5, r6, pc}
    1aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1aa6:	4708      	bx	r1
    1aa8:	f240 3132 	movw	r1, #818	; 0x332
    1aac:	2070      	movs	r0, #112	; 0x70
    1aae:	f002 fb57 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ab2:	0000      	.short	0x0000
    1ab4:	20000ab4 	.word	0x20000ab4
    1ab8:	20000a34 	.word	0x20000a34
    1abc:	200006b4 	.word	0x200006b4
    1ac0:	20000038 	.word	0x20000038
    1ac4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1ac8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1b8c <CONFIG_FPROTECT_BLOCK_SIZE+0xb8c>
    1acc:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1ad0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1ad4:	4440      	add	r0, r8
    1ad6:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1ada:	2c20      	cmp	r4, #32
    1adc:	bf08      	it	eq
    1ade:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1ae2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1b90 <CONFIG_FPROTECT_BLOCK_SIZE+0xb90>
    1ae6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1b94 <CONFIG_FPROTECT_BLOCK_SIZE+0xb94>
    1aea:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    1aee:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1af2:	2607      	movs	r6, #7
    1af4:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    1af8:	2801      	cmp	r0, #1
    1afa:	d00e      	beq.n	1b1a <CONFIG_FPROTECT_BLOCK_SIZE+0xb1a>
    1afc:	2804      	cmp	r0, #4
    1afe:	bf08      	it	eq
    1b00:	2602      	moveq	r6, #2
    1b02:	d00a      	beq.n	1b1a <CONFIG_FPROTECT_BLOCK_SIZE+0xb1a>
    1b04:	2805      	cmp	r0, #5
    1b06:	bf0c      	ite	eq
    1b08:	2603      	moveq	r6, #3
    1b0a:	2806      	cmpne	r0, #6
    1b0c:	d005      	beq.n	1b1a <CONFIG_FPROTECT_BLOCK_SIZE+0xb1a>
    1b0e:	f640 01dd 	movw	r1, #2269	; 0x8dd
    1b12:	f04f 0070 	mov.w	r0, #112	; 0x70
    1b16:	f002 fb23 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b1a:	f1bb 0f00 	cmp.w	fp, #0
    1b1e:	bf18      	it	ne
    1b20:	f3af 8000 	nopne.w
    1b24:	f3ef 8010 	mrs	r0, PRIMASK
    1b28:	b672      	cpsid	i
    1b2a:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1b2e:	784a      	ldrb	r2, [r1, #1]
    1b30:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1b34:	4441      	add	r1, r8
    1b36:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1b3a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1b3e:	42a2      	cmp	r2, r4
    1b40:	bf04      	itt	eq
    1b42:	2220      	moveq	r2, #32
    1b44:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1b48:	b1c0      	cbz	r0, 1b7c <CONFIG_FPROTECT_BLOCK_SIZE+0xb7c>
    1b4a:	462a      	mov	r2, r5
    1b4c:	4621      	mov	r1, r4
    1b4e:	2001      	movs	r0, #1
    1b50:	f000 f824 	bl	1b9c <CONFIG_FPROTECT_BLOCK_SIZE+0xb9c>
    1b54:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1b58:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    1b5c:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    1b60:	6840      	ldr	r0, [r0, #4]
    1b62:	4631      	mov	r1, r6
    1b64:	4790      	blx	r2
    1b66:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1b6a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1b6e:	4440      	add	r0, r8
    1b70:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1b74:	2c20      	cmp	r4, #32
    1b76:	d1ba      	bne.n	1aee <CONFIG_FPROTECT_BLOCK_SIZE+0xaee>
    1b78:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1b7c:	4806      	ldr	r0, [pc, #24]	; (1b98 <CONFIG_FPROTECT_BLOCK_SIZE+0xb98>)
    1b7e:	2800      	cmp	r0, #0
    1b80:	bf18      	it	ne
    1b82:	f3af 8000 	nopne.w
    1b86:	b662      	cpsie	i
    1b88:	e7df      	b.n	1b4a <CONFIG_FPROTECT_BLOCK_SIZE+0xb4a>
    1b8a:	0000      	.short	0x0000
    1b8c:	20000ab4 	.word	0x20000ab4
    1b90:	00000000 	.word	0x00000000
    1b94:	20000a34 	.word	0x20000a34
    1b98:	00000000 	.word	0x00000000
    1b9c:	f8df c058 	ldr.w	ip, [pc, #88]	; 1bf8 <CONFIG_FPROTECT_BLOCK_SIZE+0xbf8>
    1ba0:	b510      	push	{r4, lr}
    1ba2:	2300      	movs	r3, #0
    1ba4:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1ba8:	2807      	cmp	r0, #7
    1baa:	d21f      	bcs.n	1bec <CONFIG_FPROTECT_BLOCK_SIZE+0xbec>
    1bac:	e8df f000 	tbb	[pc, r0]
    1bb0:	05050505 	.word	0x05050505
    1bb4:	00040404 	.word	0x00040404
    1bb8:	2301      	movs	r3, #1
    1bba:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	bf08      	it	eq
    1bc2:	bd10      	popeq	{r4, pc}
    1bc4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1bc8:	480c      	ldr	r0, [pc, #48]	; (1bfc <CONFIG_FPROTECT_BLOCK_SIZE+0xbfc>)
    1bca:	4402      	add	r2, r0
    1bcc:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1bd0:	2820      	cmp	r0, #32
    1bd2:	bf0e      	itee	eq
    1bd4:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1bd8:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1bdc:	7041      	strbne	r1, [r0, #1]
    1bde:	2020      	movs	r0, #32
    1be0:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1be4:	7058      	strb	r0, [r3, #1]
    1be6:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1bea:	bd10      	pop	{r4, pc}
    1bec:	f240 216e 	movw	r1, #622	; 0x26e
    1bf0:	2070      	movs	r0, #112	; 0x70
    1bf2:	f002 fab5 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bf6:	0000      	.short	0x0000
    1bf8:	20000a34 	.word	0x20000a34
    1bfc:	20000ab4 	.word	0x20000ab4
    1c00:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1c04:	460f      	mov	r7, r1
    1c06:	4680      	mov	r8, r0
    1c08:	f8df a158 	ldr.w	sl, [pc, #344]	; 1d64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18>
    1c0c:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    1c10:	4450      	add	r0, sl
    1c12:	f1b8 0f01 	cmp.w	r8, #1
    1c16:	f890 4020 	ldrb.w	r4, [r0, #32]
    1c1a:	4625      	mov	r5, r4
    1c1c:	bf18      	it	ne
    1c1e:	f1b8 0f02 	cmpne.w	r8, #2
    1c22:	d005      	beq.n	1c30 <CONFIG_FPROTECT_BLOCK_SIZE+0xc30>
    1c24:	f640 21a1 	movw	r1, #2721	; 0xaa1
    1c28:	f04f 0070 	mov.w	r0, #112	; 0x70
    1c2c:	f002 fa98 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c30:	f04f 0b00 	mov.w	fp, #0
    1c34:	2d20      	cmp	r5, #32
    1c36:	d042      	beq.n	1cbe <CONFIG_FPROTECT_BLOCK_SIZE+0xcbe>
    1c38:	f89a 001e 	ldrb.w	r0, [sl, #30]
    1c3c:	2600      	movs	r6, #0
    1c3e:	2800      	cmp	r0, #0
    1c40:	bf08      	it	eq
    1c42:	2602      	moveq	r6, #2
    1c44:	f001 fb8c 	bl	3360 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1c48:	f8df c11c 	ldr.w	ip, [pc, #284]	; 1d68 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c>
    1c4c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1c50:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    1c54:	688a      	ldr	r2, [r1, #8]
    1c56:	68c9      	ldr	r1, [r1, #12]
    1c58:	1a12      	subs	r2, r2, r0
    1c5a:	1a09      	subs	r1, r1, r0
    1c5c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1c60:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1c64:	4296      	cmp	r6, r2
    1c66:	bf99      	ittee	ls
    1c68:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1c6c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1c70:	4a3e      	ldrhi	r2, [pc, #248]	; (1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>)
    1c72:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    1c76:	d920      	bls.n	1cba <CONFIG_FPROTECT_BLOCK_SIZE+0xcba>
    1c78:	4622      	mov	r2, r4
    1c7a:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    1c7e:	784c      	ldrb	r4, [r1, #1]
    1c80:	2c20      	cmp	r4, #32
    1c82:	d012      	beq.n	1caa <CONFIG_FPROTECT_BLOCK_SIZE+0xcaa>
    1c84:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1c88:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    1c8c:	688b      	ldr	r3, [r1, #8]
    1c8e:	68c9      	ldr	r1, [r1, #12]
    1c90:	1a1b      	subs	r3, r3, r0
    1c92:	1a09      	subs	r1, r1, r0
    1c94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1c98:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1c9c:	429e      	cmp	r6, r3
    1c9e:	bf9c      	itt	ls
    1ca0:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    1ca4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1ca8:	d8e6      	bhi.n	1c78 <CONFIG_FPROTECT_BLOCK_SIZE+0xc78>
    1caa:	2a20      	cmp	r2, #32
    1cac:	d005      	beq.n	1cba <CONFIG_FPROTECT_BLOCK_SIZE+0xcba>
    1cae:	463b      	mov	r3, r7
    1cb0:	2120      	movs	r1, #32
    1cb2:	2004      	movs	r0, #4
    1cb4:	f7ff f840 	bl	d38 <MPSL_IRQ_RADIO_Handler+0x40>
    1cb8:	4604      	mov	r4, r0
    1cba:	42ac      	cmp	r4, r5
    1cbc:	d116      	bne.n	1cec <CONFIG_FPROTECT_BLOCK_SIZE+0xcec>
    1cbe:	482c      	ldr	r0, [pc, #176]	; (1d70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24>)
    1cc0:	2800      	cmp	r0, #0
    1cc2:	bf18      	it	ne
    1cc4:	f3af 8000 	nopne.w
    1cc8:	f001 fb4a 	bl	3360 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1ccc:	4603      	mov	r3, r0
    1cce:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    1cd2:	2820      	cmp	r0, #32
    1cd4:	d00d      	beq.n	1cf2 <CONFIG_FPROTECT_BLOCK_SIZE+0xcf2>
    1cd6:	f8da 0008 	ldr.w	r0, [sl, #8]
    1cda:	1c99      	adds	r1, r3, #2
    1cdc:	1a08      	subs	r0, r1, r0
    1cde:	0200      	lsls	r0, r0, #8
    1ce0:	17c1      	asrs	r1, r0, #31
    1ce2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1ce6:	1200      	asrs	r0, r0, #8
    1ce8:	2800      	cmp	r0, #0
    1cea:	dd02      	ble.n	1cf2 <CONFIG_FPROTECT_BLOCK_SIZE+0xcf2>
    1cec:	2000      	movs	r0, #0
    1cee:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1cf2:	2d20      	cmp	r5, #32
    1cf4:	d014      	beq.n	1d20 <CONFIG_FPROTECT_BLOCK_SIZE+0xd20>
    1cf6:	462a      	mov	r2, r5
    1cf8:	4641      	mov	r1, r8
    1cfa:	4618      	mov	r0, r3
    1cfc:	f7ff fab2 	bl	1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>
    1d00:	2800      	cmp	r0, #0
    1d02:	bf1e      	ittt	ne
    1d04:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    1d08:	2002      	movne	r0, #2
    1d0a:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1d0e:	463b      	mov	r3, r7
    1d10:	462a      	mov	r2, r5
    1d12:	2120      	movs	r1, #32
    1d14:	2004      	movs	r0, #4
    1d16:	f7ff f80f 	bl	d38 <MPSL_IRQ_RADIO_Handler+0x40>
    1d1a:	2000      	movs	r0, #0
    1d1c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1d20:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    1d24:	b118      	cbz	r0, 1d2e <CONFIG_FPROTECT_BLOCK_SIZE+0xd2e>
    1d26:	f002 f895 	bl	3e54 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1d2a:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    1d2e:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    1d32:	b120      	cbz	r0, 1d3e <CONFIG_FPROTECT_BLOCK_SIZE+0xd3e>
    1d34:	2005      	movs	r0, #5
    1d36:	f001 fd75 	bl	3824 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1d3a:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    1d3e:	2004      	movs	r0, #4
    1d40:	f001 fd70 	bl	3824 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1d44:	f001 fdde 	bl	3904 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1d48:	2020      	movs	r0, #32
    1d4a:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    1d4e:	4809      	ldr	r0, [pc, #36]	; (1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>)
    1d50:	6880      	ldr	r0, [r0, #8]
    1d52:	f8c0 b000 	str.w	fp, [r0]
    1d56:	4808      	ldr	r0, [pc, #32]	; (1d78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>)
    1d58:	f8c0 b000 	str.w	fp, [r0]
    1d5c:	2001      	movs	r0, #1
    1d5e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1d62:	0000      	.short	0x0000
    1d64:	20000ab4 	.word	0x20000ab4
    1d68:	200006b4 	.word	0x200006b4
    1d6c:	20000a34 	.word	0x20000a34
    1d70:	00000000 	.word	0x00000000
    1d74:	20000038 	.word	0x20000038
    1d78:	40000508 	.word	0x40000508

00001d7c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d80:	4e69      	ldr	r6, [pc, #420]	; (1f28 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1d82:	4607      	mov	r7, r0
    1d84:	b08d      	sub	sp, #52	; 0x34
    1d86:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1d8a:	4688      	mov	r8, r1
    1d8c:	2820      	cmp	r0, #32
    1d8e:	d055      	beq.n	1e3c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    1d90:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1d94:	f106 0408 	add.w	r4, r6, #8
    1d98:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1d9c:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    1da0:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    1da4:	2020      	movs	r0, #32
    1da6:	f88d 0020 	strb.w	r0, [sp, #32]
    1daa:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    1dae:	aa0a      	add	r2, sp, #40	; 0x28
    1db0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1db4:	4430      	add	r0, r6
    1db6:	a909      	add	r1, sp, #36	; 0x24
    1db8:	f890 5020 	ldrb.w	r5, [r0, #32]
    1dbc:	68f0      	ldr	r0, [r6, #12]
    1dbe:	9002      	str	r0, [sp, #8]
    1dc0:	6830      	ldr	r0, [r6, #0]
    1dc2:	4438      	add	r0, r7
    1dc4:	f001 f962 	bl	308c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1dc8:	f8da 000c 	ldr.w	r0, [sl, #12]
    1dcc:	9909      	ldr	r1, [sp, #36]	; 0x24
    1dce:	2f65      	cmp	r7, #101	; 0x65
    1dd0:	4408      	add	r0, r1
    1dd2:	d338      	bcc.n	1e46 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1dd4:	4a55      	ldr	r2, [pc, #340]	; (1f2c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    1dd6:	2100      	movs	r1, #0
    1dd8:	1bd2      	subs	r2, r2, r7
    1dda:	eb71 0201 	sbcs.w	r2, r1, r1
    1dde:	d332      	bcc.n	1e46 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1de0:	6822      	ldr	r2, [r4, #0]
    1de2:	1a82      	subs	r2, r0, r2
    1de4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1de8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1dec:	d82b      	bhi.n	1e46 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1dee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1df2:	6060      	str	r0, [r4, #4]
    1df4:	4630      	mov	r0, r6
    1df6:	f884 8010 	strb.w	r8, [r4, #16]
    1dfa:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1dfe:	f10d 0a20 	add.w	sl, sp, #32
    1e02:	2d20      	cmp	r5, #32
    1e04:	bf1c      	itt	ne
    1e06:	494a      	ldrne	r1, [pc, #296]	; (1f30 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    1e08:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1e0c:	d050      	beq.n	1eb0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1e0e:	bf00      	nop
    1e10:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1e14:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1e18:	6861      	ldr	r1, [r4, #4]
    1e1a:	f8d8 6008 	ldr.w	r6, [r8, #8]
    1e1e:	f108 0008 	add.w	r0, r8, #8
    1e22:	1a71      	subs	r1, r6, r1
    1e24:	0209      	lsls	r1, r1, #8
    1e26:	17ca      	asrs	r2, r1, #31
    1e28:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1e2c:	1209      	asrs	r1, r1, #8
    1e2e:	d42d      	bmi.n	1e8c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    1e30:	89c0      	ldrh	r0, [r0, #14]
    1e32:	2800      	cmp	r0, #0
    1e34:	d03c      	beq.n	1eb0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1e36:	89e0      	ldrh	r0, [r4, #14]
    1e38:	b148      	cbz	r0, 1e4e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    1e3a:	e039      	b.n	1eb0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1e3c:	f640 3168 	movw	r1, #2920	; 0xb68
    1e40:	2070      	movs	r0, #112	; 0x70
    1e42:	f002 f98d 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e46:	b00d      	add	sp, #52	; 0x34
    1e48:	2001      	movs	r0, #1
    1e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e4e:	6820      	ldr	r0, [r4, #0]
    1e50:	900c      	str	r0, [sp, #48]	; 0x30
    1e52:	f001 fff9 	bl	3e48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1e56:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1e5a:	bf08      	it	eq
    1e5c:	200d      	moveq	r0, #13
    1e5e:	d00b      	beq.n	1e78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1e60:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1e64:	3856      	subs	r0, #86	; 0x56
    1e66:	bf08      	it	eq
    1e68:	201c      	moveq	r0, #28
    1e6a:	d005      	beq.n	1e78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1e6c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1e70:	389f      	subs	r0, #159	; 0x9f
    1e72:	bf14      	ite	ne
    1e74:	2000      	movne	r0, #0
    1e76:	2032      	moveq	r0, #50	; 0x32
    1e78:	1c41      	adds	r1, r0, #1
    1e7a:	980c      	ldr	r0, [sp, #48]	; 0x30
    1e7c:	1a30      	subs	r0, r6, r0
    1e7e:	0200      	lsls	r0, r0, #8
    1e80:	17c2      	asrs	r2, r0, #31
    1e82:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1e86:	1200      	asrs	r0, r0, #8
    1e88:	4288      	cmp	r0, r1
    1e8a:	da11      	bge.n	1eb0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1e8c:	f88a 5000 	strb.w	r5, [sl]
    1e90:	f898 1018 	ldrb.w	r1, [r8, #24]
    1e94:	7c20      	ldrb	r0, [r4, #16]
    1e96:	4281      	cmp	r1, r0
    1e98:	d805      	bhi.n	1ea6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    1e9a:	9802      	ldr	r0, [sp, #8]
    1e9c:	6060      	str	r0, [r4, #4]
    1e9e:	b00d      	add	sp, #52	; 0x34
    1ea0:	2002      	movs	r0, #2
    1ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ea6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1eaa:	7845      	ldrb	r5, [r0, #1]
    1eac:	2d20      	cmp	r5, #32
    1eae:	d1af      	bne.n	1e10 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    1eb0:	2005      	movs	r0, #5
    1eb2:	f001 fcb7 	bl	3824 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1eb6:	4c1c      	ldr	r4, [pc, #112]	; (1f28 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ebc:	6060      	str	r0, [r4, #4]
    1ebe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    1ec2:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1ec6:	2120      	movs	r1, #32
    1ec8:	2a20      	cmp	r2, #32
    1eca:	d003      	beq.n	1ed4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    1ecc:	2005      	movs	r0, #5
    1ece:	f7fe ff33 	bl	d38 <MPSL_IRQ_RADIO_Handler+0x40>
    1ed2:	e004      	b.n	1ede <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    1ed4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    1ed8:	4420      	add	r0, r4
    1eda:	f890 0020 	ldrb.w	r0, [r0, #32]
    1ede:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    1ee2:	4913      	ldr	r1, [pc, #76]	; (1f30 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    1ee4:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1ee8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    1eec:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1ef0:	7048      	strb	r0, [r1, #1]
    1ef2:	6820      	ldr	r0, [r4, #0]
    1ef4:	4438      	add	r0, r7
    1ef6:	6020      	str	r0, [r4, #0]
    1ef8:	20ff      	movs	r0, #255	; 0xff
    1efa:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    1efe:	7e60      	ldrb	r0, [r4, #25]
    1f00:	2801      	cmp	r0, #1
    1f02:	d105      	bne.n	1f10 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    1f04:	68e0      	ldr	r0, [r4, #12]
    1f06:	1e40      	subs	r0, r0, #1
    1f08:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f0c:	f001 faee 	bl	34ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1f10:	f89d 0020 	ldrb.w	r0, [sp, #32]
    1f14:	2820      	cmp	r0, #32
    1f16:	d003      	beq.n	1f20 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    1f18:	4806      	ldr	r0, [pc, #24]	; (1f34 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    1f1a:	7840      	ldrb	r0, [r0, #1]
    1f1c:	f002 f9f4 	bl	4308 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1f20:	b00d      	add	sp, #52	; 0x34
    1f22:	2000      	movs	r0, #0
    1f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f28:	20000ab4 	.word	0x20000ab4
    1f2c:	0f424000 	.word	0x0f424000
    1f30:	20000a34 	.word	0x20000a34
    1f34:	20000038 	.word	0x20000038

00001f38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f3a:	4d6b      	ldr	r5, [pc, #428]	; (20e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    1f3c:	4a6b      	ldr	r2, [pc, #428]	; (20ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    1f3e:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    1f42:	2601      	movs	r6, #1
    1f44:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    1f48:	2808      	cmp	r0, #8
    1f4a:	d27c      	bcs.n	2046 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    1f4c:	e8df f000 	tbb	[pc, r0]
    1f50:	a9977004 	.word	0xa9977004
    1f54:	b3ae41c7 	.word	0xb3ae41c7
    1f58:	b919      	cbnz	r1, 1f62 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1f5a:	f001 ff97 	bl	3e8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1f5e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1f62:	8ae0      	ldrh	r0, [r4, #22]
    1f64:	b110      	cbz	r0, 1f6c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1f66:	f002 f883 	bl	4070 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1f6a:	b180      	cbz	r0, 1f8e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    1f6c:	f7ff fd64 	bl	1a38 <CONFIG_FPROTECT_BLOCK_SIZE+0xa38>
    1f70:	20ff      	movs	r0, #255	; 0xff
    1f72:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    1f76:	6861      	ldr	r1, [r4, #4]
    1f78:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    1f7c:	d003      	beq.n	1f86 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    1f7e:	2005      	movs	r0, #5
    1f80:	f001 fb9a 	bl	36b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1f84:	b140      	cbz	r0, 1f98 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    1f86:	7e60      	ldrb	r0, [r4, #25]
    1f88:	2801      	cmp	r0, #1
    1f8a:	d110      	bne.n	1fae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    1f8c:	e009      	b.n	1fa2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    1f8e:	f640 0169 	movw	r1, #2153	; 0x869
    1f92:	2070      	movs	r0, #112	; 0x70
    1f94:	f002 f8e4 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f98:	f640 016e 	movw	r1, #2158	; 0x86e
    1f9c:	2070      	movs	r0, #112	; 0x70
    1f9e:	f002 f8df 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fa2:	68e0      	ldr	r0, [r4, #12]
    1fa4:	1e40      	subs	r0, r0, #1
    1fa6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1faa:	f001 fa9f 	bl	34ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1fae:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1fb2:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1fb6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1fba:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1fbe:	6840      	ldr	r0, [r0, #4]
    1fc0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1fc4:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1fc8:	b001      	add	sp, #4
    1fca:	2101      	movs	r1, #1
    1fcc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1fd0:	4710      	bx	r2
    1fd2:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1fd6:	b140      	cbz	r0, 1fea <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    1fd8:	b919      	cbnz	r1, 1fe2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    1fda:	f001 ff57 	bl	3e8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1fde:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1fe2:	2000      	movs	r0, #0
    1fe4:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fea:	f7ff fd25 	bl	1a38 <CONFIG_FPROTECT_BLOCK_SIZE+0xa38>
    1fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ff2:	6060      	str	r0, [r4, #4]
    1ff4:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    1ff8:	f88d 0000 	strb.w	r0, [sp]
    1ffc:	f89d 0000 	ldrb.w	r0, [sp]
    2000:	b188      	cbz	r0, 2026 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    2002:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2006:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    200a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    200e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2012:	6840      	ldr	r0, [r0, #4]
    2014:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2018:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    201c:	b001      	add	sp, #4
    201e:	2106      	movs	r1, #6
    2020:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2024:	4710      	bx	r2
    2026:	f640 0185 	movw	r1, #2181	; 0x885
    202a:	2070      	movs	r0, #112	; 0x70
    202c:	f002 f898 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2030:	f7ff fd02 	bl	1a38 <CONFIG_FPROTECT_BLOCK_SIZE+0xa38>
    2034:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    2038:	f002 f81a 	bl	4070 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    203c:	b120      	cbz	r0, 2048 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    203e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2042:	b130      	cbz	r0, 2052 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    2044:	e009      	b.n	205a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    2046:	e04a      	b.n	20de <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a6>
    2048:	f640 0193 	movw	r1, #2195	; 0x893
    204c:	2070      	movs	r0, #112	; 0x70
    204e:	f002 f887 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2052:	f001 ff1b 	bl	3e8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2056:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    205a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    205e:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2062:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2066:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    206a:	6840      	ldr	r0, [r0, #4]
    206c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2070:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2074:	b001      	add	sp, #4
    2076:	2100      	movs	r1, #0
    2078:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    207c:	4710      	bx	r2
    207e:	f001 fcf7 	bl	3a70 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2082:	8ae0      	ldrh	r0, [r4, #22]
    2084:	b110      	cbz	r0, 208c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x154>
    2086:	f001 fff3 	bl	4070 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    208a:	b128      	cbz	r0, 2098 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x160>
    208c:	f001 fd04 	bl	3a98 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    2090:	2800      	cmp	r0, #0
    2092:	bf18      	it	ne
    2094:	7766      	strbne	r6, [r4, #29]
    2096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2098:	f640 019d 	movw	r1, #2205	; 0x89d
    209c:	2070      	movs	r0, #112	; 0x70
    209e:	f002 f85f 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20a2:	4813      	ldr	r0, [pc, #76]	; (20f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    20a4:	6006      	str	r6, [r0, #0]
    20a6:	6890      	ldr	r0, [r2, #8]
    20a8:	6006      	str	r6, [r0, #0]
    20aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20ac:	7810      	ldrb	r0, [r2, #0]
    20ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    20b2:	f002 b929 	b.w	4308 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    20b6:	f7ff fcbf 	bl	1a38 <CONFIG_FPROTECT_BLOCK_SIZE+0xa38>
    20ba:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    20be:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    20c2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    20c6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    20ca:	6840      	ldr	r0, [r0, #4]
    20cc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    20d0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    20d4:	b001      	add	sp, #4
    20d6:	2105      	movs	r1, #5
    20d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    20dc:	4710      	bx	r2
    20de:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    20e2:	2070      	movs	r0, #112	; 0x70
    20e4:	f002 f83c 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20e8:	200006b4 	.word	0x200006b4
    20ec:	20000038 	.word	0x20000038
    20f0:	40000508 	.word	0x40000508

000020f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    20f4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20f8:	4682      	mov	sl, r0
    20fa:	48ef      	ldr	r0, [pc, #956]	; (24b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    20fc:	b095      	sub	sp, #84	; 0x54
    20fe:	6800      	ldr	r0, [r0, #0]
    2100:	4dee      	ldr	r5, [pc, #952]	; (24bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    2102:	05c0      	lsls	r0, r0, #23
    2104:	0dc0      	lsrs	r0, r0, #23
    2106:	d00e      	beq.n	2126 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2108:	3810      	subs	r0, #16
    210a:	b240      	sxtb	r0, r0
    210c:	2800      	cmp	r0, #0
    210e:	bfb8      	it	lt
    2110:	f000 000f 	andlt.w	r0, r0, #15
    2114:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2118:	bfac      	ite	ge
    211a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    211e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2122:	0940      	lsrs	r0, r0, #5
    2124:	d00d      	beq.n	2142 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    2126:	9816      	ldr	r0, [sp, #88]	; 0x58
    2128:	f04f 0b00 	mov.w	fp, #0
    212c:	7800      	ldrb	r0, [r0, #0]
    212e:	2800      	cmp	r0, #0
    2130:	bf18      	it	ne
    2132:	2801      	cmpne	r0, #1
    2134:	d018      	beq.n	2168 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2136:	f240 713b 	movw	r1, #1851	; 0x73b
    213a:	f04f 0070 	mov.w	r0, #112	; 0x70
    213e:	f002 f80f 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2142:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2146:	f04f 0b01 	mov.w	fp, #1
    214a:	2820      	cmp	r0, #32
    214c:	d007      	beq.n	215e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    214e:	9816      	ldr	r0, [sp, #88]	; 0x58
    2150:	7800      	ldrb	r0, [r0, #0]
    2152:	b148      	cbz	r0, 2168 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2154:	f240 7137 	movw	r1, #1847	; 0x737
    2158:	2070      	movs	r0, #112	; 0x70
    215a:	f002 f801 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    215e:	f240 7134 	movw	r1, #1844	; 0x734
    2162:	2070      	movs	r0, #112	; 0x70
    2164:	f001 fffc 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2168:	4cd5      	ldr	r4, [pc, #852]	; (24c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    216a:	b124      	cbz	r4, 2176 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    216c:	2100      	movs	r1, #0
    216e:	f240 703e 	movw	r0, #1854	; 0x73e
    2172:	f3af 8000 	nop.w
    2176:	2000      	movs	r0, #0
    2178:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    217c:	49d1      	ldr	r1, [pc, #836]	; (24c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    217e:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    2182:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2186:	f04f 0901 	mov.w	r9, #1
    218a:	9000      	str	r0, [sp, #0]
    218c:	b124      	cbz	r4, 2198 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    218e:	2100      	movs	r1, #0
    2190:	f240 7049 	movw	r0, #1865	; 0x749
    2194:	f3af 8000 	nop.w
    2198:	f1b9 0f00 	cmp.w	r9, #0
    219c:	d00a      	beq.n	21b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    219e:	bf00      	nop
    21a0:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    21a4:	f04f 0800 	mov.w	r8, #0
    21a8:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    21ac:	f1bb 0f00 	cmp.w	fp, #0
    21b0:	d007      	beq.n	21c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    21b2:	e038      	b.n	2226 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    21b4:	48c4      	ldr	r0, [pc, #784]	; (24c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    21b6:	2800      	cmp	r0, #0
    21b8:	bf18      	it	ne
    21ba:	f3af 8000 	nopne.w
    21be:	b662      	cpsie	i
    21c0:	e7ee      	b.n	21a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    21c2:	4637      	mov	r7, r6
    21c4:	2001      	movs	r0, #1
    21c6:	ea20 0607 	bic.w	r6, r0, r7
    21ca:	48c0      	ldr	r0, [pc, #768]	; (24cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    21cc:	2240      	movs	r2, #64	; 0x40
    21ce:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    21d2:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    21d6:	f006 fb14 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    21da:	b124      	cbz	r4, 21e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    21dc:	2100      	movs	r1, #0
    21de:	f240 505e 	movw	r0, #1374	; 0x55e
    21e2:	f3af 8000 	nop.w
    21e6:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    21ea:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    21ee:	4429      	add	r1, r5
    21f0:	4428      	add	r0, r5
    21f2:	8c0a      	ldrh	r2, [r1, #32]
    21f4:	8402      	strh	r2, [r0, #32]
    21f6:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    21fa:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    21fe:	b124      	cbz	r4, 220a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    2200:	2100      	movs	r1, #0
    2202:	f240 5062 	movw	r0, #1378	; 0x562
    2206:	f3af 8000 	nop.w
    220a:	b124      	cbz	r4, 2216 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    220c:	2100      	movs	r1, #0
    220e:	f240 7053 	movw	r0, #1875	; 0x753
    2212:	f3af 8000 	nop.w
    2216:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    221a:	f88d 0008 	strb.w	r0, [sp, #8]
    221e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2222:	2800      	cmp	r0, #0
    2224:	d1b2      	bne.n	218c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2226:	b124      	cbz	r4, 2232 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    2228:	2100      	movs	r1, #0
    222a:	f240 705d 	movw	r0, #1885	; 0x75d
    222e:	f3af 8000 	nop.w
    2232:	a802      	add	r0, sp, #8
    2234:	f001 f89a 	bl	336c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2238:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    223c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    2240:	4633      	mov	r3, r6
    2242:	aa09      	add	r2, sp, #36	; 0x24
    2244:	a80e      	add	r0, sp, #56	; 0x38
    2246:	9916      	ldr	r1, [sp, #88]	; 0x58
    2248:	f7ff fa94 	bl	1774 <CONFIG_FPROTECT_BLOCK_SIZE+0x774>
    224c:	b124      	cbz	r4, 2258 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    224e:	2100      	movs	r1, #0
    2250:	f240 7064 	movw	r0, #1892	; 0x764
    2254:	f3af 8000 	nop.w
    2258:	4a9c      	ldr	r2, [pc, #624]	; (24cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    225a:	990e      	ldr	r1, [sp, #56]	; 0x38
    225c:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    2260:	a809      	add	r0, sp, #36	; 0x24
    2262:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    2266:	2a01      	cmp	r2, #1
    2268:	bf18      	it	ne
    226a:	2a02      	cmpne	r2, #2
    226c:	d138      	bne.n	22e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    226e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2272:	eba2 0201 	sub.w	r2, r2, r1
    2276:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    227a:	eba3 0101 	sub.w	r1, r3, r1
    227e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    2282:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2286:	2a02      	cmp	r2, #2
    2288:	d364      	bcc.n	2354 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    228a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    228e:	bf98      	it	ls
    2290:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    2294:	d85e      	bhi.n	2354 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    2296:	f04f 0801 	mov.w	r8, #1
    229a:	ab14      	add	r3, sp, #80	; 0x50
    229c:	aa13      	add	r2, sp, #76	; 0x4c
    229e:	4631      	mov	r1, r6
    22a0:	f7fe ff3e 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    22a4:	2800      	cmp	r0, #0
    22a6:	d05d      	beq.n	2364 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    22a8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    22ac:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    22b0:	4633      	mov	r3, r6
    22b2:	428a      	cmp	r2, r1
    22b4:	d05a      	beq.n	236c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    22b6:	2005      	movs	r0, #5
    22b8:	f7fe fd3e 	bl	d38 <MPSL_IRQ_RADIO_Handler+0x40>
    22bc:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    22c0:	7048      	strb	r0, [r1, #1]
    22c2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    22c6:	2820      	cmp	r0, #32
    22c8:	bf1c      	itt	ne
    22ca:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    22ce:	f880 a001 	strbne.w	sl, [r0, #1]
    22d2:	d057      	beq.n	2384 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    22d4:	4632      	mov	r2, r6
    22d6:	4651      	mov	r1, sl
    22d8:	f05f 0003 	movs.w	r0, #3
    22dc:	f7ff fc5e 	bl	1b9c <CONFIG_FPROTECT_BLOCK_SIZE+0xb9c>
    22e0:	b124      	cbz	r4, 22ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    22e2:	2100      	movs	r1, #0
    22e4:	f240 7069 	movw	r0, #1897	; 0x769
    22e8:	f3af 8000 	nop.w
    22ec:	4878      	ldr	r0, [pc, #480]	; (24d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    22ee:	2800      	cmp	r0, #0
    22f0:	bf18      	it	ne
    22f2:	f3af 8000 	nopne.w
    22f6:	f3ef 8910 	mrs	r9, PRIMASK
    22fa:	b672      	cpsid	i
    22fc:	b124      	cbz	r4, 2308 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    22fe:	2100      	movs	r1, #0
    2300:	f240 706f 	movw	r0, #1903	; 0x76f
    2304:	f3af 8000 	nop.w
    2308:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    230c:	f88d 0008 	strb.w	r0, [sp, #8]
    2310:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2314:	2800      	cmp	r0, #0
    2316:	f47f af39 	bne.w	218c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    231a:	b124      	cbz	r4, 2326 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    231c:	2100      	movs	r1, #0
    231e:	f240 7077 	movw	r0, #1911	; 0x777
    2322:	f3af 8000 	nop.w
    2326:	af09      	add	r7, sp, #36	; 0x24
    2328:	9800      	ldr	r0, [sp, #0]
    232a:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    232e:	f100 0708 	add.w	r7, r0, #8
    2332:	f1b8 0f00 	cmp.w	r8, #0
    2336:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    233a:	990d      	ldr	r1, [sp, #52]	; 0x34
    233c:	6181      	str	r1, [r0, #24]
    233e:	d051      	beq.n	23e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    2340:	b124      	cbz	r4, 234c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2342:	2100      	movs	r1, #0
    2344:	f240 7084 	movw	r0, #1924	; 0x784
    2348:	f3af 8000 	nop.w
    234c:	f1bb 0f00 	cmp.w	fp, #0
    2350:	d139      	bne.n	23c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    2352:	e01f      	b.n	2394 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    2354:	4632      	mov	r2, r6
    2356:	4651      	mov	r1, sl
    2358:	2004      	movs	r0, #4
    235a:	f7ff fc1f 	bl	1b9c <CONFIG_FPROTECT_BLOCK_SIZE+0xb9c>
    235e:	f04f 0801 	mov.w	r8, #1
    2362:	e7bd      	b.n	22e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    2364:	4632      	mov	r2, r6
    2366:	4651      	mov	r1, sl
    2368:	2004      	movs	r0, #4
    236a:	e7b7      	b.n	22dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    236c:	2920      	cmp	r1, #32
    236e:	bf19      	ittee	ne
    2370:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2374:	7840      	ldrbne	r0, [r0, #1]
    2376:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    237a:	4428      	addeq	r0, r5
    237c:	bf08      	it	eq
    237e:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2382:	e79b      	b.n	22bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    2384:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    2388:	4429      	add	r1, r5
    238a:	f881 a020 	strb.w	sl, [r1, #32]
    238e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    2392:	e79f      	b.n	22d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    2394:	9811      	ldr	r0, [sp, #68]	; 0x44
    2396:	f010 0fff 	tst.w	r0, #255	; 0xff
    239a:	d014      	beq.n	23c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    239c:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    23a0:	2820      	cmp	r0, #32
    23a2:	d110      	bne.n	23c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    23a4:	b124      	cbz	r4, 23b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    23a6:	2100      	movs	r1, #0
    23a8:	f240 7089 	movw	r0, #1929	; 0x789
    23ac:	f3af 8000 	nop.w
    23b0:	4631      	mov	r1, r6
    23b2:	2002      	movs	r0, #2
    23b4:	f7ff fc24 	bl	1c00 <CONFIG_FPROTECT_BLOCK_SIZE+0xc00>
    23b8:	9010      	str	r0, [sp, #64]	; 0x40
    23ba:	b920      	cbnz	r0, 23c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    23bc:	9816      	ldr	r0, [sp, #88]	; 0x58
    23be:	7800      	ldrb	r0, [r0, #0]
    23c0:	b1e8      	cbz	r0, 23fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
    23c2:	2801      	cmp	r0, #1
    23c4:	d02a      	beq.n	241c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    23c6:	b124      	cbz	r4, 23d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    23c8:	2100      	movs	r1, #0
    23ca:	f240 70a6 	movw	r0, #1958	; 0x7a6
    23ce:	f3af 8000 	nop.w
    23d2:	20ff      	movs	r0, #255	; 0xff
    23d4:	f1bb 0f00 	cmp.w	fp, #0
    23d8:	bf18      	it	ne
    23da:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    23de:	d026      	beq.n	242e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33a>
    23e0:	f04f 0801 	mov.w	r8, #1
    23e4:	b124      	cbz	r4, 23f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    23e6:	2100      	movs	r1, #0
    23e8:	f240 70b7 	movw	r0, #1975	; 0x7b7
    23ec:	f3af 8000 	nop.w
    23f0:	9810      	ldr	r0, [sp, #64]	; 0x40
    23f2:	4e38      	ldr	r6, [pc, #224]	; (24d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    23f4:	2802      	cmp	r0, #2
    23f6:	d023      	beq.n	2440 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    23f8:	2801      	cmp	r0, #1
    23fa:	d029      	beq.n	2450 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    23fc:	e02d      	b.n	245a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    23fe:	b124      	cbz	r4, 240a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x316>
    2400:	2100      	movs	r1, #0
    2402:	f240 7091 	movw	r0, #1937	; 0x791
    2406:	f3af 8000 	nop.w
    240a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    240e:	4651      	mov	r1, sl
    2410:	2004      	movs	r0, #4
    2412:	f7ff fbc3 	bl	1b9c <CONFIG_FPROTECT_BLOCK_SIZE+0xb9c>
    2416:	f04f 0801 	mov.w	r8, #1
    241a:	e7e3      	b.n	23e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    241c:	2c00      	cmp	r4, #0
    241e:	f43f aeb5 	beq.w	218c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2422:	2100      	movs	r1, #0
    2424:	f240 709c 	movw	r0, #1948	; 0x79c
    2428:	f3af 8000 	nop.w
    242c:	e6ae      	b.n	218c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    242e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    2432:	2101      	movs	r1, #1
    2434:	4391      	bics	r1, r2
    2436:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    243a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    243e:	e7cf      	b.n	23e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
    2440:	68a8      	ldr	r0, [r5, #8]
    2442:	990e      	ldr	r1, [sp, #56]	; 0x38
    2444:	1a40      	subs	r0, r0, r1
    2446:	f006 f882 	bl	854e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    244a:	6871      	ldr	r1, [r6, #4]
    244c:	b921      	cbnz	r1, 2458 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    244e:	e004      	b.n	245a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    2450:	6871      	ldr	r1, [r6, #4]
    2452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2456:	b101      	cbz	r1, 245a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    2458:	4788      	blx	r1
    245a:	f1b9 0f00 	cmp.w	r9, #0
    245e:	d024      	beq.n	24aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b6>
    2460:	b124      	cbz	r4, 246c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    2462:	2100      	movs	r1, #0
    2464:	f240 70c7 	movw	r0, #1991	; 0x7c7
    2468:	f3af 8000 	nop.w
    246c:	f1b8 0f00 	cmp.w	r8, #0
    2470:	d011      	beq.n	2496 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    2472:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2476:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    247a:	4428      	add	r0, r5
    247c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2480:	2820      	cmp	r0, #32
    2482:	d008      	beq.n	2496 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    2484:	b124      	cbz	r4, 2490 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>
    2486:	2100      	movs	r1, #0
    2488:	f240 70ce 	movw	r0, #1998	; 0x7ce
    248c:	f3af 8000 	nop.w
    2490:	7870      	ldrb	r0, [r6, #1]
    2492:	f001 ff39 	bl	4308 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2496:	b124      	cbz	r4, 24a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    2498:	2100      	movs	r1, #0
    249a:	f240 70d3 	movw	r0, #2003	; 0x7d3
    249e:	f3af 8000 	nop.w
    24a2:	b017      	add	sp, #92	; 0x5c
    24a4:	4640      	mov	r0, r8
    24a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24aa:	4807      	ldr	r0, [pc, #28]	; (24c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    24ac:	2800      	cmp	r0, #0
    24ae:	bf18      	it	ne
    24b0:	f3af 8000 	nopne.w
    24b4:	b662      	cpsie	i
    24b6:	e7d3      	b.n	2460 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>
    24b8:	e000ed04 	.word	0xe000ed04
    24bc:	20000ab4 	.word	0x20000ab4
    24c0:	00000000 	.word	0x00000000
    24c4:	200006b4 	.word	0x200006b4
    24c8:	00000000 	.word	0x00000000
    24cc:	20000a34 	.word	0x20000a34
    24d0:	00000000 	.word	0x00000000
    24d4:	20000038 	.word	0x20000038

000024d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    24d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24dc:	4606      	mov	r6, r0
    24de:	7800      	ldrb	r0, [r0, #0]
    24e0:	b08d      	sub	sp, #52	; 0x34
    24e2:	b118      	cbz	r0, 24ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    24e4:	b00d      	add	sp, #52	; 0x34
    24e6:	2000      	movs	r0, #0
    24e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24ec:	488c      	ldr	r0, [pc, #560]	; (2720 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    24ee:	6800      	ldr	r0, [r0, #0]
    24f0:	05c0      	lsls	r0, r0, #23
    24f2:	0dc0      	lsrs	r0, r0, #23
    24f4:	d00e      	beq.n	2514 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    24f6:	3810      	subs	r0, #16
    24f8:	b240      	sxtb	r0, r0
    24fa:	2800      	cmp	r0, #0
    24fc:	bfb8      	it	lt
    24fe:	f000 000f 	andlt.w	r0, r0, #15
    2502:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2506:	bfac      	ite	ge
    2508:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    250c:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2510:	0940      	lsrs	r0, r0, #5
    2512:	d0e7      	beq.n	24e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    2514:	4d83      	ldr	r5, [pc, #524]	; (2724 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    2516:	4c84      	ldr	r4, [pc, #528]	; (2728 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    2518:	f04f 0b01 	mov.w	fp, #1
    251c:	2700      	movs	r7, #0
    251e:	b125      	cbz	r5, 252a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    2520:	2100      	movs	r1, #0
    2522:	f240 50e5 	movw	r0, #1509	; 0x5e5
    2526:	f3af 8000 	nop.w
    252a:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
    252e:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    2532:	f04f 0900 	mov.w	r9, #0
    2536:	b125      	cbz	r5, 2542 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    2538:	2100      	movs	r1, #0
    253a:	f240 50ea 	movw	r0, #1514	; 0x5ea
    253e:	f3af 8000 	nop.w
    2542:	487a      	ldr	r0, [pc, #488]	; (272c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    2544:	ea2b 080a 	bic.w	r8, fp, sl
    2548:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    254c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    2550:	2240      	movs	r2, #64	; 0x40
    2552:	f006 f956 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2556:	b125      	cbz	r5, 2562 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    2558:	2100      	movs	r1, #0
    255a:	f240 505e 	movw	r0, #1374	; 0x55e
    255e:	f3af 8000 	nop.w
    2562:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    2566:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    256a:	4421      	add	r1, r4
    256c:	4420      	add	r0, r4
    256e:	8c0a      	ldrh	r2, [r1, #32]
    2570:	8402      	strh	r2, [r0, #32]
    2572:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2576:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    257a:	b125      	cbz	r5, 2586 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    257c:	2100      	movs	r1, #0
    257e:	f240 5062 	movw	r0, #1378	; 0x562
    2582:	f3af 8000 	nop.w
    2586:	b125      	cbz	r5, 2592 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    2588:	2100      	movs	r1, #0
    258a:	f240 50ef 	movw	r0, #1519	; 0x5ef
    258e:	f3af 8000 	nop.w
    2592:	a808      	add	r0, sp, #32
    2594:	f000 feea 	bl	336c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2598:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    259c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    25a0:	4643      	mov	r3, r8
    25a2:	466a      	mov	r2, sp
    25a4:	4631      	mov	r1, r6
    25a6:	a80a      	add	r0, sp, #40	; 0x28
    25a8:	f7ff f8e4 	bl	1774 <CONFIG_FPROTECT_BLOCK_SIZE+0x774>
    25ac:	b125      	cbz	r5, 25b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    25ae:	2100      	movs	r1, #0
    25b0:	f240 50f5 	movw	r0, #1525	; 0x5f5
    25b4:	f3af 8000 	nop.w
    25b8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    25bc:	2820      	cmp	r0, #32
    25be:	d01a      	beq.n	25f6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    25c0:	68e0      	ldr	r0, [r4, #12]
    25c2:	9900      	ldr	r1, [sp, #0]
    25c4:	1a09      	subs	r1, r1, r0
    25c6:	0209      	lsls	r1, r1, #8
    25c8:	17ca      	asrs	r2, r1, #31
    25ca:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    25ce:	1209      	asrs	r1, r1, #8
    25d0:	d511      	bpl.n	25f6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    25d2:	9900      	ldr	r1, [sp, #0]
    25d4:	4281      	cmp	r1, r0
    25d6:	d902      	bls.n	25de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    25d8:	9902      	ldr	r1, [sp, #8]
    25da:	1c49      	adds	r1, r1, #1
    25dc:	9102      	str	r1, [sp, #8]
    25de:	e9dd 2100 	ldrd	r2, r1, [sp]
    25e2:	1a89      	subs	r1, r1, r2
    25e4:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    25e8:	4408      	add	r0, r1
    25ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25ee:	e9cd 2000 	strd	r2, r0, [sp]
    25f2:	f04f 0901 	mov.w	r9, #1
    25f6:	b125      	cbz	r5, 2602 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    25f8:	2100      	movs	r1, #0
    25fa:	f240 50ff 	movw	r0, #1535	; 0x5ff
    25fe:	f3af 8000 	nop.w
    2602:	9900      	ldr	r1, [sp, #0]
    2604:	980a      	ldr	r0, [sp, #40]	; 0x28
    2606:	9a01      	ldr	r2, [sp, #4]
    2608:	1a09      	subs	r1, r1, r0
    260a:	1a10      	subs	r0, r2, r0
    260c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2610:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2614:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    2618:	bf98      	it	ls
    261a:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    261e:	d809      	bhi.n	2634 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    2620:	4643      	mov	r3, r8
    2622:	4669      	mov	r1, sp
    2624:	4842      	ldr	r0, [pc, #264]	; (2730 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    2626:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2628:	f7fe fbc2 	bl	db0 <MPSL_IRQ_RADIO_Handler+0xb8>
    262c:	ea59 0000 	orrs.w	r0, r9, r0
    2630:	d129      	bne.n	2686 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    2632:	e042      	b.n	26ba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    2634:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2636:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    263a:	9002      	str	r0, [sp, #8]
    263c:	aa09      	add	r2, sp, #36	; 0x24
    263e:	a907      	add	r1, sp, #28
    2640:	4650      	mov	r0, sl
    2642:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    2646:	f000 fd21 	bl	308c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    264a:	f001 fa2f 	bl	3aac <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    264e:	f000 fd01 	bl	3054 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2652:	4681      	mov	r9, r0
    2654:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2658:	2820      	cmp	r0, #32
    265a:	d03b      	beq.n	26d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    265c:	68e0      	ldr	r0, [r4, #12]
    265e:	1d40      	adds	r0, r0, #5
    2660:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2664:	9900      	ldr	r1, [sp, #0]
    2666:	4281      	cmp	r1, r0
    2668:	d902      	bls.n	2670 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    266a:	9902      	ldr	r1, [sp, #8]
    266c:	1c49      	adds	r1, r1, #1
    266e:	9102      	str	r1, [sp, #8]
    2670:	e9dd 2100 	ldrd	r2, r1, [sp]
    2674:	1a89      	subs	r1, r1, r2
    2676:	9000      	str	r0, [sp, #0]
    2678:	4408      	add	r0, r1
    267a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    267e:	9001      	str	r0, [sp, #4]
    2680:	201f      	movs	r0, #31
    2682:	f88d 000c 	strb.w	r0, [sp, #12]
    2686:	9800      	ldr	r0, [sp, #0]
    2688:	f005 ff61 	bl	854e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    268c:	1c41      	adds	r1, r0, #1
    268e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    2692:	f89d 200c 	ldrb.w	r2, [sp, #12]
    2696:	4410      	add	r0, r2
    2698:	4408      	add	r0, r1
    269a:	e9c6 0704 	strd	r0, r7, [r6, #16]
    269e:	b125      	cbz	r5, 26aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    26a0:	2100      	movs	r1, #0
    26a2:	f240 601a 	movw	r0, #1562	; 0x61a
    26a6:	f3af 8000 	nop.w
    26aa:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    26ae:	4a21      	ldr	r2, [pc, #132]	; (2734 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    26b0:	9b02      	ldr	r3, [sp, #8]
    26b2:	fbe3 1002 	umlal	r1, r0, r3, r2
    26b6:	e9c6 1004 	strd	r1, r0, [r6, #16]
    26ba:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    26be:	f88d 0014 	strb.w	r0, [sp, #20]
    26c2:	f89d 0014 	ldrb.w	r0, [sp, #20]
    26c6:	2800      	cmp	r0, #0
    26c8:	f47f af29 	bne.w	251e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    26cc:	b00d      	add	sp, #52	; 0x34
    26ce:	2001      	movs	r0, #1
    26d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26d4:	f108 0809 	add.w	r8, r8, #9
    26d8:	f1ba 0f00 	cmp.w	sl, #0
    26dc:	d016      	beq.n	270c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    26de:	f001 fcc7 	bl	4070 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    26e2:	b998      	cbnz	r0, 270c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    26e4:	f001 fbb0 	bl	3e48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    26e8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    26ec:	bf08      	it	eq
    26ee:	200d      	moveq	r0, #13
    26f0:	d00b      	beq.n	270a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    26f2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    26f6:	3856      	subs	r0, #86	; 0x56
    26f8:	bf08      	it	eq
    26fa:	201c      	moveq	r0, #28
    26fc:	d005      	beq.n	270a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    26fe:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2702:	389f      	subs	r0, #159	; 0x9f
    2704:	bf14      	ite	ne
    2706:	4638      	movne	r0, r7
    2708:	2032      	moveq	r0, #50	; 0x32
    270a:	4480      	add	r8, r0
    270c:	9807      	ldr	r0, [sp, #28]
    270e:	4581      	cmp	r9, r0
    2710:	bf84      	itt	hi
    2712:	eba9 0000 	subhi.w	r0, r9, r0
    2716:	4480      	addhi	r8, r0
    2718:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    271c:	e7a2      	b.n	2664 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    271e:	0000      	.short	0x0000
    2720:	e000ed04 	.word	0xe000ed04
    2724:	00000000 	.word	0x00000000
    2728:	20000ab4 	.word	0x20000ab4
    272c:	20000a34 	.word	0x20000a34
    2730:	0f424000 	.word	0x0f424000
    2734:	1e848000 	.word	0x1e848000

00002738 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2738:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    273c:	4d92      	ldr	r5, [pc, #584]	; (2988 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    273e:	b08c      	sub	sp, #48	; 0x30
    2740:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2744:	2000      	movs	r0, #0
    2746:	9008      	str	r0, [sp, #32]
    2748:	9006      	str	r0, [sp, #24]
    274a:	2001      	movs	r0, #1
    274c:	4c8f      	ldr	r4, [pc, #572]	; (298c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    274e:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    2752:	f04f 0800 	mov.w	r8, #0
    2756:	4607      	mov	r7, r0
    2758:	9007      	str	r0, [sp, #28]
    275a:	b124      	cbz	r4, 2766 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    275c:	2100      	movs	r1, #0
    275e:	f240 70e4 	movw	r0, #2020	; 0x7e4
    2762:	f3af 8000 	nop.w
    2766:	9807      	ldr	r0, [sp, #28]
    2768:	2800      	cmp	r0, #0
    276a:	d03c      	beq.n	27e6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    276c:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    2770:	b124      	cbz	r4, 277c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    2772:	2100      	movs	r1, #0
    2774:	f240 70e9 	movw	r0, #2025	; 0x7e9
    2778:	f3af 8000 	nop.w
    277c:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    2780:	2240      	movs	r2, #64	; 0x40
    2782:	ea27 060a 	bic.w	r6, r7, sl
    2786:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    278a:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    278e:	4683      	mov	fp, r0
    2790:	f006 f837 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2794:	b124      	cbz	r4, 27a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    2796:	2100      	movs	r1, #0
    2798:	f240 505e 	movw	r0, #1374	; 0x55e
    279c:	f3af 8000 	nop.w
    27a0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    27a4:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    27a8:	4428      	add	r0, r5
    27aa:	4429      	add	r1, r5
    27ac:	9000      	str	r0, [sp, #0]
    27ae:	8c0a      	ldrh	r2, [r1, #32]
    27b0:	8402      	strh	r2, [r0, #32]
    27b2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    27b6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    27ba:	b124      	cbz	r4, 27c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    27bc:	2100      	movs	r1, #0
    27be:	f240 5062 	movw	r0, #1378	; 0x562
    27c2:	f3af 8000 	nop.w
    27c6:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    27ca:	f88d 0008 	strb.w	r0, [sp, #8]
    27ce:	f89d 0008 	ldrb.w	r0, [sp, #8]
    27d2:	b178      	cbz	r0, 27f4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    27d4:	2c00      	cmp	r4, #0
    27d6:	bf1c      	itt	ne
    27d8:	2100      	movne	r1, #0
    27da:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    27de:	d0bc      	beq.n	275a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    27e0:	f3af 8000 	nop.w
    27e4:	e7b9      	b.n	275a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    27e6:	486a      	ldr	r0, [pc, #424]	; (2990 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    27e8:	2800      	cmp	r0, #0
    27ea:	bf18      	it	ne
    27ec:	f3af 8000 	nopne.w
    27f0:	b662      	cpsie	i
    27f2:	e7bb      	b.n	276c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    27f4:	b124      	cbz	r4, 2800 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    27f6:	2100      	movs	r1, #0
    27f8:	f240 70f3 	movw	r0, #2035	; 0x7f3
    27fc:	f3af 8000 	nop.w
    2800:	980c      	ldr	r0, [sp, #48]	; 0x30
    2802:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2806:	2803      	cmp	r0, #3
    2808:	d17e      	bne.n	2908 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    280a:	9a00      	ldr	r2, [sp, #0]
    280c:	990c      	ldr	r1, [sp, #48]	; 0x30
    280e:	f892 0020 	ldrb.w	r0, [r2, #32]
    2812:	4288      	cmp	r0, r1
    2814:	bf14      	ite	ne
    2816:	f04f 0a00 	movne.w	sl, #0
    281a:	f04f 0a01 	moveq.w	sl, #1
    281e:	f102 0c20 	add.w	ip, r2, #32
    2822:	4683      	mov	fp, r0
    2824:	2220      	movs	r2, #32
    2826:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    282a:	e003      	b.n	2834 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    282c:	4602      	mov	r2, r0
    282e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2832:	7840      	ldrb	r0, [r0, #1]
    2834:	4288      	cmp	r0, r1
    2836:	d002      	beq.n	283e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    2838:	2820      	cmp	r0, #32
    283a:	d00a      	beq.n	2852 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    283c:	e7f6      	b.n	282c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    283e:	2820      	cmp	r0, #32
    2840:	d007      	beq.n	2852 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    2842:	4583      	cmp	fp, r0
    2844:	d107      	bne.n	2856 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    2846:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    284a:	7840      	ldrb	r0, [r0, #1]
    284c:	f88c 0000 	strb.w	r0, [ip]
    2850:	e007      	b.n	2862 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    2852:	4640      	mov	r0, r8
    2854:	e00c      	b.n	2870 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    2856:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    285a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    285e:	7840      	ldrb	r0, [r0, #1]
    2860:	7048      	strb	r0, [r1, #1]
    2862:	b124      	cbz	r4, 286e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    2864:	2100      	movs	r1, #0
    2866:	f240 40c9 	movw	r0, #1225	; 0x4c9
    286a:	f3af 8000 	nop.w
    286e:	4638      	mov	r0, r7
    2870:	46c3      	mov	fp, r8
    2872:	ea10 0f0a 	tst.w	r0, sl
    2876:	bf18      	it	ne
    2878:	46bb      	movne	fp, r7
    287a:	2800      	cmp	r0, #0
    287c:	d04e      	beq.n	291c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    287e:	b124      	cbz	r4, 288a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    2880:	2100      	movs	r1, #0
    2882:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    2886:	f3af 8000 	nop.w
    288a:	4632      	mov	r2, r6
    288c:	2001      	movs	r0, #1
    288e:	990c      	ldr	r1, [sp, #48]	; 0x30
    2890:	f7ff f984 	bl	1b9c <CONFIG_FPROTECT_BLOCK_SIZE+0xb9c>
    2894:	b124      	cbz	r4, 28a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    2896:	2100      	movs	r1, #0
    2898:	f640 0001 	movw	r0, #2049	; 0x801
    289c:	f3af 8000 	nop.w
    28a0:	483c      	ldr	r0, [pc, #240]	; (2994 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    28a2:	2800      	cmp	r0, #0
    28a4:	bf18      	it	ne
    28a6:	f3af 8000 	nopne.w
    28aa:	f3ef 8010 	mrs	r0, PRIMASK
    28ae:	b672      	cpsid	i
    28b0:	9007      	str	r0, [sp, #28]
    28b2:	b124      	cbz	r4, 28be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    28b4:	2100      	movs	r1, #0
    28b6:	f640 0006 	movw	r0, #2054	; 0x806
    28ba:	f3af 8000 	nop.w
    28be:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    28c2:	f88d 0008 	strb.w	r0, [sp, #8]
    28c6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    28ca:	b138      	cbz	r0, 28dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    28cc:	2c00      	cmp	r4, #0
    28ce:	bf1c      	itt	ne
    28d0:	2100      	movne	r1, #0
    28d2:	f640 000a 	movwne	r0, #2058	; 0x80a
    28d6:	f43f af40 	beq.w	275a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    28da:	e781      	b.n	27e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    28dc:	f1bb 0f00 	cmp.w	fp, #0
    28e0:	d009      	beq.n	28f6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    28e2:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    28e6:	2820      	cmp	r0, #32
    28e8:	d105      	bne.n	28f6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    28ea:	4631      	mov	r1, r6
    28ec:	2002      	movs	r0, #2
    28ee:	f7ff f987 	bl	1c00 <CONFIG_FPROTECT_BLOCK_SIZE+0xc00>
    28f2:	9006      	str	r0, [sp, #24]
    28f4:	b1f8      	cbz	r0, 2936 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    28f6:	b124      	cbz	r4, 2902 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    28f8:	2100      	movs	r1, #0
    28fa:	f640 001e 	movw	r0, #2078	; 0x81e
    28fe:	f3af 8000 	nop.w
    2902:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2906:	e000      	b.n	290a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2908:	e008      	b.n	291c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    290a:	ea27 0000 	bic.w	r0, r7, r0
    290e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    2912:	20ff      	movs	r0, #255	; 0xff
    2914:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    2918:	2001      	movs	r0, #1
    291a:	9008      	str	r0, [sp, #32]
    291c:	b124      	cbz	r4, 2928 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    291e:	2100      	movs	r1, #0
    2920:	f640 0027 	movw	r0, #2087	; 0x827
    2924:	f3af 8000 	nop.w
    2928:	9806      	ldr	r0, [sp, #24]
    292a:	4e1b      	ldr	r6, [pc, #108]	; (2998 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    292c:	2802      	cmp	r0, #2
    292e:	d009      	beq.n	2944 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    2930:	2801      	cmp	r0, #1
    2932:	d010      	beq.n	2956 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    2934:	e014      	b.n	2960 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2936:	b19c      	cbz	r4, 2960 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2938:	2100      	movs	r1, #0
    293a:	f640 0019 	movw	r0, #2073	; 0x819
    293e:	f3af 8000 	nop.w
    2942:	e7ec      	b.n	291e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2944:	f000 fd0c 	bl	3360 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2948:	68a9      	ldr	r1, [r5, #8]
    294a:	1a08      	subs	r0, r1, r0
    294c:	f005 fdff 	bl	854e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2950:	6871      	ldr	r1, [r6, #4]
    2952:	b921      	cbnz	r1, 295e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    2954:	e004      	b.n	2960 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2956:	6871      	ldr	r1, [r6, #4]
    2958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    295c:	b101      	cbz	r1, 2960 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    295e:	4788      	blx	r1
    2960:	9807      	ldr	r0, [sp, #28]
    2962:	b148      	cbz	r0, 2978 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    2964:	b124      	cbz	r4, 2970 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    2966:	2100      	movs	r1, #0
    2968:	f640 003c 	movw	r0, #2108	; 0x83c
    296c:	f3af 8000 	nop.w
    2970:	9808      	ldr	r0, [sp, #32]
    2972:	b00d      	add	sp, #52	; 0x34
    2974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2978:	4805      	ldr	r0, [pc, #20]	; (2990 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    297a:	2800      	cmp	r0, #0
    297c:	bf18      	it	ne
    297e:	f3af 8000 	nopne.w
    2982:	b662      	cpsie	i
    2984:	e7ee      	b.n	2964 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    2986:	0000      	.short	0x0000
    2988:	20000ab4 	.word	0x20000ab4
	...
    2998:	20000038 	.word	0x20000038

0000299c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    299c:	b510      	push	{r4, lr}
    299e:	2820      	cmp	r0, #32
    29a0:	d211      	bcs.n	29c6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    29a2:	490e      	ldr	r1, [pc, #56]	; (29dc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    29a4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    29a8:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    29ac:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    29b0:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    29b4:	b13b      	cbz	r3, 29c6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    29b6:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    29ba:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    29be:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    29c2:	2a01      	cmp	r2, #1
    29c4:	d001      	beq.n	29ca <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    29c6:	2000      	movs	r0, #0
    29c8:	bd10      	pop	{r4, pc}
    29ca:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    29ce:	4601      	mov	r1, r0
    29d0:	2000      	movs	r0, #0
    29d2:	f7ff f8e3 	bl	1b9c <CONFIG_FPROTECT_BLOCK_SIZE+0xb9c>
    29d6:	2001      	movs	r0, #1
    29d8:	bd10      	pop	{r4, pc}
    29da:	0000      	.short	0x0000
    29dc:	20000ab4 	.word	0x20000ab4

000029e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    29e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29e4:	4e86      	ldr	r6, [pc, #536]	; (2c00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    29e6:	4680      	mov	r8, r0
    29e8:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    29ec:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    29f0:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    29f4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    29f8:	2800      	cmp	r0, #0
    29fa:	d071      	beq.n	2ae0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    29fc:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    2a00:	4d80      	ldr	r5, [pc, #512]	; (2c04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    2a02:	b125      	cbz	r5, 2a0e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2a04:	2100      	movs	r1, #0
    2a06:	f640 30ae 	movw	r0, #2990	; 0xbae
    2a0a:	f3af 8000 	nop.w
    2a0e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2a12:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2a16:	2801      	cmp	r0, #1
    2a18:	d018      	beq.n	2a4c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2a1a:	b2c0      	uxtb	r0, r0
    2a1c:	2804      	cmp	r0, #4
    2a1e:	bf1c      	itt	ne
    2a20:	2805      	cmpne	r0, #5
    2a22:	2806      	cmpne	r0, #6
    2a24:	d061      	beq.n	2aea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    2a26:	b12d      	cbz	r5, 2a34 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2a28:	f04f 0100 	mov.w	r1, #0
    2a2c:	f640 30ba 	movw	r0, #3002	; 0xbba
    2a30:	f3af 8000 	nop.w
    2a34:	f001 fcce 	bl	43d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2a38:	b125      	cbz	r5, 2a44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2a3a:	2100      	movs	r1, #0
    2a3c:	f640 30be 	movw	r0, #3006	; 0xbbe
    2a40:	f3af 8000 	nop.w
    2a44:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2a48:	2801      	cmp	r0, #1
    2a4a:	d1e6      	bne.n	2a1a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2a4c:	2401      	movs	r4, #1
    2a4e:	b125      	cbz	r5, 2a5a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2a50:	2100      	movs	r1, #0
    2a52:	f640 30c5 	movw	r0, #3013	; 0xbc5
    2a56:	f3af 8000 	nop.w
    2a5a:	2c00      	cmp	r4, #0
    2a5c:	d04b      	beq.n	2af6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    2a5e:	2000      	movs	r0, #0
    2a60:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2a64:	b125      	cbz	r5, 2a70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    2a66:	2100      	movs	r1, #0
    2a68:	f640 30ca 	movw	r0, #3018	; 0xbca
    2a6c:	f3af 8000 	nop.w
    2a70:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    2a74:	2001      	movs	r0, #1
    2a76:	ea20 090b 	bic.w	r9, r0, fp
    2a7a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2a7e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2a82:	2240      	movs	r2, #64	; 0x40
    2a84:	f005 febd 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2a88:	b125      	cbz	r5, 2a94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    2a8a:	2100      	movs	r1, #0
    2a8c:	f240 505e 	movw	r0, #1374	; 0x55e
    2a90:	f3af 8000 	nop.w
    2a94:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    2a98:	eb00 0a06 	add.w	sl, r0, r6
    2a9c:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    2aa0:	4430      	add	r0, r6
    2aa2:	8c01      	ldrh	r1, [r0, #32]
    2aa4:	f8aa 1020 	strh.w	r1, [sl, #32]
    2aa8:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    2aac:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    2ab0:	b125      	cbz	r5, 2abc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    2ab2:	2100      	movs	r1, #0
    2ab4:	f240 5062 	movw	r0, #1378	; 0x562
    2ab8:	f3af 8000 	nop.w
    2abc:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2ac0:	f88d 0000 	strb.w	r0, [sp]
    2ac4:	f89d 0000 	ldrb.w	r0, [sp]
    2ac8:	b1e0      	cbz	r0, 2b04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    2aca:	2d00      	cmp	r5, #0
    2acc:	bf1c      	itt	ne
    2ace:	2100      	movne	r1, #0
    2ad0:	f44f 603d 	movne.w	r0, #3024	; 0xbd0
    2ad4:	d0bb      	beq.n	2a4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2ad6:	bf00      	nop
    2ad8:	f3af 8000 	nop.w
    2adc:	e7b7      	b.n	2a4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2ade:	e7ff      	b.n	2ae0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    2ae0:	f640 31a5 	movw	r1, #2981	; 0xba5
    2ae4:	2070      	movs	r0, #112	; 0x70
    2ae6:	f001 fb3b 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2aea:	464a      	mov	r2, r9
    2aec:	4641      	mov	r1, r8
    2aee:	2001      	movs	r0, #1
    2af0:	f7ff f854 	bl	1b9c <CONFIG_FPROTECT_BLOCK_SIZE+0xb9c>
    2af4:	e7a0      	b.n	2a38 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2af6:	4844      	ldr	r0, [pc, #272]	; (2c08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    2af8:	2800      	cmp	r0, #0
    2afa:	bf18      	it	ne
    2afc:	f3af 8000 	nopne.w
    2b00:	b662      	cpsie	i
    2b02:	e7ac      	b.n	2a5e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    2b04:	b125      	cbz	r5, 2b10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    2b06:	2100      	movs	r1, #0
    2b08:	f640 30d4 	movw	r0, #3028	; 0xbd4
    2b0c:	f3af 8000 	nop.w
    2b10:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2b14:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2b18:	4640      	mov	r0, r8
    2b1a:	461c      	mov	r4, r3
    2b1c:	f04f 0b20 	mov.w	fp, #32
    2b20:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2b24:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2b28:	e004      	b.n	2b34 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    2b2a:	46a3      	mov	fp, r4
    2b2c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2b30:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2b34:	4284      	cmp	r4, r0
    2b36:	d002      	beq.n	2b3e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    2b38:	2c20      	cmp	r4, #32
    2b3a:	d02b      	beq.n	2b94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    2b3c:	e7f5      	b.n	2b2a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    2b3e:	2c20      	cmp	r4, #32
    2b40:	d028      	beq.n	2b94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    2b42:	42a3      	cmp	r3, r4
    2b44:	d104      	bne.n	2b50 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    2b46:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    2b4a:	7840      	ldrb	r0, [r0, #1]
    2b4c:	7008      	strb	r0, [r1, #0]
    2b4e:	e005      	b.n	2b5c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    2b50:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2b54:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2b58:	7840      	ldrb	r0, [r0, #1]
    2b5a:	7048      	strb	r0, [r1, #1]
    2b5c:	f1ba 0f00 	cmp.w	sl, #0
    2b60:	d011      	beq.n	2b86 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    2b62:	b125      	cbz	r5, 2b6e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2b64:	2100      	movs	r1, #0
    2b66:	f240 40c1 	movw	r0, #1217	; 0x4c1
    2b6a:	f3af 8000 	nop.w
    2b6e:	f89a 0000 	ldrb.w	r0, [sl]
    2b72:	42a0      	cmp	r0, r4
    2b74:	d107      	bne.n	2b86 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    2b76:	b125      	cbz	r5, 2b82 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    2b78:	2100      	movs	r1, #0
    2b7a:	f240 40c4 	movw	r0, #1220	; 0x4c4
    2b7e:	f3af 8000 	nop.w
    2b82:	f88a b000 	strb.w	fp, [sl]
    2b86:	b15d      	cbz	r5, 2ba0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2b88:	2100      	movs	r1, #0
    2b8a:	f240 40c9 	movw	r0, #1225	; 0x4c9
    2b8e:	f3af 8000 	nop.w
    2b92:	e000      	b.n	2b96 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    2b94:	b125      	cbz	r5, 2ba0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2b96:	2100      	movs	r1, #0
    2b98:	f640 30d8 	movw	r0, #3032	; 0xbd8
    2b9c:	f3af 8000 	nop.w
    2ba0:	481a      	ldr	r0, [pc, #104]	; (2c0c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    2ba2:	2800      	cmp	r0, #0
    2ba4:	bf18      	it	ne
    2ba6:	f3af 8000 	nopne.w
    2baa:	f3ef 8410 	mrs	r4, PRIMASK
    2bae:	b672      	cpsid	i
    2bb0:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2bb4:	f88d 0000 	strb.w	r0, [sp]
    2bb8:	f89d 0000 	ldrb.w	r0, [sp]
    2bbc:	b138      	cbz	r0, 2bce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    2bbe:	2d00      	cmp	r5, #0
    2bc0:	bf1c      	itt	ne
    2bc2:	2100      	movne	r1, #0
    2bc4:	f640 30de 	movwne	r0, #3038	; 0xbde
    2bc8:	f43f af41 	beq.w	2a4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2bcc:	e784      	b.n	2ad8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    2bce:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    2bd2:	20ff      	movs	r0, #255	; 0xff
    2bd4:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2bd8:	b154      	cbz	r4, 2bf0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    2bda:	2d00      	cmp	r5, #0
    2bdc:	bf08      	it	eq
    2bde:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2be2:	2100      	movs	r1, #0
    2be4:	f640 30eb 	movw	r0, #3051	; 0xbeb
    2be8:	f3af 8000 	nop.w
    2bec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bf0:	4805      	ldr	r0, [pc, #20]	; (2c08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    2bf2:	2800      	cmp	r0, #0
    2bf4:	bf18      	it	ne
    2bf6:	f3af 8000 	nopne.w
    2bfa:	b662      	cpsie	i
    2bfc:	e7ed      	b.n	2bda <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    2bfe:	0000      	.short	0x0000
    2c00:	20000ab4 	.word	0x20000ab4
	...

00002c10 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2c10:	b570      	push	{r4, r5, r6, lr}
    2c12:	460d      	mov	r5, r1
    2c14:	4606      	mov	r6, r0
    2c16:	f001 fa19 	bl	404c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2c1a:	480f      	ldr	r0, [pc, #60]	; (2c58 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2c1c:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    2c20:	2400      	movs	r4, #0
    2c22:	3880      	subs	r0, #128	; 0x80
    2c24:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2c28:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2c2c:	b129      	cbz	r1, 2c3a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2c2e:	1c61      	adds	r1, r4, #1
    2c30:	b2cc      	uxtb	r4, r1
    2c32:	2c20      	cmp	r4, #32
    2c34:	d3f8      	bcc.n	2c28 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2c36:	2020      	movs	r0, #32
    2c38:	bd70      	pop	{r4, r5, r6, pc}
    2c3a:	4808      	ldr	r0, [pc, #32]	; (2c5c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2c3c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    2c40:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    2c44:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2c48:	4621      	mov	r1, r4
    2c4a:	6045      	str	r5, [r0, #4]
    2c4c:	2001      	movs	r0, #1
    2c4e:	f7fe ffa5 	bl	1b9c <CONFIG_FPROTECT_BLOCK_SIZE+0xb9c>
    2c52:	4620      	mov	r0, r4
    2c54:	bd70      	pop	{r4, r5, r6, pc}
    2c56:	0000      	.short	0x0000
    2c58:	20000ab4 	.word	0x20000ab4
    2c5c:	200006b4 	.word	0x200006b4

00002c60 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c64:	b083      	sub	sp, #12
    2c66:	f000 fb7b 	bl	3360 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2c6a:	4605      	mov	r5, r0
    2c6c:	f000 fe4a 	bl	3904 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2c70:	4c84      	ldr	r4, [pc, #528]	; (2e84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    2c72:	6860      	ldr	r0, [r4, #4]
    2c74:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2c78:	bf1c      	itt	ne
    2c7a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    2c7e:	6060      	strne	r0, [r4, #4]
    2c80:	7fa0      	ldrb	r0, [r4, #30]
    2c82:	f8df 9204 	ldr.w	r9, [pc, #516]	; 2e88 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    2c86:	b990      	cbnz	r0, 2cae <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    2c88:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    2c8c:	1a40      	subs	r0, r0, r1
    2c8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c92:	f44f 710c 	mov.w	r1, #560	; 0x230
    2c96:	f005 fc85 	bl	85a4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2c9a:	68e1      	ldr	r1, [r4, #12]
    2c9c:	4408      	add	r0, r1
    2c9e:	1a28      	subs	r0, r5, r0
    2ca0:	0200      	lsls	r0, r0, #8
    2ca2:	17c1      	asrs	r1, r0, #31
    2ca4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2ca8:	1200      	asrs	r0, r0, #8
    2caa:	0fc0      	lsrs	r0, r0, #31
    2cac:	d012      	beq.n	2cd4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    2cae:	7e60      	ldrb	r0, [r4, #25]
    2cb0:	b320      	cbz	r0, 2cfc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    2cb2:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2cb6:	f88d 0000 	strb.w	r0, [sp]
    2cba:	f89d 0000 	ldrb.w	r0, [sp]
    2cbe:	b1e8      	cbz	r0, 2cfc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    2cc0:	f000 fc7c 	bl	35bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2cc4:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    2cc8:	b1f0      	cbz	r0, 2d08 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    2cca:	f240 31f5 	movw	r1, #1013	; 0x3f5
    2cce:	2070      	movs	r0, #112	; 0x70
    2cd0:	f001 fa46 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cd4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2cd8:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2cdc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2ce0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    2ce4:	6840      	ldr	r0, [r0, #4]
    2ce6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2cea:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    2cee:	2108      	movs	r1, #8
    2cf0:	4790      	blx	r2
    2cf2:	f240 31dd 	movw	r1, #989	; 0x3dd
    2cf6:	2070      	movs	r0, #112	; 0x70
    2cf8:	f001 fa32 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cfc:	1ce8      	adds	r0, r5, #3
    2cfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d02:	f000 fb53 	bl	33ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2d06:	e7dd      	b.n	2cc4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    2d08:	2001      	movs	r0, #1
    2d0a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2d0e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2d12:	2820      	cmp	r0, #32
    2d14:	d021      	beq.n	2d5a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    2d16:	f894 802d 	ldrb.w	r8, [r4, #45]	; 0x2d
    2d1a:	2020      	movs	r0, #32
    2d1c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2d20:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2d24:	2000      	movs	r0, #0
    2d26:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    2d2a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2d2e:	6020      	str	r0, [r4, #0]
    2d30:	f000 fec2 	bl	3ab8 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    2d34:	7720      	strb	r0, [r4, #28]
    2d36:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    2d3a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2d3e:	1907      	adds	r7, r0, r4
    2d40:	f897 0020 	ldrb.w	r0, [r7, #32]
    2d44:	2820      	cmp	r0, #32
    2d46:	d058      	beq.n	2dfa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2d48:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2d4c:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    2d50:	f899 001a 	ldrb.w	r0, [r9, #26]
    2d54:	2801      	cmp	r0, #1
    2d56:	d005      	beq.n	2d64 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    2d58:	e04f      	b.n	2dfa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2d5a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    2d5e:	2070      	movs	r0, #112	; 0x70
    2d60:	f001 f9fe 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d64:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    2d68:	aa01      	add	r2, sp, #4
    2d6a:	4669      	mov	r1, sp
    2d6c:	4658      	mov	r0, fp
    2d6e:	f000 f98d 	bl	308c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2d72:	f000 fe9b 	bl	3aac <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    2d76:	f000 f96d 	bl	3054 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2d7a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2d7e:	2820      	cmp	r0, #32
    2d80:	d004      	beq.n	2d8c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    2d82:	68e0      	ldr	r0, [r4, #12]
    2d84:	1d40      	adds	r0, r0, #5
    2d86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d8a:	e01d      	b.n	2dc8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    2d8c:	f105 0a09 	add.w	sl, r5, #9
    2d90:	f1bb 0f00 	cmp.w	fp, #0
    2d94:	d016      	beq.n	2dc4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    2d96:	f001 f96b 	bl	4070 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2d9a:	b998      	cbnz	r0, 2dc4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    2d9c:	f001 f854 	bl	3e48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2da0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2da4:	bf08      	it	eq
    2da6:	200d      	moveq	r0, #13
    2da8:	d00b      	beq.n	2dc2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    2daa:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2dae:	3856      	subs	r0, #86	; 0x56
    2db0:	bf08      	it	eq
    2db2:	201c      	moveq	r0, #28
    2db4:	d005      	beq.n	2dc2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    2db6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2dba:	389f      	subs	r0, #159	; 0x9f
    2dbc:	bf14      	ite	ne
    2dbe:	2000      	movne	r0, #0
    2dc0:	2032      	moveq	r0, #50	; 0x32
    2dc2:	4482      	add	sl, r0
    2dc4:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    2dc8:	f8d9 2008 	ldr.w	r2, [r9, #8]
    2dcc:	1a81      	subs	r1, r0, r2
    2dce:	0209      	lsls	r1, r1, #8
    2dd0:	17cb      	asrs	r3, r1, #31
    2dd2:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    2dd6:	1209      	asrs	r1, r1, #8
    2dd8:	2900      	cmp	r1, #0
    2dda:	dc0e      	bgt.n	2dfa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2ddc:	f109 0308 	add.w	r3, r9, #8
    2de0:	4282      	cmp	r2, r0
    2de2:	d202      	bcs.n	2dea <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    2de4:	6899      	ldr	r1, [r3, #8]
    2de6:	1e49      	subs	r1, r1, #1
    2de8:	6099      	str	r1, [r3, #8]
    2dea:	e9d3 2100 	ldrd	r2, r1, [r3]
    2dee:	1a89      	subs	r1, r1, r2
    2df0:	6018      	str	r0, [r3, #0]
    2df2:	4408      	add	r0, r1
    2df4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2df8:	6058      	str	r0, [r3, #4]
    2dfa:	4631      	mov	r1, r6
    2dfc:	2001      	movs	r0, #1
    2dfe:	f7fe feff 	bl	1c00 <CONFIG_FPROTECT_BLOCK_SIZE+0xc00>
    2e02:	ea5f 0900 	movs.w	r9, r0
    2e06:	d0f8      	beq.n	2dfa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2e08:	4820      	ldr	r0, [pc, #128]	; (2e8c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    2e0a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2e0e:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2e12:	2802      	cmp	r0, #2
    2e14:	d104      	bne.n	2e20 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    2e16:	4632      	mov	r2, r6
    2e18:	4641      	mov	r1, r8
    2e1a:	2006      	movs	r0, #6
    2e1c:	f7fe febe 	bl	1b9c <CONFIG_FPROTECT_BLOCK_SIZE+0xb9c>
    2e20:	20ff      	movs	r0, #255	; 0xff
    2e22:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2e26:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    2e2a:	4e19      	ldr	r6, [pc, #100]	; (2e90 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    2e2c:	2820      	cmp	r0, #32
    2e2e:	bf1c      	itt	ne
    2e30:	7870      	ldrbne	r0, [r6, #1]
    2e32:	f001 fa69 	blne	4308 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2e36:	7f20      	ldrb	r0, [r4, #28]
    2e38:	b120      	cbz	r0, 2e44 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    2e3a:	f000 fe19 	bl	3a70 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2e3e:	2000      	movs	r0, #0
    2e40:	7720      	strb	r0, [r4, #28]
    2e42:	7760      	strb	r0, [r4, #29]
    2e44:	f1b9 0f02 	cmp.w	r9, #2
    2e48:	d011      	beq.n	2e6e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    2e4a:	f1b9 0f01 	cmp.w	r9, #1
    2e4e:	bf1c      	itt	ne
    2e50:	b003      	addne	sp, #12
    2e52:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2e5a:	6871      	ldr	r1, [r6, #4]
    2e5c:	2900      	cmp	r1, #0
    2e5e:	bf04      	itt	eq
    2e60:	b003      	addeq	sp, #12
    2e62:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e66:	b003      	add	sp, #12
    2e68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e6c:	4708      	bx	r1
    2e6e:	68a0      	ldr	r0, [r4, #8]
    2e70:	1b40      	subs	r0, r0, r5
    2e72:	f005 fb6c 	bl	854e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2e76:	6871      	ldr	r1, [r6, #4]
    2e78:	2900      	cmp	r1, #0
    2e7a:	d1f4      	bne.n	2e66 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    2e7c:	b003      	add	sp, #12
    2e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e82:	0000      	.short	0x0000
    2e84:	20000ab4 	.word	0x20000ab4
    2e88:	200006b4 	.word	0x200006b4
    2e8c:	20000a34 	.word	0x20000a34
    2e90:	20000038 	.word	0x20000038

00002e94 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2e94:	b570      	push	{r4, r5, r6, lr}
    2e96:	4c42      	ldr	r4, [pc, #264]	; (2fa0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    2e98:	4605      	mov	r5, r0
    2e9a:	b082      	sub	sp, #8
    2e9c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2ea0:	2820      	cmp	r0, #32
    2ea2:	d008      	beq.n	2eb6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    2ea4:	6860      	ldr	r0, [r4, #4]
    2ea6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2eaa:	d009      	beq.n	2ec0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    2eac:	f640 21d9 	movw	r1, #2777	; 0xad9
    2eb0:	2070      	movs	r0, #112	; 0x70
    2eb2:	f001 f955 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2eb6:	f640 21d8 	movw	r1, #2776	; 0xad8
    2eba:	2070      	movs	r0, #112	; 0x70
    2ebc:	f001 f950 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ec0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2ec4:	4937      	ldr	r1, [pc, #220]	; (2fa4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    2ec6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2eca:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    2ece:	68b0      	ldr	r0, [r6, #8]
    2ed0:	f005 fb3d 	bl	854e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2ed4:	4602      	mov	r2, r0
    2ed6:	8af0      	ldrh	r0, [r6, #22]
    2ed8:	7d31      	ldrb	r1, [r6, #20]
    2eda:	4b33      	ldr	r3, [pc, #204]	; (2fa8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    2edc:	4408      	add	r0, r1
    2ede:	1c40      	adds	r0, r0, #1
    2ee0:	1811      	adds	r1, r2, r0
    2ee2:	429a      	cmp	r2, r3
    2ee4:	d817      	bhi.n	2f16 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    2ee6:	4a31      	ldr	r2, [pc, #196]	; (2fac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    2ee8:	4290      	cmp	r0, r2
    2eea:	dc1b      	bgt.n	2f24 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    2eec:	f1c2 0c00 	rsb	ip, r2, #0
    2ef0:	4560      	cmp	r0, ip
    2ef2:	db1e      	blt.n	2f32 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    2ef4:	0056      	lsls	r6, r2, #1
    2ef6:	428e      	cmp	r6, r1
    2ef8:	bfdc      	itt	le
    2efa:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2efe:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2f02:	dd05      	ble.n	2f10 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2f04:	2900      	cmp	r1, #0
    2f06:	bfbc      	itt	lt
    2f08:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2f0c:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2f10:	1948      	adds	r0, r1, r5
    2f12:	4299      	cmp	r1, r3
    2f14:	d904      	bls.n	2f20 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    2f16:	f240 519e 	movw	r1, #1438	; 0x59e
    2f1a:	2070      	movs	r0, #112	; 0x70
    2f1c:	f001 f920 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f20:	4295      	cmp	r5, r2
    2f22:	dd04      	ble.n	2f2e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    2f24:	f240 519f 	movw	r1, #1439	; 0x59f
    2f28:	2070      	movs	r0, #112	; 0x70
    2f2a:	f001 f919 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f2e:	4565      	cmp	r5, ip
    2f30:	da04      	bge.n	2f3c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    2f32:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    2f36:	2070      	movs	r0, #112	; 0x70
    2f38:	f001 f912 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f3c:	4286      	cmp	r6, r0
    2f3e:	bfdc      	itt	le
    2f40:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2f44:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2f48:	dd05      	ble.n	2f56 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    2f4a:	2800      	cmp	r0, #0
    2f4c:	bfbc      	itt	lt
    2f4e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2f52:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2f56:	aa01      	add	r2, sp, #4
    2f58:	4669      	mov	r1, sp
    2f5a:	f000 f897 	bl	308c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2f5e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2f62:	280f      	cmp	r0, #15
    2f64:	bf8c      	ite	hi
    2f66:	2001      	movhi	r0, #1
    2f68:	2000      	movls	r0, #0
    2f6a:	9900      	ldr	r1, [sp, #0]
    2f6c:	4408      	add	r0, r1
    2f6e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2f72:	6061      	str	r1, [r4, #4]
    2f74:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2f78:	f88d 0000 	strb.w	r0, [sp]
    2f7c:	f89d 0000 	ldrb.w	r0, [sp]
    2f80:	2800      	cmp	r0, #0
    2f82:	bf04      	itt	eq
    2f84:	b002      	addeq	sp, #8
    2f86:	bd70      	popeq	{r4, r5, r6, pc}
    2f88:	2005      	movs	r0, #5
    2f8a:	f000 fb95 	bl	36b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2f8e:	2800      	cmp	r0, #0
    2f90:	bf1c      	itt	ne
    2f92:	b002      	addne	sp, #8
    2f94:	bd70      	popne	{r4, r5, r6, pc}
    2f96:	f44f 612e 	mov.w	r1, #2784	; 0xae0
    2f9a:	2070      	movs	r0, #112	; 0x70
    2f9c:	f001 f8e0 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2fa0:	20000ab4 	.word	0x20000ab4
    2fa4:	200006b4 	.word	0x200006b4
    2fa8:	1e847fff 	.word	0x1e847fff
    2fac:	0f424000 	.word	0x0f424000

00002fb0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2fb0:	b570      	push	{r4, r5, r6, lr}
    2fb2:	4c1c      	ldr	r4, [pc, #112]	; (3024 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    2fb4:	2120      	movs	r1, #32
    2fb6:	f884 1020 	strb.w	r1, [r4, #32]
    2fba:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2fbe:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2fc2:	2000      	movs	r0, #0
    2fc4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2fc8:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    2fcc:	1e42      	subs	r2, r0, #1
    2fce:	e9c4 0200 	strd	r0, r2, [r4]
    2fd2:	77a0      	strb	r0, [r4, #30]
    2fd4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    2fd8:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2fdc:	7720      	strb	r0, [r4, #28]
    2fde:	7760      	strb	r0, [r4, #29]
    2fe0:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    2fe4:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    2fe8:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2fec:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2ff0:	2210      	movs	r2, #16
    2ff2:	7088      	strb	r0, [r1, #2]
    2ff4:	f801 0f04 	strb.w	r0, [r1, #4]!
    2ff8:	1e52      	subs	r2, r2, #1
    2ffa:	d1fa      	bne.n	2ff2 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    2ffc:	f000 fd66 	bl	3acc <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    3000:	4d09      	ldr	r5, [pc, #36]	; (3028 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    3002:	2601      	movs	r6, #1
    3004:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    3008:	20ff      	movs	r0, #255	; 0xff
    300a:	7028      	strb	r0, [r5, #0]
    300c:	4807      	ldr	r0, [pc, #28]	; (302c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    300e:	f001 f95d 	bl	42cc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3012:	7068      	strb	r0, [r5, #1]
    3014:	f001 f9c8 	bl	43a8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    3018:	60a8      	str	r0, [r5, #8]
    301a:	f000 fce1 	bl	39e0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    301e:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    3022:	bd70      	pop	{r4, r5, r6, pc}
    3024:	20000ab4 	.word	0x20000ab4
    3028:	20000038 	.word	0x20000038
    302c:	00001ac5 	.word	0x00001ac5

00003030 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    3030:	b500      	push	{lr}
    3032:	b083      	sub	sp, #12
    3034:	4668      	mov	r0, sp
    3036:	f000 f999 	bl	336c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    303a:	9800      	ldr	r0, [sp, #0]
    303c:	f005 fa87 	bl	854e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3040:	9a01      	ldr	r2, [sp, #4]
    3042:	4b03      	ldr	r3, [pc, #12]	; (3050 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    3044:	2100      	movs	r1, #0
    3046:	fbe2 0103 	umlal	r0, r1, r2, r3
    304a:	b003      	add	sp, #12
    304c:	bd00      	pop	{pc}
    304e:	0000      	.short	0x0000
    3050:	1e848000 	.word	0x1e848000

00003054 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    3054:	0b41      	lsrs	r1, r0, #13
    3056:	f248 6237 	movw	r2, #34359	; 0x8637
    305a:	4351      	muls	r1, r2
    305c:	0c0a      	lsrs	r2, r1, #16
    305e:	4b09      	ldr	r3, [pc, #36]	; (3084 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3060:	0251      	lsls	r1, r2, #9
    3062:	fb02 0203 	mla	r2, r2, r3, r0
    3066:	4808      	ldr	r0, [pc, #32]	; (3088 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3068:	4350      	muls	r0, r2
    306a:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    306e:	306e      	adds	r0, #110	; 0x6e
    3070:	0d40      	lsrs	r0, r0, #21
    3072:	425b      	negs	r3, r3
    3074:	fb10 f303 	smulbb	r3, r0, r3
    3078:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    307c:	bf88      	it	hi
    307e:	1c49      	addhi	r1, r1, #1
    3080:	4408      	add	r0, r1
    3082:	4770      	bx	lr
    3084:	ffffc2f7 	.word	0xffffc2f7
    3088:	00010c6f 	.word	0x00010c6f

0000308c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    308c:	0b43      	lsrs	r3, r0, #13
    308e:	f248 6c37 	movw	ip, #34359	; 0x8637
    3092:	fb03 f30c 	mul.w	r3, r3, ip
    3096:	b430      	push	{r4, r5}
    3098:	0c1b      	lsrs	r3, r3, #16
    309a:	f8df c044 	ldr.w	ip, [pc, #68]	; 30e0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    309e:	025c      	lsls	r4, r3, #9
    30a0:	fb03 030c 	mla	r3, r3, ip, r0
    30a4:	480f      	ldr	r0, [pc, #60]	; (30e4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    30a6:	4358      	muls	r0, r3
    30a8:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    30ac:	eb04 000c 	add.w	r0, r4, ip
    30b0:	f643 5409 	movw	r4, #15625	; 0x3d09
    30b4:	fb1c f404 	smulbb	r4, ip, r4
    30b8:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    30bc:	f643 5508 	movw	r5, #15624	; 0x3d08
    30c0:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    30c4:	442c      	add	r4, r5
    30c6:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    30ca:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    30ce:	bf84      	itt	hi
    30d0:	f04f 0c00 	movhi.w	ip, #0
    30d4:	1c40      	addhi	r0, r0, #1
    30d6:	6008      	str	r0, [r1, #0]
    30d8:	f882 c000 	strb.w	ip, [r2]
    30dc:	bc30      	pop	{r4, r5}
    30de:	4770      	bx	lr
    30e0:	ffffc2f7 	.word	0xffffc2f7
    30e4:	00010c6f 	.word	0x00010c6f

000030e8 <MPSL_IRQ_RTC0_Handler>:
    30e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30ec:	4d3b      	ldr	r5, [pc, #236]	; (31dc <MPSL_IRQ_RTC0_Handler+0xf4>)
    30ee:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    30f2:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 31e0 <MPSL_IRQ_RTC0_Handler+0xf8>
    30f6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    30fa:	f44f 6600 	mov.w	r6, #2048	; 0x800
    30fe:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    3102:	f04f 0400 	mov.w	r4, #0
    3106:	d019      	beq.n	313c <MPSL_IRQ_RTC0_Handler+0x54>
    3108:	4836      	ldr	r0, [pc, #216]	; (31e4 <MPSL_IRQ_RTC0_Handler+0xfc>)
    310a:	6800      	ldr	r0, [r0, #0]
    310c:	b1b0      	cbz	r0, 313c <MPSL_IRQ_RTC0_Handler+0x54>
    310e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    3112:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3116:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    311a:	f8d8 1000 	ldr.w	r1, [r8]
    311e:	1a40      	subs	r0, r0, r1
    3120:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3124:	2802      	cmp	r0, #2
    3126:	d302      	bcc.n	312e <MPSL_IRQ_RTC0_Handler+0x46>
    3128:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    312c:	d906      	bls.n	313c <MPSL_IRQ_RTC0_Handler+0x54>
    312e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3132:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3136:	2004      	movs	r0, #4
    3138:	f7fe fefe 	bl	1f38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    313c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3140:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3144:	d01a      	beq.n	317c <MPSL_IRQ_RTC0_Handler+0x94>
    3146:	4828      	ldr	r0, [pc, #160]	; (31e8 <MPSL_IRQ_RTC0_Handler+0x100>)
    3148:	6800      	ldr	r0, [r0, #0]
    314a:	b1b8      	cbz	r0, 317c <MPSL_IRQ_RTC0_Handler+0x94>
    314c:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    3150:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3154:	4825      	ldr	r0, [pc, #148]	; (31ec <MPSL_IRQ_RTC0_Handler+0x104>)
    3156:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    315a:	f8d8 1000 	ldr.w	r1, [r8]
    315e:	1a40      	subs	r0, r0, r1
    3160:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3164:	2802      	cmp	r0, #2
    3166:	d302      	bcc.n	316e <MPSL_IRQ_RTC0_Handler+0x86>
    3168:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    316c:	d906      	bls.n	317c <MPSL_IRQ_RTC0_Handler+0x94>
    316e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3172:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3176:	2005      	movs	r0, #5
    3178:	f7fe fede 	bl	1f38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    317c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3180:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3184:	d01a      	beq.n	31bc <MPSL_IRQ_RTC0_Handler+0xd4>
    3186:	481a      	ldr	r0, [pc, #104]	; (31f0 <MPSL_IRQ_RTC0_Handler+0x108>)
    3188:	6800      	ldr	r0, [r0, #0]
    318a:	b1b8      	cbz	r0, 31bc <MPSL_IRQ_RTC0_Handler+0xd4>
    318c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    3190:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3194:	4817      	ldr	r0, [pc, #92]	; (31f4 <MPSL_IRQ_RTC0_Handler+0x10c>)
    3196:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    319a:	f8d8 1000 	ldr.w	r1, [r8]
    319e:	1a40      	subs	r0, r0, r1
    31a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    31a4:	2802      	cmp	r0, #2
    31a6:	d302      	bcc.n	31ae <MPSL_IRQ_RTC0_Handler+0xc6>
    31a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    31ac:	d906      	bls.n	31bc <MPSL_IRQ_RTC0_Handler+0xd4>
    31ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    31b2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    31b6:	2006      	movs	r0, #6
    31b8:	f7fe febe 	bl	1f38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    31bc:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    31c0:	2800      	cmp	r0, #0
    31c2:	bf08      	it	eq
    31c4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    31c8:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    31cc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    31d0:	4809      	ldr	r0, [pc, #36]	; (31f8 <MPSL_IRQ_RTC0_Handler+0x110>)
    31d2:	68c1      	ldr	r1, [r0, #12]
    31d4:	1c49      	adds	r1, r1, #1
    31d6:	60c1      	str	r1, [r0, #12]
    31d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31dc:	4000b000 	.word	0x4000b000
    31e0:	4000b504 	.word	0x4000b504
    31e4:	4000b140 	.word	0x4000b140
    31e8:	4000b144 	.word	0x4000b144
    31ec:	4000b004 	.word	0x4000b004
    31f0:	4000b148 	.word	0x4000b148
    31f4:	4000b008 	.word	0x4000b008
    31f8:	20000044 	.word	0x20000044

000031fc <MPSL_IRQ_TIMER0_Handler>:
    31fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3200:	4d38      	ldr	r5, [pc, #224]	; (32e4 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    3202:	7828      	ldrb	r0, [r5, #0]
    3204:	2804      	cmp	r0, #4
    3206:	d068      	beq.n	32da <MPSL_IRQ_TIMER0_Handler+0xde>
    3208:	1ca8      	adds	r0, r5, #2
    320a:	2201      	movs	r2, #1
    320c:	7801      	ldrb	r1, [r0, #0]
    320e:	b159      	cbz	r1, 3228 <MPSL_IRQ_TIMER0_Handler+0x2c>
    3210:	2901      	cmp	r1, #1
    3212:	bf08      	it	eq
    3214:	706a      	strbeq	r2, [r5, #1]
    3216:	d002      	beq.n	321e <MPSL_IRQ_TIMER0_Handler+0x22>
    3218:	7869      	ldrb	r1, [r5, #1]
    321a:	2900      	cmp	r1, #0
    321c:	d058      	beq.n	32d0 <MPSL_IRQ_TIMER0_Handler+0xd4>
    321e:	2102      	movs	r1, #2
    3220:	7001      	strb	r1, [r0, #0]
    3222:	7840      	ldrb	r0, [r0, #1]
    3224:	f000 fafe 	bl	3824 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3228:	4c2f      	ldr	r4, [pc, #188]	; (32e8 <MPSL_IRQ_TIMER0_Handler+0xec>)
    322a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    322e:	f04f 0800 	mov.w	r8, #0
    3232:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    3236:	f44f 7780 	mov.w	r7, #256	; 0x100
    323a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    323e:	d00a      	beq.n	3256 <MPSL_IRQ_TIMER0_Handler+0x5a>
    3240:	482a      	ldr	r0, [pc, #168]	; (32ec <MPSL_IRQ_TIMER0_Handler+0xf0>)
    3242:	6800      	ldr	r0, [r0, #0]
    3244:	b138      	cbz	r0, 3256 <MPSL_IRQ_TIMER0_Handler+0x5a>
    3246:	2003      	movs	r0, #3
    3248:	f000 faec 	bl	3824 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    324c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3250:	2003      	movs	r0, #3
    3252:	f7fe fe71 	bl	1f38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3256:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    325a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    325e:	d00a      	beq.n	3276 <MPSL_IRQ_TIMER0_Handler+0x7a>
    3260:	4823      	ldr	r0, [pc, #140]	; (32f0 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    3262:	6800      	ldr	r0, [r0, #0]
    3264:	b138      	cbz	r0, 3276 <MPSL_IRQ_TIMER0_Handler+0x7a>
    3266:	2002      	movs	r0, #2
    3268:	f000 fadc 	bl	3824 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    326c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3270:	2002      	movs	r0, #2
    3272:	f7fe fe61 	bl	1f38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3276:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    327a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    327e:	d00a      	beq.n	3296 <MPSL_IRQ_TIMER0_Handler+0x9a>
    3280:	481c      	ldr	r0, [pc, #112]	; (32f4 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    3282:	6800      	ldr	r0, [r0, #0]
    3284:	b138      	cbz	r0, 3296 <MPSL_IRQ_TIMER0_Handler+0x9a>
    3286:	2001      	movs	r0, #1
    3288:	f000 facc 	bl	3824 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    328c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3290:	2001      	movs	r0, #1
    3292:	f7fe fe51 	bl	1f38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3296:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    329a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    329e:	bf08      	it	eq
    32a0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    32a4:	4814      	ldr	r0, [pc, #80]	; (32f8 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    32a6:	6800      	ldr	r0, [r0, #0]
    32a8:	2800      	cmp	r0, #0
    32aa:	bf08      	it	eq
    32ac:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    32b0:	2000      	movs	r0, #0
    32b2:	f000 fab7 	bl	3824 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    32b6:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    32ba:	2004      	movs	r0, #4
    32bc:	7028      	strb	r0, [r5, #0]
    32be:	f8c5 8004 	str.w	r8, [r5, #4]
    32c2:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    32c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    32ca:	2000      	movs	r0, #0
    32cc:	f7fe be34 	b.w	1f38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    32d0:	f240 41a3 	movw	r1, #1187	; 0x4a3
    32d4:	206c      	movs	r0, #108	; 0x6c
    32d6:	f000 ff43 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    32de:	2007      	movs	r0, #7
    32e0:	f7fe be2a 	b.w	1f38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    32e4:	20000044 	.word	0x20000044
    32e8:	40008000 	.word	0x40008000
    32ec:	4000814c 	.word	0x4000814c
    32f0:	40008148 	.word	0x40008148
    32f4:	40008144 	.word	0x40008144
    32f8:	40008140 	.word	0x40008140
    32fc:	2201      	movs	r2, #1
    32fe:	0211      	lsls	r1, r2, #8
    3300:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3304:	2000      	movs	r0, #0
    3306:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    330a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    330e:	f3bf 8f4f 	dsb	sy
    3312:	f3bf 8f6f 	isb	sy
    3316:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    331a:	490e      	ldr	r1, [pc, #56]	; (3354 <MPSL_IRQ_TIMER0_Handler+0x158>)
    331c:	f841 2f04 	str.w	r2, [r1, #4]!
    3320:	1e43      	subs	r3, r0, #1
    3322:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    3326:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    332a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    332e:	4b0a      	ldr	r3, [pc, #40]	; (3358 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    3330:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3334:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3338:	1d1b      	adds	r3, r3, #4
    333a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    333e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3342:	1d1b      	adds	r3, r3, #4
    3344:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3348:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    334c:	60ca      	str	r2, [r1, #12]
    334e:	4903      	ldr	r1, [pc, #12]	; (335c <MPSL_IRQ_TIMER0_Handler+0x160>)
    3350:	7048      	strb	r0, [r1, #1]
    3352:	4770      	bx	lr
    3354:	40008000 	.word	0x40008000
    3358:	40008004 	.word	0x40008004
    335c:	20000044 	.word	0x20000044

00003360 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3360:	4801      	ldr	r0, [pc, #4]	; (3368 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    3362:	6800      	ldr	r0, [r0, #0]
    3364:	4770      	bx	lr
    3366:	0000      	.short	0x0000
    3368:	4000b504 	.word	0x4000b504

0000336c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    336c:	b430      	push	{r4, r5}
    336e:	f3ef 8c10 	mrs	ip, PRIMASK
    3372:	b672      	cpsid	i
    3374:	2500      	movs	r5, #0
    3376:	4b0b      	ldr	r3, [pc, #44]	; (33a4 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    3378:	4a0b      	ldr	r2, [pc, #44]	; (33a8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    337a:	bf00      	nop
    337c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    3380:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    3384:	b12c      	cbz	r4, 3392 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    3386:	68d1      	ldr	r1, [r2, #12]
    3388:	1c49      	adds	r1, r1, #1
    338a:	60d1      	str	r1, [r2, #12]
    338c:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    3390:	e7f4      	b.n	337c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    3392:	68d2      	ldr	r2, [r2, #12]
    3394:	f1bc 0f00 	cmp.w	ip, #0
    3398:	d100      	bne.n	339c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    339a:	b662      	cpsie	i
    339c:	e9c0 1200 	strd	r1, r2, [r0]
    33a0:	bc30      	pop	{r4, r5}
    33a2:	4770      	bx	lr
    33a4:	4000b000 	.word	0x4000b000
    33a8:	20000044 	.word	0x20000044

000033ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    33ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33b0:	4e46      	ldr	r6, [pc, #280]	; (34cc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    33b2:	4605      	mov	r5, r0
    33b4:	1eb7      	subs	r7, r6, #2
    33b6:	7833      	ldrb	r3, [r6, #0]
    33b8:	68b9      	ldr	r1, [r7, #8]
    33ba:	2b01      	cmp	r3, #1
    33bc:	bf04      	itt	eq
    33be:	42a9      	cmpeq	r1, r5
    33c0:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    33c4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    33c8:	4a41      	ldr	r2, [pc, #260]	; (34d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    33ca:	6010      	str	r0, [r2, #0]
    33cc:	4a42      	ldr	r2, [pc, #264]	; (34d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    33ce:	4841      	ldr	r0, [pc, #260]	; (34d4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    33d0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    33d4:	f102 0c04 	add.w	ip, r2, #4
    33d8:	f04f 0400 	mov.w	r4, #0
    33dc:	2b00      	cmp	r3, #0
    33de:	d062      	beq.n	34a6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    33e0:	483e      	ldr	r0, [pc, #248]	; (34dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    33e2:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    33e6:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    33ea:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    33ee:	bf00      	nop
    33f0:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    33f4:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    33f8:	f04f 0801 	mov.w	r8, #1
    33fc:	2800      	cmp	r0, #0
    33fe:	bf01      	itttt	eq
    3400:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    3404:	2800      	cmpeq	r0, #0
    3406:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    340a:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    340e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3412:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3416:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    341a:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    341e:	4830      	ldr	r0, [pc, #192]	; (34e0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    3420:	f8d0 c000 	ldr.w	ip, [r0]
    3424:	eba5 0c0c 	sub.w	ip, r5, ip
    3428:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    342c:	f1bc 0f02 	cmp.w	ip, #2
    3430:	d344      	bcc.n	34bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    3432:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    3436:	d841      	bhi.n	34bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    3438:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    343c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    3440:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    3444:	b12b      	cbz	r3, 3452 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    3446:	6802      	ldr	r2, [r0, #0]
    3448:	1a8a      	subs	r2, r1, r2
    344a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    344e:	2a02      	cmp	r2, #2
    3450:	d3f9      	bcc.n	3446 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    3452:	f8c7 8004 	str.w	r8, [r7, #4]
    3456:	703c      	strb	r4, [r7, #0]
    3458:	f7ff ff50 	bl	32fc <MPSL_IRQ_TIMER0_Handler+0x100>
    345c:	4821      	ldr	r0, [pc, #132]	; (34e4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    345e:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3462:	f364 0101 	bfi	r1, r4, #0, #2
    3466:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    346a:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    346e:	2102      	movs	r1, #2
    3470:	f361 0201 	bfi	r2, r1, #0, #2
    3474:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    3478:	2104      	movs	r1, #4
    347a:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    347e:	f8c0 800c 	str.w	r8, [r0, #12]
    3482:	6879      	ldr	r1, [r7, #4]
    3484:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3488:	1580      	asrs	r0, r0, #22
    348a:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    348e:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    3492:	4915      	ldr	r1, [pc, #84]	; (34e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    3494:	05c0      	lsls	r0, r0, #23
    3496:	6008      	str	r0, [r1, #0]
    3498:	2004      	movs	r0, #4
    349a:	60bd      	str	r5, [r7, #8]
    349c:	7070      	strb	r0, [r6, #1]
    349e:	f886 8000 	strb.w	r8, [r6]
    34a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    34a6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    34aa:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    34ae:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    34b2:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    34b6:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    34ba:	e799      	b.n	33f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    34bc:	2000      	movs	r0, #0
    34be:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    34c2:	f240 2197 	movw	r1, #663	; 0x297
    34c6:	206c      	movs	r0, #108	; 0x6c
    34c8:	f000 fe4a 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34cc:	20000046 	.word	0x20000046
    34d0:	4001f508 	.word	0x4001f508
    34d4:	fffbfffd 	.word	0xfffbfffd
    34d8:	4000b000 	.word	0x4000b000
    34dc:	fffafffd 	.word	0xfffafffd
    34e0:	4000b504 	.word	0x4000b504
    34e4:	40008000 	.word	0x40008000
    34e8:	4001f504 	.word	0x4001f504

000034ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    34ec:	b570      	push	{r4, r5, r6, lr}
    34ee:	4c2a      	ldr	r4, [pc, #168]	; (3598 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    34f0:	68a1      	ldr	r1, [r4, #8]
    34f2:	4281      	cmp	r1, r0
    34f4:	bf14      	ite	ne
    34f6:	2201      	movne	r2, #1
    34f8:	2200      	moveq	r2, #0
    34fa:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 359c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    34fe:	f89c 5000 	ldrb.w	r5, [ip]
    3502:	2d02      	cmp	r5, #2
    3504:	d002      	beq.n	350c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    3506:	2a00      	cmp	r2, #0
    3508:	d034      	beq.n	3574 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    350a:	e002      	b.n	3512 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    350c:	2a00      	cmp	r2, #0
    350e:	bf08      	it	eq
    3510:	bd70      	popeq	{r4, r5, r6, pc}
    3512:	7862      	ldrb	r2, [r4, #1]
    3514:	b39a      	cbz	r2, 357e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    3516:	4b22      	ldr	r3, [pc, #136]	; (35a0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    3518:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    351c:	601a      	str	r2, [r3, #0]
    351e:	4b21      	ldr	r3, [pc, #132]	; (35a4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    3520:	1392      	asrs	r2, r2, #14
    3522:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    3526:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    352a:	2200      	movs	r2, #0
    352c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    3530:	4a1d      	ldr	r2, [pc, #116]	; (35a8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3532:	6816      	ldr	r6, [r2, #0]
    3534:	1b86      	subs	r6, r0, r6
    3536:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    353a:	2e02      	cmp	r6, #2
    353c:	d324      	bcc.n	3588 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    353e:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    3542:	d821      	bhi.n	3588 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3544:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3548:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    354c:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    3550:	b12d      	cbz	r5, 355e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    3552:	6813      	ldr	r3, [r2, #0]
    3554:	1acb      	subs	r3, r1, r3
    3556:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    355a:	2b02      	cmp	r3, #2
    355c:	d3f9      	bcc.n	3552 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    355e:	4b13      	ldr	r3, [pc, #76]	; (35ac <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3560:	2102      	movs	r1, #2
    3562:	074a      	lsls	r2, r1, #29
    3564:	601a      	str	r2, [r3, #0]
    3566:	60a0      	str	r0, [r4, #8]
    3568:	2004      	movs	r0, #4
    356a:	f88c 0001 	strb.w	r0, [ip, #1]
    356e:	f88c 1000 	strb.w	r1, [ip]
    3572:	bd70      	pop	{r4, r5, r6, pc}
    3574:	f240 21a5 	movw	r1, #677	; 0x2a5
    3578:	206c      	movs	r0, #108	; 0x6c
    357a:	f000 fdf1 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    357e:	f240 21a9 	movw	r1, #681	; 0x2a9
    3582:	206c      	movs	r0, #108	; 0x6c
    3584:	f000 fdec 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3588:	2000      	movs	r0, #0
    358a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    358e:	f240 21b5 	movw	r1, #693	; 0x2b5
    3592:	206c      	movs	r0, #108	; 0x6c
    3594:	f000 fde4 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3598:	20000044 	.word	0x20000044
    359c:	20000046 	.word	0x20000046
    35a0:	4001f508 	.word	0x4001f508
    35a4:	4000b000 	.word	0x4000b000
    35a8:	4000b504 	.word	0x4000b504
    35ac:	4001f504 	.word	0x4001f504

000035b0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    35b0:	4801      	ldr	r0, [pc, #4]	; (35b8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    35b2:	6880      	ldr	r0, [r0, #8]
    35b4:	4770      	bx	lr
    35b6:	0000      	.short	0x0000
    35b8:	20000044 	.word	0x20000044

000035bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    35bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35c0:	4836      	ldr	r0, [pc, #216]	; (369c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    35c2:	4a35      	ldr	r2, [pc, #212]	; (3698 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    35c4:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    35c8:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 36a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    35cc:	1d03      	adds	r3, r0, #4
    35ce:	2100      	movs	r1, #0
    35d0:	f89c 4000 	ldrb.w	r4, [ip]
    35d4:	b184      	cbz	r4, 35f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    35d6:	4a33      	ldr	r2, [pc, #204]	; (36a4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    35d8:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    35dc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    35e0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    35e4:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    35e8:	2301      	movs	r3, #1
    35ea:	2a00      	cmp	r2, #0
    35ec:	bf04      	itt	eq
    35ee:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    35f2:	2800      	cmpeq	r0, #0
    35f4:	d111      	bne.n	361a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    35f6:	e00a      	b.n	360e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    35f8:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    35fc:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3600:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3604:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3608:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    360c:	e7ea      	b.n	35e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    360e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3612:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3616:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    361a:	2c02      	cmp	r4, #2
    361c:	d004      	beq.n	3628 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    361e:	f240 21c1 	movw	r1, #705	; 0x2c1
    3622:	206c      	movs	r0, #108	; 0x6c
    3624:	f000 fd9c 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3628:	4e1f      	ldr	r6, [pc, #124]	; (36a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    362a:	6830      	ldr	r0, [r6, #0]
    362c:	4c1f      	ldr	r4, [pc, #124]	; (36ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    362e:	1cc0      	adds	r0, r0, #3
    3630:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3634:	68a2      	ldr	r2, [r4, #8]
    3636:	4d1e      	ldr	r5, [pc, #120]	; (36b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    3638:	4290      	cmp	r0, r2
    363a:	d00b      	beq.n	3654 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    363c:	6837      	ldr	r7, [r6, #0]
    363e:	1bd7      	subs	r7, r2, r7
    3640:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3644:	2f04      	cmp	r7, #4
    3646:	d305      	bcc.n	3654 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3648:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    364c:	d802      	bhi.n	3654 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    364e:	f7ff fead 	bl	33ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3652:	e01b      	b.n	368c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    3654:	6830      	ldr	r0, [r6, #0]
    3656:	1a10      	subs	r0, r2, r0
    3658:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    365c:	2802      	cmp	r0, #2
    365e:	d313      	bcc.n	3688 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    3660:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3664:	d810      	bhi.n	3688 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    3666:	4a13      	ldr	r2, [pc, #76]	; (36b4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    3668:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    366c:	6010      	str	r0, [r2, #0]
    366e:	6063      	str	r3, [r4, #4]
    3670:	7021      	strb	r1, [r4, #0]
    3672:	606b      	str	r3, [r5, #4]
    3674:	60eb      	str	r3, [r5, #12]
    3676:	0040      	lsls	r0, r0, #1
    3678:	1f11      	subs	r1, r2, #4
    367a:	6008      	str	r0, [r1, #0]
    367c:	2004      	movs	r0, #4
    367e:	f88c 0001 	strb.w	r0, [ip, #1]
    3682:	f88c 3000 	strb.w	r3, [ip]
    3686:	e001      	b.n	368c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    3688:	6063      	str	r3, [r4, #4]
    368a:	7021      	strb	r1, [r4, #0]
    368c:	6860      	ldr	r0, [r4, #4]
    368e:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3696:	0000      	.short	0x0000
    3698:	fffbfffd 	.word	0xfffbfffd
    369c:	4000b000 	.word	0x4000b000
    36a0:	20000046 	.word	0x20000046
    36a4:	fffafffd 	.word	0xfffafffd
    36a8:	4000b504 	.word	0x4000b504
    36ac:	20000044 	.word	0x20000044
    36b0:	40008000 	.word	0x40008000
    36b4:	4001f508 	.word	0x4001f508

000036b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    36b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36bc:	4a54      	ldr	r2, [pc, #336]	; (3810 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    36be:	2500      	movs	r5, #0
    36c0:	2401      	movs	r4, #1
    36c2:	f892 c000 	ldrb.w	ip, [r2]
    36c6:	7853      	ldrb	r3, [r2, #1]
    36c8:	f44f 76a0 	mov.w	r6, #320	; 0x140
    36cc:	2807      	cmp	r0, #7
    36ce:	d27d      	bcs.n	37cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    36d0:	e8df f000 	tbb	[pc, r0]
    36d4:	04040404 	.word	0x04040404
    36d8:	00585858 	.word	0x00585858
    36dc:	4a4d      	ldr	r2, [pc, #308]	; (3814 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    36de:	6897      	ldr	r7, [r2, #8]
    36e0:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    36e4:	bf04      	itt	eq
    36e6:	7852      	ldrbeq	r2, [r2, #1]
    36e8:	2a00      	cmpeq	r2, #0
    36ea:	d003      	beq.n	36f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    36ec:	f1bc 0f02 	cmp.w	ip, #2
    36f0:	d005      	beq.n	36fe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    36f2:	e026      	b.n	3742 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    36f4:	f240 3151 	movw	r1, #849	; 0x351
    36f8:	206c      	movs	r0, #108	; 0x6c
    36fa:	f000 fd31 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36fe:	1f1a      	subs	r2, r3, #4
    3700:	b2d2      	uxtb	r2, r2
    3702:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    3706:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    370a:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    370e:	2200      	movs	r2, #0
    3710:	f1bc 0f01 	cmp.w	ip, #1
    3714:	d003      	beq.n	371e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    3716:	f1bc 0f02 	cmp.w	ip, #2
    371a:	d008      	beq.n	372e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    371c:	e00e      	b.n	373c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    371e:	2b04      	cmp	r3, #4
    3720:	bf24      	itt	cs
    3722:	6837      	ldrcs	r7, [r6, #0]
    3724:	2f00      	cmpcs	r7, #0
    3726:	bf08      	it	eq
    3728:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    372c:	e006      	b.n	373c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    372e:	2b04      	cmp	r3, #4
    3730:	bf24      	itt	cs
    3732:	6837      	ldrcs	r7, [r6, #0]
    3734:	2f00      	cmpcs	r7, #0
    3736:	bf08      	it	eq
    3738:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    373c:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    3740:	d1e5      	bne.n	370e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    3742:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 3818 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    3746:	f100 0210 	add.w	r2, r0, #16
    374a:	fa04 f202 	lsl.w	r2, r4, r2
    374e:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    3752:	f04f 0340 	mov.w	r3, #64	; 0x40
    3756:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    375a:	b2db      	uxtb	r3, r3
    375c:	4463      	add	r3, ip
    375e:	601c      	str	r4, [r3, #0]
    3760:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3764:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    3768:	eba1 0303 	sub.w	r3, r1, r3
    376c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3770:	2b03      	cmp	r3, #3
    3772:	bf26      	itte	cs
    3774:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    3778:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    377c:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    3780:	d237      	bcs.n	37f2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    3782:	e03c      	b.n	37fe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    3784:	f1bc 0f00 	cmp.w	ip, #0
    3788:	d006      	beq.n	3798 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    378a:	4283      	cmp	r3, r0
    378c:	d104      	bne.n	3798 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    378e:	f240 3171 	movw	r1, #881	; 0x371
    3792:	206c      	movs	r0, #108	; 0x6c
    3794:	f000 fce4 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3798:	1f02      	subs	r2, r0, #4
    379a:	b2d3      	uxtb	r3, r2
    379c:	2b03      	cmp	r3, #3
    379e:	d304      	bcc.n	37aa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    37a0:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    37a4:	206c      	movs	r0, #108	; 0x6c
    37a6:	f000 fcdb 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37aa:	f8df c070 	ldr.w	ip, [pc, #112]	; 381c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    37ae:	f103 0210 	add.w	r2, r3, #16
    37b2:	fa04 f202 	lsl.w	r2, r4, r2
    37b6:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    37ba:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    37be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    37c2:	f84c 5003 	str.w	r5, [ip, r3]
    37c6:	4b16      	ldr	r3, [pc, #88]	; (3820 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    37c8:	681b      	ldr	r3, [r3, #0]
    37ca:	e000      	b.n	37ce <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    37cc:	e01a      	b.n	3804 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    37ce:	1f00      	subs	r0, r0, #4
    37d0:	1acb      	subs	r3, r1, r3
    37d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    37d6:	b2c0      	uxtb	r0, r0
    37d8:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    37dc:	2b02      	cmp	r3, #2
    37de:	d30b      	bcc.n	37f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    37e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    37e4:	d808      	bhi.n	37f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    37e6:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    37ea:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    37ee:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    37f2:	2001      	movs	r0, #1
    37f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37f8:	2100      	movs	r1, #0
    37fa:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    37fe:	2000      	movs	r0, #0
    3800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3804:	f240 3175 	movw	r1, #885	; 0x375
    3808:	206c      	movs	r0, #108	; 0x6c
    380a:	f000 fca9 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    380e:	0000      	.short	0x0000
    3810:	20000046 	.word	0x20000046
    3814:	20000044 	.word	0x20000044
    3818:	40008000 	.word	0x40008000
    381c:	4000b000 	.word	0x4000b000
    3820:	4000b504 	.word	0x4000b504

00003824 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3828:	2601      	movs	r6, #1
    382a:	2700      	movs	r7, #0
    382c:	f44f 78a0 	mov.w	r8, #320	; 0x140
    3830:	2807      	cmp	r0, #7
    3832:	d251      	bcs.n	38d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    3834:	e8df f000 	tbb	[pc, r0]
    3838:	04040404 	.word	0x04040404
    383c:	00191919 	.word	0x00191919
    3840:	f100 0110 	add.w	r1, r0, #16
    3844:	fa06 f201 	lsl.w	r2, r6, r1
    3848:	4926      	ldr	r1, [pc, #152]	; (38e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    384a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    384e:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    3852:	2200      	movs	r2, #0
    3854:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3858:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    385c:	508f      	str	r7, [r1, r2]
    385e:	4922      	ldr	r1, [pc, #136]	; (38e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3860:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3864:	9000      	str	r0, [sp, #0]
    3866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    386a:	4d20      	ldr	r5, [pc, #128]	; (38ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    386c:	1f01      	subs	r1, r0, #4
    386e:	b2cc      	uxtb	r4, r1
    3870:	7829      	ldrb	r1, [r5, #0]
    3872:	b179      	cbz	r1, 3894 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3874:	786a      	ldrb	r2, [r5, #1]
    3876:	4282      	cmp	r2, r0
    3878:	d10c      	bne.n	3894 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    387a:	4a1d      	ldr	r2, [pc, #116]	; (38f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    387c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3880:	6010      	str	r0, [r2, #0]
    3882:	2901      	cmp	r1, #1
    3884:	bf08      	it	eq
    3886:	f7ff fd39 	bleq	32fc <MPSL_IRQ_TIMER0_Handler+0x100>
    388a:	702f      	strb	r7, [r5, #0]
    388c:	4919      	ldr	r1, [pc, #100]	; (38f4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    388e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3892:	6088      	str	r0, [r1, #8]
    3894:	4918      	ldr	r1, [pc, #96]	; (38f8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    3896:	f104 0010 	add.w	r0, r4, #16
    389a:	fa06 f000 	lsl.w	r0, r6, r0
    389e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    38a2:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    38a6:	00a0      	lsls	r0, r4, #2
    38a8:	4408      	add	r0, r1
    38aa:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    38ae:	4a13      	ldr	r2, [pc, #76]	; (38fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    38b0:	6812      	ldr	r2, [r2, #0]
    38b2:	1a80      	subs	r0, r0, r2
    38b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    38b8:	2802      	cmp	r0, #2
    38ba:	d307      	bcc.n	38cc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    38bc:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    38c0:	2000      	movs	r0, #0
    38c2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    38c6:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    38ca:	500f      	str	r7, [r1, r0]
    38cc:	480c      	ldr	r0, [pc, #48]	; (3900 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    38ce:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    38d2:	9000      	str	r0, [sp, #0]
    38d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    38d8:	f240 31f9 	movw	r1, #1017	; 0x3f9
    38dc:	206c      	movs	r0, #108	; 0x6c
    38de:	f000 fc3f 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38e2:	0000      	.short	0x0000
    38e4:	40008000 	.word	0x40008000
    38e8:	40008140 	.word	0x40008140
    38ec:	20000046 	.word	0x20000046
    38f0:	4001f508 	.word	0x4001f508
    38f4:	20000044 	.word	0x20000044
    38f8:	4000b000 	.word	0x4000b000
    38fc:	4000b504 	.word	0x4000b504
    3900:	4000b140 	.word	0x4000b140

00003904 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3904:	4825      	ldr	r0, [pc, #148]	; (399c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    3906:	4a24      	ldr	r2, [pc, #144]	; (3998 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    3908:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    390c:	4924      	ldr	r1, [pc, #144]	; (39a0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    390e:	1d03      	adds	r3, r0, #4
    3910:	f891 c000 	ldrb.w	ip, [r1]
    3914:	2100      	movs	r1, #0
    3916:	f1bc 0f00 	cmp.w	ip, #0
    391a:	d010      	beq.n	393e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    391c:	4a21      	ldr	r2, [pc, #132]	; (39a4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    391e:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3922:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3926:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    392a:	bf00      	nop
    392c:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    3930:	2a00      	cmp	r2, #0
    3932:	bf04      	itt	eq
    3934:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    3938:	2800      	cmpeq	r0, #0
    393a:	d111      	bne.n	3960 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    393c:	e00a      	b.n	3954 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    393e:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3942:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3946:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    394a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    394e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3952:	e7eb      	b.n	392c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3954:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3958:	f44f 6000 	mov.w	r0, #2048	; 0x800
    395c:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    3960:	4811      	ldr	r0, [pc, #68]	; (39a8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    3962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3966:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    396a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    396e:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3972:	f100 0204 	add.w	r2, r0, #4
    3976:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    397a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    397e:	f102 0204 	add.w	r2, r2, #4
    3982:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3986:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    398a:	f102 0204 	add.w	r2, r2, #4
    398e:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3992:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    3996:	4770      	bx	lr
    3998:	fffbfffd 	.word	0xfffbfffd
    399c:	4000b000 	.word	0x4000b000
    39a0:	20000046 	.word	0x20000046
    39a4:	fffafffd 	.word	0xfffafffd
    39a8:	40008000 	.word	0x40008000

000039ac <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    39ac:	b510      	push	{r4, lr}
    39ae:	2807      	cmp	r0, #7
    39b0:	d20d      	bcs.n	39ce <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    39b2:	e8df f000 	tbb	[pc, r0]
    39b6:	0404      	.short	0x0404
    39b8:	06060404 	.word	0x06060404
    39bc:	0006      	.short	0x0006
    39be:	4906      	ldr	r1, [pc, #24]	; (39d8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    39c0:	e002      	b.n	39c8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    39c2:	1f00      	subs	r0, r0, #4
    39c4:	4905      	ldr	r1, [pc, #20]	; (39dc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    39c6:	b2c0      	uxtb	r0, r0
    39c8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    39cc:	bd10      	pop	{r4, pc}
    39ce:	f240 3199 	movw	r1, #921	; 0x399
    39d2:	206c      	movs	r0, #108	; 0x6c
    39d4:	f000 fbc4 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    39d8:	40008140 	.word	0x40008140
    39dc:	4000b140 	.word	0x4000b140

000039e0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    39e0:	b570      	push	{r4, r5, r6, lr}
    39e2:	481f      	ldr	r0, [pc, #124]	; (3a60 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    39e4:	2400      	movs	r4, #0
    39e6:	2104      	movs	r1, #4
    39e8:	7004      	strb	r4, [r0, #0]
    39ea:	1e80      	subs	r0, r0, #2
    39ec:	7001      	strb	r1, [r0, #0]
    39ee:	0589      	lsls	r1, r1, #22
    39f0:	60c4      	str	r4, [r0, #12]
    39f2:	6081      	str	r1, [r0, #8]
    39f4:	f7ff fc82 	bl	32fc <MPSL_IRQ_TIMER0_Handler+0x100>
    39f8:	2501      	movs	r5, #1
    39fa:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    39fe:	02eb      	lsls	r3, r5, #11
    3a00:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    3a04:	f3bf 8f4f 	dsb	sy
    3a08:	f3bf 8f6f 	isb	sy
    3a0c:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3a10:	4814      	ldr	r0, [pc, #80]	; (3a64 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    3a12:	6045      	str	r5, [r0, #4]
    3a14:	6085      	str	r5, [r0, #8]
    3a16:	4914      	ldr	r1, [pc, #80]	; (3a68 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    3a18:	680a      	ldr	r2, [r1, #0]
    3a1a:	2a00      	cmp	r2, #0
    3a1c:	d1fc      	bne.n	3a18 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    3a1e:	1e51      	subs	r1, r2, #1
    3a20:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3a24:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3a28:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3a2c:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3a30:	490e      	ldr	r1, [pc, #56]	; (3a6c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    3a32:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3a36:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3a3a:	1d09      	adds	r1, r1, #4
    3a3c:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3a40:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    3a44:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    3a48:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    3a4c:	6005      	str	r5, [r0, #0]
    3a4e:	f44f 7182 	mov.w	r1, #260	; 0x104
    3a52:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    3a56:	2102      	movs	r1, #2
    3a58:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    3a5c:	bd70      	pop	{r4, r5, r6, pc}
    3a5e:	0000      	.short	0x0000
    3a60:	20000046 	.word	0x20000046
    3a64:	4000b000 	.word	0x4000b000
    3a68:	4000b504 	.word	0x4000b504
    3a6c:	4000b004 	.word	0x4000b004

00003a70 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    3a70:	4808      	ldr	r0, [pc, #32]	; (3a94 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    3a72:	f990 0000 	ldrsb.w	r0, [r0]
    3a76:	2800      	cmp	r0, #0
    3a78:	bfb8      	it	lt
    3a7a:	4770      	bxlt	lr
    3a7c:	f000 011f 	and.w	r1, r0, #31
    3a80:	2201      	movs	r2, #1
    3a82:	fa02 f101 	lsl.w	r1, r2, r1
    3a86:	0940      	lsrs	r0, r0, #5
    3a88:	0080      	lsls	r0, r0, #2
    3a8a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3a8e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3a92:	4770      	bx	lr
    3a94:	20000178 	.word	0x20000178

00003a98 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    3a98:	4803      	ldr	r0, [pc, #12]	; (3aa8 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    3a9a:	7800      	ldrb	r0, [r0, #0]
    3a9c:	2803      	cmp	r0, #3
    3a9e:	bf0c      	ite	eq
    3aa0:	2001      	moveq	r0, #1
    3aa2:	2000      	movne	r0, #0
    3aa4:	4770      	bx	lr
    3aa6:	0000      	.short	0x0000
    3aa8:	20000168 	.word	0x20000168

00003aac <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    3aac:	4801      	ldr	r0, [pc, #4]	; (3ab4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    3aae:	8840      	ldrh	r0, [r0, #2]
    3ab0:	4770      	bx	lr
    3ab2:	0000      	.short	0x0000
    3ab4:	20000168 	.word	0x20000168

00003ab8 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    3ab8:	4803      	ldr	r0, [pc, #12]	; (3ac8 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    3aba:	7800      	ldrb	r0, [r0, #0]
    3abc:	2802      	cmp	r0, #2
    3abe:	bf16      	itet	ne
    3ac0:	2803      	cmpne	r0, #3
    3ac2:	2001      	moveq	r0, #1
    3ac4:	2000      	movne	r0, #0
    3ac6:	4770      	bx	lr
    3ac8:	20000168 	.word	0x20000168

00003acc <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    3acc:	4802      	ldr	r0, [pc, #8]	; (3ad8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    3ace:	2100      	movs	r1, #0
    3ad0:	7001      	strb	r1, [r0, #0]
    3ad2:	8041      	strh	r1, [r0, #2]
    3ad4:	4770      	bx	lr
    3ad6:	0000      	.short	0x0000
    3ad8:	20000168 	.word	0x20000168

00003adc <MPSL_IRQ_CLOCK_Handler>:
    3adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ae0:	4c16      	ldr	r4, [pc, #88]	; (3b3c <MPSL_IRQ_CLOCK_Handler+0x60>)
    3ae2:	7a60      	ldrb	r0, [r4, #9]
    3ae4:	2800      	cmp	r0, #0
    3ae6:	d027      	beq.n	3b38 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
    3aec:	058d      	lsls	r5, r1, #22
    3aee:	4628      	mov	r0, r5
    3af0:	f004 fd7c 	bl	85ec <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3af4:	4680      	mov	r8, r0
    3af6:	f44f 7182 	mov.w	r1, #260	; 0x104
    3afa:	4628      	mov	r0, r5
    3afc:	f004 fd76 	bl	85ec <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3b00:	2600      	movs	r6, #0
    3b02:	4607      	mov	r7, r0
    3b04:	f1b8 0f00 	cmp.w	r8, #0
    3b08:	d009      	beq.n	3b1e <MPSL_IRQ_CLOCK_Handler+0x42>
    3b0a:	2001      	movs	r0, #1
    3b0c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3b10:	7920      	ldrb	r0, [r4, #4]
    3b12:	b120      	cbz	r0, 3b1e <MPSL_IRQ_CLOCK_Handler+0x42>
    3b14:	7126      	strb	r6, [r4, #4]
    3b16:	69e0      	ldr	r0, [r4, #28]
    3b18:	b108      	cbz	r0, 3b1e <MPSL_IRQ_CLOCK_Handler+0x42>
    3b1a:	4780      	blx	r0
    3b1c:	61e6      	str	r6, [r4, #28]
    3b1e:	b137      	cbz	r7, 3b2e <MPSL_IRQ_CLOCK_Handler+0x52>
    3b20:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3b24:	2002      	movs	r0, #2
    3b26:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3b2a:	f000 fa4d 	bl	3fc8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3b2e:	4640      	mov	r0, r8
    3b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3b34:	f000 b858 	b.w	3be8 <MPSL_IRQ_CLOCK_Handler+0x10c>
    3b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b3c:	20000054 	.word	0x20000054
    3b40:	b510      	push	{r4, lr}
    3b42:	f004 fdfd 	bl	8740 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3b46:	b930      	cbnz	r0, 3b56 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3b48:	f004 fe1b 	bl	8782 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b4c:	b918      	cbnz	r0, 3b56 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3b4e:	f004 fe4e 	bl	87ee <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3b52:	2800      	cmp	r0, #0
    3b54:	d002      	beq.n	3b5c <MPSL_IRQ_CLOCK_Handler+0x80>
    3b56:	4902      	ldr	r1, [pc, #8]	; (3b60 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3b58:	2002      	movs	r0, #2
    3b5a:	6008      	str	r0, [r1, #0]
    3b5c:	bd10      	pop	{r4, pc}
    3b5e:	0000      	.short	0x0000
    3b60:	40000c34 	.word	0x40000c34
    3b64:	b570      	push	{r4, r5, r6, lr}
    3b66:	f000 f991 	bl	3e8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3b6a:	f000 fa81 	bl	4070 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3b6e:	4c09      	ldr	r4, [pc, #36]	; (3b94 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3b70:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3b74:	b130      	cbz	r0, 3b84 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3b76:	f7ff ffe3 	bl	3b40 <MPSL_IRQ_CLOCK_Handler+0x64>
    3b7a:	2001      	movs	r0, #1
    3b7c:	6128      	str	r0, [r5, #16]
    3b7e:	2004      	movs	r0, #4
    3b80:	72a0      	strb	r0, [r4, #10]
    3b82:	e004      	b.n	3b8e <MPSL_IRQ_CLOCK_Handler+0xb2>
    3b84:	2003      	movs	r0, #3
    3b86:	72a0      	strb	r0, [r4, #10]
    3b88:	2001      	movs	r0, #1
    3b8a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3b8e:	2000      	movs	r0, #0
    3b90:	71e0      	strb	r0, [r4, #7]
    3b92:	bd70      	pop	{r4, r5, r6, pc}
    3b94:	20000054 	.word	0x20000054
    3b98:	b570      	push	{r4, r5, r6, lr}
    3b9a:	4c12      	ldr	r4, [pc, #72]	; (3be4 <MPSL_IRQ_CLOCK_Handler+0x108>)
    3b9c:	79a0      	ldrb	r0, [r4, #6]
    3b9e:	b1e0      	cbz	r0, 3bda <MPSL_IRQ_CLOCK_Handler+0xfe>
    3ba0:	79e1      	ldrb	r1, [r4, #7]
    3ba2:	1e40      	subs	r0, r0, #1
    3ba4:	4281      	cmp	r1, r0
    3ba6:	da18      	bge.n	3bda <MPSL_IRQ_CLOCK_Handler+0xfe>
    3ba8:	f000 fa62 	bl	4070 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3bac:	4605      	mov	r5, r0
    3bae:	f000 fb4b 	bl	4248 <mpsl_temperature_get>
    3bb2:	79a1      	ldrb	r1, [r4, #6]
    3bb4:	2901      	cmp	r1, #1
    3bb6:	d902      	bls.n	3bbe <MPSL_IRQ_CLOCK_Handler+0xe2>
    3bb8:	79e1      	ldrb	r1, [r4, #7]
    3bba:	1c49      	adds	r1, r1, #1
    3bbc:	71e1      	strb	r1, [r4, #7]
    3bbe:	b10d      	cbz	r5, 3bc4 <MPSL_IRQ_CLOCK_Handler+0xe8>
    3bc0:	6961      	ldr	r1, [r4, #20]
    3bc2:	e000      	b.n	3bc6 <MPSL_IRQ_CLOCK_Handler+0xea>
    3bc4:	6921      	ldr	r1, [r4, #16]
    3bc6:	1a41      	subs	r1, r0, r1
    3bc8:	2902      	cmp	r1, #2
    3bca:	da02      	bge.n	3bd2 <MPSL_IRQ_CLOCK_Handler+0xf6>
    3bcc:	f111 0f02 	cmn.w	r1, #2
    3bd0:	dc07      	bgt.n	3be2 <MPSL_IRQ_CLOCK_Handler+0x106>
    3bd2:	b10d      	cbz	r5, 3bd8 <MPSL_IRQ_CLOCK_Handler+0xfc>
    3bd4:	6160      	str	r0, [r4, #20]
    3bd6:	e000      	b.n	3bda <MPSL_IRQ_CLOCK_Handler+0xfe>
    3bd8:	6120      	str	r0, [r4, #16]
    3bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3bde:	f7ff bfc1 	b.w	3b64 <MPSL_IRQ_CLOCK_Handler+0x88>
    3be2:	bd70      	pop	{r4, r5, r6, pc}
    3be4:	20000054 	.word	0x20000054
    3be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3bec:	4606      	mov	r6, r0
    3bee:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3bf2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3bf6:	4628      	mov	r0, r5
    3bf8:	f004 fcf8 	bl	85ec <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3bfc:	4680      	mov	r8, r0
    3bfe:	f44f 7188 	mov.w	r1, #272	; 0x110
    3c02:	4628      	mov	r0, r5
    3c04:	f004 fcf2 	bl	85ec <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3c08:	4c27      	ldr	r4, [pc, #156]	; (3ca8 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    3c0a:	4682      	mov	sl, r0
    3c0c:	7827      	ldrb	r7, [r4, #0]
    3c0e:	f104 0008 	add.w	r0, r4, #8
    3c12:	f004 fd5f 	bl	86d4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3c16:	b110      	cbz	r0, 3c1e <MPSL_IRQ_CLOCK_Handler+0x142>
    3c18:	f240 11b9 	movw	r1, #441	; 0x1b9
    3c1c:	e016      	b.n	3c4c <MPSL_IRQ_CLOCK_Handler+0x170>
    3c1e:	f04f 0901 	mov.w	r9, #1
    3c22:	b146      	cbz	r6, 3c36 <MPSL_IRQ_CLOCK_Handler+0x15a>
    3c24:	7aa0      	ldrb	r0, [r4, #10]
    3c26:	2803      	cmp	r0, #3
    3c28:	d105      	bne.n	3c36 <MPSL_IRQ_CLOCK_Handler+0x15a>
    3c2a:	2004      	movs	r0, #4
    3c2c:	72a0      	strb	r0, [r4, #10]
    3c2e:	f7ff ff87 	bl	3b40 <MPSL_IRQ_CLOCK_Handler+0x64>
    3c32:	f8c5 9010 	str.w	r9, [r5, #16]
    3c36:	2600      	movs	r6, #0
    3c38:	f1b8 0f00 	cmp.w	r8, #0
    3c3c:	d018      	beq.n	3c70 <MPSL_IRQ_CLOCK_Handler+0x194>
    3c3e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3c42:	7aa0      	ldrb	r0, [r4, #10]
    3c44:	2804      	cmp	r0, #4
    3c46:	d004      	beq.n	3c52 <MPSL_IRQ_CLOCK_Handler+0x176>
    3c48:	f240 11cb 	movw	r1, #459	; 0x1cb
    3c4c:	206d      	movs	r0, #109	; 0x6d
    3c4e:	f000 fa87 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c52:	f004 fd75 	bl	8740 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3c56:	b928      	cbnz	r0, 3c64 <MPSL_IRQ_CLOCK_Handler+0x188>
    3c58:	f004 fd93 	bl	8782 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3c5c:	b910      	cbnz	r0, 3c64 <MPSL_IRQ_CLOCK_Handler+0x188>
    3c5e:	f004 fdc6 	bl	87ee <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3c62:	b108      	cbz	r0, 3c68 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3c64:	4811      	ldr	r0, [pc, #68]	; (3cac <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3c66:	6006      	str	r6, [r0, #0]
    3c68:	2002      	movs	r0, #2
    3c6a:	72a0      	strb	r0, [r4, #10]
    3c6c:	f000 f8f2 	bl	3e54 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3c70:	f1ba 0f00 	cmp.w	sl, #0
    3c74:	d008      	beq.n	3c88 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3c76:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3c7a:	7aa0      	ldrb	r0, [r4, #10]
    3c7c:	2802      	cmp	r0, #2
    3c7e:	d101      	bne.n	3c84 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    3c80:	f7ff ff8a 	bl	3b98 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3c84:	f8c5 9014 	str.w	r9, [r5, #20]
    3c88:	b13f      	cbz	r7, 3c9a <MPSL_IRQ_CLOCK_Handler+0x1be>
    3c8a:	7026      	strb	r6, [r4, #0]
    3c8c:	7aa0      	ldrb	r0, [r4, #10]
    3c8e:	2802      	cmp	r0, #2
    3c90:	d101      	bne.n	3c96 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    3c92:	f7ff ff67 	bl	3b64 <MPSL_IRQ_CLOCK_Handler+0x88>
    3c96:	f000 f8dd 	bl	3e54 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3c9a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3c9e:	4802      	ldr	r0, [pc, #8]	; (3ca8 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    3ca0:	3008      	adds	r0, #8
    3ca2:	f004 bd2e 	b.w	8702 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3ca6:	0000      	.short	0x0000
    3ca8:	20000054 	.word	0x20000054
    3cac:	40000c34 	.word	0x40000c34
    3cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3cb4:	4c5f      	ldr	r4, [pc, #380]	; (3e34 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3cb6:	2700      	movs	r7, #0
    3cb8:	4606      	mov	r6, r0
    3cba:	61a7      	str	r7, [r4, #24]
    3cbc:	7842      	ldrb	r2, [r0, #1]
    3cbe:	7881      	ldrb	r1, [r0, #2]
    3cc0:	7800      	ldrb	r0, [r0, #0]
    3cc2:	72e0      	strb	r0, [r4, #11]
    3cc4:	7162      	strb	r2, [r4, #5]
    3cc6:	71a1      	strb	r1, [r4, #6]
    3cc8:	71e7      	strb	r7, [r4, #7]
    3cca:	f04f 0801 	mov.w	r8, #1
    3cce:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3cd2:	2805      	cmp	r0, #5
    3cd4:	d225      	bcs.n	3d22 <MPSL_IRQ_CLOCK_Handler+0x246>
    3cd6:	e8df f000 	tbb	[pc, r0]
    3cda:	0310      	.short	0x0310
    3cdc:	00222006 	.word	0x00222006
    3ce0:	f8c4 8018 	str.w	r8, [r4, #24]
    3ce4:	e009      	b.n	3cfa <MPSL_IRQ_CLOCK_Handler+0x21e>
    3ce6:	f000 f8d1 	bl	3e8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3cea:	2101      	movs	r1, #1
    3cec:	4628      	mov	r0, r5
    3cee:	f004 fc82 	bl	85f6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3cf2:	2800      	cmp	r0, #0
    3cf4:	d0f9      	beq.n	3cea <MPSL_IRQ_CLOCK_Handler+0x20e>
    3cf6:	2002      	movs	r0, #2
    3cf8:	61a0      	str	r0, [r4, #24]
    3cfa:	f004 fca8 	bl	864e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3cfe:	b1b0      	cbz	r0, 3d2e <MPSL_IRQ_CLOCK_Handler+0x252>
    3d00:	f000 f9d0 	bl	40a4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3d04:	7e21      	ldrb	r1, [r4, #24]
    3d06:	f001 0103 	and.w	r1, r1, #3
    3d0a:	4288      	cmp	r0, r1
    3d0c:	d10f      	bne.n	3d2e <MPSL_IRQ_CLOCK_Handler+0x252>
    3d0e:	79b0      	ldrb	r0, [r6, #6]
    3d10:	b150      	cbz	r0, 3d28 <MPSL_IRQ_CLOCK_Handler+0x24c>
    3d12:	2002      	movs	r0, #2
    3d14:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3d18:	e070      	b.n	3dfc <MPSL_IRQ_CLOCK_Handler+0x320>
    3d1a:	4847      	ldr	r0, [pc, #284]	; (3e38 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3d1c:	e7ec      	b.n	3cf8 <MPSL_IRQ_CLOCK_Handler+0x21c>
    3d1e:	4847      	ldr	r0, [pc, #284]	; (3e3c <MPSL_IRQ_CLOCK_Handler+0x360>)
    3d20:	e7ea      	b.n	3cf8 <MPSL_IRQ_CLOCK_Handler+0x21c>
    3d22:	f240 313a 	movw	r1, #826	; 0x33a
    3d26:	e04d      	b.n	3dc4 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    3d28:	f000 f990 	bl	404c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3d2c:	e066      	b.n	3dfc <MPSL_IRQ_CLOCK_Handler+0x320>
    3d2e:	f8c5 800c 	str.w	r8, [r5, #12]
    3d32:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3d36:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3d3a:	69a0      	ldr	r0, [r4, #24]
    3d3c:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3d40:	f004 fcea 	bl	8718 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3d44:	b940      	cbnz	r0, 3d58 <MPSL_IRQ_CLOCK_Handler+0x27c>
    3d46:	f004 fcf1 	bl	872c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3d4a:	b928      	cbnz	r0, 3d58 <MPSL_IRQ_CLOCK_Handler+0x27c>
    3d4c:	f004 fd05 	bl	875a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3d50:	b910      	cbnz	r0, 3d58 <MPSL_IRQ_CLOCK_Handler+0x27c>
    3d52:	f004 fd16 	bl	8782 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3d56:	b138      	cbz	r0, 3d68 <MPSL_IRQ_CLOCK_Handler+0x28c>
    3d58:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3d5c:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    3d60:	4937      	ldr	r1, [pc, #220]	; (3e40 <MPSL_IRQ_CLOCK_Handler+0x364>)
    3d62:	f3c0 3042 	ubfx	r0, r0, #13, #3
    3d66:	6008      	str	r0, [r1, #0]
    3d68:	f004 fcd6 	bl	8718 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3d6c:	b940      	cbnz	r0, 3d80 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    3d6e:	f004 fcdd 	bl	872c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3d72:	b928      	cbnz	r0, 3d80 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    3d74:	f004 fcf1 	bl	875a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3d78:	b910      	cbnz	r0, 3d80 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    3d7a:	f004 fd02 	bl	8782 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3d7e:	b118      	cbz	r0, 3d88 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    3d80:	492f      	ldr	r1, [pc, #188]	; (3e40 <MPSL_IRQ_CLOCK_Handler+0x364>)
    3d82:	3110      	adds	r1, #16
    3d84:	f8c1 8000 	str.w	r8, [r1]
    3d88:	f8c5 8008 	str.w	r8, [r5, #8]
    3d8c:	2002      	movs	r0, #2
    3d8e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3d92:	79b0      	ldrb	r0, [r6, #6]
    3d94:	bb90      	cbnz	r0, 3dfc <MPSL_IRQ_CLOCK_Handler+0x320>
    3d96:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3d9a:	f010 0f02 	tst.w	r0, #2
    3d9e:	d00f      	beq.n	3dc0 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3da0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 3e44 <MPSL_IRQ_CLOCK_Handler+0x368>
    3da4:	f8d9 1000 	ldr.w	r1, [r9]
    3da8:	43c9      	mvns	r1, r1
    3daa:	f341 1100 	sbfx	r1, r1, #4, #1
    3dae:	f101 0801 	add.w	r8, r1, #1
    3db2:	f8d9 1000 	ldr.w	r1, [r9]
    3db6:	f041 0110 	orr.w	r1, r1, #16
    3dba:	f8c9 1000 	str.w	r1, [r9]
    3dbe:	e007      	b.n	3dd0 <MPSL_IRQ_CLOCK_Handler+0x2f4>
    3dc0:	f240 21fb 	movw	r1, #763	; 0x2fb
    3dc4:	206d      	movs	r0, #109	; 0x6d
    3dc6:	f000 f9cb 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3dca:	bf00      	nop
    3dcc:	f000 fb02 	bl	43d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3dd0:	4651      	mov	r1, sl
    3dd2:	4628      	mov	r0, r5
    3dd4:	f004 fc0a 	bl	85ec <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3dd8:	2800      	cmp	r0, #0
    3dda:	d0f7      	beq.n	3dcc <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3ddc:	f000 f936 	bl	404c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3de0:	f1b8 0f00 	cmp.w	r8, #0
    3de4:	d105      	bne.n	3df2 <MPSL_IRQ_CLOCK_Handler+0x316>
    3de6:	f8d9 1000 	ldr.w	r1, [r9]
    3dea:	f021 0110 	bic.w	r1, r1, #16
    3dee:	f8c9 1000 	str.w	r1, [r9]
    3df2:	2002      	movs	r0, #2
    3df4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3df8:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3dfc:	79a0      	ldrb	r0, [r4, #6]
    3dfe:	b170      	cbz	r0, 3e1e <MPSL_IRQ_CLOCK_Handler+0x342>
    3e00:	7830      	ldrb	r0, [r6, #0]
    3e02:	b960      	cbnz	r0, 3e1e <MPSL_IRQ_CLOCK_Handler+0x342>
    3e04:	f000 f934 	bl	4070 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3e08:	4606      	mov	r6, r0
    3e0a:	f000 fa1d 	bl	4248 <mpsl_temperature_get>
    3e0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3e12:	b116      	cbz	r6, 3e1a <MPSL_IRQ_CLOCK_Handler+0x33e>
    3e14:	e9c4 1004 	strd	r1, r0, [r4, #16]
    3e18:	e001      	b.n	3e1e <MPSL_IRQ_CLOCK_Handler+0x342>
    3e1a:	e9c4 0104 	strd	r0, r1, [r4, #16]
    3e1e:	2101      	movs	r1, #1
    3e20:	4628      	mov	r0, r5
    3e22:	f004 fbe8 	bl	85f6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3e26:	b108      	cbz	r0, 3e2c <MPSL_IRQ_CLOCK_Handler+0x350>
    3e28:	f000 f91c 	bl	4064 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3e2c:	72a7      	strb	r7, [r4, #10]
    3e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e32:	0000      	.short	0x0000
    3e34:	20000054 	.word	0x20000054
    3e38:	00020001 	.word	0x00020001
    3e3c:	00030001 	.word	0x00030001
    3e40:	4000053c 	.word	0x4000053c
    3e44:	e000ed10 	.word	0xe000ed10

00003e48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    3e48:	4801      	ldr	r0, [pc, #4]	; (3e50 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    3e4a:	89c0      	ldrh	r0, [r0, #14]
    3e4c:	4770      	bx	lr
    3e4e:	0000      	.short	0x0000
    3e50:	20000054 	.word	0x20000054

00003e54 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3e54:	b510      	push	{r4, lr}
    3e56:	f3ef 8410 	mrs	r4, PRIMASK
    3e5a:	b672      	cpsid	i
    3e5c:	480a      	ldr	r0, [pc, #40]	; (3e88 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3e5e:	7841      	ldrb	r1, [r0, #1]
    3e60:	b129      	cbz	r1, 3e6e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3e62:	7841      	ldrb	r1, [r0, #1]
    3e64:	1e49      	subs	r1, r1, #1
    3e66:	7041      	strb	r1, [r0, #1]
    3e68:	7841      	ldrb	r1, [r0, #1]
    3e6a:	b129      	cbz	r1, 3e78 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3e6c:	e008      	b.n	3e80 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3e6e:	f44f 718e 	mov.w	r1, #284	; 0x11c
    3e72:	206d      	movs	r0, #109	; 0x6d
    3e74:	f000 f974 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e78:	7880      	ldrb	r0, [r0, #2]
    3e7a:	b908      	cbnz	r0, 3e80 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3e7c:	f000 f906 	bl	408c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3e80:	2c00      	cmp	r4, #0
    3e82:	d100      	bne.n	3e86 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3e84:	b662      	cpsie	i
    3e86:	bd10      	pop	{r4, pc}
    3e88:	20000054 	.word	0x20000054

00003e8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3e8c:	b510      	push	{r4, lr}
    3e8e:	f3ef 8410 	mrs	r4, PRIMASK
    3e92:	b672      	cpsid	i
    3e94:	4806      	ldr	r0, [pc, #24]	; (3eb0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3e96:	7841      	ldrb	r1, [r0, #1]
    3e98:	1c49      	adds	r1, r1, #1
    3e9a:	7041      	strb	r1, [r0, #1]
    3e9c:	7840      	ldrb	r0, [r0, #1]
    3e9e:	2801      	cmp	r0, #1
    3ea0:	d101      	bne.n	3ea6 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3ea2:	f004 fbbf 	bl	8624 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3ea6:	2c00      	cmp	r4, #0
    3ea8:	d100      	bne.n	3eac <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3eaa:	b662      	cpsie	i
    3eac:	bd10      	pop	{r4, pc}
    3eae:	0000      	.short	0x0000
    3eb0:	20000054 	.word	0x20000054

00003eb4 <mpsl_clock_hfclk_release>:
    3eb4:	4805      	ldr	r0, [pc, #20]	; (3ecc <mpsl_clock_hfclk_release+0x18>)
    3eb6:	b510      	push	{r4, lr}
    3eb8:	78c1      	ldrb	r1, [r0, #3]
    3eba:	b121      	cbz	r1, 3ec6 <mpsl_clock_hfclk_release+0x12>
    3ebc:	2100      	movs	r1, #0
    3ebe:	7101      	strb	r1, [r0, #4]
    3ec0:	70c1      	strb	r1, [r0, #3]
    3ec2:	f7ff ffc7 	bl	3e54 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3ec6:	2000      	movs	r0, #0
    3ec8:	bd10      	pop	{r4, pc}
    3eca:	0000      	.short	0x0000
    3ecc:	20000054 	.word	0x20000054

00003ed0 <mpsl_clock_hfclk_request>:
    3ed0:	b570      	push	{r4, r5, r6, lr}
    3ed2:	4c0c      	ldr	r4, [pc, #48]	; (3f04 <mpsl_clock_hfclk_request+0x34>)
    3ed4:	78e1      	ldrb	r1, [r4, #3]
    3ed6:	b961      	cbnz	r1, 3ef2 <mpsl_clock_hfclk_request+0x22>
    3ed8:	2501      	movs	r5, #1
    3eda:	70e5      	strb	r5, [r4, #3]
    3edc:	61e0      	str	r0, [r4, #28]
    3ede:	f7ff ffd5 	bl	3e8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3ee2:	f000 f8c5 	bl	4070 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3ee6:	b130      	cbz	r0, 3ef6 <mpsl_clock_hfclk_request+0x26>
    3ee8:	69e0      	ldr	r0, [r4, #28]
    3eea:	b110      	cbz	r0, 3ef2 <mpsl_clock_hfclk_request+0x22>
    3eec:	4780      	blx	r0
    3eee:	2000      	movs	r0, #0
    3ef0:	61e0      	str	r0, [r4, #28]
    3ef2:	2000      	movs	r0, #0
    3ef4:	bd70      	pop	{r4, r5, r6, pc}
    3ef6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3efa:	7125      	strb	r5, [r4, #4]
    3efc:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3f00:	e7f7      	b.n	3ef2 <mpsl_clock_hfclk_request+0x22>
    3f02:	0000      	.short	0x0000
    3f04:	20000054 	.word	0x20000054

00003f08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f0c:	0005      	movs	r5, r0
    3f0e:	f06f 0015 	mvn.w	r0, #21
    3f12:	d03f      	beq.n	3f94 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3f14:	7829      	ldrb	r1, [r5, #0]
    3f16:	2904      	cmp	r1, #4
    3f18:	d83c      	bhi.n	3f94 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3f1a:	2900      	cmp	r1, #0
    3f1c:	7869      	ldrb	r1, [r5, #1]
    3f1e:	d03b      	beq.n	3f98 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    3f20:	2900      	cmp	r1, #0
    3f22:	d137      	bne.n	3f94 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3f24:	78a9      	ldrb	r1, [r5, #2]
    3f26:	2900      	cmp	r1, #0
    3f28:	d134      	bne.n	3f94 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3f2a:	2000      	movs	r0, #0
    3f2c:	f004 fb29 	bl	8582 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    3f30:	2000      	movs	r0, #0
    3f32:	f004 fb19 	bl	8568 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    3f36:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3f3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3f3e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3f42:	2600      	movs	r6, #0
    3f44:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3f48:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3f4c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3f50:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3f54:	4c14      	ldr	r4, [pc, #80]	; (3fa8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3f56:	7066      	strb	r6, [r4, #1]
    3f58:	88a8      	ldrh	r0, [r5, #4]
    3f5a:	81a0      	strh	r0, [r4, #12]
    3f5c:	f004 fb59 	bl	8612 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3f60:	2701      	movs	r7, #1
    3f62:	b108      	cbz	r0, 3f68 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3f64:	70e7      	strb	r7, [r4, #3]
    3f66:	7067      	strb	r7, [r4, #1]
    3f68:	2101      	movs	r1, #1
    3f6a:	4640      	mov	r0, r8
    3f6c:	f004 fb43 	bl	85f6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3f70:	b108      	cbz	r0, 3f76 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3f72:	f000 f877 	bl	4064 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3f76:	f240 50f5 	movw	r0, #1525	; 0x5f5
    3f7a:	81e0      	strh	r0, [r4, #14]
    3f7c:	4628      	mov	r0, r5
    3f7e:	f7ff fe97 	bl	3cb0 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    3f82:	7267      	strb	r7, [r4, #9]
    3f84:	2000      	movs	r0, #0
    3f86:	f004 faef 	bl	8568 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    3f8a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3f8e:	4630      	mov	r0, r6
    3f90:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    3f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f98:	2900      	cmp	r1, #0
    3f9a:	d0fb      	beq.n	3f94 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3f9c:	2920      	cmp	r1, #32
    3f9e:	d8f9      	bhi.n	3f94 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3fa0:	78a9      	ldrb	r1, [r5, #2]
    3fa2:	2921      	cmp	r1, #33	; 0x21
    3fa4:	d9c1      	bls.n	3f2a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3fa6:	e7f5      	b.n	3f94 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3fa8:	20000054 	.word	0x20000054

00003fac <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3fac:	4801      	ldr	r0, [pc, #4]	; (3fb4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3fae:	8980      	ldrh	r0, [r0, #12]
    3fb0:	4770      	bx	lr
    3fb2:	0000      	.short	0x0000
    3fb4:	20000054 	.word	0x20000054

00003fb8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3fb8:	4802      	ldr	r0, [pc, #8]	; (3fc4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3fba:	7a80      	ldrb	r0, [r0, #10]
    3fbc:	2800      	cmp	r0, #0
    3fbe:	d000      	beq.n	3fc2 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3fc0:	2001      	movs	r0, #1
    3fc2:	4770      	bx	lr
    3fc4:	20000054 	.word	0x20000054

00003fc8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fca:	4d1f      	ldr	r5, [pc, #124]	; (4048 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3fcc:	7ae8      	ldrb	r0, [r5, #11]
    3fce:	2800      	cmp	r0, #0
    3fd0:	d10f      	bne.n	3ff2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3fd2:	7e28      	ldrb	r0, [r5, #24]
    3fd4:	f000 0003 	and.w	r0, r0, #3
    3fd8:	f004 fb29 	bl	862e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3fdc:	2800      	cmp	r0, #0
    3fde:	d008      	beq.n	3ff2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3fe0:	f3ef 8110 	mrs	r1, PRIMASK
    3fe4:	b672      	cpsid	i
    3fe6:	f7ff ffe7 	bl	3fb8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3fea:	b118      	cbz	r0, 3ff4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3fec:	2900      	cmp	r1, #0
    3fee:	d100      	bne.n	3ff2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3ff0:	b662      	cpsie	i
    3ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ff4:	2601      	movs	r6, #1
    3ff6:	72ae      	strb	r6, [r5, #10]
    3ff8:	b901      	cbnz	r1, 3ffc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3ffa:	b662      	cpsie	i
    3ffc:	2018      	movs	r0, #24
    3ffe:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4002:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4006:	61a6      	str	r6, [r4, #24]
    4008:	f44f 7020 	mov.w	r0, #640	; 0x280
    400c:	f8ad 0000 	strh.w	r0, [sp]
    4010:	f8bd 0000 	ldrh.w	r0, [sp]
    4014:	1e41      	subs	r1, r0, #1
    4016:	f8ad 1000 	strh.w	r1, [sp]
    401a:	d2f9      	bcs.n	4010 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    401c:	2700      	movs	r7, #0
    401e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    4022:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    4026:	4808      	ldr	r0, [pc, #32]	; (4048 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4028:	3008      	adds	r0, #8
    402a:	f004 fb66 	bl	86fa <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    402e:	702f      	strb	r7, [r5, #0]
    4030:	f7ff fd98 	bl	3b64 <MPSL_IRQ_CLOCK_Handler+0x88>
    4034:	6166      	str	r6, [r4, #20]
    4036:	7968      	ldrb	r0, [r5, #5]
    4038:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    403c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    4040:	2018      	movs	r0, #24
    4042:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    4046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4048:	20000054 	.word	0x20000054

0000404c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    404c:	b510      	push	{r4, lr}
    404e:	4c04      	ldr	r4, [pc, #16]	; (4060 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    4050:	7e20      	ldrb	r0, [r4, #24]
    4052:	f000 0003 	and.w	r0, r0, #3
    4056:	f004 faea 	bl	862e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    405a:	2800      	cmp	r0, #0
    405c:	d0f8      	beq.n	4050 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    405e:	bd10      	pop	{r4, pc}
    4060:	20000054 	.word	0x20000054

00004064 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    4064:	4901      	ldr	r1, [pc, #4]	; (406c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    4066:	2001      	movs	r0, #1
    4068:	7008      	strb	r0, [r1, #0]
    406a:	4770      	bx	lr
    406c:	20000179 	.word	0x20000179

00004070 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4070:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4074:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4078:	b918      	cbnz	r0, 4082 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    407a:	4803      	ldr	r0, [pc, #12]	; (4088 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    407c:	7800      	ldrb	r0, [r0, #0]
    407e:	2800      	cmp	r0, #0
    4080:	d000      	beq.n	4084 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    4082:	2001      	movs	r0, #1
    4084:	4770      	bx	lr
    4086:	0000      	.short	0x0000
    4088:	20000179 	.word	0x20000179

0000408c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    408c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4090:	2101      	movs	r1, #1
    4092:	6041      	str	r1, [r0, #4]
    4094:	2100      	movs	r1, #0
    4096:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    409a:	4801      	ldr	r0, [pc, #4]	; (40a0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    409c:	7001      	strb	r1, [r0, #0]
    409e:	4770      	bx	lr
    40a0:	20000179 	.word	0x20000179

000040a4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    40a4:	4802      	ldr	r0, [pc, #8]	; (40b0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    40a6:	6800      	ldr	r0, [r0, #0]
    40a8:	f000 0003 	and.w	r0, r0, #3
    40ac:	4770      	bx	lr
    40ae:	0000      	.short	0x0000
    40b0:	4000041c 	.word	0x4000041c
    40b4:	b510      	push	{r4, lr}
    40b6:	b131      	cbz	r1, 40c6 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    40b8:	2901      	cmp	r1, #1
    40ba:	d007      	beq.n	40cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    40bc:	f240 3102 	movw	r1, #770	; 0x302
    40c0:	a005      	add	r0, pc, #20	; (adr r0, 40d8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    40c2:	f000 f821 	bl	4108 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    40c6:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    40ca:	e001      	b.n	40d0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    40cc:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    40d0:	f000 0001 	and.w	r0, r0, #1
    40d4:	bd10      	pop	{r4, pc}
    40d6:	0000      	.short	0x0000
    40d8:	5f66726e 	.word	0x5f66726e
    40dc:	636f6c63 	.word	0x636f6c63
    40e0:	00682e6b 	.word	0x00682e6b
    40e4:	f3bf 8f4f 	dsb	sy
    40e8:	4805      	ldr	r0, [pc, #20]	; (4100 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    40ea:	6801      	ldr	r1, [r0, #0]
    40ec:	4a05      	ldr	r2, [pc, #20]	; (4104 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    40ee:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    40f2:	4311      	orrs	r1, r2
    40f4:	6001      	str	r1, [r0, #0]
    40f6:	f3bf 8f4f 	dsb	sy
    40fa:	bf00      	nop
    40fc:	e7fd      	b.n	40fa <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    40fe:	0000      	.short	0x0000
    4100:	e000ed0c 	.word	0xe000ed0c
    4104:	05fa0004 	.word	0x05fa0004

00004108 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    4108:	b672      	cpsid	i
    410a:	4a03      	ldr	r2, [pc, #12]	; (4118 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    410c:	6852      	ldr	r2, [r2, #4]
    410e:	b102      	cbz	r2, 4112 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    4110:	4790      	blx	r2
    4112:	f7ff ffe7 	bl	40e4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4116:	0000      	.short	0x0000
    4118:	20000074 	.word	0x20000074
    411c:	4806      	ldr	r0, [pc, #24]	; (4138 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    411e:	b510      	push	{r4, lr}
    4120:	2100      	movs	r1, #0
    4122:	6001      	str	r1, [r0, #0]
    4124:	2101      	movs	r1, #1
    4126:	6001      	str	r1, [r0, #0]
    4128:	4608      	mov	r0, r1
    412a:	f004 faa7 	bl	867c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    412e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4132:	2001      	movs	r0, #1
    4134:	f004 ba95 	b.w	8662 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4138:	40001ffc 	.word	0x40001ffc
    413c:	4807      	ldr	r0, [pc, #28]	; (415c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    413e:	b510      	push	{r4, lr}
    4140:	2101      	movs	r1, #1
    4142:	6041      	str	r1, [r0, #4]
    4144:	1e89      	subs	r1, r1, #2
    4146:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    414a:	200c      	movs	r0, #12
    414c:	f004 fa96 	bl	867c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4154:	200c      	movs	r0, #12
    4156:	f004 ba84 	b.w	8662 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    415a:	0000      	.short	0x0000
    415c:	4000c000 	.word	0x4000c000

00004160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    4160:	b50e      	push	{r1, r2, r3, lr}
    4162:	b672      	cpsid	i
    4164:	4a0f      	ldr	r2, [pc, #60]	; (41a4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    4166:	6855      	ldr	r5, [r2, #4]
    4168:	b1d5      	cbz	r5, 41a0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    416a:	2200      	movs	r2, #0
    416c:	4603      	mov	r3, r0
    416e:	466e      	mov	r6, sp
    4170:	240a      	movs	r4, #10
    4172:	e003      	b.n	417c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    4174:	fbb0 f0f4 	udiv	r0, r0, r4
    4178:	1c52      	adds	r2, r2, #1
    417a:	b2d2      	uxtb	r2, r2
    417c:	2800      	cmp	r0, #0
    417e:	d1f9      	bne.n	4174 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    4180:	54b0      	strb	r0, [r6, r2]
    4182:	e009      	b.n	4198 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    4184:	fbb3 f0f4 	udiv	r0, r3, r4
    4188:	fb04 3010 	mls	r0, r4, r0, r3
    418c:	fbb3 f3f4 	udiv	r3, r3, r4
    4190:	1e52      	subs	r2, r2, #1
    4192:	b2d2      	uxtb	r2, r2
    4194:	3030      	adds	r0, #48	; 0x30
    4196:	54b0      	strb	r0, [r6, r2]
    4198:	2a00      	cmp	r2, #0
    419a:	d1f3      	bne.n	4184 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    419c:	4630      	mov	r0, r6
    419e:	47a8      	blx	r5
    41a0:	f7ff ffa0 	bl	40e4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    41a4:	20000074 	.word	0x20000074

000041a8 <mpsl_init>:
    41a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41ac:	4c18      	ldr	r4, [pc, #96]	; (4210 <mpsl_init+0x68>)
    41ae:	4606      	mov	r6, r0
    41b0:	4617      	mov	r7, r2
    41b2:	7860      	ldrb	r0, [r4, #1]
    41b4:	460d      	mov	r5, r1
    41b6:	b118      	cbz	r0, 41c0 <mpsl_init+0x18>
    41b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    41bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41c0:	f7fc fd1c 	bl	bfc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    41c4:	b906      	cbnz	r6, 41c8 <mpsl_init+0x20>
    41c6:	4e13      	ldr	r6, [pc, #76]	; (4214 <mpsl_init+0x6c>)
    41c8:	6067      	str	r7, [r4, #4]
    41ca:	7025      	strb	r5, [r4, #0]
    41cc:	f7ff ffa6 	bl	411c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    41d0:	f7ff ffb4 	bl	413c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    41d4:	4630      	mov	r0, r6
    41d6:	f7ff fe97 	bl	3f08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    41da:	0006      	movs	r6, r0
    41dc:	d1ee      	bne.n	41bc <mpsl_init+0x14>
    41de:	f7fe fee7 	bl	2fb0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    41e2:	f7ff fef1 	bl	3fc8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    41e6:	f004 f98e 	bl	8506 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    41ea:	4628      	mov	r0, r5
    41ec:	f004 fa39 	bl	8662 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    41f0:	2001      	movs	r0, #1
    41f2:	2d00      	cmp	r5, #0
    41f4:	db09      	blt.n	420a <mpsl_init+0x62>
    41f6:	f005 011f 	and.w	r1, r5, #31
    41fa:	fa00 f101 	lsl.w	r1, r0, r1
    41fe:	096a      	lsrs	r2, r5, #5
    4200:	0092      	lsls	r2, r2, #2
    4202:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4206:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    420a:	7060      	strb	r0, [r4, #1]
    420c:	4630      	mov	r0, r6
    420e:	e7d5      	b.n	41bc <mpsl_init+0x14>
    4210:	20000074 	.word	0x20000074
    4214:	0000869e 	.word	0x0000869e

00004218 <mpsl_is_initialized>:
    4218:	4801      	ldr	r0, [pc, #4]	; (4220 <mpsl_is_initialized+0x8>)
    421a:	7840      	ldrb	r0, [r0, #1]
    421c:	4770      	bx	lr
    421e:	0000      	.short	0x0000
    4220:	20000074 	.word	0x20000074

00004224 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    4224:	4807      	ldr	r0, [pc, #28]	; (4244 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    4226:	f990 0000 	ldrsb.w	r0, [r0]
    422a:	2800      	cmp	r0, #0
    422c:	db09      	blt.n	4242 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    422e:	f000 021f 	and.w	r2, r0, #31
    4232:	2101      	movs	r1, #1
    4234:	4091      	lsls	r1, r2
    4236:	0940      	lsrs	r0, r0, #5
    4238:	0080      	lsls	r0, r0, #2
    423a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    423e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4242:	4770      	bx	lr
    4244:	20000074 	.word	0x20000074

00004248 <mpsl_temperature_get>:
    4248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    424c:	2601      	movs	r6, #1
    424e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4252:	0331      	lsls	r1, r6, #12
    4254:	f04f 0800 	mov.w	r8, #0
    4258:	4640      	mov	r0, r8
    425a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    425e:	f3bf 8f4f 	dsb	sy
    4262:	f3bf 8f6f 	isb	sy
    4266:	4c16      	ldr	r4, [pc, #88]	; (42c0 <mpsl_temperature_get+0x78>)
    4268:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    426c:	200c      	movs	r0, #12
    426e:	f004 fa24 	bl	86ba <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4272:	4d14      	ldr	r5, [pc, #80]	; (42c4 <mpsl_temperature_get+0x7c>)
    4274:	6828      	ldr	r0, [r5, #0]
    4276:	43c0      	mvns	r0, r0
    4278:	f340 1700 	sbfx	r7, r0, #4, #1
    427c:	6828      	ldr	r0, [r5, #0]
    427e:	f040 0010 	orr.w	r0, r0, #16
    4282:	6028      	str	r0, [r5, #0]
    4284:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    4288:	6026      	str	r6, [r4, #0]
    428a:	1c7f      	adds	r7, r7, #1
    428c:	e002      	b.n	4294 <mpsl_temperature_get+0x4c>
    428e:	bf00      	nop
    4290:	f000 f8a0 	bl	43d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4294:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4298:	2800      	cmp	r0, #0
    429a:	d0f9      	beq.n	4290 <mpsl_temperature_get+0x48>
    429c:	b91f      	cbnz	r7, 42a6 <mpsl_temperature_get+0x5e>
    429e:	6828      	ldr	r0, [r5, #0]
    42a0:	f020 0010 	bic.w	r0, r0, #16
    42a4:	6028      	str	r0, [r5, #0]
    42a6:	4808      	ldr	r0, [pc, #32]	; (42c8 <mpsl_temperature_get+0x80>)
    42a8:	6805      	ldr	r5, [r0, #0]
    42aa:	6066      	str	r6, [r4, #4]
    42ac:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    42b0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    42b4:	200c      	movs	r0, #12
    42b6:	f004 fa00 	bl	86ba <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    42ba:	4628      	mov	r0, r5
    42bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42c0:	4000c000 	.word	0x4000c000
    42c4:	e000ed10 	.word	0xe000ed10
    42c8:	4000c508 	.word	0x4000c508

000042cc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    42cc:	b510      	push	{r4, lr}
    42ce:	4602      	mov	r2, r0
    42d0:	2005      	movs	r0, #5
    42d2:	490c      	ldr	r1, [pc, #48]	; (4304 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    42d4:	e004      	b.n	42e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    42d6:	bf00      	nop
    42d8:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    42dc:	791b      	ldrb	r3, [r3, #4]
    42de:	b133      	cbz	r3, 42ee <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    42e0:	1e40      	subs	r0, r0, #1
    42e2:	b2c0      	uxtb	r0, r0
    42e4:	d2f8      	bcs.n	42d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    42e6:	2148      	movs	r1, #72	; 0x48
    42e8:	2069      	movs	r0, #105	; 0x69
    42ea:	f7ff ff39 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    42ee:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    42f2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    42f6:	2200      	movs	r2, #0
    42f8:	714a      	strb	r2, [r1, #5]
    42fa:	718a      	strb	r2, [r1, #6]
    42fc:	2201      	movs	r2, #1
    42fe:	710a      	strb	r2, [r1, #4]
    4300:	bd10      	pop	{r4, pc}
    4302:	0000      	.short	0x0000
    4304:	20000ae4 	.word	0x20000ae4

00004308 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4308:	b510      	push	{r4, lr}
    430a:	2805      	cmp	r0, #5
    430c:	d301      	bcc.n	4312 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    430e:	2158      	movs	r1, #88	; 0x58
    4310:	e006      	b.n	4320 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    4312:	490a      	ldr	r1, [pc, #40]	; (433c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4314:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4318:	7901      	ldrb	r1, [r0, #4]
    431a:	2901      	cmp	r1, #1
    431c:	d003      	beq.n	4326 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    431e:	2159      	movs	r1, #89	; 0x59
    4320:	2069      	movs	r0, #105	; 0x69
    4322:	f7ff ff1d 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4326:	7941      	ldrb	r1, [r0, #5]
    4328:	7982      	ldrb	r2, [r0, #6]
    432a:	1c49      	adds	r1, r1, #1
    432c:	b2c9      	uxtb	r1, r1
    432e:	428a      	cmp	r2, r1
    4330:	d000      	beq.n	4334 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    4332:	7141      	strb	r1, [r0, #5]
    4334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4338:	f7ff bf74 	b.w	4224 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    433c:	20000ae4 	.word	0x20000ae4

00004340 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    4340:	b510      	push	{r4, lr}
    4342:	2805      	cmp	r0, #5
    4344:	d303      	bcc.n	434e <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    4346:	214f      	movs	r1, #79	; 0x4f
    4348:	2069      	movs	r0, #105	; 0x69
    434a:	f7ff ff09 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    434e:	4a03      	ldr	r2, [pc, #12]	; (435c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    4350:	2100      	movs	r1, #0
    4352:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    4356:	7101      	strb	r1, [r0, #4]
    4358:	bd10      	pop	{r4, pc}
    435a:	0000      	.short	0x0000
    435c:	20000ae4 	.word	0x20000ae4

00004360 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4360:	b570      	push	{r4, r5, r6, lr}
    4362:	2505      	movs	r5, #5
    4364:	4e0e      	ldr	r6, [pc, #56]	; (43a0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    4366:	4c0f      	ldr	r4, [pc, #60]	; (43a4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4368:	e016      	b.n	4398 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    436a:	7821      	ldrb	r1, [r4, #0]
    436c:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4370:	7902      	ldrb	r2, [r0, #4]
    4372:	2a01      	cmp	r2, #1
    4374:	d108      	bne.n	4388 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4376:	7942      	ldrb	r2, [r0, #5]
    4378:	7983      	ldrb	r3, [r0, #6]
    437a:	429a      	cmp	r2, r3
    437c:	d004      	beq.n	4388 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    437e:	7942      	ldrb	r2, [r0, #5]
    4380:	7182      	strb	r2, [r0, #6]
    4382:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    4386:	4780      	blx	r0
    4388:	7820      	ldrb	r0, [r4, #0]
    438a:	1c40      	adds	r0, r0, #1
    438c:	b2c0      	uxtb	r0, r0
    438e:	7020      	strb	r0, [r4, #0]
    4390:	2805      	cmp	r0, #5
    4392:	d301      	bcc.n	4398 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4394:	2000      	movs	r0, #0
    4396:	7020      	strb	r0, [r4, #0]
    4398:	1e6d      	subs	r5, r5, #1
    439a:	b2ed      	uxtb	r5, r5
    439c:	d2e5      	bcs.n	436a <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    439e:	bd70      	pop	{r4, r5, r6, pc}
    43a0:	20000ae4 	.word	0x20000ae4
    43a4:	2000017a 	.word	0x2000017a

000043a8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    43a8:	b500      	push	{lr}
    43aa:	f004 f9b5 	bl	8718 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    43ae:	b940      	cbnz	r0, 43c2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    43b0:	f004 f9bc 	bl	872c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    43b4:	b928      	cbnz	r0, 43c2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    43b6:	f004 f9d0 	bl	875a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    43ba:	b910      	cbnz	r0, 43c2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    43bc:	f004 f9e1 	bl	8782 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    43c0:	b108      	cbz	r0, 43c6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    43c2:	4802      	ldr	r0, [pc, #8]	; (43cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    43c4:	bd00      	pop	{pc}
    43c6:	4802      	ldr	r0, [pc, #8]	; (43d0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    43c8:	bd00      	pop	{pc}
    43ca:	0000      	.short	0x0000
    43cc:	4000050c 	.word	0x4000050c
    43d0:	4001e700 	.word	0x4001e700

000043d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    43d4:	b510      	push	{r4, lr}
    43d6:	f004 f9d4 	bl	8782 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    43da:	b330      	cbz	r0, 442a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    43dc:	f3ef 8010 	mrs	r0, PRIMASK
    43e0:	b1c8      	cbz	r0, 4416 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    43e2:	2100      	movs	r1, #0
    43e4:	b672      	cpsid	i
    43e6:	4812      	ldr	r0, [pc, #72]	; (4430 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    43e8:	6802      	ldr	r2, [r0, #0]
    43ea:	6803      	ldr	r3, [r0, #0]
    43ec:	f3c2 1200 	ubfx	r2, r2, #4, #1
    43f0:	f043 0310 	orr.w	r3, r3, #16
    43f4:	6003      	str	r3, [r0, #0]
    43f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    43fa:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    43fe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    4402:	431c      	orrs	r4, r3
    4404:	d000      	beq.n	4408 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    4406:	bf40      	sev
    4408:	bf20      	wfe
    440a:	bf00      	nop
    440c:	bf00      	nop
    440e:	bf00      	nop
    4410:	bf00      	nop
    4412:	b112      	cbz	r2, 441a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4414:	e005      	b.n	4422 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    4416:	2101      	movs	r1, #1
    4418:	e7e4      	b.n	43e4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    441a:	6802      	ldr	r2, [r0, #0]
    441c:	f022 0210 	bic.w	r2, r2, #16
    4420:	6002      	str	r2, [r0, #0]
    4422:	2900      	cmp	r1, #0
    4424:	d000      	beq.n	4428 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    4426:	b662      	cpsie	i
    4428:	bd10      	pop	{r4, pc}
    442a:	bf20      	wfe
    442c:	bd10      	pop	{r4, pc}
    442e:	0000      	.short	0x0000
    4430:	e000ed10 	.word	0xe000ed10

00004434 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    4434:	4901      	ldr	r1, [pc, #4]	; (443c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    4436:	2001      	movs	r0, #1
    4438:	7088      	strb	r0, [r1, #2]
    443a:	4770      	bx	lr
    443c:	2000007c 	.word	0x2000007c

00004440 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4440:	000089cf 00008a07 000089f1 000089df     ................
    4450:	000089eb 000089d9 000089cd 000089cb     ................
    4460:	00008a03 000089f7 000089e5 000089d3     ................
    4470:	000089c5 000089bd 000089c1 000089b7     ................

00004480 <mpsl_fem_disable>:
    4480:	4801      	ldr	r0, [pc, #4]	; (4488 <mpsl_fem_disable+0x8>)
    4482:	6800      	ldr	r0, [r0, #0]
    4484:	6800      	ldr	r0, [r0, #0]
    4486:	4700      	bx	r0
    4488:	20000090 	.word	0x20000090

0000448c <mpsl_fem_lna_configuration_clear>:
    448c:	4801      	ldr	r0, [pc, #4]	; (4494 <mpsl_fem_lna_configuration_clear+0x8>)
    448e:	6800      	ldr	r0, [r0, #0]
    4490:	6940      	ldr	r0, [r0, #20]
    4492:	4700      	bx	r0
    4494:	20000090 	.word	0x20000090

00004498 <mpsl_fem_lna_configuration_set>:
    4498:	4a01      	ldr	r2, [pc, #4]	; (44a0 <mpsl_fem_lna_configuration_set+0x8>)
    449a:	6812      	ldr	r2, [r2, #0]
    449c:	68d2      	ldr	r2, [r2, #12]
    449e:	4710      	bx	r2
    44a0:	20000090 	.word	0x20000090

000044a4 <mpsl_fem_lna_is_configured>:
    44a4:	4901      	ldr	r1, [pc, #4]	; (44ac <mpsl_fem_lna_is_configured+0x8>)
    44a6:	6809      	ldr	r1, [r1, #0]
    44a8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    44aa:	4708      	bx	r1
    44ac:	20000090 	.word	0x20000090

000044b0 <mpsl_fem_pa_configuration_clear>:
    44b0:	4801      	ldr	r0, [pc, #4]	; (44b8 <mpsl_fem_pa_configuration_clear+0x8>)
    44b2:	6800      	ldr	r0, [r0, #0]
    44b4:	6900      	ldr	r0, [r0, #16]
    44b6:	4700      	bx	r0
    44b8:	20000090 	.word	0x20000090

000044bc <mpsl_fem_pa_configuration_set>:
    44bc:	4a01      	ldr	r2, [pc, #4]	; (44c4 <mpsl_fem_pa_configuration_set+0x8>)
    44be:	6812      	ldr	r2, [r2, #0]
    44c0:	6892      	ldr	r2, [r2, #8]
    44c2:	4710      	bx	r2
    44c4:	20000090 	.word	0x20000090

000044c8 <mpsl_fem_pa_gain_set>:
    44c8:	4901      	ldr	r1, [pc, #4]	; (44d0 <mpsl_fem_pa_gain_set+0x8>)
    44ca:	6809      	ldr	r1, [r1, #0]
    44cc:	6a49      	ldr	r1, [r1, #36]	; 0x24
    44ce:	4708      	bx	r1
    44d0:	20000090 	.word	0x20000090

000044d4 <mpsl_fem_pa_is_configured>:
    44d4:	4901      	ldr	r1, [pc, #4]	; (44dc <mpsl_fem_pa_is_configured+0x8>)
    44d6:	6809      	ldr	r1, [r1, #0]
    44d8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    44da:	4708      	bx	r1
    44dc:	20000090 	.word	0x20000090

000044e0 <mpsl_fem_tx_power_split>:
    44e0:	4b01      	ldr	r3, [pc, #4]	; (44e8 <mpsl_fem_tx_power_split+0x8>)
    44e2:	681b      	ldr	r3, [r3, #0]
    44e4:	685b      	ldr	r3, [r3, #4]
    44e6:	4718      	bx	r3
    44e8:	20000090 	.word	0x20000090

000044ec <mpsl_fem_device_config_254_apply_get>:
    44ec:	4801      	ldr	r0, [pc, #4]	; (44f4 <mpsl_fem_device_config_254_apply_get+0x8>)
    44ee:	7800      	ldrb	r0, [r0, #0]
    44f0:	4770      	bx	lr
    44f2:	0000      	.short	0x0000
    44f4:	2000017b 	.word	0x2000017b
    44f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    44fa:	4c14      	ldr	r4, [pc, #80]	; (454c <mpsl_fem_device_config_254_apply_get+0x60>)
    44fc:	7a20      	ldrb	r0, [r4, #8]
    44fe:	f88d 0001 	strb.w	r0, [sp, #1]
    4502:	79e0      	ldrb	r0, [r4, #7]
    4504:	f88d 0000 	strb.w	r0, [sp]
    4508:	79a0      	ldrb	r0, [r4, #6]
    450a:	f8ad 0004 	strh.w	r0, [sp, #4]
    450e:	7960      	ldrb	r0, [r4, #5]
    4510:	f8ad 0002 	strh.w	r0, [sp, #2]
    4514:	4668      	mov	r0, sp
    4516:	f002 fba7 	bl	6c68 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    451a:	b108      	cbz	r0, 4520 <mpsl_fem_device_config_254_apply_get+0x34>
    451c:	2190      	movs	r1, #144	; 0x90
    451e:	e010      	b.n	4542 <mpsl_fem_device_config_254_apply_get+0x56>
    4520:	68e0      	ldr	r0, [r4, #12]
    4522:	9002      	str	r0, [sp, #8]
    4524:	a802      	add	r0, sp, #8
    4526:	f002 fbb5 	bl	6c94 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    452a:	b108      	cbz	r0, 4530 <mpsl_fem_device_config_254_apply_get+0x44>
    452c:	2194      	movs	r1, #148	; 0x94
    452e:	e008      	b.n	4542 <mpsl_fem_device_config_254_apply_get+0x56>
    4530:	4807      	ldr	r0, [pc, #28]	; (4550 <mpsl_fem_device_config_254_apply_get+0x64>)
    4532:	6800      	ldr	r0, [r0, #0]
    4534:	9003      	str	r0, [sp, #12]
    4536:	a803      	add	r0, sp, #12
    4538:	f006 f935 	bl	a7a6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    453c:	2800      	cmp	r0, #0
    453e:	d003      	beq.n	4548 <mpsl_fem_device_config_254_apply_get+0x5c>
    4540:	2198      	movs	r1, #152	; 0x98
    4542:	2003      	movs	r0, #3
    4544:	f000 f8ea 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4548:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    454a:	0000      	.short	0x0000
    454c:	20000b0c 	.word	0x20000b0c
    4550:	000047a4 	.word	0x000047a4

00004554 <sdc_build_revision_get>:
    4554:	b510      	push	{r4, lr}
    4556:	b128      	cbz	r0, 4564 <sdc_build_revision_get+0x10>
    4558:	2214      	movs	r2, #20
    455a:	4904      	ldr	r1, [pc, #16]	; (456c <sdc_build_revision_get+0x18>)
    455c:	f004 f951 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4560:	2000      	movs	r0, #0
    4562:	bd10      	pop	{r4, pc}
    4564:	f06f 0015 	mvn.w	r0, #21
    4568:	bd10      	pop	{r4, pc}
    456a:	0000      	.short	0x0000
    456c:	000047c8 	.word	0x000047c8

00004570 <sdc_cfg_set>:
    4570:	b570      	push	{r4, r5, r6, lr}
    4572:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    4576:	bb90      	cbnz	r0, 45de <sdc_cfg_set+0x6e>
    4578:	4c24      	ldr	r4, [pc, #144]	; (460c <sdc_cfg_set+0x9c>)
    457a:	7860      	ldrb	r0, [r4, #1]
    457c:	b108      	cbz	r0, 4582 <sdc_cfg_set+0x12>
    457e:	1198      	asrs	r0, r3, #6
    4580:	bd70      	pop	{r4, r5, r6, pc}
    4582:	b309      	cbz	r1, 45c8 <sdc_cfg_set+0x58>
    4584:	f06f 0515 	mvn.w	r5, #21
    4588:	b33a      	cbz	r2, 45da <sdc_cfg_set+0x6a>
    458a:	4821      	ldr	r0, [pc, #132]	; (4610 <sdc_cfg_set+0xa0>)
    458c:	2908      	cmp	r1, #8
    458e:	d237      	bcs.n	4600 <sdc_cfg_set+0x90>
    4590:	e8df f001 	tbb	[pc, r1]
    4594:	0a070436 	.word	0x0a070436
    4598:	291e1b18 	.word	0x291e1b18
    459c:	7811      	ldrb	r1, [r2, #0]
    459e:	7001      	strb	r1, [r0, #0]
    45a0:	e023      	b.n	45ea <sdc_cfg_set+0x7a>
    45a2:	7811      	ldrb	r1, [r2, #0]
    45a4:	7041      	strb	r1, [r0, #1]
    45a6:	e020      	b.n	45ea <sdc_cfg_set+0x7a>
    45a8:	7891      	ldrb	r1, [r2, #2]
    45aa:	b1b1      	cbz	r1, 45da <sdc_cfg_set+0x6a>
    45ac:	78d1      	ldrb	r1, [r2, #3]
    45ae:	b1a1      	cbz	r1, 45da <sdc_cfg_set+0x6a>
    45b0:	7811      	ldrb	r1, [r2, #0]
    45b2:	291b      	cmp	r1, #27
    45b4:	d311      	bcc.n	45da <sdc_cfg_set+0x6a>
    45b6:	7851      	ldrb	r1, [r2, #1]
    45b8:	291b      	cmp	r1, #27
    45ba:	d30e      	bcc.n	45da <sdc_cfg_set+0x6a>
    45bc:	6811      	ldr	r1, [r2, #0]
    45be:	f8c0 1005 	str.w	r1, [r0, #5]
    45c2:	e012      	b.n	45ea <sdc_cfg_set+0x7a>
    45c4:	6811      	ldr	r1, [r2, #0]
    45c6:	60c1      	str	r1, [r0, #12]
    45c8:	e00f      	b.n	45ea <sdc_cfg_set+0x7a>
    45ca:	7811      	ldrb	r1, [r2, #0]
    45cc:	7081      	strb	r1, [r0, #2]
    45ce:	e00c      	b.n	45ea <sdc_cfg_set+0x7a>
    45d0:	78e1      	ldrb	r1, [r4, #3]
    45d2:	b129      	cbz	r1, 45e0 <sdc_cfg_set+0x70>
    45d4:	7811      	ldrb	r1, [r2, #0]
    45d6:	2902      	cmp	r1, #2
    45d8:	d202      	bcs.n	45e0 <sdc_cfg_set+0x70>
    45da:	4628      	mov	r0, r5
    45dc:	bd70      	pop	{r4, r5, r6, pc}
    45de:	e00f      	b.n	4600 <sdc_cfg_set+0x90>
    45e0:	7811      	ldrb	r1, [r2, #0]
    45e2:	7401      	strb	r1, [r0, #16]
    45e4:	e001      	b.n	45ea <sdc_cfg_set+0x7a>
    45e6:	8811      	ldrh	r1, [r2, #0]
    45e8:	8241      	strh	r1, [r0, #18]
    45ea:	2201      	movs	r2, #1
    45ec:	4908      	ldr	r1, [pc, #32]	; (4610 <sdc_cfg_set+0xa0>)
    45ee:	2000      	movs	r0, #0
    45f0:	f004 fa25 	bl	8a3e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    45f4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    45f8:	db04      	blt.n	4604 <sdc_cfg_set+0x94>
    45fa:	f06f 000b 	mvn.w	r0, #11
    45fe:	e7ed      	b.n	45dc <sdc_cfg_set+0x6c>
    4600:	4618      	mov	r0, r3
    4602:	e7eb      	b.n	45dc <sdc_cfg_set+0x6c>
    4604:	2101      	movs	r1, #1
    4606:	70a1      	strb	r1, [r4, #2]
    4608:	e7e8      	b.n	45dc <sdc_cfg_set+0x6c>
    460a:	0000      	.short	0x0000
    460c:	20000094 	.word	0x20000094
    4610:	20000b0c 	.word	0x20000b0c

00004614 <sdc_disable>:
    4614:	b510      	push	{r4, lr}
    4616:	4c07      	ldr	r4, [pc, #28]	; (4634 <sdc_disable+0x20>)
    4618:	7860      	ldrb	r0, [r4, #1]
    461a:	b120      	cbz	r0, 4626 <sdc_disable+0x12>
    461c:	f002 fd48 	bl	70b0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    4620:	7820      	ldrb	r0, [r4, #0]
    4622:	f7ff fe8d 	bl	4340 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    4626:	f000 fd29 	bl	507c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    462a:	f000 fe03 	bl	5234 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    462e:	2000      	movs	r0, #0
    4630:	7060      	strb	r0, [r4, #1]
    4632:	bd10      	pop	{r4, pc}
    4634:	20000094 	.word	0x20000094

00004638 <sdc_enable>:
    4638:	b570      	push	{r4, r5, r6, lr}
    463a:	460c      	mov	r4, r1
    463c:	0005      	movs	r5, r0
    463e:	d019      	beq.n	4674 <sdc_enable+0x3c>
    4640:	b1c4      	cbz	r4, 4674 <sdc_enable+0x3c>
    4642:	f000 f8e7 	bl	4814 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4646:	b1c0      	cbz	r0, 467a <sdc_enable+0x42>
    4648:	4628      	mov	r0, r5
    464a:	f7ff fe3f 	bl	42cc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    464e:	4d0c      	ldr	r5, [pc, #48]	; (4680 <sdc_enable+0x48>)
    4650:	2200      	movs	r2, #0
    4652:	490c      	ldr	r1, [pc, #48]	; (4684 <sdc_enable+0x4c>)
    4654:	7028      	strb	r0, [r5, #0]
    4656:	4620      	mov	r0, r4
    4658:	f004 f9f1 	bl	8a3e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    465c:	f006 fbad 	bl	adba <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4660:	2100      	movs	r1, #0
    4662:	7828      	ldrb	r0, [r5, #0]
    4664:	f002 fd14 	bl	7090 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4668:	f7ff ff46 	bl	44f8 <mpsl_fem_device_config_254_apply_get+0xc>
    466c:	2001      	movs	r0, #1
    466e:	7068      	strb	r0, [r5, #1]
    4670:	2000      	movs	r0, #0
    4672:	bd70      	pop	{r4, r5, r6, pc}
    4674:	f06f 0015 	mvn.w	r0, #21
    4678:	bd70      	pop	{r4, r5, r6, pc}
    467a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    467e:	bd70      	pop	{r4, r5, r6, pc}
    4680:	20000094 	.word	0x20000094
    4684:	20000b0c 	.word	0x20000b0c

00004688 <sdc_init>:
    4688:	b530      	push	{r4, r5, lr}
    468a:	b089      	sub	sp, #36	; 0x24
    468c:	0005      	movs	r5, r0
    468e:	d00c      	beq.n	46aa <sdc_init+0x22>
    4690:	f7ff fdc2 	bl	4218 <mpsl_is_initialized>
    4694:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    4698:	b120      	cbz	r0, 46a4 <sdc_init+0x1c>
    469a:	f7ff fc87 	bl	3fac <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    469e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    46a2:	d905      	bls.n	46b0 <sdc_init+0x28>
    46a4:	4620      	mov	r0, r4
    46a6:	b009      	add	sp, #36	; 0x24
    46a8:	bd30      	pop	{r4, r5, pc}
    46aa:	f06f 0015 	mvn.w	r0, #21
    46ae:	e7fa      	b.n	46a6 <sdc_init+0x1e>
    46b0:	4c15      	ldr	r4, [pc, #84]	; (4708 <sdc_init+0x80>)
    46b2:	4816      	ldr	r0, [pc, #88]	; (470c <sdc_init+0x84>)
    46b4:	6065      	str	r5, [r4, #4]
    46b6:	f000 f9c3 	bl	4a40 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    46ba:	2000      	movs	r0, #0
    46bc:	7060      	strb	r0, [r4, #1]
    46be:	70a0      	strb	r0, [r4, #2]
    46c0:	70e0      	strb	r0, [r4, #3]
    46c2:	4601      	mov	r1, r0
    46c4:	2220      	movs	r2, #32
    46c6:	4668      	mov	r0, sp
    46c8:	f004 f915 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    46cc:	2220      	movs	r2, #32
    46ce:	4910      	ldr	r1, [pc, #64]	; (4710 <sdc_init+0x88>)
    46d0:	4668      	mov	r0, sp
    46d2:	f004 f896 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    46d6:	2220      	movs	r2, #32
    46d8:	4669      	mov	r1, sp
    46da:	480e      	ldr	r0, [pc, #56]	; (4714 <sdc_init+0x8c>)
    46dc:	f004 f891 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    46e0:	f3ef 8410 	mrs	r4, PRIMASK
    46e4:	b672      	cpsid	i
    46e6:	f06f 000c 	mvn.w	r0, #12
    46ea:	f000 fcd5 	bl	5098 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    46ee:	480a      	ldr	r0, [pc, #40]	; (4718 <sdc_init+0x90>)
    46f0:	f000 fdac 	bl	524c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    46f4:	b118      	cbz	r0, 46fe <sdc_init+0x76>
    46f6:	21ab      	movs	r1, #171	; 0xab
    46f8:	2003      	movs	r0, #3
    46fa:	f000 f80f 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46fe:	b904      	cbnz	r4, 4702 <sdc_init+0x7a>
    4700:	b662      	cpsie	i
    4702:	2000      	movs	r0, #0
    4704:	e7cf      	b.n	46a6 <sdc_init+0x1e>
    4706:	0000      	.short	0x0000
    4708:	20000094 	.word	0x20000094
    470c:	000044f9 	.word	0x000044f9
    4710:	000047a8 	.word	0x000047a8
    4714:	20000b0c 	.word	0x20000b0c
    4718:	00004841 	.word	0x00004841

0000471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    471c:	b50e      	push	{r1, r2, r3, lr}
    471e:	b672      	cpsid	i
    4720:	4a15      	ldr	r2, [pc, #84]	; (4778 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4722:	6855      	ldr	r5, [r2, #4]
    4724:	b1dd      	cbz	r5, 475e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    4726:	2200      	movs	r2, #0
    4728:	4603      	mov	r3, r0
    472a:	466e      	mov	r6, sp
    472c:	240a      	movs	r4, #10
    472e:	e003      	b.n	4738 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4730:	fbb0 f0f4 	udiv	r0, r0, r4
    4734:	1c52      	adds	r2, r2, #1
    4736:	b2d2      	uxtb	r2, r2
    4738:	2800      	cmp	r0, #0
    473a:	d1f9      	bne.n	4730 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    473c:	54b0      	strb	r0, [r6, r2]
    473e:	e00a      	b.n	4756 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    4740:	b2d8      	uxtb	r0, r3
    4742:	fbb0 f7f4 	udiv	r7, r0, r4
    4746:	fbb3 f3f4 	udiv	r3, r3, r4
    474a:	fb04 0017 	mls	r0, r4, r7, r0
    474e:	1e52      	subs	r2, r2, #1
    4750:	b2d2      	uxtb	r2, r2
    4752:	3030      	adds	r0, #48	; 0x30
    4754:	54b0      	strb	r0, [r6, r2]
    4756:	2a00      	cmp	r2, #0
    4758:	d1f2      	bne.n	4740 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    475a:	4630      	mov	r0, r6
    475c:	47a8      	blx	r5
    475e:	f3bf 8f4f 	dsb	sy
    4762:	4806      	ldr	r0, [pc, #24]	; (477c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4764:	6801      	ldr	r1, [r0, #0]
    4766:	4a06      	ldr	r2, [pc, #24]	; (4780 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4768:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    476c:	4311      	orrs	r1, r2
    476e:	6001      	str	r1, [r0, #0]
    4770:	f3bf 8f4f 	dsb	sy
    4774:	bf00      	nop
    4776:	e7fd      	b.n	4774 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    4778:	20000094 	.word	0x20000094
    477c:	e000ed0c 	.word	0xe000ed0c
    4780:	05fa0004 	.word	0x05fa0004

00004784 <sdc_support_adv>:
    4784:	4806      	ldr	r0, [pc, #24]	; (47a0 <sdc_support_adv+0x1c>)
    4786:	b510      	push	{r4, lr}
    4788:	7881      	ldrb	r1, [r0, #2]
    478a:	7840      	ldrb	r0, [r0, #1]
    478c:	4301      	orrs	r1, r0
    478e:	d002      	beq.n	4796 <sdc_support_adv+0x12>
    4790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4794:	bd10      	pop	{r4, pc}
    4796:	f002 fc99 	bl	70cc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    479a:	2000      	movs	r0, #0
    479c:	bd10      	pop	{r4, pc}
    479e:	0000      	.short	0x0000
    47a0:	20000094 	.word	0x20000094
    47a4:	00000001 	.word	0x00000001
    47a8:	00010101 	.word	0x00010101
    47ac:	031b1b00 	.word	0x031b1b00
    47b0:	00000002 	.word	0x00000002
    47b4:	00001d4c 	.word	0x00001d4c
    47b8:	001f0003 	.word	0x001f0003
	...
    47c8:	2a41906d 	.word	0x2a41906d
    47cc:	17ade838 	.word	0x17ade838
    47d0:	3803a529 	.word	0x3803a529
    47d4:	85d72739 	.word	0x85d72739
    47d8:	e1d8851f 	.word	0xe1d8851f

000047dc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    47dc:	4a05      	ldr	r2, [pc, #20]	; (47f4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    47de:	b510      	push	{r4, lr}
    47e0:	6852      	ldr	r2, [r2, #4]
    47e2:	b112      	cbz	r2, 47ea <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    47e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    47e8:	4710      	bx	r2
    47ea:	2192      	movs	r1, #146	; 0x92
    47ec:	2004      	movs	r0, #4
    47ee:	f7ff ff95 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47f2:	0000      	.short	0x0000
    47f4:	20000b2c 	.word	0x20000b2c

000047f8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    47f8:	4a05      	ldr	r2, [pc, #20]	; (4810 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    47fa:	b510      	push	{r4, lr}
    47fc:	6892      	ldr	r2, [r2, #8]
    47fe:	b112      	cbz	r2, 4806 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4804:	4710      	bx	r2
    4806:	2198      	movs	r1, #152	; 0x98
    4808:	2004      	movs	r0, #4
    480a:	f7ff ff87 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    480e:	0000      	.short	0x0000
    4810:	20000b2c 	.word	0x20000b2c

00004814 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4814:	4805      	ldr	r0, [pc, #20]	; (482c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4816:	6801      	ldr	r1, [r0, #0]
    4818:	b129      	cbz	r1, 4826 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    481a:	6841      	ldr	r1, [r0, #4]
    481c:	b119      	cbz	r1, 4826 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    481e:	6880      	ldr	r0, [r0, #8]
    4820:	b108      	cbz	r0, 4826 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4822:	2001      	movs	r0, #1
    4824:	4770      	bx	lr
    4826:	2000      	movs	r0, #0
    4828:	4770      	bx	lr
    482a:	0000      	.short	0x0000
    482c:	20000b2c 	.word	0x20000b2c

00004830 <sdc_rand_source_register>:
    4830:	4902      	ldr	r1, [pc, #8]	; (483c <sdc_rand_source_register+0xc>)
    4832:	c80d      	ldmia	r0, {r0, r2, r3}
    4834:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4838:	2000      	movs	r0, #0
    483a:	4770      	bx	lr
    483c:	20000b2c 	.word	0x20000b2c

00004840 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4842:	4c12      	ldr	r4, [pc, #72]	; (488c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4844:	2600      	movs	r6, #0
    4846:	6825      	ldr	r5, [r4, #0]
    4848:	e011      	b.n	486e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    484a:	9800      	ldr	r0, [sp, #0]
    484c:	2802      	cmp	r0, #2
    484e:	d002      	beq.n	4856 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4850:	2803      	cmp	r0, #3
    4852:	d10c      	bne.n	486e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4854:	e006      	b.n	4864 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4856:	6820      	ldr	r0, [r4, #0]
    4858:	b110      	cbz	r0, 4860 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    485a:	2000      	movs	r0, #0
    485c:	6026      	str	r6, [r4, #0]
    485e:	e005      	b.n	486c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4860:	2128      	movs	r1, #40	; 0x28
    4862:	e00c      	b.n	487e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4864:	6820      	ldr	r0, [r4, #0]
    4866:	b168      	cbz	r0, 4884 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4868:	2001      	movs	r0, #1
    486a:	6026      	str	r6, [r4, #0]
    486c:	47a8      	blx	r5
    486e:	4668      	mov	r0, sp
    4870:	f000 fcb2 	bl	51d8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4874:	2800      	cmp	r0, #0
    4876:	d0e8      	beq.n	484a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4878:	2805      	cmp	r0, #5
    487a:	d005      	beq.n	4888 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    487c:	2135      	movs	r1, #53	; 0x35
    487e:	2004      	movs	r0, #4
    4880:	f7ff ff4c 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4884:	212d      	movs	r1, #45	; 0x2d
    4886:	e7fa      	b.n	487e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    488a:	0000      	.short	0x0000
    488c:	2000009c 	.word	0x2000009c

00004890 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    4890:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    4894:	4c29      	ldr	r4, [pc, #164]	; (493c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    4896:	4605      	mov	r5, r0
    4898:	1d00      	adds	r0, r0, #4
    489a:	f504 7782 	add.w	r7, r4, #260	; 0x104
    489e:	60a0      	str	r0, [r4, #8]
    48a0:	7838      	ldrb	r0, [r7, #0]
    48a2:	b158      	cbz	r0, 48bc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
    48a4:	78ba      	ldrb	r2, [r7, #2]
    48a6:	463c      	mov	r4, r7
    48a8:	1c79      	adds	r1, r7, #1
    48aa:	4628      	mov	r0, r5
    48ac:	1c92      	adds	r2, r2, #2
    48ae:	f003 ffa8 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    48b2:	2000      	movs	r0, #0
    48b4:	7020      	strb	r0, [r4, #0]
    48b6:	2004      	movs	r0, #4
    48b8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    48bc:	481f      	ldr	r0, [pc, #124]	; (493c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    48be:	f000 ffd7 	bl	5870 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    48c2:	4606      	mov	r6, r0
    48c4:	2802      	cmp	r0, #2
    48c6:	d002      	beq.n	48ce <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x3e>
    48c8:	2e04      	cmp	r6, #4
    48ca:	d005      	beq.n	48d8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x48>
    48cc:	e026      	b.n	491c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
    48ce:	491b      	ldr	r1, [pc, #108]	; (493c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    48d0:	4628      	mov	r0, r5
    48d2:	f004 f910 	bl	8af6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    48d6:	e021      	b.n	491c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
    48d8:	7820      	ldrb	r0, [r4, #0]
    48da:	2811      	cmp	r0, #17
    48dc:	d104      	bne.n	48e8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x58>
    48de:	210a      	movs	r1, #10
    48e0:	203e      	movs	r0, #62	; 0x3e
    48e2:	f004 f8f4 	bl	8ace <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xbe>
    48e6:	b118      	cbz	r0, 48f0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x60>
    48e8:	7820      	ldrb	r0, [r4, #0]
    48ea:	2808      	cmp	r0, #8
    48ec:	d005      	beq.n	48fa <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6a>
    48ee:	e009      	b.n	4904 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x74>
    48f0:	4912      	ldr	r1, [pc, #72]	; (493c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    48f2:	4628      	mov	r0, r5
    48f4:	f004 faf7 	bl	8ee6 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    48f8:	e00a      	b.n	4910 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x80>
    48fa:	2105      	movs	r1, #5
    48fc:	203e      	movs	r0, #62	; 0x3e
    48fe:	f004 f8e6 	bl	8ace <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xbe>
    4902:	b168      	cbz	r0, 4920 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
    4904:	490d      	ldr	r1, [pc, #52]	; (493c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    4906:	4628      	mov	r0, r5
    4908:	f004 f923 	bl	8b52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    490c:	2800      	cmp	r0, #0
    490e:	d0c7      	beq.n	48a0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    4910:	78a9      	ldrb	r1, [r5, #2]
    4912:	7828      	ldrb	r0, [r5, #0]
    4914:	f004 f8db 	bl	8ace <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xbe>
    4918:	2800      	cmp	r0, #0
    491a:	d0c1      	beq.n	48a0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    491c:	4630      	mov	r0, r6
    491e:	e7cb      	b.n	48b8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    4920:	88a0      	ldrh	r0, [r4, #4]
    4922:	f8ad 0000 	strh.w	r0, [sp]
    4926:	a901      	add	r1, sp, #4
    4928:	4668      	mov	r0, sp
    492a:	f004 fbf5 	bl	9118 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    492e:	2800      	cmp	r0, #0
    4930:	d0b6      	beq.n	48a0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    4932:	21aa      	movs	r1, #170	; 0xaa
    4934:	2008      	movs	r0, #8
    4936:	f7ff fef1 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    493a:	0000      	.short	0x0000
    493c:	20000b38 	.word	0x20000b38
    4940:	b570      	push	{r4, r5, r6, lr}
    4942:	780a      	ldrb	r2, [r1, #0]
    4944:	7082      	strb	r2, [r0, #2]
    4946:	b33a      	cbz	r2, 4998 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x108>
    4948:	2a01      	cmp	r2, #1
    494a:	d825      	bhi.n	4998 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x108>
    494c:	2313      	movs	r3, #19
    494e:	7003      	strb	r3, [r0, #0]
    4950:	2300      	movs	r3, #0
    4952:	e00a      	b.n	496a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xda>
    4954:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4958:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    495c:	78a6      	ldrb	r6, [r4, #2]
    495e:	70ee      	strb	r6, [r5, #3]
    4960:	8864      	ldrh	r4, [r4, #2]
    4962:	0a24      	lsrs	r4, r4, #8
    4964:	1c5b      	adds	r3, r3, #1
    4966:	712c      	strb	r4, [r5, #4]
    4968:	b2db      	uxtb	r3, r3
    496a:	4293      	cmp	r3, r2
    496c:	d3f2      	bcc.n	4954 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc4>
    496e:	2300      	movs	r3, #0
    4970:	e00b      	b.n	498a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xfa>
    4972:	bf00      	nop
    4974:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4978:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    497c:	792e      	ldrb	r6, [r5, #4]
    497e:	7166      	strb	r6, [r4, #5]
    4980:	88ad      	ldrh	r5, [r5, #4]
    4982:	0a2d      	lsrs	r5, r5, #8
    4984:	1c5b      	adds	r3, r3, #1
    4986:	71a5      	strb	r5, [r4, #6]
    4988:	b2db      	uxtb	r3, r3
    498a:	4293      	cmp	r3, r2
    498c:	d3f2      	bcc.n	4974 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe4>
    498e:	2101      	movs	r1, #1
    4990:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4994:	b2c0      	uxtb	r0, r0
    4996:	bd70      	pop	{r4, r5, r6, pc}
    4998:	2000      	movs	r0, #0
    499a:	bd70      	pop	{r4, r5, r6, pc}

0000499c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    499c:	2840      	cmp	r0, #64	; 0x40
    499e:	d203      	bcs.n	49a8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    49a0:	1e40      	subs	r0, r0, #1
    49a2:	b2c1      	uxtb	r1, r0
    49a4:	4805      	ldr	r0, [pc, #20]	; (49bc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    49a6:	e005      	b.n	49b4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    49a8:	28ff      	cmp	r0, #255	; 0xff
    49aa:	d005      	beq.n	49b8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    49ac:	3840      	subs	r0, #64	; 0x40
    49ae:	b2c1      	uxtb	r1, r0
    49b0:	4802      	ldr	r0, [pc, #8]	; (49bc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    49b2:	3008      	adds	r0, #8
    49b4:	f004 bac1 	b.w	8f3a <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    49b8:	2001      	movs	r0, #1
    49ba:	4770      	bx	lr
    49bc:	200000a0 	.word	0x200000a0

000049c0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    49c0:	1e40      	subs	r0, r0, #1
    49c2:	b2c1      	uxtb	r1, r0
    49c4:	4801      	ldr	r0, [pc, #4]	; (49cc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    49c6:	f004 bab8 	b.w	8f3a <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    49ca:	0000      	.short	0x0000
    49cc:	200000b0 	.word	0x200000b0

000049d0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    49d0:	4902      	ldr	r1, [pc, #8]	; (49dc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    49d2:	6802      	ldr	r2, [r0, #0]
    49d4:	610a      	str	r2, [r1, #16]
    49d6:	6840      	ldr	r0, [r0, #4]
    49d8:	6148      	str	r0, [r1, #20]
    49da:	4770      	bx	lr
    49dc:	200000a0 	.word	0x200000a0

000049e0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    49e0:	4905      	ldr	r1, [pc, #20]	; (49f8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    49e2:	6802      	ldr	r2, [r0, #0]
    49e4:	600a      	str	r2, [r1, #0]
    49e6:	6840      	ldr	r0, [r0, #4]
    49e8:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    49ec:	600a      	str	r2, [r1, #0]
    49ee:	4a03      	ldr	r2, [pc, #12]	; (49fc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    49f0:	4310      	orrs	r0, r2
    49f2:	6048      	str	r0, [r1, #4]
    49f4:	4770      	bx	lr
    49f6:	0000      	.short	0x0000
    49f8:	200000a0 	.word	0x200000a0
    49fc:	024007f8 	.word	0x024007f8

00004a00 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4a00:	4807      	ldr	r0, [pc, #28]	; (4a20 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    4a02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4a06:	2200      	movs	r2, #0
    4a08:	6001      	str	r1, [r0, #0]
    4a0a:	0cc9      	lsrs	r1, r1, #19
    4a0c:	6041      	str	r1, [r0, #4]
    4a0e:	f100 0108 	add.w	r1, r0, #8
    4a12:	201f      	movs	r0, #31
    4a14:	600a      	str	r2, [r1, #0]
    4a16:	604a      	str	r2, [r1, #4]
    4a18:	3108      	adds	r1, #8
    4a1a:	e9c1 0200 	strd	r0, r2, [r1]
    4a1e:	4770      	bx	lr
    4a20:	200000a0 	.word	0x200000a0

00004a24 <sdc_hci_cmd_cb_reset>:
    4a24:	b510      	push	{r4, lr}
    4a26:	f7ff ffeb 	bl	4a00 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4a2a:	f005 ff8d 	bl	a948 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4a2e:	4604      	mov	r4, r0
    4a30:	4802      	ldr	r0, [pc, #8]	; (4a3c <sdc_hci_cmd_cb_reset+0x18>)
    4a32:	6800      	ldr	r0, [r0, #0]
    4a34:	b100      	cbz	r0, 4a38 <sdc_hci_cmd_cb_reset+0x14>
    4a36:	4780      	blx	r0
    4a38:	4620      	mov	r0, r4
    4a3a:	bd10      	pop	{r4, pc}
    4a3c:	200000b8 	.word	0x200000b8

00004a40 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4a40:	4901      	ldr	r1, [pc, #4]	; (4a48 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4a42:	6008      	str	r0, [r1, #0]
    4a44:	4770      	bx	lr
    4a46:	0000      	.short	0x0000
    4a48:	200000b8 	.word	0x200000b8

00004a4c <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4a4c:	2102      	movs	r1, #2
    4a4e:	8001      	strh	r1, [r0, #0]
    4a50:	8041      	strh	r1, [r0, #2]
    4a52:	2100      	movs	r1, #0
    4a54:	7101      	strb	r1, [r0, #4]
    4a56:	216d      	movs	r1, #109	; 0x6d
    4a58:	7141      	strb	r1, [r0, #5]
    4a5a:	f244 1190 	movw	r1, #16784	; 0x4190
    4a5e:	80c1      	strh	r1, [r0, #6]
    4a60:	4901      	ldr	r1, [pc, #4]	; (4a68 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4a62:	6081      	str	r1, [r0, #8]
    4a64:	2000      	movs	r0, #0
    4a66:	4770      	bx	lr
    4a68:	ade8382a 	.word	0xade8382a

00004a6c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4a6c:	b510      	push	{r4, lr}
    4a6e:	2802      	cmp	r0, #2
    4a70:	d304      	bcc.n	4a7c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4a72:	f44f 7101 	mov.w	r1, #516	; 0x204
    4a76:	2017      	movs	r0, #23
    4a78:	f7ff fe50 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a7c:	4901      	ldr	r1, [pc, #4]	; (4a84 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4a7e:	5c08      	ldrb	r0, [r1, r0]
    4a80:	bd10      	pop	{r4, pc}
    4a82:	0000      	.short	0x0000
    4a84:	20000d40 	.word	0x20000d40

00004a88 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a8a:	0005      	movs	r5, r0
    4a8c:	9500      	str	r5, [sp, #0]
    4a8e:	d00d      	beq.n	4aac <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x24>
    4a90:	2600      	movs	r6, #0
    4a92:	7808      	ldrb	r0, [r1, #0]
    4a94:	7849      	ldrb	r1, [r1, #1]
    4a96:	4604      	mov	r4, r0
    4a98:	42a1      	cmp	r1, r4
    4a9a:	d900      	bls.n	4a9e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    4a9c:	460c      	mov	r4, r1
    4a9e:	07aa      	lsls	r2, r5, #30
    4aa0:	d006      	beq.n	4ab0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    4aa2:	f240 11cb 	movw	r1, #459	; 0x1cb
    4aa6:	2017      	movs	r0, #23
    4aa8:	f7ff fe38 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4aac:	2601      	movs	r6, #1
    4aae:	e7f0      	b.n	4a92 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    4ab0:	4f12      	ldr	r7, [pc, #72]	; (4afc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    4ab2:	7038      	strb	r0, [r7, #0]
    4ab4:	7079      	strb	r1, [r7, #1]
    4ab6:	4631      	mov	r1, r6
    4ab8:	4668      	mov	r0, sp
    4aba:	f000 f8d3 	bl	4c64 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    4abe:	2100      	movs	r1, #0
    4ac0:	460b      	mov	r3, r1
    4ac2:	9800      	ldr	r0, [sp, #0]
    4ac4:	1cc0      	adds	r0, r0, #3
    4ac6:	f020 0003 	bic.w	r0, r0, #3
    4aca:	9000      	str	r0, [sp, #0]
    4acc:	b966      	cbnz	r6, 4ae8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    4ace:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    4ad2:	60d0      	str	r0, [r2, #12]
    4ad4:	2000      	movs	r0, #0
    4ad6:	e005      	b.n	4ae4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>
    4ad8:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4adc:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    4ae0:	1c40      	adds	r0, r0, #1
    4ae2:	b2c0      	uxtb	r0, r0
    4ae4:	42a0      	cmp	r0, r4
    4ae6:	d3f7      	bcc.n	4ad8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    4ae8:	9800      	ldr	r0, [sp, #0]
    4aea:	1c49      	adds	r1, r1, #1
    4aec:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4af0:	b2c9      	uxtb	r1, r1
    4af2:	9000      	str	r0, [sp, #0]
    4af4:	2902      	cmp	r1, #2
    4af6:	d3e4      	bcc.n	4ac2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    4af8:	1b40      	subs	r0, r0, r5
    4afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4afc:	20000d40 	.word	0x20000d40

00004b00 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4b00:	b570      	push	{r4, r5, r6, lr}
    4b02:	4604      	mov	r4, r0
    4b04:	7985      	ldrb	r5, [r0, #6]
    4b06:	f000 f8e9 	bl	4cdc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    4b0a:	4a0c      	ldr	r2, [pc, #48]	; (4b3c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
    4b0c:	79e1      	ldrb	r1, [r4, #7]
    4b0e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    4b12:	e00e      	b.n	4b32 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
    4b14:	68d3      	ldr	r3, [r2, #12]
    4b16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4b1a:	b143      	cbz	r3, 4b2e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
    4b1c:	1c48      	adds	r0, r1, #1
    4b1e:	71e0      	strb	r0, [r4, #7]
    4b20:	80a1      	strh	r1, [r4, #4]
    4b22:	68d0      	ldr	r0, [r2, #12]
    4b24:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4b28:	6020      	str	r0, [r4, #0]
    4b2a:	2000      	movs	r0, #0
    4b2c:	bd70      	pop	{r4, r5, r6, pc}
    4b2e:	1c49      	adds	r1, r1, #1
    4b30:	b2c9      	uxtb	r1, r1
    4b32:	4281      	cmp	r1, r0
    4b34:	d3ee      	bcc.n	4b14 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
    4b36:	71e1      	strb	r1, [r4, #7]
    4b38:	2005      	movs	r0, #5
    4b3a:	bd70      	pop	{r4, r5, r6, pc}
    4b3c:	20000d40 	.word	0x20000d40

00004b40 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4b40:	b4f0      	push	{r4, r5, r6, r7}
    4b42:	b121      	cbz	r1, 4b4e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4b44:	2901      	cmp	r1, #1
    4b46:	d002      	beq.n	4b4e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4b48:	bcf0      	pop	{r4, r5, r6, r7}
    4b4a:	2000      	movs	r0, #0
    4b4c:	4770      	bx	lr
    4b4e:	4a0f      	ldr	r2, [pc, #60]	; (4b8c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    4b50:	2500      	movs	r5, #0
    4b52:	462b      	mov	r3, r5
    4b54:	f64f 74ff 	movw	r4, #65535	; 0xffff
    4b58:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    4b5c:	5c57      	ldrb	r7, [r2, r1]
    4b5e:	e00a      	b.n	4b76 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    4b60:	195a      	adds	r2, r3, r5
    4b62:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    4b66:	b292      	uxth	r2, r2
    4b68:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
    4b6c:	f1bc 0f00 	cmp.w	ip, #0
    4b70:	d004      	beq.n	4b7c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    4b72:	1c5b      	adds	r3, r3, #1
    4b74:	b29b      	uxth	r3, r3
    4b76:	429f      	cmp	r7, r3
    4b78:	d8f2      	bhi.n	4b60 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    4b7a:	4622      	mov	r2, r4
    4b7c:	8002      	strh	r2, [r0, #0]
    4b7e:	4610      	mov	r0, r2
    4b80:	42a2      	cmp	r2, r4
    4b82:	d0e1      	beq.n	4b48 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8>
    4b84:	bcf0      	pop	{r4, r5, r6, r7}
    4b86:	f000 b835 	b.w	4bf4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4b8a:	0000      	.short	0x0000
    4b8c:	20000d40 	.word	0x20000d40

00004b90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b94:	4606      	mov	r6, r0
    4b96:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4b9a:	460c      	mov	r4, r1
    4b9c:	f243 0702 	movw	r7, #12290	; 0x3002
    4ba0:	38ff      	subs	r0, #255	; 0xff
    4ba2:	d020      	beq.n	4be6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4ba4:	2c02      	cmp	r4, #2
    4ba6:	d302      	bcc.n	4bae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4ba8:	2007      	movs	r0, #7
    4baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4bae:	4630      	mov	r0, r6
    4bb0:	f000 f848 	bl	4c44 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4bb4:	0005      	movs	r5, r0
    4bb6:	d016      	beq.n	4be6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4bb8:	480c      	ldr	r0, [pc, #48]	; (4bec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4bba:	4629      	mov	r1, r5
    4bbc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4bc0:	4630      	mov	r0, r6
    4bc2:	4790      	blx	r2
    4bc4:	480a      	ldr	r0, [pc, #40]	; (4bf0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4bc6:	2100      	movs	r1, #0
    4bc8:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4bcc:	68f8      	ldr	r0, [r7, #12]
    4bce:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    4bd2:	4620      	mov	r0, r4
    4bd4:	f000 f878 	bl	4cc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4bd8:	4602      	mov	r2, r0
    4bda:	4629      	mov	r1, r5
    4bdc:	6878      	ldr	r0, [r7, #4]
    4bde:	f004 fb90 	bl	9302 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4be2:	2000      	movs	r0, #0
    4be4:	e7e1      	b.n	4baa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4be6:	4638      	mov	r0, r7
    4be8:	e7df      	b.n	4baa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4bea:	0000      	.short	0x0000
    4bec:	00004cf4 	.word	0x00004cf4
    4bf0:	20000d40 	.word	0x20000d40
    4bf4:	b570      	push	{r4, r5, r6, lr}
    4bf6:	460e      	mov	r6, r1
    4bf8:	4605      	mov	r5, r0
    4bfa:	f004 fbbc 	bl	9376 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    4bfe:	b158      	cbz	r0, 4c18 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4c00:	480f      	ldr	r0, [pc, #60]	; (4c40 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb0>)
    4c02:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    4c06:	68e0      	ldr	r0, [r4, #12]
    4c08:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4c0c:	b138      	cbz	r0, 4c1e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4c0e:	f240 118b 	movw	r1, #395	; 0x18b
    4c12:	2017      	movs	r0, #23
    4c14:	f7ff fd82 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c18:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    4c1c:	e7f9      	b.n	4c12 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x82>
    4c1e:	6860      	ldr	r0, [r4, #4]
    4c20:	2800      	cmp	r0, #0
    4c22:	d00b      	beq.n	4c3c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    4c24:	4630      	mov	r0, r6
    4c26:	f000 f84f 	bl	4cc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4c2a:	4601      	mov	r1, r0
    4c2c:	6860      	ldr	r0, [r4, #4]
    4c2e:	f004 fb10 	bl	9252 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4c32:	2800      	cmp	r0, #0
    4c34:	d002      	beq.n	4c3c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    4c36:	68e1      	ldr	r1, [r4, #12]
    4c38:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
    4c3c:	bd70      	pop	{r4, r5, r6, pc}
    4c3e:	0000      	.short	0x0000
    4c40:	20000d40 	.word	0x20000d40
    4c44:	b570      	push	{r4, r5, r6, lr}
    4c46:	460c      	mov	r4, r1
    4c48:	4605      	mov	r5, r0
    4c4a:	f004 fb94 	bl	9376 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    4c4e:	2800      	cmp	r0, #0
    4c50:	d005      	beq.n	4c5e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xce>
    4c52:	4803      	ldr	r0, [pc, #12]	; (4c60 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4c54:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4c58:	68c0      	ldr	r0, [r0, #12]
    4c5a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4c5e:	bd70      	pop	{r4, r5, r6, pc}
    4c60:	20000d40 	.word	0x20000d40
    4c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c68:	4e16      	ldr	r6, [pc, #88]	; (4cc4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>)
    4c6a:	4688      	mov	r8, r1
    4c6c:	4605      	mov	r5, r0
    4c6e:	2400      	movs	r4, #0
    4c70:	6828      	ldr	r0, [r5, #0]
    4c72:	1cc0      	adds	r0, r0, #3
    4c74:	f020 0003 	bic.w	r0, r0, #3
    4c78:	6028      	str	r0, [r5, #0]
    4c7a:	4620      	mov	r0, r4
    4c7c:	f000 f824 	bl	4cc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4c80:	5d31      	ldrb	r1, [r6, r4]
    4c82:	4348      	muls	r0, r1
    4c84:	f1b8 0f00 	cmp.w	r8, #0
    4c88:	d001      	beq.n	4c8e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfe>
    4c8a:	2200      	movs	r2, #0
    4c8c:	e000      	b.n	4c90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    4c8e:	682a      	ldr	r2, [r5, #0]
    4c90:	4601      	mov	r1, r0
    4c92:	9200      	str	r2, [sp, #0]
    4c94:	b132      	cbz	r2, 4ca4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x114>
    4c96:	2700      	movs	r7, #0
    4c98:	ea4f 000d 	mov.w	r0, sp
    4c9c:	f004 fb0a 	bl	92b4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4ca0:	b11f      	cbz	r7, 4caa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11a>
    4ca2:	e006      	b.n	4cb2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    4ca4:	2701      	movs	r7, #1
    4ca6:	2000      	movs	r0, #0
    4ca8:	e7f8      	b.n	4c9c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    4caa:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    4cae:	9a00      	ldr	r2, [sp, #0]
    4cb0:	604a      	str	r2, [r1, #4]
    4cb2:	6829      	ldr	r1, [r5, #0]
    4cb4:	1c64      	adds	r4, r4, #1
    4cb6:	4408      	add	r0, r1
    4cb8:	b2e4      	uxtb	r4, r4
    4cba:	6028      	str	r0, [r5, #0]
    4cbc:	2c02      	cmp	r4, #2
    4cbe:	d3d7      	bcc.n	4c70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    4cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4cc4:	20000d40 	.word	0x20000d40
    4cc8:	4903      	ldr	r1, [pc, #12]	; (4cd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>)
    4cca:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4cce:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4cd2:	1cc0      	adds	r0, r0, #3
    4cd4:	4008      	ands	r0, r1
    4cd6:	4770      	bx	lr
    4cd8:	00004cf0 	.word	0x00004cf0
    4cdc:	4903      	ldr	r1, [pc, #12]	; (4cec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>)
    4cde:	7808      	ldrb	r0, [r1, #0]
    4ce0:	7849      	ldrb	r1, [r1, #1]
    4ce2:	4288      	cmp	r0, r1
    4ce4:	d200      	bcs.n	4ce8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>
    4ce6:	4608      	mov	r0, r1
    4ce8:	4770      	bx	lr
    4cea:	0000      	.short	0x0000
    4cec:	20000d40 	.word	0x20000d40
    4cf0:	011802e8 	.word	0x011802e8
    4cf4:	0000a33d 	.word	0x0000a33d
    4cf8:	00009ba1 	.word	0x00009ba1

00004cfc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4cfc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d00:	4c24      	ldr	r4, [pc, #144]	; (4d94 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    4d02:	4606      	mov	r6, r0
    4d04:	b081      	sub	sp, #4
    4d06:	6820      	ldr	r0, [r4, #0]
    4d08:	469a      	mov	sl, r3
    4d0a:	4693      	mov	fp, r2
    4d0c:	b158      	cbz	r0, 4d26 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4d0e:	7a01      	ldrb	r1, [r0, #8]
    4d10:	42b1      	cmp	r1, r6
    4d12:	d903      	bls.n	4d1c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4d14:	6840      	ldr	r0, [r0, #4]
    4d16:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    4d1a:	b140      	cbz	r0, 4d2e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4d1c:	f243 0002 	movw	r0, #12290	; 0x3002
    4d20:	b005      	add	sp, #20
    4d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d26:	21a5      	movs	r1, #165	; 0xa5
    4d28:	2018      	movs	r0, #24
    4d2a:	f7ff fcf7 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d2e:	4619      	mov	r1, r3
    4d30:	9802      	ldr	r0, [sp, #8]
    4d32:	f004 fb43 	bl	93bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    4d36:	4680      	mov	r8, r0
    4d38:	4658      	mov	r0, fp
    4d3a:	990e      	ldr	r1, [sp, #56]	; 0x38
    4d3c:	f004 fb34 	bl	93a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    4d40:	4605      	mov	r5, r0
    4d42:	eb08 0005 	add.w	r0, r8, r5
    4d46:	1d00      	adds	r0, r0, #4
    4d48:	b287      	uxth	r7, r0
    4d4a:	6820      	ldr	r0, [r4, #0]
    4d4c:	46a1      	mov	r9, r4
    4d4e:	4639      	mov	r1, r7
    4d50:	6800      	ldr	r0, [r0, #0]
    4d52:	f004 fa7e 	bl	9252 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4d56:	0004      	movs	r4, r0
    4d58:	d01a      	beq.n	4d90 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    4d5a:	8067      	strh	r7, [r4, #2]
    4d5c:	8025      	strh	r5, [r4, #0]
    4d5e:	4629      	mov	r1, r5
    4d60:	1d20      	adds	r0, r4, #4
    4d62:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4d64:	4607      	mov	r7, r0
    4d66:	465a      	mov	r2, fp
    4d68:	2309      	movs	r3, #9
    4d6a:	9500      	str	r5, [sp, #0]
    4d6c:	f004 fa1e 	bl	91ac <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4d70:	8820      	ldrh	r0, [r4, #0]
    4d72:	4641      	mov	r1, r8
    4d74:	4438      	add	r0, r7
    4d76:	230a      	movs	r3, #10
    4d78:	9a02      	ldr	r2, [sp, #8]
    4d7a:	f8cd a000 	str.w	sl, [sp]
    4d7e:	f004 fa15 	bl	91ac <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4d82:	f8d9 0000 	ldr.w	r0, [r9]
    4d86:	6840      	ldr	r0, [r0, #4]
    4d88:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    4d8c:	2000      	movs	r0, #0
    4d8e:	e7c7      	b.n	4d20 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4d90:	2004      	movs	r0, #4
    4d92:	e7c5      	b.n	4d20 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4d94:	200000bc 	.word	0x200000bc

00004d98 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4d98:	b570      	push	{r4, r5, r6, lr}
    4d9a:	4c14      	ldr	r4, [pc, #80]	; (4dec <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4d9c:	6823      	ldr	r3, [r4, #0]
    4d9e:	b18b      	cbz	r3, 4dc4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4da0:	7a19      	ldrb	r1, [r3, #8]
    4da2:	4281      	cmp	r1, r0
    4da4:	d912      	bls.n	4dcc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4da6:	685a      	ldr	r2, [r3, #4]
    4da8:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4dac:	b171      	cbz	r1, 4dcc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4dae:	2500      	movs	r5, #0
    4db0:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4db4:	884a      	ldrh	r2, [r1, #2]
    4db6:	6818      	ldr	r0, [r3, #0]
    4db8:	f004 faa3 	bl	9302 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4dbc:	6821      	ldr	r1, [r4, #0]
    4dbe:	2000      	movs	r0, #0
    4dc0:	7a0a      	ldrb	r2, [r1, #8]
    4dc2:	e00c      	b.n	4dde <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4dc4:	21c6      	movs	r1, #198	; 0xc6
    4dc6:	2018      	movs	r0, #24
    4dc8:	f7ff fca8 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dcc:	f243 0002 	movw	r0, #12290	; 0x3002
    4dd0:	bd70      	pop	{r4, r5, r6, pc}
    4dd2:	684b      	ldr	r3, [r1, #4]
    4dd4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4dd8:	b933      	cbnz	r3, 4de8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4dda:	1c40      	adds	r0, r0, #1
    4ddc:	b2c0      	uxtb	r0, r0
    4dde:	4282      	cmp	r2, r0
    4de0:	d8f7      	bhi.n	4dd2 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4de2:	6808      	ldr	r0, [r1, #0]
    4de4:	f004 fa82 	bl	92ec <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4de8:	2000      	movs	r0, #0
    4dea:	bd70      	pop	{r4, r5, r6, pc}
    4dec:	200000bc 	.word	0x200000bc

00004df0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4df4:	460d      	mov	r5, r1
    4df6:	0004      	movs	r4, r0
    4df8:	4690      	mov	r8, r2
    4dfa:	f04f 0600 	mov.w	r6, #0
    4dfe:	d006      	beq.n	4e0e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    4e00:	2700      	movs	r7, #0
    4e02:	07a0      	lsls	r0, r4, #30
    4e04:	d005      	beq.n	4e12 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    4e06:	2186      	movs	r1, #134	; 0x86
    4e08:	2018      	movs	r0, #24
    4e0a:	f7ff fc87 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e0e:	2701      	movs	r7, #1
    4e10:	e7f7      	b.n	4e02 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4e12:	b1cd      	cbz	r5, 4e48 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    4e14:	4611      	mov	r1, r2
    4e16:	2000      	movs	r0, #0
    4e18:	f004 fa4c 	bl	92b4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4e1c:	300c      	adds	r0, #12
    4e1e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4e22:	b98f      	cbnz	r7, 4e48 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    4e24:	4f0a      	ldr	r7, [pc, #40]	; (4e50 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    4e26:	f104 000c 	add.w	r0, r4, #12
    4e2a:	00aa      	lsls	r2, r5, #2
    4e2c:	603c      	str	r4, [r7, #0]
    4e2e:	7225      	strb	r5, [r4, #8]
    4e30:	6060      	str	r0, [r4, #4]
    4e32:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4e36:	6020      	str	r0, [r4, #0]
    4e38:	2100      	movs	r1, #0
    4e3a:	6860      	ldr	r0, [r4, #4]
    4e3c:	f003 fd5b 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4e40:	4641      	mov	r1, r8
    4e42:	6838      	ldr	r0, [r7, #0]
    4e44:	f004 fa36 	bl	92b4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4e48:	4630      	mov	r0, r6
    4e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e4e:	0000      	.short	0x0000
    4e50:	200000bc 	.word	0x200000bc

00004e54 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4e54:	4909      	ldr	r1, [pc, #36]	; (4e7c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4e56:	b510      	push	{r4, lr}
    4e58:	4602      	mov	r2, r0
    4e5a:	6809      	ldr	r1, [r1, #0]
    4e5c:	2000      	movs	r0, #0
    4e5e:	b149      	cbz	r1, 4e74 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4e60:	7a0b      	ldrb	r3, [r1, #8]
    4e62:	4293      	cmp	r3, r2
    4e64:	d905      	bls.n	4e72 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4e66:	6849      	ldr	r1, [r1, #4]
    4e68:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4e6c:	2900      	cmp	r1, #0
    4e6e:	d000      	beq.n	4e72 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4e70:	1d08      	adds	r0, r1, #4
    4e72:	bd10      	pop	{r4, pc}
    4e74:	21ec      	movs	r1, #236	; 0xec
    4e76:	2018      	movs	r0, #24
    4e78:	f7ff fc50 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e7c:	200000bc 	.word	0x200000bc

00004e80 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4e80:	490a      	ldr	r1, [pc, #40]	; (4eac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4e82:	b510      	push	{r4, lr}
    4e84:	4602      	mov	r2, r0
    4e86:	6809      	ldr	r1, [r1, #0]
    4e88:	2000      	movs	r0, #0
    4e8a:	b159      	cbz	r1, 4ea4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4e8c:	7a0b      	ldrb	r3, [r1, #8]
    4e8e:	4293      	cmp	r3, r2
    4e90:	d907      	bls.n	4ea2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4e92:	6849      	ldr	r1, [r1, #4]
    4e94:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4e98:	2900      	cmp	r1, #0
    4e9a:	d002      	beq.n	4ea2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4e9c:	f831 0b04 	ldrh.w	r0, [r1], #4
    4ea0:	4408      	add	r0, r1
    4ea2:	bd10      	pop	{r4, pc}
    4ea4:	21fa      	movs	r1, #250	; 0xfa
    4ea6:	2018      	movs	r0, #24
    4ea8:	f7ff fc38 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4eac:	200000bc 	.word	0x200000bc
    4eb0:	b570      	push	{r4, r5, r6, lr}
    4eb2:	4b1e      	ldr	r3, [pc, #120]	; (4f2c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    4eb4:	6845      	ldr	r5, [r0, #4]
    4eb6:	4604      	mov	r4, r0
    4eb8:	2200      	movs	r2, #0
    4eba:	b1a1      	cbz	r1, 4ee6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    4ebc:	2001      	movs	r0, #1
    4ebe:	7060      	strb	r0, [r4, #1]
    4ec0:	8858      	ldrh	r0, [r3, #2]
    4ec2:	0881      	lsrs	r1, r0, #2
    4ec4:	f05f 0000 	movs.w	r0, #0
    4ec8:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    4ecc:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    4ed0:	831a      	strh	r2, [r3, #24]
    4ed2:	8419      	strh	r1, [r3, #32]
    4ed4:	fb00 5301 	mla	r3, r0, r1, r5
    4ed8:	6073      	str	r3, [r6, #4]
    4eda:	1823      	adds	r3, r4, r0
    4edc:	1c40      	adds	r0, r0, #1
    4ede:	751a      	strb	r2, [r3, #20]
    4ee0:	2804      	cmp	r0, #4
    4ee2:	d3f1      	bcc.n	4ec8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    4ee4:	bd70      	pop	{r4, r5, r6, pc}
    4ee6:	7062      	strb	r2, [r4, #1]
    4ee8:	f05f 0000 	movs.w	r0, #0
    4eec:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    4ef0:	830a      	strh	r2, [r1, #24]
    4ef2:	840a      	strh	r2, [r1, #32]
    4ef4:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    4ef8:	604a      	str	r2, [r1, #4]
    4efa:	1821      	adds	r1, r4, r0
    4efc:	1c40      	adds	r0, r0, #1
    4efe:	750a      	strb	r2, [r1, #20]
    4f00:	2804      	cmp	r0, #4
    4f02:	d3f3      	bcc.n	4eec <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    4f04:	8858      	ldrh	r0, [r3, #2]
    4f06:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    4f0a:	d201      	bcs.n	4f10 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    4f0c:	0846      	lsrs	r6, r0, #1
    4f0e:	e000      	b.n	4f12 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    4f10:	26ff      	movs	r6, #255	; 0xff
    4f12:	f004 fac7 	bl	94a4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    4f16:	6065      	str	r5, [r4, #4]
    4f18:	8420      	strh	r0, [r4, #32]
    4f1a:	1829      	adds	r1, r5, r0
    4f1c:	60a1      	str	r1, [r4, #8]
    4f1e:	8466      	strh	r6, [r4, #34]	; 0x22
    4f20:	60e5      	str	r5, [r4, #12]
    4f22:	84a0      	strh	r0, [r4, #36]	; 0x24
    4f24:	6121      	str	r1, [r4, #16]
    4f26:	84e6      	strh	r6, [r4, #38]	; 0x26
    4f28:	bd70      	pop	{r4, r5, r6, pc}
    4f2a:	0000      	.short	0x0000
    4f2c:	200000c0 	.word	0x200000c0

00004f30 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    4f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f34:	b158      	cbz	r0, 4f4e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    4f36:	2500      	movs	r5, #0
    4f38:	4411      	add	r1, r2
    4f3a:	4e24      	ldr	r6, [pc, #144]	; (4fcc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    4f3c:	b2cc      	uxtb	r4, r1
    4f3e:	2700      	movs	r7, #0
    4f40:	7034      	strb	r4, [r6, #0]
    4f42:	0781      	lsls	r1, r0, #30
    4f44:	d005      	beq.n	4f52 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    4f46:	214e      	movs	r1, #78	; 0x4e
    4f48:	2009      	movs	r0, #9
    4f4a:	f7ff fbe7 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f4e:	2501      	movs	r5, #1
    4f50:	e7f2      	b.n	4f38 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    4f52:	2b1f      	cmp	r3, #31
    4f54:	d804      	bhi.n	4f60 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    4f56:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4f5a:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    4f5e:	e009      	b.n	4f74 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    4f60:	0059      	lsls	r1, r3, #1
    4f62:	2bff      	cmp	r3, #255	; 0xff
    4f64:	d90c      	bls.n	4f80 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    4f66:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    4f6a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4f6e:	d200      	bcs.n	4f72 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4f70:	4611      	mov	r1, r2
    4f72:	b289      	uxth	r1, r1
    4f74:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    4f78:	1cc9      	adds	r1, r1, #3
    4f7a:	4011      	ands	r1, r2
    4f7c:	b135      	cbz	r5, 4f8c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    4f7e:	e007      	b.n	4f90 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    4f80:	227c      	movs	r2, #124	; 0x7c
    4f82:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    4f86:	d3f4      	bcc.n	4f72 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4f88:	217c      	movs	r1, #124	; 0x7c
    4f8a:	e7f2      	b.n	4f72 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    4f8c:	6070      	str	r0, [r6, #4]
    4f8e:	8071      	strh	r1, [r6, #2]
    4f90:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    4f94:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    4f98:	2200      	movs	r2, #0
    4f9a:	6876      	ldr	r6, [r6, #4]
    4f9c:	f04f 0c01 	mov.w	ip, #1
    4fa0:	e00d      	b.n	4fbe <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    4fa2:	b94d      	cbnz	r5, 4fb8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    4fa4:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    4fa8:	eb00 0e03 	add.w	lr, r0, r3
    4fac:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    4fb0:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    4fb4:	f8c7 e004 	str.w	lr, [r7, #4]
    4fb8:	1c52      	adds	r2, r2, #1
    4fba:	440b      	add	r3, r1
    4fbc:	b2d2      	uxtb	r2, r2
    4fbe:	42a2      	cmp	r2, r4
    4fc0:	d3ef      	bcc.n	4fa2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    4fc2:	1ddb      	adds	r3, r3, #7
    4fc4:	f023 0007 	bic.w	r0, r3, #7
    4fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fcc:	200000c0 	.word	0x200000c0

00004fd0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    4fd0:	b570      	push	{r4, r5, r6, lr}
    4fd2:	4a10      	ldr	r2, [pc, #64]	; (5014 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    4fd4:	2000      	movs	r0, #0
    4fd6:	6851      	ldr	r1, [r2, #4]
    4fd8:	7812      	ldrb	r2, [r2, #0]
    4fda:	e014      	b.n	5006 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    4fdc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4fe0:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    4fe4:	b16b      	cbz	r3, 5002 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    4fe6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4fea:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    4fee:	d00c      	beq.n	500a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    4ff0:	2500      	movs	r5, #0
    4ff2:	70a5      	strb	r5, [r4, #2]
    4ff4:	2101      	movs	r1, #1
    4ff6:	4620      	mov	r0, r4
    4ff8:	f7ff ff5a 	bl	4eb0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    4ffc:	7025      	strb	r5, [r4, #0]
    4ffe:	4620      	mov	r0, r4
    5000:	bd70      	pop	{r4, r5, r6, pc}
    5002:	1c40      	adds	r0, r0, #1
    5004:	b2c0      	uxtb	r0, r0
    5006:	4290      	cmp	r0, r2
    5008:	d3e8      	bcc.n	4fdc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    500a:	21a9      	movs	r1, #169	; 0xa9
    500c:	2009      	movs	r0, #9
    500e:	f7ff fb85 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5012:	0000      	.short	0x0000
    5014:	200000c0 	.word	0x200000c0

00005018 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    5018:	4804      	ldr	r0, [pc, #16]	; (502c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    501a:	b510      	push	{r4, lr}
    501c:	8840      	ldrh	r0, [r0, #2]
    501e:	0884      	lsrs	r4, r0, #2
    5020:	f004 fa40 	bl	94a4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    5024:	4284      	cmp	r4, r0
    5026:	d300      	bcc.n	502a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    5028:	4620      	mov	r0, r4
    502a:	bd10      	pop	{r4, pc}
    502c:	200000c0 	.word	0x200000c0
    5030:	b530      	push	{r4, r5, lr}
    5032:	490d      	ldr	r1, [pc, #52]	; (5068 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    5034:	2001      	movs	r0, #1
    5036:	6048      	str	r0, [r1, #4]
    5038:	1e82      	subs	r2, r0, #2
    503a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    503e:	490b      	ldr	r1, [pc, #44]	; (506c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    5040:	6088      	str	r0, [r1, #8]
    5042:	2300      	movs	r3, #0
    5044:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    5048:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    504c:	4c08      	ldr	r4, [pc, #32]	; (5070 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    504e:	6023      	str	r3, [r4, #0]
    5050:	1d25      	adds	r5, r4, #4
    5052:	6028      	str	r0, [r5, #0]
    5054:	6088      	str	r0, [r1, #8]
    5056:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    505a:	6023      	str	r3, [r4, #0]
    505c:	6028      	str	r0, [r5, #0]
    505e:	4906      	ldr	r1, [pc, #24]	; (5078 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    5060:	4804      	ldr	r0, [pc, #16]	; (5074 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    5062:	6008      	str	r0, [r1, #0]
    5064:	bd30      	pop	{r4, r5, pc}
    5066:	0000      	.short	0x0000
    5068:	4000e000 	.word	0x4000e000
    506c:	4000f000 	.word	0x4000f000
    5070:	4000f500 	.word	0x4000f500
    5074:	3ff60000 	.word	0x3ff60000
    5078:	4001f508 	.word	0x4001f508

0000507c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    507c:	b510      	push	{r4, lr}
    507e:	f7ff ffd7 	bl	5030 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    5082:	f004 fae2 	bl	964a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    5086:	4903      	ldr	r1, [pc, #12]	; (5094 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    5088:	4801      	ldr	r0, [pc, #4]	; (5090 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    508a:	6008      	str	r0, [r1, #0]
    508c:	bd10      	pop	{r4, pc}
    508e:	0000      	.short	0x0000
    5090:	3ff60000 	.word	0x3ff60000
    5094:	4001f508 	.word	0x4001f508

00005098 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    5098:	b510      	push	{r4, lr}
    509a:	4604      	mov	r4, r0
    509c:	f7ff ffc8 	bl	5030 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    50a0:	f004 fad3 	bl	964a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    50a4:	f000 f888 	bl	51b8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    50a8:	4905      	ldr	r1, [pc, #20]	; (50c0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    50aa:	4804      	ldr	r0, [pc, #16]	; (50bc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    50ac:	6008      	str	r0, [r1, #0]
    50ae:	4620      	mov	r0, r4
    50b0:	f000 f8b8 	bl	5224 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    50b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    50b8:	f000 b8dc 	b.w	5274 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    50bc:	3ff60000 	.word	0x3ff60000
    50c0:	4001f508 	.word	0x4001f508
    50c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50c8:	4682      	mov	sl, r0
    50ca:	4838      	ldr	r0, [pc, #224]	; (51ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    50cc:	f003 fb02 	bl	86d4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    50d0:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 51ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    50d4:	b128      	cbz	r0, 50e2 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    50d6:	2601      	movs	r6, #1
    50d8:	f10b 0001 	add.w	r0, fp, #1
    50dc:	21ff      	movs	r1, #255	; 0xff
    50de:	7001      	strb	r1, [r0, #0]
    50e0:	e000      	b.n	50e4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    50e2:	2600      	movs	r6, #0
    50e4:	f44f 7580 	mov.w	r5, #256	; 0x100
    50e8:	4c31      	ldr	r4, [pc, #196]	; (51b0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    50ea:	f04f 0800 	mov.w	r8, #0
    50ee:	1d2f      	adds	r7, r5, #4
    50f0:	2101      	movs	r1, #1
    50f2:	6061      	str	r1, [r4, #4]
    50f4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    50f8:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    50fc:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    5100:	6021      	str	r1, [r4, #0]
    5102:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 51b4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    5106:	e01c      	b.n	5142 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5108:	f8d9 0000 	ldr.w	r0, [r9]
    510c:	06c0      	lsls	r0, r0, #27
    510e:	d518      	bpl.n	5142 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5110:	200e      	movs	r0, #14
    5112:	f004 faa9 	bl	9668 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    5116:	f3ef 8010 	mrs	r0, PRIMASK
    511a:	9000      	str	r0, [sp, #0]
    511c:	b672      	cpsid	i
    511e:	2103      	movs	r1, #3
    5120:	4620      	mov	r0, r4
    5122:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    5126:	4629      	mov	r1, r5
    5128:	f004 faab 	bl	9682 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    512c:	b930      	cbnz	r0, 513c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    512e:	4639      	mov	r1, r7
    5130:	4620      	mov	r0, r4
    5132:	f004 faa6 	bl	9682 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5136:	b908      	cbnz	r0, 513c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5138:	f7ff f94c 	bl	43d4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    513c:	9800      	ldr	r0, [sp, #0]
    513e:	b900      	cbnz	r0, 5142 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5140:	b662      	cpsie	i
    5142:	4629      	mov	r1, r5
    5144:	4620      	mov	r0, r4
    5146:	f004 fa9c 	bl	9682 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    514a:	b928      	cbnz	r0, 5158 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    514c:	4639      	mov	r1, r7
    514e:	4620      	mov	r0, r4
    5150:	f004 fa97 	bl	9682 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5154:	2800      	cmp	r0, #0
    5156:	d0d7      	beq.n	5108 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    5158:	4639      	mov	r1, r7
    515a:	4620      	mov	r0, r4
    515c:	f004 fa91 	bl	9682 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5160:	2800      	cmp	r0, #0
    5162:	d1c5      	bne.n	50f0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    5164:	bb06      	cbnz	r6, 51a8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    5166:	f89b 1001 	ldrb.w	r1, [fp, #1]
    516a:	f88d 1000 	strb.w	r1, [sp]
    516e:	9900      	ldr	r1, [sp, #0]
    5170:	9100      	str	r1, [sp, #0]
    5172:	f89d 1000 	ldrb.w	r1, [sp]
    5176:	b109      	cbz	r1, 517c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    5178:	2501      	movs	r5, #1
    517a:	e000      	b.n	517e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    517c:	2500      	movs	r5, #0
    517e:	f10b 0001 	add.w	r0, fp, #1
    5182:	f880 8000 	strb.w	r8, [r0]
    5186:	2003      	movs	r0, #3
    5188:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    518c:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5190:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5194:	200e      	movs	r0, #14
    5196:	f004 fa67 	bl	9668 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    519a:	4804      	ldr	r0, [pc, #16]	; (51ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    519c:	f003 fab1 	bl	8702 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    51a0:	b115      	cbz	r5, 51a8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    51a2:	2011      	movs	r0, #17
    51a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51a8:	2000      	movs	r0, #0
    51aa:	e7fb      	b.n	51a4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    51ac:	2000017c 	.word	0x2000017c
    51b0:	4000e000 	.word	0x4000e000
    51b4:	e000ed10 	.word	0xe000ed10

000051b8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    51b8:	b510      	push	{r4, lr}
    51ba:	4806      	ldr	r0, [pc, #24]	; (51d4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    51bc:	f003 fa9d 	bl	86fa <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    51c0:	b118      	cbz	r0, 51ca <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    51c2:	2127      	movs	r1, #39	; 0x27
    51c4:	201d      	movs	r0, #29
    51c6:	f7ff faa9 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51ca:	4802      	ldr	r0, [pc, #8]	; (51d4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    51cc:	2100      	movs	r1, #0
    51ce:	7041      	strb	r1, [r0, #1]
    51d0:	bd10      	pop	{r4, pc}
    51d2:	0000      	.short	0x0000
    51d4:	2000017c 	.word	0x2000017c

000051d8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    51d8:	b570      	push	{r4, r5, r6, lr}
    51da:	4911      	ldr	r1, [pc, #68]	; (5220 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    51dc:	680a      	ldr	r2, [r1, #0]
    51de:	b1ea      	cbz	r2, 521c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    51e0:	2300      	movs	r3, #0
    51e2:	461d      	mov	r5, r3
    51e4:	2401      	movs	r4, #1
    51e6:	684a      	ldr	r2, [r1, #4]
    51e8:	1c52      	adds	r2, r2, #1
    51ea:	604a      	str	r2, [r1, #4]
    51ec:	2a09      	cmp	r2, #9
    51ee:	d300      	bcc.n	51f2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    51f0:	604d      	str	r5, [r1, #4]
    51f2:	790e      	ldrb	r6, [r1, #4]
    51f4:	fa04 f206 	lsl.w	r2, r4, r6
    51f8:	680e      	ldr	r6, [r1, #0]
    51fa:	4216      	tst	r6, r2
    51fc:	d00b      	beq.n	5216 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    51fe:	f3ef 8310 	mrs	r3, PRIMASK
    5202:	b672      	cpsid	i
    5204:	680c      	ldr	r4, [r1, #0]
    5206:	4394      	bics	r4, r2
    5208:	600c      	str	r4, [r1, #0]
    520a:	b903      	cbnz	r3, 520e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    520c:	b662      	cpsie	i
    520e:	6849      	ldr	r1, [r1, #4]
    5210:	6001      	str	r1, [r0, #0]
    5212:	2000      	movs	r0, #0
    5214:	bd70      	pop	{r4, r5, r6, pc}
    5216:	1c5b      	adds	r3, r3, #1
    5218:	2b09      	cmp	r3, #9
    521a:	d3e4      	bcc.n	51e6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    521c:	2005      	movs	r0, #5
    521e:	bd70      	pop	{r4, r5, r6, pc}
    5220:	200000c8 	.word	0x200000c8

00005224 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    5224:	4802      	ldr	r0, [pc, #8]	; (5230 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    5226:	2100      	movs	r1, #0
    5228:	6001      	str	r1, [r0, #0]
    522a:	6041      	str	r1, [r0, #4]
    522c:	4770      	bx	lr
    522e:	0000      	.short	0x0000
    5230:	200000c8 	.word	0x200000c8

00005234 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    5234:	b510      	push	{r4, lr}
    5236:	4c04      	ldr	r4, [pc, #16]	; (5248 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    5238:	7820      	ldrb	r0, [r4, #0]
    523a:	28ff      	cmp	r0, #255	; 0xff
    523c:	d003      	beq.n	5246 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    523e:	f7ff f87f 	bl	4340 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    5242:	20ff      	movs	r0, #255	; 0xff
    5244:	7020      	strb	r0, [r4, #0]
    5246:	bd10      	pop	{r4, pc}
    5248:	20000000 	.word	0x20000000

0000524c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    524c:	b510      	push	{r4, lr}
    524e:	4c08      	ldr	r4, [pc, #32]	; (5270 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5250:	7861      	ldrb	r1, [r4, #1]
    5252:	b109      	cbz	r1, 5258 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    5254:	200f      	movs	r0, #15
    5256:	bd10      	pop	{r4, pc}
    5258:	f7ff f838 	bl	42cc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    525c:	7020      	strb	r0, [r4, #0]
    525e:	28ff      	cmp	r0, #255	; 0xff
    5260:	d001      	beq.n	5266 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    5262:	2000      	movs	r0, #0
    5264:	bd10      	pop	{r4, pc}
    5266:	2178      	movs	r1, #120	; 0x78
    5268:	201f      	movs	r0, #31
    526a:	f7ff fa57 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    526e:	0000      	.short	0x0000
    5270:	20000000 	.word	0x20000000

00005274 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    5274:	4901      	ldr	r1, [pc, #4]	; (527c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    5276:	2000      	movs	r0, #0
    5278:	7048      	strb	r0, [r1, #1]
    527a:	4770      	bx	lr
    527c:	20000000 	.word	0x20000000
    5280:	4905      	ldr	r1, [pc, #20]	; (5298 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x24>)
    5282:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5284:	4282      	cmp	r2, r0
    5286:	d105      	bne.n	5294 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x20>
    5288:	2000      	movs	r0, #0
    528a:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    528e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5292:	8488      	strh	r0, [r1, #36]	; 0x24
    5294:	4770      	bx	lr
    5296:	0000      	.short	0x0000
    5298:	20000df0 	.word	0x20000df0

0000529c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    529c:	4a0a      	ldr	r2, [pc, #40]	; (52c8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    529e:	b110      	cbz	r0, 52a6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    52a0:	2801      	cmp	r0, #1
    52a2:	d007      	beq.n	52b4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    52a4:	e00e      	b.n	52c4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    52a6:	7850      	ldrb	r0, [r2, #1]
    52a8:	b160      	cbz	r0, 52c4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    52aa:	f8d2 0002 	ldr.w	r0, [r2, #2]
    52ae:	6008      	str	r0, [r1, #0]
    52b0:	88d0      	ldrh	r0, [r2, #6]
    52b2:	e004      	b.n	52be <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    52b4:	7810      	ldrb	r0, [r2, #0]
    52b6:	b128      	cbz	r0, 52c4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    52b8:	6890      	ldr	r0, [r2, #8]
    52ba:	6008      	str	r0, [r1, #0]
    52bc:	8990      	ldrh	r0, [r2, #12]
    52be:	8088      	strh	r0, [r1, #4]
    52c0:	2001      	movs	r0, #1
    52c2:	4770      	bx	lr
    52c4:	2000      	movs	r0, #0
    52c6:	4770      	bx	lr
    52c8:	2000017e 	.word	0x2000017e

000052cc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    52cc:	4a08      	ldr	r2, [pc, #32]	; (52f0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    52ce:	2301      	movs	r3, #1
    52d0:	b138      	cbz	r0, 52e2 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    52d2:	2801      	cmp	r0, #1
    52d4:	d104      	bne.n	52e0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    52d6:	7013      	strb	r3, [r2, #0]
    52d8:	6808      	ldr	r0, [r1, #0]
    52da:	6090      	str	r0, [r2, #8]
    52dc:	8888      	ldrh	r0, [r1, #4]
    52de:	8190      	strh	r0, [r2, #12]
    52e0:	4770      	bx	lr
    52e2:	7053      	strb	r3, [r2, #1]
    52e4:	6808      	ldr	r0, [r1, #0]
    52e6:	f8c2 0002 	str.w	r0, [r2, #2]
    52ea:	8888      	ldrh	r0, [r1, #4]
    52ec:	80d0      	strh	r0, [r2, #6]
    52ee:	4770      	bx	lr
    52f0:	2000017e 	.word	0x2000017e

000052f4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    52f4:	4906      	ldr	r1, [pc, #24]	; (5310 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    52f6:	b110      	cbz	r0, 52fe <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    52f8:	2801      	cmp	r0, #1
    52fa:	d002      	beq.n	5302 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    52fc:	e005      	b.n	530a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    52fe:	7848      	ldrb	r0, [r1, #1]
    5300:	e000      	b.n	5304 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    5302:	7808      	ldrb	r0, [r1, #0]
    5304:	b108      	cbz	r0, 530a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5306:	2001      	movs	r0, #1
    5308:	4770      	bx	lr
    530a:	2000      	movs	r0, #0
    530c:	4770      	bx	lr
    530e:	0000      	.short	0x0000
    5310:	2000017e 	.word	0x2000017e

00005314 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    5314:	4901      	ldr	r1, [pc, #4]	; (531c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    5316:	7708      	strb	r0, [r1, #28]
    5318:	4770      	bx	lr
    531a:	0000      	.short	0x0000
    531c:	2000067a 	.word	0x2000067a

00005320 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5320:	4800      	ldr	r0, [pc, #0]	; (5324 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5322:	4770      	bx	lr
    5324:	20000fe9 	.word	0x20000fe9

00005328 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5328:	4904      	ldr	r1, [pc, #16]	; (533c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    532a:	788a      	ldrb	r2, [r1, #2]
    532c:	4282      	cmp	r2, r0
    532e:	d903      	bls.n	5338 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5330:	4408      	add	r0, r1
    5332:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5336:	4770      	bx	lr
    5338:	2000      	movs	r0, #0
    533a:	4770      	bx	lr
    533c:	20000e16 	.word	0x20000e16

00005340 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5340:	4904      	ldr	r1, [pc, #16]	; (5354 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5342:	788a      	ldrb	r2, [r1, #2]
    5344:	4282      	cmp	r2, r0
    5346:	d903      	bls.n	5350 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5348:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    534c:	3083      	adds	r0, #131	; 0x83
    534e:	4770      	bx	lr
    5350:	2000      	movs	r0, #0
    5352:	4770      	bx	lr
    5354:	20000e16 	.word	0x20000e16

00005358 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5358:	4a05      	ldr	r2, [pc, #20]	; (5370 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    535a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    535e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5362:	6802      	ldr	r2, [r0, #0]
    5364:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5368:	8880      	ldrh	r0, [r0, #4]
    536a:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    536e:	4770      	bx	lr
    5370:	20000e16 	.word	0x20000e16

00005374 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5374:	4904      	ldr	r1, [pc, #16]	; (5388 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5376:	788a      	ldrb	r2, [r1, #2]
    5378:	4282      	cmp	r2, r0
    537a:	d903      	bls.n	5384 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    537c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5380:	1cc0      	adds	r0, r0, #3
    5382:	4770      	bx	lr
    5384:	2000      	movs	r0, #0
    5386:	4770      	bx	lr
    5388:	20000e16 	.word	0x20000e16

0000538c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    538c:	b510      	push	{r4, lr}
    538e:	f240 12d3 	movw	r2, #467	; 0x1d3
    5392:	2100      	movs	r1, #0
    5394:	4808      	ldr	r0, [pc, #32]	; (53b8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5396:	f003 faae 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    539a:	2208      	movs	r2, #8
    539c:	21ff      	movs	r1, #255	; 0xff
    539e:	4807      	ldr	r0, [pc, #28]	; (53bc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    53a0:	f003 faa9 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    53a4:	4805      	ldr	r0, [pc, #20]	; (53bc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    53a6:	2100      	movs	r1, #0
    53a8:	1f00      	subs	r0, r0, #4
    53aa:	7001      	strb	r1, [r0, #0]
    53ac:	7041      	strb	r1, [r0, #1]
    53ae:	f44f 7161 	mov.w	r1, #900	; 0x384
    53b2:	8041      	strh	r1, [r0, #2]
    53b4:	bd10      	pop	{r4, pc}
    53b6:	0000      	.short	0x0000
    53b8:	20000e16 	.word	0x20000e16
    53bc:	20000170 	.word	0x20000170

000053c0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    53c0:	4b0b      	ldr	r3, [pc, #44]	; (53f0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    53c2:	b510      	push	{r4, lr}
    53c4:	789c      	ldrb	r4, [r3, #2]
    53c6:	4284      	cmp	r4, r0
    53c8:	d90f      	bls.n	53ea <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    53ca:	4418      	add	r0, r3
    53cc:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    53d0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    53d4:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    53d8:	700b      	strb	r3, [r1, #0]
    53da:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    53de:	6011      	str	r1, [r2, #0]
    53e0:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    53e4:	8090      	strh	r0, [r2, #4]
    53e6:	2001      	movs	r0, #1
    53e8:	bd10      	pop	{r4, pc}
    53ea:	2000      	movs	r0, #0
    53ec:	bd10      	pop	{r4, pc}
    53ee:	0000      	.short	0x0000
    53f0:	20000e16 	.word	0x20000e16

000053f4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    53f4:	4907      	ldr	r1, [pc, #28]	; (5414 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    53f6:	788a      	ldrb	r2, [r1, #2]
    53f8:	4282      	cmp	r2, r0
    53fa:	d909      	bls.n	5410 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    53fc:	4408      	add	r0, r1
    53fe:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5402:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5406:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    540a:	f000 0001 	and.w	r0, r0, #1
    540e:	4770      	bx	lr
    5410:	2000      	movs	r0, #0
    5412:	4770      	bx	lr
    5414:	20000e16 	.word	0x20000e16

00005418 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5418:	4801      	ldr	r0, [pc, #4]	; (5420 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    541a:	8840      	ldrh	r0, [r0, #2]
    541c:	4770      	bx	lr
    541e:	0000      	.short	0x0000
    5420:	2000016c 	.word	0x2000016c

00005424 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    5424:	4905      	ldr	r1, [pc, #20]	; (543c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    5426:	788a      	ldrb	r2, [r1, #2]
    5428:	4282      	cmp	r2, r0
    542a:	d903      	bls.n	5434 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    542c:	4408      	add	r0, r1
    542e:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5432:	b108      	cbz	r0, 5438 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    5434:	2000      	movs	r0, #0
    5436:	4770      	bx	lr
    5438:	2001      	movs	r0, #1
    543a:	4770      	bx	lr
    543c:	20000e16 	.word	0x20000e16

00005440 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5440:	b570      	push	{r4, r5, r6, lr}
    5442:	460d      	mov	r5, r1
    5444:	4606      	mov	r6, r0
    5446:	f000 f8c1 	bl	55cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    544a:	4c10      	ldr	r4, [pc, #64]	; (548c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    544c:	2810      	cmp	r0, #16
    544e:	d007      	beq.n	5460 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5450:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    5454:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5458:	07c9      	lsls	r1, r1, #31
    545a:	d001      	beq.n	5460 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    545c:	2001      	movs	r0, #1
    545e:	bd70      	pop	{r4, r5, r6, pc}
    5460:	7861      	ldrb	r1, [r4, #1]
    5462:	2908      	cmp	r1, #8
    5464:	d210      	bcs.n	5488 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5466:	2810      	cmp	r0, #16
    5468:	d008      	beq.n	547c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    546a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    546e:	2101      	movs	r1, #1
    5470:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5474:	7860      	ldrb	r0, [r4, #1]
    5476:	1c40      	adds	r0, r0, #1
    5478:	7060      	strb	r0, [r4, #1]
    547a:	e7ef      	b.n	545c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    547c:	2201      	movs	r2, #1
    547e:	4629      	mov	r1, r5
    5480:	4630      	mov	r0, r6
    5482:	f000 f887 	bl	5594 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5486:	e7f5      	b.n	5474 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5488:	2000      	movs	r0, #0
    548a:	bd70      	pop	{r4, r5, r6, pc}
    548c:	20000e16 	.word	0x20000e16

00005490 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5490:	b570      	push	{r4, r5, r6, lr}
    5492:	4d0b      	ldr	r5, [pc, #44]	; (54c0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5494:	7828      	ldrb	r0, [r5, #0]
    5496:	1e40      	subs	r0, r0, #1
    5498:	b244      	sxtb	r4, r0
    549a:	e00a      	b.n	54b2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    549c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    54a0:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    54a4:	07c0      	lsls	r0, r0, #31
    54a6:	d002      	beq.n	54ae <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    54a8:	b2e0      	uxtb	r0, r4
    54aa:	f000 f8ed 	bl	5688 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    54ae:	1e64      	subs	r4, r4, #1
    54b0:	b264      	sxtb	r4, r4
    54b2:	2c00      	cmp	r4, #0
    54b4:	daf2      	bge.n	549c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    54b6:	4903      	ldr	r1, [pc, #12]	; (54c4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    54b8:	2000      	movs	r0, #0
    54ba:	7048      	strb	r0, [r1, #1]
    54bc:	bd70      	pop	{r4, r5, r6, pc}
    54be:	0000      	.short	0x0000
    54c0:	20000e16 	.word	0x20000e16
    54c4:	2000016c 	.word	0x2000016c

000054c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    54c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    54cc:	2400      	movs	r4, #0
    54ce:	4625      	mov	r5, r4
    54d0:	4e18      	ldr	r6, [pc, #96]	; (5534 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    54d2:	e029      	b.n	5528 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    54d4:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    54d8:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    54dc:	07c0      	lsls	r0, r0, #31
    54de:	d021      	beq.n	5524 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    54e0:	4628      	mov	r0, r5
    54e2:	f000 f843 	bl	556c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    54e6:	4603      	mov	r3, r0
    54e8:	f7ff ff44 	bl	5374 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    54ec:	4601      	mov	r1, r0
    54ee:	2000      	movs	r0, #0
    54f0:	2b10      	cmp	r3, #16
    54f2:	d009      	beq.n	5508 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    54f4:	18f2      	adds	r2, r6, r3
    54f6:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    54fa:	f1bc 0f01 	cmp.w	ip, #1
    54fe:	d002      	beq.n	5506 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5500:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5504:	b102      	cbz	r2, 5508 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5506:	2001      	movs	r0, #1
    5508:	1e40      	subs	r0, r0, #1
    550a:	4201      	tst	r1, r0
    550c:	d10a      	bne.n	5524 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    550e:	480a      	ldr	r0, [pc, #40]	; (5538 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5510:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5514:	5503      	strb	r3, [r0, r4]
    5516:	4620      	mov	r0, r4
    5518:	1c64      	adds	r4, r4, #1
    551a:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    551e:	b2e4      	uxtb	r4, r4
    5520:	f002 fb02 	bl	7b28 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5524:	1c6d      	adds	r5, r5, #1
    5526:	b2ed      	uxtb	r5, r5
    5528:	7830      	ldrb	r0, [r6, #0]
    552a:	42a8      	cmp	r0, r5
    552c:	d8d2      	bhi.n	54d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    552e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5532:	0000      	.short	0x0000
    5534:	20000e16 	.word	0x20000e16
    5538:	20000170 	.word	0x20000170
    553c:	4602      	mov	r2, r0
    553e:	4809      	ldr	r0, [pc, #36]	; (5564 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5540:	b510      	push	{r4, lr}
    5542:	7800      	ldrb	r0, [r0, #0]
    5544:	460b      	mov	r3, r1
    5546:	b158      	cbz	r0, 5560 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5548:	4807      	ldr	r0, [pc, #28]	; (5568 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    554a:	7881      	ldrb	r1, [r0, #2]
    554c:	b141      	cbz	r1, 5560 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    554e:	b10b      	cbz	r3, 5554 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5550:	1cc0      	adds	r0, r0, #3
    5552:	e001      	b.n	5558 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5554:	4804      	ldr	r0, [pc, #16]	; (5568 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5556:	3083      	adds	r0, #131	; 0x83
    5558:	f001 fe0e 	bl	7178 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    555c:	2001      	movs	r0, #1
    555e:	bd10      	pop	{r4, pc}
    5560:	2000      	movs	r0, #0
    5562:	bd10      	pop	{r4, pc}
    5564:	2000016c 	.word	0x2000016c
    5568:	20000e16 	.word	0x20000e16
    556c:	4908      	ldr	r1, [pc, #32]	; (5590 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    556e:	b510      	push	{r4, lr}
    5570:	4603      	mov	r3, r0
    5572:	2000      	movs	r0, #0
    5574:	788a      	ldrb	r2, [r1, #2]
    5576:	e006      	b.n	5586 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    5578:	180c      	adds	r4, r1, r0
    557a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    557e:	429c      	cmp	r4, r3
    5580:	d004      	beq.n	558c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    5582:	1c40      	adds	r0, r0, #1
    5584:	b2c0      	uxtb	r0, r0
    5586:	4282      	cmp	r2, r0
    5588:	d8f6      	bhi.n	5578 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    558a:	2010      	movs	r0, #16
    558c:	bd10      	pop	{r4, pc}
    558e:	0000      	.short	0x0000
    5590:	20000e16 	.word	0x20000e16
    5594:	b570      	push	{r4, r5, r6, lr}
    5596:	4b0c      	ldr	r3, [pc, #48]	; (55c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    5598:	4604      	mov	r4, r0
    559a:	7818      	ldrb	r0, [r3, #0]
    559c:	1c45      	adds	r5, r0, #1
    559e:	701d      	strb	r5, [r3, #0]
    55a0:	2810      	cmp	r0, #16
    55a2:	d303      	bcc.n	55ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    55a4:	2146      	movs	r1, #70	; 0x46
    55a6:	2028      	movs	r0, #40	; 0x28
    55a8:	f7ff f8b8 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55ac:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    55b0:	680d      	ldr	r5, [r1, #0]
    55b2:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    55b6:	8889      	ldrh	r1, [r1, #4]
    55b8:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    55bc:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    55c0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    55c4:	bd70      	pop	{r4, r5, r6, pc}
    55c6:	0000      	.short	0x0000
    55c8:	20000e16 	.word	0x20000e16
    55cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    55ce:	4c1a      	ldr	r4, [pc, #104]	; (5638 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    55d0:	4603      	mov	r3, r0
    55d2:	2000      	movs	r0, #0
    55d4:	7825      	ldrb	r5, [r4, #0]
    55d6:	e02a      	b.n	562e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    55d8:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    55dc:	780f      	ldrb	r7, [r1, #0]
    55de:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    55e2:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    55e6:	ea87 070c 	eor.w	r7, r7, ip
    55ea:	405e      	eors	r6, r3
    55ec:	443e      	add	r6, r7
    55ee:	784f      	ldrb	r7, [r1, #1]
    55f0:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    55f4:	ea87 070c 	eor.w	r7, r7, ip
    55f8:	443e      	add	r6, r7
    55fa:	788f      	ldrb	r7, [r1, #2]
    55fc:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    5600:	ea87 070c 	eor.w	r7, r7, ip
    5604:	443e      	add	r6, r7
    5606:	78cf      	ldrb	r7, [r1, #3]
    5608:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    560c:	ea87 070c 	eor.w	r7, r7, ip
    5610:	443e      	add	r6, r7
    5612:	790f      	ldrb	r7, [r1, #4]
    5614:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    5618:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    561c:	ea87 070c 	eor.w	r7, r7, ip
    5620:	443e      	add	r6, r7
    5622:	794f      	ldrb	r7, [r1, #5]
    5624:	4057      	eors	r7, r2
    5626:	42f7      	cmn	r7, r6
    5628:	d004      	beq.n	5634 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    562a:	1c40      	adds	r0, r0, #1
    562c:	b2c0      	uxtb	r0, r0
    562e:	4285      	cmp	r5, r0
    5630:	d8d2      	bhi.n	55d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    5632:	2010      	movs	r0, #16
    5634:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5636:	0000      	.short	0x0000
    5638:	20000e16 	.word	0x20000e16
    563c:	b570      	push	{r4, r5, r6, lr}
    563e:	4605      	mov	r5, r0
    5640:	f7ff ff94 	bl	556c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5644:	2810      	cmp	r0, #16
    5646:	d11c      	bne.n	5682 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    5648:	4c0e      	ldr	r4, [pc, #56]	; (5684 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    564a:	7820      	ldrb	r0, [r4, #0]
    564c:	1e40      	subs	r0, r0, #1
    564e:	b2c0      	uxtb	r0, r0
    5650:	7020      	strb	r0, [r4, #0]
    5652:	42a8      	cmp	r0, r5
    5654:	d015      	beq.n	5682 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    5656:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    565a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    565e:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5662:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5666:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    566a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    566e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5672:	7820      	ldrb	r0, [r4, #0]
    5674:	f7ff ff7a 	bl	556c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5678:	2810      	cmp	r0, #16
    567a:	d002      	beq.n	5682 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    567c:	4420      	add	r0, r4
    567e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5682:	bd70      	pop	{r4, r5, r6, pc}
    5684:	20000e16 	.word	0x20000e16
    5688:	4905      	ldr	r1, [pc, #20]	; (56a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    568a:	784a      	ldrb	r2, [r1, #1]
    568c:	1e52      	subs	r2, r2, #1
    568e:	704a      	strb	r2, [r1, #1]
    5690:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5694:	2200      	movs	r2, #0
    5696:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    569a:	f7ff bfcf 	b.w	563c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    569e:	0000      	.short	0x0000
    56a0:	20000e16 	.word	0x20000e16

000056a4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    56a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    56a8:	4604      	mov	r4, r0
    56aa:	f100 0580 	add.w	r5, r0, #128	; 0x80
    56ae:	f04f 0901 	mov.w	r9, #1
    56b2:	b171      	cbz	r1, 56d2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    56b4:	f104 079e 	add.w	r7, r4, #158	; 0x9e
    56b8:	1e7e      	subs	r6, r7, #1
    56ba:	2901      	cmp	r1, #1
    56bc:	d020      	beq.n	5700 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    56be:	2902      	cmp	r1, #2
    56c0:	d045      	beq.n	574e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xaa>
    56c2:	2903      	cmp	r1, #3
    56c4:	d11a      	bne.n	56fc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    56c6:	4639      	mov	r1, r7
    56c8:	4630      	mov	r0, r6
    56ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    56ce:	f004 b92a 	b.w	9926 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    56d2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
    56d6:	2100      	movs	r1, #0
    56d8:	f003 f90d 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    56dc:	f885 901d 	strb.w	r9, [r5, #29]
    56e0:	4820      	ldr	r0, [pc, #128]	; (5764 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    56e2:	6668      	str	r0, [r5, #100]	; 0x64
    56e4:	2007      	movs	r0, #7
    56e6:	66a8      	str	r0, [r5, #104]	; 0x68
    56e8:	f814 0fe4 	ldrb.w	r0, [r4, #228]!
    56ec:	f020 0004 	bic.w	r0, r0, #4
    56f0:	7020      	strb	r0, [r4, #0]
    56f2:	20fe      	movs	r0, #254	; 0xfe
    56f4:	f885 009c 	strb.w	r0, [r5, #156]	; 0x9c
    56f8:	207f      	movs	r0, #127	; 0x7f
    56fa:	7468      	strb	r0, [r5, #17]
    56fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5700:	f04f 0800 	mov.w	r8, #0
    5704:	f8a4 8226 	strh.w	r8, [r4, #550]	; 0x226
    5708:	f884 821b 	strb.w	r8, [r4, #539]	; 0x21b
    570c:	6921      	ldr	r1, [r4, #16]
    570e:	4816      	ldr	r0, [pc, #88]	; (5768 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>)
    5710:	460a      	mov	r2, r1
    5712:	4408      	add	r0, r1
    5714:	fbb0 f0f1 	udiv	r0, r0, r1
    5718:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    571c:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5720:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    5724:	8b63      	ldrh	r3, [r4, #26]
    5726:	4628      	mov	r0, r5
    5728:	f000 f820 	bl	576c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>
    572c:	4639      	mov	r1, r7
    572e:	4630      	mov	r0, r6
    5730:	f004 f8f9 	bl	9926 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5734:	f003 f841 	bl	87ba <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5738:	b118      	cbz	r0, 5742 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9e>
    573a:	6960      	ldr	r0, [r4, #20]
    573c:	f000 fa4e 	bl	5bdc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    5740:	b110      	cbz	r0, 5748 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa4>
    5742:	f884 820c 	strb.w	r8, [r4, #524]	; 0x20c
    5746:	e7d9      	b.n	56fc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    5748:	f884 920c 	strb.w	r9, [r4, #524]	; 0x20c
    574c:	e7d6      	b.n	56fc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    574e:	6901      	ldr	r1, [r0, #16]
    5750:	f8b4 32ca 	ldrh.w	r3, [r4, #714]	; 0x2ca
    5754:	f8d4 22c4 	ldr.w	r2, [r4, #708]	; 0x2c4
    5758:	4628      	mov	r0, r5
    575a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    575e:	f000 b805 	b.w	576c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>
    5762:	0000      	.short	0x0000
    5764:	3004492f 	.word	0x3004492f
    5768:	01c9c37f 	.word	0x01c9c37f
    576c:	b510      	push	{r4, lr}
    576e:	2400      	movs	r4, #0
    5770:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
    5774:	f830 4f48 	ldrh.w	r4, [r0, #72]!
    5778:	434c      	muls	r4, r1
    577a:	fbb4 f4f2 	udiv	r4, r4, r2
    577e:	f820 4910 	strh.w	r4, [r0], #-16
    5782:	f240 2471 	movw	r4, #625	; 0x271
    5786:	4363      	muls	r3, r4
    5788:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    578c:	1e5b      	subs	r3, r3, #1
    578e:	fbb3 f3f2 	udiv	r3, r3, r2
    5792:	81c3      	strh	r3, [r0, #14]
    5794:	4b09      	ldr	r3, [pc, #36]	; (57bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x118>)
    5796:	fbb3 f3f2 	udiv	r3, r3, r2
    579a:	1c5b      	adds	r3, r3, #1
    579c:	8283      	strh	r3, [r0, #20]
    579e:	8903      	ldrh	r3, [r0, #8]
    57a0:	4363      	muls	r3, r4
    57a2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    57a6:	1e5b      	subs	r3, r3, #1
    57a8:	fbb3 f3f2 	udiv	r3, r3, r2
    57ac:	6043      	str	r3, [r0, #4]
    57ae:	6803      	ldr	r3, [r0, #0]
    57b0:	434b      	muls	r3, r1
    57b2:	fbb3 f1f2 	udiv	r1, r3, r2
    57b6:	6001      	str	r1, [r0, #0]
    57b8:	bd10      	pop	{r4, pc}
    57ba:	0000      	.short	0x0000
    57bc:	02625a00 	.word	0x02625a00

000057c0 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    57c0:	4904      	ldr	r1, [pc, #16]	; (57d4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    57c2:	7c89      	ldrb	r1, [r1, #18]
    57c4:	0749      	lsls	r1, r1, #29
    57c6:	d400      	bmi.n	57ca <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    57c8:	b108      	cbz	r0, 57ce <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    57ca:	2000      	movs	r0, #0
    57cc:	4770      	bx	lr
    57ce:	2001      	movs	r0, #1
    57d0:	4770      	bx	lr
    57d2:	0000      	.short	0x0000
    57d4:	20000d54 	.word	0x20000d54

000057d8 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    57d8:	4803      	ldr	r0, [pc, #12]	; (57e8 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    57da:	7c80      	ldrb	r0, [r0, #18]
    57dc:	0780      	lsls	r0, r0, #30
    57de:	d401      	bmi.n	57e4 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    57e0:	2001      	movs	r0, #1
    57e2:	4770      	bx	lr
    57e4:	2000      	movs	r0, #0
    57e6:	4770      	bx	lr
    57e8:	20000d54 	.word	0x20000d54

000057ec <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    57ec:	4803      	ldr	r0, [pc, #12]	; (57fc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    57ee:	7c80      	ldrb	r0, [r0, #18]
    57f0:	07c0      	lsls	r0, r0, #31
    57f2:	d001      	beq.n	57f8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    57f4:	2000      	movs	r0, #0
    57f6:	4770      	bx	lr
    57f8:	2001      	movs	r0, #1
    57fa:	4770      	bx	lr
    57fc:	20000d54 	.word	0x20000d54

00005800 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    5800:	b538      	push	{r3, r4, r5, lr}
    5802:	b318      	cbz	r0, 584c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x4c>
    5804:	7a03      	ldrb	r3, [r0, #8]
    5806:	f88d 3000 	strb.w	r3, [sp]
    580a:	9b00      	ldr	r3, [sp, #0]
    580c:	9300      	str	r3, [sp, #0]
    580e:	f89d 3000 	ldrb.w	r3, [sp]
    5812:	2b00      	cmp	r3, #0
    5814:	d126      	bne.n	5864 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x64>
    5816:	6041      	str	r1, [r0, #4]
    5818:	f100 0108 	add.w	r1, r0, #8
    581c:	700a      	strb	r2, [r1, #0]
    581e:	f3ef 8210 	mrs	r2, PRIMASK
    5822:	b672      	cpsid	i
    5824:	4b10      	ldr	r3, [pc, #64]	; (5868 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x68>)
    5826:	6003      	str	r3, [r0, #0]
    5828:	1f19      	subs	r1, r3, #4
    582a:	684c      	ldr	r4, [r1, #4]
    582c:	7a24      	ldrb	r4, [r4, #8]
    582e:	f88d 4000 	strb.w	r4, [sp]
    5832:	9c00      	ldr	r4, [sp, #0]
    5834:	9400      	str	r4, [sp, #0]
    5836:	f89d 5000 	ldrb.w	r5, [sp]
    583a:	2d01      	cmp	r5, #1
    583c:	d004      	beq.n	5848 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x48>
    583e:	680b      	ldr	r3, [r1, #0]
    5840:	6018      	str	r0, [r3, #0]
    5842:	6008      	str	r0, [r1, #0]
    5844:	b13a      	cbz	r2, 5856 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x56>
    5846:	e007      	b.n	5858 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x58>
    5848:	600b      	str	r3, [r1, #0]
    584a:	e7f9      	b.n	5840 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x40>
    584c:	f44f 6192 	mov.w	r1, #1168	; 0x490
    5850:	2010      	movs	r0, #16
    5852:	f7fe ff63 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5856:	b662      	cpsie	i
    5858:	4804      	ldr	r0, [pc, #16]	; (586c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x6c>)
    585a:	7800      	ldrb	r0, [r0, #0]
    585c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5860:	f7fe bd52 	b.w	4308 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5864:	bd38      	pop	{r3, r4, r5, pc}
    5866:	0000      	.short	0x0000
    5868:	20000d84 	.word	0x20000d84
    586c:	2000018c 	.word	0x2000018c

00005870 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    5870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5874:	4f47      	ldr	r7, [pc, #284]	; (5994 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x124>)
    5876:	f8df 9120 	ldr.w	r9, [pc, #288]	; 5998 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    587a:	4682      	mov	sl, r0
    587c:	2600      	movs	r6, #0
    587e:	6878      	ldr	r0, [r7, #4]
    5880:	7a00      	ldrb	r0, [r0, #8]
    5882:	f88d 0000 	strb.w	r0, [sp]
    5886:	9800      	ldr	r0, [sp, #0]
    5888:	9000      	str	r0, [sp, #0]
    588a:	f89d 1000 	ldrb.w	r1, [sp]
    588e:	2927      	cmp	r1, #39	; 0x27
    5890:	d106      	bne.n	58a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>
    5892:	f899 1013 	ldrb.w	r1, [r9, #19]
    5896:	b119      	cbz	r1, 58a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>
    5898:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    589c:	2800      	cmp	r0, #0
    589e:	d06c      	beq.n	597a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    58a0:	f88d 6000 	strb.w	r6, [sp]
    58a4:	4668      	mov	r0, sp
    58a6:	f000 f88b 	bl	59c0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x10>
    58aa:	f89d 1000 	ldrb.w	r1, [sp]
    58ae:	2900      	cmp	r1, #0
    58b0:	d1f8      	bne.n	58a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    58b2:	2800      	cmp	r0, #0
    58b4:	d061      	beq.n	597a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    58b6:	4604      	mov	r4, r0
    58b8:	7a00      	ldrb	r0, [r0, #8]
    58ba:	f88d 0000 	strb.w	r0, [sp]
    58be:	9800      	ldr	r0, [sp, #0]
    58c0:	9000      	str	r0, [sp, #0]
    58c2:	f89d 5000 	ldrb.w	r5, [sp]
    58c6:	1ea8      	subs	r0, r5, #2
    58c8:	2826      	cmp	r0, #38	; 0x26
    58ca:	d25d      	bcs.n	5988 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    58cc:	e8df f000 	tbb	[pc, r0]
    58d0:	1a5c2213 	.word	0x1a5c2213
    58d4:	3e22225c 	.word	0x3e22225c
    58d8:	22222222 	.word	0x22222222
    58dc:	5c1a5c22 	.word	0x5c1a5c22
    58e0:	5c1a2222 	.word	0x5c1a2222
    58e4:	225c5c5c 	.word	0x225c5c5c
    58e8:	1a225c5c 	.word	0x1a225c5c
    58ec:	435c2222 	.word	0x435c2222
    58f0:	2f5c5c1a 	.word	0x2f5c5c1a
    58f4:	4c34      	.short	0x4c34
    58f6:	6862      	ldr	r2, [r4, #4]
    58f8:	bb7a      	cbnz	r2, 595a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    58fa:	f240 318a 	movw	r1, #906	; 0x38a
    58fe:	e040      	b.n	5982 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    5900:	7226      	strb	r6, [r4, #8]
    5902:	e044      	b.n	598e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    5904:	4825      	ldr	r0, [pc, #148]	; (599c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12c>)
    5906:	6803      	ldr	r3, [r0, #0]
    5908:	b11b      	cbz	r3, 5912 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    590a:	6860      	ldr	r0, [r4, #4]
    590c:	462a      	mov	r2, r5
    590e:	4651      	mov	r1, sl
    5910:	4798      	blx	r3
    5912:	e7f5      	b.n	5900 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    5914:	462a      	mov	r2, r5
    5916:	4621      	mov	r1, r4
    5918:	4650      	mov	r0, sl
    591a:	f000 f879 	bl	5a10 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x60>
    591e:	b110      	cbz	r0, 5926 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    5920:	2d0d      	cmp	r5, #13
    5922:	d034      	beq.n	598e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    5924:	e7ec      	b.n	5900 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    5926:	2d0d      	cmp	r5, #13
    5928:	d031      	beq.n	598e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    592a:	7226      	strb	r6, [r4, #8]
    592c:	e7a7      	b.n	587e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe>
    592e:	6862      	ldr	r2, [r4, #4]
    5930:	b99a      	cbnz	r2, 595a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    5932:	f240 412b 	movw	r1, #1067	; 0x42b
    5936:	e024      	b.n	5982 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    5938:	f88a 6001 	strb.w	r6, [sl, #1]
    593c:	2115      	movs	r1, #21
    593e:	f88a 1000 	strb.w	r1, [sl]
    5942:	f8d4 1009 	ldr.w	r1, [r4, #9]
    5946:	f8ca 1004 	str.w	r1, [sl, #4]
    594a:	e7d9      	b.n	5900 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    594c:	6862      	ldr	r2, [r4, #4]
    594e:	b922      	cbnz	r2, 595a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    5950:	f240 413d 	movw	r1, #1085	; 0x43d
    5954:	e015      	b.n	5982 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    5956:	6862      	ldr	r2, [r4, #4]
    5958:	b11a      	cbz	r2, 5962 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf2>
    595a:	4651      	mov	r1, sl
    595c:	4620      	mov	r0, r4
    595e:	4790      	blx	r2
    5960:	e7ce      	b.n	5900 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    5962:	f240 4147 	movw	r1, #1095	; 0x447
    5966:	e00c      	b.n	5982 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    5968:	480d      	ldr	r0, [pc, #52]	; (59a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>)
    596a:	6802      	ldr	r2, [r0, #0]
    596c:	b122      	cbz	r2, 5978 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    596e:	6860      	ldr	r0, [r4, #4]
    5970:	b128      	cbz	r0, 597e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    5972:	8800      	ldrh	r0, [r0, #0]
    5974:	4651      	mov	r1, sl
    5976:	4790      	blx	r2
    5978:	2002      	movs	r0, #2
    597a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    597e:	f44f 618a 	mov.w	r1, #1104	; 0x450
    5982:	2010      	movs	r0, #16
    5984:	f7fe feca 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5988:	f240 416b 	movw	r1, #1131	; 0x46b
    598c:	e7f9      	b.n	5982 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    598e:	2004      	movs	r0, #4
    5990:	e7f3      	b.n	597a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    5992:	0000      	.short	0x0000
    5994:	20000d80 	.word	0x20000d80
    5998:	20000d54 	.word	0x20000d54
    599c:	200000d0 	.word	0x200000d0
    59a0:	200000d4 	.word	0x200000d4

000059a4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    59a4:	4901      	ldr	r1, [pc, #4]	; (59ac <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    59a6:	7008      	strb	r0, [r1, #0]
    59a8:	f000 b902 	b.w	5bb0 <__kernel_ram_size+0xd8>
    59ac:	2000018c 	.word	0x2000018c

000059b0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    59b0:	4902      	ldr	r1, [pc, #8]	; (59bc <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    59b2:	4801      	ldr	r0, [pc, #4]	; (59b8 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    59b4:	6008      	str	r0, [r1, #0]
    59b6:	4770      	bx	lr
    59b8:	00009c1f 	.word	0x00009c1f
    59bc:	200000d0 	.word	0x200000d0
    59c0:	b538      	push	{r3, r4, r5, lr}
    59c2:	4602      	mov	r2, r0
    59c4:	4b11      	ldr	r3, [pc, #68]	; (5a0c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x5c>)
    59c6:	2000      	movs	r0, #0
    59c8:	7010      	strb	r0, [r2, #0]
    59ca:	6858      	ldr	r0, [r3, #4]
    59cc:	7a01      	ldrb	r1, [r0, #8]
    59ce:	f88d 1000 	strb.w	r1, [sp]
    59d2:	9900      	ldr	r1, [sp, #0]
    59d4:	9100      	str	r1, [sp, #0]
    59d6:	f89d 5000 	ldrb.w	r5, [sp]
    59da:	2401      	movs	r4, #1
    59dc:	2d01      	cmp	r5, #1
    59de:	d006      	beq.n	59ee <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x3e>
    59e0:	f3ef 8110 	mrs	r1, PRIMASK
    59e4:	b672      	cpsid	i
    59e6:	6805      	ldr	r5, [r0, #0]
    59e8:	605d      	str	r5, [r3, #4]
    59ea:	b111      	cbz	r1, 59f2 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x42>
    59ec:	e002      	b.n	59f4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x44>
    59ee:	2000      	movs	r0, #0
    59f0:	bd38      	pop	{r3, r4, r5, pc}
    59f2:	b662      	cpsie	i
    59f4:	7a01      	ldrb	r1, [r0, #8]
    59f6:	f88d 1000 	strb.w	r1, [sp]
    59fa:	9900      	ldr	r1, [sp, #0]
    59fc:	9100      	str	r1, [sp, #0]
    59fe:	f89d 3000 	ldrb.w	r3, [sp]
    5a02:	2b00      	cmp	r3, #0
    5a04:	d1f4      	bne.n	59f0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x40>
    5a06:	7014      	strb	r4, [r2, #0]
    5a08:	bd38      	pop	{r3, r4, r5, pc}
    5a0a:	0000      	.short	0x0000
    5a0c:	20000d80 	.word	0x20000d80
    5a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a14:	b086      	sub	sp, #24
    5a16:	000f      	movs	r7, r1
    5a18:	4604      	mov	r4, r0
    5a1a:	4691      	mov	r9, r2
    5a1c:	d013      	beq.n	5a46 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x96>
    5a1e:	6878      	ldr	r0, [r7, #4]
    5a20:	b188      	cbz	r0, 5a46 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x96>
    5a22:	f100 0580 	add.w	r5, r0, #128	; 0x80
    5a26:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    5a2a:	8806      	ldrh	r6, [r0, #0]
    5a2c:	4610      	mov	r0, r2
    5a2e:	f04f 0800 	mov.w	r8, #0
    5a32:	2a12      	cmp	r2, #18
    5a34:	d078      	beq.n	5b28 <__kernel_ram_size+0x50>
    5a36:	dc09      	bgt.n	5a4c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x9c>
    5a38:	f04f 0a01 	mov.w	sl, #1
    5a3c:	2803      	cmp	r0, #3
    5a3e:	d00a      	beq.n	5a56 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xa6>
    5a40:	2a0d      	cmp	r2, #13
    5a42:	d170      	bne.n	5b26 <__kernel_ram_size+0x4e>
    5a44:	e01a      	b.n	5a7c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xcc>
    5a46:	f240 210b 	movw	r1, #523	; 0x20b
    5a4a:	e0ac      	b.n	5ba6 <__kernel_ram_size+0xce>
    5a4c:	281e      	cmp	r0, #30
    5a4e:	d04c      	beq.n	5aea <__kernel_ram_size+0x12>
    5a50:	2a1f      	cmp	r2, #31
    5a52:	d17f      	bne.n	5b54 <__kernel_ram_size+0x7c>
    5a54:	e026      	b.n	5aa4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xf4>
    5a56:	2d00      	cmp	r5, #0
    5a58:	d00f      	beq.n	5a7a <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xca>
    5a5a:	f884 8001 	strb.w	r8, [r4, #1]
    5a5e:	f884 a000 	strb.w	sl, [r4]
    5a62:	f884 8004 	strb.w	r8, [r4, #4]
    5a66:	f8a4 6005 	strh.w	r6, [r4, #5]
    5a6a:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
    5a6e:	71e0      	strb	r0, [r4, #7]
    5a70:	f835 0f60 	ldrh.w	r0, [r5, #96]!
    5a74:	8120      	strh	r0, [r4, #8]
    5a76:	8868      	ldrh	r0, [r5, #2]
    5a78:	8160      	strh	r0, [r4, #10]
    5a7a:	e075      	b.n	5b68 <__kernel_ram_size+0x90>
    5a7c:	4630      	mov	r0, r6
    5a7e:	f7ff f9ff 	bl	4e80 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5a82:	b160      	cbz	r0, 5a9e <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xee>
    5a84:	f884 8001 	strb.w	r8, [r4, #1]
    5a88:	220d      	movs	r2, #13
    5a8a:	7022      	strb	r2, [r4, #0]
    5a8c:	80e6      	strh	r6, [r4, #6]
    5a8e:	f8a4 a008 	strh.w	sl, [r4, #8]
    5a92:	4641      	mov	r1, r8
    5a94:	f884 a004 	strb.w	sl, [r4, #4]
    5a98:	f003 fbb1 	bl	91fe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    5a9c:	e064      	b.n	5b68 <__kernel_ram_size+0x90>
    5a9e:	f240 1153 	movw	r1, #339	; 0x153
    5aa2:	e080      	b.n	5ba6 <__kernel_ram_size+0xce>
    5aa4:	f7ff fea2 	bl	57ec <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    5aa8:	b3e8      	cbz	r0, 5b26 <__kernel_ram_size+0x4e>
    5aaa:	f887 8008 	strb.w	r8, [r7, #8]
    5aae:	4630      	mov	r0, r6
    5ab0:	f8ad 6000 	strh.w	r6, [sp]
    5ab4:	a902      	add	r1, sp, #8
    5ab6:	f003 fea3 	bl	9800 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5aba:	b110      	cbz	r0, 5ac2 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x112>
    5abc:	f240 1125 	movw	r1, #293	; 0x125
    5ac0:	e071      	b.n	5ba6 <__kernel_ram_size+0xce>
    5ac2:	9803      	ldr	r0, [sp, #12]
    5ac4:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    5ac8:	f88d 1002 	strb.w	r1, [sp, #2]
    5acc:	7841      	ldrb	r1, [r0, #1]
    5ace:	f88d 1003 	strb.w	r1, [sp, #3]
    5ad2:	8840      	ldrh	r0, [r0, #2]
    5ad4:	f8ad 0004 	strh.w	r0, [sp, #4]
    5ad8:	2102      	movs	r1, #2
    5ada:	4668      	mov	r0, sp
    5adc:	f004 ff3b 	bl	a956 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    5ae0:	2800      	cmp	r0, #0
    5ae2:	d034      	beq.n	5b4e <__kernel_ram_size+0x76>
    5ae4:	f240 113b 	movw	r1, #315	; 0x13b
    5ae8:	e05d      	b.n	5ba6 <__kernel_ram_size+0xce>
    5aea:	f7ff fe75 	bl	57d8 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    5aee:	b1d0      	cbz	r0, 5b26 <__kernel_ram_size+0x4e>
    5af0:	f887 8008 	strb.w	r8, [r7, #8]
    5af4:	a903      	add	r1, sp, #12
    5af6:	4630      	mov	r0, r6
    5af8:	f004 fe24 	bl	a744 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    5afc:	b110      	cbz	r0, 5b04 <__kernel_ram_size+0x2c>
    5afe:	f44f 71a1 	mov.w	r1, #322	; 0x142
    5b02:	e050      	b.n	5ba6 <__kernel_ram_size+0xce>
    5b04:	f8ad 6000 	strh.w	r6, [sp]
    5b08:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    5b0c:	f8ad 0002 	strh.w	r0, [sp, #2]
    5b10:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    5b14:	f8ad 0004 	strh.w	r0, [sp, #4]
    5b18:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    5b1c:	f8ad 0006 	strh.w	r0, [sp, #6]
    5b20:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    5b24:	e001      	b.n	5b2a <__kernel_ram_size+0x52>
    5b26:	e015      	b.n	5b54 <__kernel_ram_size+0x7c>
    5b28:	e009      	b.n	5b3e <__kernel_ram_size+0x66>
    5b2a:	f8ad 0008 	strh.w	r0, [sp, #8]
    5b2e:	4668      	mov	r0, sp
    5b30:	f004 fe41 	bl	a7b6 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    5b34:	2800      	cmp	r0, #0
    5b36:	d00a      	beq.n	5b4e <__kernel_ram_size+0x76>
    5b38:	f240 114b 	movw	r1, #331	; 0x14b
    5b3c:	e033      	b.n	5ba6 <__kernel_ram_size+0xce>
    5b3e:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    5b42:	f000 0001 	and.w	r0, r0, #1
    5b46:	f7ff fe3b 	bl	57c0 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    5b4a:	b130      	cbz	r0, 5b5a <__kernel_ram_size+0x82>
    5b4c:	2000      	movs	r0, #0
    5b4e:	b006      	add	sp, #24
    5b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b54:	f1b9 0f0a 	cmp.w	r9, #10
    5b58:	d008      	beq.n	5b6c <__kernel_ram_size+0x94>
    5b5a:	4814      	ldr	r0, [pc, #80]	; (5bac <__kernel_ram_size+0xd4>)
    5b5c:	6803      	ldr	r3, [r0, #0]
    5b5e:	b11b      	cbz	r3, 5b68 <__kernel_ram_size+0x90>
    5b60:	6878      	ldr	r0, [r7, #4]
    5b62:	464a      	mov	r2, r9
    5b64:	4621      	mov	r1, r4
    5b66:	4798      	blx	r3
    5b68:	2001      	movs	r0, #1
    5b6a:	e7f0      	b.n	5b4e <__kernel_ram_size+0x76>
    5b6c:	4630      	mov	r0, r6
    5b6e:	f7ff f971 	bl	4e54 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5b72:	f003 fb13 	bl	919c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5b76:	b1a0      	cbz	r0, 5ba2 <__kernel_ram_size+0xca>
    5b78:	4630      	mov	r0, r6
    5b7a:	f003 fd99 	bl	96b0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5b7e:	2100      	movs	r1, #0
    5b80:	4630      	mov	r0, r6
    5b82:	f7ff f805 	bl	4b90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5b86:	2d00      	cmp	r5, #0
    5b88:	d0ee      	beq.n	5b68 <__kernel_ram_size+0x90>
    5b8a:	f884 8001 	strb.w	r8, [r4, #1]
    5b8e:	210a      	movs	r1, #10
    5b90:	7021      	strb	r1, [r4, #0]
    5b92:	f884 8004 	strb.w	r8, [r4, #4]
    5b96:	f8a4 6005 	strh.w	r6, [r4, #5]
    5b9a:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
    5b9e:	71e0      	strb	r0, [r4, #7]
    5ba0:	e7e2      	b.n	5b68 <__kernel_ram_size+0x90>
    5ba2:	f44f 7113 	mov.w	r1, #588	; 0x24c
    5ba6:	2010      	movs	r0, #16
    5ba8:	f7fe fdb8 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bac:	200000d8 	.word	0x200000d8
    5bb0:	4809      	ldr	r0, [pc, #36]	; (5bd8 <__kernel_ram_size+0x100>)
    5bb2:	b510      	push	{r4, lr}
    5bb4:	2100      	movs	r1, #0
    5bb6:	6141      	str	r1, [r0, #20]
    5bb8:	6181      	str	r1, [r0, #24]
    5bba:	61c1      	str	r1, [r0, #28]
    5bbc:	6201      	str	r1, [r0, #32]
    5bbe:	2212      	movs	r2, #18
    5bc0:	f002 fe99 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5bc4:	4804      	ldr	r0, [pc, #16]	; (5bd8 <__kernel_ram_size+0x100>)
    5bc6:	3018      	adds	r0, #24
    5bc8:	1f02      	subs	r2, r0, #4
    5bca:	1f01      	subs	r1, r0, #4
    5bcc:	2301      	movs	r3, #1
    5bce:	6050      	str	r0, [r2, #4]
    5bd0:	730b      	strb	r3, [r1, #12]
    5bd2:	6010      	str	r0, [r2, #0]
    5bd4:	bd10      	pop	{r4, pc}
    5bd6:	0000      	.short	0x0000
    5bd8:	20000d6c 	.word	0x20000d6c

00005bdc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    5bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bde:	f06f 021f 	mvn.w	r2, #31
    5be2:	0c01      	lsrs	r1, r0, #16
    5be4:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    5be8:	251f      	movs	r5, #31
    5bea:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    5bee:	3854      	subs	r0, #84	; 0x54
    5bf0:	d00d      	beq.n	5c0e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    5bf2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    5bf6:	3855      	subs	r0, #85	; 0x55
    5bf8:	d009      	beq.n	5c0e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    5bfa:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    5bfe:	38aa      	subs	r0, #170	; 0xaa
    5c00:	d005      	beq.n	5c0e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    5c02:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    5c06:	38aa      	subs	r0, #170	; 0xaa
    5c08:	d001      	beq.n	5c0e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    5c0a:	2001      	movs	r0, #1
    5c0c:	e000      	b.n	5c10 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    5c0e:	2000      	movs	r0, #0
    5c10:	2200      	movs	r2, #0
    5c12:	4613      	mov	r3, r2
    5c14:	ea4f 0402 	mov.w	r4, r2
    5c18:	ea82 0701 	eor.w	r7, r2, r1
    5c1c:	43ff      	mvns	r7, r7
    5c1e:	431f      	orrs	r7, r3
    5c20:	1c7f      	adds	r7, r7, #1
    5c22:	d00f      	beq.n	5c44 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    5c24:	f006 0701 	and.w	r7, r6, #1
    5c28:	0852      	lsrs	r2, r2, #1
    5c2a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    5c2e:	f005 0701 	and.w	r7, r5, #1
    5c32:	085b      	lsrs	r3, r3, #1
    5c34:	0876      	lsrs	r6, r6, #1
    5c36:	086d      	lsrs	r5, r5, #1
    5c38:	1c64      	adds	r4, r4, #1
    5c3a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    5c3e:	2c16      	cmp	r4, #22
    5c40:	d3ea      	bcc.n	5c18 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    5c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c44:	2000      	movs	r0, #0
    5c46:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005c48 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    5c48:	b510      	push	{r4, lr}
    5c4a:	4804      	ldr	r0, [pc, #16]	; (5c5c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    5c4c:	f003 ff3d 	bl	9aca <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x16>
    5c50:	4802      	ldr	r0, [pc, #8]	; (5c5c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    5c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5c56:	3008      	adds	r0, #8
    5c58:	f003 bf37 	b.w	9aca <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x16>
    5c5c:	200000dc 	.word	0x200000dc

00005c60 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    5c60:	4801      	ldr	r0, [pc, #4]	; (5c68 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    5c62:	f000 b809 	b.w	5c78 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    5c66:	0000      	.short	0x0000
    5c68:	200000dc 	.word	0x200000dc

00005c6c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    5c6c:	4801      	ldr	r0, [pc, #4]	; (5c74 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    5c6e:	f000 b803 	b.w	5c78 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    5c72:	0000      	.short	0x0000
    5c74:	200000e4 	.word	0x200000e4
    5c78:	b510      	push	{r4, lr}
    5c7a:	e9d0 2100 	ldrd	r2, r1, [r0]
    5c7e:	4b09      	ldr	r3, [pc, #36]	; (5ca4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    5c80:	4c09      	ldr	r4, [pc, #36]	; (5ca8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    5c82:	4353      	muls	r3, r2
    5c84:	4354      	muls	r4, r2
    5c86:	4051      	eors	r1, r2
    5c88:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    5c8c:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    5c90:	ea4f 41f1 	mov.w	r1, r1, ror #19
    5c94:	e9c0 2100 	strd	r2, r1, [r0]
    5c98:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    5c9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5ca0:	4618      	mov	r0, r3
    5ca2:	bd10      	pop	{r4, pc}
    5ca4:	c6ef3760 	.word	0xc6ef3760
    5ca8:	9e3779bb 	.word	0x9e3779bb

00005cac <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    5cac:	b570      	push	{r4, r5, r6, lr}
    5cae:	4604      	mov	r4, r0
    5cb0:	7c00      	ldrb	r0, [r0, #16]
    5cb2:	b300      	cbz	r0, 5cf6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    5cb4:	2802      	cmp	r0, #2
    5cb6:	d01e      	beq.n	5cf6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    5cb8:	f05f 0001 	movs.w	r0, #1
    5cbc:	f104 0151 	add.w	r1, r4, #81	; 0x51
    5cc0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    5cc4:	460d      	mov	r5, r1
    5cc6:	b1c0      	cbz	r0, 5cfa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    5cc8:	7de0      	ldrb	r0, [r4, #23]
    5cca:	b1f0      	cbz	r0, 5d0a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    5ccc:	f8d4 0011 	ldr.w	r0, [r4, #17]
    5cd0:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    5cd4:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    5cd8:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    5cdc:	7c20      	ldrb	r0, [r4, #16]
    5cde:	f003 ff26 	bl	9b2e <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x4a>
    5ce2:	7620      	strb	r0, [r4, #24]
    5ce4:	2008      	movs	r0, #8
    5ce6:	7660      	strb	r0, [r4, #25]
    5ce8:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    5cec:	4629      	mov	r1, r5
    5cee:	f003 ff0a 	bl	9b06 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x22>
    5cf2:	b9a8      	cbnz	r0, 5d20 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    5cf4:	e00e      	b.n	5d14 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    5cf6:	2000      	movs	r0, #0
    5cf8:	e7e0      	b.n	5cbc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    5cfa:	2000      	movs	r0, #0
    5cfc:	f7ff face 	bl	529c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    5d00:	2800      	cmp	r0, #0
    5d02:	d1eb      	bne.n	5cdc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    5d04:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
    5d08:	e001      	b.n	5d0e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    5d0a:	f240 41bc 	movw	r1, #1212	; 0x4bc
    5d0e:	202d      	movs	r0, #45	; 0x2d
    5d10:	f7fe fd04 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d14:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    5d18:	4629      	mov	r1, r5
    5d1a:	f003 fefd 	bl	9b18 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x34>
    5d1e:	b100      	cbz	r0, 5d22 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    5d20:	2001      	movs	r0, #1
    5d22:	76a0      	strb	r0, [r4, #26]
    5d24:	7e20      	ldrb	r0, [r4, #24]
    5d26:	b130      	cbz	r0, 5d36 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    5d28:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    5d2c:	f104 0158 	add.w	r1, r4, #88	; 0x58
    5d30:	f003 fd32 	bl	9798 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    5d34:	7660      	strb	r0, [r4, #25]
    5d36:	f7ff fb6f 	bl	5418 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    5d3a:	490c      	ldr	r1, [pc, #48]	; (5d6c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    5d3c:	fba0 2301 	umull	r2, r3, r0, r1
    5d40:	f104 0048 	add.w	r0, r4, #72	; 0x48
    5d44:	f004 f8bd 	bl	9ec2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    5d48:	2100      	movs	r1, #0
    5d4a:	4620      	mov	r0, r4
    5d4c:	f004 f867 	bl	9e1e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4e>
    5d50:	2000      	movs	r0, #0
    5d52:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    5d56:	78a0      	ldrb	r0, [r4, #2]
    5d58:	0740      	lsls	r0, r0, #29
    5d5a:	d505      	bpl.n	5d68 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    5d5c:	4620      	mov	r0, r4
    5d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5d62:	2100      	movs	r1, #0
    5d64:	f000 bd40 	b.w	67e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x598>
    5d68:	bd70      	pop	{r4, r5, r6, pc}
    5d6a:	0000      	.short	0x0000
    5d6c:	000f4240 	.word	0x000f4240

00005d70 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    5d70:	b530      	push	{r4, r5, lr}
    5d72:	460c      	mov	r4, r1
    5d74:	b08d      	sub	sp, #52	; 0x34
    5d76:	4605      	mov	r5, r0
    5d78:	4601      	mov	r1, r0
    5d7a:	2224      	movs	r2, #36	; 0x24
    5d7c:	a802      	add	r0, sp, #8
    5d7e:	f002 fd40 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5d82:	a80b      	add	r0, sp, #44	; 0x2c
    5d84:	f004 f8fa 	bl	9f7c <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    5d88:	7aa0      	ldrb	r0, [r4, #10]
    5d8a:	f88d 0018 	strb.w	r0, [sp, #24]
    5d8e:	7820      	ldrb	r0, [r4, #0]
    5d90:	f88d 0008 	strb.w	r0, [sp, #8]
    5d94:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    5d98:	f8ad 0000 	strh.w	r0, [sp]
    5d9c:	f89d 0000 	ldrb.w	r0, [sp]
    5da0:	f000 0101 	and.w	r1, r0, #1
    5da4:	f3c0 0240 	ubfx	r2, r0, #1, #1
    5da8:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    5dac:	f3c0 0280 	ubfx	r2, r0, #2, #1
    5db0:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    5db4:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    5db8:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    5dbc:	f3c0 1200 	ubfx	r2, r0, #4, #1
    5dc0:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    5dc4:	f3c0 1240 	ubfx	r2, r0, #5, #1
    5dc8:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    5dcc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    5dd0:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    5dd4:	f8ad 000a 	strh.w	r0, [sp, #10]
    5dd8:	7d20      	ldrb	r0, [r4, #20]
    5dda:	2801      	cmp	r0, #1
    5ddc:	d006      	beq.n	5dec <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    5dde:	2802      	cmp	r0, #2
    5de0:	d004      	beq.n	5dec <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    5de2:	f240 21e2 	movw	r1, #738	; 0x2e2
    5de6:	2006      	movs	r0, #6
    5de8:	f7fe fc98 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5dec:	f88d 000c 	strb.w	r0, [sp, #12]
    5df0:	7a61      	ldrb	r1, [r4, #9]
    5df2:	a80b      	add	r0, sp, #44	; 0x2c
    5df4:	f004 f8a9 	bl	9f4a <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    5df8:	7d20      	ldrb	r0, [r4, #20]
    5dfa:	2101      	movs	r1, #1
    5dfc:	2802      	cmp	r0, #2
    5dfe:	d102      	bne.n	5e06 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    5e00:	7d60      	ldrb	r0, [r4, #21]
    5e02:	1c40      	adds	r0, r0, #1
    5e04:	b2c1      	uxtb	r1, r0
    5e06:	7ea0      	ldrb	r0, [r4, #26]
    5e08:	1c40      	adds	r0, r0, #1
    5e0a:	b2c2      	uxtb	r2, r0
    5e0c:	a80b      	add	r0, sp, #44	; 0x2c
    5e0e:	f004 f863 	bl	9ed8 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    5e12:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    5e16:	0700      	lsls	r0, r0, #28
    5e18:	d501      	bpl.n	5e1e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    5e1a:	2000      	movs	r0, #0
    5e1c:	e020      	b.n	5e60 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    5e1e:	a80b      	add	r0, sp, #44	; 0x2c
    5e20:	f004 f86c 	bl	9efc <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    5e24:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    5e28:	2228      	movs	r2, #40	; 0x28
    5e2a:	f000 fd39 	bl	68a0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    5e2e:	f240 2171 	movw	r1, #625	; 0x271
    5e32:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    5e36:	fbb0 f0f1 	udiv	r0, r0, r1
    5e3a:	4348      	muls	r0, r1
    5e3c:	f8d4 1002 	ldr.w	r1, [r4, #2]
    5e40:	f240 2371 	movw	r3, #625	; 0x271
    5e44:	0a0a      	lsrs	r2, r1, #8
    5e46:	f240 2171 	movw	r1, #625	; 0x271
    5e4a:	434a      	muls	r2, r1
    5e4c:	f8d4 1005 	ldr.w	r1, [r4, #5]
    5e50:	0a09      	lsrs	r1, r1, #8
    5e52:	4359      	muls	r1, r3
    5e54:	4290      	cmp	r0, r2
    5e56:	d801      	bhi.n	5e5c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    5e58:	9204      	str	r2, [sp, #16]
    5e5a:	e004      	b.n	5e66 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    5e5c:	4288      	cmp	r0, r1
    5e5e:	d801      	bhi.n	5e64 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    5e60:	9004      	str	r0, [sp, #16]
    5e62:	e000      	b.n	5e66 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    5e64:	9104      	str	r1, [sp, #16]
    5e66:	7ca0      	ldrb	r0, [r4, #18]
    5e68:	f88d 0017 	strb.w	r0, [sp, #23]
    5e6c:	7e20      	ldrb	r0, [r4, #24]
    5e6e:	2801      	cmp	r0, #1
    5e70:	d000      	beq.n	5e74 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    5e72:	2000      	movs	r0, #0
    5e74:	f88d 0014 	strb.w	r0, [sp, #20]
    5e78:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5e7a:	f003 fb21 	bl	94c0 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    5e7e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5e80:	f003 fbc2 	bl	9608 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    5e84:	2224      	movs	r2, #36	; 0x24
    5e86:	a902      	add	r1, sp, #8
    5e88:	4628      	mov	r0, r5
    5e8a:	f002 fcba 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5e8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5e90:	62a8      	str	r0, [r5, #40]	; 0x28
    5e92:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    5e96:	85a8      	strh	r0, [r5, #44]	; 0x2c
    5e98:	7ae0      	ldrb	r0, [r4, #11]
    5e9a:	b168      	cbz	r0, 5eb8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    5e9c:	2802      	cmp	r0, #2
    5e9e:	d00b      	beq.n	5eb8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    5ea0:	f05f 0001 	movs.w	r0, #1
    5ea4:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    5ea8:	68e0      	ldr	r0, [r4, #12]
    5eaa:	65a8      	str	r0, [r5, #88]	; 0x58
    5eac:	8a20      	ldrh	r0, [r4, #16]
    5eae:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    5eb2:	b00d      	add	sp, #52	; 0x34
    5eb4:	2000      	movs	r0, #0
    5eb6:	bd30      	pop	{r4, r5, pc}
    5eb8:	2000      	movs	r0, #0
    5eba:	e7f3      	b.n	5ea4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00005ebc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    5ebc:	4a0a      	ldr	r2, [pc, #40]	; (5ee8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    5ebe:	b510      	push	{r4, lr}
    5ec0:	2100      	movs	r1, #0
    5ec2:	7011      	strb	r1, [r2, #0]
    5ec4:	4c09      	ldr	r4, [pc, #36]	; (5eec <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    5ec6:	6060      	str	r0, [r4, #4]
    5ec8:	f000 f822 	bl	5f10 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    5ecc:	b110      	cbz	r0, 5ed4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    5ece:	f44f 714b 	mov.w	r1, #812	; 0x32c
    5ed2:	e004      	b.n	5ede <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    5ed4:	68a0      	ldr	r0, [r4, #8]
    5ed6:	2800      	cmp	r0, #0
    5ed8:	d104      	bne.n	5ee4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    5eda:	f240 312f 	movw	r1, #815	; 0x32f
    5ede:	202d      	movs	r0, #45	; 0x2d
    5ee0:	f7fe fc1c 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ee4:	bd10      	pop	{r4, pc}
    5ee6:	0000      	.short	0x0000
    5ee8:	20000d90 	.word	0x20000d90
    5eec:	200000ec 	.word	0x200000ec

00005ef0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    5ef0:	4902      	ldr	r1, [pc, #8]	; (5efc <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    5ef2:	4801      	ldr	r0, [pc, #4]	; (5ef8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    5ef4:	6088      	str	r0, [r1, #8]
    5ef6:	4770      	bx	lr
    5ef8:	00006888 	.word	0x00006888
    5efc:	200000ec 	.word	0x200000ec

00005f00 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    5f00:	4902      	ldr	r1, [pc, #8]	; (5f0c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    5f02:	6008      	str	r0, [r1, #0]
    5f04:	6889      	ldr	r1, [r1, #8]
    5f06:	6809      	ldr	r1, [r1, #0]
    5f08:	4708      	bx	r1
    5f0a:	0000      	.short	0x0000
    5f0c:	200000ec 	.word	0x200000ec

00005f10 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    5f10:	4808      	ldr	r0, [pc, #32]	; (5f34 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    5f12:	b510      	push	{r4, lr}
    5f14:	7800      	ldrb	r0, [r0, #0]
    5f16:	b110      	cbz	r0, 5f1e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    5f18:	240c      	movs	r4, #12
    5f1a:	4620      	mov	r0, r4
    5f1c:	bd10      	pop	{r4, pc}
    5f1e:	2400      	movs	r4, #0
    5f20:	2218      	movs	r2, #24
    5f22:	4621      	mov	r1, r4
    5f24:	4803      	ldr	r0, [pc, #12]	; (5f34 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    5f26:	f002 fce6 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5f2a:	f001 fa1d 	bl	7368 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    5f2e:	f001 f93b 	bl	71a8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    5f32:	e7f2      	b.n	5f1a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    5f34:	20000d90 	.word	0x20000d90

00005f38 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    5f38:	4904      	ldr	r1, [pc, #16]	; (5f4c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    5f3a:	b510      	push	{r4, lr}
    5f3c:	7809      	ldrb	r1, [r1, #0]
    5f3e:	2901      	cmp	r1, #1
    5f40:	d101      	bne.n	5f46 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    5f42:	f000 fb7d 	bl	6640 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    5f46:	2000      	movs	r0, #0
    5f48:	bd10      	pop	{r4, pc}
    5f4a:	0000      	.short	0x0000
    5f4c:	20000d90 	.word	0x20000d90
    5f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f54:	000f      	movs	r7, r1
    5f56:	4604      	mov	r4, r0
    5f58:	d023      	beq.n	5fa2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x6a>
    5f5a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    5f5e:	4605      	mov	r5, r0
    5f60:	f003 fff5 	bl	9f4e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    5f64:	b9b0      	cbnz	r0, 5f94 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x5c>
    5f66:	78a0      	ldrb	r0, [r4, #2]
    5f68:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5f6c:	b350      	cbz	r0, 5fc4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x8c>
    5f6e:	4628      	mov	r0, r5
    5f70:	f003 ffc4 	bl	9efc <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    5f74:	4606      	mov	r6, r0
    5f76:	4628      	mov	r0, r5
    5f78:	f003 ffe9 	bl	9f4e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    5f7c:	1a30      	subs	r0, r6, r0
    5f7e:	b2c0      	uxtb	r0, r0
    5f80:	f004 f83a 	bl	9ff8 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    5f84:	4601      	mov	r1, r0
    5f86:	4835      	ldr	r0, [pc, #212]	; (605c <CONFIG_PM_SRAM_SIZE+0x5c>)
    5f88:	6842      	ldr	r2, [r0, #4]
    5f8a:	4411      	add	r1, r2
    5f8c:	6041      	str	r1, [r0, #4]
    5f8e:	4628      	mov	r0, r5
    5f90:	f003 fffb 	bl	9f8a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    5f94:	4628      	mov	r0, r5
    5f96:	f003 ffbd 	bl	9f14 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    5f9a:	4601      	mov	r1, r0
    5f9c:	4620      	mov	r0, r4
    5f9e:	f003 ff7a 	bl	9e96 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    5fa2:	4d2f      	ldr	r5, [pc, #188]	; (6060 <CONFIG_PM_SRAM_SIZE+0x60>)
    5fa4:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    5fa8:	2100      	movs	r1, #0
    5faa:	6868      	ldr	r0, [r5, #4]
    5fac:	8001      	strh	r1, [r0, #0]
    5fae:	f003 ff14 	bl	9dda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    5fb2:	8860      	ldrh	r0, [r4, #2]
    5fb4:	2813      	cmp	r0, #19
    5fb6:	d013      	beq.n	5fe0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xa8>
    5fb8:	dc09      	bgt.n	5fce <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x96>
    5fba:	2810      	cmp	r0, #16
    5fbc:	d036      	beq.n	602c <CONFIG_PM_SRAM_SIZE+0x2c>
    5fbe:	2812      	cmp	r0, #18
    5fc0:	d109      	bne.n	5fd6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x9e>
    5fc2:	e031      	b.n	6028 <CONFIG_PM_SRAM_SIZE+0x28>
    5fc4:	4620      	mov	r0, r4
    5fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5fca:	f000 bb39 	b.w	6640 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    5fce:	2815      	cmp	r0, #21
    5fd0:	d00f      	beq.n	5ff2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xba>
    5fd2:	281d      	cmp	r0, #29
    5fd4:	d00d      	beq.n	5ff2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xba>
    5fd6:	f240 6172 	movw	r1, #1650	; 0x672
    5fda:	202d      	movs	r0, #45	; 0x2d
    5fdc:	f7fe fb9e 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fe0:	2100      	movs	r1, #0
    5fe2:	6868      	ldr	r0, [r5, #4]
    5fe4:	f003 fcdd 	bl	99a2 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    5fe8:	2101      	movs	r1, #1
    5fea:	6868      	ldr	r0, [r5, #4]
    5fec:	f003 fef5 	bl	9dda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    5ff0:	e020      	b.n	6034 <CONFIG_PM_SRAM_SIZE+0x34>
    5ff2:	2101      	movs	r1, #1
    5ff4:	6868      	ldr	r0, [r5, #4]
    5ff6:	f003 fcd4 	bl	99a2 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    5ffa:	2101      	movs	r1, #1
    5ffc:	6868      	ldr	r0, [r5, #4]
    5ffe:	f003 feec 	bl	9dda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6002:	b136      	cbz	r6, 6012 <CONFIG_PM_SRAM_SIZE+0x12>
    6004:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    6008:	6868      	ldr	r0, [r5, #4]
    600a:	f003 fce5 	bl	99d8 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    600e:	2101      	movs	r1, #1
    6010:	e006      	b.n	6020 <CONFIG_PM_SRAM_SIZE+0x20>
    6012:	f104 0158 	add.w	r1, r4, #88	; 0x58
    6016:	6868      	ldr	r0, [r5, #4]
    6018:	f003 fcde 	bl	99d8 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    601c:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    6020:	6868      	ldr	r0, [r5, #4]
    6022:	f003 fcdf 	bl	99e4 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    6026:	e005      	b.n	6034 <CONFIG_PM_SRAM_SIZE+0x34>
    6028:	2106      	movs	r1, #6
    602a:	e000      	b.n	602e <CONFIG_PM_SRAM_SIZE+0x2e>
    602c:	2102      	movs	r1, #2
    602e:	6868      	ldr	r0, [r5, #4]
    6030:	f003 fcb7 	bl	99a2 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    6034:	4620      	mov	r0, r4
    6036:	f000 fc05 	bl	6844 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f4>
    603a:	8860      	ldrh	r0, [r4, #2]
    603c:	281d      	cmp	r0, #29
    603e:	d007      	beq.n	6050 <CONFIG_PM_SRAM_SIZE+0x50>
    6040:	2815      	cmp	r0, #21
    6042:	d005      	beq.n	6050 <CONFIG_PM_SRAM_SIZE+0x50>
    6044:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    6048:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    604a:	6868      	ldr	r0, [r5, #4]
    604c:	f003 fc99 	bl	9982 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    6050:	4639      	mov	r1, r7
    6052:	4620      	mov	r0, r4
    6054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6058:	f000 b9f0 	b.w	643c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ec>
    605c:	20000d90 	.word	0x20000d90
    6060:	200000ec 	.word	0x200000ec
    6064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6068:	4d2e      	ldr	r5, [pc, #184]	; (6124 <CONFIG_PM_SRAM_SIZE+0x124>)
    606a:	4607      	mov	r7, r0
    606c:	7828      	ldrb	r0, [r5, #0]
    606e:	2802      	cmp	r0, #2
    6070:	d005      	beq.n	607e <CONFIG_PM_SRAM_SIZE+0x7e>
    6072:	7828      	ldrb	r0, [r5, #0]
    6074:	2803      	cmp	r0, #3
    6076:	d002      	beq.n	607e <CONFIG_PM_SRAM_SIZE+0x7e>
    6078:	f640 5129 	movw	r1, #3369	; 0xd29
    607c:	e028      	b.n	60d0 <CONFIG_PM_SRAM_SIZE+0xd0>
    607e:	4c2a      	ldr	r4, [pc, #168]	; (6128 <CONFIG_PM_SRAM_SIZE+0x128>)
    6080:	6820      	ldr	r0, [r4, #0]
    6082:	7b01      	ldrb	r1, [r0, #12]
    6084:	b109      	cbz	r1, 608a <CONFIG_PM_SRAM_SIZE+0x8a>
    6086:	f003 ff11 	bl	9eac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    608a:	f8d4 c004 	ldr.w	ip, [r4, #4]
    608e:	f04f 0800 	mov.w	r8, #0
    6092:	f89c 0000 	ldrb.w	r0, [ip]
    6096:	f000 060f 	and.w	r6, r0, #15
    609a:	b33f      	cbz	r7, 60ec <CONFIG_PM_SRAM_SIZE+0xec>
    609c:	6821      	ldr	r1, [r4, #0]
    609e:	09c0      	lsrs	r0, r0, #7
    60a0:	f101 0351 	add.w	r3, r1, #81	; 0x51
    60a4:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    60a8:	f10c 0109 	add.w	r1, ip, #9
    60ac:	f003 fb02 	bl	96b4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    60b0:	b1e0      	cbz	r0, 60ec <CONFIG_PM_SRAM_SIZE+0xec>
    60b2:	4641      	mov	r1, r8
    60b4:	6860      	ldr	r0, [r4, #4]
    60b6:	f003 fc54 	bl	9962 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    60ba:	b1b8      	cbz	r0, 60ec <CONFIG_PM_SRAM_SIZE+0xec>
    60bc:	782a      	ldrb	r2, [r5, #0]
    60be:	6820      	ldr	r0, [r4, #0]
    60c0:	4631      	mov	r1, r6
    60c2:	2a02      	cmp	r2, #2
    60c4:	d007      	beq.n	60d6 <CONFIG_PM_SRAM_SIZE+0xd6>
    60c6:	782a      	ldrb	r2, [r5, #0]
    60c8:	2a03      	cmp	r2, #3
    60ca:	d004      	beq.n	60d6 <CONFIG_PM_SRAM_SIZE+0xd6>
    60cc:	f640 5102 	movw	r1, #3330	; 0xd02
    60d0:	202d      	movs	r0, #45	; 0x2d
    60d2:	f7fe fb23 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60d6:	68a2      	ldr	r2, [r4, #8]
    60d8:	782b      	ldrb	r3, [r5, #0]
    60da:	6952      	ldr	r2, [r2, #20]
    60dc:	f06f 0607 	mvn.w	r6, #7
    60e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    60e4:	58d2      	ldr	r2, [r2, r3]
    60e6:	4790      	blx	r2
    60e8:	4606      	mov	r6, r0
    60ea:	e000      	b.n	60ee <CONFIG_PM_SRAM_SIZE+0xee>
    60ec:	2601      	movs	r6, #1
    60ee:	7ba8      	ldrb	r0, [r5, #14]
    60f0:	b118      	cbz	r0, 60fa <CONFIG_PM_SRAM_SIZE+0xfa>
    60f2:	f001 f939 	bl	7368 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    60f6:	f001 f857 	bl	71a8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    60fa:	2e00      	cmp	r6, #0
    60fc:	d00f      	beq.n	611e <CONFIG_PM_SRAM_SIZE+0x11e>
    60fe:	6820      	ldr	r0, [r4, #0]
    6100:	f003 ff90 	bl	a024 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6104:	b130      	cbz	r0, 6114 <CONFIG_PM_SRAM_SIZE+0x114>
    6106:	f001 f957 	bl	73b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    610a:	68a0      	ldr	r0, [r4, #8]
    610c:	6880      	ldr	r0, [r0, #8]
    610e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6112:	4700      	bx	r0
    6114:	6820      	ldr	r0, [r4, #0]
    6116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    611a:	f000 ba91 	b.w	6640 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    611e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6122:	0000      	.short	0x0000
    6124:	20000d90 	.word	0x20000d90
    6128:	200000ec 	.word	0x200000ec
    612c:	b510      	push	{r4, lr}
    612e:	2903      	cmp	r1, #3
    6130:	d002      	beq.n	6138 <CONFIG_PM_SRAM_SIZE+0x138>
    6132:	2905      	cmp	r1, #5
    6134:	d10a      	bne.n	614c <CONFIG_PM_SRAM_SIZE+0x14c>
    6136:	e002      	b.n	613e <CONFIG_PM_SRAM_SIZE+0x13e>
    6138:	f000 fb1a 	bl	6770 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x520>
    613c:	e003      	b.n	6146 <CONFIG_PM_SRAM_SIZE+0x146>
    613e:	4904      	ldr	r1, [pc, #16]	; (6150 <CONFIG_PM_SRAM_SIZE+0x150>)
    6140:	6809      	ldr	r1, [r1, #0]
    6142:	b109      	cbz	r1, 6148 <CONFIG_PM_SRAM_SIZE+0x148>
    6144:	4788      	blx	r1
    6146:	b108      	cbz	r0, 614c <CONFIG_PM_SRAM_SIZE+0x14c>
    6148:	2000      	movs	r0, #0
    614a:	bd10      	pop	{r4, pc}
    614c:	2001      	movs	r0, #1
    614e:	bd10      	pop	{r4, pc}
    6150:	200000f8 	.word	0x200000f8
    6154:	4a09      	ldr	r2, [pc, #36]	; (617c <CONFIG_PM_SRAM_SIZE+0x17c>)
    6156:	0003      	movs	r3, r0
    6158:	6810      	ldr	r0, [r2, #0]
    615a:	d001      	beq.n	6160 <CONFIG_PM_SRAM_SIZE+0x160>
    615c:	f000 ba70 	b.w	6640 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6160:	2900      	cmp	r1, #0
    6162:	d009      	beq.n	6178 <CONFIG_PM_SRAM_SIZE+0x178>
    6164:	6891      	ldr	r1, [r2, #8]
    6166:	4a06      	ldr	r2, [pc, #24]	; (6180 <CONFIG_PM_SRAM_SIZE+0x180>)
    6168:	6909      	ldr	r1, [r1, #16]
    616a:	7812      	ldrb	r2, [r2, #0]
    616c:	f06f 030f 	mvn.w	r3, #15
    6170:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6174:	5889      	ldr	r1, [r1, r2]
    6176:	4708      	bx	r1
    6178:	4770      	bx	lr
    617a:	0000      	.short	0x0000
    617c:	200000ec 	.word	0x200000ec
    6180:	20000d90 	.word	0x20000d90
    6184:	b570      	push	{r4, r5, r6, lr}
    6186:	4604      	mov	r4, r0
    6188:	8840      	ldrh	r0, [r0, #2]
    618a:	2810      	cmp	r0, #16
    618c:	d019      	beq.n	61c2 <CONFIG_PM_SRAM_SIZE+0x1c2>
    618e:	4d10      	ldr	r5, [pc, #64]	; (61d0 <CONFIG_PM_SRAM_SIZE+0x1d0>)
    6190:	7ba8      	ldrb	r0, [r5, #14]
    6192:	b120      	cbz	r0, 619e <CONFIG_PM_SRAM_SIZE+0x19e>
    6194:	f001 f828 	bl	71e8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    6198:	2040      	movs	r0, #64	; 0x40
    619a:	f001 f8f3 	bl	7384 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    619e:	480d      	ldr	r0, [pc, #52]	; (61d4 <CONFIG_PM_SRAM_SIZE+0x1d4>)
    61a0:	6840      	ldr	r0, [r0, #4]
    61a2:	f001 fb2d 	bl	7800 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    61a6:	78a0      	ldrb	r0, [r4, #2]
    61a8:	0740      	lsls	r0, r0, #29
    61aa:	d404      	bmi.n	61b6 <CONFIG_PM_SRAM_SIZE+0x1b6>
    61ac:	2100      	movs	r1, #0
    61ae:	7922      	ldrb	r2, [r4, #4]
    61b0:	4608      	mov	r0, r1
    61b2:	f001 fb9d 	bl	78f0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    61b6:	2000      	movs	r0, #0
    61b8:	f001 f9f4 	bl	75a4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    61bc:	2002      	movs	r0, #2
    61be:	7028      	strb	r0, [r5, #0]
    61c0:	bd70      	pop	{r4, r5, r6, pc}
    61c2:	4620      	mov	r0, r4
    61c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    61c8:	2101      	movs	r1, #1
    61ca:	f7ff bec1 	b.w	5f50 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    61ce:	0000      	.short	0x0000
    61d0:	20000d90 	.word	0x20000d90
    61d4:	200000ec 	.word	0x200000ec
    61d8:	b510      	push	{r4, lr}
    61da:	4c12      	ldr	r4, [pc, #72]	; (6224 <CONFIG_PM_SRAM_SIZE+0x224>)
    61dc:	6820      	ldr	r0, [r4, #0]
    61de:	f000 f825 	bl	622c <CONFIG_PM_SRAM_SIZE+0x22c>
    61e2:	6820      	ldr	r0, [r4, #0]
    61e4:	f003 ff1e 	bl	a024 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    61e8:	2800      	cmp	r0, #0
    61ea:	6820      	ldr	r0, [r4, #0]
    61ec:	d00b      	beq.n	6206 <CONFIG_PM_SRAM_SIZE+0x206>
    61ee:	490e      	ldr	r1, [pc, #56]	; (6228 <CONFIG_PM_SRAM_SIZE+0x228>)
    61f0:	780a      	ldrb	r2, [r1, #0]
    61f2:	2a02      	cmp	r2, #2
    61f4:	d00b      	beq.n	620e <CONFIG_PM_SRAM_SIZE+0x20e>
    61f6:	780a      	ldrb	r2, [r1, #0]
    61f8:	2a03      	cmp	r2, #3
    61fa:	d008      	beq.n	620e <CONFIG_PM_SRAM_SIZE+0x20e>
    61fc:	f640 4137 	movw	r1, #3127	; 0xc37
    6200:	202d      	movs	r0, #45	; 0x2d
    6202:	f7fe fa8b 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    620a:	f000 ba19 	b.w	6640 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    620e:	68a2      	ldr	r2, [r4, #8]
    6210:	7809      	ldrb	r1, [r1, #0]
    6212:	68d2      	ldr	r2, [r2, #12]
    6214:	f06f 0307 	mvn.w	r3, #7
    6218:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    621c:	5851      	ldr	r1, [r2, r1]
    621e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6222:	4708      	bx	r1
    6224:	200000ec 	.word	0x200000ec
    6228:	20000d90 	.word	0x20000d90
    622c:	b510      	push	{r4, lr}
    622e:	7b01      	ldrb	r1, [r0, #12]
    6230:	b109      	cbz	r1, 6236 <CONFIG_PM_SRAM_SIZE+0x236>
    6232:	f003 fe3b 	bl	9eac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    6236:	4805      	ldr	r0, [pc, #20]	; (624c <CONFIG_PM_SRAM_SIZE+0x24c>)
    6238:	7b80      	ldrb	r0, [r0, #14]
    623a:	2800      	cmp	r0, #0
    623c:	d005      	beq.n	624a <CONFIG_PM_SRAM_SIZE+0x24a>
    623e:	f001 f893 	bl	7368 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6246:	f000 bfaf 	b.w	71a8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    624a:	bd10      	pop	{r4, pc}
    624c:	20000d90 	.word	0x20000d90

00006250 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    6250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6254:	4d5d      	ldr	r5, [pc, #372]	; (63cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    6256:	4604      	mov	r4, r0
    6258:	b086      	sub	sp, #24
    625a:	7828      	ldrb	r0, [r5, #0]
    625c:	2800      	cmp	r0, #0
    625e:	d14e      	bne.n	62fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    6260:	7820      	ldrb	r0, [r4, #0]
    6262:	28ff      	cmp	r0, #255	; 0xff
    6264:	d04b      	beq.n	62fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    6266:	f04f 0800 	mov.w	r8, #0
    626a:	f8a5 800c 	strh.w	r8, [r5, #12]
    626e:	f8c5 8004 	str.w	r8, [r5, #4]
    6272:	f885 8001 	strb.w	r8, [r5, #1]
    6276:	f885 8002 	strb.w	r8, [r5, #2]
    627a:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    627e:	4b54      	ldr	r3, [pc, #336]	; (63d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    6280:	4e54      	ldr	r6, [pc, #336]	; (63d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    6282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6284:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    6288:	68b0      	ldr	r0, [r6, #8]
    628a:	6840      	ldr	r0, [r0, #4]
    628c:	9003      	str	r0, [sp, #12]
    628e:	4668      	mov	r0, sp
    6290:	f001 f980 	bl	7594 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    6294:	f001 fa0e 	bl	76b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    6298:	f001 fc76 	bl	7b88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    629c:	f001 f864 	bl	7368 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    62a0:	f000 ff82 	bl	71a8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    62a4:	484c      	ldr	r0, [pc, #304]	; (63d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    62a6:	f001 fb4d 	bl	7944 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    62aa:	484c      	ldr	r0, [pc, #304]	; (63dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    62ac:	f001 fb54 	bl	7958 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    62b0:	f104 0028 	add.w	r0, r4, #40	; 0x28
    62b4:	4607      	mov	r7, r0
    62b6:	f003 fe68 	bl	9f8a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    62ba:	4638      	mov	r0, r7
    62bc:	f003 fe2a 	bl	9f14 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    62c0:	4601      	mov	r1, r0
    62c2:	4620      	mov	r0, r4
    62c4:	f003 fde7 	bl	9e96 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    62c8:	f994 000e 	ldrsb.w	r0, [r4, #14]
    62cc:	f001 fa76 	bl	77bc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    62d0:	7921      	ldrb	r1, [r4, #4]
    62d2:	2000      	movs	r0, #0
    62d4:	f001 f8fa 	bl	74cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    62d8:	2101      	movs	r1, #1
    62da:	60a8      	str	r0, [r5, #8]
    62dc:	b198      	cbz	r0, 6306 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    62de:	f104 0138 	add.w	r1, r4, #56	; 0x38
    62e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    62e4:	f003 f95f 	bl	95a6 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    62e8:	4607      	mov	r7, r0
    62ea:	f104 0140 	add.w	r1, r4, #64	; 0x40
    62ee:	6b60      	ldr	r0, [r4, #52]	; 0x34
    62f0:	f003 f95c 	bl	95ac <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    62f4:	b14f      	cbz	r7, 630a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    62f6:	f894 1020 	ldrb.w	r1, [r4, #32]
    62fa:	b951      	cbnz	r1, 6312 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc2>
    62fc:	e005      	b.n	630a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    62fe:	200c      	movs	r0, #12
    6300:	b006      	add	sp, #24
    6302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6306:	7029      	strb	r1, [r5, #0]
    6308:	e05e      	b.n	63c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    630a:	b120      	cbz	r0, 6316 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    630c:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    6310:	b108      	cbz	r0, 6316 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    6312:	2701      	movs	r7, #1
    6314:	e000      	b.n	6318 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8>
    6316:	2700      	movs	r7, #0
    6318:	7ea0      	ldrb	r0, [r4, #26]
    631a:	b920      	cbnz	r0, 6326 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    631c:	7e20      	ldrb	r0, [r4, #24]
    631e:	b910      	cbnz	r0, 6326 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    6320:	78a0      	ldrb	r0, [r4, #2]
    6322:	0740      	lsls	r0, r0, #29
    6324:	d523      	bpl.n	636e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    6326:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    632a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    632e:	4050      	eors	r0, r2
    6330:	ea70 0101 	orns	r1, r0, r1
    6334:	d006      	beq.n	6344 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    6336:	f7fc fe7b 	bl	3030 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    633a:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    633e:	1a80      	subs	r0, r0, r2
    6340:	4199      	sbcs	r1, r3
    6342:	d200      	bcs.n	6346 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf6>
    6344:	b19f      	cbz	r7, 636e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    6346:	f7ff f867 	bl	5418 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    634a:	4925      	ldr	r1, [pc, #148]	; (63e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x190>)
    634c:	fba0 2301 	umull	r2, r3, r0, r1
    6350:	f104 0048 	add.w	r0, r4, #72	; 0x48
    6354:	f003 fdb5 	bl	9ec2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    6358:	2101      	movs	r1, #1
    635a:	4620      	mov	r0, r4
    635c:	f003 fd5f 	bl	9e1e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4e>
    6360:	78a0      	ldrb	r0, [r4, #2]
    6362:	0740      	lsls	r0, r0, #29
    6364:	d503      	bpl.n	636e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    6366:	2101      	movs	r1, #1
    6368:	4620      	mov	r0, r4
    636a:	f000 fa3d 	bl	67e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x598>
    636e:	f7ff f8ab 	bl	54c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    6372:	6870      	ldr	r0, [r6, #4]
    6374:	1cc0      	adds	r0, r0, #3
    6376:	f003 fa02 	bl	977e <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    637a:	73a8      	strb	r0, [r5, #14]
    637c:	78a0      	ldrb	r0, [r4, #2]
    637e:	07c0      	lsls	r0, r0, #31
    6380:	d022      	beq.n	63c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    6382:	f8cd 8010 	str.w	r8, [sp, #16]
    6386:	20ff      	movs	r0, #255	; 0xff
    6388:	f8cd 8014 	str.w	r8, [sp, #20]
    638c:	73e8      	strb	r0, [r5, #15]
    638e:	69e6      	ldr	r6, [r4, #28]
    6390:	f106 070a 	add.w	r7, r6, #10
    6394:	e013      	b.n	63be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    6396:	9c04      	ldr	r4, [sp, #16]
    6398:	42b4      	cmp	r4, r6
    639a:	d010      	beq.n	63be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    639c:	7a72      	ldrb	r2, [r6, #9]
    639e:	7a60      	ldrb	r0, [r4, #9]
    63a0:	463b      	mov	r3, r7
    63a2:	f104 010a 	add.w	r1, r4, #10
    63a6:	f003 f985 	bl	96b4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    63aa:	b140      	cbz	r0, 63be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    63ac:	78a0      	ldrb	r0, [r4, #2]
    63ae:	73e8      	strb	r0, [r5, #15]
    63b0:	f8d4 0003 	ldr.w	r0, [r4, #3]
    63b4:	6128      	str	r0, [r5, #16]
    63b6:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    63ba:	82a8      	strh	r0, [r5, #20]
    63bc:	e004      	b.n	63c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    63be:	a804      	add	r0, sp, #16
    63c0:	f7fe fb9e 	bl	4b00 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    63c4:	2800      	cmp	r0, #0
    63c6:	d0e6      	beq.n	6396 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x146>
    63c8:	2000      	movs	r0, #0
    63ca:	e799      	b.n	6300 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb0>
    63cc:	20000d90 	.word	0x20000d90
    63d0:	00006868 	.word	0x00006868
    63d4:	200000ec 	.word	0x200000ec
    63d8:	8e89bed6 	.word	0x8e89bed6
    63dc:	00555555 	.word	0x00555555
    63e0:	000f4240 	.word	0x000f4240
    63e4:	b510      	push	{r4, lr}
    63e6:	4604      	mov	r4, r0
    63e8:	f7ff ff32 	bl	6250 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    63ec:	2800      	cmp	r0, #0
    63ee:	d108      	bne.n	6402 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b2>
    63f0:	4804      	ldr	r0, [pc, #16]	; (6404 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b4>)
    63f2:	7800      	ldrb	r0, [r0, #0]
    63f4:	2801      	cmp	r0, #1
    63f6:	d003      	beq.n	6400 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>
    63f8:	2100      	movs	r1, #0
    63fa:	4620      	mov	r0, r4
    63fc:	f7ff fda8 	bl	5f50 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    6400:	2000      	movs	r0, #0
    6402:	bd10      	pop	{r4, pc}
    6404:	20000d90 	.word	0x20000d90
    6408:	480a      	ldr	r0, [pc, #40]	; (6434 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    640a:	b510      	push	{r4, lr}
    640c:	490a      	ldr	r1, [pc, #40]	; (6438 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>)
    640e:	6804      	ldr	r4, [r0, #0]
    6410:	7808      	ldrb	r0, [r1, #0]
    6412:	2800      	cmp	r0, #0
    6414:	d00d      	beq.n	6432 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e2>
    6416:	7808      	ldrb	r0, [r1, #0]
    6418:	2802      	cmp	r0, #2
    641a:	d002      	beq.n	6422 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d2>
    641c:	7808      	ldrb	r0, [r1, #0]
    641e:	2803      	cmp	r0, #3
    6420:	d102      	bne.n	6428 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    6422:	4620      	mov	r0, r4
    6424:	f7ff ff02 	bl	622c <CONFIG_PM_SRAM_SIZE+0x22c>
    6428:	4620      	mov	r0, r4
    642a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    642e:	f000 b907 	b.w	6640 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    6432:	bd10      	pop	{r4, pc}
    6434:	200000ec 	.word	0x200000ec
    6438:	20000d90 	.word	0x20000d90
    643c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6440:	4604      	mov	r4, r0
    6442:	4827      	ldr	r0, [pc, #156]	; (64e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x290>)
    6444:	460d      	mov	r5, r1
    6446:	6840      	ldr	r0, [r0, #4]
    6448:	f001 f9da 	bl	7800 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    644c:	4e25      	ldr	r6, [pc, #148]	; (64e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    644e:	2004      	movs	r0, #4
    6450:	7030      	strb	r0, [r6, #0]
    6452:	b325      	cbz	r5, 649e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    6454:	8860      	ldrh	r0, [r4, #2]
    6456:	2810      	cmp	r0, #16
    6458:	d02a      	beq.n	64b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x260>
    645a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    645e:	4680      	mov	r8, r0
    6460:	68b5      	ldr	r5, [r6, #8]
    6462:	f003 fd4b 	bl	9efc <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6466:	4607      	mov	r7, r0
    6468:	4640      	mov	r0, r8
    646a:	f003 fd70 	bl	9f4e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    646e:	1a38      	subs	r0, r7, r0
    6470:	1e40      	subs	r0, r0, #1
    6472:	b2c0      	uxtb	r0, r0
    6474:	8861      	ldrh	r1, [r4, #2]
    6476:	2228      	movs	r2, #40	; 0x28
    6478:	f000 fa32 	bl	68e0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    647c:	4405      	add	r5, r0
    647e:	78a0      	ldrb	r0, [r4, #2]
    6480:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6484:	b130      	cbz	r0, 6494 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    6486:	6870      	ldr	r0, [r6, #4]
    6488:	4405      	add	r5, r0
    648a:	f003 fdb9 	bl	a000 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    648e:	4428      	add	r0, r5
    6490:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    6494:	7922      	ldrb	r2, [r4, #4]
    6496:	4629      	mov	r1, r5
    6498:	2000      	movs	r0, #0
    649a:	f001 f9c7 	bl	782c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    649e:	8860      	ldrh	r0, [r4, #2]
    64a0:	2813      	cmp	r0, #19
    64a2:	d013      	beq.n	64cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    64a4:	dc09      	bgt.n	64ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26a>
    64a6:	2810      	cmp	r0, #16
    64a8:	d017      	beq.n	64da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28a>
    64aa:	2812      	cmp	r0, #18
    64ac:	d109      	bne.n	64c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    64ae:	e00d      	b.n	64cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    64b0:	7921      	ldrb	r1, [r4, #4]
    64b2:	2000      	movs	r0, #0
    64b4:	f000 ffd0 	bl	7458 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    64b8:	e7f1      	b.n	649e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    64ba:	2815      	cmp	r0, #21
    64bc:	d006      	beq.n	64cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    64be:	281d      	cmp	r0, #29
    64c0:	d004      	beq.n	64cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    64c2:	f640 51b8 	movw	r1, #3512	; 0xdb8
    64c6:	202d      	movs	r0, #45	; 0x2d
    64c8:	f7fe f928 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64cc:	7922      	ldrb	r2, [r4, #4]
    64ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    64d2:	2101      	movs	r1, #1
    64d4:	2000      	movs	r0, #0
    64d6:	f001 ba0b 	b.w	78f0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    64da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64de:	0000      	.short	0x0000
    64e0:	200000ec 	.word	0x200000ec
    64e4:	20000d90 	.word	0x20000d90
    64e8:	b510      	push	{r4, lr}
    64ea:	4604      	mov	r4, r0
    64ec:	7800      	ldrb	r0, [r0, #0]
    64ee:	460b      	mov	r3, r1
    64f0:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    64f4:	29ff      	cmp	r1, #255	; 0xff
    64f6:	d010      	beq.n	651a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ca>
    64f8:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    64fc:	1e51      	subs	r1, r2, #1
    64fe:	4618      	mov	r0, r3
    6500:	f7fe ff5e 	bl	53c0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6504:	b130      	cbz	r0, 6514 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c4>
    6506:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    650a:	f040 0002 	orr.w	r0, r0, #2
    650e:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    6512:	e011      	b.n	6538 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    6514:	f241 0102 	movw	r1, #4098	; 0x1002
    6518:	e021      	b.n	655e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
    651a:	4812      	ldr	r0, [pc, #72]	; (6564 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x314>)
    651c:	6840      	ldr	r0, [r0, #4]
    651e:	7801      	ldrb	r1, [r0, #0]
    6520:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6524:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    6528:	f8d0 1003 	ldr.w	r1, [r0, #3]
    652c:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    6530:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6534:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    6538:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    653c:	287f      	cmp	r0, #127	; 0x7f
    653e:	d00c      	beq.n	655a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30a>
    6540:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    6544:	207f      	movs	r0, #127	; 0x7f
    6546:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    654a:	4621      	mov	r1, r4
    654c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    6550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6554:	221d      	movs	r2, #29
    6556:	f7ff b953 	b.w	5800 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    655a:	f640 616b 	movw	r1, #3691	; 0xe6b
    655e:	202d      	movs	r0, #45	; 0x2d
    6560:	f7fe f8dc 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6564:	200000ec 	.word	0x200000ec
    6568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    656c:	4690      	mov	r8, r2
    656e:	460e      	mov	r6, r1
    6570:	4604      	mov	r4, r0
    6572:	2903      	cmp	r1, #3
    6574:	d004      	beq.n	6580 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    6576:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    657a:	b108      	cbz	r0, 6580 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    657c:	2001      	movs	r0, #1
    657e:	e000      	b.n	6582 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    6580:	2000      	movs	r0, #0
    6582:	4681      	mov	r9, r0
    6584:	f000 ff0a 	bl	739c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    6588:	4605      	mov	r5, r0
    658a:	2e03      	cmp	r6, #3
    658c:	d003      	beq.n	6596 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x346>
    658e:	2701      	movs	r7, #1
    6590:	2e05      	cmp	r6, #5
    6592:	d005      	beq.n	65a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    6594:	e008      	b.n	65a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x358>
    6596:	78a0      	ldrb	r0, [r4, #2]
    6598:	2702      	movs	r7, #2
    659a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    659e:	e001      	b.n	65a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    65a0:	78a0      	ldrb	r0, [r4, #2]
    65a2:	07c0      	lsls	r0, r0, #31
    65a4:	2800      	cmp	r0, #0
    65a6:	d042      	beq.n	662e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    65a8:	f1b9 0f00 	cmp.w	r9, #0
    65ac:	d13e      	bne.n	662c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    65ae:	4822      	ldr	r0, [pc, #136]	; (6638 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>)
    65b0:	7b80      	ldrb	r0, [r0, #14]
    65b2:	b140      	cbz	r0, 65c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    65b4:	f003 f8e6 	bl	9784 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    65b8:	f888 0000 	strb.w	r0, [r8]
    65bc:	28ff      	cmp	r0, #255	; 0xff
    65be:	d002      	beq.n	65c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    65c0:	f7fe ff18 	bl	53f4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    65c4:	4305      	orrs	r5, r0
    65c6:	4e1d      	ldr	r6, [pc, #116]	; (663c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>)
    65c8:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    65cc:	f104 0358 	add.w	r3, r4, #88	; 0x58
    65d0:	6871      	ldr	r1, [r6, #4]
    65d2:	f811 0b03 	ldrb.w	r0, [r1], #3
    65d6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    65da:	f003 f86b 	bl	96b4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    65de:	f898 1000 	ldrb.w	r1, [r8]
    65e2:	29ff      	cmp	r1, #255	; 0xff
    65e4:	d004      	beq.n	65f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    65e6:	b990      	cbnz	r0, 660e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    65e8:	7e60      	ldrb	r0, [r4, #25]
    65ea:	4288      	cmp	r0, r1
    65ec:	d00f      	beq.n	660e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    65ee:	e008      	b.n	6602 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    65f0:	b138      	cbz	r0, 6602 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    65f2:	6871      	ldr	r1, [r6, #4]
    65f4:	f811 0b03 	ldrb.w	r0, [r1], #3
    65f8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    65fc:	f003 fbf6 	bl	9dec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    6600:	b128      	cbz	r0, 660e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    6602:	2000      	movs	r0, #0
    6604:	78a1      	ldrb	r1, [r4, #2]
    6606:	0749      	lsls	r1, r1, #29
    6608:	d503      	bpl.n	6612 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c2>
    660a:	b990      	cbnz	r0, 6632 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    660c:	e00e      	b.n	662c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    660e:	2001      	movs	r0, #1
    6610:	e7f8      	b.n	6604 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    6612:	b975      	cbnz	r5, 6632 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    6614:	7be0      	ldrb	r0, [r4, #15]
    6616:	b108      	cbz	r0, 661c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    6618:	42b8      	cmp	r0, r7
    661a:	d107      	bne.n	662c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    661c:	6871      	ldr	r1, [r6, #4]
    661e:	f811 0b03 	ldrb.w	r0, [r1], #3
    6622:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6626:	f003 fbe1 	bl	9dec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    662a:	b110      	cbz	r0, 6632 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    662c:	2000      	movs	r0, #0
    662e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6632:	2001      	movs	r0, #1
    6634:	e7fb      	b.n	662e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    6636:	0000      	.short	0x0000
    6638:	20000d90 	.word	0x20000d90
    663c:	200000ec 	.word	0x200000ec
    6640:	b570      	push	{r4, r5, r6, lr}
    6642:	4604      	mov	r4, r0
    6644:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    6646:	4d10      	ldr	r5, [pc, #64]	; (6688 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x438>)
    6648:	1c40      	adds	r0, r0, #1
    664a:	8620      	strh	r0, [r4, #48]	; 0x30
    664c:	7ba8      	ldrb	r0, [r5, #14]
    664e:	2600      	movs	r6, #0
    6650:	b120      	cbz	r0, 665c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x40c>
    6652:	f000 fe89 	bl	7368 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6656:	f000 fda7 	bl	71a8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    665a:	73ae      	strb	r6, [r5, #14]
    665c:	702e      	strb	r6, [r5, #0]
    665e:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    6662:	b108      	cbz	r0, 6668 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x418>
    6664:	2101      	movs	r1, #1
    6666:	e00a      	b.n	667e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    6668:	7b60      	ldrb	r0, [r4, #13]
    666a:	b138      	cbz	r0, 667c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    666c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    666e:	4288      	cmp	r0, r1
    6670:	d804      	bhi.n	667c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    6672:	2101      	movs	r1, #1
    6674:	4620      	mov	r0, r4
    6676:	f003 fce7 	bl	a048 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    667a:	bd70      	pop	{r4, r5, r6, pc}
    667c:	2100      	movs	r1, #0
    667e:	4620      	mov	r0, r4
    6680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6684:	f003 bce0 	b.w	a048 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6688:	20000d90 	.word	0x20000d90
    668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    668e:	4604      	mov	r4, r0
    6690:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
    6694:	4616      	mov	r6, r2
    6696:	460d      	mov	r5, r1
    6698:	f88d 0000 	strb.w	r0, [sp]
    669c:	9800      	ldr	r0, [sp, #0]
    669e:	9000      	str	r0, [sp, #0]
    66a0:	f89d 0000 	ldrb.w	r0, [sp]
    66a4:	b110      	cbz	r0, 66ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45c>
    66a6:	f640 416b 	movw	r1, #3179	; 0xc6b
    66aa:	e055      	b.n	6758 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x508>
    66ac:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
    66b0:	2700      	movs	r7, #0
    66b2:	8828      	ldrh	r0, [r5, #0]
    66b4:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
    66b8:	2b00      	cmp	r3, #0
    66ba:	d14a      	bne.n	6752 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x502>
    66bc:	6928      	ldr	r0, [r5, #16]
    66be:	f003 f8ac 	bl	981a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    66c2:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    66c6:	8b28      	ldrh	r0, [r5, #24]
    66c8:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    66cc:	8b68      	ldrh	r0, [r5, #26]
    66ce:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    66d2:	f895 020d 	ldrb.w	r0, [r5, #525]	; 0x20d
    66d6:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    66da:	7e20      	ldrb	r0, [r4, #24]
    66dc:	f104 0151 	add.w	r1, r4, #81	; 0x51
    66e0:	460d      	mov	r5, r1
    66e2:	b120      	cbz	r0, 66ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49e>
    66e4:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    66e8:	f003 fa16 	bl	9b18 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x34>
    66ec:	b940      	cbnz	r0, 6700 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    66ee:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    66f2:	b170      	cbz	r0, 6712 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
    66f4:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    66f8:	4629      	mov	r1, r5
    66fa:	f003 fa04 	bl	9b06 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x22>
    66fe:	b140      	cbz	r0, 6712 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
    6700:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    6704:	f8c4 0082 	str.w	r0, [r4, #130]	; 0x82
    6708:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    670c:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    6710:	e003      	b.n	671a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ca>
    6712:	f8c4 7082 	str.w	r7, [r4, #130]	; 0x82
    6716:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    671a:	4814      	ldr	r0, [pc, #80]	; (676c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51c>)
    671c:	2eff      	cmp	r6, #255	; 0xff
    671e:	6840      	ldr	r0, [r0, #4]
    6720:	7801      	ldrb	r1, [r0, #0]
    6722:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6726:	f884 107b 	strb.w	r1, [r4, #123]	; 0x7b
    672a:	f850 1f03 	ldr.w	r1, [r0, #3]!
    672e:	d016      	beq.n	675e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50e>
    6730:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    6734:	8880      	ldrh	r0, [r0, #4]
    6736:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    673a:	f104 027c 	add.w	r2, r4, #124	; 0x7c
    673e:	1e51      	subs	r1, r2, #1
    6740:	4630      	mov	r0, r6
    6742:	f7fe fe3d 	bl	53c0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6746:	b128      	cbz	r0, 6754 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x504>
    6748:	f814 0f7b 	ldrb.w	r0, [r4, #123]!
    674c:	f040 0002 	orr.w	r0, r0, #2
    6750:	7020      	strb	r0, [r4, #0]
    6752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6754:	f640 418c 	movw	r1, #3212	; 0xc8c
    6758:	202d      	movs	r0, #45	; 0x2d
    675a:	f7fd ffdf 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    675e:	f844 1f7c 	str.w	r1, [r4, #124]!
    6762:	8880      	ldrh	r0, [r0, #4]
    6764:	80a0      	strh	r0, [r4, #4]
    6766:	60e7      	str	r7, [r4, #12]
    6768:	8227      	strh	r7, [r4, #16]
    676a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    676c:	200000ec 	.word	0x200000ec
    6770:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6774:	4604      	mov	r4, r0
    6776:	20ff      	movs	r0, #255	; 0xff
    6778:	f88d 0000 	strb.w	r0, [sp]
    677c:	2501      	movs	r5, #1
    677e:	466a      	mov	r2, sp
    6780:	2103      	movs	r1, #3
    6782:	4620      	mov	r0, r4
    6784:	f7ff fef0 	bl	6568 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    6788:	b330      	cbz	r0, 67d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x588>
    678a:	7b20      	ldrb	r0, [r4, #12]
    678c:	2700      	movs	r7, #0
    678e:	b168      	cbz	r0, 67ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55c>
    6790:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    6794:	f88d 0004 	strb.w	r0, [sp, #4]
    6798:	9801      	ldr	r0, [sp, #4]
    679a:	9001      	str	r0, [sp, #4]
    679c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    67a0:	b920      	cbnz	r0, 67ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55c>
    67a2:	f89d 1000 	ldrb.w	r1, [sp]
    67a6:	4620      	mov	r0, r4
    67a8:	f7ff fe9e 	bl	64e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>
    67ac:	4e0c      	ldr	r6, [pc, #48]	; (67e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x590>)
    67ae:	2104      	movs	r1, #4
    67b0:	6870      	ldr	r0, [r6, #4]
    67b2:	8007      	strh	r7, [r0, #0]
    67b4:	f003 f8f5 	bl	99a2 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    67b8:	4620      	mov	r0, r4
    67ba:	f000 f843 	bl	6844 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f4>
    67be:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    67c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    67c4:	6870      	ldr	r0, [r6, #4]
    67c6:	f003 f923 	bl	9a10 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    67ca:	4906      	ldr	r1, [pc, #24]	; (67e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x594>)
    67cc:	2005      	movs	r0, #5
    67ce:	7008      	strb	r0, [r1, #0]
    67d0:	6870      	ldr	r0, [r6, #4]
    67d2:	f001 f815 	bl	7800 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    67d6:	e000      	b.n	67da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x58a>
    67d8:	2500      	movs	r5, #0
    67da:	4628      	mov	r0, r5
    67dc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    67e0:	200000ec 	.word	0x200000ec
    67e4:	20000d90 	.word	0x20000d90
    67e8:	b570      	push	{r4, r5, r6, lr}
    67ea:	4604      	mov	r4, r0
    67ec:	460e      	mov	r6, r1
    67ee:	7e40      	ldrb	r0, [r0, #25]
    67f0:	f7fe fdc0 	bl	5374 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    67f4:	0005      	movs	r5, r0
    67f6:	d019      	beq.n	682c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>
    67f8:	2110      	movs	r1, #16
    67fa:	f003 f885 	bl	9908 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    67fe:	2800      	cmp	r0, #0
    6800:	d114      	bne.n	682c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>
    6802:	2001      	movs	r0, #1
    6804:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    6808:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    680c:	4632      	mov	r2, r6
    680e:	460c      	mov	r4, r1
    6810:	4628      	mov	r0, r5
    6812:	f002 ff7f 	bl	9714 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6816:	4621      	mov	r1, r4
    6818:	4c05      	ldr	r4, [pc, #20]	; (6830 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    681a:	6860      	ldr	r0, [r4, #4]
    681c:	f003 f8dc 	bl	99d8 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    6820:	6860      	ldr	r0, [r4, #4]
    6822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6826:	2101      	movs	r1, #1
    6828:	f003 b8dc 	b.w	99e4 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    682c:	bd70      	pop	{r4, r5, r6, pc}
    682e:	0000      	.short	0x0000
    6830:	200000ec 	.word	0x200000ec
    6834:	4802      	ldr	r0, [pc, #8]	; (6840 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f0>)
    6836:	2101      	movs	r1, #1
    6838:	6800      	ldr	r0, [r0, #0]
    683a:	f7ff bb89 	b.w	5f50 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    683e:	0000      	.short	0x0000
    6840:	200000ec 	.word	0x200000ec
    6844:	b570      	push	{r4, r5, r6, lr}
    6846:	4d07      	ldr	r5, [pc, #28]	; (6864 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x614>)
    6848:	4604      	mov	r4, r0
    684a:	f100 0151 	add.w	r1, r0, #81	; 0x51
    684e:	6868      	ldr	r0, [r5, #4]
    6850:	f003 f8cf 	bl	99f2 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    6854:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    6858:	6868      	ldr	r0, [r5, #4]
    685a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    685e:	f003 b8ce 	b.w	99fe <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    6862:	0000      	.short	0x0000
    6864:	200000ec 	.word	0x200000ec
    6868:	000061d9 	.word	0x000061d9
    686c:	00006065 	.word	0x00006065
    6870:	00006155 	.word	0x00006155
    6874:	00000000 	.word	0x00000000
    6878:	0000612d 	.word	0x0000612d
    687c:	00006185 	.word	0x00006185
    6880:	00009e13 	.word	0x00009e13
    6884:	00009e19 	.word	0x00009e19
    6888:	000063e5 	.word	0x000063e5
    688c:	00006409 	.word	0x00006409
    6890:	00006835 	.word	0x00006835
    6894:	00006884 	.word	0x00006884
    6898:	0000687c 	.word	0x0000687c
    689c:	00006878 	.word	0x00006878

000068a0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    68a0:	b510      	push	{r4, lr}
    68a2:	1e42      	subs	r2, r0, #1
    68a4:	2a02      	cmp	r2, #2
    68a6:	d901      	bls.n	68ac <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    68a8:	21ca      	movs	r1, #202	; 0xca
    68aa:	e009      	b.n	68c0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    68ac:	1e40      	subs	r0, r0, #1
    68ae:	2910      	cmp	r1, #16
    68b0:	d009      	beq.n	68c6 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    68b2:	2912      	cmp	r1, #18
    68b4:	d00c      	beq.n	68d0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    68b6:	2913      	cmp	r1, #19
    68b8:	d00a      	beq.n	68d0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    68ba:	2915      	cmp	r1, #21
    68bc:	d005      	beq.n	68ca <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    68be:	21d8      	movs	r1, #216	; 0xd8
    68c0:	202f      	movs	r0, #47	; 0x2f
    68c2:	f7fd ff2b 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68c6:	4905      	ldr	r1, [pc, #20]	; (68dc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    68c8:	e004      	b.n	68d4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    68ca:	4904      	ldr	r1, [pc, #16]	; (68dc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    68cc:	1d89      	adds	r1, r1, #6
    68ce:	e001      	b.n	68d4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    68d0:	4902      	ldr	r1, [pc, #8]	; (68dc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    68d2:	1f89      	subs	r1, r1, #6
    68d4:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    68d8:	bd10      	pop	{r4, pc}
    68da:	0000      	.short	0x0000
    68dc:	0000a018 	.word	0x0000a018

000068e0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    68e0:	1e42      	subs	r2, r0, #1
    68e2:	b510      	push	{r4, lr}
    68e4:	b2d2      	uxtb	r2, r2
    68e6:	2a01      	cmp	r2, #1
    68e8:	d903      	bls.n	68f2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    68ea:	291d      	cmp	r1, #29
    68ec:	d001      	beq.n	68f2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    68ee:	21ee      	movs	r1, #238	; 0xee
    68f0:	e00d      	b.n	690e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    68f2:	2913      	cmp	r1, #19
    68f4:	d013      	beq.n	691e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    68f6:	dc04      	bgt.n	6902 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    68f8:	2910      	cmp	r1, #16
    68fa:	d00b      	beq.n	6914 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    68fc:	2912      	cmp	r1, #18
    68fe:	d104      	bne.n	690a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    6900:	e00d      	b.n	691e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    6902:	2915      	cmp	r1, #21
    6904:	d008      	beq.n	6918 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    6906:	291d      	cmp	r1, #29
    6908:	d00e      	beq.n	6928 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    690a:	f44f 7181 	mov.w	r1, #258	; 0x102
    690e:	202f      	movs	r0, #47	; 0x2f
    6910:	f7fd ff04 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6914:	4807      	ldr	r0, [pc, #28]	; (6934 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6916:	e004      	b.n	6922 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    6918:	4806      	ldr	r0, [pc, #24]	; (6934 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    691a:	3008      	adds	r0, #8
    691c:	e001      	b.n	6922 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    691e:	4805      	ldr	r0, [pc, #20]	; (6934 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6920:	1d00      	adds	r0, r0, #4
    6922:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    6926:	bd10      	pop	{r4, pc}
    6928:	f240 315a 	movw	r1, #858	; 0x35a
    692c:	fb10 f001 	smulbb	r0, r0, r1
    6930:	bd10      	pop	{r4, pc}
    6932:	0000      	.short	0x0000
    6934:	0000a006 	.word	0x0000a006

00006938 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    6938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    693c:	4604      	mov	r4, r0
    693e:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    6942:	4616      	mov	r6, r2
    6944:	460d      	mov	r5, r1
    6946:	2800      	cmp	r0, #0
    6948:	d15e      	bne.n	6a08 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    694a:	4621      	mov	r1, r4
    694c:	484c      	ldr	r0, [pc, #304]	; (6a80 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x148>)
    694e:	f7fc f95f 	bl	2c10 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    6952:	4607      	mov	r7, r0
    6954:	2820      	cmp	r0, #32
    6956:	d057      	beq.n	6a08 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    6958:	2250      	movs	r2, #80	; 0x50
    695a:	2100      	movs	r1, #0
    695c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    6960:	f001 ffc9 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6964:	f884 70c8 	strb.w	r7, [r4, #200]	; 0xc8
    6968:	2701      	movs	r7, #1
    696a:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    696e:	f884 70e0 	strb.w	r7, [r4, #224]	; 0xe0
    6972:	b135      	cbz	r5, 6982 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    6974:	f7ff f97a 	bl	5c6c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    6978:	f000 0007 	and.w	r0, r0, #7
    697c:	1c40      	adds	r0, r0, #1
    697e:	f885 023c 	strb.w	r0, [r5, #572]	; 0x23c
    6982:	4620      	mov	r0, r4
    6984:	f003 fc19 	bl	a1ba <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf8>
    6988:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    698c:	2002      	movs	r0, #2
    698e:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    6992:	f884 70f3 	strb.w	r7, [r4, #243]	; 0xf3
    6996:	2500      	movs	r5, #0
    6998:	46b8      	mov	r8, r7
    699a:	f804 5fe8 	strb.w	r5, [r4, #232]!
    699e:	f7fd fa53 	bl	3e48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    69a2:	4607      	mov	r7, r0
    69a4:	f001 fdca 	bl	853c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    69a8:	8921      	ldrh	r1, [r4, #8]
    69aa:	3ce8      	subs	r4, #232	; 0xe8
    69ac:	4288      	cmp	r0, r1
    69ae:	d800      	bhi.n	69b2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    69b0:	4608      	mov	r0, r1
    69b2:	4438      	add	r0, r7
    69b4:	30cc      	adds	r0, #204	; 0xcc
    69b6:	b287      	uxth	r7, r0
    69b8:	4620      	mov	r0, r4
    69ba:	f003 f9c0 	bl	9d3e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    69be:	b330      	cbz	r0, 6a0e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    69c0:	f004 f9e1 	bl	ad86 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    69c4:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    69c8:	b281      	uxth	r1, r0
    69ca:	4630      	mov	r0, r6
    69cc:	f001 fdea 	bl	85a4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    69d0:	4430      	add	r0, r6
    69d2:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    69d6:	3490      	adds	r4, #144	; 0x90
    69d8:	f7fc fb2a 	bl	3030 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    69dc:	19c0      	adds	r0, r0, r7
    69de:	4169      	adcs	r1, r5
    69e0:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    69e4:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    69e8:	f824 5c6e 	strh.w	r5, [r4, #-110]
    69ec:	2001      	movs	r0, #1
    69ee:	f003 fb03 	bl	9ff8 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    69f2:	f500 7088 	add.w	r0, r0, #272	; 0x110
    69f6:	1a30      	subs	r0, r6, r0
    69f8:	6460      	str	r0, [r4, #68]	; 0x44
    69fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    69fe:	0841      	lsrs	r1, r0, #1
    6a00:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    6a04:	3c90      	subs	r4, #144	; 0x90
    6a06:	e023      	b.n	6a50 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    6a08:	200c      	movs	r0, #12
    6a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a0e:	2100      	movs	r1, #0
    6a10:	4620      	mov	r0, r4
    6a12:	f003 fb9f 	bl	a154 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x92>
    6a16:	f8df 806c 	ldr.w	r8, [pc, #108]	; 6a84 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>
    6a1a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    6a1e:	2000      	movs	r0, #0
    6a20:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    6a24:	b139      	cbz	r1, 6a36 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xfe>
    6a26:	f7ff f921 	bl	5c6c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    6a2a:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    6a2e:	fbb0 f2f1 	udiv	r2, r0, r1
    6a32:	fb01 0012 	mls	r0, r1, r2, r0
    6a36:	4407      	add	r7, r0
    6a38:	f7fc fafa 	bl	3030 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    6a3c:	19c0      	adds	r0, r0, r7
    6a3e:	4169      	adcs	r1, r5
    6a40:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    6a44:	b19e      	cbz	r6, 6a6e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x136>
    6a46:	1980      	adds	r0, r0, r6
    6a48:	eb51 0105 	adcs.w	r1, r1, r5
    6a4c:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    6a50:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    6a54:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    6a58:	f003 fbad 	bl	a1b6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf4>
    6a5c:	b158      	cbz	r0, 6a76 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13e>
    6a5e:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    6a62:	2100      	movs	r1, #0
    6a64:	4620      	mov	r0, r4
    6a66:	f003 f99a 	bl	9d9e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    6a6a:	2000      	movs	r0, #0
    6a6c:	e7cd      	b.n	6a0a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    6a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6a72:	0841      	lsrs	r1, r0, #1
    6a74:	e7ea      	b.n	6a4c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x114>
    6a76:	f240 11e7 	movw	r1, #487	; 0x1e7
    6a7a:	2030      	movs	r0, #48	; 0x30
    6a7c:	f7fd fe4e 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a80:	0000a29b 	.word	0x0000a29b
    6a84:	200000fc 	.word	0x200000fc

00006a88 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    6a88:	4901      	ldr	r1, [pc, #4]	; (6a90 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    6a8a:	8088      	strh	r0, [r1, #4]
    6a8c:	4770      	bx	lr
    6a8e:	0000      	.short	0x0000
    6a90:	200000fc 	.word	0x200000fc

00006a94 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    6a94:	4805      	ldr	r0, [pc, #20]	; (6aac <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    6a96:	2100      	movs	r1, #0
    6a98:	7001      	strb	r1, [r0, #0]
    6a9a:	2201      	movs	r2, #1
    6a9c:	7082      	strb	r2, [r0, #2]
    6a9e:	7041      	strb	r1, [r0, #1]
    6aa0:	f242 7110 	movw	r1, #10000	; 0x2710
    6aa4:	8081      	strh	r1, [r0, #4]
    6aa6:	f000 b803 	b.w	6ab0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    6aaa:	0000      	.short	0x0000
    6aac:	200000fc 	.word	0x200000fc

00006ab0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    6ab0:	b51c      	push	{r2, r3, r4, lr}
    6ab2:	4909      	ldr	r1, [pc, #36]	; (6ad8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    6ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
    6ab8:	e9cd 0100 	strd	r0, r1, [sp]
    6abc:	e002      	b.n	6ac4 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    6abe:	9800      	ldr	r0, [sp, #0]
    6ac0:	f003 fad6 	bl	a070 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    6ac4:	4668      	mov	r0, sp
    6ac6:	f7fe f81b 	bl	4b00 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6aca:	2800      	cmp	r0, #0
    6acc:	d0f7      	beq.n	6abe <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    6ace:	f000 f81f 	bl	6b10 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x28>
    6ad2:	2000      	movs	r0, #0
    6ad4:	bd1c      	pop	{r2, r3, r4, pc}
    6ad6:	0000      	.short	0x0000
    6ad8:	00006b70 	.word	0x00006b70

00006adc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    6adc:	4901      	ldr	r1, [pc, #4]	; (6ae4 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    6ade:	7008      	strb	r0, [r1, #0]
    6ae0:	4770      	bx	lr
    6ae2:	0000      	.short	0x0000
    6ae4:	200000fc 	.word	0x200000fc

00006ae8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    6ae8:	4908      	ldr	r1, [pc, #32]	; (6b0c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    6aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6aee:	fbb1 f1f2 	udiv	r1, r1, r2
    6af2:	b510      	push	{r4, lr}
    6af4:	f501 7125 	add.w	r1, r1, #660	; 0x294
    6af8:	f002 ffdc 	bl	9ab4 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    6afc:	f640 0148 	movw	r1, #2120	; 0x848
    6b00:	4288      	cmp	r0, r1
    6b02:	d300      	bcc.n	6b06 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    6b04:	4608      	mov	r0, r1
    6b06:	b280      	uxth	r0, r0
    6b08:	bd10      	pop	{r4, pc}
    6b0a:	0000      	.short	0x0000
    6b0c:	0001527d 	.word	0x0001527d
    6b10:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6b14:	4d15      	ldr	r5, [pc, #84]	; (6b6c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x84>)
    6b16:	2001      	movs	r0, #1
    6b18:	7068      	strb	r0, [r5, #1]
    6b1a:	2400      	movs	r4, #0
    6b1c:	f64f 76ff 	movw	r6, #65535	; 0xffff
    6b20:	e00b      	b.n	6b3a <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x52>
    6b22:	2100      	movs	r1, #0
    6b24:	f002 fc1d 	bl	9362 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6b28:	0007      	movs	r7, r0
    6b2a:	d009      	beq.n	6b40 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x58>
    6b2c:	f897 0294 	ldrb.w	r0, [r7, #660]	; 0x294
    6b30:	f7fb ff56 	bl	29e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    6b34:	4638      	mov	r0, r7
    6b36:	f003 fba3 	bl	a280 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1be>
    6b3a:	9400      	str	r4, [sp, #0]
    6b3c:	9401      	str	r4, [sp, #4]
    6b3e:	e00d      	b.n	6b5c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x74>
    6b40:	f240 111f 	movw	r1, #287	; 0x11f
    6b44:	2030      	movs	r0, #48	; 0x30
    6b46:	f7fd fde9 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b4a:	9800      	ldr	r0, [sp, #0]
    6b4c:	b130      	cbz	r0, 6b5c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x74>
    6b4e:	f890 124c 	ldrb.w	r1, [r0, #588]	; 0x24c
    6b52:	b119      	cbz	r1, 6b5c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x74>
    6b54:	8800      	ldrh	r0, [r0, #0]
    6b56:	42b0      	cmp	r0, r6
    6b58:	d1e3      	bne.n	6b22 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x3a>
    6b5a:	e004      	b.n	6b66 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x7e>
    6b5c:	4668      	mov	r0, sp
    6b5e:	f7fd ffcf 	bl	4b00 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6b62:	2800      	cmp	r0, #0
    6b64:	d0f1      	beq.n	6b4a <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x62>
    6b66:	706c      	strb	r4, [r5, #1]
    6b68:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6b6c:	200000fc 	.word	0x200000fc
    6b70:	00000000 	.word	0x00000000
    6b74:	00010000 	.word	0x00010000
    6b78:	00000000 	.word	0x00000000
    6b7c:	00010000 	.word	0x00010000
    6b80:	00000000 	.word	0x00000000
    6b84:	00001e14 	.word	0x00001e14
    6b88:	00001130 	.word	0x00001130
    6b8c:	00fa01f4 	.word	0x00fa01f4
    6b90:	00640096 	.word	0x00640096
    6b94:	0032004b 	.word	0x0032004b
    6b98:	0014001e 	.word	0x0014001e
    6b9c:	0005000a 	.word	0x0005000a
    6ba0:	00010002 	.word	0x00010002

00006ba4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    6ba4:	4903      	ldr	r1, [pc, #12]	; (6bb4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    6ba6:	884a      	ldrh	r2, [r1, #2]
    6ba8:	8002      	strh	r2, [r0, #0]
    6baa:	7809      	ldrb	r1, [r1, #0]
    6bac:	7081      	strb	r1, [r0, #2]
    6bae:	2000      	movs	r0, #0
    6bb0:	4770      	bx	lr
    6bb2:	0000      	.short	0x0000
    6bb4:	20000d54 	.word	0x20000d54

00006bb8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    6bb8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6bbc:	460f      	mov	r7, r1
    6bbe:	4605      	mov	r5, r0
    6bc0:	7806      	ldrb	r6, [r0, #0]
    6bc2:	f003 ffa6 	bl	ab12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfc>
    6bc6:	2800      	cmp	r0, #0
    6bc8:	d10a      	bne.n	6be0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    6bca:	4628      	mov	r0, r5
    6bcc:	f003 ff7b 	bl	aac6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    6bd0:	2800      	cmp	r0, #0
    6bd2:	d105      	bne.n	6be0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    6bd4:	2001      	movs	r0, #1
    6bd6:	f7fd ff49 	bl	4a6c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6bda:	4286      	cmp	r6, r0
    6bdc:	d302      	bcc.n	6be4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    6bde:	2007      	movs	r0, #7
    6be0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6be4:	2101      	movs	r1, #1
    6be6:	4630      	mov	r0, r6
    6be8:	f002 fbbb 	bl	9362 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6bec:	0004      	movs	r4, r0
    6bee:	d004      	beq.n	6bfa <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    6bf0:	f003 fa67 	bl	a0c2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6bf4:	b168      	cbz	r0, 6c12 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    6bf6:	200c      	movs	r0, #12
    6bf8:	e7f2      	b.n	6be0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    6bfa:	2101      	movs	r1, #1
    6bfc:	4630      	mov	r0, r6
    6bfe:	f002 fba6 	bl	934e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    6c02:	0004      	movs	r4, r0
    6c04:	d013      	beq.n	6c2e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x76>
    6c06:	4817      	ldr	r0, [pc, #92]	; (6c64 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xac>)
    6c08:	f990 1000 	ldrsb.w	r1, [r0]
    6c0c:	4620      	mov	r0, r4
    6c0e:	f002 ffcc 	bl	9baa <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    6c12:	4620      	mov	r0, r4
    6c14:	f003 f89d 	bl	9d52 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    6c18:	7038      	strb	r0, [r7, #0]
    6c1a:	74e8      	strb	r0, [r5, #19]
    6c1c:	4629      	mov	r1, r5
    6c1e:	4620      	mov	r0, r4
    6c20:	f7ff f8a6 	bl	5d70 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    6c24:	4606      	mov	r6, r0
    6c26:	7e68      	ldrb	r0, [r5, #25]
    6c28:	b1d0      	cbz	r0, 6c60 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    6c2a:	b12e      	cbz	r6, 6c38 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x80>
    6c2c:	e018      	b.n	6c60 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    6c2e:	f241 3162 	movw	r1, #4962	; 0x1362
    6c32:	2039      	movs	r0, #57	; 0x39
    6c34:	f7fd fd72 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c38:	2200      	movs	r2, #0
    6c3a:	4668      	mov	r0, sp
    6c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6c3e:	f002 fc42 	bl	94c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    6c42:	2200      	movs	r2, #0
    6c44:	2101      	movs	r1, #1
    6c46:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6c48:	f002 fcb3 	bl	95b2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6c4c:	2204      	movs	r2, #4
    6c4e:	4668      	mov	r0, sp
    6c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6c52:	f002 fc38 	bl	94c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    6c56:	2200      	movs	r2, #0
    6c58:	4611      	mov	r1, r2
    6c5a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6c5c:	f002 fca9 	bl	95b2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6c60:	4630      	mov	r0, r6
    6c62:	e7bd      	b.n	6be0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    6c64:	20000118 	.word	0x20000118

00006c68 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    6c68:	7801      	ldrb	r1, [r0, #0]
    6c6a:	b171      	cbz	r1, 6c8a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6c6c:	7841      	ldrb	r1, [r0, #1]
    6c6e:	b161      	cbz	r1, 6c8a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6c70:	8841      	ldrh	r1, [r0, #2]
    6c72:	291b      	cmp	r1, #27
    6c74:	d309      	bcc.n	6c8a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6c76:	8881      	ldrh	r1, [r0, #4]
    6c78:	291b      	cmp	r1, #27
    6c7a:	d306      	bcc.n	6c8a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6c7c:	4904      	ldr	r1, [pc, #16]	; (6c90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    6c7e:	6802      	ldr	r2, [r0, #0]
    6c80:	600a      	str	r2, [r1, #0]
    6c82:	8880      	ldrh	r0, [r0, #4]
    6c84:	8088      	strh	r0, [r1, #4]
    6c86:	2000      	movs	r0, #0
    6c88:	4770      	bx	lr
    6c8a:	2012      	movs	r0, #18
    6c8c:	4770      	bx	lr
    6c8e:	0000      	.short	0x0000
    6c90:	20000d54 	.word	0x20000d54

00006c94 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    6c94:	6800      	ldr	r0, [r0, #0]
    6c96:	f240 41e2 	movw	r1, #1250	; 0x4e2
    6c9a:	4288      	cmp	r0, r1
    6c9c:	d303      	bcc.n	6ca6 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    6c9e:	4903      	ldr	r1, [pc, #12]	; (6cac <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    6ca0:	6088      	str	r0, [r1, #8]
    6ca2:	2000      	movs	r0, #0
    6ca4:	4770      	bx	lr
    6ca6:	2012      	movs	r0, #18
    6ca8:	4770      	bx	lr
    6caa:	0000      	.short	0x0000
    6cac:	20000d54 	.word	0x20000d54

00006cb0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    6cb0:	4a03      	ldr	r2, [pc, #12]	; (6cc0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    6cb2:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    6cb6:	6001      	str	r1, [r0, #0]
    6cb8:	6042      	str	r2, [r0, #4]
    6cba:	2000      	movs	r0, #0
    6cbc:	4770      	bx	lr
    6cbe:	0000      	.short	0x0000
    6cc0:	00007068 	.word	0x00007068
    6cc4:	b51c      	push	{r2, r3, r4, lr}
    6cc6:	4909      	ldr	r1, [pc, #36]	; (6cec <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x3c>)
    6cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
    6ccc:	e9cd 0100 	strd	r0, r1, [sp]
    6cd0:	e005      	b.n	6cde <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2e>
    6cd2:	9800      	ldr	r0, [sp, #0]
    6cd4:	f003 f9f5 	bl	a0c2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6cd8:	b108      	cbz	r0, 6cde <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x2e>
    6cda:	2001      	movs	r0, #1
    6cdc:	bd1c      	pop	{r2, r3, r4, pc}
    6cde:	4668      	mov	r0, sp
    6ce0:	f7fd ff0e 	bl	4b00 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6ce4:	2800      	cmp	r0, #0
    6ce6:	d0f4      	beq.n	6cd2 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x22>
    6ce8:	2000      	movs	r0, #0
    6cea:	bd1c      	pop	{r2, r3, r4, pc}
    6cec:	00007068 	.word	0x00007068
    6cf0:	b510      	push	{r4, lr}
    6cf2:	480d      	ldr	r0, [pc, #52]	; (6d28 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x78>)
    6cf4:	2100      	movs	r1, #0
    6cf6:	4b0d      	ldr	r3, [pc, #52]	; (6d2c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x7c>)
    6cf8:	74c1      	strb	r1, [r0, #19]
    6cfa:	8281      	strh	r1, [r0, #20]
    6cfc:	221b      	movs	r2, #27
    6cfe:	801a      	strh	r2, [r3, #0]
    6d00:	f44f 74a4 	mov.w	r4, #328	; 0x148
    6d04:	805c      	strh	r4, [r3, #2]
    6d06:	809a      	strh	r2, [r3, #4]
    6d08:	80dc      	strh	r4, [r3, #6]
    6d0a:	7381      	strb	r1, [r0, #14]
    6d0c:	73c1      	strb	r1, [r0, #15]
    6d0e:	2303      	movs	r3, #3
    6d10:	7003      	strb	r3, [r0, #0]
    6d12:	2302      	movs	r3, #2
    6d14:	7043      	strb	r3, [r0, #1]
    6d16:	8042      	strh	r2, [r0, #2]
    6d18:	8082      	strh	r2, [r0, #4]
    6d1a:	f640 62a6 	movw	r2, #3750	; 0xea6
    6d1e:	6082      	str	r2, [r0, #8]
    6d20:	7481      	strb	r1, [r0, #18]
    6d22:	7301      	strb	r1, [r0, #12]
    6d24:	bd10      	pop	{r4, pc}
    6d26:	0000      	.short	0x0000
    6d28:	20000d54 	.word	0x20000d54
    6d2c:	20000120 	.word	0x20000120
    6d30:	b510      	push	{r4, lr}
    6d32:	2101      	movs	r1, #1
    6d34:	2000      	movs	r0, #0
    6d36:	f002 fb14 	bl	9362 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6d3a:	0004      	movs	r4, r0
    6d3c:	d10a      	bne.n	6d54 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xa4>
    6d3e:	2101      	movs	r1, #1
    6d40:	f002 fb05 	bl	934e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    6d44:	0004      	movs	r4, r0
    6d46:	d007      	beq.n	6d58 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xa8>
    6d48:	4806      	ldr	r0, [pc, #24]	; (6d64 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xb4>)
    6d4a:	f990 1000 	ldrsb.w	r1, [r0]
    6d4e:	4620      	mov	r0, r4
    6d50:	f002 ff2b 	bl	9baa <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    6d54:	4620      	mov	r0, r4
    6d56:	bd10      	pop	{r4, pc}
    6d58:	f240 2167 	movw	r1, #615	; 0x267
    6d5c:	2039      	movs	r0, #57	; 0x39
    6d5e:	f7fd fcdd 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d62:	0000      	.short	0x0000
    6d64:	20000118 	.word	0x20000118

00006d68 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    6d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6d6c:	b087      	sub	sp, #28
    6d6e:	460c      	mov	r4, r1
    6d70:	4680      	mov	r8, r0
    6d72:	4605      	mov	r5, r0
    6d74:	f002 fff0 	bl	9d58 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    6d78:	b198      	cbz	r0, 6da2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    6d7a:	4628      	mov	r0, r5
    6d7c:	f002 ffdf 	bl	9d3e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6d80:	b130      	cbz	r0, 6d90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    6d82:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    6d86:	2012      	movs	r0, #18
    6d88:	2900      	cmp	r1, #0
    6d8a:	d00b      	beq.n	6da4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6d8c:	2980      	cmp	r1, #128	; 0x80
    6d8e:	d809      	bhi.n	6da4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6d90:	4628      	mov	r0, r5
    6d92:	f002 ffc3 	bl	9d1c <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    6d96:	b140      	cbz	r0, 6daa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    6d98:	4640      	mov	r0, r8
    6d9a:	f002 fed0 	bl	9b3e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    6d9e:	b130      	cbz	r0, 6dae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    6da0:	e009      	b.n	6db6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4e>
    6da2:	2042      	movs	r0, #66	; 0x42
    6da4:	b007      	add	sp, #28
    6da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6daa:	200c      	movs	r0, #12
    6dac:	e7fa      	b.n	6da4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6dae:	4640      	mov	r0, r8
    6db0:	f002 ffbf 	bl	9d32 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    6db4:	b3c8      	cbz	r0, 6e2a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    6db6:	4640      	mov	r0, r8
    6db8:	f003 f983 	bl	a0c2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6dbc:	2800      	cmp	r0, #0
    6dbe:	d1f4      	bne.n	6daa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    6dc0:	4640      	mov	r0, r8
    6dc2:	f002 fed7 	bl	9b74 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    6dc6:	2800      	cmp	r0, #0
    6dc8:	d1ef      	bne.n	6daa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    6dca:	4640      	mov	r0, r8
    6dcc:	f7fe ff6e 	bl	5cac <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    6dd0:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6dd4:	f242 7110 	movw	r1, #10000	; 0x2710
    6dd8:	fb00 f901 	mul.w	r9, r0, r1
    6ddc:	78e1      	ldrb	r1, [r4, #3]
    6dde:	4640      	mov	r0, r8
    6de0:	f002 ff93 	bl	9d0a <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    6de4:	4640      	mov	r0, r8
    6de6:	f002 ffa6 	bl	9d36 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    6dea:	b308      	cbz	r0, 6e30 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc8>
    6dec:	2100      	movs	r1, #0
    6dee:	a801      	add	r0, sp, #4
    6df0:	f7fd fea6 	bl	4b40 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    6df4:	0004      	movs	r4, r0
    6df6:	d07b      	beq.n	6ef0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    6df8:	2100      	movs	r1, #0
    6dfa:	f7fe fc53 	bl	56a4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    6dfe:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    6e02:	8020      	strh	r0, [r4, #0]
    6e04:	4621      	mov	r1, r4
    6e06:	4640      	mov	r0, r8
    6e08:	f002 ffbd 	bl	9d86 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    6e0c:	f000 f984 	bl	7118 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6e10:	0940      	lsrs	r0, r0, #5
    6e12:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    6e16:	07c0      	lsls	r0, r0, #31
    6e18:	4d41      	ldr	r5, [pc, #260]	; (6f20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    6e1a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6e1e:	d011      	beq.n	6e44 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    6e20:	8869      	ldrh	r1, [r5, #2]
    6e22:	88aa      	ldrh	r2, [r5, #4]
    6e24:	84c1      	strh	r1, [r0, #38]	; 0x26
    6e26:	8502      	strh	r2, [r0, #40]	; 0x28
    6e28:	e00f      	b.n	6e4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe2>
    6e2a:	e7ff      	b.n	6e2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    6e2c:	2012      	movs	r0, #18
    6e2e:	e7b9      	b.n	6da4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6e30:	464a      	mov	r2, r9
    6e32:	2100      	movs	r1, #0
    6e34:	4640      	mov	r0, r8
    6e36:	f7ff fd7f 	bl	6938 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    6e3a:	2800      	cmp	r0, #0
    6e3c:	d0b2      	beq.n	6da4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6e3e:	f241 51b5 	movw	r1, #5557	; 0x15b5
    6e42:	e05f      	b.n	6f04 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    6e44:	221b      	movs	r2, #27
    6e46:	84c2      	strh	r2, [r0, #38]	; 0x26
    6e48:	8502      	strh	r2, [r0, #40]	; 0x28
    6e4a:	f000 f965 	bl	7118 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6e4e:	0788      	lsls	r0, r1, #30
    6e50:	f04f 0601 	mov.w	r6, #1
    6e54:	d505      	bpl.n	6e62 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    6e56:	f88d 6008 	strb.w	r6, [sp, #8]
    6e5a:	a802      	add	r0, sp, #8
    6e5c:	9403      	str	r4, [sp, #12]
    6e5e:	f003 fa6f 	bl	a340 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    6e62:	68a8      	ldr	r0, [r5, #8]
    6e64:	62e0      	str	r0, [r4, #44]	; 0x2c
    6e66:	f641 574c 	movw	r7, #7500	; 0x1d4c
    6e6a:	4640      	mov	r0, r8
    6e6c:	f002 ff6b 	bl	9d46 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    6e70:	b910      	cbnz	r0, 6e78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x110>
    6e72:	4640      	mov	r0, r8
    6e74:	f002 ff85 	bl	9d82 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    6e78:	6127      	str	r7, [r4, #16]
    6e7a:	8821      	ldrh	r1, [r4, #0]
    6e7c:	f8ad 1008 	strh.w	r1, [sp, #8]
    6e80:	7ba9      	ldrb	r1, [r5, #14]
    6e82:	f88d 100a 	strb.w	r1, [sp, #10]
    6e86:	7be9      	ldrb	r1, [r5, #15]
    6e88:	f88d 100b 	strb.w	r1, [sp, #11]
    6e8c:	8a29      	ldrh	r1, [r5, #16]
    6e8e:	f8ad 100c 	strh.w	r1, [sp, #12]
    6e92:	a905      	add	r1, sp, #20
    6e94:	9100      	str	r1, [sp, #0]
    6e96:	4630      	mov	r0, r6
    6e98:	ab04      	add	r3, sp, #16
    6e9a:	aa02      	add	r2, sp, #8
    6e9c:	4621      	mov	r1, r4
    6e9e:	f003 fed3 	bl	ac48 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x232>
    6ea2:	b140      	cbz	r0, 6eb6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    6ea4:	2100      	movs	r1, #0
    6ea6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    6eaa:	f7fd fe71 	bl	4b90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6eae:	b1f0      	cbz	r0, 6eee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    6eb0:	f241 6117 	movw	r1, #5655	; 0x1617
    6eb4:	e026      	b.n	6f04 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    6eb6:	f89d 0010 	ldrb.w	r0, [sp, #16]
    6eba:	f88d 0018 	strb.w	r0, [sp, #24]
    6ebe:	f89d 0014 	ldrb.w	r0, [sp, #20]
    6ec2:	f88d 0019 	strb.w	r0, [sp, #25]
    6ec6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    6eca:	f8ad 001a 	strh.w	r0, [sp, #26]
    6ece:	a906      	add	r1, sp, #24
    6ed0:	4620      	mov	r0, r4
    6ed2:	f002 fcd8 	bl	9886 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    6ed6:	7868      	ldrb	r0, [r5, #1]
    6ed8:	9000      	str	r0, [sp, #0]
    6eda:	782b      	ldrb	r3, [r5, #0]
    6edc:	88aa      	ldrh	r2, [r5, #4]
    6ede:	8869      	ldrh	r1, [r5, #2]
    6ee0:	8820      	ldrh	r0, [r4, #0]
    6ee2:	f7fd ff0b 	bl	4cfc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    6ee6:	b128      	cbz	r0, 6ef4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18c>
    6ee8:	f241 6122 	movw	r1, #5666	; 0x1622
    6eec:	e00a      	b.n	6f04 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    6eee:	e7ff      	b.n	6ef0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    6ef0:	2009      	movs	r0, #9
    6ef2:	e757      	b.n	6da4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6ef4:	464a      	mov	r2, r9
    6ef6:	4621      	mov	r1, r4
    6ef8:	4640      	mov	r0, r8
    6efa:	f7ff fd1d 	bl	6938 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    6efe:	b120      	cbz	r0, 6f0a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a2>
    6f00:	f241 6124 	movw	r1, #5668	; 0x1624
    6f04:	2039      	movs	r0, #57	; 0x39
    6f06:	f7fd fc09 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f0a:	4806      	ldr	r0, [pc, #24]	; (6f24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    6f0c:	6843      	ldr	r3, [r0, #4]
    6f0e:	b123      	cbz	r3, 6f1a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b2>
    6f10:	2200      	movs	r2, #0
    6f12:	f504 7195 	add.w	r1, r4, #298	; 0x12a
    6f16:	4620      	mov	r0, r4
    6f18:	4798      	blx	r3
    6f1a:	2000      	movs	r0, #0
    6f1c:	e742      	b.n	6da4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    6f1e:	0000      	.short	0x0000
    6f20:	20000d54 	.word	0x20000d54
    6f24:	20000118 	.word	0x20000118
    6f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f2c:	b088      	sub	sp, #32
    6f2e:	4604      	mov	r4, r0
    6f30:	8800      	ldrh	r0, [r0, #0]
    6f32:	a906      	add	r1, sp, #24
    6f34:	f002 fc64 	bl	9800 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6f38:	2800      	cmp	r0, #0
    6f3a:	d147      	bne.n	6fcc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6f3c:	9807      	ldr	r0, [sp, #28]
    6f3e:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    6f42:	f88d 1008 	strb.w	r1, [sp, #8]
    6f46:	9902      	ldr	r1, [sp, #8]
    6f48:	9102      	str	r1, [sp, #8]
    6f4a:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6f4e:	3080      	adds	r0, #128	; 0x80
    6f50:	b101      	cbz	r1, 6f54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    6f52:	2101      	movs	r1, #1
    6f54:	f88d 100c 	strb.w	r1, [sp, #12]
    6f58:	7901      	ldrb	r1, [r0, #4]
    6f5a:	f04f 0800 	mov.w	r8, #0
    6f5e:	0689      	lsls	r1, r1, #26
    6f60:	d502      	bpl.n	6f68 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    6f62:	f89d 100c 	ldrb.w	r1, [sp, #12]
    6f66:	b149      	cbz	r1, 6f7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x214>
    6f68:	f05f 0100 	movs.w	r1, #0
    6f6c:	f88d 1004 	strb.w	r1, [sp, #4]
    6f70:	2105      	movs	r1, #5
    6f72:	3064      	adds	r0, #100	; 0x64
    6f74:	f003 fa50 	bl	a418 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x74>
    6f78:	b110      	cbz	r0, 6f80 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x218>
    6f7a:	e004      	b.n	6f86 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21e>
    6f7c:	2101      	movs	r1, #1
    6f7e:	e7f5      	b.n	6f6c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    6f80:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6f84:	b308      	cbz	r0, 6fca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    6f86:	8921      	ldrh	r1, [r4, #8]
    6f88:	88e0      	ldrh	r0, [r4, #6]
    6f8a:	f003 fe19 	bl	abc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1aa>
    6f8e:	2800      	cmp	r0, #0
    6f90:	d11c      	bne.n	6fcc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6f92:	88a1      	ldrh	r1, [r4, #4]
    6f94:	8860      	ldrh	r0, [r4, #2]
    6f96:	f003 fe13 	bl	abc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1aa>
    6f9a:	2800      	cmp	r0, #0
    6f9c:	d116      	bne.n	6fcc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6f9e:	8921      	ldrh	r1, [r4, #8]
    6fa0:	88e0      	ldrh	r0, [r4, #6]
    6fa2:	f003 fe03 	bl	abac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x196>
    6fa6:	2800      	cmp	r0, #0
    6fa8:	d110      	bne.n	6fcc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6faa:	88a1      	ldrh	r1, [r4, #4]
    6fac:	8860      	ldrh	r0, [r4, #2]
    6fae:	f003 fdfd 	bl	abac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x196>
    6fb2:	0006      	movs	r6, r0
    6fb4:	d10a      	bne.n	6fcc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    6fb6:	9807      	ldr	r0, [sp, #28]
    6fb8:	f500 7595 	add.w	r5, r0, #298	; 0x12a
    6fbc:	27ff      	movs	r7, #255	; 0xff
    6fbe:	706f      	strb	r7, [r5, #1]
    6fc0:	f89d 100c 	ldrb.w	r1, [sp, #12]
    6fc4:	b129      	cbz	r1, 6fd2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26a>
    6fc6:	263a      	movs	r6, #58	; 0x3a
    6fc8:	e02e      	b.n	7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    6fca:	201a      	movs	r0, #26
    6fcc:	b008      	add	sp, #32
    6fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fd2:	4641      	mov	r1, r8
    6fd4:	aa03      	add	r2, sp, #12
    6fd6:	f003 fe01 	bl	abdc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c6>
    6fda:	8861      	ldrh	r1, [r4, #2]
    6fdc:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6fe0:	4281      	cmp	r1, r0
    6fe2:	d200      	bcs.n	6fe6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    6fe4:	4608      	mov	r0, r1
    6fe6:	80e8      	strh	r0, [r5, #6]
    6fe8:	88a1      	ldrh	r1, [r4, #4]
    6fea:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6fee:	4281      	cmp	r1, r0
    6ff0:	d200      	bcs.n	6ff4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    6ff2:	4608      	mov	r0, r1
    6ff4:	8128      	strh	r0, [r5, #8]
    6ff6:	88e2      	ldrh	r2, [r4, #6]
    6ff8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    6ffc:	428a      	cmp	r2, r1
    6ffe:	d200      	bcs.n	7002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    7000:	4611      	mov	r1, r2
    7002:	8069      	strh	r1, [r5, #2]
    7004:	8922      	ldrh	r2, [r4, #8]
    7006:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    700a:	428a      	cmp	r2, r1
    700c:	d200      	bcs.n	7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    700e:	4611      	mov	r1, r2
    7010:	f640 0248 	movw	r2, #2120	; 0x848
    7014:	80a9      	strh	r1, [r5, #4]
    7016:	4291      	cmp	r1, r2
    7018:	d300      	bcc.n	701c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
    701a:	4611      	mov	r1, r2
    701c:	80a9      	strh	r1, [r5, #4]
    701e:	4290      	cmp	r0, r2
    7020:	d200      	bcs.n	7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
    7022:	4602      	mov	r2, r0
    7024:	812a      	strh	r2, [r5, #8]
    7026:	702f      	strb	r7, [r5, #0]
    7028:	f885 8001 	strb.w	r8, [r5, #1]
    702c:	4630      	mov	r0, r6
    702e:	e7cd      	b.n	6fcc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    7030:	b51c      	push	{r2, r3, r4, lr}
    7032:	490c      	ldr	r1, [pc, #48]	; (7064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>)
    7034:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    7038:	e9cd 0100 	strd	r0, r1, [sp]
    703c:	e00a      	b.n	7054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>
    703e:	9c00      	ldr	r4, [sp, #0]
    7040:	4620      	mov	r0, r4
    7042:	f003 f83e 	bl	a0c2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    7046:	b128      	cbz	r0, 7054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>
    7048:	4620      	mov	r0, r4
    704a:	f002 fec1 	bl	9dd0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    704e:	b108      	cbz	r0, 7054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>
    7050:	2001      	movs	r0, #1
    7052:	bd1c      	pop	{r2, r3, r4, pc}
    7054:	4668      	mov	r0, sp
    7056:	f7fd fd53 	bl	4b00 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    705a:	2800      	cmp	r0, #0
    705c:	d0ef      	beq.n	703e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e>
    705e:	2000      	movs	r0, #0
    7060:	bd1c      	pop	{r2, r3, r4, pc}
    7062:	0000      	.short	0x0000
    7064:	00007068 	.word	0x00007068
    7068:	00000000 	.word	0x00000000
    706c:	00010000 	.word	0x00010000
    7070:	00000000 	.word	0x00000000
    7074:	00010000 	.word	0x00010000
    7078:	0c11fa0c 	.word	0x0c11fa0c
    707c:	11fa0059 	.word	0x11fa0059
    7080:	00000000 	.word	0x00000000
    7084:	00010000 	.word	0x00010000
    7088:	00000000 	.word	0x00000000
    708c:	00010000 	.word	0x00010000

00007090 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    7090:	b510      	push	{r4, lr}
    7092:	f7fe fc87 	bl	59a4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    7096:	4805      	ldr	r0, [pc, #20]	; (70ac <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    7098:	6840      	ldr	r0, [r0, #4]
    709a:	f003 fe6b 	bl	ad74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x35e>
    709e:	f003 fc58 	bl	a952 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    70a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    70a6:	f7fe bdcf 	b.w	5c48 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    70aa:	0000      	.short	0x0000
    70ac:	20000128 	.word	0x20000128

000070b0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    70b0:	b510      	push	{r4, lr}
    70b2:	4c05      	ldr	r4, [pc, #20]	; (70c8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    70b4:	68a0      	ldr	r0, [r4, #8]
    70b6:	f003 fe5d 	bl	ad74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x35e>
    70ba:	68e0      	ldr	r0, [r4, #12]
    70bc:	f003 fe5a 	bl	ad74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x35e>
    70c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    70c4:	f003 bca7 	b.w	aa16 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    70c8:	20000128 	.word	0x20000128

000070cc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    70cc:	b510      	push	{r4, lr}
    70ce:	4905      	ldr	r1, [pc, #20]	; (70e4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    70d0:	4805      	ldr	r0, [pc, #20]	; (70e8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    70d2:	f003 fe42 	bl	ad5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x344>
    70d6:	4804      	ldr	r0, [pc, #16]	; (70e8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    70d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    70dc:	4903      	ldr	r1, [pc, #12]	; (70ec <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    70de:	1d00      	adds	r0, r0, #4
    70e0:	f003 be3b 	b.w	ad5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x344>
    70e4:	20000138 	.word	0x20000138
    70e8:	2000012c 	.word	0x2000012c
    70ec:	20000140 	.word	0x20000140

000070f0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    70f0:	4801      	ldr	r0, [pc, #4]	; (70f8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    70f2:	7800      	ldrb	r0, [r0, #0]
    70f4:	4770      	bx	lr
    70f6:	0000      	.short	0x0000
    70f8:	20000128 	.word	0x20000128
    70fc:	b510      	push	{r4, lr}
    70fe:	f7fe fef7 	bl	5ef0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    7102:	f7ff fcc7 	bl	6a94 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    7106:	4803      	ldr	r0, [pc, #12]	; (7114 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    7108:	f7fe fed8 	bl	5ebc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    710c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7110:	f7fe bc4e 	b.w	59b0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    7114:	20000ff9 	.word	0x20000ff9

00007118 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    7118:	4901      	ldr	r1, [pc, #4]	; (7120 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    711a:	e9d1 0100 	ldrd	r0, r1, [r1]
    711e:	4770      	bx	lr
    7120:	20000020 	.word	0x20000020

00007124 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    7124:	4806      	ldr	r0, [pc, #24]	; (7140 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    7126:	8801      	ldrh	r1, [r0, #0]
    7128:	7900      	ldrb	r0, [r0, #4]
    712a:	0602      	lsls	r2, r0, #24
    712c:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    7130:	f000 0001 	and.w	r0, r0, #1
    7134:	1800      	adds	r0, r0, r0
    7136:	b2c0      	uxtb	r0, r0
    7138:	f040 0001 	orr.w	r0, r0, #1
    713c:	4770      	bx	lr
    713e:	0000      	.short	0x0000
    7140:	20000020 	.word	0x20000020

00007144 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    7144:	b510      	push	{r4, lr}
    7146:	f7fc ff31 	bl	3fac <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    714a:	2200      	movs	r2, #0
    714c:	4b08      	ldr	r3, [pc, #32]	; (7170 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    714e:	4611      	mov	r1, r2
    7150:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    7154:	4284      	cmp	r4, r0
    7156:	d303      	bcc.n	7160 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    7158:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    715c:	7882      	ldrb	r2, [r0, #2]
    715e:	e003      	b.n	7168 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    7160:	1c49      	adds	r1, r1, #1
    7162:	b2c9      	uxtb	r1, r1
    7164:	290c      	cmp	r1, #12
    7166:	d3f3      	bcc.n	7150 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    7168:	4802      	ldr	r0, [pc, #8]	; (7174 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    716a:	7002      	strb	r2, [r0, #0]
    716c:	bd10      	pop	{r4, pc}
    716e:	0000      	.short	0x0000
    7170:	0000ad8a 	.word	0x0000ad8a
    7174:	2000018d 	.word	0x2000018d

00007178 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7178:	b570      	push	{r4, r5, r6, lr}
    717a:	4605      	mov	r5, r0
    717c:	4616      	mov	r6, r2
    717e:	460c      	mov	r4, r1
    7180:	2002      	movs	r0, #2
    7182:	f000 f8bd 	bl	7300 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7186:	4906      	ldr	r1, [pc, #24]	; (71a0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7188:	2001      	movs	r0, #1
    718a:	1ef6      	subs	r6, r6, #3
    718c:	7008      	strb	r0, [r1, #0]
    718e:	4805      	ldr	r0, [pc, #20]	; (71a4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7190:	6006      	str	r6, [r0, #0]
    7192:	4804      	ldr	r0, [pc, #16]	; (71a4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7194:	3808      	subs	r0, #8
    7196:	6005      	str	r5, [r0, #0]
    7198:	1f00      	subs	r0, r0, #4
    719a:	6004      	str	r4, [r0, #0]
    719c:	bd70      	pop	{r4, r5, r6, pc}
    719e:	0000      	.short	0x0000
    71a0:	2000018e 	.word	0x2000018e
    71a4:	4000f510 	.word	0x4000f510

000071a8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    71a8:	b510      	push	{r4, lr}
    71aa:	4c0c      	ldr	r4, [pc, #48]	; (71dc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    71ac:	7820      	ldrb	r0, [r4, #0]
    71ae:	b180      	cbz	r0, 71d2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    71b0:	490b      	ldr	r1, [pc, #44]	; (71e0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    71b2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    71b6:	6008      	str	r0, [r1, #0]
    71b8:	f000 f86a 	bl	7290 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    71bc:	2100      	movs	r1, #0
    71be:	b120      	cbz	r0, 71ca <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    71c0:	2001      	movs	r0, #1
    71c2:	7060      	strb	r0, [r4, #1]
    71c4:	4807      	ldr	r0, [pc, #28]	; (71e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    71c6:	6800      	ldr	r0, [r0, #0]
    71c8:	e001      	b.n	71ce <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    71ca:	7061      	strb	r1, [r4, #1]
    71cc:	2010      	movs	r0, #16
    71ce:	70a0      	strb	r0, [r4, #2]
    71d0:	7021      	strb	r1, [r4, #0]
    71d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    71d6:	2000      	movs	r0, #0
    71d8:	f000 b892 	b.w	7300 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    71dc:	2000018e 	.word	0x2000018e
    71e0:	4001f508 	.word	0x4001f508
    71e4:	4000f400 	.word	0x4000f400

000071e8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    71e8:	b510      	push	{r4, lr}
    71ea:	2002      	movs	r0, #2
    71ec:	f000 f888 	bl	7300 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    71f0:	4904      	ldr	r1, [pc, #16]	; (7204 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    71f2:	2001      	movs	r0, #1
    71f4:	7008      	strb	r0, [r1, #0]
    71f6:	f000 f859 	bl	72ac <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    71fa:	4903      	ldr	r1, [pc, #12]	; (7208 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    71fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7200:	6008      	str	r0, [r1, #0]
    7202:	bd10      	pop	{r4, pc}
    7204:	2000018e 	.word	0x2000018e
    7208:	4001f504 	.word	0x4001f504

0000720c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    720c:	4803      	ldr	r0, [pc, #12]	; (721c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    720e:	2100      	movs	r1, #0
    7210:	7001      	strb	r1, [r0, #0]
    7212:	7041      	strb	r1, [r0, #1]
    7214:	2110      	movs	r1, #16
    7216:	7081      	strb	r1, [r0, #2]
    7218:	4770      	bx	lr
    721a:	0000      	.short	0x0000
    721c:	2000018e 	.word	0x2000018e

00007220 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7220:	4807      	ldr	r0, [pc, #28]	; (7240 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7222:	b510      	push	{r4, lr}
    7224:	7801      	ldrb	r1, [r0, #0]
    7226:	b141      	cbz	r1, 723a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7228:	f000 f832 	bl	7290 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    722c:	b118      	cbz	r0, 7236 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    722e:	4805      	ldr	r0, [pc, #20]	; (7244 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7230:	6800      	ldr	r0, [r0, #0]
    7232:	b2c0      	uxtb	r0, r0
    7234:	bd10      	pop	{r4, pc}
    7236:	2010      	movs	r0, #16
    7238:	bd10      	pop	{r4, pc}
    723a:	7880      	ldrb	r0, [r0, #2]
    723c:	bd10      	pop	{r4, pc}
    723e:	0000      	.short	0x0000
    7240:	2000018e 	.word	0x2000018e
    7244:	4000f400 	.word	0x4000f400

00007248 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7248:	4808      	ldr	r0, [pc, #32]	; (726c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    724a:	b510      	push	{r4, lr}
    724c:	7801      	ldrb	r1, [r0, #0]
    724e:	b159      	cbz	r1, 7268 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7250:	4807      	ldr	r0, [pc, #28]	; (7270 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7252:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7256:	b128      	cbz	r0, 7264 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7258:	f000 f80c 	bl	7274 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    725c:	2800      	cmp	r0, #0
    725e:	d000      	beq.n	7262 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    7260:	2001      	movs	r0, #1
    7262:	bd10      	pop	{r4, pc}
    7264:	2002      	movs	r0, #2
    7266:	bd10      	pop	{r4, pc}
    7268:	7840      	ldrb	r0, [r0, #1]
    726a:	bd10      	pop	{r4, pc}
    726c:	2000018e 	.word	0x2000018e
    7270:	4000f000 	.word	0x4000f000
    7274:	4805      	ldr	r0, [pc, #20]	; (728c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7276:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    727a:	b111      	cbz	r1, 7282 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    727c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7280:	b108      	cbz	r0, 7286 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    7282:	2000      	movs	r0, #0
    7284:	4770      	bx	lr
    7286:	2001      	movs	r0, #1
    7288:	4770      	bx	lr
    728a:	0000      	.short	0x0000
    728c:	4000f000 	.word	0x4000f000
    7290:	4805      	ldr	r0, [pc, #20]	; (72a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    7292:	b510      	push	{r4, lr}
    7294:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7298:	b120      	cbz	r0, 72a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    729a:	f7ff ffeb 	bl	7274 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    729e:	b108      	cbz	r0, 72a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    72a0:	2001      	movs	r0, #1
    72a2:	bd10      	pop	{r4, pc}
    72a4:	2000      	movs	r0, #0
    72a6:	bd10      	pop	{r4, pc}
    72a8:	4000f000 	.word	0x4000f000
    72ac:	4804      	ldr	r0, [pc, #16]	; (72c0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    72ae:	2100      	movs	r1, #0
    72b0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    72b4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    72b8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    72bc:	4770      	bx	lr
    72be:	0000      	.short	0x0000
    72c0:	4000f000 	.word	0x4000f000

000072c4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    72c4:	b570      	push	{r4, r5, r6, lr}
    72c6:	4d05      	ldr	r5, [pc, #20]	; (72dc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    72c8:	2400      	movs	r4, #0
    72ca:	7828      	ldrb	r0, [r5, #0]
    72cc:	b110      	cbz	r0, 72d4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    72ce:	f000 f80f 	bl	72f0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>
    72d2:	702c      	strb	r4, [r5, #0]
    72d4:	706c      	strb	r4, [r5, #1]
    72d6:	70ac      	strb	r4, [r5, #2]
    72d8:	bd70      	pop	{r4, r5, r6, pc}
    72da:	0000      	.short	0x0000
    72dc:	20000191 	.word	0x20000191

000072e0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    72e0:	4802      	ldr	r0, [pc, #8]	; (72ec <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    72e2:	2100      	movs	r1, #0
    72e4:	7001      	strb	r1, [r0, #0]
    72e6:	7041      	strb	r1, [r0, #1]
    72e8:	7081      	strb	r1, [r0, #2]
    72ea:	4770      	bx	lr
    72ec:	20000191 	.word	0x20000191
    72f0:	4902      	ldr	r1, [pc, #8]	; (72fc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x1c>)
    72f2:	4801      	ldr	r0, [pc, #4]	; (72f8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x18>)
    72f4:	6008      	str	r0, [r1, #0]
    72f6:	4770      	bx	lr
    72f8:	02020000 	.word	0x02020000
    72fc:	4001f508 	.word	0x4001f508

00007300 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7300:	b510      	push	{r4, lr}
    7302:	4604      	mov	r4, r0
    7304:	f000 f820 	bl	7348 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7308:	2c00      	cmp	r4, #0
    730a:	d00e      	beq.n	732a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    730c:	4a0b      	ldr	r2, [pc, #44]	; (733c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    730e:	480b      	ldr	r0, [pc, #44]	; (733c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7310:	490b      	ldr	r1, [pc, #44]	; (7340 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7312:	3214      	adds	r2, #20
    7314:	2c01      	cmp	r4, #1
    7316:	d005      	beq.n	7324 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7318:	2c02      	cmp	r4, #2
    731a:	d007      	beq.n	732c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    731c:	2182      	movs	r1, #130	; 0x82
    731e:	203d      	movs	r0, #61	; 0x3d
    7320:	f7fd f9fc 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7324:	2302      	movs	r3, #2
    7326:	6003      	str	r3, [r0, #0]
    7328:	6011      	str	r1, [r2, #0]
    732a:	bd10      	pop	{r4, pc}
    732c:	2303      	movs	r3, #3
    732e:	6003      	str	r3, [r0, #0]
    7330:	6011      	str	r1, [r2, #0]
    7332:	4904      	ldr	r1, [pc, #16]	; (7344 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7334:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7338:	6008      	str	r0, [r1, #0]
    733a:	bd10      	pop	{r4, pc}
    733c:	4000f500 	.word	0x4000f500
    7340:	200010fb 	.word	0x200010fb
    7344:	4001f504 	.word	0x4001f504
    7348:	4805      	ldr	r0, [pc, #20]	; (7360 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    734a:	b510      	push	{r4, lr}
    734c:	2100      	movs	r1, #0
    734e:	6001      	str	r1, [r0, #0]
    7350:	6001      	str	r1, [r0, #0]
    7352:	f7ff ffb7 	bl	72c4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7356:	4903      	ldr	r1, [pc, #12]	; (7364 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7358:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    735c:	6008      	str	r0, [r1, #0]
    735e:	bd10      	pop	{r4, pc}
    7360:	4000f500 	.word	0x4000f500
    7364:	4001f508 	.word	0x4001f508

00007368 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7368:	4805      	ldr	r0, [pc, #20]	; (7380 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    736a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    736e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7372:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7376:	2100      	movs	r1, #0
    7378:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    737c:	4770      	bx	lr
    737e:	0000      	.short	0x0000
    7380:	40001000 	.word	0x40001000

00007384 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7384:	4904      	ldr	r1, [pc, #16]	; (7398 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7386:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    738a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    738e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7392:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7396:	4770      	bx	lr
    7398:	40001000 	.word	0x40001000

0000739c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    739c:	4801      	ldr	r0, [pc, #4]	; (73a4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    739e:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    73a2:	4770      	bx	lr
    73a4:	20000db8 	.word	0x20000db8

000073a8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    73a8:	4902      	ldr	r1, [pc, #8]	; (73b4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    73aa:	5c08      	ldrb	r0, [r1, r0]
    73ac:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    73b0:	4770      	bx	lr
    73b2:	0000      	.short	0x0000
    73b4:	0000802e 	.word	0x0000802e

000073b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    73b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73ba:	4c24      	ldr	r4, [pc, #144]	; (744c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    73bc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    73c0:	f010 0f10 	tst.w	r0, #16
    73c4:	d001      	beq.n	73ca <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    73c6:	2701      	movs	r7, #1
    73c8:	e000      	b.n	73cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    73ca:	2700      	movs	r7, #0
    73cc:	2010      	movs	r0, #16
    73ce:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    73d2:	2002      	movs	r0, #2
    73d4:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    73d8:	481d      	ldr	r0, [pc, #116]	; (7450 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    73da:	2500      	movs	r5, #0
    73dc:	491d      	ldr	r1, [pc, #116]	; (7454 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    73de:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    73e2:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    73e6:	6008      	str	r0, [r1, #0]
    73e8:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    73ec:	f44f 7688 	mov.w	r6, #272	; 0x110
    73f0:	f010 0fff 	tst.w	r0, #255	; 0xff
    73f4:	d019      	beq.n	742a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    73f6:	20ff      	movs	r0, #255	; 0xff
    73f8:	f88d 0000 	strb.w	r0, [sp]
    73fc:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7400:	2001      	movs	r0, #1
    7402:	6120      	str	r0, [r4, #16]
    7404:	e005      	b.n	7412 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7406:	bf00      	nop
    7408:	f89d 0000 	ldrb.w	r0, [sp]
    740c:	1e40      	subs	r0, r0, #1
    740e:	f88d 0000 	strb.w	r0, [sp]
    7412:	f89d 0000 	ldrb.w	r0, [sp]
    7416:	b128      	cbz	r0, 7424 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7418:	4631      	mov	r1, r6
    741a:	4620      	mov	r0, r4
    741c:	f003 fd14 	bl	ae48 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7420:	2800      	cmp	r0, #0
    7422:	d0f1      	beq.n	7408 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7424:	f89d 0000 	ldrb.w	r0, [sp]
    7428:	b158      	cbz	r0, 7442 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    742a:	f000 fbf5 	bl	7c18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    742e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7432:	f000 fd7d 	bl	7f30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    7436:	2f00      	cmp	r7, #0
    7438:	d002      	beq.n	7440 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    743a:	2010      	movs	r0, #16
    743c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7442:	f640 018f 	movw	r1, #2191	; 0x88f
    7446:	203e      	movs	r0, #62	; 0x3e
    7448:	f7fd f968 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    744c:	40001000 	.word	0x40001000
    7450:	20000db8 	.word	0x20000db8
    7454:	4001f508 	.word	0x4001f508

00007458 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    745c:	4d18      	ldr	r5, [pc, #96]	; (74c0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    745e:	4607      	mov	r7, r0
    7460:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    7464:	07c2      	lsls	r2, r0, #31
    7466:	d00f      	beq.n	7488 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7468:	4c16      	ldr	r4, [pc, #88]	; (74c4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    746a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    746e:	f042 0201 	orr.w	r2, r2, #1
    7472:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7476:	f040 0002 	orr.w	r0, r0, #2
    747a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    747e:	2601      	movs	r6, #1
    7480:	b13f      	cbz	r7, 7492 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7482:	2f01      	cmp	r7, #1
    7484:	d00b      	beq.n	749e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7486:	e010      	b.n	74aa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7488:	f240 717c 	movw	r1, #1916	; 0x77c
    748c:	203e      	movs	r0, #62	; 0x3e
    748e:	f7fd f945 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7492:	4608      	mov	r0, r1
    7494:	f000 fda6 	bl	7fe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    7498:	726e      	strb	r6, [r5, #9]
    749a:	6026      	str	r6, [r4, #0]
    749c:	e005      	b.n	74aa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    749e:	4608      	mov	r0, r1
    74a0:	f000 fd86 	bl	7fb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    74a4:	2002      	movs	r0, #2
    74a6:	7268      	strb	r0, [r5, #9]
    74a8:	6066      	str	r6, [r4, #4]
    74aa:	4807      	ldr	r0, [pc, #28]	; (74c8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    74ac:	64c6      	str	r6, [r0, #76]	; 0x4c
    74ae:	4806      	ldr	r0, [pc, #24]	; (74c8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    74b0:	300c      	adds	r0, #12
    74b2:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    74b6:	4638      	mov	r0, r7
    74b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    74bc:	f000 bd0a 	b.w	7ed4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    74c0:	20000db8 	.word	0x20000db8
    74c4:	40001000 	.word	0x40001000
    74c8:	40008000 	.word	0x40008000

000074cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    74cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    74d0:	4c2c      	ldr	r4, [pc, #176]	; (7584 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    74d2:	0006      	movs	r6, r0
    74d4:	4d2c      	ldr	r5, [pc, #176]	; (7588 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    74d6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    74da:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 758c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    74de:	f040 0002 	orr.w	r0, r0, #2
    74e2:	4689      	mov	r9, r1
    74e4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    74e8:	f04f 0700 	mov.w	r7, #0
    74ec:	d002      	beq.n	74f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    74ee:	2e01      	cmp	r6, #1
    74f0:	d020      	beq.n	7534 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    74f2:	e036      	b.n	7562 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    74f4:	4608      	mov	r0, r1
    74f6:	f000 fd75 	bl	7fe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    74fa:	2001      	movs	r0, #1
    74fc:	7260      	strb	r0, [r4, #9]
    74fe:	79e0      	ldrb	r0, [r4, #7]
    7500:	2801      	cmp	r0, #1
    7502:	d105      	bne.n	7510 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    7504:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7508:	f040 0008 	orr.w	r0, r0, #8
    750c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7510:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7512:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    7516:	62a0      	str	r0, [r4, #40]	; 0x28
    7518:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    751c:	f8c8 0000 	str.w	r0, [r8]
    7520:	491b      	ldr	r1, [pc, #108]	; (7590 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    7522:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    7526:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    752a:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    752e:	fbb0 f7f1 	udiv	r7, r0, r1
    7532:	e016      	b.n	7562 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7534:	4608      	mov	r0, r1
    7536:	f000 fd3b 	bl	7fb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    753a:	2002      	movs	r0, #2
    753c:	7260      	strb	r0, [r4, #9]
    753e:	79e0      	ldrb	r0, [r4, #7]
    7540:	2801      	cmp	r0, #1
    7542:	d105      	bne.n	7550 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    7544:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7548:	f040 0004 	orr.w	r0, r0, #4
    754c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7550:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7552:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    7556:	62a0      	str	r0, [r4, #40]	; 0x28
    7558:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    755c:	f8c8 0000 	str.w	r0, [r8]
    7560:	2729      	movs	r7, #41	; 0x29
    7562:	f000 fbc5 	bl	7cf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    7566:	f000 ffe0 	bl	852a <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    756a:	b120      	cbz	r0, 7576 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    756c:	f7ff ff24 	bl	73b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7570:	2000      	movs	r0, #0
    7572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7576:	2100      	movs	r1, #0
    7578:	4630      	mov	r0, r6
    757a:	f000 fcab 	bl	7ed4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    757e:	4638      	mov	r0, r7
    7580:	e7f7      	b.n	7572 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    7582:	0000      	.short	0x0000
    7584:	20000db8 	.word	0x20000db8
    7588:	40001000 	.word	0x40001000
    758c:	4001f504 	.word	0x4001f504
    7590:	00008028 	.word	0x00008028

00007594 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    7594:	b510      	push	{r4, lr}
    7596:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    7598:	4901      	ldr	r1, [pc, #4]	; (75a0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    759a:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    759e:	bd10      	pop	{r4, pc}
    75a0:	20000da8 	.word	0x20000da8

000075a4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    75a4:	b570      	push	{r4, r5, r6, lr}
    75a6:	4c0f      	ldr	r4, [pc, #60]	; (75e4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    75a8:	4603      	mov	r3, r0
    75aa:	2002      	movs	r0, #2
    75ac:	7320      	strb	r0, [r4, #12]
    75ae:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    75b2:	2096      	movs	r0, #150	; 0x96
    75b4:	f894 1020 	ldrb.w	r1, [r4, #32]
    75b8:	7d22      	ldrb	r2, [r4, #20]
    75ba:	2d01      	cmp	r5, #1
    75bc:	d00e      	beq.n	75dc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    75be:	f000 fd6f 	bl	80a0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    75c2:	6120      	str	r0, [r4, #16]
    75c4:	4808      	ldr	r0, [pc, #32]	; (75e8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    75c6:	2100      	movs	r1, #0
    75c8:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    75cc:	6921      	ldr	r1, [r4, #16]
    75ce:	69e0      	ldr	r0, [r4, #28]
    75d0:	4408      	add	r0, r1
    75d2:	4905      	ldr	r1, [pc, #20]	; (75e8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    75d4:	1d09      	adds	r1, r1, #4
    75d6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    75da:	bd70      	pop	{r4, r5, r6, pc}
    75dc:	f000 fd7e 	bl	80dc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    75e0:	e7ef      	b.n	75c2 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    75e2:	0000      	.short	0x0000
    75e4:	20000db8 	.word	0x20000db8
    75e8:	40008000 	.word	0x40008000

000075ec <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    75ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75f0:	2238      	movs	r2, #56	; 0x38
    75f2:	2100      	movs	r1, #0
    75f4:	4813      	ldr	r0, [pc, #76]	; (7644 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    75f6:	f001 f97e 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    75fa:	f000 fc99 	bl	7f30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    75fe:	f001 f895 	bl	872c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7602:	4d11      	ldr	r5, [pc, #68]	; (7648 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7604:	4e10      	ldr	r6, [pc, #64]	; (7648 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7606:	2400      	movs	r4, #0
    7608:	4f0f      	ldr	r7, [pc, #60]	; (7648 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    760a:	3508      	adds	r5, #8
    760c:	3610      	adds	r6, #16
    760e:	b928      	cbnz	r0, 761c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7610:	f001 f8a3 	bl	875a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7614:	b910      	cbnz	r0, 761c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7616:	f001 f8aa 	bl	876e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    761a:	b108      	cbz	r0, 7620 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    761c:	2224      	movs	r2, #36	; 0x24
    761e:	e006      	b.n	762e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7620:	f001 f8e5 	bl	87ee <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    7624:	b910      	cbnz	r0, 762c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    7626:	f001 f8d8 	bl	87da <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    762a:	b140      	cbz	r0, 763e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    762c:	2240      	movs	r2, #64	; 0x40
    762e:	21ff      	movs	r1, #255	; 0xff
    7630:	4638      	mov	r0, r7
    7632:	f001 f960 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7636:	602c      	str	r4, [r5, #0]
    7638:	6034      	str	r4, [r6, #0]
    763a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    763e:	2238      	movs	r2, #56	; 0x38
    7640:	e7f5      	b.n	762e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7642:	0000      	.short	0x0000
    7644:	20000db8 	.word	0x20000db8
    7648:	40000e00 	.word	0x40000e00

0000764c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    764c:	b510      	push	{r4, lr}
    764e:	f000 fc23 	bl	7e98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    7652:	f7ff feb1 	bl	73b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7656:	f7fc ff13 	bl	4480 <mpsl_fem_disable>
    765a:	b130      	cbz	r0, 766a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    765c:	1c40      	adds	r0, r0, #1
    765e:	d004      	beq.n	766a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7660:	f240 516d 	movw	r1, #1389	; 0x56d
    7664:	203e      	movs	r0, #62	; 0x3e
    7666:	f7fd f859 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    766a:	480f      	ldr	r0, [pc, #60]	; (76a8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    766c:	4a0f      	ldr	r2, [pc, #60]	; (76ac <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    766e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    7670:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    7674:	6011      	str	r1, [r2, #0]
    7676:	2400      	movs	r4, #0
    7678:	6284      	str	r4, [r0, #40]	; 0x28
    767a:	7304      	strb	r4, [r0, #12]
    767c:	61c4      	str	r4, [r0, #28]
    767e:	6184      	str	r4, [r0, #24]
    7680:	f000 fc0a 	bl	7e98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    7684:	480a      	ldr	r0, [pc, #40]	; (76b0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    7686:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    768a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    768e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    7692:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    7696:	2001      	movs	r0, #1
    7698:	f003 fbc5 	bl	ae26 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    769c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    76a0:	2001      	movs	r0, #1
    76a2:	f003 bbb3 	b.w	ae0c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    76a6:	0000      	.short	0x0000
    76a8:	20000db8 	.word	0x20000db8
    76ac:	4001f508 	.word	0x4001f508
    76b0:	40008000 	.word	0x40008000

000076b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    76b4:	b570      	push	{r4, r5, r6, lr}
    76b6:	2001      	movs	r0, #1
    76b8:	f003 fbb5 	bl	ae26 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    76bc:	4c37      	ldr	r4, [pc, #220]	; (779c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    76be:	2000      	movs	r0, #0
    76c0:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    76c4:	2001      	movs	r0, #1
    76c6:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    76ca:	f001 f866 	bl	879a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    76ce:	4d34      	ldr	r5, [pc, #208]	; (77a0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    76d0:	b118      	cbz	r0, 76da <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    76d2:	6828      	ldr	r0, [r5, #0]
    76d4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    76d8:	6028      	str	r0, [r5, #0]
    76da:	f001 f852 	bl	8782 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    76de:	b128      	cbz	r0, 76ec <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    76e0:	6828      	ldr	r0, [r5, #0]
    76e2:	4930      	ldr	r1, [pc, #192]	; (77a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    76e4:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    76e8:	4308      	orrs	r0, r1
    76ea:	6028      	str	r0, [r5, #0]
    76ec:	f001 f865 	bl	87ba <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    76f0:	b138      	cbz	r0, 7702 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    76f2:	482b      	ldr	r0, [pc, #172]	; (77a0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    76f4:	1d00      	adds	r0, r0, #4
    76f6:	6801      	ldr	r1, [r0, #0]
    76f8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    76fc:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    7700:	6001      	str	r1, [r0, #0]
    7702:	4927      	ldr	r1, [pc, #156]	; (77a0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7704:	4828      	ldr	r0, [pc, #160]	; (77a8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    7706:	313c      	adds	r1, #60	; 0x3c
    7708:	6008      	str	r0, [r1, #0]
    770a:	f7fc feef 	bl	44ec <mpsl_fem_device_config_254_apply_get>
    770e:	b140      	cbz	r0, 7722 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    7710:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7714:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    7718:	1c41      	adds	r1, r0, #1
    771a:	d002      	beq.n	7722 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    771c:	4920      	ldr	r1, [pc, #128]	; (77a0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    771e:	3110      	adds	r1, #16
    7720:	6008      	str	r0, [r1, #0]
    7722:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    7726:	6e00      	ldr	r0, [r0, #96]	; 0x60
    7728:	1c41      	adds	r1, r0, #1
    772a:	d004      	beq.n	7736 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    772c:	491f      	ldr	r1, [pc, #124]	; (77ac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    772e:	680a      	ldr	r2, [r1, #0]
    7730:	f360 4217 	bfi	r2, r0, #16, #8
    7734:	600a      	str	r2, [r1, #0]
    7736:	f240 1103 	movw	r1, #259	; 0x103
    773a:	f240 605b 	movw	r0, #1627	; 0x65b
    773e:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    7742:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    7746:	2001      	movs	r0, #1
    7748:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    774c:	f000 f842 	bl	77d4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    7750:	f240 2001 	movw	r0, #513	; 0x201
    7754:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    7758:	2002      	movs	r0, #2
    775a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    775e:	4914      	ldr	r1, [pc, #80]	; (77b0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    7760:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    7764:	6008      	str	r0, [r1, #0]
    7766:	4913      	ldr	r1, [pc, #76]	; (77b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    7768:	2000      	movs	r0, #0
    776a:	4d13      	ldr	r5, [pc, #76]	; (77b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    776c:	8608      	strh	r0, [r1, #48]	; 0x30
    776e:	3110      	adds	r1, #16
    7770:	61c8      	str	r0, [r1, #28]
    7772:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    7776:	7028      	strb	r0, [r5, #0]
    7778:	2001      	movs	r0, #1
    777a:	f003 fb47 	bl	ae0c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    777e:	2010      	movs	r0, #16
    7780:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7784:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7788:	2002      	movs	r0, #2
    778a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    778e:	6868      	ldr	r0, [r5, #4]
    7790:	2800      	cmp	r0, #0
    7792:	d002      	beq.n	779a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    7794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7798:	4700      	bx	r0
    779a:	bd70      	pop	{r4, r5, r6, pc}
    779c:	40001000 	.word	0x40001000
    77a0:	4000173c 	.word	0x4000173c
    77a4:	80000096 	.word	0x80000096
    77a8:	8900002c 	.word	0x8900002c
    77ac:	4000158c 	.word	0x4000158c
    77b0:	4001f504 	.word	0x4001f504
    77b4:	20000da8 	.word	0x20000da8
    77b8:	20000148 	.word	0x20000148

000077bc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    77bc:	4901      	ldr	r1, [pc, #4]	; (77c4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    77be:	7548      	strb	r0, [r1, #21]
    77c0:	4770      	bx	lr
    77c2:	0000      	.short	0x0000
    77c4:	20000db8 	.word	0x20000db8

000077c8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    77c8:	4901      	ldr	r1, [pc, #4]	; (77d0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    77ca:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    77ce:	4770      	bx	lr
    77d0:	0000807c 	.word	0x0000807c

000077d4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    77d4:	4908      	ldr	r1, [pc, #32]	; (77f8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    77d6:	b510      	push	{r4, lr}
    77d8:	7508      	strb	r0, [r1, #20]
    77da:	4908      	ldr	r1, [pc, #32]	; (77fc <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    77dc:	2801      	cmp	r0, #1
    77de:	d006      	beq.n	77ee <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    77e0:	2802      	cmp	r0, #2
    77e2:	d006      	beq.n	77f2 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    77e4:	f640 5169 	movw	r1, #3433	; 0xd69
    77e8:	203e      	movs	r0, #62	; 0x3e
    77ea:	f7fc ff97 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77ee:	2003      	movs	r0, #3
    77f0:	e000      	b.n	77f4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    77f2:	2004      	movs	r0, #4
    77f4:	6008      	str	r0, [r1, #0]
    77f6:	bd10      	pop	{r4, pc}
    77f8:	20000db8 	.word	0x20000db8
    77fc:	40001510 	.word	0x40001510

00007800 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    7800:	4905      	ldr	r1, [pc, #20]	; (7818 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    7802:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    7806:	4805      	ldr	r0, [pc, #20]	; (781c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    7808:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    780c:	f041 0101 	orr.w	r1, r1, #1
    7810:	7001      	strb	r1, [r0, #0]
    7812:	f000 ba33 	b.w	7c7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    7816:	0000      	.short	0x0000
    7818:	40001000 	.word	0x40001000
    781c:	20000db8 	.word	0x20000db8

00007820 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    7820:	4901      	ldr	r1, [pc, #4]	; (7828 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    7822:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7826:	4770      	bx	lr
    7828:	00008088 	.word	0x00008088

0000782c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    782c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7830:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 78d4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>
    7834:	4d28      	ldr	r5, [pc, #160]	; (78d8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xac>)
    7836:	460f      	mov	r7, r1
    7838:	0006      	movs	r6, r0
    783a:	4614      	mov	r4, r2
    783c:	f04f 0801 	mov.w	r8, #1
    7840:	d004      	beq.n	784c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20>
    7842:	2e01      	cmp	r6, #1
    7844:	d010      	beq.n	7868 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3c>
    7846:	f640 0124 	movw	r1, #2084	; 0x824
    784a:	e039      	b.n	78c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x94>
    784c:	4610      	mov	r0, r2
    784e:	f000 fbc9 	bl	7fe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    7852:	4822      	ldr	r0, [pc, #136]	; (78dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>)
    7854:	f885 8009 	strb.w	r8, [r5, #9]
    7858:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    785c:	4638      	mov	r0, r7
    785e:	f000 fb6f 	bl	7f40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    7862:	4604      	mov	r4, r0
    7864:	4648      	mov	r0, r9
    7866:	e00c      	b.n	7882 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x56>
    7868:	4610      	mov	r0, r2
    786a:	f000 fba1 	bl	7fb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    786e:	2002      	movs	r0, #2
    7870:	7268      	strb	r0, [r5, #9]
    7872:	f649 71ba 	movw	r1, #40890	; 0x9fba
    7876:	4638      	mov	r0, r7
    7878:	f000 fb62 	bl	7f40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    787c:	4604      	mov	r4, r0
    787e:	4815      	ldr	r0, [pc, #84]	; (78d4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>)
    7880:	1d00      	adds	r0, r0, #4
    7882:	f000 fb1b 	bl	7ebc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    7886:	4f16      	ldr	r7, [pc, #88]	; (78e0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    7888:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
    788c:	4916      	ldr	r1, [pc, #88]	; (78e8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>)
    788e:	4815      	ldr	r0, [pc, #84]	; (78e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>)
    7890:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    7894:	2010      	movs	r0, #16
    7896:	f8c9 0304 	str.w	r0, [r9, #772]	; 0x304
    789a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    789c:	4913      	ldr	r1, [pc, #76]	; (78ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc0>)
    789e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    78a2:	62a8      	str	r0, [r5, #40]	; 0x28
    78a4:	0138      	lsls	r0, r7, #4
    78a6:	6008      	str	r0, [r1, #0]
    78a8:	f000 fa22 	bl	7cf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    78ac:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
    78b0:	480b      	ldr	r0, [pc, #44]	; (78e0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    78b2:	300c      	adds	r0, #12
    78b4:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    78b8:	42a0      	cmp	r0, r4
    78ba:	d304      	bcc.n	78c6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9a>
    78bc:	f640 013a 	movw	r1, #2106	; 0x83a
    78c0:	203e      	movs	r0, #62	; 0x3e
    78c2:	f7fc ff2b 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78c6:	4621      	mov	r1, r4
    78c8:	4630      	mov	r0, r6
    78ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    78ce:	f000 bb01 	b.w	7ed4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    78d2:	0000      	.short	0x0000
    78d4:	40001000 	.word	0x40001000
    78d8:	20000db8 	.word	0x20000db8
    78dc:	00008028 	.word	0x00008028
    78e0:	40008000 	.word	0x40008000
    78e4:	40008140 	.word	0x40008140
    78e8:	4001f098 	.word	0x4001f098
    78ec:	4001f504 	.word	0x4001f504

000078f0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    78f0:	4b0d      	ldr	r3, [pc, #52]	; (7928 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    78f2:	b510      	push	{r4, lr}
    78f4:	71d8      	strb	r0, [r3, #7]
    78f6:	729a      	strb	r2, [r3, #10]
    78f8:	b151      	cbz	r1, 7910 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    78fa:	2002      	movs	r0, #2
    78fc:	7218      	strb	r0, [r3, #8]
    78fe:	2801      	cmp	r0, #1
    7900:	d008      	beq.n	7914 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    7902:	2802      	cmp	r0, #2
    7904:	d00f      	beq.n	7926 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    7906:	f640 2145 	movw	r1, #2629	; 0xa45
    790a:	203e      	movs	r0, #62	; 0x3e
    790c:	f7fc ff06 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7910:	2001      	movs	r0, #1
    7912:	e7f3      	b.n	78fc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    7914:	7a58      	ldrb	r0, [r3, #9]
    7916:	2802      	cmp	r0, #2
    7918:	d105      	bne.n	7926 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    791a:	f000 f973 	bl	7c04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    791e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7922:	f000 baa1 	b.w	7e68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    7926:	bd10      	pop	{r4, pc}
    7928:	20000db8 	.word	0x20000db8

0000792c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    792c:	4904      	ldr	r1, [pc, #16]	; (7940 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    792e:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    7932:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    7936:	4249      	negs	r1, r1
    7938:	7001      	strb	r1, [r0, #0]
    793a:	2001      	movs	r0, #1
    793c:	4770      	bx	lr
    793e:	0000      	.short	0x0000
    7940:	40001000 	.word	0x40001000

00007944 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    7944:	4903      	ldr	r1, [pc, #12]	; (7954 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    7946:	0e02      	lsrs	r2, r0, #24
    7948:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    794c:	0200      	lsls	r0, r0, #8
    794e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    7952:	4770      	bx	lr
    7954:	40001000 	.word	0x40001000

00007958 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    7958:	4901      	ldr	r1, [pc, #4]	; (7960 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    795a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    795e:	4770      	bx	lr
    7960:	40001000 	.word	0x40001000

00007964 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    7964:	b510      	push	{r4, lr}
    7966:	2200      	movs	r2, #0
    7968:	2901      	cmp	r1, #1
    796a:	d006      	beq.n	797a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    796c:	2902      	cmp	r1, #2
    796e:	d002      	beq.n	7976 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    7970:	f240 21d9 	movw	r1, #729	; 0x2d9
    7974:	e014      	b.n	79a0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    7976:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    797a:	490b      	ldr	r1, [pc, #44]	; (79a8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    797c:	430a      	orrs	r2, r1
    797e:	490b      	ldr	r1, [pc, #44]	; (79ac <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    7980:	600a      	str	r2, [r1, #0]
    7982:	490b      	ldr	r1, [pc, #44]	; (79b0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    7984:	4308      	orrs	r0, r1
    7986:	4909      	ldr	r1, [pc, #36]	; (79ac <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    7988:	1d09      	adds	r1, r1, #4
    798a:	6008      	str	r0, [r1, #0]
    798c:	4809      	ldr	r0, [pc, #36]	; (79b4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    798e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    7992:	b2c0      	uxtb	r0, r0
    7994:	2803      	cmp	r0, #3
    7996:	d001      	beq.n	799c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    7998:	280b      	cmp	r0, #11
    799a:	d104      	bne.n	79a6 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    799c:	f240 21f1 	movw	r1, #753	; 0x2f1
    79a0:	203e      	movs	r0, #62	; 0x3e
    79a2:	f7fc febb 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79a6:	bd10      	pop	{r4, pc}
    79a8:	00100108 	.word	0x00100108
    79ac:	40001514 	.word	0x40001514
    79b0:	02030000 	.word	0x02030000
    79b4:	40001000 	.word	0x40001000

000079b8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    79b8:	4901      	ldr	r1, [pc, #4]	; (79c0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    79ba:	7588      	strb	r0, [r1, #22]
    79bc:	4770      	bx	lr
    79be:	0000      	.short	0x0000
    79c0:	20000db8 	.word	0x20000db8

000079c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    79c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    79c8:	4852      	ldr	r0, [pc, #328]	; (7b14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    79ca:	f04f 0a01 	mov.w	sl, #1
    79ce:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    79d2:	4850      	ldr	r0, [pc, #320]	; (7b14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    79d4:	300c      	adds	r0, #12
    79d6:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    79da:	f000 fda4 	bl	8526 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    79de:	4c4e      	ldr	r4, [pc, #312]	; (7b18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    79e0:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    79e4:	f000 f918 	bl	7c18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    79e8:	494c      	ldr	r1, [pc, #304]	; (7b1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    79ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    79ec:	6008      	str	r0, [r1, #0]
    79ee:	f8df 9130 	ldr.w	r9, [pc, #304]	; 7b20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    79f2:	2000      	movs	r0, #0
    79f4:	62a0      	str	r0, [r4, #40]	; 0x28
    79f6:	f8d9 2200 	ldr.w	r2, [r9, #512]	; 0x200
    79fa:	f240 131d 	movw	r3, #285	; 0x11d
    79fe:	439a      	bics	r2, r3
    7a00:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    7a04:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    7a08:	f000 f986 	bl	7d18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    7a0c:	4605      	mov	r5, r0
    7a0e:	4841      	ldr	r0, [pc, #260]	; (7b14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    7a10:	3008      	adds	r0, #8
    7a12:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    7a16:	4e3f      	ldr	r6, [pc, #252]	; (7b14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    7a18:	61e0      	str	r0, [r4, #28]
    7a1a:	1d36      	adds	r6, r6, #4
    7a1c:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    7a20:	61a0      	str	r0, [r4, #24]
    7a22:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    7a26:	7d21      	ldrb	r1, [r4, #20]
    7a28:	f884 1020 	strb.w	r1, [r4, #32]
    7a2c:	7a61      	ldrb	r1, [r4, #9]
    7a2e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    7a32:	46a0      	mov	r8, r4
    7a34:	2400      	movs	r4, #0
    7a36:	4639      	mov	r1, r7
    7a38:	4628      	mov	r0, r5
    7a3a:	f000 f9e1 	bl	7e00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    7a3e:	b910      	cbnz	r0, 7a46 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    7a40:	f8c9 a010 	str.w	sl, [r9, #16]
    7a44:	2401      	movs	r4, #1
    7a46:	4f34      	ldr	r7, [pc, #208]	; (7b18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    7a48:	07e8      	lsls	r0, r5, #31
    7a4a:	f1a7 0710 	sub.w	r7, r7, #16
    7a4e:	d002      	beq.n	7a56 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    7a50:	6838      	ldr	r0, [r7, #0]
    7a52:	4780      	blx	r0
    7a54:	e032      	b.n	7abc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    7a56:	07a8      	lsls	r0, r5, #30
    7a58:	d527      	bpl.n	7aaa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    7a5a:	0768      	lsls	r0, r5, #29
    7a5c:	d41f      	bmi.n	7a9e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    7a5e:	f000 feac 	bl	87ba <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7a62:	b9e0      	cbnz	r0, 7a9e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    7a64:	f000 fe99 	bl	879a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7a68:	b9c8      	cbnz	r0, 7a9e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    7a6a:	482e      	ldr	r0, [pc, #184]	; (7b24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    7a6c:	6800      	ldr	r0, [r0, #0]
    7a6e:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    7a72:	f3c0 5142 	ubfx	r1, r0, #21, #3
    7a76:	f000 030f 	and.w	r3, r0, #15
    7a7a:	f3c0 1203 	ubfx	r2, r0, #4, #4
    7a7e:	f3c0 2003 	ubfx	r0, r0, #8, #4
    7a82:	f1bc 0f00 	cmp.w	ip, #0
    7a86:	d00a      	beq.n	7a9e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    7a88:	b10b      	cbz	r3, 7a8e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    7a8a:	b102      	cbz	r2, 7a8e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    7a8c:	b938      	cbnz	r0, 7a9e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    7a8e:	4825      	ldr	r0, [pc, #148]	; (7b24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    7a90:	1d00      	adds	r0, r0, #4
    7a92:	6800      	ldr	r0, [r0, #0]
    7a94:	b118      	cbz	r0, 7a9e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    7a96:	2903      	cmp	r1, #3
    7a98:	d201      	bcs.n	7a9e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    7a9a:	f045 0504 	orr.w	r5, r5, #4
    7a9e:	f345 0080 	sbfx	r0, r5, #2, #1
    7aa2:	4621      	mov	r1, r4
    7aa4:	1c40      	adds	r0, r0, #1
    7aa6:	687a      	ldr	r2, [r7, #4]
    7aa8:	e007      	b.n	7aba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    7aaa:	f015 0f28 	tst.w	r5, #40	; 0x28
    7aae:	d005      	beq.n	7abc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    7ab0:	f345 1140 	sbfx	r1, r5, #5, #1
    7ab4:	68ba      	ldr	r2, [r7, #8]
    7ab6:	4620      	mov	r0, r4
    7ab8:	1c49      	adds	r1, r1, #1
    7aba:	4790      	blx	r2
    7abc:	06e8      	lsls	r0, r5, #27
    7abe:	d501      	bpl.n	7ac4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    7ac0:	68f8      	ldr	r0, [r7, #12]
    7ac2:	4780      	blx	r0
    7ac4:	f898 1009 	ldrb.w	r1, [r8, #9]
    7ac8:	4640      	mov	r0, r8
    7aca:	2902      	cmp	r1, #2
    7acc:	d120      	bne.n	7b10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    7ace:	7b01      	ldrb	r1, [r0, #12]
    7ad0:	2900      	cmp	r1, #0
    7ad2:	d01d      	beq.n	7b10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    7ad4:	2902      	cmp	r1, #2
    7ad6:	d004      	beq.n	7ae2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11e>
    7ad8:	2901      	cmp	r1, #1
    7ada:	d009      	beq.n	7af0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12c>
    7adc:	f640 4148 	movw	r1, #3144	; 0xc48
    7ae0:	e00d      	b.n	7afe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    7ae2:	69c1      	ldr	r1, [r0, #28]
    7ae4:	f8d8 0010 	ldr.w	r0, [r8, #16]
    7ae8:	4408      	add	r0, r1
    7aea:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    7aee:	e00b      	b.n	7b08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    7af0:	6901      	ldr	r1, [r0, #16]
    7af2:	f8d8 001c 	ldr.w	r0, [r8, #28]
    7af6:	4281      	cmp	r1, r0
    7af8:	d804      	bhi.n	7b04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    7afa:	f640 4149 	movw	r1, #3145	; 0xc49
    7afe:	203e      	movs	r0, #62	; 0x3e
    7b00:	f7fc fe0c 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b04:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    7b08:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b0c:	f000 b9b6 	b.w	7e7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    7b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b14:	40008000 	.word	0x40008000
    7b18:	20000db8 	.word	0x20000db8
    7b1c:	4001f508 	.word	0x4001f508
    7b20:	40001000 	.word	0x40001000
    7b24:	40001450 	.word	0x40001450

00007b28 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    7b28:	b570      	push	{r4, r5, r6, lr}
    7b2a:	4b16      	ldr	r3, [pc, #88]	; (7b84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    7b2c:	888c      	ldrh	r4, [r1, #4]
    7b2e:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    7b32:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    7b36:	780c      	ldrb	r4, [r1, #0]
    7b38:	f8d1 1001 	ldr.w	r1, [r1, #1]
    7b3c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    7b40:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    7b44:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    7b48:	2401      	movs	r4, #1
    7b4a:	4084      	lsls	r4, r0
    7b4c:	b2c9      	uxtb	r1, r1
    7b4e:	b2e5      	uxtb	r5, r4
    7b50:	4329      	orrs	r1, r5
    7b52:	b132      	cbz	r2, 7b62 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    7b54:	2a01      	cmp	r2, #1
    7b56:	d00a      	beq.n	7b6e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    7b58:	f240 51d4 	movw	r1, #1492	; 0x5d4
    7b5c:	203e      	movs	r0, #62	; 0x3e
    7b5e:	f7fc fddd 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b62:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    7b66:	f3c0 2007 	ubfx	r0, r0, #8, #8
    7b6a:	43a0      	bics	r0, r4
    7b6c:	e004      	b.n	7b78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    7b6e:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    7b72:	f3c0 2007 	ubfx	r0, r0, #8, #8
    7b76:	4328      	orrs	r0, r5
    7b78:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    7b7c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    7b80:	bd70      	pop	{r4, r5, r6, pc}
    7b82:	0000      	.short	0x0000
    7b84:	40001000 	.word	0x40001000

00007b88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    7b88:	4901      	ldr	r1, [pc, #4]	; (7b90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    7b8a:	2001      	movs	r0, #1
    7b8c:	7008      	strb	r0, [r1, #0]
    7b8e:	4770      	bx	lr
    7b90:	20000148 	.word	0x20000148
    7b94:	480b      	ldr	r0, [pc, #44]	; (7bc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    7b96:	7d81      	ldrb	r1, [r0, #22]
    7b98:	480b      	ldr	r0, [pc, #44]	; (7bc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    7b9a:	5c40      	ldrb	r0, [r0, r1]
    7b9c:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7ba0:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    7ba4:	d204      	bcs.n	7bb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    7ba6:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    7baa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    7bae:	e001      	b.n	7bb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    7bb0:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    7bb4:	4a05      	ldr	r2, [pc, #20]	; (7bcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    7bb6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    7bba:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    7bbe:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    7bc2:	4770      	bx	lr
    7bc4:	20000db8 	.word	0x20000db8
    7bc8:	0000802e 	.word	0x0000802e
    7bcc:	40001000 	.word	0x40001000
    7bd0:	b508      	push	{r3, lr}
    7bd2:	490b      	ldr	r1, [pc, #44]	; (7c00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    7bd4:	466b      	mov	r3, sp
    7bd6:	f991 2015 	ldrsb.w	r2, [r1, #21]
    7bda:	7d89      	ldrb	r1, [r1, #22]
    7bdc:	f000 faca 	bl	8174 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    7be0:	f99d 0000 	ldrsb.w	r0, [sp]
    7be4:	f000 fa9a 	bl	811c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    7be8:	f10d 0001 	add.w	r0, sp, #1
    7bec:	f7fc fc6c 	bl	44c8 <mpsl_fem_pa_gain_set>
    7bf0:	2800      	cmp	r0, #0
    7bf2:	d004      	beq.n	7bfe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    7bf4:	f240 6115 	movw	r1, #1557	; 0x615
    7bf8:	203e      	movs	r0, #62	; 0x3e
    7bfa:	f7fc fd8f 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bfe:	bd08      	pop	{r3, pc}
    7c00:	20000db8 	.word	0x20000db8
    7c04:	4803      	ldr	r0, [pc, #12]	; (7c14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    7c06:	7a01      	ldrb	r1, [r0, #8]
    7c08:	2901      	cmp	r1, #1
    7c0a:	d102      	bne.n	7c12 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    7c0c:	7a80      	ldrb	r0, [r0, #10]
    7c0e:	f7ff bfdf 	b.w	7bd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    7c12:	4770      	bx	lr
    7c14:	20000db8 	.word	0x20000db8
    7c18:	480d      	ldr	r0, [pc, #52]	; (7c50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    7c1a:	b510      	push	{r4, lr}
    7c1c:	7a40      	ldrb	r0, [r0, #9]
    7c1e:	2801      	cmp	r0, #1
    7c20:	d00c      	beq.n	7c3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    7c22:	2802      	cmp	r0, #2
    7c24:	d113      	bne.n	7c4e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    7c26:	f7fc fc31 	bl	448c <mpsl_fem_lna_configuration_clear>
    7c2a:	2800      	cmp	r0, #0
    7c2c:	d00f      	beq.n	7c4e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    7c2e:	1c40      	adds	r0, r0, #1
    7c30:	d00d      	beq.n	7c4e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    7c32:	f640 01a6 	movw	r1, #2214	; 0x8a6
    7c36:	203e      	movs	r0, #62	; 0x3e
    7c38:	f7fc fd70 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c3c:	f7fc fc38 	bl	44b0 <mpsl_fem_pa_configuration_clear>
    7c40:	2800      	cmp	r0, #0
    7c42:	d004      	beq.n	7c4e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    7c44:	1c40      	adds	r0, r0, #1
    7c46:	d002      	beq.n	7c4e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    7c48:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    7c4c:	e7f3      	b.n	7c36 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    7c4e:	bd10      	pop	{r4, pc}
    7c50:	20000db8 	.word	0x20000db8
    7c54:	4808      	ldr	r0, [pc, #32]	; (7c78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    7c56:	2100      	movs	r1, #0
    7c58:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7c5c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    7c60:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    7c64:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7c68:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    7c6c:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    7c70:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7c74:	4770      	bx	lr
    7c76:	0000      	.short	0x0000
    7c78:	40001000 	.word	0x40001000
    7c7c:	4818      	ldr	r0, [pc, #96]	; (7ce0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    7c7e:	b510      	push	{r4, lr}
    7c80:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    7c84:	07c1      	lsls	r1, r0, #31
    7c86:	d029      	beq.n	7cdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    7c88:	0781      	lsls	r1, r0, #30
    7c8a:	d514      	bpl.n	7cb6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    7c8c:	4815      	ldr	r0, [pc, #84]	; (7ce4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    7c8e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7c92:	f041 0101 	orr.w	r1, r1, #1
    7c96:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7c9a:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    7c9e:	b2c0      	uxtb	r0, r0
    7ca0:	280b      	cmp	r0, #11
    7ca2:	d005      	beq.n	7cb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    7ca4:	280a      	cmp	r0, #10
    7ca6:	d003      	beq.n	7cb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    7ca8:	2803      	cmp	r0, #3
    7caa:	d001      	beq.n	7cb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    7cac:	2802      	cmp	r0, #2
    7cae:	d115      	bne.n	7cdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    7cb0:	f240 613e 	movw	r1, #1598	; 0x63e
    7cb4:	e00f      	b.n	7cd6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    7cb6:	0740      	lsls	r0, r0, #29
    7cb8:	d510      	bpl.n	7cdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    7cba:	480a      	ldr	r0, [pc, #40]	; (7ce4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    7cbc:	490a      	ldr	r1, [pc, #40]	; (7ce8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    7cbe:	3008      	adds	r0, #8
    7cc0:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    7cc4:	f44f 71a0 	mov.w	r1, #320	; 0x140
    7cc8:	4808      	ldr	r0, [pc, #32]	; (7cec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    7cca:	f003 f8c2 	bl	ae52 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    7cce:	2800      	cmp	r0, #0
    7cd0:	d004      	beq.n	7cdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    7cd2:	f240 6146 	movw	r1, #1606	; 0x646
    7cd6:	203e      	movs	r0, #62	; 0x3e
    7cd8:	f7fc fd20 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cdc:	bd10      	pop	{r4, pc}
    7cde:	0000      	.short	0x0000
    7ce0:	20000db8 	.word	0x20000db8
    7ce4:	40001000 	.word	0x40001000
    7ce8:	4001f098 	.word	0x4001f098
    7cec:	40008000 	.word	0x40008000
    7cf0:	4808      	ldr	r0, [pc, #32]	; (7d14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    7cf2:	4601      	mov	r1, r0
    7cf4:	79c2      	ldrb	r2, [r0, #7]
    7cf6:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    7cfa:	b112      	cbz	r2, 7d02 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    7cfc:	2a01      	cmp	r2, #1
    7cfe:	d003      	beq.n	7d08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    7d00:	e006      	b.n	7d10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    7d02:	f041 0102 	orr.w	r1, r1, #2
    7d06:	e001      	b.n	7d0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    7d08:	f041 0104 	orr.w	r1, r1, #4
    7d0c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    7d10:	f7ff bfb4 	b.w	7c7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    7d14:	20000db8 	.word	0x20000db8
    7d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d1c:	4d34      	ldr	r5, [pc, #208]	; (7df0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    7d1e:	2400      	movs	r4, #0
    7d20:	7b28      	ldrb	r0, [r5, #12]
    7d22:	b138      	cbz	r0, 7d34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    7d24:	f44f 71a2 	mov.w	r1, #324	; 0x144
    7d28:	4832      	ldr	r0, [pc, #200]	; (7df4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    7d2a:	f003 f892 	bl	ae52 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    7d2e:	b108      	cbz	r0, 7d34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    7d30:	2601      	movs	r6, #1
    7d32:	e000      	b.n	7d36 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    7d34:	2600      	movs	r6, #0
    7d36:	7a68      	ldrb	r0, [r5, #9]
    7d38:	4f2f      	ldr	r7, [pc, #188]	; (7df8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    7d3a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    7d3e:	2801      	cmp	r0, #1
    7d40:	d002      	beq.n	7d48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    7d42:	2802      	cmp	r0, #2
    7d44:	d006      	beq.n	7d54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    7d46:	e016      	b.n	7d76 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    7d48:	4638      	mov	r0, r7
    7d4a:	f003 f87d 	bl	ae48 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7d4e:	b190      	cbz	r0, 7d76 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    7d50:	2408      	movs	r4, #8
    7d52:	e010      	b.n	7d76 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    7d54:	4638      	mov	r0, r7
    7d56:	f003 f877 	bl	ae48 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7d5a:	b100      	cbz	r0, 7d5e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    7d5c:	2402      	movs	r4, #2
    7d5e:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    7d62:	43c0      	mvns	r0, r0
    7d64:	f340 0000 	sbfx	r0, r0, #0, #1
    7d68:	1c40      	adds	r0, r0, #1
    7d6a:	d101      	bne.n	7d70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    7d6c:	f044 0404 	orr.w	r4, r4, #4
    7d70:	b10e      	cbz	r6, 7d76 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    7d72:	f044 0401 	orr.w	r4, r4, #1
    7d76:	f014 0f0b 	tst.w	r4, #11
    7d7a:	d107      	bne.n	7d8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    7d7c:	f44f 7188 	mov.w	r1, #272	; 0x110
    7d80:	4638      	mov	r0, r7
    7d82:	f003 f861 	bl	ae48 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7d86:	b108      	cbz	r0, 7d8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    7d88:	f044 0410 	orr.w	r4, r4, #16
    7d8c:	481b      	ldr	r0, [pc, #108]	; (7dfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    7d8e:	7800      	ldrb	r0, [r0, #0]
    7d90:	b1f8      	cbz	r0, 7dd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    7d92:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    7d96:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    7d9a:	d007      	beq.n	7dac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    7d9c:	f44f 718a 	mov.w	r1, #276	; 0x114
    7da0:	4638      	mov	r0, r7
    7da2:	f003 f851 	bl	ae48 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7da6:	b108      	cbz	r0, 7dac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    7da8:	2001      	movs	r0, #1
    7daa:	e000      	b.n	7dae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    7dac:	2000      	movs	r0, #0
    7dae:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    7db2:	b13e      	cbz	r6, 7dc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    7db4:	f44f 718c 	mov.w	r1, #280	; 0x118
    7db8:	4638      	mov	r0, r7
    7dba:	f003 f845 	bl	ae48 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7dbe:	b108      	cbz	r0, 7dc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    7dc0:	2001      	movs	r0, #1
    7dc2:	e000      	b.n	7dc6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    7dc4:	2000      	movs	r0, #0
    7dc6:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    7dca:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    7dce:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    7dd2:	f7ff ff3f 	bl	7c54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    7dd6:	06e0      	lsls	r0, r4, #27
    7dd8:	d506      	bpl.n	7de8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    7dda:	0720      	lsls	r0, r4, #28
    7ddc:	d404      	bmi.n	7de8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    7dde:	7a68      	ldrb	r0, [r5, #9]
    7de0:	2801      	cmp	r0, #1
    7de2:	d101      	bne.n	7de8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    7de4:	f044 0420 	orr.w	r4, r4, #32
    7de8:	4620      	mov	r0, r4
    7dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7dee:	0000      	.short	0x0000
    7df0:	20000db8 	.word	0x20000db8
    7df4:	40008000 	.word	0x40008000
    7df8:	40001000 	.word	0x40001000
    7dfc:	20000148 	.word	0x20000148
    7e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e04:	4c17      	ldr	r4, [pc, #92]	; (7e64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>)
    7e06:	460d      	mov	r5, r1
    7e08:	7a21      	ldrb	r1, [r4, #8]
    7e0a:	b129      	cbz	r1, 7e18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    7e0c:	f010 0f11 	tst.w	r0, #17
    7e10:	d007      	beq.n	7e22 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    7e12:	f7ff fad1 	bl	73b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7e16:	e023      	b.n	7e60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    7e18:	f000 f88a 	bl	7f30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    7e1c:	2000      	movs	r0, #0
    7e1e:	7320      	strb	r0, [r4, #12]
    7e20:	e01e      	b.n	7e60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    7e22:	2901      	cmp	r1, #1
    7e24:	d001      	beq.n	7e2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    7e26:	2601      	movs	r6, #1
    7e28:	e000      	b.n	7e2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    7e2a:	2600      	movs	r6, #0
    7e2c:	79e0      	ldrb	r0, [r4, #7]
    7e2e:	2801      	cmp	r0, #1
    7e30:	d00e      	beq.n	7e50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    7e32:	2700      	movs	r7, #0
    7e34:	f000 f87c 	bl	7f30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    7e38:	2196      	movs	r1, #150	; 0x96
    7e3a:	4630      	mov	r0, r6
    7e3c:	f000 f88e 	bl	7f5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d4>
    7e40:	4601      	mov	r1, r0
    7e42:	b14f      	cbz	r7, 7e58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    7e44:	353b      	adds	r5, #59	; 0x3b
    7e46:	428d      	cmp	r5, r1
    7e48:	d904      	bls.n	7e54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    7e4a:	2000      	movs	r0, #0
    7e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e50:	2701      	movs	r7, #1
    7e52:	e7ef      	b.n	7e34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    7e54:	2001      	movs	r0, #1
    7e56:	71e0      	strb	r0, [r4, #7]
    7e58:	7aa2      	ldrb	r2, [r4, #10]
    7e5a:	4630      	mov	r0, r6
    7e5c:	f7ff fce6 	bl	782c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7e60:	2001      	movs	r0, #1
    7e62:	e7f3      	b.n	7e4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    7e64:	20000db8 	.word	0x20000db8
    7e68:	4803      	ldr	r0, [pc, #12]	; (7e78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    7e6a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7e6e:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    7e72:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7e76:	4770      	bx	lr
    7e78:	40001000 	.word	0x40001000
    7e7c:	4804      	ldr	r0, [pc, #16]	; (7e90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    7e7e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    7e80:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    7e84:	6281      	str	r1, [r0, #40]	; 0x28
    7e86:	4903      	ldr	r1, [pc, #12]	; (7e94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    7e88:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    7e8c:	6008      	str	r0, [r1, #0]
    7e8e:	4770      	bx	lr
    7e90:	20000db8 	.word	0x20000db8
    7e94:	4001f504 	.word	0x4001f504
    7e98:	4a07      	ldr	r2, [pc, #28]	; (7eb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    7e9a:	2000      	movs	r0, #0
    7e9c:	3208      	adds	r2, #8
    7e9e:	4906      	ldr	r1, [pc, #24]	; (7eb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    7ea0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7ea4:	1d0a      	adds	r2, r1, #4
    7ea6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7eaa:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7eae:	4902      	ldr	r1, [pc, #8]	; (7eb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    7eb0:	310c      	adds	r1, #12
    7eb2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7eb6:	4770      	bx	lr
    7eb8:	40008000 	.word	0x40008000
    7ebc:	4903      	ldr	r1, [pc, #12]	; (7ecc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x344>)
    7ebe:	79c9      	ldrb	r1, [r1, #7]
    7ec0:	2900      	cmp	r1, #0
    7ec2:	d102      	bne.n	7eca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    7ec4:	4902      	ldr	r1, [pc, #8]	; (7ed0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x348>)
    7ec6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    7eca:	4770      	bx	lr
    7ecc:	20000db8 	.word	0x20000db8
    7ed0:	4001f098 	.word	0x4001f098
    7ed4:	b510      	push	{r4, lr}
    7ed6:	4a14      	ldr	r2, [pc, #80]	; (7f28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    7ed8:	b120      	cbz	r0, 7ee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    7eda:	2801      	cmp	r0, #1
    7edc:	d011      	beq.n	7f02 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37a>
    7ede:	f44f 61ec 	mov.w	r1, #1888	; 0x760
    7ee2:	e01c      	b.n	7f1e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    7ee4:	f101 0028 	add.w	r0, r1, #40	; 0x28
    7ee8:	e9c2 1002 	strd	r1, r0, [r2, #8]
    7eec:	490f      	ldr	r1, [pc, #60]	; (7f2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    7eee:	480e      	ldr	r0, [pc, #56]	; (7f28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    7ef0:	f7fc fae4 	bl	44bc <mpsl_fem_pa_configuration_set>
    7ef4:	2800      	cmp	r0, #0
    7ef6:	d015      	beq.n	7f24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    7ef8:	1c40      	adds	r0, r0, #1
    7efa:	d013      	beq.n	7f24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    7efc:	f240 714f 	movw	r1, #1871	; 0x74f
    7f00:	e00d      	b.n	7f1e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    7f02:	f101 0029 	add.w	r0, r1, #41	; 0x29
    7f06:	e9c2 1002 	strd	r1, r0, [r2, #8]
    7f0a:	4908      	ldr	r1, [pc, #32]	; (7f2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    7f0c:	4806      	ldr	r0, [pc, #24]	; (7f28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    7f0e:	f7fc fac3 	bl	4498 <mpsl_fem_lna_configuration_set>
    7f12:	2800      	cmp	r0, #0
    7f14:	d006      	beq.n	7f24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    7f16:	1c40      	adds	r0, r0, #1
    7f18:	d004      	beq.n	7f24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    7f1a:	f240 715c 	movw	r1, #1884	; 0x75c
    7f1e:	203e      	movs	r0, #62	; 0x3e
    7f20:	f7fc fbfc 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f24:	bd10      	pop	{r4, pc}
    7f26:	0000      	.short	0x0000
    7f28:	20000150 	.word	0x20000150
    7f2c:	00008058 	.word	0x00008058
    7f30:	4802      	ldr	r0, [pc, #8]	; (7f3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    7f32:	2100      	movs	r1, #0
    7f34:	71c1      	strb	r1, [r0, #7]
    7f36:	7201      	strb	r1, [r0, #8]
    7f38:	7241      	strb	r1, [r0, #9]
    7f3a:	4770      	bx	lr
    7f3c:	20000db8 	.word	0x20000db8
    7f40:	4a05      	ldr	r2, [pc, #20]	; (7f58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d0>)
    7f42:	79d2      	ldrb	r2, [r2, #7]
    7f44:	2a01      	cmp	r2, #1
    7f46:	d006      	beq.n	7f56 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ce>
    7f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7f4c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    7f50:	fbb1 f1f2 	udiv	r1, r1, r2
    7f54:	1a40      	subs	r0, r0, r1
    7f56:	4770      	bx	lr
    7f58:	20000db8 	.word	0x20000db8
    7f5c:	b570      	push	{r4, r5, r6, lr}
    7f5e:	4c13      	ldr	r4, [pc, #76]	; (7fac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x424>)
    7f60:	4603      	mov	r3, r0
    7f62:	460d      	mov	r5, r1
    7f64:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    7f68:	2000      	movs	r0, #0
    7f6a:	b15a      	cbz	r2, 7f84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fc>
    7f6c:	4621      	mov	r1, r4
    7f6e:	f891 1020 	ldrb.w	r1, [r1, #32]
    7f72:	b163      	cbz	r3, 7f8e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    7f74:	2b01      	cmp	r3, #1
    7f76:	d111      	bne.n	7f9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>
    7f78:	2a01      	cmp	r2, #1
    7f7a:	4628      	mov	r0, r5
    7f7c:	d012      	beq.n	7fa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    7f7e:	f002 ff6d 	bl	ae5c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    7f82:	e009      	b.n	7f98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    7f84:	f640 0153 	movw	r1, #2131	; 0x853
    7f88:	203e      	movs	r0, #62	; 0x3e
    7f8a:	f7fc fbc7 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f8e:	2a01      	cmp	r2, #1
    7f90:	4628      	mov	r0, r5
    7f92:	d004      	beq.n	7f9e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x416>
    7f94:	f002 ff70 	bl	ae78 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    7f98:	69e1      	ldr	r1, [r4, #28]
    7f9a:	4408      	add	r0, r1
    7f9c:	bd70      	pop	{r4, r5, r6, pc}
    7f9e:	f000 f8d1 	bl	8144 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    7fa2:	e7f9      	b.n	7f98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    7fa4:	f000 f8c0 	bl	8128 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    7fa8:	e7f6      	b.n	7f98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    7faa:	0000      	.short	0x0000
    7fac:	20000db8 	.word	0x20000db8
    7fb0:	b510      	push	{r4, lr}
    7fb2:	f7ff fc0f 	bl	77d4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    7fb6:	f7ff fded 	bl	7b94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    7fba:	f7ff fe23 	bl	7c04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    7fbe:	f7ff ff53 	bl	7e68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    7fc2:	f000 fbfa 	bl	87ba <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7fc6:	2800      	cmp	r0, #0
    7fc8:	d108      	bne.n	7fdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    7fca:	f000 fbe6 	bl	879a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7fce:	2800      	cmp	r0, #0
    7fd0:	d104      	bne.n	7fdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    7fd2:	4803      	ldr	r0, [pc, #12]	; (7fe0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x458>)
    7fd4:	6801      	ldr	r1, [r0, #0]
    7fd6:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    7fda:	6001      	str	r1, [r0, #0]
    7fdc:	bd10      	pop	{r4, pc}
    7fde:	0000      	.short	0x0000
    7fe0:	40001568 	.word	0x40001568
    7fe4:	b510      	push	{r4, lr}
    7fe6:	4604      	mov	r4, r0
    7fe8:	f7ff fbf4 	bl	77d4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    7fec:	f7ff fdd2 	bl	7b94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    7ff0:	4620      	mov	r0, r4
    7ff2:	f7ff fded 	bl	7bd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    7ff6:	f000 fbe0 	bl	87ba <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7ffa:	2800      	cmp	r0, #0
    7ffc:	d00d      	beq.n	801a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a>
    7ffe:	4a09      	ldr	r2, [pc, #36]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    8000:	6811      	ldr	r1, [r2, #0]
    8002:	0650      	lsls	r0, r2, #25
    8004:	2c02      	cmp	r4, #2
    8006:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    800a:	d007      	beq.n	801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>
    800c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8010:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8014:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8018:	6010      	str	r0, [r2, #0]
    801a:	bd10      	pop	{r4, pc}
    801c:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8020:	e7f6      	b.n	8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>
    8022:	0000      	.short	0x0000
    8024:	40001588 	.word	0x40001588
    8028:	a62c0000 	.word	0xa62c0000
    802c:	0604a1e0 	.word	0x0604a1e0
    8030:	0e0c0a08 	.word	0x0e0c0a08
    8034:	16141210 	.word	0x16141210
    8038:	201e1c18 	.word	0x201e1c18
    803c:	28262422 	.word	0x28262422
    8040:	302e2c2a 	.word	0x302e2c2a
    8044:	38363432 	.word	0x38363432
    8048:	403e3c3a 	.word	0x403e3c3a
    804c:	48464442 	.word	0x48464442
    8050:	024e4c4a 	.word	0x024e4c4a
    8054:	0000501a 	.word	0x0000501a
    8058:	00000001 	.word	0x00000001
    805c:	40001110 	.word	0x40001110
	...
    8074:	00001e14 	.word	0x00001e14
    8078:	00001130 	.word	0x00001130
    807c:	00000000 	.word	0x00000000
    8080:	00000028 	.word	0x00000028
    8084:	00000018 	.word	0x00000018
    8088:	00000000 	.word	0x00000000
    808c:	00001e14 	.word	0x00001e14
    8090:	00001130 	.word	0x00001130
    8094:	00000000 	.word	0x00000000
    8098:	00001770 	.word	0x00001770
    809c:	00000fa0 	.word	0x00000fa0

000080a0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    80a0:	b570      	push	{r4, r5, r6, lr}
    80a2:	4605      	mov	r5, r0
    80a4:	4614      	mov	r4, r2
    80a6:	4608      	mov	r0, r1
    80a8:	f7ff fbba 	bl	7820 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    80ac:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    80b0:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    80b4:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    80b8:	4807      	ldr	r0, [pc, #28]	; (80d8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    80ba:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    80be:	4408      	add	r0, r1
    80c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    80c4:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    80c8:	fbb0 f5f1 	udiv	r5, r0, r1
    80cc:	4620      	mov	r0, r4
    80ce:	f7ff fb7b 	bl	77c8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    80d2:	4428      	add	r0, r5
    80d4:	1d40      	adds	r0, r0, #5
    80d6:	bd70      	pop	{r4, r5, r6, pc}
    80d8:	00008168 	.word	0x00008168

000080dc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    80dc:	b570      	push	{r4, r5, r6, lr}
    80de:	4d0e      	ldr	r5, [pc, #56]	; (8118 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    80e0:	461c      	mov	r4, r3
    80e2:	3d08      	subs	r5, #8
    80e4:	4b0c      	ldr	r3, [pc, #48]	; (8118 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    80e6:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    80ea:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    80ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    80f2:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    80f6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    80fa:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    80fe:	4418      	add	r0, r3
    8100:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8104:	fbb0 f5f1 	udiv	r5, r0, r1
    8108:	4610      	mov	r0, r2
    810a:	f7ff fb5d 	bl	77c8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    810e:	4428      	add	r0, r5
    8110:	4420      	add	r0, r4
    8112:	1d40      	adds	r0, r0, #5
    8114:	bd70      	pop	{r4, r5, r6, pc}
    8116:	0000      	.short	0x0000
    8118:	00008168 	.word	0x00008168

0000811c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    811c:	4901      	ldr	r1, [pc, #4]	; (8124 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    811e:	b2c0      	uxtb	r0, r0
    8120:	6008      	str	r0, [r1, #0]
    8122:	4770      	bx	lr
    8124:	4000150c 	.word	0x4000150c

00008128 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8128:	4a05      	ldr	r2, [pc, #20]	; (8140 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    812a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    812e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8132:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8136:	fbb1 f1f2 	udiv	r1, r1, r2
    813a:	4408      	add	r0, r1
    813c:	1e80      	subs	r0, r0, #2
    813e:	4770      	bx	lr
    8140:	00008160 	.word	0x00008160

00008144 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8144:	4a05      	ldr	r2, [pc, #20]	; (815c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8146:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    814a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    814e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8152:	fbb1 f1f2 	udiv	r1, r1, r2
    8156:	4408      	add	r0, r1
    8158:	4770      	bx	lr
    815a:	0000      	.short	0x0000
    815c:	00008160 	.word	0x00008160
    8160:	05dc0000 	.word	0x05dc0000
    8164:	000003e8 	.word	0x000003e8
    8168:	00000000 	.word	0x00000000
    816c:	00001e14 	.word	0x00001e14
    8170:	00001130 	.word	0x00001130

00008174 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8178:	461e      	mov	r6, r3
    817a:	4617      	mov	r7, r2
    817c:	460c      	mov	r4, r1
    817e:	4605      	mov	r5, r0
    8180:	f7f8 fd36 	bl	bf0 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8184:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 822c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8188:	4680      	mov	r8, r0
    818a:	f899 0000 	ldrb.w	r0, [r9]
    818e:	42a8      	cmp	r0, r5
    8190:	d110      	bne.n	81b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8192:	f899 1001 	ldrb.w	r1, [r9, #1]
    8196:	4648      	mov	r0, r9
    8198:	42a1      	cmp	r1, r4
    819a:	d10b      	bne.n	81b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    819c:	f990 1002 	ldrsb.w	r1, [r0, #2]
    81a0:	42b9      	cmp	r1, r7
    81a2:	d107      	bne.n	81b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    81a4:	78c2      	ldrb	r2, [r0, #3]
    81a6:	4542      	cmp	r2, r8
    81a8:	d104      	bne.n	81b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    81aa:	8881      	ldrh	r1, [r0, #4]
    81ac:	8031      	strh	r1, [r6, #0]
    81ae:	7980      	ldrb	r0, [r0, #6]
    81b0:	70b0      	strb	r0, [r6, #2]
    81b2:	e036      	b.n	8222 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xae>
    81b4:	463a      	mov	r2, r7
    81b6:	4621      	mov	r1, r4
    81b8:	2d01      	cmp	r5, #1
    81ba:	d009      	beq.n	81d0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    81bc:	2d02      	cmp	r5, #2
    81be:	d009      	beq.n	81d4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    81c0:	2d04      	cmp	r5, #4
    81c2:	d009      	beq.n	81d8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    81c4:	2d08      	cmp	r5, #8
    81c6:	d009      	beq.n	81dc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    81c8:	f240 415a 	movw	r1, #1114	; 0x45a
    81cc:	2006      	movs	r0, #6
    81ce:	e00c      	b.n	81ea <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    81d0:	2000      	movs	r0, #0
    81d2:	e004      	b.n	81de <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    81d4:	2001      	movs	r0, #1
    81d6:	e002      	b.n	81de <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    81d8:	2003      	movs	r0, #3
    81da:	e000      	b.n	81de <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    81dc:	2002      	movs	r0, #2
    81de:	466b      	mov	r3, sp
    81e0:	f7f8 fd56 	bl	c90 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    81e4:	b118      	cbz	r0, 81ee <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    81e6:	213d      	movs	r1, #61	; 0x3d
    81e8:	2075      	movs	r0, #117	; 0x75
    81ea:	f7fc fa97 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81ee:	4620      	mov	r0, r4
    81f0:	f7ff f8da 	bl	73a8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    81f4:	4602      	mov	r2, r0
    81f6:	4631      	mov	r1, r6
    81f8:	f99d 0000 	ldrsb.w	r0, [sp]
    81fc:	f7fc f970 	bl	44e0 <mpsl_fem_tx_power_split>
    8200:	4601      	mov	r1, r0
    8202:	f889 1007 	strb.w	r1, [r9, #7]
    8206:	8831      	ldrh	r1, [r6, #0]
    8208:	f8a9 1004 	strh.w	r1, [r9, #4]
    820c:	78b1      	ldrb	r1, [r6, #2]
    820e:	f889 1006 	strb.w	r1, [r9, #6]
    8212:	f889 5000 	strb.w	r5, [r9]
    8216:	f889 4001 	strb.w	r4, [r9, #1]
    821a:	f889 7002 	strb.w	r7, [r9, #2]
    821e:	f889 8003 	strb.w	r8, [r9, #3]
    8222:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    822a:	0000      	.short	0x0000
    822c:	20000196 	.word	0x20000196

00008230 <__udivmoddi4>:
    8230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8234:	4686      	mov	lr, r0
    8236:	468c      	mov	ip, r1
    8238:	4608      	mov	r0, r1
    823a:	9e08      	ldr	r6, [sp, #32]
    823c:	4615      	mov	r5, r2
    823e:	4674      	mov	r4, lr
    8240:	4619      	mov	r1, r3
    8242:	2b00      	cmp	r3, #0
    8244:	f040 80c2 	bne.w	83cc <__udivmoddi4+0x19c>
    8248:	4285      	cmp	r5, r0
    824a:	fab2 f282 	clz	r2, r2
    824e:	d945      	bls.n	82dc <__udivmoddi4+0xac>
    8250:	b14a      	cbz	r2, 8266 <__udivmoddi4+0x36>
    8252:	f1c2 0320 	rsb	r3, r2, #32
    8256:	fa00 fc02 	lsl.w	ip, r0, r2
    825a:	fa2e f303 	lsr.w	r3, lr, r3
    825e:	4095      	lsls	r5, r2
    8260:	ea43 0c0c 	orr.w	ip, r3, ip
    8264:	4094      	lsls	r4, r2
    8266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    826a:	b2a8      	uxth	r0, r5
    826c:	fbbc f8fe 	udiv	r8, ip, lr
    8270:	0c23      	lsrs	r3, r4, #16
    8272:	fb0e cc18 	mls	ip, lr, r8, ip
    8276:	fb08 f900 	mul.w	r9, r8, r0
    827a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    827e:	4599      	cmp	r9, r3
    8280:	d928      	bls.n	82d4 <__udivmoddi4+0xa4>
    8282:	18eb      	adds	r3, r5, r3
    8284:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    8288:	d204      	bcs.n	8294 <__udivmoddi4+0x64>
    828a:	4599      	cmp	r9, r3
    828c:	d902      	bls.n	8294 <__udivmoddi4+0x64>
    828e:	f1a8 0702 	sub.w	r7, r8, #2
    8292:	442b      	add	r3, r5
    8294:	eba3 0309 	sub.w	r3, r3, r9
    8298:	b2a4      	uxth	r4, r4
    829a:	fbb3 fcfe 	udiv	ip, r3, lr
    829e:	fb0e 331c 	mls	r3, lr, ip, r3
    82a2:	fb0c f000 	mul.w	r0, ip, r0
    82a6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    82aa:	42a0      	cmp	r0, r4
    82ac:	d914      	bls.n	82d8 <__udivmoddi4+0xa8>
    82ae:	192c      	adds	r4, r5, r4
    82b0:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    82b4:	d204      	bcs.n	82c0 <__udivmoddi4+0x90>
    82b6:	42a0      	cmp	r0, r4
    82b8:	d902      	bls.n	82c0 <__udivmoddi4+0x90>
    82ba:	f1ac 0302 	sub.w	r3, ip, #2
    82be:	442c      	add	r4, r5
    82c0:	1a24      	subs	r4, r4, r0
    82c2:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    82c6:	b11e      	cbz	r6, 82d0 <__udivmoddi4+0xa0>
    82c8:	40d4      	lsrs	r4, r2
    82ca:	2300      	movs	r3, #0
    82cc:	6034      	str	r4, [r6, #0]
    82ce:	6073      	str	r3, [r6, #4]
    82d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    82d4:	4647      	mov	r7, r8
    82d6:	e7dd      	b.n	8294 <__udivmoddi4+0x64>
    82d8:	4663      	mov	r3, ip
    82da:	e7f1      	b.n	82c0 <__udivmoddi4+0x90>
    82dc:	bb92      	cbnz	r2, 8344 <__udivmoddi4+0x114>
    82de:	1b43      	subs	r3, r0, r5
    82e0:	2101      	movs	r1, #1
    82e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    82e6:	b2af      	uxth	r7, r5
    82e8:	fbb3 fcfe 	udiv	ip, r3, lr
    82ec:	0c20      	lsrs	r0, r4, #16
    82ee:	fb0e 331c 	mls	r3, lr, ip, r3
    82f2:	fb0c f807 	mul.w	r8, ip, r7
    82f6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    82fa:	4598      	cmp	r8, r3
    82fc:	d962      	bls.n	83c4 <__udivmoddi4+0x194>
    82fe:	18eb      	adds	r3, r5, r3
    8300:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    8304:	d204      	bcs.n	8310 <__udivmoddi4+0xe0>
    8306:	4598      	cmp	r8, r3
    8308:	d902      	bls.n	8310 <__udivmoddi4+0xe0>
    830a:	f1ac 0002 	sub.w	r0, ip, #2
    830e:	442b      	add	r3, r5
    8310:	eba3 0308 	sub.w	r3, r3, r8
    8314:	b2a4      	uxth	r4, r4
    8316:	fbb3 fcfe 	udiv	ip, r3, lr
    831a:	fb0e 331c 	mls	r3, lr, ip, r3
    831e:	fb0c f707 	mul.w	r7, ip, r7
    8322:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8326:	42a7      	cmp	r7, r4
    8328:	d94e      	bls.n	83c8 <__udivmoddi4+0x198>
    832a:	192c      	adds	r4, r5, r4
    832c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    8330:	d204      	bcs.n	833c <__udivmoddi4+0x10c>
    8332:	42a7      	cmp	r7, r4
    8334:	d902      	bls.n	833c <__udivmoddi4+0x10c>
    8336:	f1ac 0302 	sub.w	r3, ip, #2
    833a:	442c      	add	r4, r5
    833c:	1be4      	subs	r4, r4, r7
    833e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8342:	e7c0      	b.n	82c6 <__udivmoddi4+0x96>
    8344:	f1c2 0320 	rsb	r3, r2, #32
    8348:	fa20 f103 	lsr.w	r1, r0, r3
    834c:	4095      	lsls	r5, r2
    834e:	4090      	lsls	r0, r2
    8350:	fa2e f303 	lsr.w	r3, lr, r3
    8354:	4303      	orrs	r3, r0
    8356:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    835a:	b2af      	uxth	r7, r5
    835c:	fbb1 fcfe 	udiv	ip, r1, lr
    8360:	fb0e 101c 	mls	r0, lr, ip, r1
    8364:	0c19      	lsrs	r1, r3, #16
    8366:	fb0c f807 	mul.w	r8, ip, r7
    836a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    836e:	4588      	cmp	r8, r1
    8370:	fa04 f402 	lsl.w	r4, r4, r2
    8374:	d922      	bls.n	83bc <__udivmoddi4+0x18c>
    8376:	1869      	adds	r1, r5, r1
    8378:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    837c:	d204      	bcs.n	8388 <__udivmoddi4+0x158>
    837e:	4588      	cmp	r8, r1
    8380:	d902      	bls.n	8388 <__udivmoddi4+0x158>
    8382:	f1ac 0002 	sub.w	r0, ip, #2
    8386:	4429      	add	r1, r5
    8388:	eba1 0108 	sub.w	r1, r1, r8
    838c:	b29b      	uxth	r3, r3
    838e:	fbb1 fcfe 	udiv	ip, r1, lr
    8392:	fb0e 111c 	mls	r1, lr, ip, r1
    8396:	fb0c f707 	mul.w	r7, ip, r7
    839a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    839e:	429f      	cmp	r7, r3
    83a0:	d90e      	bls.n	83c0 <__udivmoddi4+0x190>
    83a2:	18eb      	adds	r3, r5, r3
    83a4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    83a8:	d204      	bcs.n	83b4 <__udivmoddi4+0x184>
    83aa:	429f      	cmp	r7, r3
    83ac:	d902      	bls.n	83b4 <__udivmoddi4+0x184>
    83ae:	f1ac 0102 	sub.w	r1, ip, #2
    83b2:	442b      	add	r3, r5
    83b4:	1bdb      	subs	r3, r3, r7
    83b6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    83ba:	e792      	b.n	82e2 <__udivmoddi4+0xb2>
    83bc:	4660      	mov	r0, ip
    83be:	e7e3      	b.n	8388 <__udivmoddi4+0x158>
    83c0:	4661      	mov	r1, ip
    83c2:	e7f7      	b.n	83b4 <__udivmoddi4+0x184>
    83c4:	4660      	mov	r0, ip
    83c6:	e7a3      	b.n	8310 <__udivmoddi4+0xe0>
    83c8:	4663      	mov	r3, ip
    83ca:	e7b7      	b.n	833c <__udivmoddi4+0x10c>
    83cc:	4283      	cmp	r3, r0
    83ce:	d906      	bls.n	83de <__udivmoddi4+0x1ae>
    83d0:	b916      	cbnz	r6, 83d8 <__udivmoddi4+0x1a8>
    83d2:	2100      	movs	r1, #0
    83d4:	4608      	mov	r0, r1
    83d6:	e77b      	b.n	82d0 <__udivmoddi4+0xa0>
    83d8:	e9c6 e000 	strd	lr, r0, [r6]
    83dc:	e7f9      	b.n	83d2 <__udivmoddi4+0x1a2>
    83de:	fab3 f783 	clz	r7, r3
    83e2:	b98f      	cbnz	r7, 8408 <__udivmoddi4+0x1d8>
    83e4:	4283      	cmp	r3, r0
    83e6:	d301      	bcc.n	83ec <__udivmoddi4+0x1bc>
    83e8:	4572      	cmp	r2, lr
    83ea:	d808      	bhi.n	83fe <__udivmoddi4+0x1ce>
    83ec:	ebbe 0402 	subs.w	r4, lr, r2
    83f0:	eb60 0303 	sbc.w	r3, r0, r3
    83f4:	2001      	movs	r0, #1
    83f6:	469c      	mov	ip, r3
    83f8:	b91e      	cbnz	r6, 8402 <__udivmoddi4+0x1d2>
    83fa:	2100      	movs	r1, #0
    83fc:	e768      	b.n	82d0 <__udivmoddi4+0xa0>
    83fe:	4638      	mov	r0, r7
    8400:	e7fa      	b.n	83f8 <__udivmoddi4+0x1c8>
    8402:	e9c6 4c00 	strd	r4, ip, [r6]
    8406:	e7f8      	b.n	83fa <__udivmoddi4+0x1ca>
    8408:	f1c7 0c20 	rsb	ip, r7, #32
    840c:	40bb      	lsls	r3, r7
    840e:	fa22 f40c 	lsr.w	r4, r2, ip
    8412:	431c      	orrs	r4, r3
    8414:	fa2e f10c 	lsr.w	r1, lr, ip
    8418:	fa20 f30c 	lsr.w	r3, r0, ip
    841c:	40b8      	lsls	r0, r7
    841e:	4301      	orrs	r1, r0
    8420:	ea4f 4914 	mov.w	r9, r4, lsr #16
    8424:	fa0e f507 	lsl.w	r5, lr, r7
    8428:	fbb3 f8f9 	udiv	r8, r3, r9
    842c:	fa1f fe84 	uxth.w	lr, r4
    8430:	fb09 3018 	mls	r0, r9, r8, r3
    8434:	0c0b      	lsrs	r3, r1, #16
    8436:	fb08 fa0e 	mul.w	sl, r8, lr
    843a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    843e:	459a      	cmp	sl, r3
    8440:	fa02 f207 	lsl.w	r2, r2, r7
    8444:	d940      	bls.n	84c8 <__udivmoddi4+0x298>
    8446:	18e3      	adds	r3, r4, r3
    8448:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    844c:	d204      	bcs.n	8458 <__udivmoddi4+0x228>
    844e:	459a      	cmp	sl, r3
    8450:	d902      	bls.n	8458 <__udivmoddi4+0x228>
    8452:	f1a8 0002 	sub.w	r0, r8, #2
    8456:	4423      	add	r3, r4
    8458:	eba3 030a 	sub.w	r3, r3, sl
    845c:	b289      	uxth	r1, r1
    845e:	fbb3 f8f9 	udiv	r8, r3, r9
    8462:	fb09 3318 	mls	r3, r9, r8, r3
    8466:	fb08 fe0e 	mul.w	lr, r8, lr
    846a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    846e:	458e      	cmp	lr, r1
    8470:	d92c      	bls.n	84cc <__udivmoddi4+0x29c>
    8472:	1861      	adds	r1, r4, r1
    8474:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    8478:	d204      	bcs.n	8484 <__udivmoddi4+0x254>
    847a:	458e      	cmp	lr, r1
    847c:	d902      	bls.n	8484 <__udivmoddi4+0x254>
    847e:	f1a8 0302 	sub.w	r3, r8, #2
    8482:	4421      	add	r1, r4
    8484:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8488:	fba0 9802 	umull	r9, r8, r0, r2
    848c:	eba1 010e 	sub.w	r1, r1, lr
    8490:	4541      	cmp	r1, r8
    8492:	46ce      	mov	lr, r9
    8494:	4643      	mov	r3, r8
    8496:	d302      	bcc.n	849e <__udivmoddi4+0x26e>
    8498:	d106      	bne.n	84a8 <__udivmoddi4+0x278>
    849a:	454d      	cmp	r5, r9
    849c:	d204      	bcs.n	84a8 <__udivmoddi4+0x278>
    849e:	ebb9 0e02 	subs.w	lr, r9, r2
    84a2:	eb68 0304 	sbc.w	r3, r8, r4
    84a6:	3801      	subs	r0, #1
    84a8:	2e00      	cmp	r6, #0
    84aa:	d0a6      	beq.n	83fa <__udivmoddi4+0x1ca>
    84ac:	ebb5 020e 	subs.w	r2, r5, lr
    84b0:	eb61 0103 	sbc.w	r1, r1, r3
    84b4:	fa01 fc0c 	lsl.w	ip, r1, ip
    84b8:	fa22 f307 	lsr.w	r3, r2, r7
    84bc:	ea4c 0303 	orr.w	r3, ip, r3
    84c0:	40f9      	lsrs	r1, r7
    84c2:	e9c6 3100 	strd	r3, r1, [r6]
    84c6:	e798      	b.n	83fa <__udivmoddi4+0x1ca>
    84c8:	4640      	mov	r0, r8
    84ca:	e7c5      	b.n	8458 <__udivmoddi4+0x228>
    84cc:	4643      	mov	r3, r8
    84ce:	e7d9      	b.n	8484 <__udivmoddi4+0x254>

000084d0 <strlen>:
    84d0:	4603      	mov	r3, r0
    84d2:	f813 2b01 	ldrb.w	r2, [r3], #1
    84d6:	2a00      	cmp	r2, #0
    84d8:	d1fb      	bne.n	84d2 <strlen+0x2>
    84da:	1a18      	subs	r0, r3, r0
    84dc:	3801      	subs	r0, #1
    84de:	4770      	bx	lr
    84e0:	2804      	cmp	r0, #4
    84e2:	d202      	bcs.n	84ea <strlen+0x1a>
    84e4:	f04f 0028 	mov.w	r0, #40	; 0x28
    84e8:	4770      	bx	lr
    84ea:	d102      	bne.n	84f2 <strlen+0x22>
    84ec:	f04f 0010 	mov.w	r0, #16
    84f0:	4770      	bx	lr
    84f2:	f04f 0000 	mov.w	r0, #0
    84f6:	4770      	bx	lr
    84f8:	2100      	movs	r1, #0
    84fa:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    84fe:	f800 1f24 	strb.w	r1, [r0, #36]!
    8502:	7041      	strb	r1, [r0, #1]
    8504:	4770      	bx	lr

00008506 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    8506:	b570      	push	{r4, r5, r6, lr}
    8508:	f7f8 fbe2 	bl	cd0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    850c:	4605      	mov	r5, r0
    850e:	2400      	movs	r4, #0
    8510:	e006      	b.n	8520 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    8512:	4620      	mov	r0, r4
    8514:	f7f8 fbe2 	bl	cdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    8518:	f7ff ffee 	bl	84f8 <strlen+0x28>
    851c:	1c64      	adds	r4, r4, #1
    851e:	b2e4      	uxtb	r4, r4
    8520:	42ac      	cmp	r4, r5
    8522:	d3f6      	bcc.n	8512 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    8524:	bd70      	pop	{r4, r5, r6, pc}

00008526 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    8526:	f7fa bf1b 	b.w	3360 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000852a <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    852a:	b510      	push	{r4, lr}
    852c:	2000      	movs	r0, #0
    852e:	f7fb fa3d 	bl	39ac <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    8532:	6800      	ldr	r0, [r0, #0]
    8534:	2800      	cmp	r0, #0
    8536:	bf18      	it	ne
    8538:	2001      	movne	r0, #1
    853a:	bd10      	pop	{r4, pc}

0000853c <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    853c:	b510      	push	{r4, lr}
    853e:	f7fb fab5 	bl	3aac <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    8542:	f7fa fd87 	bl	3054 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8546:	f000 f802 	bl	854e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    854a:	b280      	uxth	r0, r0
    854c:	bd10      	pop	{r4, pc}

0000854e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    854e:	0a41      	lsrs	r1, r0, #9
    8550:	f643 5209 	movw	r2, #15625	; 0x3d09
    8554:	4351      	muls	r1, r2
    8556:	f3c0 0008 	ubfx	r0, r0, #0, #9
    855a:	fb10 f002 	smulbb	r0, r0, r2
    855e:	f500 7080 	add.w	r0, r0, #256	; 0x100
    8562:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    8566:	4770      	bx	lr
    8568:	2800      	cmp	r0, #0
    856a:	db09      	blt.n	8580 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    856c:	f000 021f 	and.w	r2, r0, #31
    8570:	2101      	movs	r1, #1
    8572:	4091      	lsls	r1, r2
    8574:	0940      	lsrs	r0, r0, #5
    8576:	0080      	lsls	r0, r0, #2
    8578:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    857c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8580:	4770      	bx	lr
    8582:	2800      	cmp	r0, #0
    8584:	db0d      	blt.n	85a2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    8586:	f000 021f 	and.w	r2, r0, #31
    858a:	2101      	movs	r1, #1
    858c:	4091      	lsls	r1, r2
    858e:	0940      	lsrs	r0, r0, #5
    8590:	0080      	lsls	r0, r0, #2
    8592:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8596:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    859a:	f3bf 8f4f 	dsb	sy
    859e:	f3bf 8f6f 	isb	sy
    85a2:	4770      	bx	lr

000085a4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    85a4:	b570      	push	{r4, r5, r6, lr}
    85a6:	4602      	mov	r2, r0
    85a8:	2000      	movs	r0, #0
    85aa:	2900      	cmp	r1, #0
    85ac:	d01d      	beq.n	85ea <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    85ae:	fba2 0101 	umull	r0, r1, r2, r1
    85b2:	0a40      	lsrs	r0, r0, #9
    85b4:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    85b8:	0a49      	lsrs	r1, r1, #9
    85ba:	1c40      	adds	r0, r0, #1
    85bc:	f141 0100 	adc.w	r1, r1, #0
    85c0:	f240 72a1 	movw	r2, #1953	; 0x7a1
    85c4:	1883      	adds	r3, r0, r2
    85c6:	f141 0100 	adc.w	r1, r1, #0
    85ca:	1c5b      	adds	r3, r3, #1
    85cc:	f141 0400 	adc.w	r4, r1, #0
    85d0:	2100      	movs	r1, #0
    85d2:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    85d6:	41a1      	sbcs	r1, r4
    85d8:	d203      	bcs.n	85e2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    85da:	2172      	movs	r1, #114	; 0x72
    85dc:	206d      	movs	r0, #109	; 0x6d
    85de:	f7fb fdbf 	bl	4160 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    85e2:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    85e6:	fbb0 f0f2 	udiv	r0, r0, r2
    85ea:	bd70      	pop	{r4, r5, r6, pc}
    85ec:	5840      	ldr	r0, [r0, r1]
    85ee:	2800      	cmp	r0, #0
    85f0:	d000      	beq.n	85f4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    85f2:	2001      	movs	r0, #1
    85f4:	4770      	bx	lr
    85f6:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    85fa:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    85fe:	f002 0201 	and.w	r2, r2, #1
    8602:	03c0      	lsls	r0, r0, #15
    8604:	d503      	bpl.n	860e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    8606:	428a      	cmp	r2, r1
    8608:	d101      	bne.n	860e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    860a:	2001      	movs	r0, #1
    860c:	4770      	bx	lr
    860e:	2000      	movs	r0, #0
    8610:	4770      	bx	lr

00008612 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    8612:	b510      	push	{r4, lr}
    8614:	2101      	movs	r1, #1
    8616:	0788      	lsls	r0, r1, #30
    8618:	f7fb fd4c 	bl	40b4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    861c:	2800      	cmp	r0, #0
    861e:	d000      	beq.n	8622 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    8620:	2001      	movs	r0, #1
    8622:	bd10      	pop	{r4, pc}

00008624 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    8624:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8628:	2101      	movs	r1, #1
    862a:	6001      	str	r1, [r0, #0]
    862c:	4770      	bx	lr

0000862e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    862e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    8632:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    8636:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    863a:	f002 0203 	and.w	r2, r2, #3
    863e:	03c9      	lsls	r1, r1, #15
    8640:	d503      	bpl.n	864a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    8642:	4282      	cmp	r2, r0
    8644:	d101      	bne.n	864a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    8646:	2001      	movs	r0, #1
    8648:	4770      	bx	lr
    864a:	2000      	movs	r0, #0
    864c:	4770      	bx	lr

0000864e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    864e:	b510      	push	{r4, lr}
    8650:	2100      	movs	r1, #0
    8652:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8656:	f7fb fd2d 	bl	40b4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    865a:	2800      	cmp	r0, #0
    865c:	d000      	beq.n	8660 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    865e:	2001      	movs	r0, #1
    8660:	bd10      	pop	{r4, pc}
    8662:	2800      	cmp	r0, #0
    8664:	db09      	blt.n	867a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    8666:	f000 021f 	and.w	r2, r0, #31
    866a:	2101      	movs	r1, #1
    866c:	4091      	lsls	r1, r2
    866e:	0940      	lsrs	r0, r0, #5
    8670:	0080      	lsls	r0, r0, #2
    8672:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8676:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    867a:	4770      	bx	lr
    867c:	2800      	cmp	r0, #0
    867e:	db0d      	blt.n	869c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    8680:	f000 021f 	and.w	r2, r0, #31
    8684:	2101      	movs	r1, #1
    8686:	4091      	lsls	r1, r2
    8688:	0940      	lsrs	r0, r0, #5
    868a:	0080      	lsls	r0, r0, #2
    868c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8690:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    8694:	f3bf 8f4f 	dsb	sy
    8698:	f3bf 8f6f 	isb	sy
    869c:	4770      	bx	lr
    869e:	1000      	.short	0x1000
    86a0:	00fa0002 	.word	0x00fa0002
    86a4:	edb80000 	.word	0xedb80000
    86a8:	0ef2aa4d 	.word	0x0ef2aa4d
    86ac:	b5ea3202 	.word	0xb5ea3202
    86b0:	d1502fde 	.word	0xd1502fde
    86b4:	d2b55ab7 	.word	0xd2b55ab7
    86b8:	41c7      	.short	0x41c7
    86ba:	2800      	cmp	r0, #0
    86bc:	db09      	blt.n	86d2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    86be:	f000 021f 	and.w	r2, r0, #31
    86c2:	2101      	movs	r1, #1
    86c4:	4091      	lsls	r1, r2
    86c6:	0940      	lsrs	r0, r0, #5
    86c8:	0080      	lsls	r0, r0, #2
    86ca:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    86ce:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    86d2:	4770      	bx	lr

000086d4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    86d4:	f3ef 8110 	mrs	r1, PRIMASK
    86d8:	b672      	cpsid	i
    86da:	7802      	ldrb	r2, [r0, #0]
    86dc:	2a01      	cmp	r2, #1
    86de:	d001      	beq.n	86e4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    86e0:	2201      	movs	r2, #1
    86e2:	e000      	b.n	86e6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    86e4:	2200      	movs	r2, #0
    86e6:	2301      	movs	r3, #1
    86e8:	7003      	strb	r3, [r0, #0]
    86ea:	b901      	cbnz	r1, 86ee <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    86ec:	b662      	cpsie	i
    86ee:	b10a      	cbz	r2, 86f4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    86f0:	2000      	movs	r0, #0
    86f2:	4770      	bx	lr
    86f4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    86f8:	4770      	bx	lr

000086fa <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    86fa:	2100      	movs	r1, #0
    86fc:	7001      	strb	r1, [r0, #0]
    86fe:	4608      	mov	r0, r1
    8700:	4770      	bx	lr

00008702 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    8702:	f3ef 8110 	mrs	r1, PRIMASK
    8706:	b672      	cpsid	i
    8708:	2200      	movs	r2, #0
    870a:	7002      	strb	r2, [r0, #0]
    870c:	b901      	cbnz	r1, 8710 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    870e:	b662      	cpsie	i
    8710:	2000      	movs	r0, #0
    8712:	4770      	bx	lr

00008714 <mpsl_low_priority_process>:
    8714:	f7fb be24 	b.w	4360 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00008718 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    8718:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    871c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    8720:	280f      	cmp	r0, #15
    8722:	d001      	beq.n	8728 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    8724:	2000      	movs	r0, #0
    8726:	4770      	bx	lr
    8728:	2001      	movs	r0, #1
    872a:	4770      	bx	lr

0000872c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    872c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8730:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    8734:	280a      	cmp	r0, #10
    8736:	d001      	beq.n	873c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    8738:	2000      	movs	r0, #0
    873a:	4770      	bx	lr
    873c:	2001      	movs	r0, #1
    873e:	4770      	bx	lr

00008740 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    8740:	b500      	push	{lr}
    8742:	f7ff fff3 	bl	872c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8746:	b120      	cbz	r0, 8752 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    8748:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    874c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    8750:	b108      	cbz	r0, 8756 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    8752:	2000      	movs	r0, #0
    8754:	bd00      	pop	{pc}
    8756:	2001      	movs	r0, #1
    8758:	bd00      	pop	{pc}

0000875a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    875a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    875e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    8762:	280e      	cmp	r0, #14
    8764:	d001      	beq.n	876a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    8766:	2000      	movs	r0, #0
    8768:	4770      	bx	lr
    876a:	2001      	movs	r0, #1
    876c:	4770      	bx	lr

0000876e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    876e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8772:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    8776:	2810      	cmp	r0, #16
    8778:	d001      	beq.n	877e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    877a:	2000      	movs	r0, #0
    877c:	4770      	bx	lr
    877e:	2001      	movs	r0, #1
    8780:	4770      	bx	lr

00008782 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    8782:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8786:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    878a:	2806      	cmp	r0, #6
    878c:	d003      	beq.n	8796 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    878e:	1c40      	adds	r0, r0, #1
    8790:	d001      	beq.n	8796 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    8792:	2000      	movs	r0, #0
    8794:	4770      	bx	lr
    8796:	2001      	movs	r0, #1
    8798:	4770      	bx	lr

0000879a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    879a:	b500      	push	{lr}
    879c:	f7ff fff1 	bl	8782 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    87a0:	b148      	cbz	r0, 87b6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    87a2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    87a6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    87aa:	2806      	cmp	r0, #6
    87ac:	d303      	bcc.n	87b6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    87ae:	1c40      	adds	r0, r0, #1
    87b0:	d001      	beq.n	87b6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    87b2:	2001      	movs	r0, #1
    87b4:	bd00      	pop	{pc}
    87b6:	2000      	movs	r0, #0
    87b8:	bd00      	pop	{pc}

000087ba <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    87ba:	b500      	push	{lr}
    87bc:	f7ff ffe1 	bl	8782 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    87c0:	b138      	cbz	r0, 87d2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    87c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    87c6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    87ca:	2806      	cmp	r0, #6
    87cc:	d303      	bcc.n	87d6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    87ce:	1c40      	adds	r0, r0, #1
    87d0:	d001      	beq.n	87d6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    87d2:	2000      	movs	r0, #0
    87d4:	bd00      	pop	{pc}
    87d6:	2001      	movs	r0, #1
    87d8:	bd00      	pop	{pc}

000087da <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    87da:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    87de:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    87e2:	280d      	cmp	r0, #13
    87e4:	d001      	beq.n	87ea <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    87e6:	2000      	movs	r0, #0
    87e8:	4770      	bx	lr
    87ea:	2001      	movs	r0, #1
    87ec:	4770      	bx	lr

000087ee <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    87ee:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    87f2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    87f6:	2808      	cmp	r0, #8
    87f8:	d001      	beq.n	87fe <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    87fa:	2000      	movs	r0, #0
    87fc:	4770      	bx	lr
    87fe:	2001      	movs	r0, #1
    8800:	4770      	bx	lr

00008802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    8802:	b4f0      	push	{r4, r5, r6, r7}
    8804:	ea80 0c01 	eor.w	ip, r0, r1
    8808:	4603      	mov	r3, r0
    880a:	f01c 0f03 	tst.w	ip, #3
    880e:	d13c      	bne.n	888a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    8810:	f013 0f03 	tst.w	r3, #3
    8814:	d00b      	beq.n	882e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    8816:	2a00      	cmp	r2, #0
    8818:	bf04      	itt	eq
    881a:	bcf0      	popeq	{r4, r5, r6, r7}
    881c:	4770      	bxeq	lr
    881e:	f811 cb01 	ldrb.w	ip, [r1], #1
    8822:	f803 cb01 	strb.w	ip, [r3], #1
    8826:	1e52      	subs	r2, r2, #1
    8828:	f013 0f03 	tst.w	r3, #3
    882c:	d1f3      	bne.n	8816 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    882e:	2a03      	cmp	r2, #3
    8830:	d94f      	bls.n	88d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    8832:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8836:	d24c      	bcs.n	88d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    8838:	f1c2 0c00 	rsb	ip, r2, #0
    883c:	ea4f 74ec 	mov.w	r4, ip, asr #31
    8840:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    8844:	ea4f 0cac 	mov.w	ip, ip, asr #2
    8848:	f1cc 0c00 	rsb	ip, ip, #0
    884c:	f1bc 0f00 	cmp.w	ip, #0
    8850:	dd1b      	ble.n	888a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    8852:	1f0d      	subs	r5, r1, #4
    8854:	1f1c      	subs	r4, r3, #4
    8856:	f01c 0f01 	tst.w	ip, #1
    885a:	d003      	beq.n	8864 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    885c:	f855 6f04 	ldr.w	r6, [r5, #4]!
    8860:	f844 6f04 	str.w	r6, [r4, #4]!
    8864:	ea5f 066c 	movs.w	r6, ip, asr #1
    8868:	d007      	beq.n	887a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    886a:	686f      	ldr	r7, [r5, #4]
    886c:	6067      	str	r7, [r4, #4]
    886e:	f855 7f08 	ldr.w	r7, [r5, #8]!
    8872:	f844 7f08 	str.w	r7, [r4, #8]!
    8876:	1e76      	subs	r6, r6, #1
    8878:	d1f7      	bne.n	886a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    887a:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    887e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    8882:	f1cc 0c00 	rsb	ip, ip, #0
    8886:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    888a:	2a00      	cmp	r2, #0
    888c:	bf04      	itt	eq
    888e:	bcf0      	popeq	{r4, r5, r6, r7}
    8890:	4770      	bxeq	lr
    8892:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8896:	d226      	bcs.n	88e6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    8898:	2a00      	cmp	r2, #0
    889a:	bfdc      	itt	le
    889c:	bcf0      	pople	{r4, r5, r6, r7}
    889e:	4770      	bxle	lr
    88a0:	1e49      	subs	r1, r1, #1
    88a2:	1e5b      	subs	r3, r3, #1
    88a4:	f012 0f01 	tst.w	r2, #1
    88a8:	d003      	beq.n	88b2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    88aa:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    88ae:	f803 cf01 	strb.w	ip, [r3, #1]!
    88b2:	1052      	asrs	r2, r2, #1
    88b4:	bf04      	itt	eq
    88b6:	bcf0      	popeq	{r4, r5, r6, r7}
    88b8:	4770      	bxeq	lr
    88ba:	f891 c001 	ldrb.w	ip, [r1, #1]
    88be:	f883 c001 	strb.w	ip, [r3, #1]
    88c2:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    88c6:	f803 cf02 	strb.w	ip, [r3, #2]!
    88ca:	1e52      	subs	r2, r2, #1
    88cc:	d1f5      	bne.n	88ba <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    88ce:	bcf0      	pop	{r4, r5, r6, r7}
    88d0:	4770      	bx	lr
    88d2:	2a04      	cmp	r2, #4
    88d4:	d3d9      	bcc.n	888a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    88d6:	f851 cb04 	ldr.w	ip, [r1], #4
    88da:	1f12      	subs	r2, r2, #4
    88dc:	f843 cb04 	str.w	ip, [r3], #4
    88e0:	2a04      	cmp	r2, #4
    88e2:	d2f8      	bcs.n	88d6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    88e4:	e7d1      	b.n	888a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    88e6:	f811 cb01 	ldrb.w	ip, [r1], #1
    88ea:	f803 cb01 	strb.w	ip, [r3], #1
    88ee:	1e52      	subs	r2, r2, #1
    88f0:	d1f9      	bne.n	88e6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    88f2:	bcf0      	pop	{r4, r5, r6, r7}
    88f4:	4770      	bx	lr

000088f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    88f6:	b470      	push	{r4, r5, r6}
    88f8:	4603      	mov	r3, r0
    88fa:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    88fe:	f010 0f03 	tst.w	r0, #3
    8902:	d009      	beq.n	8918 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    8904:	2a00      	cmp	r2, #0
    8906:	bf04      	itt	eq
    8908:	bc70      	popeq	{r4, r5, r6}
    890a:	4770      	bxeq	lr
    890c:	f803 cb01 	strb.w	ip, [r3], #1
    8910:	1e52      	subs	r2, r2, #1
    8912:	f013 0f03 	tst.w	r3, #3
    8916:	d1f5      	bne.n	8904 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    8918:	b2c9      	uxtb	r1, r1
    891a:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    891e:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    8922:	2a03      	cmp	r2, #3
    8924:	d939      	bls.n	899a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    8926:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    892a:	d236      	bcs.n	899a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    892c:	4251      	negs	r1, r2
    892e:	17cc      	asrs	r4, r1, #31
    8930:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    8934:	1089      	asrs	r1, r1, #2
    8936:	424e      	negs	r6, r1
    8938:	2e00      	cmp	r6, #0
    893a:	dd11      	ble.n	8960 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    893c:	1f19      	subs	r1, r3, #4
    893e:	f016 0f01 	tst.w	r6, #1
    8942:	bf18      	it	ne
    8944:	f841 5f04 	strne.w	r5, [r1, #4]!
    8948:	1074      	asrs	r4, r6, #1
    894a:	d004      	beq.n	8956 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    894c:	604d      	str	r5, [r1, #4]
    894e:	f841 5f08 	str.w	r5, [r1, #8]!
    8952:	1e64      	subs	r4, r4, #1
    8954:	d1fa      	bne.n	894c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    8956:	4271      	negs	r1, r6
    8958:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    895c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    8960:	2a00      	cmp	r2, #0
    8962:	bf04      	itt	eq
    8964:	bc70      	popeq	{r4, r5, r6}
    8966:	4770      	bxeq	lr
    8968:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    896c:	d21d      	bcs.n	89aa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    896e:	2a00      	cmp	r2, #0
    8970:	bfdc      	itt	le
    8972:	bc70      	pople	{r4, r5, r6}
    8974:	4770      	bxle	lr
    8976:	1e59      	subs	r1, r3, #1
    8978:	f012 0f01 	tst.w	r2, #1
    897c:	bf18      	it	ne
    897e:	f801 cf01 	strbne.w	ip, [r1, #1]!
    8982:	1052      	asrs	r2, r2, #1
    8984:	bf04      	itt	eq
    8986:	bc70      	popeq	{r4, r5, r6}
    8988:	4770      	bxeq	lr
    898a:	f881 c001 	strb.w	ip, [r1, #1]
    898e:	f801 cf02 	strb.w	ip, [r1, #2]!
    8992:	1e52      	subs	r2, r2, #1
    8994:	d1f9      	bne.n	898a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    8996:	bc70      	pop	{r4, r5, r6}
    8998:	4770      	bx	lr
    899a:	2a04      	cmp	r2, #4
    899c:	d3e0      	bcc.n	8960 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    899e:	1f12      	subs	r2, r2, #4
    89a0:	f843 5b04 	str.w	r5, [r3], #4
    89a4:	2a04      	cmp	r2, #4
    89a6:	d2fa      	bcs.n	899e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    89a8:	e7da      	b.n	8960 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    89aa:	f803 cb01 	strb.w	ip, [r3], #1
    89ae:	1e52      	subs	r2, r2, #1
    89b0:	d1fb      	bne.n	89aa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    89b2:	bc70      	pop	{r4, r5, r6}
    89b4:	4770      	bx	lr
    89b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    89ba:	4770      	bx	lr
    89bc:	2000      	movs	r0, #0
    89be:	4770      	bx	lr
    89c0:	2000      	movs	r0, #0
    89c2:	4770      	bx	lr
    89c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    89c8:	4770      	bx	lr
    89ca:	4770      	bx	lr
    89cc:	4770      	bx	lr
    89ce:	2000      	movs	r0, #0
    89d0:	4770      	bx	lr
    89d2:	2100      	movs	r1, #0
    89d4:	7001      	strb	r1, [r0, #0]
    89d6:	4770      	bx	lr
    89d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    89dc:	4770      	bx	lr
    89de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    89e2:	4770      	bx	lr
    89e4:	2100      	movs	r1, #0
    89e6:	7001      	strb	r1, [r0, #0]
    89e8:	4770      	bx	lr
    89ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    89ee:	4770      	bx	lr
    89f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    89f4:	4770      	bx	lr
    89f6:	7800      	ldrb	r0, [r0, #0]
    89f8:	2800      	cmp	r0, #0
    89fa:	d001      	beq.n	8a00 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    89fc:	f06f 0015 	mvn.w	r0, #21
    8a00:	4770      	bx	lr
    8a02:	2000      	movs	r0, #0
    8a04:	4770      	bx	lr
    8a06:	2200      	movs	r2, #0
    8a08:	f000 b802 	b.w	8a10 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00008a0c <mpsl_fem_init>:
    8a0c:	f7f8 b8f6 	b.w	bfc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00008a10 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    8a10:	b570      	push	{r4, r5, r6, lr}
    8a12:	4614      	mov	r4, r2
    8a14:	460d      	mov	r5, r1
    8a16:	1b00      	subs	r0, r0, r4
    8a18:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    8a1c:	4288      	cmp	r0, r1
    8a1e:	da01      	bge.n	8a24 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    8a20:	4608      	mov	r0, r1
    8a22:	e002      	b.n	8a2a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    8a24:	287f      	cmp	r0, #127	; 0x7f
    8a26:	dd00      	ble.n	8a2a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    8a28:	207f      	movs	r0, #127	; 0x7f
    8a2a:	b240      	sxtb	r0, r0
    8a2c:	f7f8 f91a 	bl	c64 <mpsl_tx_power_radio_supported_power_adjust>
    8a30:	7028      	strb	r0, [r5, #0]
    8a32:	706c      	strb	r4, [r5, #1]
    8a34:	2100      	movs	r1, #0
    8a36:	4420      	add	r0, r4
    8a38:	70a9      	strb	r1, [r5, #2]
    8a3a:	b240      	sxtb	r0, r0
    8a3c:	bd70      	pop	{r4, r5, r6, pc}
    8a3e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a42:	460c      	mov	r4, r1
    8a44:	4681      	mov	r9, r0
    8a46:	7849      	ldrb	r1, [r1, #1]
    8a48:	f100 0003 	add.w	r0, r0, #3
    8a4c:	f88d 1000 	strb.w	r1, [sp]
    8a50:	f020 0003 	bic.w	r0, r0, #3
    8a54:	78a1      	ldrb	r1, [r4, #2]
    8a56:	0016      	movs	r6, r2
    8a58:	4605      	mov	r5, r0
    8a5a:	f88d 1001 	strb.w	r1, [sp, #1]
    8a5e:	d000      	beq.n	8a62 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x52>
    8a60:	2000      	movs	r0, #0
    8a62:	4669      	mov	r1, sp
    8a64:	f7fc f810 	bl	4a88 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    8a68:	4428      	add	r0, r5
    8a6a:	78a1      	ldrb	r1, [r4, #2]
    8a6c:	4605      	mov	r5, r0
    8a6e:	b131      	cbz	r1, 8a7e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    8a70:	8a63      	ldrh	r3, [r4, #18]
    8a72:	78e2      	ldrb	r2, [r4, #3]
    8a74:	b106      	cbz	r6, 8a78 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x68>
    8a76:	2000      	movs	r0, #0
    8a78:	f7fc fa5a 	bl	4f30 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    8a7c:	4405      	add	r5, r0
    8a7e:	7820      	ldrb	r0, [r4, #0]
    8a80:	7861      	ldrb	r1, [r4, #1]
    8a82:	46b2      	mov	sl, r6
    8a84:	2600      	movs	r6, #0
    8a86:	4408      	add	r0, r1
    8a88:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    8a8c:	4637      	mov	r7, r6
    8a8e:	e008      	b.n	8aa2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x92>
    8a90:	7a23      	ldrb	r3, [r4, #8]
    8a92:	79e2      	ldrb	r2, [r4, #7]
    8a94:	79a1      	ldrb	r1, [r4, #6]
    8a96:	7960      	ldrb	r0, [r4, #5]
    8a98:	f000 fc77 	bl	938a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    8a9c:	1c7f      	adds	r7, r7, #1
    8a9e:	4406      	add	r6, r0
    8aa0:	b2ff      	uxtb	r7, r7
    8aa2:	4547      	cmp	r7, r8
    8aa4:	d3f4      	bcc.n	8a90 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x80>
    8aa6:	1ced      	adds	r5, r5, #3
    8aa8:	f025 0003 	bic.w	r0, r5, #3
    8aac:	4604      	mov	r4, r0
    8aae:	f1ba 0f00 	cmp.w	sl, #0
    8ab2:	d000      	beq.n	8ab6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa6>
    8ab4:	2000      	movs	r0, #0
    8ab6:	4632      	mov	r2, r6
    8ab8:	4641      	mov	r1, r8
    8aba:	f7fc f999 	bl	4df0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    8abe:	4420      	add	r0, r4
    8ac0:	1dc0      	adds	r0, r0, #7
    8ac2:	f020 0007 	bic.w	r0, r0, #7
    8ac6:	eba0 0009 	sub.w	r0, r0, r9
    8aca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ace:	b570      	push	{r4, r5, r6, lr}
    8ad0:	460c      	mov	r4, r1
    8ad2:	4605      	mov	r5, r0
    8ad4:	f7fb ff62 	bl	499c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    8ad8:	2800      	cmp	r0, #0
    8ada:	d002      	beq.n	8ae2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xd2>
    8adc:	2d3e      	cmp	r5, #62	; 0x3e
    8ade:	d001      	beq.n	8ae4 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xd4>
    8ae0:	2001      	movs	r0, #1
    8ae2:	bd70      	pop	{r4, r5, r6, pc}
    8ae4:	2c12      	cmp	r4, #18
    8ae6:	d004      	beq.n	8af2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xe2>
    8ae8:	4620      	mov	r0, r4
    8aea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8aee:	f7fb bf67 	b.w	49c0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    8af2:	2000      	movs	r0, #0
    8af4:	bd70      	pop	{r4, r5, r6, pc}

00008af6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    8af6:	b510      	push	{r4, lr}
    8af8:	460c      	mov	r4, r1
    8afa:	7809      	ldrb	r1, [r1, #0]
    8afc:	7001      	strb	r1, [r0, #0]
    8afe:	7841      	ldrb	r1, [r0, #1]
    8b00:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    8b04:	7041      	strb	r1, [r0, #1]
    8b06:	8822      	ldrh	r2, [r4, #0]
    8b08:	f3c2 2203 	ubfx	r2, r2, #8, #4
    8b0c:	4311      	orrs	r1, r2
    8b0e:	7041      	strb	r1, [r0, #1]
    8b10:	78a2      	ldrb	r2, [r4, #2]
    8b12:	7082      	strb	r2, [r0, #2]
    8b14:	8862      	ldrh	r2, [r4, #2]
    8b16:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    8b1a:	0a12      	lsrs	r2, r2, #8
    8b1c:	70c2      	strb	r2, [r0, #3]
    8b1e:	7041      	strb	r1, [r0, #1]
    8b20:	7922      	ldrb	r2, [r4, #4]
    8b22:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    8b26:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    8b2a:	7041      	strb	r1, [r0, #1]
    8b2c:	7962      	ldrb	r2, [r4, #5]
    8b2e:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    8b32:	7041      	strb	r1, [r0, #1]
    8b34:	68a1      	ldr	r1, [r4, #8]
    8b36:	1d02      	adds	r2, r0, #4
    8b38:	4291      	cmp	r1, r2
    8b3a:	d006      	beq.n	8b4a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    8b3c:	8862      	ldrh	r2, [r4, #2]
    8b3e:	2afb      	cmp	r2, #251	; 0xfb
    8b40:	d300      	bcc.n	8b44 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    8b42:	22fb      	movs	r2, #251	; 0xfb
    8b44:	1d00      	adds	r0, r0, #4
    8b46:	f7ff fe5c 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8b4a:	78a0      	ldrb	r0, [r4, #2]
    8b4c:	1d00      	adds	r0, r0, #4
    8b4e:	b2c0      	uxtb	r0, r0
    8b50:	bd10      	pop	{r4, pc}

00008b52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    8b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b56:	4604      	mov	r4, r0
    8b58:	f891 c000 	ldrb.w	ip, [r1]
    8b5c:	2000      	movs	r0, #0
    8b5e:	2513      	movs	r5, #19
    8b60:	260c      	movs	r6, #12
    8b62:	2705      	movs	r7, #5
    8b64:	223e      	movs	r2, #62	; 0x3e
    8b66:	23ff      	movs	r3, #255	; 0xff
    8b68:	f1bc 0f1d 	cmp.w	ip, #29
    8b6c:	d27d      	bcs.n	8c6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    8b6e:	e8df f00c 	tbb	[pc, ip]
    8b72:	0f7c      	.short	0x0f7c
    8b74:	882e2826 	.word	0x882e2826
    8b78:	d1bea492 	.word	0xd1bea492
    8b7c:	f5f7ded3 	.word	0xf5f7ded3
    8b80:	547c7cf4 	.word	0x547c7cf4
    8b84:	f0f1f2f3 	.word	0xf0f1f2f3
    8b88:	ecedeeef 	.word	0xecedeeef
    8b8c:	00e9eaeb 	.word	0x00e9eaeb
    8b90:	7026      	strb	r6, [r4, #0]
    8b92:	7908      	ldrb	r0, [r1, #4]
    8b94:	70a0      	strb	r0, [r4, #2]
    8b96:	7948      	ldrb	r0, [r1, #5]
    8b98:	70e0      	strb	r0, [r4, #3]
    8b9a:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    8b9e:	0a00      	lsrs	r0, r0, #8
    8ba0:	7120      	strb	r0, [r4, #4]
    8ba2:	79c8      	ldrb	r0, [r1, #7]
    8ba4:	7160      	strb	r0, [r4, #5]
    8ba6:	7a08      	ldrb	r0, [r1, #8]
    8ba8:	71a0      	strb	r0, [r4, #6]
    8baa:	8908      	ldrh	r0, [r1, #8]
    8bac:	0a00      	lsrs	r0, r0, #8
    8bae:	71e0      	strb	r0, [r4, #7]
    8bb0:	7a88      	ldrb	r0, [r1, #10]
    8bb2:	7220      	strb	r0, [r4, #8]
    8bb4:	8948      	ldrh	r0, [r1, #10]
    8bb6:	0a00      	lsrs	r0, r0, #8
    8bb8:	7260      	strb	r0, [r4, #9]
    8bba:	2008      	movs	r0, #8
    8bbc:	e190      	b.n	8ee0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8bbe:	2010      	movs	r0, #16
    8bc0:	e000      	b.n	8bc4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x72>
    8bc2:	201a      	movs	r0, #26
    8bc4:	7020      	strb	r0, [r4, #0]
    8bc6:	7908      	ldrb	r0, [r1, #4]
    8bc8:	70a0      	strb	r0, [r4, #2]
    8bca:	2001      	movs	r0, #1
    8bcc:	e188      	b.n	8ee0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8bce:	7022      	strb	r2, [r4, #0]
    8bd0:	2001      	movs	r0, #1
    8bd2:	70a0      	strb	r0, [r4, #2]
    8bd4:	7908      	ldrb	r0, [r1, #4]
    8bd6:	70e0      	strb	r0, [r4, #3]
    8bd8:	7988      	ldrb	r0, [r1, #6]
    8bda:	7120      	strb	r0, [r4, #4]
    8bdc:	88c8      	ldrh	r0, [r1, #6]
    8bde:	0a00      	lsrs	r0, r0, #8
    8be0:	7160      	strb	r0, [r4, #5]
    8be2:	7a08      	ldrb	r0, [r1, #8]
    8be4:	71a0      	strb	r0, [r4, #6]
    8be6:	7a48      	ldrb	r0, [r1, #9]
    8be8:	71e0      	strb	r0, [r4, #7]
    8bea:	f8d1 000a 	ldr.w	r0, [r1, #10]
    8bee:	60a0      	str	r0, [r4, #8]
    8bf0:	89c8      	ldrh	r0, [r1, #14]
    8bf2:	81a0      	strh	r0, [r4, #12]
    8bf4:	7c08      	ldrb	r0, [r1, #16]
    8bf6:	73a0      	strb	r0, [r4, #14]
    8bf8:	8a08      	ldrh	r0, [r1, #16]
    8bfa:	0a00      	lsrs	r0, r0, #8
    8bfc:	73e0      	strb	r0, [r4, #15]
    8bfe:	7c88      	ldrb	r0, [r1, #18]
    8c00:	7420      	strb	r0, [r4, #16]
    8c02:	8a48      	ldrh	r0, [r1, #18]
    8c04:	0a00      	lsrs	r0, r0, #8
    8c06:	7460      	strb	r0, [r4, #17]
    8c08:	7d08      	ldrb	r0, [r1, #20]
    8c0a:	74a0      	strb	r0, [r4, #18]
    8c0c:	8a88      	ldrh	r0, [r1, #20]
    8c0e:	0a00      	lsrs	r0, r0, #8
    8c10:	74e0      	strb	r0, [r4, #19]
    8c12:	7d88      	ldrb	r0, [r1, #22]
    8c14:	7520      	strb	r0, [r4, #20]
    8c16:	4628      	mov	r0, r5
    8c18:	e162      	b.n	8ee0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8c1a:	7022      	strb	r2, [r4, #0]
    8c1c:	200a      	movs	r0, #10
    8c1e:	70a0      	strb	r0, [r4, #2]
    8c20:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    8c24:	70e0      	strb	r0, [r4, #3]
    8c26:	7888      	ldrb	r0, [r1, #2]
    8c28:	7120      	strb	r0, [r4, #4]
    8c2a:	8848      	ldrh	r0, [r1, #2]
    8c2c:	0a00      	lsrs	r0, r0, #8
    8c2e:	7160      	strb	r0, [r4, #5]
    8c30:	7908      	ldrb	r0, [r1, #4]
    8c32:	71a0      	strb	r0, [r4, #6]
    8c34:	7948      	ldrb	r0, [r1, #5]
    8c36:	71e0      	strb	r0, [r4, #7]
    8c38:	f8d1 0006 	ldr.w	r0, [r1, #6]
    8c3c:	60a0      	str	r0, [r4, #8]
    8c3e:	8948      	ldrh	r0, [r1, #10]
    8c40:	81a0      	strh	r0, [r4, #12]
    8c42:	68c8      	ldr	r0, [r1, #12]
    8c44:	f8c4 000e 	str.w	r0, [r4, #14]
    8c48:	8a08      	ldrh	r0, [r1, #16]
    8c4a:	8260      	strh	r0, [r4, #18]
    8c4c:	f8d1 0012 	ldr.w	r0, [r1, #18]
    8c50:	6160      	str	r0, [r4, #20]
    8c52:	8ac8      	ldrh	r0, [r1, #22]
    8c54:	8320      	strh	r0, [r4, #24]
    8c56:	7e08      	ldrb	r0, [r1, #24]
    8c58:	76a0      	strb	r0, [r4, #26]
    8c5a:	8b08      	ldrh	r0, [r1, #24]
    8c5c:	0a00      	lsrs	r0, r0, #8
    8c5e:	76e0      	strb	r0, [r4, #27]
    8c60:	7e88      	ldrb	r0, [r1, #26]
    8c62:	7720      	strb	r0, [r4, #28]
    8c64:	8b48      	ldrh	r0, [r1, #26]
    8c66:	0a00      	lsrs	r0, r0, #8
    8c68:	e000      	b.n	8c6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11a>
    8c6a:	e09a      	b.n	8da2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    8c6c:	7760      	strb	r0, [r4, #29]
    8c6e:	7f08      	ldrb	r0, [r1, #28]
    8c70:	77a0      	strb	r0, [r4, #30]
    8c72:	8b88      	ldrh	r0, [r1, #28]
    8c74:	0a00      	lsrs	r0, r0, #8
    8c76:	77e0      	strb	r0, [r4, #31]
    8c78:	7f88      	ldrb	r0, [r1, #30]
    8c7a:	f884 0020 	strb.w	r0, [r4, #32]
    8c7e:	201f      	movs	r0, #31
    8c80:	e12e      	b.n	8ee0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8c82:	7022      	strb	r2, [r4, #0]
    8c84:	2014      	movs	r0, #20
    8c86:	70a0      	strb	r0, [r4, #2]
    8c88:	7908      	ldrb	r0, [r1, #4]
    8c8a:	70e0      	strb	r0, [r4, #3]
    8c8c:	8888      	ldrh	r0, [r1, #4]
    8c8e:	0a00      	lsrs	r0, r0, #8
    8c90:	7120      	strb	r0, [r4, #4]
    8c92:	7988      	ldrb	r0, [r1, #6]
    8c94:	e0c2      	b.n	8e1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    8c96:	7022      	strb	r2, [r4, #0]
    8c98:	2004      	movs	r0, #4
    8c9a:	70a0      	strb	r0, [r4, #2]
    8c9c:	7908      	ldrb	r0, [r1, #4]
    8c9e:	70e0      	strb	r0, [r4, #3]
    8ca0:	7988      	ldrb	r0, [r1, #6]
    8ca2:	7120      	strb	r0, [r4, #4]
    8ca4:	88c8      	ldrh	r0, [r1, #6]
    8ca6:	0a00      	lsrs	r0, r0, #8
    8ca8:	7160      	strb	r0, [r4, #5]
    8caa:	6888      	ldr	r0, [r1, #8]
    8cac:	f8c4 0006 	str.w	r0, [r4, #6]
    8cb0:	68c8      	ldr	r0, [r1, #12]
    8cb2:	f8c4 000a 	str.w	r0, [r4, #10]
    8cb6:	200c      	movs	r0, #12
    8cb8:	e112      	b.n	8ee0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8cba:	7022      	strb	r2, [r4, #0]
    8cbc:	2003      	movs	r0, #3
    8cbe:	70a0      	strb	r0, [r4, #2]
    8cc0:	7908      	ldrb	r0, [r1, #4]
    8cc2:	70e0      	strb	r0, [r4, #3]
    8cc4:	7988      	ldrb	r0, [r1, #6]
    8cc6:	7120      	strb	r0, [r4, #4]
    8cc8:	88c8      	ldrh	r0, [r1, #6]
    8cca:	0a00      	lsrs	r0, r0, #8
    8ccc:	7160      	strb	r0, [r4, #5]
    8cce:	7a08      	ldrb	r0, [r1, #8]
    8cd0:	71a0      	strb	r0, [r4, #6]
    8cd2:	8908      	ldrh	r0, [r1, #8]
    8cd4:	0a00      	lsrs	r0, r0, #8
    8cd6:	71e0      	strb	r0, [r4, #7]
    8cd8:	7a88      	ldrb	r0, [r1, #10]
    8cda:	7220      	strb	r0, [r4, #8]
    8cdc:	8948      	ldrh	r0, [r1, #10]
    8cde:	0a00      	lsrs	r0, r0, #8
    8ce0:	7260      	strb	r0, [r4, #9]
    8ce2:	7b08      	ldrb	r0, [r1, #12]
    8ce4:	72a0      	strb	r0, [r4, #10]
    8ce6:	8988      	ldrh	r0, [r1, #12]
    8ce8:	0a00      	lsrs	r0, r0, #8
    8cea:	72e0      	strb	r0, [r4, #11]
    8cec:	e0d2      	b.n	8e94 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x342>
    8cee:	7022      	strb	r2, [r4, #0]
    8cf0:	70a7      	strb	r7, [r4, #2]
    8cf2:	7908      	ldrb	r0, [r1, #4]
    8cf4:	70e0      	strb	r0, [r4, #3]
    8cf6:	8888      	ldrh	r0, [r1, #4]
    8cf8:	0a00      	lsrs	r0, r0, #8
    8cfa:	7120      	strb	r0, [r4, #4]
    8cfc:	f8d1 0006 	ldr.w	r0, [r1, #6]
    8d00:	f8c4 0005 	str.w	r0, [r4, #5]
    8d04:	f8d1 000a 	ldr.w	r0, [r1, #10]
    8d08:	f8c4 0009 	str.w	r0, [r4, #9]
    8d0c:	89c8      	ldrh	r0, [r1, #14]
    8d0e:	f8a4 000d 	strh.w	r0, [r4, #13]
    8d12:	e0e4      	b.n	8ede <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38c>
    8d14:	2011      	movs	r0, #17
    8d16:	e047      	b.n	8da8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x256>
    8d18:	7027      	strb	r7, [r4, #0]
    8d1a:	7908      	ldrb	r0, [r1, #4]
    8d1c:	70a0      	strb	r0, [r4, #2]
    8d1e:	7948      	ldrb	r0, [r1, #5]
    8d20:	70e0      	strb	r0, [r4, #3]
    8d22:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    8d26:	0a00      	lsrs	r0, r0, #8
    8d28:	7120      	strb	r0, [r4, #4]
    8d2a:	79c8      	ldrb	r0, [r1, #7]
    8d2c:	e076      	b.n	8e1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    8d2e:	2008      	movs	r0, #8
    8d30:	7020      	strb	r0, [r4, #0]
    8d32:	7908      	ldrb	r0, [r1, #4]
    8d34:	70a0      	strb	r0, [r4, #2]
    8d36:	7988      	ldrb	r0, [r1, #6]
    8d38:	70e0      	strb	r0, [r4, #3]
    8d3a:	88c8      	ldrh	r0, [r1, #6]
    8d3c:	0a00      	lsrs	r0, r0, #8
    8d3e:	7120      	strb	r0, [r4, #4]
    8d40:	7a08      	ldrb	r0, [r1, #8]
    8d42:	e06b      	b.n	8e1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    8d44:	e0b6      	b.n	8eb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x362>
    8d46:	e08a      	b.n	8e5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x30c>
    8d48:	e06b      	b.n	8e22 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d0>
    8d4a:	e096      	b.n	8e7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    8d4c:	e0a4      	b.n	8e98 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x346>
    8d4e:	e05d      	b.n	8e0c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    8d50:	e045      	b.n	8dde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x28c>
    8d52:	e041      	b.n	8dd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    8d54:	e030      	b.n	8db8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x266>
    8d56:	e011      	b.n	8d7c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22a>
    8d58:	e00d      	b.n	8d76 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x224>
    8d5a:	e024      	b.n	8da6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x254>
    8d5c:	e01b      	b.n	8d96 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    8d5e:	e7ff      	b.n	8d60 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20e>
    8d60:	2030      	movs	r0, #48	; 0x30
    8d62:	7020      	strb	r0, [r4, #0]
    8d64:	7908      	ldrb	r0, [r1, #4]
    8d66:	70a0      	strb	r0, [r4, #2]
    8d68:	7988      	ldrb	r0, [r1, #6]
    8d6a:	70e0      	strb	r0, [r4, #3]
    8d6c:	88c8      	ldrh	r0, [r1, #6]
    8d6e:	0a00      	lsrs	r0, r0, #8
    8d70:	7120      	strb	r0, [r4, #4]
    8d72:	2003      	movs	r0, #3
    8d74:	e0b4      	b.n	8ee0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8d76:	7022      	strb	r2, [r4, #0]
    8d78:	2007      	movs	r0, #7
    8d7a:	e054      	b.n	8e26 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d4>
    8d7c:	7022      	strb	r2, [r4, #0]
    8d7e:	70a6      	strb	r6, [r4, #2]
    8d80:	7908      	ldrb	r0, [r1, #4]
    8d82:	70e0      	strb	r0, [r4, #3]
    8d84:	7988      	ldrb	r0, [r1, #6]
    8d86:	7120      	strb	r0, [r4, #4]
    8d88:	88c8      	ldrh	r0, [r1, #6]
    8d8a:	0a00      	lsrs	r0, r0, #8
    8d8c:	7160      	strb	r0, [r4, #5]
    8d8e:	7a08      	ldrb	r0, [r1, #8]
    8d90:	71a0      	strb	r0, [r4, #6]
    8d92:	7a48      	ldrb	r0, [r1, #9]
    8d94:	e01d      	b.n	8dd2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x280>
    8d96:	4620      	mov	r0, r4
    8d98:	1d09      	adds	r1, r1, #4
    8d9a:	f7fb fdd1 	bl	4940 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb0>
    8d9e:	2800      	cmp	r0, #0
    8da0:	d109      	bne.n	8db6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x264>
    8da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8da6:	2057      	movs	r0, #87	; 0x57
    8da8:	7020      	strb	r0, [r4, #0]
    8daa:	7908      	ldrb	r0, [r1, #4]
    8dac:	70a0      	strb	r0, [r4, #2]
    8dae:	8888      	ldrh	r0, [r1, #4]
    8db0:	0a00      	lsrs	r0, r0, #8
    8db2:	70e0      	strb	r0, [r4, #3]
    8db4:	2002      	movs	r0, #2
    8db6:	e093      	b.n	8ee0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8db8:	7022      	strb	r2, [r4, #0]
    8dba:	2012      	movs	r0, #18
    8dbc:	70a0      	strb	r0, [r4, #2]
    8dbe:	7908      	ldrb	r0, [r1, #4]
    8dc0:	70e0      	strb	r0, [r4, #3]
    8dc2:	7948      	ldrb	r0, [r1, #5]
    8dc4:	7120      	strb	r0, [r4, #4]
    8dc6:	7988      	ldrb	r0, [r1, #6]
    8dc8:	7160      	strb	r0, [r4, #5]
    8dca:	88c8      	ldrh	r0, [r1, #6]
    8dcc:	0a00      	lsrs	r0, r0, #8
    8dce:	71a0      	strb	r0, [r4, #6]
    8dd0:	7a08      	ldrb	r0, [r1, #8]
    8dd2:	71e0      	strb	r0, [r4, #7]
    8dd4:	2006      	movs	r0, #6
    8dd6:	e083      	b.n	8ee0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8dd8:	7022      	strb	r2, [r4, #0]
    8dda:	2020      	movs	r0, #32
    8ddc:	e041      	b.n	8e62 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x310>
    8dde:	7022      	strb	r2, [r4, #0]
    8de0:	2021      	movs	r0, #33	; 0x21
    8de2:	70a0      	strb	r0, [r4, #2]
    8de4:	7908      	ldrb	r0, [r1, #4]
    8de6:	70e0      	strb	r0, [r4, #3]
    8de8:	7948      	ldrb	r0, [r1, #5]
    8dea:	7120      	strb	r0, [r4, #4]
    8dec:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    8df0:	0a00      	lsrs	r0, r0, #8
    8df2:	7160      	strb	r0, [r4, #5]
    8df4:	79c8      	ldrb	r0, [r1, #7]
    8df6:	71a0      	strb	r0, [r4, #6]
    8df8:	7a08      	ldrb	r0, [r1, #8]
    8dfa:	71e0      	strb	r0, [r4, #7]
    8dfc:	7a48      	ldrb	r0, [r1, #9]
    8dfe:	7220      	strb	r0, [r4, #8]
    8e00:	7a88      	ldrb	r0, [r1, #10]
    8e02:	7260      	strb	r0, [r4, #9]
    8e04:	7ac8      	ldrb	r0, [r1, #11]
    8e06:	72a0      	strb	r0, [r4, #10]
    8e08:	2009      	movs	r0, #9
    8e0a:	e069      	b.n	8ee0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8e0c:	7023      	strb	r3, [r4, #0]
    8e0e:	20a1      	movs	r0, #161	; 0xa1
    8e10:	70a0      	strb	r0, [r4, #2]
    8e12:	7908      	ldrb	r0, [r1, #4]
    8e14:	70e0      	strb	r0, [r4, #3]
    8e16:	7948      	ldrb	r0, [r1, #5]
    8e18:	7120      	strb	r0, [r4, #4]
    8e1a:	2000      	movs	r0, #0
    8e1c:	7160      	strb	r0, [r4, #5]
    8e1e:	2004      	movs	r0, #4
    8e20:	e05e      	b.n	8ee0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8e22:	7023      	strb	r3, [r4, #0]
    8e24:	20a2      	movs	r0, #162	; 0xa2
    8e26:	70a0      	strb	r0, [r4, #2]
    8e28:	7908      	ldrb	r0, [r1, #4]
    8e2a:	70e0      	strb	r0, [r4, #3]
    8e2c:	8888      	ldrh	r0, [r1, #4]
    8e2e:	0a00      	lsrs	r0, r0, #8
    8e30:	7120      	strb	r0, [r4, #4]
    8e32:	7988      	ldrb	r0, [r1, #6]
    8e34:	7160      	strb	r0, [r4, #5]
    8e36:	88c8      	ldrh	r0, [r1, #6]
    8e38:	0a00      	lsrs	r0, r0, #8
    8e3a:	71a0      	strb	r0, [r4, #6]
    8e3c:	7a08      	ldrb	r0, [r1, #8]
    8e3e:	71e0      	strb	r0, [r4, #7]
    8e40:	8908      	ldrh	r0, [r1, #8]
    8e42:	0a00      	lsrs	r0, r0, #8
    8e44:	7220      	strb	r0, [r4, #8]
    8e46:	7a88      	ldrb	r0, [r1, #10]
    8e48:	7260      	strb	r0, [r4, #9]
    8e4a:	8948      	ldrh	r0, [r1, #10]
    8e4c:	0a00      	lsrs	r0, r0, #8
    8e4e:	72a0      	strb	r0, [r4, #10]
    8e50:	7b08      	ldrb	r0, [r1, #12]
    8e52:	72e0      	strb	r0, [r4, #11]
    8e54:	8988      	ldrh	r0, [r1, #12]
    8e56:	0a00      	lsrs	r0, r0, #8
    8e58:	7320      	strb	r0, [r4, #12]
    8e5a:	200b      	movs	r0, #11
    8e5c:	e040      	b.n	8ee0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8e5e:	7023      	strb	r3, [r4, #0]
    8e60:	20a3      	movs	r0, #163	; 0xa3
    8e62:	70a0      	strb	r0, [r4, #2]
    8e64:	7908      	ldrb	r0, [r1, #4]
    8e66:	70e0      	strb	r0, [r4, #3]
    8e68:	8888      	ldrh	r0, [r1, #4]
    8e6a:	0a00      	lsrs	r0, r0, #8
    8e6c:	7120      	strb	r0, [r4, #4]
    8e6e:	7988      	ldrb	r0, [r1, #6]
    8e70:	7160      	strb	r0, [r4, #5]
    8e72:	79c8      	ldrb	r0, [r1, #7]
    8e74:	71a0      	strb	r0, [r4, #6]
    8e76:	2005      	movs	r0, #5
    8e78:	e032      	b.n	8ee0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8e7a:	7022      	strb	r2, [r4, #0]
    8e7c:	70a5      	strb	r5, [r4, #2]
    8e7e:	7908      	ldrb	r0, [r1, #4]
    8e80:	70e0      	strb	r0, [r4, #3]
    8e82:	7948      	ldrb	r0, [r1, #5]
    8e84:	7120      	strb	r0, [r4, #4]
    8e86:	f8d1 0006 	ldr.w	r0, [r1, #6]
    8e8a:	f8c4 0005 	str.w	r0, [r4, #5]
    8e8e:	8948      	ldrh	r0, [r1, #10]
    8e90:	f8a4 0009 	strh.w	r0, [r4, #9]
    8e94:	200a      	movs	r0, #10
    8e96:	e023      	b.n	8ee0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8e98:	7023      	strb	r3, [r4, #0]
    8e9a:	20a4      	movs	r0, #164	; 0xa4
    8e9c:	70a0      	strb	r0, [r4, #2]
    8e9e:	7908      	ldrb	r0, [r1, #4]
    8ea0:	70e0      	strb	r0, [r4, #3]
    8ea2:	8888      	ldrh	r0, [r1, #4]
    8ea4:	0a00      	lsrs	r0, r0, #8
    8ea6:	7120      	strb	r0, [r4, #4]
    8ea8:	7988      	ldrb	r0, [r1, #6]
    8eaa:	7160      	strb	r0, [r4, #5]
    8eac:	79c8      	ldrb	r0, [r1, #7]
    8eae:	71a0      	strb	r0, [r4, #6]
    8eb0:	2007      	movs	r0, #7
    8eb2:	e015      	b.n	8ee0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    8eb4:	7023      	strb	r3, [r4, #0]
    8eb6:	2080      	movs	r0, #128	; 0x80
    8eb8:	70a0      	strb	r0, [r4, #2]
    8eba:	888a      	ldrh	r2, [r1, #4]
    8ebc:	f8a4 2003 	strh.w	r2, [r4, #3]
    8ec0:	88ca      	ldrh	r2, [r1, #6]
    8ec2:	f8a4 2005 	strh.w	r2, [r4, #5]
    8ec6:	7a0a      	ldrb	r2, [r1, #8]
    8ec8:	71e2      	strb	r2, [r4, #7]
    8eca:	894a      	ldrh	r2, [r1, #10]
    8ecc:	8122      	strh	r2, [r4, #8]
    8ece:	898a      	ldrh	r2, [r1, #12]
    8ed0:	8162      	strh	r2, [r4, #10]
    8ed2:	89ca      	ldrh	r2, [r1, #14]
    8ed4:	81a2      	strh	r2, [r4, #12]
    8ed6:	7c09      	ldrb	r1, [r1, #16]
    8ed8:	f001 0101 	and.w	r1, r1, #1
    8edc:	73a1      	strb	r1, [r4, #14]
    8ede:	200d      	movs	r0, #13
    8ee0:	7060      	strb	r0, [r4, #1]
    8ee2:	1c80      	adds	r0, r0, #2
    8ee4:	e75d      	b.n	8da2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>

00008ee6 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    8ee6:	223e      	movs	r2, #62	; 0x3e
    8ee8:	7002      	strb	r2, [r0, #0]
    8eea:	2201      	movs	r2, #1
    8eec:	7082      	strb	r2, [r0, #2]
    8eee:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    8ef2:	70c2      	strb	r2, [r0, #3]
    8ef4:	788a      	ldrb	r2, [r1, #2]
    8ef6:	7102      	strb	r2, [r0, #4]
    8ef8:	884a      	ldrh	r2, [r1, #2]
    8efa:	0a12      	lsrs	r2, r2, #8
    8efc:	7142      	strb	r2, [r0, #5]
    8efe:	790a      	ldrb	r2, [r1, #4]
    8f00:	7182      	strb	r2, [r0, #6]
    8f02:	794a      	ldrb	r2, [r1, #5]
    8f04:	71c2      	strb	r2, [r0, #7]
    8f06:	f8d1 2006 	ldr.w	r2, [r1, #6]
    8f0a:	6082      	str	r2, [r0, #8]
    8f0c:	894a      	ldrh	r2, [r1, #10]
    8f0e:	8182      	strh	r2, [r0, #12]
    8f10:	7e0a      	ldrb	r2, [r1, #24]
    8f12:	7382      	strb	r2, [r0, #14]
    8f14:	8b0a      	ldrh	r2, [r1, #24]
    8f16:	0a12      	lsrs	r2, r2, #8
    8f18:	73c2      	strb	r2, [r0, #15]
    8f1a:	7e8a      	ldrb	r2, [r1, #26]
    8f1c:	7402      	strb	r2, [r0, #16]
    8f1e:	8b4a      	ldrh	r2, [r1, #26]
    8f20:	0a12      	lsrs	r2, r2, #8
    8f22:	7442      	strb	r2, [r0, #17]
    8f24:	7f0a      	ldrb	r2, [r1, #28]
    8f26:	7482      	strb	r2, [r0, #18]
    8f28:	8b8a      	ldrh	r2, [r1, #28]
    8f2a:	0a12      	lsrs	r2, r2, #8
    8f2c:	74c2      	strb	r2, [r0, #19]
    8f2e:	7f89      	ldrb	r1, [r1, #30]
    8f30:	7501      	strb	r1, [r0, #20]
    8f32:	2113      	movs	r1, #19
    8f34:	7041      	strb	r1, [r0, #1]
    8f36:	4608      	mov	r0, r1
    8f38:	4770      	bx	lr
    8f3a:	094a      	lsrs	r2, r1, #5
    8f3c:	f001 011f 	and.w	r1, r1, #31
    8f40:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    8f44:	40c8      	lsrs	r0, r1
    8f46:	f000 0001 	and.w	r0, r0, #1
    8f4a:	4770      	bx	lr

00008f4c <sdc_hci_get>:
    8f4c:	b510      	push	{r4, lr}
    8f4e:	460c      	mov	r4, r1
    8f50:	b130      	cbz	r0, 8f60 <sdc_hci_get+0x14>
    8f52:	b12c      	cbz	r4, 8f60 <sdc_hci_get+0x14>
    8f54:	f7fb fc9c 	bl	4890 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    8f58:	b128      	cbz	r0, 8f66 <sdc_hci_get+0x1a>
    8f5a:	7020      	strb	r0, [r4, #0]
    8f5c:	2000      	movs	r0, #0
    8f5e:	bd10      	pop	{r4, pc}
    8f60:	f06f 0015 	mvn.w	r0, #21
    8f64:	bd10      	pop	{r4, pc}
    8f66:	f06f 0022 	mvn.w	r0, #34	; 0x22
    8f6a:	bd10      	pop	{r4, pc}

00008f6c <sdc_hci_cmd_cb_set_event_mask>:
    8f6c:	b510      	push	{r4, lr}
    8f6e:	f7fb fd37 	bl	49e0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    8f72:	2000      	movs	r0, #0
    8f74:	bd10      	pop	{r4, pc}

00008f76 <sdc_hci_cmd_vs_conn_event_extend>:
    8f76:	b508      	push	{r3, lr}
    8f78:	7800      	ldrb	r0, [r0, #0]
    8f7a:	f88d 0000 	strb.w	r0, [sp]
    8f7e:	4668      	mov	r0, sp
    8f80:	f001 fc11 	bl	a7a6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    8f84:	bd08      	pop	{r3, pc}

00008f86 <sdc_hci_cmd_vs_conn_update>:
    8f86:	2001      	movs	r0, #1
    8f88:	4770      	bx	lr

00008f8a <sdc_hci_cmd_vs_event_length_set>:
    8f8a:	f7fd be83 	b.w	6c94 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

00008f8e <sdc_hci_cmd_vs_llpm_mode_set>:
    8f8e:	2001      	movs	r0, #1
    8f90:	4770      	bx	lr

00008f92 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    8f92:	7800      	ldrb	r0, [r0, #0]
    8f94:	b100      	cbz	r0, 8f98 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    8f96:	2001      	movs	r0, #1
    8f98:	f001 bbcf 	b.w	a73a <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

00008f9c <sdc_hci_cmd_vs_set_adv_randomness>:
    8f9c:	f001 bbe0 	b.w	a760 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

00008fa0 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    8fa0:	b510      	push	{r4, lr}
    8fa2:	4604      	mov	r4, r0
    8fa4:	f7fb f950 	bl	4248 <mpsl_temperature_get>
    8fa8:	17c1      	asrs	r1, r0, #31
    8faa:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    8fae:	1080      	asrs	r0, r0, #2
    8fb0:	287f      	cmp	r0, #127	; 0x7f
    8fb2:	dd01      	ble.n	8fb8 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    8fb4:	207f      	movs	r0, #127	; 0x7f
    8fb6:	e004      	b.n	8fc2 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    8fb8:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    8fbc:	4288      	cmp	r0, r1
    8fbe:	da00      	bge.n	8fc2 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    8fc0:	4608      	mov	r0, r1
    8fc2:	7020      	strb	r0, [r4, #0]
    8fc4:	2000      	movs	r0, #0
    8fc6:	bd10      	pop	{r4, pc}

00008fc8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    8fc8:	b570      	push	{r4, r5, r6, lr}
    8fca:	4605      	mov	r5, r0
    8fcc:	2210      	movs	r2, #16
    8fce:	2100      	movs	r1, #0
    8fd0:	f7ff fc91 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8fd4:	2210      	movs	r2, #16
    8fd6:	2100      	movs	r1, #0
    8fd8:	f105 0010 	add.w	r0, r5, #16
    8fdc:	f7ff fc8b 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8fe0:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    8fe4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    8fe8:	1c40      	adds	r0, r0, #1
    8fea:	d10b      	bne.n	9004 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    8fec:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    8ff0:	1c40      	adds	r0, r0, #1
    8ff2:	d107      	bne.n	9004 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    8ff4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    8ff8:	1c40      	adds	r0, r0, #1
    8ffa:	d103      	bne.n	9004 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    8ffc:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    9000:	1c40      	adds	r0, r0, #1
    9002:	d00b      	beq.n	901c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    9004:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    9008:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    900c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    9010:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    9014:	612a      	str	r2, [r5, #16]
    9016:	6168      	str	r0, [r5, #20]
    9018:	61a9      	str	r1, [r5, #24]
    901a:	61eb      	str	r3, [r5, #28]
    901c:	2000      	movs	r0, #0
    901e:	f7fc f969 	bl	52f4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    9022:	b918      	cbnz	r0, 902c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    9024:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    9028:	07c0      	lsls	r0, r0, #31
    902a:	d118      	bne.n	905e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    902c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    9030:	1c40      	adds	r0, r0, #1
    9032:	d10b      	bne.n	904c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    9034:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    9038:	1c40      	adds	r0, r0, #1
    903a:	d107      	bne.n	904c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    903c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    9040:	1c40      	adds	r0, r0, #1
    9042:	d103      	bne.n	904c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    9044:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    9048:	1c40      	adds	r0, r0, #1
    904a:	d008      	beq.n	905e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    904c:	f854 0f90 	ldr.w	r0, [r4, #144]!
    9050:	6861      	ldr	r1, [r4, #4]
    9052:	68a2      	ldr	r2, [r4, #8]
    9054:	68e3      	ldr	r3, [r4, #12]
    9056:	6028      	str	r0, [r5, #0]
    9058:	6069      	str	r1, [r5, #4]
    905a:	60aa      	str	r2, [r5, #8]
    905c:	60eb      	str	r3, [r5, #12]
    905e:	2000      	movs	r0, #0
    9060:	bd70      	pop	{r4, r5, r6, pc}

00009062 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    9062:	b538      	push	{r3, r4, r5, lr}
    9064:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    9068:	4604      	mov	r4, r0
    906a:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    906e:	1c40      	adds	r0, r0, #1
    9070:	d105      	bne.n	907e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    9072:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    9076:	43c0      	mvns	r0, r0
    9078:	0400      	lsls	r0, r0, #16
    907a:	0c00      	lsrs	r0, r0, #16
    907c:	d03e      	beq.n	90fc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    907e:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    9082:	07c0      	lsls	r0, r0, #31
    9084:	d03a      	beq.n	90fc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    9086:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    908a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    908e:	f8ad 1000 	strh.w	r1, [sp]
    9092:	f8c4 0001 	str.w	r0, [r4, #1]
    9096:	f8bd 0000 	ldrh.w	r0, [sp]
    909a:	f8a4 0005 	strh.w	r0, [r4, #5]
    909e:	79a0      	ldrb	r0, [r4, #6]
    90a0:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    90a4:	71a0      	strb	r0, [r4, #6]
    90a6:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    90aa:	1c40      	adds	r0, r0, #1
    90ac:	d00f      	beq.n	90ce <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    90ae:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    90b2:	1c40      	adds	r0, r0, #1
    90b4:	d00b      	beq.n	90ce <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    90b6:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    90ba:	1c40      	adds	r0, r0, #1
    90bc:	d007      	beq.n	90ce <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    90be:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    90c2:	1c40      	adds	r0, r0, #1
    90c4:	d003      	beq.n	90ce <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    90c6:	2000      	movs	r0, #0
    90c8:	f7fc f914 	bl	52f4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    90cc:	b140      	cbz	r0, 90e0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    90ce:	2210      	movs	r2, #16
    90d0:	2100      	movs	r1, #0
    90d2:	1de0      	adds	r0, r4, #7
    90d4:	f7ff fc0f 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    90d8:	2001      	movs	r0, #1
    90da:	7020      	strb	r0, [r4, #0]
    90dc:	2000      	movs	r0, #0
    90de:	bd38      	pop	{r3, r4, r5, pc}
    90e0:	f855 2f90 	ldr.w	r2, [r5, #144]!
    90e4:	6869      	ldr	r1, [r5, #4]
    90e6:	68a8      	ldr	r0, [r5, #8]
    90e8:	68eb      	ldr	r3, [r5, #12]
    90ea:	f8c4 2007 	str.w	r2, [r4, #7]
    90ee:	f8c4 100b 	str.w	r1, [r4, #11]
    90f2:	f8c4 000f 	str.w	r0, [r4, #15]
    90f6:	f8c4 3013 	str.w	r3, [r4, #19]
    90fa:	e7ed      	b.n	90d8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    90fc:	2000      	movs	r0, #0
    90fe:	e7ec      	b.n	90da <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

00009100 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    9100:	f001 bb43 	b.w	a78a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

00009104 <sdc_hci_cmd_ip_read_bd_addr>:
    9104:	f001 bc14 	b.w	a930 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

00009108 <sdc_hci_cmd_ip_read_local_version_information>:
    9108:	f7fd bdd2 	b.w	6cb0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000910c <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    910c:	f001 b994 	b.w	a438 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

00009110 <sdc_hci_cmd_le_clear_filter_accept_list>:
    9110:	f001 b9a9 	b.w	a466 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

00009114 <sdc_hci_cmd_le_encrypt>:
    9114:	f001 b9b1 	b.w	a47a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

00009118 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    9118:	8802      	ldrh	r2, [r0, #0]
    911a:	800a      	strh	r2, [r1, #0]
    911c:	f001 b9b6 	b.w	a48c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

00009120 <sdc_hci_cmd_le_rand>:
    9120:	f001 b9cd 	b.w	a4be <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

00009124 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    9124:	f001 b9d1 	b.w	a4ca <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

00009128 <sdc_hci_cmd_le_read_buffer_size>:
    9128:	f7fd bd3c 	b.w	6ba4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000912c <sdc_hci_cmd_le_read_filter_accept_list_size>:
    912c:	f001 b9df 	b.w	a4ee <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

00009130 <sdc_hci_cmd_le_read_transmit_power>:
    9130:	f001 b9d4 	b.w	a4dc <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

00009134 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    9134:	f001 b9df 	b.w	a4f6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

00009138 <sdc_hci_cmd_le_set_adv_data>:
    9138:	f001 b9f2 	b.w	a520 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000913c <sdc_hci_cmd_le_set_adv_enable>:
    913c:	f001 ba05 	b.w	a54a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

00009140 <sdc_hci_cmd_le_set_adv_params>:
    9140:	f001 ba36 	b.w	a5b0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

00009144 <sdc_hci_cmd_le_set_data_related_address_changes>:
    9144:	f001 bac9 	b.w	a6da <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

00009148 <sdc_hci_cmd_le_set_event_mask>:
    9148:	b510      	push	{r4, lr}
    914a:	f7fb fc41 	bl	49d0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    914e:	2000      	movs	r0, #0
    9150:	bd10      	pop	{r4, pc}

00009152 <sdc_hci_cmd_le_set_random_address>:
    9152:	f001 bacf 	b.w	a6f4 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

00009156 <sdc_hci_cmd_le_set_scan_response_data>:
    9156:	f001 badb 	b.w	a710 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>
    915a:	b570      	push	{r4, r5, r6, lr}
    915c:	880b      	ldrh	r3, [r1, #0]
    915e:	7cc4      	ldrb	r4, [r0, #19]
    9160:	f100 0518 	add.w	r5, r0, #24
    9164:	f3c3 060e 	ubfx	r6, r3, #0, #15
    9168:	8802      	ldrh	r2, [r0, #0]
    916a:	4435      	add	r5, r6
    916c:	1d64      	adds	r4, r4, #5
    916e:	882d      	ldrh	r5, [r5, #0]
    9170:	4422      	add	r2, r4
    9172:	b292      	uxth	r2, r2
    9174:	4425      	add	r5, r4
    9176:	1e54      	subs	r4, r2, #1
    9178:	442c      	add	r4, r5
    917a:	fb94 f4f2 	sdiv	r4, r4, r2
    917e:	fb02 6204 	mla	r2, r2, r4, r6
    9182:	8840      	ldrh	r0, [r0, #2]
    9184:	b292      	uxth	r2, r2
    9186:	4290      	cmp	r0, r2
    9188:	d903      	bls.n	9192 <sdc_hci_cmd_le_set_scan_response_data+0x3c>
    918a:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    918e:	4310      	orrs	r0, r2
    9190:	e002      	b.n	9198 <sdc_hci_cmd_le_set_scan_response_data+0x42>
    9192:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    9196:	4398      	bics	r0, r3
    9198:	8008      	strh	r0, [r1, #0]
    919a:	bd70      	pop	{r4, r5, r6, pc}

0000919c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    919c:	8881      	ldrh	r1, [r0, #4]
    919e:	88c0      	ldrh	r0, [r0, #6]
    91a0:	4288      	cmp	r0, r1
    91a2:	d101      	bne.n	91a8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    91a4:	2001      	movs	r0, #1
    91a6:	4770      	bx	lr
    91a8:	2000      	movs	r0, #0
    91aa:	4770      	bx	lr

000091ac <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    91ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    91b0:	461d      	mov	r5, r3
    91b2:	4616      	mov	r6, r2
    91b4:	9f06      	ldr	r7, [sp, #24]
    91b6:	460b      	mov	r3, r1
    91b8:	4604      	mov	r4, r0
    91ba:	463a      	mov	r2, r7
    91bc:	4629      	mov	r1, r5
    91be:	4630      	mov	r0, r6
    91c0:	f000 f839 	bl	9236 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    91c4:	4283      	cmp	r3, r0
    91c6:	d201      	bcs.n	91cc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    91c8:	219f      	movs	r1, #159	; 0x9f
    91ca:	e012      	b.n	91f2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    91cc:	07a0      	lsls	r0, r4, #30
    91ce:	d001      	beq.n	91d4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    91d0:	21a0      	movs	r1, #160	; 0xa0
    91d2:	e00e      	b.n	91f2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    91d4:	2218      	movs	r2, #24
    91d6:	2100      	movs	r1, #0
    91d8:	4620      	mov	r0, r4
    91da:	f7ff fb8c 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    91de:	19a8      	adds	r0, r5, r6
    91e0:	1d40      	adds	r0, r0, #5
    91e2:	4378      	muls	r0, r7
    91e4:	b280      	uxth	r0, r0
    91e6:	74e5      	strb	r5, [r4, #19]
    91e8:	8060      	strh	r0, [r4, #2]
    91ea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    91ee:	d903      	bls.n	91f8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    91f0:	21a5      	movs	r1, #165	; 0xa5
    91f2:	2014      	movs	r0, #20
    91f4:	f7fb fa92 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91f8:	8026      	strh	r6, [r4, #0]
    91fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000091fe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    91fe:	b570      	push	{r4, r5, r6, lr}
    9200:	460b      	mov	r3, r1
    9202:	4604      	mov	r4, r0
    9204:	f100 0118 	add.w	r1, r0, #24
    9208:	8902      	ldrh	r2, [r0, #8]
    920a:	8880      	ldrh	r0, [r0, #4]
    920c:	f3c2 050e 	ubfx	r5, r2, #0, #15
    9210:	440d      	add	r5, r1
    9212:	4282      	cmp	r2, r0
    9214:	d101      	bne.n	921a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    9216:	2000      	movs	r0, #0
    9218:	bd70      	pop	{r4, r5, r6, pc}
    921a:	b123      	cbz	r3, 9226 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    921c:	7ce2      	ldrb	r2, [r4, #19]
    921e:	1ca9      	adds	r1, r5, #2
    9220:	4618      	mov	r0, r3
    9222:	f7ff faee 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9226:	882d      	ldrh	r5, [r5, #0]
    9228:	f104 0108 	add.w	r1, r4, #8
    922c:	4620      	mov	r0, r4
    922e:	f7ff ff94 	bl	915a <sdc_hci_cmd_le_set_scan_response_data+0x4>
    9232:	4628      	mov	r0, r5
    9234:	bd70      	pop	{r4, r5, r6, pc}

00009236 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    9236:	4401      	add	r1, r0
    9238:	1d49      	adds	r1, r1, #5
    923a:	4351      	muls	r1, r2
    923c:	b28a      	uxth	r2, r1
    923e:	2100      	movs	r1, #0
    9240:	2845      	cmp	r0, #69	; 0x45
    9242:	d202      	bcs.n	924a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    9244:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    9248:	b281      	uxth	r1, r0
    924a:	3218      	adds	r2, #24
    924c:	1850      	adds	r0, r2, r1
    924e:	b280      	uxth	r0, r0
    9250:	4770      	bx	lr

00009252 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    9252:	b570      	push	{r4, r5, r6, lr}
    9254:	2300      	movs	r3, #0
    9256:	f1a1 0208 	sub.w	r2, r1, #8
    925a:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    925e:	42a2      	cmp	r2, r4
    9260:	d304      	bcc.n	926c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    9262:	f240 11cd 	movw	r1, #461	; 0x1cd
    9266:	2015      	movs	r0, #21
    9268:	f7fb fa58 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    926c:	6802      	ldr	r2, [r0, #0]
    926e:	b90a      	cbnz	r2, 9274 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    9270:	e01e      	b.n	92b0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    9272:	4610      	mov	r0, r2
    9274:	6802      	ldr	r2, [r0, #0]
    9276:	8893      	ldrh	r3, [r2, #4]
    9278:	428b      	cmp	r3, r1
    927a:	d002      	beq.n	9282 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    927c:	6813      	ldr	r3, [r2, #0]
    927e:	2b00      	cmp	r3, #0
    9280:	d1f7      	bne.n	9272 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    9282:	8894      	ldrh	r4, [r2, #4]
    9284:	4613      	mov	r3, r2
    9286:	428c      	cmp	r4, r1
    9288:	d101      	bne.n	928e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    928a:	6811      	ldr	r1, [r2, #0]
    928c:	e00d      	b.n	92aa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    928e:	f101 0508 	add.w	r5, r1, #8
    9292:	b2ae      	uxth	r6, r5
    9294:	2500      	movs	r5, #0
    9296:	42b4      	cmp	r4, r6
    9298:	d309      	bcc.n	92ae <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    929a:	1a64      	subs	r4, r4, r1
    929c:	4411      	add	r1, r2
    929e:	600d      	str	r5, [r1, #0]
    92a0:	808c      	strh	r4, [r1, #4]
    92a2:	6802      	ldr	r2, [r0, #0]
    92a4:	6812      	ldr	r2, [r2, #0]
    92a6:	6002      	str	r2, [r0, #0]
    92a8:	600a      	str	r2, [r1, #0]
    92aa:	6001      	str	r1, [r0, #0]
    92ac:	e000      	b.n	92b0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    92ae:	2300      	movs	r3, #0
    92b0:	4618      	mov	r0, r3
    92b2:	bd70      	pop	{r4, r5, r6, pc}

000092b4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    92b4:	b510      	push	{r4, lr}
    92b6:	000c      	movs	r4, r1
    92b8:	d004      	beq.n	92c4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    92ba:	2c08      	cmp	r4, #8
    92bc:	d207      	bcs.n	92ce <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    92be:	f240 1195 	movw	r1, #405	; 0x195
    92c2:	e00a      	b.n	92da <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    92c4:	b108      	cbz	r0, 92ca <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    92c6:	2100      	movs	r1, #0
    92c8:	6001      	str	r1, [r0, #0]
    92ca:	2000      	movs	r0, #0
    92cc:	bd10      	pop	{r4, pc}
    92ce:	b158      	cbz	r0, 92e8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    92d0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    92d4:	d304      	bcc.n	92e0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    92d6:	f240 11a7 	movw	r1, #423	; 0x1a7
    92da:	2015      	movs	r0, #21
    92dc:	f7fb fa1e 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92e0:	b2a1      	uxth	r1, r4
    92e2:	6800      	ldr	r0, [r0, #0]
    92e4:	f000 f814 	bl	9310 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    92e8:	1d20      	adds	r0, r4, #4
    92ea:	bd10      	pop	{r4, pc}

000092ec <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    92ec:	2100      	movs	r1, #0
    92ee:	6802      	ldr	r2, [r0, #0]
    92f0:	e003      	b.n	92fa <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    92f2:	8893      	ldrh	r3, [r2, #4]
    92f4:	6812      	ldr	r2, [r2, #0]
    92f6:	4419      	add	r1, r3
    92f8:	b289      	uxth	r1, r1
    92fa:	2a00      	cmp	r2, #0
    92fc:	d1f9      	bne.n	92f2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    92fe:	f000 b807 	b.w	9310 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

00009302 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    9302:	2300      	movs	r3, #0
    9304:	600b      	str	r3, [r1, #0]
    9306:	808a      	strh	r2, [r1, #4]
    9308:	6802      	ldr	r2, [r0, #0]
    930a:	600a      	str	r2, [r1, #0]
    930c:	6001      	str	r1, [r0, #0]
    930e:	4770      	bx	lr
    9310:	2300      	movs	r3, #0
    9312:	6043      	str	r3, [r0, #4]
    9314:	1d02      	adds	r2, r0, #4
    9316:	8101      	strh	r1, [r0, #8]
    9318:	6002      	str	r2, [r0, #0]
    931a:	4770      	bx	lr

0000931c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    931c:	b51c      	push	{r2, r3, r4, lr}
    931e:	4604      	mov	r4, r0
    9320:	2000      	movs	r0, #0
    9322:	9001      	str	r0, [sp, #4]
    9324:	9000      	str	r0, [sp, #0]
    9326:	f88d 4006 	strb.w	r4, [sp, #6]
    932a:	e00a      	b.n	9342 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    932c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    9330:	4621      	mov	r1, r4
    9332:	f7fb fc2d 	bl	4b90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    9336:	b120      	cbz	r0, 9342 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    9338:	f240 21a5 	movw	r1, #677	; 0x2a5
    933c:	2017      	movs	r0, #23
    933e:	f7fb f9ed 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9342:	4668      	mov	r0, sp
    9344:	f7fb fbdc 	bl	4b00 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    9348:	2800      	cmp	r0, #0
    934a:	d0ef      	beq.n	932c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    934c:	bd1c      	pop	{r2, r3, r4, pc}

0000934e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    934e:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    9352:	3aff      	subs	r2, #255	; 0xff
    9354:	d001      	beq.n	935a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    9356:	2902      	cmp	r1, #2
    9358:	d301      	bcc.n	935e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    935a:	2000      	movs	r0, #0
    935c:	4770      	bx	lr
    935e:	f7fb bc49 	b.w	4bf4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

00009362 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    9362:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    9366:	3aff      	subs	r2, #255	; 0xff
    9368:	d001      	beq.n	936e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    936a:	2902      	cmp	r1, #2
    936c:	d301      	bcc.n	9372 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    936e:	2000      	movs	r0, #0
    9370:	4770      	bx	lr
    9372:	f7fb bc67 	b.w	4c44 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    9376:	b510      	push	{r4, lr}
    9378:	4604      	mov	r4, r0
    937a:	f7fb fcaf 	bl	4cdc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    937e:	42a0      	cmp	r0, r4
    9380:	d901      	bls.n	9386 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>
    9382:	2001      	movs	r0, #1
    9384:	bd10      	pop	{r4, pc}
    9386:	2000      	movs	r0, #0
    9388:	bd10      	pop	{r4, pc}

0000938a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    938a:	b570      	push	{r4, r5, r6, lr}
    938c:	460e      	mov	r6, r1
    938e:	461d      	mov	r5, r3
    9390:	4611      	mov	r1, r2
    9392:	f000 f813 	bl	93bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    9396:	4604      	mov	r4, r0
    9398:	4629      	mov	r1, r5
    939a:	4630      	mov	r0, r6
    939c:	f000 f804 	bl	93a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    93a0:	4420      	add	r0, r4
    93a2:	1d00      	adds	r0, r0, #4
    93a4:	b280      	uxth	r0, r0
    93a6:	bd70      	pop	{r4, r5, r6, pc}
    93a8:	b510      	push	{r4, lr}
    93aa:	460a      	mov	r2, r1
    93ac:	2109      	movs	r1, #9
    93ae:	f7ff ff42 	bl	9236 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    93b2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    93b6:	1cc0      	adds	r0, r0, #3
    93b8:	4008      	ands	r0, r1
    93ba:	bd10      	pop	{r4, pc}
    93bc:	b510      	push	{r4, lr}
    93be:	460a      	mov	r2, r1
    93c0:	210a      	movs	r1, #10
    93c2:	f7ff ff38 	bl	9236 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    93c6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    93ca:	1cc0      	adds	r0, r0, #3
    93cc:	4008      	ands	r0, r1
    93ce:	bd10      	pop	{r4, pc}
    93d0:	b109      	cbz	r1, 93d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    93d2:	2100      	movs	r1, #0
    93d4:	e000      	b.n	93d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    93d6:	2102      	movs	r1, #2
    93d8:	1843      	adds	r3, r0, r1
    93da:	7d1a      	ldrb	r2, [r3, #20]
    93dc:	2a02      	cmp	r2, #2
    93de:	d008      	beq.n	93f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    93e0:	7d5b      	ldrb	r3, [r3, #21]
    93e2:	2b02      	cmp	r3, #2
    93e4:	d009      	beq.n	93fa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    93e6:	2a03      	cmp	r2, #3
    93e8:	d003      	beq.n	93f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    93ea:	2b03      	cmp	r3, #3
    93ec:	d005      	beq.n	93fa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    93ee:	2000      	movs	r0, #0
    93f0:	4770      	bx	lr
    93f2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    93f6:	8b00      	ldrh	r0, [r0, #24]
    93f8:	4770      	bx	lr
    93fa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    93fe:	8b40      	ldrh	r0, [r0, #26]
    9400:	4770      	bx	lr
    9402:	b109      	cbz	r1, 9408 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    9404:	2100      	movs	r1, #0
    9406:	e000      	b.n	940a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    9408:	2102      	movs	r1, #2
    940a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    940e:	8b01      	ldrh	r1, [r0, #24]
    9410:	b911      	cbnz	r1, 9418 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    9412:	8b40      	ldrh	r0, [r0, #26]
    9414:	2800      	cmp	r0, #0
    9416:	d000      	beq.n	941a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    9418:	2001      	movs	r0, #1
    941a:	4770      	bx	lr
    941c:	b538      	push	{r3, r4, r5, lr}
    941e:	7883      	ldrb	r3, [r0, #2]
    9420:	f88d 3000 	strb.w	r3, [sp]
    9424:	9b00      	ldr	r3, [sp, #0]
    9426:	9300      	str	r3, [sp, #0]
    9428:	f89d 3000 	ldrb.w	r3, [sp]
    942c:	b95b      	cbnz	r3, 9446 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    942e:	2400      	movs	r4, #0
    9430:	b10a      	cbz	r2, 9436 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    9432:	2300      	movs	r3, #0
    9434:	e000      	b.n	9438 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    9436:	2302      	movs	r3, #2
    9438:	18c2      	adds	r2, r0, r3
    943a:	7d15      	ldrb	r5, [r2, #20]
    943c:	2d02      	cmp	r5, #2
    943e:	d004      	beq.n	944a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    9440:	7d52      	ldrb	r2, [r2, #21]
    9442:	2a02      	cmp	r2, #2
    9444:	d004      	beq.n	9450 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    9446:	2000      	movs	r0, #0
    9448:	bd38      	pop	{r3, r4, r5, pc}
    944a:	461a      	mov	r2, r3
    944c:	1c5b      	adds	r3, r3, #1
    944e:	e000      	b.n	9452 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    9450:	1c5a      	adds	r2, r3, #1
    9452:	b179      	cbz	r1, 9474 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    9454:	18c5      	adds	r5, r0, r3
    9456:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    945a:	752c      	strb	r4, [r5, #20]
    945c:	831c      	strh	r4, [r3, #24]
    945e:	2303      	movs	r3, #3
    9460:	1884      	adds	r4, r0, r2
    9462:	7523      	strb	r3, [r4, #20]
    9464:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9468:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    946c:	685b      	ldr	r3, [r3, #4]
    946e:	600b      	str	r3, [r1, #0]
    9470:	8b00      	ldrh	r0, [r0, #24]
    9472:	8088      	strh	r0, [r1, #4]
    9474:	2001      	movs	r0, #1
    9476:	bd38      	pop	{r3, r4, r5, pc}
    9478:	b510      	push	{r4, lr}
    947a:	b109      	cbz	r1, 9480 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    947c:	2100      	movs	r1, #0
    947e:	e000      	b.n	9482 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    9480:	2102      	movs	r1, #2
    9482:	1843      	adds	r3, r0, r1
    9484:	7d1c      	ldrb	r4, [r3, #20]
    9486:	4294      	cmp	r4, r2
    9488:	d103      	bne.n	9492 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    948a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    948e:	8b00      	ldrh	r0, [r0, #24]
    9490:	bd10      	pop	{r4, pc}
    9492:	7d5b      	ldrb	r3, [r3, #21]
    9494:	4293      	cmp	r3, r2
    9496:	d103      	bne.n	94a0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    9498:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    949c:	8b40      	ldrh	r0, [r0, #26]
    949e:	bd10      	pop	{r4, pc}
    94a0:	2000      	movs	r0, #0
    94a2:	bd10      	pop	{r4, pc}
    94a4:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    94a8:	d201      	bcs.n	94ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    94aa:	0841      	lsrs	r1, r0, #1
    94ac:	e000      	b.n	94b0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    94ae:	21ff      	movs	r1, #255	; 0xff
    94b0:	1a40      	subs	r0, r0, r1
    94b2:	f240 6172 	movw	r1, #1650	; 0x672
    94b6:	4288      	cmp	r0, r1
    94b8:	db00      	blt.n	94bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    94ba:	4608      	mov	r0, r1
    94bc:	b280      	uxth	r0, r0
    94be:	4770      	bx	lr

000094c0 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    94c0:	2101      	movs	r1, #1
    94c2:	f7ff bf85 	b.w	93d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

000094c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    94c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    94ca:	4606      	mov	r6, r0
    94cc:	f342 0780 	sbfx	r7, r2, #2, #1
    94d0:	7848      	ldrb	r0, [r1, #1]
    94d2:	460c      	mov	r4, r1
    94d4:	f022 0504 	bic.w	r5, r2, #4
    94d8:	1c7f      	adds	r7, r7, #1
    94da:	b100      	cbz	r0, 94de <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    94dc:	b90d      	cbnz	r5, 94e2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    94de:	4328      	orrs	r0, r5
    94e0:	d104      	bne.n	94ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    94e2:	b145      	cbz	r5, 94f6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    94e4:	2100      	movs	r1, #0
    94e6:	4620      	mov	r0, r4
    94e8:	f7fb fce2 	bl	4eb0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    94ec:	20ff      	movs	r0, #255	; 0xff
    94ee:	70a0      	strb	r0, [r4, #2]
    94f0:	b11f      	cbz	r7, 94fa <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    94f2:	2000      	movs	r0, #0
    94f4:	e002      	b.n	94fc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    94f6:	2101      	movs	r1, #1
    94f8:	e7f5      	b.n	94e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    94fa:	2002      	movs	r0, #2
    94fc:	1821      	adds	r1, r4, r0
    94fe:	7d09      	ldrb	r1, [r1, #20]
    9500:	2903      	cmp	r1, #3
    9502:	d102      	bne.n	950a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    9504:	2d02      	cmp	r5, #2
    9506:	d000      	beq.n	950a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    9508:	1c40      	adds	r0, r0, #1
    950a:	1822      	adds	r2, r4, r0
    950c:	2101      	movs	r1, #1
    950e:	7511      	strb	r1, [r2, #20]
    9510:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    9514:	2200      	movs	r2, #0
    9516:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    951a:	830a      	strh	r2, [r1, #24]
    951c:	6840      	ldr	r0, [r0, #4]
    951e:	70a2      	strb	r2, [r4, #2]
    9520:	4631      	mov	r1, r6
    9522:	f362 010f 	bfi	r1, r2, #0, #16
    9526:	e9c6 0100 	strd	r0, r1, [r6]
    952a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000952e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    952e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9532:	461e      	mov	r6, r3
    9534:	4613      	mov	r3, r2
    9536:	4604      	mov	r4, r0
    9538:	b109      	cbz	r1, 953e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    953a:	2000      	movs	r0, #0
    953c:	e000      	b.n	9540 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    953e:	2002      	movs	r0, #2
    9540:	21ff      	movs	r1, #255	; 0xff
    9542:	70a1      	strb	r1, [r4, #2]
    9544:	1821      	adds	r1, r4, r0
    9546:	7d0a      	ldrb	r2, [r1, #20]
    9548:	2a01      	cmp	r2, #1
    954a:	d003      	beq.n	9554 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    954c:	7d49      	ldrb	r1, [r1, #21]
    954e:	2901      	cmp	r1, #1
    9550:	d10c      	bne.n	956c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    9552:	1c40      	adds	r0, r0, #1
    9554:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    9558:	2700      	movs	r7, #0
    955a:	8b29      	ldrh	r1, [r5, #24]
    955c:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    9560:	198a      	adds	r2, r1, r6
    9562:	4562      	cmp	r2, ip
    9564:	d905      	bls.n	9572 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    9566:	4420      	add	r0, r4
    9568:	832f      	strh	r7, [r5, #24]
    956a:	7507      	strb	r7, [r0, #20]
    956c:	2000      	movs	r0, #0
    956e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9572:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    9576:	4632      	mov	r2, r6
    9578:	6840      	ldr	r0, [r0, #4]
    957a:	4408      	add	r0, r1
    957c:	4619      	mov	r1, r3
    957e:	f7ff f940 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9582:	8b28      	ldrh	r0, [r5, #24]
    9584:	4430      	add	r0, r6
    9586:	8328      	strh	r0, [r5, #24]
    9588:	70a7      	strb	r7, [r4, #2]
    958a:	2001      	movs	r0, #1
    958c:	e7ef      	b.n	956e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000958e <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    958e:	2202      	movs	r2, #2
    9590:	2100      	movs	r1, #0
    9592:	f7ff bf71 	b.w	9478 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

00009596 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    9596:	b510      	push	{r4, lr}
    9598:	2101      	movs	r1, #1
    959a:	f7ff ff32 	bl	9402 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    959e:	2800      	cmp	r0, #0
    95a0:	d000      	beq.n	95a4 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    95a2:	2001      	movs	r0, #1
    95a4:	bd10      	pop	{r4, pc}

000095a6 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    95a6:	2201      	movs	r2, #1
    95a8:	f7ff bf38 	b.w	941c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

000095ac <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    95ac:	2200      	movs	r2, #0
    95ae:	f7ff bf35 	b.w	941c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

000095b2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    95b2:	b570      	push	{r4, r5, r6, lr}
    95b4:	b109      	cbz	r1, 95ba <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    95b6:	2300      	movs	r3, #0
    95b8:	e000      	b.n	95bc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    95ba:	2302      	movs	r3, #2
    95bc:	21ff      	movs	r1, #255	; 0xff
    95be:	7081      	strb	r1, [r0, #2]
    95c0:	18c1      	adds	r1, r0, r3
    95c2:	2402      	movs	r4, #2
    95c4:	7d0d      	ldrb	r5, [r1, #20]
    95c6:	2d01      	cmp	r5, #1
    95c8:	d007      	beq.n	95da <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    95ca:	7d4d      	ldrb	r5, [r1, #21]
    95cc:	2d01      	cmp	r5, #1
    95ce:	d009      	beq.n	95e4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    95d0:	f44f 718b 	mov.w	r1, #278	; 0x116
    95d4:	2009      	movs	r0, #9
    95d6:	f7fb f8a1 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95da:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    95de:	831a      	strh	r2, [r3, #24]
    95e0:	750c      	strb	r4, [r1, #20]
    95e2:	e003      	b.n	95ec <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    95e4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    95e8:	835a      	strh	r2, [r3, #26]
    95ea:	754c      	strb	r4, [r1, #21]
    95ec:	2100      	movs	r1, #0
    95ee:	7081      	strb	r1, [r0, #2]
    95f0:	bd70      	pop	{r4, r5, r6, pc}

000095f2 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    95f2:	2101      	movs	r1, #1
    95f4:	7001      	strb	r1, [r0, #0]
    95f6:	4770      	bx	lr

000095f8 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    95f8:	2201      	movs	r2, #1
    95fa:	4611      	mov	r1, r2
    95fc:	f7ff bf3c 	b.w	9478 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

00009600 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    9600:	2201      	movs	r2, #1
    9602:	2100      	movs	r1, #0
    9604:	f7ff bf38 	b.w	9478 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

00009608 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    9608:	2100      	movs	r1, #0
    960a:	f7ff bee1 	b.w	93d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    960e:	2800      	cmp	r0, #0
    9610:	db09      	blt.n	9626 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    9612:	f000 021f 	and.w	r2, r0, #31
    9616:	2101      	movs	r1, #1
    9618:	4091      	lsls	r1, r2
    961a:	0940      	lsrs	r0, r0, #5
    961c:	0080      	lsls	r0, r0, #2
    961e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9622:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9626:	4770      	bx	lr
    9628:	2800      	cmp	r0, #0
    962a:	db0d      	blt.n	9648 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    962c:	f000 021f 	and.w	r2, r0, #31
    9630:	2101      	movs	r1, #1
    9632:	4091      	lsls	r1, r2
    9634:	0940      	lsrs	r0, r0, #5
    9636:	0080      	lsls	r0, r0, #2
    9638:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    963c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9640:	f3bf 8f4f 	dsb	sy
    9644:	f3bf 8f6f 	isb	sy
    9648:	4770      	bx	lr
    964a:	b510      	push	{r4, lr}
    964c:	200e      	movs	r0, #14
    964e:	f7ff ffeb 	bl	9628 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    9652:	200e      	movs	r0, #14
    9654:	f7ff ffdb 	bl	960e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    9658:	200f      	movs	r0, #15
    965a:	f7ff ffe5 	bl	9628 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    965e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9662:	200f      	movs	r0, #15
    9664:	f7ff bfd3 	b.w	960e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    9668:	2800      	cmp	r0, #0
    966a:	db09      	blt.n	9680 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    966c:	f000 021f 	and.w	r2, r0, #31
    9670:	2101      	movs	r1, #1
    9672:	4091      	lsls	r1, r2
    9674:	0940      	lsrs	r0, r0, #5
    9676:	0080      	lsls	r0, r0, #2
    9678:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    967c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9680:	4770      	bx	lr
    9682:	5840      	ldr	r0, [r0, r1]
    9684:	2800      	cmp	r0, #0
    9686:	d000      	beq.n	968a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    9688:	2001      	movs	r0, #1
    968a:	4770      	bx	lr

0000968c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    968c:	b510      	push	{r4, lr}
    968e:	4604      	mov	r4, r0
    9690:	4620      	mov	r0, r4
    9692:	f7fb fd17 	bl	50c4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    9696:	2811      	cmp	r0, #17
    9698:	d0fa      	beq.n	9690 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    969a:	bd10      	pop	{r4, pc}

0000969c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    969c:	b510      	push	{r4, lr}
    969e:	f7ff fff5 	bl	968c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    96a2:	2800      	cmp	r0, #0
    96a4:	d003      	beq.n	96ae <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    96a6:	21a0      	movs	r1, #160	; 0xa0
    96a8:	201d      	movs	r0, #29
    96aa:	f7fb f837 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96ae:	bd10      	pop	{r4, pc}

000096b0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    96b0:	f7fb bde6 	b.w	5280 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0xc>

000096b4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    96b4:	b510      	push	{r4, lr}
    96b6:	4050      	eors	r0, r2
    96b8:	780a      	ldrb	r2, [r1, #0]
    96ba:	781c      	ldrb	r4, [r3, #0]
    96bc:	4062      	eors	r2, r4
    96be:	4410      	add	r0, r2
    96c0:	784a      	ldrb	r2, [r1, #1]
    96c2:	785c      	ldrb	r4, [r3, #1]
    96c4:	4062      	eors	r2, r4
    96c6:	4410      	add	r0, r2
    96c8:	788a      	ldrb	r2, [r1, #2]
    96ca:	789c      	ldrb	r4, [r3, #2]
    96cc:	4062      	eors	r2, r4
    96ce:	4410      	add	r0, r2
    96d0:	78ca      	ldrb	r2, [r1, #3]
    96d2:	78dc      	ldrb	r4, [r3, #3]
    96d4:	4062      	eors	r2, r4
    96d6:	4410      	add	r0, r2
    96d8:	790a      	ldrb	r2, [r1, #4]
    96da:	791c      	ldrb	r4, [r3, #4]
    96dc:	7949      	ldrb	r1, [r1, #5]
    96de:	4062      	eors	r2, r4
    96e0:	4410      	add	r0, r2
    96e2:	795a      	ldrb	r2, [r3, #5]
    96e4:	4051      	eors	r1, r2
    96e6:	42c1      	cmn	r1, r0
    96e8:	d101      	bne.n	96ee <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    96ea:	2001      	movs	r0, #1
    96ec:	bd10      	pop	{r4, pc}
    96ee:	2000      	movs	r0, #0
    96f0:	bd10      	pop	{r4, pc}

000096f2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    96f2:	b510      	push	{r4, lr}
    96f4:	2900      	cmp	r1, #0
    96f6:	4604      	mov	r4, r0
    96f8:	f04f 0106 	mov.w	r1, #6
    96fc:	d002      	beq.n	9704 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    96fe:	f7fb f86d 	bl	47dc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9702:	e001      	b.n	9708 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    9704:	f7fb f878 	bl	47f8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    9708:	7960      	ldrb	r0, [r4, #5]
    970a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    970e:	7160      	strb	r0, [r4, #5]
    9710:	bd10      	pop	{r4, pc}

00009712 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    9712:	4770      	bx	lr

00009714 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    9714:	b530      	push	{r4, r5, lr}
    9716:	460c      	mov	r4, r1
    9718:	4605      	mov	r5, r0
    971a:	b08d      	sub	sp, #52	; 0x34
    971c:	f04f 0103 	mov.w	r1, #3
    9720:	f104 0003 	add.w	r0, r4, #3
    9724:	b112      	cbz	r2, 972c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    9726:	f7fb f859 	bl	47dc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    972a:	e001      	b.n	9730 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    972c:	f7fb f864 	bl	47f8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    9730:	7960      	ldrb	r0, [r4, #5]
    9732:	220d      	movs	r2, #13
    9734:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    9738:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    973c:	7160      	strb	r0, [r4, #5]
    973e:	2100      	movs	r1, #0
    9740:	a804      	add	r0, sp, #16
    9742:	f7ff f8d8 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9746:	78e0      	ldrb	r0, [r4, #3]
    9748:	f88d 001f 	strb.w	r0, [sp, #31]
    974c:	7920      	ldrb	r0, [r4, #4]
    974e:	f88d 001e 	strb.w	r0, [sp, #30]
    9752:	7960      	ldrb	r0, [r4, #5]
    9754:	f88d 001d 	strb.w	r0, [sp, #29]
    9758:	2210      	movs	r2, #16
    975a:	4629      	mov	r1, r5
    975c:	4668      	mov	r0, sp
    975e:	f7ff f850 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9762:	4668      	mov	r0, sp
    9764:	f7ff ff9a 	bl	969c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    9768:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    976c:	7020      	strb	r0, [r4, #0]
    976e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9772:	7060      	strb	r0, [r4, #1]
    9774:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9778:	70a0      	strb	r0, [r4, #2]
    977a:	b00d      	add	sp, #52	; 0x34
    977c:	bd30      	pop	{r4, r5, pc}

0000977e <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    977e:	2101      	movs	r1, #1
    9780:	f7fb bedc 	b.w	553c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

00009784 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    9784:	b510      	push	{r4, lr}
    9786:	f001 fb23 	bl	add0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    978a:	b118      	cbz	r0, 9794 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    978c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9790:	f7fd bd46 	b.w	7220 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    9794:	20ff      	movs	r0, #255	; 0xff
    9796:	bd10      	pop	{r4, pc}

00009798 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    9798:	b510      	push	{r4, lr}
    979a:	f7fb ff17 	bl	55cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    979e:	2810      	cmp	r0, #16
    97a0:	d003      	beq.n	97aa <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    97a2:	f7fb fee3 	bl	556c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    97a6:	2810      	cmp	r0, #16
    97a8:	d100      	bne.n	97ac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    97aa:	2008      	movs	r0, #8
    97ac:	bd10      	pop	{r4, pc}

000097ae <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    97ae:	b510      	push	{r4, lr}
    97b0:	f7fb ff0c 	bl	55cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    97b4:	2810      	cmp	r0, #16
    97b6:	d003      	beq.n	97c0 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    97b8:	f7fb ff66 	bl	5688 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    97bc:	2001      	movs	r0, #1
    97be:	bd10      	pop	{r4, pc}
    97c0:	2000      	movs	r0, #0
    97c2:	bd10      	pop	{r4, pc}

000097c4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    97c4:	b570      	push	{r4, r5, r6, lr}
    97c6:	460e      	mov	r6, r1
    97c8:	b08c      	sub	sp, #48	; 0x30
    97ca:	4614      	mov	r4, r2
    97cc:	4601      	mov	r1, r0
    97ce:	461d      	mov	r5, r3
    97d0:	2210      	movs	r2, #16
    97d2:	4668      	mov	r0, sp
    97d4:	f000 f88b 	bl	98ee <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    97d8:	2210      	movs	r2, #16
    97da:	4631      	mov	r1, r6
    97dc:	a804      	add	r0, sp, #16
    97de:	f000 f886 	bl	98ee <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    97e2:	4668      	mov	r0, sp
    97e4:	f7ff ff5a 	bl	969c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    97e8:	a908      	add	r1, sp, #32
    97ea:	f04f 0210 	mov.w	r2, #16
    97ee:	4628      	mov	r0, r5
    97f0:	b11c      	cbz	r4, 97fa <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    97f2:	f000 f87c 	bl	98ee <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    97f6:	b00c      	add	sp, #48	; 0x30
    97f8:	bd70      	pop	{r4, r5, r6, pc}
    97fa:	f7ff f802 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    97fe:	e7fa      	b.n	97f6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

00009800 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    9800:	b510      	push	{r4, lr}
    9802:	460c      	mov	r4, r1
    9804:	2100      	movs	r1, #0
    9806:	f7ff fdac 	bl	9362 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    980a:	6060      	str	r0, [r4, #4]
    980c:	b118      	cbz	r0, 9816 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    980e:	2001      	movs	r0, #1
    9810:	7020      	strb	r0, [r4, #0]
    9812:	2000      	movs	r0, #0
    9814:	bd10      	pop	{r4, pc}
    9816:	2002      	movs	r0, #2
    9818:	bd10      	pop	{r4, pc}

0000981a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    981a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    981e:	fbb0 f0f1 	udiv	r0, r0, r1
    9822:	b280      	uxth	r0, r0
    9824:	4770      	bx	lr

00009826 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    9826:	f011 0f0c 	tst.w	r1, #12
    982a:	d018      	beq.n	985e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    982c:	074a      	lsls	r2, r1, #29
    982e:	f44f 7116 	mov.w	r1, #600	; 0x258
    9832:	2a00      	cmp	r2, #0
    9834:	da02      	bge.n	983c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    9836:	f04f 0210 	mov.w	r2, #16
    983a:	e001      	b.n	9840 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    983c:	f04f 0240 	mov.w	r2, #64	; 0x40
    9840:	da01      	bge.n	9846 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    9842:	f04f 0196 	mov.w	r1, #150	; 0x96
    9846:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    984a:	eba0 0301 	sub.w	r3, r0, r1
    984e:	4288      	cmp	r0, r1
    9850:	d903      	bls.n	985a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    9852:	fb93 f0f2 	sdiv	r0, r3, r2
    9856:	b280      	uxth	r0, r0
    9858:	4770      	bx	lr
    985a:	2000      	movs	r0, #0
    985c:	4770      	bx	lr
    985e:	2902      	cmp	r1, #2
    9860:	d008      	beq.n	9874 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    9862:	2870      	cmp	r0, #112	; 0x70
    9864:	d9f9      	bls.n	985a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    9866:	3870      	subs	r0, #112	; 0x70
    9868:	17c1      	asrs	r1, r0, #31
    986a:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    986e:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    9872:	4770      	bx	lr
    9874:	283c      	cmp	r0, #60	; 0x3c
    9876:	d9f0      	bls.n	985a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    9878:	383c      	subs	r0, #60	; 0x3c
    987a:	17c1      	asrs	r1, r0, #31
    987c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    9880:	f3c0 008f 	ubfx	r0, r0, #2, #16
    9884:	4770      	bx	lr

00009886 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    9886:	6809      	ldr	r1, [r1, #0]
    9888:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    988c:	4770      	bx	lr

0000988e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    988e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9892:	4607      	mov	r7, r0
    9894:	460e      	mov	r6, r1
    9896:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    989a:	f7f8 fe1d 	bl	24d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    989e:	b198      	cbz	r0, 98c8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    98a0:	b31e      	cbz	r6, 98ea <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    98a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    98a6:	1b40      	subs	r0, r0, r5
    98a8:	2300      	movs	r3, #0
    98aa:	eb61 0104 	sbc.w	r1, r1, r4
    98ae:	461a      	mov	r2, r3
    98b0:	1a1b      	subs	r3, r3, r0
    98b2:	418a      	sbcs	r2, r1
    98b4:	da19      	bge.n	98ea <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    98b6:	1c42      	adds	r2, r0, #1
    98b8:	f171 0100 	sbcs.w	r1, r1, #0
    98bc:	db07      	blt.n	98ce <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    98be:	f240 2129 	movw	r1, #553	; 0x229
    98c2:	2029      	movs	r0, #41	; 0x29
    98c4:	f7fa ff2a 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98c8:	f240 211f 	movw	r1, #543	; 0x21f
    98cc:	e7f9      	b.n	98c2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    98ce:	4430      	add	r0, r6
    98d0:	1e40      	subs	r0, r0, #1
    98d2:	fbb0 f1f6 	udiv	r1, r0, r6
    98d6:	fb01 f006 	mul.w	r0, r1, r6
    98da:	1828      	adds	r0, r5, r0
    98dc:	f144 0400 	adc.w	r4, r4, #0
    98e0:	e9c7 0404 	strd	r0, r4, [r7, #16]
    98e4:	4608      	mov	r0, r1
    98e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98ea:	2000      	movs	r0, #0
    98ec:	e7fb      	b.n	98e6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

000098ee <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    98ee:	b530      	push	{r4, r5, lr}
    98f0:	4613      	mov	r3, r2
    98f2:	e006      	b.n	9902 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    98f4:	18cc      	adds	r4, r1, r3
    98f6:	1ad5      	subs	r5, r2, r3
    98f8:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    98fc:	1e5b      	subs	r3, r3, #1
    98fe:	5544      	strb	r4, [r0, r5]
    9900:	b2db      	uxtb	r3, r3
    9902:	2b00      	cmp	r3, #0
    9904:	d1f6      	bne.n	98f4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    9906:	bd30      	pop	{r4, r5, pc}

00009908 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    9908:	b510      	push	{r4, lr}
    990a:	2300      	movs	r3, #0
    990c:	461a      	mov	r2, r3
    990e:	e003      	b.n	9918 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    9910:	5c84      	ldrb	r4, [r0, r2]
    9912:	4323      	orrs	r3, r4
    9914:	1c52      	adds	r2, r2, #1
    9916:	b2d2      	uxtb	r2, r2
    9918:	428a      	cmp	r2, r1
    991a:	d3f9      	bcc.n	9910 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    991c:	b10b      	cbz	r3, 9922 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    991e:	2000      	movs	r0, #0
    9920:	bd10      	pop	{r4, pc}
    9922:	2001      	movs	r0, #1
    9924:	bd10      	pop	{r4, pc}

00009926 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    9926:	b570      	push	{r4, r5, r6, lr}
    9928:	4604      	mov	r4, r0
    992a:	1c40      	adds	r0, r0, #1
    992c:	4288      	cmp	r0, r1
    992e:	d004      	beq.n	993a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    9930:	6808      	ldr	r0, [r1, #0]
    9932:	f8c4 0001 	str.w	r0, [r4, #1]
    9936:	7908      	ldrb	r0, [r1, #4]
    9938:	7160      	strb	r0, [r4, #5]
    993a:	7960      	ldrb	r0, [r4, #5]
    993c:	f000 001f 	and.w	r0, r0, #31
    9940:	7160      	strb	r0, [r4, #5]
    9942:	2000      	movs	r0, #0
    9944:	72e0      	strb	r0, [r4, #11]
    9946:	4605      	mov	r5, r0
    9948:	1966      	adds	r6, r4, r5
    994a:	7870      	ldrb	r0, [r6, #1]
    994c:	f000 f8ca 	bl	9ae4 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    9950:	71b0      	strb	r0, [r6, #6]
    9952:	7ae1      	ldrb	r1, [r4, #11]
    9954:	1c6d      	adds	r5, r5, #1
    9956:	4408      	add	r0, r1
    9958:	b2ed      	uxtb	r5, r5
    995a:	72e0      	strb	r0, [r4, #11]
    995c:	2d05      	cmp	r5, #5
    995e:	d3f3      	bcc.n	9948 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    9960:	bd70      	pop	{r4, r5, r6, pc}

00009962 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    9962:	7802      	ldrb	r2, [r0, #0]
    9964:	f002 020f 	and.w	r2, r2, #15
    9968:	2a03      	cmp	r2, #3
    996a:	d003      	beq.n	9974 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    996c:	2a05      	cmp	r2, #5
    996e:	d104      	bne.n	997a <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    9970:	f000 b85f 	b.w	9a32 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x22>
    9974:	7840      	ldrb	r0, [r0, #1]
    9976:	280c      	cmp	r0, #12
    9978:	d001      	beq.n	997e <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    997a:	2000      	movs	r0, #0
    997c:	4770      	bx	lr
    997e:	2001      	movs	r0, #1
    9980:	4770      	bx	lr

00009982 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    9982:	b570      	push	{r4, r5, r6, lr}
    9984:	4614      	mov	r4, r2
    9986:	4605      	mov	r5, r0
    9988:	2a1f      	cmp	r2, #31
    998a:	d903      	bls.n	9994 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    998c:	21f1      	movs	r1, #241	; 0xf1
    998e:	202a      	movs	r0, #42	; 0x2a
    9990:	f7fa fec4 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9994:	f105 0009 	add.w	r0, r5, #9
    9998:	f7fe ff33 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    999c:	1da4      	adds	r4, r4, #6
    999e:	706c      	strb	r4, [r5, #1]
    99a0:	bd70      	pop	{r4, r5, r6, pc}

000099a2 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    99a2:	b510      	push	{r4, lr}
    99a4:	7802      	ldrb	r2, [r0, #0]
    99a6:	f001 030f 	and.w	r3, r1, #15
    99aa:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    99ae:	431a      	orrs	r2, r3
    99b0:	7002      	strb	r2, [r0, #0]
    99b2:	2907      	cmp	r1, #7
    99b4:	d20c      	bcs.n	99d0 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    99b6:	e8df f001 	tbb	[pc, r1]
    99ba:	0604      	.short	0x0604
    99bc:	08040604 	.word	0x08040604
    99c0:	0004      	.short	0x0004
    99c2:	2106      	movs	r1, #6
    99c4:	e002      	b.n	99cc <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    99c6:	210c      	movs	r1, #12
    99c8:	e000      	b.n	99cc <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    99ca:	2122      	movs	r1, #34	; 0x22
    99cc:	7041      	strb	r1, [r0, #1]
    99ce:	bd10      	pop	{r4, pc}
    99d0:	21ab      	movs	r1, #171	; 0xab
    99d2:	202a      	movs	r0, #42	; 0x2a
    99d4:	f7fa fea2 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000099d8 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    99d8:	680a      	ldr	r2, [r1, #0]
    99da:	f840 2f09 	str.w	r2, [r0, #9]!
    99de:	8889      	ldrh	r1, [r1, #4]
    99e0:	8081      	strh	r1, [r0, #4]
    99e2:	4770      	bx	lr

000099e4 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    99e4:	7802      	ldrb	r2, [r0, #0]
    99e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    99ea:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    99ee:	7002      	strb	r2, [r0, #0]
    99f0:	4770      	bx	lr

000099f2 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    99f2:	680a      	ldr	r2, [r1, #0]
    99f4:	f840 2f03 	str.w	r2, [r0, #3]!
    99f8:	8889      	ldrh	r1, [r1, #4]
    99fa:	8081      	strh	r1, [r0, #4]
    99fc:	4770      	bx	lr

000099fe <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    99fe:	7802      	ldrb	r2, [r0, #0]
    9a00:	2340      	movs	r3, #64	; 0x40
    9a02:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    9a06:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    9a0a:	430a      	orrs	r2, r1
    9a0c:	7002      	strb	r2, [r0, #0]
    9a0e:	4770      	bx	lr

00009a10 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    9a10:	b570      	push	{r4, r5, r6, lr}
    9a12:	4614      	mov	r4, r2
    9a14:	4605      	mov	r5, r0
    9a16:	2a1f      	cmp	r2, #31
    9a18:	d904      	bls.n	9a24 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    9a1a:	f240 1113 	movw	r1, #275	; 0x113
    9a1e:	202a      	movs	r0, #42	; 0x2a
    9a20:	f7fa fe7c 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a24:	f105 0009 	add.w	r0, r5, #9
    9a28:	f7fe feeb 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9a2c:	1da4      	adds	r4, r4, #6
    9a2e:	706c      	strb	r4, [r5, #1]
    9a30:	bd70      	pop	{r4, r5, r6, pc}
    9a32:	b570      	push	{r4, r5, r6, lr}
    9a34:	f8d0 201f 	ldr.w	r2, [r0, #31]
    9a38:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    9a3c:	f012 0fff 	tst.w	r2, #255	; 0xff
    9a40:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    9a44:	d108      	bne.n	9a58 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    9a46:	f3c2 2407 	ubfx	r4, r2, #8, #8
    9a4a:	b92c      	cbnz	r4, 9a58 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    9a4c:	f3c2 4407 	ubfx	r4, r2, #16, #8
    9a50:	b914      	cbnz	r4, 9a58 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    9a52:	0e12      	lsrs	r2, r2, #24
    9a54:	d100      	bne.n	9a58 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    9a56:	b34b      	cbz	r3, 9aac <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9a58:	7846      	ldrb	r6, [r0, #1]
    9a5a:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    9a5e:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    9a62:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    9a66:	7d83      	ldrb	r3, [r0, #22]
    9a68:	2e22      	cmp	r6, #34	; 0x22
    9a6a:	d11f      	bne.n	9aac <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9a6c:	b131      	cbz	r1, 9a7c <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x6c>
    9a6e:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    9a72:	d903      	bls.n	9a7c <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x6c>
    9a74:	f640 5107 	movw	r1, #3335	; 0xd07
    9a78:	428a      	cmp	r2, r1
    9a7a:	d90b      	bls.n	9a94 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x84>
    9a7c:	1f91      	subs	r1, r2, #6
    9a7e:	f640 467a 	movw	r6, #3194	; 0xc7a
    9a82:	42b1      	cmp	r1, r6
    9a84:	d812      	bhi.n	9aac <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9a86:	b18b      	cbz	r3, 9aac <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9a88:	2b08      	cmp	r3, #8
    9a8a:	d80f      	bhi.n	9aac <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9a8c:	4293      	cmp	r3, r2
    9a8e:	d20d      	bcs.n	9aac <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9a90:	4295      	cmp	r5, r2
    9a92:	d80b      	bhi.n	9aac <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9a94:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    9a98:	d208      	bcs.n	9aac <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9a9a:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    9a9e:	f640 4176 	movw	r1, #3190	; 0xc76
    9aa2:	380a      	subs	r0, #10
    9aa4:	4288      	cmp	r0, r1
    9aa6:	d801      	bhi.n	9aac <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    9aa8:	2001      	movs	r0, #1
    9aaa:	bd70      	pop	{r4, r5, r6, pc}
    9aac:	2000      	movs	r0, #0
    9aae:	bd70      	pop	{r4, r5, r6, pc}

00009ab0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    9ab0:	f7fc b87e 	b.w	5bb0 <__kernel_ram_size+0xd8>

00009ab4 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    9ab4:	6800      	ldr	r0, [r0, #0]
    9ab6:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    9aba:	4290      	cmp	r0, r2
    9abc:	d903      	bls.n	9ac6 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    9abe:	1a40      	subs	r0, r0, r1
    9ac0:	389c      	subs	r0, #156	; 0x9c
    9ac2:	0840      	lsrs	r0, r0, #1
    9ac4:	4770      	bx	lr
    9ac6:	2000      	movs	r0, #0
    9ac8:	4770      	bx	lr
    9aca:	b510      	push	{r4, lr}
    9acc:	4604      	mov	r4, r0
    9ace:	2108      	movs	r1, #8
    9ad0:	4620      	mov	r0, r4
    9ad2:	f7fa fe91 	bl	47f8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    9ad6:	6820      	ldr	r0, [r4, #0]
    9ad8:	2800      	cmp	r0, #0
    9ada:	d102      	bne.n	9ae2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x2e>
    9adc:	6860      	ldr	r0, [r4, #4]
    9ade:	2800      	cmp	r0, #0
    9ae0:	d0f5      	beq.n	9ace <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x1a>
    9ae2:	bd10      	pop	{r4, pc}

00009ae4 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    9ae4:	f000 0155 	and.w	r1, r0, #85	; 0x55
    9ae8:	2255      	movs	r2, #85	; 0x55
    9aea:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    9aee:	4408      	add	r0, r1
    9af0:	f000 0133 	and.w	r1, r0, #51	; 0x33
    9af4:	2233      	movs	r2, #51	; 0x33
    9af6:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    9afa:	4408      	add	r0, r1
    9afc:	f000 010f 	and.w	r1, r0, #15
    9b00:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    9b04:	4770      	bx	lr
    9b06:	2801      	cmp	r0, #1
    9b08:	d102      	bne.n	9b10 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x2c>
    9b0a:	7948      	ldrb	r0, [r1, #5]
    9b0c:	0980      	lsrs	r0, r0, #6
    9b0e:	d001      	beq.n	9b14 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x30>
    9b10:	2000      	movs	r0, #0
    9b12:	4770      	bx	lr
    9b14:	2001      	movs	r0, #1
    9b16:	4770      	bx	lr
    9b18:	2801      	cmp	r0, #1
    9b1a:	d106      	bne.n	9b2a <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x46>
    9b1c:	7948      	ldrb	r0, [r1, #5]
    9b1e:	2101      	movs	r1, #1
    9b20:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    9b24:	d101      	bne.n	9b2a <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x46>
    9b26:	2001      	movs	r0, #1
    9b28:	4770      	bx	lr
    9b2a:	2000      	movs	r0, #0
    9b2c:	4770      	bx	lr
    9b2e:	2802      	cmp	r0, #2
    9b30:	d003      	beq.n	9b3a <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x56>
    9b32:	2803      	cmp	r0, #3
    9b34:	d001      	beq.n	9b3a <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x56>
    9b36:	2000      	movs	r0, #0
    9b38:	4770      	bx	lr
    9b3a:	2001      	movs	r0, #1
    9b3c:	4770      	bx	lr

00009b3e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    9b3e:	b510      	push	{r4, lr}
    9b40:	4604      	mov	r4, r0
    9b42:	7c00      	ldrb	r0, [r0, #16]
    9b44:	f7ff fff3 	bl	9b2e <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x4a>
    9b48:	b148      	cbz	r0, 9b5e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    9b4a:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    9b4e:	f104 0158 	add.w	r1, r4, #88	; 0x58
    9b52:	f7ff fe21 	bl	9798 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    9b56:	2808      	cmp	r0, #8
    9b58:	d001      	beq.n	9b5e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    9b5a:	2001      	movs	r0, #1
    9b5c:	bd10      	pop	{r4, pc}
    9b5e:	7c20      	ldrb	r0, [r4, #16]
    9b60:	b118      	cbz	r0, 9b6a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    9b62:	2802      	cmp	r0, #2
    9b64:	d001      	beq.n	9b6a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    9b66:	7de0      	ldrb	r0, [r4, #23]
    9b68:	bd10      	pop	{r4, pc}
    9b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b6e:	2000      	movs	r0, #0
    9b70:	f7fb bbc0 	b.w	52f4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

00009b74 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    9b74:	b508      	push	{r3, lr}
    9b76:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    9b7a:	f88d 1000 	strb.w	r1, [sp]
    9b7e:	9900      	ldr	r1, [sp, #0]
    9b80:	9100      	str	r1, [sp, #0]
    9b82:	f89d 1000 	ldrb.w	r1, [sp]
    9b86:	b109      	cbz	r1, 9b8c <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    9b88:	2001      	movs	r0, #1
    9b8a:	bd08      	pop	{r3, pc}
    9b8c:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    9b90:	f88d 0000 	strb.w	r0, [sp]
    9b94:	9800      	ldr	r0, [sp, #0]
    9b96:	9000      	str	r0, [sp, #0]
    9b98:	f89d 0000 	ldrb.w	r0, [sp]
    9b9c:	2000      	movs	r0, #0
    9b9e:	bd08      	pop	{r3, pc}

00009ba0 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    9ba0:	20ff      	movs	r0, #255	; 0xff
    9ba2:	7008      	strb	r0, [r1, #0]
    9ba4:	6b48      	ldr	r0, [r1, #52]	; 0x34
    9ba6:	f7ff bd24 	b.w	95f2 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

00009baa <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    9baa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9bac:	460d      	mov	r5, r1
    9bae:	4604      	mov	r4, r0
    9bb0:	f44f 728c 	mov.w	r2, #280	; 0x118
    9bb4:	2100      	movs	r1, #0
    9bb6:	f7fe fe9e 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9bba:	20ff      	movs	r0, #255	; 0xff
    9bbc:	7020      	strb	r0, [r4, #0]
    9bbe:	207f      	movs	r0, #127	; 0x7f
    9bc0:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    9bc4:	2013      	movs	r0, #19
    9bc6:	8060      	strh	r0, [r4, #2]
    9bc8:	f242 7010 	movw	r0, #10000	; 0x2710
    9bcc:	8460      	strh	r0, [r4, #34]	; 0x22
    9bce:	f7fb f9ff 	bl	4fd0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    9bd2:	4601      	mov	r1, r0
    9bd4:	6360      	str	r0, [r4, #52]	; 0x34
    9bd6:	2200      	movs	r2, #0
    9bd8:	4668      	mov	r0, sp
    9bda:	f7ff fc74 	bl	94c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    9bde:	2200      	movs	r2, #0
    9be0:	2101      	movs	r1, #1
    9be2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9be4:	f7ff fce5 	bl	95b2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    9be8:	2204      	movs	r2, #4
    9bea:	4668      	mov	r0, sp
    9bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9bee:	f7ff fc6a 	bl	94c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    9bf2:	2200      	movs	r2, #0
    9bf4:	4611      	mov	r1, r2
    9bf6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9bf8:	f7ff fcdb 	bl	95b2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    9bfc:	73a5      	strb	r5, [r4, #14]
    9bfe:	f104 0028 	add.w	r0, r4, #40	; 0x28
    9c02:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    9c06:	f000 b9b9 	b.w	9f7c <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

00009c0a <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    9c0a:	7880      	ldrb	r0, [r0, #2]
    9c0c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    9c10:	b108      	cbz	r0, 9c16 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    9c12:	2000      	movs	r0, #0
    9c14:	4770      	bx	lr
    9c16:	201f      	movs	r0, #31
    9c18:	4770      	bx	lr

00009c1a <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    9c1a:	f7fc bd11 	b.w	6640 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>

00009c1e <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
    9c1e:	b510      	push	{r4, lr}
    9c20:	2300      	movs	r3, #0
    9c22:	2a05      	cmp	r2, #5
    9c24:	d013      	beq.n	9c4e <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x30>
    9c26:	2a10      	cmp	r2, #16
    9c28:	d018      	beq.n	9c5c <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3e>
    9c2a:	2a14      	cmp	r2, #20
    9c2c:	d038      	beq.n	9ca0 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x82>
    9c2e:	2a1d      	cmp	r2, #29
    9c30:	d002      	beq.n	9c38 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1a>
    9c32:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    9c36:	e056      	b.n	9ce6 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xc8>
    9c38:	704b      	strb	r3, [r1, #1]
    9c3a:	2219      	movs	r2, #25
    9c3c:	700a      	strb	r2, [r1, #0]
    9c3e:	f850 2fbd 	ldr.w	r2, [r0, #189]!
    9c42:	604a      	str	r2, [r1, #4]
    9c44:	6842      	ldr	r2, [r0, #4]
    9c46:	608a      	str	r2, [r1, #8]
    9c48:	7a00      	ldrb	r0, [r0, #8]
    9c4a:	7308      	strb	r0, [r1, #12]
    9c4c:	bd10      	pop	{r4, pc}
    9c4e:	704b      	strb	r3, [r1, #1]
    9c50:	2205      	movs	r2, #5
    9c52:	700a      	strb	r2, [r1, #0]
    9c54:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
    9c58:	6048      	str	r0, [r1, #4]
    9c5a:	bd10      	pop	{r4, pc}
    9c5c:	460c      	mov	r4, r1
    9c5e:	704b      	strb	r3, [r1, #1]
    9c60:	2111      	movs	r1, #17
    9c62:	7021      	strb	r1, [r4, #0]
    9c64:	f100 0176 	add.w	r1, r0, #118	; 0x76
    9c68:	2220      	movs	r2, #32
    9c6a:	1d20      	adds	r0, r4, #4
    9c6c:	f7fe fdc9 	bl	8802 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9c70:	2001      	movs	r0, #1
    9c72:	7220      	strb	r0, [r4, #8]
    9c74:	7920      	ldrb	r0, [r4, #4]
    9c76:	2800      	cmp	r0, #0
    9c78:	d0ef      	beq.n	9c5a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    9c7a:	88e4      	ldrh	r4, [r4, #6]
    9c7c:	2100      	movs	r1, #0
    9c7e:	4620      	mov	r0, r4
    9c80:	f7ff fb6f 	bl	9362 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9c84:	2800      	cmp	r0, #0
    9c86:	d0e8      	beq.n	9c5a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    9c88:	8800      	ldrh	r0, [r0, #0]
    9c8a:	f7ff fd11 	bl	96b0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    9c8e:	2100      	movs	r1, #0
    9c90:	4620      	mov	r0, r4
    9c92:	f7fa ff7d 	bl	4b90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    9c96:	2800      	cmp	r0, #0
    9c98:	d0df      	beq.n	9c5a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    9c9a:	f240 216a 	movw	r1, #618	; 0x26a
    9c9e:	e022      	b.n	9ce6 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xc8>
    9ca0:	704b      	strb	r3, [r1, #1]
    9ca2:	2214      	movs	r2, #20
    9ca4:	700a      	strb	r2, [r1, #0]
    9ca6:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    9caa:	604a      	str	r2, [r1, #4]
    9cac:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    9cb0:	810a      	strh	r2, [r1, #8]
    9cb2:	790a      	ldrb	r2, [r1, #4]
    9cb4:	2a00      	cmp	r2, #0
    9cb6:	d0d0      	beq.n	9c5a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    9cb8:	7880      	ldrb	r0, [r0, #2]
    9cba:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    9cbe:	2800      	cmp	r0, #0
    9cc0:	d1cb      	bne.n	9c5a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    9cc2:	88cc      	ldrh	r4, [r1, #6]
    9cc4:	2100      	movs	r1, #0
    9cc6:	4620      	mov	r0, r4
    9cc8:	f7ff fb4b 	bl	9362 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9ccc:	2800      	cmp	r0, #0
    9cce:	d0c4      	beq.n	9c5a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    9cd0:	8800      	ldrh	r0, [r0, #0]
    9cd2:	f7ff fced 	bl	96b0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    9cd6:	2100      	movs	r1, #0
    9cd8:	4620      	mov	r0, r4
    9cda:	f7fa ff59 	bl	4b90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    9cde:	2800      	cmp	r0, #0
    9ce0:	d0bb      	beq.n	9c5a <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    9ce2:	f240 219a 	movw	r1, #666	; 0x29a
    9ce6:	202d      	movs	r0, #45	; 0x2d
    9ce8:	f7fa fd18 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00009cec <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    9cec:	6880      	ldr	r0, [r0, #8]
    9cee:	4770      	bx	lr

00009cf0 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    9cf0:	2001      	movs	r0, #1
    9cf2:	4770      	bx	lr

00009cf4 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    9cf4:	b510      	push	{r4, lr}
    9cf6:	4604      	mov	r4, r0
    9cf8:	3028      	adds	r0, #40	; 0x28
    9cfa:	f000 f8ff 	bl	9efc <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    9cfe:	8861      	ldrh	r1, [r4, #2]
    9d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9d04:	2228      	movs	r2, #40	; 0x28
    9d06:	f7fc bdcb 	b.w	68a0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

00009d0a <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    9d0a:	2200      	movs	r2, #0
    9d0c:	8602      	strh	r2, [r0, #48]	; 0x30
    9d0e:	8843      	ldrh	r3, [r0, #2]
    9d10:	2b1d      	cmp	r3, #29
    9d12:	d001      	beq.n	9d18 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    9d14:	7341      	strb	r1, [r0, #13]
    9d16:	4770      	bx	lr
    9d18:	7342      	strb	r2, [r0, #13]
    9d1a:	4770      	bx	lr

00009d1c <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    9d1c:	b510      	push	{r4, lr}
    9d1e:	2400      	movs	r4, #0
    9d20:	6b40      	ldr	r0, [r0, #52]	; 0x34
    9d22:	f7ff fc34 	bl	958e <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    9d26:	b100      	cbz	r0, 9d2a <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    9d28:	2001      	movs	r0, #1
    9d2a:	4384      	bics	r4, r0
    9d2c:	f084 0001 	eor.w	r0, r4, #1
    9d30:	bd10      	pop	{r4, pc}

00009d32 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    9d32:	2000      	movs	r0, #0
    9d34:	4770      	bx	lr

00009d36 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    9d36:	7880      	ldrb	r0, [r0, #2]
    9d38:	f000 0001 	and.w	r0, r0, #1
    9d3c:	4770      	bx	lr

00009d3e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    9d3e:	7880      	ldrb	r0, [r0, #2]
    9d40:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    9d44:	4770      	bx	lr

00009d46 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    9d46:	2001      	movs	r0, #1
    9d48:	4770      	bx	lr

00009d4a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    9d4a:	7880      	ldrb	r0, [r0, #2]
    9d4c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    9d50:	4770      	bx	lr

00009d52 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    9d52:	f990 000e 	ldrsb.w	r0, [r0, #14]
    9d56:	4770      	bx	lr

00009d58 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    9d58:	7800      	ldrb	r0, [r0, #0]
    9d5a:	28ff      	cmp	r0, #255	; 0xff
    9d5c:	d001      	beq.n	9d62 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    9d5e:	2001      	movs	r0, #1
    9d60:	4770      	bx	lr
    9d62:	2000      	movs	r0, #0
    9d64:	4770      	bx	lr

00009d66 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    9d66:	f800 1f20 	strb.w	r1, [r0, #32]!
    9d6a:	7042      	strb	r2, [r0, #1]
    9d6c:	4770      	bx	lr

00009d6e <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    9d6e:	680a      	ldr	r2, [r1, #0]
    9d70:	f840 2f11 	str.w	r2, [r0, #17]!
    9d74:	8889      	ldrh	r1, [r1, #4]
    9d76:	8081      	strh	r1, [r0, #4]
    9d78:	2101      	movs	r1, #1
    9d7a:	7181      	strb	r1, [r0, #6]
    9d7c:	4770      	bx	lr

00009d7e <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    9d7e:	7b00      	ldrb	r0, [r0, #12]
    9d80:	4770      	bx	lr

00009d82 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    9d82:	2001      	movs	r0, #1
    9d84:	4770      	bx	lr

00009d86 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    9d86:	61c1      	str	r1, [r0, #28]
    9d88:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    9d8c:	724a      	strb	r2, [r1, #9]
    9d8e:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    9d92:	f8c1 200a 	str.w	r2, [r1, #10]
    9d96:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    9d9a:	81c8      	strh	r0, [r1, #14]
    9d9c:	4770      	bx	lr

00009d9e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    9d9e:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    9da2:	4770      	bx	lr

00009da4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    9da4:	b510      	push	{r4, lr}
    9da6:	4604      	mov	r4, r0
    9da8:	7880      	ldrb	r0, [r0, #2]
    9daa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    9dae:	b158      	cbz	r0, 9dc8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    9db0:	233c      	movs	r3, #60	; 0x3c
    9db2:	22ff      	movs	r2, #255	; 0xff
    9db4:	4620      	mov	r0, r4
    9db6:	69e1      	ldr	r1, [r4, #28]
    9db8:	f7fc fc68 	bl	668c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    9dbc:	2210      	movs	r2, #16
    9dbe:	4621      	mov	r1, r4
    9dc0:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    9dc4:	f7fb fd1c 	bl	5800 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9dc8:	2001      	movs	r0, #1
    9dca:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    9dce:	bd10      	pop	{r4, pc}

00009dd0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    9dd0:	7bc0      	ldrb	r0, [r0, #15]
    9dd2:	2800      	cmp	r0, #0
    9dd4:	d000      	beq.n	9dd8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    9dd6:	2001      	movs	r0, #1
    9dd8:	4770      	bx	lr
    9dda:	7802      	ldrb	r2, [r0, #0]
    9ddc:	2320      	movs	r3, #32
    9dde:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    9de2:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    9de6:	430a      	orrs	r2, r1
    9de8:	7002      	strb	r2, [r0, #0]
    9dea:	4770      	bx	lr
    9dec:	b510      	push	{r4, lr}
    9dee:	f7ff fcd3 	bl	9798 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    9df2:	4604      	mov	r4, r0
    9df4:	f7fb fb16 	bl	5424 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    9df8:	b138      	cbz	r0, 9e0a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    9dfa:	4620      	mov	r0, r4
    9dfc:	f7fb faba 	bl	5374 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    9e00:	b118      	cbz	r0, 9e0a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    9e02:	2110      	movs	r1, #16
    9e04:	f7ff fd80 	bl	9908 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    9e08:	b108      	cbz	r0, 9e0e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3e>
    9e0a:	2000      	movs	r0, #0
    9e0c:	bd10      	pop	{r4, pc}
    9e0e:	2001      	movs	r0, #1
    9e10:	bd10      	pop	{r4, pc}
    9e12:	2101      	movs	r1, #1
    9e14:	f7fc b89c 	b.w	5f50 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    9e18:	2101      	movs	r1, #1
    9e1a:	f7fc b899 	b.w	5f50 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>
    9e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e22:	4604      	mov	r4, r0
    9e24:	460f      	mov	r7, r1
    9e26:	7e40      	ldrb	r0, [r0, #25]
    9e28:	f7fb fa8a 	bl	5340 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    9e2c:	4606      	mov	r6, r0
    9e2e:	7e20      	ldrb	r0, [r4, #24]
    9e30:	f104 0551 	add.w	r5, r4, #81	; 0x51
    9e34:	b120      	cbz	r0, 9e40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x70>
    9e36:	b11e      	cbz	r6, 9e40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x70>
    9e38:	7e60      	ldrb	r0, [r4, #25]
    9e3a:	f7fb fa75 	bl	5328 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    9e3e:	b1a0      	cbz	r0, 9e6a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x9a>
    9e40:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    9e44:	2800      	cmp	r0, #0
    9e46:	d024      	beq.n	9e92 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    9e48:	7ea0      	ldrb	r0, [r4, #26]
    9e4a:	2800      	cmp	r0, #0
    9e4c:	d021      	beq.n	9e92 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    9e4e:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    9e52:	4629      	mov	r1, r5
    9e54:	f7ff fe60 	bl	9b18 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ+0x34>
    9e58:	b1a8      	cbz	r0, 9e86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb6>
    9e5a:	f7fb fa61 	bl	5320 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    9e5e:	463a      	mov	r2, r7
    9e60:	4629      	mov	r1, r5
    9e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9e66:	f7ff bc55 	b.w	9714 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    9e6a:	2001      	movs	r0, #1
    9e6c:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    9e70:	463a      	mov	r2, r7
    9e72:	4629      	mov	r1, r5
    9e74:	4630      	mov	r0, r6
    9e76:	f7ff fc4d 	bl	9714 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    9e7a:	7e61      	ldrb	r1, [r4, #25]
    9e7c:	4628      	mov	r0, r5
    9e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9e82:	f7fb ba69 	b.w	5358 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    9e86:	4639      	mov	r1, r7
    9e88:	4628      	mov	r0, r5
    9e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9e8e:	f7ff bc30 	b.w	96f2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    9e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e96:	b510      	push	{r4, lr}
    9e98:	4604      	mov	r4, r0
    9e9a:	4608      	mov	r0, r1
    9e9c:	f7fd fd8c 	bl	79b8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    9ea0:	7921      	ldrb	r1, [r4, #4]
    9ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9ea6:	2025      	movs	r0, #37	; 0x25
    9ea8:	f7fd bd5c 	b.w	7964 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    9eac:	b510      	push	{r4, lr}
    9eae:	4604      	mov	r4, r0
    9eb0:	302e      	adds	r0, #46	; 0x2e
    9eb2:	f7fd fd3b 	bl	792c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    9eb6:	2800      	cmp	r0, #0
    9eb8:	d102      	bne.n	9ec0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf0>
    9eba:	207f      	movs	r0, #127	; 0x7f
    9ebc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    9ec0:	bd10      	pop	{r4, pc}
    9ec2:	b570      	push	{r4, r5, r6, lr}
    9ec4:	4614      	mov	r4, r2
    9ec6:	461d      	mov	r5, r3
    9ec8:	4606      	mov	r6, r0
    9eca:	f7f9 f8b1 	bl	3030 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    9ece:	1900      	adds	r0, r0, r4
    9ed0:	4169      	adcs	r1, r5
    9ed2:	e9c6 0100 	strd	r0, r1, [r6]
    9ed6:	bd70      	pop	{r4, r5, r6, pc}

00009ed8 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    9ed8:	b570      	push	{r4, r5, r6, lr}
    9eda:	7001      	strb	r1, [r0, #0]
    9edc:	7042      	strb	r2, [r0, #1]
    9ede:	4614      	mov	r4, r2
    9ee0:	460d      	mov	r5, r1
    9ee2:	7880      	ldrb	r0, [r0, #2]
    9ee4:	f000 f87f 	bl	9fe6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    9ee8:	fb10 f005 	smulbb	r0, r0, r5
    9eec:	4360      	muls	r0, r4
    9eee:	28ff      	cmp	r0, #255	; 0xff
    9ef0:	d303      	bcc.n	9efa <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    9ef2:	215c      	movs	r1, #92	; 0x5c
    9ef4:	202e      	movs	r0, #46	; 0x2e
    9ef6:	f7fa fc11 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9efa:	bd70      	pop	{r4, r5, r6, pc}

00009efc <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    9efc:	b510      	push	{r4, lr}
    9efe:	4604      	mov	r4, r0
    9f00:	7880      	ldrb	r0, [r0, #2]
    9f02:	f000 f870 	bl	9fe6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    9f06:	7861      	ldrb	r1, [r4, #1]
    9f08:	7822      	ldrb	r2, [r4, #0]
    9f0a:	fb11 f102 	smulbb	r1, r1, r2
    9f0e:	4348      	muls	r0, r1
    9f10:	b2c0      	uxtb	r0, r0
    9f12:	bd10      	pop	{r4, pc}

00009f14 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    9f14:	b510      	push	{r4, lr}
    9f16:	4604      	mov	r4, r0
    9f18:	f000 f84d 	bl	9fb6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    9f1c:	7961      	ldrb	r1, [r4, #5]
    9f1e:	1c49      	adds	r1, r1, #1
    9f20:	b2c9      	uxtb	r1, r1
    9f22:	7161      	strb	r1, [r4, #5]
    9f24:	7862      	ldrb	r2, [r4, #1]
    9f26:	4291      	cmp	r1, r2
    9f28:	d10b      	bne.n	9f42 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    9f2a:	2200      	movs	r2, #0
    9f2c:	7162      	strb	r2, [r4, #5]
    9f2e:	78e1      	ldrb	r1, [r4, #3]
    9f30:	4301      	orrs	r1, r0
    9f32:	70e1      	strb	r1, [r4, #3]
    9f34:	78a3      	ldrb	r3, [r4, #2]
    9f36:	4299      	cmp	r1, r3
    9f38:	d103      	bne.n	9f42 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    9f3a:	70e2      	strb	r2, [r4, #3]
    9f3c:	7921      	ldrb	r1, [r4, #4]
    9f3e:	1c49      	adds	r1, r1, #1
    9f40:	7121      	strb	r1, [r4, #4]
    9f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9f46:	f000 b825 	b.w	9f94 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

00009f4a <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    9f4a:	7081      	strb	r1, [r0, #2]
    9f4c:	4770      	bx	lr

00009f4e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    9f4e:	b570      	push	{r4, r5, r6, lr}
    9f50:	4604      	mov	r4, r0
    9f52:	7880      	ldrb	r0, [r0, #2]
    9f54:	f000 f847 	bl	9fe6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    9f58:	7861      	ldrb	r1, [r4, #1]
    9f5a:	fb11 f500 	smulbb	r5, r1, r0
    9f5e:	78e0      	ldrb	r0, [r4, #3]
    9f60:	f000 f841 	bl	9fe6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    9f64:	7861      	ldrb	r1, [r4, #1]
    9f66:	7962      	ldrb	r2, [r4, #5]
    9f68:	fb10 2001 	smlabb	r0, r0, r1, r2
    9f6c:	7821      	ldrb	r1, [r4, #0]
    9f6e:	7922      	ldrb	r2, [r4, #4]
    9f70:	1a89      	subs	r1, r1, r2
    9f72:	fb11 f105 	smulbb	r1, r1, r5
    9f76:	1a08      	subs	r0, r1, r0
    9f78:	b2c0      	uxtb	r0, r0
    9f7a:	bd70      	pop	{r4, r5, r6, pc}

00009f7c <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    9f7c:	2100      	movs	r1, #0
    9f7e:	6001      	str	r1, [r0, #0]
    9f80:	8081      	strh	r1, [r0, #4]
    9f82:	2101      	movs	r1, #1
    9f84:	7041      	strb	r1, [r0, #1]
    9f86:	7001      	strb	r1, [r0, #0]
    9f88:	4770      	bx	lr

00009f8a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    9f8a:	2100      	movs	r1, #0
    9f8c:	70c1      	strb	r1, [r0, #3]
    9f8e:	7141      	strb	r1, [r0, #5]
    9f90:	7101      	strb	r1, [r0, #4]
    9f92:	4770      	bx	lr
    9f94:	b510      	push	{r4, lr}
    9f96:	2801      	cmp	r0, #1
    9f98:	d007      	beq.n	9faa <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    9f9a:	2802      	cmp	r0, #2
    9f9c:	d007      	beq.n	9fae <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    9f9e:	2804      	cmp	r0, #4
    9fa0:	d007      	beq.n	9fb2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    9fa2:	2139      	movs	r1, #57	; 0x39
    9fa4:	202e      	movs	r0, #46	; 0x2e
    9fa6:	f7fa fbb9 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9faa:	2025      	movs	r0, #37	; 0x25
    9fac:	bd10      	pop	{r4, pc}
    9fae:	2026      	movs	r0, #38	; 0x26
    9fb0:	bd10      	pop	{r4, pc}
    9fb2:	2027      	movs	r0, #39	; 0x27
    9fb4:	bd10      	pop	{r4, pc}
    9fb6:	4601      	mov	r1, r0
    9fb8:	2000      	movs	r0, #0
    9fba:	788a      	ldrb	r2, [r1, #2]
    9fbc:	07d3      	lsls	r3, r2, #31
    9fbe:	d002      	beq.n	9fc6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    9fc0:	78cb      	ldrb	r3, [r1, #3]
    9fc2:	07db      	lsls	r3, r3, #31
    9fc4:	d006      	beq.n	9fd4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    9fc6:	0793      	lsls	r3, r2, #30
    9fc8:	d506      	bpl.n	9fd8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    9fca:	78cb      	ldrb	r3, [r1, #3]
    9fcc:	079b      	lsls	r3, r3, #30
    9fce:	d403      	bmi.n	9fd8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    9fd0:	2002      	movs	r0, #2
    9fd2:	4770      	bx	lr
    9fd4:	2001      	movs	r0, #1
    9fd6:	4770      	bx	lr
    9fd8:	0752      	lsls	r2, r2, #29
    9fda:	d5fc      	bpl.n	9fd6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    9fdc:	78c9      	ldrb	r1, [r1, #3]
    9fde:	0749      	lsls	r1, r1, #29
    9fe0:	d4f9      	bmi.n	9fd6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    9fe2:	2004      	movs	r0, #4
    9fe4:	4770      	bx	lr
    9fe6:	f3c0 0180 	ubfx	r1, r0, #2, #1
    9fea:	f3c0 0240 	ubfx	r2, r0, #1, #1
    9fee:	4411      	add	r1, r2
    9ff0:	f000 0001 	and.w	r0, r0, #1
    9ff4:	4408      	add	r0, r1
    9ff6:	4770      	bx	lr

00009ff8 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    9ff8:	f240 315a 	movw	r1, #858	; 0x35a
    9ffc:	4348      	muls	r0, r1
    9ffe:	4770      	bx	lr

0000a000 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    a000:	f240 20ef 	movw	r0, #751	; 0x2ef
    a004:	4770      	bx	lr
    a006:	020e      	.short	0x020e
    a008:	0630041c 	.word	0x0630041c
    a00c:	035a0c60 	.word	0x035a0c60
    a010:	05c506b4 	.word	0x05c506b4
    a014:	12250bf5 	.word	0x12250bf5
    a018:	03b101a3 	.word	0x03b101a3
    a01c:	02ef05bf 	.word	0x02ef05bf
    a020:	09a30649 	.word	0x09a30649

0000a024 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    a024:	b510      	push	{r4, lr}
    a026:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    a02a:	b109      	cbz	r1, a030 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    a02c:	2000      	movs	r0, #0
    a02e:	bd10      	pop	{r4, pc}
    a030:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    a034:	b131      	cbz	r1, a044 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    a036:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    a03a:	428a      	cmp	r2, r1
    a03c:	d902      	bls.n	a044 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    a03e:	f7ff feb1 	bl	9da4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    a042:	e7f3      	b.n	a02c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    a044:	2001      	movs	r0, #1
    a046:	bd10      	pop	{r4, pc}

0000a048 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    a048:	b510      	push	{r4, lr}
    a04a:	b131      	cbz	r1, a05a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    a04c:	2901      	cmp	r1, #1
    a04e:	d008      	beq.n	a062 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    a050:	f240 717d 	movw	r1, #1917	; 0x77d
    a054:	2030      	movs	r0, #48	; 0x30
    a056:	f7fa fb61 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a05e:	f000 b8d3 	b.w	a208 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x146>
    a062:	2100      	movs	r1, #0
    a064:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    a068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a06c:	f000 b89c 	b.w	a1a8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xe6>

0000a070 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    a070:	b510      	push	{r4, lr}
    a072:	4604      	mov	r4, r0
    a074:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    a078:	2800      	cmp	r0, #0
    a07a:	d019      	beq.n	a0b0 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    a07c:	2001      	movs	r0, #1
    a07e:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    a082:	4601      	mov	r1, r0
    a084:	4620      	mov	r0, r4
    a086:	f7ff fe8a 	bl	9d9e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    a08a:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    a08e:	b170      	cbz	r0, a0ae <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    a090:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    a094:	f7f8 fb50 	bl	2738 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    a098:	7820      	ldrb	r0, [r4, #0]
    a09a:	f7f8 fca1 	bl	29e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    a09e:	f814 09c8 	ldrb.w	r0, [r4], #-200
    a0a2:	f7f8 fc7b 	bl	299c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    a0a6:	b120      	cbz	r0, a0b2 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    a0a8:	2000      	movs	r0, #0
    a0aa:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    a0ae:	2000      	movs	r0, #0
    a0b0:	bd10      	pop	{r4, pc}
    a0b2:	f44f 7101 	mov.w	r1, #516	; 0x204
    a0b6:	2030      	movs	r0, #48	; 0x30
    a0b8:	f7fa fb30 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000a0bc <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    a0bc:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    a0c0:	4770      	bx	lr

0000a0c2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    a0c2:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    a0c6:	4770      	bx	lr
    a0c8:	b570      	push	{r4, r5, r6, lr}
    a0ca:	4604      	mov	r4, r0
    a0cc:	f000 f875 	bl	a1ba <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf8>
    a0d0:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    a0d4:	2000      	movs	r0, #0
    a0d6:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
    a0da:	4601      	mov	r1, r0
    a0dc:	2501      	movs	r5, #1
    a0de:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    a0e2:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    a0e6:	4606      	mov	r6, r0
    a0e8:	f7ff fbd1 	bl	988e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    a0ec:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    a0f0:	1c40      	adds	r0, r0, #1
    a0f2:	280a      	cmp	r0, #10
    a0f4:	d201      	bcs.n	a0fa <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x38>
    a0f6:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    a0fa:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    a0fe:	b138      	cbz	r0, a110 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x4e>
    a100:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    a104:	1c40      	adds	r0, r0, #1
    a106:	280a      	cmp	r0, #10
    a108:	d302      	bcc.n	a110 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x4e>
    a10a:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
    a10e:	e002      	b.n	a116 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x54>
    a110:	2002      	movs	r0, #2
    a112:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    a116:	4620      	mov	r0, r4
    a118:	f000 f822 	bl	a160 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x9e>
    a11c:	b120      	cbz	r0, a128 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x66>
    a11e:	4620      	mov	r0, r4
    a120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a124:	f000 b80d 	b.w	a142 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x80>
    a128:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    a12c:	4631      	mov	r1, r6
    a12e:	f000 f842 	bl	a1b6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf4>
    a132:	2800      	cmp	r0, #0
    a134:	d104      	bne.n	a140 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x7e>
    a136:	f240 6191 	movw	r1, #1681	; 0x691
    a13a:	2030      	movs	r0, #48	; 0x30
    a13c:	f7fa faee 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a140:	bd70      	pop	{r4, r5, r6, pc}
    a142:	b510      	push	{r4, lr}
    a144:	4604      	mov	r4, r0
    a146:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    a14a:	f7f8 fc27 	bl	299c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    a14e:	2000      	movs	r0, #0
    a150:	7620      	strb	r0, [r4, #24]
    a152:	bd10      	pop	{r4, pc}
    a154:	b510      	push	{r4, lr}
    a156:	f7ff fdcd 	bl	9cf4 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    a15a:	f500 7088 	add.w	r0, r0, #272	; 0x110
    a15e:	bd10      	pop	{r4, pc}
    a160:	b570      	push	{r4, r5, r6, lr}
    a162:	4605      	mov	r5, r0
    a164:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    a168:	b108      	cbz	r0, a16e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xac>
    a16a:	2001      	movs	r0, #1
    a16c:	bd70      	pop	{r4, r5, r6, pc}
    a16e:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    a172:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    a176:	4050      	eors	r0, r2
    a178:	ea70 0101 	orns	r1, r0, r1
    a17c:	d012      	beq.n	a1a4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xe2>
    a17e:	2400      	movs	r4, #0
    a180:	4621      	mov	r1, r4
    a182:	4628      	mov	r0, r5
    a184:	f7ff ffe6 	bl	a154 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x92>
    a188:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    a18c:	1840      	adds	r0, r0, r1
    a18e:	4154      	adcs	r4, r2
    a190:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    a194:	3df8      	subs	r5, #248	; 0xf8
    a196:	1a10      	subs	r0, r2, r0
    a198:	41a1      	sbcs	r1, r4
    a19a:	d503      	bpl.n	a1a4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xe2>
    a19c:	4628      	mov	r0, r5
    a19e:	f7ff fe01 	bl	9da4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    a1a2:	e7e2      	b.n	a16a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xa8>
    a1a4:	2000      	movs	r0, #0
    a1a6:	bd70      	pop	{r4, r5, r6, pc}
    a1a8:	b510      	push	{r4, lr}
    a1aa:	f7fd fa4f 	bl	764c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    a1ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a1b2:	f7f8 bd55 	b.w	2c60 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    a1b6:	f7f7 bf9d 	b.w	20f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    a1ba:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a1bc:	4604      	mov	r4, r0
    a1be:	f7ff fdc2 	bl	9d46 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a1c2:	b1f8      	cbz	r0, a204 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x142>
    a1c4:	4620      	mov	r0, r4
    a1c6:	f7ff fdb6 	bl	9d36 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a1ca:	b918      	cbnz	r0, a1d4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x112>
    a1cc:	4620      	mov	r0, r4
    a1ce:	f7ff fdbc 	bl	9d4a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    a1d2:	b140      	cbz	r0, a1e6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x124>
    a1d4:	2462      	movs	r4, #98	; 0x62
    a1d6:	4668      	mov	r0, sp
    a1d8:	f7fa f97c 	bl	44d4 <mpsl_fem_pa_is_configured>
    a1dc:	f89d 0000 	ldrb.w	r0, [sp]
    a1e0:	b118      	cbz	r0, a1ea <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x128>
    a1e2:	2501      	movs	r5, #1
    a1e4:	e002      	b.n	a1ec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x12a>
    a1e6:	245b      	movs	r4, #91	; 0x5b
    a1e8:	e7f5      	b.n	a1d6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x114>
    a1ea:	2500      	movs	r5, #0
    a1ec:	a801      	add	r0, sp, #4
    a1ee:	f7fa f959 	bl	44a4 <mpsl_fem_lna_is_configured>
    a1f2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a1f6:	b100      	cbz	r0, a1fa <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x138>
    a1f8:	2001      	movs	r0, #1
    a1fa:	4305      	orrs	r5, r0
    a1fc:	d000      	beq.n	a200 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x13e>
    a1fe:	340a      	adds	r4, #10
    a200:	4620      	mov	r0, r4
    a202:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a204:	2084      	movs	r0, #132	; 0x84
    a206:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a208:	b570      	push	{r4, r5, r6, lr}
    a20a:	4604      	mov	r4, r0
    a20c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    a20e:	2500      	movs	r5, #0
    a210:	b130      	cbz	r0, a220 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x15e>
    a212:	f7fb fd25 	bl	5c60 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    a216:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    a218:	fbb0 f2f1 	udiv	r2, r0, r1
    a21c:	fb01 0512 	mls	r5, r1, r2, r0
    a220:	4620      	mov	r0, r4
    a222:	f7ff fd63 	bl	9cec <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    a226:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    a22a:	4428      	add	r0, r5
    a22c:	34e8      	adds	r4, #232	; 0xe8
    a22e:	2500      	movs	r5, #0
    a230:	1882      	adds	r2, r0, r2
    a232:	eb45 0001 	adc.w	r0, r5, r1
    a236:	e9c4 2004 	strd	r2, r0, [r4, #16]
    a23a:	f804 5b0b 	strb.w	r5, [r4], #11
    a23e:	2001      	movs	r0, #1
    a240:	f804 0901 	strb.w	r0, [r4], #-1
    a244:	2002      	movs	r0, #2
    a246:	f804 09f2 	strb.w	r0, [r4], #-242
    a24a:	4620      	mov	r0, r4
    a24c:	f7ff ffb5 	bl	a1ba <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf8>
    a250:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    a254:	4620      	mov	r0, r4
    a256:	f7ff ff83 	bl	a160 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x9e>
    a25a:	b930      	cbnz	r0, a26a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1a8>
    a25c:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    a260:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    a264:	f7ff ffa7 	bl	a1b6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xf4>
    a268:	b128      	cbz	r0, a276 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1b4>
    a26a:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    a26e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a272:	f7ff bf99 	b.w	a1a8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xe6>
    a276:	f240 61d7 	movw	r1, #1751	; 0x6d7
    a27a:	2030      	movs	r0, #48	; 0x30
    a27c:	f7fa fa4e 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a280:	b510      	push	{r4, lr}
    a282:	4604      	mov	r4, r0
    a284:	2000      	movs	r0, #0
    a286:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    a28a:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    a28e:	f7f8 fb85 	bl	299c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    a292:	2020      	movs	r0, #32
    a294:	f884 0294 	strb.w	r0, [r4, #660]	; 0x294
    a298:	bd10      	pop	{r4, pc}
    a29a:	b570      	push	{r4, r5, r6, lr}
    a29c:	b140      	cbz	r0, a2b0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1ee>
    a29e:	2909      	cmp	r1, #9
    a2a0:	d249      	bcs.n	a336 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x274>
    a2a2:	e8df f001 	tbb	[pc, r1]
    a2a6:	1507      	.short	0x1507
    a2a8:	48383c3c 	.word	0x48383c3c
    a2ac:	0044402a 	.word	0x0044402a
    a2b0:	21ca      	movs	r1, #202	; 0xca
    a2b2:	e03d      	b.n	a330 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x26e>
    a2b4:	4604      	mov	r4, r0
    a2b6:	f7fb fe23 	bl	5f00 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    a2ba:	b110      	cbz	r0, a2c2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x200>
    a2bc:	f44f 711d 	mov.w	r1, #628	; 0x274
    a2c0:	e036      	b.n	a330 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x26e>
    a2c2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    a2c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a2ca:	38ff      	subs	r0, #255	; 0xff
    a2cc:	f7f8 bde2 	b.w	2e94 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    a2d0:	4605      	mov	r5, r0
    a2d2:	f7ff fd34 	bl	9d3e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a2d6:	b9b0      	cbnz	r0, a306 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x244>
    a2d8:	2100      	movs	r1, #0
    a2da:	4628      	mov	r0, r5
    a2dc:	f7ff ff3a 	bl	a154 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x92>
    a2e0:	4604      	mov	r4, r0
    a2e2:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    a2e6:	42a0      	cmp	r0, r4
    a2e8:	d20b      	bcs.n	a302 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x240>
    a2ea:	1a20      	subs	r0, r4, r0
    a2ec:	2103      	movs	r1, #3
    a2ee:	f7f7 fd45 	bl	1d7c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    a2f2:	b130      	cbz	r0, a302 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x240>
    a2f4:	4628      	mov	r0, r5
    a2f6:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    a2fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a2fe:	f7ff bc8c 	b.w	9c1a <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    a302:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    a306:	4628      	mov	r0, r5
    a308:	f7fb fe16 	bl	5f38 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    a30c:	2800      	cmp	r0, #0
    a30e:	d014      	beq.n	a33a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x278>
    a310:	f240 21a7 	movw	r1, #679	; 0x2a7
    a314:	e00c      	b.n	a330 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x26e>
    a316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a31a:	f7fd bb53 	b.w	79c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    a31e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a322:	f7ff bed1 	b.w	a0c8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x6>
    a326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a32a:	f7ff bf0a 	b.w	a142 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x80>
    a32e:	21ea      	movs	r1, #234	; 0xea
    a330:	2030      	movs	r0, #48	; 0x30
    a332:	f7fa f9f3 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a336:	21ee      	movs	r1, #238	; 0xee
    a338:	e7fa      	b.n	a330 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x26e>
    a33a:	bd70      	pop	{r4, r5, r6, pc}

0000a33c <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    a33c:	f7fa bd2c 	b.w	4d98 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000a340 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    a340:	b570      	push	{r4, r5, r6, lr}
    a342:	6844      	ldr	r4, [r0, #4]
    a344:	220f      	movs	r2, #15
    a346:	f504 7594 	add.w	r5, r4, #296	; 0x128
    a34a:	2100      	movs	r1, #0
    a34c:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    a350:	f7fe fad1 	bl	88f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a354:	2100      	movs	r1, #0
    a356:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
    a35a:	61a9      	str	r1, [r5, #24]
    a35c:	4608      	mov	r0, r1
    a35e:	217f      	movs	r1, #127	; 0x7f
    a360:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    a364:	4422      	add	r2, r4
    a366:	1c40      	adds	r0, r0, #1
    a368:	b2c0      	uxtb	r0, r0
    a36a:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
    a36e:	2802      	cmp	r0, #2
    a370:	d3f6      	bcc.n	a360 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x20>
    a372:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    a376:	4620      	mov	r0, r4
    a378:	f000 f814 	bl	a3a4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    a37c:	2000      	movs	r0, #0
    a37e:	21ff      	movs	r1, #255	; 0xff
    a380:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    a384:	4422      	add	r2, r4
    a386:	1c40      	adds	r0, r0, #1
    a388:	f802 1f71 	strb.w	r1, [r2, #113]!
    a38c:	b2c0      	uxtb	r0, r0
    a38e:	7191      	strb	r1, [r2, #6]
    a390:	2802      	cmp	r0, #2
    a392:	d3f5      	bcc.n	a380 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x40>
    a394:	bd70      	pop	{r4, r5, r6, pc}

0000a396 <sym_54DHANNB5K66OT2I32HH4FUSWNFM6Y6UROTVO5I>:
    a396:	207f      	movs	r0, #127	; 0x7f
    a398:	f000 b837 	b.w	a40a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>

0000a39c <sym_ORQBLZC6MUX3FYLO7MAZX3V753VQRLBWB2XQIYI>:
    a39c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    a3a0:	f000 b833 	b.w	a40a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>

0000a3a4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    a3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a3a8:	460d      	mov	r5, r1
    a3aa:	4606      	mov	r6, r0
    a3ac:	f7ff fff3 	bl	a396 <sym_54DHANNB5K66OT2I32HH4FUSWNFM6Y6UROTVO5I>
    a3b0:	4607      	mov	r7, r0
    a3b2:	f7ff fff3 	bl	a39c <sym_ORQBLZC6MUX3FYLO7MAZX3V753VQRLBWB2XQIYI>
    a3b6:	2400      	movs	r4, #0
    a3b8:	4285      	cmp	r5, r0
    a3ba:	d100      	bne.n	a3be <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    a3bc:	2401      	movs	r4, #1
    a3be:	42bd      	cmp	r5, r7
    a3c0:	d101      	bne.n	a3c6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    a3c2:	f044 0402 	orr.w	r4, r4, #2
    a3c6:	f000 f814 	bl	a3f2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4e>
    a3ca:	2200      	movs	r2, #0
    a3cc:	4601      	mov	r1, r0
    a3ce:	2301      	movs	r3, #1
    a3d0:	fa03 f002 	lsl.w	r0, r3, r2
    a3d4:	4208      	tst	r0, r1
    a3d6:	d006      	beq.n	a3e6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x42>
    a3d8:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    a3dc:	4430      	add	r0, r6
    a3de:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    a3e2:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    a3e6:	1c52      	adds	r2, r2, #1
    a3e8:	b2d2      	uxtb	r2, r2
    a3ea:	2a02      	cmp	r2, #2
    a3ec:	d3f0      	bcc.n	a3d0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    a3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a3f2:	b510      	push	{r4, lr}
    a3f4:	f7fc fe90 	bl	7118 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a3f8:	0a00      	lsrs	r0, r0, #8
    a3fa:	2201      	movs	r2, #1
    a3fc:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    a400:	07c0      	lsls	r0, r0, #31
    a402:	d000      	beq.n	a406 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x62>
    a404:	2203      	movs	r2, #3
    a406:	4610      	mov	r0, r2
    a408:	bd10      	pop	{r4, pc}
    a40a:	b508      	push	{r3, lr}
    a40c:	f640 1288 	movw	r2, #2440	; 0x988
    a410:	4669      	mov	r1, sp
    a412:	f7fa f865 	bl	44e0 <mpsl_fem_tx_power_split>
    a416:	bd08      	pop	{r3, pc}
    a418:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    a41c:	f001 0107 	and.w	r1, r1, #7
    a420:	7800      	ldrb	r0, [r0, #0]
    a422:	40c8      	lsrs	r0, r1
    a424:	f000 0001 	and.w	r0, r0, #1
    a428:	4770      	bx	lr
    a42a:	b118      	cbz	r0, a434 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x90>
    a42c:	2802      	cmp	r0, #2
    a42e:	d001      	beq.n	a434 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x90>
    a430:	2001      	movs	r0, #1
    a432:	4770      	bx	lr
    a434:	2000      	movs	r0, #0
    a436:	4770      	bx	lr

0000a438 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    a438:	b510      	push	{r4, lr}
    a43a:	4604      	mov	r4, r0
    a43c:	f7fc fdf8 	bl	7030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
    a440:	b108      	cbz	r0, a446 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    a442:	200c      	movs	r0, #12
    a444:	bd10      	pop	{r4, pc}
    a446:	7820      	ldrb	r0, [r4, #0]
    a448:	b118      	cbz	r0, a452 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    a44a:	2801      	cmp	r0, #1
    a44c:	d001      	beq.n	a452 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    a44e:	2012      	movs	r0, #18
    a450:	bd10      	pop	{r4, pc}
    a452:	f7ff ffea 	bl	a42a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x86>
    a456:	1c61      	adds	r1, r4, #1
    a458:	f7fa fff2 	bl	5440 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    a45c:	b108      	cbz	r0, a462 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    a45e:	2000      	movs	r0, #0
    a460:	bd10      	pop	{r4, pc}
    a462:	2007      	movs	r0, #7
    a464:	bd10      	pop	{r4, pc}

0000a466 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    a466:	b510      	push	{r4, lr}
    a468:	f7fc fde2 	bl	7030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
    a46c:	b108      	cbz	r0, a472 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    a46e:	200c      	movs	r0, #12
    a470:	bd10      	pop	{r4, pc}
    a472:	f7fb f80d 	bl	5490 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    a476:	2000      	movs	r0, #0
    a478:	bd10      	pop	{r4, pc}

0000a47a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    a47a:	b510      	push	{r4, lr}
    a47c:	460b      	mov	r3, r1
    a47e:	2201      	movs	r2, #1
    a480:	f100 0110 	add.w	r1, r0, #16
    a484:	f7ff f99e 	bl	97c4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    a488:	2000      	movs	r0, #0
    a48a:	bd10      	pop	{r4, pc}

0000a48c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    a48c:	b510      	push	{r4, lr}
    a48e:	8800      	ldrh	r0, [r0, #0]
    a490:	2100      	movs	r1, #0
    a492:	f7fe ff66 	bl	9362 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a496:	b118      	cbz	r0, a4a0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    a498:	f890 12a0 	ldrb.w	r1, [r0, #672]	; 0x2a0
    a49c:	b111      	cbz	r1, a4a4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    a49e:	e007      	b.n	a4b0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    a4a0:	2002      	movs	r0, #2
    a4a2:	bd10      	pop	{r4, pc}
    a4a4:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    a4a8:	2916      	cmp	r1, #22
    a4aa:	d003      	beq.n	a4b4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    a4ac:	2917      	cmp	r1, #23
    a4ae:	d001      	beq.n	a4b4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    a4b0:	200c      	movs	r0, #12
    a4b2:	bd10      	pop	{r4, pc}
    a4b4:	2102      	movs	r1, #2
    a4b6:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
    a4ba:	2000      	movs	r0, #0
    a4bc:	bd10      	pop	{r4, pc}

0000a4be <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    a4be:	b510      	push	{r4, lr}
    a4c0:	2108      	movs	r1, #8
    a4c2:	f7fa f999 	bl	47f8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    a4c6:	2000      	movs	r0, #0
    a4c8:	bd10      	pop	{r4, pc}

0000a4ca <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    a4ca:	b510      	push	{r4, lr}
    a4cc:	4604      	mov	r4, r0
    a4ce:	f7fc fc2f 	bl	6d30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    a4d2:	f7ff fc3e 	bl	9d52 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    a4d6:	7020      	strb	r0, [r4, #0]
    a4d8:	2000      	movs	r0, #0
    a4da:	bd10      	pop	{r4, pc}

0000a4dc <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    a4dc:	b510      	push	{r4, lr}
    a4de:	4604      	mov	r4, r0
    a4e0:	20d8      	movs	r0, #216	; 0xd8
    a4e2:	7020      	strb	r0, [r4, #0]
    a4e4:	f000 fbd0 	bl	ac88 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x272>
    a4e8:	7060      	strb	r0, [r4, #1]
    a4ea:	2000      	movs	r0, #0
    a4ec:	bd10      	pop	{r4, pc}

0000a4ee <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    a4ee:	2108      	movs	r1, #8
    a4f0:	7001      	strb	r1, [r0, #0]
    a4f2:	2000      	movs	r0, #0
    a4f4:	4770      	bx	lr

0000a4f6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    a4f6:	b510      	push	{r4, lr}
    a4f8:	4604      	mov	r4, r0
    a4fa:	f7fc fd99 	bl	7030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
    a4fe:	b108      	cbz	r0, a504 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    a500:	200c      	movs	r0, #12
    a502:	bd10      	pop	{r4, pc}
    a504:	7820      	ldrb	r0, [r4, #0]
    a506:	b108      	cbz	r0, a50c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    a508:	2801      	cmp	r0, #1
    a50a:	d107      	bne.n	a51c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    a50c:	f7ff ff8d 	bl	a42a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x86>
    a510:	1c61      	adds	r1, r4, #1
    a512:	f7ff f94c 	bl	97ae <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    a516:	b108      	cbz	r0, a51c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    a518:	2000      	movs	r0, #0
    a51a:	bd10      	pop	{r4, pc}
    a51c:	2012      	movs	r0, #18
    a51e:	bd10      	pop	{r4, pc}

0000a520 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    a520:	b51c      	push	{r2, r3, r4, lr}
    a522:	4604      	mov	r4, r0
    a524:	f7fc fc04 	bl	6d30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    a528:	2000      	movs	r0, #0
    a52a:	f88d 0002 	strb.w	r0, [sp, #2]
    a52e:	2103      	movs	r1, #3
    a530:	f88d 1001 	strb.w	r1, [sp, #1]
    a534:	f814 1b01 	ldrb.w	r1, [r4], #1
    a538:	f88d 1003 	strb.w	r1, [sp, #3]
    a53c:	f88d 0000 	strb.w	r0, [sp]
    a540:	4668      	mov	r0, sp
    a542:	9401      	str	r4, [sp, #4]
    a544:	f000 f939 	bl	a7ba <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    a548:	bd1c      	pop	{r2, r3, r4, pc}

0000a54a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    a54a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    a54c:	4605      	mov	r5, r0
    a54e:	f7fc fbef 	bl	6d30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    a552:	4606      	mov	r6, r0
    a554:	7828      	ldrb	r0, [r5, #0]
    a556:	2400      	movs	r4, #0
    a558:	b160      	cbz	r0, a574 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    a55a:	f88d 4000 	strb.w	r4, [sp]
    a55e:	2001      	movs	r0, #1
    a560:	f10d 0101 	add.w	r1, sp, #1
    a564:	f7fa fe9a 	bl	529c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    a568:	b120      	cbz	r0, a574 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    a56a:	4668      	mov	r0, sp
    a56c:	f000 f897 	bl	a69e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    a570:	2800      	cmp	r0, #0
    a572:	d112      	bne.n	a59a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    a574:	f88d 400c 	strb.w	r4, [sp, #12]
    a578:	4630      	mov	r0, r6
    a57a:	f7ff fbe0 	bl	9d3e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a57e:	b118      	cbz	r0, a588 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    a580:	2080      	movs	r0, #128	; 0x80
    a582:	f8ad 000d 	strh.w	r0, [sp, #13]
    a586:	e001      	b.n	a58c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    a588:	f8ad 400d 	strh.w	r4, [sp, #13]
    a58c:	f88d 400f 	strb.w	r4, [sp, #15]
    a590:	7828      	ldrb	r0, [r5, #0]
    a592:	2801      	cmp	r0, #1
    a594:	d003      	beq.n	a59e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    a596:	b138      	cbz	r0, a5a8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    a598:	2012      	movs	r0, #18
    a59a:	b004      	add	sp, #16
    a59c:	bd70      	pop	{r4, r5, r6, pc}
    a59e:	a903      	add	r1, sp, #12
    a5a0:	4630      	mov	r0, r6
    a5a2:	f7fc fbe1 	bl	6d68 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    a5a6:	e7f8      	b.n	a59a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    a5a8:	4630      	mov	r0, r6
    a5aa:	f000 fb70 	bl	ac8e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x278>
    a5ae:	e7f4      	b.n	a59a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000a5b0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    a5b0:	b530      	push	{r4, r5, lr}
    a5b2:	b08b      	sub	sp, #44	; 0x2c
    a5b4:	4604      	mov	r4, r0
    a5b6:	f7fc fbbb 	bl	6d30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    a5ba:	4602      	mov	r2, r0
    a5bc:	7920      	ldrb	r0, [r4, #4]
    a5be:	2804      	cmp	r0, #4
    a5c0:	d803      	bhi.n	a5ca <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    a5c2:	8860      	ldrh	r0, [r4, #2]
    a5c4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    a5c8:	d902      	bls.n	a5d0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    a5ca:	2012      	movs	r0, #18
    a5cc:	b00b      	add	sp, #44	; 0x2c
    a5ce:	bd30      	pop	{r4, r5, pc}
    a5d0:	2500      	movs	r5, #0
    a5d2:	f88d 5004 	strb.w	r5, [sp, #4]
    a5d6:	7921      	ldrb	r1, [r4, #4]
    a5d8:	9500      	str	r5, [sp, #0]
    a5da:	f89d 0000 	ldrb.w	r0, [sp]
    a5de:	2905      	cmp	r1, #5
    a5e0:	f040 0010 	orr.w	r0, r0, #16
    a5e4:	f88d 0000 	strb.w	r0, [sp]
    a5e8:	d254      	bcs.n	a694 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    a5ea:	e8df f001 	tbb	[pc, r1]
    a5ee:	0803      	.short	0x0803
    a5f0:	000b1105 	.word	0x000b1105
    a5f4:	f040 0001 	orr.w	r0, r0, #1
    a5f8:	f040 0002 	orr.w	r0, r0, #2
    a5fc:	e006      	b.n	a60c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    a5fe:	f040 0009 	orr.w	r0, r0, #9
    a602:	e001      	b.n	a608 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    a604:	f040 0001 	orr.w	r0, r0, #1
    a608:	f040 0004 	orr.w	r0, r0, #4
    a60c:	f88d 0000 	strb.w	r0, [sp]
    a610:	f8bd 0000 	ldrh.w	r0, [sp]
    a614:	9000      	str	r0, [sp, #0]
    a616:	f8bd 0000 	ldrh.w	r0, [sp]
    a61a:	f8ad 0005 	strh.w	r0, [sp, #5]
    a61e:	8821      	ldrh	r1, [r4, #0]
    a620:	f8dd 0006 	ldr.w	r0, [sp, #6]
    a624:	f361 201f 	bfi	r0, r1, #8, #24
    a628:	f8cd 0006 	str.w	r0, [sp, #6]
    a62c:	8861      	ldrh	r1, [r4, #2]
    a62e:	f8dd 0009 	ldr.w	r0, [sp, #9]
    a632:	f361 201f 	bfi	r0, r1, #8, #24
    a636:	f8cd 0009 	str.w	r0, [sp, #9]
    a63a:	7b60      	ldrb	r0, [r4, #13]
    a63c:	f88d 000d 	strb.w	r0, [sp, #13]
    a640:	7960      	ldrb	r0, [r4, #5]
    a642:	f88d 000e 	strb.w	r0, [sp, #14]
    a646:	79a0      	ldrb	r0, [r4, #6]
    a648:	f88d 000f 	strb.w	r0, [sp, #15]
    a64c:	f8d4 0007 	ldr.w	r0, [r4, #7]
    a650:	9004      	str	r0, [sp, #16]
    a652:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    a656:	f8ad 0014 	strh.w	r0, [sp, #20]
    a65a:	7ba0      	ldrb	r0, [r4, #14]
    a65c:	f88d 0016 	strb.w	r0, [sp, #22]
    a660:	207f      	movs	r0, #127	; 0x7f
    a662:	f88d 0017 	strb.w	r0, [sp, #23]
    a666:	2001      	movs	r0, #1
    a668:	f88d 0018 	strb.w	r0, [sp, #24]
    a66c:	f88d 5019 	strb.w	r5, [sp, #25]
    a670:	f88d 001a 	strb.w	r0, [sp, #26]
    a674:	f88d 501b 	strb.w	r5, [sp, #27]
    a678:	4610      	mov	r0, r2
    a67a:	f7ff fb80 	bl	9d7e <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    a67e:	f88d 001c 	strb.w	r0, [sp, #28]
    a682:	f88d 501d 	strb.w	r5, [sp, #29]
    a686:	f88d 501e 	strb.w	r5, [sp, #30]
    a68a:	a909      	add	r1, sp, #36	; 0x24
    a68c:	a801      	add	r0, sp, #4
    a68e:	f7fc fa93 	bl	6bb8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    a692:	e79b      	b.n	a5cc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    a694:	f241 11d5 	movw	r1, #4565	; 0x11d5
    a698:	2039      	movs	r0, #57	; 0x39
    a69a:	f7fa f83f 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000a69e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    a69e:	b570      	push	{r4, r5, r6, lr}
    a6a0:	4604      	mov	r4, r0
    a6a2:	7800      	ldrb	r0, [r0, #0]
    a6a4:	2101      	movs	r1, #1
    a6a6:	f7fe fe5c 	bl	9362 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a6aa:	0005      	movs	r5, r0
    a6ac:	d007      	beq.n	a6be <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    a6ae:	f7ff fd08 	bl	a0c2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a6b2:	b160      	cbz	r0, a6ce <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    a6b4:	4628      	mov	r0, r5
    a6b6:	f7ff fb48 	bl	9d4a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    a6ba:	b110      	cbz	r0, a6c2 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    a6bc:	e005      	b.n	a6ca <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    a6be:	2042      	movs	r0, #66	; 0x42
    a6c0:	bd70      	pop	{r4, r5, r6, pc}
    a6c2:	4628      	mov	r0, r5
    a6c4:	f7ff fb37 	bl	9d36 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a6c8:	b108      	cbz	r0, a6ce <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    a6ca:	200c      	movs	r0, #12
    a6cc:	bd70      	pop	{r4, r5, r6, pc}
    a6ce:	1c61      	adds	r1, r4, #1
    a6d0:	4628      	mov	r0, r5
    a6d2:	f7ff fb4c 	bl	9d6e <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    a6d6:	2000      	movs	r0, #0
    a6d8:	bd70      	pop	{r4, r5, r6, pc}

0000a6da <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    a6da:	b510      	push	{r4, lr}
    a6dc:	4604      	mov	r4, r0
    a6de:	f7fc fb27 	bl	6d30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    a6e2:	7861      	ldrb	r1, [r4, #1]
    a6e4:	f3c1 0240 	ubfx	r2, r1, #1, #1
    a6e8:	f001 0101 	and.w	r1, r1, #1
    a6ec:	f7ff fb3b 	bl	9d66 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    a6f0:	2000      	movs	r0, #0
    a6f2:	bd10      	pop	{r4, pc}

0000a6f4 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    a6f4:	b510      	push	{r4, lr}
    a6f6:	4604      	mov	r4, r0
    a6f8:	2001      	movs	r0, #1
    a6fa:	f000 f9ae 	bl	aa5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    a6fe:	b128      	cbz	r0, a70c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    a700:	4621      	mov	r1, r4
    a702:	2001      	movs	r0, #1
    a704:	f7fa fde2 	bl	52cc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    a708:	2000      	movs	r0, #0
    a70a:	bd10      	pop	{r4, pc}
    a70c:	200c      	movs	r0, #12
    a70e:	bd10      	pop	{r4, pc}

0000a710 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    a710:	b51c      	push	{r2, r3, r4, lr}
    a712:	4604      	mov	r4, r0
    a714:	f7fc fb0c 	bl	6d30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    a718:	2000      	movs	r0, #0
    a71a:	f88d 0000 	strb.w	r0, [sp]
    a71e:	f88d 0002 	strb.w	r0, [sp, #2]
    a722:	2003      	movs	r0, #3
    a724:	f88d 0001 	strb.w	r0, [sp, #1]
    a728:	f814 0b01 	ldrb.w	r0, [r4], #1
    a72c:	f88d 0003 	strb.w	r0, [sp, #3]
    a730:	4668      	mov	r0, sp
    a732:	9401      	str	r4, [sp, #4]
    a734:	f000 f8aa 	bl	a88c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    a738:	bd1c      	pop	{r2, r3, r4, pc}

0000a73a <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    a73a:	b510      	push	{r4, lr}
    a73c:	f7fa fdea 	bl	5314 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    a740:	2000      	movs	r0, #0
    a742:	bd10      	pop	{r4, pc}

0000a744 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    a744:	b51c      	push	{r2, r3, r4, lr}
    a746:	460c      	mov	r4, r1
    a748:	4669      	mov	r1, sp
    a74a:	f7ff f859 	bl	9800 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a74e:	2800      	cmp	r0, #0
    a750:	d105      	bne.n	a75e <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    a752:	2100      	movs	r1, #0
    a754:	4622      	mov	r2, r4
    a756:	9801      	ldr	r0, [sp, #4]
    a758:	f000 fa40 	bl	abdc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c6>
    a75c:	2000      	movs	r0, #0
    a75e:	bd1c      	pop	{r2, r3, r4, pc}

0000a760 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    a760:	b510      	push	{r4, lr}
    a762:	4604      	mov	r4, r0
    a764:	7800      	ldrb	r0, [r0, #0]
    a766:	28ff      	cmp	r0, #255	; 0xff
    a768:	d009      	beq.n	a77e <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    a76a:	2101      	movs	r1, #1
    a76c:	f7fe fdf9 	bl	9362 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a770:	b118      	cbz	r0, a77a <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    a772:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a776:	8441      	strh	r1, [r0, #34]	; 0x22
    a778:	e005      	b.n	a786 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    a77a:	2042      	movs	r0, #66	; 0x42
    a77c:	bd10      	pop	{r4, pc}
    a77e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a782:	f7fc f981 	bl	6a88 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    a786:	2000      	movs	r0, #0
    a788:	bd10      	pop	{r4, pc}

0000a78a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    a78a:	b510      	push	{r4, lr}
    a78c:	4604      	mov	r4, r0
    a78e:	2000      	movs	r0, #0
    a790:	f000 f963 	bl	aa5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    a794:	b128      	cbz	r0, a7a2 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    a796:	4621      	mov	r1, r4
    a798:	2000      	movs	r0, #0
    a79a:	f7fa fd97 	bl	52cc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    a79e:	2000      	movs	r0, #0
    a7a0:	bd10      	pop	{r4, pc}
    a7a2:	200c      	movs	r0, #12
    a7a4:	bd10      	pop	{r4, pc}

0000a7a6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    a7a6:	b510      	push	{r4, lr}
    a7a8:	7800      	ldrb	r0, [r0, #0]
    a7aa:	b100      	cbz	r0, a7ae <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    a7ac:	2001      	movs	r0, #1
    a7ae:	f7fc f995 	bl	6adc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    a7b2:	2000      	movs	r0, #0
    a7b4:	bd10      	pop	{r4, pc}

0000a7b6 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    a7b6:	f7fc bbb7 	b.w	6f28 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>

0000a7ba <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    a7ba:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a7be:	4606      	mov	r6, r0
    a7c0:	7845      	ldrb	r5, [r0, #1]
    a7c2:	7800      	ldrb	r0, [r0, #0]
    a7c4:	2101      	movs	r1, #1
    a7c6:	f7fe fdcc 	bl	9362 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a7ca:	0004      	movs	r4, r0
    a7cc:	d01e      	beq.n	a80c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    a7ce:	f7ff fa1c 	bl	9c0a <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    a7d2:	78f1      	ldrb	r1, [r6, #3]
    a7d4:	4281      	cmp	r1, r0
    a7d6:	d800      	bhi.n	a7da <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    a7d8:	4608      	mov	r0, r1
    a7da:	4607      	mov	r7, r0
    a7dc:	2d04      	cmp	r5, #4
    a7de:	d018      	beq.n	a812 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    a7e0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a7e2:	f7fe ff09 	bl	95f8 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    a7e6:	4438      	add	r0, r7
    a7e8:	b281      	uxth	r1, r0
    a7ea:	4620      	mov	r0, r4
    a7ec:	2201      	movs	r2, #1
    a7ee:	f000 f946 	bl	aa7e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x68>
    a7f2:	2800      	cmp	r0, #0
    a7f4:	d10b      	bne.n	a80e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    a7f6:	2d03      	cmp	r5, #3
    a7f8:	d000      	beq.n	a7fc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    a7fa:	b1df      	cbz	r7, a834 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    a7fc:	4620      	mov	r0, r4
    a7fe:	f7ff faa2 	bl	9d46 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a802:	7871      	ldrb	r1, [r6, #1]
    a804:	2903      	cmp	r1, #3
    a806:	d010      	beq.n	a82a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    a808:	b9a0      	cbnz	r0, a834 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    a80a:	e004      	b.n	a816 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    a80c:	2042      	movs	r0, #66	; 0x42
    a80e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a812:	b97f      	cbnz	r7, a834 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    a814:	e7f2      	b.n	a7fc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    a816:	2904      	cmp	r1, #4
    a818:	d107      	bne.n	a82a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    a81a:	4620      	mov	r0, r4
    a81c:	f7ff fc51 	bl	a0c2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a820:	b140      	cbz	r0, a834 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    a822:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a824:	f7fe feb7 	bl	9596 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    a828:	b120      	cbz	r0, a834 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    a82a:	2d01      	cmp	r5, #1
    a82c:	d004      	beq.n	a838 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    a82e:	2d03      	cmp	r5, #3
    a830:	d002      	beq.n	a838 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    a832:	e00e      	b.n	a852 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    a834:	2012      	movs	r0, #18
    a836:	e7ea      	b.n	a80e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    a838:	4620      	mov	r0, r4
    a83a:	f7ff fa84 	bl	9d46 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a83e:	b108      	cbz	r0, a844 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    a840:	2200      	movs	r2, #0
    a842:	e002      	b.n	a84a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    a844:	2d01      	cmp	r5, #1
    a846:	d013      	beq.n	a870 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    a848:	2201      	movs	r2, #1
    a84a:	4668      	mov	r0, sp
    a84c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a84e:	f7fe fe3a 	bl	94c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    a852:	2d04      	cmp	r5, #4
    a854:	d018      	beq.n	a888 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    a856:	6872      	ldr	r2, [r6, #4]
    a858:	463b      	mov	r3, r7
    a85a:	2101      	movs	r1, #1
    a85c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a85e:	f7fe fe66 	bl	952e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    a862:	b138      	cbz	r0, a874 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    a864:	7870      	ldrb	r0, [r6, #1]
    a866:	2802      	cmp	r0, #2
    a868:	d006      	beq.n	a878 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    a86a:	2803      	cmp	r0, #3
    a86c:	d004      	beq.n	a878 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    a86e:	e00b      	b.n	a888 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    a870:	2202      	movs	r2, #2
    a872:	e7ea      	b.n	a84a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    a874:	2007      	movs	r0, #7
    a876:	e7ca      	b.n	a80e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    a878:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a87a:	f7fe febd 	bl	95f8 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    a87e:	4602      	mov	r2, r0
    a880:	2101      	movs	r1, #1
    a882:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a884:	f7fe fe95 	bl	95b2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    a888:	2000      	movs	r0, #0
    a88a:	e7c0      	b.n	a80e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000a88c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    a88c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a890:	4607      	mov	r7, r0
    a892:	7845      	ldrb	r5, [r0, #1]
    a894:	78c6      	ldrb	r6, [r0, #3]
    a896:	7800      	ldrb	r0, [r0, #0]
    a898:	2101      	movs	r1, #1
    a89a:	f7fe fd62 	bl	9362 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a89e:	0004      	movs	r4, r0
    a8a0:	d003      	beq.n	a8aa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    a8a2:	f7ff fa52 	bl	9d4a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    a8a6:	b118      	cbz	r0, a8b0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    a8a8:	e003      	b.n	a8b2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    a8aa:	2042      	movs	r0, #66	; 0x42
    a8ac:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a8b0:	2600      	movs	r6, #0
    a8b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a8b4:	f7fe fea4 	bl	9600 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    a8b8:	4430      	add	r0, r6
    a8ba:	b281      	uxth	r1, r0
    a8bc:	4688      	mov	r8, r1
    a8be:	4620      	mov	r0, r4
    a8c0:	2201      	movs	r2, #1
    a8c2:	f000 f8dc 	bl	aa7e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x68>
    a8c6:	2800      	cmp	r0, #0
    a8c8:	d1f0      	bne.n	a8ac <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    a8ca:	2d04      	cmp	r5, #4
    a8cc:	d008      	beq.n	a8e0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    a8ce:	2d03      	cmp	r5, #3
    a8d0:	d00a      	beq.n	a8e8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    a8d2:	b12e      	cbz	r6, a8e0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    a8d4:	4620      	mov	r0, r4
    a8d6:	f7ff fbf4 	bl	a0c2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a8da:	b118      	cbz	r0, a8e4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    a8dc:	200c      	movs	r0, #12
    a8de:	e7e5      	b.n	a8ac <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    a8e0:	2012      	movs	r0, #18
    a8e2:	e7e3      	b.n	a8ac <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    a8e4:	2d01      	cmp	r5, #1
    a8e6:	d10c      	bne.n	a902 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    a8e8:	4620      	mov	r0, r4
    a8ea:	f7ff fa2c 	bl	9d46 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a8ee:	b108      	cbz	r0, a8f4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    a8f0:	2204      	movs	r2, #4
    a8f2:	e002      	b.n	a8fa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    a8f4:	2d01      	cmp	r5, #1
    a8f6:	d010      	beq.n	a91a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    a8f8:	2205      	movs	r2, #5
    a8fa:	4668      	mov	r0, sp
    a8fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a8fe:	f7fe fde2 	bl	94c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    a902:	687a      	ldr	r2, [r7, #4]
    a904:	4633      	mov	r3, r6
    a906:	2100      	movs	r1, #0
    a908:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a90a:	f7fe fe10 	bl	952e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    a90e:	b130      	cbz	r0, a91e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    a910:	2d02      	cmp	r5, #2
    a912:	d006      	beq.n	a922 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    a914:	2d03      	cmp	r5, #3
    a916:	d004      	beq.n	a922 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    a918:	e008      	b.n	a92c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    a91a:	2206      	movs	r2, #6
    a91c:	e7ed      	b.n	a8fa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    a91e:	2007      	movs	r0, #7
    a920:	e7c4      	b.n	a8ac <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    a922:	4642      	mov	r2, r8
    a924:	2100      	movs	r1, #0
    a926:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a928:	f7fe fe43 	bl	95b2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    a92c:	2000      	movs	r0, #0
    a92e:	e7bd      	b.n	a8ac <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000a930 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    a930:	b510      	push	{r4, lr}
    a932:	4604      	mov	r4, r0
    a934:	4601      	mov	r1, r0
    a936:	2000      	movs	r0, #0
    a938:	f7fa fcb0 	bl	529c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    a93c:	b910      	cbnz	r0, a944 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    a93e:	2000      	movs	r0, #0
    a940:	6020      	str	r0, [r4, #0]
    a942:	80a0      	strh	r0, [r4, #4]
    a944:	2000      	movs	r0, #0
    a946:	bd10      	pop	{r4, pc}

0000a948 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    a948:	b510      	push	{r4, lr}
    a94a:	f7fc fbb1 	bl	70b0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    a94e:	2000      	movs	r0, #0
    a950:	bd10      	pop	{r4, pc}

0000a952 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    a952:	f000 b860 	b.w	aa16 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000a956 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    a956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a95a:	b086      	sub	sp, #24
    a95c:	4689      	mov	r9, r1
    a95e:	4607      	mov	r7, r0
    a960:	8800      	ldrh	r0, [r0, #0]
    a962:	a901      	add	r1, sp, #4
    a964:	f7fe ff4c 	bl	9800 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a968:	2800      	cmp	r0, #0
    a96a:	d136      	bne.n	a9da <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    a96c:	9802      	ldr	r0, [sp, #8]
    a96e:	4601      	mov	r1, r0
    a970:	4688      	mov	r8, r1
    a972:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    a976:	f500 7494 	add.w	r4, r0, #296	; 0x128
    a97a:	f88d 1000 	strb.w	r1, [sp]
    a97e:	9900      	ldr	r1, [sp, #0]
    a980:	9100      	str	r1, [sp, #0]
    a982:	f89d 1000 	ldrb.w	r1, [sp]
    a986:	3080      	adds	r0, #128	; 0x80
    a988:	b109      	cbz	r1, a98e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
    a98a:	2601      	movs	r6, #1
    a98c:	e000      	b.n	a990 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
    a98e:	2600      	movs	r6, #0
    a990:	7d81      	ldrb	r1, [r0, #22]
    a992:	2923      	cmp	r1, #35	; 0x23
    a994:	d100      	bne.n	a998 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    a996:	b13e      	cbz	r6, a9a8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
    a998:	2500      	movs	r5, #0
    a99a:	3064      	adds	r0, #100	; 0x64
    a99c:	2108      	movs	r1, #8
    a99e:	4682      	mov	sl, r0
    a9a0:	f7ff fd3a 	bl	a418 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x74>
    a9a4:	b110      	cbz	r0, a9ac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
    a9a6:	e007      	b.n	a9b8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    a9a8:	2501      	movs	r5, #1
    a9aa:	e7f6      	b.n	a99a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
    a9ac:	210b      	movs	r1, #11
    a9ae:	4650      	mov	r0, sl
    a9b0:	f7ff fd32 	bl	a418 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x74>
    a9b4:	b900      	cbnz	r0, a9b8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    a9b6:	b17d      	cbz	r5, a9d8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
    a9b8:	a804      	add	r0, sp, #16
    a9ba:	9000      	str	r0, [sp, #0]
    a9bc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a9c0:	ab03      	add	r3, sp, #12
    a9c2:	463a      	mov	r2, r7
    a9c4:	4641      	mov	r1, r8
    a9c6:	f000 f93f 	bl	ac48 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x232>
    a9ca:	0005      	movs	r5, r0
    a9cc:	d105      	bne.n	a9da <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    a9ce:	340c      	adds	r4, #12
    a9d0:	20ff      	movs	r0, #255	; 0xff
    a9d2:	7060      	strb	r0, [r4, #1]
    a9d4:	b936      	cbnz	r6, a9e4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    a9d6:	e003      	b.n	a9e0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    a9d8:	201a      	movs	r0, #26
    a9da:	b006      	add	sp, #24
    a9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a9e0:	7820      	ldrb	r0, [r4, #0]
    a9e2:	b108      	cbz	r0, a9e8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
    a9e4:	253a      	movs	r5, #58	; 0x3a
    a9e6:	e012      	b.n	aa0e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
    a9e8:	f884 9000 	strb.w	r9, [r4]
    a9ec:	f89d 000c 	ldrb.w	r0, [sp, #12]
    a9f0:	70a0      	strb	r0, [r4, #2]
    a9f2:	f89d 1010 	ldrb.w	r1, [sp, #16]
    a9f6:	70e1      	strb	r1, [r4, #3]
    a9f8:	f88d 0000 	strb.w	r0, [sp]
    a9fc:	f88d 1001 	strb.w	r1, [sp, #1]
    aa00:	88b8      	ldrh	r0, [r7, #4]
    aa02:	f8ad 0002 	strh.w	r0, [sp, #2]
    aa06:	4669      	mov	r1, sp
    aa08:	4640      	mov	r0, r8
    aa0a:	f7fe ff3c 	bl	9886 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    aa0e:	2000      	movs	r0, #0
    aa10:	7060      	strb	r0, [r4, #1]
    aa12:	4628      	mov	r0, r5
    aa14:	e7e1      	b.n	a9da <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

0000aa16 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    aa16:	b510      	push	{r4, lr}
    aa18:	f7fe fe7b 	bl	9712 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    aa1c:	f7fa fcb6 	bl	538c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    aa20:	f7fc fb90 	bl	7144 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    aa24:	f7ff f844 	bl	9ab0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    aa28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aa2c:	f7fc b960 	b.w	6cf0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x40>
    aa30:	f44f 71a4 	mov.w	r1, #328	; 0x148
    aa34:	4288      	cmp	r0, r1
    aa36:	d303      	bcc.n	aa40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a>
    aa38:	f640 0148 	movw	r1, #2120	; 0x848
    aa3c:	4288      	cmp	r0, r1
    aa3e:	d300      	bcc.n	aa42 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c>
    aa40:	4608      	mov	r0, r1
    aa42:	b280      	uxth	r0, r0
    aa44:	4770      	bx	lr
    aa46:	07c1      	lsls	r1, r0, #31
    aa48:	d001      	beq.n	aa4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
    aa4a:	2001      	movs	r0, #1
    aa4c:	4770      	bx	lr
    aa4e:	0780      	lsls	r0, r0, #30
    aa50:	d501      	bpl.n	aa56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40>
    aa52:	2002      	movs	r0, #2
    aa54:	4770      	bx	lr
    aa56:	2000      	movs	r0, #0
    aa58:	4770      	bx	lr
    aa5a:	b510      	push	{r4, lr}
    aa5c:	f7fc f932 	bl	6cc4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x14>
    aa60:	b158      	cbz	r0, aa7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x64>
    aa62:	f7fc f965 	bl	6d30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x80>
    aa66:	4604      	mov	r4, r0
    aa68:	f7ff f96f 	bl	9d4a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    aa6c:	b918      	cbnz	r0, aa76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x60>
    aa6e:	4620      	mov	r0, r4
    aa70:	f7ff f961 	bl	9d36 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    aa74:	b108      	cbz	r0, aa7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x64>
    aa76:	2000      	movs	r0, #0
    aa78:	bd10      	pop	{r4, pc}
    aa7a:	2001      	movs	r0, #1
    aa7c:	bd10      	pop	{r4, pc}
    aa7e:	b570      	push	{r4, r5, r6, lr}
    aa80:	460c      	mov	r4, r1
    aa82:	4605      	mov	r5, r0
    aa84:	b112      	cbz	r2, aa8c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x76>
    aa86:	291f      	cmp	r1, #31
    aa88:	d80c      	bhi.n	aaa4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8e>
    aa8a:	e016      	b.n	aaba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    aa8c:	f7fa fac4 	bl	5018 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    aa90:	42a0      	cmp	r0, r4
    aa92:	d201      	bcs.n	aa98 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    aa94:	2007      	movs	r0, #7
    aa96:	bd70      	pop	{r4, r5, r6, pc}
    aa98:	4628      	mov	r0, r5
    aa9a:	f7ff f954 	bl	9d46 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    aa9e:	b118      	cbz	r0, aaa8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x92>
    aaa0:	2c1f      	cmp	r4, #31
    aaa2:	d901      	bls.n	aaa8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x92>
    aaa4:	2012      	movs	r0, #18
    aaa6:	bd70      	pop	{r4, r5, r6, pc}
    aaa8:	4628      	mov	r0, r5
    aaaa:	f7ff f955 	bl	9d58 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    aaae:	b130      	cbz	r0, aabe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
    aab0:	4621      	mov	r1, r4
    aab2:	4628      	mov	r0, r5
    aab4:	f7ff f91c 	bl	9cf0 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    aab8:	b118      	cbz	r0, aac2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xac>
    aaba:	2000      	movs	r0, #0
    aabc:	bd70      	pop	{r4, r5, r6, pc}
    aabe:	2042      	movs	r0, #66	; 0x42
    aac0:	bd70      	pop	{r4, r5, r6, pc}
    aac2:	2045      	movs	r0, #69	; 0x45
    aac4:	bd70      	pop	{r4, r5, r6, pc}
    aac6:	b510      	push	{r4, lr}
    aac8:	4604      	mov	r4, r0
    aaca:	7840      	ldrb	r0, [r0, #1]
    aacc:	06c1      	lsls	r1, r0, #27
    aace:	d51c      	bpl.n	ab0a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    aad0:	07c0      	lsls	r0, r0, #31
    aad2:	d00b      	beq.n	aaec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
    aad4:	f7fc fb0c 	bl	70f0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    aad8:	b1b8      	cbz	r0, ab0a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    aada:	7860      	ldrb	r0, [r4, #1]
    aadc:	06c1      	lsls	r1, r0, #27
    aade:	d405      	bmi.n	aaec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
    aae0:	0700      	lsls	r0, r0, #28
    aae2:	d503      	bpl.n	aaec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
    aae4:	7d20      	ldrb	r0, [r4, #20]
    aae6:	2802      	cmp	r0, #2
    aae8:	d10f      	bne.n	ab0a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    aaea:	e010      	b.n	ab0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf8>
    aaec:	7d20      	ldrb	r0, [r4, #20]
    aaee:	2802      	cmp	r0, #2
    aaf0:	d001      	beq.n	aaf6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    aaf2:	7ea0      	ldrb	r0, [r4, #26]
    aaf4:	b948      	cbnz	r0, ab0a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    aaf6:	7860      	ldrb	r0, [r4, #1]
    aaf8:	0700      	lsls	r0, r0, #28
    aafa:	d408      	bmi.n	ab0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf8>
    aafc:	f8d4 0005 	ldr.w	r0, [r4, #5]
    ab00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    ab04:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    ab08:	d201      	bcs.n	ab0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf8>
    ab0a:	2011      	movs	r0, #17
    ab0c:	bd10      	pop	{r4, pc}
    ab0e:	2000      	movs	r0, #0
    ab10:	bd10      	pop	{r4, pc}
    ab12:	b538      	push	{r3, r4, r5, lr}
    ab14:	4604      	mov	r4, r0
    ab16:	7800      	ldrb	r0, [r0, #0]
    ab18:	28ef      	cmp	r0, #239	; 0xef
    ab1a:	d843      	bhi.n	aba4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    ab1c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    ab20:	f8ad 0000 	strh.w	r0, [sp]
    ab24:	9800      	ldr	r0, [sp, #0]
    ab26:	f000 f8df 	bl	ace8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2d2>
    ab2a:	b3a0      	cbz	r0, ab96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    ab2c:	7861      	ldrb	r1, [r4, #1]
    ab2e:	0708      	lsls	r0, r1, #28
    ab30:	d40b      	bmi.n	ab4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x134>
    ab32:	f8d4 0002 	ldr.w	r0, [r4, #2]
    ab36:	f8d4 3005 	ldr.w	r3, [r4, #5]
    ab3a:	0a02      	lsrs	r2, r0, #8
    ab3c:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    ab40:	d830      	bhi.n	aba4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    ab42:	2220      	movs	r2, #32
    ab44:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    ab48:	d82c      	bhi.n	aba4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    ab4a:	7a60      	ldrb	r0, [r4, #9]
    ab4c:	b318      	cbz	r0, ab96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    ab4e:	2807      	cmp	r0, #7
    ab50:	d828      	bhi.n	aba4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    ab52:	7aa0      	ldrb	r0, [r4, #10]
    ab54:	b128      	cbz	r0, ab62 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14c>
    ab56:	2801      	cmp	r0, #1
    ab58:	d003      	beq.n	ab62 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14c>
    ab5a:	2802      	cmp	r0, #2
    ab5c:	d001      	beq.n	ab62 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14c>
    ab5e:	2803      	cmp	r0, #3
    ab60:	d120      	bne.n	aba4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    ab62:	074a      	lsls	r2, r1, #29
    ab64:	d403      	bmi.n	ab6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    ab66:	2802      	cmp	r0, #2
    ab68:	d001      	beq.n	ab6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    ab6a:	2803      	cmp	r0, #3
    ab6c:	d105      	bne.n	ab7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x164>
    ab6e:	7ae0      	ldrb	r0, [r4, #11]
    ab70:	b108      	cbz	r0, ab76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x160>
    ab72:	2801      	cmp	r0, #1
    ab74:	d116      	bne.n	aba4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    ab76:	0748      	lsls	r0, r1, #29
    ab78:	d407      	bmi.n	ab8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    ab7a:	7ca0      	ldrb	r0, [r4, #18]
    ab7c:	b128      	cbz	r0, ab8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    ab7e:	2801      	cmp	r0, #1
    ab80:	d003      	beq.n	ab8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    ab82:	2802      	cmp	r0, #2
    ab84:	d001      	beq.n	ab8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    ab86:	2803      	cmp	r0, #3
    ab88:	d10c      	bne.n	aba4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    ab8a:	06c8      	lsls	r0, r1, #27
    ab8c:	7d20      	ldrb	r0, [r4, #20]
    ab8e:	d503      	bpl.n	ab98 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x182>
    ab90:	2801      	cmp	r0, #1
    ab92:	d107      	bne.n	aba4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    ab94:	e002      	b.n	ab9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x186>
    ab96:	e005      	b.n	aba4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    ab98:	2802      	cmp	r0, #2
    ab9a:	d003      	beq.n	aba4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x18e>
    ab9c:	7e20      	ldrb	r0, [r4, #24]
    ab9e:	b118      	cbz	r0, aba8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x192>
    aba0:	2801      	cmp	r0, #1
    aba2:	d001      	beq.n	aba8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x192>
    aba4:	2012      	movs	r0, #18
    aba6:	bd38      	pop	{r3, r4, r5, pc}
    aba8:	2000      	movs	r0, #0
    abaa:	bd38      	pop	{r3, r4, r5, pc}
    abac:	28fb      	cmp	r0, #251	; 0xfb
    abae:	d803      	bhi.n	abb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a2>
    abb0:	f640 0048 	movw	r0, #2120	; 0x848
    abb4:	4281      	cmp	r1, r0
    abb6:	d901      	bls.n	abbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a6>
    abb8:	2011      	movs	r0, #17
    abba:	4770      	bx	lr
    abbc:	2000      	movs	r0, #0
    abbe:	4770      	bx	lr
    abc0:	381b      	subs	r0, #27
    abc2:	28e1      	cmp	r0, #225	; 0xe1
    abc4:	d206      	bcs.n	abd4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1be>
    abc6:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    abca:	d303      	bcc.n	abd4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1be>
    abcc:	f244 2090 	movw	r0, #17040	; 0x4290
    abd0:	4281      	cmp	r1, r0
    abd2:	d901      	bls.n	abd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c2>
    abd4:	2012      	movs	r0, #18
    abd6:	4770      	bx	lr
    abd8:	2000      	movs	r0, #0
    abda:	4770      	bx	lr
    abdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    abe0:	4606      	mov	r6, r0
    abe2:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    abe6:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    abea:	4615      	mov	r5, r2
    abec:	302c      	adds	r0, #44	; 0x2c
    abee:	f7fb ff7b 	bl	6ae8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
    abf2:	4680      	mov	r8, r0
    abf4:	2102      	movs	r1, #2
    abf6:	f7fe fe16 	bl	9826 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    abfa:	4287      	cmp	r7, r0
    abfc:	d200      	bcs.n	ac00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ea>
    abfe:	4638      	mov	r0, r7
    ac00:	4607      	mov	r7, r0
    ac02:	2102      	movs	r1, #2
    ac04:	4640      	mov	r0, r8
    ac06:	f7fe fe0e 	bl	9826 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ac0a:	4284      	cmp	r4, r0
    ac0c:	d200      	bcs.n	ac10 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fa>
    ac0e:	4620      	mov	r0, r4
    ac10:	8831      	ldrh	r1, [r6, #0]
    ac12:	8029      	strh	r1, [r5, #0]
    ac14:	2f1b      	cmp	r7, #27
    ac16:	d913      	bls.n	ac40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    ac18:	2ffb      	cmp	r7, #251	; 0xfb
    ac1a:	d300      	bcc.n	ac1e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x208>
    ac1c:	27fb      	movs	r7, #251	; 0xfb
    ac1e:	806f      	strh	r7, [r5, #2]
    ac20:	281b      	cmp	r0, #27
    ac22:	d90f      	bls.n	ac44 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22e>
    ac24:	28fb      	cmp	r0, #251	; 0xfb
    ac26:	d300      	bcc.n	ac2a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x214>
    ac28:	20fb      	movs	r0, #251	; 0xfb
    ac2a:	80e8      	strh	r0, [r5, #6]
    ac2c:	4640      	mov	r0, r8
    ac2e:	f7ff feff 	bl	aa30 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
    ac32:	80a8      	strh	r0, [r5, #4]
    ac34:	4640      	mov	r0, r8
    ac36:	f7ff fefb 	bl	aa30 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
    ac3a:	8128      	strh	r0, [r5, #8]
    ac3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac40:	271b      	movs	r7, #27
    ac42:	e7ec      	b.n	ac1e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x208>
    ac44:	201b      	movs	r0, #27
    ac46:	e7f0      	b.n	ac2a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x214>
    ac48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac4c:	7890      	ldrb	r0, [r2, #2]
    ac4e:	9e06      	ldr	r6, [sp, #24]
    ac50:	461d      	mov	r5, r3
    ac52:	4614      	mov	r4, r2
    ac54:	b908      	cbnz	r0, ac5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x244>
    ac56:	f7fc fa65 	bl	7124 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    ac5a:	78e4      	ldrb	r4, [r4, #3]
    ac5c:	4607      	mov	r7, r0
    ac5e:	b914      	cbnz	r4, ac66 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x250>
    ac60:	f7fc fa60 	bl	7124 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    ac64:	4604      	mov	r4, r0
    ac66:	b16f      	cbz	r7, ac84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26e>
    ac68:	b164      	cbz	r4, ac84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26e>
    ac6a:	4638      	mov	r0, r7
    ac6c:	f7ff feeb 	bl	aa46 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
    ac70:	4620      	mov	r0, r4
    ac72:	f7ff fee8 	bl	aa46 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
    ac76:	b12f      	cbz	r7, ac84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26e>
    ac78:	b124      	cbz	r4, ac84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26e>
    ac7a:	702f      	strb	r7, [r5, #0]
    ac7c:	7034      	strb	r4, [r6, #0]
    ac7e:	2000      	movs	r0, #0
    ac80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac84:	2009      	movs	r0, #9
    ac86:	e7fb      	b.n	ac80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26a>
    ac88:	207f      	movs	r0, #127	; 0x7f
    ac8a:	f000 b826 	b.w	acda <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c4>
    ac8e:	b570      	push	{r4, r5, r6, lr}
    ac90:	4605      	mov	r5, r0
    ac92:	f7ff f861 	bl	9d58 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    ac96:	b170      	cbz	r0, acb6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a0>
    ac98:	4628      	mov	r0, r5
    ac9a:	f7ff fa12 	bl	a0c2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ac9e:	2800      	cmp	r0, #0
    aca0:	d008      	beq.n	acb4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x29e>
    aca2:	4628      	mov	r0, r5
    aca4:	f7ff fa0a 	bl	a0bc <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
    aca8:	4604      	mov	r4, r0
    acaa:	4628      	mov	r0, r5
    acac:	f7ff f9e0 	bl	a070 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    acb0:	b118      	cbz	r0, acba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
    acb2:	200c      	movs	r0, #12
    acb4:	bd70      	pop	{r4, r5, r6, pc}
    acb6:	2042      	movs	r0, #66	; 0x42
    acb8:	bd70      	pop	{r4, r5, r6, pc}
    acba:	b164      	cbz	r4, acd6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c0>
    acbc:	8820      	ldrh	r0, [r4, #0]
    acbe:	f7fe fcf7 	bl	96b0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    acc2:	8820      	ldrh	r0, [r4, #0]
    acc4:	2100      	movs	r1, #0
    acc6:	f7f9 ff63 	bl	4b90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    acca:	b120      	cbz	r0, acd6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c0>
    accc:	f241 6154 	movw	r1, #5716	; 0x1654
    acd0:	2039      	movs	r0, #57	; 0x39
    acd2:	f7f9 fd23 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acd6:	2000      	movs	r0, #0
    acd8:	bd70      	pop	{r4, r5, r6, pc}
    acda:	b508      	push	{r3, lr}
    acdc:	f640 1288 	movw	r2, #2440	; 0x988
    ace0:	4669      	mov	r1, sp
    ace2:	f7f9 fbfd 	bl	44e0 <mpsl_fem_tx_power_split>
    ace6:	bd08      	pop	{r3, pc}
    ace8:	b2c0      	uxtb	r0, r0
    acea:	06c1      	lsls	r1, r0, #27
    acec:	d40c      	bmi.n	ad08 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2f2>
    acee:	0681      	lsls	r1, r0, #26
    acf0:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    acf4:	d503      	bpl.n	acfe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
    acf6:	b9d1      	cbnz	r1, ad2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    acf8:	0781      	lsls	r1, r0, #30
    acfa:	d418      	bmi.n	ad2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    acfc:	e001      	b.n	ad02 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ec>
    acfe:	2900      	cmp	r1, #0
    ad00:	d1fa      	bne.n	acf8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e2>
    ad02:	0700      	lsls	r0, r0, #28
    ad04:	d413      	bmi.n	ad2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    ad06:	e010      	b.n	ad2a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x314>
    ad08:	0641      	lsls	r1, r0, #25
    ad0a:	d410      	bmi.n	ad2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    ad0c:	0681      	lsls	r1, r0, #26
    ad0e:	d40e      	bmi.n	ad2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    ad10:	07c1      	lsls	r1, r0, #31
    ad12:	ea4f 7180 	mov.w	r1, r0, lsl #30
    ad16:	d004      	beq.n	ad22 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30c>
    ad18:	2900      	cmp	r1, #0
    ad1a:	db02      	blt.n	ad22 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30c>
    ad1c:	0740      	lsls	r0, r0, #29
    ad1e:	d404      	bmi.n	ad2a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x314>
    ad20:	e005      	b.n	ad2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    ad22:	0701      	lsls	r1, r0, #28
    ad24:	d403      	bmi.n	ad2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    ad26:	0740      	lsls	r0, r0, #29
    ad28:	d401      	bmi.n	ad2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x318>
    ad2a:	2001      	movs	r0, #1
    ad2c:	4770      	bx	lr
    ad2e:	2000      	movs	r0, #0
    ad30:	4770      	bx	lr
    ad32:	b510      	push	{r4, lr}
    ad34:	f7fb febc 	bl	6ab0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    ad38:	b110      	cbz	r0, ad40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x32a>
    ad3a:	f240 110d 	movw	r1, #269	; 0x10d
    ad3e:	e004      	b.n	ad4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x334>
    ad40:	f7fb f8e6 	bl	5f10 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    ad44:	b120      	cbz	r0, ad50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ad46:	f44f 7189 	mov.w	r1, #274	; 0x112
    ad4a:	2001      	movs	r0, #1
    ad4c:	f7f9 fce6 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad54:	2001      	movs	r0, #1
    ad56:	f7fe bae1 	b.w	931c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    ad5a:	6802      	ldr	r2, [r0, #0]
    ad5c:	b912      	cbnz	r2, ad64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x34e>
    ad5e:	6001      	str	r1, [r0, #0]
    ad60:	4770      	bx	lr
    ad62:	4602      	mov	r2, r0
    ad64:	6850      	ldr	r0, [r2, #4]
    ad66:	b108      	cbz	r0, ad6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x356>
    ad68:	428a      	cmp	r2, r1
    ad6a:	d1fa      	bne.n	ad62 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x34c>
    ad6c:	428a      	cmp	r2, r1
    ad6e:	d0f7      	beq.n	ad60 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x34a>
    ad70:	6051      	str	r1, [r2, #4]
    ad72:	4770      	bx	lr
    ad74:	b510      	push	{r4, lr}
    ad76:	4604      	mov	r4, r0
    ad78:	e002      	b.n	ad80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36a>
    ad7a:	6820      	ldr	r0, [r4, #0]
    ad7c:	4780      	blx	r0
    ad7e:	6864      	ldr	r4, [r4, #4]
    ad80:	2c00      	cmp	r4, #0
    ad82:	d1fa      	bne.n	ad7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x364>
    ad84:	bd10      	pop	{r4, pc}

0000ad86 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
    ad86:	f7f9 b911 	b.w	3fac <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    ad8a:	0001      	.short	0x0001
    ad8c:	0002000b 	.word	0x0002000b
    ad90:	0005000a 	.word	0x0005000a
    ad94:	000a0009 	.word	0x000a0009
    ad98:	00140008 	.word	0x00140008
    ad9c:	001e0007 	.word	0x001e0007
    ada0:	00320006 	.word	0x00320006
    ada4:	004b0005 	.word	0x004b0005
    ada8:	00640004 	.word	0x00640004
    adac:	00960003 	.word	0x00960003
    adb0:	00fa0002 	.word	0x00fa0002
    adb4:	01f40001 	.word	0x01f40001
	...

0000adba <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    adba:	b510      	push	{r4, lr}
    adbc:	f7fc fc16 	bl	75ec <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    adc0:	f000 f818 	bl	adf4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    adc4:	f7fc fa22 	bl	720c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    adc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    adcc:	f7fc ba88 	b.w	72e0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000add0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    add0:	b510      	push	{r4, lr}
    add2:	24c8      	movs	r4, #200	; 0xc8
    add4:	1e64      	subs	r4, r4, #1
    add6:	b2e4      	uxtb	r4, r4
    add8:	f7fc fa36 	bl	7248 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    addc:	2802      	cmp	r0, #2
    adde:	d003      	beq.n	ade8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    ade0:	2801      	cmp	r0, #1
    ade2:	d000      	beq.n	ade6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    ade4:	2000      	movs	r0, #0
    ade6:	bd10      	pop	{r4, pc}
    ade8:	2c00      	cmp	r4, #0
    adea:	d1f3      	bne.n	add4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    adec:	21b1      	movs	r1, #177	; 0xb1
    adee:	203b      	movs	r0, #59	; 0x3b
    adf0:	f7f9 fc94 	bl	471c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000adf4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    adf4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    adf8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    adfc:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    ae00:	f3bf 8f4f 	dsb	sy
    ae04:	f3bf 8f6f 	isb	sy
    ae08:	f7fc ba9e 	b.w	7348 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    ae0c:	2800      	cmp	r0, #0
    ae0e:	db09      	blt.n	ae24 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    ae10:	f000 021f 	and.w	r2, r0, #31
    ae14:	2101      	movs	r1, #1
    ae16:	4091      	lsls	r1, r2
    ae18:	0940      	lsrs	r0, r0, #5
    ae1a:	0080      	lsls	r0, r0, #2
    ae1c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ae20:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ae24:	4770      	bx	lr
    ae26:	2800      	cmp	r0, #0
    ae28:	db0d      	blt.n	ae46 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    ae2a:	f000 021f 	and.w	r2, r0, #31
    ae2e:	2101      	movs	r1, #1
    ae30:	4091      	lsls	r1, r2
    ae32:	0940      	lsrs	r0, r0, #5
    ae34:	0080      	lsls	r0, r0, #2
    ae36:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ae3a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    ae3e:	f3bf 8f4f 	dsb	sy
    ae42:	f3bf 8f6f 	isb	sy
    ae46:	4770      	bx	lr
    ae48:	5840      	ldr	r0, [r0, r1]
    ae4a:	2800      	cmp	r0, #0
    ae4c:	d000      	beq.n	ae50 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
    ae4e:	2001      	movs	r0, #1
    ae50:	4770      	bx	lr
    ae52:	5840      	ldr	r0, [r0, r1]
    ae54:	2800      	cmp	r0, #0
    ae56:	d000      	beq.n	ae5a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
    ae58:	2001      	movs	r0, #1
    ae5a:	4770      	bx	lr

0000ae5c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    ae5c:	b510      	push	{r4, lr}
    ae5e:	4604      	mov	r4, r0
    ae60:	4608      	mov	r0, r1
    ae62:	f7fc fcdd 	bl	7820 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ae66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ae6a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    ae6e:	fbb0 f0f1 	udiv	r0, r0, r1
    ae72:	1a20      	subs	r0, r4, r0
    ae74:	1e80      	subs	r0, r0, #2
    ae76:	bd10      	pop	{r4, pc}

0000ae78 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    ae78:	b510      	push	{r4, lr}
    ae7a:	4604      	mov	r4, r0
    ae7c:	4608      	mov	r0, r1
    ae7e:	f7fc fccf 	bl	7820 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ae82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ae86:	fbb0 f0f1 	udiv	r0, r0, r1
    ae8a:	1a20      	subs	r0, r4, r0
    ae8c:	bd10      	pop	{r4, pc}
    ae8e:	ecd8      	.short	0xecd8
    ae90:	fcf8f4f0 	.word	0xfcf8f4f0
    ae94:	04030200 	.word	0x04030200
    ae98:	08070605 	.word	0x08070605
	...
    aeb0:	01010101 	.word	0x01010101
    aeb4:	02020202 	.word	0x02020202
    aeb8:	03030303 	.word	0x03030303
    aebc:	04040404 	.word	0x04040404
    aec0:	05050505 	.word	0x05050505
    aec4:	08070606 	.word	0x08070606
    aec8:	0c0b0a09 	.word	0x0c0b0a09
    aecc:	0000000d 	.word	0x0000000d
	...
    aee0:	01010100 	.word	0x01010100
    aee4:	02020201 	.word	0x02020201
    aee8:	03030302 	.word	0x03030302
    aeec:	04040403 	.word	0x04040403
    aef0:	05050504 	.word	0x05050504
    aef4:	06060605 	.word	0x06060605
    aef8:	00000908 	.word	0x00000908
    aefc:	00000000 	.word	0x00000000

0000af00 <utilsVolt2Amplitude>:
static volatile uint32_t timer2DefaultPeriod;
static volatile uint32_t timer2NewPeriod;

// Convert value in volts to Amplitude FIFO code
int16_t utilsVolt2Amplitude(float volt)
{
    af00:	b508      	push	{r3, lr}
    int16_t amplitude = volt*2047/3.6/31;
    af02:	490b      	ldr	r1, [pc, #44]	; (af30 <utilsVolt2Amplitude+0x30>)
    af04:	f7f5 f8d8 	bl	b8 <__aeabi_fmul>
    af08:	f7f5 faee 	bl	4e8 <__aeabi_f2d>
    af0c:	a306      	add	r3, pc, #24	; (adr r3, af28 <utilsVolt2Amplitude+0x28>)
    af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    af12:	f7f5 fc6b 	bl	7ec <__aeabi_ddiv>
    af16:	4b07      	ldr	r3, [pc, #28]	; (af34 <utilsVolt2Amplitude+0x34>)
    af18:	2200      	movs	r2, #0
    af1a:	f7f5 fc67 	bl	7ec <__aeabi_ddiv>
    af1e:	f7f5 fd4d 	bl	9bc <__aeabi_d2iz>

    return amplitude;
}
    af22:	b200      	sxth	r0, r0
    af24:	bd08      	pop	{r3, pc}
    af26:	bf00      	nop
    af28:	cccccccd 	.word	0xcccccccd
    af2c:	400ccccc 	.word	0x400ccccc
    af30:	44ffe000 	.word	0x44ffe000
    af34:	403f0000 	.word	0x403f0000

0000af38 <__ieee754_rem_pio2>:
    af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af3c:	4bc4      	ldr	r3, [pc, #784]	; (b250 <__ieee754_rem_pio2+0x318>)
    af3e:	b08d      	sub	sp, #52	; 0x34
    af40:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
    af44:	4598      	cmp	r8, r3
    af46:	4606      	mov	r6, r0
    af48:	460f      	mov	r7, r1
    af4a:	4614      	mov	r4, r2
    af4c:	9104      	str	r1, [sp, #16]
    af4e:	d807      	bhi.n	af60 <__ieee754_rem_pio2+0x28>
    af50:	e9c2 6700 	strd	r6, r7, [r2]
    af54:	2300      	movs	r3, #0
    af56:	2200      	movs	r2, #0
    af58:	e9c4 2302 	strd	r2, r3, [r4, #8]
    af5c:	2500      	movs	r5, #0
    af5e:	e026      	b.n	afae <__ieee754_rem_pio2+0x76>
    af60:	4bbc      	ldr	r3, [pc, #752]	; (b254 <__ieee754_rem_pio2+0x31c>)
    af62:	4598      	cmp	r8, r3
    af64:	d876      	bhi.n	b054 <__ieee754_rem_pio2+0x11c>
    af66:	9b04      	ldr	r3, [sp, #16]
    af68:	4dbb      	ldr	r5, [pc, #748]	; (b258 <__ieee754_rem_pio2+0x320>)
    af6a:	2b00      	cmp	r3, #0
    af6c:	a3aa      	add	r3, pc, #680	; (adr r3, b218 <__ieee754_rem_pio2+0x2e0>)
    af6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    af72:	dd38      	ble.n	afe6 <__ieee754_rem_pio2+0xae>
    af74:	f7f5 f958 	bl	228 <__aeabi_dsub>
    af78:	45a8      	cmp	r8, r5
    af7a:	4606      	mov	r6, r0
    af7c:	460f      	mov	r7, r1
    af7e:	d01a      	beq.n	afb6 <__ieee754_rem_pio2+0x7e>
    af80:	a3a7      	add	r3, pc, #668	; (adr r3, b220 <__ieee754_rem_pio2+0x2e8>)
    af82:	e9d3 2300 	ldrd	r2, r3, [r3]
    af86:	f7f5 f94f 	bl	228 <__aeabi_dsub>
    af8a:	4602      	mov	r2, r0
    af8c:	460b      	mov	r3, r1
    af8e:	4680      	mov	r8, r0
    af90:	4689      	mov	r9, r1
    af92:	4630      	mov	r0, r6
    af94:	4639      	mov	r1, r7
    af96:	f7f5 f947 	bl	228 <__aeabi_dsub>
    af9a:	a3a1      	add	r3, pc, #644	; (adr r3, b220 <__ieee754_rem_pio2+0x2e8>)
    af9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    afa0:	f7f5 f942 	bl	228 <__aeabi_dsub>
    afa4:	e9c4 8900 	strd	r8, r9, [r4]
    afa8:	e9c4 0102 	strd	r0, r1, [r4, #8]
    afac:	2501      	movs	r5, #1
    afae:	4628      	mov	r0, r5
    afb0:	b00d      	add	sp, #52	; 0x34
    afb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afb6:	a39c      	add	r3, pc, #624	; (adr r3, b228 <__ieee754_rem_pio2+0x2f0>)
    afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
    afbc:	f7f5 f934 	bl	228 <__aeabi_dsub>
    afc0:	a39b      	add	r3, pc, #620	; (adr r3, b230 <__ieee754_rem_pio2+0x2f8>)
    afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
    afc6:	4606      	mov	r6, r0
    afc8:	460f      	mov	r7, r1
    afca:	f7f5 f92d 	bl	228 <__aeabi_dsub>
    afce:	4602      	mov	r2, r0
    afd0:	460b      	mov	r3, r1
    afd2:	4680      	mov	r8, r0
    afd4:	4689      	mov	r9, r1
    afd6:	4630      	mov	r0, r6
    afd8:	4639      	mov	r1, r7
    afda:	f7f5 f925 	bl	228 <__aeabi_dsub>
    afde:	a394      	add	r3, pc, #592	; (adr r3, b230 <__ieee754_rem_pio2+0x2f8>)
    afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
    afe4:	e7dc      	b.n	afa0 <__ieee754_rem_pio2+0x68>
    afe6:	f7f5 f921 	bl	22c <__adddf3>
    afea:	45a8      	cmp	r8, r5
    afec:	4606      	mov	r6, r0
    afee:	460f      	mov	r7, r1
    aff0:	d018      	beq.n	b024 <__ieee754_rem_pio2+0xec>
    aff2:	a38b      	add	r3, pc, #556	; (adr r3, b220 <__ieee754_rem_pio2+0x2e8>)
    aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
    aff8:	f7f5 f918 	bl	22c <__adddf3>
    affc:	4602      	mov	r2, r0
    affe:	460b      	mov	r3, r1
    b000:	4680      	mov	r8, r0
    b002:	4689      	mov	r9, r1
    b004:	4630      	mov	r0, r6
    b006:	4639      	mov	r1, r7
    b008:	f7f5 f90e 	bl	228 <__aeabi_dsub>
    b00c:	a384      	add	r3, pc, #528	; (adr r3, b220 <__ieee754_rem_pio2+0x2e8>)
    b00e:	e9d3 2300 	ldrd	r2, r3, [r3]
    b012:	f7f5 f90b 	bl	22c <__adddf3>
    b016:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    b01a:	e9c4 8900 	strd	r8, r9, [r4]
    b01e:	e9c4 0102 	strd	r0, r1, [r4, #8]
    b022:	e7c4      	b.n	afae <__ieee754_rem_pio2+0x76>
    b024:	a380      	add	r3, pc, #512	; (adr r3, b228 <__ieee754_rem_pio2+0x2f0>)
    b026:	e9d3 2300 	ldrd	r2, r3, [r3]
    b02a:	f7f5 f8ff 	bl	22c <__adddf3>
    b02e:	a380      	add	r3, pc, #512	; (adr r3, b230 <__ieee754_rem_pio2+0x2f8>)
    b030:	e9d3 2300 	ldrd	r2, r3, [r3]
    b034:	4606      	mov	r6, r0
    b036:	460f      	mov	r7, r1
    b038:	f7f5 f8f8 	bl	22c <__adddf3>
    b03c:	4602      	mov	r2, r0
    b03e:	460b      	mov	r3, r1
    b040:	4680      	mov	r8, r0
    b042:	4689      	mov	r9, r1
    b044:	4630      	mov	r0, r6
    b046:	4639      	mov	r1, r7
    b048:	f7f5 f8ee 	bl	228 <__aeabi_dsub>
    b04c:	a378      	add	r3, pc, #480	; (adr r3, b230 <__ieee754_rem_pio2+0x2f8>)
    b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
    b052:	e7de      	b.n	b012 <__ieee754_rem_pio2+0xda>
    b054:	4b81      	ldr	r3, [pc, #516]	; (b25c <__ieee754_rem_pio2+0x324>)
    b056:	4598      	cmp	r8, r3
    b058:	f200 80cf 	bhi.w	b1fa <__ieee754_rem_pio2+0x2c2>
    b05c:	f008 f95a 	bl	13314 <fabs>
    b060:	a375      	add	r3, pc, #468	; (adr r3, b238 <__ieee754_rem_pio2+0x300>)
    b062:	e9d3 2300 	ldrd	r2, r3, [r3]
    b066:	4606      	mov	r6, r0
    b068:	460f      	mov	r7, r1
    b06a:	f7f5 fa95 	bl	598 <__aeabi_dmul>
    b06e:	4b7c      	ldr	r3, [pc, #496]	; (b260 <__ieee754_rem_pio2+0x328>)
    b070:	2200      	movs	r2, #0
    b072:	f7f5 f8db 	bl	22c <__adddf3>
    b076:	f7f5 fca1 	bl	9bc <__aeabi_d2iz>
    b07a:	4605      	mov	r5, r0
    b07c:	f7f5 fa22 	bl	4c4 <__aeabi_i2d>
    b080:	4602      	mov	r2, r0
    b082:	460b      	mov	r3, r1
    b084:	e9cd 2302 	strd	r2, r3, [sp, #8]
    b088:	a363      	add	r3, pc, #396	; (adr r3, b218 <__ieee754_rem_pio2+0x2e0>)
    b08a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b08e:	f7f5 fa83 	bl	598 <__aeabi_dmul>
    b092:	4602      	mov	r2, r0
    b094:	460b      	mov	r3, r1
    b096:	4630      	mov	r0, r6
    b098:	4639      	mov	r1, r7
    b09a:	f7f5 f8c5 	bl	228 <__aeabi_dsub>
    b09e:	a360      	add	r3, pc, #384	; (adr r3, b220 <__ieee754_rem_pio2+0x2e8>)
    b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    b0a4:	4682      	mov	sl, r0
    b0a6:	468b      	mov	fp, r1
    b0a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b0ac:	f7f5 fa74 	bl	598 <__aeabi_dmul>
    b0b0:	2d1f      	cmp	r5, #31
    b0b2:	4606      	mov	r6, r0
    b0b4:	460f      	mov	r7, r1
    b0b6:	dc0c      	bgt.n	b0d2 <__ieee754_rem_pio2+0x19a>
    b0b8:	4b6a      	ldr	r3, [pc, #424]	; (b264 <__ieee754_rem_pio2+0x32c>)
    b0ba:	1e6a      	subs	r2, r5, #1
    b0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b0c0:	4543      	cmp	r3, r8
    b0c2:	d006      	beq.n	b0d2 <__ieee754_rem_pio2+0x19a>
    b0c4:	4632      	mov	r2, r6
    b0c6:	463b      	mov	r3, r7
    b0c8:	4650      	mov	r0, sl
    b0ca:	4659      	mov	r1, fp
    b0cc:	f7f5 f8ac 	bl	228 <__aeabi_dsub>
    b0d0:	e00e      	b.n	b0f0 <__ieee754_rem_pio2+0x1b8>
    b0d2:	463b      	mov	r3, r7
    b0d4:	4632      	mov	r2, r6
    b0d6:	4650      	mov	r0, sl
    b0d8:	4659      	mov	r1, fp
    b0da:	f7f5 f8a5 	bl	228 <__aeabi_dsub>
    b0de:	ea4f 5328 	mov.w	r3, r8, asr #20
    b0e2:	9305      	str	r3, [sp, #20]
    b0e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
    b0e8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
    b0ec:	2b10      	cmp	r3, #16
    b0ee:	dc02      	bgt.n	b0f6 <__ieee754_rem_pio2+0x1be>
    b0f0:	e9c4 0100 	strd	r0, r1, [r4]
    b0f4:	e039      	b.n	b16a <__ieee754_rem_pio2+0x232>
    b0f6:	a34c      	add	r3, pc, #304	; (adr r3, b228 <__ieee754_rem_pio2+0x2f0>)
    b0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    b0fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b100:	f7f5 fa4a 	bl	598 <__aeabi_dmul>
    b104:	4606      	mov	r6, r0
    b106:	460f      	mov	r7, r1
    b108:	4602      	mov	r2, r0
    b10a:	460b      	mov	r3, r1
    b10c:	4650      	mov	r0, sl
    b10e:	4659      	mov	r1, fp
    b110:	f7f5 f88a 	bl	228 <__aeabi_dsub>
    b114:	4602      	mov	r2, r0
    b116:	460b      	mov	r3, r1
    b118:	4680      	mov	r8, r0
    b11a:	4689      	mov	r9, r1
    b11c:	4650      	mov	r0, sl
    b11e:	4659      	mov	r1, fp
    b120:	f7f5 f882 	bl	228 <__aeabi_dsub>
    b124:	4632      	mov	r2, r6
    b126:	463b      	mov	r3, r7
    b128:	f7f5 f87e 	bl	228 <__aeabi_dsub>
    b12c:	a340      	add	r3, pc, #256	; (adr r3, b230 <__ieee754_rem_pio2+0x2f8>)
    b12e:	e9d3 2300 	ldrd	r2, r3, [r3]
    b132:	4606      	mov	r6, r0
    b134:	460f      	mov	r7, r1
    b136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b13a:	f7f5 fa2d 	bl	598 <__aeabi_dmul>
    b13e:	4632      	mov	r2, r6
    b140:	463b      	mov	r3, r7
    b142:	f7f5 f871 	bl	228 <__aeabi_dsub>
    b146:	4602      	mov	r2, r0
    b148:	460b      	mov	r3, r1
    b14a:	4606      	mov	r6, r0
    b14c:	460f      	mov	r7, r1
    b14e:	4640      	mov	r0, r8
    b150:	4649      	mov	r1, r9
    b152:	f7f5 f869 	bl	228 <__aeabi_dsub>
    b156:	9a05      	ldr	r2, [sp, #20]
    b158:	f3c1 530a 	ubfx	r3, r1, #20, #11
    b15c:	1ad3      	subs	r3, r2, r3
    b15e:	2b31      	cmp	r3, #49	; 0x31
    b160:	dc20      	bgt.n	b1a4 <__ieee754_rem_pio2+0x26c>
    b162:	e9c4 0100 	strd	r0, r1, [r4]
    b166:	46c2      	mov	sl, r8
    b168:	46cb      	mov	fp, r9
    b16a:	e9d4 8900 	ldrd	r8, r9, [r4]
    b16e:	4650      	mov	r0, sl
    b170:	4642      	mov	r2, r8
    b172:	464b      	mov	r3, r9
    b174:	4659      	mov	r1, fp
    b176:	f7f5 f857 	bl	228 <__aeabi_dsub>
    b17a:	463b      	mov	r3, r7
    b17c:	4632      	mov	r2, r6
    b17e:	f7f5 f853 	bl	228 <__aeabi_dsub>
    b182:	9b04      	ldr	r3, [sp, #16]
    b184:	2b00      	cmp	r3, #0
    b186:	e9c4 0102 	strd	r0, r1, [r4, #8]
    b18a:	f6bf af10 	bge.w	afae <__ieee754_rem_pio2+0x76>
    b18e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    b192:	6063      	str	r3, [r4, #4]
    b194:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    b198:	f8c4 8000 	str.w	r8, [r4]
    b19c:	60a0      	str	r0, [r4, #8]
    b19e:	60e3      	str	r3, [r4, #12]
    b1a0:	426d      	negs	r5, r5
    b1a2:	e704      	b.n	afae <__ieee754_rem_pio2+0x76>
    b1a4:	a326      	add	r3, pc, #152	; (adr r3, b240 <__ieee754_rem_pio2+0x308>)
    b1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    b1aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b1ae:	f7f5 f9f3 	bl	598 <__aeabi_dmul>
    b1b2:	4606      	mov	r6, r0
    b1b4:	460f      	mov	r7, r1
    b1b6:	4602      	mov	r2, r0
    b1b8:	460b      	mov	r3, r1
    b1ba:	4640      	mov	r0, r8
    b1bc:	4649      	mov	r1, r9
    b1be:	f7f5 f833 	bl	228 <__aeabi_dsub>
    b1c2:	4602      	mov	r2, r0
    b1c4:	460b      	mov	r3, r1
    b1c6:	4682      	mov	sl, r0
    b1c8:	468b      	mov	fp, r1
    b1ca:	4640      	mov	r0, r8
    b1cc:	4649      	mov	r1, r9
    b1ce:	f7f5 f82b 	bl	228 <__aeabi_dsub>
    b1d2:	4632      	mov	r2, r6
    b1d4:	463b      	mov	r3, r7
    b1d6:	f7f5 f827 	bl	228 <__aeabi_dsub>
    b1da:	a31b      	add	r3, pc, #108	; (adr r3, b248 <__ieee754_rem_pio2+0x310>)
    b1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    b1e0:	4606      	mov	r6, r0
    b1e2:	460f      	mov	r7, r1
    b1e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b1e8:	f7f5 f9d6 	bl	598 <__aeabi_dmul>
    b1ec:	4632      	mov	r2, r6
    b1ee:	463b      	mov	r3, r7
    b1f0:	f7f5 f81a 	bl	228 <__aeabi_dsub>
    b1f4:	4606      	mov	r6, r0
    b1f6:	460f      	mov	r7, r1
    b1f8:	e764      	b.n	b0c4 <__ieee754_rem_pio2+0x18c>
    b1fa:	4b1b      	ldr	r3, [pc, #108]	; (b268 <__ieee754_rem_pio2+0x330>)
    b1fc:	4598      	cmp	r8, r3
    b1fe:	d935      	bls.n	b26c <__ieee754_rem_pio2+0x334>
    b200:	4602      	mov	r2, r0
    b202:	460b      	mov	r3, r1
    b204:	f7f5 f810 	bl	228 <__aeabi_dsub>
    b208:	e9c4 0102 	strd	r0, r1, [r4, #8]
    b20c:	e9c4 0100 	strd	r0, r1, [r4]
    b210:	e6a4      	b.n	af5c <__ieee754_rem_pio2+0x24>
    b212:	bf00      	nop
    b214:	f3af 8000 	nop.w
    b218:	54400000 	.word	0x54400000
    b21c:	3ff921fb 	.word	0x3ff921fb
    b220:	1a626331 	.word	0x1a626331
    b224:	3dd0b461 	.word	0x3dd0b461
    b228:	1a600000 	.word	0x1a600000
    b22c:	3dd0b461 	.word	0x3dd0b461
    b230:	2e037073 	.word	0x2e037073
    b234:	3ba3198a 	.word	0x3ba3198a
    b238:	6dc9c883 	.word	0x6dc9c883
    b23c:	3fe45f30 	.word	0x3fe45f30
    b240:	2e000000 	.word	0x2e000000
    b244:	3ba3198a 	.word	0x3ba3198a
    b248:	252049c1 	.word	0x252049c1
    b24c:	397b839a 	.word	0x397b839a
    b250:	3fe921fb 	.word	0x3fe921fb
    b254:	4002d97b 	.word	0x4002d97b
    b258:	3ff921fb 	.word	0x3ff921fb
    b25c:	413921fb 	.word	0x413921fb
    b260:	3fe00000 	.word	0x3fe00000
    b264:	000137cc 	.word	0x000137cc
    b268:	7fefffff 	.word	0x7fefffff
    b26c:	ea4f 5528 	mov.w	r5, r8, asr #20
    b270:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
    b274:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
    b278:	460f      	mov	r7, r1
    b27a:	f7f5 fb9f 	bl	9bc <__aeabi_d2iz>
    b27e:	f7f5 f921 	bl	4c4 <__aeabi_i2d>
    b282:	4602      	mov	r2, r0
    b284:	460b      	mov	r3, r1
    b286:	4630      	mov	r0, r6
    b288:	4639      	mov	r1, r7
    b28a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b28e:	f7f4 ffcb 	bl	228 <__aeabi_dsub>
    b292:	4b22      	ldr	r3, [pc, #136]	; (b31c <__ieee754_rem_pio2+0x3e4>)
    b294:	2200      	movs	r2, #0
    b296:	f7f5 f97f 	bl	598 <__aeabi_dmul>
    b29a:	460f      	mov	r7, r1
    b29c:	4606      	mov	r6, r0
    b29e:	f7f5 fb8d 	bl	9bc <__aeabi_d2iz>
    b2a2:	f7f5 f90f 	bl	4c4 <__aeabi_i2d>
    b2a6:	4602      	mov	r2, r0
    b2a8:	460b      	mov	r3, r1
    b2aa:	4630      	mov	r0, r6
    b2ac:	4639      	mov	r1, r7
    b2ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
    b2b2:	f7f4 ffb9 	bl	228 <__aeabi_dsub>
    b2b6:	4b19      	ldr	r3, [pc, #100]	; (b31c <__ieee754_rem_pio2+0x3e4>)
    b2b8:	2200      	movs	r2, #0
    b2ba:	f7f5 f96d 	bl	598 <__aeabi_dmul>
    b2be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    b2c2:	f10d 0930 	add.w	r9, sp, #48	; 0x30
    b2c6:	f04f 0803 	mov.w	r8, #3
    b2ca:	2600      	movs	r6, #0
    b2cc:	2700      	movs	r7, #0
    b2ce:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
    b2d2:	4632      	mov	r2, r6
    b2d4:	463b      	mov	r3, r7
    b2d6:	46c2      	mov	sl, r8
    b2d8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    b2dc:	f7f5 fc56 	bl	b8c <__aeabi_dcmpeq>
    b2e0:	2800      	cmp	r0, #0
    b2e2:	d1f4      	bne.n	b2ce <__ieee754_rem_pio2+0x396>
    b2e4:	4b0e      	ldr	r3, [pc, #56]	; (b320 <__ieee754_rem_pio2+0x3e8>)
    b2e6:	9301      	str	r3, [sp, #4]
    b2e8:	2302      	movs	r3, #2
    b2ea:	9300      	str	r3, [sp, #0]
    b2ec:	462a      	mov	r2, r5
    b2ee:	4653      	mov	r3, sl
    b2f0:	4621      	mov	r1, r4
    b2f2:	a806      	add	r0, sp, #24
    b2f4:	f006 f9ca 	bl	1168c <__kernel_rem_pio2>
    b2f8:	9b04      	ldr	r3, [sp, #16]
    b2fa:	2b00      	cmp	r3, #0
    b2fc:	4605      	mov	r5, r0
    b2fe:	f6bf ae56 	bge.w	afae <__ieee754_rem_pio2+0x76>
    b302:	e9d4 2100 	ldrd	r2, r1, [r4]
    b306:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    b30a:	e9c4 2300 	strd	r2, r3, [r4]
    b30e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
    b312:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    b316:	e9c4 2302 	strd	r2, r3, [r4, #8]
    b31a:	e741      	b.n	b1a0 <__ieee754_rem_pio2+0x268>
    b31c:	41700000 	.word	0x41700000
    b320:	0001384c 	.word	0x0001384c
    b324:	00000000 	.word	0x00000000

0000b328 <__kernel_cos>:
    b328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b32c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    b330:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
    b334:	e9cd 2300 	strd	r2, r3, [sp]
    b338:	4680      	mov	r8, r0
    b33a:	4689      	mov	r9, r1
    b33c:	d204      	bcs.n	b348 <__kernel_cos+0x20>
    b33e:	f7f5 fb3d 	bl	9bc <__aeabi_d2iz>
    b342:	2800      	cmp	r0, #0
    b344:	f000 8086 	beq.w	b454 <__kernel_cos+0x12c>
    b348:	4642      	mov	r2, r8
    b34a:	464b      	mov	r3, r9
    b34c:	4640      	mov	r0, r8
    b34e:	4649      	mov	r1, r9
    b350:	f7f5 f922 	bl	598 <__aeabi_dmul>
    b354:	4b4e      	ldr	r3, [pc, #312]	; (b490 <__kernel_cos+0x168>)
    b356:	2200      	movs	r2, #0
    b358:	4604      	mov	r4, r0
    b35a:	460d      	mov	r5, r1
    b35c:	f7f5 f91c 	bl	598 <__aeabi_dmul>
    b360:	a33f      	add	r3, pc, #252	; (adr r3, b460 <__kernel_cos+0x138>)
    b362:	e9d3 2300 	ldrd	r2, r3, [r3]
    b366:	4682      	mov	sl, r0
    b368:	468b      	mov	fp, r1
    b36a:	4620      	mov	r0, r4
    b36c:	4629      	mov	r1, r5
    b36e:	f7f5 f913 	bl	598 <__aeabi_dmul>
    b372:	a33d      	add	r3, pc, #244	; (adr r3, b468 <__kernel_cos+0x140>)
    b374:	e9d3 2300 	ldrd	r2, r3, [r3]
    b378:	f7f4 ff58 	bl	22c <__adddf3>
    b37c:	4622      	mov	r2, r4
    b37e:	462b      	mov	r3, r5
    b380:	f7f5 f90a 	bl	598 <__aeabi_dmul>
    b384:	a33a      	add	r3, pc, #232	; (adr r3, b470 <__kernel_cos+0x148>)
    b386:	e9d3 2300 	ldrd	r2, r3, [r3]
    b38a:	f7f4 ff4d 	bl	228 <__aeabi_dsub>
    b38e:	4622      	mov	r2, r4
    b390:	462b      	mov	r3, r5
    b392:	f7f5 f901 	bl	598 <__aeabi_dmul>
    b396:	a338      	add	r3, pc, #224	; (adr r3, b478 <__kernel_cos+0x150>)
    b398:	e9d3 2300 	ldrd	r2, r3, [r3]
    b39c:	f7f4 ff46 	bl	22c <__adddf3>
    b3a0:	4622      	mov	r2, r4
    b3a2:	462b      	mov	r3, r5
    b3a4:	f7f5 f8f8 	bl	598 <__aeabi_dmul>
    b3a8:	a335      	add	r3, pc, #212	; (adr r3, b480 <__kernel_cos+0x158>)
    b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    b3ae:	f7f4 ff3b 	bl	228 <__aeabi_dsub>
    b3b2:	4622      	mov	r2, r4
    b3b4:	462b      	mov	r3, r5
    b3b6:	f7f5 f8ef 	bl	598 <__aeabi_dmul>
    b3ba:	a333      	add	r3, pc, #204	; (adr r3, b488 <__kernel_cos+0x160>)
    b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    b3c0:	f7f4 ff34 	bl	22c <__adddf3>
    b3c4:	4622      	mov	r2, r4
    b3c6:	462b      	mov	r3, r5
    b3c8:	f7f5 f8e6 	bl	598 <__aeabi_dmul>
    b3cc:	4622      	mov	r2, r4
    b3ce:	462b      	mov	r3, r5
    b3d0:	f7f5 f8e2 	bl	598 <__aeabi_dmul>
    b3d4:	e9dd 2300 	ldrd	r2, r3, [sp]
    b3d8:	4604      	mov	r4, r0
    b3da:	460d      	mov	r5, r1
    b3dc:	4640      	mov	r0, r8
    b3de:	4649      	mov	r1, r9
    b3e0:	f7f5 f8da 	bl	598 <__aeabi_dmul>
    b3e4:	460b      	mov	r3, r1
    b3e6:	4602      	mov	r2, r0
    b3e8:	4629      	mov	r1, r5
    b3ea:	4620      	mov	r0, r4
    b3ec:	f7f4 ff1c 	bl	228 <__aeabi_dsub>
    b3f0:	4b28      	ldr	r3, [pc, #160]	; (b494 <__kernel_cos+0x16c>)
    b3f2:	429e      	cmp	r6, r3
    b3f4:	4680      	mov	r8, r0
    b3f6:	4689      	mov	r9, r1
    b3f8:	d80e      	bhi.n	b418 <__kernel_cos+0xf0>
    b3fa:	4602      	mov	r2, r0
    b3fc:	460b      	mov	r3, r1
    b3fe:	4650      	mov	r0, sl
    b400:	4659      	mov	r1, fp
    b402:	f7f4 ff11 	bl	228 <__aeabi_dsub>
    b406:	460b      	mov	r3, r1
    b408:	4923      	ldr	r1, [pc, #140]	; (b498 <__kernel_cos+0x170>)
    b40a:	4602      	mov	r2, r0
    b40c:	2000      	movs	r0, #0
    b40e:	f7f4 ff0b 	bl	228 <__aeabi_dsub>
    b412:	b003      	add	sp, #12
    b414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b418:	4b20      	ldr	r3, [pc, #128]	; (b49c <__kernel_cos+0x174>)
    b41a:	491f      	ldr	r1, [pc, #124]	; (b498 <__kernel_cos+0x170>)
    b41c:	429e      	cmp	r6, r3
    b41e:	bf8c      	ite	hi
    b420:	4d1f      	ldrhi	r5, [pc, #124]	; (b4a0 <__kernel_cos+0x178>)
    b422:	f5a6 1500 	subls.w	r5, r6, #2097152	; 0x200000
    b426:	2400      	movs	r4, #0
    b428:	4622      	mov	r2, r4
    b42a:	462b      	mov	r3, r5
    b42c:	2000      	movs	r0, #0
    b42e:	f7f4 fefb 	bl	228 <__aeabi_dsub>
    b432:	4622      	mov	r2, r4
    b434:	4606      	mov	r6, r0
    b436:	460f      	mov	r7, r1
    b438:	462b      	mov	r3, r5
    b43a:	4650      	mov	r0, sl
    b43c:	4659      	mov	r1, fp
    b43e:	f7f4 fef3 	bl	228 <__aeabi_dsub>
    b442:	4642      	mov	r2, r8
    b444:	464b      	mov	r3, r9
    b446:	f7f4 feef 	bl	228 <__aeabi_dsub>
    b44a:	4602      	mov	r2, r0
    b44c:	460b      	mov	r3, r1
    b44e:	4630      	mov	r0, r6
    b450:	4639      	mov	r1, r7
    b452:	e7dc      	b.n	b40e <__kernel_cos+0xe6>
    b454:	4910      	ldr	r1, [pc, #64]	; (b498 <__kernel_cos+0x170>)
    b456:	2000      	movs	r0, #0
    b458:	e7db      	b.n	b412 <__kernel_cos+0xea>
    b45a:	bf00      	nop
    b45c:	f3af 8000 	nop.w
    b460:	be8838d4 	.word	0xbe8838d4
    b464:	bda8fae9 	.word	0xbda8fae9
    b468:	bdb4b1c4 	.word	0xbdb4b1c4
    b46c:	3e21ee9e 	.word	0x3e21ee9e
    b470:	809c52ad 	.word	0x809c52ad
    b474:	3e927e4f 	.word	0x3e927e4f
    b478:	19cb1590 	.word	0x19cb1590
    b47c:	3efa01a0 	.word	0x3efa01a0
    b480:	16c15177 	.word	0x16c15177
    b484:	3f56c16c 	.word	0x3f56c16c
    b488:	5555554c 	.word	0x5555554c
    b48c:	3fa55555 	.word	0x3fa55555
    b490:	3fe00000 	.word	0x3fe00000
    b494:	3fd33332 	.word	0x3fd33332
    b498:	3ff00000 	.word	0x3ff00000
    b49c:	3fe90000 	.word	0x3fe90000
    b4a0:	3fd20000 	.word	0x3fd20000
    b4a4:	00000000 	.word	0x00000000

0000b4a8 <__kernel_sin>:
    b4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4ac:	461f      	mov	r7, r3
    b4ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    b4b2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    b4b6:	b085      	sub	sp, #20
    b4b8:	4604      	mov	r4, r0
    b4ba:	460d      	mov	r5, r1
    b4bc:	4616      	mov	r6, r2
    b4be:	d203      	bcs.n	b4c8 <__kernel_sin+0x20>
    b4c0:	f7f5 fa7c 	bl	9bc <__aeabi_d2iz>
    b4c4:	2800      	cmp	r0, #0
    b4c6:	d051      	beq.n	b56c <__kernel_sin+0xc4>
    b4c8:	4622      	mov	r2, r4
    b4ca:	462b      	mov	r3, r5
    b4cc:	4620      	mov	r0, r4
    b4ce:	4629      	mov	r1, r5
    b4d0:	f7f5 f862 	bl	598 <__aeabi_dmul>
    b4d4:	4682      	mov	sl, r0
    b4d6:	468b      	mov	fp, r1
    b4d8:	4602      	mov	r2, r0
    b4da:	460b      	mov	r3, r1
    b4dc:	4620      	mov	r0, r4
    b4de:	4629      	mov	r1, r5
    b4e0:	f7f5 f85a 	bl	598 <__aeabi_dmul>
    b4e4:	a33e      	add	r3, pc, #248	; (adr r3, b5e0 <__kernel_sin+0x138>)
    b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    b4ea:	4680      	mov	r8, r0
    b4ec:	4689      	mov	r9, r1
    b4ee:	4650      	mov	r0, sl
    b4f0:	4659      	mov	r1, fp
    b4f2:	f7f5 f851 	bl	598 <__aeabi_dmul>
    b4f6:	a33c      	add	r3, pc, #240	; (adr r3, b5e8 <__kernel_sin+0x140>)
    b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    b4fc:	f7f4 fe94 	bl	228 <__aeabi_dsub>
    b500:	4652      	mov	r2, sl
    b502:	465b      	mov	r3, fp
    b504:	f7f5 f848 	bl	598 <__aeabi_dmul>
    b508:	a339      	add	r3, pc, #228	; (adr r3, b5f0 <__kernel_sin+0x148>)
    b50a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b50e:	f7f4 fe8d 	bl	22c <__adddf3>
    b512:	4652      	mov	r2, sl
    b514:	465b      	mov	r3, fp
    b516:	f7f5 f83f 	bl	598 <__aeabi_dmul>
    b51a:	a337      	add	r3, pc, #220	; (adr r3, b5f8 <__kernel_sin+0x150>)
    b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
    b520:	f7f4 fe82 	bl	228 <__aeabi_dsub>
    b524:	4652      	mov	r2, sl
    b526:	465b      	mov	r3, fp
    b528:	f7f5 f836 	bl	598 <__aeabi_dmul>
    b52c:	a334      	add	r3, pc, #208	; (adr r3, b600 <__kernel_sin+0x158>)
    b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
    b532:	f7f4 fe7b 	bl	22c <__adddf3>
    b536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b538:	e9cd 0100 	strd	r0, r1, [sp]
    b53c:	b9db      	cbnz	r3, b576 <__kernel_sin+0xce>
    b53e:	4602      	mov	r2, r0
    b540:	460b      	mov	r3, r1
    b542:	4650      	mov	r0, sl
    b544:	4659      	mov	r1, fp
    b546:	f7f5 f827 	bl	598 <__aeabi_dmul>
    b54a:	a32f      	add	r3, pc, #188	; (adr r3, b608 <__kernel_sin+0x160>)
    b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
    b550:	f7f4 fe6a 	bl	228 <__aeabi_dsub>
    b554:	4642      	mov	r2, r8
    b556:	464b      	mov	r3, r9
    b558:	f7f5 f81e 	bl	598 <__aeabi_dmul>
    b55c:	4602      	mov	r2, r0
    b55e:	460b      	mov	r3, r1
    b560:	4620      	mov	r0, r4
    b562:	4629      	mov	r1, r5
    b564:	f7f4 fe62 	bl	22c <__adddf3>
    b568:	4604      	mov	r4, r0
    b56a:	460d      	mov	r5, r1
    b56c:	4620      	mov	r0, r4
    b56e:	4629      	mov	r1, r5
    b570:	b005      	add	sp, #20
    b572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b576:	4b26      	ldr	r3, [pc, #152]	; (b610 <__kernel_sin+0x168>)
    b578:	2200      	movs	r2, #0
    b57a:	4630      	mov	r0, r6
    b57c:	4639      	mov	r1, r7
    b57e:	f7f5 f80b 	bl	598 <__aeabi_dmul>
    b582:	e9dd 2300 	ldrd	r2, r3, [sp]
    b586:	e9cd 0102 	strd	r0, r1, [sp, #8]
    b58a:	4640      	mov	r0, r8
    b58c:	4649      	mov	r1, r9
    b58e:	f7f5 f803 	bl	598 <__aeabi_dmul>
    b592:	4602      	mov	r2, r0
    b594:	460b      	mov	r3, r1
    b596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b59a:	f7f4 fe45 	bl	228 <__aeabi_dsub>
    b59e:	4652      	mov	r2, sl
    b5a0:	465b      	mov	r3, fp
    b5a2:	f7f4 fff9 	bl	598 <__aeabi_dmul>
    b5a6:	4632      	mov	r2, r6
    b5a8:	463b      	mov	r3, r7
    b5aa:	f7f4 fe3d 	bl	228 <__aeabi_dsub>
    b5ae:	a316      	add	r3, pc, #88	; (adr r3, b608 <__kernel_sin+0x160>)
    b5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    b5b4:	4606      	mov	r6, r0
    b5b6:	460f      	mov	r7, r1
    b5b8:	4640      	mov	r0, r8
    b5ba:	4649      	mov	r1, r9
    b5bc:	f7f4 ffec 	bl	598 <__aeabi_dmul>
    b5c0:	4602      	mov	r2, r0
    b5c2:	460b      	mov	r3, r1
    b5c4:	4630      	mov	r0, r6
    b5c6:	4639      	mov	r1, r7
    b5c8:	f7f4 fe30 	bl	22c <__adddf3>
    b5cc:	4602      	mov	r2, r0
    b5ce:	460b      	mov	r3, r1
    b5d0:	4620      	mov	r0, r4
    b5d2:	4629      	mov	r1, r5
    b5d4:	f7f4 fe28 	bl	228 <__aeabi_dsub>
    b5d8:	e7c6      	b.n	b568 <__kernel_sin+0xc0>
    b5da:	bf00      	nop
    b5dc:	f3af 8000 	nop.w
    b5e0:	5acfd57c 	.word	0x5acfd57c
    b5e4:	3de5d93a 	.word	0x3de5d93a
    b5e8:	8a2b9ceb 	.word	0x8a2b9ceb
    b5ec:	3e5ae5e6 	.word	0x3e5ae5e6
    b5f0:	57b1fe7d 	.word	0x57b1fe7d
    b5f4:	3ec71de3 	.word	0x3ec71de3
    b5f8:	19c161d5 	.word	0x19c161d5
    b5fc:	3f2a01a0 	.word	0x3f2a01a0
    b600:	1110f8a6 	.word	0x1110f8a6
    b604:	3f811111 	.word	0x3f811111
    b608:	55555549 	.word	0x55555549
    b60c:	3fc55555 	.word	0x3fc55555
    b610:	3fe00000 	.word	0x3fe00000
    b614:	00000000 	.word	0x00000000

0000b618 <floor>:
    b618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b61c:	f3c1 570a 	ubfx	r7, r1, #20, #11
    b620:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
    b624:	2e13      	cmp	r6, #19
    b626:	4602      	mov	r2, r0
    b628:	460b      	mov	r3, r1
    b62a:	460c      	mov	r4, r1
    b62c:	4605      	mov	r5, r0
    b62e:	4680      	mov	r8, r0
    b630:	dc35      	bgt.n	b69e <floor+0x86>
    b632:	2e00      	cmp	r6, #0
    b634:	da17      	bge.n	b666 <floor+0x4e>
    b636:	a334      	add	r3, pc, #208	; (adr r3, b708 <floor+0xf0>)
    b638:	e9d3 2300 	ldrd	r2, r3, [r3]
    b63c:	f7f4 fdf6 	bl	22c <__adddf3>
    b640:	2200      	movs	r2, #0
    b642:	2300      	movs	r3, #0
    b644:	f7f5 faca 	bl	bdc <__aeabi_dcmpgt>
    b648:	b150      	cbz	r0, b660 <floor+0x48>
    b64a:	2c00      	cmp	r4, #0
    b64c:	da57      	bge.n	b6fe <floor+0xe6>
    b64e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    b652:	432c      	orrs	r4, r5
    b654:	2500      	movs	r5, #0
    b656:	42ac      	cmp	r4, r5
    b658:	4c2d      	ldr	r4, [pc, #180]	; (b710 <floor+0xf8>)
    b65a:	bf08      	it	eq
    b65c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
    b660:	4623      	mov	r3, r4
    b662:	462a      	mov	r2, r5
    b664:	e024      	b.n	b6b0 <floor+0x98>
    b666:	4f2b      	ldr	r7, [pc, #172]	; (b714 <floor+0xfc>)
    b668:	4137      	asrs	r7, r6
    b66a:	ea01 0c07 	and.w	ip, r1, r7
    b66e:	ea5c 0c00 	orrs.w	ip, ip, r0
    b672:	d01d      	beq.n	b6b0 <floor+0x98>
    b674:	a324      	add	r3, pc, #144	; (adr r3, b708 <floor+0xf0>)
    b676:	e9d3 2300 	ldrd	r2, r3, [r3]
    b67a:	f7f4 fdd7 	bl	22c <__adddf3>
    b67e:	2200      	movs	r2, #0
    b680:	2300      	movs	r3, #0
    b682:	f7f5 faab 	bl	bdc <__aeabi_dcmpgt>
    b686:	2800      	cmp	r0, #0
    b688:	d0ea      	beq.n	b660 <floor+0x48>
    b68a:	2c00      	cmp	r4, #0
    b68c:	bfbe      	ittt	lt
    b68e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
    b692:	4133      	asrlt	r3, r6
    b694:	18e4      	addlt	r4, r4, r3
    b696:	ea24 0407 	bic.w	r4, r4, r7
    b69a:	2500      	movs	r5, #0
    b69c:	e7e0      	b.n	b660 <floor+0x48>
    b69e:	2e33      	cmp	r6, #51	; 0x33
    b6a0:	dd0a      	ble.n	b6b8 <floor+0xa0>
    b6a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    b6a6:	d103      	bne.n	b6b0 <floor+0x98>
    b6a8:	f7f4 fdc0 	bl	22c <__adddf3>
    b6ac:	4602      	mov	r2, r0
    b6ae:	460b      	mov	r3, r1
    b6b0:	4610      	mov	r0, r2
    b6b2:	4619      	mov	r1, r3
    b6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b6b8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    b6bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    b6c0:	fa2c f707 	lsr.w	r7, ip, r7
    b6c4:	4207      	tst	r7, r0
    b6c6:	d0f3      	beq.n	b6b0 <floor+0x98>
    b6c8:	a30f      	add	r3, pc, #60	; (adr r3, b708 <floor+0xf0>)
    b6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    b6ce:	f7f4 fdad 	bl	22c <__adddf3>
    b6d2:	2200      	movs	r2, #0
    b6d4:	2300      	movs	r3, #0
    b6d6:	f7f5 fa81 	bl	bdc <__aeabi_dcmpgt>
    b6da:	2800      	cmp	r0, #0
    b6dc:	d0c0      	beq.n	b660 <floor+0x48>
    b6de:	2c00      	cmp	r4, #0
    b6e0:	da0a      	bge.n	b6f8 <floor+0xe0>
    b6e2:	2e14      	cmp	r6, #20
    b6e4:	d101      	bne.n	b6ea <floor+0xd2>
    b6e6:	3401      	adds	r4, #1
    b6e8:	e006      	b.n	b6f8 <floor+0xe0>
    b6ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
    b6ee:	2301      	movs	r3, #1
    b6f0:	40b3      	lsls	r3, r6
    b6f2:	441d      	add	r5, r3
    b6f4:	4545      	cmp	r5, r8
    b6f6:	d3f6      	bcc.n	b6e6 <floor+0xce>
    b6f8:	ea25 0507 	bic.w	r5, r5, r7
    b6fc:	e7b0      	b.n	b660 <floor+0x48>
    b6fe:	2500      	movs	r5, #0
    b700:	462c      	mov	r4, r5
    b702:	e7ad      	b.n	b660 <floor+0x48>
    b704:	f3af 8000 	nop.w
    b708:	8800759c 	.word	0x8800759c
    b70c:	7e37e43c 	.word	0x7e37e43c
    b710:	bff00000 	.word	0xbff00000
    b714:	000fffff 	.word	0x000fffff

0000b718 <scalbn>:
    b718:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    b71c:	4616      	mov	r6, r2
    b71e:	f3c1 520a 	ubfx	r2, r1, #20, #11
    b722:	4683      	mov	fp, r0
    b724:	468c      	mov	ip, r1
    b726:	460b      	mov	r3, r1
    b728:	b982      	cbnz	r2, b74c <scalbn+0x34>
    b72a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    b72e:	4303      	orrs	r3, r0
    b730:	d035      	beq.n	b79e <scalbn+0x86>
    b732:	4b2d      	ldr	r3, [pc, #180]	; (b7e8 <scalbn+0xd0>)
    b734:	2200      	movs	r2, #0
    b736:	f7f4 ff2f 	bl	598 <__aeabi_dmul>
    b73a:	4b2c      	ldr	r3, [pc, #176]	; (b7ec <scalbn+0xd4>)
    b73c:	429e      	cmp	r6, r3
    b73e:	4683      	mov	fp, r0
    b740:	468c      	mov	ip, r1
    b742:	da0d      	bge.n	b760 <scalbn+0x48>
    b744:	a324      	add	r3, pc, #144	; (adr r3, b7d8 <scalbn+0xc0>)
    b746:	e9d3 2300 	ldrd	r2, r3, [r3]
    b74a:	e01c      	b.n	b786 <scalbn+0x6e>
    b74c:	f240 77ff 	movw	r7, #2047	; 0x7ff
    b750:	42ba      	cmp	r2, r7
    b752:	d109      	bne.n	b768 <scalbn+0x50>
    b754:	4602      	mov	r2, r0
    b756:	f7f4 fd69 	bl	22c <__adddf3>
    b75a:	4683      	mov	fp, r0
    b75c:	468c      	mov	ip, r1
    b75e:	e01e      	b.n	b79e <scalbn+0x86>
    b760:	f3c1 520a 	ubfx	r2, r1, #20, #11
    b764:	460b      	mov	r3, r1
    b766:	3a36      	subs	r2, #54	; 0x36
    b768:	4432      	add	r2, r6
    b76a:	f240 71fe 	movw	r1, #2046	; 0x7fe
    b76e:	428a      	cmp	r2, r1
    b770:	dd0c      	ble.n	b78c <scalbn+0x74>
    b772:	a31b      	add	r3, pc, #108	; (adr r3, b7e0 <scalbn+0xc8>)
    b774:	e9d3 2300 	ldrd	r2, r3, [r3]
    b778:	ea4f 71dc 	mov.w	r1, ip, lsr #31
    b77c:	461c      	mov	r4, r3
    b77e:	f361 74df 	bfi	r4, r1, #31, #1
    b782:	481b      	ldr	r0, [pc, #108]	; (b7f0 <scalbn+0xd8>)
    b784:	4621      	mov	r1, r4
    b786:	f7f4 ff07 	bl	598 <__aeabi_dmul>
    b78a:	e7e6      	b.n	b75a <scalbn+0x42>
    b78c:	2a00      	cmp	r2, #0
    b78e:	dd0a      	ble.n	b7a6 <scalbn+0x8e>
    b790:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    b794:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    b798:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
    b79c:	46ac      	mov	ip, r5
    b79e:	4658      	mov	r0, fp
    b7a0:	4661      	mov	r1, ip
    b7a2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
    b7a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
    b7aa:	da09      	bge.n	b7c0 <scalbn+0xa8>
    b7ac:	f00c 4300 	and.w	r3, ip, #2147483648	; 0x80000000
    b7b0:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
    b7b4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
    b7b8:	480e      	ldr	r0, [pc, #56]	; (b7f4 <scalbn+0xdc>)
    b7ba:	f041 011f 	orr.w	r1, r1, #31
    b7be:	e7c1      	b.n	b744 <scalbn+0x2c>
    b7c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    b7c4:	3236      	adds	r2, #54	; 0x36
    b7c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    b7ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
    b7ce:	4658      	mov	r0, fp
    b7d0:	4b09      	ldr	r3, [pc, #36]	; (b7f8 <scalbn+0xe0>)
    b7d2:	4629      	mov	r1, r5
    b7d4:	2200      	movs	r2, #0
    b7d6:	e7d6      	b.n	b786 <scalbn+0x6e>
    b7d8:	c2f8f359 	.word	0xc2f8f359
    b7dc:	01a56e1f 	.word	0x01a56e1f
    b7e0:	8800759c 	.word	0x8800759c
    b7e4:	7e37e43c 	.word	0x7e37e43c
    b7e8:	43500000 	.word	0x43500000
    b7ec:	ffff3cb0 	.word	0xffff3cb0
    b7f0:	8800759c 	.word	0x8800759c
    b7f4:	c2f8f359 	.word	0xc2f8f359
    b7f8:	3c900000 	.word	0x3c900000

0000b7fc <gpio_pin_toggle_dt.constprop.0.isra.0>:
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
    b7fc:	4802      	ldr	r0, [pc, #8]	; (b808 <gpio_pin_toggle_dt.constprop.0.isra.0+0xc>)
    b7fe:	6883      	ldr	r3, [r0, #8]
    b800:	2102      	movs	r1, #2
    b802:	695b      	ldr	r3, [r3, #20]
    b804:	4718      	bx	r3
    b806:	bf00      	nop
    b808:	00013420 	.word	0x00013420

0000b80c <spi_read_write>:
{
    b80c:	b510      	push	{r4, lr}
    b80e:	b090      	sub	sp, #64	; 0x40
	uint8_t rx_dummy= 0x00;
    b810:	2300      	movs	r3, #0
    b812:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t rx_dummy2= 0x00;
    b816:	f88d 300f 	strb.w	r3, [sp, #15]
	struct spi_buf tx_buffer[] = 
    b81a:	f10d 0307 	add.w	r3, sp, #7
    b81e:	9308      	str	r3, [sp, #32]
    b820:	f10d 0206 	add.w	r2, sp, #6
    b824:	2301      	movs	r3, #1
    b826:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	struct spi_buf rx_buffer[] = {
    b82a:	f10d 020e 	add.w	r2, sp, #14
    b82e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    b832:	f10d 020f 	add.w	r2, sp, #15
    b836:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	struct spi_buf tx_buffer[] = 
    b83a:	9309      	str	r3, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
    b83c:	ab08      	add	r3, sp, #32
    b83e:	9304      	str	r3, [sp, #16]
	struct spi_buf_set rx = {
    b840:	aa0c      	add	r2, sp, #48	; 0x30
	struct spi_buf_set tx = {
    b842:	2302      	movs	r3, #2
	struct spi_buf_set rx = {
    b844:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
    b848:	f88d 0007 	strb.w	r0, [sp, #7]
	struct spi_buf_set tx = {
    b84c:	9305      	str	r3, [sp, #20]
{
    b84e:	f88d 1006 	strb.w	r1, [sp, #6]
    gpio_pin_toggle_dt(&blue_led);
    b852:	f7ff ffd3 	bl	b7fc <gpio_pin_toggle_dt.constprop.0.isra.0>
	err = spi_transceive(spi_dev, &spi_cfg, &tx, &rx);
    b856:	4b09      	ldr	r3, [pc, #36]	; (b87c <spi_read_write+0x70>)
    b858:	6818      	ldr	r0, [r3, #0]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    b85a:	6883      	ldr	r3, [r0, #8]
    b85c:	4908      	ldr	r1, [pc, #32]	; (b880 <spi_read_write+0x74>)
    b85e:	681c      	ldr	r4, [r3, #0]
    b860:	aa04      	add	r2, sp, #16
    b862:	ab06      	add	r3, sp, #24
    b864:	47a0      	blx	r4
    gpio_pin_toggle_dt(&blue_led);
    b866:	f7ff ffc9 	bl	b7fc <gpio_pin_toggle_dt.constprop.0.isra.0>
	uint16_t rx_receive = ((uint16_t)rx_dummy << 8) | rx_dummy2;
    b86a:	f89d 000e 	ldrb.w	r0, [sp, #14]
    b86e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b872:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    b876:	b010      	add	sp, #64	; 0x40
    b878:	bd10      	pop	{r4, pc}
    b87a:	bf00      	nop
    b87c:	2000037c 	.word	0x2000037c
    b880:	00013618 	.word	0x00013618

0000b884 <play_haptic_buzz_normal>:
    // spi_read_write(reg1, reg2);   // set FIFO to 0x0FFF
    // k_msleep(1000*CREEP_HOLD_TIME/SAMPLING_RATE); // wait defined time
}

void play_haptic_buzz_normal ()
{
    b884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(counter<last_sample) // playing the waveform
    b886:	4c18      	ldr	r4, [pc, #96]	; (b8e8 <play_haptic_buzz_normal+0x64>)
    b888:	4f18      	ldr	r7, [pc, #96]	; (b8ec <play_haptic_buzz_normal+0x68>)
    b88a:	4d19      	ldr	r5, [pc, #100]	; (b8f0 <play_haptic_buzz_normal+0x6c>)
{
    b88c:	2696      	movs	r6, #150	; 0x96
	drivingWaitFifoEmpty(); // wait until BOS1901 internal FIFO is empty before sending the waveform points.
    b88e:	f006 fa3d 	bl	11d0c <drivingWaitFifoEmpty>
	spi_read_write(0x77, 0xE7);  // set SENSE = 0 to drive the output
    b892:	21e7      	movs	r1, #231	; 0xe7
    b894:	2077      	movs	r0, #119	; 0x77
    b896:	f7ff ffb9 	bl	b80c <spi_read_write>
    if(counter<last_sample) // playing the waveform
    b89a:	6823      	ldr	r3, [r4, #0]
    b89c:	683a      	ldr	r2, [r7, #0]
    b89e:	4293      	cmp	r3, r2
    b8a0:	da19      	bge.n	b8d6 <play_haptic_buzz_normal+0x52>
		uint8_t reg1 = (uint8_t)((press_waveform[counter] & 0xFF00) >> 8);
    b8a2:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
        spi_read_write(reg1, reg2);// Timer expired: send a new point
    b8a6:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
    b8aa:	0a00      	lsrs	r0, r0, #8
    b8ac:	f7ff ffae 	bl	b80c <spi_read_write>
		counter++;
    b8b0:	6823      	ldr	r3, [r4, #0]
    b8b2:	3301      	adds	r3, #1
    b8b4:	6023      	str	r3, [r4, #0]
	for (int a = 0; a < 150; a++)
	{
		drivingPressFeedback();
		k_msleep(5);
    b8b6:	2005      	movs	r0, #5
    b8b8:	f006 fa18 	bl	11cec <k_msleep.isra.0>
	volatile uint16_t ignore = spi_read_write(0x56, 0x07); // disable output once trimming is done.
    b8bc:	2107      	movs	r1, #7
    b8be:	2056      	movs	r0, #86	; 0x56
    b8c0:	f7ff ffa4 	bl	b80c <spi_read_write>
    b8c4:	f8ad 0006 	strh.w	r0, [sp, #6]
		drivingPressCreepStabilization(); //this causes output to be disabled
		k_msleep(5);
    b8c8:	2005      	movs	r0, #5
    b8ca:	f006 fa0f 	bl	11cec <k_msleep.isra.0>
	for (int a = 0; a < 150; a++)
    b8ce:	3e01      	subs	r6, #1
    b8d0:	d1dd      	bne.n	b88e <play_haptic_buzz_normal+0xa>
	}
}
    b8d2:	b003      	add	sp, #12
    b8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint8_t reg1 = (uint8_t)((press_waveform[counter] & 0xFF00) >> 8);
    b8d6:	8828      	ldrh	r0, [r5, #0]
        spi_read_write(reg1, reg2); // completing the waveform by playing the initial point again.
    b8d8:	7829      	ldrb	r1, [r5, #0]
        counter = 0;// cleanup
    b8da:	2300      	movs	r3, #0
        spi_read_write(reg1, reg2); // completing the waveform by playing the initial point again.
    b8dc:	0a00      	lsrs	r0, r0, #8
        counter = 0;// cleanup
    b8de:	6023      	str	r3, [r4, #0]
        spi_read_write(reg1, reg2); // completing the waveform by playing the initial point again.
    b8e0:	f7ff ff94 	bl	b80c <spi_read_write>
    b8e4:	e7e7      	b.n	b8b6 <play_haptic_buzz_normal+0x32>
    b8e6:	bf00      	nop
    b8e8:	20001510 	.word	0x20001510
    b8ec:	20000378 	.word	0x20000378
    b8f0:	200016c6 	.word	0x200016c6

0000b8f4 <main>:
    }
}

// Before main executes, zephyr-the RTOS, automatically initializes the pin in/out and set's up the clock
void main(void)
{
    b8f4:	b583      	push	{r0, r1, r7, lr}
    volatile int err;
    // volatile uint8_t adc_readings[4] = {0, 0, 0, 0};
    k_msleep(1000);
    b8f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b8fa:	f006 f9f7 	bl	11cec <k_msleep.isra.0>
	const struct gpio_driver_api *api =
    b8fe:	4c2c      	ldr	r4, [pc, #176]	; (b9b0 <main+0xbc>)
	return api->pin_configure(port, pin, flags);
    b900:	4a2c      	ldr	r2, [pc, #176]	; (b9b4 <main+0xc0>)
	struct gpio_driver_data *data =
    b902:	6926      	ldr	r6, [r4, #16]
	const struct gpio_driver_api *api =
    b904:	68a5      	ldr	r5, [r4, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b906:	6833      	ldr	r3, [r6, #0]
    b908:	f043 0302 	orr.w	r3, r3, #2
    b90c:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
    b90e:	682b      	ldr	r3, [r5, #0]
    b910:	2101      	movs	r1, #1
    b912:	4620      	mov	r0, r4
    b914:	4798      	blx	r3
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    b916:	6833      	ldr	r3, [r6, #0]
    b918:	079b      	lsls	r3, r3, #30
	return api->port_set_bits_raw(port, pins);
    b91a:	f04f 0102 	mov.w	r1, #2
	return api->port_clear_bits_raw(port, pins);
    b91e:	bf54      	ite	pl
    b920:	692b      	ldrpl	r3, [r5, #16]
	return api->port_set_bits_raw(port, pins);
    b922:	68eb      	ldrmi	r3, [r5, #12]
    press_waveform_size = PLAY_SAMPLING_RATE / PRESS_SIGNAL_FREQ; //about 44
    b924:	f8df 8090 	ldr.w	r8, [pc, #144]	; b9b8 <main+0xc4>
        press_waveform[i] = utilsVolt2Amplitude(PRESS_SIGNAL_VOLTAGE / 2 * (sin(2*3*i/(press_waveform_size) - 3/2)+1));
    b928:	4d24      	ldr	r5, [pc, #144]	; (b9bc <main+0xc8>)
    b92a:	4f25      	ldr	r7, [pc, #148]	; (b9c0 <main+0xcc>)
    b92c:	f8df 9094 	ldr.w	r9, [pc, #148]	; b9c4 <main+0xd0>
    b930:	4620      	mov	r0, r4
    b932:	4798      	blx	r3
	// err = gpio_pin_interrupt_configure_dt(&fsr_det, GPIO_INT_EDGE_TO_ACTIVE);

    // Initialization
    gpio_pin_configure_dt(&blue_led, GPIO_OUTPUT_ACTIVE);
    gpio_pin_set_dt(&blue_led, LED_ON);
	volatile uint16_t ignore = spi_read_write(0x00, 0x6E);
    b934:	216e      	movs	r1, #110	; 0x6e
    b936:	2000      	movs	r0, #0
    b938:	f7ff ff68 	bl	b80c <spi_read_write>
    press_waveform_size = PLAY_SAMPLING_RATE / PRESS_SIGNAL_FREQ; //about 44
    b93c:	232c      	movs	r3, #44	; 0x2c
    b93e:	f8a8 3000 	strh.w	r3, [r8]
    for(volatile uint8_t i = 0; i < press_waveform_size; i++)
    b942:	2300      	movs	r3, #0
	volatile uint16_t ignore = spi_read_write(0x00, 0x6E);
    b944:	f8ad 0006 	strh.w	r0, [sp, #6]
        press_waveform[i] = utilsVolt2Amplitude(PRESS_SIGNAL_VOLTAGE / 2 * (sin(2*3*i/(press_waveform_size) - 3/2)+1));
    b948:	2400      	movs	r4, #0
    for(volatile uint8_t i = 0; i < press_waveform_size; i++)
    b94a:	f88d 3005 	strb.w	r3, [sp, #5]
        press_waveform[i] = utilsVolt2Amplitude(PRESS_SIGNAL_VOLTAGE / 2 * (sin(2*3*i/(press_waveform_size) - 3/2)+1));
    b94e:	2600      	movs	r6, #0
    for(volatile uint8_t i = 0; i < press_waveform_size; i++)
    b950:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b954:	f8b8 3000 	ldrh.w	r3, [r8]
    b958:	4293      	cmp	r3, r2
    b95a:	d806      	bhi.n	b96a <main+0x76>
	/* SPI Initialization*/
    // spi_init();
	drivingCalculateWaveforms();
	// drivingTrimming();
    while(1){
		play_haptic_buzz_normal();
    b95c:	f7ff ff92 	bl	b884 <play_haptic_buzz_normal>
		k_msleep(2000);
    b960:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    b964:	f006 f9c2 	bl	11cec <k_msleep.isra.0>
    while(1){
    b968:	e7f8      	b.n	b95c <main+0x68>
        press_waveform[i] = utilsVolt2Amplitude(PRESS_SIGNAL_VOLTAGE / 2 * (sin(2*3*i/(press_waveform_size) - 3/2)+1));
    b96a:	f89d 0005 	ldrb.w	r0, [sp, #5]
    b96e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    b972:	0040      	lsls	r0, r0, #1
    b974:	fbb0 f0f3 	udiv	r0, r0, r3
    b978:	3801      	subs	r0, #1
    b97a:	f7f4 fda3 	bl	4c4 <__aeabi_i2d>
    b97e:	f005 fe3f 	bl	11600 <sin>
    b982:	4622      	mov	r2, r4
    b984:	462b      	mov	r3, r5
    b986:	f7f4 fc51 	bl	22c <__adddf3>
    b98a:	463b      	mov	r3, r7
    b98c:	4632      	mov	r2, r6
    b98e:	f7f4 fe03 	bl	598 <__aeabi_dmul>
    b992:	f7f5 f83b 	bl	a0c <__aeabi_d2f>
    b996:	f7ff fab3 	bl	af00 <utilsVolt2Amplitude>
    b99a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b99e:	f829 0013 	strh.w	r0, [r9, r3, lsl #1]
    for(volatile uint8_t i = 0; i < press_waveform_size; i++)
    b9a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b9a6:	3301      	adds	r3, #1
    b9a8:	b2db      	uxtb	r3, r3
    b9aa:	f88d 3005 	strb.w	r3, [sp, #5]
    b9ae:	e7cf      	b.n	b950 <main+0x5c>
    b9b0:	00013420 	.word	0x00013420
    b9b4:	00060001 	.word	0x00060001
    b9b8:	200016c4 	.word	0x200016c4
    b9bc:	3ff00000 	.word	0x3ff00000
    b9c0:	40180000 	.word	0x40180000
    b9c4:	200016c6 	.word	0x200016c6

0000b9c8 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    b9c8:	4b01      	ldr	r3, [pc, #4]	; (b9d0 <char_out+0x8>)
    b9ca:	681b      	ldr	r3, [r3, #0]
    b9cc:	4718      	bx	r3
    b9ce:	bf00      	nop
    b9d0:	20000380 	.word	0x20000380

0000b9d4 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    b9d4:	b507      	push	{r0, r1, r2, lr}
    b9d6:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    b9d8:	2100      	movs	r1, #0
    b9da:	4602      	mov	r2, r0
    b9dc:	9100      	str	r1, [sp, #0]
    b9de:	4803      	ldr	r0, [pc, #12]	; (b9ec <vprintk+0x18>)
    b9e0:	f000 f976 	bl	bcd0 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    b9e4:	b003      	add	sp, #12
    b9e6:	f85d fb04 	ldr.w	pc, [sp], #4
    b9ea:	bf00      	nop
    b9ec:	0000b9c9 	.word	0x0000b9c9

0000b9f0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    b9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b9f4:	8b85      	ldrh	r5, [r0, #28]
{
    b9f6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    b9f8:	0728      	lsls	r0, r5, #28
{
    b9fa:	4690      	mov	r8, r2
	if (processing) {
    b9fc:	d411      	bmi.n	ba22 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    b9fe:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ba00:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    ba04:	f040 80cd 	bne.w	bba2 <process_event+0x1b2>
			evt = process_recheck(mgr);
    ba08:	4620      	mov	r0, r4
    ba0a:	f006 fb69 	bl	120e0 <process_recheck>
		}

		if (evt == EVT_NOP) {
    ba0e:	b178      	cbz	r0, ba30 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    ba10:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ba12:	8ba1      	ldrh	r1, [r4, #28]
    ba14:	2804      	cmp	r0, #4
    ba16:	d811      	bhi.n	ba3c <process_event+0x4c>
    ba18:	e8df f000 	tbb	[pc, r0]
    ba1c:	856d10c3 	.word	0x856d10c3
    ba20:	95          	.byte	0x95
    ba21:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    ba22:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    ba24:	bf0c      	ite	eq
    ba26:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ba2a:	f045 0520 	orrne.w	r5, r5, #32
    ba2e:	83a5      	strh	r5, [r4, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    ba30:	f388 8811 	msr	BASEPRI, r8
    ba34:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    ba38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ba3c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ba40:	45aa      	cmp	sl, r5
    ba42:	f000 80a6 	beq.w	bb92 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    ba46:	2700      	movs	r7, #0
    ba48:	46b9      	mov	r9, r7
    ba4a:	463e      	mov	r6, r7
    ba4c:	68a3      	ldr	r3, [r4, #8]
    ba4e:	2b00      	cmp	r3, #0
    ba50:	f000 80bd 	beq.w	bbce <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    ba54:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    ba58:	83a1      	strh	r1, [r4, #28]
    ba5a:	f388 8811 	msr	BASEPRI, r8
    ba5e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    ba62:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ba64:	2900      	cmp	r1, #0
    ba66:	f000 80bb 	beq.w	bbe0 <process_event+0x1f0>
	return node->next;
    ba6a:	680d      	ldr	r5, [r1, #0]
    ba6c:	2900      	cmp	r1, #0
    ba6e:	f000 80b7 	beq.w	bbe0 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    ba72:	f8d1 8004 	ldr.w	r8, [r1, #4]
    ba76:	4633      	mov	r3, r6
    ba78:	4652      	mov	r2, sl
    ba7a:	4620      	mov	r0, r4
    ba7c:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ba7e:	2d00      	cmp	r5, #0
    ba80:	d076      	beq.n	bb70 <process_event+0x180>
    ba82:	682b      	ldr	r3, [r5, #0]
    ba84:	4629      	mov	r1, r5
    ba86:	461d      	mov	r5, r3
    ba88:	e7f0      	b.n	ba6c <process_event+0x7c>
    ba8a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    ba8e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    ba90:	2a01      	cmp	r2, #1
    ba92:	d81b      	bhi.n	bacc <process_event+0xdc>
	list->head = NULL;
    ba94:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ba96:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    ba9a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    ba9c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ba9e:	b289      	uxth	r1, r1
	list->tail = NULL;
    baa0:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    baa4:	d109      	bne.n	baba <process_event+0xca>
    baa6:	463b      	mov	r3, r7
    baa8:	e003      	b.n	bab2 <process_event+0xc2>
				mgr->refs += 1U;
    baaa:	8be2      	ldrh	r2, [r4, #30]
    baac:	3201      	adds	r2, #1
    baae:	83e2      	strh	r2, [r4, #30]
	return node->next;
    bab0:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    bab2:	2b00      	cmp	r3, #0
    bab4:	d1f9      	bne.n	baaa <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    bab6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    baba:	83a1      	strh	r1, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    babc:	4620      	mov	r0, r4
    babe:	f006 fb0f 	bl	120e0 <process_recheck>
    bac2:	2800      	cmp	r0, #0
    bac4:	d07b      	beq.n	bbbe <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    bac6:	f041 0120 	orr.w	r1, r1, #32
    baca:	e077      	b.n	bbbc <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    bacc:	2b04      	cmp	r3, #4
    bace:	d10a      	bne.n	bae6 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    bad0:	f021 0107 	bic.w	r1, r1, #7
    bad4:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    bad6:	83a1      	strh	r1, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    bad8:	4620      	mov	r0, r4
    bada:	f006 fb01 	bl	120e0 <process_recheck>
    bade:	b110      	cbz	r0, bae6 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    bae0:	f041 0120 	orr.w	r1, r1, #32
    bae4:	83a1      	strh	r1, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    bae6:	8ba1      	ldrh	r1, [r4, #28]
    bae8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    baec:	45aa      	cmp	sl, r5
    baee:	d050      	beq.n	bb92 <process_event+0x1a2>
    baf0:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    baf2:	46b9      	mov	r9, r7
    baf4:	e7aa      	b.n	ba4c <process_event+0x5c>
			transit = mgr->transitions->start;
    baf6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    baf8:	f021 0107 	bic.w	r1, r1, #7
    bafc:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    bb00:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    bb02:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    bb06:	83a1      	strh	r1, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    bb08:	d12d      	bne.n	bb66 <process_event+0x176>
		    || (transit != NULL)) {
    bb0a:	f1b9 0f00 	cmp.w	r9, #0
    bb0e:	d040      	beq.n	bb92 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    bb10:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    bb14:	83a1      	strh	r1, [r4, #28]
    bb16:	f388 8811 	msr	BASEPRI, r8
    bb1a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    bb1e:	493a      	ldr	r1, [pc, #232]	; (bc08 <process_event+0x218>)
    bb20:	4620      	mov	r0, r4
    bb22:	47c8      	blx	r9
    bb24:	e029      	b.n	bb7a <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    bb26:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    bb2a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    bb2c:	f041 0104 	orr.w	r1, r1, #4
    bb30:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    bb32:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    bb34:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    bb38:	83a1      	strh	r1, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    bb3a:	d0e6      	beq.n	bb0a <process_event+0x11a>
    bb3c:	2700      	movs	r7, #0
		res = 0;
    bb3e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    bb40:	f04f 0a04 	mov.w	sl, #4
    bb44:	e782      	b.n	ba4c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    bb46:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    bb4a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    bb4c:	f041 0105 	orr.w	r1, r1, #5
    bb50:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    bb52:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    bb54:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    bb58:	83a1      	strh	r1, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    bb5a:	d0d6      	beq.n	bb0a <process_event+0x11a>
    bb5c:	2700      	movs	r7, #0
		res = 0;
    bb5e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    bb60:	f04f 0a05 	mov.w	sl, #5
    bb64:	e772      	b.n	ba4c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    bb66:	2700      	movs	r7, #0
		res = 0;
    bb68:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    bb6a:	f04f 0a06 	mov.w	sl, #6
    bb6e:	e76d      	b.n	ba4c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    bb70:	462b      	mov	r3, r5
    bb72:	e787      	b.n	ba84 <process_event+0x94>
			if (transit != NULL) {
    bb74:	f1b9 0f00 	cmp.w	r9, #0
    bb78:	d1d1      	bne.n	bb1e <process_event+0x12e>
	__asm__ volatile(
    bb7a:	f04f 0340 	mov.w	r3, #64	; 0x40
    bb7e:	f3ef 8811 	mrs	r8, BASEPRI
    bb82:	f383 8812 	msr	BASEPRI_MAX, r3
    bb86:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    bb8a:	8ba3      	ldrh	r3, [r4, #28]
    bb8c:	f023 0308 	bic.w	r3, r3, #8
    bb90:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    bb92:	8ba5      	ldrh	r5, [r4, #28]
    bb94:	06ea      	lsls	r2, r5, #27
    bb96:	d52e      	bpl.n	bbf6 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    bb98:	f025 0310 	bic.w	r3, r5, #16
    bb9c:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    bb9e:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    bba2:	69a6      	ldr	r6, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bba4:	8ba1      	ldrh	r1, [r4, #28]
	if (res < 0) {
    bba6:	2e00      	cmp	r6, #0
    bba8:	f6bf af6f 	bge.w	ba8a <process_event+0x9a>
	list->head = NULL;
    bbac:	2300      	movs	r3, #0
		*clients = mgr->clients;
    bbae:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    bbb0:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    bbb4:	f021 0107 	bic.w	r1, r1, #7
    bbb8:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    bbbc:	83a1      	strh	r1, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    bbbe:	8ba1      	ldrh	r1, [r4, #28]
    bbc0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    bbc4:	45aa      	cmp	sl, r5
    bbc6:	f04f 0900 	mov.w	r9, #0
    bbca:	f47f af3f 	bne.w	ba4c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    bbce:	2f00      	cmp	r7, #0
    bbd0:	d09b      	beq.n	bb0a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    bbd2:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    bbd6:	83a1      	strh	r1, [r4, #28]
	__asm__ volatile(
    bbd8:	f388 8811 	msr	BASEPRI, r8
    bbdc:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    bbe0:	2f00      	cmp	r7, #0
    bbe2:	d0c7      	beq.n	bb74 <process_event+0x184>
	return node->next;
    bbe4:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    bbe6:	4639      	mov	r1, r7
    bbe8:	4633      	mov	r3, r6
    bbea:	4652      	mov	r2, sl
    bbec:	4620      	mov	r0, r4
    bbee:	f006 faa3 	bl	12138 <notify_one>
	list->head = node;
    bbf2:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    bbf4:	e7f4      	b.n	bbe0 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    bbf6:	06ab      	lsls	r3, r5, #26
    bbf8:	f57f af1a 	bpl.w	ba30 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    bbfc:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    bc00:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    bc02:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    bc06:	e6ff      	b.n	ba08 <process_event+0x18>
    bc08:	00012165 	.word	0x00012165

0000bc0c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    bc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    bc0e:	4e09      	ldr	r6, [pc, #36]	; (bc34 <extract_decimal+0x28>)
    bc10:	6801      	ldr	r1, [r0, #0]
{
    bc12:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    bc14:	270a      	movs	r7, #10
	size_t val = 0;
    bc16:	2000      	movs	r0, #0
    bc18:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
    bc1a:	3101      	adds	r1, #1
    bc1c:	781c      	ldrb	r4, [r3, #0]
    bc1e:	5d35      	ldrb	r5, [r6, r4]
    bc20:	076d      	lsls	r5, r5, #29
    bc22:	d401      	bmi.n	bc28 <extract_decimal+0x1c>
	}
	*str = sp;
    bc24:	6013      	str	r3, [r2, #0]
	return val;
}
    bc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    bc28:	fb07 4300 	mla	r3, r7, r0, r4
    bc2c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    bc30:	e7f2      	b.n	bc18 <extract_decimal+0xc>
    bc32:	bf00      	nop
    bc34:	00013b19 	.word	0x00013b19

0000bc38 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    bc38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc3c:	4615      	mov	r5, r2
    bc3e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    bc40:	78d3      	ldrb	r3, [r2, #3]
    bc42:	4a22      	ldr	r2, [pc, #136]	; (bccc <encode_uint+0x94>)
    bc44:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
    bc48:	2b6f      	cmp	r3, #111	; 0x6f
{
    bc4a:	4680      	mov	r8, r0
    bc4c:	460f      	mov	r7, r1
    bc4e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    bc52:	d029      	beq.n	bca8 <encode_uint+0x70>
    bc54:	d824      	bhi.n	bca0 <encode_uint+0x68>
		return 10;
    bc56:	2b58      	cmp	r3, #88	; 0x58
    bc58:	bf0c      	ite	eq
    bc5a:	2610      	moveq	r6, #16
    bc5c:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    bc5e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    bc62:	4632      	mov	r2, r6
    bc64:	2300      	movs	r3, #0
    bc66:	4640      	mov	r0, r8
    bc68:	4639      	mov	r1, r7
    bc6a:	f7f4 ff1f 	bl	aac <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    bc6e:	2a09      	cmp	r2, #9
    bc70:	b2d4      	uxtb	r4, r2
    bc72:	d81e      	bhi.n	bcb2 <encode_uint+0x7a>
    bc74:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    bc76:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    bc78:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    bc7a:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    bc7e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    bc82:	d301      	bcc.n	bc88 <encode_uint+0x50>
    bc84:	45d1      	cmp	r9, sl
    bc86:	d811      	bhi.n	bcac <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    bc88:	782b      	ldrb	r3, [r5, #0]
    bc8a:	069b      	lsls	r3, r3, #26
    bc8c:	d505      	bpl.n	bc9a <encode_uint+0x62>
		if (radix == 8) {
    bc8e:	2e08      	cmp	r6, #8
    bc90:	d115      	bne.n	bcbe <encode_uint+0x86>
			conv->altform_0 = true;
    bc92:	78ab      	ldrb	r3, [r5, #2]
    bc94:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    bc98:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    bc9a:	4648      	mov	r0, r9
    bc9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    bca0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    bca4:	2b70      	cmp	r3, #112	; 0x70
    bca6:	e7d7      	b.n	bc58 <encode_uint+0x20>
	switch (specifier) {
    bca8:	2608      	movs	r6, #8
    bcaa:	e7d8      	b.n	bc5e <encode_uint+0x26>
		value /= radix;
    bcac:	4680      	mov	r8, r0
    bcae:	460f      	mov	r7, r1
    bcb0:	e7d7      	b.n	bc62 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    bcb2:	f1bb 0f01 	cmp.w	fp, #1
    bcb6:	bf0c      	ite	eq
    bcb8:	3437      	addeq	r4, #55	; 0x37
    bcba:	3457      	addne	r4, #87	; 0x57
    bcbc:	e7db      	b.n	bc76 <encode_uint+0x3e>
		} else if (radix == 16) {
    bcbe:	2e10      	cmp	r6, #16
    bcc0:	d1eb      	bne.n	bc9a <encode_uint+0x62>
			conv->altform_0c = true;
    bcc2:	78ab      	ldrb	r3, [r5, #2]
    bcc4:	f043 0310 	orr.w	r3, r3, #16
    bcc8:	e7e6      	b.n	bc98 <encode_uint+0x60>
    bcca:	bf00      	nop
    bccc:	00013b19 	.word	0x00013b19

0000bcd0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bcd4:	b097      	sub	sp, #92	; 0x5c
    bcd6:	4682      	mov	sl, r0
    bcd8:	9103      	str	r1, [sp, #12]
    bcda:	4617      	mov	r7, r2
    bcdc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    bcde:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    bce0:	7838      	ldrb	r0, [r7, #0]
    bce2:	b908      	cbnz	r0, bce8 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    bce4:	4628      	mov	r0, r5
    bce6:	e34a      	b.n	c37e <z_cbvprintf_impl+0x6ae>
			OUTC(*fp++);
    bce8:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    bcea:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    bcec:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    bcee:	d006      	beq.n	bcfe <z_cbvprintf_impl+0x2e>
			OUTC('%');
    bcf0:	9903      	ldr	r1, [sp, #12]
    bcf2:	47d0      	blx	sl
    bcf4:	2800      	cmp	r0, #0
    bcf6:	f2c0 8342 	blt.w	c37e <z_cbvprintf_impl+0x6ae>
    bcfa:	3501      	adds	r5, #1
		if (bps == NULL) {
    bcfc:	e1f0      	b.n	c0e0 <z_cbvprintf_impl+0x410>
		} state = {
    bcfe:	2218      	movs	r2, #24
    bd00:	2100      	movs	r1, #0
    bd02:	a810      	add	r0, sp, #64	; 0x40
    bd04:	f007 fb28 	bl	13358 <memset>
	if (*sp == '%') {
    bd08:	787b      	ldrb	r3, [r7, #1]
    bd0a:	2b25      	cmp	r3, #37	; 0x25
    bd0c:	f000 80a3 	beq.w	be56 <z_cbvprintf_impl+0x186>
    bd10:	2300      	movs	r3, #0
    bd12:	1c79      	adds	r1, r7, #1
    bd14:	4698      	mov	r8, r3
    bd16:	469e      	mov	lr, r3
    bd18:	469c      	mov	ip, r3
    bd1a:	4618      	mov	r0, r3
    bd1c:	460e      	mov	r6, r1
		switch (*sp) {
    bd1e:	f811 2b01 	ldrb.w	r2, [r1], #1
    bd22:	2a2b      	cmp	r2, #43	; 0x2b
    bd24:	f000 80c6 	beq.w	beb4 <z_cbvprintf_impl+0x1e4>
    bd28:	f200 80bd 	bhi.w	bea6 <z_cbvprintf_impl+0x1d6>
    bd2c:	2a20      	cmp	r2, #32
    bd2e:	f000 80c4 	beq.w	beba <z_cbvprintf_impl+0x1ea>
    bd32:	2a23      	cmp	r2, #35	; 0x23
    bd34:	f000 80c4 	beq.w	bec0 <z_cbvprintf_impl+0x1f0>
    bd38:	b12b      	cbz	r3, bd46 <z_cbvprintf_impl+0x76>
    bd3a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    bd3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bd42:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    bd46:	f1b8 0f00 	cmp.w	r8, #0
    bd4a:	d005      	beq.n	bd58 <z_cbvprintf_impl+0x88>
    bd4c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    bd50:	f043 0320 	orr.w	r3, r3, #32
    bd54:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    bd58:	f1be 0f00 	cmp.w	lr, #0
    bd5c:	d005      	beq.n	bd6a <z_cbvprintf_impl+0x9a>
    bd5e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    bd62:	f043 0310 	orr.w	r3, r3, #16
    bd66:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    bd6a:	f1bc 0f00 	cmp.w	ip, #0
    bd6e:	d005      	beq.n	bd7c <z_cbvprintf_impl+0xac>
    bd70:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    bd74:	f043 0308 	orr.w	r3, r3, #8
    bd78:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    bd7c:	b128      	cbz	r0, bd8a <z_cbvprintf_impl+0xba>
    bd7e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    bd82:	f043 0304 	orr.w	r3, r3, #4
    bd86:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    bd8a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    bd8e:	f003 0144 	and.w	r1, r3, #68	; 0x44
    bd92:	2944      	cmp	r1, #68	; 0x44
    bd94:	d103      	bne.n	bd9e <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    bd96:	f36f 1386 	bfc	r3, #6, #1
    bd9a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    bd9e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    bda2:	9609      	str	r6, [sp, #36]	; 0x24
    bda4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
    bda8:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    bdaa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    bdae:	f040 808c 	bne.w	beca <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    bdb2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    bdb6:	f043 0301 	orr.w	r3, r3, #1
    bdba:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    bdbe:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    bdc0:	781a      	ldrb	r2, [r3, #0]
    bdc2:	2a2e      	cmp	r2, #46	; 0x2e
    bdc4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    bdc8:	bf0c      	ite	eq
    bdca:	2101      	moveq	r1, #1
    bdcc:	2100      	movne	r1, #0
    bdce:	f361 0241 	bfi	r2, r1, #1, #1
    bdd2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    bdd6:	d10c      	bne.n	bdf2 <z_cbvprintf_impl+0x122>
	++sp;
    bdd8:	1c5a      	adds	r2, r3, #1
    bdda:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    bddc:	785a      	ldrb	r2, [r3, #1]
    bdde:	2a2a      	cmp	r2, #42	; 0x2a
    bde0:	f040 8083 	bne.w	beea <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    bde4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    bde8:	f042 0204 	orr.w	r2, r2, #4
    bdec:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    bdf0:	3302      	adds	r3, #2
	switch (*sp) {
    bdf2:	781a      	ldrb	r2, [r3, #0]
    bdf4:	2a6c      	cmp	r2, #108	; 0x6c
    bdf6:	f000 80a4 	beq.w	bf42 <z_cbvprintf_impl+0x272>
    bdfa:	f200 8086 	bhi.w	bf0a <z_cbvprintf_impl+0x23a>
    bdfe:	2a68      	cmp	r2, #104	; 0x68
    be00:	f000 808c 	beq.w	bf1c <z_cbvprintf_impl+0x24c>
    be04:	2a6a      	cmp	r2, #106	; 0x6a
    be06:	f000 80a5 	beq.w	bf54 <z_cbvprintf_impl+0x284>
    be0a:	2a4c      	cmp	r2, #76	; 0x4c
    be0c:	f000 80aa 	beq.w	bf64 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    be10:	461a      	mov	r2, r3
    be12:	f812 3b01 	ldrb.w	r3, [r2], #1
    be16:	9204      	str	r2, [sp, #16]
	switch (conv->specifier) {
    be18:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    be1a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	conv->specifier = *sp++;
    be1e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    be22:	f200 8117 	bhi.w	c054 <z_cbvprintf_impl+0x384>
    be26:	2b6d      	cmp	r3, #109	; 0x6d
    be28:	f200 80a9 	bhi.w	bf7e <z_cbvprintf_impl+0x2ae>
    be2c:	2b69      	cmp	r3, #105	; 0x69
    be2e:	f200 8111 	bhi.w	c054 <z_cbvprintf_impl+0x384>
    be32:	2b57      	cmp	r3, #87	; 0x57
    be34:	f200 80be 	bhi.w	bfb4 <z_cbvprintf_impl+0x2e4>
    be38:	2b41      	cmp	r3, #65	; 0x41
    be3a:	d003      	beq.n	be44 <z_cbvprintf_impl+0x174>
    be3c:	3b45      	subs	r3, #69	; 0x45
    be3e:	2b02      	cmp	r3, #2
    be40:	f200 8108 	bhi.w	c054 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    be44:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    be48:	2204      	movs	r2, #4
    be4a:	f362 0302 	bfi	r3, r2, #0, #3
    be4e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    be52:	2301      	movs	r3, #1
			break;
    be54:	e0ca      	b.n	bfec <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    be56:	1cba      	adds	r2, r7, #2
    be58:	9204      	str	r2, [sp, #16]
    be5a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    be5e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    be62:	07da      	lsls	r2, r3, #31
    be64:	f140 80fd 	bpl.w	c062 <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    be68:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    be6c:	f1b9 0f00 	cmp.w	r9, #0
    be70:	da07      	bge.n	be82 <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    be72:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    be76:	f042 0204 	orr.w	r2, r2, #4
    be7a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    be7e:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    be82:	075e      	lsls	r6, r3, #29
    be84:	f140 80f6 	bpl.w	c074 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    be88:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    be8c:	f1bb 0f00 	cmp.w	fp, #0
    be90:	f280 80f5 	bge.w	c07e <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    be94:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    be98:	f36f 0341 	bfc	r3, #1, #1
    be9c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    bea0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    bea4:	e0eb      	b.n	c07e <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    bea6:	2a2d      	cmp	r2, #45	; 0x2d
    bea8:	d00d      	beq.n	bec6 <z_cbvprintf_impl+0x1f6>
    beaa:	2a30      	cmp	r2, #48	; 0x30
    beac:	f47f af44 	bne.w	bd38 <z_cbvprintf_impl+0x68>
    beb0:	2301      	movs	r3, #1
	} while (loop);
    beb2:	e733      	b.n	bd1c <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    beb4:	f04f 0c01 	mov.w	ip, #1
    beb8:	e730      	b.n	bd1c <z_cbvprintf_impl+0x4c>
    beba:	f04f 0e01 	mov.w	lr, #1
    bebe:	e72d      	b.n	bd1c <z_cbvprintf_impl+0x4c>
    bec0:	f04f 0801 	mov.w	r8, #1
    bec4:	e72a      	b.n	bd1c <z_cbvprintf_impl+0x4c>
    bec6:	2001      	movs	r0, #1
    bec8:	e728      	b.n	bd1c <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    beca:	a809      	add	r0, sp, #36	; 0x24
    becc:	f7ff fe9e 	bl	bc0c <extract_decimal>
	if (sp != wp) {
    bed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bed2:	42b3      	cmp	r3, r6
    bed4:	f43f af74 	beq.w	bdc0 <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    bed8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    bedc:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    bede:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    bee0:	f360 0241 	bfi	r2, r0, #1, #1
    bee4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    bee8:	e76a      	b.n	bdc0 <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    beea:	a809      	add	r0, sp, #36	; 0x24
    beec:	f7ff fe8e 	bl	bc0c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    bef0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    bef4:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    bef6:	f3c3 0240 	ubfx	r2, r3, #1, #1
    befa:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    befe:	f362 0341 	bfi	r3, r2, #1, #1
    bf02:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    bf06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bf08:	e773      	b.n	bdf2 <z_cbvprintf_impl+0x122>
	switch (*sp) {
    bf0a:	2a74      	cmp	r2, #116	; 0x74
    bf0c:	d026      	beq.n	bf5c <z_cbvprintf_impl+0x28c>
    bf0e:	2a7a      	cmp	r2, #122	; 0x7a
    bf10:	f47f af7e 	bne.w	be10 <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    bf14:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    bf18:	2106      	movs	r1, #6
    bf1a:	e00c      	b.n	bf36 <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    bf1c:	785a      	ldrb	r2, [r3, #1]
    bf1e:	2a68      	cmp	r2, #104	; 0x68
    bf20:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    bf24:	d106      	bne.n	bf34 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    bf26:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    bf28:	f361 02c6 	bfi	r2, r1, #3, #4
    bf2c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    bf30:	3302      	adds	r3, #2
    bf32:	e76d      	b.n	be10 <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    bf34:	2102      	movs	r1, #2
    bf36:	f361 02c6 	bfi	r2, r1, #3, #4
    bf3a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    bf3e:	3301      	adds	r3, #1
    bf40:	e766      	b.n	be10 <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    bf42:	785a      	ldrb	r2, [r3, #1]
    bf44:	2a6c      	cmp	r2, #108	; 0x6c
    bf46:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    bf4a:	d101      	bne.n	bf50 <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    bf4c:	2104      	movs	r1, #4
    bf4e:	e7eb      	b.n	bf28 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    bf50:	2103      	movs	r1, #3
    bf52:	e7f0      	b.n	bf36 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    bf54:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    bf58:	2105      	movs	r1, #5
    bf5a:	e7ec      	b.n	bf36 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    bf5c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    bf60:	2107      	movs	r1, #7
    bf62:	e7e8      	b.n	bf36 <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    bf64:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    bf68:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    bf6c:	f022 0202 	bic.w	r2, r2, #2
    bf70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    bf74:	f042 0202 	orr.w	r2, r2, #2
    bf78:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    bf7c:	e7df      	b.n	bf3e <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    bf7e:	3b6e      	subs	r3, #110	; 0x6e
    bf80:	b2d9      	uxtb	r1, r3
    bf82:	2301      	movs	r3, #1
    bf84:	408b      	lsls	r3, r1
    bf86:	f240 4182 	movw	r1, #1154	; 0x482
    bf8a:	420b      	tst	r3, r1
    bf8c:	d138      	bne.n	c000 <z_cbvprintf_impl+0x330>
    bf8e:	f013 0f24 	tst.w	r3, #36	; 0x24
    bf92:	d152      	bne.n	c03a <z_cbvprintf_impl+0x36a>
    bf94:	07d8      	lsls	r0, r3, #31
    bf96:	d55d      	bpl.n	c054 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    bf98:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    bf9c:	2103      	movs	r1, #3
    bf9e:	f361 0302 	bfi	r3, r1, #0, #3
    bfa2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    bfa6:	f002 0378 	and.w	r3, r2, #120	; 0x78
    bfaa:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    bfae:	424b      	negs	r3, r1
    bfb0:	414b      	adcs	r3, r1
    bfb2:	e01b      	b.n	bfec <z_cbvprintf_impl+0x31c>
	switch (conv->specifier) {
    bfb4:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    bfb8:	b2c9      	uxtb	r1, r1
    bfba:	2001      	movs	r0, #1
    bfbc:	fa00 f101 	lsl.w	r1, r0, r1
    bfc0:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    bfc4:	f47f af3e 	bne.w	be44 <z_cbvprintf_impl+0x174>
    bfc8:	f640 0601 	movw	r6, #2049	; 0x801
    bfcc:	4231      	tst	r1, r6
    bfce:	d11d      	bne.n	c00c <z_cbvprintf_impl+0x33c>
    bfd0:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    bfd4:	d03e      	beq.n	c054 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    bfd6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    bfda:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    bfde:	f002 0278 	and.w	r2, r2, #120	; 0x78
    bfe2:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    bfe4:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    bfe8:	d034      	beq.n	c054 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    bfea:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    bfec:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    bff0:	f3c2 0140 	ubfx	r1, r2, #1, #1
    bff4:	430b      	orrs	r3, r1
    bff6:	f363 0241 	bfi	r2, r3, #1, #1
    bffa:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    bffe:	e72e      	b.n	be5e <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    c000:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    c004:	2102      	movs	r1, #2
    c006:	f361 0302 	bfi	r3, r1, #0, #3
    c00a:	e7e8      	b.n	bfde <z_cbvprintf_impl+0x30e>
    c00c:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    c010:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    c012:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    c016:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    c01a:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    c01c:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    c020:	bf02      	ittt	eq
    c022:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    c026:	f041 0101 	orreq.w	r1, r1, #1
    c02a:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    c02e:	2b63      	cmp	r3, #99	; 0x63
    c030:	d1db      	bne.n	bfea <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    c032:	1e13      	subs	r3, r2, #0
    c034:	bf18      	it	ne
    c036:	2301      	movne	r3, #1
    c038:	e7d8      	b.n	bfec <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    c03a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    c03e:	2103      	movs	r1, #3
    c040:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    c044:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    c048:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    c04c:	bf14      	ite	ne
    c04e:	2301      	movne	r3, #1
    c050:	2300      	moveq	r3, #0
    c052:	e7cb      	b.n	bfec <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    c054:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    c058:	f043 0301 	orr.w	r3, r3, #1
    c05c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    c060:	e7c3      	b.n	bfea <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    c062:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    c066:	2a00      	cmp	r2, #0
			width = conv->width_value;
    c068:	bfb4      	ite	lt
    c06a:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
		int width = -1;
    c06e:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    c072:	e706      	b.n	be82 <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    c074:	0798      	lsls	r0, r3, #30
    c076:	f57f af13 	bpl.w	bea0 <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    c07a:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
			= (enum length_mod_enum)conv->length_mod;
    c07e:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->pad0_value = 0;
    c082:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    c084:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    c088:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		enum specifier_cat_enum specifier_cat
    c08c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    c090:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    c092:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    c096:	d133      	bne.n	c100 <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    c098:	1ecb      	subs	r3, r1, #3
    c09a:	2b04      	cmp	r3, #4
    c09c:	d804      	bhi.n	c0a8 <z_cbvprintf_impl+0x3d8>
    c09e:	e8df f003 	tbb	[pc, r3]
    c0a2:	4621      	.short	0x4621
    c0a4:	2146      	.short	0x2146
    c0a6:	21          	.byte	0x21
    c0a7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    c0a8:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    c0aa:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    c0ac:	ea4f 72e3 	mov.w	r2, r3, asr #31
    c0b0:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    c0b4:	d11c      	bne.n	c0f0 <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    c0b6:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    c0ba:	17da      	asrs	r2, r3, #31
    c0bc:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    c0c0:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    c0c2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    c0c6:	f013 0603 	ands.w	r6, r3, #3
    c0ca:	d050      	beq.n	c16e <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    c0cc:	9b04      	ldr	r3, [sp, #16]
    c0ce:	9903      	ldr	r1, [sp, #12]
    c0d0:	463a      	mov	r2, r7
    c0d2:	4650      	mov	r0, sl
    c0d4:	f006 f8ec 	bl	122b0 <outs>
    c0d8:	2800      	cmp	r0, #0
    c0da:	f2c0 8150 	blt.w	c37e <z_cbvprintf_impl+0x6ae>
    c0de:	4405      	add	r5, r0
			continue;
    c0e0:	9f04      	ldr	r7, [sp, #16]
    c0e2:	e5fd      	b.n	bce0 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    c0e4:	f854 3b04 	ldr.w	r3, [r4], #4
    c0e8:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    c0ea:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    c0ee:	e7e8      	b.n	c0c2 <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    c0f0:	2902      	cmp	r1, #2
    c0f2:	d1e5      	bne.n	c0c0 <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    c0f4:	b21a      	sxth	r2, r3
    c0f6:	f343 33c0 	sbfx	r3, r3, #15, #1
    c0fa:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    c0fe:	e7df      	b.n	c0c0 <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    c100:	2b02      	cmp	r3, #2
    c102:	d124      	bne.n	c14e <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    c104:	1ecb      	subs	r3, r1, #3
    c106:	2b04      	cmp	r3, #4
    c108:	d804      	bhi.n	c114 <z_cbvprintf_impl+0x444>
    c10a:	e8df f003 	tbb	[pc, r3]
    c10e:	1018      	.short	0x1018
    c110:	1810      	.short	0x1810
    c112:	18          	.byte	0x18
    c113:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    c114:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    c116:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    c11a:	f04f 0200 	mov.w	r2, #0
    c11e:	d014      	beq.n	c14a <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    c120:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    c122:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    c126:	d1cc      	bne.n	c0c2 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    c128:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    c12a:	9310      	str	r3, [sp, #64]	; 0x40
    c12c:	e7c9      	b.n	c0c2 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    c12e:	3407      	adds	r4, #7
    c130:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    c134:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    c138:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    c13c:	e7c1      	b.n	c0c2 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    c13e:	f854 3b04 	ldr.w	r3, [r4], #4
    c142:	9310      	str	r3, [sp, #64]	; 0x40
    c144:	2300      	movs	r3, #0
    c146:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    c148:	e7bb      	b.n	c0c2 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    c14a:	b2db      	uxtb	r3, r3
    c14c:	e7cd      	b.n	c0ea <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    c14e:	2b04      	cmp	r3, #4
    c150:	d108      	bne.n	c164 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    c152:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    c154:	f024 0407 	bic.w	r4, r4, #7
    c158:	e9d4 2300 	ldrd	r2, r3, [r4]
    c15c:	3408      	adds	r4, #8
    c15e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    c162:	e7ae      	b.n	c0c2 <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    c164:	2b03      	cmp	r3, #3
    c166:	d1ac      	bne.n	c0c2 <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    c168:	f854 3b04 	ldr.w	r3, [r4], #4
    c16c:	e7dd      	b.n	c12a <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    c16e:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    c172:	2878      	cmp	r0, #120	; 0x78
    c174:	d8b4      	bhi.n	c0e0 <z_cbvprintf_impl+0x410>
    c176:	2862      	cmp	r0, #98	; 0x62
    c178:	d81c      	bhi.n	c1b4 <z_cbvprintf_impl+0x4e4>
    c17a:	2825      	cmp	r0, #37	; 0x25
    c17c:	f43f adb8 	beq.w	bcf0 <z_cbvprintf_impl+0x20>
    c180:	2858      	cmp	r0, #88	; 0x58
    c182:	d1ad      	bne.n	c0e0 <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    c184:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    c188:	9300      	str	r3, [sp, #0]
    c18a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    c18e:	ab0a      	add	r3, sp, #40	; 0x28
    c190:	aa12      	add	r2, sp, #72	; 0x48
    c192:	f7ff fd51 	bl	bc38 <encode_uint>
			if (precision >= 0) {
    c196:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    c19a:	4607      	mov	r7, r0
			if (precision >= 0) {
    c19c:	f280 8098 	bge.w	c2d0 <z_cbvprintf_impl+0x600>
		if (bps == NULL) {
    c1a0:	2f00      	cmp	r7, #0
    c1a2:	d09d      	beq.n	c0e0 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    c1a4:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    c1a8:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    c1ac:	2e00      	cmp	r6, #0
    c1ae:	d04e      	beq.n	c24e <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    c1b0:	3001      	adds	r0, #1
    c1b2:	e04c      	b.n	c24e <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    c1b4:	3863      	subs	r0, #99	; 0x63
    c1b6:	2815      	cmp	r0, #21
    c1b8:	d892      	bhi.n	c0e0 <z_cbvprintf_impl+0x410>
    c1ba:	a201      	add	r2, pc, #4	; (adr r2, c1c0 <z_cbvprintf_impl+0x4f0>)
    c1bc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    c1c0:	0000c23f 	.word	0x0000c23f
    c1c4:	0000c2a5 	.word	0x0000c2a5
    c1c8:	0000c0e1 	.word	0x0000c0e1
    c1cc:	0000c0e1 	.word	0x0000c0e1
    c1d0:	0000c0e1 	.word	0x0000c0e1
    c1d4:	0000c0e1 	.word	0x0000c0e1
    c1d8:	0000c2a5 	.word	0x0000c2a5
    c1dc:	0000c0e1 	.word	0x0000c0e1
    c1e0:	0000c0e1 	.word	0x0000c0e1
    c1e4:	0000c0e1 	.word	0x0000c0e1
    c1e8:	0000c0e1 	.word	0x0000c0e1
    c1ec:	0000c32f 	.word	0x0000c32f
    c1f0:	0000c2cb 	.word	0x0000c2cb
    c1f4:	0000c2f1 	.word	0x0000c2f1
    c1f8:	0000c0e1 	.word	0x0000c0e1
    c1fc:	0000c0e1 	.word	0x0000c0e1
    c200:	0000c219 	.word	0x0000c219
    c204:	0000c0e1 	.word	0x0000c0e1
    c208:	0000c2cb 	.word	0x0000c2cb
    c20c:	0000c0e1 	.word	0x0000c0e1
    c210:	0000c0e1 	.word	0x0000c0e1
    c214:	0000c2cb 	.word	0x0000c2cb
			if (precision >= 0) {
    c218:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    c21c:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    c21e:	db0a      	blt.n	c236 <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    c220:	4659      	mov	r1, fp
    c222:	4638      	mov	r0, r7
    c224:	f007 f8a0 	bl	13368 <strnlen>
			bpe = bps + len;
    c228:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    c22c:	2f00      	cmp	r7, #0
    c22e:	f43f af57 	beq.w	c0e0 <z_cbvprintf_impl+0x410>
		char sign = 0;
    c232:	2600      	movs	r6, #0
    c234:	e00b      	b.n	c24e <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    c236:	4638      	mov	r0, r7
    c238:	f7fc f94a 	bl	84d0 <strlen>
    c23c:	e7f4      	b.n	c228 <z_cbvprintf_impl+0x558>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    c23e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c240:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    c244:	2600      	movs	r6, #0
			bpe = buf + 1;
    c246:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			bps = buf;
    c24a:	af0a      	add	r7, sp, #40	; 0x28
		size_t nj_len = (bpe - bps);
    c24c:	2001      	movs	r0, #1
		if (conv->altform_0c) {
    c24e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    c252:	f013 0210 	ands.w	r2, r3, #16
    c256:	9205      	str	r2, [sp, #20]
    c258:	f000 8084 	beq.w	c364 <z_cbvprintf_impl+0x694>
			nj_len += 2U;
    c25c:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    c25e:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    c260:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    c264:	bf48      	it	mi
    c266:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    c268:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    c26a:	bf48      	it	mi
    c26c:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    c26e:	f1b9 0f00 	cmp.w	r9, #0
    c272:	f340 8091 	ble.w	c398 <z_cbvprintf_impl+0x6c8>
			if (!conv->flag_dash) {
    c276:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    c27a:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    c27e:	f3c2 0380 	ubfx	r3, r2, #2, #1
    c282:	0750      	lsls	r0, r2, #29
    c284:	9306      	str	r3, [sp, #24]
    c286:	f100 8087 	bmi.w	c398 <z_cbvprintf_impl+0x6c8>
				if (conv->flag_zero) {
    c28a:	0651      	lsls	r1, r2, #25
    c28c:	d57a      	bpl.n	c384 <z_cbvprintf_impl+0x6b4>
					if (sign != 0) {
    c28e:	b13e      	cbz	r6, c2a0 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    c290:	9903      	ldr	r1, [sp, #12]
    c292:	4630      	mov	r0, r6
    c294:	47d0      	blx	sl
    c296:	2800      	cmp	r0, #0
    c298:	db71      	blt.n	c37e <z_cbvprintf_impl+0x6ae>
    c29a:	9b06      	ldr	r3, [sp, #24]
    c29c:	3501      	adds	r5, #1
    c29e:	461e      	mov	r6, r3
					pad = '0';
    c2a0:	2230      	movs	r2, #48	; 0x30
    c2a2:	e070      	b.n	c386 <z_cbvprintf_impl+0x6b6>
			if (conv->flag_plus) {
    c2a4:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    c2a6:	bf5c      	itt	pl
    c2a8:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    c2ac:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    c2ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
				sign = '+';
    c2b2:	bf48      	it	mi
    c2b4:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    c2b6:	2b00      	cmp	r3, #0
    c2b8:	f6bf af64 	bge.w	c184 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    c2bc:	4252      	negs	r2, r2
    c2be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2c2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
    c2c6:	262d      	movs	r6, #45	; 0x2d
    c2c8:	e75c      	b.n	c184 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    c2ca:	2600      	movs	r6, #0
    c2cc:	e75a      	b.n	c184 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    c2ce:	2600      	movs	r6, #0
				conv->flag_zero = false;
    c2d0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    c2d4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    c2d8:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    c2da:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    c2de:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    c2e0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    c2e4:	f67f af5c 	bls.w	c1a0 <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    c2e8:	ebab 0303 	sub.w	r3, fp, r3
    c2ec:	9313      	str	r3, [sp, #76]	; 0x4c
    c2ee:	e757      	b.n	c1a0 <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    c2f0:	9810      	ldr	r0, [sp, #64]	; 0x40
    c2f2:	b380      	cbz	r0, c356 <z_cbvprintf_impl+0x686>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    c2f4:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    c2f8:	ab0a      	add	r3, sp, #40	; 0x28
    c2fa:	f8cd 8000 	str.w	r8, [sp]
    c2fe:	aa12      	add	r2, sp, #72	; 0x48
    c300:	2100      	movs	r1, #0
    c302:	f7ff fc99 	bl	bc38 <encode_uint>
				conv->altform_0c = true;
    c306:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    c30a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    c30e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    c312:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    c316:	f1bb 0f00 	cmp.w	fp, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    c31a:	4607      	mov	r7, r0
				conv->altform_0c = true;
    c31c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    c320:	dad5      	bge.n	c2ce <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    c322:	2800      	cmp	r0, #0
    c324:	f43f aedc 	beq.w	c0e0 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    c328:	eba8 0000 	sub.w	r0, r8, r0
    c32c:	e781      	b.n	c232 <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    c32e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    c330:	2907      	cmp	r1, #7
    c332:	f63f aed5 	bhi.w	c0e0 <z_cbvprintf_impl+0x410>
    c336:	e8df f001 	tbb	[pc, r1]
    c33a:	040c      	.short	0x040c
    c33c:	08080c06 	.word	0x08080c06
    c340:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    c342:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    c344:	e6cc      	b.n	c0e0 <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    c346:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    c348:	e6ca      	b.n	c0e0 <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    c34a:	17ea      	asrs	r2, r5, #31
    c34c:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    c350:	e6c6      	b.n	c0e0 <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    c352:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    c354:	e6c4      	b.n	c0e0 <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    c356:	f8df 80bc 	ldr.w	r8, [pc, #188]	; c414 <z_cbvprintf_impl+0x744>
		char sign = 0;
    c35a:	4606      	mov	r6, r0
    c35c:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    c360:	2005      	movs	r0, #5
    c362:	e774      	b.n	c24e <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    c364:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    c366:	bf48      	it	mi
    c368:	3001      	addmi	r0, #1
    c36a:	e778      	b.n	c25e <z_cbvprintf_impl+0x58e>
    c36c:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    c36e:	4610      	mov	r0, r2
    c370:	9206      	str	r2, [sp, #24]
    c372:	9903      	ldr	r1, [sp, #12]
    c374:	47d0      	blx	sl
    c376:	2800      	cmp	r0, #0
    c378:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    c37c:	da04      	bge.n	c388 <z_cbvprintf_impl+0x6b8>
#undef OUTS
#undef OUTC
}
    c37e:	b017      	add	sp, #92	; 0x5c
    c380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    c384:	2220      	movs	r2, #32
					pad = '0';
    c386:	464b      	mov	r3, r9
				while (width-- > 0) {
    c388:	4619      	mov	r1, r3
    c38a:	2900      	cmp	r1, #0
    c38c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    c390:	dcec      	bgt.n	c36c <z_cbvprintf_impl+0x69c>
    c392:	444d      	add	r5, r9
    c394:	1a6d      	subs	r5, r5, r1
    c396:	4699      	mov	r9, r3
		if (sign != 0) {
    c398:	b12e      	cbz	r6, c3a6 <z_cbvprintf_impl+0x6d6>
			OUTC(sign);
    c39a:	9903      	ldr	r1, [sp, #12]
    c39c:	4630      	mov	r0, r6
    c39e:	47d0      	blx	sl
    c3a0:	2800      	cmp	r0, #0
    c3a2:	dbec      	blt.n	c37e <z_cbvprintf_impl+0x6ae>
    c3a4:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    c3a6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    c3aa:	06da      	lsls	r2, r3, #27
    c3ac:	d401      	bmi.n	c3b2 <z_cbvprintf_impl+0x6e2>
    c3ae:	071b      	lsls	r3, r3, #28
    c3b0:	d505      	bpl.n	c3be <z_cbvprintf_impl+0x6ee>
				OUTC('0');
    c3b2:	9903      	ldr	r1, [sp, #12]
    c3b4:	2030      	movs	r0, #48	; 0x30
    c3b6:	47d0      	blx	sl
    c3b8:	2800      	cmp	r0, #0
    c3ba:	dbe0      	blt.n	c37e <z_cbvprintf_impl+0x6ae>
    c3bc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    c3be:	9b05      	ldr	r3, [sp, #20]
    c3c0:	b133      	cbz	r3, c3d0 <z_cbvprintf_impl+0x700>
				OUTC(conv->specifier);
    c3c2:	9903      	ldr	r1, [sp, #12]
    c3c4:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    c3c8:	47d0      	blx	sl
    c3ca:	2800      	cmp	r0, #0
    c3cc:	dbd7      	blt.n	c37e <z_cbvprintf_impl+0x6ae>
    c3ce:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    c3d0:	44ab      	add	fp, r5
    c3d2:	e005      	b.n	c3e0 <z_cbvprintf_impl+0x710>
				OUTC('0');
    c3d4:	9903      	ldr	r1, [sp, #12]
    c3d6:	2030      	movs	r0, #48	; 0x30
    c3d8:	47d0      	blx	sl
    c3da:	2800      	cmp	r0, #0
    c3dc:	dbcf      	blt.n	c37e <z_cbvprintf_impl+0x6ae>
    c3de:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    c3e0:	ebab 0305 	sub.w	r3, fp, r5
    c3e4:	2b00      	cmp	r3, #0
    c3e6:	dcf5      	bgt.n	c3d4 <z_cbvprintf_impl+0x704>
			OUTS(bps, bpe);
    c3e8:	9903      	ldr	r1, [sp, #12]
    c3ea:	4643      	mov	r3, r8
    c3ec:	463a      	mov	r2, r7
    c3ee:	4650      	mov	r0, sl
    c3f0:	f005 ff5e 	bl	122b0 <outs>
    c3f4:	2800      	cmp	r0, #0
    c3f6:	dbc2      	blt.n	c37e <z_cbvprintf_impl+0x6ae>
    c3f8:	4405      	add	r5, r0
		while (width > 0) {
    c3fa:	44a9      	add	r9, r5
    c3fc:	eba9 0305 	sub.w	r3, r9, r5
    c400:	2b00      	cmp	r3, #0
    c402:	f77f ae6d 	ble.w	c0e0 <z_cbvprintf_impl+0x410>
			OUTC(' ');
    c406:	9903      	ldr	r1, [sp, #12]
    c408:	2020      	movs	r0, #32
    c40a:	47d0      	blx	sl
    c40c:	2800      	cmp	r0, #0
    c40e:	dbb6      	blt.n	c37e <z_cbvprintf_impl+0x6ae>
    c410:	3501      	adds	r5, #1
			--width;
    c412:	e7f3      	b.n	c3fc <z_cbvprintf_impl+0x72c>
    c414:	00013969 	.word	0x00013969

0000c418 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    c418:	f003 b94a 	b.w	f6b0 <SystemInit>

0000c41c <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
    c41c:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __zephyr_init_array_start;
    c41e:	4c04      	ldr	r4, [pc, #16]	; (c430 <__do_init_array_aux+0x14>)
		func < __zephyr_init_array_end;
    c420:	4d04      	ldr	r5, [pc, #16]	; (c434 <__do_init_array_aux+0x18>)
    c422:	42ac      	cmp	r4, r5
    c424:	d300      	bcc.n	c428 <__do_init_array_aux+0xc>
		func++) {
		(*func)();
	}
}
    c426:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
    c428:	f854 3b04 	ldr.w	r3, [r4], #4
    c42c:	4798      	blx	r3
		func++) {
    c42e:	e7f8      	b.n	c422 <__do_init_array_aux+0x6>
    c430:	000135bc 	.word	0x000135bc
    c434:	000135bc 	.word	0x000135bc

0000c438 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
    c438:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__ZEPHYR_CTOR_LIST__[0];
    c43a:	4c05      	ldr	r4, [pc, #20]	; (c450 <__do_global_ctors_aux+0x18>)
    c43c:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
    c43e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    c442:	b905      	cbnz	r5, c446 <__do_global_ctors_aux+0xe>
		__ZEPHYR_CTOR_LIST__[nCtors--]();
	}
}
    c444:	bd38      	pop	{r3, r4, r5, pc}
		__ZEPHYR_CTOR_LIST__[nCtors--]();
    c446:	f854 3904 	ldr.w	r3, [r4], #-4
    c44a:	3d01      	subs	r5, #1
    c44c:	4798      	blx	r3
    c44e:	e7f8      	b.n	c442 <__do_global_ctors_aux+0xa>
    c450:	000135b0 	.word	0x000135b0

0000c454 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    c454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c458:	4605      	mov	r5, r0
	__asm__ volatile(
    c45a:	f04f 0340 	mov.w	r3, #64	; 0x40
    c45e:	f3ef 8611 	mrs	r6, BASEPRI
    c462:	f383 8812 	msr	BASEPRI_MAX, r3
    c466:	f3bf 8f6f 	isb	sy
	return list->head;
    c46a:	4b0e      	ldr	r3, [pc, #56]	; (c4a4 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    c46c:	4f0e      	ldr	r7, [pc, #56]	; (c4a8 <pm_state_notify+0x54>)
    c46e:	681c      	ldr	r4, [r3, #0]
    c470:	f8df 8038 	ldr.w	r8, [pc, #56]	; c4ac <pm_state_notify+0x58>
    c474:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    c478:	b92c      	cbnz	r4, c486 <pm_state_notify+0x32>
	__asm__ volatile(
    c47a:	f386 8811 	msr	BASEPRI, r6
    c47e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    c482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    c486:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    c48a:	2d00      	cmp	r5, #0
    c48c:	bf18      	it	ne
    c48e:	4613      	movne	r3, r2
		if (callback) {
    c490:	b12b      	cbz	r3, c49e <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    c492:	f898 2014 	ldrb.w	r2, [r8, #20]
    c496:	fb09 f202 	mul.w	r2, r9, r2
    c49a:	5cb8      	ldrb	r0, [r7, r2]
    c49c:	4798      	blx	r3
	return node->next;
    c49e:	6824      	ldr	r4, [r4, #0]
    c4a0:	e7ea      	b.n	c478 <pm_state_notify+0x24>
    c4a2:	bf00      	nop
    c4a4:	2000152c 	.word	0x2000152c
    c4a8:	20001520 	.word	0x20001520
    c4ac:	20001684 	.word	0x20001684

0000c4b0 <pm_system_resume>:

void pm_system_resume(void)
{
    c4b0:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    c4b2:	4b19      	ldr	r3, [pc, #100]	; (c518 <pm_system_resume+0x68>)
    c4b4:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c4b6:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    c4ba:	f004 031f 	and.w	r3, r4, #31
    c4be:	2201      	movs	r2, #1
    c4c0:	409a      	lsls	r2, r3
    c4c2:	4b16      	ldr	r3, [pc, #88]	; (c51c <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c4c4:	0961      	lsrs	r1, r4, #5
    c4c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c4ca:	43d0      	mvns	r0, r2
    c4cc:	e853 1f00 	ldrex	r1, [r3]
    c4d0:	ea01 0500 	and.w	r5, r1, r0
    c4d4:	e843 5600 	strex	r6, r5, [r3]
    c4d8:	2e00      	cmp	r6, #0
    c4da:	d1f7      	bne.n	c4cc <pm_system_resume+0x1c>
    c4dc:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    c4e0:	420a      	tst	r2, r1
    c4e2:	d013      	beq.n	c50c <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    c4e4:	4b0e      	ldr	r3, [pc, #56]	; (c520 <pm_system_resume+0x70>)
    c4e6:	4d0f      	ldr	r5, [pc, #60]	; (c524 <pm_system_resume+0x74>)
    c4e8:	b18b      	cbz	r3, c50e <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    c4ea:	230c      	movs	r3, #12
    c4ec:	4363      	muls	r3, r4
    c4ee:	18ea      	adds	r2, r5, r3
    c4f0:	5ce8      	ldrb	r0, [r5, r3]
    c4f2:	7851      	ldrb	r1, [r2, #1]
    c4f4:	f005 ff35 	bl	12362 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    c4f8:	2000      	movs	r0, #0
    c4fa:	f7ff ffab 	bl	c454 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    c4fe:	230c      	movs	r3, #12
    c500:	435c      	muls	r4, r3
    c502:	192a      	adds	r2, r5, r4
    c504:	2300      	movs	r3, #0
    c506:	512b      	str	r3, [r5, r4]
    c508:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    c50c:	bd70      	pop	{r4, r5, r6, pc}
    c50e:	f383 8811 	msr	BASEPRI, r3
    c512:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    c516:	e7ef      	b.n	c4f8 <pm_system_resume+0x48>
    c518:	20001684 	.word	0x20001684
    c51c:	20001534 	.word	0x20001534
    c520:	00012363 	.word	0x00012363
    c524:	20001520 	.word	0x20001520

0000c528 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    c528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    c52c:	4b35      	ldr	r3, [pc, #212]	; (c604 <pm_system_suspend+0xdc>)
{
    c52e:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    c530:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    c532:	f04f 0340 	mov.w	r3, #64	; 0x40
    c536:	f3ef 8811 	mrs	r8, BASEPRI
    c53a:	f383 8812 	msr	BASEPRI_MAX, r3
    c53e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    c542:	240c      	movs	r4, #12
    c544:	4b30      	ldr	r3, [pc, #192]	; (c608 <pm_system_suspend+0xe0>)
    c546:	4e31      	ldr	r6, [pc, #196]	; (c60c <pm_system_suspend+0xe4>)
    c548:	436c      	muls	r4, r5
    c54a:	191a      	adds	r2, r3, r4
    c54c:	5d19      	ldrb	r1, [r3, r4]
    c54e:	2900      	cmp	r1, #0
    c550:	d04c      	beq.n	c5ec <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    c552:	ca07      	ldmia	r2, {r0, r1, r2}
    c554:	eb06 0c04 	add.w	ip, r6, r4
    c558:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    c55c:	2200      	movs	r2, #0
    c55e:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    c560:	f388 8811 	msr	BASEPRI, r8
    c564:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    c568:	230c      	movs	r3, #12
    c56a:	436b      	muls	r3, r5
    c56c:	18f2      	adds	r2, r6, r3
    c56e:	5cf0      	ldrb	r0, [r6, r3]
    c570:	2800      	cmp	r0, #0
    c572:	d039      	beq.n	c5e8 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    c574:	1c7b      	adds	r3, r7, #1
    c576:	d010      	beq.n	c59a <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    c578:	f8d2 c008 	ldr.w	ip, [r2, #8]
    c57c:	4c24      	ldr	r4, [pc, #144]	; (c610 <pm_system_suspend+0xe8>)
    c57e:	4a25      	ldr	r2, [pc, #148]	; (c614 <pm_system_suspend+0xec>)
    c580:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c584:	2100      	movs	r1, #0
    c586:	fbec 4100 	umlal	r4, r1, ip, r0
    c58a:	2300      	movs	r3, #0
    c58c:	4620      	mov	r0, r4
    c58e:	f7f4 fa8d 	bl	aac <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    c592:	2101      	movs	r1, #1
    c594:	1a38      	subs	r0, r7, r0
    c596:	f006 fde8 	bl	1316a <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    c59a:	f004 fc69 	bl	10e70 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    c59e:	2001      	movs	r0, #1
    c5a0:	f7ff ff58 	bl	c454 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c5a4:	f3bf 8f5b 	dmb	ish
    c5a8:	4b1b      	ldr	r3, [pc, #108]	; (c618 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    c5aa:	096a      	lsrs	r2, r5, #5
    c5ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    c5b0:	f005 011f 	and.w	r1, r5, #31
    c5b4:	2201      	movs	r2, #1
    c5b6:	408a      	lsls	r2, r1
    c5b8:	e853 0f00 	ldrex	r0, [r3]
    c5bc:	4310      	orrs	r0, r2
    c5be:	e843 0100 	strex	r1, r0, [r3]
    c5c2:	2900      	cmp	r1, #0
    c5c4:	d1f8      	bne.n	c5b8 <pm_system_suspend+0x90>
    c5c6:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    c5ca:	4b14      	ldr	r3, [pc, #80]	; (c61c <pm_system_suspend+0xf4>)
    c5cc:	b13b      	cbz	r3, c5de <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    c5ce:	230c      	movs	r3, #12
    c5d0:	fb03 f005 	mul.w	r0, r3, r5
    c5d4:	1833      	adds	r3, r6, r0
    c5d6:	5c30      	ldrb	r0, [r6, r0]
    c5d8:	7859      	ldrb	r1, [r3, #1]
    c5da:	f005 feb6 	bl	1234a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    c5de:	f7ff ff67 	bl	c4b0 <pm_system_resume>
	k_sched_unlock();
    c5e2:	f004 fc59 	bl	10e98 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    c5e6:	2001      	movs	r0, #1
}
    c5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    c5ec:	4601      	mov	r1, r0
    c5ee:	4628      	mov	r0, r5
    c5f0:	f000 f816 	bl	c620 <pm_policy_next_state>
		if (info != NULL) {
    c5f4:	2800      	cmp	r0, #0
    c5f6:	d0b3      	beq.n	c560 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    c5f8:	c807      	ldmia	r0, {r0, r1, r2}
    c5fa:	4434      	add	r4, r6
    c5fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    c600:	e7ae      	b.n	c560 <pm_system_suspend+0x38>
    c602:	bf00      	nop
    c604:	20001684 	.word	0x20001684
    c608:	20001514 	.word	0x20001514
    c60c:	20001520 	.word	0x20001520
    c610:	000f423f 	.word	0x000f423f
    c614:	000f4240 	.word	0x000f4240
    c618:	20001534 	.word	0x20001534
    c61c:	0001234b 	.word	0x0001234b

0000c620 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    c620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c624:	b085      	sub	sp, #20
    c626:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    c628:	a903      	add	r1, sp, #12
    c62a:	f000 f843 	bl	c6b4 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c62e:	4b1e      	ldr	r3, [pc, #120]	; (c6a8 <pm_policy_next_state+0x88>)
    c630:	9d03      	ldr	r5, [sp, #12]
    c632:	f8d3 a000 	ldr.w	sl, [r3]
    c636:	f8df 8074 	ldr.w	r8, [pc, #116]	; c6ac <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c63a:	1e43      	subs	r3, r0, #1
    c63c:	b21b      	sxth	r3, r3
    c63e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    c642:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c644:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    c648:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    c64c:	f04f 0b00 	mov.w	fp, #0
    c650:	b924      	cbnz	r4, c65c <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    c652:	46a1      	mov	r9, r4
}
    c654:	4648      	mov	r0, r9
    c656:	b005      	add	sp, #20
    c658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c65c:	6868      	ldr	r0, [r5, #4]
    c65e:	4a14      	ldr	r2, [pc, #80]	; (c6b0 <pm_policy_next_state+0x90>)
    c660:	46c4      	mov	ip, r8
    c662:	4659      	mov	r1, fp
    c664:	fbe0 c107 	umlal	ip, r1, r0, r7
    c668:	2300      	movs	r3, #0
    c66a:	4660      	mov	r0, ip
    c66c:	f7f4 fa1e 	bl	aac <__aeabi_uldivmod>
    c670:	9001      	str	r0, [sp, #4]
    c672:	68a8      	ldr	r0, [r5, #8]
    c674:	4a0e      	ldr	r2, [pc, #56]	; (c6b0 <pm_policy_next_state+0x90>)
    c676:	46c4      	mov	ip, r8
    c678:	4659      	mov	r1, fp
    c67a:	fbe0 c107 	umlal	ip, r1, r0, r7
    c67e:	2300      	movs	r3, #0
    c680:	4660      	mov	r0, ip
    c682:	f7f4 fa13 	bl	aac <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c686:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    c68a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c68c:	d001      	beq.n	c692 <pm_policy_next_state+0x72>
    c68e:	4582      	cmp	sl, r0
    c690:	d905      	bls.n	c69e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    c692:	1c73      	adds	r3, r6, #1
    c694:	d0de      	beq.n	c654 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    c696:	9b01      	ldr	r3, [sp, #4]
    c698:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    c69a:	42b0      	cmp	r0, r6
    c69c:	d9da      	bls.n	c654 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c69e:	3c01      	subs	r4, #1
    c6a0:	b2a4      	uxth	r4, r4
    c6a2:	3d0c      	subs	r5, #12
    c6a4:	e7d4      	b.n	c650 <pm_policy_next_state+0x30>
    c6a6:	bf00      	nop
    c6a8:	20000384 	.word	0x20000384
    c6ac:	000f423f 	.word	0x000f423f
    c6b0:	000f4240 	.word	0x000f4240

0000c6b4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    c6b4:	b908      	cbnz	r0, c6ba <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    c6b6:	4b02      	ldr	r3, [pc, #8]	; (c6c0 <pm_state_cpu_get_all+0xc>)
    c6b8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    c6ba:	2000      	movs	r0, #0
    c6bc:	4770      	bx	lr
    c6be:	bf00      	nop
    c6c0:	00013624 	.word	0x00013624

0000c6c4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    c6c4:	4901      	ldr	r1, [pc, #4]	; (c6cc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    c6c6:	2210      	movs	r2, #16
	str	r2, [r1]
    c6c8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    c6ca:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    c6cc:	e000ed10 	.word	0xe000ed10

0000c6d0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    c6d0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    c6d2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    c6d4:	f380 8811 	msr	BASEPRI, r0
	isb
    c6d8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    c6dc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    c6e0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    c6e2:	b662      	cpsie	i
	isb
    c6e4:	f3bf 8f6f 	isb	sy

	bx	lr
    c6e8:	4770      	bx	lr
    c6ea:	bf00      	nop

0000c6ec <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    c6ec:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    c6ee:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    c6f0:	f381 8811 	msr	BASEPRI, r1

	wfe
    c6f4:	bf20      	wfe

	msr	BASEPRI, r0
    c6f6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    c6fa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    c6fc:	4770      	bx	lr
    c6fe:	bf00      	nop

0000c700 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    c700:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    c702:	2800      	cmp	r0, #0
    c704:	db07      	blt.n	c716 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c706:	4a04      	ldr	r2, [pc, #16]	; (c718 <arch_irq_enable+0x18>)
    c708:	0941      	lsrs	r1, r0, #5
    c70a:	2301      	movs	r3, #1
    c70c:	f000 001f 	and.w	r0, r0, #31
    c710:	4083      	lsls	r3, r0
    c712:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    c716:	4770      	bx	lr
    c718:	e000e100 	.word	0xe000e100

0000c71c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    c71c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    c71e:	2800      	cmp	r0, #0
    c720:	db0c      	blt.n	c73c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c722:	0943      	lsrs	r3, r0, #5
    c724:	4906      	ldr	r1, [pc, #24]	; (c740 <arch_irq_disable+0x24>)
    c726:	f000 001f 	and.w	r0, r0, #31
    c72a:	3320      	adds	r3, #32
    c72c:	2201      	movs	r2, #1
    c72e:	4082      	lsls	r2, r0
    c730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c734:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c738:	f3bf 8f6f 	isb	sy
}
    c73c:	4770      	bx	lr
    c73e:	bf00      	nop
    c740:	e000e100 	.word	0xe000e100

0000c744 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    c744:	4b05      	ldr	r3, [pc, #20]	; (c75c <arch_irq_is_enabled+0x18>)
    c746:	0942      	lsrs	r2, r0, #5
    c748:	f000 001f 	and.w	r0, r0, #31
    c74c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    c750:	2301      	movs	r3, #1
    c752:	fa03 f000 	lsl.w	r0, r3, r0
}
    c756:	4010      	ands	r0, r2
    c758:	4770      	bx	lr
    c75a:	bf00      	nop
    c75c:	e000e100 	.word	0xe000e100

0000c760 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    c760:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    c762:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
    c764:	bf54      	ite	pl
    c766:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    c768:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    c76a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c76c:	bfac      	ite	ge
    c76e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c772:	4a07      	ldrlt	r2, [pc, #28]	; (c790 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c774:	ea4f 1341 	mov.w	r3, r1, lsl #5
    c778:	bfac      	ite	ge
    c77a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c77e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c782:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c784:	bfb4      	ite	lt
    c786:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c788:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
    c78c:	4770      	bx	lr
    c78e:	bf00      	nop
    c790:	e000ed14 	.word	0xe000ed14

0000c794 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    c794:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    c796:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    c798:	4b04      	ldr	r3, [pc, #16]	; (c7ac <_arch_isr_direct_pm+0x18>)
    c79a:	699a      	ldr	r2, [r3, #24]
    c79c:	b11a      	cbz	r2, c7a6 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    c79e:	2200      	movs	r2, #0
    c7a0:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    c7a2:	f006 fa93 	bl	12ccc <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    c7a6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    c7a8:	bd08      	pop	{r3, pc}
    c7aa:	bf00      	nop
    c7ac:	20001684 	.word	0x20001684

0000c7b0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    c7b0:	bf30      	wfi
    b z_SysNmiOnReset
    c7b2:	f7ff bffd 	b.w	c7b0 <z_SysNmiOnReset>
    c7b6:	bf00      	nop

0000c7b8 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    c7b8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    c7ba:	4b08      	ldr	r3, [pc, #32]	; (c7dc <z_arm_prep_c+0x24>)
    c7bc:	4a08      	ldr	r2, [pc, #32]	; (c7e0 <z_arm_prep_c+0x28>)
    c7be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    c7c2:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    c7c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c7c8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    c7cc:	f003 fd4a 	bl	10264 <z_bss_zero>
	z_data_copy();
    c7d0:	f004 fc9e 	bl	11110 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    c7d4:	f000 f9ce 	bl	cb74 <z_arm_interrupt_init>
	z_cstart();
    c7d8:	f003 fd88 	bl	102ec <z_cstart>
    c7dc:	00000000 	.word	0x00000000
    c7e0:	e000ed00 	.word	0xe000ed00

0000c7e4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    c7e4:	4a09      	ldr	r2, [pc, #36]	; (c80c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    c7e6:	490a      	ldr	r1, [pc, #40]	; (c810 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    c7e8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    c7ea:	6809      	ldr	r1, [r1, #0]
    c7ec:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    c7ee:	4909      	ldr	r1, [pc, #36]	; (c814 <arch_swap+0x30>)
	_current->arch.basepri = key;
    c7f0:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    c7f2:	684b      	ldr	r3, [r1, #4]
    c7f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    c7f8:	604b      	str	r3, [r1, #4]
    c7fa:	2300      	movs	r3, #0
    c7fc:	f383 8811 	msr	BASEPRI, r3
    c800:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    c804:	6893      	ldr	r3, [r2, #8]
}
    c806:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    c808:	4770      	bx	lr
    c80a:	bf00      	nop
    c80c:	20001684 	.word	0x20001684
    c810:	000137b0 	.word	0x000137b0
    c814:	e000ed00 	.word	0xe000ed00

0000c818 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    c818:	4912      	ldr	r1, [pc, #72]	; (c864 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    c81a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    c81c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    c820:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    c822:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    c826:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    c82a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    c82c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    c830:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    c834:	4f0c      	ldr	r7, [pc, #48]	; (c868 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    c836:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    c83a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    c83c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    c83e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    c840:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    c842:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    c844:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    c846:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    c84a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    c84c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    c84e:	f000 fa2d 	bl	ccac <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    c852:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    c856:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    c85a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    c85e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    c862:	4770      	bx	lr
    ldr r1, =_kernel
    c864:	20001684 	.word	0x20001684
    ldr v4, =_SCS_ICSR
    c868:	e000ed04 	.word	0xe000ed04

0000c86c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    c86c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    c870:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    c872:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    c876:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    c87a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    c87c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    c880:	2902      	cmp	r1, #2
    beq _oops
    c882:	d0ff      	beq.n	c884 <_oops>

0000c884 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    c884:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    c886:	f005 fd41 	bl	1230c <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    c88a:	bd01      	pop	{r0, pc}

0000c88c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    c88c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    c890:	9b00      	ldr	r3, [sp, #0]
    c892:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    c896:	490a      	ldr	r1, [pc, #40]	; (c8c0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    c898:	9b01      	ldr	r3, [sp, #4]
    c89a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    c89e:	9b02      	ldr	r3, [sp, #8]
    c8a0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    c8a4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    c8a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    c8ac:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    c8b0:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    c8b4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    c8b6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    c8b8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    c8ba:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    c8bc:	4770      	bx	lr
    c8be:	bf00      	nop
    c8c0:	00011d43 	.word	0x00011d43

0000c8c4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    c8c4:	4a09      	ldr	r2, [pc, #36]	; (c8ec <z_check_thread_stack_fail+0x28>)
{
    c8c6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    c8c8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    c8ca:	b170      	cbz	r0, c8ea <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    c8cc:	f113 0f16 	cmn.w	r3, #22
    c8d0:	6e80      	ldr	r0, [r0, #104]	; 0x68
    c8d2:	d005      	beq.n	c8e0 <z_check_thread_stack_fail+0x1c>
    c8d4:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    c8d8:	429a      	cmp	r2, r3
    c8da:	d805      	bhi.n	c8e8 <z_check_thread_stack_fail+0x24>
    c8dc:	4283      	cmp	r3, r0
    c8de:	d203      	bcs.n	c8e8 <z_check_thread_stack_fail+0x24>
		return 0;
    c8e0:	4281      	cmp	r1, r0
    c8e2:	bf28      	it	cs
    c8e4:	2000      	movcs	r0, #0
    c8e6:	4770      	bx	lr
    c8e8:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    c8ea:	4770      	bx	lr
    c8ec:	20001684 	.word	0x20001684

0000c8f0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    c8f0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    c8f2:	4b09      	ldr	r3, [pc, #36]	; (c918 <arch_switch_to_main_thread+0x28>)
    c8f4:	6098      	str	r0, [r3, #8]
{
    c8f6:	460d      	mov	r5, r1
    c8f8:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    c8fa:	f000 f9d7 	bl	ccac <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    c8fe:	4620      	mov	r0, r4
    c900:	f385 8809 	msr	PSP, r5
    c904:	2100      	movs	r1, #0
    c906:	b663      	cpsie	if
    c908:	f381 8811 	msr	BASEPRI, r1
    c90c:	f3bf 8f6f 	isb	sy
    c910:	2200      	movs	r2, #0
    c912:	2300      	movs	r3, #0
    c914:	f005 fa15 	bl	11d42 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    c918:	20001684 	.word	0x20001684

0000c91c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    c91c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    c91e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    c920:	4a0b      	ldr	r2, [pc, #44]	; (c950 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    c922:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    c924:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    c926:	bf1e      	ittt	ne
	movne	r1, #0
    c928:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    c92a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    c92c:	f006 f9ce 	blne	12ccc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    c930:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    c932:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    c936:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    c93a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    c93e:	4905      	ldr	r1, [pc, #20]	; (c954 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    c940:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    c942:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    c944:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    c946:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    c94a:	4903      	ldr	r1, [pc, #12]	; (c958 <_isr_wrapper+0x3c>)
	bx r1
    c94c:	4708      	bx	r1
    c94e:	0000      	.short	0x0000
	ldr r2, =_kernel
    c950:	20001684 	.word	0x20001684
	ldr r1, =_sw_isr_table
    c954:	00013498 	.word	0x00013498
	ldr r1, =z_arm_int_exit
    c958:	0000c95d 	.word	0x0000c95d

0000c95c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    c95c:	4b04      	ldr	r3, [pc, #16]	; (c970 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    c95e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    c960:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    c962:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    c964:	d003      	beq.n	c96e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    c966:	4903      	ldr	r1, [pc, #12]	; (c974 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    c968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    c96c:	600a      	str	r2, [r1, #0]

0000c96e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    c96e:	4770      	bx	lr
	ldr r3, =_kernel
    c970:	20001684 	.word	0x20001684
	ldr r1, =_SCS_ICSR
    c974:	e000ed04 	.word	0xe000ed04

0000c978 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    c978:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    c97a:	4b18      	ldr	r3, [pc, #96]	; (c9dc <mem_manage_fault+0x64>)
{
    c97c:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    c97e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    c980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    c982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c984:	0792      	lsls	r2, r2, #30
{
    c986:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    c988:	d519      	bpl.n	c9be <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    c98a:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    c98c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c98e:	0615      	lsls	r5, r2, #24
    c990:	d515      	bpl.n	c9be <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    c992:	b119      	cbz	r1, c99c <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    c994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c996:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    c99a:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    c99c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    c99e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c9a0:	4d0e      	ldr	r5, [pc, #56]	; (c9dc <mem_manage_fault+0x64>)
    c9a2:	f012 0f10 	tst.w	r2, #16
    c9a6:	d10d      	bne.n	c9c4 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    c9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    c9aa:	079a      	lsls	r2, r3, #30
    c9ac:	d40a      	bmi.n	c9c4 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    c9ae:	2000      	movs	r0, #0
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    c9b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    c9b2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    c9b6:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    c9b8:	2300      	movs	r3, #0
    c9ba:	7023      	strb	r3, [r4, #0]

	return reason;
}
    c9bc:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    c9be:	f06f 0015 	mvn.w	r0, #21
    c9c2:	e7eb      	b.n	c99c <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    c9c4:	686b      	ldr	r3, [r5, #4]
    c9c6:	051b      	lsls	r3, r3, #20
    c9c8:	d5f1      	bpl.n	c9ae <mem_manage_fault+0x36>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    c9ca:	4631      	mov	r1, r6
    c9cc:	f7ff ff7a 	bl	c8c4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    c9d0:	2800      	cmp	r0, #0
    c9d2:	d0ec      	beq.n	c9ae <mem_manage_fault+0x36>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    c9d4:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    c9d8:	2002      	movs	r0, #2
    c9da:	e7e9      	b.n	c9b0 <mem_manage_fault+0x38>
    c9dc:	e000ed00 	.word	0xe000ed00

0000c9e0 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    c9e0:	4b0b      	ldr	r3, [pc, #44]	; (ca10 <bus_fault.constprop.0+0x30>)
    c9e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    c9e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    c9e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c9e8:	0592      	lsls	r2, r2, #22
    c9ea:	d508      	bpl.n	c9fe <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    c9ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    c9ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c9f0:	0412      	lsls	r2, r2, #16
    c9f2:	d504      	bpl.n	c9fe <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    c9f4:	b118      	cbz	r0, c9fe <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    c9f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c9f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    c9fc:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    c9fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    ca00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    ca02:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    ca04:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    ca06:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    ca0a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    ca0c:	7008      	strb	r0, [r1, #0]

	return reason;
}
    ca0e:	4770      	bx	lr
    ca10:	e000ed00 	.word	0xe000ed00

0000ca14 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    ca14:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ca16:	4b4d      	ldr	r3, [pc, #308]	; (cb4c <z_arm_fault+0x138>)
    ca18:	685b      	ldr	r3, [r3, #4]
{
    ca1a:	b08b      	sub	sp, #44	; 0x2c
    ca1c:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ca1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    ca22:	2500      	movs	r5, #0
    ca24:	f385 8811 	msr	BASEPRI, r5
    ca28:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    ca2c:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    ca30:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    ca34:	d111      	bne.n	ca5a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    ca36:	f002 000c 	and.w	r0, r2, #12
    ca3a:	2808      	cmp	r0, #8
    ca3c:	d00d      	beq.n	ca5a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    ca3e:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    ca40:	bf4c      	ite	mi
    ca42:	460c      	movmi	r4, r1
			*nested_exc = true;
    ca44:	2501      	movpl	r5, #1
	*recoverable = false;
    ca46:	2200      	movs	r2, #0
	switch (fault) {
    ca48:	3b03      	subs	r3, #3
	*recoverable = false;
    ca4a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    ca4e:	2b03      	cmp	r3, #3
    ca50:	d84d      	bhi.n	caee <z_arm_fault+0xda>
    ca52:	e8df f003 	tbb	[pc, r3]
    ca56:	6b04      	.short	0x6b04
    ca58:	736f      	.short	0x736f
		return NULL;
    ca5a:	462c      	mov	r4, r5
    ca5c:	e7f3      	b.n	ca46 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    ca5e:	4b3b      	ldr	r3, [pc, #236]	; (cb4c <z_arm_fault+0x138>)
    ca60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ca62:	0791      	lsls	r1, r2, #30
    ca64:	d443      	bmi.n	caee <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    ca66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ca68:	2a00      	cmp	r2, #0
    ca6a:	db40      	blt.n	caee <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    ca6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ca6e:	0052      	lsls	r2, r2, #1
    ca70:	d53d      	bpl.n	caee <z_arm_fault+0xda>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    ca72:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    ca74:	69a1      	ldr	r1, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    ca76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    ca7a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    ca7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ca80:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    ca84:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    ca86:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    ca8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    ca8e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    ca90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ca94:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    ca98:	f64d 7202 	movw	r2, #57090	; 0xdf02
    ca9c:	4291      	cmp	r1, r2
    ca9e:	d009      	beq.n	cab4 <z_arm_fault+0xa0>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    caa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    caa2:	b2d2      	uxtb	r2, r2
    caa4:	b142      	cbz	r2, cab8 <z_arm_fault+0xa4>
			reason = mem_manage_fault(esf, 1, recoverable);
    caa6:	f10d 0207 	add.w	r2, sp, #7
    caaa:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    caac:	4620      	mov	r0, r4
    caae:	f7ff ff63 	bl	c978 <mem_manage_fault>
    cab2:	e00a      	b.n	caca <z_arm_fault+0xb6>
			reason = esf->basic.r0;
    cab4:	6823      	ldr	r3, [r4, #0]
    cab6:	e01b      	b.n	caf0 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    cab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    caba:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    cabe:	d006      	beq.n	cace <z_arm_fault+0xba>
			reason = bus_fault(esf, 1, recoverable);
    cac0:	f10d 0107 	add.w	r1, sp, #7
    cac4:	2001      	movs	r0, #1
    cac6:	f7ff ff8b 	bl	c9e0 <bus_fault.constprop.0>
    caca:	4603      	mov	r3, r0
    cacc:	e010      	b.n	caf0 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    cace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cad0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    cad4:	d30b      	bcc.n	caee <z_arm_fault+0xda>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    cad6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    cad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    cada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    cadc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    cade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    cae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    cae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cae4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    cae8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    caec:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
    caee:	2300      	movs	r3, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    caf0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    caf4:	b9c2      	cbnz	r2, cb28 <z_arm_fault+0x114>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    caf6:	ae02      	add	r6, sp, #8
    caf8:	f104 0720 	add.w	r7, r4, #32
    cafc:	6820      	ldr	r0, [r4, #0]
    cafe:	6861      	ldr	r1, [r4, #4]
    cb00:	4632      	mov	r2, r6
    cb02:	c203      	stmia	r2!, {r0, r1}
    cb04:	3408      	adds	r4, #8
    cb06:	42bc      	cmp	r4, r7
    cb08:	4616      	mov	r6, r2
    cb0a:	d1f7      	bne.n	cafc <z_arm_fault+0xe8>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    cb0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cb0e:	b1bd      	cbz	r5, cb40 <z_arm_fault+0x12c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    cb10:	f3c2 0108 	ubfx	r1, r2, #0, #9
    cb14:	b921      	cbnz	r1, cb20 <z_arm_fault+0x10c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    cb16:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    cb1a:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    cb1e:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    cb20:	a902      	add	r1, sp, #8
    cb22:	4618      	mov	r0, r3
    cb24:	f005 fbf0 	bl	12308 <z_arm_fatal_error>
}
    cb28:	b00b      	add	sp, #44	; 0x2c
    cb2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    cb2c:	f10d 0207 	add.w	r2, sp, #7
    cb30:	2100      	movs	r1, #0
    cb32:	e7bb      	b.n	caac <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
    cb34:	f10d 0107 	add.w	r1, sp, #7
    cb38:	2000      	movs	r0, #0
    cb3a:	e7c4      	b.n	cac6 <z_arm_fault+0xb2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    cb3c:	4b03      	ldr	r3, [pc, #12]	; (cb4c <z_arm_fault+0x138>)
    cb3e:	e7ca      	b.n	cad6 <z_arm_fault+0xc2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    cb40:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    cb44:	f022 0201 	bic.w	r2, r2, #1
    cb48:	e7e9      	b.n	cb1e <z_arm_fault+0x10a>
    cb4a:	bf00      	nop
    cb4c:	e000ed00 	.word	0xe000ed00

0000cb50 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    cb50:	4a02      	ldr	r2, [pc, #8]	; (cb5c <z_arm_fault_init+0xc>)
    cb52:	6953      	ldr	r3, [r2, #20]
    cb54:	f043 0310 	orr.w	r3, r3, #16
    cb58:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    cb5a:	4770      	bx	lr
    cb5c:	e000ed00 	.word	0xe000ed00

0000cb60 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    cb60:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    cb64:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    cb68:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    cb6a:	4672      	mov	r2, lr
	bl z_arm_fault
    cb6c:	f7ff ff52 	bl	ca14 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    cb70:	bd01      	pop	{r0, pc}
    cb72:	bf00      	nop

0000cb74 <z_arm_interrupt_init>:
    cb74:	4804      	ldr	r0, [pc, #16]	; (cb88 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    cb76:	2300      	movs	r3, #0
    cb78:	2140      	movs	r1, #64	; 0x40
    cb7a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    cb7c:	3301      	adds	r3, #1
    cb7e:	2b1e      	cmp	r3, #30
    cb80:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    cb84:	d1f9      	bne.n	cb7a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    cb86:	4770      	bx	lr
    cb88:	e000e100 	.word	0xe000e100

0000cb8c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    cb8c:	2000      	movs	r0, #0
    msr CONTROL, r0
    cb8e:	f380 8814 	msr	CONTROL, r0
    isb
    cb92:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    cb96:	f7ff fc3f 	bl	c418 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    cb9a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    cb9c:	490d      	ldr	r1, [pc, #52]	; (cbd4 <__start+0x48>)
    str r0, [r1]
    cb9e:	6008      	str	r0, [r1, #0]
    dsb
    cba0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    cba4:	480c      	ldr	r0, [pc, #48]	; (cbd8 <__start+0x4c>)
    msr msp, r0
    cba6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    cbaa:	f000 f82b 	bl	cc04 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    cbae:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    cbb0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    cbb4:	4809      	ldr	r0, [pc, #36]	; (cbdc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    cbb6:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    cbba:	1840      	adds	r0, r0, r1
    msr PSP, r0
    cbbc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    cbc0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    cbc4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    cbc6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    cbc8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    cbcc:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    cbd0:	f7ff fdf2 	bl	c7b8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    cbd4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    cbd8:	20002d80 	.word	0x20002d80
    ldr r0, =z_interrupt_stacks
    cbdc:	20002000 	.word	0x20002000

0000cbe0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    cbe0:	4907      	ldr	r1, [pc, #28]	; (cc00 <z_arm_clear_arm_mpu_config+0x20>)
    cbe2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    cbe6:	2300      	movs	r3, #0
	int num_regions =
    cbe8:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    cbec:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    cbee:	4293      	cmp	r3, r2
    cbf0:	db00      	blt.n	cbf4 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    cbf2:	4770      	bx	lr
  MPU->RNR = rnr;
    cbf4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    cbf8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    cbfc:	3301      	adds	r3, #1
    cbfe:	e7f6      	b.n	cbee <z_arm_clear_arm_mpu_config+0xe>
    cc00:	e000ed00 	.word	0xe000ed00

0000cc04 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    cc04:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    cc06:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    cc08:	2300      	movs	r3, #0
    cc0a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    cc0e:	f7ff ffe7 	bl	cbe0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    cc12:	4b14      	ldr	r3, [pc, #80]	; (cc64 <z_arm_init_arch_hw_at_boot+0x60>)
    cc14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cc18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    cc1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    cc20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    cc24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    cc28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    cc2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    cc30:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    cc34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    cc38:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    cc3c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    cc40:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    cc44:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    cc48:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    cc4c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    cc50:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    cc54:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    cc58:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    cc5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cc5e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    cc62:	bd08      	pop	{r3, pc}
    cc64:	e000e100 	.word	0xe000e100

0000cc68 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    cc68:	4b08      	ldr	r3, [pc, #32]	; (cc8c <z_impl_k_thread_abort+0x24>)
    cc6a:	689b      	ldr	r3, [r3, #8]
    cc6c:	4283      	cmp	r3, r0
    cc6e:	d10b      	bne.n	cc88 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    cc70:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    cc74:	b143      	cbz	r3, cc88 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    cc76:	4b06      	ldr	r3, [pc, #24]	; (cc90 <z_impl_k_thread_abort+0x28>)
    cc78:	685a      	ldr	r2, [r3, #4]
    cc7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    cc7e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    cc80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    cc82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    cc86:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    cc88:	f004 b9d0 	b.w	1102c <z_thread_abort>
    cc8c:	20001684 	.word	0x20001684
    cc90:	e000ed00 	.word	0xe000ed00

0000cc94 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    cc94:	4b02      	ldr	r3, [pc, #8]	; (cca0 <z_arm_configure_static_mpu_regions+0xc>)
    cc96:	4a03      	ldr	r2, [pc, #12]	; (cca4 <z_arm_configure_static_mpu_regions+0x10>)
    cc98:	4803      	ldr	r0, [pc, #12]	; (cca8 <z_arm_configure_static_mpu_regions+0x14>)
    cc9a:	2101      	movs	r1, #1
    cc9c:	f000 b870 	b.w	cd80 <arm_core_mpu_configure_static_mpu_regions>
    cca0:	20006000 	.word	0x20006000
    cca4:	20000000 	.word	0x20000000
    cca8:	00013624 	.word	0x00013624

0000ccac <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    ccac:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    ccae:	4b05      	ldr	r3, [pc, #20]	; (ccc4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    ccb0:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    ccb2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    ccb4:	4a04      	ldr	r2, [pc, #16]	; (ccc8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    ccb6:	2140      	movs	r1, #64	; 0x40
    ccb8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    ccbc:	4618      	mov	r0, r3
    ccbe:	2101      	movs	r1, #1
    ccc0:	f000 b868 	b.w	cd94 <arm_core_mpu_configure_dynamic_mpu_regions>
    ccc4:	20001538 	.word	0x20001538
    ccc8:	150b0000 	.word	0x150b0000

0000cccc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    cccc:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    ccce:	4e20      	ldr	r6, [pc, #128]	; (cd50 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    ccd0:	2500      	movs	r5, #0
    ccd2:	428d      	cmp	r5, r1
    ccd4:	da39      	bge.n	cd4a <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    ccd6:	6844      	ldr	r4, [r0, #4]
    ccd8:	b374      	cbz	r4, cd38 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    ccda:	b153      	cbz	r3, ccf2 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    ccdc:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    cce0:	ea14 0f0c 	tst.w	r4, ip
    cce4:	d12f      	bne.n	cd46 <mpu_configure_regions+0x7a>
		&&
    cce6:	2c1f      	cmp	r4, #31
    cce8:	d92d      	bls.n	cd46 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    ccea:	6807      	ldr	r7, [r0, #0]
		&&
    ccec:	ea1c 0f07 	tst.w	ip, r7
    ccf0:	d129      	bne.n	cd46 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    ccf2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    ccf4:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    ccf6:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    ccfa:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    ccfe:	d91e      	bls.n	cd3e <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    cd00:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    cd04:	d81d      	bhi.n	cd42 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    cd06:	3c01      	subs	r4, #1
    cd08:	fab4 f484 	clz	r4, r4
    cd0c:	f1c4 041f 	rsb	r4, r4, #31
    cd10:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    cd12:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    cd16:	ea4c 0c04 	orr.w	ip, ip, r4
    cd1a:	d814      	bhi.n	cd46 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    cd1c:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    cd20:	4314      	orrs	r4, r2
    cd22:	f044 0410 	orr.w	r4, r4, #16
    cd26:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    cd2a:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    cd2e:	f04c 0401 	orr.w	r4, ip, #1
    cd32:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    cd36:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    cd38:	3501      	adds	r5, #1
    cd3a:	300c      	adds	r0, #12
    cd3c:	e7c9      	b.n	ccd2 <mpu_configure_regions+0x6>
		return REGION_32B;
    cd3e:	2408      	movs	r4, #8
    cd40:	e7e7      	b.n	cd12 <mpu_configure_regions+0x46>
		return REGION_4G;
    cd42:	243e      	movs	r4, #62	; 0x3e
    cd44:	e7e5      	b.n	cd12 <mpu_configure_regions+0x46>
			return -EINVAL;
    cd46:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    cd4a:	4610      	mov	r0, r2
    cd4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd4e:	bf00      	nop
    cd50:	e000ed00 	.word	0xe000ed00

0000cd54 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    cd54:	4b04      	ldr	r3, [pc, #16]	; (cd68 <arm_core_mpu_enable+0x14>)
    cd56:	2205      	movs	r2, #5
    cd58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    cd5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cd60:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    cd64:	4770      	bx	lr
    cd66:	bf00      	nop
    cd68:	e000ed00 	.word	0xe000ed00

0000cd6c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    cd6c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    cd70:	4b02      	ldr	r3, [pc, #8]	; (cd7c <arm_core_mpu_disable+0x10>)
    cd72:	2200      	movs	r2, #0
    cd74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    cd78:	4770      	bx	lr
    cd7a:	bf00      	nop
    cd7c:	e000ed00 	.word	0xe000ed00

0000cd80 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    cd80:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    cd82:	4c03      	ldr	r4, [pc, #12]	; (cd90 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    cd84:	2301      	movs	r3, #1
    cd86:	7822      	ldrb	r2, [r4, #0]
    cd88:	f7ff ffa0 	bl	cccc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    cd8c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    cd8e:	bd10      	pop	{r4, pc}
    cd90:	200018c6 	.word	0x200018c6

0000cd94 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    cd94:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    cd96:	4a09      	ldr	r2, [pc, #36]	; (cdbc <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    cd98:	2300      	movs	r3, #0
    cd9a:	7812      	ldrb	r2, [r2, #0]
    cd9c:	f7ff ff96 	bl	cccc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    cda0:	f110 0f16 	cmn.w	r0, #22
    cda4:	d002      	beq.n	cdac <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    cda6:	4a06      	ldr	r2, [pc, #24]	; (cdc0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    cda8:	2807      	cmp	r0, #7
    cdaa:	dd00      	ble.n	cdae <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    cdac:	bd08      	pop	{r3, pc}
    cdae:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    cdb2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    cdb6:	3001      	adds	r0, #1
    cdb8:	e7f6      	b.n	cda8 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    cdba:	bf00      	nop
    cdbc:	200018c6 	.word	0x200018c6
    cdc0:	e000ed00 	.word	0xe000ed00

0000cdc4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    cdc4:	4914      	ldr	r1, [pc, #80]	; (ce18 <z_arm_mpu_init+0x54>)
    cdc6:	6808      	ldr	r0, [r1, #0]
    cdc8:	2808      	cmp	r0, #8
{
    cdca:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    cdcc:	d821      	bhi.n	ce12 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    cdce:	f7ff ffcd 	bl	cd6c <arm_core_mpu_disable>
    cdd2:	4c12      	ldr	r4, [pc, #72]	; (ce1c <z_arm_mpu_init+0x58>)
    cdd4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    cdd6:	2200      	movs	r2, #0
    cdd8:	4290      	cmp	r0, r2
    cdda:	f101 010c 	add.w	r1, r1, #12
    cdde:	d105      	bne.n	cdec <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    cde0:	4b0f      	ldr	r3, [pc, #60]	; (ce20 <z_arm_mpu_init+0x5c>)
    cde2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    cde4:	f7ff ffb6 	bl	cd54 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    cde8:	2000      	movs	r0, #0
}
    cdea:	bd10      	pop	{r4, pc}
    cdec:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    cdf0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    cdf4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    cdf8:	4313      	orrs	r3, r2
    cdfa:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    cdfe:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    ce02:	f851 3c04 	ldr.w	r3, [r1, #-4]
    ce06:	f043 0301 	orr.w	r3, r3, #1
    ce0a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    ce0e:	3201      	adds	r2, #1
    ce10:	e7e2      	b.n	cdd8 <z_arm_mpu_init+0x14>
		return -1;
    ce12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ce16:	e7e8      	b.n	cdea <z_arm_mpu_init+0x26>
    ce18:	00013630 	.word	0x00013630
    ce1c:	e000ed00 	.word	0xe000ed00
    ce20:	200018c6 	.word	0x200018c6

0000ce24 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    ce24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ce28:	b2c0      	uxtb	r0, r0
    ce2a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    ce2e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    ce32:	4905      	ldr	r1, [pc, #20]	; (ce48 <sys_arch_reboot+0x24>)
    ce34:	4b05      	ldr	r3, [pc, #20]	; (ce4c <sys_arch_reboot+0x28>)
    ce36:	68ca      	ldr	r2, [r1, #12]
    ce38:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    ce3c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    ce3e:	60cb      	str	r3, [r1, #12]
    ce40:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    ce44:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    ce46:	e7fd      	b.n	ce44 <sys_arch_reboot+0x20>
    ce48:	e000ed00 	.word	0xe000ed00
    ce4c:	05fa0004 	.word	0x05fa0004

0000ce50 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    ce50:	b120      	cbz	r0, ce5c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    ce52:	4b03      	ldr	r3, [pc, #12]	; (ce60 <arch_busy_wait+0x10>)
    ce54:	0180      	lsls	r0, r0, #6
    ce56:	f043 0301 	orr.w	r3, r3, #1
    ce5a:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    ce5c:	4770      	bx	lr
    ce5e:	bf00      	nop
    ce60:	000135d0 	.word	0x000135d0

0000ce64 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    ce64:	b538      	push	{r3, r4, r5, lr}
    ce66:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    ce68:	4805      	ldr	r0, [pc, #20]	; (ce80 <bt_buf_get_rx+0x1c>)
    ce6a:	f005 fabf 	bl	123ec <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    ce6e:	4604      	mov	r4, r0
    ce70:	b120      	cbz	r0, ce7c <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    ce72:	2100      	movs	r1, #0
    ce74:	3008      	adds	r0, #8
    ce76:	f005 fabe 	bl	123f6 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    ce7a:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    ce7c:	4620      	mov	r0, r4
    ce7e:	bd38      	pop	{r3, r4, r5, pc}
    ce80:	200004f4 	.word	0x200004f4

0000ce84 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    ce84:	b510      	push	{r4, lr}
    ce86:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    ce88:	490a      	ldr	r1, [pc, #40]	; (ceb4 <bt_buf_get_cmd_complete+0x30>)
{
    ce8a:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    ce8c:	f8d1 00f8 	ldr.w	r0, [r1, #248]	; 0xf8
    ce90:	b920      	cbnz	r0, ce9c <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    ce92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    ce96:	2001      	movs	r0, #1
    ce98:	f7ff bfe4 	b.w	ce64 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    ce9c:	f005 fb06 	bl	124ac <net_buf_ref>
    cea0:	2301      	movs	r3, #1
		buf->len = 0U;
    cea2:	2100      	movs	r1, #0
    cea4:	7503      	strb	r3, [r0, #20]
    cea6:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    cea8:	4604      	mov	r4, r0
    ceaa:	3008      	adds	r0, #8
    ceac:	f005 faa3 	bl	123f6 <net_buf_simple_reserve>
}
    ceb0:	4620      	mov	r0, r4
    ceb2:	bd10      	pop	{r4, pc}
    ceb4:	200001a0 	.word	0x200001a0

0000ceb8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    ceb8:	b570      	push	{r4, r5, r6, lr}
    ceba:	4605      	mov	r5, r0
	switch (evt) {
    cebc:	3d0e      	subs	r5, #14
    cebe:	2d01      	cmp	r5, #1
{
    cec0:	460c      	mov	r4, r1
    cec2:	4610      	mov	r0, r2
    cec4:	4619      	mov	r1, r3
	switch (evt) {
    cec6:	d803      	bhi.n	ced0 <bt_buf_get_evt+0x18>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    cec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    cecc:	f7ff bfda 	b.w	ce84 <bt_buf_get_cmd_complete>
		if (discardable) {
    ced0:	b164      	cbz	r4, ceec <bt_buf_get_evt+0x34>
	return net_buf_alloc_fixed(pool, timeout);
    ced2:	4809      	ldr	r0, [pc, #36]	; (cef8 <bt_buf_get_evt+0x40>)
    ced4:	f005 fa8a 	bl	123ec <net_buf_alloc_fixed>
			if (buf) {
    ced8:	4604      	mov	r4, r0
    ceda:	b128      	cbz	r0, cee8 <bt_buf_get_evt+0x30>
	net_buf_simple_reserve(&buf->b, reserve);
    cedc:	2100      	movs	r1, #0
    cede:	3008      	adds	r0, #8
    cee0:	f005 fa89 	bl	123f6 <net_buf_simple_reserve>
    cee4:	2301      	movs	r3, #1
    cee6:	7523      	strb	r3, [r4, #20]
}
    cee8:	4620      	mov	r0, r4
    ceea:	bd70      	pop	{r4, r5, r6, pc}
    ceec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    cef0:	2001      	movs	r0, #1
    cef2:	f7ff bfb7 	b.w	ce64 <bt_buf_get_rx>
    cef6:	bf00      	nop
    cef8:	20000494 	.word	0x20000494

0000cefc <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
    cefc:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    cefe:	2101      	movs	r1, #1
    cf00:	4604      	mov	r4, r0
    cf02:	3008      	adds	r0, #8
    cf04:	f005 fae5 	bl	124d2 <net_buf_simple_pull_mem>
	err = handle_event_common(event, buf, handlers, num_handlers);
    cf08:	4621      	mov	r1, r4
    cf0a:	4a03      	ldr	r2, [pc, #12]	; (cf18 <hci_le_meta_event+0x1c>)
    cf0c:	7800      	ldrb	r0, [r0, #0]
	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
}
    cf0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
    cf12:	2300      	movs	r3, #0
    cf14:	f005 ba3e 	b.w	12394 <handle_event_common.isra.0>
    cf18:	00013698 	.word	0x00013698

0000cf1c <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    cf1c:	b538      	push	{r3, r4, r5, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    cf1e:	4822      	ldr	r0, [pc, #136]	; (cfa8 <rx_work_handler+0x8c>)
    cf20:	f005 fa8b 	bl	1243a <net_buf_slist_get>
	if (!buf) {
    cf24:	4604      	mov	r4, r0
    cf26:	2800      	cmp	r0, #0
    cf28:	d03c      	beq.n	cfa4 <rx_work_handler+0x88>
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
    cf2a:	7d03      	ldrb	r3, [r0, #20]
    cf2c:	2b01      	cmp	r3, #1
    cf2e:	d12d      	bne.n	cf8c <rx_work_handler+0x70>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    cf30:	8983      	ldrh	r3, [r0, #12]
    cf32:	2b01      	cmp	r3, #1
    cf34:	d80c      	bhi.n	cf50 <rx_work_handler+0x34>
    cf36:	4a1d      	ldr	r2, [pc, #116]	; (cfac <rx_work_handler+0x90>)
    cf38:	491d      	ldr	r1, [pc, #116]	; (cfb0 <rx_work_handler+0x94>)
    cf3a:	481e      	ldr	r0, [pc, #120]	; (cfb4 <rx_work_handler+0x98>)
    cf3c:	f44f 6316 	mov.w	r3, #2400	; 0x960
    cf40:	f005 f9cd 	bl	122de <assert_print>
    cf44:	4040      	eors	r0, r0
    cf46:	f380 8811 	msr	BASEPRI, r0
    cf4a:	f04f 0003 	mov.w	r0, #3
    cf4e:	df02      	svc	2
    cf50:	2102      	movs	r1, #2
    cf52:	f104 0008 	add.w	r0, r4, #8
    cf56:	f005 fabc 	bl	124d2 <net_buf_simple_pull_mem>
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    cf5a:	7803      	ldrb	r3, [r0, #0]
    cf5c:	3b0e      	subs	r3, #14
    cf5e:	2b01      	cmp	r3, #1
    cf60:	4605      	mov	r5, r0
    cf62:	d80c      	bhi.n	cf7e <rx_work_handler+0x62>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    cf64:	4a11      	ldr	r2, [pc, #68]	; (cfac <rx_work_handler+0x90>)
    cf66:	4914      	ldr	r1, [pc, #80]	; (cfb8 <rx_work_handler+0x9c>)
    cf68:	4812      	ldr	r0, [pc, #72]	; (cfb4 <rx_work_handler+0x98>)
    cf6a:	f640 1364 	movw	r3, #2404	; 0x964
    cf6e:	f005 f9b6 	bl	122de <assert_print>
    cf72:	4040      	eors	r0, r0
    cf74:	f380 8811 	msr	BASEPRI, r0
    cf78:	f04f 0003 	mov.w	r0, #3
    cf7c:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
    cf7e:	7828      	ldrb	r0, [r5, #0]
    cf80:	4a0e      	ldr	r2, [pc, #56]	; (cfbc <rx_work_handler+0xa0>)
    cf82:	2303      	movs	r3, #3
    cf84:	4621      	mov	r1, r4
    cf86:	f005 fa05 	bl	12394 <handle_event_common.isra.0>
	net_buf_unref(buf);
    cf8a:	4620      	mov	r0, r4
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
    cf8c:	f000 fdb2 	bl	daf4 <net_buf_unref>
	return list->head;
    cf90:	4b0b      	ldr	r3, [pc, #44]	; (cfc0 <rx_work_handler+0xa4>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    cf92:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
    cf96:	b12b      	cbz	r3, cfa4 <rx_work_handler+0x88>
#endif
		if (err < 0) {
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
    cf98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    cf9c:	4909      	ldr	r1, [pc, #36]	; (cfc4 <rx_work_handler+0xa8>)
    cf9e:	480a      	ldr	r0, [pc, #40]	; (cfc8 <rx_work_handler+0xac>)
    cfa0:	f005 bfa0 	b.w	12ee4 <k_work_submit_to_queue>
}
    cfa4:	bd38      	pop	{r3, r4, r5, pc}
    cfa6:	bf00      	nop
    cfa8:	2000029c 	.word	0x2000029c
    cfac:	0001398c 	.word	0x0001398c
    cfb0:	000139c0 	.word	0x000139c0
    cfb4:	000139d9 	.word	0x000139d9
    cfb8:	000139f6 	.word	0x000139f6
    cfbc:	00013680 	.word	0x00013680
    cfc0:	200001a0 	.word	0x200001a0
    cfc4:	20000388 	.word	0x20000388
    cfc8:	20001208 	.word	0x20001208

0000cfcc <hci_cmd_done>:
{
    cfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cfce:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    cfd0:	7990      	ldrb	r0, [r2, #6]
{
    cfd2:	460e      	mov	r6, r1
    cfd4:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    cfd6:	f000 fcc5 	bl	d964 <net_buf_pool_get>
    cfda:	4b30      	ldr	r3, [pc, #192]	; (d09c <hci_cmd_done+0xd0>)
    cfdc:	4283      	cmp	r3, r0
    cfde:	d15b      	bne.n	d098 <hci_cmd_done+0xcc>
	if (cmd(buf)->opcode != opcode) {
    cfe0:	4620      	mov	r0, r4
    cfe2:	f000 fcc7 	bl	d974 <net_buf_id>
    cfe6:	4d2e      	ldr	r5, [pc, #184]	; (d0a0 <hci_cmd_done+0xd4>)
    cfe8:	230c      	movs	r3, #12
    cfea:	fb03 5000 	mla	r0, r3, r0, r5
    cfee:	8843      	ldrh	r3, [r0, #2]
    cff0:	42bb      	cmp	r3, r7
    cff2:	d151      	bne.n	d098 <hci_cmd_done+0xcc>
	if (bt_dev.sent_cmd) {
    cff4:	4f2b      	ldr	r7, [pc, #172]	; (d0a4 <hci_cmd_done+0xd8>)
    cff6:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
    cffa:	b120      	cbz	r0, d006 <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
    cffc:	f000 fd7a 	bl	daf4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    d000:	2300      	movs	r3, #0
    d002:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	if (cmd(buf)->state && !status) {
    d006:	4620      	mov	r0, r4
    d008:	f000 fcb4 	bl	d974 <net_buf_id>
    d00c:	270c      	movs	r7, #12
    d00e:	fb07 5000 	mla	r0, r7, r0, r5
    d012:	6843      	ldr	r3, [r0, #4]
    d014:	b1e3      	cbz	r3, d050 <hci_cmd_done+0x84>
    d016:	b9de      	cbnz	r6, d050 <hci_cmd_done+0x84>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    d018:	4620      	mov	r0, r4
    d01a:	f000 fcab 	bl	d974 <net_buf_id>
    d01e:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d022:	2201      	movs	r2, #1
    d024:	6840      	ldr	r0, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    d026:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
    d02a:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    d02c:	f001 071f 	and.w	r7, r1, #31
    d030:	40ba      	lsls	r2, r7
	if (val) {
    d032:	0949      	lsrs	r1, r1, #5
    d034:	b318      	cbz	r0, d07e <hci_cmd_done+0xb2>
    d036:	f3bf 8f5b 	dmb	ish
    d03a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d03e:	e853 0f00 	ldrex	r0, [r3]
    d042:	4310      	orrs	r0, r2
    d044:	e843 0100 	strex	r1, r0, [r3]
    d048:	2900      	cmp	r1, #0
    d04a:	d1f8      	bne.n	d03e <hci_cmd_done+0x72>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d04c:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
    d050:	4620      	mov	r0, r4
    d052:	f000 fc8f 	bl	d974 <net_buf_id>
    d056:	270c      	movs	r7, #12
    d058:	fb07 5000 	mla	r0, r7, r0, r5
    d05c:	6883      	ldr	r3, [r0, #8]
    d05e:	b1db      	cbz	r3, d098 <hci_cmd_done+0xcc>
		cmd(buf)->status = status;
    d060:	4620      	mov	r0, r4
    d062:	f000 fc87 	bl	d974 <net_buf_id>
    d066:	4378      	muls	r0, r7
    d068:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    d06a:	4620      	mov	r0, r4
    d06c:	f000 fc82 	bl	d974 <net_buf_id>
    d070:	fb07 5500 	mla	r5, r7, r0, r5
    d074:	68a8      	ldr	r0, [r5, #8]
}
    d076:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    d07a:	f003 bb73 	b.w	10764 <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d07e:	43d2      	mvns	r2, r2
    d080:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d084:	f3bf 8f5b 	dmb	ish
    d088:	e853 0f00 	ldrex	r0, [r3]
    d08c:	4010      	ands	r0, r2
    d08e:	e843 0100 	strex	r1, r0, [r3]
    d092:	2900      	cmp	r1, #0
    d094:	d0da      	beq.n	d04c <hci_cmd_done+0x80>
    d096:	e7f7      	b.n	d088 <hci_cmd_done+0xbc>
    d098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d09a:	bf00      	nop
    d09c:	200004c4 	.word	0x200004c4
    d0a0:	20001544 	.word	0x20001544
    d0a4:	200001a0 	.word	0x200001a0

0000d0a8 <hci_cmd_status>:
{
    d0a8:	b538      	push	{r3, r4, r5, lr}
    d0aa:	2104      	movs	r1, #4
    d0ac:	4604      	mov	r4, r0
    d0ae:	3008      	adds	r0, #8
    d0b0:	f005 fa0f 	bl	124d2 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    d0b4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    d0b6:	7801      	ldrb	r1, [r0, #0]
    d0b8:	8840      	ldrh	r0, [r0, #2]
    d0ba:	4622      	mov	r2, r4
    d0bc:	f7ff ff86 	bl	cfcc <hci_cmd_done>
	if (ncmd) {
    d0c0:	b125      	cbz	r5, d0cc <hci_cmd_status+0x24>
    d0c2:	4803      	ldr	r0, [pc, #12]	; (d0d0 <hci_cmd_status+0x28>)
}
    d0c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d0c8:	f003 bb4c 	b.w	10764 <z_impl_k_sem_give>
    d0cc:	bd38      	pop	{r3, r4, r5, pc}
    d0ce:	bf00      	nop
    d0d0:	20000280 	.word	0x20000280

0000d0d4 <hci_cmd_complete>:
{
    d0d4:	b538      	push	{r3, r4, r5, lr}
    d0d6:	2103      	movs	r1, #3
    d0d8:	4604      	mov	r4, r0
    d0da:	3008      	adds	r0, #8
    d0dc:	f005 f9f9 	bl	124d2 <net_buf_simple_pull_mem>
	status = buf->data[0];
    d0e0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    d0e2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    d0e4:	7819      	ldrb	r1, [r3, #0]
    d0e6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    d0ea:	4622      	mov	r2, r4
    d0ec:	f7ff ff6e 	bl	cfcc <hci_cmd_done>
	if (ncmd) {
    d0f0:	b125      	cbz	r5, d0fc <hci_cmd_complete+0x28>
    d0f2:	4803      	ldr	r0, [pc, #12]	; (d100 <hci_cmd_complete+0x2c>)
}
    d0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d0f8:	f003 bb34 	b.w	10764 <z_impl_k_sem_give>
    d0fc:	bd38      	pop	{r3, r4, r5, pc}
    d0fe:	bf00      	nop
    d100:	20000280 	.word	0x20000280

0000d104 <bt_hci_cmd_create>:
{
    d104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    d108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d10c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d110:	4606      	mov	r6, r0
    d112:	4817      	ldr	r0, [pc, #92]	; (d170 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    d114:	4d17      	ldr	r5, [pc, #92]	; (d174 <bt_hci_cmd_create+0x70>)
{
    d116:	460f      	mov	r7, r1
    d118:	f005 f968 	bl	123ec <net_buf_alloc_fixed>
    d11c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    d11e:	f100 0a08 	add.w	sl, r0, #8
    d122:	2100      	movs	r1, #0
    d124:	f04f 0800 	mov.w	r8, #0
    d128:	4650      	mov	r0, sl
    d12a:	f005 f964 	bl	123f6 <net_buf_simple_reserve>
    d12e:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    d132:	4620      	mov	r0, r4
    d134:	f000 fc1e 	bl	d974 <net_buf_id>
    d138:	f04f 090c 	mov.w	r9, #12
    d13c:	fb09 5000 	mla	r0, r9, r0, r5
    d140:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    d142:	4620      	mov	r0, r4
    d144:	f000 fc16 	bl	d974 <net_buf_id>
    d148:	fb09 5000 	mla	r0, r9, r0, r5
    d14c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    d150:	4620      	mov	r0, r4
    d152:	f000 fc0f 	bl	d974 <net_buf_id>
    d156:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    d15a:	2103      	movs	r1, #3
    d15c:	f8c5 8004 	str.w	r8, [r5, #4]
    d160:	4650      	mov	r0, sl
    d162:	f005 f9a7 	bl	124b4 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    d166:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    d168:	7087      	strb	r7, [r0, #2]
}
    d16a:	4620      	mov	r0, r4
    d16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d170:	200004c4 	.word	0x200004c4
    d174:	20001544 	.word	0x20001544

0000d178 <bt_hci_cmd_send_sync>:
{
    d178:	b5f0      	push	{r4, r5, r6, r7, lr}
    d17a:	4615      	mov	r5, r2
    d17c:	b087      	sub	sp, #28
	if (!buf) {
    d17e:	460c      	mov	r4, r1
    d180:	b921      	cbnz	r1, d18c <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    d182:	f7ff ffbf 	bl	d104 <bt_hci_cmd_create>
		if (!buf) {
    d186:	4604      	mov	r4, r0
    d188:	2800      	cmp	r0, #0
    d18a:	d047      	beq.n	d21c <bt_hci_cmd_send_sync+0xa4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    d18c:	2201      	movs	r2, #1
    d18e:	2100      	movs	r1, #0
    d190:	4668      	mov	r0, sp
    d192:	f005 fe68 	bl	12e66 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    d196:	4620      	mov	r0, r4
    d198:	f000 fbec 	bl	d974 <net_buf_id>
    d19c:	4f21      	ldr	r7, [pc, #132]	; (d224 <bt_hci_cmd_send_sync+0xac>)
    d19e:	230c      	movs	r3, #12
    d1a0:	fb03 7000 	mla	r0, r3, r0, r7
    d1a4:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    d1a8:	4620      	mov	r0, r4
    d1aa:	f005 f97f 	bl	124ac <net_buf_ref>
    d1ae:	4601      	mov	r1, r0
    d1b0:	481d      	ldr	r0, [pc, #116]	; (d228 <bt_hci_cmd_send_sync+0xb0>)
    d1b2:	f005 f96e 	bl	12492 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    d1b6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    d1ba:	2300      	movs	r3, #0
    d1bc:	4668      	mov	r0, sp
    d1be:	f003 faf7 	bl	107b0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    d1c2:	4606      	mov	r6, r0
    d1c4:	b180      	cbz	r0, d1e8 <bt_hci_cmd_send_sync+0x70>
    d1c6:	4a19      	ldr	r2, [pc, #100]	; (d22c <bt_hci_cmd_send_sync+0xb4>)
    d1c8:	4919      	ldr	r1, [pc, #100]	; (d230 <bt_hci_cmd_send_sync+0xb8>)
    d1ca:	481a      	ldr	r0, [pc, #104]	; (d234 <bt_hci_cmd_send_sync+0xbc>)
    d1cc:	f240 1349 	movw	r3, #329	; 0x149
    d1d0:	f005 f885 	bl	122de <assert_print>
    d1d4:	4818      	ldr	r0, [pc, #96]	; (d238 <bt_hci_cmd_send_sync+0xc0>)
    d1d6:	4631      	mov	r1, r6
    d1d8:	f005 f881 	bl	122de <assert_print>
    d1dc:	4040      	eors	r0, r0
    d1de:	f380 8811 	msr	BASEPRI, r0
    d1e2:	f04f 0003 	mov.w	r0, #3
    d1e6:	df02      	svc	2
	status = cmd(buf)->status;
    d1e8:	4620      	mov	r0, r4
    d1ea:	f000 fbc3 	bl	d974 <net_buf_id>
    d1ee:	230c      	movs	r3, #12
    d1f0:	4358      	muls	r0, r3
    d1f2:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
    d1f4:	b156      	cbz	r6, d20c <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
    d1f6:	4620      	mov	r0, r4
    d1f8:	f000 fc7c 	bl	daf4 <net_buf_unref>
			return -ECONNREFUSED;
    d1fc:	2e09      	cmp	r6, #9
    d1fe:	bf14      	ite	ne
    d200:	f06f 0004 	mvnne.w	r0, #4
    d204:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    d208:	b007      	add	sp, #28
    d20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    d20c:	b115      	cbz	r5, d214 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
    d20e:	602c      	str	r4, [r5, #0]
	return 0;
    d210:	2000      	movs	r0, #0
    d212:	e7f9      	b.n	d208 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
    d214:	4620      	mov	r0, r4
    d216:	f000 fc6d 	bl	daf4 <net_buf_unref>
    d21a:	e7f9      	b.n	d210 <bt_hci_cmd_send_sync+0x98>
			return -ENOBUFS;
    d21c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d220:	e7f2      	b.n	d208 <bt_hci_cmd_send_sync+0x90>
    d222:	bf00      	nop
    d224:	20001544 	.word	0x20001544
    d228:	200002a4 	.word	0x200002a4
    d22c:	0001398c 	.word	0x0001398c
    d230:	00013a24 	.word	0x00013a24
    d234:	000139d9 	.word	0x000139d9
    d238:	00013a2d 	.word	0x00013a2d

0000d23c <hci_init>:
{
    d23c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    d23e:	4d9a      	ldr	r5, [pc, #616]	; (d4a8 <hci_init+0x26c>)
    d240:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    d244:	6899      	ldr	r1, [r3, #8]
    d246:	f011 0101 	ands.w	r1, r1, #1
    d24a:	d121      	bne.n	d290 <hci_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    d24c:	aa01      	add	r2, sp, #4
    d24e:	f640 4003 	movw	r0, #3075	; 0xc03
    d252:	f7ff ff91 	bl	d178 <bt_hci_cmd_send_sync>
		if (err) {
    d256:	4604      	mov	r4, r0
    d258:	2800      	cmp	r0, #0
    d25a:	d167      	bne.n	d32c <hci_init+0xf0>
		hci_reset_complete(rsp);
    d25c:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
    d25e:	6883      	ldr	r3, [r0, #8]
	if (status) {
    d260:	781b      	ldrb	r3, [r3, #0]
    d262:	b99b      	cbnz	r3, d28c <hci_init+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d264:	f3bf 8f5b 	dmb	ish
    d268:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    d26c:	f3bf 8f5b 	dmb	ish
    d270:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d274:	f003 0309 	and.w	r3, r3, #9
    d278:	f3bf 8f5b 	dmb	ish
    d27c:	e852 1f00 	ldrex	r1, [r2]
    d280:	e842 3400 	strex	r4, r3, [r2]
    d284:	2c00      	cmp	r4, #0
    d286:	d1f9      	bne.n	d27c <hci_init+0x40>
    d288:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    d28c:	f000 fc32 	bl	daf4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    d290:	aa01      	add	r2, sp, #4
    d292:	2100      	movs	r1, #0
    d294:	f241 0003 	movw	r0, #4099	; 0x1003
    d298:	f7ff ff6e 	bl	d178 <bt_hci_cmd_send_sync>
	if (err) {
    d29c:	4604      	mov	r4, r0
    d29e:	2800      	cmp	r0, #0
    d2a0:	d144      	bne.n	d32c <hci_init+0xf0>
	read_local_features_complete(rsp);
    d2a2:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    d2a4:	4e81      	ldr	r6, [pc, #516]	; (d4ac <hci_init+0x270>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    d2a6:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    d2a8:	f8d2 0001 	ldr.w	r0, [r2, #1]
    d2ac:	f8d2 1005 	ldr.w	r1, [r2, #5]
    d2b0:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    d2b2:	4618      	mov	r0, r3
    d2b4:	f000 fc1e 	bl	daf4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    d2b8:	4621      	mov	r1, r4
    d2ba:	aa01      	add	r2, sp, #4
    d2bc:	f241 0001 	movw	r0, #4097	; 0x1001
    d2c0:	f7ff ff5a 	bl	d178 <bt_hci_cmd_send_sync>
	if (err) {
    d2c4:	4604      	mov	r4, r0
    d2c6:	bb88      	cbnz	r0, d32c <hci_init+0xf0>
	read_local_ver_complete(rsp);
    d2c8:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    d2ca:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    d2cc:	785a      	ldrb	r2, [r3, #1]
    d2ce:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    d2d2:	885a      	ldrh	r2, [r3, #2]
    d2d4:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    d2d8:	791a      	ldrb	r2, [r3, #4]
    d2da:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    d2de:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    d2e2:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    d2e6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    d2ea:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    d2ee:	f000 fc01 	bl	daf4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    d2f2:	4621      	mov	r1, r4
    d2f4:	aa01      	add	r2, sp, #4
    d2f6:	f241 0002 	movw	r0, #4098	; 0x1002
    d2fa:	f7ff ff3d 	bl	d178 <bt_hci_cmd_send_sync>
	if (err) {
    d2fe:	4604      	mov	r4, r0
    d300:	b9a0      	cbnz	r0, d32c <hci_init+0xf0>
	read_supported_commands_complete(rsp);
    d302:	9f01      	ldr	r7, [sp, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    d304:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    d306:	1c53      	adds	r3, r2, #1
    d308:	3241      	adds	r2, #65	; 0x41
    d30a:	6818      	ldr	r0, [r3, #0]
    d30c:	6859      	ldr	r1, [r3, #4]
    d30e:	4634      	mov	r4, r6
    d310:	c403      	stmia	r4!, {r0, r1}
    d312:	3308      	adds	r3, #8
    d314:	4293      	cmp	r3, r2
    d316:	4626      	mov	r6, r4
    d318:	d1f7      	bne.n	d30a <hci_init+0xce>
	net_buf_unref(rsp);
    d31a:	4638      	mov	r0, r7
    d31c:	f000 fbea 	bl	daf4 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    d320:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d324:	0658      	lsls	r0, r3, #25
    d326:	d404      	bmi.n	d332 <hci_init+0xf6>
		return -ENODEV;
    d328:	f06f 0412 	mvn.w	r4, #18
}
    d32c:	4620      	mov	r0, r4
    d32e:	b003      	add	sp, #12
    d330:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    d332:	aa01      	add	r2, sp, #4
    d334:	2100      	movs	r1, #0
    d336:	f242 0003 	movw	r0, #8195	; 0x2003
    d33a:	f7ff ff1d 	bl	d178 <bt_hci_cmd_send_sync>
	if (err) {
    d33e:	4604      	mov	r4, r0
    d340:	2800      	cmp	r0, #0
    d342:	d1f3      	bne.n	d32c <hci_init+0xf0>
	read_le_features_complete(rsp);
    d344:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    d346:	4b5a      	ldr	r3, [pc, #360]	; (d4b0 <hci_init+0x274>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    d348:	6891      	ldr	r1, [r2, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    d34a:	f8d1 0001 	ldr.w	r0, [r1, #1]
    d34e:	f8d1 1005 	ldr.w	r1, [r1, #5]
    d352:	c303      	stmia	r3!, {r0, r1}
	net_buf_unref(rsp);
    d354:	4610      	mov	r0, r2
    d356:	f000 fbcd 	bl	daf4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    d35a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d35e:	0699      	lsls	r1, r3, #26
    d360:	d418      	bmi.n	d394 <hci_init+0x158>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    d362:	2102      	movs	r1, #2
    d364:	f640 406d 	movw	r0, #3181	; 0xc6d
    d368:	f7ff fecc 	bl	d104 <bt_hci_cmd_create>
		if (!buf) {
    d36c:	4606      	mov	r6, r0
    d36e:	2800      	cmp	r0, #0
    d370:	f000 8097 	beq.w	d4a2 <hci_init+0x266>
    d374:	2102      	movs	r1, #2
    d376:	3008      	adds	r0, #8
    d378:	f005 f89c 	bl	124b4 <net_buf_simple_add>
		cp_le->le = 0x01;
    d37c:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    d37e:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    d380:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    d382:	4622      	mov	r2, r4
    d384:	4631      	mov	r1, r6
    d386:	f640 406d 	movw	r0, #3181	; 0xc6d
    d38a:	f7ff fef5 	bl	d178 <bt_hci_cmd_send_sync>
		if (err) {
    d38e:	4604      	mov	r4, r0
    d390:	2800      	cmp	r0, #0
    d392:	d1cb      	bne.n	d32c <hci_init+0xf0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    d394:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    d398:	071a      	lsls	r2, r3, #28
    d39a:	d512      	bpl.n	d3c2 <hci_init+0x186>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    d39c:	aa01      	add	r2, sp, #4
    d39e:	2100      	movs	r1, #0
    d3a0:	f242 001c 	movw	r0, #8220	; 0x201c
    d3a4:	f7ff fee8 	bl	d178 <bt_hci_cmd_send_sync>
		if (err) {
    d3a8:	4604      	mov	r4, r0
    d3aa:	2800      	cmp	r0, #0
    d3ac:	d1be      	bne.n	d32c <hci_init+0xf0>
		le_read_supp_states_complete(rsp);
    d3ae:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d3b0:	6883      	ldr	r3, [r0, #8]
    d3b2:	f8d3 2001 	ldr.w	r2, [r3, #1]
    d3b6:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    d3ba:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    d3be:	f000 fb99 	bl	daf4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    d3c2:	2108      	movs	r1, #8
    d3c4:	f242 0001 	movw	r0, #8193	; 0x2001
    d3c8:	f7ff fe9c 	bl	d104 <bt_hci_cmd_create>
	if (!buf) {
    d3cc:	4604      	mov	r4, r0
    d3ce:	2800      	cmp	r0, #0
    d3d0:	d067      	beq.n	d4a2 <hci_init+0x266>
    d3d2:	2108      	movs	r1, #8
    d3d4:	4408      	add	r0, r1
    d3d6:	f005 f86d 	bl	124b4 <net_buf_simple_add>
	dst[0] = val;
    d3da:	2702      	movs	r7, #2
	dst[1] = val >> 8;
    d3dc:	2200      	movs	r2, #0
	dst[0] = val;
    d3de:	7007      	strb	r7, [r0, #0]
	dst[1] = val >> 8;
    d3e0:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    d3e2:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    d3e4:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    d3e6:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    d3e8:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    d3ea:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    d3ec:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    d3ee:	4621      	mov	r1, r4
    d3f0:	f242 0001 	movw	r0, #8193	; 0x2001
    d3f4:	f7ff fec0 	bl	d178 <bt_hci_cmd_send_sync>
	if (err) {
    d3f8:	4604      	mov	r4, r0
    d3fa:	2800      	cmp	r0, #0
    d3fc:	d196      	bne.n	d32c <hci_init+0xf0>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    d3fe:	2108      	movs	r1, #8
    d400:	f640 4001 	movw	r0, #3073	; 0xc01
    d404:	f7ff fe7e 	bl	d104 <bt_hci_cmd_create>
	if (!buf) {
    d408:	4606      	mov	r6, r0
    d40a:	2800      	cmp	r0, #0
    d40c:	d049      	beq.n	d4a2 <hci_init+0x266>
    d40e:	2108      	movs	r1, #8
    d410:	4408      	add	r0, r1
    d412:	f005 f84f 	bl	124b4 <net_buf_simple_add>
    d416:	2380      	movs	r3, #128	; 0x80
    d418:	7043      	strb	r3, [r0, #1]
    d41a:	2320      	movs	r3, #32
	dst[0] = val;
    d41c:	7004      	strb	r4, [r0, #0]
    d41e:	7084      	strb	r4, [r0, #2]
    d420:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    d422:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    d424:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    d426:	70c7      	strb	r7, [r0, #3]
    d428:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    d42a:	4622      	mov	r2, r4
    d42c:	4631      	mov	r1, r6
    d42e:	f640 4001 	movw	r0, #3073	; 0xc01
    d432:	f7ff fea1 	bl	d178 <bt_hci_cmd_send_sync>
	if (err) {
    d436:	4604      	mov	r4, r0
    d438:	2800      	cmp	r0, #0
    d43a:	f47f af77 	bne.w	d32c <hci_init+0xf0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    d43e:	4601      	mov	r1, r0
    d440:	aa01      	add	r2, sp, #4
    d442:	f64f 4001 	movw	r0, #64513	; 0xfc01
    d446:	f7ff fe97 	bl	d178 <bt_hci_cmd_send_sync>
	if (err) {
    d44a:	4604      	mov	r4, r0
    d44c:	bb20      	cbnz	r0, d498 <hci_init+0x25c>
	net_buf_unref(rsp);
    d44e:	9801      	ldr	r0, [sp, #4]
    d450:	f000 fb50 	bl	daf4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    d454:	4621      	mov	r1, r4
    d456:	aa01      	add	r2, sp, #4
    d458:	f64f 4002 	movw	r0, #64514	; 0xfc02
    d45c:	f7ff fe8c 	bl	d178 <bt_hci_cmd_send_sync>
	if (err) {
    d460:	4604      	mov	r4, r0
    d462:	b9c8      	cbnz	r0, d498 <hci_init+0x25c>
	rp.cmds = (void *)rsp->data;
    d464:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    d466:	6883      	ldr	r3, [r0, #8]
    d468:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    d46c:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    d470:	f000 fb40 	bl	daf4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    d474:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    d478:	075b      	lsls	r3, r3, #29
    d47a:	d50d      	bpl.n	d498 <hci_init+0x25c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    d47c:	aa01      	add	r2, sp, #4
    d47e:	4621      	mov	r1, r4
    d480:	f64f 4003 	movw	r0, #64515	; 0xfc03
    d484:	f7ff fe78 	bl	d178 <bt_hci_cmd_send_sync>
		if (err) {
    d488:	b930      	cbnz	r0, d498 <hci_init+0x25c>
		rp.feat = (void *)rsp->data;
    d48a:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    d48c:	6883      	ldr	r3, [r0, #8]
    d48e:	785b      	ldrb	r3, [r3, #1]
    d490:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    d494:	f000 fb2e 	bl	daf4 <net_buf_unref>
}
    d498:	b003      	add	sp, #12
    d49a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	err = bt_id_init();
    d49e:	f000 ba49 	b.w	d934 <bt_id_init>
		return -ENOBUFS;
    d4a2:	f06f 0468 	mvn.w	r4, #104	; 0x68
    d4a6:	e741      	b.n	d32c <hci_init+0xf0>
    d4a8:	200001a0 	.word	0x200001a0
    d4ac:	20000210 	.word	0x20000210
    d4b0:	20000270 	.word	0x20000270

0000d4b4 <bt_hci_le_rand>:
{
    d4b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    d4b6:	4b14      	ldr	r3, [pc, #80]	; (d508 <bt_hci_le_rand+0x54>)
    d4b8:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
    d4bc:	2b00      	cmp	r3, #0
{
    d4be:	4605      	mov	r5, r0
    d4c0:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    d4c2:	da1d      	bge.n	d500 <bt_hci_le_rand+0x4c>
	while (len > 0) {
    d4c4:	b914      	cbnz	r4, d4cc <bt_hci_le_rand+0x18>
	return 0;
    d4c6:	4620      	mov	r0, r4
}
    d4c8:	b003      	add	sp, #12
    d4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    d4cc:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    d4ce:	aa01      	add	r2, sp, #4
    d4d0:	f04f 0100 	mov.w	r1, #0
    d4d4:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
    d4d8:	4626      	mov	r6, r4
    d4da:	bf28      	it	cs
    d4dc:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    d4de:	f7ff fe4b 	bl	d178 <bt_hci_cmd_send_sync>
		if (err) {
    d4e2:	2800      	cmp	r0, #0
    d4e4:	d1f0      	bne.n	d4c8 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    d4e6:	9f01      	ldr	r7, [sp, #4]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d4e8:	68b9      	ldr	r1, [r7, #8]
    d4ea:	4632      	mov	r2, r6
    d4ec:	3101      	adds	r1, #1
    d4ee:	4628      	mov	r0, r5
    d4f0:	f005 ff24 	bl	1333c <memcpy>
		net_buf_unref(rsp);
    d4f4:	4638      	mov	r0, r7
    d4f6:	f000 fafd 	bl	daf4 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    d4fa:	4435      	add	r5, r6
		len -= count;
    d4fc:	1ba4      	subs	r4, r4, r6
    d4fe:	e7e1      	b.n	d4c4 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    d500:	f06f 0085 	mvn.w	r0, #133	; 0x85
    d504:	e7e0      	b.n	d4c8 <bt_hci_le_rand+0x14>
    d506:	bf00      	nop
    d508:	200001a0 	.word	0x200001a0

0000d50c <hci_event_prio>:
{
    d50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d510:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    d512:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    d516:	4630      	mov	r0, r6
    d518:	f004 ffe3 	bl	124e2 <net_buf_simple_headroom>
	state->len = buf->len;
    d51c:	89a7      	ldrh	r7, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    d51e:	2f01      	cmp	r7, #1
	state->offset = net_buf_simple_headroom(buf);
    d520:	4605      	mov	r5, r0
    d522:	d80c      	bhi.n	d53e <hci_event_prio+0x32>
    d524:	4a20      	ldr	r2, [pc, #128]	; (d5a8 <hci_event_prio+0x9c>)
    d526:	4921      	ldr	r1, [pc, #132]	; (d5ac <hci_event_prio+0xa0>)
    d528:	4821      	ldr	r0, [pc, #132]	; (d5b0 <hci_event_prio+0xa4>)
    d52a:	f640 5377 	movw	r3, #3447	; 0xd77
    d52e:	f004 fed6 	bl	122de <assert_print>
    d532:	4040      	eors	r0, r0
    d534:	f380 8811 	msr	BASEPRI, r0
    d538:	f04f 0003 	mov.w	r0, #3
    d53c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    d53e:	4630      	mov	r0, r6
    d540:	2102      	movs	r1, #2
    d542:	f004 ffc6 	bl	124d2 <net_buf_simple_pull_mem>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    d546:	7803      	ldrb	r3, [r0, #0]
    d548:	2b05      	cmp	r3, #5
    d54a:	4606      	mov	r6, r0
    d54c:	d021      	beq.n	d592 <hci_event_prio+0x86>
    d54e:	3b0e      	subs	r3, #14
    d550:	2b01      	cmp	r3, #1
    d552:	d921      	bls.n	d598 <hci_event_prio+0x8c>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    d554:	4a14      	ldr	r2, [pc, #80]	; (d5a8 <hci_event_prio+0x9c>)
    d556:	4917      	ldr	r1, [pc, #92]	; (d5b4 <hci_event_prio+0xa8>)
    d558:	4815      	ldr	r0, [pc, #84]	; (d5b0 <hci_event_prio+0xa4>)
    d55a:	f640 537b 	movw	r3, #3451	; 0xd7b
    d55e:	f004 febe 	bl	122de <assert_print>
    d562:	4040      	eors	r0, r0
    d564:	f380 8811 	msr	BASEPRI, r0
    d568:	f04f 0003 	mov.w	r0, #3
    d56c:	df02      	svc	2
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
    d56e:	f04f 0802 	mov.w	r8, #2
	err = handle_event_common(event, buf, handlers, num_handlers);
    d572:	4a11      	ldr	r2, [pc, #68]	; (d5b8 <hci_event_prio+0xac>)
    d574:	7830      	ldrb	r0, [r6, #0]
    d576:	2302      	movs	r3, #2
    d578:	4621      	mov	r1, r4
    d57a:	f004 ff0b 	bl	12394 <handle_event_common.isra.0>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    d57e:	f018 0f02 	tst.w	r8, #2
    d582:	d00c      	beq.n	d59e <hci_event_prio+0x92>
	buf->data = buf->__buf + state->offset;
    d584:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    d586:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    d588:	fa13 f585 	uxtah	r5, r3, r5
    d58c:	60a5      	str	r5, [r4, #8]
}
    d58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
    d592:	f04f 0803 	mov.w	r8, #3
    d596:	e7ec      	b.n	d572 <hci_event_prio+0x66>
	switch (evt) {
    d598:	f04f 0801 	mov.w	r8, #1
    d59c:	e7e9      	b.n	d572 <hci_event_prio+0x66>
		net_buf_unref(buf);
    d59e:	4620      	mov	r0, r4
}
    d5a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    d5a4:	f000 baa6 	b.w	daf4 <net_buf_unref>
    d5a8:	0001398c 	.word	0x0001398c
    d5ac:	000139c0 	.word	0x000139c0
    d5b0:	000139d9 	.word	0x000139d9
    d5b4:	00013a4d 	.word	0x00013a4d
    d5b8:	00013670 	.word	0x00013670

0000d5bc <bt_recv>:
{
    d5bc:	b510      	push	{r4, lr}
	switch (bt_buf_get_type(buf)) {
    d5be:	7d03      	ldrb	r3, [r0, #20]
    d5c0:	2b01      	cmp	r3, #1
{
    d5c2:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    d5c4:	d115      	bne.n	d5f2 <bt_recv+0x36>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    d5c6:	6883      	ldr	r3, [r0, #8]
    d5c8:	781b      	ldrb	r3, [r3, #0]
    d5ca:	2b05      	cmp	r3, #5
    d5cc:	d006      	beq.n	d5dc <bt_recv+0x20>
    d5ce:	3b0e      	subs	r3, #14
    d5d0:	2b01      	cmp	r3, #1
    d5d2:	d805      	bhi.n	d5e0 <bt_recv+0x24>
			hci_event_prio(buf);
    d5d4:	f7ff ff9a 	bl	d50c <hci_event_prio>
		return 0;
    d5d8:	2000      	movs	r0, #0
}
    d5da:	bd10      	pop	{r4, pc}
			hci_event_prio(buf);
    d5dc:	f7ff ff96 	bl	d50c <hci_event_prio>
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    d5e0:	4621      	mov	r1, r4
    d5e2:	4806      	ldr	r0, [pc, #24]	; (d5fc <bt_recv+0x40>)
    d5e4:	f004 ff0b 	bl	123fe <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    d5e8:	4905      	ldr	r1, [pc, #20]	; (d600 <bt_recv+0x44>)
    d5ea:	4806      	ldr	r0, [pc, #24]	; (d604 <bt_recv+0x48>)
    d5ec:	f005 fc7a 	bl	12ee4 <k_work_submit_to_queue>
}
    d5f0:	e7f2      	b.n	d5d8 <bt_recv+0x1c>
		net_buf_unref(buf);
    d5f2:	f000 fa7f 	bl	daf4 <net_buf_unref>
		return -EINVAL;
    d5f6:	f06f 0015 	mvn.w	r0, #21
    d5fa:	e7ee      	b.n	d5da <bt_recv+0x1e>
    d5fc:	2000029c 	.word	0x2000029c
    d600:	20000388 	.word	0x20000388
    d604:	20001208 	.word	0x20001208

0000d608 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    d608:	4a08      	ldr	r2, [pc, #32]	; (d62c <bt_hci_driver_register+0x24>)
{
    d60a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    d60c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    d610:	b930      	cbnz	r0, d620 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    d612:	68d9      	ldr	r1, [r3, #12]
    d614:	b139      	cbz	r1, d626 <bt_hci_driver_register+0x1e>
    d616:	6959      	ldr	r1, [r3, #20]
    d618:	b129      	cbz	r1, d626 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    d61a:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	return 0;
    d61e:	4770      	bx	lr
		return -EALREADY;
    d620:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d624:	4770      	bx	lr
		return -EINVAL;
    d626:	f06f 0015 	mvn.w	r0, #21
}
    d62a:	4770      	bx	lr
    d62c:	200001a0 	.word	0x200001a0

0000d630 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d630:	4b06      	ldr	r3, [pc, #24]	; (d64c <bt_finalize_init+0x1c>)
    d632:	f3bf 8f5b 	dmb	ish
    d636:	e853 1f00 	ldrex	r1, [r3]
    d63a:	f041 0104 	orr.w	r1, r1, #4
    d63e:	e843 1200 	strex	r2, r1, [r3]
    d642:	2a00      	cmp	r2, #0
    d644:	d1f7      	bne.n	d636 <bt_finalize_init+0x6>
    d646:	f3bf 8f5b 	dmb	ish
}
    d64a:	4770      	bx	lr
    d64c:	2000026c 	.word	0x2000026c

0000d650 <init_work>:
{
    d650:	b510      	push	{r4, lr}
	err = hci_init();
    d652:	f7ff fdf3 	bl	d23c <hci_init>
	if (err) {
    d656:	b908      	cbnz	r0, d65c <init_work+0xc>
	bt_finalize_init();
    d658:	f7ff ffea 	bl	d630 <bt_finalize_init>
	if (ready_cb) {
    d65c:	4b03      	ldr	r3, [pc, #12]	; (d66c <init_work+0x1c>)
    d65e:	681b      	ldr	r3, [r3, #0]
    d660:	b113      	cbz	r3, d668 <init_work+0x18>
}
    d662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    d666:	4718      	bx	r3
}
    d668:	bd10      	pop	{r4, pc}
    d66a:	bf00      	nop
    d66c:	2000155c 	.word	0x2000155c

0000d670 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d670:	4b04      	ldr	r3, [pc, #16]	; (d684 <bt_is_ready+0x14>)
    d672:	f3bf 8f5b 	dmb	ish
    d676:	6818      	ldr	r0, [r3, #0]
    d678:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    d67c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    d680:	4770      	bx	lr
    d682:	bf00      	nop
    d684:	2000026c 	.word	0x2000026c

0000d688 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    d688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    d68a:	4f0a      	ldr	r7, [pc, #40]	; (d6b4 <id_find+0x2c>)
{
    d68c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    d68e:	2500      	movs	r5, #0
    d690:	79fb      	ldrb	r3, [r7, #7]
    d692:	b2ec      	uxtb	r4, r5
    d694:	42a3      	cmp	r3, r4
    d696:	d802      	bhi.n	d69e <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    d698:	f06f 0001 	mvn.w	r0, #1
    d69c:	e009      	b.n	d6b2 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    d69e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    d6a2:	4439      	add	r1, r7
    d6a4:	4630      	mov	r0, r6
    d6a6:	f004 fe8c 	bl	123c2 <bt_addr_le_eq>
    d6aa:	3501      	adds	r5, #1
    d6ac:	2800      	cmp	r0, #0
    d6ae:	d0ef      	beq.n	d690 <id_find+0x8>
    d6b0:	4620      	mov	r0, r4
}
    d6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d6b4:	200001a0 	.word	0x200001a0

0000d6b8 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    d6b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d6ba:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    d6bc:	460d      	mov	r5, r1
    d6be:	b171      	cbz	r1, d6de <id_create.constprop.0+0x26>
    d6c0:	4912      	ldr	r1, [pc, #72]	; (d70c <id_create.constprop.0+0x54>)
    d6c2:	4628      	mov	r0, r5
    d6c4:	f004 fe7d 	bl	123c2 <bt_addr_le_eq>
    d6c8:	b948      	cbnz	r0, d6de <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    d6ca:	4811      	ldr	r0, [pc, #68]	; (d710 <id_create.constprop.0+0x58>)
    d6cc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    d6d0:	4629      	mov	r1, r5
    d6d2:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    d6d4:	f004 fe82 	bl	123dc <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    d6d8:	2000      	movs	r0, #0
}
    d6da:	b003      	add	sp, #12
    d6dc:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    d6de:	4668      	mov	r0, sp
    d6e0:	f004 fe45 	bl	1236e <bt_addr_le_create_static>
			if (err) {
    d6e4:	2800      	cmp	r0, #0
    d6e6:	d1f8      	bne.n	d6da <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
    d6e8:	4668      	mov	r0, sp
    d6ea:	f7ff ffcd 	bl	d688 <id_find>
    d6ee:	2800      	cmp	r0, #0
    d6f0:	daf5      	bge.n	d6de <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    d6f2:	4b07      	ldr	r3, [pc, #28]	; (d710 <id_create.constprop.0+0x58>)
    d6f4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    d6f8:	4418      	add	r0, r3
    d6fa:	4669      	mov	r1, sp
    d6fc:	f004 fe6e 	bl	123dc <bt_addr_le_copy>
		if (addr) {
    d700:	2d00      	cmp	r5, #0
    d702:	d0e9      	beq.n	d6d8 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    d704:	4601      	mov	r1, r0
    d706:	4628      	mov	r0, r5
    d708:	e7e4      	b.n	d6d4 <id_create.constprop.0+0x1c>
    d70a:	bf00      	nop
    d70c:	00013979 	.word	0x00013979
    d710:	200001a0 	.word	0x200001a0

0000d714 <set_random_address>:
{
    d714:	b538      	push	{r3, r4, r5, lr}
 *
 *  @return negative value if @a a < @a b, 0 if @a a == @a b, else positive
 */
static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    d716:	4912      	ldr	r1, [pc, #72]	; (d760 <set_random_address+0x4c>)
    d718:	2206      	movs	r2, #6
    d71a:	4605      	mov	r5, r0
    d71c:	f005 fdfe 	bl	1331c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    d720:	b1c8      	cbz	r0, d756 <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    d722:	2106      	movs	r1, #6
    d724:	f242 0005 	movw	r0, #8197	; 0x2005
    d728:	f7ff fcec 	bl	d104 <bt_hci_cmd_create>
	if (!buf) {
    d72c:	4604      	mov	r4, r0
    d72e:	b1a0      	cbz	r0, d75a <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d730:	2206      	movs	r2, #6
    d732:	4629      	mov	r1, r5
    d734:	3008      	adds	r0, #8
    d736:	f004 fec3 	bl	124c0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    d73a:	2200      	movs	r2, #0
    d73c:	4621      	mov	r1, r4
    d73e:	f242 0005 	movw	r0, #8197	; 0x2005
    d742:	f7ff fd19 	bl	d178 <bt_hci_cmd_send_sync>
	if (err) {
    d746:	b938      	cbnz	r0, d758 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    d748:	4805      	ldr	r0, [pc, #20]	; (d760 <set_random_address+0x4c>)
    d74a:	4629      	mov	r1, r5
    d74c:	f004 fe41 	bl	123d2 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    d750:	2301      	movs	r3, #1
    d752:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
    d756:	2000      	movs	r0, #0
}
    d758:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    d75a:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d75e:	e7fb      	b.n	d758 <set_random_address+0x44>
    d760:	20000201 	.word	0x20000201

0000d764 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    d764:	b570      	push	{r4, r5, r6, lr}
    d766:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    d768:	4604      	mov	r4, r0
    d76a:	b918      	cbnz	r0, d774 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    d76c:	b1bd      	cbz	r5, d79e <bt_id_create+0x3a>
			return -EINVAL;
    d76e:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    d772:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    d774:	491c      	ldr	r1, [pc, #112]	; (d7e8 <bt_id_create+0x84>)
    d776:	f004 fe24 	bl	123c2 <bt_addr_le_eq>
    d77a:	2800      	cmp	r0, #0
    d77c:	d1f6      	bne.n	d76c <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    d77e:	7823      	ldrb	r3, [r4, #0]
    d780:	2b01      	cmp	r3, #1
    d782:	d1f4      	bne.n	d76e <bt_id_create+0xa>
    d784:	79a3      	ldrb	r3, [r4, #6]
    d786:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d78a:	2bc0      	cmp	r3, #192	; 0xc0
    d78c:	d1ef      	bne.n	d76e <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    d78e:	4620      	mov	r0, r4
    d790:	f7ff ff7a 	bl	d688 <id_find>
    d794:	2800      	cmp	r0, #0
    d796:	dbe9      	blt.n	d76c <bt_id_create+0x8>
			return -EALREADY;
    d798:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d79c:	e7e9      	b.n	d772 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    d79e:	4d13      	ldr	r5, [pc, #76]	; (d7ec <bt_id_create+0x88>)
    d7a0:	79eb      	ldrb	r3, [r5, #7]
    d7a2:	2b01      	cmp	r3, #1
    d7a4:	d01c      	beq.n	d7e0 <bt_id_create+0x7c>
    d7a6:	f3bf 8f5b 	dmb	ish
    d7aa:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    d7ae:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    d7b2:	07db      	lsls	r3, r3, #31
    d7b4:	d50b      	bpl.n	d7ce <bt_id_create+0x6a>
	new_id = bt_dev.id_count;
    d7b6:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    d7b8:	4621      	mov	r1, r4
    d7ba:	4630      	mov	r0, r6
    d7bc:	f7ff ff7c 	bl	d6b8 <id_create.constprop.0>
	if (err) {
    d7c0:	2800      	cmp	r0, #0
    d7c2:	d1d6      	bne.n	d772 <bt_id_create+0xe>
		bt_dev.id_count++;
    d7c4:	79eb      	ldrb	r3, [r5, #7]
    d7c6:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
    d7c8:	4630      	mov	r0, r6
		bt_dev.id_count++;
    d7ca:	71eb      	strb	r3, [r5, #7]
	return new_id;
    d7cc:	e7d1      	b.n	d772 <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    d7ce:	2c00      	cmp	r4, #0
    d7d0:	d0cd      	beq.n	d76e <bt_id_create+0xa>
    d7d2:	4905      	ldr	r1, [pc, #20]	; (d7e8 <bt_id_create+0x84>)
    d7d4:	4620      	mov	r0, r4
    d7d6:	f004 fdf4 	bl	123c2 <bt_addr_le_eq>
    d7da:	2800      	cmp	r0, #0
    d7dc:	d0eb      	beq.n	d7b6 <bt_id_create+0x52>
    d7de:	e7c6      	b.n	d76e <bt_id_create+0xa>
		return -ENOMEM;
    d7e0:	f06f 000b 	mvn.w	r0, #11
    d7e4:	e7c5      	b.n	d772 <bt_id_create+0xe>
    d7e6:	bf00      	nop
    d7e8:	00013979 	.word	0x00013979
    d7ec:	200001a0 	.word	0x200001a0

0000d7f0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    d7f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    d7f2:	4604      	mov	r4, r0
    d7f4:	b198      	cbz	r0, d81e <bt_id_read_public_addr+0x2e>
		BT_WARN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    d7f6:	aa01      	add	r2, sp, #4
    d7f8:	2100      	movs	r1, #0
    d7fa:	f241 0009 	movw	r0, #4105	; 0x1009
    d7fe:	f7ff fcbb 	bl	d178 <bt_hci_cmd_send_sync>
	if (err) {
    d802:	4606      	mov	r6, r0
    d804:	b958      	cbnz	r0, d81e <bt_id_read_public_addr+0x2e>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    d806:	9b01      	ldr	r3, [sp, #4]
    d808:	490f      	ldr	r1, [pc, #60]	; (d848 <bt_id_read_public_addr+0x58>)

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    d80a:	689d      	ldr	r5, [r3, #8]
    d80c:	3501      	adds	r5, #1
    d80e:	2206      	movs	r2, #6
    d810:	4628      	mov	r0, r5
    d812:	f005 fd83 	bl	1331c <memcmp>
    d816:	b928      	cbnz	r0, d824 <bt_id_read_public_addr+0x34>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
    d818:	9801      	ldr	r0, [sp, #4]
    d81a:	f000 f96b 	bl	daf4 <net_buf_unref>
		return 0U;
    d81e:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    d820:	b002      	add	sp, #8
    d822:	bd70      	pop	{r4, r5, r6, pc}
    d824:	4909      	ldr	r1, [pc, #36]	; (d84c <bt_id_read_public_addr+0x5c>)
    d826:	2206      	movs	r2, #6
    d828:	4628      	mov	r0, r5
    d82a:	f005 fd77 	bl	1331c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    d82e:	2800      	cmp	r0, #0
    d830:	d0f2      	beq.n	d818 <bt_id_read_public_addr+0x28>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    d832:	4629      	mov	r1, r5
    d834:	1c60      	adds	r0, r4, #1
    d836:	f004 fdcc 	bl	123d2 <bt_addr_copy>
	net_buf_unref(rsp);
    d83a:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    d83c:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    d83e:	f000 f959 	bl	daf4 <net_buf_unref>
	return 1U;
    d842:	2001      	movs	r0, #1
    d844:	e7ec      	b.n	d820 <bt_id_read_public_addr+0x30>
    d846:	bf00      	nop
    d848:	00013986 	.word	0x00013986
    d84c:	00013980 	.word	0x00013980

0000d850 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    d850:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    d852:	4668      	mov	r0, sp
    d854:	f7ff ffcc 	bl	d7f0 <bt_id_read_public_addr>
    d858:	4b04      	ldr	r3, [pc, #16]	; (d86c <bt_setup_public_id_addr+0x1c>)
    d85a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    d85c:	b118      	cbz	r0, d866 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    d85e:	4669      	mov	r1, sp
    d860:	2000      	movs	r0, #0
    d862:	f7ff ff29 	bl	d6b8 <id_create.constprop.0>
}
    d866:	b003      	add	sp, #12
    d868:	f85d fb04 	ldr.w	pc, [sp], #4
    d86c:	200001a0 	.word	0x200001a0

0000d870 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    d870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    d872:	4b18      	ldr	r3, [pc, #96]	; (d8d4 <bt_read_static_addr+0x64>)
    d874:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    d878:	07db      	lsls	r3, r3, #31
{
    d87a:	4605      	mov	r5, r0
    d87c:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    d87e:	d403      	bmi.n	d888 <bt_read_static_addr+0x18>
		BT_WARN("Read Static Addresses command not available");
		return 0;
    d880:	2400      	movs	r4, #0
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    d882:	4620      	mov	r0, r4
    d884:	b003      	add	sp, #12
    d886:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    d888:	aa01      	add	r2, sp, #4
    d88a:	2100      	movs	r1, #0
    d88c:	f64f 4009 	movw	r0, #64521	; 0xfc09
    d890:	f7ff fc72 	bl	d178 <bt_hci_cmd_send_sync>
	if (err) {
    d894:	4603      	mov	r3, r0
    d896:	2800      	cmp	r0, #0
    d898:	d1f2      	bne.n	d880 <bt_read_static_addr+0x10>
	rp = (void *)rsp->data;
    d89a:	9801      	ldr	r0, [sp, #4]
    d89c:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
    d89e:	7854      	ldrb	r4, [r2, #1]
    d8a0:	42b4      	cmp	r4, r6
    d8a2:	bf28      	it	cs
    d8a4:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
    d8a6:	3202      	adds	r2, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    d8a8:	2716      	movs	r7, #22
	for (i = 0; i < cnt; i++) {
    d8aa:	429c      	cmp	r4, r3
    d8ac:	dc02      	bgt.n	d8b4 <bt_read_static_addr+0x44>
	net_buf_unref(rsp);
    d8ae:	f000 f921 	bl	daf4 <net_buf_unref>
	if (!cnt) {
    d8b2:	e7e6      	b.n	d882 <bt_read_static_addr+0x12>
    d8b4:	4611      	mov	r1, r2
    d8b6:	fb07 5603 	mla	r6, r7, r3, r5
    d8ba:	f102 0c14 	add.w	ip, r2, #20
    d8be:	f851 eb04 	ldr.w	lr, [r1], #4
    d8c2:	f846 eb04 	str.w	lr, [r6], #4
    d8c6:	4561      	cmp	r1, ip
    d8c8:	d1f9      	bne.n	d8be <bt_read_static_addr+0x4e>
    d8ca:	8809      	ldrh	r1, [r1, #0]
    d8cc:	8031      	strh	r1, [r6, #0]
	for (i = 0; i < cnt; i++) {
    d8ce:	3301      	adds	r3, #1
    d8d0:	3216      	adds	r2, #22
    d8d2:	e7ea      	b.n	d8aa <bt_read_static_addr+0x3a>
    d8d4:	200001a0 	.word	0x200001a0

0000d8d8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    d8d8:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    d8da:	4d15      	ldr	r5, [pc, #84]	; (d930 <bt_setup_random_id_addr+0x58>)
    d8dc:	79ec      	ldrb	r4, [r5, #7]
{
    d8de:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
    d8e0:	b92c      	cbnz	r4, d8ee <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    d8e2:	2101      	movs	r1, #1
    d8e4:	a802      	add	r0, sp, #8
    d8e6:	f7ff ffc3 	bl	d870 <bt_read_static_addr>
    d8ea:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    d8ec:	b9c0      	cbnz	r0, d920 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    d8ee:	2100      	movs	r1, #0
    d8f0:	4608      	mov	r0, r1
}
    d8f2:	b008      	add	sp, #32
    d8f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
    d8f8:	f7ff bf34 	b.w	d764 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    d8fc:	ab02      	add	r3, sp, #8
    d8fe:	fb06 3102 	mla	r1, r6, r2, r3
    d902:	f10d 0001 	add.w	r0, sp, #1
    d906:	f004 fd64 	bl	123d2 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    d90a:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    d90c:	4669      	mov	r1, sp
    d90e:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
    d910:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    d914:	f7ff fed0 	bl	d6b8 <id_create.constprop.0>
				if (err) {
    d918:	3401      	adds	r4, #1
    d91a:	b110      	cbz	r0, d922 <bt_setup_random_id_addr+0x4a>
}
    d91c:	b008      	add	sp, #32
    d91e:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    d920:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    d922:	79eb      	ldrb	r3, [r5, #7]
    d924:	b2e2      	uxtb	r2, r4
    d926:	4293      	cmp	r3, r2
    d928:	d8e8      	bhi.n	d8fc <bt_setup_random_id_addr+0x24>
			return 0;
    d92a:	2000      	movs	r0, #0
    d92c:	e7f6      	b.n	d91c <bt_setup_random_id_addr+0x44>
    d92e:	bf00      	nop
    d930:	200001a0 	.word	0x200001a0

0000d934 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    d934:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    d936:	4c0a      	ldr	r4, [pc, #40]	; (d960 <bt_id_init+0x2c>)
    d938:	79e3      	ldrb	r3, [r4, #7]
    d93a:	b10b      	cbz	r3, d940 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    d93c:	2000      	movs	r0, #0
}
    d93e:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
    d940:	f7ff ff86 	bl	d850 <bt_setup_public_id_addr>
		if (err) {
    d944:	2800      	cmp	r0, #0
    d946:	d1fa      	bne.n	d93e <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    d948:	79e3      	ldrb	r3, [r4, #7]
    d94a:	2b00      	cmp	r3, #0
    d94c:	d1f6      	bne.n	d93c <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    d94e:	f7ff ffc3 	bl	d8d8 <bt_setup_random_id_addr>
		if (err) {
    d952:	2800      	cmp	r0, #0
    d954:	d1f3      	bne.n	d93e <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    d956:	1c60      	adds	r0, r4, #1
}
    d958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
    d95c:	f7ff beda 	b.w	d714 <set_random_address>
    d960:	200001a0 	.word	0x200001a0

0000d964 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    d964:	4b02      	ldr	r3, [pc, #8]	; (d970 <net_buf_pool_get+0xc>)
    d966:	2230      	movs	r2, #48	; 0x30
    d968:	fb02 3000 	mla	r0, r2, r0, r3
    d96c:	4770      	bx	lr
    d96e:	bf00      	nop
    d970:	20000494 	.word	0x20000494

0000d974 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d974:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    d976:	4b07      	ldr	r3, [pc, #28]	; (d994 <net_buf_id+0x20>)
    d978:	2130      	movs	r1, #48	; 0x30
    d97a:	fb01 3302 	mla	r3, r1, r2, r3
    d97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    d980:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    d984:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    d986:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    d988:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
    d98c:	fbb0 f0f3 	udiv	r0, r0, r3
    d990:	4770      	bx	lr
    d992:	bf00      	nop
    d994:	20000494 	.word	0x20000494

0000d998 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    d998:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d99a:	4b0a      	ldr	r3, [pc, #40]	; (d9c4 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d99c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d99e:	2430      	movs	r4, #48	; 0x30
    d9a0:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
    d9a4:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d9a8:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    d9aa:	681a      	ldr	r2, [r3, #0]
    d9ac:	4294      	cmp	r4, r2
    d9ae:	bf94      	ite	ls
    d9b0:	600c      	strls	r4, [r1, #0]
    d9b2:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    d9b4:	e9d3 5400 	ldrd	r5, r4, [r3]
    d9b8:	f7ff ffdc 	bl	d974 <net_buf_id>
}
    d9bc:	fb05 4000 	mla	r0, r5, r0, r4
    d9c0:	bd38      	pop	{r3, r4, r5, pc}
    d9c2:	bf00      	nop
    d9c4:	20000494 	.word	0x20000494

0000d9c8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    d9c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9cc:	4605      	mov	r5, r0
    d9ce:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    d9d0:	4610      	mov	r0, r2
    d9d2:	4619      	mov	r1, r3
{
    d9d4:	4691      	mov	r9, r2
    d9d6:	4698      	mov	r8, r3
    d9d8:	4617      	mov	r7, r2
    d9da:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    d9dc:	f005 fbeb 	bl	131b6 <sys_clock_timeout_end_calc>
    d9e0:	4682      	mov	sl, r0
    d9e2:	468b      	mov	fp, r1
	__asm__ volatile(
    d9e4:	f04f 0340 	mov.w	r3, #64	; 0x40
    d9e8:	f3ef 8111 	mrs	r1, BASEPRI
    d9ec:	f383 8812 	msr	BASEPRI_MAX, r3
    d9f0:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    d9f4:	8c2b      	ldrh	r3, [r5, #32]
    d9f6:	2b00      	cmp	r3, #0
    d9f8:	d05b      	beq.n	dab2 <net_buf_alloc_len+0xea>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    d9fa:	8bea      	ldrh	r2, [r5, #30]
    d9fc:	429a      	cmp	r2, r3
    d9fe:	d93d      	bls.n	da7c <net_buf_alloc_len+0xb4>
    da00:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
    da02:	2200      	movs	r2, #0
    da04:	2300      	movs	r3, #0
    da06:	4628      	mov	r0, r5
    da08:	f002 fe7a 	bl	10700 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    da0c:	9900      	ldr	r1, [sp, #0]
    da0e:	4604      	mov	r4, r0
    da10:	2800      	cmp	r0, #0
    da12:	d033      	beq.n	da7c <net_buf_alloc_len+0xb4>
	__asm__ volatile(
    da14:	f381 8811 	msr	BASEPRI, r1
    da18:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    da1c:	9b01      	ldr	r3, [sp, #4]
    da1e:	2b00      	cmp	r3, #0
    da20:	d058      	beq.n	dad4 <net_buf_alloc_len+0x10c>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    da22:	ea58 0309 	orrs.w	r3, r8, r9
    da26:	d00f      	beq.n	da48 <net_buf_alloc_len+0x80>
    da28:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    da2c:	bf08      	it	eq
    da2e:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    da32:	d009      	beq.n	da48 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
    da34:	f003 fcac 	bl	11390 <sys_clock_tick_get>
    da38:	ebba 0700 	subs.w	r7, sl, r0
    da3c:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
    da40:	2e00      	cmp	r6, #0
    da42:	bfbc      	itt	lt
    da44:	2700      	movlt	r7, #0
    da46:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    da48:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    da4a:	4d28      	ldr	r5, [pc, #160]	; (daec <net_buf_alloc_len+0x124>)
    da4c:	2230      	movs	r2, #48	; 0x30
    da4e:	fb02 5303 	mla	r3, r2, r3, r5
    da52:	a901      	add	r1, sp, #4
    da54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    da56:	681b      	ldr	r3, [r3, #0]
    da58:	463a      	mov	r2, r7
    da5a:	f8d3 8000 	ldr.w	r8, [r3]
    da5e:	4620      	mov	r0, r4
    da60:	4633      	mov	r3, r6
    da62:	47c0      	blx	r8
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    da64:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    da66:	2800      	cmp	r0, #0
    da68:	d135      	bne.n	dad6 <net_buf_alloc_len+0x10e>
	k_lifo_put(&pool->free, buf);
    da6a:	79a0      	ldrb	r0, [r4, #6]
    da6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    da70:	4621      	mov	r1, r4
    da72:	eb05 1000 	add.w	r0, r5, r0, lsl #4
    da76:	f005 f9ab 	bl	12dd0 <k_queue_prepend>
}
    da7a:	e026      	b.n	daca <net_buf_alloc_len+0x102>
		uninit_count = pool->uninit_count--;
    da7c:	8c28      	ldrh	r0, [r5, #32]
    da7e:	1e43      	subs	r3, r0, #1
    da80:	842b      	strh	r3, [r5, #32]
    da82:	f381 8811 	msr	BASEPRI, r1
    da86:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    da8a:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
    da8e:	8bea      	ldrh	r2, [r5, #30]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
    da90:	6aec      	ldr	r4, [r5, #44]	; 0x2c
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    da92:	3317      	adds	r3, #23
    da94:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
    da98:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
    da9a:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
    da9e:	4b13      	ldr	r3, [pc, #76]	; (daec <net_buf_alloc_len+0x124>)
    daa0:	4a13      	ldr	r2, [pc, #76]	; (daf0 <net_buf_alloc_len+0x128>)
    daa2:	1aeb      	subs	r3, r5, r3
    daa4:	111b      	asrs	r3, r3, #4
    daa6:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
    daa8:	71a3      	strb	r3, [r4, #6]
	buf->user_data_size = pool->user_data_size;
    daaa:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
    daae:	71e3      	strb	r3, [r4, #7]
		goto success;
    dab0:	e7b4      	b.n	da1c <net_buf_alloc_len+0x54>
    dab2:	f381 8811 	msr	BASEPRI, r1
    dab6:	f3bf 8f6f 	isb	sy
    daba:	464a      	mov	r2, r9
    dabc:	4643      	mov	r3, r8
    dabe:	4628      	mov	r0, r5
    dac0:	f002 fe1e 	bl	10700 <z_impl_k_queue_get>
	if (!buf) {
    dac4:	4604      	mov	r4, r0
    dac6:	2800      	cmp	r0, #0
    dac8:	d1a8      	bne.n	da1c <net_buf_alloc_len+0x54>
		return NULL;
    daca:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
    dacc:	4620      	mov	r0, r4
    dace:	b003      	add	sp, #12
    dad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
    dad4:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    dad6:	2300      	movs	r3, #0
    dad8:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
    dada:	2201      	movs	r2, #1
    dadc:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
    dade:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
    dae0:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    dae2:	6923      	ldr	r3, [r4, #16]
    dae4:	81e2      	strh	r2, [r4, #14]
    dae6:	60a3      	str	r3, [r4, #8]
	return buf;
    dae8:	e7f0      	b.n	dacc <net_buf_alloc_len+0x104>
    daea:	bf00      	nop
    daec:	20000494 	.word	0x20000494
    daf0:	aaaaaaab 	.word	0xaaaaaaab

0000daf4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    daf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    daf8:	4d17      	ldr	r5, [pc, #92]	; (db58 <net_buf_unref+0x64>)
    dafa:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    dafc:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
    dafe:	2730      	movs	r7, #48	; 0x30
	while (buf) {
    db00:	b90c      	cbnz	r4, db06 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    db02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
    db06:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    db08:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
    db0c:	3b01      	subs	r3, #1
    db0e:	b2db      	uxtb	r3, r3
    db10:	7123      	strb	r3, [r4, #4]
    db12:	2b00      	cmp	r3, #0
    db14:	d1f5      	bne.n	db02 <net_buf_unref+0xe>
		if (buf->__buf) {
    db16:	6921      	ldr	r1, [r4, #16]
    db18:	b159      	cbz	r1, db32 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    db1a:	7963      	ldrb	r3, [r4, #5]
    db1c:	079b      	lsls	r3, r3, #30
    db1e:	d407      	bmi.n	db30 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    db20:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    db22:	fb07 5303 	mla	r3, r7, r3, r5
    db26:	4620      	mov	r0, r4
    db28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    db2a:	681b      	ldr	r3, [r3, #0]
    db2c:	689b      	ldr	r3, [r3, #8]
    db2e:	4798      	blx	r3
			buf->__buf = NULL;
    db30:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
    db32:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    db34:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
    db36:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
    db3a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    db3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    db3e:	b11b      	cbz	r3, db48 <net_buf_unref+0x54>
			pool->destroy(buf);
    db40:	4620      	mov	r0, r4
    db42:	4798      	blx	r3
{
    db44:	4644      	mov	r4, r8
    db46:	e7db      	b.n	db00 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
    db48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    db4c:	4621      	mov	r1, r4
    db4e:	eb05 1000 	add.w	r0, r5, r0, lsl #4
    db52:	f005 f93d 	bl	12dd0 <k_queue_prepend>
}
    db56:	e7f5      	b.n	db44 <net_buf_unref+0x50>
    db58:	20000494 	.word	0x20000494

0000db5c <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
    db5c:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    db5e:	4804      	ldr	r0, [pc, #16]	; (db70 <xoshiro128_initialize+0x14>)
    db60:	f005 f80d 	bl	12b7e <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
    db64:	2800      	cmp	r0, #0
}
    db66:	bf0c      	ite	eq
    db68:	f06f 0012 	mvneq.w	r0, #18
    db6c:	2000      	movne	r0, #0
    db6e:	bd08      	pop	{r3, pc}
    db70:	00013438 	.word	0x00013438

0000db74 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    db74:	4b05      	ldr	r3, [pc, #20]	; (db8c <adc_context_start_sampling+0x18>)
    db76:	2201      	movs	r2, #1
    db78:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    db7c:	f890 108e 	ldrb.w	r1, [r0, #142]	; 0x8e
    db80:	b109      	cbz	r1, db86 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    db82:	60da      	str	r2, [r3, #12]
}
    db84:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    db86:	601a      	str	r2, [r3, #0]
    db88:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    db8a:	4770      	bx	lr
    db8c:	40007000 	.word	0x40007000

0000db90 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    db90:	7908      	ldrb	r0, [r1, #4]
{
    db92:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    db94:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    db98:	2c07      	cmp	r4, #7
    db9a:	d820      	bhi.n	dbde <adc_nrfx_channel_setup+0x4e>
	switch (channel_cfg->gain) {
    db9c:	780b      	ldrb	r3, [r1, #0]
    db9e:	2b0b      	cmp	r3, #11
    dba0:	d81d      	bhi.n	dbde <adc_nrfx_channel_setup+0x4e>
    dba2:	e8df f003 	tbb	[pc, r3]
    dba6:	0707      	.short	0x0707
    dba8:	061c0707 	.word	0x061c0707
    dbac:	211f1c1c 	.word	0x211f1c1c
    dbb0:	231c      	.short	0x231c
		config.gain = NRF_SAADC_GAIN1_2;
    dbb2:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
    dbb4:	784a      	ldrb	r2, [r1, #1]
    dbb6:	2a03      	cmp	r2, #3
    dbb8:	d01a      	beq.n	dbf0 <adc_nrfx_channel_setup+0x60>
    dbba:	2a04      	cmp	r2, #4
    dbbc:	d10f      	bne.n	dbde <adc_nrfx_channel_setup+0x4e>
	nrf_saadc_channel_config_t config = {
    dbbe:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    dbc0:	884a      	ldrh	r2, [r1, #2]
    dbc2:	f244 060a 	movw	r6, #16394	; 0x400a
    dbc6:	42b2      	cmp	r2, r6
    dbc8:	d046      	beq.n	dc58 <adc_nrfx_channel_setup+0xc8>
    dbca:	d813      	bhi.n	dbf4 <adc_nrfx_channel_setup+0x64>
    dbcc:	f244 0603 	movw	r6, #16387	; 0x4003
    dbd0:	42b2      	cmp	r2, r6
    dbd2:	d03d      	beq.n	dc50 <adc_nrfx_channel_setup+0xc0>
    dbd4:	f244 0605 	movw	r6, #16389	; 0x4005
    dbd8:	42b2      	cmp	r2, r6
    dbda:	d03b      	beq.n	dc54 <adc_nrfx_channel_setup+0xc4>
    dbdc:	b3e2      	cbz	r2, dc58 <adc_nrfx_channel_setup+0xc8>
    dbde:	f06f 0015 	mvn.w	r0, #21
    dbe2:	e034      	b.n	dc4e <adc_nrfx_channel_setup+0xbe>
		config.gain = NRF_SAADC_GAIN1;
    dbe4:	2305      	movs	r3, #5
		break;
    dbe6:	e7e5      	b.n	dbb4 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
    dbe8:	2306      	movs	r3, #6
		break;
    dbea:	e7e3      	b.n	dbb4 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
    dbec:	2307      	movs	r3, #7
		break;
    dbee:	e7e1      	b.n	dbb4 <adc_nrfx_channel_setup+0x24>
	switch (channel_cfg->reference) {
    dbf0:	2501      	movs	r5, #1
    dbf2:	e7e5      	b.n	dbc0 <adc_nrfx_channel_setup+0x30>
	switch (channel_cfg->acquisition_time) {
    dbf4:	f244 0614 	movw	r6, #16404	; 0x4014
    dbf8:	42b2      	cmp	r2, r6
    dbfa:	d02f      	beq.n	dc5c <adc_nrfx_channel_setup+0xcc>
    dbfc:	f244 0628 	movw	r6, #16424	; 0x4028
    dc00:	42b2      	cmp	r2, r6
    dc02:	d02d      	beq.n	dc60 <adc_nrfx_channel_setup+0xd0>
    dc04:	f244 060f 	movw	r6, #16399	; 0x400f
    dc08:	42b2      	cmp	r2, r6
    dc0a:	d1e8      	bne.n	dbde <adc_nrfx_channel_setup+0x4e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    dc0c:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    dc0e:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    dc12:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    dc14:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    dc18:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    dc1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    dc20:	0122      	lsls	r2, r4, #4
    dc22:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    dc26:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    dc2a:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    dc2c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    dc30:	0123      	lsls	r3, r4, #4
    dc32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    dc36:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    dc3a:	798a      	ldrb	r2, [r1, #6]
    dc3c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    dc40:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    dc44:	4b07      	ldr	r3, [pc, #28]	; (dc64 <adc_nrfx_channel_setup+0xd4>)
    dc46:	794a      	ldrb	r2, [r1, #5]
    dc48:	4423      	add	r3, r4
    dc4a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
    dc4e:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
    dc50:	2200      	movs	r2, #0
    dc52:	e7dc      	b.n	dc0e <adc_nrfx_channel_setup+0x7e>
	switch (channel_cfg->acquisition_time) {
    dc54:	2201      	movs	r2, #1
    dc56:	e7da      	b.n	dc0e <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    dc58:	2202      	movs	r2, #2
    dc5a:	e7d8      	b.n	dc0e <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    dc5c:	2204      	movs	r2, #4
    dc5e:	e7d6      	b.n	dc0e <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    dc60:	2205      	movs	r2, #5
    dc62:	e7d4      	b.n	dc0e <adc_nrfx_channel_setup+0x7e>
    dc64:	200002c8 	.word	0x200002c8

0000dc68 <start_read.constprop.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
    dc68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
    dc6a:	6846      	ldr	r6, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    dc6c:	1e73      	subs	r3, r6, #1
    dc6e:	2bfe      	cmp	r3, #254	; 0xfe
static int start_read(const struct device *dev,
    dc70:	4605      	mov	r5, r0
	if (!selected_channels ||
    dc72:	d83c      	bhi.n	dcee <start_read.constprop.0+0x86>
    dc74:	2300      	movs	r3, #0
    p_reg->CH[channel].PSELP = pselp;
    dc76:	4852      	ldr	r0, [pc, #328]	; (ddc0 <start_read.constprop.0+0x158>)
	do {
		if (selected_channels & BIT(channel_id)) {
			/* Signal an error if a selected channel has not been
			 * configured yet.
			 */
			if (m_data.positive_inputs[channel_id] == 0U) {
    dc78:	4f52      	ldr	r7, [pc, #328]	; (ddc4 <start_read.constprop.0+0x15c>)
	active_channels = 0U;
    dc7a:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
    dc7c:	fa26 f103 	lsr.w	r1, r6, r3
    dc80:	f011 0101 	ands.w	r1, r1, #1
    dc84:	d026      	beq.n	dcd4 <start_read.constprop.0+0x6c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    dc86:	f817 c003 	ldrb.w	ip, [r7, r3]
    dc8a:	f1bc 0f00 	cmp.w	ip, #0
    dc8e:	d02e      	beq.n	dcee <start_read.constprop.0+0x86>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    dc90:	eb00 1e03 	add.w	lr, r0, r3, lsl #4
			 * event is not generated) after switching to a single
			 * channel sampling and back. Thus, when oversampling
			 * is not used (hence, the multiple channel sampling is
			 * possible), the burst mode have to be deactivated.
			 */
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    dc94:	7c6c      	ldrb	r4, [r5, #17]
    dc96:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
    dc9a:	3c00      	subs	r4, #0
    dc9c:	bf18      	it	ne
    dc9e:	2401      	movne	r4, #1
    dca0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
    dca4:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
    dca8:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    dcac:	f103 0151 	add.w	r1, r3, #81	; 0x51
    dcb0:	0109      	lsls	r1, r1, #4
					NRF_SAADC_BURST_DISABLED));
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				m_data.positive_inputs[channel_id]);
			++active_channels;
    dcb2:	3201      	adds	r2, #1
    dcb4:	f840 c001 	str.w	ip, [r0, r1]
    dcb8:	b2d2      	uxtb	r2, r2
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
    dcba:	3301      	adds	r3, #1
    dcbc:	2b08      	cmp	r3, #8
    dcbe:	d1dd      	bne.n	dc7c <start_read.constprop.0+0x14>
	switch (sequence->resolution) {
    dcc0:	7c2b      	ldrb	r3, [r5, #16]
    dcc2:	3b08      	subs	r3, #8
    dcc4:	2b06      	cmp	r3, #6
    dcc6:	d812      	bhi.n	dcee <start_read.constprop.0+0x86>
    dcc8:	e8df f003 	tbb	[pc, r3]
    dccc:	11191109 	.word	0x11191109
    dcd0:	1115      	.short	0x1115
    dcd2:	17          	.byte	0x17
    dcd3:	00          	.byte	0x00
    dcd4:	f103 0451 	add.w	r4, r3, #81	; 0x51
    dcd8:	0124      	lsls	r4, r4, #4
    dcda:	5101      	str	r1, [r0, r4]
}
    dcdc:	e7ed      	b.n	dcba <start_read.constprop.0+0x52>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    dcde:	2300      	movs	r3, #0
    p_reg->RESOLUTION = resolution;
    dce0:	4937      	ldr	r1, [pc, #220]	; (ddc0 <start_read.constprop.0+0x158>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    dce2:	2a01      	cmp	r2, #1
    dce4:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_resolution(sequence);
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
    dce8:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    dcea:	d90a      	bls.n	dd02 <start_read.constprop.0+0x9a>
    dcec:	b15b      	cbz	r3, dd06 <start_read.constprop.0+0x9e>
		return -EINVAL;
    dcee:	f06f 0015 	mvn.w	r0, #21

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    dcf2:	b003      	add	sp, #12
    dcf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    dcf6:	2302      	movs	r3, #2
		break;
    dcf8:	e7f2      	b.n	dce0 <start_read.constprop.0+0x78>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    dcfa:	2303      	movs	r3, #3
		break;
    dcfc:	e7f0      	b.n	dce0 <start_read.constprop.0+0x78>
	switch (sequence->resolution) {
    dcfe:	2301      	movs	r3, #1
    dd00:	e7ee      	b.n	dce0 <start_read.constprop.0+0x78>
	switch (sequence->oversampling) {
    dd02:	2b08      	cmp	r3, #8
    dd04:	d8f3      	bhi.n	dcee <start_read.constprop.0+0x86>
    p_reg->OVERSAMPLE = oversample;
    dd06:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
    dd0a:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    dd0c:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
    dd0e:	b111      	cbz	r1, dd16 <start_read.constprop.0+0xae>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    dd10:	8989      	ldrh	r1, [r1, #12]
    dd12:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    dd16:	68e9      	ldr	r1, [r5, #12]
    dd18:	4299      	cmp	r1, r3
    dd1a:	d34d      	bcc.n	ddb8 <start_read.constprop.0+0x150>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    dd1c:	4b28      	ldr	r3, [pc, #160]	; (ddc0 <start_read.constprop.0+0x158>)
    dd1e:	68a9      	ldr	r1, [r5, #8]
    dd20:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    dd24:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    dd26:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
    dd2a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    dd2c:	4c26      	ldr	r4, [pc, #152]	; (ddc8 <start_read.constprop.0+0x160>)
    dd2e:	f104 067c 	add.w	r6, r4, #124	; 0x7c
    dd32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    dd34:	683b      	ldr	r3, [r7, #0]
    dd36:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
    dd38:	2600      	movs	r6, #0
    dd3a:	6726      	str	r6, [r4, #112]	; 0x70

	if (sequence->options) {
    dd3c:	682b      	ldr	r3, [r5, #0]
    dd3e:	4627      	mov	r7, r4
    dd40:	b3a3      	cbz	r3, ddac <start_read.constprop.0+0x144>
		ctx->options = *sequence->options;
    dd42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    dd44:	f104 0590 	add.w	r5, r4, #144	; 0x90
    dd48:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    dd4c:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
    dd4e:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
    dd52:	b358      	cbz	r0, ddac <start_read.constprop.0+0x144>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    dd54:	f3bf 8f5b 	dmb	ish
    dd58:	e857 3f00 	ldrex	r3, [r7]
    dd5c:	e847 6200 	strex	r2, r6, [r7]
    dd60:	2a00      	cmp	r2, #0
    dd62:	d1f9      	bne.n	dd58 <start_read.constprop.0+0xf0>
    dd64:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    dd68:	4918      	ldr	r1, [pc, #96]	; (ddcc <start_read.constprop.0+0x164>)
    dd6a:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    dd6e:	4a18      	ldr	r2, [pc, #96]	; (ddd0 <start_read.constprop.0+0x168>)
    dd70:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    dd74:	460f      	mov	r7, r1
    dd76:	4631      	mov	r1, r6
    dd78:	fbe5 7100 	umlal	r7, r1, r5, r0
    dd7c:	2300      	movs	r3, #0
    dd7e:	4638      	mov	r0, r7
    dd80:	f7f2 fe94 	bl	aac <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    dd84:	2200      	movs	r2, #0
    dd86:	e9cd 0100 	strd	r0, r1, [sp]
    dd8a:	2300      	movs	r3, #0
    dd8c:	f104 0008 	add.w	r0, r4, #8
    dd90:	f003 fb82 	bl	11498 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
    dd94:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    dd98:	b963      	cbnz	r3, ddb4 <start_read.constprop.0+0x14c>
	return z_impl_k_sem_take(sem, timeout);
    dd9a:	480e      	ldr	r0, [pc, #56]	; (ddd4 <start_read.constprop.0+0x16c>)
    dd9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dda0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dda4:	f002 fd04 	bl	107b0 <z_impl_k_sem_take>
	return ctx->status;
    dda8:	6f20      	ldr	r0, [r4, #112]	; 0x70
    ddaa:	e7a2      	b.n	dcf2 <start_read.constprop.0+0x8a>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    ddac:	4806      	ldr	r0, [pc, #24]	; (ddc8 <start_read.constprop.0+0x160>)
    ddae:	f7ff fee1 	bl	db74 <adc_context_start_sampling>
    ddb2:	e7ef      	b.n	dd94 <start_read.constprop.0+0x12c>
		return 0;
    ddb4:	2000      	movs	r0, #0
	return error;
    ddb6:	e79c      	b.n	dcf2 <start_read.constprop.0+0x8a>
		return -ENOMEM;
    ddb8:	f06f 000b 	mvn.w	r0, #11
    ddbc:	e799      	b.n	dcf2 <start_read.constprop.0+0x8a>
    ddbe:	bf00      	nop
    ddc0:	40007000 	.word	0x40007000
    ddc4:	20000370 	.word	0x20000370
    ddc8:	200002c8 	.word	0x200002c8
    ddcc:	000f423f 	.word	0x000f423f
    ddd0:	000f4240 	.word	0x000f4240
    ddd4:	20000320 	.word	0x20000320

0000ddd8 <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
    ddd8:	b570      	push	{r4, r5, r6, lr}
    ddda:	460c      	mov	r4, r1
    dddc:	4616      	mov	r6, r2
	ctx->asynchronous = asynchronous;
    ddde:	4d0c      	ldr	r5, [pc, #48]	; (de10 <adc_nrfx_read_async+0x38>)
    dde0:	480c      	ldr	r0, [pc, #48]	; (de14 <adc_nrfx_read_async+0x3c>)
    dde2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dde6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ddea:	f002 fce1 	bl	107b0 <z_impl_k_sem_take>
    ddee:	2301      	movs	r3, #1
    ddf0:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
    ddf4:	4620      	mov	r0, r4
	ctx->signal = signal;
    ddf6:	676e      	str	r6, [r5, #116]	; 0x74
    ddf8:	f7ff ff36 	bl	dc68 <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
    ddfc:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    de00:	4604      	mov	r4, r0
    de02:	b103      	cbz	r3, de06 <adc_nrfx_read_async+0x2e>
    de04:	b110      	cbz	r0, de0c <adc_nrfx_read_async+0x34>
	z_impl_k_sem_give(sem);
    de06:	4803      	ldr	r0, [pc, #12]	; (de14 <adc_nrfx_read_async+0x3c>)
    de08:	f002 fcac 	bl	10764 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    de0c:	4620      	mov	r0, r4
    de0e:	bd70      	pop	{r4, r5, r6, pc}
    de10:	200002c8 	.word	0x200002c8
    de14:	20000308 	.word	0x20000308

0000de18 <adc_nrfx_read>:
{
    de18:	b538      	push	{r3, r4, r5, lr}
    de1a:	460c      	mov	r4, r1
	ctx->asynchronous = asynchronous;
    de1c:	4d0c      	ldr	r5, [pc, #48]	; (de50 <adc_nrfx_read+0x38>)
	return z_impl_k_sem_take(sem, timeout);
    de1e:	480d      	ldr	r0, [pc, #52]	; (de54 <adc_nrfx_read+0x3c>)
    de20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    de24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    de28:	f002 fcc2 	bl	107b0 <z_impl_k_sem_take>
    de2c:	2300      	movs	r3, #0
    de2e:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    de32:	676b      	str	r3, [r5, #116]	; 0x74
	error = start_read(dev, sequence);
    de34:	4620      	mov	r0, r4
    de36:	f7ff ff17 	bl	dc68 <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
    de3a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    de3e:	4604      	mov	r4, r0
    de40:	b103      	cbz	r3, de44 <adc_nrfx_read+0x2c>
    de42:	b110      	cbz	r0, de4a <adc_nrfx_read+0x32>
	z_impl_k_sem_give(sem);
    de44:	4803      	ldr	r0, [pc, #12]	; (de54 <adc_nrfx_read+0x3c>)
    de46:	f002 fc8d 	bl	10764 <z_impl_k_sem_give>
}
    de4a:	4620      	mov	r0, r4
    de4c:	bd38      	pop	{r3, r4, r5, pc}
    de4e:	bf00      	nop
    de50:	200002c8 	.word	0x200002c8
    de54:	20000308 	.word	0x20000308

0000de58 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    de58:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    de5a:	4b0e      	ldr	r3, [pc, #56]	; (de94 <init_saadc+0x3c>)
    de5c:	2400      	movs	r4, #0
    de5e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    de62:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    de66:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    de6a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    de6e:	2212      	movs	r2, #18
    de70:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    de74:	2007      	movs	r0, #7
    de76:	f7fe fc43 	bl	c700 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    de7a:	4622      	mov	r2, r4
    de7c:	2101      	movs	r1, #1
    de7e:	2007      	movs	r0, #7
    de80:	f7fe fc6e 	bl	c760 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    de84:	4804      	ldr	r0, [pc, #16]	; (de98 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
    de86:	6c83      	ldr	r3, [r0, #72]	; 0x48
    de88:	b913      	cbnz	r3, de90 <init_saadc+0x38>
    de8a:	3040      	adds	r0, #64	; 0x40
    de8c:	f002 fc6a 	bl	10764 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    de90:	2000      	movs	r0, #0
    de92:	bd10      	pop	{r4, pc}
    de94:	40007000 	.word	0x40007000
    de98:	200002c8 	.word	0x200002c8

0000de9c <saadc_irq_handler>:
{
    de9c:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    de9e:	4b34      	ldr	r3, [pc, #208]	; (df70 <saadc_irq_handler+0xd4>)
    dea0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    dea4:	2a00      	cmp	r2, #0
    dea6:	d056      	beq.n	df56 <saadc_irq_handler+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dea8:	2200      	movs	r2, #0
    deaa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    deae:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    deb2:	4c30      	ldr	r4, [pc, #192]	; (df74 <saadc_irq_handler+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    deb4:	2101      	movs	r1, #1
    deb6:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    deb8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    debc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    debe:	4625      	mov	r5, r4
    dec0:	b3d3      	cbz	r3, df38 <saadc_irq_handler+0x9c>
		adc_sequence_callback callback = ctx->options.callback;
    dec2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
    dec6:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
		if (callback) {
    deca:	b133      	cbz	r3, deda <saadc_irq_handler+0x3e>
			action = callback(dev,
    decc:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    ded0:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    ded2:	2801      	cmp	r0, #1
    ded4:	d014      	beq.n	df00 <saadc_irq_handler+0x64>
    ded6:	2802      	cmp	r0, #2
    ded8:	d028      	beq.n	df2c <saadc_irq_handler+0x90>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    deda:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    dede:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    dee2:	429a      	cmp	r2, r3
    dee4:	d922      	bls.n	df2c <saadc_irq_handler+0x90>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    dee6:	3301      	adds	r3, #1
    dee8:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    deec:	4b20      	ldr	r3, [pc, #128]	; (df70 <saadc_irq_handler+0xd4>)
    deee:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    def2:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    def6:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    def8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    defc:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    df00:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    df04:	b923      	cbnz	r3, df10 <saadc_irq_handler+0x74>
}
    df06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
    df0a:	481a      	ldr	r0, [pc, #104]	; (df74 <saadc_irq_handler+0xd8>)
    df0c:	f7ff be32 	b.w	db74 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    df10:	f3bf 8f5b 	dmb	ish
    df14:	e855 3f00 	ldrex	r3, [r5]
    df18:	1e5a      	subs	r2, r3, #1
    df1a:	e845 2100 	strex	r1, r2, [r5]
    df1e:	2900      	cmp	r1, #0
    df20:	d1f8      	bne.n	df14 <saadc_irq_handler+0x78>
    df22:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    df26:	2b01      	cmp	r3, #1
    df28:	dced      	bgt.n	df06 <saadc_irq_handler+0x6a>
    df2a:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    df2c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    df30:	b113      	cbz	r3, df38 <saadc_irq_handler+0x9c>
	z_impl_k_timer_stop(timer);
    df32:	4811      	ldr	r0, [pc, #68]	; (df78 <saadc_irq_handler+0xdc>)
    df34:	f005 f961 	bl	131fa <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
    df38:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    df3c:	b14b      	cbz	r3, df52 <saadc_irq_handler+0xb6>
		if (ctx->signal) {
    df3e:	6f60      	ldr	r0, [r4, #116]	; 0x74
    df40:	b110      	cbz	r0, df48 <saadc_irq_handler+0xac>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    df42:	2100      	movs	r1, #0
    df44:	f003 faf4 	bl	11530 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
    df48:	480c      	ldr	r0, [pc, #48]	; (df7c <saadc_irq_handler+0xe0>)
    df4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    df4e:	f002 bc09 	b.w	10764 <z_impl_k_sem_give>
    df52:	480b      	ldr	r0, [pc, #44]	; (df80 <saadc_irq_handler+0xe4>)
    df54:	e7f9      	b.n	df4a <saadc_irq_handler+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    df56:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    df5a:	2900      	cmp	r1, #0
    df5c:	d0e5      	beq.n	df2a <saadc_irq_handler+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    df5e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    df62:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    df66:	2201      	movs	r2, #1
    df68:	609a      	str	r2, [r3, #8]
    df6a:	601a      	str	r2, [r3, #0]
    df6c:	605a      	str	r2, [r3, #4]
}
    df6e:	e7dc      	b.n	df2a <saadc_irq_handler+0x8e>
    df70:	40007000 	.word	0x40007000
    df74:	200002c8 	.word	0x200002c8
    df78:	200002d0 	.word	0x200002d0
    df7c:	20000308 	.word	0x20000308
    df80:	20000320 	.word	0x20000320

0000df84 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    df84:	b570      	push	{r4, r5, r6, lr}
    df86:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    df88:	4906      	ldr	r1, [pc, #24]	; (dfa4 <onoff_stop+0x20>)
    df8a:	1a41      	subs	r1, r0, r1
{
    df8c:	4604      	mov	r4, r0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    df8e:	1149      	asrs	r1, r1, #5
    df90:	4805      	ldr	r0, [pc, #20]	; (dfa8 <onoff_stop+0x24>)
    df92:	2240      	movs	r2, #64	; 0x40
    df94:	f004 fadc 	bl	12550 <stop>
	notify(mgr, res);
    df98:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    df9a:	4601      	mov	r1, r0
	notify(mgr, res);
    df9c:	4620      	mov	r0, r4
}
    df9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    dfa2:	4718      	bx	r3
    dfa4:	20001574 	.word	0x20001574
    dfa8:	00013408 	.word	0x00013408

0000dfac <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    dfac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dfae:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    dfb0:	490a      	ldr	r1, [pc, #40]	; (dfdc <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    dfb2:	4a0b      	ldr	r2, [pc, #44]	; (dfe0 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    dfb4:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    dfb6:	2340      	movs	r3, #64	; 0x40
    dfb8:	9300      	str	r3, [sp, #0]
    dfba:	1149      	asrs	r1, r1, #5
{
    dfbc:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    dfbe:	4623      	mov	r3, r4
    dfc0:	4808      	ldr	r0, [pc, #32]	; (dfe4 <onoff_start+0x38>)
    dfc2:	f004 faf2 	bl	125aa <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    dfc6:	1e01      	subs	r1, r0, #0
    dfc8:	da05      	bge.n	dfd6 <onoff_start+0x2a>
		notify(mgr, err);
    dfca:	4628      	mov	r0, r5
    dfcc:	4623      	mov	r3, r4
	}
}
    dfce:	b003      	add	sp, #12
    dfd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    dfd4:	4718      	bx	r3
}
    dfd6:	b003      	add	sp, #12
    dfd8:	bd30      	pop	{r4, r5, pc}
    dfda:	bf00      	nop
    dfdc:	20001574 	.word	0x20001574
    dfe0:	00012617 	.word	0x00012617
    dfe4:	00013408 	.word	0x00013408

0000dfe8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    dfe8:	2200      	movs	r2, #0
{
    dfea:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    dfec:	2101      	movs	r1, #1
{
    dfee:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    dff0:	4610      	mov	r0, r2
    dff2:	f7fe fbb5 	bl	c760 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    dff6:	480f      	ldr	r0, [pc, #60]	; (e034 <clk_init+0x4c>)
    dff8:	f001 fb4a 	bl	f690 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    dffc:	4b0e      	ldr	r3, [pc, #56]	; (e038 <clk_init+0x50>)
    dffe:	4298      	cmp	r0, r3
    e000:	d115      	bne.n	e02e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    e002:	f004 fd74 	bl	12aee <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    e006:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    e008:	490c      	ldr	r1, [pc, #48]	; (e03c <clk_init+0x54>)
    e00a:	4630      	mov	r0, r6
    e00c:	f004 f8b8 	bl	12180 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    e010:	2800      	cmp	r0, #0
    e012:	db0b      	blt.n	e02c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    e014:	2501      	movs	r5, #1
    e016:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
    e018:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    e01a:	4908      	ldr	r1, [pc, #32]	; (e03c <clk_init+0x54>)
    e01c:	f104 0020 	add.w	r0, r4, #32
    e020:	f004 f8ae 	bl	12180 <onoff_manager_init>
		if (err < 0) {
    e024:	2800      	cmp	r0, #0
    e026:	db01      	blt.n	e02c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    e028:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    e02a:	2000      	movs	r0, #0
}
    e02c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    e02e:	f06f 0004 	mvn.w	r0, #4
    e032:	e7fb      	b.n	e02c <clk_init+0x44>
    e034:	0000e075 	.word	0x0000e075
    e038:	0bad0000 	.word	0x0bad0000
    e03c:	000136c4 	.word	0x000136c4

0000e040 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    e040:	b570      	push	{r4, r5, r6, lr}
    e042:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    e044:	230c      	movs	r3, #12
    e046:	4809      	ldr	r0, [pc, #36]	; (e06c <clkstarted_handle.constprop.0+0x2c>)
    e048:	434b      	muls	r3, r1
    e04a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    e04c:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    e050:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    e052:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    e054:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    e056:	4418      	add	r0, r3
    e058:	f004 fa67 	bl	1252a <set_on_state>
	if (callback) {
    e05c:	b12d      	cbz	r5, e06a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    e05e:	4632      	mov	r2, r6
    e060:	462b      	mov	r3, r5
    e062:	4803      	ldr	r0, [pc, #12]	; (e070 <clkstarted_handle.constprop.0+0x30>)
}
    e064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    e068:	4718      	bx	r3
}
    e06a:	bd70      	pop	{r4, r5, r6, pc}
    e06c:	20001574 	.word	0x20001574
    e070:	00013408 	.word	0x00013408

0000e074 <clock_event_handler>:
	switch (event) {
    e074:	b110      	cbz	r0, e07c <clock_event_handler+0x8>
    e076:	2801      	cmp	r0, #1
    e078:	d004      	beq.n	e084 <clock_event_handler+0x10>
    e07a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    e07c:	4b03      	ldr	r3, [pc, #12]	; (e08c <clock_event_handler+0x18>)
    e07e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e080:	075b      	lsls	r3, r3, #29
    e082:	d101      	bne.n	e088 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    e084:	f7ff bfdc 	b.w	e040 <clkstarted_handle.constprop.0>
}
    e088:	4770      	bx	lr
    e08a:	bf00      	nop
    e08c:	20001574 	.word	0x20001574

0000e090 <generic_hfclk_start>:
{
    e090:	b508      	push	{r3, lr}
	__asm__ volatile(
    e092:	f04f 0340 	mov.w	r3, #64	; 0x40
    e096:	f3ef 8111 	mrs	r1, BASEPRI
    e09a:	f383 8812 	msr	BASEPRI_MAX, r3
    e09e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    e0a2:	4a12      	ldr	r2, [pc, #72]	; (e0ec <generic_hfclk_start+0x5c>)
    e0a4:	6813      	ldr	r3, [r2, #0]
    e0a6:	f043 0002 	orr.w	r0, r3, #2
    e0aa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    e0ac:	07da      	lsls	r2, r3, #31
    e0ae:	d408      	bmi.n	e0c2 <generic_hfclk_start+0x32>
	__asm__ volatile(
    e0b0:	f381 8811 	msr	BASEPRI, r1
    e0b4:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    e0b8:	2001      	movs	r0, #1
}
    e0ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e0be:	f001 bad7 	b.w	f670 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    e0c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e0c6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    e0ca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    e0ce:	07d3      	lsls	r3, r2, #31
    e0d0:	d5ee      	bpl.n	e0b0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    e0d2:	4807      	ldr	r0, [pc, #28]	; (e0f0 <generic_hfclk_start+0x60>)
    e0d4:	f004 fa29 	bl	1252a <set_on_state>
    e0d8:	f381 8811 	msr	BASEPRI, r1
    e0dc:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    e0e0:	2000      	movs	r0, #0
}
    e0e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    e0e6:	f7ff bfab 	b.w	e040 <clkstarted_handle.constprop.0>
    e0ea:	bf00      	nop
    e0ec:	200015cc 	.word	0x200015cc
    e0f0:	200015bc 	.word	0x200015bc

0000e0f4 <api_blocking_start>:
{
    e0f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    e0f6:	2200      	movs	r2, #0
    e0f8:	2301      	movs	r3, #1
    e0fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    e0fe:	ab04      	add	r3, sp, #16
    e100:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    e104:	4a09      	ldr	r2, [pc, #36]	; (e12c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    e106:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    e10a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    e10c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    e110:	f004 fa7a 	bl	12608 <api_start>
	if (err < 0) {
    e114:	2800      	cmp	r0, #0
    e116:	db05      	blt.n	e124 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    e118:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    e11c:	2300      	movs	r3, #0
    e11e:	4668      	mov	r0, sp
    e120:	f002 fb46 	bl	107b0 <z_impl_k_sem_take>
}
    e124:	b007      	add	sp, #28
    e126:	f85d fb04 	ldr.w	pc, [sp], #4
    e12a:	bf00      	nop
    e12c:	0001262f 	.word	0x0001262f

0000e130 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e130:	4b09      	ldr	r3, [pc, #36]	; (e158 <generic_hfclk_stop+0x28>)
    e132:	f3bf 8f5b 	dmb	ish
    e136:	e853 2f00 	ldrex	r2, [r3]
    e13a:	f022 0102 	bic.w	r1, r2, #2
    e13e:	e843 1000 	strex	r0, r1, [r3]
    e142:	2800      	cmp	r0, #0
    e144:	d1f7      	bne.n	e136 <generic_hfclk_stop+0x6>
    e146:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    e14a:	07d3      	lsls	r3, r2, #31
    e14c:	d402      	bmi.n	e154 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    e14e:	2001      	movs	r0, #1
    e150:	f004 bcc8 	b.w	12ae4 <nrfx_clock_stop>
}
    e154:	4770      	bx	lr
    e156:	bf00      	nop
    e158:	200015cc 	.word	0x200015cc

0000e15c <z_nrf_clock_control_lf_on>:
{
    e15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e15e:	4928      	ldr	r1, [pc, #160]	; (e200 <z_nrf_clock_control_lf_on+0xa4>)
    e160:	f3bf 8f5b 	dmb	ish
    e164:	4606      	mov	r6, r0
    e166:	2201      	movs	r2, #1
    e168:	e851 3f00 	ldrex	r3, [r1]
    e16c:	e841 2000 	strex	r0, r2, [r1]
    e170:	2800      	cmp	r0, #0
    e172:	d1f9      	bne.n	e168 <z_nrf_clock_control_lf_on+0xc>
    e174:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    e178:	b933      	cbnz	r3, e188 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    e17a:	4922      	ldr	r1, [pc, #136]	; (e204 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
    e17c:	4822      	ldr	r0, [pc, #136]	; (e208 <z_nrf_clock_control_lf_on+0xac>)
    e17e:	604b      	str	r3, [r1, #4]
    e180:	60cb      	str	r3, [r1, #12]
    e182:	608a      	str	r2, [r1, #8]
    e184:	f004 f80f 	bl	121a6 <onoff_request>
	switch (start_mode) {
    e188:	1e73      	subs	r3, r6, #1
    e18a:	2b01      	cmp	r3, #1
    e18c:	d81d      	bhi.n	e1ca <z_nrf_clock_control_lf_on+0x6e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    e18e:	f004 fd92 	bl	12cb6 <k_is_in_isr>
    e192:	4604      	mov	r4, r0
    e194:	b9d0      	cbnz	r0, e1cc <z_nrf_clock_control_lf_on+0x70>
	return !z_sys_post_kernel;
    e196:	4b1d      	ldr	r3, [pc, #116]	; (e20c <z_nrf_clock_control_lf_on+0xb0>)
    e198:	781b      	ldrb	r3, [r3, #0]
    e19a:	b1bb      	cbz	r3, e1cc <z_nrf_clock_control_lf_on+0x70>
    p_reg->INTENCLR = mask;
    e19c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e1a0:	2202      	movs	r2, #2
    e1a2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    e1a6:	4605      	mov	r5, r0
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    e1a8:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    e1ac:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    e1b0:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    e1b4:	03d2      	lsls	r2, r2, #15
    e1b6:	d513      	bpl.n	e1e0 <z_nrf_clock_control_lf_on+0x84>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    e1b8:	079b      	lsls	r3, r3, #30
    e1ba:	d001      	beq.n	e1c0 <z_nrf_clock_control_lf_on+0x64>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    e1bc:	2e01      	cmp	r6, #1
    e1be:	d10f      	bne.n	e1e0 <z_nrf_clock_control_lf_on+0x84>
	if (isr_mode) {
    e1c0:	b1c4      	cbz	r4, e1f4 <z_nrf_clock_control_lf_on+0x98>
    e1c2:	f385 8811 	msr	BASEPRI, r5
    e1c6:	f3bf 8f6f 	isb	sy
}
    e1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    e1cc:	f04f 0340 	mov.w	r3, #64	; 0x40
    e1d0:	f3ef 8511 	mrs	r5, BASEPRI
    e1d4:	f383 8812 	msr	BASEPRI_MAX, r3
    e1d8:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    e1dc:	2401      	movs	r4, #1
    e1de:	e7e3      	b.n	e1a8 <z_nrf_clock_control_lf_on+0x4c>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    e1e0:	b11c      	cbz	r4, e1ea <z_nrf_clock_control_lf_on+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    e1e2:	4628      	mov	r0, r5
    e1e4:	f7fe fa82 	bl	c6ec <arch_cpu_atomic_idle>
}
    e1e8:	e7e0      	b.n	e1ac <z_nrf_clock_control_lf_on+0x50>
	return z_impl_k_sleep(timeout);
    e1ea:	2100      	movs	r1, #0
    e1ec:	2021      	movs	r0, #33	; 0x21
    e1ee:	f002 fefd 	bl	10fec <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    e1f2:	e7db      	b.n	e1ac <z_nrf_clock_control_lf_on+0x50>
    p_reg->INTENSET = mask;
    e1f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e1f8:	2202      	movs	r2, #2
    e1fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    e1fe:	e7e4      	b.n	e1ca <z_nrf_clock_control_lf_on+0x6e>
    e200:	20001570 	.word	0x20001570
    e204:	20001560 	.word	0x20001560
    e208:	20001594 	.word	0x20001594
    e20c:	20001b8e 	.word	0x20001b8e

0000e210 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    e210:	b530      	push	{r4, r5, lr}
	return port->config;
    e212:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    e214:	7b05      	ldrb	r5, [r0, #12]
    e216:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    e21a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    e21e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    e220:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    e224:	d105      	bne.n	e232 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    e226:	4620      	mov	r0, r4
    e228:	f001 fd5c 	bl	fce4 <nrfx_gpiote_trigger_disable>

		return 0;
    e22c:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    e22e:	b005      	add	sp, #20
    e230:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    e232:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    e234:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    e238:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    e23c:	d114      	bne.n	e268 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    e23e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    e242:	bf0c      	ite	eq
    e244:	2304      	moveq	r3, #4
    e246:	2305      	movne	r3, #5
    e248:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    e24c:	2300      	movs	r3, #0
    e24e:	4619      	mov	r1, r3
    e250:	aa02      	add	r2, sp, #8
    e252:	4620      	mov	r0, r4
    e254:	f001 fb7c 	bl	f950 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    e258:	4b1d      	ldr	r3, [pc, #116]	; (e2d0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    e25a:	4298      	cmp	r0, r3
    e25c:	d135      	bne.n	e2ca <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    e25e:	2101      	movs	r1, #1
    e260:	4620      	mov	r0, r4
    e262:	f001 fcfb 	bl	fc5c <nrfx_gpiote_trigger_enable>
	return 0;
    e266:	e7e1      	b.n	e22c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    e268:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    e26c:	d022      	beq.n	e2b4 <gpio_nrfx_pin_interrupt_configure+0xa4>
    e26e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    e272:	bf14      	ite	ne
    e274:	2301      	movne	r3, #1
    e276:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    e278:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    e27c:	6883      	ldr	r3, [r0, #8]
    e27e:	40cb      	lsrs	r3, r1
    e280:	07d9      	lsls	r1, r3, #31
    e282:	d4e3      	bmi.n	e24c <gpio_nrfx_pin_interrupt_configure+0x3c>
    e284:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    e288:	d1e0      	bne.n	e24c <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    e28a:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    e28e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    e292:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    e296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    e29a:	07db      	lsls	r3, r3, #31
    e29c:	d4d6      	bmi.n	e24c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    e29e:	f10d 0507 	add.w	r5, sp, #7
    e2a2:	4629      	mov	r1, r5
    e2a4:	4620      	mov	r0, r4
    e2a6:	f001 fc85 	bl	fbb4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    e2aa:	4b0a      	ldr	r3, [pc, #40]	; (e2d4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    e2ac:	4298      	cmp	r0, r3
    e2ae:	d003      	beq.n	e2b8 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    e2b0:	9503      	str	r5, [sp, #12]
    e2b2:	e7cb      	b.n	e24c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    e2b4:	2303      	movs	r3, #3
    e2b6:	e7df      	b.n	e278 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    e2b8:	4628      	mov	r0, r5
    e2ba:	f001 fcc9 	bl	fc50 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    e2be:	4b04      	ldr	r3, [pc, #16]	; (e2d0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    e2c0:	4298      	cmp	r0, r3
    e2c2:	d0f5      	beq.n	e2b0 <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
    e2c4:	f06f 000b 	mvn.w	r0, #11
    e2c8:	e7b1      	b.n	e22e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    e2ca:	f06f 0015 	mvn.w	r0, #21
    e2ce:	e7ae      	b.n	e22e <gpio_nrfx_pin_interrupt_configure+0x1e>
    e2d0:	0bad0000 	.word	0x0bad0000
    e2d4:	0bad0004 	.word	0x0bad0004

0000e2d8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    e2d8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    e2da:	f001 fca9 	bl	fc30 <nrfx_gpiote_is_init>
    e2de:	4604      	mov	r4, r0
    e2e0:	b968      	cbnz	r0, e2fe <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    e2e2:	f001 fc7d 	bl	fbe0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    e2e6:	4b08      	ldr	r3, [pc, #32]	; (e308 <gpio_nrfx_init+0x30>)
    e2e8:	4298      	cmp	r0, r3
    e2ea:	d10a      	bne.n	e302 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    e2ec:	4807      	ldr	r0, [pc, #28]	; (e30c <gpio_nrfx_init+0x34>)
    e2ee:	4621      	mov	r1, r4
    e2f0:	f001 fc5a 	bl	fba8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    e2f4:	4622      	mov	r2, r4
    e2f6:	2105      	movs	r1, #5
    e2f8:	2006      	movs	r0, #6
    e2fa:	f7fe fa31 	bl	c760 <z_arm_irq_priority_set>
		return 0;
    e2fe:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    e300:	bd10      	pop	{r4, pc}
		return -EIO;
    e302:	f06f 0004 	mvn.w	r0, #4
    e306:	e7fb      	b.n	e300 <gpio_nrfx_init+0x28>
    e308:	0bad0000 	.word	0x0bad0000
    e30c:	0000e311 	.word	0x0000e311

0000e310 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    e310:	0943      	lsrs	r3, r0, #5
{
    e312:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    e314:	d107      	bne.n	e326 <nrfx_gpio_handler+0x16>
    e316:	4b0b      	ldr	r3, [pc, #44]	; (e344 <nrfx_gpio_handler+0x34>)
    e318:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    e31a:	b121      	cbz	r1, e326 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    e31c:	2501      	movs	r5, #1
	return node->next;
    e31e:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    e320:	4e09      	ldr	r6, [pc, #36]	; (e348 <nrfx_gpio_handler+0x38>)
    e322:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    e324:	b901      	cbnz	r1, e328 <nrfx_gpio_handler+0x18>
}
    e326:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    e328:	688a      	ldr	r2, [r1, #8]
    e32a:	402a      	ands	r2, r5
    e32c:	d002      	beq.n	e334 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    e32e:	684b      	ldr	r3, [r1, #4]
    e330:	4630      	mov	r0, r6
    e332:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    e334:	b11c      	cbz	r4, e33e <nrfx_gpio_handler+0x2e>
    e336:	6823      	ldr	r3, [r4, #0]
    e338:	4621      	mov	r1, r4
    e33a:	461c      	mov	r4, r3
    e33c:	e7f2      	b.n	e324 <nrfx_gpio_handler+0x14>
    e33e:	4623      	mov	r3, r4
    e340:	e7fa      	b.n	e338 <nrfx_gpio_handler+0x28>
    e342:	bf00      	nop
    e344:	200015d0 	.word	0x200015d0
    e348:	00013420 	.word	0x00013420

0000e34c <gpio_nrfx_pin_configure>:
{
    e34c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    e350:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    e352:	7b3b      	ldrb	r3, [r7, #12]
    e354:	f001 051f 	and.w	r5, r1, #31
    e358:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    e35c:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    e35e:	4628      	mov	r0, r5
    e360:	f10d 0103 	add.w	r1, sp, #3
{
    e364:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    e366:	f001 fc25 	bl	fbb4 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    e36a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    e36e:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    e370:	d10b      	bne.n	e38a <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    e372:	4628      	mov	r0, r5
    e374:	f001 fcde 	bl	fd34 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    e378:	4b3d      	ldr	r3, [pc, #244]	; (e470 <gpio_nrfx_pin_configure+0x124>)
    e37a:	4598      	cmp	r8, r3
    e37c:	d103      	bne.n	e386 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    e37e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    e382:	f001 fc5f 	bl	fc44 <nrfx_gpiote_channel_free>
		return 0;
    e386:	2000      	movs	r0, #0
    e388:	e00c      	b.n	e3a4 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    e38a:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    e38c:	4619      	mov	r1, r3
    e38e:	aa02      	add	r2, sp, #8
    e390:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    e392:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    e396:	f001 fadb 	bl	f950 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    e39a:	4b35      	ldr	r3, [pc, #212]	; (e470 <gpio_nrfx_pin_configure+0x124>)
    e39c:	4298      	cmp	r0, r3
    e39e:	d004      	beq.n	e3aa <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    e3a0:	f06f 0015 	mvn.w	r0, #21
}
    e3a4:	b004      	add	sp, #16
    e3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    e3aa:	4580      	cmp	r8, r0
    e3ac:	d103      	bne.n	e3b6 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    e3ae:	f89d 0003 	ldrb.w	r0, [sp, #3]
    e3b2:	f001 fc47 	bl	fc44 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    e3b6:	03a3      	lsls	r3, r4, #14
    e3b8:	d54b      	bpl.n	e452 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    e3ba:	f240 3306 	movw	r3, #774	; 0x306
    e3be:	4023      	ands	r3, r4
    e3c0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    e3c4:	d019      	beq.n	e3fa <gpio_nrfx_pin_configure+0xae>
    e3c6:	d80c      	bhi.n	e3e2 <gpio_nrfx_pin_configure+0x96>
    e3c8:	2b06      	cmp	r3, #6
    e3ca:	d017      	beq.n	e3fc <gpio_nrfx_pin_configure+0xb0>
    e3cc:	d804      	bhi.n	e3d8 <gpio_nrfx_pin_configure+0x8c>
    e3ce:	b1ab      	cbz	r3, e3fc <gpio_nrfx_pin_configure+0xb0>
    e3d0:	2b02      	cmp	r3, #2
    e3d2:	d1e5      	bne.n	e3a0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    e3d4:	2304      	movs	r3, #4
    e3d6:	e011      	b.n	e3fc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    e3d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    e3dc:	d1e0      	bne.n	e3a0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    e3de:	2301      	movs	r3, #1
    e3e0:	e00c      	b.n	e3fc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    e3e2:	f240 2202 	movw	r2, #514	; 0x202
    e3e6:	4293      	cmp	r3, r2
    e3e8:	d027      	beq.n	e43a <gpio_nrfx_pin_configure+0xee>
    e3ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    e3ee:	d026      	beq.n	e43e <gpio_nrfx_pin_configure+0xf2>
    e3f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    e3f4:	d1d4      	bne.n	e3a0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    e3f6:	2302      	movs	r3, #2
    e3f8:	e000      	b.n	e3fc <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    e3fa:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    e3fc:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    e400:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    e404:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    e408:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    e40a:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    e40e:	bf54      	ite	pl
    e410:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    e414:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    e416:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    e418:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    e41c:	d511      	bpl.n	e442 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    e41e:	687a      	ldr	r2, [r7, #4]
    e420:	2301      	movs	r3, #1
    e422:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    e424:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    e428:	2200      	movs	r2, #0
    e42a:	a901      	add	r1, sp, #4
    e42c:	4628      	mov	r0, r5
    e42e:	f001 fb3d 	bl	faac <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    e432:	4b0f      	ldr	r3, [pc, #60]	; (e470 <gpio_nrfx_pin_configure+0x124>)
    e434:	4298      	cmp	r0, r3
    e436:	d0a6      	beq.n	e386 <gpio_nrfx_pin_configure+0x3a>
    e438:	e7b2      	b.n	e3a0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    e43a:	2305      	movs	r3, #5
    e43c:	e7de      	b.n	e3fc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    e43e:	2303      	movs	r3, #3
    e440:	e7dc      	b.n	e3fc <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    e442:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    e444:	bf41      	itttt	mi
    e446:	2301      	movmi	r3, #1
    e448:	687a      	ldrmi	r2, [r7, #4]
    e44a:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    e44c:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    e450:	e7ea      	b.n	e428 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    e452:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    e454:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    e458:	bf54      	ite	pl
    e45a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    e45e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    e460:	461a      	mov	r2, r3
    e462:	a901      	add	r1, sp, #4
    e464:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    e466:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    e46a:	f001 fa71 	bl	f950 <nrfx_gpiote_input_configure>
    e46e:	e7e0      	b.n	e432 <gpio_nrfx_pin_configure+0xe6>
    e470:	0bad0000 	.word	0x0bad0000

0000e474 <transfer_next_chunk>:
	return 0;
}
#endif

static void transfer_next_chunk(const struct device *dev)
{
    e474:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    e476:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    e478:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    e47a:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
    e47c:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
    e47e:	b98d      	cbnz	r5, e4a4 <transfer_next_chunk+0x30>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    e480:	2b00      	cmp	r3, #0
    e482:	d137      	bne.n	e4f4 <transfer_next_chunk+0x80>
	int error = 0;
    e484:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
    e486:	2200      	movs	r2, #0
    e488:	4611      	mov	r1, r2
    e48a:	4620      	mov	r0, r4
    e48c:	f004 f953 	bl	12736 <_spi_context_cs_control>
	ctx->sync_status = status;
    e490:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
    e492:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e496:	f002 f965 	bl	10764 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, dev, error);
	dev_data->busy = false;
    e49a:	2300      	movs	r3, #0
    e49c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
    e4a0:	b004      	add	sp, #16
    e4a2:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
    e4a4:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
    e4a6:	bb0b      	cbnz	r3, e4ec <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
    e4a8:	bb39      	cbnz	r1, e4fa <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
    e4aa:	f643 72ff 	movw	r2, #16383	; 0x3fff
    e4ae:	42aa      	cmp	r2, r5
    e4b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
		xfer.p_tx_buffer = tx_buf;
    e4b2:	9100      	str	r1, [sp, #0]
		if (chunk_len > MAX_CHUNK_LEN) {
    e4b4:	bf28      	it	cs
    e4b6:	462a      	movcs	r2, r5
		dev_data->chunk_len = chunk_len;
    e4b8:	66a2      	str	r2, [r4, #104]	; 0x68
    e4ba:	b11b      	cbz	r3, e4c4 <transfer_next_chunk+0x50>
    e4bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    e4be:	2b00      	cmp	r3, #0
    e4c0:	bf18      	it	ne
    e4c2:	4613      	movne	r3, r2
    e4c4:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    e4c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    e4c8:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    e4ca:	b11b      	cbz	r3, e4d4 <transfer_next_chunk+0x60>
    e4cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    e4ce:	2b00      	cmp	r3, #0
    e4d0:	bf18      	it	ne
    e4d2:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    e4d4:	2200      	movs	r2, #0
    e4d6:	4669      	mov	r1, sp
    e4d8:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    e4da:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    e4dc:	f001 fdec 	bl	100b8 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    e4e0:	4b0d      	ldr	r3, [pc, #52]	; (e518 <transfer_next_chunk+0xa4>)
    e4e2:	4298      	cmp	r0, r3
    e4e4:	d0dc      	beq.n	e4a0 <transfer_next_chunk+0x2c>
			error = -EIO;
    e4e6:	f06f 0504 	mvn.w	r5, #4
    e4ea:	e7cc      	b.n	e486 <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    e4ec:	429d      	cmp	r5, r3
    e4ee:	bf28      	it	cs
    e4f0:	461d      	movcs	r5, r3
    e4f2:	e7d9      	b.n	e4a8 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
    e4f4:	6d61      	ldr	r1, [r4, #84]	; 0x54
    e4f6:	461d      	mov	r5, r3
    e4f8:	e7d7      	b.n	e4aa <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    e4fa:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    e4fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    e502:	d0d2      	beq.n	e4aa <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
    e504:	2d08      	cmp	r5, #8
    e506:	bf28      	it	cs
    e508:	2508      	movcs	r5, #8
    e50a:	6f20      	ldr	r0, [r4, #112]	; 0x70
    e50c:	462a      	mov	r2, r5
    e50e:	f004 ff15 	bl	1333c <memcpy>
			tx_buf = dev_data->buffer;
    e512:	6f21      	ldr	r1, [r4, #112]	; 0x70
    e514:	e7c9      	b.n	e4aa <transfer_next_chunk+0x36>
    e516:	bf00      	nop
    e518:	0bad0000 	.word	0x0bad0000

0000e51c <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
    e51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e520:	4698      	mov	r8, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    e522:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    e524:	6904      	ldr	r4, [r0, #16]
{
    e526:	4607      	mov	r7, r0
    e528:	0498      	lsls	r0, r3, #18
    e52a:	b08b      	sub	sp, #44	; 0x2c
    e52c:	460d      	mov	r5, r1
    e52e:	4691      	mov	r9, r2
    e530:	f100 80cf 	bmi.w	e6d2 <spi_nrfx_transceive+0x1b6>
	return z_impl_k_sem_take(sem, timeout);
    e534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e53c:	f104 0010 	add.w	r0, r4, #16
    e540:	f002 f936 	bl	107b0 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    e544:	6065      	str	r5, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
    e546:	f8d7 b004 	ldr.w	fp, [r7, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    e54a:	f8d7 a010 	ldr.w	sl, [r7, #16]
	uint32_t max_freq = dev_config->max_freq;
    e54e:	f8db 3008 	ldr.w	r3, [fp, #8]
    e552:	9303      	str	r3, [sp, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    e554:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
    e558:	9301      	str	r3, [sp, #4]
    e55a:	b11b      	cbz	r3, e564 <spi_nrfx_transceive+0x48>
    e55c:	f8da 3000 	ldr.w	r3, [sl]
    e560:	429d      	cmp	r5, r3
    e562:	d065      	beq.n	e630 <spi_nrfx_transceive+0x114>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    e564:	88ae      	ldrh	r6, [r5, #4]
    e566:	0531      	lsls	r1, r6, #20
    e568:	f100 80e2 	bmi.w	e730 <spi_nrfx_transceive+0x214>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    e56c:	f016 0f09 	tst.w	r6, #9
    e570:	f040 80db 	bne.w	e72a <spi_nrfx_transceive+0x20e>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    e574:	f3c6 1345 	ubfx	r3, r6, #5, #6
    e578:	2b08      	cmp	r3, #8
    e57a:	f040 80d6 	bne.w	e72a <spi_nrfx_transceive+0x20e>
	if (spi_cfg->frequency < 125000) {
    e57e:	682b      	ldr	r3, [r5, #0]
    e580:	9302      	str	r3, [sp, #8]
    e582:	9a02      	ldr	r2, [sp, #8]
    e584:	4b76      	ldr	r3, [pc, #472]	; (e760 <spi_nrfx_transceive+0x244>)
    e586:	429a      	cmp	r2, r3
    e588:	f240 80cf 	bls.w	e72a <spi_nrfx_transceive+0x20e>
	config = dev_config->def_config;
    e58c:	f10b 0e0c 	add.w	lr, fp, #12
    e590:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    e594:	f10d 0c14 	add.w	ip, sp, #20
    e598:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    e59c:	f8de 3000 	ldr.w	r3, [lr]
    e5a0:	f8cc 3000 	str.w	r3, [ip]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    e5a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    e5a8:	4293      	cmp	r3, r2
    e5aa:	bf28      	it	cs
    e5ac:	4613      	movcs	r3, r2
	if (frequency < 250000) {
    e5ae:	4a6d      	ldr	r2, [pc, #436]	; (e764 <spi_nrfx_transceive+0x248>)
    e5b0:	4293      	cmp	r3, r2
    e5b2:	f240 8097 	bls.w	e6e4 <spi_nrfx_transceive+0x1c8>
	} else if (frequency < 500000) {
    e5b6:	4a6c      	ldr	r2, [pc, #432]	; (e768 <spi_nrfx_transceive+0x24c>)
    e5b8:	4293      	cmp	r3, r2
    e5ba:	f240 8096 	bls.w	e6ea <spi_nrfx_transceive+0x1ce>
	} else if (frequency < 1000000) {
    e5be:	4a6b      	ldr	r2, [pc, #428]	; (e76c <spi_nrfx_transceive+0x250>)
    e5c0:	4293      	cmp	r3, r2
    e5c2:	f240 8095 	bls.w	e6f0 <spi_nrfx_transceive+0x1d4>
	} else if (frequency < 2000000) {
    e5c6:	4a6a      	ldr	r2, [pc, #424]	; (e770 <spi_nrfx_transceive+0x254>)
    e5c8:	4293      	cmp	r3, r2
    e5ca:	f240 8094 	bls.w	e6f6 <spi_nrfx_transceive+0x1da>
	} else if (frequency < 4000000) {
    e5ce:	4a69      	ldr	r2, [pc, #420]	; (e774 <spi_nrfx_transceive+0x258>)
    e5d0:	4293      	cmp	r3, r2
    e5d2:	f240 8093 	bls.w	e6fc <spi_nrfx_transceive+0x1e0>
		return NRF_SPIM_FREQ_4M;
    e5d6:	4a68      	ldr	r2, [pc, #416]	; (e778 <spi_nrfx_transceive+0x25c>)
    e5d8:	4293      	cmp	r3, r2
    e5da:	bf2c      	ite	cs
    e5dc:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
    e5e0:	f04f 4380 	movcc.w	r3, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    e5e4:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    e5e6:	9307      	str	r3, [sp, #28]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    e5e8:	f006 0304 	and.w	r3, r6, #4
    e5ec:	f140 8089 	bpl.w	e702 <spi_nrfx_transceive+0x1e6>
			return NRF_SPIM_MODE_2;
    e5f0:	2b00      	cmp	r3, #0
    e5f2:	bf14      	ite	ne
    e5f4:	2303      	movne	r3, #3
    e5f6:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    e5f8:	f88d 3020 	strb.w	r3, [sp, #32]
	if (dev_data->initialized) {
    e5fc:	9b01      	ldr	r3, [sp, #4]
	if (operation & SPI_TRANSFER_LSB) {
    e5fe:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    e602:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
	if (dev_data->initialized) {
    e606:	b12b      	cbz	r3, e614 <spi_nrfx_transceive+0xf8>
		nrfx_spim_uninit(&dev_config->spim);
    e608:	4658      	mov	r0, fp
    e60a:	f001 fd0d 	bl	10028 <nrfx_spim_uninit>
		dev_data->initialized = false;
    e60e:	2300      	movs	r3, #0
    e610:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
    e614:	4653      	mov	r3, sl
    e616:	4a59      	ldr	r2, [pc, #356]	; (e77c <spi_nrfx_transceive+0x260>)
    e618:	a905      	add	r1, sp, #20
    e61a:	4658      	mov	r0, fp
    e61c:	f001 fc56 	bl	fecc <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    e620:	4b57      	ldr	r3, [pc, #348]	; (e780 <spi_nrfx_transceive+0x264>)
    e622:	4298      	cmp	r0, r3
    e624:	d171      	bne.n	e70a <spi_nrfx_transceive+0x1ee>
	dev_data->initialized = true;
    e626:	2301      	movs	r3, #1
    e628:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	ctx->config = spi_cfg;
    e62c:	f8ca 5000 	str.w	r5, [sl]
		dev_data->busy = true;
    e630:	2301      	movs	r3, #1
    e632:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    e636:	f1b9 0f00 	cmp.w	r9, #0
    e63a:	d17c      	bne.n	e736 <spi_nrfx_transceive+0x21a>
    e63c:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    e640:	2300      	movs	r3, #0
    e642:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    e644:	f104 0258 	add.w	r2, r4, #88	; 0x58
    e648:	f104 0148 	add.w	r1, r4, #72	; 0x48
    e64c:	f104 0044 	add.w	r0, r4, #68	; 0x44
    e650:	f004 f84a 	bl	126e8 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    e654:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    e656:	f1b8 0f00 	cmp.w	r8, #0
    e65a:	d175      	bne.n	e748 <spi_nrfx_transceive+0x22c>
    e65c:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    e660:	2300      	movs	r3, #0
    e662:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    e664:	f104 0260 	add.w	r2, r4, #96	; 0x60
    e668:	f104 0150 	add.w	r1, r4, #80	; 0x50
    e66c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    e670:	f004 f83a 	bl	126e8 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    e674:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
    e676:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
    e678:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
    e67a:	2101      	movs	r1, #1
    e67c:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    e67e:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
    e680:	f004 f859 	bl	12736 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    e684:	4638      	mov	r0, r7
    e686:	f7ff fef5 	bl	e474 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    e68a:	6e25      	ldr	r5, [r4, #96]	; 0x60
    e68c:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
    e68e:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    e690:	429d      	cmp	r5, r3
    e692:	bf38      	it	cc
    e694:	461d      	movcc	r5, r3
    e696:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    e69a:	435d      	muls	r5, r3
			     ctx->config->frequency;
    e69c:	f857 3b28 	ldr.w	r3, [r7], #40
    e6a0:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    e6a4:	681b      	ldr	r3, [r3, #0]
    e6a6:	fbb5 f5f3 	udiv	r5, r5, r3
    e6aa:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    e6ac:	35c8      	adds	r5, #200	; 0xc8
    e6ae:	f240 30e7 	movw	r0, #999	; 0x3e7
    e6b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e6b6:	2300      	movs	r3, #0
    e6b8:	fbe5 010c 	umlal	r0, r1, r5, ip
    e6bc:	f7f2 f9f6 	bl	aac <__aeabi_uldivmod>
    e6c0:	4602      	mov	r2, r0
    e6c2:	460b      	mov	r3, r1
    e6c4:	4638      	mov	r0, r7
    e6c6:	f002 f873 	bl	107b0 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    e6ca:	2800      	cmp	r0, #0
    e6cc:	d144      	bne.n	e758 <spi_nrfx_transceive+0x23c>
	status = ctx->sync_status;
    e6ce:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
    e6d0:	e01d      	b.n	e70e <spi_nrfx_transceive+0x1f2>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    e6d2:	69a3      	ldr	r3, [r4, #24]
    e6d4:	2b00      	cmp	r3, #0
    e6d6:	f47f af2d 	bne.w	e534 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
    e6da:	6863      	ldr	r3, [r4, #4]
    e6dc:	4299      	cmp	r1, r3
    e6de:	f47f af29 	bne.w	e534 <spi_nrfx_transceive+0x18>
    e6e2:	e730      	b.n	e546 <spi_nrfx_transceive+0x2a>
		return NRF_SPIM_FREQ_125K;
    e6e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    e6e8:	e77c      	b.n	e5e4 <spi_nrfx_transceive+0xc8>
		return NRF_SPIM_FREQ_250K;
    e6ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    e6ee:	e779      	b.n	e5e4 <spi_nrfx_transceive+0xc8>
		return NRF_SPIM_FREQ_500K;
    e6f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    e6f4:	e776      	b.n	e5e4 <spi_nrfx_transceive+0xc8>
		return NRF_SPIM_FREQ_1M;
    e6f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e6fa:	e773      	b.n	e5e4 <spi_nrfx_transceive+0xc8>
		return NRF_SPIM_FREQ_2M;
    e6fc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    e700:	e770      	b.n	e5e4 <spi_nrfx_transceive+0xc8>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    e702:	3b00      	subs	r3, #0
    e704:	bf18      	it	ne
    e706:	2301      	movne	r3, #1
    e708:	e776      	b.n	e5f8 <spi_nrfx_transceive+0xdc>
		return -EIO;
    e70a:	f06f 0504 	mvn.w	r5, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    e70e:	6823      	ldr	r3, [r4, #0]
    e710:	889b      	ldrh	r3, [r3, #4]
    e712:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    e716:	d104      	bne.n	e722 <spi_nrfx_transceive+0x206>
		ctx->owner = NULL;
    e718:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    e71a:	f104 0010 	add.w	r0, r4, #16
    e71e:	f002 f821 	bl	10764 <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
}
    e722:	4628      	mov	r0, r5
    e724:	b00b      	add	sp, #44	; 0x2c
    e726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
    e72a:	f06f 0515 	mvn.w	r5, #21
    e72e:	e7ee      	b.n	e70e <spi_nrfx_transceive+0x1f2>
		return -ENOTSUP;
    e730:	f06f 0585 	mvn.w	r5, #133	; 0x85
    e734:	e7eb      	b.n	e70e <spi_nrfx_transceive+0x1f2>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    e736:	f8d9 3000 	ldr.w	r3, [r9]
    e73a:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    e73c:	2b00      	cmp	r3, #0
    e73e:	f43f af7f 	beq.w	e640 <spi_nrfx_transceive+0x124>
    e742:	f8d9 3004 	ldr.w	r3, [r9, #4]
    e746:	e77c      	b.n	e642 <spi_nrfx_transceive+0x126>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    e748:	f8d8 3000 	ldr.w	r3, [r8]
    e74c:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    e74e:	2b00      	cmp	r3, #0
    e750:	d086      	beq.n	e660 <spi_nrfx_transceive+0x144>
    e752:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e756:	e784      	b.n	e662 <spi_nrfx_transceive+0x146>
		return -ETIMEDOUT;
    e758:	f06f 0573 	mvn.w	r5, #115	; 0x73
    e75c:	e7d7      	b.n	e70e <spi_nrfx_transceive+0x1f2>
    e75e:	bf00      	nop
    e760:	0001e847 	.word	0x0001e847
    e764:	0003d08f 	.word	0x0003d08f
    e768:	0007a11f 	.word	0x0007a11f
    e76c:	000f423f 	.word	0x000f423f
    e770:	001e847f 	.word	0x001e847f
    e774:	003d08ff 	.word	0x003d08ff
    e778:	007a1200 	.word	0x007a1200
    e77c:	0001286b 	.word	0x0001286b
    e780:	0bad0000 	.word	0x0bad0000

0000e784 <random_byte_get>:
    e784:	f04f 0340 	mov.w	r3, #64	; 0x40
    e788:	f3ef 8211 	mrs	r2, BASEPRI
    e78c:	f383 8812 	msr	BASEPRI_MAX, r3
    e790:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    e794:	4b09      	ldr	r3, [pc, #36]	; (e7bc <random_byte_get+0x38>)
    e796:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
    e79a:	b161      	cbz	r1, e7b6 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e79c:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
    e79e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e7a2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    e7a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
    e7aa:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    e7ac:	f382 8811 	msr	BASEPRI, r2
    e7b0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
    e7b4:	4770      	bx	lr
	int retval = -EAGAIN;
    e7b6:	f06f 000a 	mvn.w	r0, #10
    e7ba:	e7f7      	b.n	e7ac <random_byte_get+0x28>
    e7bc:	4000d000 	.word	0x4000d000

0000e7c0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
    e7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7c2:	4603      	mov	r3, r0
    e7c4:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
    e7c6:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
    e7c8:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
    e7cc:	f04f 0540 	mov.w	r5, #64	; 0x40
    e7d0:	f3ef 8211 	mrs	r2, BASEPRI
    e7d4:	f385 8812 	msr	BASEPRI_MAX, r5
    e7d8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    e7dc:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    e7de:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
    e7e2:	1be4      	subs	r4, r4, r7
    e7e4:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
    e7e8:	42a0      	cmp	r0, r4
		len = available;
    e7ea:	bf88      	it	hi
    e7ec:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    e7ee:	183e      	adds	r6, r7, r0
    e7f0:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
    e7f4:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
    e7f6:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
    e7f8:	f382 8811 	msr	BASEPRI, r2
    e7fc:	f3bf 8f6f 	isb	sy
    e800:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
    e802:	428a      	cmp	r2, r1
    e804:	d117      	bne.n	e836 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    e806:	4577      	cmp	r7, lr
    e808:	d10d      	bne.n	e826 <rng_pool_get+0x66>
	__asm__ volatile(
    e80a:	f04f 0140 	mov.w	r1, #64	; 0x40
    e80e:	f3ef 8211 	mrs	r2, BASEPRI
    e812:	f381 8812 	msr	BASEPRI_MAX, r1
    e816:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    e81a:	7819      	ldrb	r1, [r3, #0]
    e81c:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
    e81e:	f382 8811 	msr	BASEPRI, r2
    e822:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
    e826:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
    e828:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
    e82a:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e82c:	bf22      	ittt	cs
    e82e:	4b06      	ldrcs	r3, [pc, #24]	; (e848 <rng_pool_get+0x88>)
    e830:	2201      	movcs	r2, #1
    e832:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
    e834:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
    e836:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
    e838:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
    e83a:	7976      	ldrb	r6, [r6, #5]
    e83c:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
    e840:	ea05 050c 	and.w	r5, r5, ip
    e844:	e7dd      	b.n	e802 <rng_pool_get+0x42>
    e846:	bf00      	nop
    e848:	4000d000 	.word	0x4000d000

0000e84c <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    e84c:	43db      	mvns	r3, r3
{
    e84e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    e852:	f013 0501 	ands.w	r5, r3, #1
{
    e856:	460e      	mov	r6, r1
    e858:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    e85a:	d004      	beq.n	e866 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    e85c:	4821      	ldr	r0, [pc, #132]	; (e8e4 <entropy_nrf5_get_entropy_isr+0x98>)
    e85e:	f7ff ffaf 	bl	e7c0 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
    e862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
    e866:	b3a2      	cbz	r2, e8d2 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
    e868:	f04f 0340 	mov.w	r3, #64	; 0x40
    e86c:	f3ef 8811 	mrs	r8, BASEPRI
    e870:	f383 8812 	msr	BASEPRI_MAX, r3
    e874:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
    e878:	200d      	movs	r0, #13
    e87a:	f7fd ff63 	bl	c744 <arch_irq_is_enabled>
    e87e:	4607      	mov	r7, r0
		irq_disable(IRQN);
    e880:	200d      	movs	r0, #13
    e882:	f7fd ff4b 	bl	c71c <arch_irq_disable>
	__asm__ volatile(
    e886:	f388 8811 	msr	BASEPRI, r8
    e88a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e88e:	f8df 8058 	ldr.w	r8, [pc, #88]	; e8e8 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e892:	f8df 9058 	ldr.w	r9, [pc, #88]	; e8ec <entropy_nrf5_get_entropy_isr+0xa0>
    e896:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
    e89a:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
    e89e:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e8a2:	2301      	movs	r3, #1
    e8a4:	f8c8 3000 	str.w	r3, [r8]
    e8a8:	4625      	mov	r5, r4
    e8aa:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    e8ae:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
    e8b2:	b183      	cbz	r3, e8d6 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
    e8b4:	f7ff ff66 	bl	e784 <random_byte_get>
			if (byte < 0) {
    e8b8:	1e03      	subs	r3, r0, #0
    e8ba:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    e8be:	dbf6      	blt.n	e8ae <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
    e8c0:	3d01      	subs	r5, #1
    e8c2:	b2ad      	uxth	r5, r5
    e8c4:	5573      	strb	r3, [r6, r5]
		} while (len);
    e8c6:	2d00      	cmp	r5, #0
    e8c8:	d1f1      	bne.n	e8ae <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
    e8ca:	b117      	cbz	r7, e8d2 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
    e8cc:	200d      	movs	r0, #13
    e8ce:	f7fd ff17 	bl	c700 <arch_irq_enable>
	return cnt;
    e8d2:	4620      	mov	r0, r4
    e8d4:	e7c5      	b.n	e862 <entropy_nrf5_get_entropy_isr+0x16>
    e8d6:	f3bf 8f4f 	dsb	sy
				__WFE();
    e8da:	bf20      	wfe
				__SEV();
    e8dc:	bf40      	sev
				__WFE();
    e8de:	bf20      	wfe
    e8e0:	e7e5      	b.n	e8ae <entropy_nrf5_get_entropy_isr+0x62>
    e8e2:	bf00      	nop
    e8e4:	2000160c 	.word	0x2000160c
    e8e8:	4000d000 	.word	0x4000d000
    e8ec:	e000e100 	.word	0xe000e100

0000e8f0 <entropy_nrf5_get_entropy>:
{
    e8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    e8f4:	4f12      	ldr	r7, [pc, #72]	; (e940 <entropy_nrf5_get_entropy+0x50>)
    e8f6:	460d      	mov	r5, r1
    e8f8:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    e8fa:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
    e8fe:	b914      	cbnz	r4, e906 <entropy_nrf5_get_entropy+0x16>
}
    e900:	4620      	mov	r0, r4
    e902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e90a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e90e:	4638      	mov	r0, r7
    e910:	f001 ff4e 	bl	107b0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    e914:	4622      	mov	r2, r4
    e916:	4629      	mov	r1, r5
    e918:	4640      	mov	r0, r8
    e91a:	f7ff ff51 	bl	e7c0 <rng_pool_get>
    e91e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
    e920:	4638      	mov	r0, r7
    e922:	f001 ff1f 	bl	10764 <z_impl_k_sem_give>
		if (bytes == 0U) {
    e926:	b93e      	cbnz	r6, e938 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
    e928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e92c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e930:	4804      	ldr	r0, [pc, #16]	; (e944 <entropy_nrf5_get_entropy+0x54>)
    e932:	f001 ff3d 	bl	107b0 <z_impl_k_sem_take>
	while (len) {
    e936:	e7e6      	b.n	e906 <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
    e938:	1ba4      	subs	r4, r4, r6
    e93a:	b2a4      	uxth	r4, r4
		buf += bytes;
    e93c:	4435      	add	r5, r6
    e93e:	e7de      	b.n	e8fe <entropy_nrf5_get_entropy+0xe>
    e940:	200015dc 	.word	0x200015dc
    e944:	200015f4 	.word	0x200015f4

0000e948 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
    e948:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    e94a:	4c19      	ldr	r4, [pc, #100]	; (e9b0 <entropy_nrf5_init+0x68>)
    e94c:	2201      	movs	r2, #1
    e94e:	4611      	mov	r1, r2
    e950:	4620      	mov	r0, r4
    e952:	f004 fa88 	bl	12e66 <z_impl_k_sem_init>
    e956:	2201      	movs	r2, #1
    e958:	2100      	movs	r1, #0
    e95a:	f104 0018 	add.w	r0, r4, #24
    e95e:	f004 fa82 	bl	12e66 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
    e962:	f240 4307 	movw	r3, #1031	; 0x407
    e966:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
    e96a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    e96e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
    e970:	230c      	movs	r3, #12
    e972:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
    e976:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
    e978:	4b0e      	ldr	r3, [pc, #56]	; (e9b4 <entropy_nrf5_init+0x6c>)
    e97a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
    e97e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
    e982:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    e986:	f022 0201 	bic.w	r2, r2, #1
    e98a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
    e98e:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    e990:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
    e994:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    e998:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
    e99c:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    e99e:	6019      	str	r1, [r3, #0]
    e9a0:	200d      	movs	r0, #13
    e9a2:	f7fd fedd 	bl	c760 <z_arm_irq_priority_set>
	irq_enable(IRQN);
    e9a6:	200d      	movs	r0, #13
    e9a8:	f7fd feaa 	bl	c700 <arch_irq_enable>

	return 0;
}
    e9ac:	4628      	mov	r0, r5
    e9ae:	bd38      	pop	{r3, r4, r5, pc}
    e9b0:	200015dc 	.word	0x200015dc
    e9b4:	4000d000 	.word	0x4000d000

0000e9b8 <isr>:
{
    e9b8:	b510      	push	{r4, lr}
	byte = random_byte_get();
    e9ba:	f7ff fee3 	bl	e784 <random_byte_get>
	if (byte < 0) {
    e9be:	2800      	cmp	r0, #0
    e9c0:	db20      	blt.n	ea04 <isr+0x4c>
	uint8_t last  = rngp->last;
    e9c2:	4b17      	ldr	r3, [pc, #92]	; (ea20 <isr+0x68>)
    e9c4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
    e9c8:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
    e9cc:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
    e9d0:	1b14      	subs	r4, r2, r4
    e9d2:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    e9d6:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
    e9d8:	d10d      	bne.n	e9f6 <isr+0x3e>
	uint8_t last  = rngp->last;
    e9da:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
    e9de:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
    e9e2:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
    e9e6:	1b14      	subs	r4, r2, r4
    e9e8:	ea31 0404 	bics.w	r4, r1, r4
    e9ec:	d10b      	bne.n	ea06 <isr+0x4e>
    e9ee:	4b0d      	ldr	r3, [pc, #52]	; (ea24 <isr+0x6c>)
    e9f0:	2201      	movs	r2, #1
    e9f2:	605a      	str	r2, [r3, #4]
}
    e9f4:	e00e      	b.n	ea14 <isr+0x5c>
	rngp->buffer[last] = byte;
    e9f6:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    e9f8:	3201      	adds	r2, #1
    e9fa:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
    e9fc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
    ea00:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
    ea04:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
    ea06:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    ea08:	3201      	adds	r2, #1
    ea0a:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
    ea0c:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
    ea10:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
    ea14:	4804      	ldr	r0, [pc, #16]	; (ea28 <isr+0x70>)
}
    ea16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea1a:	f001 bea3 	b.w	10764 <z_impl_k_sem_give>
    ea1e:	bf00      	nop
    ea20:	200015dc 	.word	0x200015dc
    ea24:	4000d000 	.word	0x4000d000
    ea28:	200015f4 	.word	0x200015f4

0000ea2c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    ea2c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    ea2e:	2301      	movs	r3, #1
    ea30:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ea32:	4a0e      	ldr	r2, [pc, #56]	; (ea6c <compare_int_lock+0x40>)
    ea34:	f3bf 8f5b 	dmb	ish
    ea38:	43dc      	mvns	r4, r3
    ea3a:	e852 1f00 	ldrex	r1, [r2]
    ea3e:	ea01 0504 	and.w	r5, r1, r4
    ea42:	e842 5600 	strex	r6, r5, [r2]
    ea46:	2e00      	cmp	r6, #0
    ea48:	d1f7      	bne.n	ea3a <compare_int_lock+0xe>
    ea4a:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ea4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ea52:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    ea54:	4806      	ldr	r0, [pc, #24]	; (ea70 <compare_int_lock+0x44>)
    ea56:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    ea5a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ea5e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    ea62:	420b      	tst	r3, r1
}
    ea64:	bf14      	ite	ne
    ea66:	2001      	movne	r0, #1
    ea68:	2000      	moveq	r0, #0
    ea6a:	bd70      	pop	{r4, r5, r6, pc}
    ea6c:	20001634 	.word	0x20001634
    ea70:	40011000 	.word	0x40011000

0000ea74 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    ea74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    ea76:	491b      	ldr	r1, [pc, #108]	; (eae4 <sys_clock_timeout_handler+0x70>)
{
    ea78:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    ea7a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    ea7e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    ea80:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    ea84:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    ea88:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    ea8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    ea8e:	d30f      	bcc.n	eab0 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    ea90:	f002 fc24 	bl	112dc <sys_clock_announce>
    return p_reg->CC[ch];
    ea94:	00a3      	lsls	r3, r4, #2
    ea96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ea9a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    ea9e:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    eaa2:	4295      	cmp	r5, r2
    eaa4:	d11d      	bne.n	eae2 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    eaa6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    eaaa:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    eaae:	e012      	b.n	ead6 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    eab0:	4b0d      	ldr	r3, [pc, #52]	; (eae8 <sys_clock_timeout_handler+0x74>)
    eab2:	681b      	ldr	r3, [r3, #0]
    eab4:	0a1a      	lsrs	r2, r3, #8
    eab6:	061b      	lsls	r3, r3, #24
    eab8:	195e      	adds	r6, r3, r5
    eaba:	4b0c      	ldr	r3, [pc, #48]	; (eaec <sys_clock_timeout_handler+0x78>)
    eabc:	f142 0700 	adc.w	r7, r2, #0
    eac0:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    eac4:	f002 fc0a 	bl	112dc <sys_clock_announce>
    return p_reg->CC[ch];
    eac8:	4a09      	ldr	r2, [pc, #36]	; (eaf0 <sys_clock_timeout_handler+0x7c>)
    eaca:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    eace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    ead2:	429d      	cmp	r5, r3
    ead4:	d105      	bne.n	eae2 <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    ead6:	4a06      	ldr	r2, [pc, #24]	; (eaf0 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ead8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    eadc:	40a3      	lsls	r3, r4
    eade:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    eae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eae4:	200012b8 	.word	0x200012b8
    eae8:	20001638 	.word	0x20001638
    eaec:	200012c0 	.word	0x200012c0
    eaf0:	40011000 	.word	0x40011000

0000eaf4 <compare_int_unlock>:
	if (key) {
    eaf4:	b311      	cbz	r1, eb3c <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    eaf6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    eafa:	2301      	movs	r3, #1
    eafc:	4a10      	ldr	r2, [pc, #64]	; (eb40 <compare_int_unlock+0x4c>)
    eafe:	4083      	lsls	r3, r0
    eb00:	e852 cf00 	ldrex	ip, [r2]
    eb04:	ea4c 0c03 	orr.w	ip, ip, r3
    eb08:	e842 c100 	strex	r1, ip, [r2]
    eb0c:	2900      	cmp	r1, #0
    eb0e:	d1f7      	bne.n	eb00 <compare_int_unlock+0xc>
    eb10:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    eb14:	4a0b      	ldr	r2, [pc, #44]	; (eb44 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    eb16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    eb1a:	4083      	lsls	r3, r0
    eb1c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    eb20:	4b09      	ldr	r3, [pc, #36]	; (eb48 <compare_int_unlock+0x54>)
    eb22:	f3bf 8f5b 	dmb	ish
    eb26:	681b      	ldr	r3, [r3, #0]
    eb28:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    eb2c:	40c3      	lsrs	r3, r0
    eb2e:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    eb30:	bf42      	ittt	mi
    eb32:	4b06      	ldrmi	r3, [pc, #24]	; (eb4c <compare_int_unlock+0x58>)
    eb34:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    eb38:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    eb3c:	4770      	bx	lr
    eb3e:	bf00      	nop
    eb40:	20001634 	.word	0x20001634
    eb44:	40011000 	.word	0x40011000
    eb48:	20001630 	.word	0x20001630
    eb4c:	e000e100 	.word	0xe000e100

0000eb50 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    eb50:	4b0d      	ldr	r3, [pc, #52]	; (eb88 <z_nrf_rtc_timer_read+0x38>)
    eb52:	6818      	ldr	r0, [r3, #0]
    eb54:	0a01      	lsrs	r1, r0, #8
    eb56:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    eb58:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    eb5c:	4b0b      	ldr	r3, [pc, #44]	; (eb8c <z_nrf_rtc_timer_read+0x3c>)
    eb5e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    eb62:	1818      	adds	r0, r3, r0
    eb64:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    eb68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    eb6c:	d20a      	bcs.n	eb84 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    eb6e:	4b08      	ldr	r3, [pc, #32]	; (eb90 <z_nrf_rtc_timer_read+0x40>)
    eb70:	e9d3 2300 	ldrd	r2, r3, [r3]
    eb74:	4290      	cmp	r0, r2
    eb76:	eb71 0303 	sbcs.w	r3, r1, r3
    eb7a:	d203      	bcs.n	eb84 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    eb7c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    eb80:	f141 0100 	adc.w	r1, r1, #0
}
    eb84:	4770      	bx	lr
    eb86:	bf00      	nop
    eb88:	20001638 	.word	0x20001638
    eb8c:	40011000 	.word	0x40011000
    eb90:	200012c0 	.word	0x200012c0

0000eb94 <compare_set>:
{
    eb94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb98:	4614      	mov	r4, r2
    eb9a:	461d      	mov	r5, r3
    eb9c:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    eb9e:	f7ff ff45 	bl	ea2c <compare_int_lock>
    eba2:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    eba4:	f7ff ffd4 	bl	eb50 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    eba8:	42a0      	cmp	r0, r4
    ebaa:	eb71 0305 	sbcs.w	r3, r1, r5
    ebae:	d27a      	bcs.n	eca6 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    ebb0:	4b46      	ldr	r3, [pc, #280]	; (eccc <compare_set+0x138>)
    ebb2:	1a20      	subs	r0, r4, r0
    ebb4:	eb65 0101 	sbc.w	r1, r5, r1
    ebb8:	4298      	cmp	r0, r3
    ebba:	f171 0100 	sbcs.w	r1, r1, #0
    ebbe:	f080 8081 	bcs.w	ecc4 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    ebc2:	4b43      	ldr	r3, [pc, #268]	; (ecd0 <compare_set+0x13c>)
    ebc4:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    ebc8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    ebcc:	429d      	cmp	r5, r3
    ebce:	bf08      	it	eq
    ebd0:	4294      	cmpeq	r4, r2
    ebd2:	d053      	beq.n	ec7c <compare_set+0xe8>
    ebd4:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    ebd8:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    ebdc:	f107 0950 	add.w	r9, r7, #80	; 0x50
    ebe0:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    ebe4:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ebe8:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    ebec:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    ebf0:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ebf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    ebf8:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    ebfc:	4a35      	ldr	r2, [pc, #212]	; (ecd4 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ebfe:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    ec02:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    ec04:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    ec06:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    ec0a:	eba0 000b 	sub.w	r0, r0, fp
    ec0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    ec12:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    ec16:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    ec18:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    ec1c:	d105      	bne.n	ec2a <compare_set+0x96>
    ec1e:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    ec20:	2013      	movs	r0, #19
    ec22:	f004 fac4 	bl	131ae <z_impl_k_busy_wait>
    ec26:	4a2b      	ldr	r2, [pc, #172]	; (ecd4 <compare_set+0x140>)
    ec28:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    ec2a:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    ec2e:	eba6 000c 	sub.w	r0, r6, ip
    ec32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    ec36:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ec3a:	bf88      	it	hi
    ec3c:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ec3e:	2000      	movs	r0, #0
    ec40:	f8c9 0000 	str.w	r0, [r9]
    ec44:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    ec48:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    ec4c:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    ec50:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    ec54:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    ec58:	4583      	cmp	fp, r0
    ec5a:	d006      	beq.n	ec6a <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    ec5c:	1a30      	subs	r0, r6, r0
    ec5e:	3802      	subs	r0, #2
    ec60:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    ec64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ec68:	d81b      	bhi.n	eca2 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    ec6a:	eba6 0608 	sub.w	r6, r6, r8
    ec6e:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    ec72:	1936      	adds	r6, r6, r4
    ec74:	f145 0300 	adc.w	r3, r5, #0
    ec78:	4634      	mov	r4, r6
    ec7a:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    ec7c:	4914      	ldr	r1, [pc, #80]	; (ecd0 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    ec7e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    ec80:	013b      	lsls	r3, r7, #4
    ec82:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    ec86:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    ec88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ec8a:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    ec8c:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    ec90:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    ec92:	4638      	mov	r0, r7
    ec94:	9900      	ldr	r1, [sp, #0]
    ec96:	f7ff ff2d 	bl	eaf4 <compare_int_unlock>
}
    ec9a:	4620      	mov	r0, r4
    ec9c:	b003      	add	sp, #12
    ec9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eca2:	4630      	mov	r0, r6
    eca4:	e7af      	b.n	ec06 <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    eca6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    eca8:	4a0b      	ldr	r2, [pc, #44]	; (ecd8 <compare_set+0x144>)
    ecaa:	f3bf 8f5b 	dmb	ish
    ecae:	40bb      	lsls	r3, r7
    ecb0:	e852 0f00 	ldrex	r0, [r2]
    ecb4:	4318      	orrs	r0, r3
    ecb6:	e842 0100 	strex	r1, r0, [r2]
    ecba:	2900      	cmp	r1, #0
    ecbc:	d1f8      	bne.n	ecb0 <compare_set+0x11c>
    ecbe:	f3bf 8f5b 	dmb	ish
    ecc2:	e7db      	b.n	ec7c <compare_set+0xe8>
			return -EINVAL;
    ecc4:	f06f 0415 	mvn.w	r4, #21
    ecc8:	e7e3      	b.n	ec92 <compare_set+0xfe>
    ecca:	bf00      	nop
    eccc:	01000001 	.word	0x01000001
    ecd0:	200012a8 	.word	0x200012a8
    ecd4:	40011000 	.word	0x40011000
    ecd8:	20001630 	.word	0x20001630

0000ecdc <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    ecdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    ecde:	4b19      	ldr	r3, [pc, #100]	; (ed44 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    ece0:	4d19      	ldr	r5, [pc, #100]	; (ed48 <sys_clock_driver_init+0x6c>)
    ece2:	2400      	movs	r4, #0
    ece4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ece8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ecec:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    ecf0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    ecf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ecf8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ecfc:	4b13      	ldr	r3, [pc, #76]	; (ed4c <sys_clock_driver_init+0x70>)
    ecfe:	2602      	movs	r6, #2
    ed00:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    ed04:	2101      	movs	r1, #1
    ed06:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    ed0a:	2011      	movs	r0, #17
    ed0c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    ed10:	4622      	mov	r2, r4
    ed12:	f7fd fd25 	bl	c760 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    ed16:	2011      	movs	r0, #17
    ed18:	f7fd fcf2 	bl	c700 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    ed1c:	4a0c      	ldr	r2, [pc, #48]	; (ed50 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    ed1e:	2301      	movs	r3, #1
    ed20:	60ab      	str	r3, [r5, #8]
    ed22:	602b      	str	r3, [r5, #0]
    ed24:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    ed26:	4b0b      	ldr	r3, [pc, #44]	; (ed54 <sys_clock_driver_init+0x78>)
    ed28:	4a0b      	ldr	r2, [pc, #44]	; (ed58 <sys_clock_driver_init+0x7c>)
    ed2a:	9300      	str	r3, [sp, #0]
    ed2c:	9401      	str	r4, [sp, #4]
    ed2e:	2300      	movs	r3, #0
    ed30:	4620      	mov	r0, r4
    ed32:	f7ff ff2f 	bl	eb94 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    ed36:	4630      	mov	r0, r6
    ed38:	f7ff fa10 	bl	e15c <z_nrf_clock_control_lf_on>

	return 0;
}
    ed3c:	4620      	mov	r0, r4
    ed3e:	b002      	add	sp, #8
    ed40:	bd70      	pop	{r4, r5, r6, pc}
    ed42:	bf00      	nop
    ed44:	200012a8 	.word	0x200012a8
    ed48:	40011000 	.word	0x40011000
    ed4c:	e000e100 	.word	0xe000e100
    ed50:	20001634 	.word	0x20001634
    ed54:	0000ea75 	.word	0x0000ea75
    ed58:	007fffff 	.word	0x007fffff

0000ed5c <rtc_nrf_isr>:
{
    ed5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    ed60:	4c2b      	ldr	r4, [pc, #172]	; (ee10 <rtc_nrf_isr+0xb4>)
    ed62:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    ed66:	079a      	lsls	r2, r3, #30
    ed68:	d50b      	bpl.n	ed82 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ed6a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    ed6e:	b143      	cbz	r3, ed82 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    ed70:	4a28      	ldr	r2, [pc, #160]	; (ee14 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ed72:	2300      	movs	r3, #0
    ed74:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    ed78:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    ed7c:	6813      	ldr	r3, [r2, #0]
    ed7e:	3301      	adds	r3, #1
    ed80:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    ed82:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    ed86:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
    ed88:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    ed8c:	03db      	lsls	r3, r3, #15
    ed8e:	d522      	bpl.n	edd6 <rtc_nrf_isr+0x7a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ed90:	f3bf 8f5b 	dmb	ish
    ed94:	4b20      	ldr	r3, [pc, #128]	; (ee18 <rtc_nrf_isr+0xbc>)
    ed96:	e853 1f00 	ldrex	r1, [r3]
    ed9a:	f021 0001 	bic.w	r0, r1, #1
    ed9e:	e843 0500 	strex	r5, r0, [r3]
    eda2:	2d00      	cmp	r5, #0
    eda4:	d1f7      	bne.n	ed96 <rtc_nrf_isr+0x3a>
    eda6:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    edaa:	b911      	cbnz	r1, edb2 <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    edac:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    edb0:	b18b      	cbz	r3, edd6 <rtc_nrf_isr+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    edb2:	2500      	movs	r5, #0
    edb4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    edb8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    edbc:	f382 8810 	msr	PRIMASK, r2
		curr_time = z_nrf_rtc_timer_read();
    edc0:	f7ff fec6 	bl	eb50 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    edc4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    edc8:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
    edca:	4b14      	ldr	r3, [pc, #80]	; (ee1c <rtc_nrf_isr+0xc0>)
    edcc:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    edd0:	42b0      	cmp	r0, r6
    edd2:	41b9      	sbcs	r1, r7
    edd4:	d204      	bcs.n	ede0 <rtc_nrf_isr+0x84>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    edd6:	f382 8810 	msr	PRIMASK, r2
}
    edda:	b003      	add	sp, #12
    eddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    ede0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    ede4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    ede8:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    edec:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    edf0:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    edf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    edf6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    edfa:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
    edfe:	2900      	cmp	r1, #0
    ee00:	d0eb      	beq.n	edda <rtc_nrf_isr+0x7e>
			handler(chan, expire_time, user_context);
    ee02:	9000      	str	r0, [sp, #0]
    ee04:	4632      	mov	r2, r6
    ee06:	463b      	mov	r3, r7
    ee08:	4628      	mov	r0, r5
    ee0a:	4788      	blx	r1
}
    ee0c:	e7e5      	b.n	edda <rtc_nrf_isr+0x7e>
    ee0e:	bf00      	nop
    ee10:	40011000 	.word	0x40011000
    ee14:	20001638 	.word	0x20001638
    ee18:	20001630 	.word	0x20001630
    ee1c:	200012a8 	.word	0x200012a8

0000ee20 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    ee20:	1c43      	adds	r3, r0, #1
{
    ee22:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    ee24:	d021      	beq.n	ee6a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    ee26:	2801      	cmp	r0, #1
    ee28:	dd21      	ble.n	ee6e <sys_clock_set_timeout+0x4e>
    ee2a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ee2e:	da20      	bge.n	ee72 <sys_clock_set_timeout+0x52>
    ee30:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    ee32:	f7ff fe8d 	bl	eb50 <z_nrf_rtc_timer_read>
    ee36:	4b10      	ldr	r3, [pc, #64]	; (ee78 <sys_clock_set_timeout+0x58>)
    ee38:	e9d3 1300 	ldrd	r1, r3, [r3]
    ee3c:	1a42      	subs	r2, r0, r1
		ticks = 0;
    ee3e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    ee42:	480e      	ldr	r0, [pc, #56]	; (ee7c <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    ee44:	bf28      	it	cs
    ee46:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    ee48:	3201      	adds	r2, #1
    ee4a:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    ee4c:	4282      	cmp	r2, r0
    ee4e:	bf28      	it	cs
    ee50:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    ee52:	1852      	adds	r2, r2, r1
    ee54:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    ee58:	4909      	ldr	r1, [pc, #36]	; (ee80 <sys_clock_set_timeout+0x60>)
    ee5a:	9001      	str	r0, [sp, #4]
    ee5c:	9100      	str	r1, [sp, #0]
    ee5e:	f143 0300 	adc.w	r3, r3, #0
    ee62:	f7ff fe97 	bl	eb94 <compare_set>
}
    ee66:	b002      	add	sp, #8
    ee68:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    ee6a:	4804      	ldr	r0, [pc, #16]	; (ee7c <sys_clock_set_timeout+0x5c>)
    ee6c:	e7e0      	b.n	ee30 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    ee6e:	2400      	movs	r4, #0
    ee70:	e7df      	b.n	ee32 <sys_clock_set_timeout+0x12>
    ee72:	4c02      	ldr	r4, [pc, #8]	; (ee7c <sys_clock_set_timeout+0x5c>)
    ee74:	e7dd      	b.n	ee32 <sys_clock_set_timeout+0x12>
    ee76:	bf00      	nop
    ee78:	200012b8 	.word	0x200012b8
    ee7c:	007fffff 	.word	0x007fffff
    ee80:	0000ea75 	.word	0x0000ea75

0000ee84 <sys_clock_elapsed>:
{
    ee84:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    ee86:	f7ff fe63 	bl	eb50 <z_nrf_rtc_timer_read>
    ee8a:	4b02      	ldr	r3, [pc, #8]	; (ee94 <sys_clock_elapsed+0x10>)
    ee8c:	681b      	ldr	r3, [r3, #0]
}
    ee8e:	1ac0      	subs	r0, r0, r3
    ee90:	bd08      	pop	{r3, pc}
    ee92:	bf00      	nop
    ee94:	200012b8 	.word	0x200012b8

0000ee98 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
    ee98:	4602      	mov	r2, r0
    ee9a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    ee9c:	4801      	ldr	r0, [pc, #4]	; (eea4 <multithreading_lock_acquire+0xc>)
    ee9e:	f001 bb79 	b.w	10594 <z_impl_k_mutex_lock>
    eea2:	bf00      	nop
    eea4:	20000480 	.word	0x20000480

0000eea8 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
    eea8:	4801      	ldr	r0, [pc, #4]	; (eeb0 <multithreading_lock_release+0x8>)
    eeaa:	f001 bbed 	b.w	10688 <z_impl_k_mutex_unlock>
    eeae:	bf00      	nop
    eeb0:	20000480 	.word	0x20000480

0000eeb4 <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
    eeb4:	b510      	push	{r4, lr}
	BT_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
    eeb6:	4916      	ldr	r1, [pc, #88]	; (ef10 <hci_driver_open+0x5c>)
    eeb8:	4816      	ldr	r0, [pc, #88]	; (ef14 <hci_driver_open+0x60>)
{
    eeba:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
    eebc:	f003 fff5 	bl	12eaa <k_work_init>
		hci_ecdh_init();
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
    eec0:	a803      	add	r0, sp, #12
    eec2:	f7f5 fb47 	bl	4554 <sdc_build_revision_get>
    eec6:	4814      	ldr	r0, [pc, #80]	; (ef18 <hci_driver_open+0x64>)
    eec8:	f003 fe59 	bl	12b7e <z_device_is_ready>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
    eecc:	b1d0      	cbz	r0, ef04 <hci_driver_open+0x50>
		BT_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
    eece:	4a13      	ldr	r2, [pc, #76]	; (ef1c <hci_driver_open+0x68>)
    eed0:	ca07      	ldmia	r2, {r0, r1, r2}
    eed2:	466b      	mov	r3, sp
    eed4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
    eed8:	4618      	mov	r0, r3
    eeda:	f7f5 fca9 	bl	4830 <sdc_rand_source_register>
	if (err) {
    eede:	b9a0      	cbnz	r0, ef0a <hci_driver_open+0x56>
		BT_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
    eee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    eee4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    eee8:	f7ff ffd6 	bl	ee98 <multithreading_lock_acquire>
	if (err) {
    eeec:	4604      	mov	r4, r0
    eeee:	b930      	cbnz	r0, eefe <hci_driver_open+0x4a>
				return err;
			}
		}
	}

	err = sdc_enable(receive_signal_raise, sdc_mempool);
    eef0:	490b      	ldr	r1, [pc, #44]	; (ef20 <hci_driver_open+0x6c>)
    eef2:	480c      	ldr	r0, [pc, #48]	; (ef24 <hci_driver_open+0x70>)
    eef4:	f7f5 fba0 	bl	4638 <sdc_enable>
	if (err) {
    eef8:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
		return err;
	}

	MULTITHREADING_LOCK_RELEASE();
    eefa:	f7ff ffd5 	bl	eea8 <multithreading_lock_release>

	return 0;
}
    eefe:	4620      	mov	r0, r4
    ef00:	b008      	add	sp, #32
    ef02:	bd10      	pop	{r4, pc}
		return -ENODEV;
    ef04:	f06f 0412 	mvn.w	r4, #18
    ef08:	e7f9      	b.n	eefe <hci_driver_open+0x4a>
		return -EINVAL;
    ef0a:	f06f 0415 	mvn.w	r4, #21
    ef0e:	e7f6      	b.n	eefe <hci_driver_open+0x4a>
    ef10:	00012a59 	.word	0x00012a59
    ef14:	2000163c 	.word	0x2000163c
    ef18:	00013438 	.word	0x00013438
    ef1c:	000135c0 	.word	0x000135c0
    ef20:	20001915 	.word	0x20001915
    ef24:	0000f00d 	.word	0x0000f00d

0000ef28 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
    ef28:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
    ef2a:	482b      	ldr	r0, [pc, #172]	; (efd8 <hci_driver_init+0xb0>)
    ef2c:	f7fe fb6c 	bl	d608 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
    ef30:	482a      	ldr	r0, [pc, #168]	; (efdc <hci_driver_init+0xb4>)
    ef32:	f7f5 fba9 	bl	4688 <sdc_init>
			err = sdc_support_adv();
    ef36:	f7f5 fc25 	bl	4784 <sdc_support_adv>
			if (err) {
    ef3a:	4604      	mov	r4, r0
    ef3c:	2800      	cmp	r0, #0
    ef3e:	d147      	bne.n	efd0 <hci_driver_init+0xa8>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    ef40:	aa01      	add	r2, sp, #4
    ef42:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
    ef44:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    ef48:	f7f5 fb12 	bl	4570 <sdc_cfg_set>
	if (required_memory < 0) {
    ef4c:	2800      	cmp	r0, #0
    ef4e:	db3b      	blt.n	efc8 <hci_driver_init+0xa0>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    ef50:	aa01      	add	r2, sp, #4
    ef52:	2102      	movs	r1, #2
    ef54:	4620      	mov	r0, r4
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
    ef56:	f88d 4004 	strb.w	r4, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    ef5a:	f7f5 fb09 	bl	4570 <sdc_cfg_set>
	if (required_memory < 0) {
    ef5e:	2800      	cmp	r0, #0
    ef60:	db32      	blt.n	efc8 <hci_driver_init+0xa0>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
    ef62:	4b1f      	ldr	r3, [pc, #124]	; (efe0 <hci_driver_init+0xb8>)
    ef64:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    ef66:	aa01      	add	r2, sp, #4
    ef68:	2103      	movs	r1, #3
    ef6a:	4620      	mov	r0, r4
    ef6c:	f7f5 fb00 	bl	4570 <sdc_cfg_set>
	if (required_memory < 0) {
    ef70:	2800      	cmp	r0, #0
    ef72:	db29      	blt.n	efc8 <hci_driver_init+0xa0>
	cfg.event_length.event_length_us =
    ef74:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    ef78:	aa01      	add	r2, sp, #4
    ef7a:	2104      	movs	r1, #4
    ef7c:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
    ef7e:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    ef80:	f7f5 faf6 	bl	4570 <sdc_cfg_set>
	if (required_memory < 0) {
    ef84:	2800      	cmp	r0, #0
    ef86:	db1f      	blt.n	efc8 <hci_driver_init+0xa0>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
    ef88:	2301      	movs	r3, #1
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    ef8a:	aa01      	add	r2, sp, #4
    ef8c:	2105      	movs	r1, #5
    ef8e:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
    ef90:	f88d 3004 	strb.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    ef94:	f7f5 faec 	bl	4570 <sdc_cfg_set>
	if (required_memory < 0) {
    ef98:	2800      	cmp	r0, #0
    ef9a:	db15      	blt.n	efc8 <hci_driver_init+0xa0>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
    ef9c:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    ef9e:	aa01      	add	r2, sp, #4
    efa0:	2107      	movs	r1, #7
    efa2:	4620      	mov	r0, r4
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
    efa4:	f8ad 3004 	strh.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    efa8:	f7f5 fae2 	bl	4570 <sdc_cfg_set>
		if (required_memory < 0) {
    efac:	2800      	cmp	r0, #0
    efae:	db0b      	blt.n	efc8 <hci_driver_init+0xa0>
	if (required_memory > sizeof(sdc_mempool)) {
    efb0:	f240 2332 	movw	r3, #562	; 0x232
    efb4:	4298      	cmp	r0, r3
    efb6:	dd09      	ble.n	efcc <hci_driver_init+0xa4>
		k_panic();
    efb8:	4040      	eors	r0, r0
    efba:	f380 8811 	msr	BASEPRI, r0
    efbe:	f04f 0004 	mov.w	r0, #4
    efc2:	df02      	svc	2
		return -ENOMEM;
    efc4:	f06f 000b 	mvn.w	r0, #11
	if (err) {
		return err;
	}

	return err;
}
    efc8:	b002      	add	sp, #8
    efca:	bd10      	pop	{r4, pc}
	return 0;
    efcc:	4620      	mov	r0, r4
	if (err) {
    efce:	e7fb      	b.n	efc8 <hci_driver_init+0xa0>
				return -ENOTSUP;
    efd0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    efd4:	e7f8      	b.n	efc8 <hci_driver_init+0xa0>
    efd6:	bf00      	nop
    efd8:	00013798 	.word	0x00013798
    efdc:	000129e9 	.word	0x000129e9
    efe0:	02031b1b 	.word	0x02031b1b

0000efe4 <rand_prio_low_vector_get>:
{
    efe4:	b538      	push	{r3, r4, r5, lr}
    efe6:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
    efe8:	4807      	ldr	r0, [pc, #28]	; (f008 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
    efea:	6883      	ldr	r3, [r0, #8]
    efec:	685d      	ldr	r5, [r3, #4]
    efee:	460a      	mov	r2, r1
    eff0:	b135      	cbz	r5, f000 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    eff2:	2300      	movs	r3, #0
    eff4:	4621      	mov	r1, r4
    eff6:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
    eff8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
    effc:	b2c0      	uxtb	r0, r0
    effe:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
    f000:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f004:	e7f8      	b.n	eff8 <rand_prio_low_vector_get+0x14>
    f006:	bf00      	nop
    f008:	00013438 	.word	0x00013438

0000f00c <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
    f00c:	4901      	ldr	r1, [pc, #4]	; (f014 <receive_signal_raise+0x8>)
    f00e:	4802      	ldr	r0, [pc, #8]	; (f018 <receive_signal_raise+0xc>)
    f010:	f003 bf68 	b.w	12ee4 <k_work_submit_to_queue>
    f014:	2000163c 	.word	0x2000163c
    f018:	200012c8 	.word	0x200012c8

0000f01c <rand_prio_low_vector_get_blocking>:
{
    f01c:	b410      	push	{r4}
    f01e:	4603      	mov	r3, r0
    f020:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
    f022:	4803      	ldr	r0, [pc, #12]	; (f030 <rand_prio_low_vector_get_blocking+0x14>)
    f024:	6881      	ldr	r1, [r0, #8]
    f026:	680c      	ldr	r4, [r1, #0]
    f028:	4619      	mov	r1, r3
    f02a:	4623      	mov	r3, r4
}
    f02c:	bc10      	pop	{r4}
    f02e:	4718      	bx	r3
    f030:	00013438 	.word	0x00013438

0000f034 <hci_driver_receive_process>:
{
    f034:	b537      	push	{r0, r1, r2, r4, r5, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
    f036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f03a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f03e:	f7ff ff2b 	bl	ee98 <multithreading_lock_acquire>
	if (!errcode) {
    f042:	2800      	cmp	r0, #0
    f044:	d145      	bne.n	f0d2 <hci_driver_receive_process+0x9e>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
    f046:	4d24      	ldr	r5, [pc, #144]	; (f0d8 <hci_driver_receive_process+0xa4>)
    f048:	f10d 0107 	add.w	r1, sp, #7
    f04c:	4628      	mov	r0, r5
    f04e:	f000 fa85 	bl	f55c <hci_internal_msg_get>
    f052:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
    f054:	f7ff ff28 	bl	eea8 <multithreading_lock_release>
	if (errcode) {
    f058:	2c00      	cmp	r4, #0
    f05a:	d13a      	bne.n	f0d2 <hci_driver_receive_process+0x9e>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
    f05c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f060:	2b04      	cmp	r3, #4
    f062:	d126      	bne.n	f0b2 <hci_driver_receive_process+0x7e>
	switch (hdr->evt) {
    f064:	7828      	ldrb	r0, [r5, #0]
    f066:	283e      	cmp	r0, #62	; 0x3e
    f068:	d019      	beq.n	f09e <hci_driver_receive_process+0x6a>
    f06a:	28ff      	cmp	r0, #255	; 0xff
    f06c:	d01e      	beq.n	f0ac <hci_driver_receive_process+0x78>
		switch (subevent) {
    f06e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
    f076:	4621      	mov	r1, r4
    f078:	f7fd ff1e 	bl	ceb8 <bt_buf_get_evt>
	if (!evt_buf) {
    f07c:	4604      	mov	r4, r0
    f07e:	b148      	cbz	r0, f094 <hci_driver_receive_process+0x60>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
    f080:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f082:	4915      	ldr	r1, [pc, #84]	; (f0d8 <hci_driver_receive_process+0xa4>)
    f084:	3202      	adds	r2, #2
    f086:	f104 0008 	add.w	r0, r4, #8
    f08a:	f003 fa19 	bl	124c0 <net_buf_simple_add_mem>
	bt_recv(data_buf);
    f08e:	4620      	mov	r0, r4
    f090:	f7fe fa94 	bl	d5bc <bt_recv>
}
    f094:	b003      	add	sp, #12
    f096:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		receive_signal_raise();
    f09a:	f7ff bfb7 	b.w	f00c <receive_signal_raise>
		switch (me->subevent) {
    f09e:	78ab      	ldrb	r3, [r5, #2]
    f0a0:	2b02      	cmp	r3, #2
		switch (subevent) {
    f0a2:	d1e4      	bne.n	f06e <hci_driver_receive_process+0x3a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
    f0a4:	2200      	movs	r2, #0
    f0a6:	2300      	movs	r3, #0
			return true;
    f0a8:	2401      	movs	r4, #1
    f0aa:	e7e4      	b.n	f076 <hci_driver_receive_process+0x42>
		switch (subevent) {
    f0ac:	78ab      	ldrb	r3, [r5, #2]
    f0ae:	2b80      	cmp	r3, #128	; 0x80
    f0b0:	e7f7      	b.n	f0a2 <hci_driver_receive_process+0x6e>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
    f0b2:	2b02      	cmp	r3, #2
    f0b4:	d10d      	bne.n	f0d2 <hci_driver_receive_process+0x9e>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    f0b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f0ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f0be:	2003      	movs	r0, #3
    f0c0:	f7fd fed0 	bl	ce64 <bt_buf_get_rx>
	if (!data_buf) {
    f0c4:	4604      	mov	r4, r0
    f0c6:	2800      	cmp	r0, #0
    f0c8:	d0e4      	beq.n	f094 <hci_driver_receive_process+0x60>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
    f0ca:	886a      	ldrh	r2, [r5, #2]
    f0cc:	4629      	mov	r1, r5
    f0ce:	3204      	adds	r2, #4
    f0d0:	e7d9      	b.n	f086 <hci_driver_receive_process+0x52>
}
    f0d2:	b003      	add	sp, #12
    f0d4:	bd30      	pop	{r4, r5, pc}
    f0d6:	bf00      	nop
    f0d8:	200018cf 	.word	0x200018cf

0000f0dc <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
    f0dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
    f0de:	4dba      	ldr	r5, [pc, #744]	; (f3c8 <hci_internal_cmd_put+0x2ec>)
    f0e0:	782b      	ldrb	r3, [r5, #0]
{
    f0e2:	4606      	mov	r6, r0
	if (cmd_complete_or_status.occurred) {
    f0e4:	2b00      	cmp	r3, #0
    f0e6:	f040 8231 	bne.w	f54c <hci_internal_cmd_put+0x470>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
    f0ea:	2304      	movs	r3, #4
    f0ec:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
    f0f0:	4bb6      	ldr	r3, [pc, #728]	; (f3cc <hci_internal_cmd_put+0x2f0>)
    f0f2:	8804      	ldrh	r4, [r0, #0]
    f0f4:	681f      	ldr	r7, [r3, #0]
    f0f6:	b1b7      	cbz	r7, f126 <hci_internal_cmd_put+0x4a>
		status = user_cmd_handler(cmd_in,
    f0f8:	f10d 0306 	add.w	r3, sp, #6
    f0fc:	f10d 0207 	add.w	r2, sp, #7
    f100:	1c69      	adds	r1, r5, #1
    f102:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
    f104:	2801      	cmp	r0, #1
    f106:	d00e      	beq.n	f126 <hci_internal_cmd_put+0x4a>
	if (generate_command_status_event ||
    f108:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f10c:	2b00      	cmp	r3, #0
    f10e:	f040 8206 	bne.w	f51e <hci_internal_cmd_put+0x442>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
    f112:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
    f116:	70ab      	strb	r3, [r5, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    f118:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
    f11a:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    f11c:	706a      	strb	r2, [r5, #1]
	evt_data->ncmd = 1;
    f11e:	70eb      	strb	r3, [r5, #3]
	evt_data->opcode = hci_opcode;
    f120:	80ac      	strh	r4, [r5, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
    f122:	71a8      	strb	r0, [r5, #6]
}
    f124:	e204      	b.n	f530 <hci_internal_cmd_put+0x454>
		switch (BT_OGF(opcode)) {
    f126:	0aa3      	lsrs	r3, r4, #10
    f128:	2b08      	cmp	r3, #8
    f12a:	f000 8089 	beq.w	f240 <hci_internal_cmd_put+0x164>
    f12e:	d805      	bhi.n	f13c <hci_internal_cmd_put+0x60>
    f130:	2b03      	cmp	r3, #3
    f132:	d00a      	beq.n	f14a <hci_internal_cmd_put+0x6e>
    f134:	2b04      	cmp	r3, #4
    f136:	d019      	beq.n	f16c <hci_internal_cmd_put+0x90>
    f138:	2001      	movs	r0, #1
    f13a:	e1f0      	b.n	f51e <hci_internal_cmd_put+0x442>
    f13c:	2b3f      	cmp	r3, #63	; 0x3f
    f13e:	f000 8136 	beq.w	f3ae <hci_internal_cmd_put+0x2d2>
    f142:	2001      	movs	r0, #1
	if (generate_command_status_event ||
    f144:	2801      	cmp	r0, #1
    f146:	d0f7      	beq.n	f138 <hci_internal_cmd_put+0x5c>
    f148:	e7e3      	b.n	f112 <hci_internal_cmd_put+0x36>
	return ((uint16_t)src[1] << 8) | src[0];
    f14a:	f9b6 3000 	ldrsh.w	r3, [r6]
	switch (opcode)	{
    f14e:	f640 4201 	movw	r2, #3073	; 0xc01
    f152:	4293      	cmp	r3, r2
    f154:	d006      	beq.n	f164 <hci_internal_cmd_put+0x88>
    f156:	f640 4203 	movw	r2, #3075	; 0xc03
    f15a:	4293      	cmp	r3, r2
    f15c:	d1ec      	bne.n	f138 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_reset();
    f15e:	f7f5 fc61 	bl	4a24 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
    f162:	e7ef      	b.n	f144 <hci_internal_cmd_put+0x68>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
    f164:	1cf0      	adds	r0, r6, #3
    f166:	f7f9 ff01 	bl	8f6c <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
    f16a:	e7eb      	b.n	f144 <hci_internal_cmd_put+0x68>
	switch (opcode)	{
    f16c:	8833      	ldrh	r3, [r6, #0]
    f16e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    f172:	3b01      	subs	r3, #1
    f174:	2b08      	cmp	r3, #8
    f176:	d8df      	bhi.n	f138 <hci_internal_cmd_put+0x5c>
    f178:	a201      	add	r2, pc, #4	; (adr r2, f180 <hci_internal_cmd_put+0xa4>)
    f17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f17e:	bf00      	nop
    f180:	0000f1a5 	.word	0x0000f1a5
    f184:	0000f1b7 	.word	0x0000f1b7
    f188:	0000f20f 	.word	0x0000f20f
    f18c:	0000f139 	.word	0x0000f139
    f190:	0000f139 	.word	0x0000f139
    f194:	0000f139 	.word	0x0000f139
    f198:	0000f139 	.word	0x0000f139
    f19c:	0000f139 	.word	0x0000f139
    f1a0:	0000f22f 	.word	0x0000f22f
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
    f1a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
    f1a8:	4889      	ldr	r0, [pc, #548]	; (f3d0 <hci_internal_cmd_put+0x2f4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
    f1aa:	3308      	adds	r3, #8
    f1ac:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
    f1b0:	f7f9 ffaa 	bl	9108 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
    f1b4:	e7c6      	b.n	f144 <hci_internal_cmd_put+0x68>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
    f1b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    f1ba:	4885      	ldr	r0, [pc, #532]	; (f3d0 <hci_internal_cmd_put+0x2f4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
    f1bc:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
    f1be:	222f      	movs	r2, #47	; 0x2f
    f1c0:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
    f1c2:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    f1c6:	f004 f8c7 	bl	13358 <memset>
	cmds->hci_set_event_mask = 1;
    f1ca:	f06f 033f 	mvn.w	r3, #63	; 0x3f
    f1ce:	732b      	strb	r3, [r5, #12]
	cmds->hci_read_local_version_information = 1;
    f1d0:	2328      	movs	r3, #40	; 0x28
    f1d2:	756b      	strb	r3, [r5, #21]
	cmds->hci_read_bd_addr = 1;
    f1d4:	2302      	movs	r3, #2
    f1d6:	75ab      	strb	r3, [r5, #22]
	cmds->hci_le_set_event_mask = 1;
    f1d8:	f06f 0308 	mvn.w	r3, #8
    f1dc:	f885 3020 	strb.w	r3, [r5, #32]
	cmds->hci_le_set_scan_response_data = 1;
    f1e0:	f06f 033c 	mvn.w	r3, #60	; 0x3c
    f1e4:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
    f1e8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	cmds->hci_le_read_supported_states = 1;
    f1ec:	2378      	movs	r3, #120	; 0x78
    f1ee:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
    f1f2:	2380      	movs	r3, #128	; 0x80
    f1f4:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
    f1f8:	2301      	movs	r3, #1
    f1fa:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
    f1fe:	2380      	movs	r3, #128	; 0x80
    f200:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	cmds->hci_le_set_data_related_address_changes = 1;
    f204:	2340      	movs	r3, #64	; 0x40
    f206:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
		return 0;
    f20a:	2000      	movs	r0, #0
    f20c:	e781      	b.n	f112 <hci_internal_cmd_put+0x36>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
    f20e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f212:	3308      	adds	r3, #8
    f214:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
    f218:	4b6d      	ldr	r3, [pc, #436]	; (f3d0 <hci_internal_cmd_put+0x2f4>)
    f21a:	2200      	movs	r2, #0
    f21c:	601a      	str	r2, [r3, #0]
    f21e:	605a      	str	r2, [r3, #4]
	features->bdedr_not_supported = 1;
    f220:	7aeb      	ldrb	r3, [r5, #11]
    f222:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    f226:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    f22a:	72eb      	strb	r3, [r5, #11]
	if (generate_command_status_event ||
    f22c:	e7ed      	b.n	f20a <hci_internal_cmd_put+0x12e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
    f22e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
    f232:	4867      	ldr	r0, [pc, #412]	; (f3d0 <hci_internal_cmd_put+0x2f4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
    f234:	3306      	adds	r3, #6
    f236:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
    f23a:	f7f9 ff63 	bl	9104 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
    f23e:	e781      	b.n	f144 <hci_internal_cmd_put+0x68>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
    f240:	4630      	mov	r0, r6
	switch (opcode)	{
    f242:	f242 011c 	movw	r1, #8220	; 0x201c
    f246:	f830 3b03 	ldrh.w	r3, [r0], #3
    f24a:	b21a      	sxth	r2, r3
    f24c:	428a      	cmp	r2, r1
    f24e:	dc19      	bgt.n	f284 <hci_internal_cmd_put+0x1a8>
    f250:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    f254:	f242 0626 	movw	r6, #8230	; 0x2026
    f258:	dd1f      	ble.n	f29a <hci_internal_cmd_put+0x1be>
    f25a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    f25e:	3b01      	subs	r3, #1
    f260:	2b1b      	cmp	r3, #27
    f262:	d81a      	bhi.n	f29a <hci_internal_cmd_put+0x1be>
    f264:	e8df f003 	tbb	[pc, r3]
    f268:	19372b20 	.word	0x19372b20
    f26c:	60575451 	.word	0x60575451
    f270:	19196663 	.word	0x19196663
    f274:	756c1919 	.word	0x756c1919
    f278:	19197b78 	.word	0x19197b78
    f27c:	877e1919 	.word	0x877e1919
    f280:	90191919 	.word	0x90191919
    f284:	f242 034b 	movw	r3, #8267	; 0x204b
    f288:	429a      	cmp	r2, r3
    f28a:	f000 8087 	beq.w	f39c <hci_internal_cmd_put+0x2c0>
    f28e:	f242 037c 	movw	r3, #8316	; 0x207c
    f292:	429a      	cmp	r2, r3
    f294:	f242 0626 	movw	r6, #8230	; 0x2026
    f298:	d04f      	beq.n	f33a <hci_internal_cmd_put+0x25e>
	switch (hci_opcode) {
    f29a:	42b4      	cmp	r4, r6
    f29c:	f200 814d 	bhi.w	f53a <hci_internal_cmd_put+0x45e>
    f2a0:	f242 030c 	movw	r3, #8204	; 0x200c
    f2a4:	2001      	movs	r0, #1
    f2a6:	e126      	b.n	f4f6 <hci_internal_cmd_put+0x41a>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
    f2a8:	f7f9 ff4e 	bl	9148 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
    f2ac:	42b4      	cmp	r4, r6
    f2ae:	f240 8129 	bls.w	f504 <hci_internal_cmd_put+0x428>
    f2b2:	f242 0377 	movw	r3, #8311	; 0x2077
    f2b6:	429c      	cmp	r4, r3
    f2b8:	f040 80b5 	bne.w	f426 <hci_internal_cmd_put+0x34a>
    f2bc:	e12f      	b.n	f51e <hci_internal_cmd_put+0x442>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
    f2be:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
    f2c2:	4843      	ldr	r0, [pc, #268]	; (f3d0 <hci_internal_cmd_put+0x2f4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
    f2c4:	3303      	adds	r3, #3
    f2c6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
    f2ca:	f7f9 ff2d 	bl	9128 <sdc_hci_cmd_le_read_buffer_size>
	switch (hci_opcode) {
    f2ce:	f242 0326 	movw	r3, #8230	; 0x2026
    f2d2:	429c      	cmp	r4, r3
    f2d4:	e7eb      	b.n	f2ae <hci_internal_cmd_put+0x1d2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
    f2d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f2da:	3308      	adds	r3, #8
    f2dc:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
    f2e0:	4b3b      	ldr	r3, [pc, #236]	; (f3d0 <hci_internal_cmd_put+0x2f4>)
    f2e2:	2200      	movs	r2, #0
    f2e4:	601a      	str	r2, [r3, #0]
    f2e6:	711a      	strb	r2, [r3, #4]
	features->le_encryption = 1;
    f2e8:	79eb      	ldrb	r3, [r5, #7]
    f2ea:	f023 031d 	bic.w	r3, r3, #29
    f2ee:	f043 031d 	orr.w	r3, r3, #29
    f2f2:	71eb      	strb	r3, [r5, #7]
	features->channel_selection_algorithm_2 = 1;
    f2f4:	7a2b      	ldrb	r3, [r5, #8]
    f2f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f2fa:	722b      	strb	r3, [r5, #8]
	switch (hci_opcode) {
    f2fc:	f242 0326 	movw	r3, #8230	; 0x2026
    f300:	429c      	cmp	r4, r3
    f302:	f240 80f5 	bls.w	f4f0 <hci_internal_cmd_put+0x414>
		return 0;
    f306:	2000      	movs	r0, #0
    f308:	e7d3      	b.n	f2b2 <hci_internal_cmd_put+0x1d6>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
    f30a:	f7f9 ff22 	bl	9152 <sdc_hci_cmd_le_set_random_address>
	switch (hci_opcode) {
    f30e:	e7cd      	b.n	f2ac <hci_internal_cmd_put+0x1d0>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
    f310:	f7f9 ff16 	bl	9140 <sdc_hci_cmd_le_set_adv_params>
    f314:	e7ca      	b.n	f2ac <hci_internal_cmd_put+0x1d0>
		*param_length_out +=
    f316:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
    f31a:	482d      	ldr	r0, [pc, #180]	; (f3d0 <hci_internal_cmd_put+0x2f4>)
		*param_length_out +=
    f31c:	3301      	adds	r3, #1
    f31e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
    f322:	f7f9 feff 	bl	9124 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
	switch (hci_opcode) {
    f326:	e7d2      	b.n	f2ce <hci_internal_cmd_put+0x1f2>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
    f328:	f7f9 ff06 	bl	9138 <sdc_hci_cmd_le_set_adv_data>
	switch (hci_opcode) {
    f32c:	e7be      	b.n	f2ac <hci_internal_cmd_put+0x1d0>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
    f32e:	f7f9 ff12 	bl	9156 <sdc_hci_cmd_le_set_scan_response_data>
	switch (hci_opcode) {
    f332:	e7bb      	b.n	f2ac <hci_internal_cmd_put+0x1d0>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
    f334:	f7f9 ff02 	bl	913c <sdc_hci_cmd_le_set_adv_enable>
	switch (hci_opcode) {
    f338:	e7b8      	b.n	f2ac <hci_internal_cmd_put+0x1d0>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
    f33a:	f7f9 ff03 	bl	9144 <sdc_hci_cmd_le_set_data_related_address_changes>
	switch (hci_opcode) {
    f33e:	e7b5      	b.n	f2ac <hci_internal_cmd_put+0x1d0>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
    f340:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
    f344:	4822      	ldr	r0, [pc, #136]	; (f3d0 <hci_internal_cmd_put+0x2f4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
    f346:	3301      	adds	r3, #1
    f348:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
    f34c:	f7f9 feee 	bl	912c <sdc_hci_cmd_le_read_filter_accept_list_size>
	switch (hci_opcode) {
    f350:	e7bd      	b.n	f2ce <hci_internal_cmd_put+0x1f2>
		return sdc_hci_cmd_le_clear_filter_accept_list();
    f352:	f7f9 fedd 	bl	9110 <sdc_hci_cmd_le_clear_filter_accept_list>
	switch (hci_opcode) {
    f356:	e7a9      	b.n	f2ac <hci_internal_cmd_put+0x1d0>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
    f358:	f7f9 fed8 	bl	910c <sdc_hci_cmd_le_add_device_to_filter_accept_list>
	switch (hci_opcode) {
    f35c:	e7a6      	b.n	f2ac <hci_internal_cmd_put+0x1d0>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
    f35e:	f7f9 fee9 	bl	9134 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
	switch (hci_opcode) {
    f362:	e7a3      	b.n	f2ac <hci_internal_cmd_put+0x1d0>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
    f364:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
    f368:	4919      	ldr	r1, [pc, #100]	; (f3d0 <hci_internal_cmd_put+0x2f4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
    f36a:	3310      	adds	r3, #16
    f36c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
    f370:	f7f9 fed0 	bl	9114 <sdc_hci_cmd_le_encrypt>
	switch (hci_opcode) {
    f374:	e7ab      	b.n	f2ce <hci_internal_cmd_put+0x1f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
    f376:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
    f37a:	4815      	ldr	r0, [pc, #84]	; (f3d0 <hci_internal_cmd_put+0x2f4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
    f37c:	3308      	adds	r3, #8
    f37e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
    f382:	f7f9 fecd 	bl	9120 <sdc_hci_cmd_le_rand>
    f386:	e7a2      	b.n	f2ce <hci_internal_cmd_put+0x1f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
    f388:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f38c:	3308      	adds	r3, #8
    f38e:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
    f392:	2303      	movs	r3, #3
    f394:	71eb      	strb	r3, [r5, #7]
	*(buf + 4) = states2;
    f396:	2300      	movs	r3, #0
    f398:	72eb      	strb	r3, [r5, #11]
    f39a:	e7af      	b.n	f2fc <hci_internal_cmd_put+0x220>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
    f39c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
    f3a0:	480b      	ldr	r0, [pc, #44]	; (f3d0 <hci_internal_cmd_put+0x2f4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
    f3a2:	3302      	adds	r3, #2
    f3a4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
    f3a8:	f7f9 fec2 	bl	9130 <sdc_hci_cmd_le_read_transmit_power>
	switch (hci_opcode) {
    f3ac:	e78f      	b.n	f2ce <hci_internal_cmd_put+0x1f2>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
    f3ae:	4630      	mov	r0, r6
	switch (opcode)	{
    f3b0:	f64f 420b 	movw	r2, #64523	; 0xfc0b
    f3b4:	f830 3b03 	ldrh.w	r3, [r0], #3
    f3b8:	4293      	cmp	r3, r2
    f3ba:	d819      	bhi.n	f3f0 <hci_internal_cmd_put+0x314>
    f3bc:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
    f3c0:	d808      	bhi.n	f3d4 <hci_internal_cmd_put+0x2f8>
    f3c2:	2001      	movs	r0, #1
	switch (hci_opcode) {
    f3c4:	e02f      	b.n	f426 <hci_internal_cmd_put+0x34a>
    f3c6:	bf00      	nop
    f3c8:	20001b47 	.word	0x20001b47
    f3cc:	2000164c 	.word	0x2000164c
    f3d0:	20001b4e 	.word	0x20001b4e
	switch (opcode)	{
    f3d4:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
    f3d8:	3b01      	subs	r3, #1
    f3da:	2b0a      	cmp	r3, #10
    f3dc:	f200 80af 	bhi.w	f53e <hci_internal_cmd_put+0x462>
    f3e0:	e8df f003 	tbb	[pc, r3]
    f3e4:	adad3119 	.word	0xadad3119
    f3e8:	adad59ad 	.word	0xadad59ad
    f3ec:	5047      	.short	0x5047
    f3ee:	5c          	.byte	0x5c
    f3ef:	00          	.byte	0x00
    f3f0:	f503 7240 	add.w	r2, r3, #768	; 0x300
    f3f4:	b292      	uxth	r2, r2
    f3f6:	2a0c      	cmp	r2, #12
    f3f8:	d8e3      	bhi.n	f3c2 <hci_internal_cmd_put+0x2e6>
    f3fa:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
    f3fe:	2b0c      	cmp	r3, #12
    f400:	f200 809b 	bhi.w	f53a <hci_internal_cmd_put+0x45e>
    f404:	e8df f003 	tbb	[pc, r3]
    f408:	68656253 	.word	0x68656253
    f40c:	99996e6b 	.word	0x99996e6b
    f410:	99999999 	.word	0x99999999
    f414:	71          	.byte	0x71
    f415:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
    f416:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
    f41a:	484e      	ldr	r0, [pc, #312]	; (f554 <hci_internal_cmd_put+0x478>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
    f41c:	330c      	adds	r3, #12
    f41e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
    f422:	f7f5 fb13 	bl	4a4c <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
    f426:	f242 0377 	movw	r3, #8311	; 0x2077
    f42a:	429c      	cmp	r4, r3
    f42c:	f200 8088 	bhi.w	f540 <hci_internal_cmd_put+0x464>
    f430:	f242 0332 	movw	r3, #8242	; 0x2032
    f434:	429c      	cmp	r4, r3
    f436:	d072      	beq.n	f51e <hci_internal_cmd_put+0x442>
    f438:	f5a4 5301 	sub.w	r3, r4, #8256	; 0x2040
    f43c:	3b03      	subs	r3, #3
    f43e:	2b01      	cmp	r3, #1
    f440:	f63f ae80 	bhi.w	f144 <hci_internal_cmd_put+0x68>
    f444:	e06b      	b.n	f51e <hci_internal_cmd_put+0x442>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
    f446:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f44a:	3340      	adds	r3, #64	; 0x40
    f44c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    f450:	4b40      	ldr	r3, [pc, #256]	; (f554 <hci_internal_cmd_put+0x478>)
    f452:	2200      	movs	r2, #0
    f454:	801a      	strh	r2, [r3, #0]
	cmds->read_version_info = 1;
    f456:	79eb      	ldrb	r3, [r5, #7]
    f458:	f023 0323 	bic.w	r3, r3, #35	; 0x23
    f45c:	f043 0323 	orr.w	r3, r3, #35	; 0x23
    f460:	71eb      	strb	r3, [r5, #7]
	cmds->read_static_addresses = 1;
    f462:	7a2b      	ldrb	r3, [r5, #8]
    f464:	f023 0307 	bic.w	r3, r3, #7
    f468:	f043 0307 	orr.w	r3, r3, #7
    f46c:	722b      	strb	r3, [r5, #8]
		return 0;
    f46e:	2000      	movs	r0, #0
    f470:	e7d9      	b.n	f426 <hci_internal_cmd_put+0x34a>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
    f472:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
    f476:	4837      	ldr	r0, [pc, #220]	; (f554 <hci_internal_cmd_put+0x478>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
    f478:	3317      	adds	r3, #23
    f47a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
    f47e:	f7f9 fdf0 	bl	9062 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
    f482:	e7d0      	b.n	f426 <hci_internal_cmd_put+0x34a>
		*param_length_out +=
    f484:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
    f488:	4832      	ldr	r0, [pc, #200]	; (f554 <hci_internal_cmd_put+0x478>)
		*param_length_out +=
    f48a:	3320      	adds	r3, #32
    f48c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
    f490:	f7f9 fd9a 	bl	8fc8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
    f494:	e7c7      	b.n	f426 <hci_internal_cmd_put+0x34a>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
    f496:	f7f9 fe33 	bl	9100 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
    f49a:	e7c4      	b.n	f426 <hci_internal_cmd_put+0x34a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
    f49c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
    f4a0:	482c      	ldr	r0, [pc, #176]	; (f554 <hci_internal_cmd_put+0x478>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
    f4a2:	3301      	adds	r3, #1
    f4a4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
    f4a8:	f7f9 fd7a 	bl	8fa0 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
    f4ac:	e7bb      	b.n	f426 <hci_internal_cmd_put+0x34a>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
    f4ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4b2:	3340      	adds	r3, #64	; 0x40
    f4b4:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    f4b8:	4b26      	ldr	r3, [pc, #152]	; (f554 <hci_internal_cmd_put+0x478>)
    f4ba:	2200      	movs	r2, #0
    f4bc:	801a      	strh	r2, [r3, #0]
	cmds->read_supported_vs_commands = 1;
    f4be:	79eb      	ldrb	r3, [r5, #7]
    f4c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    f4c4:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
    f4c8:	71eb      	strb	r3, [r5, #7]
}
    f4ca:	e7d0      	b.n	f46e <hci_internal_cmd_put+0x392>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
    f4cc:	f7f9 fd5f 	bl	8f8e <sdc_hci_cmd_vs_llpm_mode_set>
    f4d0:	e7a9      	b.n	f426 <hci_internal_cmd_put+0x34a>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
    f4d2:	f7f9 fd58 	bl	8f86 <sdc_hci_cmd_vs_conn_update>
    f4d6:	e7a6      	b.n	f426 <hci_internal_cmd_put+0x34a>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
    f4d8:	f7f9 fd4d 	bl	8f76 <sdc_hci_cmd_vs_conn_event_extend>
    f4dc:	e7a3      	b.n	f426 <hci_internal_cmd_put+0x34a>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
    f4de:	f7f9 fd58 	bl	8f92 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
    f4e2:	e7a0      	b.n	f426 <hci_internal_cmd_put+0x34a>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
    f4e4:	f7f9 fd51 	bl	8f8a <sdc_hci_cmd_vs_event_length_set>
    f4e8:	e79d      	b.n	f426 <hci_internal_cmd_put+0x34a>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
    f4ea:	f7f9 fd57 	bl	8f9c <sdc_hci_cmd_vs_set_adv_randomness>
    f4ee:	e79a      	b.n	f426 <hci_internal_cmd_put+0x34a>
	switch (hci_opcode) {
    f4f0:	f242 030c 	movw	r3, #8204	; 0x200c
		return 0;
    f4f4:	2000      	movs	r0, #0
	switch (hci_opcode) {
    f4f6:	429c      	cmp	r4, r3
    f4f8:	d807      	bhi.n	f50a <hci_internal_cmd_put+0x42e>
    f4fa:	f240 431d 	movw	r3, #1053	; 0x41d
    f4fe:	429c      	cmp	r4, r3
    f500:	d00d      	beq.n	f51e <hci_internal_cmd_put+0x442>
    f502:	e61f      	b.n	f144 <hci_internal_cmd_put+0x68>
    f504:	f242 030c 	movw	r3, #8204	; 0x200c
    f508:	e7f5      	b.n	f4f6 <hci_internal_cmd_put+0x41a>
    f50a:	f5a4 5300 	sub.w	r3, r4, #8192	; 0x2000
    f50e:	4a12      	ldr	r2, [pc, #72]	; (f558 <hci_internal_cmd_put+0x47c>)
    f510:	3b0d      	subs	r3, #13
    f512:	b29b      	uxth	r3, r3
    f514:	fa22 f303 	lsr.w	r3, r2, r3
    f518:	07db      	lsls	r3, r3, #31
    f51a:	f57f ae13 	bpl.w	f144 <hci_internal_cmd_put+0x68>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    f51e:	230f      	movs	r3, #15
    f520:	706b      	strb	r3, [r5, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    f522:	2304      	movs	r3, #4
    f524:	70ab      	strb	r3, [r5, #2]
	evt_data->ncmd = 1;
    f526:	2301      	movs	r3, #1
	evt_data->status = status_code;
    f528:	70e8      	strb	r0, [r5, #3]
	evt_data->ncmd = 1;
    f52a:	712b      	strb	r3, [r5, #4]
	evt_data->opcode = hci_opcode;
    f52c:	f8a5 4005 	strh.w	r4, [r5, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
    f530:	2301      	movs	r3, #1
    f532:	702b      	strb	r3, [r5, #0]
	}

	return 0;
    f534:	2000      	movs	r0, #0
}
    f536:	b003      	add	sp, #12
    f538:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (hci_opcode) {
    f53a:	2001      	movs	r0, #1
    f53c:	e6b9      	b.n	f2b2 <hci_internal_cmd_put+0x1d6>
	switch (opcode)	{
    f53e:	2001      	movs	r0, #1
	switch (hci_opcode) {
    f540:	f024 0308 	bic.w	r3, r4, #8
    f544:	f64f 5202 	movw	r2, #64770	; 0xfd02
    f548:	4293      	cmp	r3, r2
    f54a:	e7d9      	b.n	f500 <hci_internal_cmd_put+0x424>
		return -NRF_EPERM;
    f54c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f550:	e7f1      	b.n	f536 <hci_internal_cmd_put+0x45a>
    f552:	bf00      	nop
    f554:	20001b4e 	.word	0x20001b4e
    f558:	03001241 	.word	0x03001241

0000f55c <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
    f55c:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
    f55e:	4c09      	ldr	r4, [pc, #36]	; (f584 <hci_internal_msg_get+0x28>)
    f560:	7823      	ldrb	r3, [r4, #0]
{
    f562:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
    f564:	b91b      	cbnz	r3, f56e <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
    f566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
    f56a:	f7f9 bcef 	b.w	8f4c <sdc_hci_get>
		memcpy(msg_out,
    f56e:	78a2      	ldrb	r2, [r4, #2]
    f570:	1c61      	adds	r1, r4, #1
    f572:	3202      	adds	r2, #2
    f574:	f003 fee2 	bl	1333c <memcpy>
		cmd_complete_or_status.occurred = false;
    f578:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
    f57a:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
    f57c:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
    f57e:	702b      	strb	r3, [r5, #0]
}
    f580:	bd38      	pop	{r3, r4, r5, pc}
    f582:	bf00      	nop
    f584:	20001b47 	.word	0x20001b47

0000f588 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
    f588:	b570      	push	{r4, r5, r6, lr}
    f58a:	4605      	mov	r5, r0
    f58c:	460e      	mov	r6, r1
    f58e:	4c08      	ldr	r4, [pc, #32]	; (f5b0 <bt_rand+0x28>)
    f590:	4620      	mov	r0, r4
    f592:	f003 faf4 	bl	12b7e <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
    f596:	b138      	cbz	r0, f5a8 <bt_rand+0x20>
    f598:	68a3      	ldr	r3, [r4, #8]
    f59a:	b2b2      	uxth	r2, r6
    f59c:	4629      	mov	r1, r5
    f59e:	4620      	mov	r0, r4
    f5a0:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
    f5a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f5a6:	4718      	bx	r3
    f5a8:	f06f 0012 	mvn.w	r0, #18
    f5ac:	bd70      	pop	{r4, r5, r6, pc}
    f5ae:	bf00      	nop
    f5b0:	00013438 	.word	0x00013438

0000f5b4 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
    f5b4:	4901      	ldr	r1, [pc, #4]	; (f5bc <mpsl_low_prio_irq_handler+0x8>)
    f5b6:	4802      	ldr	r0, [pc, #8]	; (f5c0 <mpsl_low_prio_irq_handler+0xc>)
    f5b8:	f003 bc94 	b.w	12ee4 <k_work_submit_to_queue>
    f5bc:	20001650 	.word	0x20001650
    f5c0:	200012c8 	.word	0x200012c8

0000f5c4 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
    f5c4:	b513      	push	{r0, r1, r4, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
    f5c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    f5ca:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
    f5ce:	2300      	movs	r3, #0
    f5d0:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
    f5d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    f5d8:	f8ad 3000 	strh.w	r3, [sp]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    f5dc:	4a0d      	ldr	r2, [pc, #52]	; (f614 <mpsl_lib_init_sys+0x50>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
    f5de:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    f5e0:	2119      	movs	r1, #25
    f5e2:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
    f5e4:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    f5e8:	f7f4 fdde 	bl	41a8 <mpsl_init>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
    f5ec:	4604      	mov	r4, r0
    f5ee:	b970      	cbnz	r0, f60e <mpsl_lib_init_sys+0x4a>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    f5f0:	4601      	mov	r1, r0
    f5f2:	2201      	movs	r2, #1
    f5f4:	2008      	movs	r0, #8
    f5f6:	f7fd f8b3 	bl	c760 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    f5fa:	2201      	movs	r2, #1
    f5fc:	4621      	mov	r1, r4
    f5fe:	200b      	movs	r0, #11
    f600:	f7fd f8ae 	bl	c760 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    f604:	2201      	movs	r2, #1
    f606:	4621      	mov	r1, r4
    f608:	4610      	mov	r0, r2
    f60a:	f7fd f8a9 	bl	c760 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
    f60e:	4620      	mov	r0, r4
    f610:	b002      	add	sp, #8
    f612:	bd10      	pop	{r4, pc}
    f614:	00012a5d 	.word	0x00012a5d

0000f618 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
    f618:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
    f61a:	4d0d      	ldr	r5, [pc, #52]	; (f650 <mpsl_low_prio_init+0x38>)
    f61c:	490d      	ldr	r1, [pc, #52]	; (f654 <mpsl_low_prio_init+0x3c>)
    f61e:	2400      	movs	r4, #0
    f620:	9400      	str	r4, [sp, #0]
    f622:	f06f 0309 	mvn.w	r3, #9
    f626:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f62a:	4628      	mov	r0, r5
    f62c:	f001 f9de 	bl	109ec <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    f630:	4909      	ldr	r1, [pc, #36]	; (f658 <mpsl_low_prio_init+0x40>)
    f632:	4628      	mov	r0, r5
    f634:	f003 fb45 	bl	12cc2 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
    f638:	4908      	ldr	r1, [pc, #32]	; (f65c <mpsl_low_prio_init+0x44>)
    f63a:	4809      	ldr	r0, [pc, #36]	; (f660 <mpsl_low_prio_init+0x48>)
    f63c:	f003 fc35 	bl	12eaa <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
    f640:	4622      	mov	r2, r4
    f642:	2104      	movs	r1, #4
    f644:	2019      	movs	r0, #25
    f646:	f7fd f88b 	bl	c760 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
    f64a:	4620      	mov	r0, r4
    f64c:	b003      	add	sp, #12
    f64e:	bd30      	pop	{r4, r5, pc}
    f650:	200012c8 	.word	0x200012c8
    f654:	20001bc0 	.word	0x20001bc0
    f658:	00013ad2 	.word	0x00013ad2
    f65c:	00012a89 	.word	0x00012a89
    f660:	20001650 	.word	0x20001650

0000f664 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    f664:	4b01      	ldr	r3, [pc, #4]	; (f66c <mpsl_hfclk_callback+0x8>)
    f666:	2000      	movs	r0, #0
    f668:	681b      	ldr	r3, [r3, #0]
    f66a:	4718      	bx	r3
    f66c:	20001660 	.word	0x20001660

0000f670 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
    f670:	b120      	cbz	r0, f67c <nrfx_clock_start+0xc>
    f672:	2801      	cmp	r0, #1
    f674:	d106      	bne.n	f684 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
    f676:	4804      	ldr	r0, [pc, #16]	; (f688 <nrfx_clock_start+0x18>)
    f678:	f7f4 bc2a 	b.w	3ed0 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    f67c:	4b03      	ldr	r3, [pc, #12]	; (f68c <nrfx_clock_start+0x1c>)
    f67e:	2001      	movs	r0, #1
    f680:	681b      	ldr	r3, [r3, #0]
    f682:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
    f684:	4770      	bx	lr
    f686:	bf00      	nop
    f688:	0000f665 	.word	0x0000f665
    f68c:	20001660 	.word	0x20001660

0000f690 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
    f690:	4b01      	ldr	r3, [pc, #4]	; (f698 <nrfx_clock_init+0x8>)
    f692:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
    f694:	4801      	ldr	r0, [pc, #4]	; (f69c <nrfx_clock_init+0xc>)
    f696:	4770      	bx	lr
    f698:	20001660 	.word	0x20001660
    f69c:	0bad0000 	.word	0x0bad0000

0000f6a0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    f6a0:	4a02      	ldr	r2, [pc, #8]	; (f6ac <nvmc_wait+0xc>)
    f6a2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    f6a6:	2b00      	cmp	r3, #0
    f6a8:	d0fb      	beq.n	f6a2 <nvmc_wait+0x2>
}
    f6aa:	4770      	bx	lr
    f6ac:	4001e000 	.word	0x4001e000

0000f6b0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    f6b0:	b510      	push	{r4, lr}
                var2 = *(uint32_t *)0x10000134ul;
            }
        #elif defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f6b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            if (var1 == 0x0E)
    f6b6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    f6ba:	2a0e      	cmp	r2, #14
    f6bc:	d15d      	bne.n	f77a <SystemInit+0xca>

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    f6be:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
    f6c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    f6c6:	f3c2 3242 	ubfx	r2, r2, #13, #3
    f6ca:	f8c1 253c 	str.w	r2, [r1, #1340]	; 0x53c

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    f6ce:	2200      	movs	r2, #0
    f6d0:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    f6d4:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    f6d8:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    f6dc:	4a41      	ldr	r2, [pc, #260]	; (f7e4 <SystemInit+0x134>)
    f6de:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
    f6e2:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    f6e6:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
    f6ea:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    f6ee:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    f6f2:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    f6f6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
    f6fa:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    f6fe:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
    f702:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    f706:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
    f70a:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    f70e:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
    f712:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    f716:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
    f71a:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    f71e:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
    f722:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    f726:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
    f72a:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    f72e:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
    f732:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    f736:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    f73a:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    f73e:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
    f742:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    f746:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
    f74a:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    f74e:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
    f752:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    f756:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
    f75a:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    f75e:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    f762:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    f766:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    f76a:	07db      	lsls	r3, r3, #31
    f76c:	d434      	bmi.n	f7d8 <SystemInit+0x128>

    #if NRF52_ERRATA_217_ENABLE_WORKAROUND
        /* Workaround for Errata 217 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_217()){
            *(volatile uint32_t *)0x40000EE4ul |= 0x0000000Ful;
    f76e:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    f772:	f043 030f 	orr.w	r3, r3, #15
    f776:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    f77a:	f003 f9bb 	bl	12af4 <nrf52_configuration_249>
    f77e:	b338      	cbz	r0, f7d0 <SystemInit+0x120>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    f780:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    f784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f788:	f8d1 2208 	ldr.w	r2, [r1, #520]	; 0x208
    f78c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #endif

    nrf52_handle_approtect();

    #if NRF52_CONFIGURATION_249_ENABLE && (defined(NRF52805_XXAA) || defined(NRF52810_XXAA) || defined(NRF52811_XXAA))
        if (nrf52_configuration_249() && (NRF_UICR->NRFMDK[0] == 0xFFFFFFFF || NRF_UICR->NRFMDK[1] == 0xFFFFFFFF))
    f790:	f003 f9b0 	bl	12af4 <nrf52_configuration_249>
    f794:	b1e0      	cbz	r0, f7d0 <SystemInit+0x120>
    f796:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    f79a:	3301      	adds	r3, #1
    f79c:	d003      	beq.n	f7a6 <SystemInit+0xf6>
    f79e:	f8d1 3104 	ldr.w	r3, [r1, #260]	; 0x104
    f7a2:	3301      	adds	r3, #1
    f7a4:	d114      	bne.n	f7d0 <SystemInit+0x120>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    f7a6:	4810      	ldr	r0, [pc, #64]	; (f7e8 <SystemInit+0x138>)
    f7a8:	2301      	movs	r3, #1
        {
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NRFMDK[0] = 0;
    f7aa:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    f7ae:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
            NRF_UICR->NRFMDK[0] = 0;
    f7b2:	2100      	movs	r1, #0
    nvmc_wait();
    f7b4:	f7ff ff74 	bl	f6a0 <nvmc_wait>
            NRF_UICR->NRFMDK[0] = 0;
    f7b8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
            nvmc_wait();
    f7bc:	f7ff ff70 	bl	f6a0 <nvmc_wait>
            NRF_UICR->NRFMDK[1] = 0;
    f7c0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
            nvmc_wait();
    f7c4:	f7ff ff6c 	bl	f6a0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    f7c8:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    nvmc_wait();
    f7cc:	f7ff ff68 	bl	f6a0 <nvmc_wait>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    f7d0:	4b06      	ldr	r3, [pc, #24]	; (f7ec <SystemInit+0x13c>)
    f7d2:	4a07      	ldr	r2, [pc, #28]	; (f7f0 <SystemInit+0x140>)
    f7d4:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    f7d6:	bd10      	pop	{r4, pc}
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    f7d8:	f06f 0301 	mvn.w	r3, #1
    f7dc:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
    f7e0:	e7c5      	b.n	f76e <SystemInit+0xbe>
    f7e2:	bf00      	nop
    f7e4:	4000c000 	.word	0x4000c000
    f7e8:	4001e000 	.word	0x4001e000
    f7ec:	2000040c 	.word	0x2000040c
    f7f0:	03d09000 	.word	0x03d09000

0000f7f4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    f7f4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    f7f6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    f7f8:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    f7fa:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    f7fe:	fab2 f382 	clz	r3, r2
    f802:	f1c3 031f 	rsb	r3, r3, #31
    f806:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    f808:	fa05 f403 	lsl.w	r4, r5, r3
    f80c:	ea22 0404 	bic.w	r4, r2, r4
    f810:	e850 6f00 	ldrex	r6, [r0]
    f814:	4296      	cmp	r6, r2
    f816:	d104      	bne.n	f822 <nrfx_flag32_alloc+0x2e>
    f818:	e840 4c00 	strex	ip, r4, [r0]
    f81c:	f1bc 0f00 	cmp.w	ip, #0
    f820:	d1f6      	bne.n	f810 <nrfx_flag32_alloc+0x1c>
    f822:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    f826:	d1e7      	bne.n	f7f8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    f828:	4801      	ldr	r0, [pc, #4]	; (f830 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    f82a:	700b      	strb	r3, [r1, #0]
}
    f82c:	bd70      	pop	{r4, r5, r6, pc}
    f82e:	bf00      	nop
    f830:	0bad0000 	.word	0x0bad0000

0000f834 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    f834:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    f836:	6803      	ldr	r3, [r0, #0]
    f838:	40cb      	lsrs	r3, r1
    f83a:	07db      	lsls	r3, r3, #31
    f83c:	d414      	bmi.n	f868 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    f83e:	2301      	movs	r3, #1
    f840:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    f842:	6802      	ldr	r2, [r0, #0]
    f844:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    f848:	ea43 0102 	orr.w	r1, r3, r2
    f84c:	e850 4f00 	ldrex	r4, [r0]
    f850:	4294      	cmp	r4, r2
    f852:	d104      	bne.n	f85e <nrfx_flag32_free+0x2a>
    f854:	e840 1c00 	strex	ip, r1, [r0]
    f858:	f1bc 0f00 	cmp.w	ip, #0
    f85c:	d1f6      	bne.n	f84c <nrfx_flag32_free+0x18>
    f85e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    f862:	d1ee      	bne.n	f842 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    f864:	4801      	ldr	r0, [pc, #4]	; (f86c <nrfx_flag32_free+0x38>)
}
    f866:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    f868:	4801      	ldr	r0, [pc, #4]	; (f870 <nrfx_flag32_free+0x3c>)
    f86a:	e7fc      	b.n	f866 <nrfx_flag32_free+0x32>
    f86c:	0bad0000 	.word	0x0bad0000
    f870:	0bad0004 	.word	0x0bad0004

0000f874 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    f874:	4b03      	ldr	r3, [pc, #12]	; (f884 <pin_in_use_by_te+0x10>)
    f876:	3008      	adds	r0, #8
    f878:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    f87c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f880:	4770      	bx	lr
    f882:	bf00      	nop
    f884:	20000410 	.word	0x20000410

0000f888 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    f888:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    f88a:	f100 0308 	add.w	r3, r0, #8
    f88e:	4c0c      	ldr	r4, [pc, #48]	; (f8c0 <call_handler+0x38>)
    f890:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    f894:	05da      	lsls	r2, r3, #23
{
    f896:	4605      	mov	r5, r0
    f898:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    f89a:	d507      	bpl.n	f8ac <call_handler+0x24>
    f89c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    f8a0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    f8a4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    f8a8:	6852      	ldr	r2, [r2, #4]
    f8aa:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    f8ac:	68a3      	ldr	r3, [r4, #8]
    f8ae:	b12b      	cbz	r3, f8bc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    f8b0:	68e2      	ldr	r2, [r4, #12]
    f8b2:	4631      	mov	r1, r6
    f8b4:	4628      	mov	r0, r5
    }
}
    f8b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    f8ba:	4718      	bx	r3
}
    f8bc:	bd70      	pop	{r4, r5, r6, pc}
    f8be:	bf00      	nop
    f8c0:	20000410 	.word	0x20000410

0000f8c4 <release_handler>:
{
    f8c4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    f8c6:	4a12      	ldr	r2, [pc, #72]	; (f910 <release_handler+0x4c>)
    f8c8:	3008      	adds	r0, #8
    f8ca:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    f8ce:	05d9      	lsls	r1, r3, #23
    f8d0:	d51b      	bpl.n	f90a <release_handler+0x46>
    f8d2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    f8d6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    f8da:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    f8de:	f102 040e 	add.w	r4, r2, #14
    f8e2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    f8e4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    f8e8:	f413 7f80 	tst.w	r3, #256	; 0x100
    f8ec:	d003      	beq.n	f8f6 <release_handler+0x32>
    f8ee:	f3c3 2343 	ubfx	r3, r3, #9, #4
    f8f2:	4299      	cmp	r1, r3
    f8f4:	d009      	beq.n	f90a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    f8f6:	3001      	adds	r0, #1
    f8f8:	2820      	cmp	r0, #32
    f8fa:	d1f3      	bne.n	f8e4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    f8fc:	2300      	movs	r3, #0
    f8fe:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    f902:	4804      	ldr	r0, [pc, #16]	; (f914 <release_handler+0x50>)
}
    f904:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    f906:	f7ff bf95 	b.w	f834 <nrfx_flag32_free>
}
    f90a:	bc10      	pop	{r4}
    f90c:	4770      	bx	lr
    f90e:	bf00      	nop
    f910:	20000410 	.word	0x20000410
    f914:	20000464 	.word	0x20000464

0000f918 <pin_handler_trigger_uninit>:
{
    f918:	b538      	push	{r3, r4, r5, lr}
    f91a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    f91c:	f7ff ffaa 	bl	f874 <pin_in_use_by_te>
    f920:	4c09      	ldr	r4, [pc, #36]	; (f948 <pin_handler_trigger_uninit+0x30>)
    f922:	f102 0508 	add.w	r5, r2, #8
    f926:	b140      	cbz	r0, f93a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    f928:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    f92c:	4907      	ldr	r1, [pc, #28]	; (f94c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    f92e:	0b5b      	lsrs	r3, r3, #13
    f930:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    f934:	2000      	movs	r0, #0
    f936:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    f93a:	4610      	mov	r0, r2
    f93c:	f7ff ffc2 	bl	f8c4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    f940:	2300      	movs	r3, #0
    f942:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    f946:	bd38      	pop	{r3, r4, r5, pc}
    f948:	20000410 	.word	0x20000410
    f94c:	40006000 	.word	0x40006000

0000f950 <nrfx_gpiote_input_configure>:
{
    f950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f954:	4604      	mov	r4, r0
    f956:	461d      	mov	r5, r3
    if (p_input_config)
    f958:	b309      	cbz	r1, f99e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f95a:	4f4f      	ldr	r7, [pc, #316]	; (fa98 <nrfx_gpiote_input_configure+0x148>)
    f95c:	f100 0808 	add.w	r8, r0, #8
    f960:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    f964:	07b3      	lsls	r3, r6, #30
    f966:	d506      	bpl.n	f976 <nrfx_gpiote_input_configure+0x26>
    f968:	f7ff ff84 	bl	f874 <pin_in_use_by_te>
    f96c:	b118      	cbz	r0, f976 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    f96e:	484b      	ldr	r0, [pc, #300]	; (fa9c <nrfx_gpiote_input_configure+0x14c>)
}
    f970:	b002      	add	sp, #8
    f972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    f976:	f004 031f 	and.w	r3, r4, #31
    f97a:	009b      	lsls	r3, r3, #2
    f97c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    f980:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    f982:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    f986:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    f98a:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    f98e:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    f992:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    f996:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    f99a:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    f99e:	b19a      	cbz	r2, f9c8 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f9a0:	4b3d      	ldr	r3, [pc, #244]	; (fa98 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    f9a2:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    f9a4:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    f9a6:	f104 0608 	add.w	r6, r4, #8
    f9aa:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    f9ae:	f011 0f02 	tst.w	r1, #2
    f9b2:	d00d      	beq.n	f9d0 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    f9b4:	2800      	cmp	r0, #0
    f9b6:	d1da      	bne.n	f96e <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    f9b8:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    f9bc:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    f9c0:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    f9c4:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    f9c8:	2d00      	cmp	r5, #0
    f9ca:	d13b      	bne.n	fa44 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
    f9cc:	4834      	ldr	r0, [pc, #208]	; (faa0 <nrfx_gpiote_input_configure+0x150>)
    f9ce:	e7cf      	b.n	f970 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    f9d0:	f021 0120 	bic.w	r1, r1, #32
    f9d4:	04c9      	lsls	r1, r1, #19
    f9d6:	0cc9      	lsrs	r1, r1, #19
    f9d8:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    f9dc:	2800      	cmp	r0, #0
    f9de:	d0eb      	beq.n	f9b8 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    f9e0:	2f03      	cmp	r7, #3
    f9e2:	d8c4      	bhi.n	f96e <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    f9e4:	6852      	ldr	r2, [r2, #4]
    f9e6:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    f9ea:	b92f      	cbnz	r7, f9f8 <nrfx_gpiote_input_configure+0xa8>
    f9ec:	4a2d      	ldr	r2, [pc, #180]	; (faa4 <nrfx_gpiote_input_configure+0x154>)
    f9ee:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    f9f2:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    f9f6:	e7df      	b.n	f9b8 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    f9f8:	ea4f 028c 	mov.w	r2, ip, lsl #2
    f9fc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    fa00:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    fa04:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    fa08:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    fa0c:	f020 0003 	bic.w	r0, r0, #3
    fa10:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    fa14:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    fa18:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    fa1c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    fa20:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    fa24:	0220      	lsls	r0, r4, #8
    fa26:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    fa2a:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    fa2e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    fa32:	ea40 000e 	orr.w	r0, r0, lr
    fa36:	f041 0120 	orr.w	r1, r1, #32
    fa3a:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    fa3e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    fa42:	e7b9      	b.n	f9b8 <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    fa44:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    fa48:	4620      	mov	r0, r4
    fa4a:	f7ff ff3b 	bl	f8c4 <release_handler>
    if (!handler)
    fa4e:	2e00      	cmp	r6, #0
    fa50:	d0bc      	beq.n	f9cc <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    fa52:	4d11      	ldr	r5, [pc, #68]	; (fa98 <nrfx_gpiote_input_configure+0x148>)
    fa54:	e9d5 2300 	ldrd	r2, r3, [r5]
    fa58:	4296      	cmp	r6, r2
    fa5a:	d101      	bne.n	fa60 <nrfx_gpiote_input_configure+0x110>
    fa5c:	429f      	cmp	r7, r3
    fa5e:	d019      	beq.n	fa94 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    fa60:	4811      	ldr	r0, [pc, #68]	; (faa8 <nrfx_gpiote_input_configure+0x158>)
    fa62:	f10d 0107 	add.w	r1, sp, #7
    fa66:	f7ff fec5 	bl	f7f4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    fa6a:	4b0d      	ldr	r3, [pc, #52]	; (faa0 <nrfx_gpiote_input_configure+0x150>)
    fa6c:	4298      	cmp	r0, r3
    fa6e:	f47f af7f 	bne.w	f970 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    fa72:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    fa76:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    fa7a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    fa7e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    fa80:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    fa82:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    fa86:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    fa8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    fa8e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    fa92:	e79b      	b.n	f9cc <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    fa94:	2200      	movs	r2, #0
    fa96:	e7ee      	b.n	fa76 <nrfx_gpiote_input_configure+0x126>
    fa98:	20000410 	.word	0x20000410
    fa9c:	0bad0004 	.word	0x0bad0004
    faa0:	0bad0000 	.word	0x0bad0000
    faa4:	40006000 	.word	0x40006000
    faa8:	20000464 	.word	0x20000464

0000faac <nrfx_gpiote_output_configure>:
{
    faac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    faae:	4604      	mov	r4, r0
    if (p_config)
    fab0:	b389      	cbz	r1, fb16 <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    fab2:	4e3a      	ldr	r6, [pc, #232]	; (fb9c <nrfx_gpiote_output_configure+0xf0>)
    fab4:	f100 0708 	add.w	r7, r0, #8
    fab8:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    fabc:	07ab      	lsls	r3, r5, #30
    fabe:	d404      	bmi.n	faca <nrfx_gpiote_output_configure+0x1e>
    fac0:	f7ff fed8 	bl	f874 <pin_in_use_by_te>
    fac4:	b108      	cbz	r0, faca <nrfx_gpiote_output_configure+0x1e>
{
    fac6:	4836      	ldr	r0, [pc, #216]	; (fba0 <nrfx_gpiote_output_configure+0xf4>)
}
    fac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    faca:	f015 0f1c 	tst.w	r5, #28
    face:	784b      	ldrb	r3, [r1, #1]
    fad0:	d124      	bne.n	fb1c <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    fad2:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    fad6:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    fada:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    fade:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    fae0:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    fae4:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    fae8:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    faea:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    faee:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    faf2:	f02c 0c07 	bic.w	ip, ip, #7
    faf6:	ea43 030c 	orr.w	r3, r3, ip
    fafa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    fafe:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    fb02:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    fb06:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    fb0a:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    fb0e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    fb12:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    fb16:	b922      	cbnz	r2, fb22 <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    fb18:	4822      	ldr	r0, [pc, #136]	; (fba4 <nrfx_gpiote_output_configure+0xf8>)
    fb1a:	e7d5      	b.n	fac8 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    fb1c:	2b01      	cmp	r3, #1
    fb1e:	d1d8      	bne.n	fad2 <nrfx_gpiote_output_configure+0x26>
    fb20:	e7d1      	b.n	fac6 <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    fb22:	4e1e      	ldr	r6, [pc, #120]	; (fb9c <nrfx_gpiote_output_configure+0xf0>)
    fb24:	f104 0708 	add.w	r7, r4, #8
    fb28:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    fb2c:	0783      	lsls	r3, r0, #30
    fb2e:	d5ca      	bpl.n	fac6 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    fb30:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    fb34:	4661      	mov	r1, ip
    fb36:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    fb38:	f020 0020 	bic.w	r0, r0, #32
    fb3c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    fb40:	04c0      	lsls	r0, r0, #19
    fb42:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    fb46:	0cc0      	lsrs	r0, r0, #19
    fb48:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    fb4c:	2300      	movs	r3, #0
    fb4e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    fb52:	7855      	ldrb	r5, [r2, #1]
    fb54:	2d00      	cmp	r5, #0
    fb56:	d0df      	beq.n	fb18 <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    fb58:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    fb5c:	7892      	ldrb	r2, [r2, #2]
    fb5e:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    fb62:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    fb66:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    fb6a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    fb6e:	0223      	lsls	r3, r4, #8
    fb70:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    fb74:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    fb76:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    fb7a:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    fb7e:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    fb80:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    fb82:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    fb86:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    fb8a:	4313      	orrs	r3, r2
    fb8c:	f040 0020 	orr.w	r0, r0, #32
    fb90:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    fb94:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    fb98:	e7be      	b.n	fb18 <nrfx_gpiote_output_configure+0x6c>
    fb9a:	bf00      	nop
    fb9c:	20000410 	.word	0x20000410
    fba0:	0bad0004 	.word	0x0bad0004
    fba4:	0bad0000 	.word	0x0bad0000

0000fba8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    fba8:	4b01      	ldr	r3, [pc, #4]	; (fbb0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    fbaa:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    fbae:	4770      	bx	lr
    fbb0:	20000410 	.word	0x20000410

0000fbb4 <nrfx_gpiote_channel_get>:
{
    fbb4:	b508      	push	{r3, lr}
    fbb6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    fbb8:	f7ff fe5c 	bl	f874 <pin_in_use_by_te>
    fbbc:	b138      	cbz	r0, fbce <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    fbbe:	4b05      	ldr	r3, [pc, #20]	; (fbd4 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    fbc0:	4805      	ldr	r0, [pc, #20]	; (fbd8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    fbc2:	3208      	adds	r2, #8
    fbc4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    fbc8:	0b5b      	lsrs	r3, r3, #13
    fbca:	700b      	strb	r3, [r1, #0]
}
    fbcc:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    fbce:	4803      	ldr	r0, [pc, #12]	; (fbdc <nrfx_gpiote_channel_get+0x28>)
    fbd0:	e7fc      	b.n	fbcc <nrfx_gpiote_channel_get+0x18>
    fbd2:	bf00      	nop
    fbd4:	20000410 	.word	0x20000410
    fbd8:	0bad0000 	.word	0x0bad0000
    fbdc:	0bad0004 	.word	0x0bad0004

0000fbe0 <nrfx_gpiote_init>:
{
    fbe0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    fbe2:	4c0f      	ldr	r4, [pc, #60]	; (fc20 <nrfx_gpiote_init+0x40>)
    fbe4:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    fbe8:	b9bd      	cbnz	r5, fc1a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    fbea:	2240      	movs	r2, #64	; 0x40
    fbec:	4629      	mov	r1, r5
    fbee:	f104 0010 	add.w	r0, r4, #16
    fbf2:	f003 fbb1 	bl	13358 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    fbf6:	2006      	movs	r0, #6
    fbf8:	f7fc fd82 	bl	c700 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    fbfc:	4b09      	ldr	r3, [pc, #36]	; (fc24 <nrfx_gpiote_init+0x44>)
    return err_code;
    fbfe:	480a      	ldr	r0, [pc, #40]	; (fc28 <nrfx_gpiote_init+0x48>)
    fc00:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    fc04:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    fc08:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    fc0c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    fc10:	2301      	movs	r3, #1
    fc12:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    fc16:	6563      	str	r3, [r4, #84]	; 0x54
}
    fc18:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    fc1a:	4804      	ldr	r0, [pc, #16]	; (fc2c <nrfx_gpiote_init+0x4c>)
    fc1c:	e7fc      	b.n	fc18 <nrfx_gpiote_init+0x38>
    fc1e:	bf00      	nop
    fc20:	20000410 	.word	0x20000410
    fc24:	40006000 	.word	0x40006000
    fc28:	0bad0000 	.word	0x0bad0000
    fc2c:	0bad0005 	.word	0x0bad0005

0000fc30 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    fc30:	4b03      	ldr	r3, [pc, #12]	; (fc40 <nrfx_gpiote_is_init+0x10>)
    fc32:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    fc36:	3800      	subs	r0, #0
    fc38:	bf18      	it	ne
    fc3a:	2001      	movne	r0, #1
    fc3c:	4770      	bx	lr
    fc3e:	bf00      	nop
    fc40:	20000410 	.word	0x20000410

0000fc44 <nrfx_gpiote_channel_free>:
{
    fc44:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    fc46:	4801      	ldr	r0, [pc, #4]	; (fc4c <nrfx_gpiote_channel_free+0x8>)
    fc48:	f7ff bdf4 	b.w	f834 <nrfx_flag32_free>
    fc4c:	20000460 	.word	0x20000460

0000fc50 <nrfx_gpiote_channel_alloc>:
{
    fc50:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    fc52:	4801      	ldr	r0, [pc, #4]	; (fc58 <nrfx_gpiote_channel_alloc+0x8>)
    fc54:	f7ff bdce 	b.w	f7f4 <nrfx_flag32_alloc>
    fc58:	20000460 	.word	0x20000460

0000fc5c <nrfx_gpiote_trigger_enable>:
{
    fc5c:	b510      	push	{r4, lr}
    fc5e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    fc60:	f7ff fe08 	bl	f874 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    fc64:	f102 0408 	add.w	r4, r2, #8
    fc68:	4b1c      	ldr	r3, [pc, #112]	; (fcdc <nrfx_gpiote_trigger_enable+0x80>)
    fc6a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    fc6e:	b1e0      	cbz	r0, fcaa <nrfx_gpiote_trigger_enable+0x4e>
    fc70:	f013 0402 	ands.w	r4, r3, #2
    fc74:	d119      	bne.n	fcaa <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    fc76:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    fc78:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    fc7a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    fc7e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    fc82:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    fc86:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    fc8a:	6004      	str	r4, [r0, #0]
    fc8c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    fc8e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    fc92:	f040 0001 	orr.w	r0, r0, #1
    fc96:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    fc9a:	b129      	cbz	r1, fca8 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    fc9c:	2201      	movs	r2, #1
    fc9e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    fca2:	4a0f      	ldr	r2, [pc, #60]	; (fce0 <nrfx_gpiote_trigger_enable+0x84>)
    fca4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    fca8:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    fcaa:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    fcae:	2b04      	cmp	r3, #4
    fcb0:	d010      	beq.n	fcd4 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    fcb2:	2b05      	cmp	r3, #5
    fcb4:	d010      	beq.n	fcd8 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    fcb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    fcba:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    fcbe:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    fcc2:	40d9      	lsrs	r1, r3
    fcc4:	f001 0101 	and.w	r1, r1, #1
    fcc8:	3102      	adds	r1, #2
}
    fcca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    fcce:	4610      	mov	r0, r2
    fcd0:	f002 bf21 	b.w	12b16 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    fcd4:	2103      	movs	r1, #3
    fcd6:	e7f8      	b.n	fcca <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    fcd8:	2102      	movs	r1, #2
    fcda:	e7f6      	b.n	fcca <nrfx_gpiote_trigger_enable+0x6e>
    fcdc:	20000410 	.word	0x20000410
    fce0:	40006000 	.word	0x40006000

0000fce4 <nrfx_gpiote_trigger_disable>:
{
    fce4:	b508      	push	{r3, lr}
    fce6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    fce8:	f7ff fdc4 	bl	f874 <pin_in_use_by_te>
    fcec:	b1c0      	cbz	r0, fd20 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    fcee:	f102 0108 	add.w	r1, r2, #8
    fcf2:	4b0e      	ldr	r3, [pc, #56]	; (fd2c <nrfx_gpiote_trigger_disable+0x48>)
    fcf4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    fcf8:	0799      	lsls	r1, r3, #30
    fcfa:	d411      	bmi.n	fd20 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    fcfc:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    fcfe:	2201      	movs	r2, #1
    fd00:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    fd02:	009b      	lsls	r3, r3, #2
    fd04:	490a      	ldr	r1, [pc, #40]	; (fd30 <nrfx_gpiote_trigger_disable+0x4c>)
    fd06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    fd0a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    fd0e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    fd12:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    fd16:	f022 0203 	bic.w	r2, r2, #3
    fd1a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    fd1e:	bd08      	pop	{r3, pc}
    fd20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    fd24:	2100      	movs	r1, #0
    fd26:	4610      	mov	r0, r2
    fd28:	f002 bef5 	b.w	12b16 <nrf_gpio_cfg_sense_set>
    fd2c:	20000410 	.word	0x20000410
    fd30:	40006000 	.word	0x40006000

0000fd34 <nrfx_gpiote_pin_uninit>:
{
    fd34:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    fd36:	4b0d      	ldr	r3, [pc, #52]	; (fd6c <nrfx_gpiote_pin_uninit+0x38>)
    fd38:	f100 0208 	add.w	r2, r0, #8
{
    fd3c:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    fd3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    fd42:	07db      	lsls	r3, r3, #31
    fd44:	d50f      	bpl.n	fd66 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    fd46:	f7ff ffcd 	bl	fce4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    fd4a:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    fd4c:	f004 041f 	and.w	r4, r4, #31
    fd50:	f7ff fde2 	bl	f918 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    fd54:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    fd58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    fd5c:	2202      	movs	r2, #2
    fd5e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    fd62:	4803      	ldr	r0, [pc, #12]	; (fd70 <nrfx_gpiote_pin_uninit+0x3c>)
}
    fd64:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    fd66:	4803      	ldr	r0, [pc, #12]	; (fd74 <nrfx_gpiote_pin_uninit+0x40>)
    fd68:	e7fc      	b.n	fd64 <nrfx_gpiote_pin_uninit+0x30>
    fd6a:	bf00      	nop
    fd6c:	20000410 	.word	0x20000410
    fd70:	0bad0000 	.word	0x0bad0000
    fd74:	0bad0004 	.word	0x0bad0004

0000fd78 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    fd78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd7c:	4b4f      	ldr	r3, [pc, #316]	; (febc <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
    fd7e:	4850      	ldr	r0, [pc, #320]	; (fec0 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    fd80:	4950      	ldr	r1, [pc, #320]	; (fec4 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
    fd82:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    fd84:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    fd86:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fd88:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    fd8a:	b136      	cbz	r6, fd9a <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    fd8c:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    fd90:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    fd92:	bf1e      	ittt	ne
    fd94:	601c      	strne	r4, [r3, #0]
    fd96:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    fd98:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    fd9a:	3304      	adds	r3, #4
    fd9c:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    fd9e:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    fda2:	d1f1      	bne.n	fd88 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fda4:	4b46      	ldr	r3, [pc, #280]	; (fec0 <nrfx_gpiote_irq_handler+0x148>)
    fda6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    fdaa:	b1bb      	cbz	r3, fddc <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    fdac:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    fdb0:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    fdb4:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    fdb6:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    fdba:	af01      	add	r7, sp, #4
    fdbc:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    fdc0:	9c01      	ldr	r4, [sp, #4]
    fdc2:	b98c      	cbnz	r4, fde8 <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    fdc4:	4b3e      	ldr	r3, [pc, #248]	; (fec0 <nrfx_gpiote_irq_handler+0x148>)
    fdc6:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    fdca:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    fdce:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    fdd2:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    fdd4:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    fdd8:	2b00      	cmp	r3, #0
    fdda:	d1ee      	bne.n	fdba <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    fddc:	2401      	movs	r4, #1
    while (mask)
    fdde:	2d00      	cmp	r5, #0
    fde0:	d153      	bne.n	fe8a <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    fde2:	b003      	add	sp, #12
    fde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    fde8:	fa94 f4a4 	rbit	r4, r4
    fdec:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    fdf0:	4a35      	ldr	r2, [pc, #212]	; (fec8 <nrfx_gpiote_irq_handler+0x150>)
    fdf2:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    fdf6:	08e0      	lsrs	r0, r4, #3
    fdf8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    fdfc:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    fdfe:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    fe02:	fa08 f202 	lsl.w	r2, r8, r2
    fe06:	ea23 0302 	bic.w	r3, r3, r2
    fe0a:	543b      	strb	r3, [r7, r0]
    fe0c:	00a3      	lsls	r3, r4, #2
    fe0e:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    fe12:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    fe16:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    fe1a:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    fe1c:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    fe1e:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    fe22:	d518      	bpl.n	fe56 <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
    fe24:	4659      	mov	r1, fp
    fe26:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    fe28:	fa5f fa82 	uxtb.w	sl, r2
    fe2c:	f7ff fd2c 	bl	f888 <call_handler>
    fe30:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    fe34:	f3c3 4301 	ubfx	r3, r3, #16, #2
    fe38:	459a      	cmp	sl, r3
    fe3a:	d107      	bne.n	fe4c <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    fe3c:	2100      	movs	r1, #0
    fe3e:	4620      	mov	r0, r4
    fe40:	f002 fe69 	bl	12b16 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    fe44:	4651      	mov	r1, sl
    fe46:	4620      	mov	r0, r4
    fe48:	f002 fe65 	bl	12b16 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    fe4c:	fa08 f404 	lsl.w	r4, r8, r4
    fe50:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    fe54:	e7b4      	b.n	fdc0 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    fe56:	2a02      	cmp	r2, #2
    fe58:	d10c      	bne.n	fe74 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    fe5a:	2103      	movs	r1, #3
    fe5c:	4620      	mov	r0, r4
    fe5e:	f002 fe5a 	bl	12b16 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    fe62:	f00a 0305 	and.w	r3, sl, #5
    fe66:	2b01      	cmp	r3, #1
    fe68:	d1f0      	bne.n	fe4c <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
    fe6a:	4659      	mov	r1, fp
    fe6c:	4620      	mov	r0, r4
    fe6e:	f7ff fd0b 	bl	f888 <call_handler>
    fe72:	e7eb      	b.n	fe4c <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    fe74:	2102      	movs	r1, #2
    fe76:	4620      	mov	r0, r4
    fe78:	f002 fe4d 	bl	12b16 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    fe7c:	f1ba 0f03 	cmp.w	sl, #3
    fe80:	d0f3      	beq.n	fe6a <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    fe82:	2a03      	cmp	r2, #3
    fe84:	d1e2      	bne.n	fe4c <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    fe86:	458a      	cmp	sl, r1
    fe88:	e7ee      	b.n	fe68 <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    fe8a:	fa95 f3a5 	rbit	r3, r5
    fe8e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    fe92:	fa04 f203 	lsl.w	r2, r4, r3
    fe96:	009b      	lsls	r3, r3, #2
    fe98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    fe9c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    fea0:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    fea4:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    fea8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    feac:	f3c0 2004 	ubfx	r0, r0, #8, #5
    feb0:	f3c1 4101 	ubfx	r1, r1, #16, #2
    feb4:	f7ff fce8 	bl	f888 <call_handler>
    feb8:	e791      	b.n	fdde <nrfx_gpiote_irq_handler+0x66>
    feba:	bf00      	nop
    febc:	40006100 	.word	0x40006100
    fec0:	40006000 	.word	0x40006000
    fec4:	40006120 	.word	0x40006120
    fec8:	20000410 	.word	0x20000410

0000fecc <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    fecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    fed0:	4d52      	ldr	r5, [pc, #328]	; (1001c <nrfx_spim_init+0x150>)
{
    fed2:	460c      	mov	r4, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    fed4:	7901      	ldrb	r1, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    fed6:	014f      	lsls	r7, r1, #5
    fed8:	eb05 1141 	add.w	r1, r5, r1, lsl #5
{
    fedc:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    fede:	7f08      	ldrb	r0, [r1, #28]
    fee0:	2800      	cmp	r0, #0
    fee2:	f040 8098 	bne.w	10016 <nrfx_spim_init+0x14a>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    fee6:	f8d6 8000 	ldr.w	r8, [r6]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    feea:	51ea      	str	r2, [r5, r7]
    p_cb->p_context = p_context;
    feec:	604b      	str	r3, [r1, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    feee:	7be0      	ldrb	r0, [r4, #15]
    fef0:	7f8a      	ldrb	r2, [r1, #30]
    fef2:	f360 0200 	bfi	r2, r0, #0, #1
    fef6:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    fef8:	7920      	ldrb	r0, [r4, #4]
    fefa:	b2d2      	uxtb	r2, r2
    fefc:	f360 0241 	bfi	r2, r0, #1, #1
    ff00:	778a      	strb	r2, [r1, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
    ff02:	78e3      	ldrb	r3, [r4, #3]
    ff04:	77cb      	strb	r3, [r1, #31]
    if (!p_config->skip_gpio_cfg)
    ff06:	7be3      	ldrb	r3, [r4, #15]
    ff08:	f8d6 9000 	ldr.w	r9, [r6]
    ff0c:	2b00      	cmp	r3, #0
    ff0e:	d140      	bne.n	ff92 <nrfx_spim_init+0xc6>
        nrf_gpio_pin_write(p_config->sck_pin,
    ff10:	7b21      	ldrb	r1, [r4, #12]
    ff12:	7820      	ldrb	r0, [r4, #0]
    ff14:	2901      	cmp	r1, #1
    ff16:	bf94      	ite	ls
    ff18:	2100      	movls	r1, #0
    ff1a:	2101      	movhi	r1, #1
    ff1c:	f002 fe15 	bl	12b4a <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    ff20:	7823      	ldrb	r3, [r4, #0]
    ff22:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    ff26:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    ff2a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    ff2e:	2201      	movs	r2, #1
    ff30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    ff34:	7863      	ldrb	r3, [r4, #1]
    ff36:	2bff      	cmp	r3, #255	; 0xff
    ff38:	d00c      	beq.n	ff54 <nrfx_spim_init+0x88>
    *p_pin = pin_number & 0x1F;
    ff3a:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    ff3e:	409a      	lsls	r2, r3
    p_reg->OUTCLR = clr_mask;
    ff40:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    ff44:	7863      	ldrb	r3, [r4, #1]
    ff46:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    ff4a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    ff4e:	2203      	movs	r2, #3
    ff50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    ff54:	78a3      	ldrb	r3, [r4, #2]
    ff56:	2bff      	cmp	r3, #255	; 0xff
    ff58:	d009      	beq.n	ff6e <nrfx_spim_init+0xa2>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    ff5a:	7ba2      	ldrb	r2, [r4, #14]
    *p_pin = pin_number & 0x1F;
    ff5c:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    ff60:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    ff64:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    ff68:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    ff6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    ff6e:	78e0      	ldrb	r0, [r4, #3]
    ff70:	28ff      	cmp	r0, #255	; 0xff
    ff72:	d00e      	beq.n	ff92 <nrfx_spim_init+0xc6>
                               p_config->ss_active_high ? 0 : 1);
    ff74:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
    ff76:	f081 0101 	eor.w	r1, r1, #1
    ff7a:	f002 fde6 	bl	12b4a <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    ff7e:	78e3      	ldrb	r3, [r4, #3]
    ff80:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    ff84:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    ff88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    ff8c:	2103      	movs	r1, #3
    ff8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    ff92:	7c23      	ldrb	r3, [r4, #16]
    ff94:	b993      	cbnz	r3, ffbc <nrfx_spim_init+0xf0>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    ff96:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    ff98:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    ff9a:	2bff      	cmp	r3, #255	; 0xff
    ff9c:	bf18      	it	ne
    ff9e:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    ffa0:	78a3      	ldrb	r3, [r4, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    ffa2:	f8c9 1508 	str.w	r1, [r9, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    ffa6:	bf08      	it	eq
    ffa8:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    ffac:	2bff      	cmp	r3, #255	; 0xff
    ffae:	bf08      	it	eq
    ffb0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    p_reg->PSEL.MOSI = mosi_pin;
    ffb4:	f8c9 250c 	str.w	r2, [r9, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    ffb8:	f8c9 3510 	str.w	r3, [r9, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    ffbc:	68a3      	ldr	r3, [r4, #8]
    ffbe:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    ffc2:	7b63      	ldrb	r3, [r4, #13]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    ffc4:	7b22      	ldrb	r2, [r4, #12]
    ffc6:	3b00      	subs	r3, #0
    ffc8:	bf18      	it	ne
    ffca:	2301      	movne	r3, #1
    switch (spi_mode)
    ffcc:	2a02      	cmp	r2, #2
    ffce:	d01c      	beq.n	1000a <nrfx_spim_init+0x13e>
    ffd0:	2a03      	cmp	r2, #3
    ffd2:	d01d      	beq.n	10010 <nrfx_spim_init+0x144>
    ffd4:	2a01      	cmp	r2, #1
    ffd6:	d101      	bne.n	ffdc <nrfx_spim_init+0x110>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    ffd8:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    ffdc:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    ffe0:	79a3      	ldrb	r3, [r4, #6]
    ffe2:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    ffe6:	2307      	movs	r3, #7
    ffe8:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    ffec:	59eb      	ldr	r3, [r5, r7]
    ffee:	b123      	cbz	r3, fffa <nrfx_spim_init+0x12e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    fff0:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    fff2:	f340 3007 	sbfx	r0, r0, #12, #8
    fff6:	f7fc fb83 	bl	c700 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    fffa:	443d      	add	r5, r7
    fffc:	2300      	movs	r3, #0
    fffe:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   10000:	4807      	ldr	r0, [pc, #28]	; (10020 <nrfx_spim_init+0x154>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   10002:	2301      	movs	r3, #1
   10004:	772b      	strb	r3, [r5, #28]
}
   10006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1000a:	f043 0304 	orr.w	r3, r3, #4
        break;
   1000e:	e7e5      	b.n	ffdc <nrfx_spim_init+0x110>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   10010:	f043 0306 	orr.w	r3, r3, #6
        break;
   10014:	e7e2      	b.n	ffdc <nrfx_spim_init+0x110>
        return err_code;
   10016:	4803      	ldr	r0, [pc, #12]	; (10024 <nrfx_spim_init+0x158>)
   10018:	e7f5      	b.n	10006 <nrfx_spim_init+0x13a>
   1001a:	bf00      	nop
   1001c:	20001664 	.word	0x20001664
   10020:	0bad0000 	.word	0x0bad0000
   10024:	0bad0005 	.word	0x0bad0005

00010028 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   10028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1002a:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   1002c:	4d20      	ldr	r5, [pc, #128]	; (100b0 <nrfx_spim_uninit+0x88>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   1002e:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   10030:	015e      	lsls	r6, r3, #5
   10032:	eb05 1743 	add.w	r7, r5, r3, lsl #5
   10036:	59ab      	ldr	r3, [r5, r6]
   10038:	b1b3      	cbz	r3, 10068 <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1003a:	f344 3007 	sbfx	r0, r4, #12, #8
   1003e:	f7fc fb6d 	bl	c71c <arch_irq_disable>
    p_reg->INTENCLR = mask;
   10042:	4b1c      	ldr	r3, [pc, #112]	; (100b4 <nrfx_spim_uninit+0x8c>)
   10044:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   10048:	7f7b      	ldrb	r3, [r7, #29]
   1004a:	b16b      	cbz	r3, 10068 <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1004c:	2301      	movs	r3, #1
   1004e:	6163      	str	r3, [r4, #20]
   10050:	2764      	movs	r7, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10052:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   10056:	b923      	cbnz	r3, 10062 <nrfx_spim_uninit+0x3a>
   10058:	2001      	movs	r0, #1
   1005a:	f002 fd5a 	bl	12b12 <nrfx_busy_wait>
   1005e:	3f01      	subs	r7, #1
   10060:	d1f7      	bne.n	10052 <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
   10062:	19ab      	adds	r3, r5, r6
   10064:	2200      	movs	r2, #0
   10066:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   10068:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   1006a:	19a9      	adds	r1, r5, r6
   1006c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   10070:	7f8b      	ldrb	r3, [r1, #30]
   10072:	07db      	lsls	r3, r3, #31
   10074:	d417      	bmi.n	100a6 <nrfx_spim_uninit+0x7e>
    return p_reg->PSEL.SCK;
   10076:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   1007a:	f002 fd5a 	bl	12b32 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   1007e:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   10082:	f002 fd56 	bl	12b32 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   10086:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   1008a:	f002 fd52 	bl	12b32 <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1008e:	7fcb      	ldrb	r3, [r1, #31]
   10090:	2bff      	cmp	r3, #255	; 0xff
   10092:	d008      	beq.n	100a6 <nrfx_spim_uninit+0x7e>
    *p_pin = pin_number & 0x1F;
   10094:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   10098:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1009c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   100a0:	2102      	movs	r1, #2
   100a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   100a6:	4435      	add	r5, r6
   100a8:	2300      	movs	r3, #0
   100aa:	772b      	strb	r3, [r5, #28]
}
   100ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   100ae:	bf00      	nop
   100b0:	20001664 	.word	0x20001664
   100b4:	00080152 	.word	0x00080152

000100b8 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   100b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   100bc:	4f38      	ldr	r7, [pc, #224]	; (101a0 <nrfx_spim_xfer+0xe8>)
   100be:	7903      	ldrb	r3, [r0, #4]
   100c0:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
   100c4:	4615      	mov	r5, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   100c6:	f898 201d 	ldrb.w	r2, [r8, #29]
{
   100ca:	4681      	mov	r9, r0
   100cc:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
   100ce:	015e      	lsls	r6, r3, #5
   100d0:	2a00      	cmp	r2, #0
   100d2:	d163      	bne.n	1019c <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   100d4:	59ba      	ldr	r2, [r7, r6]
   100d6:	b12a      	cbz	r2, 100e4 <nrfx_spim_xfer+0x2c>
   100d8:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   100dc:	bf04      	itt	eq
   100de:	2201      	moveq	r2, #1
   100e0:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   100e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   100e8:	eb07 0c06 	add.w	ip, r7, r6
   100ec:	f10c 0c0c 	add.w	ip, ip, #12
   100f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   100f4:	2101      	movs	r1, #1
   100f6:	4640      	mov	r0, r8
   100f8:	f002 fd34 	bl	12b64 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   100fc:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   100fe:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   10102:	b121      	cbz	r1, 1010e <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   10104:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   10108:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1010c:	d106      	bne.n	1011c <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1010e:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   10110:	b152      	cbz	r2, 10128 <nrfx_spim_xfer+0x70>
   10112:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   10116:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1011a:	d005      	beq.n	10128 <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
   1011c:	443e      	add	r6, r7
   1011e:	2300      	movs	r3, #0
        return err_code;
   10120:	4820      	ldr	r0, [pc, #128]	; (101a4 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
   10122:	7773      	strb	r3, [r6, #29]
}
   10124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   10128:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1012a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1012e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   10132:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   10136:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1013a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1013e:	2200      	movs	r2, #0
   10140:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   10144:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   10148:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   1014c:	bf18      	it	ne
   1014e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   10150:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   10154:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   10158:	bf18      	it	ne
   1015a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   1015c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   10160:	072a      	lsls	r2, r5, #28
   10162:	d507      	bpl.n	10174 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
   10164:	59ba      	ldr	r2, [r7, r6]
   10166:	b972      	cbnz	r2, 10186 <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
   10168:	2100      	movs	r1, #0
   1016a:	4640      	mov	r0, r8
   1016c:	f002 fcfa 	bl	12b64 <set_ss_pin_state>
    return err_code;
   10170:	480d      	ldr	r0, [pc, #52]	; (101a8 <nrfx_spim_xfer+0xf0>)
   10172:	e7d7      	b.n	10124 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10174:	2201      	movs	r2, #1
   10176:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   10178:	59ba      	ldr	r2, [r7, r6]
   1017a:	b922      	cbnz	r2, 10186 <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1017c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   10180:	2a00      	cmp	r2, #0
   10182:	d0fb      	beq.n	1017c <nrfx_spim_xfer+0xc4>
   10184:	e7f0      	b.n	10168 <nrfx_spim_xfer+0xb0>
    if (!enable)
   10186:	f015 0f04 	tst.w	r5, #4
   1018a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1018e:	d002      	beq.n	10196 <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
   10190:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   10194:	e7ec      	b.n	10170 <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
   10196:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1019a:	e7e9      	b.n	10170 <nrfx_spim_xfer+0xb8>
        return err_code;
   1019c:	4803      	ldr	r0, [pc, #12]	; (101ac <nrfx_spim_xfer+0xf4>)
   1019e:	e7c1      	b.n	10124 <nrfx_spim_xfer+0x6c>
   101a0:	20001664 	.word	0x20001664
   101a4:	0bad000a 	.word	0x0bad000a
   101a8:	0bad0000 	.word	0x0bad0000
   101ac:	0bad000b 	.word	0x0bad000b

000101b0 <nrfx_spim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPIM0_ENABLED)
void nrfx_spim_0_irq_handler(void)
{
   101b0:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   101b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   101b6:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   101ba:	b192      	cbz	r2, 101e2 <nrfx_spim_0_irq_handler+0x32>
    set_ss_pin_state(p_cb, false);
   101bc:	4c09      	ldr	r4, [pc, #36]	; (101e4 <nrfx_spim_0_irq_handler+0x34>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   101be:	2500      	movs	r5, #0
   101c0:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   101c4:	4629      	mov	r1, r5
   101c6:	4620      	mov	r0, r4
   101c8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   101cc:	f002 fcca 	bl	12b64 <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
   101d0:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   101d2:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   101d4:	e9d4 3100 	ldrd	r3, r1, [r4]
   101d8:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM0, &m_cb[NRFX_SPIM0_INST_IDX]);
}
   101dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   101e0:	4718      	bx	r3
}
   101e2:	bd70      	pop	{r4, r5, r6, pc}
   101e4:	20001664 	.word	0x20001664

000101e8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   101e8:	4b0f      	ldr	r3, [pc, #60]	; (10228 <z_sys_init_run_level+0x40>)
{
   101ea:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   101ec:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   101f0:	3001      	adds	r0, #1
   101f2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   101f6:	42a6      	cmp	r6, r4
   101f8:	d800      	bhi.n	101fc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   101fa:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   101fc:	e9d4 3500 	ldrd	r3, r5, [r4]
   10200:	4628      	mov	r0, r5
   10202:	4798      	blx	r3
		if (dev != NULL) {
   10204:	b16d      	cbz	r5, 10222 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   10206:	b138      	cbz	r0, 10218 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   10208:	2800      	cmp	r0, #0
   1020a:	bfb8      	it	lt
   1020c:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1020e:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   10210:	28ff      	cmp	r0, #255	; 0xff
   10212:	bfa8      	it	ge
   10214:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   10216:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   10218:	68ea      	ldr	r2, [r5, #12]
   1021a:	7853      	ldrb	r3, [r2, #1]
   1021c:	f043 0301 	orr.w	r3, r3, #1
   10220:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10222:	3408      	adds	r4, #8
   10224:	e7e7      	b.n	101f6 <z_sys_init_run_level+0xe>
   10226:	bf00      	nop
   10228:	000137b4 	.word	0x000137b4

0001022c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1022c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1022e:	4b0b      	ldr	r3, [pc, #44]	; (1025c <bg_thread_main+0x30>)
   10230:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   10232:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   10234:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   10236:	f7ff ffd7 	bl	101e8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1023a:	f001 f9c1 	bl	115c0 <boot_banner>

#if defined(CONFIG_CPLUSPLUS)
	void z_cpp_init_static(void);
	z_cpp_init_static();
   1023e:	f002 f85c 	bl	122fa <z_cpp_init_static>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   10242:	2004      	movs	r0, #4
   10244:	f7ff ffd0 	bl	101e8 <z_sys_init_run_level>

	z_init_static_threads();
   10248:	f000 f92c 	bl	104a4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   1024c:	f7fb fb52 	bl	b8f4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   10250:	4a03      	ldr	r2, [pc, #12]	; (10260 <bg_thread_main+0x34>)
   10252:	7b13      	ldrb	r3, [r2, #12]
   10254:	f023 0301 	bic.w	r3, r3, #1
   10258:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1025a:	bd08      	pop	{r3, pc}
   1025c:	20001b8e 	.word	0x20001b8e
   10260:	200013e8 	.word	0x200013e8

00010264 <z_bss_zero>:
{
   10264:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   10266:	4803      	ldr	r0, [pc, #12]	; (10274 <z_bss_zero+0x10>)
   10268:	4a03      	ldr	r2, [pc, #12]	; (10278 <z_bss_zero+0x14>)
   1026a:	2100      	movs	r1, #0
   1026c:	1a12      	subs	r2, r2, r0
   1026e:	f002 fcac 	bl	12bca <z_early_memset>
}
   10272:	bd08      	pop	{r3, pc}
   10274:	20000528 	.word	0x20000528
   10278:	20001b94 	.word	0x20001b94

0001027c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1027c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1027e:	2300      	movs	r3, #0
{
   10280:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   10282:	2201      	movs	r2, #1
   10284:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   10288:	4e13      	ldr	r6, [pc, #76]	; (102d8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1028a:	4d14      	ldr	r5, [pc, #80]	; (102dc <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1028c:	9301      	str	r3, [sp, #4]
   1028e:	220f      	movs	r2, #15
   10290:	e9cd 3202 	strd	r3, r2, [sp, #8]
   10294:	4912      	ldr	r1, [pc, #72]	; (102e0 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   10296:	2318      	movs	r3, #24
   10298:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   1029c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   102a0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   102a2:	f44f 70a0 	mov.w	r0, #320	; 0x140
   102a6:	fb00 1104 	mla	r1, r0, r4, r1
   102aa:	4b0e      	ldr	r3, [pc, #56]	; (102e4 <z_init_cpu+0x68>)
   102ac:	9500      	str	r5, [sp, #0]
   102ae:	f44f 7280 	mov.w	r2, #256	; 0x100
   102b2:	4630      	mov	r0, r6
   102b4:	f000 f898 	bl	103e8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   102b8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   102ba:	4a0b      	ldr	r2, [pc, #44]	; (102e8 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   102bc:	60ee      	str	r6, [r5, #12]
   102be:	f023 0304 	bic.w	r3, r3, #4
   102c2:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   102c4:	f44f 6304 	mov.w	r3, #2112	; 0x840
   102c8:	fb04 3303 	mla	r3, r4, r3, r3
   102cc:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   102ce:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
   102d0:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   102d2:	b006      	add	sp, #24
   102d4:	bd70      	pop	{r4, r5, r6, pc}
   102d6:	bf00      	nop
   102d8:	20001368 	.word	0x20001368
   102dc:	20001684 	.word	0x20001684
   102e0:	20002840 	.word	0x20002840
   102e4:	0001055d 	.word	0x0001055d
   102e8:	20002000 	.word	0x20002000

000102ec <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   102ec:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   102ee:	2000      	movs	r0, #0
{
   102f0:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   102f2:	f7ff ff79 	bl	101e8 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   102f6:	4b2c      	ldr	r3, [pc, #176]	; (103a8 <z_cstart+0xbc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   102f8:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   102fc:	4d2b      	ldr	r5, [pc, #172]	; (103ac <z_cstart+0xc0>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   102fe:	4e2c      	ldr	r6, [pc, #176]	; (103b0 <z_cstart+0xc4>)
   10300:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10302:	4f2c      	ldr	r7, [pc, #176]	; (103b4 <z_cstart+0xc8>)
   10304:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   10308:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1030a:	23e0      	movs	r3, #224	; 0xe0
   1030c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   10310:	2400      	movs	r4, #0
   10312:	2320      	movs	r3, #32
   10314:	77eb      	strb	r3, [r5, #31]
   10316:	762c      	strb	r4, [r5, #24]
   10318:	766c      	strb	r4, [r5, #25]
   1031a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1031c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1031e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   10322:	626b      	str	r3, [r5, #36]	; 0x24
   10324:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   10328:	f7fc fc12 	bl	cb50 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1032c:	f7fc f9ca 	bl	c6c4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   10330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10334:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   10336:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   10338:	f7fc fd44 	bl	cdc4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1033c:	f7fc fcaa 	bl	cc94 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   10340:	f240 1301 	movw	r3, #257	; 0x101
   10344:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   10348:	ab06      	add	r3, sp, #24
   1034a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1034c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   10350:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   10352:	f002 fc13 	bl	12b7c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   10356:	2001      	movs	r0, #1
   10358:	f7ff ff46 	bl	101e8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1035c:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1035e:	4d16      	ldr	r5, [pc, #88]	; (103b8 <z_cstart+0xcc>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   10360:	f7ff ff42 	bl	101e8 <z_sys_init_run_level>
	z_sched_init();
   10364:	f000 fdb4 	bl	10ed0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10368:	4b14      	ldr	r3, [pc, #80]	; (103bc <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
   1036a:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1036c:	9305      	str	r3, [sp, #20]
   1036e:	2301      	movs	r3, #1
   10370:	4913      	ldr	r1, [pc, #76]	; (103c0 <z_cstart+0xd4>)
   10372:	9400      	str	r4, [sp, #0]
   10374:	e9cd 4303 	strd	r4, r3, [sp, #12]
   10378:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1037c:	463b      	mov	r3, r7
   1037e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   10382:	4628      	mov	r0, r5
   10384:	f000 f830 	bl	103e8 <z_setup_new_thread>
   10388:	7b6a      	ldrb	r2, [r5, #13]
   1038a:	4606      	mov	r6, r0
   1038c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   10390:	4628      	mov	r0, r5
   10392:	736a      	strb	r2, [r5, #13]
   10394:	f002 fe13 	bl	12fbe <z_ready_thread>
	z_init_cpu(0);
   10398:	4620      	mov	r0, r4
   1039a:	f7ff ff6f 	bl	1027c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1039e:	463a      	mov	r2, r7
   103a0:	4631      	mov	r1, r6
   103a2:	4628      	mov	r0, r5
   103a4:	f7fc faa4 	bl	c8f0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   103a8:	20002840 	.word	0x20002840
   103ac:	e000ed00 	.word	0xe000ed00
   103b0:	20001684 	.word	0x20001684
   103b4:	0001022d 	.word	0x0001022d
   103b8:	200013e8 	.word	0x200013e8
   103bc:	00013adc 	.word	0x00013adc
   103c0:	20002980 	.word	0x20002980

000103c4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   103c4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   103c6:	4c06      	ldr	r4, [pc, #24]	; (103e0 <statics_init+0x1c>)
   103c8:	4d06      	ldr	r5, [pc, #24]	; (103e4 <statics_init+0x20>)
   103ca:	42ac      	cmp	r4, r5
   103cc:	d301      	bcc.n	103d2 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   103ce:	2000      	movs	r0, #0
   103d0:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   103d2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   103d6:	4620      	mov	r0, r4
   103d8:	f002 fbfb 	bl	12bd2 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   103dc:	3418      	adds	r4, #24
   103de:	e7f4      	b.n	103ca <statics_init+0x6>
   103e0:	20000480 	.word	0x20000480
   103e4:	20000480 	.word	0x20000480

000103e8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   103e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   103ec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   103ee:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   103f0:	2604      	movs	r6, #4
   103f2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   103f4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   103f6:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   103f8:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   103fc:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   103fe:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   10400:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   10406:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   10408:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1040c:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1040e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   10412:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   10416:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   10418:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1041a:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1041c:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10420:	9202      	str	r2, [sp, #8]
   10422:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10424:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   10426:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1042a:	9200      	str	r2, [sp, #0]
   1042c:	4642      	mov	r2, r8
{
   1042e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10430:	f7fc fa2c 	bl	c88c <arch_new_thread>
	if (!_current) {
   10434:	4b04      	ldr	r3, [pc, #16]	; (10448 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   10436:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   10438:	689b      	ldr	r3, [r3, #8]
   1043a:	b103      	cbz	r3, 1043e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1043c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1043e:	6763      	str	r3, [r4, #116]	; 0x74
}
   10440:	4640      	mov	r0, r8
   10442:	b004      	add	sp, #16
   10444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10448:	20001684 	.word	0x20001684

0001044c <z_impl_k_thread_create>:
{
   1044c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1044e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10450:	2500      	movs	r5, #0
   10452:	9505      	str	r5, [sp, #20]
   10454:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10456:	9504      	str	r5, [sp, #16]
   10458:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1045a:	9503      	str	r5, [sp, #12]
   1045c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1045e:	9502      	str	r5, [sp, #8]
{
   10460:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10464:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   10466:	9501      	str	r5, [sp, #4]
   10468:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1046a:	9500      	str	r5, [sp, #0]
{
   1046c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1046e:	f7ff ffbb 	bl	103e8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   10472:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   10476:	bf08      	it	eq
   10478:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   1047c:	d005      	beq.n	1048a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1047e:	ea56 0307 	orrs.w	r3, r6, r7
   10482:	d105      	bne.n	10490 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   10484:	4620      	mov	r0, r4
   10486:	f000 fca3 	bl	10dd0 <z_sched_start>
}
   1048a:	4620      	mov	r0, r4
   1048c:	b007      	add	sp, #28
   1048e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   10490:	4903      	ldr	r1, [pc, #12]	; (104a0 <z_impl_k_thread_create+0x54>)
   10492:	463a      	mov	r2, r7
   10494:	4633      	mov	r3, r6
   10496:	f104 0018 	add.w	r0, r4, #24
   1049a:	f000 fea1 	bl	111e0 <z_add_timeout>
   1049e:	e7f4      	b.n	1048a <z_impl_k_thread_create+0x3e>
   104a0:	00012f2b 	.word	0x00012f2b

000104a4 <z_init_static_threads>:
{
   104a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   104a8:	4c29      	ldr	r4, [pc, #164]	; (10550 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   104aa:	4d2a      	ldr	r5, [pc, #168]	; (10554 <z_init_static_threads+0xb0>)
{
   104ac:	b087      	sub	sp, #28
   104ae:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   104b0:	42ae      	cmp	r6, r5
   104b2:	f104 0430 	add.w	r4, r4, #48	; 0x30
   104b6:	d30f      	bcc.n	104d8 <z_init_static_threads+0x34>
	k_sched_lock();
   104b8:	f000 fcda 	bl	10e70 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   104bc:	4c24      	ldr	r4, [pc, #144]	; (10550 <z_init_static_threads+0xac>)
   104be:	f8df 9098 	ldr.w	r9, [pc, #152]	; 10558 <z_init_static_threads+0xb4>
   104c2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   104c6:	f240 37e7 	movw	r7, #999	; 0x3e7
   104ca:	42ac      	cmp	r4, r5
   104cc:	d320      	bcc.n	10510 <z_init_static_threads+0x6c>
}
   104ce:	b007      	add	sp, #28
   104d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   104d4:	f000 bce0 	b.w	10e98 <k_sched_unlock>
		z_setup_new_thread(
   104d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   104dc:	9305      	str	r3, [sp, #20]
   104de:	f854 3c10 	ldr.w	r3, [r4, #-16]
   104e2:	9304      	str	r3, [sp, #16]
   104e4:	f854 3c14 	ldr.w	r3, [r4, #-20]
   104e8:	9303      	str	r3, [sp, #12]
   104ea:	f854 3c18 	ldr.w	r3, [r4, #-24]
   104ee:	9302      	str	r3, [sp, #8]
   104f0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   104f4:	9301      	str	r3, [sp, #4]
   104f6:	f854 3c20 	ldr.w	r3, [r4, #-32]
   104fa:	9300      	str	r3, [sp, #0]
   104fc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   10500:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   10504:	f7ff ff70 	bl	103e8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   10508:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1050c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1050e:	e7ce      	b.n	104ae <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   10510:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10512:	1c5a      	adds	r2, r3, #1
   10514:	d00d      	beq.n	10532 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   10516:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1051a:	2100      	movs	r1, #0
   1051c:	4638      	mov	r0, r7
   1051e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10522:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   10526:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1052a:	d104      	bne.n	10536 <z_init_static_threads+0x92>
	z_sched_start(thread);
   1052c:	4640      	mov	r0, r8
   1052e:	f000 fc4f 	bl	10dd0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   10532:	3430      	adds	r4, #48	; 0x30
   10534:	e7c9      	b.n	104ca <z_init_static_threads+0x26>
   10536:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1053a:	2300      	movs	r3, #0
   1053c:	f7f0 fab6 	bl	aac <__aeabi_uldivmod>
   10540:	4602      	mov	r2, r0
   10542:	460b      	mov	r3, r1
   10544:	f108 0018 	add.w	r0, r8, #24
   10548:	4649      	mov	r1, r9
   1054a:	f000 fe49 	bl	111e0 <z_add_timeout>
   1054e:	e7f0      	b.n	10532 <z_init_static_threads+0x8e>
   10550:	00013588 	.word	0x00013588
   10554:	00013588 	.word	0x00013588
   10558:	00012f2b 	.word	0x00012f2b

0001055c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1055c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1055e:	4c0b      	ldr	r4, [pc, #44]	; (1058c <idle+0x30>)
	return !z_sys_post_kernel;
   10560:	4d0b      	ldr	r5, [pc, #44]	; (10590 <idle+0x34>)
	__asm__ volatile(
   10562:	f04f 0240 	mov.w	r2, #64	; 0x40
   10566:	f3ef 8311 	mrs	r3, BASEPRI
   1056a:	f382 8812 	msr	BASEPRI_MAX, r2
   1056e:	f3bf 8f6f 	isb	sy
   10572:	f002 fdea 	bl	1314a <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   10576:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   10578:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1057a:	b913      	cbnz	r3, 10582 <idle+0x26>
	arch_cpu_idle();
   1057c:	f7fc f8a8 	bl	c6d0 <arch_cpu_idle>
}
   10580:	e7ef      	b.n	10562 <idle+0x6>
   10582:	f7fb ffd1 	bl	c528 <pm_system_suspend>
   10586:	2800      	cmp	r0, #0
   10588:	d1eb      	bne.n	10562 <idle+0x6>
   1058a:	e7f7      	b.n	1057c <idle+0x20>
   1058c:	20001684 	.word	0x20001684
   10590:	20001b8e 	.word	0x20001b8e

00010594 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   10594:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10598:	4604      	mov	r4, r0
   1059a:	4617      	mov	r7, r2
   1059c:	461e      	mov	r6, r3
   1059e:	f04f 0340 	mov.w	r3, #64	; 0x40
   105a2:	f3ef 8811 	mrs	r8, BASEPRI
   105a6:	f383 8812 	msr	BASEPRI_MAX, r3
   105aa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   105ae:	68c3      	ldr	r3, [r0, #12]
   105b0:	4a33      	ldr	r2, [pc, #204]	; (10680 <z_impl_k_mutex_lock+0xec>)
   105b2:	b17b      	cbz	r3, 105d4 <z_impl_k_mutex_lock+0x40>
   105b4:	6880      	ldr	r0, [r0, #8]
   105b6:	6891      	ldr	r1, [r2, #8]
   105b8:	4288      	cmp	r0, r1
   105ba:	d019      	beq.n	105f0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   105bc:	ea57 0306 	orrs.w	r3, r7, r6
   105c0:	d118      	bne.n	105f4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   105c2:	f388 8811 	msr	BASEPRI, r8
   105c6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   105ca:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   105ce:	b002      	add	sp, #8
   105d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   105d4:	6891      	ldr	r1, [r2, #8]
   105d6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   105da:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   105dc:	3301      	adds	r3, #1
   105de:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   105e0:	6893      	ldr	r3, [r2, #8]
   105e2:	60a3      	str	r3, [r4, #8]
   105e4:	f388 8811 	msr	BASEPRI, r8
   105e8:	f3bf 8f6f 	isb	sy
		return 0;
   105ec:	2000      	movs	r0, #0
   105ee:	e7ee      	b.n	105ce <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   105f0:	6921      	ldr	r1, [r4, #16]
   105f2:	e7f2      	b.n	105da <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   105f4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   105f8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   105fc:	4299      	cmp	r1, r3
   105fe:	bfa8      	it	ge
   10600:	4619      	movge	r1, r3
   10602:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   10606:	4291      	cmp	r1, r2
   10608:	bfb8      	it	lt
   1060a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1060c:	428b      	cmp	r3, r1
   1060e:	dd2e      	ble.n	1066e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   10610:	f002 fb63 	bl	12cda <adjust_owner_prio.isra.0>
   10614:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   10616:	e9cd 7600 	strd	r7, r6, [sp]
   1061a:	481a      	ldr	r0, [pc, #104]	; (10684 <z_impl_k_mutex_lock+0xf0>)
   1061c:	4622      	mov	r2, r4
   1061e:	4641      	mov	r1, r8
   10620:	f000 fb60 	bl	10ce4 <z_pend_curr>
	if (got_mutex == 0) {
   10624:	2800      	cmp	r0, #0
   10626:	d0e1      	beq.n	105ec <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   10628:	f04f 0340 	mov.w	r3, #64	; 0x40
   1062c:	f3ef 8611 	mrs	r6, BASEPRI
   10630:	f383 8812 	msr	BASEPRI_MAX, r3
   10634:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   10638:	68a0      	ldr	r0, [r4, #8]
   1063a:	b1d0      	cbz	r0, 10672 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1063c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1063e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10640:	429c      	cmp	r4, r3
   10642:	d00a      	beq.n	1065a <z_impl_k_mutex_lock+0xc6>
   10644:	b14b      	cbz	r3, 1065a <z_impl_k_mutex_lock+0xc6>
   10646:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1064a:	4299      	cmp	r1, r3
   1064c:	bfa8      	it	ge
   1064e:	4619      	movge	r1, r3
   10650:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   10654:	4299      	cmp	r1, r3
   10656:	bfb8      	it	lt
   10658:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1065a:	f002 fb3e 	bl	12cda <adjust_owner_prio.isra.0>
   1065e:	b140      	cbz	r0, 10672 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   10660:	4808      	ldr	r0, [pc, #32]	; (10684 <z_impl_k_mutex_lock+0xf0>)
   10662:	4631      	mov	r1, r6
   10664:	f000 fba2 	bl	10dac <z_reschedule>
	return -EAGAIN;
   10668:	f06f 000a 	mvn.w	r0, #10
   1066c:	e7af      	b.n	105ce <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   1066e:	2500      	movs	r5, #0
   10670:	e7d1      	b.n	10616 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   10672:	2d00      	cmp	r5, #0
   10674:	d1f4      	bne.n	10660 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   10676:	f386 8811 	msr	BASEPRI, r6
   1067a:	f3bf 8f6f 	isb	sy
   1067e:	e7f3      	b.n	10668 <z_impl_k_mutex_lock+0xd4>
   10680:	20001684 	.word	0x20001684
   10684:	20001b8f 	.word	0x20001b8f

00010688 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   10688:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1068a:	6883      	ldr	r3, [r0, #8]
{
   1068c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1068e:	b36b      	cbz	r3, 106ec <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   10690:	4a19      	ldr	r2, [pc, #100]	; (106f8 <z_impl_k_mutex_unlock+0x70>)
   10692:	6892      	ldr	r2, [r2, #8]
   10694:	4293      	cmp	r3, r2
   10696:	d12c      	bne.n	106f2 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   10698:	68c3      	ldr	r3, [r0, #12]
   1069a:	2b01      	cmp	r3, #1
   1069c:	d903      	bls.n	106a6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1069e:	3b01      	subs	r3, #1
   106a0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   106a2:	2000      	movs	r0, #0
}
   106a4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   106a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   106aa:	f3ef 8511 	mrs	r5, BASEPRI
   106ae:	f383 8812 	msr	BASEPRI_MAX, r3
   106b2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   106b6:	6901      	ldr	r1, [r0, #16]
   106b8:	6880      	ldr	r0, [r0, #8]
   106ba:	f002 fb0e 	bl	12cda <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   106be:	4620      	mov	r0, r4
   106c0:	f002 fcb4 	bl	1302c <z_unpend_first_thread>
	mutex->owner = new_owner;
   106c4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   106c6:	b158      	cbz	r0, 106e0 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   106c8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   106cc:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   106ce:	2200      	movs	r2, #0
   106d0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   106d2:	f002 fc74 	bl	12fbe <z_ready_thread>
		z_reschedule(&lock, key);
   106d6:	4809      	ldr	r0, [pc, #36]	; (106fc <z_impl_k_mutex_unlock+0x74>)
   106d8:	4629      	mov	r1, r5
   106da:	f000 fb67 	bl	10dac <z_reschedule>
   106de:	e7e0      	b.n	106a2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   106e0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   106e2:	f385 8811 	msr	BASEPRI, r5
   106e6:	f3bf 8f6f 	isb	sy
   106ea:	e7da      	b.n	106a2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   106ec:	f06f 0015 	mvn.w	r0, #21
   106f0:	e7d8      	b.n	106a4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   106f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   106f6:	e7d5      	b.n	106a4 <z_impl_k_mutex_unlock+0x1c>
   106f8:	20001684 	.word	0x20001684
   106fc:	20001b8f 	.word	0x20001b8f

00010700 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   10700:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
   10702:	f04f 0140 	mov.w	r1, #64	; 0x40
   10706:	f3ef 8511 	mrs	r5, BASEPRI
   1070a:	f381 8812 	msr	BASEPRI_MAX, r1
   1070e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   10712:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   10714:	b19c      	cbz	r4, 1073e <z_impl_k_queue_get+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   10716:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   10718:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1071a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1071e:	4294      	cmp	r4, r2
	list->head = node;
   10720:	6003      	str	r3, [r0, #0]
	list->tail = node;
   10722:	bf08      	it	eq
   10724:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   10726:	2101      	movs	r1, #1
   10728:	4620      	mov	r0, r4
   1072a:	f002 fb45 	bl	12db8 <z_queue_node_peek>
   1072e:	4604      	mov	r4, r0
	__asm__ volatile(
   10730:	f385 8811 	msr	BASEPRI, r5
   10734:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   10738:	4620      	mov	r0, r4
   1073a:	b003      	add	sp, #12
   1073c:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1073e:	ea52 0103 	orrs.w	r1, r2, r3
   10742:	d0f5      	beq.n	10730 <z_impl_k_queue_get+0x30>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   10744:	e9cd 2300 	strd	r2, r3, [sp]
   10748:	4629      	mov	r1, r5
   1074a:	f100 020c 	add.w	r2, r0, #12
   1074e:	3008      	adds	r0, #8
   10750:	f000 fac8 	bl	10ce4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   10754:	2800      	cmp	r0, #0
   10756:	d1ef      	bne.n	10738 <z_impl_k_queue_get+0x38>
   10758:	4b01      	ldr	r3, [pc, #4]	; (10760 <z_impl_k_queue_get+0x60>)
   1075a:	689b      	ldr	r3, [r3, #8]
   1075c:	695c      	ldr	r4, [r3, #20]
   1075e:	e7eb      	b.n	10738 <z_impl_k_queue_get+0x38>
   10760:	20001684 	.word	0x20001684

00010764 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   10764:	b538      	push	{r3, r4, r5, lr}
   10766:	4604      	mov	r4, r0
	__asm__ volatile(
   10768:	f04f 0340 	mov.w	r3, #64	; 0x40
   1076c:	f3ef 8511 	mrs	r5, BASEPRI
   10770:	f383 8812 	msr	BASEPRI_MAX, r3
   10774:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   10778:	f002 fc58 	bl	1302c <z_unpend_first_thread>

	if (thread != NULL) {
   1077c:	b148      	cbz	r0, 10792 <z_impl_k_sem_give+0x2e>
   1077e:	2200      	movs	r2, #0
   10780:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   10782:	f002 fc1c 	bl	12fbe <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   10786:	4629      	mov	r1, r5
   10788:	4808      	ldr	r0, [pc, #32]	; (107ac <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1078a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1078e:	f000 bb0d 	b.w	10dac <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10792:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   10796:	429a      	cmp	r2, r3
   10798:	bf18      	it	ne
   1079a:	3301      	addne	r3, #1
   1079c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1079e:	2102      	movs	r1, #2
   107a0:	f104 0010 	add.w	r0, r4, #16
   107a4:	f002 fda0 	bl	132e8 <z_handle_obj_poll_events>
}
   107a8:	e7ed      	b.n	10786 <z_impl_k_sem_give+0x22>
   107aa:	bf00      	nop
   107ac:	20001b90 	.word	0x20001b90

000107b0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   107b0:	b513      	push	{r0, r1, r4, lr}
   107b2:	f04f 0440 	mov.w	r4, #64	; 0x40
   107b6:	f3ef 8111 	mrs	r1, BASEPRI
   107ba:	f384 8812 	msr	BASEPRI_MAX, r4
   107be:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   107c2:	6884      	ldr	r4, [r0, #8]
   107c4:	b144      	cbz	r4, 107d8 <z_impl_k_sem_take+0x28>
		sem->count--;
   107c6:	3c01      	subs	r4, #1
   107c8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   107ca:	f381 8811 	msr	BASEPRI, r1
   107ce:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   107d2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   107d4:	b002      	add	sp, #8
   107d6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   107d8:	ea52 0403 	orrs.w	r4, r2, r3
   107dc:	d106      	bne.n	107ec <z_impl_k_sem_take+0x3c>
   107de:	f381 8811 	msr	BASEPRI, r1
   107e2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   107e6:	f06f 000f 	mvn.w	r0, #15
   107ea:	e7f3      	b.n	107d4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   107ec:	e9cd 2300 	strd	r2, r3, [sp]
   107f0:	4602      	mov	r2, r0
   107f2:	4802      	ldr	r0, [pc, #8]	; (107fc <z_impl_k_sem_take+0x4c>)
   107f4:	f000 fa76 	bl	10ce4 <z_pend_curr>
	return ret;
   107f8:	e7ec      	b.n	107d4 <z_impl_k_sem_take+0x24>
   107fa:	bf00      	nop
   107fc:	20001b90 	.word	0x20001b90

00010800 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   10800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   10804:	4e4a      	ldr	r6, [pc, #296]	; (10930 <work_queue_main+0x130>)
   10806:	b085      	sub	sp, #20
   10808:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1080a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1080e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   10812:	f04f 0340 	mov.w	r3, #64	; 0x40
   10816:	f3ef 8711 	mrs	r7, BASEPRI
   1081a:	f383 8812 	msr	BASEPRI_MAX, r3
   1081e:	f3bf 8f6f 	isb	sy
   10822:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   10826:	b98d      	cbnz	r5, 1084c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   10828:	2102      	movs	r1, #2
   1082a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1082e:	f002 fb2a 	bl	12e86 <flag_test_and_clear>
   10832:	2800      	cmp	r0, #0
   10834:	d143      	bne.n	108be <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   10836:	2300      	movs	r3, #0
   10838:	e9cd 8900 	strd	r8, r9, [sp]
   1083c:	9302      	str	r3, [sp, #8]
   1083e:	f104 0288 	add.w	r2, r4, #136	; 0x88
   10842:	4639      	mov	r1, r7
   10844:	483b      	ldr	r0, [pc, #236]	; (10934 <work_queue_main+0x134>)
   10846:	f000 fc51 	bl	110ec <z_sched_wait>
			continue;
   1084a:	e7e2      	b.n	10812 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1084c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   10850:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   10852:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10856:	4295      	cmp	r5, r2
	list->tail = node;
   10858:	bf08      	it	eq
   1085a:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1085e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   10862:	f043 0302 	orr.w	r3, r3, #2
   10866:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1086a:	68eb      	ldr	r3, [r5, #12]
   1086c:	f023 0304 	bic.w	r3, r3, #4
   10870:	f043 0301 	orr.w	r3, r3, #1
   10874:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   10876:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   10878:	f387 8811 	msr	BASEPRI, r7
   1087c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   10880:	4628      	mov	r0, r5
   10882:	4798      	blx	r3
	__asm__ volatile(
   10884:	f04f 0340 	mov.w	r3, #64	; 0x40
   10888:	f3ef 8b11 	mrs	fp, BASEPRI
   1088c:	f383 8812 	msr	BASEPRI_MAX, r3
   10890:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   10894:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   10896:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   10898:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1089c:	d419      	bmi.n	108d2 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   1089e:	60ea      	str	r2, [r5, #12]
   108a0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   108a4:	f023 0302 	bic.w	r3, r3, #2
   108a8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   108ac:	f38b 8811 	msr	BASEPRI, fp
   108b0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   108b4:	05db      	lsls	r3, r3, #23
   108b6:	d4ac      	bmi.n	10812 <work_queue_main+0x12>
	z_impl_k_yield();
   108b8:	f000 fb16 	bl	10ee8 <z_impl_k_yield>
}
   108bc:	e7a9      	b.n	10812 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   108be:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   108c2:	2200      	movs	r2, #0
   108c4:	2101      	movs	r1, #1
   108c6:	4628      	mov	r0, r5
   108c8:	f002 fc06 	bl	130d8 <z_sched_wake>
   108cc:	2800      	cmp	r0, #0
   108ce:	d1f8      	bne.n	108c2 <work_queue_main+0xc2>
   108d0:	e7b1      	b.n	10836 <work_queue_main+0x36>
	return list->head;
   108d2:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   108d4:	f023 0303 	bic.w	r3, r3, #3
   108d8:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   108da:	2800      	cmp	r0, #0
   108dc:	d0e0      	beq.n	108a0 <work_queue_main+0xa0>
	return node->next;
   108de:	2700      	movs	r7, #0
   108e0:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   108e4:	463b      	mov	r3, r7
   108e6:	2800      	cmp	r0, #0
   108e8:	d0da      	beq.n	108a0 <work_queue_main+0xa0>
		if (wc->work == work) {
   108ea:	6842      	ldr	r2, [r0, #4]
   108ec:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   108ee:	4601      	mov	r1, r0
		if (wc->work == work) {
   108f0:	d10c      	bne.n	1090c <work_queue_main+0x10c>
	return node->next;
   108f2:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   108f4:	b99f      	cbnz	r7, 1091e <work_queue_main+0x11e>
   108f6:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   108f8:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   108fa:	4282      	cmp	r2, r0
   108fc:	d100      	bne.n	10900 <work_queue_main+0x100>
	list->tail = node;
   108fe:	6071      	str	r1, [r6, #4]
	parent->next = child;
   10900:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   10904:	f7ff ff2e 	bl	10764 <z_impl_k_sem_give>
}
   10908:	4639      	mov	r1, r7
   1090a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1090c:	f1ba 0f00 	cmp.w	sl, #0
   10910:	d00b      	beq.n	1092a <work_queue_main+0x12a>
	return node->next;
   10912:	f8da 2000 	ldr.w	r2, [sl]
   10916:	4650      	mov	r0, sl
   10918:	460f      	mov	r7, r1
   1091a:	4692      	mov	sl, r2
   1091c:	e7e3      	b.n	108e6 <work_queue_main+0xe6>
	parent->next = child;
   1091e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   10920:	6872      	ldr	r2, [r6, #4]
   10922:	4282      	cmp	r2, r0
	list->tail = node;
   10924:	bf08      	it	eq
   10926:	6077      	streq	r7, [r6, #4]
}
   10928:	e7ea      	b.n	10900 <work_queue_main+0x100>
   1092a:	4652      	mov	r2, sl
   1092c:	e7f3      	b.n	10916 <work_queue_main+0x116>
   1092e:	bf00      	nop
   10930:	200016ac 	.word	0x200016ac
   10934:	20001b91 	.word	0x20001b91

00010938 <submit_to_queue_locked>:
{
   10938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1093a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1093c:	079a      	lsls	r2, r3, #30
{
   1093e:	4604      	mov	r4, r0
   10940:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   10942:	f3c3 0640 	ubfx	r6, r3, #1, #1
   10946:	d42c      	bmi.n	109a2 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   10948:	075b      	lsls	r3, r3, #29
   1094a:	d41a      	bmi.n	10982 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   1094c:	680b      	ldr	r3, [r1, #0]
   1094e:	b90b      	cbnz	r3, 10954 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   10950:	6883      	ldr	r3, [r0, #8]
   10952:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   10954:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   10956:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   10958:	bf44      	itt	mi
   1095a:	68a3      	ldrmi	r3, [r4, #8]
   1095c:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   1095e:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   10960:	bf4c      	ite	mi
   10962:	2602      	movmi	r6, #2
		ret = 1;
   10964:	2601      	movpl	r6, #1
	if (queue == NULL) {
   10966:	2d00      	cmp	r5, #0
   10968:	d03a      	beq.n	109e0 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1096a:	4b1f      	ldr	r3, [pc, #124]	; (109e8 <submit_to_queue_locked+0xb0>)
   1096c:	689b      	ldr	r3, [r3, #8]
   1096e:	42ab      	cmp	r3, r5
   10970:	d00a      	beq.n	10988 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   10972:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   10976:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   10978:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1097c:	d414      	bmi.n	109a8 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   1097e:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   10982:	2300      	movs	r3, #0
   10984:	603b      	str	r3, [r7, #0]
	return ret;
   10986:	e025      	b.n	109d4 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   10988:	f002 f995 	bl	12cb6 <k_is_in_isr>
   1098c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   10990:	2800      	cmp	r0, #0
   10992:	d1f0      	bne.n	10976 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   10994:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   10996:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1099a:	d5f0      	bpl.n	1097e <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   1099c:	b152      	cbz	r2, 109b4 <submit_to_queue_locked+0x7c>
   1099e:	075b      	lsls	r3, r3, #29
   109a0:	d408      	bmi.n	109b4 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   109a2:	f06f 060f 	mvn.w	r6, #15
   109a6:	e7ec      	b.n	10982 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   109a8:	2a00      	cmp	r2, #0
   109aa:	d1fa      	bne.n	109a2 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   109ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   109b0:	2b00      	cmp	r3, #0
   109b2:	d1f6      	bne.n	109a2 <submit_to_queue_locked+0x6a>
	parent->next = child;
   109b4:	2300      	movs	r3, #0
   109b6:	6023      	str	r3, [r4, #0]
	return list->tail;
   109b8:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   109bc:	b963      	cbnz	r3, 109d8 <submit_to_queue_locked+0xa0>
	list->head = node;
   109be:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   109c2:	4628      	mov	r0, r5
   109c4:	f002 fa6a 	bl	12e9c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   109c8:	68e3      	ldr	r3, [r4, #12]
   109ca:	f043 0304 	orr.w	r3, r3, #4
   109ce:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   109d0:	683b      	ldr	r3, [r7, #0]
   109d2:	60a3      	str	r3, [r4, #8]
}
   109d4:	4630      	mov	r0, r6
   109d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   109d8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   109da:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   109de:	e7f0      	b.n	109c2 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   109e0:	f06f 0615 	mvn.w	r6, #21
   109e4:	e7cd      	b.n	10982 <submit_to_queue_locked+0x4a>
   109e6:	bf00      	nop
   109e8:	20001684 	.word	0x20001684

000109ec <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   109ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   109ee:	b089      	sub	sp, #36	; 0x24
   109f0:	4604      	mov	r4, r0
	list->head = NULL;
   109f2:	2000      	movs	r0, #0
	list->tail = NULL;
   109f4:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   109f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   109fa:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   109fe:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   10a02:	f104 0090 	add.w	r0, r4, #144	; 0x90
   10a06:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   10a0a:	b31d      	cbz	r5, 10a54 <k_work_queue_start+0x68>
   10a0c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   10a0e:	2800      	cmp	r0, #0
   10a10:	f240 1001 	movw	r0, #257	; 0x101
   10a14:	bf08      	it	eq
   10a16:	2001      	moveq	r0, #1
	*flagp = flags;
   10a18:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10a1c:	2000      	movs	r0, #0
   10a1e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   10a22:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   10a26:	e9cd 3003 	strd	r3, r0, [sp, #12]
   10a2a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   10a2e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   10a32:	4b09      	ldr	r3, [pc, #36]	; (10a58 <k_work_queue_start+0x6c>)
   10a34:	9400      	str	r4, [sp, #0]
   10a36:	4620      	mov	r0, r4
   10a38:	f7ff fd08 	bl	1044c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   10a3c:	b125      	cbz	r5, 10a48 <k_work_queue_start+0x5c>
   10a3e:	6829      	ldr	r1, [r5, #0]
   10a40:	b111      	cbz	r1, 10a48 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   10a42:	4620      	mov	r0, r4
   10a44:	f002 f93d 	bl	12cc2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   10a48:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   10a4a:	b009      	add	sp, #36	; 0x24
   10a4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   10a50:	f002 b93a 	b.w	12cc8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   10a54:	2001      	movs	r0, #1
   10a56:	e7df      	b.n	10a18 <k_work_queue_start+0x2c>
   10a58:	00010801 	.word	0x00010801

00010a5c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   10a5c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   10a5e:	4d07      	ldr	r5, [pc, #28]	; (10a7c <z_reset_time_slice+0x20>)
   10a60:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   10a62:	b154      	cbz	r4, 10a7a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   10a64:	f7fe fa0e 	bl	ee84 <sys_clock_elapsed>
   10a68:	4b05      	ldr	r3, [pc, #20]	; (10a80 <z_reset_time_slice+0x24>)
   10a6a:	4404      	add	r4, r0
   10a6c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   10a6e:	6828      	ldr	r0, [r5, #0]
   10a70:	2100      	movs	r1, #0
	}
}
   10a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   10a76:	f002 bb78 	b.w	1316a <z_set_timeout_expiry>
}
   10a7a:	bd38      	pop	{r3, r4, r5, pc}
   10a7c:	200016bc 	.word	0x200016bc
   10a80:	20001684 	.word	0x20001684

00010a84 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   10a84:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   10a86:	4d0d      	ldr	r5, [pc, #52]	; (10abc <update_cache+0x38>)
   10a88:	462b      	mov	r3, r5
   10a8a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10a8e:	429c      	cmp	r4, r3
   10a90:	d000      	beq.n	10a94 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   10a92:	b904      	cbnz	r4, 10a96 <update_cache+0x12>
   10a94:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   10a96:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   10a98:	b938      	cbnz	r0, 10aaa <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   10a9a:	7b5a      	ldrb	r2, [r3, #13]
   10a9c:	06d2      	lsls	r2, r2, #27
   10a9e:	d104      	bne.n	10aaa <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   10aa0:	69a2      	ldr	r2, [r4, #24]
   10aa2:	b912      	cbnz	r2, 10aaa <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   10aa4:	89da      	ldrh	r2, [r3, #14]
   10aa6:	2a7f      	cmp	r2, #127	; 0x7f
   10aa8:	d805      	bhi.n	10ab6 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   10aaa:	429c      	cmp	r4, r3
   10aac:	d002      	beq.n	10ab4 <update_cache+0x30>
			z_reset_time_slice(thread);
   10aae:	4620      	mov	r0, r4
   10ab0:	f7ff ffd4 	bl	10a5c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   10ab4:	4623      	mov	r3, r4
   10ab6:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   10ab8:	bd38      	pop	{r3, r4, r5, pc}
   10aba:	bf00      	nop
   10abc:	20001684 	.word	0x20001684

00010ac0 <move_thread_to_end_of_prio_q>:
{
   10ac0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   10ac2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   10ac6:	7b43      	ldrb	r3, [r0, #13]
   10ac8:	2a00      	cmp	r2, #0
{
   10aca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   10acc:	da04      	bge.n	10ad8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10ad2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   10ad4:	f002 fa17 	bl	12f06 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   10ad8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   10ada:	4a15      	ldr	r2, [pc, #84]	; (10b30 <move_thread_to_end_of_prio_q+0x70>)
   10adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10ae0:	4610      	mov	r0, r2
   10ae2:	734b      	strb	r3, [r1, #13]
   10ae4:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   10ae8:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10aea:	4283      	cmp	r3, r0
   10aec:	bf08      	it	eq
   10aee:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10af0:	b923      	cbnz	r3, 10afc <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   10af2:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   10af6:	6021      	str	r1, [r4, #0]
	list->tail = node;
   10af8:	6251      	str	r1, [r2, #36]	; 0x24
}
   10afa:	e00c      	b.n	10b16 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   10afc:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   10b00:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   10b04:	42b5      	cmp	r5, r6
   10b06:	d00e      	beq.n	10b26 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   10b08:	42ae      	cmp	r6, r5
   10b0a:	dd0c      	ble.n	10b26 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   10b0c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   10b0e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   10b12:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   10b14:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   10b16:	6890      	ldr	r0, [r2, #8]
   10b18:	1a43      	subs	r3, r0, r1
   10b1a:	4258      	negs	r0, r3
}
   10b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   10b20:	4158      	adcs	r0, r3
   10b22:	f7ff bfaf 	b.w	10a84 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   10b26:	429c      	cmp	r4, r3
   10b28:	d0e3      	beq.n	10af2 <move_thread_to_end_of_prio_q+0x32>
   10b2a:	681b      	ldr	r3, [r3, #0]
   10b2c:	e7e0      	b.n	10af0 <move_thread_to_end_of_prio_q+0x30>
   10b2e:	bf00      	nop
   10b30:	20001684 	.word	0x20001684

00010b34 <ready_thread>:
{
   10b34:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   10b36:	f990 300d 	ldrsb.w	r3, [r0, #13]
   10b3a:	7b42      	ldrb	r2, [r0, #13]
   10b3c:	2b00      	cmp	r3, #0
   10b3e:	db29      	blt.n	10b94 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   10b40:	06d3      	lsls	r3, r2, #27
   10b42:	d127      	bne.n	10b94 <ready_thread+0x60>
	return node->next != NULL;
   10b44:	6983      	ldr	r3, [r0, #24]
   10b46:	bb2b      	cbnz	r3, 10b94 <ready_thread+0x60>
	return list->head == list;
   10b48:	4913      	ldr	r1, [pc, #76]	; (10b98 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   10b4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10b4e:	7342      	strb	r2, [r0, #13]
   10b50:	460a      	mov	r2, r1
   10b52:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10b56:	4294      	cmp	r4, r2
   10b58:	bf18      	it	ne
   10b5a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   10b5c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10b5e:	b923      	cbnz	r3, 10b6a <ready_thread+0x36>
	node->prev = tail;
   10b60:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   10b64:	6020      	str	r0, [r4, #0]
	list->tail = node;
   10b66:	6248      	str	r0, [r1, #36]	; 0x24
}
   10b68:	e00c      	b.n	10b84 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   10b6a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   10b6e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   10b72:	42b5      	cmp	r5, r6
   10b74:	d00a      	beq.n	10b8c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   10b76:	42ae      	cmp	r6, r5
   10b78:	dd08      	ble.n	10b8c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   10b7a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   10b7c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   10b80:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   10b82:	6058      	str	r0, [r3, #4]
}
   10b84:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   10b86:	2000      	movs	r0, #0
   10b88:	f7ff bf7c 	b.w	10a84 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   10b8c:	42a3      	cmp	r3, r4
   10b8e:	d0e7      	beq.n	10b60 <ready_thread+0x2c>
   10b90:	681b      	ldr	r3, [r3, #0]
   10b92:	e7e4      	b.n	10b5e <ready_thread+0x2a>
}
   10b94:	bc70      	pop	{r4, r5, r6}
   10b96:	4770      	bx	lr
   10b98:	20001684 	.word	0x20001684

00010b9c <unready_thread>:
{
   10b9c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   10b9e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   10ba2:	7b43      	ldrb	r3, [r0, #13]
   10ba4:	2a00      	cmp	r2, #0
{
   10ba6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   10ba8:	da04      	bge.n	10bb4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10bae:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   10bb0:	f002 f9a9 	bl	12f06 <sys_dlist_remove>
	update_cache(thread == _current);
   10bb4:	4b04      	ldr	r3, [pc, #16]	; (10bc8 <unready_thread+0x2c>)
   10bb6:	6898      	ldr	r0, [r3, #8]
   10bb8:	1a43      	subs	r3, r0, r1
   10bba:	4258      	negs	r0, r3
   10bbc:	4158      	adcs	r0, r3
}
   10bbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   10bc2:	f7ff bf5f 	b.w	10a84 <update_cache>
   10bc6:	bf00      	nop
   10bc8:	20001684 	.word	0x20001684

00010bcc <pend_locked>:
{
   10bcc:	b570      	push	{r4, r5, r6, lr}
   10bce:	4615      	mov	r5, r2
   10bd0:	461c      	mov	r4, r3
   10bd2:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   10bd4:	f002 f9cb 	bl	12f6e <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10bd8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   10bdc:	bf08      	it	eq
   10bde:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   10be2:	d008      	beq.n	10bf6 <pend_locked+0x2a>
   10be4:	462a      	mov	r2, r5
   10be6:	4623      	mov	r3, r4
   10be8:	f106 0018 	add.w	r0, r6, #24
   10bec:	4902      	ldr	r1, [pc, #8]	; (10bf8 <pend_locked+0x2c>)
}
   10bee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10bf2:	f000 baf5 	b.w	111e0 <z_add_timeout>
   10bf6:	bd70      	pop	{r4, r5, r6, pc}
   10bf8:	00012f2b 	.word	0x00012f2b

00010bfc <k_sched_time_slice_set>:
{
   10bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10bfe:	4604      	mov	r4, r0
   10c00:	460d      	mov	r5, r1
	__asm__ volatile(
   10c02:	f04f 0340 	mov.w	r3, #64	; 0x40
   10c06:	f3ef 8711 	mrs	r7, BASEPRI
   10c0a:	f383 8812 	msr	BASEPRI_MAX, r3
   10c0e:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   10c12:	2600      	movs	r6, #0
   10c14:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   10c18:	f240 30e7 	movw	r0, #999	; 0x3e7
   10c1c:	4631      	mov	r1, r6
   10c1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10c22:	2300      	movs	r3, #0
   10c24:	fbe4 010c 	umlal	r0, r1, r4, ip
   10c28:	f7ef ff40 	bl	aac <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   10c2c:	42b4      	cmp	r4, r6
   10c2e:	dd02      	ble.n	10c36 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   10c30:	2802      	cmp	r0, #2
   10c32:	bfb8      	it	lt
   10c34:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   10c36:	4a07      	ldr	r2, [pc, #28]	; (10c54 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   10c38:	4b07      	ldr	r3, [pc, #28]	; (10c58 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   10c3a:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   10c3c:	4a07      	ldr	r2, [pc, #28]	; (10c5c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   10c3e:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   10c40:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   10c42:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   10c44:	f7ff ff0a 	bl	10a5c <z_reset_time_slice>
	__asm__ volatile(
   10c48:	f387 8811 	msr	BASEPRI, r7
   10c4c:	f3bf 8f6f 	isb	sy
}
   10c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10c52:	bf00      	nop
   10c54:	200016bc 	.word	0x200016bc
   10c58:	20001684 	.word	0x20001684
   10c5c:	200016b8 	.word	0x200016b8

00010c60 <z_time_slice>:
{
   10c60:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   10c62:	f04f 0340 	mov.w	r3, #64	; 0x40
   10c66:	f3ef 8511 	mrs	r5, BASEPRI
   10c6a:	f383 8812 	msr	BASEPRI_MAX, r3
   10c6e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   10c72:	4b17      	ldr	r3, [pc, #92]	; (10cd0 <z_time_slice+0x70>)
   10c74:	4a17      	ldr	r2, [pc, #92]	; (10cd4 <z_time_slice+0x74>)
   10c76:	689c      	ldr	r4, [r3, #8]
   10c78:	6811      	ldr	r1, [r2, #0]
   10c7a:	428c      	cmp	r4, r1
   10c7c:	d107      	bne.n	10c8e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   10c7e:	4620      	mov	r0, r4
   10c80:	f7ff feec 	bl	10a5c <z_reset_time_slice>
	__asm__ volatile(
   10c84:	f385 8811 	msr	BASEPRI, r5
   10c88:	f3bf 8f6f 	isb	sy
}
   10c8c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   10c8e:	2100      	movs	r1, #0
   10c90:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   10c92:	4a11      	ldr	r2, [pc, #68]	; (10cd8 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   10c94:	6812      	ldr	r2, [r2, #0]
   10c96:	b1c2      	cbz	r2, 10cca <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   10c98:	89e2      	ldrh	r2, [r4, #14]
   10c9a:	2a7f      	cmp	r2, #127	; 0x7f
   10c9c:	d815      	bhi.n	10cca <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   10c9e:	7b62      	ldrb	r2, [r4, #13]
   10ca0:	06d2      	lsls	r2, r2, #27
   10ca2:	d112      	bne.n	10cca <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   10ca4:	4a0d      	ldr	r2, [pc, #52]	; (10cdc <z_time_slice+0x7c>)
   10ca6:	f994 100e 	ldrsb.w	r1, [r4, #14]
   10caa:	6812      	ldr	r2, [r2, #0]
   10cac:	4291      	cmp	r1, r2
   10cae:	db0c      	blt.n	10cca <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   10cb0:	4a0b      	ldr	r2, [pc, #44]	; (10ce0 <z_time_slice+0x80>)
   10cb2:	4294      	cmp	r4, r2
   10cb4:	d009      	beq.n	10cca <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   10cb6:	691a      	ldr	r2, [r3, #16]
   10cb8:	4282      	cmp	r2, r0
   10cba:	dc03      	bgt.n	10cc4 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   10cbc:	4620      	mov	r0, r4
   10cbe:	f7ff feff 	bl	10ac0 <move_thread_to_end_of_prio_q>
   10cc2:	e7dc      	b.n	10c7e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   10cc4:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   10cc6:	611a      	str	r2, [r3, #16]
   10cc8:	e7dc      	b.n	10c84 <z_time_slice+0x24>
   10cca:	2200      	movs	r2, #0
   10ccc:	e7fb      	b.n	10cc6 <z_time_slice+0x66>
   10cce:	bf00      	nop
   10cd0:	20001684 	.word	0x20001684
   10cd4:	200016b4 	.word	0x200016b4
   10cd8:	200016bc 	.word	0x200016bc
   10cdc:	200016b8 	.word	0x200016b8
   10ce0:	20001368 	.word	0x20001368

00010ce4 <z_pend_curr>:
{
   10ce4:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   10ce6:	480c      	ldr	r0, [pc, #48]	; (10d18 <z_pend_curr+0x34>)
   10ce8:	4d0c      	ldr	r5, [pc, #48]	; (10d1c <z_pend_curr+0x38>)
   10cea:	6886      	ldr	r6, [r0, #8]
   10cec:	602e      	str	r6, [r5, #0]
{
   10cee:	460c      	mov	r4, r1
   10cf0:	4611      	mov	r1, r2
   10cf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   10cf6:	f04f 0640 	mov.w	r6, #64	; 0x40
   10cfa:	f3ef 8511 	mrs	r5, BASEPRI
   10cfe:	f386 8812 	msr	BASEPRI_MAX, r6
   10d02:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   10d06:	6880      	ldr	r0, [r0, #8]
   10d08:	f7ff ff60 	bl	10bcc <pend_locked>
	ret = arch_swap(key);
   10d0c:	4620      	mov	r0, r4
}
   10d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10d12:	f7fb bd67 	b.w	c7e4 <arch_swap>
   10d16:	bf00      	nop
   10d18:	20001684 	.word	0x20001684
   10d1c:	200016b4 	.word	0x200016b4

00010d20 <z_set_prio>:
{
   10d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d22:	4604      	mov	r4, r0
   10d24:	f04f 0340 	mov.w	r3, #64	; 0x40
   10d28:	f3ef 8611 	mrs	r6, BASEPRI
   10d2c:	f383 8812 	msr	BASEPRI_MAX, r3
   10d30:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   10d34:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   10d36:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   10d38:	b249      	sxtb	r1, r1
   10d3a:	d119      	bne.n	10d70 <z_set_prio+0x50>
	return node->next != NULL;
   10d3c:	6985      	ldr	r5, [r0, #24]
   10d3e:	b9bd      	cbnz	r5, 10d70 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10d44:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   10d46:	f002 f8de 	bl	12f06 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   10d4a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   10d4c:	4a16      	ldr	r2, [pc, #88]	; (10da8 <z_set_prio+0x88>)
				thread->base.prio = prio;
   10d4e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   10d50:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10d54:	7343      	strb	r3, [r0, #13]
   10d56:	4613      	mov	r3, r2
   10d58:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10d5c:	4298      	cmp	r0, r3
   10d5e:	bf18      	it	ne
   10d60:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   10d62:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10d64:	b95d      	cbnz	r5, 10d7e <z_set_prio+0x5e>
	node->prev = tail;
   10d66:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   10d6a:	6004      	str	r4, [r0, #0]
	list->tail = node;
   10d6c:	6254      	str	r4, [r2, #36]	; 0x24
}
   10d6e:	e011      	b.n	10d94 <z_set_prio+0x74>
			thread->base.prio = prio;
   10d70:	73a1      	strb	r1, [r4, #14]
   10d72:	2000      	movs	r0, #0
	__asm__ volatile(
   10d74:	f386 8811 	msr	BASEPRI, r6
   10d78:	f3bf 8f6f 	isb	sy
}
   10d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   10d7e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   10d82:	42b9      	cmp	r1, r7
   10d84:	d00b      	beq.n	10d9e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   10d86:	428f      	cmp	r7, r1
   10d88:	dd09      	ble.n	10d9e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   10d8a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   10d8c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   10d90:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   10d92:	606c      	str	r4, [r5, #4]
			update_cache(1);
   10d94:	2001      	movs	r0, #1
   10d96:	f7ff fe75 	bl	10a84 <update_cache>
   10d9a:	2001      	movs	r0, #1
   10d9c:	e7ea      	b.n	10d74 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   10d9e:	42a8      	cmp	r0, r5
   10da0:	d0e1      	beq.n	10d66 <z_set_prio+0x46>
   10da2:	682d      	ldr	r5, [r5, #0]
   10da4:	e7de      	b.n	10d64 <z_set_prio+0x44>
   10da6:	bf00      	nop
   10da8:	20001684 	.word	0x20001684

00010dac <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   10dac:	b949      	cbnz	r1, 10dc2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10dae:	f3ef 8005 	mrs	r0, IPSR
   10db2:	b930      	cbnz	r0, 10dc2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   10db4:	4b05      	ldr	r3, [pc, #20]	; (10dcc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   10db6:	69da      	ldr	r2, [r3, #28]
   10db8:	689b      	ldr	r3, [r3, #8]
   10dba:	429a      	cmp	r2, r3
   10dbc:	d001      	beq.n	10dc2 <z_reschedule+0x16>
   10dbe:	f7fb bd11 	b.w	c7e4 <arch_swap>
   10dc2:	f381 8811 	msr	BASEPRI, r1
   10dc6:	f3bf 8f6f 	isb	sy
}
   10dca:	4770      	bx	lr
   10dcc:	20001684 	.word	0x20001684

00010dd0 <z_sched_start>:
{
   10dd0:	b510      	push	{r4, lr}
	__asm__ volatile(
   10dd2:	f04f 0240 	mov.w	r2, #64	; 0x40
   10dd6:	f3ef 8411 	mrs	r4, BASEPRI
   10dda:	f382 8812 	msr	BASEPRI_MAX, r2
   10dde:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   10de2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   10de4:	0751      	lsls	r1, r2, #29
   10de6:	d404      	bmi.n	10df2 <z_sched_start+0x22>
	__asm__ volatile(
   10de8:	f384 8811 	msr	BASEPRI, r4
   10dec:	f3bf 8f6f 	isb	sy
}
   10df0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10df2:	f022 0204 	bic.w	r2, r2, #4
   10df6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   10df8:	f7ff fe9c 	bl	10b34 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   10dfc:	4621      	mov	r1, r4
   10dfe:	4802      	ldr	r0, [pc, #8]	; (10e08 <z_sched_start+0x38>)
}
   10e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   10e04:	f7ff bfd2 	b.w	10dac <z_reschedule>
   10e08:	20001b92 	.word	0x20001b92

00010e0c <z_impl_k_thread_suspend>:
{
   10e0c:	b570      	push	{r4, r5, r6, lr}
   10e0e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   10e10:	3018      	adds	r0, #24
   10e12:	f002 f984 	bl	1311e <z_abort_timeout>
	__asm__ volatile(
   10e16:	f04f 0340 	mov.w	r3, #64	; 0x40
   10e1a:	f3ef 8611 	mrs	r6, BASEPRI
   10e1e:	f383 8812 	msr	BASEPRI_MAX, r3
   10e22:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   10e26:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   10e2a:	7b63      	ldrb	r3, [r4, #13]
   10e2c:	2a00      	cmp	r2, #0
   10e2e:	da05      	bge.n	10e3c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10e34:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   10e36:	4620      	mov	r0, r4
   10e38:	f002 f865 	bl	12f06 <sys_dlist_remove>
		update_cache(thread == _current);
   10e3c:	4d0b      	ldr	r5, [pc, #44]	; (10e6c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   10e3e:	7b63      	ldrb	r3, [r4, #13]
   10e40:	68a8      	ldr	r0, [r5, #8]
   10e42:	f043 0310 	orr.w	r3, r3, #16
   10e46:	7363      	strb	r3, [r4, #13]
   10e48:	1b03      	subs	r3, r0, r4
   10e4a:	4258      	negs	r0, r3
   10e4c:	4158      	adcs	r0, r3
   10e4e:	f7ff fe19 	bl	10a84 <update_cache>
	__asm__ volatile(
   10e52:	f386 8811 	msr	BASEPRI, r6
   10e56:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   10e5a:	68ab      	ldr	r3, [r5, #8]
   10e5c:	42a3      	cmp	r3, r4
   10e5e:	d103      	bne.n	10e68 <z_impl_k_thread_suspend+0x5c>
}
   10e60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   10e64:	f002 b91e 	b.w	130a4 <z_reschedule_unlocked>
}
   10e68:	bd70      	pop	{r4, r5, r6, pc}
   10e6a:	bf00      	nop
   10e6c:	20001684 	.word	0x20001684

00010e70 <k_sched_lock>:
	__asm__ volatile(
   10e70:	f04f 0340 	mov.w	r3, #64	; 0x40
   10e74:	f3ef 8111 	mrs	r1, BASEPRI
   10e78:	f383 8812 	msr	BASEPRI_MAX, r3
   10e7c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   10e80:	4b04      	ldr	r3, [pc, #16]	; (10e94 <k_sched_lock+0x24>)
   10e82:	689a      	ldr	r2, [r3, #8]
   10e84:	7bd3      	ldrb	r3, [r2, #15]
   10e86:	3b01      	subs	r3, #1
   10e88:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   10e8a:	f381 8811 	msr	BASEPRI, r1
   10e8e:	f3bf 8f6f 	isb	sy
}
   10e92:	4770      	bx	lr
   10e94:	20001684 	.word	0x20001684

00010e98 <k_sched_unlock>:
{
   10e98:	b510      	push	{r4, lr}
	__asm__ volatile(
   10e9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   10e9e:	f3ef 8411 	mrs	r4, BASEPRI
   10ea2:	f383 8812 	msr	BASEPRI_MAX, r3
   10ea6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   10eaa:	4b08      	ldr	r3, [pc, #32]	; (10ecc <k_sched_unlock+0x34>)
   10eac:	689a      	ldr	r2, [r3, #8]
   10eae:	7bd3      	ldrb	r3, [r2, #15]
   10eb0:	3301      	adds	r3, #1
   10eb2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   10eb4:	2000      	movs	r0, #0
   10eb6:	f7ff fde5 	bl	10a84 <update_cache>
	__asm__ volatile(
   10eba:	f384 8811 	msr	BASEPRI, r4
   10ebe:	f3bf 8f6f 	isb	sy
}
   10ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   10ec6:	f002 b8ed 	b.w	130a4 <z_reschedule_unlocked>
   10eca:	bf00      	nop
   10ecc:	20001684 	.word	0x20001684

00010ed0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   10ed0:	4b04      	ldr	r3, [pc, #16]	; (10ee4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   10ed2:	2100      	movs	r1, #0
   10ed4:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   10ed8:	e9c3 2208 	strd	r2, r2, [r3, #32]
   10edc:	4608      	mov	r0, r1
   10ede:	f7ff be8d 	b.w	10bfc <k_sched_time_slice_set>
   10ee2:	bf00      	nop
   10ee4:	20001684 	.word	0x20001684

00010ee8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   10ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   10eea:	f04f 0340 	mov.w	r3, #64	; 0x40
   10eee:	f3ef 8511 	mrs	r5, BASEPRI
   10ef2:	f383 8812 	msr	BASEPRI_MAX, r3
   10ef6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   10efa:	4919      	ldr	r1, [pc, #100]	; (10f60 <z_impl_k_yield+0x78>)
   10efc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10efe:	7b43      	ldrb	r3, [r0, #13]
   10f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10f04:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   10f06:	f001 fffe 	bl	12f06 <sys_dlist_remove>
	}
	queue_thread(_current);
   10f0a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   10f0c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   10f0e:	4608      	mov	r0, r1
   10f10:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10f14:	735a      	strb	r2, [r3, #13]
   10f16:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   10f1a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10f1c:	4282      	cmp	r2, r0
   10f1e:	bf08      	it	eq
   10f20:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10f22:	b922      	cbnz	r2, 10f2e <z_impl_k_yield+0x46>
	node->prev = tail;
   10f24:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   10f28:	6023      	str	r3, [r4, #0]
	list->tail = node;
   10f2a:	624b      	str	r3, [r1, #36]	; 0x24
}
   10f2c:	e00c      	b.n	10f48 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   10f2e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   10f32:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   10f36:	42be      	cmp	r6, r7
   10f38:	d00e      	beq.n	10f58 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   10f3a:	42b7      	cmp	r7, r6
   10f3c:	dd0c      	ble.n	10f58 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   10f3e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   10f40:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   10f44:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   10f46:	6053      	str	r3, [r2, #4]
	update_cache(1);
   10f48:	2001      	movs	r0, #1
   10f4a:	f7ff fd9b 	bl	10a84 <update_cache>
   10f4e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   10f50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10f54:	f7fb bc46 	b.w	c7e4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   10f58:	42a2      	cmp	r2, r4
   10f5a:	d0e3      	beq.n	10f24 <z_impl_k_yield+0x3c>
   10f5c:	6812      	ldr	r2, [r2, #0]
   10f5e:	e7e0      	b.n	10f22 <z_impl_k_yield+0x3a>
   10f60:	20001684 	.word	0x20001684

00010f64 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   10f64:	ea50 0301 	orrs.w	r3, r0, r1
{
   10f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f6c:	4605      	mov	r5, r0
   10f6e:	460e      	mov	r6, r1
	if (ticks == 0) {
   10f70:	d103      	bne.n	10f7a <z_tick_sleep+0x16>
	z_impl_k_yield();
   10f72:	f7ff ffb9 	bl	10ee8 <z_impl_k_yield>
		k_yield();
		return 0;
   10f76:	2000      	movs	r0, #0
   10f78:	e02c      	b.n	10fd4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   10f7a:	1c83      	adds	r3, r0, #2
   10f7c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   10f80:	db2a      	blt.n	10fd8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   10f82:	f002 f90e 	bl	131a2 <sys_clock_tick_get_32>
   10f86:	1944      	adds	r4, r0, r5
   10f88:	f04f 0340 	mov.w	r3, #64	; 0x40
   10f8c:	f3ef 8811 	mrs	r8, BASEPRI
   10f90:	f383 8812 	msr	BASEPRI_MAX, r3
   10f94:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   10f98:	4f11      	ldr	r7, [pc, #68]	; (10fe0 <z_tick_sleep+0x7c>)
   10f9a:	4b12      	ldr	r3, [pc, #72]	; (10fe4 <z_tick_sleep+0x80>)
   10f9c:	68b8      	ldr	r0, [r7, #8]
   10f9e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   10fa0:	f7ff fdfc 	bl	10b9c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   10fa4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   10fa6:	4910      	ldr	r1, [pc, #64]	; (10fe8 <z_tick_sleep+0x84>)
   10fa8:	462a      	mov	r2, r5
   10faa:	4633      	mov	r3, r6
   10fac:	3018      	adds	r0, #24
   10fae:	f000 f917 	bl	111e0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   10fb2:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   10fb4:	7b53      	ldrb	r3, [r2, #13]
   10fb6:	f043 0310 	orr.w	r3, r3, #16
   10fba:	7353      	strb	r3, [r2, #13]
   10fbc:	4640      	mov	r0, r8
   10fbe:	f7fb fc11 	bl	c7e4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   10fc2:	f002 f8ee 	bl	131a2 <sys_clock_tick_get_32>
   10fc6:	1a20      	subs	r0, r4, r0
   10fc8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   10fcc:	2801      	cmp	r0, #1
   10fce:	f173 0300 	sbcs.w	r3, r3, #0
   10fd2:	dbd0      	blt.n	10f76 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   10fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   10fd8:	f06f 0401 	mvn.w	r4, #1
   10fdc:	1a24      	subs	r4, r4, r0
   10fde:	e7d3      	b.n	10f88 <z_tick_sleep+0x24>
   10fe0:	20001684 	.word	0x20001684
   10fe4:	200016b4 	.word	0x200016b4
   10fe8:	00012f2b 	.word	0x00012f2b

00010fec <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10fec:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   10ff0:	bf08      	it	eq
   10ff2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   10ff6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10ff8:	d106      	bne.n	11008 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   10ffa:	4b08      	ldr	r3, [pc, #32]	; (1101c <z_impl_k_sleep+0x30>)
   10ffc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   10ffe:	f7ff ff05 	bl	10e0c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   11002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   11006:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   11008:	f7ff ffac 	bl	10f64 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1100c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11010:	fb80 0303 	smull	r0, r3, r0, r3
   11014:	0bc0      	lsrs	r0, r0, #15
   11016:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1101a:	e7f4      	b.n	11006 <z_impl_k_sleep+0x1a>
   1101c:	20001684 	.word	0x20001684

00011020 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   11020:	4b01      	ldr	r3, [pc, #4]	; (11028 <z_impl_z_current_get+0x8>)
   11022:	6898      	ldr	r0, [r3, #8]
   11024:	4770      	bx	lr
   11026:	bf00      	nop
   11028:	20001684 	.word	0x20001684

0001102c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1102c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11030:	4604      	mov	r4, r0
   11032:	f04f 0340 	mov.w	r3, #64	; 0x40
   11036:	f3ef 8611 	mrs	r6, BASEPRI
   1103a:	f383 8812 	msr	BASEPRI_MAX, r3
   1103e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   11042:	7b03      	ldrb	r3, [r0, #12]
   11044:	07d9      	lsls	r1, r3, #31
   11046:	d50b      	bpl.n	11060 <z_thread_abort+0x34>
	__asm__ volatile(
   11048:	f386 8811 	msr	BASEPRI, r6
   1104c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   11050:	4040      	eors	r0, r0
   11052:	f380 8811 	msr	BASEPRI, r0
   11056:	f04f 0004 	mov.w	r0, #4
   1105a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   11060:	7b43      	ldrb	r3, [r0, #13]
   11062:	071a      	lsls	r2, r3, #28
   11064:	d504      	bpl.n	11070 <z_thread_abort+0x44>
   11066:	f386 8811 	msr	BASEPRI, r6
   1106a:	f3bf 8f6f 	isb	sy
   1106e:	e7f5      	b.n	1105c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   11070:	f023 0220 	bic.w	r2, r3, #32
   11074:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   11078:	09d2      	lsrs	r2, r2, #7
   1107a:	d120      	bne.n	110be <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1107c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1107e:	68a3      	ldr	r3, [r4, #8]
   11080:	b113      	cbz	r3, 11088 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   11082:	4620      	mov	r0, r4
   11084:	f001 ff47 	bl	12f16 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   11088:	f104 0018 	add.w	r0, r4, #24
   1108c:	f002 f847 	bl	1311e <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   11090:	f104 0758 	add.w	r7, r4, #88	; 0x58
   11094:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   11098:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1109a:	42bd      	cmp	r5, r7
   1109c:	d000      	beq.n	110a0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1109e:	b9b5      	cbnz	r5, 110ce <z_thread_abort+0xa2>
		update_cache(1);
   110a0:	2001      	movs	r0, #1
   110a2:	f7ff fcef 	bl	10a84 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   110a6:	4b10      	ldr	r3, [pc, #64]	; (110e8 <z_thread_abort+0xbc>)
   110a8:	689b      	ldr	r3, [r3, #8]
   110aa:	42a3      	cmp	r3, r4
   110ac:	d1db      	bne.n	11066 <z_thread_abort+0x3a>
   110ae:	f3ef 8305 	mrs	r3, IPSR
   110b2:	2b00      	cmp	r3, #0
   110b4:	d1d7      	bne.n	11066 <z_thread_abort+0x3a>
   110b6:	4630      	mov	r0, r6
   110b8:	f7fb fb94 	bl	c7e4 <arch_swap>
	return ret;
   110bc:	e7d3      	b.n	11066 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   110be:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   110c2:	f043 0308 	orr.w	r3, r3, #8
   110c6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   110c8:	f001 ff1d 	bl	12f06 <sys_dlist_remove>
}
   110cc:	e7d7      	b.n	1107e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   110ce:	4628      	mov	r0, r5
   110d0:	f001 ff21 	bl	12f16 <unpend_thread_no_timeout>
   110d4:	f105 0018 	add.w	r0, r5, #24
   110d8:	f002 f821 	bl	1311e <z_abort_timeout>
   110dc:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   110e0:	4628      	mov	r0, r5
   110e2:	f7ff fd27 	bl	10b34 <ready_thread>
   110e6:	e7d7      	b.n	11098 <z_thread_abort+0x6c>
   110e8:	20001684 	.word	0x20001684

000110ec <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   110ec:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   110ee:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   110f2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   110f4:	e9cd 6700 	strd	r6, r7, [sp]
   110f8:	f7ff fdf4 	bl	10ce4 <z_pend_curr>

	if (data != NULL) {
   110fc:	b11c      	cbz	r4, 11106 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   110fe:	4b03      	ldr	r3, [pc, #12]	; (1110c <z_sched_wait+0x20>)
   11100:	689b      	ldr	r3, [r3, #8]
   11102:	695b      	ldr	r3, [r3, #20]
   11104:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   11106:	b002      	add	sp, #8
   11108:	bdd0      	pop	{r4, r6, r7, pc}
   1110a:	bf00      	nop
   1110c:	20001684 	.word	0x20001684

00011110 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   11110:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   11112:	4806      	ldr	r0, [pc, #24]	; (1112c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   11114:	4a06      	ldr	r2, [pc, #24]	; (11130 <z_data_copy+0x20>)
   11116:	4907      	ldr	r1, [pc, #28]	; (11134 <z_data_copy+0x24>)
   11118:	1a12      	subs	r2, r2, r0
   1111a:	f001 fd58 	bl	12bce <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1111e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   11122:	4a05      	ldr	r2, [pc, #20]	; (11138 <z_data_copy+0x28>)
   11124:	4905      	ldr	r1, [pc, #20]	; (1113c <z_data_copy+0x2c>)
   11126:	4806      	ldr	r0, [pc, #24]	; (11140 <z_data_copy+0x30>)
   11128:	f001 bd51 	b.w	12bce <z_early_memcpy>
   1112c:	20000000 	.word	0x20000000
   11130:	20000524 	.word	0x20000524
   11134:	00013c1c 	.word	0x00013c1c
   11138:	00000000 	.word	0x00000000
   1113c:	00013c1c 	.word	0x00013c1c
   11140:	20000000 	.word	0x20000000

00011144 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   11144:	4b03      	ldr	r3, [pc, #12]	; (11154 <elapsed+0x10>)
   11146:	681b      	ldr	r3, [r3, #0]
   11148:	b90b      	cbnz	r3, 1114e <elapsed+0xa>
   1114a:	f7fd be9b 	b.w	ee84 <sys_clock_elapsed>
}
   1114e:	2000      	movs	r0, #0
   11150:	4770      	bx	lr
   11152:	bf00      	nop
   11154:	200016c0 	.word	0x200016c0

00011158 <next_timeout>:

static int32_t next_timeout(void)
{
   11158:	b510      	push	{r4, lr}
	return list->head == list;
   1115a:	4b11      	ldr	r3, [pc, #68]	; (111a0 <next_timeout+0x48>)
   1115c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1115e:	429c      	cmp	r4, r3
   11160:	d10a      	bne.n	11178 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   11162:	f7ff ffef 	bl	11144 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   11166:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1116a:	4b0e      	ldr	r3, [pc, #56]	; (111a4 <next_timeout+0x4c>)
   1116c:	691b      	ldr	r3, [r3, #16]
   1116e:	b113      	cbz	r3, 11176 <next_timeout+0x1e>
   11170:	4298      	cmp	r0, r3
   11172:	bfa8      	it	ge
   11174:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   11176:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   11178:	f7ff ffe4 	bl	11144 <elapsed>
	if ((to == NULL) ||
   1117c:	2c00      	cmp	r4, #0
   1117e:	d0f2      	beq.n	11166 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   11180:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   11184:	1a1b      	subs	r3, r3, r0
   11186:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1118a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1118e:	f172 0100 	sbcs.w	r1, r2, #0
   11192:	dae8      	bge.n	11166 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   11194:	2a00      	cmp	r2, #0
   11196:	bfac      	ite	ge
   11198:	4618      	movge	r0, r3
   1119a:	2000      	movlt	r0, #0
   1119c:	e7e5      	b.n	1116a <next_timeout+0x12>
   1119e:	bf00      	nop
   111a0:	2000046c 	.word	0x2000046c
   111a4:	20001684 	.word	0x20001684

000111a8 <remove_timeout>:
{
   111a8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   111aa:	b170      	cbz	r0, 111ca <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   111ac:	4b0b      	ldr	r3, [pc, #44]	; (111dc <remove_timeout+0x34>)
   111ae:	685b      	ldr	r3, [r3, #4]
   111b0:	4298      	cmp	r0, r3
   111b2:	d00a      	beq.n	111ca <remove_timeout+0x22>
   111b4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   111b6:	b143      	cbz	r3, 111ca <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   111b8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   111bc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   111c0:	1912      	adds	r2, r2, r4
   111c2:	eb41 0105 	adc.w	r1, r1, r5
   111c6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   111ca:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   111ce:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   111d0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   111d2:	2300      	movs	r3, #0
	node->prev = NULL;
   111d4:	e9c0 3300 	strd	r3, r3, [r0]
}
   111d8:	bd30      	pop	{r4, r5, pc}
   111da:	bf00      	nop
   111dc:	2000046c 	.word	0x2000046c

000111e0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   111e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   111e4:	bf08      	it	eq
   111e6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   111ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   111ec:	4604      	mov	r4, r0
   111ee:	461d      	mov	r5, r3
   111f0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   111f2:	d061      	beq.n	112b8 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   111f4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   111f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   111fa:	f3ef 8711 	mrs	r7, BASEPRI
   111fe:	f383 8812 	msr	BASEPRI_MAX, r3
   11202:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   11206:	3201      	adds	r2, #1
   11208:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   1120c:	da24      	bge.n	11258 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1120e:	4930      	ldr	r1, [pc, #192]	; (112d0 <z_add_timeout+0xf0>)
   11210:	e9d1 2000 	ldrd	r2, r0, [r1]
   11214:	f06f 0301 	mvn.w	r3, #1
   11218:	1a9b      	subs	r3, r3, r2
   1121a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1121e:	eb62 0000 	sbc.w	r0, r2, r0
   11222:	1b9e      	subs	r6, r3, r6
   11224:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   11228:	2e01      	cmp	r6, #1
   1122a:	f170 0300 	sbcs.w	r3, r0, #0
   1122e:	da01      	bge.n	11234 <z_add_timeout+0x54>
   11230:	2601      	movs	r6, #1
   11232:	2000      	movs	r0, #0
   11234:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   11238:	4e26      	ldr	r6, [pc, #152]	; (112d4 <z_add_timeout+0xf4>)
   1123a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   1123e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11240:	45b4      	cmp	ip, r6
   11242:	bf08      	it	eq
   11244:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   11248:	f1bc 0f00 	cmp.w	ip, #0
   1124c:	d10d      	bne.n	1126a <z_add_timeout+0x8a>
	node->prev = tail;
   1124e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   11252:	602c      	str	r4, [r5, #0]
	list->tail = node;
   11254:	6074      	str	r4, [r6, #4]
}
   11256:	e01c      	b.n	11292 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   11258:	f7ff ff74 	bl	11144 <elapsed>
   1125c:	3601      	adds	r6, #1
   1125e:	f145 0500 	adc.w	r5, r5, #0
   11262:	1836      	adds	r6, r6, r0
   11264:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   11268:	e7e4      	b.n	11234 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   1126a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   1126e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   11272:	4293      	cmp	r3, r2
   11274:	eb71 0e00 	sbcs.w	lr, r1, r0
   11278:	da1f      	bge.n	112ba <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   1127a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   1127c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   11280:	eb60 0001 	sbc.w	r0, r0, r1
   11284:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   11288:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   1128c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1128e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   11292:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11294:	42b3      	cmp	r3, r6
   11296:	d00b      	beq.n	112b0 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   11298:	429c      	cmp	r4, r3
   1129a:	d109      	bne.n	112b0 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1129c:	f7ff ff5c 	bl	11158 <next_timeout>

			if (next_time == 0 ||
   112a0:	b118      	cbz	r0, 112aa <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   112a2:	4b0d      	ldr	r3, [pc, #52]	; (112d8 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   112a4:	691b      	ldr	r3, [r3, #16]
   112a6:	4283      	cmp	r3, r0
   112a8:	d002      	beq.n	112b0 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   112aa:	2100      	movs	r1, #0
   112ac:	f7fd fdb8 	bl	ee20 <sys_clock_set_timeout>
	__asm__ volatile(
   112b0:	f387 8811 	msr	BASEPRI, r7
   112b4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   112b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   112ba:	1a9b      	subs	r3, r3, r2
   112bc:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   112c0:	45ac      	cmp	ip, r5
   112c2:	e9c4 3104 	strd	r3, r1, [r4, #16]
   112c6:	d0c2      	beq.n	1124e <z_add_timeout+0x6e>
   112c8:	f8dc c000 	ldr.w	ip, [ip]
   112cc:	e7bc      	b.n	11248 <z_add_timeout+0x68>
   112ce:	bf00      	nop
   112d0:	20001468 	.word	0x20001468
   112d4:	2000046c 	.word	0x2000046c
   112d8:	20001684 	.word	0x20001684

000112dc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   112dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   112e0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   112e2:	f7ff fcbd 	bl	10c60 <z_time_slice>
	__asm__ volatile(
   112e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   112ea:	f3ef 8611 	mrs	r6, BASEPRI
   112ee:	f383 8812 	msr	BASEPRI_MAX, r3
   112f2:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   112f6:	4f23      	ldr	r7, [pc, #140]	; (11384 <sys_clock_announce+0xa8>)
	return list->head == list;
   112f8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 11388 <sys_clock_announce+0xac>
   112fc:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   11300:	4a22      	ldr	r2, [pc, #136]	; (1138c <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
   11302:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11304:	4540      	cmp	r0, r8
		curr_tick += dt;
   11306:	e9d2 3e00 	ldrd	r3, lr, [r2]
   1130a:	ea4f 71e4 	mov.w	r1, r4, asr #31
   1130e:	d00b      	beq.n	11328 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   11310:	b150      	cbz	r0, 11328 <sys_clock_announce+0x4c>
   11312:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   11316:	42ac      	cmp	r4, r5
   11318:	eb71 090c 	sbcs.w	r9, r1, ip
   1131c:	da16      	bge.n	1134c <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1131e:	1b2d      	subs	r5, r5, r4
   11320:	eb6c 0c01 	sbc.w	ip, ip, r1
   11324:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   11328:	18e3      	adds	r3, r4, r3
   1132a:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   1132e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   11330:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   11334:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   11336:	f7ff ff0f 	bl	11158 <next_timeout>
   1133a:	4621      	mov	r1, r4
   1133c:	f7fd fd70 	bl	ee20 <sys_clock_set_timeout>
	__asm__ volatile(
   11340:	f386 8811 	msr	BASEPRI, r6
   11344:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   11348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1134c:	18eb      	adds	r3, r5, r3
   1134e:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   11352:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   11356:	2200      	movs	r2, #0
   11358:	2300      	movs	r3, #0
   1135a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   1135e:	f7ff ff23 	bl	111a8 <remove_timeout>
   11362:	f386 8811 	msr	BASEPRI, r6
   11366:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1136a:	6883      	ldr	r3, [r0, #8]
   1136c:	4798      	blx	r3
	__asm__ volatile(
   1136e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11372:	f3ef 8611 	mrs	r6, BASEPRI
   11376:	f383 8812 	msr	BASEPRI_MAX, r3
   1137a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   1137e:	683c      	ldr	r4, [r7, #0]
   11380:	1b64      	subs	r4, r4, r5
   11382:	e7bb      	b.n	112fc <sys_clock_announce+0x20>
   11384:	200016c0 	.word	0x200016c0
   11388:	2000046c 	.word	0x2000046c
   1138c:	20001468 	.word	0x20001468

00011390 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   11390:	b510      	push	{r4, lr}
   11392:	f04f 0340 	mov.w	r3, #64	; 0x40
   11396:	f3ef 8411 	mrs	r4, BASEPRI
   1139a:	f383 8812 	msr	BASEPRI_MAX, r3
   1139e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   113a2:	f7ff fecf 	bl	11144 <elapsed>
   113a6:	4a06      	ldr	r2, [pc, #24]	; (113c0 <sys_clock_tick_get+0x30>)
   113a8:	4603      	mov	r3, r0
   113aa:	e9d2 0100 	ldrd	r0, r1, [r2]
   113ae:	1818      	adds	r0, r3, r0
   113b0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   113b4:	f384 8811 	msr	BASEPRI, r4
   113b8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   113bc:	bd10      	pop	{r4, pc}
   113be:	bf00      	nop
   113c0:	20001468 	.word	0x20001468

000113c4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   113c4:	b570      	push	{r4, r5, r6, lr}
   113c6:	4604      	mov	r4, r0
	__asm__ volatile(
   113c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   113cc:	f3ef 8511 	mrs	r5, BASEPRI
   113d0:	f383 8812 	msr	BASEPRI_MAX, r3
   113d4:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   113d8:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   113dc:	3301      	adds	r3, #1
   113de:	f142 0200 	adc.w	r2, r2, #0
   113e2:	2b02      	cmp	r3, #2
   113e4:	f172 0200 	sbcs.w	r2, r2, #0
   113e8:	d322      	bcc.n	11430 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   113ea:	f001 fede 	bl	131aa <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   113ee:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   113f2:	3001      	adds	r0, #1
   113f4:	f141 0100 	adc.w	r1, r1, #0
   113f8:	18c0      	adds	r0, r0, r3
   113fa:	eb41 0102 	adc.w	r1, r1, r2
   113fe:	2801      	cmp	r0, #1
   11400:	f171 0100 	sbcs.w	r1, r1, #0
   11404:	db32      	blt.n	1146c <z_timer_expiration_handler+0xa8>
   11406:	f001 fed0 	bl	131aa <z_impl_k_uptime_ticks>
   1140a:	3001      	adds	r0, #1
   1140c:	f141 0300 	adc.w	r3, r1, #0
   11410:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   11414:	1880      	adds	r0, r0, r2
   11416:	f06f 0201 	mvn.w	r2, #1
   1141a:	eb43 0301 	adc.w	r3, r3, r1
   1141e:	1a12      	subs	r2, r2, r0
   11420:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11424:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   11428:	491a      	ldr	r1, [pc, #104]	; (11494 <z_timer_expiration_handler+0xd0>)
   1142a:	4620      	mov	r0, r4
   1142c:	f7ff fed8 	bl	111e0 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   11430:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11432:	3301      	adds	r3, #1
   11434:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   11436:	6a23      	ldr	r3, [r4, #32]
   11438:	b173      	cbz	r3, 11458 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   1143a:	f385 8811 	msr	BASEPRI, r5
   1143e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   11442:	6a23      	ldr	r3, [r4, #32]
   11444:	4620      	mov	r0, r4
   11446:	4798      	blx	r3
	__asm__ volatile(
   11448:	f04f 0340 	mov.w	r3, #64	; 0x40
   1144c:	f3ef 8511 	mrs	r5, BASEPRI
   11450:	f383 8812 	msr	BASEPRI_MAX, r3
   11454:	f3bf 8f6f 	isb	sy
	return list->head == list;
   11458:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1145c:	42a6      	cmp	r6, r4
   1145e:	d000      	beq.n	11462 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   11460:	b94e      	cbnz	r6, 11476 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   11462:	f385 8811 	msr	BASEPRI, r5
   11466:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1146a:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   1146c:	f06f 0201 	mvn.w	r2, #1
   11470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11474:	e7d8      	b.n	11428 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   11476:	4630      	mov	r0, r6
   11478:	f001 fdb1 	bl	12fde <z_unpend_thread_no_timeout>
   1147c:	2300      	movs	r3, #0
   1147e:	67f3      	str	r3, [r6, #124]	; 0x7c
   11480:	f385 8811 	msr	BASEPRI, r5
   11484:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   11488:	4630      	mov	r0, r6
}
   1148a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   1148e:	f001 bd96 	b.w	12fbe <z_ready_thread>
   11492:	bf00      	nop
   11494:	000113c5 	.word	0x000113c5

00011498 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   11498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1149c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   114a0:	bf08      	it	eq
   114a2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   114a6:	4605      	mov	r5, r0
   114a8:	4614      	mov	r4, r2
   114aa:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   114ae:	4619      	mov	r1, r3
   114b0:	4691      	mov	r9, r2
   114b2:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   114b4:	d037      	beq.n	11526 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   114b6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   114ba:	bf08      	it	eq
   114bc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   114c0:	4637      	mov	r7, r6
   114c2:	4682      	mov	sl, r0
   114c4:	d011      	beq.n	114ea <z_impl_k_timer_start+0x52>
   114c6:	ea50 0306 	orrs.w	r3, r0, r6
   114ca:	d00e      	beq.n	114ea <z_impl_k_timer_start+0x52>
   114cc:	1c72      	adds	r2, r6, #1
   114ce:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
   114d2:	db0a      	blt.n	114ea <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   114d4:	2e02      	cmp	r6, #2
   114d6:	4684      	mov	ip, r0
   114d8:	f170 0000 	sbcs.w	r0, r0, #0
   114dc:	bfbc      	itt	lt
   114de:	2702      	movlt	r7, #2
   114e0:	f04f 0c00 	movlt.w	ip, #0
   114e4:	3f01      	subs	r7, #1
   114e6:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   114ea:	1c63      	adds	r3, r4, #1
   114ec:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   114f0:	db0a      	blt.n	11508 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   114f2:	2c01      	cmp	r4, #1
   114f4:	f171 0300 	sbcs.w	r3, r1, #0
   114f8:	4622      	mov	r2, r4
   114fa:	bfbc      	itt	lt
   114fc:	2201      	movlt	r2, #1
   114fe:	2100      	movlt	r1, #0
   11500:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   11504:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   11508:	4628      	mov	r0, r5
   1150a:	f001 fe08 	bl	1311e <z_abort_timeout>
	timer->period = period;
   1150e:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   11512:	2300      	movs	r3, #0
   11514:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   11516:	464a      	mov	r2, r9
   11518:	4643      	mov	r3, r8
   1151a:	4628      	mov	r0, r5
   1151c:	4903      	ldr	r1, [pc, #12]	; (1152c <z_impl_k_timer_start+0x94>)
		     duration);
}
   1151e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   11522:	f7ff be5d 	b.w	111e0 <z_add_timeout>
}
   11526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1152a:	bf00      	nop
   1152c:	000113c5 	.word	0x000113c5

00011530 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   11530:	b538      	push	{r3, r4, r5, lr}
   11532:	4603      	mov	r3, r0
	__asm__ volatile(
   11534:	f04f 0240 	mov.w	r2, #64	; 0x40
   11538:	f3ef 8511 	mrs	r5, BASEPRI
   1153c:	f382 8812 	msr	BASEPRI_MAX, r2
   11540:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   11544:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   11546:	2101      	movs	r1, #1
   11548:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1154a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1154c:	4283      	cmp	r3, r0
   1154e:	d106      	bne.n	1155e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   11550:	f385 8811 	msr	BASEPRI, r5
   11554:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   11558:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1155a:	4620      	mov	r0, r4
   1155c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1155e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   11562:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   11564:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11566:	2300      	movs	r3, #0
	node->prev = NULL;
   11568:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1156c:	f001 fe62 	bl	13234 <signal_poll_event>
	z_reschedule(&lock, key);
   11570:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   11572:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   11574:	4801      	ldr	r0, [pc, #4]	; (1157c <z_impl_k_poll_signal_raise+0x4c>)
   11576:	f7ff fc19 	bl	10dac <z_reschedule>
	return rc;
   1157a:	e7ee      	b.n	1155a <z_impl_k_poll_signal_raise+0x2a>
   1157c:	20001b93 	.word	0x20001b93

00011580 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   11580:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11582:	4606      	mov	r6, r0
   11584:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   11586:	f001 fb96 	bl	12cb6 <k_is_in_isr>
   1158a:	b978      	cbnz	r0, 115ac <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1158c:	4b0b      	ldr	r3, [pc, #44]	; (115bc <z_thread_aligned_alloc+0x3c>)
   1158e:	689b      	ldr	r3, [r3, #8]
   11590:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   11592:	b17c      	cbz	r4, 115b4 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   11594:	1d2a      	adds	r2, r5, #4
   11596:	d209      	bcs.n	115ac <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   11598:	2000      	movs	r0, #0
   1159a:	2100      	movs	r1, #0
   1159c:	e9cd 0100 	strd	r0, r1, [sp]
   115a0:	f046 0104 	orr.w	r1, r6, #4
   115a4:	4620      	mov	r0, r4
   115a6:	f001 fb1c 	bl	12be2 <k_heap_aligned_alloc>
	if (mem == NULL) {
   115aa:	b908      	cbnz	r0, 115b0 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   115ac:	2400      	movs	r4, #0
	}

	return ret;
   115ae:	e001      	b.n	115b4 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   115b0:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   115b2:	1d04      	adds	r4, r0, #4
}
   115b4:	4620      	mov	r0, r4
   115b6:	b002      	add	sp, #8
   115b8:	bd70      	pop	{r4, r5, r6, pc}
   115ba:	bf00      	nop
   115bc:	20001684 	.word	0x20001684

000115c0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   115c0:	4801      	ldr	r0, [pc, #4]	; (115c8 <boot_banner+0x8>)
   115c2:	f000 bbb1 	b.w	11d28 <printk>
   115c6:	bf00      	nop
   115c8:	00013ae1 	.word	0x00013ae1

000115cc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   115cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   115ce:	4b09      	ldr	r3, [pc, #36]	; (115f4 <k_sys_work_q_init+0x28>)
   115d0:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   115d2:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   115d4:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   115d6:	9300      	str	r3, [sp, #0]
   115d8:	4907      	ldr	r1, [pc, #28]	; (115f8 <k_sys_work_q_init+0x2c>)
   115da:	4808      	ldr	r0, [pc, #32]	; (115fc <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   115dc:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   115e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   115e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   115e8:	f7ff fa00 	bl	109ec <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   115ec:	4620      	mov	r0, r4
   115ee:	b004      	add	sp, #16
   115f0:	bd10      	pop	{r4, pc}
   115f2:	bf00      	nop
   115f4:	00013b0f 	.word	0x00013b0f
   115f8:	20002dc0 	.word	0x20002dc0
   115fc:	20001470 	.word	0x20001470

00011600 <sin>:
   11600:	b530      	push	{r4, r5, lr}
   11602:	4d20      	ldr	r5, [pc, #128]	; (11684 <sin+0x84>)
   11604:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   11608:	42ac      	cmp	r4, r5
   1160a:	b087      	sub	sp, #28
   1160c:	4602      	mov	r2, r0
   1160e:	460b      	mov	r3, r1
   11610:	d806      	bhi.n	11620 <sin+0x20>
   11612:	2300      	movs	r3, #0
   11614:	9300      	str	r3, [sp, #0]
   11616:	2200      	movs	r2, #0
   11618:	2300      	movs	r3, #0
   1161a:	f7f9 ff45 	bl	b4a8 <__kernel_sin>
   1161e:	e004      	b.n	1162a <sin+0x2a>
   11620:	4d19      	ldr	r5, [pc, #100]	; (11688 <sin+0x88>)
   11622:	42ac      	cmp	r4, r5
   11624:	d903      	bls.n	1162e <sin+0x2e>
   11626:	f7ee fdff 	bl	228 <__aeabi_dsub>
   1162a:	b007      	add	sp, #28
   1162c:	bd30      	pop	{r4, r5, pc}
   1162e:	aa02      	add	r2, sp, #8
   11630:	f7f9 fc82 	bl	af38 <__ieee754_rem_pio2>
   11634:	f000 0003 	and.w	r0, r0, #3
   11638:	2801      	cmp	r0, #1
   1163a:	d009      	beq.n	11650 <sin+0x50>
   1163c:	2802      	cmp	r0, #2
   1163e:	d00e      	beq.n	1165e <sin+0x5e>
   11640:	b9c0      	cbnz	r0, 11674 <sin+0x74>
   11642:	2301      	movs	r3, #1
   11644:	9300      	str	r3, [sp, #0]
   11646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1164a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1164e:	e7e4      	b.n	1161a <sin+0x1a>
   11650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11658:	f7f9 fe66 	bl	b328 <__kernel_cos>
   1165c:	e7e5      	b.n	1162a <sin+0x2a>
   1165e:	2301      	movs	r3, #1
   11660:	9300      	str	r3, [sp, #0]
   11662:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11666:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1166a:	f7f9 ff1d 	bl	b4a8 <__kernel_sin>
   1166e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   11672:	e7da      	b.n	1162a <sin+0x2a>
   11674:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1167c:	f7f9 fe54 	bl	b328 <__kernel_cos>
   11680:	e7f5      	b.n	1166e <sin+0x6e>
   11682:	bf00      	nop
   11684:	3fe921fb 	.word	0x3fe921fb
   11688:	7fefffff 	.word	0x7fefffff

0001168c <__kernel_rem_pio2>:
   1168c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11690:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   11694:	f112 0f14 	cmn.w	r2, #20
   11698:	9308      	str	r3, [sp, #32]
   1169a:	9104      	str	r1, [sp, #16]
   1169c:	4bb6      	ldr	r3, [pc, #728]	; (11978 <__kernel_rem_pio2+0x2ec>)
   1169e:	99a2      	ldr	r1, [sp, #648]	; 0x288
   116a0:	9009      	str	r0, [sp, #36]	; 0x24
   116a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   116a6:	9302      	str	r3, [sp, #8]
   116a8:	9b08      	ldr	r3, [sp, #32]
   116aa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   116ae:	bfa8      	it	ge
   116b0:	1ed4      	subge	r4, r2, #3
   116b2:	9306      	str	r3, [sp, #24]
   116b4:	bfb2      	itee	lt
   116b6:	2400      	movlt	r4, #0
   116b8:	2318      	movge	r3, #24
   116ba:	fb94 f4f3 	sdivge	r4, r4, r3
   116be:	f06f 0317 	mvn.w	r3, #23
   116c2:	fb04 3303 	mla	r3, r4, r3, r3
   116c6:	eb03 0a02 	add.w	sl, r3, r2
   116ca:	9a06      	ldr	r2, [sp, #24]
   116cc:	9b02      	ldr	r3, [sp, #8]
   116ce:	eb03 0802 	add.w	r8, r3, r2
   116d2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   116d4:	1aa7      	subs	r7, r4, r2
   116d6:	eb03 0987 	add.w	r9, r3, r7, lsl #2
   116da:	ae20      	add	r6, sp, #128	; 0x80
   116dc:	2500      	movs	r5, #0
   116de:	2200      	movs	r2, #0
   116e0:	2300      	movs	r3, #0
   116e2:	4545      	cmp	r5, r8
   116e4:	dd14      	ble.n	11710 <__kernel_rem_pio2+0x84>
   116e6:	9a08      	ldr	r2, [sp, #32]
   116e8:	ab20      	add	r3, sp, #128	; 0x80
   116ea:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
   116ee:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
   116f2:	f04f 0800 	mov.w	r8, #0
   116f6:	9b02      	ldr	r3, [sp, #8]
   116f8:	4598      	cmp	r8, r3
   116fa:	dc36      	bgt.n	1176a <__kernel_rem_pio2+0xde>
   116fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   116fe:	2200      	movs	r2, #0
   11700:	f1a3 0908 	sub.w	r9, r3, #8
   11704:	2300      	movs	r3, #0
   11706:	e9cd 2300 	strd	r2, r3, [sp]
   1170a:	462f      	mov	r7, r5
   1170c:	2600      	movs	r6, #0
   1170e:	e01f      	b.n	11750 <__kernel_rem_pio2+0xc4>
   11710:	42ef      	cmn	r7, r5
   11712:	d40b      	bmi.n	1172c <__kernel_rem_pio2+0xa0>
   11714:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
   11718:	e9cd 2300 	strd	r2, r3, [sp]
   1171c:	f7ee fed2 	bl	4c4 <__aeabi_i2d>
   11720:	e9dd 2300 	ldrd	r2, r3, [sp]
   11724:	e8e6 0102 	strd	r0, r1, [r6], #8
   11728:	3501      	adds	r5, #1
   1172a:	e7da      	b.n	116e2 <__kernel_rem_pio2+0x56>
   1172c:	4610      	mov	r0, r2
   1172e:	4619      	mov	r1, r3
   11730:	e7f8      	b.n	11724 <__kernel_rem_pio2+0x98>
   11732:	e9d7 2300 	ldrd	r2, r3, [r7]
   11736:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
   1173a:	f7ee ff2d 	bl	598 <__aeabi_dmul>
   1173e:	4602      	mov	r2, r0
   11740:	460b      	mov	r3, r1
   11742:	e9dd 0100 	ldrd	r0, r1, [sp]
   11746:	f7ee fd71 	bl	22c <__adddf3>
   1174a:	e9cd 0100 	strd	r0, r1, [sp]
   1174e:	3601      	adds	r6, #1
   11750:	9b06      	ldr	r3, [sp, #24]
   11752:	429e      	cmp	r6, r3
   11754:	f1a7 0708 	sub.w	r7, r7, #8
   11758:	ddeb      	ble.n	11732 <__kernel_rem_pio2+0xa6>
   1175a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1175e:	f108 0801 	add.w	r8, r8, #1
   11762:	e8eb 2302 	strd	r2, r3, [fp], #8
   11766:	3508      	adds	r5, #8
   11768:	e7c5      	b.n	116f6 <__kernel_rem_pio2+0x6a>
   1176a:	9b02      	ldr	r3, [sp, #8]
   1176c:	f8dd b008 	ldr.w	fp, [sp, #8]
   11770:	aa0c      	add	r2, sp, #48	; 0x30
   11772:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   11776:	930b      	str	r3, [sp, #44]	; 0x2c
   11778:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   1177a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1177e:	930a      	str	r3, [sp, #40]	; 0x28
   11780:	ab98      	add	r3, sp, #608	; 0x260
   11782:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   11786:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   1178a:	ab70      	add	r3, sp, #448	; 0x1c0
   1178c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   11790:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   11794:	9307      	str	r3, [sp, #28]
   11796:	461f      	mov	r7, r3
   11798:	46c8      	mov	r8, r9
   1179a:	465e      	mov	r6, fp
   1179c:	2e00      	cmp	r6, #0
   1179e:	f1a7 0708 	sub.w	r7, r7, #8
   117a2:	dc71      	bgt.n	11888 <__kernel_rem_pio2+0x1fc>
   117a4:	4652      	mov	r2, sl
   117a6:	4620      	mov	r0, r4
   117a8:	4629      	mov	r1, r5
   117aa:	f7f9 ffb5 	bl	b718 <scalbn>
   117ae:	2200      	movs	r2, #0
   117b0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   117b4:	4604      	mov	r4, r0
   117b6:	460d      	mov	r5, r1
   117b8:	f7ee feee 	bl	598 <__aeabi_dmul>
   117bc:	f7f9 ff2c 	bl	b618 <floor>
   117c0:	4b6e      	ldr	r3, [pc, #440]	; (1197c <__kernel_rem_pio2+0x2f0>)
   117c2:	2200      	movs	r2, #0
   117c4:	f7ee fee8 	bl	598 <__aeabi_dmul>
   117c8:	4602      	mov	r2, r0
   117ca:	460b      	mov	r3, r1
   117cc:	4620      	mov	r0, r4
   117ce:	4629      	mov	r1, r5
   117d0:	f7ee fd2a 	bl	228 <__aeabi_dsub>
   117d4:	460d      	mov	r5, r1
   117d6:	4604      	mov	r4, r0
   117d8:	f7ef f8f0 	bl	9bc <__aeabi_d2iz>
   117dc:	9005      	str	r0, [sp, #20]
   117de:	f7ee fe71 	bl	4c4 <__aeabi_i2d>
   117e2:	4602      	mov	r2, r0
   117e4:	460b      	mov	r3, r1
   117e6:	4620      	mov	r0, r4
   117e8:	4629      	mov	r1, r5
   117ea:	f7ee fd1d 	bl	228 <__aeabi_dsub>
   117ee:	f1ba 0f00 	cmp.w	sl, #0
   117f2:	4606      	mov	r6, r0
   117f4:	460f      	mov	r7, r1
   117f6:	dd6d      	ble.n	118d4 <__kernel_rem_pio2+0x248>
   117f8:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   117fc:	ab0c      	add	r3, sp, #48	; 0x30
   117fe:	9c05      	ldr	r4, [sp, #20]
   11800:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11804:	f1ca 0018 	rsb	r0, sl, #24
   11808:	fa43 f200 	asr.w	r2, r3, r0
   1180c:	4414      	add	r4, r2
   1180e:	4082      	lsls	r2, r0
   11810:	1a9b      	subs	r3, r3, r2
   11812:	aa0c      	add	r2, sp, #48	; 0x30
   11814:	9405      	str	r4, [sp, #20]
   11816:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   1181a:	f1ca 0217 	rsb	r2, sl, #23
   1181e:	4113      	asrs	r3, r2
   11820:	9300      	str	r3, [sp, #0]
   11822:	9b00      	ldr	r3, [sp, #0]
   11824:	2b00      	cmp	r3, #0
   11826:	dd64      	ble.n	118f2 <__kernel_rem_pio2+0x266>
   11828:	9b05      	ldr	r3, [sp, #20]
   1182a:	2200      	movs	r2, #0
   1182c:	3301      	adds	r3, #1
   1182e:	9305      	str	r3, [sp, #20]
   11830:	4614      	mov	r4, r2
   11832:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   11836:	4593      	cmp	fp, r2
   11838:	f300 80ac 	bgt.w	11994 <__kernel_rem_pio2+0x308>
   1183c:	f1ba 0f00 	cmp.w	sl, #0
   11840:	dd07      	ble.n	11852 <__kernel_rem_pio2+0x1c6>
   11842:	f1ba 0f01 	cmp.w	sl, #1
   11846:	f000 80be 	beq.w	119c6 <__kernel_rem_pio2+0x33a>
   1184a:	f1ba 0f02 	cmp.w	sl, #2
   1184e:	f000 80c5 	beq.w	119dc <__kernel_rem_pio2+0x350>
   11852:	9b00      	ldr	r3, [sp, #0]
   11854:	2b02      	cmp	r3, #2
   11856:	d14c      	bne.n	118f2 <__kernel_rem_pio2+0x266>
   11858:	4632      	mov	r2, r6
   1185a:	463b      	mov	r3, r7
   1185c:	4948      	ldr	r1, [pc, #288]	; (11980 <__kernel_rem_pio2+0x2f4>)
   1185e:	2000      	movs	r0, #0
   11860:	f7ee fce2 	bl	228 <__aeabi_dsub>
   11864:	4606      	mov	r6, r0
   11866:	460f      	mov	r7, r1
   11868:	2c00      	cmp	r4, #0
   1186a:	d042      	beq.n	118f2 <__kernel_rem_pio2+0x266>
   1186c:	4652      	mov	r2, sl
   1186e:	4944      	ldr	r1, [pc, #272]	; (11980 <__kernel_rem_pio2+0x2f4>)
   11870:	2000      	movs	r0, #0
   11872:	f7f9 ff51 	bl	b718 <scalbn>
   11876:	4602      	mov	r2, r0
   11878:	460b      	mov	r3, r1
   1187a:	4630      	mov	r0, r6
   1187c:	4639      	mov	r1, r7
   1187e:	f7ee fcd3 	bl	228 <__aeabi_dsub>
   11882:	4606      	mov	r6, r0
   11884:	460f      	mov	r7, r1
   11886:	e034      	b.n	118f2 <__kernel_rem_pio2+0x266>
   11888:	4b3e      	ldr	r3, [pc, #248]	; (11984 <__kernel_rem_pio2+0x2f8>)
   1188a:	2200      	movs	r2, #0
   1188c:	4620      	mov	r0, r4
   1188e:	4629      	mov	r1, r5
   11890:	f7ee fe82 	bl	598 <__aeabi_dmul>
   11894:	f7ef f892 	bl	9bc <__aeabi_d2iz>
   11898:	f7ee fe14 	bl	4c4 <__aeabi_i2d>
   1189c:	4602      	mov	r2, r0
   1189e:	460b      	mov	r3, r1
   118a0:	e9cd 2300 	strd	r2, r3, [sp]
   118a4:	4b38      	ldr	r3, [pc, #224]	; (11988 <__kernel_rem_pio2+0x2fc>)
   118a6:	2200      	movs	r2, #0
   118a8:	f7ee fe76 	bl	598 <__aeabi_dmul>
   118ac:	4602      	mov	r2, r0
   118ae:	460b      	mov	r3, r1
   118b0:	4620      	mov	r0, r4
   118b2:	4629      	mov	r1, r5
   118b4:	f7ee fcb8 	bl	228 <__aeabi_dsub>
   118b8:	f7ef f880 	bl	9bc <__aeabi_d2iz>
   118bc:	e9d7 2300 	ldrd	r2, r3, [r7]
   118c0:	f848 0b04 	str.w	r0, [r8], #4
   118c4:	e9dd 0100 	ldrd	r0, r1, [sp]
   118c8:	f7ee fcb0 	bl	22c <__adddf3>
   118cc:	3e01      	subs	r6, #1
   118ce:	4604      	mov	r4, r0
   118d0:	460d      	mov	r5, r1
   118d2:	e763      	b.n	1179c <__kernel_rem_pio2+0x110>
   118d4:	d106      	bne.n	118e4 <__kernel_rem_pio2+0x258>
   118d6:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   118da:	aa0c      	add	r2, sp, #48	; 0x30
   118dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118e0:	15db      	asrs	r3, r3, #23
   118e2:	e79d      	b.n	11820 <__kernel_rem_pio2+0x194>
   118e4:	4b29      	ldr	r3, [pc, #164]	; (1198c <__kernel_rem_pio2+0x300>)
   118e6:	2200      	movs	r2, #0
   118e8:	f7ef f96e 	bl	bc8 <__aeabi_dcmpge>
   118ec:	2800      	cmp	r0, #0
   118ee:	d140      	bne.n	11972 <__kernel_rem_pio2+0x2e6>
   118f0:	9000      	str	r0, [sp, #0]
   118f2:	2200      	movs	r2, #0
   118f4:	2300      	movs	r3, #0
   118f6:	4630      	mov	r0, r6
   118f8:	4639      	mov	r1, r7
   118fa:	f7ef f947 	bl	b8c <__aeabi_dcmpeq>
   118fe:	2800      	cmp	r0, #0
   11900:	f000 80bb 	beq.w	11a7a <__kernel_rem_pio2+0x3ee>
   11904:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   11908:	2200      	movs	r2, #0
   1190a:	9902      	ldr	r1, [sp, #8]
   1190c:	428b      	cmp	r3, r1
   1190e:	da6d      	bge.n	119ec <__kernel_rem_pio2+0x360>
   11910:	2a00      	cmp	r2, #0
   11912:	f000 8082 	beq.w	11a1a <__kernel_rem_pio2+0x38e>
   11916:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1191a:	ab0c      	add	r3, sp, #48	; 0x30
   1191c:	f1aa 0a18 	sub.w	sl, sl, #24
   11920:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   11924:	2b00      	cmp	r3, #0
   11926:	d0f6      	beq.n	11916 <__kernel_rem_pio2+0x28a>
   11928:	4652      	mov	r2, sl
   1192a:	4915      	ldr	r1, [pc, #84]	; (11980 <__kernel_rem_pio2+0x2f4>)
   1192c:	f8df a054 	ldr.w	sl, [pc, #84]	; 11984 <__kernel_rem_pio2+0x2f8>
   11930:	2000      	movs	r0, #0
   11932:	f7f9 fef1 	bl	b718 <scalbn>
   11936:	ab70      	add	r3, sp, #448	; 0x1c0
   11938:	4606      	mov	r6, r0
   1193a:	460f      	mov	r7, r1
   1193c:	ea4f 04cb 	mov.w	r4, fp, lsl #3
   11940:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
   11944:	465d      	mov	r5, fp
   11946:	f04f 0900 	mov.w	r9, #0
   1194a:	2d00      	cmp	r5, #0
   1194c:	f280 80cb 	bge.w	11ae6 <__kernel_rem_pio2+0x45a>
   11950:	465d      	mov	r5, fp
   11952:	2d00      	cmp	r5, #0
   11954:	f2c0 80fb 	blt.w	11b4e <__kernel_rem_pio2+0x4c2>
   11958:	4b0d      	ldr	r3, [pc, #52]	; (11990 <__kernel_rem_pio2+0x304>)
   1195a:	9306      	str	r3, [sp, #24]
   1195c:	ab70      	add	r3, sp, #448	; 0x1c0
   1195e:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
   11962:	f04f 0900 	mov.w	r9, #0
   11966:	f04f 0a00 	mov.w	sl, #0
   1196a:	2700      	movs	r7, #0
   1196c:	ebab 0605 	sub.w	r6, fp, r5
   11970:	e0e1      	b.n	11b36 <__kernel_rem_pio2+0x4aa>
   11972:	2302      	movs	r3, #2
   11974:	9300      	str	r3, [sp, #0]
   11976:	e757      	b.n	11828 <__kernel_rem_pio2+0x19c>
   11978:	00013954 	.word	0x00013954
   1197c:	40200000 	.word	0x40200000
   11980:	3ff00000 	.word	0x3ff00000
   11984:	3e700000 	.word	0x3e700000
   11988:	41700000 	.word	0x41700000
   1198c:	3fe00000 	.word	0x3fe00000
   11990:	000135d8 	.word	0x000135d8
   11994:	4649      	mov	r1, r9
   11996:	f851 3b04 	ldr.w	r3, [r1], #4
   1199a:	b954      	cbnz	r4, 119b2 <__kernel_rem_pio2+0x326>
   1199c:	b16b      	cbz	r3, 119ba <__kernel_rem_pio2+0x32e>
   1199e:	3201      	adds	r2, #1
   119a0:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
   119a4:	4593      	cmp	fp, r2
   119a6:	f841 3c04 	str.w	r3, [r1, #-4]
   119aa:	dd0a      	ble.n	119c2 <__kernel_rem_pio2+0x336>
   119ac:	680b      	ldr	r3, [r1, #0]
   119ae:	f109 0108 	add.w	r1, r9, #8
   119b2:	1ac3      	subs	r3, r0, r3
   119b4:	f841 3c04 	str.w	r3, [r1, #-4]
   119b8:	2301      	movs	r3, #1
   119ba:	3201      	adds	r2, #1
   119bc:	4689      	mov	r9, r1
   119be:	461c      	mov	r4, r3
   119c0:	e739      	b.n	11836 <__kernel_rem_pio2+0x1aa>
   119c2:	2401      	movs	r4, #1
   119c4:	e73a      	b.n	1183c <__kernel_rem_pio2+0x1b0>
   119c6:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   119ca:	ab0c      	add	r3, sp, #48	; 0x30
   119cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   119d0:	f3c3 0316 	ubfx	r3, r3, #0, #23
   119d4:	a90c      	add	r1, sp, #48	; 0x30
   119d6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   119da:	e73a      	b.n	11852 <__kernel_rem_pio2+0x1c6>
   119dc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   119e0:	ab0c      	add	r3, sp, #48	; 0x30
   119e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   119e6:	f3c3 0315 	ubfx	r3, r3, #0, #22
   119ea:	e7f3      	b.n	119d4 <__kernel_rem_pio2+0x348>
   119ec:	a90c      	add	r1, sp, #48	; 0x30
   119ee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   119f2:	3b01      	subs	r3, #1
   119f4:	430a      	orrs	r2, r1
   119f6:	e788      	b.n	1190a <__kernel_rem_pio2+0x27e>
   119f8:	3401      	adds	r4, #1
   119fa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   119fe:	2a00      	cmp	r2, #0
   11a00:	d0fa      	beq.n	119f8 <__kernel_rem_pio2+0x36c>
   11a02:	9b08      	ldr	r3, [sp, #32]
   11a04:	aa20      	add	r2, sp, #128	; 0x80
   11a06:	445b      	add	r3, fp
   11a08:	f10b 0801 	add.w	r8, fp, #1
   11a0c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   11a10:	445c      	add	r4, fp
   11a12:	4544      	cmp	r4, r8
   11a14:	da04      	bge.n	11a20 <__kernel_rem_pio2+0x394>
   11a16:	46a3      	mov	fp, r4
   11a18:	e6b2      	b.n	11780 <__kernel_rem_pio2+0xf4>
   11a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11a1c:	2401      	movs	r4, #1
   11a1e:	e7ec      	b.n	119fa <__kernel_rem_pio2+0x36e>
   11a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11a22:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   11a26:	f7ee fd4d 	bl	4c4 <__aeabi_i2d>
   11a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11a2c:	e9c5 0100 	strd	r0, r1, [r5]
   11a30:	3b08      	subs	r3, #8
   11a32:	9300      	str	r3, [sp, #0]
   11a34:	46ab      	mov	fp, r5
   11a36:	f04f 0900 	mov.w	r9, #0
   11a3a:	2600      	movs	r6, #0
   11a3c:	2700      	movs	r7, #0
   11a3e:	9b06      	ldr	r3, [sp, #24]
   11a40:	4599      	cmp	r9, r3
   11a42:	dd07      	ble.n	11a54 <__kernel_rem_pio2+0x3c8>
   11a44:	9b07      	ldr	r3, [sp, #28]
   11a46:	e9e3 6702 	strd	r6, r7, [r3, #8]!
   11a4a:	f108 0801 	add.w	r8, r8, #1
   11a4e:	9307      	str	r3, [sp, #28]
   11a50:	3508      	adds	r5, #8
   11a52:	e7de      	b.n	11a12 <__kernel_rem_pio2+0x386>
   11a54:	9900      	ldr	r1, [sp, #0]
   11a56:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
   11a5a:	9100      	str	r1, [sp, #0]
   11a5c:	e87b 0102 	ldrd	r0, r1, [fp], #-8
   11a60:	f7ee fd9a 	bl	598 <__aeabi_dmul>
   11a64:	4602      	mov	r2, r0
   11a66:	460b      	mov	r3, r1
   11a68:	4630      	mov	r0, r6
   11a6a:	4639      	mov	r1, r7
   11a6c:	f7ee fbde 	bl	22c <__adddf3>
   11a70:	f109 0901 	add.w	r9, r9, #1
   11a74:	4606      	mov	r6, r0
   11a76:	460f      	mov	r7, r1
   11a78:	e7e1      	b.n	11a3e <__kernel_rem_pio2+0x3b2>
   11a7a:	f1ca 0200 	rsb	r2, sl, #0
   11a7e:	4630      	mov	r0, r6
   11a80:	4639      	mov	r1, r7
   11a82:	f7f9 fe49 	bl	b718 <scalbn>
   11a86:	4b97      	ldr	r3, [pc, #604]	; (11ce4 <__kernel_rem_pio2+0x658>)
   11a88:	2200      	movs	r2, #0
   11a8a:	4604      	mov	r4, r0
   11a8c:	460d      	mov	r5, r1
   11a8e:	f7ef f89b 	bl	bc8 <__aeabi_dcmpge>
   11a92:	b300      	cbz	r0, 11ad6 <__kernel_rem_pio2+0x44a>
   11a94:	4b94      	ldr	r3, [pc, #592]	; (11ce8 <__kernel_rem_pio2+0x65c>)
   11a96:	2200      	movs	r2, #0
   11a98:	4620      	mov	r0, r4
   11a9a:	4629      	mov	r1, r5
   11a9c:	f7ee fd7c 	bl	598 <__aeabi_dmul>
   11aa0:	f7ee ff8c 	bl	9bc <__aeabi_d2iz>
   11aa4:	4606      	mov	r6, r0
   11aa6:	f7ee fd0d 	bl	4c4 <__aeabi_i2d>
   11aaa:	4b8e      	ldr	r3, [pc, #568]	; (11ce4 <__kernel_rem_pio2+0x658>)
   11aac:	2200      	movs	r2, #0
   11aae:	f7ee fd73 	bl	598 <__aeabi_dmul>
   11ab2:	460b      	mov	r3, r1
   11ab4:	4602      	mov	r2, r0
   11ab6:	4629      	mov	r1, r5
   11ab8:	4620      	mov	r0, r4
   11aba:	f7ee fbb5 	bl	228 <__aeabi_dsub>
   11abe:	f7ee ff7d 	bl	9bc <__aeabi_d2iz>
   11ac2:	ab0c      	add	r3, sp, #48	; 0x30
   11ac4:	f10a 0a18 	add.w	sl, sl, #24
   11ac8:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
   11acc:	f10b 0b01 	add.w	fp, fp, #1
   11ad0:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
   11ad4:	e728      	b.n	11928 <__kernel_rem_pio2+0x29c>
   11ad6:	4620      	mov	r0, r4
   11ad8:	4629      	mov	r1, r5
   11ada:	f7ee ff6f 	bl	9bc <__aeabi_d2iz>
   11ade:	ab0c      	add	r3, sp, #48	; 0x30
   11ae0:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
   11ae4:	e720      	b.n	11928 <__kernel_rem_pio2+0x29c>
   11ae6:	ab0c      	add	r3, sp, #48	; 0x30
   11ae8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   11aec:	f7ee fcea 	bl	4c4 <__aeabi_i2d>
   11af0:	4632      	mov	r2, r6
   11af2:	463b      	mov	r3, r7
   11af4:	f7ee fd50 	bl	598 <__aeabi_dmul>
   11af8:	464a      	mov	r2, r9
   11afa:	e868 0102 	strd	r0, r1, [r8], #-8
   11afe:	4653      	mov	r3, sl
   11b00:	4630      	mov	r0, r6
   11b02:	4639      	mov	r1, r7
   11b04:	f7ee fd48 	bl	598 <__aeabi_dmul>
   11b08:	3d01      	subs	r5, #1
   11b0a:	4606      	mov	r6, r0
   11b0c:	460f      	mov	r7, r1
   11b0e:	e71c      	b.n	1194a <__kernel_rem_pio2+0x2be>
   11b10:	f8dd c018 	ldr.w	ip, [sp, #24]
   11b14:	e8fc 0102 	ldrd	r0, r1, [ip], #8
   11b18:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   11b1c:	f8cd c018 	str.w	ip, [sp, #24]
   11b20:	f7ee fd3a 	bl	598 <__aeabi_dmul>
   11b24:	4602      	mov	r2, r0
   11b26:	460b      	mov	r3, r1
   11b28:	4648      	mov	r0, r9
   11b2a:	4651      	mov	r1, sl
   11b2c:	f7ee fb7e 	bl	22c <__adddf3>
   11b30:	3701      	adds	r7, #1
   11b32:	4681      	mov	r9, r0
   11b34:	468a      	mov	sl, r1
   11b36:	9b02      	ldr	r3, [sp, #8]
   11b38:	429f      	cmp	r7, r3
   11b3a:	dc01      	bgt.n	11b40 <__kernel_rem_pio2+0x4b4>
   11b3c:	42be      	cmp	r6, r7
   11b3e:	dae7      	bge.n	11b10 <__kernel_rem_pio2+0x484>
   11b40:	ab48      	add	r3, sp, #288	; 0x120
   11b42:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   11b46:	e9c6 9a00 	strd	r9, sl, [r6]
   11b4a:	3d01      	subs	r5, #1
   11b4c:	e701      	b.n	11952 <__kernel_rem_pio2+0x2c6>
   11b4e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   11b50:	2b02      	cmp	r3, #2
   11b52:	dc09      	bgt.n	11b68 <__kernel_rem_pio2+0x4dc>
   11b54:	2b00      	cmp	r3, #0
   11b56:	dc2c      	bgt.n	11bb2 <__kernel_rem_pio2+0x526>
   11b58:	d04e      	beq.n	11bf8 <__kernel_rem_pio2+0x56c>
   11b5a:	9b05      	ldr	r3, [sp, #20]
   11b5c:	f003 0007 	and.w	r0, r3, #7
   11b60:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   11b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b68:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   11b6a:	2b03      	cmp	r3, #3
   11b6c:	d1f5      	bne.n	11b5a <__kernel_rem_pio2+0x4ce>
   11b6e:	ab48      	add	r3, sp, #288	; 0x120
   11b70:	441c      	add	r4, r3
   11b72:	4625      	mov	r5, r4
   11b74:	46da      	mov	sl, fp
   11b76:	f1ba 0f00 	cmp.w	sl, #0
   11b7a:	dc63      	bgt.n	11c44 <__kernel_rem_pio2+0x5b8>
   11b7c:	4625      	mov	r5, r4
   11b7e:	46da      	mov	sl, fp
   11b80:	f1ba 0f01 	cmp.w	sl, #1
   11b84:	dc7b      	bgt.n	11c7e <__kernel_rem_pio2+0x5f2>
   11b86:	2000      	movs	r0, #0
   11b88:	2100      	movs	r1, #0
   11b8a:	f1bb 0f01 	cmp.w	fp, #1
   11b8e:	f300 8093 	bgt.w	11cb8 <__kernel_rem_pio2+0x62c>
   11b92:	9b00      	ldr	r3, [sp, #0]
   11b94:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
   11b98:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
   11b9c:	2b00      	cmp	r3, #0
   11b9e:	f040 8092 	bne.w	11cc6 <__kernel_rem_pio2+0x63a>
   11ba2:	9b04      	ldr	r3, [sp, #16]
   11ba4:	e9c3 7800 	strd	r7, r8, [r3]
   11ba8:	e9c3 5602 	strd	r5, r6, [r3, #8]
   11bac:	e9c3 0104 	strd	r0, r1, [r3, #16]
   11bb0:	e7d3      	b.n	11b5a <__kernel_rem_pio2+0x4ce>
   11bb2:	ab48      	add	r3, sp, #288	; 0x120
   11bb4:	441c      	add	r4, r3
   11bb6:	465d      	mov	r5, fp
   11bb8:	2000      	movs	r0, #0
   11bba:	2100      	movs	r1, #0
   11bbc:	2d00      	cmp	r5, #0
   11bbe:	da32      	bge.n	11c26 <__kernel_rem_pio2+0x59a>
   11bc0:	9b00      	ldr	r3, [sp, #0]
   11bc2:	2b00      	cmp	r3, #0
   11bc4:	d035      	beq.n	11c32 <__kernel_rem_pio2+0x5a6>
   11bc6:	4602      	mov	r2, r0
   11bc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   11bcc:	9c04      	ldr	r4, [sp, #16]
   11bce:	e9c4 2300 	strd	r2, r3, [r4]
   11bd2:	4602      	mov	r2, r0
   11bd4:	460b      	mov	r3, r1
   11bd6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
   11bda:	f7ee fb25 	bl	228 <__aeabi_dsub>
   11bde:	ac48      	add	r4, sp, #288	; 0x120
   11be0:	2501      	movs	r5, #1
   11be2:	45ab      	cmp	fp, r5
   11be4:	da28      	bge.n	11c38 <__kernel_rem_pio2+0x5ac>
   11be6:	9b00      	ldr	r3, [sp, #0]
   11be8:	b113      	cbz	r3, 11bf0 <__kernel_rem_pio2+0x564>
   11bea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   11bee:	4619      	mov	r1, r3
   11bf0:	9b04      	ldr	r3, [sp, #16]
   11bf2:	e9c3 0102 	strd	r0, r1, [r3, #8]
   11bf6:	e7b0      	b.n	11b5a <__kernel_rem_pio2+0x4ce>
   11bf8:	ab48      	add	r3, sp, #288	; 0x120
   11bfa:	441c      	add	r4, r3
   11bfc:	2000      	movs	r0, #0
   11bfe:	2100      	movs	r1, #0
   11c00:	f1bb 0f00 	cmp.w	fp, #0
   11c04:	da08      	bge.n	11c18 <__kernel_rem_pio2+0x58c>
   11c06:	9b00      	ldr	r3, [sp, #0]
   11c08:	b113      	cbz	r3, 11c10 <__kernel_rem_pio2+0x584>
   11c0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   11c0e:	4619      	mov	r1, r3
   11c10:	9b04      	ldr	r3, [sp, #16]
   11c12:	e9c3 0100 	strd	r0, r1, [r3]
   11c16:	e7a0      	b.n	11b5a <__kernel_rem_pio2+0x4ce>
   11c18:	e874 2302 	ldrd	r2, r3, [r4], #-8
   11c1c:	f7ee fb06 	bl	22c <__adddf3>
   11c20:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   11c24:	e7ec      	b.n	11c00 <__kernel_rem_pio2+0x574>
   11c26:	e874 2302 	ldrd	r2, r3, [r4], #-8
   11c2a:	f7ee faff 	bl	22c <__adddf3>
   11c2e:	3d01      	subs	r5, #1
   11c30:	e7c4      	b.n	11bbc <__kernel_rem_pio2+0x530>
   11c32:	4602      	mov	r2, r0
   11c34:	460b      	mov	r3, r1
   11c36:	e7c9      	b.n	11bcc <__kernel_rem_pio2+0x540>
   11c38:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
   11c3c:	f7ee faf6 	bl	22c <__adddf3>
   11c40:	3501      	adds	r5, #1
   11c42:	e7ce      	b.n	11be2 <__kernel_rem_pio2+0x556>
   11c44:	e955 8902 	ldrd	r8, r9, [r5, #-8]
   11c48:	e9d5 2300 	ldrd	r2, r3, [r5]
   11c4c:	4640      	mov	r0, r8
   11c4e:	4649      	mov	r1, r9
   11c50:	e9cd 2302 	strd	r2, r3, [sp, #8]
   11c54:	f7ee faea 	bl	22c <__adddf3>
   11c58:	4602      	mov	r2, r0
   11c5a:	460b      	mov	r3, r1
   11c5c:	4606      	mov	r6, r0
   11c5e:	460f      	mov	r7, r1
   11c60:	4640      	mov	r0, r8
   11c62:	4649      	mov	r1, r9
   11c64:	f7ee fae0 	bl	228 <__aeabi_dsub>
   11c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   11c6c:	f7ee fade 	bl	22c <__adddf3>
   11c70:	e865 0102 	strd	r0, r1, [r5], #-8
   11c74:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   11c78:	e9c5 6700 	strd	r6, r7, [r5]
   11c7c:	e77b      	b.n	11b76 <__kernel_rem_pio2+0x4ea>
   11c7e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
   11c82:	e9d5 2300 	ldrd	r2, r3, [r5]
   11c86:	4640      	mov	r0, r8
   11c88:	4649      	mov	r1, r9
   11c8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   11c8e:	f7ee facd 	bl	22c <__adddf3>
   11c92:	4602      	mov	r2, r0
   11c94:	460b      	mov	r3, r1
   11c96:	4606      	mov	r6, r0
   11c98:	460f      	mov	r7, r1
   11c9a:	4640      	mov	r0, r8
   11c9c:	4649      	mov	r1, r9
   11c9e:	f7ee fac3 	bl	228 <__aeabi_dsub>
   11ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   11ca6:	f7ee fac1 	bl	22c <__adddf3>
   11caa:	e865 0102 	strd	r0, r1, [r5], #-8
   11cae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   11cb2:	e9c5 6700 	strd	r6, r7, [r5]
   11cb6:	e763      	b.n	11b80 <__kernel_rem_pio2+0x4f4>
   11cb8:	e874 2302 	ldrd	r2, r3, [r4], #-8
   11cbc:	f7ee fab6 	bl	22c <__adddf3>
   11cc0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   11cc4:	e761      	b.n	11b8a <__kernel_rem_pio2+0x4fe>
   11cc6:	9b04      	ldr	r3, [sp, #16]
   11cc8:	9a04      	ldr	r2, [sp, #16]
   11cca:	601f      	str	r7, [r3, #0]
   11ccc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
   11cd0:	605c      	str	r4, [r3, #4]
   11cd2:	609d      	str	r5, [r3, #8]
   11cd4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   11cd8:	60d3      	str	r3, [r2, #12]
   11cda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   11cde:	6110      	str	r0, [r2, #16]
   11ce0:	6153      	str	r3, [r2, #20]
   11ce2:	e73a      	b.n	11b5a <__kernel_rem_pio2+0x4ce>
   11ce4:	41700000 	.word	0x41700000
   11ce8:	3e700000 	.word	0x3e700000

00011cec <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   11cec:	4601      	mov	r1, r0
   11cee:	f240 30e7 	movw	r0, #999	; 0x3e7
   11cf2:	b508      	push	{r3, lr}
   11cf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11cf8:	2300      	movs	r3, #0
   11cfa:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   11cfe:	1449      	asrs	r1, r1, #17
   11d00:	f7ee fed4 	bl	aac <__aeabi_uldivmod>
}
   11d04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   11d08:	f7ff b970 	b.w	10fec <z_impl_k_sleep>

00011d0c <drivingWaitFifoEmpty>:
{
   11d0c:	b508      	push	{r3, lr}
    spi_read_write(0x56, 0x17);  // Set BC = IC_STATUS
   11d0e:	2117      	movs	r1, #23
   11d10:	2056      	movs	r0, #86	; 0x56
   11d12:	f7f9 fd7b 	bl	b80c <spi_read_write>
        uint16_t ic_status_reg = spi_read_write(0xC0, 0x00); // dummy write, get IC_STATUS value
   11d16:	2100      	movs	r1, #0
   11d18:	20c0      	movs	r0, #192	; 0xc0
   11d1a:	f7f9 fd77 	bl	b80c <spi_read_write>
    while(!fifoempty)
   11d1e:	0643      	lsls	r3, r0, #25
   11d20:	d5f9      	bpl.n	11d16 <drivingWaitFifoEmpty+0xa>
}
   11d22:	bd08      	pop	{r3, pc}

00011d24 <arch_printk_char_out>:
}
   11d24:	2000      	movs	r0, #0
   11d26:	4770      	bx	lr

00011d28 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   11d28:	b40f      	push	{r0, r1, r2, r3}
   11d2a:	b507      	push	{r0, r1, r2, lr}
   11d2c:	a904      	add	r1, sp, #16
   11d2e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   11d32:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   11d34:	f7f9 fe4e 	bl	b9d4 <vprintk>

	va_end(ap);
}
   11d38:	b003      	add	sp, #12
   11d3a:	f85d eb04 	ldr.w	lr, [sp], #4
   11d3e:	b004      	add	sp, #16
   11d40:	4770      	bx	lr

00011d42 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   11d42:	4604      	mov	r4, r0
   11d44:	b508      	push	{r3, lr}
   11d46:	4608      	mov	r0, r1
   11d48:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   11d4a:	461a      	mov	r2, r3
   11d4c:	47a0      	blx	r4
	return z_impl_z_current_get();
   11d4e:	f7ff f967 	bl	11020 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   11d52:	f7fa ff89 	bl	cc68 <z_impl_k_thread_abort>

00011d56 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   11d56:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   11d5a:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   11d5c:	0840      	lsrs	r0, r0, #1
   11d5e:	4770      	bx	lr

00011d60 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   11d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d62:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   11d64:	f7ff fff7 	bl	11d56 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   11d68:	fab0 f080 	clz	r0, r0
   11d6c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   11d70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   11d74:	00ca      	lsls	r2, r1, #3
   11d76:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   11d7a:	1d17      	adds	r7, r2, #4
{
   11d7c:	460c      	mov	r4, r1
   11d7e:	3206      	adds	r2, #6
   11d80:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   11d82:	b956      	cbnz	r6, 11d9a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   11d84:	2101      	movs	r1, #1
   11d86:	fa01 f000 	lsl.w	r0, r1, r0
   11d8a:	68d9      	ldr	r1, [r3, #12]
   11d8c:	4301      	orrs	r1, r0
   11d8e:	60d9      	str	r1, [r3, #12]
		b->next = c;
   11d90:	f8cc 4010 	str.w	r4, [ip, #16]
   11d94:	53dd      	strh	r5, [r3, r7]
   11d96:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   11d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   11d9a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   11d9c:	3104      	adds	r1, #4
   11d9e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   11da0:	53d8      	strh	r0, [r3, r7]
   11da2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   11da6:	529e      	strh	r6, [r3, r2]
   11da8:	80c5      	strh	r5, [r0, #6]
   11daa:	525d      	strh	r5, [r3, r1]
   11dac:	e7f4      	b.n	11d98 <free_list_add+0x38>

00011dae <free_list_remove_bidx>:
{
   11dae:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   11db0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   11db4:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   11db6:	4299      	cmp	r1, r3
   11db8:	f102 0104 	add.w	r1, r2, #4
   11dbc:	d10a      	bne.n	11dd4 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   11dbe:	2301      	movs	r3, #1
   11dc0:	fa03 f202 	lsl.w	r2, r3, r2
   11dc4:	68c3      	ldr	r3, [r0, #12]
   11dc6:	ea23 0302 	bic.w	r3, r3, r2
   11dca:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   11dcc:	2300      	movs	r3, #0
   11dce:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   11dd2:	bd10      	pop	{r4, pc}
   11dd4:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   11dd6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   11dda:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   11dde:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   11de2:	80cb      	strh	r3, [r1, #6]
   11de4:	8082      	strh	r2, [r0, #4]
}
   11de6:	e7f4      	b.n	11dd2 <free_list_remove_bidx+0x24>

00011de8 <free_list_remove>:
{
   11de8:	b508      	push	{r3, lr}
   11dea:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   11dec:	f7ff ffb3 	bl	11d56 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   11df0:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   11df4:	f1c2 021f 	rsb	r2, r2, #31
   11df8:	4618      	mov	r0, r3
}
   11dfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   11dfe:	f7ff bfd6 	b.w	11dae <free_list_remove_bidx>

00011e02 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   11e02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11e06:	fab1 f581 	clz	r5, r1
   11e0a:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   11e0e:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   11e12:	4603      	mov	r3, r0
	if (b->next) {
   11e14:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   11e18:	460e      	mov	r6, r1
	if (b->next) {
   11e1a:	b1c2      	cbz	r2, 11e4e <alloc_chunk+0x4c>
   11e1c:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   11e1e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   11e22:	4618      	mov	r0, r3
   11e24:	4621      	mov	r1, r4
   11e26:	f7ff ff96 	bl	11d56 <chunk_size>
   11e2a:	42b0      	cmp	r0, r6
   11e2c:	d306      	bcc.n	11e3c <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   11e2e:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   11e30:	4618      	mov	r0, r3
   11e32:	f7ff ffbc 	bl	11dae <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   11e36:	4620      	mov	r0, r4
   11e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   11e3c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   11e40:	3f01      	subs	r7, #1
   11e42:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   11e44:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   11e48:	d001      	beq.n	11e4e <alloc_chunk+0x4c>
   11e4a:	4282      	cmp	r2, r0
   11e4c:	d1e7      	bne.n	11e1e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   11e4e:	f1c5 0220 	rsb	r2, r5, #32
   11e52:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11e56:	4094      	lsls	r4, r2
   11e58:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   11e5a:	4014      	ands	r4, r2
   11e5c:	d0eb      	beq.n	11e36 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   11e5e:	fa94 f2a4 	rbit	r2, r4
   11e62:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   11e66:	1d11      	adds	r1, r2, #4
   11e68:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   11e6c:	4621      	mov	r1, r4
   11e6e:	e7df      	b.n	11e30 <alloc_chunk+0x2e>

00011e70 <merge_chunks>:
{
   11e70:	b538      	push	{r3, r4, r5, lr}
   11e72:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   11e74:	f7ff ff6f 	bl	11d56 <chunk_size>
{
   11e78:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   11e7a:	4604      	mov	r4, r0
   11e7c:	4611      	mov	r1, r2
   11e7e:	4618      	mov	r0, r3
   11e80:	f7ff ff69 	bl	11d56 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   11e84:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   11e88:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11e8a:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   11e8c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   11e8e:	4618      	mov	r0, r3
   11e90:	f7ff ff61 	bl	11d56 <chunk_size>
	void *cmem = &buf[c];
   11e94:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   11e96:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   11e9a:	bd38      	pop	{r3, r4, r5, pc}

00011e9c <split_chunks>:
{
   11e9c:	b538      	push	{r3, r4, r5, lr}
   11e9e:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   11ea0:	f7ff ff59 	bl	11d56 <chunk_size>
{
   11ea4:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   11ea6:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   11ea8:	1a51      	subs	r1, r2, r1
   11eaa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   11eae:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11eb0:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   11eb2:	8060      	strh	r0, [r4, #2]
   11eb4:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11eb8:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   11eba:	8044      	strh	r4, [r0, #2]
   11ebc:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   11ec0:	4618      	mov	r0, r3
   11ec2:	4611      	mov	r1, r2
   11ec4:	f7ff ff47 	bl	11d56 <chunk_size>
	void *cmem = &buf[c];
   11ec8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   11eca:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   11ece:	bd38      	pop	{r3, r4, r5, pc}

00011ed0 <free_chunk>:
{
   11ed0:	b538      	push	{r3, r4, r5, lr}
   11ed2:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   11ed4:	f7ff ff3f 	bl	11d56 <chunk_size>
   11ed8:	460c      	mov	r4, r1
   11eda:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   11edc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   11ee0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   11ee2:	07da      	lsls	r2, r3, #31
   11ee4:	d40a      	bmi.n	11efc <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   11ee6:	4628      	mov	r0, r5
   11ee8:	f7ff ff7e 	bl	11de8 <free_list_remove>
	return c + chunk_size(h, c);
   11eec:	4621      	mov	r1, r4
   11eee:	4628      	mov	r0, r5
   11ef0:	f7ff ff31 	bl	11d56 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   11ef4:	1822      	adds	r2, r4, r0
   11ef6:	4628      	mov	r0, r5
   11ef8:	f7ff ffba 	bl	11e70 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   11efc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   11f00:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   11f02:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   11f06:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   11f08:	07db      	lsls	r3, r3, #31
   11f0a:	d40c      	bmi.n	11f26 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   11f0c:	4628      	mov	r0, r5
   11f0e:	f7ff ff6b 	bl	11de8 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   11f12:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   11f16:	4622      	mov	r2, r4
   11f18:	1a61      	subs	r1, r4, r1
   11f1a:	4628      	mov	r0, r5
   11f1c:	f7ff ffa8 	bl	11e70 <merge_chunks>
   11f20:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   11f24:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   11f26:	4621      	mov	r1, r4
   11f28:	4628      	mov	r0, r5
}
   11f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   11f2e:	f7ff bf17 	b.w	11d60 <free_list_add>

00011f32 <sys_heap_free>:
	if (mem == NULL) {
   11f32:	b161      	cbz	r1, 11f4e <sys_heap_free+0x1c>
   11f34:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11f36:	3904      	subs	r1, #4
   11f38:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   11f3a:	f021 0307 	bic.w	r3, r1, #7
   11f3e:	4403      	add	r3, r0
	free_chunk(h, c);
   11f40:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   11f42:	885a      	ldrh	r2, [r3, #2]
   11f44:	f022 0201 	bic.w	r2, r2, #1
   11f48:	805a      	strh	r2, [r3, #2]
   11f4a:	f7ff bfc1 	b.w	11ed0 <free_chunk>
}
   11f4e:	4770      	bx	lr

00011f50 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   11f50:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   11f52:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   11f54:	b909      	cbnz	r1, 11f5a <sys_heap_alloc+0xa>
		return NULL;
   11f56:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   11f58:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   11f5a:	68ab      	ldr	r3, [r5, #8]
   11f5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   11f60:	d9f9      	bls.n	11f56 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11f62:	310b      	adds	r1, #11
   11f64:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   11f66:	4621      	mov	r1, r4
   11f68:	4628      	mov	r0, r5
   11f6a:	f7ff ff4a 	bl	11e02 <alloc_chunk>
	if (c == 0U) {
   11f6e:	4606      	mov	r6, r0
   11f70:	2800      	cmp	r0, #0
   11f72:	d0f0      	beq.n	11f56 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   11f74:	4601      	mov	r1, r0
   11f76:	4628      	mov	r0, r5
   11f78:	f7ff feed 	bl	11d56 <chunk_size>
   11f7c:	42a0      	cmp	r0, r4
   11f7e:	d907      	bls.n	11f90 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   11f80:	1932      	adds	r2, r6, r4
   11f82:	4628      	mov	r0, r5
   11f84:	f7ff ff8a 	bl	11e9c <split_chunks>
		free_list_add(h, c + chunk_sz);
   11f88:	4611      	mov	r1, r2
   11f8a:	4628      	mov	r0, r5
   11f8c:	f7ff fee8 	bl	11d60 <free_list_add>
	void *cmem = &buf[c];
   11f90:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   11f94:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11f96:	8853      	ldrh	r3, [r2, #2]
   11f98:	f043 0301 	orr.w	r3, r3, #1
   11f9c:	8053      	strh	r3, [r2, #2]
   11f9e:	3004      	adds	r0, #4
	return mem;
   11fa0:	e7da      	b.n	11f58 <sys_heap_alloc+0x8>

00011fa2 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   11fa2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11fa6:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   11faa:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   11fae:	6806      	ldr	r6, [r0, #0]
{
   11fb0:	460f      	mov	r7, r1
   11fb2:	4614      	mov	r4, r2
	if (align != rew) {
   11fb4:	d00c      	beq.n	11fd0 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   11fb6:	424b      	negs	r3, r1
   11fb8:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   11fba:	2b04      	cmp	r3, #4
   11fbc:	461a      	mov	r2, r3
   11fbe:	464f      	mov	r7, r9
   11fc0:	bf28      	it	cs
   11fc2:	2204      	movcs	r2, #4
	rew = align & -align;
   11fc4:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   11fc6:	b964      	cbnz	r4, 11fe2 <sys_heap_aligned_alloc+0x40>
		return NULL;
   11fc8:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   11fca:	4628      	mov	r0, r5
   11fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   11fd0:	2904      	cmp	r1, #4
   11fd2:	d804      	bhi.n	11fde <sys_heap_aligned_alloc+0x3c>
}
   11fd4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   11fd8:	4611      	mov	r1, r2
   11fda:	f7ff bfb9 	b.w	11f50 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   11fde:	2204      	movs	r2, #4
   11fe0:	e7f1      	b.n	11fc6 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   11fe2:	68b3      	ldr	r3, [r6, #8]
   11fe4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   11fe8:	d9ee      	bls.n	11fc8 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11fea:	f104 010b 	add.w	r1, r4, #11
   11fee:	4439      	add	r1, r7
   11ff0:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   11ff2:	08c9      	lsrs	r1, r1, #3
   11ff4:	4630      	mov	r0, r6
   11ff6:	f7ff ff04 	bl	11e02 <alloc_chunk>
	if (c0 == 0) {
   11ffa:	4680      	mov	r8, r0
   11ffc:	2800      	cmp	r0, #0
   11ffe:	d0e3      	beq.n	11fc8 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   12000:	f109 0504 	add.w	r5, r9, #4
   12004:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   12008:	1e7b      	subs	r3, r7, #1
   1200a:	4435      	add	r5, r6
   1200c:	441d      	add	r5, r3
   1200e:	427f      	negs	r7, r7
   12010:	403d      	ands	r5, r7
   12012:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12016:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12018:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1201a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1201c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1201e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   12022:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   12024:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12028:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1202c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   12030:	d208      	bcs.n	12044 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   12032:	4601      	mov	r1, r0
   12034:	463a      	mov	r2, r7
   12036:	4630      	mov	r0, r6
   12038:	f7ff ff30 	bl	11e9c <split_chunks>
		free_list_add(h, c0);
   1203c:	4641      	mov	r1, r8
   1203e:	4630      	mov	r0, r6
   12040:	f7ff fe8e 	bl	11d60 <free_list_add>
	return c + chunk_size(h, c);
   12044:	4639      	mov	r1, r7
   12046:	4630      	mov	r0, r6
   12048:	f7ff fe85 	bl	11d56 <chunk_size>
   1204c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1204e:	4284      	cmp	r4, r0
   12050:	d207      	bcs.n	12062 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   12052:	4630      	mov	r0, r6
   12054:	4622      	mov	r2, r4
   12056:	f7ff ff21 	bl	11e9c <split_chunks>
		free_list_add(h, c_end);
   1205a:	4621      	mov	r1, r4
   1205c:	4630      	mov	r0, r6
   1205e:	f7ff fe7f 	bl	11d60 <free_list_add>
	void *cmem = &buf[c];
   12062:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12066:	8873      	ldrh	r3, [r6, #2]
   12068:	f043 0301 	orr.w	r3, r3, #1
   1206c:	8073      	strh	r3, [r6, #2]
   1206e:	e7ac      	b.n	11fca <sys_heap_aligned_alloc+0x28>

00012070 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   12070:	3a04      	subs	r2, #4
{
   12072:	b4f0      	push	{r4, r5, r6, r7}
   12074:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12076:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12078:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1207a:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1207e:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   12082:	1a0e      	subs	r6, r1, r0
   12084:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   12086:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   12088:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1208c:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1208e:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   12092:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   12094:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12096:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   12098:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1209c:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1209e:	f1c2 0220 	rsb	r2, r2, #32
   120a2:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   120a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   120a8:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   120ac:	4294      	cmp	r4, r2
   120ae:	d1fb      	bne.n	120a8 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   120b0:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   120b2:	f042 0201 	orr.w	r2, r2, #1
   120b6:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   120b8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   120bc:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   120be:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   120c0:	8007      	strh	r7, [r0, #0]
   120c2:	8065      	strh	r5, [r4, #2]
   120c4:	1984      	adds	r4, r0, r6
   120c6:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   120ca:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   120ce:	8067      	strh	r7, [r4, #2]
   120d0:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   120d2:	885a      	ldrh	r2, [r3, #2]
   120d4:	f042 0201 	orr.w	r2, r2, #1
   120d8:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   120da:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   120dc:	f7ff be40 	b.w	11d60 <free_list_add>

000120e0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   120e0:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   120e2:	f013 0307 	ands.w	r3, r3, #7
   120e6:	d105      	bne.n	120f4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   120e8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   120ea:	2b00      	cmp	r3, #0
   120ec:	bf0c      	ite	eq
   120ee:	2000      	moveq	r0, #0
   120f0:	2003      	movne	r0, #3
   120f2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   120f4:	2b02      	cmp	r3, #2
   120f6:	d105      	bne.n	12104 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   120f8:	8bc0      	ldrh	r0, [r0, #30]
   120fa:	fab0 f080 	clz	r0, r0
   120fe:	0940      	lsrs	r0, r0, #5
   12100:	0080      	lsls	r0, r0, #2
   12102:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   12104:	2b01      	cmp	r3, #1
   12106:	d105      	bne.n	12114 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   12108:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1210a:	2b00      	cmp	r3, #0
   1210c:	bf0c      	ite	eq
   1210e:	2000      	moveq	r0, #0
   12110:	2005      	movne	r0, #5
   12112:	4770      	bx	lr
	int evt = EVT_NOP;
   12114:	2000      	movs	r0, #0
}
   12116:	4770      	bx	lr

00012118 <validate_args>:
{
   12118:	b510      	push	{r4, lr}
   1211a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1211c:	b100      	cbz	r0, 12120 <validate_args+0x8>
   1211e:	b911      	cbnz	r1, 12126 <validate_args+0xe>
		return -EINVAL;
   12120:	f06f 0015 	mvn.w	r0, #21
}
   12124:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   12126:	1d08      	adds	r0, r1, #4
   12128:	f000 f895 	bl	12256 <sys_notify_validate>
	if ((rv == 0)
   1212c:	2800      	cmp	r0, #0
   1212e:	d1f9      	bne.n	12124 <validate_args+0xc>
	    && ((cli->notify.flags
   12130:	68a3      	ldr	r3, [r4, #8]
   12132:	2b03      	cmp	r3, #3
   12134:	d9f6      	bls.n	12124 <validate_args+0xc>
   12136:	e7f3      	b.n	12120 <validate_args+0x8>

00012138 <notify_one>:
{
   12138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1213c:	460d      	mov	r5, r1
   1213e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   12140:	4619      	mov	r1, r3
   12142:	1d28      	adds	r0, r5, #4
{
   12144:	4690      	mov	r8, r2
   12146:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   12148:	f000 f899 	bl	1227e <sys_notify_finalize>
	if (cb) {
   1214c:	4604      	mov	r4, r0
   1214e:	b138      	cbz	r0, 12160 <notify_one+0x28>
		cb(mgr, cli, state, res);
   12150:	4633      	mov	r3, r6
   12152:	4642      	mov	r2, r8
   12154:	4629      	mov	r1, r5
   12156:	4638      	mov	r0, r7
   12158:	46a4      	mov	ip, r4
}
   1215a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1215e:	4760      	bx	ip
}
   12160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012164 <transition_complete>:
{
   12164:	b410      	push	{r4}
	__asm__ volatile(
   12166:	f04f 0440 	mov.w	r4, #64	; 0x40
   1216a:	f3ef 8211 	mrs	r2, BASEPRI
   1216e:	f384 8812 	msr	BASEPRI_MAX, r4
   12172:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   12176:	6181      	str	r1, [r0, #24]
}
   12178:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1217a:	2101      	movs	r1, #1
   1217c:	f7f9 bc38 	b.w	b9f0 <process_event>

00012180 <onoff_manager_init>:
{
   12180:	b538      	push	{r3, r4, r5, lr}
   12182:	460c      	mov	r4, r1
	if ((mgr == NULL)
   12184:	4605      	mov	r5, r0
   12186:	b158      	cbz	r0, 121a0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   12188:	b151      	cbz	r1, 121a0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1218a:	680b      	ldr	r3, [r1, #0]
   1218c:	b143      	cbz	r3, 121a0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1218e:	684b      	ldr	r3, [r1, #4]
   12190:	b133      	cbz	r3, 121a0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   12192:	2220      	movs	r2, #32
   12194:	2100      	movs	r1, #0
   12196:	f001 f8df 	bl	13358 <memset>
   1219a:	612c      	str	r4, [r5, #16]
	return 0;
   1219c:	2000      	movs	r0, #0
}
   1219e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   121a0:	f06f 0015 	mvn.w	r0, #21
   121a4:	e7fb      	b.n	1219e <onoff_manager_init+0x1e>

000121a6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   121a6:	b570      	push	{r4, r5, r6, lr}
   121a8:	4605      	mov	r5, r0
   121aa:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   121ac:	f7ff ffb4 	bl	12118 <validate_args>

	if (rv < 0) {
   121b0:	1e04      	subs	r4, r0, #0
   121b2:	db15      	blt.n	121e0 <onoff_request+0x3a>
   121b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   121b8:	f3ef 8211 	mrs	r2, BASEPRI
   121bc:	f383 8812 	msr	BASEPRI_MAX, r3
   121c0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   121c4:	8beb      	ldrh	r3, [r5, #30]
   121c6:	8bac      	ldrh	r4, [r5, #28]
   121c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   121cc:	428b      	cmp	r3, r1
   121ce:	f004 0407 	and.w	r4, r4, #7
   121d2:	d107      	bne.n	121e4 <onoff_request+0x3e>
	__asm__ volatile(
   121d4:	f382 8811 	msr	BASEPRI, r2
   121d8:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   121dc:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   121e0:	4620      	mov	r0, r4
   121e2:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   121e4:	2c02      	cmp	r4, #2
   121e6:	d10c      	bne.n	12202 <onoff_request+0x5c>
		mgr->refs += 1U;
   121e8:	3301      	adds	r3, #1
   121ea:	83eb      	strh	r3, [r5, #30]
   121ec:	f382 8811 	msr	BASEPRI, r2
   121f0:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   121f4:	2300      	movs	r3, #0
   121f6:	4622      	mov	r2, r4
   121f8:	4631      	mov	r1, r6
   121fa:	4628      	mov	r0, r5
   121fc:	f7ff ff9c 	bl	12138 <notify_one>
   12200:	e7ee      	b.n	121e0 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   12202:	2c06      	cmp	r4, #6
   12204:	d814      	bhi.n	12230 <onoff_request+0x8a>
   12206:	e8df f004 	tbb	[pc, r4]
   1220a:	1304      	.short	0x1304
   1220c:	1a041313 	.word	0x1a041313
   12210:	04          	.byte	0x04
   12211:	00          	.byte	0x00
	parent->next = child;
   12212:	2300      	movs	r3, #0
   12214:	6033      	str	r3, [r6, #0]
	return list->tail;
   12216:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   12218:	b93b      	cbnz	r3, 1222a <onoff_request+0x84>
	list->head = node;
   1221a:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   1221e:	b9ac      	cbnz	r4, 1224c <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   12220:	2102      	movs	r1, #2
   12222:	4628      	mov	r0, r5
   12224:	f7f9 fbe4 	bl	b9f0 <process_event>
   12228:	e7da      	b.n	121e0 <onoff_request+0x3a>
	parent->next = child;
   1222a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1222c:	606e      	str	r6, [r5, #4]
}
   1222e:	e7f6      	b.n	1221e <onoff_request+0x78>
   12230:	f382 8811 	msr	BASEPRI, r2
   12234:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   12238:	f06f 0404 	mvn.w	r4, #4
   1223c:	e7d0      	b.n	121e0 <onoff_request+0x3a>
   1223e:	f382 8811 	msr	BASEPRI, r2
   12242:	f3bf 8f6f 	isb	sy
   12246:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1224a:	e7c9      	b.n	121e0 <onoff_request+0x3a>
   1224c:	f382 8811 	msr	BASEPRI, r2
   12250:	f3bf 8f6f 	isb	sy
		if (notify) {
   12254:	e7c4      	b.n	121e0 <onoff_request+0x3a>

00012256 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   12256:	4603      	mov	r3, r0
   12258:	b140      	cbz	r0, 1226c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1225a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1225c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   12260:	2a02      	cmp	r2, #2
   12262:	d006      	beq.n	12272 <sys_notify_validate+0x1c>
   12264:	2a03      	cmp	r2, #3
   12266:	d004      	beq.n	12272 <sys_notify_validate+0x1c>
   12268:	2a01      	cmp	r2, #1
   1226a:	d005      	beq.n	12278 <sys_notify_validate+0x22>
   1226c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   12270:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   12272:	681a      	ldr	r2, [r3, #0]
   12274:	2a00      	cmp	r2, #0
   12276:	d0f9      	beq.n	1226c <sys_notify_validate+0x16>
		notify->result = 0;
   12278:	2000      	movs	r0, #0
   1227a:	6098      	str	r0, [r3, #8]
   1227c:	4770      	bx	lr

0001227e <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1227e:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   12280:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   12282:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   12284:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   12288:	2a02      	cmp	r2, #2
{
   1228a:	4603      	mov	r3, r0
	switch (method) {
   1228c:	f04f 0400 	mov.w	r4, #0
   12290:	d007      	beq.n	122a2 <sys_notify_finalize+0x24>
   12292:	2a03      	cmp	r2, #3
   12294:	d002      	beq.n	1229c <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   12296:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   12298:	2000      	movs	r0, #0
   1229a:	e001      	b.n	122a0 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   1229c:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1229e:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   122a0:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   122a2:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   122a4:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   122a6:	2800      	cmp	r0, #0
   122a8:	d0f6      	beq.n	12298 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   122aa:	f7ff f941 	bl	11530 <z_impl_k_poll_signal_raise>
   122ae:	e7f3      	b.n	12298 <sys_notify_finalize+0x1a>

000122b0 <outs>:
{
   122b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   122b4:	4607      	mov	r7, r0
   122b6:	4688      	mov	r8, r1
   122b8:	4615      	mov	r5, r2
   122ba:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   122bc:	4614      	mov	r4, r2
   122be:	42b4      	cmp	r4, r6
   122c0:	d305      	bcc.n	122ce <outs+0x1e>
   122c2:	b10e      	cbz	r6, 122c8 <outs+0x18>
	return (int)count;
   122c4:	1b60      	subs	r0, r4, r5
   122c6:	e008      	b.n	122da <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   122c8:	7823      	ldrb	r3, [r4, #0]
   122ca:	2b00      	cmp	r3, #0
   122cc:	d0fa      	beq.n	122c4 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   122ce:	f814 0b01 	ldrb.w	r0, [r4], #1
   122d2:	4641      	mov	r1, r8
   122d4:	47b8      	blx	r7
		if (rc < 0) {
   122d6:	2800      	cmp	r0, #0
   122d8:	daf1      	bge.n	122be <outs+0xe>
}
   122da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000122de <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   122de:	b40f      	push	{r0, r1, r2, r3}
   122e0:	b507      	push	{r0, r1, r2, lr}
   122e2:	a904      	add	r1, sp, #16
   122e4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   122e8:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   122ea:	f7f9 fb73 	bl	b9d4 <vprintk>

	va_end(ap);
}
   122ee:	b003      	add	sp, #12
   122f0:	f85d eb04 	ldr.w	lr, [sp], #4
   122f4:	b004      	add	sp, #16
   122f6:	4770      	bx	lr

000122f8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   122f8:	4770      	bx	lr

000122fa <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
   122fa:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
   122fc:	f7fa f89c 	bl	c438 <__do_global_ctors_aux>
	__do_init_array_aux();
}
   12300:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__do_init_array_aux();
   12304:	f7fa b88a 	b.w	c41c <__do_init_array_aux>

00012308 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   12308:	f000 bc44 	b.w	12b94 <z_fatal_error>

0001230c <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1230c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1230e:	6800      	ldr	r0, [r0, #0]
   12310:	f000 bc40 	b.w	12b94 <z_fatal_error>

00012314 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   12314:	2100      	movs	r1, #0
   12316:	2001      	movs	r0, #1
   12318:	f7ff bff6 	b.w	12308 <z_arm_fatal_error>

0001231c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1231c:	b508      	push	{r3, lr}
	handler();
   1231e:	f7fa fa47 	bl	c7b0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   12322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   12326:	f7fa bb19 	b.w	c95c <z_arm_exc_exit>

0001232a <malloc_prepare>:
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   1232a:	2000      	movs	r0, #0
   1232c:	4770      	bx	lr

0001232e <nordicsemi_nrf52_init>:
	__asm__ volatile(
   1232e:	f04f 0240 	mov.w	r2, #64	; 0x40
   12332:	f3ef 8311 	mrs	r3, BASEPRI
   12336:	f382 8812 	msr	BASEPRI_MAX, r2
   1233a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1233e:	f383 8811 	msr	BASEPRI, r3
   12342:	f3bf 8f6f 	isb	sy
}
   12346:	2000      	movs	r0, #0
   12348:	4770      	bx	lr

0001234a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1234a:	2806      	cmp	r0, #6
   1234c:	d108      	bne.n	12360 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1234e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12352:	2201      	movs	r2, #1
   12354:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   12358:	f3bf 8f4f 	dsb	sy
        __WFE();
   1235c:	bf20      	wfe
    while (true)
   1235e:	e7fd      	b.n	1235c <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   12360:	4770      	bx	lr

00012362 <pm_state_exit_post_ops>:
   12362:	2300      	movs	r3, #0
   12364:	f383 8811 	msr	BASEPRI, r3
   12368:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1236c:	4770      	bx	lr

0001236e <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1236e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   12370:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   12372:	2106      	movs	r1, #6
{
   12374:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   12376:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1237a:	f7fd f905 	bl	f588 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1237e:	b918      	cbnz	r0, 12388 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   12380:	79a3      	ldrb	r3, [r4, #6]
   12382:	f063 033f 	orn	r3, r3, #63	; 0x3f
   12386:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   12388:	bd10      	pop	{r4, pc}

0001238a <hci_vendor_event>:
}
   1238a:	4770      	bx	lr

0001238c <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   1238c:	2101      	movs	r1, #1
   1238e:	3008      	adds	r0, #8
   12390:	f000 b89f 	b.w	124d2 <net_buf_simple_pull_mem>

00012394 <handle_event_common.isra.0>:
static int handle_event_common(uint8_t event, struct net_buf *buf,
   12394:	b430      	push	{r4, r5}
   12396:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1239a:	4604      	mov	r4, r0
   1239c:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   1239e:	429a      	cmp	r2, r3
   123a0:	d101      	bne.n	123a6 <handle_event_common.isra.0+0x12>
}
   123a2:	bc30      	pop	{r4, r5}
   123a4:	4770      	bx	lr
		if (handler->event != event) {
   123a6:	4611      	mov	r1, r2
   123a8:	f811 5b08 	ldrb.w	r5, [r1], #8
   123ac:	42a5      	cmp	r5, r4
   123ae:	d106      	bne.n	123be <handle_event_common.isra.0+0x2a>
		if (buf->len < handler->min_len) {
   123b0:	8981      	ldrh	r1, [r0, #12]
   123b2:	7853      	ldrb	r3, [r2, #1]
   123b4:	4299      	cmp	r1, r3
   123b6:	d3f4      	bcc.n	123a2 <handle_event_common.isra.0+0xe>
}
   123b8:	bc30      	pop	{r4, r5}
		handler->handler(buf);
   123ba:	6853      	ldr	r3, [r2, #4]
   123bc:	4718      	bx	r3
   123be:	460a      	mov	r2, r1
   123c0:	e7ed      	b.n	1239e <handle_event_common.isra.0+0xa>

000123c2 <bt_addr_le_eq>:
 *
 *  @retval #true if the two addresses are equal
 *  @retval #false otherwise
 */
static inline bool bt_addr_le_eq(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
   123c2:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   123c4:	2207      	movs	r2, #7
   123c6:	f000 ffa9 	bl	1331c <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
}
   123ca:	fab0 f080 	clz	r0, r0
   123ce:	0940      	lsrs	r0, r0, #5
   123d0:	bd08      	pop	{r3, pc}

000123d2 <bt_addr_copy>:
   123d2:	680b      	ldr	r3, [r1, #0]
   123d4:	6003      	str	r3, [r0, #0]
   123d6:	888b      	ldrh	r3, [r1, #4]
   123d8:	8083      	strh	r3, [r0, #4]
 *  @param src Bluetooth device address source buffer.
 */
static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
}
   123da:	4770      	bx	lr

000123dc <bt_addr_le_copy>:
   123dc:	680b      	ldr	r3, [r1, #0]
   123de:	6003      	str	r3, [r0, #0]
   123e0:	888b      	ldrh	r3, [r1, #4]
   123e2:	8083      	strh	r3, [r0, #4]
   123e4:	798b      	ldrb	r3, [r1, #6]
   123e6:	7183      	strb	r3, [r0, #6]
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
}
   123e8:	4770      	bx	lr

000123ea <fixed_data_unref>:
}
   123ea:	4770      	bx	lr

000123ec <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   123ec:	6a81      	ldr	r1, [r0, #40]	; 0x28
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   123ee:	6849      	ldr	r1, [r1, #4]
   123f0:	6809      	ldr	r1, [r1, #0]
   123f2:	f7fb bae9 	b.w	d9c8 <net_buf_alloc_len>

000123f6 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   123f6:	6883      	ldr	r3, [r0, #8]
   123f8:	440b      	add	r3, r1
   123fa:	6003      	str	r3, [r0, #0]
}
   123fc:	4770      	bx	lr

000123fe <net_buf_slist_put>:
{
   123fe:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   12400:	460b      	mov	r3, r1
   12402:	681c      	ldr	r4, [r3, #0]
   12404:	b98c      	cbnz	r4, 1242a <net_buf_slist_put+0x2c>
	__asm__ volatile(
   12406:	f04f 0240 	mov.w	r2, #64	; 0x40
   1240a:	f3ef 8411 	mrs	r4, BASEPRI
   1240e:	f382 8812 	msr	BASEPRI_MAX, r2
   12412:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   12416:	b119      	cbz	r1, 12420 <net_buf_slist_put+0x22>
	return list->tail;
   12418:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   1241a:	b962      	cbnz	r2, 12436 <net_buf_slist_put+0x38>
	list->head = node;
   1241c:	6001      	str	r1, [r0, #0]
	list->tail = node;
   1241e:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   12420:	f384 8811 	msr	BASEPRI, r4
   12424:	f3bf 8f6f 	isb	sy
}
   12428:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   1242a:	795a      	ldrb	r2, [r3, #5]
   1242c:	f042 0201 	orr.w	r2, r2, #1
   12430:	715a      	strb	r2, [r3, #5]
   12432:	4623      	mov	r3, r4
   12434:	e7e5      	b.n	12402 <net_buf_slist_put+0x4>
	parent->next = child;
   12436:	6011      	str	r1, [r2, #0]
}
   12438:	e7f1      	b.n	1241e <net_buf_slist_put+0x20>

0001243a <net_buf_slist_get>:
{
   1243a:	b570      	push	{r4, r5, r6, lr}
   1243c:	4603      	mov	r3, r0
	__asm__ volatile(
   1243e:	f04f 0240 	mov.w	r2, #64	; 0x40
   12442:	f3ef 8511 	mrs	r5, BASEPRI
   12446:	f382 8812 	msr	BASEPRI_MAX, r2
   1244a:	f3bf 8f6f 	isb	sy
	return list->head;
   1244e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   12450:	b158      	cbz	r0, 1246a <net_buf_slist_get+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12452:	6859      	ldr	r1, [r3, #4]
	return node->next;
   12454:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   12456:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12458:	4288      	cmp	r0, r1
	list->tail = node;
   1245a:	bf08      	it	eq
   1245c:	605a      	streq	r2, [r3, #4]
   1245e:	4602      	mov	r2, r0
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12460:	7951      	ldrb	r1, [r2, #5]
   12462:	f011 0101 	ands.w	r1, r1, #1
   12466:	d105      	bne.n	12474 <net_buf_slist_get+0x3a>
		frag->frags = NULL;
   12468:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   1246a:	f385 8811 	msr	BASEPRI, r5
   1246e:	f3bf 8f6f 	isb	sy
}
   12472:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   12474:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET(slist, snode)
   12476:	b129      	cbz	r1, 12484 <net_buf_slist_get+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12478:	685e      	ldr	r6, [r3, #4]
	return node->next;
   1247a:	680c      	ldr	r4, [r1, #0]
	list->head = node;
   1247c:	601c      	str	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1247e:	42b1      	cmp	r1, r6
	list->tail = node;
   12480:	bf08      	it	eq
   12482:	605c      	streq	r4, [r3, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   12484:	7954      	ldrb	r4, [r2, #5]
			frag->frags = (void *)sys_slist_get(list);
   12486:	6011      	str	r1, [r2, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   12488:	f024 0401 	bic.w	r4, r4, #1
   1248c:	7154      	strb	r4, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1248e:	460a      	mov	r2, r1
   12490:	e7e6      	b.n	12460 <net_buf_slist_get+0x26>

00012492 <net_buf_put>:
{
   12492:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   12494:	460a      	mov	r2, r1
   12496:	6814      	ldr	r4, [r2, #0]
   12498:	b914      	cbnz	r4, 124a0 <net_buf_put+0xe>
}
   1249a:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1249c:	f000 bca2 	b.w	12de4 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   124a0:	7953      	ldrb	r3, [r2, #5]
   124a2:	f043 0301 	orr.w	r3, r3, #1
   124a6:	7153      	strb	r3, [r2, #5]
   124a8:	4622      	mov	r2, r4
   124aa:	e7f4      	b.n	12496 <net_buf_put+0x4>

000124ac <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   124ac:	7902      	ldrb	r2, [r0, #4]
   124ae:	3201      	adds	r2, #1
   124b0:	7102      	strb	r2, [r0, #4]
	return buf;
}
   124b2:	4770      	bx	lr

000124b4 <net_buf_simple_add>:
	return buf->data + buf->len;
   124b4:	8883      	ldrh	r3, [r0, #4]
   124b6:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   124b8:	4419      	add	r1, r3
   124ba:	8081      	strh	r1, [r0, #4]
	return tail;
}
   124bc:	18d0      	adds	r0, r2, r3
   124be:	4770      	bx	lr

000124c0 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   124c0:	b430      	push	{r4, r5}
   124c2:	8884      	ldrh	r4, [r0, #4]
   124c4:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   124c6:	18a3      	adds	r3, r4, r2
   124c8:	8083      	strh	r3, [r0, #4]
   124ca:	1928      	adds	r0, r5, r4
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   124cc:	bc30      	pop	{r4, r5}
   124ce:	f000 bf35 	b.w	1333c <memcpy>

000124d2 <net_buf_simple_pull_mem>:
	buf->len -= len;
	return buf->data += len;
}

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   124d2:	4603      	mov	r3, r0
	void *data = buf->data;
   124d4:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   124d6:	889a      	ldrh	r2, [r3, #4]
   124d8:	1a52      	subs	r2, r2, r1
	buf->data += len;
   124da:	4401      	add	r1, r0
	buf->len -= len;
   124dc:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   124de:	6019      	str	r1, [r3, #0]

	return data;
}
   124e0:	4770      	bx	lr

000124e2 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   124e2:	6802      	ldr	r2, [r0, #0]
   124e4:	6880      	ldr	r0, [r0, #8]
}
   124e6:	1a10      	subs	r0, r2, r0
   124e8:	4770      	bx	lr

000124ea <adc_context_on_timer_expired>:
{
   124ea:	b410      	push	{r4}
   124ec:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   124ee:	3808      	subs	r0, #8
   124f0:	f3bf 8f5b 	dmb	ish
   124f4:	e850 2f00 	ldrex	r2, [r0]
   124f8:	1c51      	adds	r1, r2, #1
   124fa:	e840 1400 	strex	r4, r1, [r0]
   124fe:	2c00      	cmp	r4, #0
   12500:	d1f8      	bne.n	124f4 <adc_context_on_timer_expired+0xa>
   12502:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   12506:	b912      	cbnz	r2, 1250e <adc_context_on_timer_expired+0x24>
}
   12508:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   1250a:	f7fb bb33 	b.w	db74 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   1250e:	f06f 020f 	mvn.w	r2, #15
}
   12512:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   12514:	669a      	str	r2, [r3, #104]	; 0x68
}
   12516:	4770      	bx	lr

00012518 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   12518:	6903      	ldr	r3, [r0, #16]
   1251a:	b2c9      	uxtb	r1, r1
   1251c:	220c      	movs	r2, #12
   1251e:	fb01 3302 	mla	r3, r1, r2, r3
   12522:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   12524:	f000 0007 	and.w	r0, r0, #7
   12528:	4770      	bx	lr

0001252a <set_on_state>:
	__asm__ volatile(
   1252a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1252e:	f3ef 8211 	mrs	r2, BASEPRI
   12532:	f383 8812 	msr	BASEPRI_MAX, r3
   12536:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1253a:	6803      	ldr	r3, [r0, #0]
   1253c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12540:	f043 0302 	orr.w	r3, r3, #2
   12544:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   12546:	f382 8811 	msr	BASEPRI, r2
   1254a:	f3bf 8f6f 	isb	sy
}
   1254e:	4770      	bx	lr

00012550 <stop>:
{
   12550:	b570      	push	{r4, r5, r6, lr}
   12552:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   12554:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   12556:	f04f 0440 	mov.w	r4, #64	; 0x40
   1255a:	f3ef 8511 	mrs	r5, BASEPRI
   1255e:	f384 8812 	msr	BASEPRI_MAX, r4
   12562:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   12566:	260c      	movs	r6, #12
   12568:	fb06 3401 	mla	r4, r6, r1, r3
   1256c:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1256e:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   12572:	d008      	beq.n	12586 <stop+0x36>
   12574:	42a2      	cmp	r2, r4
   12576:	d006      	beq.n	12586 <stop+0x36>
	__asm__ volatile(
   12578:	f385 8811 	msr	BASEPRI, r5
   1257c:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   12580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   12584:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   12586:	fb06 3301 	mla	r3, r6, r1, r3
   1258a:	2201      	movs	r2, #1
   1258c:	649a      	str	r2, [r3, #72]	; 0x48
   1258e:	f385 8811 	msr	BASEPRI, r5
   12592:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   12596:	6843      	ldr	r3, [r0, #4]
   12598:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1259c:	685b      	ldr	r3, [r3, #4]
   1259e:	4798      	blx	r3
	return 0;
   125a0:	2000      	movs	r0, #0
   125a2:	e7ef      	b.n	12584 <stop+0x34>

000125a4 <api_stop>:
	return stop(dev, subsys, CTX_API);
   125a4:	2280      	movs	r2, #128	; 0x80
   125a6:	f7ff bfd3 	b.w	12550 <stop>

000125aa <async_start>:
{
   125aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   125ac:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   125ae:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   125b0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   125b2:	f04f 0540 	mov.w	r5, #64	; 0x40
   125b6:	f3ef 8611 	mrs	r6, BASEPRI
   125ba:	f385 8812 	msr	BASEPRI_MAX, r5
   125be:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   125c2:	250c      	movs	r5, #12
   125c4:	fb05 4401 	mla	r4, r5, r1, r4
   125c8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   125ca:	f005 0c07 	and.w	ip, r5, #7
   125ce:	f1bc 0f01 	cmp.w	ip, #1
   125d2:	d10c      	bne.n	125ee <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   125d4:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   125d6:	f386 8811 	msr	BASEPRI, r6
   125da:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   125de:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   125e2:	6843      	ldr	r3, [r0, #4]
   125e4:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   125e8:	4798      	blx	r3
	return 0;
   125ea:	2000      	movs	r0, #0
}
   125ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   125ee:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   125f2:	42af      	cmp	r7, r5
   125f4:	f386 8811 	msr	BASEPRI, r6
   125f8:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   125fc:	bf0c      	ite	eq
   125fe:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   12602:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   12606:	e7f1      	b.n	125ec <async_start+0x42>

00012608 <api_start>:
{
   12608:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1260a:	2480      	movs	r4, #128	; 0x80
   1260c:	9400      	str	r4, [sp, #0]
   1260e:	f7ff ffcc 	bl	125aa <async_start>
}
   12612:	b002      	add	sp, #8
   12614:	bd10      	pop	{r4, pc}

00012616 <onoff_started_callback>:
	return &data->mgr[type];
   12616:	6900      	ldr	r0, [r0, #16]
   12618:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1261a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1261e:	2100      	movs	r1, #0
   12620:	4710      	bx	r2

00012622 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   12622:	2000      	movs	r0, #0
   12624:	f7fd b824 	b.w	f670 <nrfx_clock_start>

00012628 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   12628:	2000      	movs	r0, #0
   1262a:	f000 ba5b 	b.w	12ae4 <nrfx_clock_stop>

0001262e <blocking_start_callback>:
{
   1262e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   12630:	f7fe b898 	b.w	10764 <z_impl_k_sem_give>

00012634 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12634:	6843      	ldr	r3, [r0, #4]
   12636:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   12638:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1263c:	600b      	str	r3, [r1, #0]
}
   1263e:	2000      	movs	r0, #0
   12640:	4770      	bx	lr

00012642 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12642:	6843      	ldr	r3, [r0, #4]
   12644:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   12646:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   1264a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1264e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   12652:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   12656:	2000      	movs	r0, #0
   12658:	4770      	bx	lr

0001265a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1265a:	6843      	ldr	r3, [r0, #4]
   1265c:	685b      	ldr	r3, [r3, #4]
}
   1265e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   12660:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   12664:	4770      	bx	lr

00012666 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12666:	6843      	ldr	r3, [r0, #4]
   12668:	685b      	ldr	r3, [r3, #4]
}
   1266a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1266c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   12670:	4770      	bx	lr

00012672 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12672:	6843      	ldr	r3, [r0, #4]
   12674:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   12676:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   1267a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1267e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   12680:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   12684:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   12688:	2000      	movs	r0, #0
   1268a:	4770      	bx	lr

0001268c <gpio_nrfx_manage_callback>:
{
   1268c:	b510      	push	{r4, lr}
	return port->data;
   1268e:	6903      	ldr	r3, [r0, #16]
	return list->head;
   12690:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   12692:	b1f8      	cbz	r0, 126d4 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12694:	4288      	cmp	r0, r1
   12696:	d119      	bne.n	126cc <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   12698:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1269a:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   1269c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1269e:	42a1      	cmp	r1, r4
   126a0:	d100      	bne.n	126a4 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   126a2:	6098      	str	r0, [r3, #8]
	parent->next = child;
   126a4:	2000      	movs	r0, #0
   126a6:	6008      	str	r0, [r1, #0]
	if (set) {
   126a8:	b12a      	cbz	r2, 126b6 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   126aa:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   126ac:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   126ae:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   126b0:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   126b2:	b902      	cbnz	r2, 126b6 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   126b4:	6099      	str	r1, [r3, #8]
	return 0;
   126b6:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   126b8:	e010      	b.n	126dc <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   126ba:	4281      	cmp	r1, r0
   126bc:	d106      	bne.n	126cc <gpio_nrfx_manage_callback+0x40>
	return node->next;
   126be:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   126c0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   126c2:	6898      	ldr	r0, [r3, #8]
   126c4:	4281      	cmp	r1, r0
   126c6:	d1ed      	bne.n	126a4 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   126c8:	609c      	str	r4, [r3, #8]
}
   126ca:	e7eb      	b.n	126a4 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   126cc:	4604      	mov	r4, r0
   126ce:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   126d0:	2800      	cmp	r0, #0
   126d2:	d1f2      	bne.n	126ba <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   126d4:	2a00      	cmp	r2, #0
   126d6:	d1e8      	bne.n	126aa <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   126d8:	f06f 0015 	mvn.w	r0, #21
}
   126dc:	bd10      	pop	{r4, pc}

000126de <irq_connect0>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(SPIM(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_SPI_0_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(0);
   126de:	2200      	movs	r2, #0
   126e0:	2101      	movs	r1, #1
   126e2:	2004      	movs	r0, #4
   126e4:	f7fa b83c 	b.w	c760 <z_arm_irq_priority_set>

000126e8 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   126e8:	b510      	push	{r4, lr}
	while (*count) {
   126ea:	680b      	ldr	r3, [r1, #0]
   126ec:	b913      	cbnz	r3, 126f4 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   126ee:	6013      	str	r3, [r2, #0]
	return NULL;
   126f0:	4618      	mov	r0, r3
   126f2:	e005      	b.n	12700 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   126f4:	6803      	ldr	r3, [r0, #0]
   126f6:	685c      	ldr	r4, [r3, #4]
   126f8:	b11c      	cbz	r4, 12702 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   126fa:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   126fc:	6803      	ldr	r3, [r0, #0]
   126fe:	6818      	ldr	r0, [r3, #0]
}
   12700:	bd10      	pop	{r4, pc}
		++(*current);
   12702:	3308      	adds	r3, #8
   12704:	6003      	str	r3, [r0, #0]
		--(*count);
   12706:	680b      	ldr	r3, [r1, #0]
   12708:	3b01      	subs	r3, #1
   1270a:	600b      	str	r3, [r1, #0]
   1270c:	e7ed      	b.n	126ea <spi_context_get_next_buf.constprop.0+0x2>

0001270e <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1270e:	4603      	mov	r3, r0
   12710:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
   12712:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12714:	7919      	ldrb	r1, [r3, #4]
   12716:	2301      	movs	r3, #1
   12718:	fa03 f101 	lsl.w	r1, r3, r1
   1271c:	6903      	ldr	r3, [r0, #16]
   1271e:	681b      	ldr	r3, [r3, #0]
   12720:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   12722:	bf18      	it	ne
   12724:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   12728:	b112      	cbz	r2, 12730 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   1272a:	6883      	ldr	r3, [r0, #8]
   1272c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1272e:	4718      	bx	r3
   12730:	6883      	ldr	r3, [r0, #8]
   12732:	691b      	ldr	r3, [r3, #16]
   12734:	e7fb      	b.n	1272e <gpio_pin_set_dt.isra.0+0x20>

00012736 <_spi_context_cs_control>:
{
   12736:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   12738:	6803      	ldr	r3, [r0, #0]
{
   1273a:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1273c:	b1e3      	cbz	r3, 12778 <_spi_context_cs_control+0x42>
   1273e:	6898      	ldr	r0, [r3, #8]
   12740:	b1d0      	cbz	r0, 12778 <_spi_context_cs_control+0x42>
   12742:	6805      	ldr	r5, [r0, #0]
   12744:	b1c5      	cbz	r5, 12778 <_spi_context_cs_control+0x42>
		if (on) {
   12746:	b149      	cbz	r1, 1275c <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   12748:	2101      	movs	r1, #1
   1274a:	f7ff ffe0 	bl	1270e <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   1274e:	6823      	ldr	r3, [r4, #0]
   12750:	689b      	ldr	r3, [r3, #8]
   12752:	6898      	ldr	r0, [r3, #8]
}
   12754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   12758:	f000 bd29 	b.w	131ae <z_impl_k_busy_wait>
			if (!force_off &&
   1275c:	b912      	cbnz	r2, 12764 <_spi_context_cs_control+0x2e>
   1275e:	889b      	ldrh	r3, [r3, #4]
   12760:	04db      	lsls	r3, r3, #19
   12762:	d409      	bmi.n	12778 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   12764:	6880      	ldr	r0, [r0, #8]
   12766:	f000 fd22 	bl	131ae <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1276a:	6823      	ldr	r3, [r4, #0]
   1276c:	2100      	movs	r1, #0
   1276e:	6898      	ldr	r0, [r3, #8]
}
   12770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   12774:	f7ff bfcb 	b.w	1270e <gpio_pin_set_dt.isra.0>
}
   12778:	bd38      	pop	{r3, r4, r5, pc}

0001277a <spi_context_unlock_unconditionally>:
{
   1277a:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   1277c:	2201      	movs	r2, #1
   1277e:	2100      	movs	r1, #0
{
   12780:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   12782:	f7ff ffd8 	bl	12736 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   12786:	69a3      	ldr	r3, [r4, #24]
   12788:	b933      	cbnz	r3, 12798 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   1278a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1278c:	f104 0010 	add.w	r0, r4, #16
}
   12790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12794:	f7fd bfe6 	b.w	10764 <z_impl_k_sem_give>
   12798:	bd10      	pop	{r4, pc}

0001279a <spi_nrfx_release>:
{
   1279a:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1279c:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1279e:	6803      	ldr	r3, [r0, #0]
   127a0:	428b      	cmp	r3, r1
   127a2:	d106      	bne.n	127b2 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   127a4:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   127a8:	b934      	cbnz	r4, 127b8 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   127aa:	f7ff ffe6 	bl	1277a <spi_context_unlock_unconditionally>
	return 0;
   127ae:	4620      	mov	r0, r4
}
   127b0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   127b2:	f06f 0015 	mvn.w	r0, #21
   127b6:	e7fb      	b.n	127b0 <spi_nrfx_release+0x16>
		return -EBUSY;
   127b8:	f06f 000f 	mvn.w	r0, #15
   127bc:	e7f8      	b.n	127b0 <spi_nrfx_release+0x16>

000127be <spi_nrfx_init>:
{
   127be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   127c2:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   127c4:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   127c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   127c8:	aa01      	add	r2, sp, #4
   127ca:	2100      	movs	r1, #0
   127cc:	4630      	mov	r0, r6
   127ce:	f000 f8a1 	bl	12914 <pinctrl_lookup_state>
	if (ret < 0) {
   127d2:	2800      	cmp	r0, #0
   127d4:	db43      	blt.n	1285e <spi_nrfx_init+0xa0>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   127d6:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   127d8:	6832      	ldr	r2, [r6, #0]
   127da:	7919      	ldrb	r1, [r3, #4]
   127dc:	6818      	ldr	r0, [r3, #0]
   127de:	f000 f8af 	bl	12940 <pinctrl_configure_pins>
	if (err < 0) {
   127e2:	2800      	cmp	r0, #0
   127e4:	db3b      	blt.n	1285e <spi_nrfx_init+0xa0>
	dev_config->irq_connect();
   127e6:	6a23      	ldr	r3, [r4, #32]
   127e8:	4798      	blx	r3
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   127ea:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   127ec:	2601      	movs	r6, #1
   127ee:	3408      	adds	r4, #8
   127f0:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   127f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   127f8:	f1a4 0208 	sub.w	r2, r4, #8
   127fc:	4293      	cmp	r3, r2
   127fe:	d804      	bhi.n	1280a <spi_nrfx_init+0x4c>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   12800:	4628      	mov	r0, r5
   12802:	f7ff ffba 	bl	1277a <spi_context_unlock_unconditionally>
	return 0;
   12806:	2000      	movs	r0, #0
	return 0;
   12808:	e029      	b.n	1285e <spi_nrfx_init+0xa0>
		if (!device_is_ready(cs_gpio->port)) {
   1280a:	f854 0c08 	ldr.w	r0, [r4, #-8]
   1280e:	f000 f9b6 	bl	12b7e <z_device_is_ready>
   12812:	b338      	cbz	r0, 12864 <spi_nrfx_init+0xa6>
	return gpio_pin_configure(spec->port,
   12814:	f854 0c08 	ldr.w	r0, [r4, #-8]
				  spec->pin,
   12818:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
   1281c:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
   12820:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   12824:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12828:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1282c:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   1282e:	bf54      	ite	pl
   12830:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   12834:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   12838:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1283c:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   12840:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12842:	bf4c      	ite	mi
   12844:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   12848:	ea27 070e 	bicpl.w	r7, r7, lr
   1284c:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
   12850:	f8d8 3000 	ldr.w	r3, [r8]
   12854:	4798      	blx	r3
		if (ret < 0) {
   12856:	2800      	cmp	r0, #0
   12858:	f104 0408 	add.w	r4, r4, #8
   1285c:	dac8      	bge.n	127f0 <spi_nrfx_init+0x32>
}
   1285e:	b002      	add	sp, #8
   12860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
   12864:	f06f 0012 	mvn.w	r0, #18
	if (err < 0) {
   12868:	e7f9      	b.n	1285e <spi_nrfx_init+0xa0>

0001286a <event_handler>:
{
   1286a:	b538      	push	{r3, r4, r5, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1286c:	7803      	ldrb	r3, [r0, #0]
{
   1286e:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   12870:	2b00      	cmp	r3, #0
   12872:	d13c      	bne.n	128ee <event_handler+0x84>
	if (!ctx->tx_len) {
   12874:	6d8b      	ldr	r3, [r1, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   12876:	6e8d      	ldr	r5, [r1, #104]	; 0x68
   12878:	b193      	cbz	r3, 128a0 <event_handler+0x36>
	if (len > ctx->tx_len) {
   1287a:	429d      	cmp	r5, r3
   1287c:	d810      	bhi.n	128a0 <event_handler+0x36>
	ctx->tx_len -= len;
   1287e:	1b5b      	subs	r3, r3, r5
   12880:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   12882:	bb43      	cbnz	r3, 128d6 <event_handler+0x6c>
		++ctx->current_tx;
   12884:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   12886:	3308      	adds	r3, #8
   12888:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1288a:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1288c:	3b01      	subs	r3, #1
   1288e:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   12890:	f101 0258 	add.w	r2, r1, #88	; 0x58
   12894:	f104 0044 	add.w	r0, r4, #68	; 0x44
   12898:	3148      	adds	r1, #72	; 0x48
   1289a:	f7ff ff25 	bl	126e8 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1289e:	6560      	str	r0, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
   128a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   128a2:	b19b      	cbz	r3, 128cc <event_handler+0x62>
	if (len > ctx->rx_len) {
   128a4:	429d      	cmp	r5, r3
   128a6:	d811      	bhi.n	128cc <event_handler+0x62>
	ctx->rx_len -= len;
   128a8:	1b5b      	subs	r3, r3, r5
   128aa:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   128ac:	b9cb      	cbnz	r3, 128e2 <event_handler+0x78>
		++ctx->current_rx;
   128ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   128b0:	3308      	adds	r3, #8
   128b2:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   128b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   128b6:	3b01      	subs	r3, #1
   128b8:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   128ba:	f104 0260 	add.w	r2, r4, #96	; 0x60
   128be:	f104 0150 	add.w	r1, r4, #80	; 0x50
   128c2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   128c6:	f7ff ff0f 	bl	126e8 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   128ca:	65e0      	str	r0, [r4, #92]	; 0x5c
		transfer_next_chunk(dev_data->dev);
   128cc:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   128ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		transfer_next_chunk(dev_data->dev);
   128d2:	f7fb bdcf 	b.w	e474 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   128d6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   128d8:	2b00      	cmp	r3, #0
   128da:	d0e1      	beq.n	128a0 <event_handler+0x36>
		ctx->tx_buf += dfs * len;
   128dc:	442b      	add	r3, r5
   128de:	654b      	str	r3, [r1, #84]	; 0x54
   128e0:	e7de      	b.n	128a0 <event_handler+0x36>
	} else if (ctx->rx_buf) {
   128e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   128e4:	2b00      	cmp	r3, #0
   128e6:	d0f1      	beq.n	128cc <event_handler+0x62>
		ctx->rx_buf += dfs * len;
   128e8:	442b      	add	r3, r5
   128ea:	65e3      	str	r3, [r4, #92]	; 0x5c
   128ec:	e7ee      	b.n	128cc <event_handler+0x62>
}
   128ee:	bd38      	pop	{r3, r4, r5, pc}

000128f0 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   128f0:	2000      	movs	r0, #0
   128f2:	4770      	bx	lr

000128f4 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   128f4:	b538      	push	{r3, r4, r5, lr}
   128f6:	460c      	mov	r4, r1
   128f8:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   128fa:	f7fa feb9 	bl	d670 <bt_is_ready>
   128fe:	b128      	cbz	r0, 1290c <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   12900:	4629      	mov	r1, r5
   12902:	4620      	mov	r0, r4
}
   12904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   12908:	f7fa bdd4 	b.w	d4b4 <bt_hci_le_rand>
}
   1290c:	f06f 000a 	mvn.w	r0, #10
   12910:	bd38      	pop	{r3, r4, r5, pc}

00012912 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   12912:	4770      	bx	lr

00012914 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   12914:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
   12916:	6843      	ldr	r3, [r0, #4]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   12918:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
   1291c:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1291e:	7a05      	ldrb	r5, [r0, #8]
   12920:	6844      	ldr	r4, [r0, #4]
   12922:	4435      	add	r5, r6
   12924:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   12928:	42a3      	cmp	r3, r4
   1292a:	d902      	bls.n	12932 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
   1292c:	f06f 0001 	mvn.w	r0, #1
}
   12930:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   12932:	795c      	ldrb	r4, [r3, #5]
   12934:	428c      	cmp	r4, r1
   12936:	d001      	beq.n	1293c <pinctrl_lookup_state+0x28>
		(*state)++;
   12938:	3308      	adds	r3, #8
   1293a:	e7ef      	b.n	1291c <pinctrl_lookup_state+0x8>
			return 0;
   1293c:	2000      	movs	r0, #0
   1293e:	e7f7      	b.n	12930 <pinctrl_lookup_state+0x1c>

00012940 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   12940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12944:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   12948:	2701      	movs	r7, #1
    p_reg->OUTCLR = clr_mask;
   1294a:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1294e:	4281      	cmp	r1, r0
   12950:	d102      	bne.n	12958 <pinctrl_configure_pins+0x18>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   12952:	2000      	movs	r0, #0
}
   12954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   12958:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1295a:	f005 047f 	and.w	r4, r5, #127	; 0x7f
			pin = 0xFFFFFFFFU;
   1295e:	2c7f      	cmp	r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   12960:	f3c5 2343 	ubfx	r3, r5, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
   12964:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   12968:	bf08      	it	eq
   1296a:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
   1296e:	2d05      	cmp	r5, #5
   12970:	d00f      	beq.n	12992 <pinctrl_configure_pins+0x52>
   12972:	2d06      	cmp	r5, #6
   12974:	d011      	beq.n	1299a <pinctrl_configure_pins+0x5a>
   12976:	2d04      	cmp	r5, #4
   12978:	d12f      	bne.n	129da <pinctrl_configure_pins+0x9a>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1297a:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1297e:	2500      	movs	r5, #0
    *p_pin = pin_number & 0x1F;
   12980:	f004 0c1f 	and.w	ip, r4, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   12984:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   12988:	f8c6 c50c 	str.w	ip, [r6, #1292]	; 0x50c
}
   1298c:	f04f 0c01 	mov.w	ip, #1
   12990:	e007      	b.n	129a2 <pinctrl_configure_pins+0x62>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   12992:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   12996:	2501      	movs	r5, #1
   12998:	e7f2      	b.n	12980 <pinctrl_configure_pins+0x40>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1299a:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, MISO) = pin;
   1299c:	f8c2 4510 	str.w	r4, [r2, #1296]	; 0x510
			dir = NRF_GPIO_PIN_DIR_INPUT;
   129a0:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   129a2:	f850 eb04 	ldr.w	lr, [r0], #4
   129a6:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   129aa:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   129ae:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   129b2:	ea4f 2303 	mov.w	r3, r3, lsl #8
   129b6:	bf18      	it	ne
   129b8:	f04f 0c00 	movne.w	ip, #0
    *p_pin = pin_number & 0x1F;
   129bc:	f004 041f 	and.w	r4, r4, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   129c0:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
   129c4:	bf18      	it	ne
   129c6:	2501      	movne	r5, #1
   129c8:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
   129cc:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   129d0:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   129d4:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   129d8:	e7b9      	b.n	1294e <pinctrl_configure_pins+0xe>
		switch (NRF_GET_FUN(pins[i])) {
   129da:	f06f 0085 	mvn.w	r0, #133	; 0x85
   129de:	e7b9      	b.n	12954 <pinctrl_configure_pins+0x14>

000129e0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   129e0:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   129e2:	2000      	movs	r0, #0
   129e4:	f7fa fa1e 	bl	ce24 <sys_arch_reboot>

000129e8 <sdc_assertion_handler>:
	k_oops();
   129e8:	4040      	eors	r0, r0
   129ea:	f380 8811 	msr	BASEPRI, r0
   129ee:	f04f 0003 	mov.w	r0, #3
   129f2:	df02      	svc	2
}
   129f4:	4770      	bx	lr

000129f6 <hci_driver_close>:
{
   129f6:	b510      	push	{r4, lr}
	err = MULTITHREADING_LOCK_ACQUIRE();
   129f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   129fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12a00:	f7fc fa4a 	bl	ee98 <multithreading_lock_acquire>
	if (err) {
   12a04:	4604      	mov	r4, r0
   12a06:	b920      	cbnz	r0, 12a12 <hci_driver_close+0x1c>
	err = sdc_disable();
   12a08:	f7f1 fe04 	bl	4614 <sdc_disable>
	if (err) {
   12a0c:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   12a0e:	f7fc fa4b 	bl	eea8 <multithreading_lock_release>
}
   12a12:	4620      	mov	r0, r4
   12a14:	bd10      	pop	{r4, pc}

00012a16 <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   12a16:	f7fc bae5 	b.w	efe4 <rand_prio_low_vector_get>

00012a1a <hci_driver_send>:
{
   12a1a:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   12a1c:	8983      	ldrh	r3, [r0, #12]
{
   12a1e:	4605      	mov	r5, r0
	if (!buf->len) {
   12a20:	b1bb      	cbz	r3, 12a52 <hci_driver_send+0x38>
	switch (type) {
   12a22:	7d03      	ldrb	r3, [r0, #20]
   12a24:	b9ab      	cbnz	r3, 12a52 <hci_driver_send+0x38>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   12a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12a2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12a2e:	f7fc fa33 	bl	ee98 <multithreading_lock_acquire>
	if (!errcode) {
   12a32:	4604      	mov	r4, r0
   12a34:	b958      	cbnz	r0, 12a4e <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   12a36:	68a8      	ldr	r0, [r5, #8]
   12a38:	f7fc fb50 	bl	f0dc <hci_internal_cmd_put>
   12a3c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   12a3e:	f7fc fa33 	bl	eea8 <multithreading_lock_release>
	if (errcode) {
   12a42:	b924      	cbnz	r4, 12a4e <hci_driver_send+0x34>
	receive_signal_raise();
   12a44:	f7fc fae2 	bl	f00c <receive_signal_raise>
		net_buf_unref(buf);
   12a48:	4628      	mov	r0, r5
   12a4a:	f7fb f853 	bl	daf4 <net_buf_unref>
}
   12a4e:	4620      	mov	r0, r4
   12a50:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   12a52:	f06f 0415 	mvn.w	r4, #21
   12a56:	e7fa      	b.n	12a4e <hci_driver_send+0x34>

00012a58 <receive_work_handler>:
	hci_driver_receive_process();
   12a58:	f7fc baec 	b.w	f034 <hci_driver_receive_process>

00012a5c <m_assert_handler>:
	k_oops();
   12a5c:	4040      	eors	r0, r0
   12a5e:	f380 8811 	msr	BASEPRI, r0
   12a62:	f04f 0003 	mov.w	r0, #3
   12a66:	df02      	svc	2
}
   12a68:	4770      	bx	lr

00012a6a <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   12a6a:	4668      	mov	r0, sp
   12a6c:	f020 0107 	bic.w	r1, r0, #7
   12a70:	468d      	mov	sp, r1
   12a72:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   12a74:	f7f0 fbc2 	bl	31fc <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   12a78:	f7f9 fe8c 	bl	c794 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   12a7c:	f7f9 ff6e 	bl	c95c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   12a80:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   12a84:	4685      	mov	sp, r0
   12a86:	4770      	bx	lr

00012a88 <mpsl_low_prio_work_handler>:
{
   12a88:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   12a8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12a92:	f7fc fa01 	bl	ee98 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   12a96:	f7f5 fe3d 	bl	8714 <mpsl_low_priority_process>
}
   12a9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   12a9e:	f7fc ba03 	b.w	eea8 <multithreading_lock_release>

00012aa2 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   12aa2:	4668      	mov	r0, sp
   12aa4:	f020 0107 	bic.w	r1, r0, #7
   12aa8:	468d      	mov	sp, r1
   12aaa:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   12aac:	f7f0 fb1c 	bl	30e8 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   12ab0:	f7f9 fe70 	bl	c794 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   12ab4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   12ab8:	4685      	mov	sp, r0
   12aba:	4770      	bx	lr

00012abc <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   12abc:	4668      	mov	r0, sp
   12abe:	f020 0107 	bic.w	r1, r0, #7
   12ac2:	468d      	mov	sp, r1
   12ac4:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   12ac6:	f7ee f917 	bl	cf8 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   12aca:	f7f9 fe63 	bl	c794 <_arch_isr_direct_pm>
   12ace:	f7f9 ff45 	bl	c95c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   12ad2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   12ad6:	4685      	mov	sp, r0
   12ad8:	4770      	bx	lr

00012ada <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   12ada:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   12adc:	f7f5 ff96 	bl	8a0c <mpsl_fem_init>

	return 0;
}
   12ae0:	2000      	movs	r0, #0
   12ae2:	bd08      	pop	{r3, pc}

00012ae4 <nrfx_clock_stop>:
	switch (domain) {
   12ae4:	2801      	cmp	r0, #1
   12ae6:	d101      	bne.n	12aec <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   12ae8:	f7f1 b9e4 	b.w	3eb4 <mpsl_clock_hfclk_release>
}
   12aec:	4770      	bx	lr

00012aee <nrfx_clock_enable>:
}
   12aee:	4770      	bx	lr

00012af0 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   12af0:	f7f0 bff4 	b.w	3adc <MPSL_IRQ_CLOCK_Handler>

00012af4 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   12af4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)
            if (var1 == 0x0E)
   12af8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   12afc:	2a0e      	cmp	r2, #14
   12afe:	d105      	bne.n	12b0c <nrf52_configuration_249+0x18>
            {
                switch(var2)
   12b00:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
   12b04:	3800      	subs	r0, #0
   12b06:	bf18      	it	ne
   12b08:	2001      	movne	r0, #1
   12b0a:	4770      	bx	lr
                {
                    case 0x00ul:
                        return false;
   12b0c:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
   12b0e:	4770      	bx	lr

00012b10 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   12b10:	4700      	bx	r0

00012b12 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   12b12:	f000 bb4c 	b.w	131ae <z_impl_k_busy_wait>

00012b16 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   12b16:	f000 001f 	and.w	r0, r0, #31
   12b1a:	0080      	lsls	r0, r0, #2
   12b1c:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   12b20:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   12b24:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   12b28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   12b2c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   12b30:	4770      	bx	lr

00012b32 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   12b32:	1c43      	adds	r3, r0, #1
   12b34:	d008      	beq.n	12b48 <spim_pin_uninit+0x16>
    *p_pin = pin_number & 0x1F;
   12b36:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
   12b3a:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   12b3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   12b42:	2202      	movs	r2, #2
   12b44:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   12b48:	4770      	bx	lr

00012b4a <nrf_gpio_pin_write>:
    *p_pin = pin_number & 0x1F;
   12b4a:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   12b4e:	2301      	movs	r3, #1
   12b50:	4083      	lsls	r3, r0
   12b52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    if (value == 0)
   12b56:	b911      	cbnz	r1, 12b5e <nrf_gpio_pin_write+0x14>
    p_reg->OUTCLR = clr_mask;
   12b58:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   12b5c:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
   12b5e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   12b62:	4770      	bx	lr

00012b64 <set_ss_pin_state>:
{
   12b64:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   12b66:	7fc0      	ldrb	r0, [r0, #31]
   12b68:	28ff      	cmp	r0, #255	; 0xff
   12b6a:	d006      	beq.n	12b7a <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
   12b6c:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
   12b6e:	079b      	lsls	r3, r3, #30
   12b70:	bf58      	it	pl
   12b72:	f081 0101 	eorpl.w	r1, r1, #1
   12b76:	f7ff bfe8 	b.w	12b4a <nrf_gpio_pin_write>
}
   12b7a:	4770      	bx	lr

00012b7c <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   12b7c:	4770      	bx	lr

00012b7e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   12b7e:	b140      	cbz	r0, 12b92 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   12b80:	68c3      	ldr	r3, [r0, #12]
   12b82:	7858      	ldrb	r0, [r3, #1]
   12b84:	f010 0001 	ands.w	r0, r0, #1
   12b88:	bf1e      	ittt	ne
   12b8a:	7818      	ldrbne	r0, [r3, #0]
   12b8c:	fab0 f080 	clzne	r0, r0
   12b90:	0940      	lsrne	r0, r0, #5
}
   12b92:	4770      	bx	lr

00012b94 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b96:	4605      	mov	r5, r0
   12b98:	460e      	mov	r6, r1
	__asm__ volatile(
   12b9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   12b9e:	f3ef 8711 	mrs	r7, BASEPRI
   12ba2:	f383 8812 	msr	BASEPRI_MAX, r3
   12ba6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   12baa:	f7fe fa39 	bl	11020 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   12bae:	4631      	mov	r1, r6
   12bb0:	4604      	mov	r4, r0
   12bb2:	4628      	mov	r0, r5
   12bb4:	f7ff ff14 	bl	129e0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   12bb8:	f387 8811 	msr	BASEPRI, r7
   12bbc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   12bc0:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   12bc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12bc6:	f7fa b84f 	b.w	cc68 <z_impl_k_thread_abort>

00012bca <z_early_memset>:
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   12bca:	f000 bbc5 	b.w	13358 <memset>

00012bce <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12bce:	f000 bbb5 	b.w	1333c <memcpy>

00012bd2 <k_heap_init>:
{
   12bd2:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   12bd4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   12bd8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   12bdc:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   12bde:	f7ff ba47 	b.w	12070 <sys_heap_init>

00012be2 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   12be2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12be6:	b085      	sub	sp, #20
   12be8:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   12bec:	4607      	mov	r7, r0
   12bee:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   12bf0:	4650      	mov	r0, sl
   12bf2:	4621      	mov	r1, r4
{
   12bf4:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   12bf6:	f000 fade 	bl	131b6 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   12bfa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   12bfe:	bf08      	it	eq
   12c00:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   12c04:	4605      	mov	r5, r0
   12c06:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   12c08:	bf04      	itt	eq
   12c0a:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   12c0e:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   12c12:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   12c16:	f04f 0340 	mov.w	r3, #64	; 0x40
   12c1a:	f3ef 8411 	mrs	r4, BASEPRI
   12c1e:	f383 8812 	msr	BASEPRI_MAX, r3
   12c22:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   12c26:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   12c2a:	464a      	mov	r2, r9
   12c2c:	4641      	mov	r1, r8
   12c2e:	4638      	mov	r0, r7
   12c30:	f7ff f9b7 	bl	11fa2 <sys_heap_aligned_alloc>
   12c34:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   12c36:	f7fe fbab 	bl	11390 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   12c3a:	9b03      	ldr	r3, [sp, #12]
   12c3c:	b13b      	cbz	r3, 12c4e <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   12c3e:	f384 8811 	msr	BASEPRI, r4
   12c42:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   12c46:	4618      	mov	r0, r3
   12c48:	b005      	add	sp, #20
   12c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   12c4e:	1a28      	subs	r0, r5, r0
   12c50:	eb66 0101 	sbc.w	r1, r6, r1
   12c54:	2801      	cmp	r0, #1
   12c56:	f171 0200 	sbcs.w	r2, r1, #0
   12c5a:	dbf0      	blt.n	12c3e <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   12c5c:	e9cd 0100 	strd	r0, r1, [sp]
   12c60:	465a      	mov	r2, fp
   12c62:	4621      	mov	r1, r4
   12c64:	4650      	mov	r0, sl
   12c66:	f7fe f83d 	bl	10ce4 <z_pend_curr>
	__asm__ volatile(
   12c6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   12c6e:	f3ef 8411 	mrs	r4, BASEPRI
   12c72:	f383 8812 	msr	BASEPRI_MAX, r3
   12c76:	f3bf 8f6f 	isb	sy
	return k;
   12c7a:	e7d6      	b.n	12c2a <k_heap_aligned_alloc+0x48>

00012c7c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   12c7c:	b538      	push	{r3, r4, r5, lr}
   12c7e:	4604      	mov	r4, r0
   12c80:	f04f 0340 	mov.w	r3, #64	; 0x40
   12c84:	f3ef 8511 	mrs	r5, BASEPRI
   12c88:	f383 8812 	msr	BASEPRI_MAX, r3
   12c8c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   12c90:	f7ff f94f 	bl	11f32 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   12c94:	f104 000c 	add.w	r0, r4, #12
   12c98:	f000 fa0e 	bl	130b8 <z_unpend_all>
   12c9c:	b130      	cbz	r0, 12cac <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   12c9e:	4629      	mov	r1, r5
   12ca0:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   12ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   12ca8:	f7fe b880 	b.w	10dac <z_reschedule>
	__asm__ volatile(
   12cac:	f385 8811 	msr	BASEPRI, r5
   12cb0:	f3bf 8f6f 	isb	sy
}
   12cb4:	bd38      	pop	{r3, r4, r5, pc}

00012cb6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12cb6:	f3ef 8005 	mrs	r0, IPSR
}
   12cba:	3800      	subs	r0, #0
   12cbc:	bf18      	it	ne
   12cbe:	2001      	movne	r0, #1
   12cc0:	4770      	bx	lr

00012cc2 <z_impl_k_thread_name_set>:
}
   12cc2:	f06f 0057 	mvn.w	r0, #87	; 0x57
   12cc6:	4770      	bx	lr

00012cc8 <z_impl_k_thread_start>:
	z_sched_start(thread);
   12cc8:	f7fe b882 	b.w	10dd0 <z_sched_start>

00012ccc <z_pm_save_idle_exit>:
{
   12ccc:	b508      	push	{r3, lr}
	pm_system_resume();
   12cce:	f7f9 fbef 	bl	c4b0 <pm_system_resume>
}
   12cd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   12cd6:	f7ff be1c 	b.w	12912 <sys_clock_idle_exit>

00012cda <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   12cda:	f990 300e 	ldrsb.w	r3, [r0, #14]
   12cde:	428b      	cmp	r3, r1
   12ce0:	d001      	beq.n	12ce6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   12ce2:	f7fe b81d 	b.w	10d20 <z_set_prio>
}
   12ce6:	2000      	movs	r0, #0
   12ce8:	4770      	bx	lr

00012cea <queue_insert>:
{
   12cea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12cee:	4699      	mov	r9, r3
   12cf0:	4604      	mov	r4, r0
   12cf2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   12cf6:	460d      	mov	r5, r1
   12cf8:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   12cfa:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   12cfe:	f04f 0240 	mov.w	r2, #64	; 0x40
   12d02:	f3ef 8611 	mrs	r6, BASEPRI
   12d06:	f382 8812 	msr	BASEPRI_MAX, r2
   12d0a:	f3bf 8f6f 	isb	sy
	if (is_append) {
   12d0e:	b103      	cbz	r3, 12d12 <queue_insert+0x28>
	return list->tail;
   12d10:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   12d12:	f104 000c 	add.w	r0, r4, #12
   12d16:	f000 f989 	bl	1302c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   12d1a:	b158      	cbz	r0, 12d34 <queue_insert+0x4a>
   12d1c:	2300      	movs	r3, #0
   12d1e:	67c3      	str	r3, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   12d20:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   12d24:	f000 f94b 	bl	12fbe <z_ready_thread>
	z_reschedule(&queue->lock, key);
   12d28:	4638      	mov	r0, r7
   12d2a:	4631      	mov	r1, r6
   12d2c:	f7fe f83e 	bl	10dac <z_reschedule>
		return 0;
   12d30:	2000      	movs	r0, #0
   12d32:	e00c      	b.n	12d4e <queue_insert+0x64>
	if (alloc) {
   12d34:	f1b9 0f00 	cmp.w	r9, #0
   12d38:	d01b      	beq.n	12d72 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   12d3a:	2108      	movs	r1, #8
   12d3c:	f7fe fc20 	bl	11580 <z_thread_aligned_alloc>
		if (anode == NULL) {
   12d40:	b938      	cbnz	r0, 12d52 <queue_insert+0x68>
	__asm__ volatile(
   12d42:	f386 8811 	msr	BASEPRI, r6
   12d46:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   12d4a:	f06f 000b 	mvn.w	r0, #11
}
   12d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   12d52:	2201      	movs	r2, #1
		anode->data = data;
   12d54:	f8c0 8004 	str.w	r8, [r0, #4]
   12d58:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12d5a:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   12d5c:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   12d60:	b95d      	cbnz	r5, 12d7a <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   12d62:	6822      	ldr	r2, [r4, #0]
   12d64:	430a      	orrs	r2, r1
   12d66:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   12d68:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   12d6a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   12d6c:	b96a      	cbnz	r2, 12d8a <queue_insert+0xa0>
	list->tail = node;
   12d6e:	6060      	str	r0, [r4, #4]
}
   12d70:	e00b      	b.n	12d8a <queue_insert+0xa0>
	node->next_and_flags = flags;
   12d72:	f8c8 9000 	str.w	r9, [r8]
}
   12d76:	4640      	mov	r0, r8
   12d78:	e7ef      	b.n	12d5a <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   12d7a:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   12d7c:	2a03      	cmp	r2, #3
   12d7e:	d810      	bhi.n	12da2 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   12d80:	6001      	str	r1, [r0, #0]
	return list->tail;
   12d82:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   12d84:	b939      	cbnz	r1, 12d96 <queue_insert+0xac>
	list->head = node;
   12d86:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   12d8a:	2104      	movs	r1, #4
   12d8c:	f104 0014 	add.w	r0, r4, #20
   12d90:	f000 faaa 	bl	132e8 <z_handle_obj_poll_events>
   12d94:	e7c8      	b.n	12d28 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12d96:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   12d98:	f002 0203 	and.w	r2, r2, #3
   12d9c:	4302      	orrs	r2, r0
   12d9e:	600a      	str	r2, [r1, #0]
   12da0:	e7e5      	b.n	12d6e <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   12da2:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   12da6:	430a      	orrs	r2, r1
   12da8:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12daa:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   12dac:	f002 0203 	and.w	r2, r2, #3
   12db0:	ea40 0302 	orr.w	r3, r0, r2
   12db4:	602b      	str	r3, [r5, #0]
}
   12db6:	e7e8      	b.n	12d8a <queue_insert+0xa0>

00012db8 <z_queue_node_peek>:
{
   12db8:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   12dba:	4604      	mov	r4, r0
   12dbc:	b130      	cbz	r0, 12dcc <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12dbe:	6802      	ldr	r2, [r0, #0]
   12dc0:	0793      	lsls	r3, r2, #30
   12dc2:	d003      	beq.n	12dcc <z_queue_node_peek+0x14>
		ret = anode->data;
   12dc4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   12dc6:	b109      	cbz	r1, 12dcc <z_queue_node_peek+0x14>
			k_free(anode);
   12dc8:	f000 fa9c 	bl	13304 <k_free>
}
   12dcc:	4620      	mov	r0, r4
   12dce:	bd10      	pop	{r4, pc}

00012dd0 <k_queue_prepend>:
{
   12dd0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   12dd2:	2300      	movs	r3, #0
{
   12dd4:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   12dd6:	9300      	str	r3, [sp, #0]
   12dd8:	4619      	mov	r1, r3
   12dda:	f7ff ff86 	bl	12cea <queue_insert>
}
   12dde:	b003      	add	sp, #12
   12de0:	f85d fb04 	ldr.w	pc, [sp], #4

00012de4 <k_queue_append_list>:
{
   12de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12de8:	4681      	mov	r9, r0
   12dea:	4615      	mov	r5, r2
	CHECKIF(head == NULL || tail == NULL) {
   12dec:	460c      	mov	r4, r1
   12dee:	b3b9      	cbz	r1, 12e60 <k_queue_append_list+0x7c>
   12df0:	b3b2      	cbz	r2, 12e60 <k_queue_append_list+0x7c>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   12df2:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   12df6:	f04f 0340 	mov.w	r3, #64	; 0x40
   12dfa:	f3ef 8811 	mrs	r8, BASEPRI
   12dfe:	f383 8812 	msr	BASEPRI_MAX, r3
   12e02:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   12e06:	f100 060c 	add.w	r6, r0, #12
   12e0a:	4630      	mov	r0, r6
   12e0c:	f000 f90e 	bl	1302c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   12e10:	b168      	cbz	r0, 12e2e <k_queue_append_list+0x4a>
   12e12:	f04f 0a00 	mov.w	sl, #0
	thread->base.swap_data = data;
   12e16:	6144      	str	r4, [r0, #20]
   12e18:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   12e1c:	f000 f8cf 	bl	12fbe <z_ready_thread>
		head = *(void **)head;
   12e20:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   12e22:	4630      	mov	r0, r6
   12e24:	f000 f902 	bl	1302c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   12e28:	b144      	cbz	r4, 12e3c <k_queue_append_list+0x58>
   12e2a:	2800      	cmp	r0, #0
   12e2c:	d1f3      	bne.n	12e16 <k_queue_append_list+0x32>
	return list->tail;
   12e2e:	f8d9 3004 	ldr.w	r3, [r9, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   12e32:	b97b      	cbnz	r3, 12e54 <k_queue_append_list+0x70>
	list->head = node;
   12e34:	f8c9 4000 	str.w	r4, [r9]
	list->tail = node;
   12e38:	f8c9 5004 	str.w	r5, [r9, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   12e3c:	2104      	movs	r1, #4
   12e3e:	f109 0014 	add.w	r0, r9, #20
   12e42:	f000 fa51 	bl	132e8 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   12e46:	4638      	mov	r0, r7
   12e48:	4641      	mov	r1, r8
   12e4a:	f7fd ffaf 	bl	10dac <z_reschedule>
	return 0;
   12e4e:	2000      	movs	r0, #0
}
   12e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   12e54:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   12e56:	f002 0203 	and.w	r2, r2, #3
   12e5a:	4314      	orrs	r4, r2
   12e5c:	601c      	str	r4, [r3, #0]
}
   12e5e:	e7eb      	b.n	12e38 <k_queue_append_list+0x54>
		return -EINVAL;
   12e60:	f06f 0015 	mvn.w	r0, #21
   12e64:	e7f4      	b.n	12e50 <k_queue_append_list+0x6c>

00012e66 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   12e66:	b15a      	cbz	r2, 12e80 <z_impl_k_sem_init+0x1a>
   12e68:	428a      	cmp	r2, r1
   12e6a:	d309      	bcc.n	12e80 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   12e6c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   12e70:	e9c0 1202 	strd	r1, r2, [r0, #8]
   12e74:	e9c0 0000 	strd	r0, r0, [r0]
   12e78:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   12e7c:	2000      	movs	r0, #0
   12e7e:	4770      	bx	lr
		return -EINVAL;
   12e80:	f06f 0015 	mvn.w	r0, #21
}
   12e84:	4770      	bx	lr

00012e86 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   12e86:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   12e88:	2301      	movs	r3, #1
   12e8a:	408b      	lsls	r3, r1
   12e8c:	ea22 0303 	bic.w	r3, r2, r3
   12e90:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   12e92:	fa22 f001 	lsr.w	r0, r2, r1
}
   12e96:	f000 0001 	and.w	r0, r0, #1
   12e9a:	4770      	bx	lr

00012e9c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   12e9c:	b120      	cbz	r0, 12ea8 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   12e9e:	2200      	movs	r2, #0
   12ea0:	4611      	mov	r1, r2
   12ea2:	3088      	adds	r0, #136	; 0x88
   12ea4:	f000 b918 	b.w	130d8 <z_sched_wake>
}
   12ea8:	4770      	bx	lr

00012eaa <k_work_init>:
{
   12eaa:	b538      	push	{r3, r4, r5, lr}
   12eac:	4604      	mov	r4, r0
   12eae:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   12eb0:	2210      	movs	r2, #16
   12eb2:	2100      	movs	r1, #0
   12eb4:	f000 fa50 	bl	13358 <memset>
   12eb8:	6065      	str	r5, [r4, #4]
}
   12eba:	bd38      	pop	{r3, r4, r5, pc}

00012ebc <z_work_submit_to_queue>:
{
   12ebc:	b513      	push	{r0, r1, r4, lr}
   12ebe:	9001      	str	r0, [sp, #4]
   12ec0:	4608      	mov	r0, r1
   12ec2:	f04f 0340 	mov.w	r3, #64	; 0x40
   12ec6:	f3ef 8411 	mrs	r4, BASEPRI
   12eca:	f383 8812 	msr	BASEPRI_MAX, r3
   12ece:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   12ed2:	a901      	add	r1, sp, #4
   12ed4:	f7fd fd30 	bl	10938 <submit_to_queue_locked>
	__asm__ volatile(
   12ed8:	f384 8811 	msr	BASEPRI, r4
   12edc:	f3bf 8f6f 	isb	sy
}
   12ee0:	b002      	add	sp, #8
   12ee2:	bd10      	pop	{r4, pc}

00012ee4 <k_work_submit_to_queue>:
{
   12ee4:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   12ee6:	f7ff ffe9 	bl	12ebc <z_work_submit_to_queue>
	if (ret > 0) {
   12eea:	1e04      	subs	r4, r0, #0
   12eec:	dd09      	ble.n	12f02 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   12eee:	f04f 0340 	mov.w	r3, #64	; 0x40
   12ef2:	f3ef 8011 	mrs	r0, BASEPRI
   12ef6:	f383 8812 	msr	BASEPRI_MAX, r3
   12efa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   12efe:	f000 f8c5 	bl	1308c <z_reschedule_irqlock>
}
   12f02:	4620      	mov	r0, r4
   12f04:	bd10      	pop	{r4, pc}

00012f06 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   12f06:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   12f0a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   12f0c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   12f0e:	2300      	movs	r3, #0
	node->prev = NULL;
   12f10:	e9c0 3300 	strd	r3, r3, [r0]
}
   12f14:	4770      	bx	lr

00012f16 <unpend_thread_no_timeout>:
{
   12f16:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   12f18:	f7ff fff5 	bl	12f06 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   12f1c:	7b43      	ldrb	r3, [r0, #13]
   12f1e:	f023 0302 	bic.w	r3, r3, #2
   12f22:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   12f24:	2300      	movs	r3, #0
   12f26:	6083      	str	r3, [r0, #8]
}
   12f28:	bd08      	pop	{r3, pc}

00012f2a <z_thread_timeout>:
{
   12f2a:	b510      	push	{r4, lr}
   12f2c:	4601      	mov	r1, r0
   12f2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12f32:	f3ef 8411 	mrs	r4, BASEPRI
   12f36:	f383 8812 	msr	BASEPRI_MAX, r3
   12f3a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   12f3e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   12f42:	f013 0f28 	tst.w	r3, #40	; 0x28
   12f46:	d10d      	bne.n	12f64 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   12f48:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   12f4c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   12f4e:	b10b      	cbz	r3, 12f54 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   12f50:	f7ff ffe1 	bl	12f16 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   12f54:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   12f58:	f023 0314 	bic.w	r3, r3, #20
   12f5c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   12f60:	f7fd fde8 	bl	10b34 <ready_thread>
	__asm__ volatile(
   12f64:	f384 8811 	msr	BASEPRI, r4
   12f68:	f3bf 8f6f 	isb	sy
}
   12f6c:	bd10      	pop	{r4, pc}

00012f6e <add_to_waitq_locked>:
{
   12f6e:	b538      	push	{r3, r4, r5, lr}
   12f70:	4604      	mov	r4, r0
   12f72:	460d      	mov	r5, r1
	unready_thread(thread);
   12f74:	f7fd fe12 	bl	10b9c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   12f78:	7b63      	ldrb	r3, [r4, #13]
   12f7a:	f043 0302 	orr.w	r3, r3, #2
   12f7e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   12f80:	b1e5      	cbz	r5, 12fbc <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   12f82:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   12f84:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12f86:	429d      	cmp	r5, r3
   12f88:	d109      	bne.n	12f9e <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   12f8a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   12f8c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   12f90:	601c      	str	r4, [r3, #0]
	list->tail = node;
   12f92:	606c      	str	r4, [r5, #4]
}
   12f94:	e012      	b.n	12fbc <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   12f96:	686a      	ldr	r2, [r5, #4]
   12f98:	4293      	cmp	r3, r2
   12f9a:	d0f6      	beq.n	12f8a <add_to_waitq_locked+0x1c>
   12f9c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12f9e:	2b00      	cmp	r3, #0
   12fa0:	d0f3      	beq.n	12f8a <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   12fa2:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   12fa6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   12faa:	428a      	cmp	r2, r1
   12fac:	d0f3      	beq.n	12f96 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   12fae:	4291      	cmp	r1, r2
   12fb0:	ddf1      	ble.n	12f96 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   12fb2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   12fb4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   12fb8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   12fba:	605c      	str	r4, [r3, #4]
}
   12fbc:	bd38      	pop	{r3, r4, r5, pc}

00012fbe <z_ready_thread>:
{
   12fbe:	b510      	push	{r4, lr}
	__asm__ volatile(
   12fc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   12fc4:	f3ef 8411 	mrs	r4, BASEPRI
   12fc8:	f383 8812 	msr	BASEPRI_MAX, r3
   12fcc:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   12fd0:	f7fd fdb0 	bl	10b34 <ready_thread>
	__asm__ volatile(
   12fd4:	f384 8811 	msr	BASEPRI, r4
   12fd8:	f3bf 8f6f 	isb	sy
}
   12fdc:	bd10      	pop	{r4, pc}

00012fde <z_unpend_thread_no_timeout>:
{
   12fde:	b508      	push	{r3, lr}
	__asm__ volatile(
   12fe0:	f04f 0340 	mov.w	r3, #64	; 0x40
   12fe4:	f3ef 8111 	mrs	r1, BASEPRI
   12fe8:	f383 8812 	msr	BASEPRI_MAX, r3
   12fec:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   12ff0:	f7ff ff91 	bl	12f16 <unpend_thread_no_timeout>
	__asm__ volatile(
   12ff4:	f381 8811 	msr	BASEPRI, r1
   12ff8:	f3bf 8f6f 	isb	sy
}
   12ffc:	bd08      	pop	{r3, pc}

00012ffe <z_unpend1_no_timeout>:
{
   12ffe:	b508      	push	{r3, lr}
   13000:	4603      	mov	r3, r0
	__asm__ volatile(
   13002:	f04f 0240 	mov.w	r2, #64	; 0x40
   13006:	f3ef 8111 	mrs	r1, BASEPRI
   1300a:	f382 8812 	msr	BASEPRI_MAX, r2
   1300e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   13012:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13014:	4283      	cmp	r3, r0
   13016:	d007      	beq.n	13028 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   13018:	b108      	cbz	r0, 1301e <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   1301a:	f7ff ff7c 	bl	12f16 <unpend_thread_no_timeout>
	__asm__ volatile(
   1301e:	f381 8811 	msr	BASEPRI, r1
   13022:	f3bf 8f6f 	isb	sy
}
   13026:	bd08      	pop	{r3, pc}
   13028:	2000      	movs	r0, #0
   1302a:	e7f8      	b.n	1301e <z_unpend1_no_timeout+0x20>

0001302c <z_unpend_first_thread>:
{
   1302c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1302e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13032:	f3ef 8511 	mrs	r5, BASEPRI
   13036:	f383 8812 	msr	BASEPRI_MAX, r3
   1303a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1303e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13040:	42a0      	cmp	r0, r4
   13042:	d00d      	beq.n	13060 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   13044:	b134      	cbz	r4, 13054 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   13046:	4620      	mov	r0, r4
   13048:	f7ff ff65 	bl	12f16 <unpend_thread_no_timeout>
   1304c:	f104 0018 	add.w	r0, r4, #24
   13050:	f000 f865 	bl	1311e <z_abort_timeout>
	__asm__ volatile(
   13054:	f385 8811 	msr	BASEPRI, r5
   13058:	f3bf 8f6f 	isb	sy
}
   1305c:	4620      	mov	r0, r4
   1305e:	bd38      	pop	{r3, r4, r5, pc}
   13060:	2400      	movs	r4, #0
   13062:	e7f7      	b.n	13054 <z_unpend_first_thread+0x28>

00013064 <z_unpend_thread>:
{
   13064:	b510      	push	{r4, lr}
	__asm__ volatile(
   13066:	f04f 0340 	mov.w	r3, #64	; 0x40
   1306a:	f3ef 8411 	mrs	r4, BASEPRI
   1306e:	f383 8812 	msr	BASEPRI_MAX, r3
   13072:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   13076:	f7ff ff4e 	bl	12f16 <unpend_thread_no_timeout>
	__asm__ volatile(
   1307a:	f384 8811 	msr	BASEPRI, r4
   1307e:	f3bf 8f6f 	isb	sy
}
   13082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13086:	3018      	adds	r0, #24
   13088:	f000 b849 	b.w	1311e <z_abort_timeout>

0001308c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1308c:	4603      	mov	r3, r0
   1308e:	b920      	cbnz	r0, 1309a <z_reschedule_irqlock+0xe>
   13090:	f3ef 8205 	mrs	r2, IPSR
   13094:	b90a      	cbnz	r2, 1309a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   13096:	f7f9 bba5 	b.w	c7e4 <arch_swap>
   1309a:	f383 8811 	msr	BASEPRI, r3
   1309e:	f3bf 8f6f 	isb	sy
}
   130a2:	4770      	bx	lr

000130a4 <z_reschedule_unlocked>:
	__asm__ volatile(
   130a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   130a8:	f3ef 8011 	mrs	r0, BASEPRI
   130ac:	f383 8812 	msr	BASEPRI_MAX, r3
   130b0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   130b4:	f7ff bfea 	b.w	1308c <z_reschedule_irqlock>

000130b8 <z_unpend_all>:
{
   130b8:	b538      	push	{r3, r4, r5, lr}
   130ba:	4605      	mov	r5, r0
	int need_sched = 0;
   130bc:	2000      	movs	r0, #0
	return list->head == list;
   130be:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   130c0:	42a5      	cmp	r5, r4
   130c2:	d000      	beq.n	130c6 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   130c4:	b904      	cbnz	r4, 130c8 <z_unpend_all+0x10>
}
   130c6:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   130c8:	4620      	mov	r0, r4
   130ca:	f7ff ffcb 	bl	13064 <z_unpend_thread>
		z_ready_thread(thread);
   130ce:	4620      	mov	r0, r4
   130d0:	f7ff ff75 	bl	12fbe <z_ready_thread>
		need_sched = 1;
   130d4:	2001      	movs	r0, #1
   130d6:	e7f2      	b.n	130be <z_unpend_all+0x6>

000130d8 <z_sched_wake>:
{
   130d8:	b538      	push	{r3, r4, r5, lr}
   130da:	f04f 0340 	mov.w	r3, #64	; 0x40
   130de:	f3ef 8511 	mrs	r5, BASEPRI
   130e2:	f383 8812 	msr	BASEPRI_MAX, r3
   130e6:	f3bf 8f6f 	isb	sy
	return list->head == list;
   130ea:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   130ec:	42a0      	cmp	r0, r4
   130ee:	d012      	beq.n	13116 <z_sched_wake+0x3e>
		if (thread != NULL) {
   130f0:	b19c      	cbz	r4, 1311a <z_sched_wake+0x42>
   130f2:	67e1      	str	r1, [r4, #124]	; 0x7c
   130f4:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   130f6:	4620      	mov	r0, r4
   130f8:	f7ff ff0d 	bl	12f16 <unpend_thread_no_timeout>
   130fc:	f104 0018 	add.w	r0, r4, #24
   13100:	f000 f80d 	bl	1311e <z_abort_timeout>
			ready_thread(thread);
   13104:	4620      	mov	r0, r4
   13106:	f7fd fd15 	bl	10b34 <ready_thread>
			ret = true;
   1310a:	2001      	movs	r0, #1
	__asm__ volatile(
   1310c:	f385 8811 	msr	BASEPRI, r5
   13110:	f3bf 8f6f 	isb	sy
}
   13114:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   13116:	2000      	movs	r0, #0
   13118:	e7f8      	b.n	1310c <z_sched_wake+0x34>
   1311a:	4620      	mov	r0, r4
   1311c:	e7f6      	b.n	1310c <z_sched_wake+0x34>

0001311e <z_abort_timeout>:
{
   1311e:	b510      	push	{r4, lr}
	__asm__ volatile(
   13120:	f04f 0240 	mov.w	r2, #64	; 0x40
   13124:	f3ef 8411 	mrs	r4, BASEPRI
   13128:	f382 8812 	msr	BASEPRI_MAX, r2
   1312c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   13130:	6803      	ldr	r3, [r0, #0]
   13132:	b13b      	cbz	r3, 13144 <z_abort_timeout+0x26>
			remove_timeout(to);
   13134:	f7fe f838 	bl	111a8 <remove_timeout>
			ret = 0;
   13138:	2000      	movs	r0, #0
	__asm__ volatile(
   1313a:	f384 8811 	msr	BASEPRI, r4
   1313e:	f3bf 8f6f 	isb	sy
}
   13142:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   13144:	f06f 0015 	mvn.w	r0, #21
   13148:	e7f7      	b.n	1313a <z_abort_timeout+0x1c>

0001314a <z_get_next_timeout_expiry>:
{
   1314a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1314c:	f04f 0340 	mov.w	r3, #64	; 0x40
   13150:	f3ef 8411 	mrs	r4, BASEPRI
   13154:	f383 8812 	msr	BASEPRI_MAX, r3
   13158:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1315c:	f7fd fffc 	bl	11158 <next_timeout>
	__asm__ volatile(
   13160:	f384 8811 	msr	BASEPRI, r4
   13164:	f3bf 8f6f 	isb	sy
}
   13168:	bd10      	pop	{r4, pc}

0001316a <z_set_timeout_expiry>:
{
   1316a:	b570      	push	{r4, r5, r6, lr}
   1316c:	4604      	mov	r4, r0
   1316e:	460d      	mov	r5, r1
	__asm__ volatile(
   13170:	f04f 0340 	mov.w	r3, #64	; 0x40
   13174:	f3ef 8611 	mrs	r6, BASEPRI
   13178:	f383 8812 	msr	BASEPRI_MAX, r3
   1317c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   13180:	f7fd ffea 	bl	11158 <next_timeout>
			      || (ticks <= next_to);
   13184:	2801      	cmp	r0, #1
   13186:	dd07      	ble.n	13198 <z_set_timeout_expiry+0x2e>
   13188:	42a0      	cmp	r0, r4
   1318a:	db05      	blt.n	13198 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1318c:	42a0      	cmp	r0, r4
   1318e:	4629      	mov	r1, r5
   13190:	bfa8      	it	ge
   13192:	4620      	movge	r0, r4
   13194:	f7fb fe44 	bl	ee20 <sys_clock_set_timeout>
	__asm__ volatile(
   13198:	f386 8811 	msr	BASEPRI, r6
   1319c:	f3bf 8f6f 	isb	sy
}
   131a0:	bd70      	pop	{r4, r5, r6, pc}

000131a2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   131a2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   131a4:	f7fe f8f4 	bl	11390 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   131a8:	bd08      	pop	{r3, pc}

000131aa <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   131aa:	f7fe b8f1 	b.w	11390 <sys_clock_tick_get>

000131ae <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   131ae:	b108      	cbz	r0, 131b4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   131b0:	f7f9 be4e 	b.w	ce50 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   131b4:	4770      	bx	lr

000131b6 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   131b6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   131ba:	bf08      	it	eq
   131bc:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   131c0:	b538      	push	{r3, r4, r5, lr}
   131c2:	460c      	mov	r4, r1
   131c4:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   131c6:	d014      	beq.n	131f2 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   131c8:	4308      	orrs	r0, r1
   131ca:	d103      	bne.n	131d4 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   131cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   131d0:	f7fe b8de 	b.w	11390 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   131d4:	f06f 0001 	mvn.w	r0, #1
   131d8:	1b40      	subs	r0, r0, r5
   131da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   131de:	eb63 0101 	sbc.w	r1, r3, r1
   131e2:	2900      	cmp	r1, #0
   131e4:	da04      	bge.n	131f0 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   131e6:	f7fe f8d3 	bl	11390 <sys_clock_tick_get>
   131ea:	1940      	adds	r0, r0, r5
   131ec:	eb41 0104 	adc.w	r1, r1, r4
}
   131f0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   131f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   131f6:	4601      	mov	r1, r0
   131f8:	e7fa      	b.n	131f0 <sys_clock_timeout_end_calc+0x3a>

000131fa <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   131fa:	b510      	push	{r4, lr}
   131fc:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   131fe:	f7ff ff8e 	bl	1311e <z_abort_timeout>

	if (inactive) {
   13202:	b9b0      	cbnz	r0, 13232 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   13204:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13206:	b10b      	cbz	r3, 1320c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   13208:	4620      	mov	r0, r4
   1320a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1320c:	f104 0018 	add.w	r0, r4, #24
   13210:	f7ff fef5 	bl	12ffe <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   13214:	b168      	cbz	r0, 13232 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   13216:	f7ff fed2 	bl	12fbe <z_ready_thread>
	__asm__ volatile(
   1321a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1321e:	f3ef 8011 	mrs	r0, BASEPRI
   13222:	f383 8812 	msr	BASEPRI_MAX, r3
   13226:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1322a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1322e:	f7ff bf2d 	b.w	1308c <z_reschedule_irqlock>
   13232:	bd10      	pop	{r4, pc}

00013234 <signal_poll_event>:
{
   13234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   13238:	6884      	ldr	r4, [r0, #8]
{
   1323a:	4605      	mov	r5, r0
   1323c:	460e      	mov	r6, r1
	if (poller != NULL) {
   1323e:	b144      	cbz	r4, 13252 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   13240:	7863      	ldrb	r3, [r4, #1]
   13242:	2b01      	cmp	r3, #1
   13244:	d12e      	bne.n	132a4 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   13246:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1324a:	f013 0302 	ands.w	r3, r3, #2
   1324e:	d10a      	bne.n	13266 <signal_poll_event+0x32>
		poller->is_polling = false;
   13250:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   13252:	68eb      	ldr	r3, [r5, #12]
   13254:	f3c3 3286 	ubfx	r2, r3, #14, #7
   13258:	4316      	orrs	r6, r2
	event->poller = NULL;
   1325a:	2000      	movs	r0, #0
	event->state |= state;
   1325c:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   13260:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   13262:	60eb      	str	r3, [r5, #12]
	return retcode;
   13264:	e03e      	b.n	132e4 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   13266:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1326a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1326e:	bf08      	it	eq
   13270:	f112 0f02 	cmneq.w	r2, #2
   13274:	d032      	beq.n	132dc <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   13276:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1327a:	4640      	mov	r0, r8
   1327c:	f7ff fef2 	bl	13064 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   13280:	2e08      	cmp	r6, #8
   13282:	bf0c      	ite	eq
   13284:	f06f 0303 	mvneq.w	r3, #3
   13288:	2300      	movne	r3, #0
   1328a:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1328c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   13290:	06db      	lsls	r3, r3, #27
   13292:	d109      	bne.n	132a8 <signal_poll_event+0x74>
   13294:	f854 7c48 	ldr.w	r7, [r4, #-72]
   13298:	b937      	cbnz	r7, 132a8 <signal_poll_event+0x74>
	z_ready_thread(thread);
   1329a:	4640      	mov	r0, r8
   1329c:	f7ff fe8f 	bl	12fbe <z_ready_thread>
		poller->is_polling = false;
   132a0:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   132a2:	e7d6      	b.n	13252 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   132a4:	2b02      	cmp	r3, #2
   132a6:	d001      	beq.n	132ac <signal_poll_event+0x78>
		poller->is_polling = false;
   132a8:	2300      	movs	r3, #0
   132aa:	e7d1      	b.n	13250 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   132ac:	7823      	ldrb	r3, [r4, #0]
   132ae:	2b00      	cmp	r3, #0
   132b0:	d0cf      	beq.n	13252 <signal_poll_event+0x1e>
   132b2:	f854 7c04 	ldr.w	r7, [r4, #-4]
   132b6:	2f00      	cmp	r7, #0
   132b8:	d0f2      	beq.n	132a0 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   132ba:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   132be:	f1a4 0914 	sub.w	r9, r4, #20
   132c2:	f104 0014 	add.w	r0, r4, #20
   132c6:	f7ff ff2a 	bl	1311e <z_abort_timeout>
		twork->poll_result = 0;
   132ca:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   132ce:	4649      	mov	r1, r9
   132d0:	4638      	mov	r0, r7
   132d2:	f7ff fdf3 	bl	12ebc <z_work_submit_to_queue>
		poller->is_polling = false;
   132d6:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   132da:	e7ba      	b.n	13252 <signal_poll_event+0x1e>
		poller->is_polling = false;
   132dc:	2300      	movs	r3, #0
   132de:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   132e0:	f06f 000a 	mvn.w	r0, #10
}
   132e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000132e8 <z_handle_obj_poll_events>:
{
   132e8:	4603      	mov	r3, r0
	return list->head == list;
   132ea:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   132ec:	4283      	cmp	r3, r0
   132ee:	d008      	beq.n	13302 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   132f0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   132f4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   132f6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   132f8:	2300      	movs	r3, #0
	node->prev = NULL;
   132fa:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   132fe:	f7ff bf99 	b.w	13234 <signal_poll_event>
}
   13302:	4770      	bx	lr

00013304 <k_free>:
	if (ptr != NULL) {
   13304:	b120      	cbz	r0, 13310 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   13306:	1f01      	subs	r1, r0, #4
   13308:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1330c:	f7ff bcb6 	b.w	12c7c <k_heap_free>
}
   13310:	4770      	bx	lr

00013312 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   13312:	4770      	bx	lr

00013314 <fabs>:
   13314:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   13318:	4619      	mov	r1, r3
   1331a:	4770      	bx	lr

0001331c <memcmp>:
   1331c:	b510      	push	{r4, lr}
   1331e:	3901      	subs	r1, #1
   13320:	4402      	add	r2, r0
   13322:	4290      	cmp	r0, r2
   13324:	d101      	bne.n	1332a <memcmp+0xe>
   13326:	2000      	movs	r0, #0
   13328:	e005      	b.n	13336 <memcmp+0x1a>
   1332a:	7803      	ldrb	r3, [r0, #0]
   1332c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   13330:	42a3      	cmp	r3, r4
   13332:	d001      	beq.n	13338 <memcmp+0x1c>
   13334:	1b18      	subs	r0, r3, r4
   13336:	bd10      	pop	{r4, pc}
   13338:	3001      	adds	r0, #1
   1333a:	e7f2      	b.n	13322 <memcmp+0x6>

0001333c <memcpy>:
   1333c:	440a      	add	r2, r1
   1333e:	4291      	cmp	r1, r2
   13340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   13344:	d100      	bne.n	13348 <memcpy+0xc>
   13346:	4770      	bx	lr
   13348:	b510      	push	{r4, lr}
   1334a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1334e:	f803 4f01 	strb.w	r4, [r3, #1]!
   13352:	4291      	cmp	r1, r2
   13354:	d1f9      	bne.n	1334a <memcpy+0xe>
   13356:	bd10      	pop	{r4, pc}

00013358 <memset>:
   13358:	4402      	add	r2, r0
   1335a:	4603      	mov	r3, r0
   1335c:	4293      	cmp	r3, r2
   1335e:	d100      	bne.n	13362 <memset+0xa>
   13360:	4770      	bx	lr
   13362:	f803 1b01 	strb.w	r1, [r3], #1
   13366:	e7f9      	b.n	1335c <memset+0x4>

00013368 <strnlen>:
   13368:	b510      	push	{r4, lr}
   1336a:	4602      	mov	r2, r0
   1336c:	4401      	add	r1, r0
   1336e:	428a      	cmp	r2, r1
   13370:	4613      	mov	r3, r2
   13372:	d003      	beq.n	1337c <strnlen+0x14>
   13374:	781c      	ldrb	r4, [r3, #0]
   13376:	3201      	adds	r2, #1
   13378:	2c00      	cmp	r4, #0
   1337a:	d1f8      	bne.n	1336e <strnlen+0x6>
   1337c:	1a18      	subs	r0, r3, r0
   1337e:	bd10      	pop	{r4, pc}
